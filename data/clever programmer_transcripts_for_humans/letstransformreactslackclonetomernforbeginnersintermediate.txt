With timestamps:

00:00 - how's it going everybody hope you guys
00:02 - and you guys are doing
00:04 - good this is david from cleverprogrammer
00:07 - and today
00:09 - we are gonna be building the
00:12 - slack mern clone so guys today is going
00:15 - to be
00:16 - a bit of an intermediate level um
00:20 - and i'm trying to make it like a bridge
00:23 - between basic
00:24 - and and the intermediate level so
00:28 - if you are new if you are uh a beginner
00:31 - coding this is for you but if you uh
00:34 - try to figure out how to migrate data
00:37 - and and your application from firebase
00:40 - when you actually like graduate from
00:43 - firebase because
00:44 - you know we always say that uh
00:47 - first let's go with always with firebase
00:50 - and
00:50 - once the functionality is not enough
00:53 - then we recommend highly to go for
00:57 - mirn and stuff like that so
01:00 - today i'm gonna be showing you guys how
01:04 - i actually transfer all these
01:06 - applications
01:07 - and then later on we will
01:10 - uh work on
01:13 - stuff like completely mean builds and
01:17 - either
01:17 - uh we have lots of buffers and
01:21 - internet stuff going on let me
01:24 - quickly set up my uh
01:27 - moderner device here so
01:31 - i see that some of you guys see that
01:33 - buffering every three second
01:36 - that that's actually strange i uh i'm
01:39 - pretty much like
01:41 - [Music]
01:43 - oh my god that doesn't sound good
01:48 - okay let me quickly quickly check it but
01:51 - it should actually be good uh for me
01:54 - even youtube says that stream health is
01:57 - pretty good so
02:02 - let's quickly refresh on that i mean
02:05 - we should be we should be good i'm
02:07 - hardwired to
02:09 - to the internet um
02:13 - that looks crazy okay
02:16 - uh
02:20 - please well yeah i'm watching the
02:21 - comments okay i'm checking it
02:25 - okay so the buffering is bad
02:28 - okay let me let me quickly look at here
02:31 - and i mean we are streaming okay i just
02:35 - turned off
02:36 - high definition uh and i have a control
02:42 - no no no i am i'm literally streaming in
02:45 - 1080p
02:46 - 60 frames per sec uh we should be good i
02:49 - have it over here
02:51 - and things are looking pretty good from
02:53 - here
02:55 - okay we the internet should be good
02:57 - internet should be good
02:58 - my upload is crazy okay
03:03 - okay so guys welcome everybody who is
03:06 - joining in who is new
03:07 - always uh wait guys let me know if you
03:10 - are new to this channel
03:11 - or if this is a mermaid that uh that is
03:14 - kind of like a practice for you
03:17 - okay it says it's okay now uh
03:20 - all right so then we should be good
03:24 - okay let's go how's it going rikiya what
03:27 - is up
03:28 - uh so uh we should okay
03:32 - everybody says it's good now okay that
03:34 - that that's cool that's cool
03:37 - all right so who is excited to build
03:40 - the mern uh slack clone today
03:44 - and put this uh thing on their portfolio
03:48 - and learn how to actually uh migrate
03:52 - your application from firebase
03:55 - to a fully functional build all right
03:58 - let me know guys
03:59 - we are 182 strong
04:02 - oh my god we are almost at 200 okay
04:05 - we are growing we are growing we are at
04:08 - 82 likes guys i think
04:10 - before we even started we can get this
04:13 - number
04:14 - up to a hundred uh we should be
04:17 - good can you show a demo please yes i
04:20 - will uh in just a sec
04:22 - uh okay i see the demand uh
04:25 - priyansha wants an asana clone okay
04:30 - hey lucy what's up here oh that's so
04:33 - awesome
04:33 - really appreciate that and guys this is
04:36 - literally the mentality that will get
04:38 - you forward
04:39 - that no matter how many how much work
04:41 - you got you still
04:42 - come here and put in the work as always
04:45 - all right we got new people in the house
04:50 - welcome to the family and all right okay
04:54 - um and it's good on it okay and
04:58 - perfect how's it going everybody what is
05:01 - up nitin
05:03 - um guys we should be good
05:07 - we really should be good this is going
05:10 - 1080p next to me okay i see rookie eyes
05:13 - are ready
05:16 - all right so
05:19 - uh we are 200 people strong
05:23 - and i think guys if you're ready
05:26 - let me know in the chat first but if if
05:28 - you guys are ready
05:30 - we can get started right now
05:34 - i want to make it like a dynamic a bit
05:36 - of a faster build
05:38 - so buckle up get your coffees get your
05:41 - water ready
05:42 - we will be learning a lot today we will
05:45 - be
05:46 - um transforming the
05:49 - uh working slack clone which was based
05:52 - on firebase
05:53 - and we will make it a fully functional
05:55 - mern build we are 205 concurrent viewers
06:01 - welcome everybody thank you so much for
06:03 - being here
06:04 - with us and guys if you are getting
06:06 - value out of this channel
06:08 - smash the like button so that we can get
06:11 - this and any other videos out and we
06:14 - are 111
06:17 - likes already that's super cool guys
06:20 - awesome okay and
06:24 - okay let me quickly check the comments
06:27 - and i think
06:28 - we can get started
06:33 - yeah that's that's literally the goal uh
06:36 - what ricky i just pointed out
06:37 - right here uh we are working on
06:41 - putting as much content out to you guys
06:43 - as possible
06:45 - uh so yeah that's that's pretty much it
06:49 - so okay
06:53 - that that's that's exactly it like
06:55 - really okay
06:57 - so with that said i think i'm go oh my
07:00 - god
07:00 - we just got our first donation thank you
07:03 - so much
07:04 - waffy mohammed uh it's a lovely two
07:07 - dollar donation thanks for the hard work
07:09 - and the great job bro
07:10 - thank you so much really appreciate you
07:12 - brother that you're staying here and
07:14 - dropping these awesome donations
07:16 - okay hey good morning
07:20 - we are ready let's go says ferox awesome
07:25 - we got super pumped argen in the house
07:28 - and i think we can start
07:32 - getting it okay guys
07:35 - let me know in the chat who is ready to
07:38 - start rocking today
07:39 - who is ready to build the uh
07:42 - mern what is it slack clone
07:46 - let me know okay so with that said oh
07:49 - we got nero in the house what's up so
07:52 - with that said
07:53 - let's get straight into building today's
07:57 - build okay so uh
08:00 - let me quickly go ahead and share my
08:03 - screen
08:05 - we should be good all right so
08:09 - guys if you're watching this uh down
08:12 - below in the description there should be
08:14 - a uh
08:17 - hey let's go there that that's it
08:20 - all right so we should be you guys
08:23 - should be able to see a
08:26 - link down below in the description
08:29 - so this is the uh starter project for
08:33 - today
08:35 - and let's go ahead and everybody go to
08:37 - this link
08:39 - over here there is the green button
08:41 - that's what you want to click
08:42 - copy the link and you can go ahead and
08:45 - close that
08:46 - and what you need to do is first name
08:49 - your folder
08:50 - correctly because if you're missing a
08:53 - couple of letters that's just not slack
08:55 - so with that said let's go ahead open up
08:58 - a terminal which i'm gonna zoom in so
09:00 - that you guys can actually see
09:02 - it and we just uh we got this question
09:06 - so what is mirn
09:07 - uh mern actually stands for mongodb
09:10 - express js react.js and node.js which is
09:14 - the stack
09:15 - for today's build okay
09:18 - all right um
09:22 - guys if you're dropping questions like
09:24 - can you answer my questions
09:26 - i probably will not be able to answer
09:28 - those because they are just not there
09:30 - because they are way up uh if you drop
09:33 - it
09:33 - a couple of times uh i will make sure
09:36 - that i will answer it
09:38 - and we just got our second donation by
09:41 - shreya
09:41 - raj thank you so much brother for
09:43 - staying here and thank you so much for
09:45 - these lovely donations
09:47 - let's smash that like button and we
09:49 - appreciate you brother so
09:51 - let's go all right
09:55 - so what i will be doing is pretty much
09:58 - go ahead and
09:59 - zoom into this uh terminal a bit
10:02 - and what you guys can do is go ahead and
10:05 - clone it but first let's actually add a
10:08 - folder
10:10 - i think we need to add a folder let
10:12 - let's test it out
10:14 - are we going to do only becca and stuff
10:16 - tonight yes srimanki we
10:18 - are just going to be working with
10:19 - backend tonight okay
10:21 - so i will just add a folder um
10:26 - here and let's call it slack
10:29 - oops backhand nice
10:33 - and let's actually cd into that
10:38 - and once i'm in there i will
10:42 - um i will literally go ahead and type in
10:46 - git uh clone and just paste the link
10:49 - that i got
10:50 - from uh got from github
10:53 - and om gupta asks if is vue.js
10:57 - i thought it's easier to learn it's not
11:00 - ujs we are not going to worry about
11:02 - front-end stuff today we are just going
11:03 - to be transforming
11:04 - a a working front-end application
11:08 - that was built by sunny and qazi
11:11 - back a couple of months ago and we would
11:13 - turn that into a full stack build
11:15 - because
11:16 - that was a platform as a service plus a
11:19 - front-end build so that was a
11:20 - pretty lightweight stuff but today we
11:23 - are going to be taking it to the next
11:24 - level and we are teaching
11:26 - these stuff to you guys so that uh
11:31 - so that you can go ahead and and have
11:34 - this knowledge on your portfolio
11:36 - as well and we are at a 230 concurrent
11:40 - viewers
11:41 - thank you so much guys for being here
11:44 - and let's
11:44 - actually get started
11:48 - [Music]
11:49 - okay uh let's go ahead and
11:53 - and the other thing that i want to do
11:55 - today is actually
11:57 - um oh my god this wasn't even the back
12:01 - end which i
12:01 - uh cloned so the front end was the uh
12:07 - so the front end was the actual package
12:09 - that
12:10 - we cloned from github
12:14 - so let's actually copy and delete this
12:16 - one
12:17 - and paste it in here and because i
12:19 - created the back-end folder
12:21 - let's rename it back to backend
12:25 - all right so what we will do is oh my
12:27 - god
12:28 - we just got another lovely donation by
12:30 - def tech
12:31 - uh it's another hundred rupees thank you
12:34 - so much
12:35 - we really appreciate you and thank you
12:37 - so much for all these lovely donations
12:39 - and hey we just got uh atharva's
12:42 - donations
12:43 - as well uh thank you so much atharva
12:48 - really appreciate you too brother and
12:50 - great job bro and we want david merchand
12:52 - what really
12:56 - okay we can look into that too all right
13:01 - okay so with that said let's go ahead
13:05 - and open up a wii s code in this folder
13:09 - so what i will do is just go up a folder
13:12 - and say code space dot
13:17 - uh we yeah and that should bring
13:20 - up a vs code here we go so we have the
13:22 - back-end folder which is
13:24 - completely empty and we got the starter
13:27 - project right
13:27 - here which is actually a fully
13:30 - functioning
13:31 - react uh uh app
13:34 - i'm serious about merge l o l by
13:38 - oh my god okay
13:42 - so uh by the way yesterday's telegram
13:46 - clone was cool with perez
13:48 - oh my god we are so happy for him uh
13:51 - to doing these lives he is going to
13:54 - start coming
13:55 - on our youtube channel and that is going
13:57 - to be some serious stuff
13:59 - okay uh yeah let's actually
14:02 - dive into this so i will zoom into this
14:05 - as well
14:06 - hopefully okay here we go
14:10 - uh this actually might be a bit too much
14:13 - and so what we will pretty much do is we
14:16 - have the front end ready
14:17 - working um what we will do
14:21 - is go over here and
14:25 - go up a folder and let's actually
14:29 - go into the starter project so that we
14:32 - can
14:33 - go ahead and i always make typos today i
14:36 - guess
14:37 - so we can go ahead and say every uh
14:41 - literally download everything all the
14:43 - dependencies that we actually need for
14:45 - this
14:46 - uh front-end project to work so we will
14:48 - just type in mpmi
14:50 - and saad asks is if there is any
14:53 - alternative for
14:54 - mongoose yes there actually is i mean
14:57 - you can
14:58 - literally um go and connect directly to
15:02 - mongodb
15:02 - but i just don't recommend doing that
15:05 - because that's a lot more
15:07 - uh of a pain in the neck uh so that's
15:09 - why we are using mangoes
15:11 - but let me know why you ask that and why
15:14 - you don't like mangoes
15:16 - and we can continue this conversation
15:20 - okay
15:24 - yeah let's actually switch the screens
15:28 - back
15:28 - so while this is doing the uh
15:31 - installing uh we will go ahead
15:36 - and create our backend project as well
15:40 - so let's actually go into our back-end
15:43 - folder
15:45 - and guys let me know if you are excited
15:47 - for today's build and
15:49 - if you guys are pumped to transform
15:52 - the slack clone to a fully functioning
15:55 - mern
15:56 - project so with that said
15:59 - we will say mpm init and we will go
16:03 - ahead
16:03 - and okay we got the package name version
16:06 - description
16:08 - entry point should always be server.js
16:12 - test command git uh keywords author
16:17 - dr mirn perfect license and there we go
16:21 - we also need to go ahead and initialize
16:24 - the
16:24 - version control we have a video from a
16:27 - couple of weeks back
16:28 - check it out if you don't know what kit
16:30 - is and if you want to get started
16:31 - because
16:32 - we literally teach you the best
16:35 - and the easiest way to learn how to use
16:39 - git all right uh so with that said
16:43 - uh let's actually initialize the version
16:46 - control there we go and the
16:48 - backend project will require the
16:51 - following
16:52 - uh dependencies so
16:55 - we will on the back-end side we will
16:57 - have node.js which is uh
16:59 - a javascript runtime we will also have
17:02 - the express js
17:03 - which we need to install separately and
17:06 - that
17:06 - is actually gonna be uh the server side
17:10 - javascript that we are gonna be using
17:12 - today
17:13 - uh after we will alway also use
17:16 - uh mongodb which will be today's nosql
17:20 - database which is super easy to set
17:22 - up and then we will connect
17:25 - to mongodb with uh
17:30 - make sure uh we will connect to the
17:33 - mango db
17:34 - with mongoose okay so
17:38 - let's actually go ahead and install all
17:40 - those stuff
17:41 - we will go ahead and type in mpmi
17:43 - mongoose
17:45 - express and we will also use
17:49 - pusher to make the whole thing uh
17:53 - real time and we will also install the
17:56 - course headers
17:57 - dependency okay so
18:00 - that's gonna be pretty fast and once we
18:04 - are done with that
18:05 - we can go ahead and we can go ahead
18:08 - and um have the whole thing
18:12 - ready everybody says buffering again i
18:16 - don't know why you guys say it
18:20 - we should we should be good yeah
18:22 - everything is good
18:24 - okay so
18:28 - on that let's go into our project uh
18:31 - don't worry about the
18:33 - uh front-end stuff let's just close that
18:35 - thing
18:36 - up and what we will do is open up the
18:39 - package.json
18:40 - and inside of there we will add in
18:44 - some some cool stuff which will enable
18:46 - our
18:47 - us using uh es6 and we will also add
18:52 - the auto start script so we will say
18:56 - um inside of uh
19:00 - package.json that the type should be
19:03 - module that will pretty much go ahead
19:04 - and enable
19:05 - us using importing instead of requiring
19:09 - and we will
19:10 - also uh add the start script
19:14 - which is going to be responsible
19:17 - to start the actual application once it
19:20 - is deployed to
19:20 - a server yeah the live is cool
19:24 - all right um let's actually go ahead and
19:27 - save it
19:28 - we will also add the server.js file
19:33 - here we go and once we are done with
19:36 - that
19:36 - let's actually import everything that we
19:38 - will need today
19:40 - as a dependency of course we are going
19:43 - to be needing
19:44 - the express uh we will need mongoose we
19:47 - will need the course headers and we will
19:49 - also
19:50 - import pusher now um
19:53 - next up let's just jot down how the
19:56 - application is going to look like
19:58 - here's it so okay wonderful what says
20:00 - here it's okay
20:01 - not buffering i'm glad i'm glad it's not
20:04 - buffering and
20:06 - guys let's actually go ahead and get the
20:08 - energy up smash the like button if you
20:11 - are excited for today's build
20:13 - stretch out uh get yourself a coffee get
20:15 - yourself
20:16 - water because this one and a half hour
20:19 - left that we have
20:20 - is going to be epic and intense and we
20:23 - are gonna be
20:24 - just uh i'm gonna be focusing on
20:26 - dropping as much value to guys as
20:28 - possible
20:30 - uh i will focus on more like the
20:33 - overall oversight and how you should be
20:36 - thinking
20:37 - before making some kind of transitions
20:39 - be because
20:40 - if you if you just learn how to do it
20:43 - you will not be able to manage it so i
20:44 - will try to address
20:46 - that side of the project as well so
20:49 - smash the like button guys if you're
20:51 - ready and if you
20:53 - want to go ahead and up your freelancing
20:55 - skills by like
20:56 - i don't know 30 at least and
21:00 - raise your uh well and and raise what
21:03 - you can
21:04 - charge so let's go ahead smash the like
21:06 - button
21:07 - get this video out there to everybody uh
21:10 - that it's possible and let's continue
21:13 - okay
21:14 - so inside of here what we will first do
21:17 - is just pretty much outline the app so
21:19 - we will have the app config
21:21 - then we will also have some middlewares
21:24 - um we will also have some kind of db
21:29 - config
21:32 - says let's go yes exactly
21:35 - and we will also have some
21:39 - api routes and of course
21:42 - our application needs to listen to what
21:45 - we try to reach or what we try to
21:49 - do with it right
21:54 - okay so with that done let's go ahead
21:57 - and create our application instance
21:59 - that will pretty much consist of two
22:02 - declarations
22:04 - and what we will do is just pop these
22:07 - two
22:07 - in and we
22:10 - the first one is pretty much creating
22:12 - the application instance and the second
22:14 - one is going to define
22:16 - what the port will be uh by the way
22:20 - the mic is crisp okay sounds good
22:25 - okay and just use body parts
22:28 - anymore because express has built in now
22:31 - express json
22:32 - yes we will actually use that let's
22:34 - actually add those to you today
22:36 - uh or right now okay
22:40 - so arafat says let's rock and roll
22:42 - exactly
22:44 - yes so let's actually go ahead and add
22:47 - those middlewares that we were talking
22:49 - about one of them being the express json
22:52 - which is the built-in uh
22:54 - json parser the other one is the course
22:57 - headers
22:58 - now next up what we will do is
23:02 - uh not worry about any of the db stuff
23:06 - first let's actually create our
23:09 - api on the first the health check api
23:12 - route
23:12 - this will only say yo so
23:16 - i mean we can say let's build
23:20 - oops okay um
23:24 - let's say hello clever
23:29 - clever programmer fam
23:33 - and a rocket
23:36 - so guys that will be retrieved by this
23:40 - application
23:41 - so uh if you guys go ahead and
23:44 - uh call this api using the get method
23:48 - uh on the
23:51 - on the route so guys
23:54 - if you're with me that you have uh all
23:57 - the stuff that i was just talking about
23:59 - if you have on this on your computer
24:01 - it's a pretty good uh way uh
24:04 - time to start so let's actually go ahead
24:07 - and
24:07 - continue so let's go ahead and add the
24:11 - listening part which will um
24:15 - pretty much go ahead and do that stuff
24:18 - and let me actually quickly get rid of
24:22 - all these
24:23 - other unnecessary uh noises
24:27 - um oops okay
24:30 - that was the problem all right now uh
24:34 - what we will do next up is uh
24:38 - is pretty much we can go ahead and test
24:39 - it out i will teach you guys something
24:42 - new stuff because today is actually
24:46 - a bit of uh the next level
24:49 - right so i'm gonna try to
24:52 - uh not use postman too much it's
24:55 - actually an
24:55 - awesome tool but i will introduce today
24:58 - that that is a bit faster than uh trying
25:01 - postman
25:01 - every single time for every api and if
25:04 - it's just a get api
25:05 - i highly recommend using the terminal so
25:07 - we will focus on
25:09 - uh focus on that a bit so what we will
25:12 - do
25:13 - is go ahead and um
25:16 - this is okay this is front end let's
25:19 - move
25:19 - up here and this is going to be the back
25:21 - end so what we will do
25:23 - let's actually start up our back-end
25:25 - server that will pretty much go ahead
25:27 - and
25:29 - oops there's something going on
25:32 - already oh and i'm not even
25:36 - not even showing my screen but this uh
25:39 - so there is some stuff going on
25:42 - let's actually go ahead and debug that
25:44 - so we have the esm modules experimental
25:47 - throw error uh
25:50 - okay so the 9000 port is already in use
25:53 - let's actually use
25:54 - a thousand instead um i mean it
25:58 - might okay we didn't even need the
26:03 - debug mode but that's okay so
26:06 - and now my lights are not changing back
26:09 - okay
26:11 - so uh with that said we still have 155
26:14 - people on house so guys uh
26:18 - let's actually get everybody working and
26:21 - let's start
26:21 - uh doing uh whatever uh doing today's
26:24 - build
26:25 - so well what i will just pretty much do
26:28 - is type in curl
26:30 - and say local host
26:34 - oops local host and
26:37 - 8 000 and that will pretty much just
26:39 - make the
26:40 - uh request for me it's it's kind of like
26:43 - making a get uh uh
26:47 - get call so um there we go
26:51 - now we got our answer and that's it so
26:54 - let's go ahead and actually start
26:57 - uh connecting to our database
27:00 - but before that let's actually set up
27:03 - our database okay
27:05 - so today uh today's steps are gonna be
27:07 - setting up our database connecting
27:09 - then creating the api routes and
27:11 - defining schema
27:12 - and that will pretty much be the backend
27:15 - build for today
27:16 - afterwards we will go ahead and connect
27:18 - it to the front end that was built by
27:20 - sunny
27:21 - so without further ado let's go
27:25 - yes girl okay so let's go ahead and go
27:28 - to
27:29 - mongodb.com and i don't need this
27:32 - youtube going
27:35 - so uh we should be
27:39 - pretty good all right so with that
27:42 - uh let's go ahead and sign into mongodb
27:45 - what we will do
27:46 - is if you don't have an account you can
27:48 - go ahead and create
27:50 - one for free uh and
27:53 - if you have it just obviously just log
27:55 - in
27:56 - and that will do the work for you okay
27:59 - so you guys say that it's buffering a
28:02 - bit
28:02 - that's uh interesting shouldn't
28:06 - um so
28:09 - let's go ahead and go here click new
28:12 - project
28:13 - and say uh how like richard give it a
28:16 - name
28:17 - however you want to call this uh okay
28:20 - everybody says it is buffering
28:24 - let me check it out quickly it's
28:27 - actually not buffering
28:30 - it's working perfectly okay um
28:34 - so with that let's add the name of slack
28:37 - live learn and let's continue
28:41 - next up i'm not gonna be working with
28:43 - anybody today so i will just go ahead
28:45 - and create a project without adding
28:47 - any members or setting any permissions
28:50 - first up
28:51 - we will pretty much go ahead and create
28:54 - our cluster
28:55 - we will use the free one let's go ahead
28:57 - and click
28:58 - all the uh oh my god
29:01 - okay palm trees all right i hate these
29:04 - actually
29:05 - let's verify okay cool i'm not a robot
29:09 - that's nice and okay guys i'm gonna turn
29:12 - off
29:13 - high definition so that you guys can
29:15 - actually
29:16 - uh yeah there is a problem with
29:19 - transmission
29:21 - hmm
29:25 - okay i just turned off high definition
29:27 - uh guys you should be able to see it now
29:30 - uh working perfectly we shouldn't be
29:32 - receiving
29:33 - any more buffering okay we should be
29:37 - good
29:38 - seems good now it's not buffering okay
29:41 - okay
29:41 - i just keep high definition uh off and
29:44 - then
29:45 - that will be and contact my provider i
29:48 - guess
29:49 - so uh what we will do is go ahead and
29:52 - hit database access
29:54 - add a new database user and we got
29:56 - malika in a house with
29:58 - a lovely 20 rupees donation thank you so
30:00 - much we
30:01 - appreciate you a lot and thank you so
30:03 - much for
30:04 - staying around and being on all
30:08 - our uh live streams and actually she has
30:11 - a tiny bit of contribution to today's
30:13 - build
30:14 - she helped me a bit uh on uh today
30:17 - uh on preparing with the slack
30:20 - clone so huge shout out and let's
30:23 - continue
30:25 - let's go ahead and add the user which
30:27 - will be admin
30:29 - and just go ahead auto generate a
30:31 - password and copy it or make sure that
30:33 - you guys
30:34 - save it somewhere safe oops
30:38 - and let's go ahead and add that user
30:40 - because
30:41 - you will never ever be able to retrieve
30:44 - that
30:44 - same password now with that said
30:47 - uh next up what we will do and what i
30:50 - don't recommend you to do
30:52 - in production environment because
30:55 - because uh we because it's just
30:59 - uh not production friendly we will allow
31:02 - access from
31:02 - all the ip addresses why i say it's not
31:05 - recommended
31:06 - is pretty much that we can go ahead and
31:09 - anybody can hack into that database and
31:11 - that will be
31:12 - it so this was a huge disclaimer
31:15 - it's just for teaching purposes i'm
31:17 - actually preparing with some kind of
31:18 - security related
31:20 - uh live stream and the security related
31:23 - knowledge
31:24 - um it's just a fast it's just for the
31:27 - sake of speed
31:32 - okay so let's continue
31:35 - and let's add network access at ip
31:39 - address
31:40 - and this is the do not do confirm
31:43 - and we will actually make a security
31:46 - related video
31:48 - where we will go ahead and secure
31:50 - everything
31:51 - uh on one project and it will be just
31:56 - unable to hack into okay
32:01 - thank you so much sagar uh keep up keep
32:04 - the energy high and thank you so much i
32:06 - really appreciate you
32:07 - let's continue all right so now we have
32:10 - our database set up let's go back to
32:12 - clusters let's go to connect and hit the
32:14 - button in the center which says connect
32:17 - your application
32:18 - hit that copy that will go ahead and get
32:21 - it to on your
32:22 - um what you call a clipboard
32:25 - and let's go ahead and add a new cons
32:28 - which will be [ __ ] uri
32:30 - and let's add it in here and inside of
32:33 - here
32:34 - we will actually need to paste your uh
32:37 - the password that we had i'm using
32:39 - offred so i don't need to worry about
32:40 - any of this stuff i have
32:42 - uh actually three months of
32:46 - clipboard history uh at at my hand
32:50 - so okay uh
32:53 - yes okay uh yeah definitely we will
32:57 - prepare for that and we will do a
32:59 - security
32:59 - streams okay
33:04 - all right so next up what we will do is
33:06 - go ahead and say
33:08 - mongoose connect and we will pass in the
33:11 - mongoose uri
33:12 - which we just added and haven't
33:14 - configured fully because
33:16 - the db name is actually left just like
33:19 - that which is not cool
33:21 - so what we will do is just type in uh
33:24 - slack db
33:27 - okay we will actually guys uh i have a
33:30 - better idea
33:32 - uh if you guys have any kind of security
33:35 - related
33:36 - requests or whatever we should be
33:38 - talking about it's a it's a good stuff
33:40 - that you are putting it in the chat
33:42 - let's do it too but this is my instagram
33:45 - account and everybody okay
33:49 - and everybody go ahead and drop a
33:51 - message here
33:52 - and actually you can go ahead and
33:54 - request uh
33:55 - projects because we want to give you
33:57 - guys the value that
33:58 - you guys actually need and you guys
34:01 - actually want to
34:02 - put on your portfolio so
34:06 - this is my instagram and drop me a
34:08 - message what you guys want to build and
34:10 - what you guys want
34:12 - presentations on so that we can go ahead
34:15 - and give you guys the value that we need
34:19 - that you guys actually need and guys
34:21 - please
34:22 - keep the chat clean we uh
34:25 - do not tolerate uh spamming
34:28 - so we are here for learning everybody
34:32 - is here uh to have a great time so
34:35 - please keep it clean and i will remove
34:38 - this comment
34:40 - okay so with that said let's continue
34:44 - and what we will do is pretty much let's
34:47 - check out if our database connection is
34:50 - working perfectly
34:51 - and let's actually go ahead and say
34:53 - mongoose.connection
34:55 - and mongo's connection
34:59 - once open we want to go ahead and just
35:01 - console.log db connected let's not worry
35:03 - about
35:03 - any anything else so um
35:08 - teamviewer is using sure
35:12 - yeah drop it in my instagram cool so
35:15 - next up what we will do
35:16 - is set up all the
35:20 - all right that's exactly
35:24 - we want to do you guys whatever
35:27 - you guys need so let's actually go ahead
35:30 - and request
35:31 - stuff all right when twitch burn clone
35:34 - uh it actually needs a tiny bit of
35:36 - adjusting
35:37 - it's actually in the pipe so stay tuned
35:40 - for that
35:42 - and we got pre and shoe in the house so
35:44 - everybody who is spamming the chat is
35:46 - gonna be banned
35:48 - all right let's continue we have 167
35:53 - people in a house
35:55 - let's go guys all right so
35:58 - first api that we will actually build is
36:01 - not gonna be
36:02 - the api instead we will fix
36:05 - the error that i just made which is not
36:08 - closing
36:10 - one of the um brands
36:13 - okay so first up we would just go ahead
36:16 - and uh
36:17 - do the schema for our db
36:20 - and we're just going to call it [ __ ]
36:23 - data
36:25 - hey mango data dot js nice
36:29 - that's going to be just a regular js
36:31 - file and inside of there we will go
36:33 - ahead and
36:34 - import uh import mongoose from mongoose
36:38 - of course we will go ahead and create
36:41 - a new mango schema right
36:46 - and that will be pretty much
36:49 - it and we also gonna go ahead and add
36:52 - all these fields inside of there
36:54 - so that we can actually validate what
36:57 - kind of data comes in here
36:59 - and whatever that is just not related to
37:01 - our build is just going to be removed or
37:03 - omitted
37:04 - so this pretty much oh thank you so much
37:08 - that's the goal that's literally the
37:10 - goal
37:12 - so what we will do is uh go ahead and
37:16 - so okay so this actually needs a little
37:19 - explanation so
37:20 - if we go to the firebase
37:23 - uh firebase project of
37:26 - sony's build i'm gonna bring it just
37:30 - next here so what you can see here guys
37:34 - is let's go back in here so this is how
37:37 - this is the exact same database that
37:39 - sunny built back in a couple of months
37:41 - ago
37:42 - so we see that there is a collection
37:43 - which is called rooms
37:45 - inside of there there are all these
37:47 - rooms which
37:48 - i was just uh playing around we have a
37:51 - sample one we have general
37:52 - we also pwj awesome and we have a test
37:56 - all these random stuff and inside of
37:58 - there we have the messages
38:00 - okay and every single message is another
38:03 - document
38:04 - so that will pretty much be how it
38:07 - looked like
38:08 - now what we will do is say we got the
38:11 - channel name
38:12 - which is gonna be uh this one
38:15 - right so this is going to be the name
38:18 - okay so profit for javascript
38:20 - is the name and it's actually inside of
38:22 - rooms
38:23 - which is going to be the collection or
38:25 - actually
38:26 - the yeah it's going to be the collection
38:29 - where
38:29 - we store all these stuff now because
38:32 - actually firestore so firestore is a
38:36 - hybrid between
38:37 - sql and nosql databases it can uh
38:41 - have multiple uh collections nested into
38:44 - each other
38:46 - but because we today we are going to be
38:48 - only
38:49 - working with um
38:52 - nosql we will uh we will
38:57 - we will mimic that thing with arrays and
39:01 - objects okay so think of think of
39:03 - collections like arrays
39:04 - and objects like documents okay
39:08 - i hope it actually made sense this is
39:10 - the first time i'm actually explaining
39:12 - it like this
39:13 - let me know down there
39:17 - let me know in the chat if it was clear
39:20 - and
39:21 - and why we do what we do so
39:24 - what we will do is have the collection
39:27 - which will contain
39:28 - all our conversations and all our
39:30 - channels
39:31 - and all of them will have a name and
39:33 - will contain
39:35 - a conversation which actually can be
39:37 - named to messages but
39:39 - for just the sake of simplicity we will
39:42 - go with conversation
39:44 - uh and inside of there every single
39:47 - object is gonna be one message okay
39:51 - so of course of course it will have a
39:54 - message which will be a string we'll
39:56 - have a timestamp a user which will
39:58 - actually stand for the username
40:00 - and we will have the user image as well
40:04 - now
40:07 - so let's go ahead and say export this
40:11 - thing
40:11 - and we what we will do is uh export
40:14 - default
40:16 - mangoes model and inside of there we
40:18 - will this is
40:19 - what creates the collection where we
40:22 - will store
40:22 - everything and that is going to be uh
40:27 - defined with the select schema that we
40:30 - just created
40:31 - up here all right so i hope it was
40:34 - actually clear
40:34 - and let's actually continue we have 154
40:39 - people in a house
40:40 - let's go guys
40:44 - [Music]
40:45 - next up what we will do is go ahead and
40:48 - import this
40:48 - what we just built that
40:52 - will be just as simple as
40:55 - a single line of code uh we will import
40:57 - it as [ __ ] data
40:59 - and we will just go ahead and import the
41:01 - [ __ ] js file
41:02 - david are you seeing the chat who would
41:05 - i talk to if i ran into an issue
41:08 - uh drop me a message on my instagram
41:10 - okay drop me a message
41:12 - uh yeah and let's actually continue
41:15 - [Music]
41:17 - so next up what we will do is start
41:20 - creating
41:21 - all our uh all the
41:25 - uh api endpoints that we will use today
41:28 - so first things first we will need to
41:30 - create new channels inside of those new
41:32 - channels we will need to send messages
41:34 - we will need to retrieve only the
41:36 - channels to the sidebar
41:38 - and we will need to retrieve all the
41:39 - messages to the chat view right
41:42 - so actually this is gonna be four uh
41:45 - apis and we can actually
41:47 - get started building that thing
41:50 - let's go back to our screen and the
41:53 - first
41:53 - uh first api that we will say
41:56 - or that we will create is going to be
41:59 - the channel creator one and what we will
42:02 - do
42:03 - is just say app.post and inside of there
42:06 - we will have a new slash
42:09 - channel and that will fire off a
42:12 - function which has a request and the
42:14 - response parameter
42:16 - which will go ahead and create our
42:19 - channel for us
42:20 - now because we will be passing in
42:23 - the uh channel name inside of the
42:26 - request body
42:27 - we will need to first store it in a
42:29 - database
42:31 - not database in a variable it's been a
42:34 - long day
42:35 - let's not talk about it so what we will
42:38 - do is go ahead
42:39 - and say whatever
42:43 - we get from the request body
42:46 - we want to save it to a const which will
42:48 - be the db data
42:50 - now uh we want to go ahead and use that
42:53 - vb data
42:54 - uh to create a new
42:57 - document inside of the [ __ ] data right
43:01 - so that is going to be used for that
43:04 - and inside of that we will just do a bit
43:06 - of a
43:08 - bit of an error handling and that will
43:10 - be just a simple
43:11 - if gate and if we are receiving an
43:14 - error
43:17 - team sip is like a very good mug of
43:20 - coffee
43:21 - at 1am that is exactly the goal that
43:26 - right there is exactly the goal
43:29 - okay that's actually funny
43:32 - i'm gonna save that okay
43:36 - boom here we go uh so now let's continue
43:40 - and we just uh handled our error and
43:44 - one api is oh
43:49 - how did i put that oh my god okay
43:52 - so i messed up a bit uh the code
43:55 - and you don't want to put it to the
43:58 - mongoose connection instead you want to
44:00 - put them here
44:01 - so what we will do yeah uh after we save
44:05 - the request body we want to go ahead and
44:07 - go mango data create
44:10 - and
44:14 - [Laughter]
44:16 - exactly priyansha yeah that's it
44:20 - mango data create and we will pass in
44:22 - the db data
44:23 - and if there is an error we will go
44:26 - ahead
44:26 - and set the response status to 500
44:31 - and we will send the error back and what
44:34 - if everything is cool we will go ahead
44:37 - and say 201
44:38 - which means in server language
44:41 - everything is okay
44:42 - the new document is created
44:45 - now next up what we will do is go ahead
44:48 - and
44:48 - add the new message inside of there
44:52 - uh where's team cp now some of them are
44:55 - in los angeles some of them are
44:57 - in in the philippines some of them are
45:00 - in the uk
45:02 - i'm here on youtube so yeah
45:06 - okay and let's go ahead and actually
45:10 - uh continue on working and next
45:13 - api that we will build is gonna be the
45:15 - new message one so app.post slash new
45:18 - slash message
45:19 - which will go ahead and uh fire off
45:22 - request response
45:23 - uh [ __ ] function and what we will do
45:27 - is we will actually need to save two
45:29 - variables
45:30 - and the two of them is going to be one
45:33 - is going to be the id
45:34 - which will be the document id so that we
45:37 - can go ahead
45:38 - and identify which conversation do we
45:40 - want to push our new message into
45:42 - why is my chair not working and the
45:45 - other one is going to be the new message
45:47 - right so we will obviously because we
45:50 - are sending a message
45:51 - obviously we're going to go ahead and
45:53 - save it right
45:54 - so this is going to be the juicier part
45:57 - of
45:58 - of this api because we're gonna go ahead
46:00 - and first things first
46:03 - um we need to close all the brackets
46:06 - all right so there's no joke there but
46:08 - next up what we will do and i'm gonna
46:10 - type this thing out
46:12 - is that we will say mango data and we
46:15 - will
46:15 - not create instead we will update
46:18 - okay so let's go ahead and say update
46:22 - and what we will do inside of there
46:26 - so first we need to filter which
46:28 - conversation when do we want to
46:29 - uh add the new stuff into next we will
46:32 - push that
46:33 - and push the new data into uh the
46:36 - conversation
46:37 - that we have in uh there in that
46:40 - document
46:41 - and next thing is going to be the error
46:43 - handling all right
46:45 - let's go ahead and do that so first
46:48 - thing first let's filter that
46:49 - out and let's say id is going to be the
46:53 - id and
46:54 - guys actually i want to highlight this
46:57 - that
46:57 - mongodb uh
47:01 - okay i was pressing the wrong
47:03 - combination so mongodb
47:05 - is actually storing the ids with an
47:08 - underscore
47:09 - all right so let's actually go ahead and
47:13 - say
47:15 - uh id so everybody should see that
47:18 - there is that underscore that i was
47:20 - talking about okay so let's go ahead and
47:27 - okay cool so with that uh
47:30 - this id is actually going to be the id
47:32 - that we just passed in
47:34 - as a query from the url and next up what
47:37 - we will do
47:38 - is gonna go ahead and say uh push
47:43 - why did the dollar sign become four so
47:45 - we will say
47:46 - push because of course we need to push
47:48 - that new message in there
47:50 - but we will push it into the
47:51 - conversation right
47:53 - so conversation
47:57 - and that's where the new message goes
48:01 - all clear let me know in the chat if it
48:04 - is
48:04 - clear um
48:07 - [Music]
48:08 - all right thank you so much i'm gonna go
48:10 - ahead and answer all the messages that i
48:12 - got in my inbox
48:14 - today okay let's go ahead and continue
48:18 - and the only thing for this api
48:22 - is gonna be the error handling so let's
48:25 - actually do that
48:26 - let's do it is back welcome to the house
48:30 - let's go and continue so what we would
48:34 - do
48:34 - is just uh the only thing left is go is
48:38 - the error handling and that will be
48:40 - pretty much
48:41 - it and there is some kind of
48:44 - uh error which is i think
48:48 - not closing something or
48:51 - some okay so i left out a column after
48:54 - push
48:55 - okay
49:01 - uh it's crystal clear david
49:04 - what those comments are getting strange
49:08 - guys what is going on in there
49:12 - okay diamond clear chris talk oh my okay
49:15 - let's continue let's continue let okay
49:19 - you guys having some kind of different
49:20 - kind of conversation you should be
49:21 - paying attention to me
49:22 - so let's go ahead and retrieve all
49:26 - uh the channel names right so we will go
49:29 - ahead and retrieve everything but
49:31 - we will filter out only the necessary
49:32 - data this is actually a
49:34 - an easier uh step of security or
49:38 - it's more like confidentiality and all
49:40 - that stuff but
49:42 - we will go ahead and go over all these
49:44 - principles okay
49:45 - so one what we would do quickly is say
49:49 - uh we will filter out all the channel
49:52 - names and just
49:53 - those are gonna be uh
49:56 - retrieved back to the front end okay
49:59 - let's
49:59 - continue all right
50:02 - so so first things first what we will do
50:07 - is definitely it will be a get api
50:11 - so let's actually add that new thing in
50:13 - here
50:15 - and what we will say is that inside of
50:18 - there
50:19 - we will uh go ahead and find everything
50:22 - that we find in the database all right
50:26 - we will also start doing it with our
50:29 - usual
50:29 - error handling so i'm just going to pop
50:31 - it in so
50:33 - oh my god it's freaking out of course
50:36 - because the indentation and all that
50:37 - stuff is not breaking out
50:38 - all right so what we will do
50:42 - is we have the mango data fine we are
50:45 - not
50:46 - giving any simple or any single kind of
50:49 - filtering
50:50 - we'll just go ahead and retrieve
50:51 - everything and let's see so if there is
50:54 - an error we're gonna handle it of course
50:56 - and let's actually add in the new stuff
51:00 - so let's uh create an array and that
51:03 - array is gonna be
51:04 - retrieved okay so is this javascript in
51:08 - visual studio it's actually a vs
51:10 - code and i'm trying to find an
51:12 - alternative
51:14 - let's not talk about it so uh
51:18 - this is gonna be the array that i'm
51:19 - gonna be uh sending back to the front
51:22 - end
51:22 - next up what i will do is that
51:26 - you see that we are getting the data
51:28 - back okay
51:29 - so i'm gonna loop through that thing and
51:31 - i'm gonna grab out the id
51:34 - and the channel name right yes uh
51:38 - so what i would say is say data.map
51:44 - dot map and
51:48 - i will be getting back some kind of
51:49 - channel data right
51:51 - so every channel data i'm going to be
51:54 - grabbing
51:55 - out just the id and the channel name i
51:58 - only need those two
51:59 - for the side for side um
52:04 - yeah i'm thinking of webstorm as well so
52:08 - the only thing i'm gonna need for the
52:09 - sidebar is the
52:11 - id and the channel name okay so
52:14 - uh let's actually map those out and get
52:17 - those things
52:18 - uh out and for that we will
52:21 - actually go ahead and create a new
52:25 - uh object okay and this is what we will
52:29 - be
52:29 - passing into so we will be pushing this
52:33 - so say channels.push
52:36 - and we will go ahead and add the channel
52:40 - not data channel info okay
52:43 - this is literally what we will need
52:48 - for that thing so guys
52:52 - if you are with me if you almost have
52:55 - your second a
52:56 - third api route ready smash the like
53:00 - button and let me know if you're getting
53:02 - a
53:02 - value out of this video or i should just
53:04 - shut down this stream because nobody's
53:05 - actually watching
53:07 - let me know uh if you guys are enjoying
53:09 - this and
53:10 - if this is something that you want to
53:13 - learn
53:14 - or if this is something that you are
53:15 - actually interested in
53:17 - because i am very much relying on your
53:20 - feedback
53:21 - okay so that i can improve uh all these
53:24 - stuff
53:25 - uh which screen are you coding
53:28 - and watching comments so this is the one
53:32 - that i am watching the comments and this
53:34 - is the one that i'm actually sharing you
53:36 - with you guys
53:37 - and that's my camera okay
53:41 - um so let's go ahead and continue
53:45 - and what we will say is we will go back
53:49 - and uh sand back the channels
53:53 - outside of that loop and that will be
53:56 - pretty much
53:57 - it the third uh
54:00 - third api route is gonna be it
54:04 - and i think i have forgotten to close
54:07 - some stuff so let's actually do that um
54:10 - pretty much it
54:11 - that's all okay
54:14 - so uh what we would do
54:19 - uh all right so we were actually just
54:23 - talking about that react native is on
54:24 - the way
54:25 - so yeah stay pumped for that okay
54:29 - uh what we will do next is the last and
54:32 - the only
54:33 - um the last api
54:36 - route that we will use today and that
54:39 - will be
54:39 - just a simple we will retrieve
54:42 - everything back
54:44 - and that will be pretty much it so we
54:46 - will say app.get
54:48 - get conversation and we will save the
54:51 - uh query id which we will be passing on
54:54 - so that we know which conversation are
54:57 - we
54:58 - actually in okay so remember uh
55:01 - if you guys have done sun is build uh
55:04 - with the slack clone we were using
55:06 - something called the react router
55:08 - and that actually makes the request and
55:11 - that
55:12 - id is going to be passed into this
55:14 - request
55:15 - which we will be uh which we will be uh
55:20 - filtering the data based on
55:24 - so this is the filter uh again the
55:26 - underscore id
55:28 - and that's it and next up what we will
55:31 - do
55:31 - is go ahead and
55:37 - sure let's do it and what we will do is
55:39 - just
55:40 - pretty much do the usual
55:43 - error handling now what we will next up
55:46 - do
55:47 - because our backend is pretty much done
55:50 - so that was the back end build for today
55:55 - now we're gonna go ahead and detach
55:57 - firebase and attach
55:58 - this back end and make the whole thing
56:01 - uh
56:02 - fully um what you call it real time okay
56:06 - so let me know guys who is pumped for
56:08 - that who is ready
56:10 - to make this or finish this build in
56:13 - just
56:14 - half an hour i think we can do this in
56:16 - just half an hour we
56:18 - are gonna be super fast today okay and
56:21 - we will actually bring
56:22 - new stuff to the channel very very soon
56:25 - so guys drop some fire in the chat
56:27 - let me know who is excited and who is
56:30 - pumped
56:30 - and let's continue so what we will do is
56:34 - go
56:35 - into the front end project and
56:40 - and what we will do is uh say
56:44 - uh go into source and the files that we
56:47 - will need
56:48 - is gonna be the chat chat input and
56:52 - sidebar and sidebar the other sidebar
56:55 - thing
56:56 - so let's open up the chat let's open our
56:59 - chat input
57:01 - we will also need the uh
57:05 - sidebar option and we will
57:08 - also need okay i see all the fire coming
57:13 - in
57:14 - hey let's go that's it okay
57:18 - nice more fire
57:21 - uh okay we got sam in a house
57:26 - all right let's go so what we will do
57:30 - is say all these d beat our collection
57:34 - and all these firebase stuff
57:36 - this is awesome stuff but we're just
57:38 - gonna get rid of it today
57:40 - and yeah
57:42 - [Music]
57:44 - all right so what we will next up do is
57:47 - we don't even need this one
57:51 - and we will grab the
57:54 - sidebar.js file so first thing first i
57:57 - think the easiest one is going to be
57:59 - just retrieving
58:00 - the sidebar data and whatever
58:03 - we are going to be uh adding to this
58:06 - sidebar type
58:08 - js yes and what we will do
58:11 - is let's actually go ahead and fire this
58:14 - project up
58:14 - so i'll say npm start
58:18 - over here
58:21 - so this is probably gonna be freaking
58:24 - out
58:24 - um and we let's actually first
58:28 - fix that okay so we we are getting
58:31 - all the fire and love in the uh chat
58:34 - that's nice and actually something okay
58:37 - so it's starting
58:38 - development server that's good and i'm
58:41 - just gonna
58:42 - grab the whole thing to a whole new page
58:47 - so okay i think
58:50 - i think it's building or something it's
58:53 - taking very very long
59:00 - okay and let's actually
59:04 - put this user on timeout thank you for
59:08 - being here
59:09 - and while we would okay so let's
59:12 - actually wait a bit
59:14 - while this development server is
59:16 - starting up
59:17 - i don't know what's freaking out by the
59:18 - way and
59:20 - rukia asks if we are going to be using
59:23 - router or
59:24 - browser router and nope i mean it
59:27 - it's already built by sunny so we are
59:29 - not going to be focusing on it and
59:31 - we got the slack clone over here
59:34 - we're just gonna go ahead sign in with
59:36 - google
59:38 - and let's actually go ahead and do that
59:41 - pretty quickly
59:44 - great content in the house and youtube
59:46 - burn possible
59:47 - um i mean we can totally do that
59:51 - okay i'll look into that and we can do
59:53 - that okay so if i go in here
59:55 - it's now obviously okay what is going on
60:00 - in here
60:02 - okay sample uh i think we're everybody
60:05 - uses
60:05 - my um
60:09 - my credentials so okay keep it clean
60:12 - guys probably i made a mistake by not by
60:15 - not removing all the api keys so
60:17 - you can just go ahead and we can have
60:19 - some conversation in here while we are
60:21 - detaching
60:22 - so let's actually go ahead and what we
60:24 - will do
60:25 - is uh change this part and this
60:28 - is not gonna be pulled in to the
60:31 - uh in from firestore anymore instead we
60:35 - will be pulling it in
60:36 - from uh mongodb all right so
60:40 - let me know if you're excited for that
60:42 - and let's drop some fire and let's
60:45 - go so what we will do is let's first
60:48 - actually just comment this part
60:50 - out and inside instead
60:53 - of just starting with axios and all that
60:55 - stuff uh
60:56 - let's add the uh axios
61:00 - as a dependency so let's go ahead and
61:03 - say
61:04 - uh npm i
61:07 - and axios and that will pretty much go
61:10 - ahead
61:11 - and are you going to publish this app on
61:13 - google store
61:15 - i don't think so
61:18 - okay stream pros buffering buffering
61:20 - buffering um
61:22 - try to refresh it high definition is off
61:25 - so
61:26 - it's guys it should be perfect okay uh
61:29 - see all the fire is coming in nice
61:34 - okay so we have the axios installed and
61:37 - let's actually go ahead and add a new
61:39 - file which we will call axios.js
61:42 - and what we will say in here is we will
61:45 - import
61:46 - axios from axios and then we will just
61:50 - pretty much go ahead and create
61:52 - a new um instance
61:58 - okay which will be an axios dot
62:01 - uh create nice and inside of that what
62:03 - we would just what we will be passing on
62:07 - is uh it's just the base url okay
62:10 - so the base url is of course it's gonna
62:12 - be uh
62:13 - http colon slash slash local
62:16 - host and 8 000.
62:20 - and my emoji app is going crazy
62:27 - and yeah uh any plan for meet
62:30 - up i mean once this corona stuff
62:34 - is over as far as i know we are going to
62:37 - be planning and we are going to be
62:39 - doing live events so stay tuned for that
62:42 - okay
62:45 - let's continue so what we will do next
62:48 - up
62:48 - is just go ahead and export it so we
62:51 - we will be using default exporting so
62:54 - however we want to we can import it on
62:56 - the other side
62:57 - so instance that's it and yeah my stream
63:02 - is going cool on the other side
63:04 - all right we should be good
63:09 - okay so uh our axios instance
63:12 - is uh is ready and we just got this
63:15 - question from ferox
63:17 - uh why we use axios and the reason for
63:20 - that
63:21 - is axios is actually converting the
63:23 - response
63:25 - immediately to json and we don't have to
63:28 - deal with all the other headache stuff
63:30 - and it's just a lot more professional
63:32 - and
63:34 - and it's just a better thing to use okay
63:36 - i actually raised my volume a bit
63:38 - so you guys can hear me more clearly
63:41 - so that's pretty much the reason why we
63:43 - use axios and not fetch and all that
63:45 - stuff and as far as i know
63:47 - node.js doesn't even support uh fetch
63:51 - you need to import that or with another
63:53 - uh package so it's
63:55 - um it's a bit messy so
63:58 - let's go ahead and say
64:02 - uh let's go back let's close axios.js up
64:05 - we will not use it anymore
64:07 - and inside of here we're going to go
64:09 - ahead and pretty much
64:11 - just uh import that
64:14 - and that's uh pretty much it
64:18 - and the one thing we will do is create a
64:22 - new function
64:23 - which we will be uh using
64:26 - to uh render out all this stuff
64:30 - so we will create a get channel list
64:33 - which is going to be in
64:34 - axios.get and we will go to the get
64:37 - channel
64:38 - list uh endpoint and
64:41 - i think i think that's not the correct
64:46 - uh oh yes it is okay so we will go ahead
64:49 - and grab the channel list
64:50 - and then the response will be so the
64:53 - response data is going to be set
64:55 - as the channels so that's pretty much
64:58 - what we will do here for now and
65:02 - we don't even have to worry about any of
65:04 - these stuff down here
65:06 - uh because these are just compatible
65:09 - because we designed it that way
65:12 - so um next up what we will do
65:15 - is say instead of the uh
65:19 - use effect and all the firebase stuff we
65:21 - really appreciate you son of brother
65:23 - but we are just not going to be using
65:25 - firebase today
65:26 - uh and instead we will just call this
65:30 - uh function that will pretty much go
65:33 - ahead and do
65:34 - our stuff and of course this is where
65:36 - our real time stuff
65:37 - will come in so
65:41 - let's just worry about that that's gonna
65:42 - be the last one and
65:44 - we will be just ending it like super
65:46 - fast okay
65:47 - so next up what we will do is go to
65:50 - sidebar
65:51 - option and here we also see
65:54 - this one which we can go ahead and get
65:58 - rid of
65:59 - and well we will pretty much replace it
66:03 - with
66:04 - is another uh three line called or
66:06 - actually two line code
66:08 - uh we will actually add the channel name
66:11 - as the channel name of course because
66:13 - that's how
66:14 - we uh defined it and that's how we will
66:17 - uh
66:18 - accept it and we will go and say axios
66:21 - post to new
66:22 - channel and that will pretty much go
66:24 - ahead and create
66:26 - a channel for us okay so next up what we
66:30 - would do
66:31 - and guys let's actually get this energy
66:33 - up i see
66:34 - okay i see a couple of you say the um
66:39 - um live is froze
66:43 - i don't think it actually is froze i'm
66:45 - watching it
66:46 - right here and it's working
66:49 - so let's go ahead and say um
66:54 - okay now youtube is freaking out and
66:55 - saying the bitrate is not enough
66:58 - but we should actually be good
67:01 - okay uh i think even my internet no
67:04 - that's fine that's fine okay
67:06 - let's continue guys get the energy up
67:08 - smash the like button if you're getting
67:10 - value out of this video and
67:12 - if you are enjoying this speedy build uh
67:15 - we really want to uh show you guys that
67:18 - this can be done in just a matter
67:20 - of like one hour or one and a half i
67:22 - mean
67:23 - with all the talking it's of course it's
67:25 - more than an hour but without all these
67:27 - it's definite
67:28 - and i actually see all the messages
67:30 - coming in and without all this talking
67:32 - it's actually
67:33 - a lot faster so guys the reason
67:36 - being is today the title actually
67:39 - includes the word intermediate because
67:41 - we are not really testing and we're just
67:43 - gonna be
67:44 - oops we're just gonna be debugging
67:46 - everything at the end
67:48 - if there is anything to debug
67:52 - and um and yeah so we are just gonna
67:56 - i'm trying i'm trying to uh teach you
67:58 - guys that this
67:59 - actually can be done super fast okay
68:02 - and shivangi asked if i have a personal
68:05 - uh youtube channel
68:07 - uh not yet should i create one
68:10 - okay and the build is going like that
68:14 - that's exactly what today is about we
68:17 - are speeding up
68:18 - and we are gonna be bringing some new
68:21 - stuff
68:22 - very shortly so stay tuned for that guys
68:24 - and let's actually
68:26 - uh go okay from teams
68:30 - only coding but also how to speak in
68:32 - english stylish
68:35 - if you're learning english from it that
68:36 - that might not be the best idea
68:39 - but actually i'm glad that you are
68:41 - getting like double times the value so
68:43 - that's awesome
68:44 - okay okay
68:48 - uh braxx asks uh what are we doing here
68:51 - so brother uh
68:52 - we i think you're new here uh but we are
68:56 - doing
68:56 - is um uh pretty much
69:00 - sunny who is an awesome team member of
69:02 - clever programmer
69:04 - has built a uh slack clone
69:07 - back i think in august or july and that
69:10 - was
69:10 - actually using react and firebase so it
69:14 - was a front and only
69:15 - plus uh plus a platform as a service
69:19 - and that was built by them and today
69:22 - i am taking it to the next level by
69:25 - removing
69:26 - firebase and actually adding a complete
69:28 - back-end to it so
69:29 - if you actually enjoy if you actually if
69:32 - this actually sounds like interesting to
69:34 - you i highly recommend uh first go ahead
69:37 - and watch sonny's video
69:38 - on the front and build and then next up
69:42 - uh come back here and watch this one
69:45 - this is actually gonna be a much much
69:47 - shorter
69:48 - uh than the other one so all together
69:50 - it's gonna be like around
69:52 - five and a half hours okay but then you
69:55 - will actually have a front end with a
69:57 - platform as a service build
69:59 - on your portfolio which will be using
70:01 - real-time database
70:02 - and you will have a mirn stack
70:04 - application on your portfolio
70:06 - and you will be able to show these two
70:08 - off and show the differences
70:10 - and all that stuff so that you are super
70:13 - e
70:13 - you will be super uh super easily
70:15 - getting a job
70:17 - in 2020 which is actually uh
70:20 - one of our goals that to in this year we
70:23 - want to help
70:24 - 5 000 people to get jobs as developers
70:27 - so if you uh happen to get a job
70:31 - uh using one of the uh using the
70:35 - knowledge that we share on this youtube
70:37 - channel
70:37 - let's drop it in the chat okay
70:40 - and one more question i'm gonna answer
70:43 - is which language is the best for
70:44 - programming
70:46 - javascript of course okay maybe swift on
70:48 - the side
70:49 - but these two okay next up
70:53 - cool got you i'm down for a job in
70:57 - coronado that's it that's literally it
71:00 - that's the mindset just put in the work
71:01 - and that's it
71:03 - okay okay
71:07 - and let's actually continue
71:10 - smash the like button guys if you're
71:12 - getting uh value out of this
71:14 - video and let's continue so
71:17 - what we will do next up is
71:20 - uh because we have the add channel
71:23 - function already
71:24 - uh yeah we can pretty much i think omit
71:27 - this
71:28 - file and let's go into chat input
71:31 - but actually let's go into chat and
71:35 - so guys you probably see that this is
71:37 - like a lot of code
71:39 - we don't like a lot of code we like
71:41 - simple shorter codes and we want to help
71:44 - our front end developers as back-end
71:46 - developers so that they don't have to
71:48 - work that much and they can focus on the
71:50 - creative stuff
71:51 - on oh and the great ux
71:55 - so we want to help them by just reducing
71:58 - their whole coding stuff to
72:02 - three lines okay um
72:07 - like this actually four
72:12 - okay so i uh messed something up here
72:17 - um okay so this is the code that we will
72:20 - be using
72:21 - instead of all these and let's actually
72:24 - don't even worry about uh all these
72:26 - firebase things
72:28 - uh these are awesome but this is just a
72:30 - lot of work
72:31 - uh to go go with so guys
72:35 - as back-end developers your goal is
72:37 - always to help
72:39 - the front-end one um
72:42 - what hair conditioner do you use nothing
72:44 - dude
72:45 - just watch it uh
72:49 - so as back-end developers you want to go
72:51 - ahead and
72:52 - help the have the front-end guys
72:56 - so that they will have the more more
72:59 - focus on making the products super crisp
73:02 - and awesome looking
73:03 - instead of worrying about all these api
73:05 - calls so what we will do is say
73:07 - axios get and get the conversation
73:10 - for that specific room right so this is
73:13 - the query that we are adding
73:15 - at the end and then from the response we
73:19 - will go ahead and grab the data and the
73:21 - first which is zero in programming
73:24 - uh
73:28 - youtube channel of club programmer don't
73:31 - worry about books
73:32 - okay so from the response uh
73:36 - inside of the data you want to go ahead
73:38 - and grab
73:40 - the first object and you want to grab
73:42 - the channel name
73:43 - for setting the room details that will
73:45 - go ahead and set
73:47 - uh on the top and down in the bottom
73:50 - everything for us and next up what we
73:54 - will do is set room messages to the
73:56 - conversation
73:57 - and it's freaking out because we
74:00 - haven't imported axios now let's do that
74:04 - very quickly so we will just go ahead
74:06 - and say import axios from
74:08 - um axios and that will pretty much
74:12 - solve our problems hopefully
74:15 - maybe not let's check it out
74:18 - okay it's oh it's from the sidebar
74:21 - option
74:21 - so we can go ahead and copy this one and
74:24 - drop it in here
74:26 - boom let's see if i forgot it from
74:29 - somewhere
74:30 - else
74:33 - so we will go ahead sign in
74:37 - let's go ahead and actually guys we
74:39 - should be seeing all the empty stuff
74:41 - because i actually haven't added
74:43 - anything but let's actually keep it this
74:46 - way
74:46 - and once we actually add everything
74:49 - you will see that this is like super
74:51 - crisp and super fast okay so let's leave
74:53 - it
74:54 - like this for now if you want to go
74:55 - ahead go ahead and test everything out
74:58 - like the ad channel should be working so
75:01 - yeah
75:02 - and we also have the uh
75:05 - also have everything ready i mean this
75:07 - is where all the channels should be
75:09 - showing up but
75:10 - because we don't have any of those
75:12 - channels we're just not going to be
75:13 - bringing up about those
75:15 - for now um what did you use
75:19 - for designing with google uh
75:23 - actually it's still firebase so
75:28 - the amount of headache that you would
75:30 - get to
75:31 - work with like passport edges and all
75:33 - that stuff it's just
75:34 - not worth it we will definitely do a
75:37 - video on that
75:38 - but that's going to be like a not a full
75:41 - project
75:42 - uh because that's just too much
75:45 - um so that's why we are using
75:48 - authentication for
75:49 - with the firebase and also because
75:52 - today's
75:54 - topic is how to abandon firebase if it's
75:57 - not enough for you
75:59 - um the authentication is always going to
76:03 - be enough
76:04 - so there's just not going to be any
76:05 - better option than
76:07 - firebase's uh authentication okay
76:11 - so uh let's go ahead and go
76:14 - back in here and what we will pretty
76:17 - much do
76:18 - and go ahead and do is actually uh
76:21 - get these get this uh
76:26 - get this uh
76:31 - get this request into a function
76:35 - and that will pretty much go ahead and
76:38 - we we're just gonna go ahead and grab
76:41 - this out of here
76:43 - and put it out here so that we can call
76:45 - it from
76:46 - inside and you guys will see very soon
76:49 - why is that important and polog asks
76:52 - what is git uh i highly recommend you go
76:55 - ahead and watch the video that i did
76:57 - with ammanot
76:58 - uh another part another team member of
77:01 - clever programmer
77:02 - and we did an awesome how to begin with
77:04 - or
77:05 - get 101 sort of
77:08 - uh video with two recommendations
77:12 - what the whole what what is the whole
77:14 - thing and how to start using it as a
77:16 - developer and all that stuff
77:18 - um
77:21 - hi captain cool so
77:26 - let's go back in here and let's continue
77:30 - so this is where all the real real-time
77:33 - stuff is gonna go
77:34 - uh real time stuff
77:38 - and we will actually go ahead and not
77:41 - today but
77:41 - uh later on we will drop a video on how
77:44 - to make your app like
77:46 - super optimized that it doesn't even use
77:48 - any kind of resource okay
77:50 - so um last but not least
77:54 - uh i think we have the chat input
77:58 - left to do yes that is correct let's
78:02 - remove that thing and whoo somebody says
78:05 - i'm muted
78:06 - i shouldn't be am i
78:13 - guys i shouldn't be muted no no i'm not
78:16 - muted definitely not muted
78:21 - so clever programmer
78:24 - what's more difficult back-end or
78:26 - front-end
78:27 - um it depends which one
78:32 - which one do you like for me it's
78:35 - front-end because i just don't like to
78:36 - mess around with all the css stuff but
78:40 - okay oh
78:43 - okay okay okay there is some other
78:45 - conversation going on and
78:46 - i'm just gonna ignore that for now okay
78:50 - uh so inside of chat.js what we will do
78:53 - is get the uh no we will go to
78:56 - chat input and we will actually create
79:00 - um the post request
79:04 - and we will not uh have it out in other
79:07 - function let's just not worry about that
79:12 - and what we will do is just say axios
79:14 - pose new message
79:16 - and we will need to pass in the channel
79:19 - id right
79:20 - because that's how the backend
79:21 - determines where to push that new
79:23 - message
79:25 - and uh
79:28 - oh yeah okay and what we would do is say
79:32 - create the message and that's gonna be
79:34 - the input
79:37 - and we will say the the timestamp is
79:40 - going to be a data now which is going to
79:42 - be super simple
79:44 - and we also have the user which will be
79:46 - the user.display name which
79:48 - we are actually grabbing from the react
79:50 - context api
79:52 - and guys if you don't know what this
79:54 - real context api
79:56 - is i highly highly recommend going back
79:58 - and watching
79:59 - sonny's video on this slack uh clone
80:03 - he does an awesome job explaining it i'm
80:06 - just not gonna go into that because uh
80:08 - that will be uh
80:11 - that will be uh too much okay
80:14 - so let's go and
80:18 - because we just added everything we
80:21 - should be good to go
80:22 - let's go ahead and test this out of
80:24 - course it's not because we haven't
80:26 - imported
80:27 - uh um xcos
80:31 - so import xios from axios that's
80:34 - it uh yeah we will build an
80:38 - admin panel later on we can definitely
80:40 - do that
80:41 - okay drop me a message on instagram and
80:44 - we can totally do that okay
80:49 - so we just imported axios that should
80:51 - have uh
80:53 - got this done let's test this thing
80:57 - out and let's see what we got so
81:01 - we should be able to create a new
81:04 - channel
81:05 - which will be you tube
81:08 - okay nothing happens that that's
81:10 - completely fine that's completely fine
81:13 - why why is it uh completely fine because
81:16 - it's still not real time yet but
81:20 - we will go ahead and refresh it and we
81:21 - should be seeing it popping up
81:23 - on the left hand side so
81:26 - uh private chat room club
81:30 - programmer if we want to make a private
81:32 - chat room user to your
81:35 - can you make with the same method as
81:36 - with channels
81:38 - yes you can definitely do that i think i
81:41 - will actually
81:42 - uh create an other one uh which will
81:45 - include that okay let's go in and sign
81:49 - in and there we go we have
81:53 - our channel on the left hand side guys
81:57 - drop a comment if you are here with me
82:00 - if you have that channel
82:02 - functionality working both retrieving
82:04 - and both
82:05 - adding a new channel let me know
82:08 - uh if you are if you're following and if
82:11 - you're with me and if you're enjoying
82:13 - this
82:13 - and smash the like button if you are
82:15 - getting video
82:16 - out or value out of this video
82:20 - okay almost got that word order and
82:23 - let's go ahead and select that
82:25 - and okay so for some reason
82:29 - it's not updating up here neither down
82:33 - below
82:34 - let's actually go ahead and address that
82:36 - and let's see what is happening
82:38 - [Music]
82:41 - okay so it actually is freaking out
82:44 - because
82:45 - uh there is still the wrong address
82:48 - going on in here
82:50 - boom so let's say here we go
82:54 - and let's go ahead sign in
82:58 - oh request should be 8 000.
83:03 - uh maybe i have messed it up in my
83:05 - axios.js
83:07 - no i haven't it's it's 8 000 should be
83:09 - good
83:10 - okay there we go
83:14 - and let's go into
83:17 - youtube okay so it's freaking out for
83:20 - some reason
83:20 - uh not no worries we will address that
83:24 - in just a minute
83:25 - so let's actually debug whatever
83:28 - is happening yes it is gonna be uh
83:32 - posted on youtube so
83:36 - what we will do is quickly go into
83:39 - chat.js
83:40 - and let's actually let's actually
83:43 - realize that uh
83:45 - there were more data stored into room
83:47 - details
83:48 - so that's why uh it is freaking out for
83:51 - now
83:52 - but let's remove all these stuff and
83:55 - we will actually be uh fine with that
83:58 - and let's actually remove it from here
84:01 - so that we
84:02 - are not passing in the wrong kind of
84:04 - data so
84:05 - right now room details dot name is
84:08 - undefined because
84:09 - of course it is undefined right so we
84:11 - are only
84:12 - uh grabbing the channel name to the room
84:15 - details
84:16 - no key and all that stuff and no id and
84:18 - all that stuff
84:19 - so let's test that thing out and i think
84:22 - it should uh it should have made uh
84:25 - corrected that mistake and yes it has
84:29 - so guys down below there is uh youtube
84:32 - and
84:33 - up above there is youtube as well
84:36 - so smash the like button if you are
84:39 - here with me and if you have this thing
84:42 - working
84:43 - to the point where i'm at and let's
84:46 - actually continue
84:50 - okay uh boom
84:54 - so we should be uh good all right
84:57 - we got so much fire going on in the chat
84:59 - section that's awesome
85:01 - okay and
85:04 - what i will do is say
85:07 - uh next up i am gonna test out the
85:10 - message sending functionality
85:12 - so let's go ahead and say hey guys oops
85:15 - hey guys and at some fire boom
85:19 - and we should be able to see it once we
85:22 - refresh
85:25 - okay sign in with google
85:28 - okay here we go and what okay so it's
85:31 - freaking out
85:32 - no problem no problem no debug mode for
85:36 - this
85:37 - so what what is happening is that the
85:39 - timestamp is not in the correct
85:41 - format not a problem uh we can fix it
85:45 - like super quickly in message.js file
85:48 - let's actually go ahead and go
85:52 - into message.js so this is the line of
85:56 - code which is
85:57 - uh freaking out and
86:00 - what i think the problem could be
86:03 - is so we will need to say
86:08 - parse in first uh to ma
86:11 - to timestamp and
86:15 - we will add the parts and we will remove
86:18 - the question mark
86:19 - the optional chaining and all that and
86:21 - we don't need the to date either
86:25 - and i think this should be able to make
86:28 - the app work so let's sign in again
86:33 - we still have 140 people let's drop some
86:36 - fire
86:37 - let's smash that like button we are
86:40 - at 278
86:43 - likes that is super awesome that is
86:46 - super cool
86:48 - and let me know guys if you're actually
86:50 - enjoying it
86:51 - and smash the like button and let's
86:54 - actually get
86:54 - this thing up to 300. we are
86:58 - so close we are very close so let's get
87:00 - it up there
87:02 - and let's show this video out there to
87:04 - everybody
87:05 - all over youtube so we are at 280
87:09 - let's go ahead and let's actually
87:12 - push that number up to 300
87:16 - okay let's go so we are two for
87:20 - 284 let's continue growing that number
87:24 - so with that said let's
87:27 - go ahead and log in
87:30 - here we go okay and we got
87:34 - the date back normally image
87:37 - we have the message we have my name so
87:40 - that is uh
87:43 - and we have kazi on the left hand side
87:45 - um
87:46 - sorry kazi i'm gonna remove you from
87:48 - there and
87:49 - everybody who has uh logged in their
87:53 - name is gonna be showing up there so we
87:54 - will go
87:55 - into sidebar.js and i think it's
87:58 - actually
87:59 - coded and there is this
88:02 - typo not a problem so instead of
88:05 - quasi we will say user the display name
88:10 - [Music]
88:12 - and
88:14 - i think it's gonna be freaking out
88:15 - because we don't have a
88:17 - user imported so we will say
88:21 - uh up here we're just gonna go ahead
88:24 - and uh get the user
88:28 - from react context api and we can just
88:31 - do that
88:32 - super simply now i think that actually
88:36 - uh solved the problem uh newstate value
88:39 - is not imported not a problem
88:43 - uh we're just going to go ahead and do
88:44 - this
88:47 - and i think here we go
88:52 - johnny one he said hey oh this channel
88:54 - is lit
88:56 - that's it let's go
88:58 - [Music]
89:01 - all right next up uh let's
89:05 - sign in and let's see what we got so
89:09 - logging in
89:11 - hey nice okay we got the name changed
89:14 - so um we have the sand we have
89:17 - all the functionality right that we
89:19 - needed to work on the back end
89:21 - time to make the thing real time and
89:23 - that will be pretty much it
89:24 - for today so let's go to pusher.com
89:30 - and let's actually go ahead sign in if
89:33 - you guys
89:34 - don't have an account you can go ahead
89:36 - and sign up it's completely
89:38 - free with a couple of restrictions but
89:40 - don't worry about that we have never
89:41 - reached those
89:42 - and let's go ahead create our app use us
89:46 - three and west so the front end is gonna
89:49 - be react
89:50 - it's as native but nope we will
89:54 - we will use node.js on the backend a
89:57 - alexandra is in the house nice
90:00 - [Music]
90:02 - and so we just selected our languages
90:09 - exactly that is our goal to make it this
90:12 - channel
90:13 - as informative as possible so
90:16 - yeah huge shout out and thanks and what
90:19 - we will do is actually
90:20 - scroll down here to the back end because
90:22 - that's so much easier to set
90:24 - up and let's go back to our server.js
90:27 - file go up here to
90:28 - app.config and just paste it in here
90:33 - okay uh cycle quarter ask asks if there
90:36 - is a
90:38 - alternative for pusher and probably
90:40 - there is but it's just super simple to
90:42 - set up
90:43 - and super easy to use and probably is
90:45 - one of the most
90:47 - uh popular and i know a lot of you guys
90:50 - are going to be like oh there's soccer i
90:52 - o and yes there is socket i o but
90:53 - there's just a pain in the neck
90:55 - so i was like yeah let's do the easy one
90:59 - and the powerful one because that
91:01 - actually saves time
91:03 - for me with preparing and for you
91:06 - when you're working with clients right
91:09 - so the
91:09 - the more so actually it's time is money
91:11 - right let's put a price tag on every
91:14 - hour you spend and you will understand
91:16 - it's super fast okay
91:19 - and and the faster you work the more
91:22 - jobs you can do
91:22 - the more money you can earn simple as
91:24 - that
91:26 - so that is the reason why we use pusher
91:29 - so let's actually change the encrypted
91:32 - to use tls because for some reason
91:34 - uh encrypted is uh deprecated and we are
91:39 - gonna be using the tls
91:42 - one and let's rename the uh let's remove
91:45 - the war
91:46 - and we will say
91:49 - we will say const instead you got it
91:52 - brother
91:54 - uh the psycho coder okay and
91:58 - next up what we will do is we're going
92:00 - to go ahead and set
92:01 - up our chain stream uh
92:08 - and what we will do is go ahead and set
92:12 - up
92:12 - the change stream which is literally a
92:15 - super nice way by
92:18 - uh mongoose that you we can go ahead and
92:21 - watch
92:22 - all these uh collections what we do is
92:25 - create a chain stream
92:26 - change stream which is going to be
92:30 - watching the mongoose connection
92:32 - collection
92:33 - so the collection of the mongoose
92:34 - connection which is actually the
92:36 - conversations
92:38 - and it's going to go ahead and watch it
92:40 - and once there is something going on
92:43 - we can pretty much go ahead and say
92:47 - ooh caps lock
92:51 - we can say chainstream.on
92:55 - of course it's going to be change we're
92:57 - going to fire off something
92:59 - which will have a change uh parameter
93:01 - inside
93:03 - and we can pretty much go ahead and that
93:06 - is
93:06 - where we gonna go and
93:11 - uh runner i am beginner
93:14 - i am very slow in js it is no it is not
93:18 - yes it is completely normal uh today we
93:21 - are
93:22 - actually uh going a bit faster than
93:24 - usual uh we are just trying this
93:26 - out so that everybody gets entertained
93:28 - and i
93:29 - highly highly recommend that you got you
93:31 - watch this video so that you actually
93:33 - can see
93:34 - how fast this can be right and how fun
93:37 - and fast and powerful this whole
93:39 - development can be
93:41 - and then go ahead and watch all the
93:43 - other videos there is a lot of
93:45 - begin like very very beginner friendly
93:47 - content on this channel
93:51 - so you can go ahead and watch those and
93:54 - then come back and watch this one as
93:56 - well
93:56 - and once you you pass through all those
93:59 - uh
93:59 - videos uh you will be able to rush
94:02 - through this one as well and then you
94:04 - will feel
94:05 - so powerful okay i can guarantee you
94:07 - that
94:08 - all right uh let's go back
94:12 - and say that if the change
94:15 - okay so inside of here we are passing in
94:18 - the change so
94:18 - if uh change
94:22 - the operation type is
94:25 - actually insert oh
94:31 - insert yeah okay i'll tell
94:34 - i'll i'll learn how to type
94:37 - exactly alongside literally drop the
94:39 - code in here
94:41 - okay so that that's what we will be
94:43 - adding okay
94:45 - uh so if it's insert we're gonna go
94:48 - ahead and trigger
94:49 - a pusher which is gonna be a new
94:52 - channel even on the channel stream and
94:56 - if it's not uh we will so that is
94:59 - literally
95:00 - uh gonna be watching if you are running
95:02 - a new channel right
95:04 - so remember when we add a new channel
95:06 - that's when we
95:07 - actually insert a new document
95:11 - but uh when we are adding a new message
95:14 - we are just updating one of the
95:16 - documents right
95:19 - okay so that is what is gonna happen
95:23 - here so we will add an else if and an
95:26 - else statement uh
95:28 - here
95:33 - okay there is some craziness going on
95:35 - over here
95:36 - okay um
95:40 - right so as if the cha
95:43 - if the operation type is in update so
95:46 - that means a
95:47 - new message gets pushed into the
95:49 - database
95:50 - then we're going to go ahead and trigger
95:51 - the pusher button in a bit of a
95:52 - different way so up here we are
95:54 - triggering the channels channel
95:56 - and we are adding the new channel event
95:59 - but this time we're gonna be adding the
96:01 - conversation
96:02 - uh channel and we're gonna add the new
96:05 - message
96:05 - even right and we're just gonna be
96:09 - passing through the change
96:10 - let's not worry about that for now uh
96:14 - we will make a video on how to make this
96:16 - super super seamless and
96:18 - not use too much resource okay and we
96:22 - will
96:22 - also add the console login here
96:26 - if something is not working perfectly
96:29 - we're just going to cancel like the
96:30 - error triggering pusher
96:32 - now with that done we literally
96:35 - are done with the back end so
96:39 - great job next up what we will do is
96:43 - go to our front end and we will add
96:46 - all this stuff wherever we are
96:48 - retrieving something
96:50 - so that is going to be chat.js file
96:53 - right so whatever we have a get
96:55 - api call that's what we want to make
96:57 - real time all the others don't worry
96:59 - about those
97:02 - so we have the get combo over here
97:05 - and what we will do is go up here and
97:09 - actually grab this one which will go
97:11 - ahead and create the
97:13 - uh instance so
97:16 - let's actually remove the war you don't
97:18 - ever want to use var you want to use
97:20 - const instead and you want to go ahead
97:23 - and
97:24 - grab this thing which we will insert
97:27 - after over here let's remove the alert
97:31 - and let's actually add the get the
97:35 - function calling over here as well
97:39 - and we will actually subscribe
97:42 - to uh which one is it so it's the chat
97:46 - dot js so we are gonna be uh subscribing
97:49 - to the conversation one
97:51 - right and we are gonna be
97:55 - subscribing to the new message
97:58 - uh even all right so guys if this makes
98:01 - sense
98:02 - let me know or if it was too fast and i
98:04 - need to go over it again
98:06 - but before we do anything let's remove
98:08 - this bar
98:09 - hey dinesh what is up so add
98:13 - const in here and
98:17 - that will pretty much go ahead and
98:19 - refresh our conversation
98:20 - and yeah that's it
98:25 - so optimizing it would be like uh
98:29 - we add a new uh
98:33 - so optimizing would be
98:36 - that whenever we are passing in a new
98:39 - message
98:40 - we are just pushing it from uh the
98:43 - database
98:43 - to here right but that would just uh
98:46 - take too much time to implement
98:47 - but we will do it in a separate video
98:50 - okay so stay tuned for that
98:52 - we will get all the optimization things
98:54 - in one
98:55 - video and we will cover it okay
99:00 - like next let's go ahead and
99:04 - what else do we got we got the
99:07 - sidebar.js
99:08 - file and that will be
99:12 - pretty much it for today okay so
99:15 - up here let's actually
99:18 - add the uh pusher instance
99:22 - and what we will do is say
99:26 - uh const instead of var
99:29 - and hey we got another lovely donation
99:33 - by ff uh it's 40 rupees bro how should i
99:37 - learn morn from
99:38 - scratch help me honestly by watching
99:42 - these videos okay so
99:44 - i would leave this one to as the last
99:46 - one
99:47 - but i would go ahead and watch tinder
99:49 - mirn
99:51 - uh then tick tock mirn what's up mern
99:54 - and maybe instagram learn then facebook
99:58 - moan and then coming here
100:00 - okay i think that will that is like a
100:03 - nice learning curve so first is just the
100:06 - basics like how to
100:07 - retrieve and store data in uh
100:10 - in mango db right so
100:14 - and then you will learn with instagram
100:17 - and facebook clone
100:18 - how to actually store images and
100:20 - actually files
100:22 - because you can i didn't tell you that
100:25 - time but you can literally like upload
100:26 - whatever files you want so if you want
100:28 - to go ahead and
100:29 - uh upload like a video you can do that
100:31 - if you want to go in and upload like a
100:33 - pdf file you can totally do that
100:35 - but mongodb has a 500 mb
100:39 - free storage so if you're exceeding that
100:41 - it's just not going to be transferred
100:44 - and next up i would go here and learn
100:47 - this one maybe
100:50 - uh netflix mean by yourself
100:54 - actually that's that's a good idea as
100:55 - well uh but i would definitely make one
100:58 - of the
100:59 - uh discord clone maybe an imessage clone
101:02 - as well so that you can separate those
101:04 - uh so you can see the fundamentals of
101:07 - how to have like different
101:09 - conversations and then get this one
101:12 - so that you can see that how fast it can
101:14 - be and if you remove
101:15 - all the chatter that i do and like
101:17 - reflecting and
101:19 - answering all these comments uh
101:22 - then you will see like how fast it can
101:25 - be
101:26 - okay and actually let me know in the
101:28 - comments and in the chat if you guys
101:30 - would be interested
101:32 - in seeing us or either me sonny or
101:35 - or whoever will do that but
101:38 - how we actually prepare to these uh
101:40 - lives right
101:42 - so if you guys are pumped for that and
101:44 - if you guys want to see us
101:46 - behind the scenes like how we prepare so
101:49 - like
101:50 - without an idea of how i started uh
101:53 - from the beginning till the very end
101:56 - when it is actually working
101:57 - drop some fire and let me know so that
102:01 - uh we will have a reference
102:02 - and and we can we can show you guys how
102:05 - we actually work on these builds
102:09 - okay uh and last but not least
102:13 - we will remove this comment and add the
102:16 - um and this inside of here
102:19 - remove the var replace it with a const
102:23 - and
102:23 - [Music]
102:26 - why is it okay and let's actually
102:30 - get the channel list again
102:33 - inside of here once we see that
102:37 - we receive a
102:40 - uh we received a new channel
102:44 - and we just got another donation from ff
102:47 - 30 rupees thank you so much brother uh
102:50 - we
102:51 - really appreciate uh that and thank you
102:54 - so much
102:55 - okay um what do you think about
102:58 - microservices is six
102:59 - system design essential uh microservices
103:03 - i think it's only useful when you're
103:04 - working for like
103:05 - huge company okay uh
103:10 - okay uh and
103:14 - we also need to uh sign up for the
103:16 - channels channel
103:18 - and now this application actually should
103:21 - be a real time
103:23 - once we uh import all the pusher stuff
103:26 - because we haven't installed anything
103:30 - obviously it's not going to work like
103:31 - that let's go ahead and type in mpmi
103:34 - pusher js
103:39 - and yeah that will pretty much go ahead
103:42 - and do the work
103:43 - for us it installs the dependency
103:48 - for the front end hey thank you so much
103:52 - appreciate the love okay and we have it
103:56 - installed and now what we will do is we
103:59 - need to
104:00 - go to chat.js and actually import it
104:04 - so we will say import uh
104:07 - i said import from pusher.js
104:11 - we will and this is actually a capital p
104:14 - okay
104:15 - so we are importing with a capital p
104:17 - because we are creating a new instance
104:18 - of it here
104:19 - with a not capital p i don't know how
104:21 - it's called but it's not capital
104:22 - definitely okay
104:23 - i hope this was clear but you just need
104:25 - to make sure that this
104:26 - is a capital one and we will need to
104:29 - make sure that on the sidebar.js
104:31 - we do the same thing again a
104:34 - oh my zsa that's exactly what i'm using
104:38 - so we are going to be importing uh
104:40 - pusher with a capital here as well
104:43 - from pusher.js
104:50 - with a capital p and we should be good
104:53 - to go
104:55 - okay uh let's refresh
104:58 - hey hey okay should be good uh let's
105:02 - actually sign
105:02 - in there we go and
105:06 - all right we have the youtube channel
105:10 - let's say we had a new channel like
105:15 - real time
105:19 - lovers
105:22 - couldn't i could have come up with a
105:24 - better name by the way
105:25 - okay it's refreshing it's real time
105:27 - actually so
105:32 - yes and what we will do is just add a
105:35 - new message
105:36 - like welcome guys and some drop some
105:40 - fire in here
105:42 - hey there we go this
105:45 - application is real time
105:48 - hey hola tobias como estas ha
105:52 - uh that was my spanish knowledge by the
105:54 - way
105:56 - um
105:59 - okay not gonna translate okay not gonna
106:01 - work out i was literally trying to
106:03 - translate some stuff
106:04 - to spanish but not gonna work out okay
106:06 - uh
106:07 - and now what we will be doing is because
106:09 - we have a little bit of time until we
106:12 - reach the two hour mark
106:14 - uh hey david makes everything super
106:18 - simple that was
106:19 - dope thank you so much thank you so much
106:22 - really appreciate that
106:23 - and what we will be doing is we will go
106:25 - ahead and
106:26 - actually let's have a chatter in this
106:28 - application
106:30 - because i'm gonna go ahead and deploy
106:32 - this and
106:34 - we will go ahead and i'm gonna just drop
106:35 - it in the chat and we guys can have some
106:38 - fun uh actually pusher is gonna
106:41 - limit the whole thing because we are 150
106:44 - in the house
106:46 - and um
106:49 - okay it is what it is
106:53 - so the pricing actually says that um
106:57 - we can only have 100 concurrent uh
106:59 - connections with pusher but
107:03 - it happens so let's go ahead and open up
107:06 - heroku
107:08 - um
107:12 - yes and let's actually add oh
107:15 - hold on i wasn't sharing my screen so
107:17 - this is heroku this is where i'm gonna
107:19 - be
107:19 - uh installing the node.js package let's
107:22 - go ahead and create a new app
107:24 - and i'll say slack uh mern
107:27 - and let's go ahead create way hey so
107:30 - dope music makes you dope yes
107:33 - isn't it okay so what i will do is just
107:36 - go ahead
107:37 - and run this command in the
107:40 - back end over here sure
107:43 - [Music]
107:46 - okay so i don't know what the dollar
107:48 - sign is but it just makes
107:49 - your life like not cool okay there we go
107:53 - and we just added the heroku kit we'll
107:56 - just go ahead do a comment and then
107:58 - get push rock master okay so we will say
108:02 - get
108:02 - a and we would then go ahead
108:05 - and git commit dash am
108:09 - and done
108:12 - and
108:15 - git commit oh i think i added three m's
108:19 - but
108:19 - it's good that i remember that we need
108:22 - to edit getting
108:23 - or otherwise it's gonna go crazy so say
108:25 - get ignore
108:27 - and we're gonna add a node
108:30 - modules
108:34 - and yeah that's gonna do the work for us
108:37 - because node module is gonna just
108:39 - kill everything so okay
108:43 - and how do i reset get oh okay it means
108:47 - comment prompt okay so how to undo
108:50 - get uh dot
108:54 - and let's see okay git reset okay
108:57 - so i go ahead and say reset it's because
109:01 - i've
109:02 - mixed it and i say git status so let's
109:05 - go okay
109:06 - we have all the necessary stuff in here
109:08 - so i'll say go ahead get a dot
109:10 - as a dot git commit
109:14 - dash am done
109:18 - and say get push heroku
109:22 - master and this will actually go ahead
109:25 - and deploy my
109:26 - application uh if this was fast uh
109:29 - you can check it out any other uh
109:33 - no mern stack application that we did
109:36 - back in
109:36 - uh around september or the beginning of
109:39 - september
109:40 - and davidson
109:44 - both could learn host awesome
109:45 - presentation thank you so much
109:48 - really appreciate that all right and
109:50 - what
109:51 - and yeah we actually have 150 people in
109:54 - the house that's awesome
109:56 - okay smash the like button guys if you
109:58 - like today's build and if you're
109:59 - excited to have a chatter in the live
110:02 - slack clone that i'm just gonna go ahead
110:04 - and deploy quickly
110:07 - um that should have done it
110:10 - okay we should be cool and
110:14 - what i will okay so we have the back end
110:18 - probably so i will just go in and say uh
110:21 - heroku
110:22 - logs and guys if you actually want to
110:27 - have like a heroku and all these command
110:30 - line
110:30 - stuff going on
110:35 - okay nice so if you guys are interested
110:38 - in some kind of heracle crash course or
110:40 - something
110:40 - let me know in the chat as well as on my
110:43 - instagram so that we can present those
110:45 - stuff for you
110:47 - and what i will say is i just paste it
110:49 - in here
110:53 - thank you so much oh
110:56 - that way we actually see the comments
110:58 - thank you so much really appreciate that
111:00 - okay and we have hello clever programmer
111:03 - fam
111:03 - on up here that means our
111:07 - api is up and running that's good
111:10 - that's actually good now what i will do
111:13 - is go ahead and inside of axios.js
111:17 - i will change this
111:20 - link to this remove the slash and we
111:23 - should be good to go
111:25 - now uh let's actually test it out if it
111:28 - is actually working
111:30 - let's go ahead sign in
111:34 - and remember the front end is still not
111:36 - real time but actually
111:38 - is real time say yo and some rocket
111:43 - i said rocket
111:47 - boom we got it working and nice
111:50 - guys we just have like five minutes left
111:52 - from the stream
111:53 - stay here smash the like button if
111:55 - you're excited i'm just gonna go ahead
111:57 - deploy this
111:58 - and then we will be able to go in here
112:01 - and
112:01 - have some chat all right so what i will
112:04 - do
112:06 - uh what about back and stripe
112:07 - implementations david uh
112:09 - drop me a message on my instagram i will
112:12 - do it
112:12 - but i will not remember uh this comment
112:15 - so drop me a message
112:18 - and cool and we should be uh ready
112:21 - to build this so what i will do is say
112:25 - fire space in it because i already have
112:28 - my project
112:29 - ready my firebase project so i'm not
112:32 - gonna worry about that
112:34 - uh we have done it dozens of times so
112:37 - we would just make it fast so we would
112:40 - say hosting
112:41 - use existing project and we have this
112:44 - slack clone over here
112:46 - and this is actually super important uh
112:48 - you want
112:49 - you want to get rid of the public you
112:51 - want to go always with build
112:53 - so it will say build in here
112:56 - and we will use a single page
112:59 - application
113:00 - and we will not worry about the github
113:03 - stuff
113:04 - and we just set up the
113:07 - hosting we will go ahead and type in mpm
113:10 - run build that will pretty much survive
113:13 - all the developer stuff like hot
113:15 - reloading and all that stuff and
113:17 - creating
113:17 - an optimized production build that will
113:20 - just reduce the size to like
113:22 - 5 mb from 200 mb so it's a pretty nice
113:26 - uh
113:26 - reducing and it's still gonna be
113:30 - the awesome react that we know and love
113:32 - okay
113:33 - so we're just doing it it takes a little
113:36 - bit of time while we
113:38 - optimize everything so
113:40 - [Music]
113:41 - hopefully it's gonna be done very fast
113:45 - and thank you so much ram really
113:47 - appreciate that
113:49 - and exactly that is what's happening
113:52 - what alexandra's just dropped in
113:55 - we are running npm run build and
113:57 - firebase deploy
113:59 - and actually we could have set it up in
114:01 - package.json but
114:03 - we will actually we we can make a tips
114:06 - and tricks video
114:07 - very soon so guys if you're excited for
114:11 - like some kind of other content than
114:14 - just
114:14 - coding and projects let us know because
114:18 - that way we will
114:19 - go ahead and do the stuff that you
114:21 - actually request
114:22 - okay i'm excited for that
114:26 - now what is this doing for so much time
114:30 - we the production build should be ready
114:33 - by now
114:35 - let's wait a little bit okay there we go
114:38 - there we go and what i'm just gonna say
114:39 - is
114:40 - firebase deploy
114:43 - and we should be good very very soon
114:47 - okay it's deploying nice nice nice
114:52 - let's go it's uploading all the files
114:54 - finalizing version releasing the version
114:56 - there we go and
114:57 - i'm just going to go ahead and grab this
114:59 - link
115:00 - and test it out but and
115:05 - guys we should be good to go in any
115:08 - minute
115:10 - not authorized to run this operation
115:16 - okay uh we have some kind of issue going
115:20 - on in here
115:21 - let's go to our firebase and let's check
115:24 - it out so slack clone
115:29 - author is authentication
115:34 - hey okay so we have a couple of people
115:37 - in here that's actually good
115:39 - signing method um
115:44 - maybe because this is the wrong link
115:48 - at the domain
115:53 - okay let's let's try it out this way
115:57 - let's refresh because why not sign in
116:00 - with
116:00 - okay that was it that was it okay let's
116:03 - sign in
116:05 - hey welcome youtube hey guys
116:09 - yo what's up everyone
116:14 - we are live
116:17 - and let's actually add the red circle
116:21 - here
116:22 - and let's add some fire and we
116:25 - are live we are real time i'm gonna go
116:28 - ahead
116:29 - and drop it in the uh youtube chat
116:33 - so and i think i can even edit in
116:36 - restream chat
116:38 - okay maybe not so guys let's go to that
116:41 - link let's have some
116:43 - fun uh let's go everybody and come
116:46 - up here and let's get some
116:50 - let's get the energy over here and guys
116:53 - if you are
116:54 - if you enjoyed today's build there is a
116:57 - link
116:58 - down below in the description uh
117:02 - which is a okay you're live okay mack
117:05 - talk
117:06 - all right we are getting people in here
117:08 - nice okay this is working real time
117:11 - guys if we reach 100 uh it's gonna
117:15 - uh it's gonna like throw the whole thing
117:17 - off but
117:18 - that's it and
117:22 - one thing though so down below in the
117:24 - description there is a link which
117:26 - actually takes you from zero to hero
117:29 - in a react and that is a netflix clone
117:32 - if you want to take it to the next level
117:35 - i highly highly recommend going down
117:37 - there and watch it
117:39 - and we will we will totally uh
117:42 - work this out so
117:45 - if you wanna if you enjoyed it smash the
117:47 - like button
117:48 - hit that subscribe uh go and smash that
117:52 - uh bell icon as well so that you
117:55 - do not miss any of our videos and
117:58 - i think that is it for today
118:02 - this is david from cleverprogrammer and
118:04 - today we'll build the slack clone with
118:07 - mirn stack
118:08 - stay tuned we're gonna be dropping some
118:10 - bangers very very soon
118:12 - and i'll see you in the next video
118:16 - peace out guys
118:20 - [Music]
118:37 - [Music]
118:46 - um
118:56 - [Music]
119:00 - oh
119:01 - [Music]
119:14 - hey
119:18 - [Music]
119:35 - [Applause]
119:38 - [Music]
119:46 - you

Cleaned transcript:

how's it going everybody hope you guys and you guys are doing good this is david from cleverprogrammer and today we are gonna be building the slack mern clone so guys today is going to be a bit of an intermediate level um and i'm trying to make it like a bridge between basic and and the intermediate level so if you are new if you are uh a beginner coding this is for you but if you uh try to figure out how to migrate data and and your application from firebase when you actually like graduate from firebase because you know we always say that uh first let's go with always with firebase and once the functionality is not enough then we recommend highly to go for mirn and stuff like that so today i'm gonna be showing you guys how i actually transfer all these applications and then later on we will uh work on stuff like completely mean builds and either uh we have lots of buffers and internet stuff going on let me quickly set up my uh moderner device here so i see that some of you guys see that buffering every three second that that's actually strange i uh i'm pretty much like oh my god that doesn't sound good okay let me quickly quickly check it but it should actually be good uh for me even youtube says that stream health is pretty good so let's quickly refresh on that i mean we should be we should be good i'm hardwired to to the internet um that looks crazy okay uh please well yeah i'm watching the comments okay i'm checking it okay so the buffering is bad okay let me let me quickly look at here and i mean we are streaming okay i just turned off high definition uh and i have a control no no no i am i'm literally streaming in 1080p 60 frames per sec uh we should be good i have it over here and things are looking pretty good from here okay we the internet should be good internet should be good my upload is crazy okay okay so guys welcome everybody who is joining in who is new always uh wait guys let me know if you are new to this channel or if this is a mermaid that uh that is kind of like a practice for you okay it says it's okay now uh all right so then we should be good okay let's go how's it going rikiya what is up uh so uh we should okay everybody says it's good now okay that that that's cool that's cool all right so who is excited to build the mern uh slack clone today and put this uh thing on their portfolio and learn how to actually uh migrate your application from firebase to a fully functional build all right let me know guys we are 182 strong oh my god we are almost at 200 okay we are growing we are growing we are at 82 likes guys i think before we even started we can get this number up to a hundred uh we should be good can you show a demo please yes i will uh in just a sec uh okay i see the demand uh priyansha wants an asana clone okay hey lucy what's up here oh that's so awesome really appreciate that and guys this is literally the mentality that will get you forward that no matter how many how much work you got you still come here and put in the work as always all right we got new people in the house welcome to the family and all right okay um and it's good on it okay and perfect how's it going everybody what is up nitin um guys we should be good we really should be good this is going 1080p next to me okay i see rookie eyes are ready all right so uh we are 200 people strong and i think guys if you're ready let me know in the chat first but if if you guys are ready we can get started right now i want to make it like a dynamic a bit of a faster build so buckle up get your coffees get your water ready we will be learning a lot today we will be um transforming the uh working slack clone which was based on firebase and we will make it a fully functional mern build we are 205 concurrent viewers welcome everybody thank you so much for being here with us and guys if you are getting value out of this channel smash the like button so that we can get this and any other videos out and we are 111 likes already that's super cool guys awesome okay and okay let me quickly check the comments and i think we can get started yeah that's that's literally the goal uh what ricky i just pointed out right here uh we are working on putting as much content out to you guys as possible uh so yeah that's that's pretty much it so okay that that's that's exactly it like really okay so with that said i think i'm go oh my god we just got our first donation thank you so much waffy mohammed uh it's a lovely two dollar donation thanks for the hard work and the great job bro thank you so much really appreciate you brother that you're staying here and dropping these awesome donations okay hey good morning we are ready let's go says ferox awesome we got super pumped argen in the house and i think we can start getting it okay guys let me know in the chat who is ready to start rocking today who is ready to build the uh mern what is it slack clone let me know okay so with that said oh we got nero in the house what's up so with that said let's get straight into building today's build okay so uh let me quickly go ahead and share my screen we should be good all right so guys if you're watching this uh down below in the description there should be a uh hey let's go there that that's it all right so we should be you guys should be able to see a link down below in the description so this is the uh starter project for today and let's go ahead and everybody go to this link over here there is the green button that's what you want to click copy the link and you can go ahead and close that and what you need to do is first name your folder correctly because if you're missing a couple of letters that's just not slack so with that said let's go ahead open up a terminal which i'm gonna zoom in so that you guys can actually see it and we just uh we got this question so what is mirn uh mern actually stands for mongodb express js react.js and node.js which is the stack for today's build okay all right um guys if you're dropping questions like can you answer my questions i probably will not be able to answer those because they are just not there because they are way up uh if you drop it a couple of times uh i will make sure that i will answer it and we just got our second donation by shreya raj thank you so much brother for staying here and thank you so much for these lovely donations let's smash that like button and we appreciate you brother so let's go all right so what i will be doing is pretty much go ahead and zoom into this uh terminal a bit and what you guys can do is go ahead and clone it but first let's actually add a folder i think we need to add a folder let let's test it out are we going to do only becca and stuff tonight yes srimanki we are just going to be working with backend tonight okay so i will just add a folder um here and let's call it slack oops backhand nice and let's actually cd into that and once i'm in there i will um i will literally go ahead and type in git uh clone and just paste the link that i got from uh got from github and om gupta asks if is vue.js i thought it's easier to learn it's not ujs we are not going to worry about frontend stuff today we are just going to be transforming a a working frontend application that was built by sunny and qazi back a couple of months ago and we would turn that into a full stack build because that was a platform as a service plus a frontend build so that was a pretty lightweight stuff but today we are going to be taking it to the next level and we are teaching these stuff to you guys so that uh so that you can go ahead and and have this knowledge on your portfolio as well and we are at a 230 concurrent viewers thank you so much guys for being here and let's actually get started okay uh let's go ahead and and the other thing that i want to do today is actually um oh my god this wasn't even the back end which i uh cloned so the front end was the uh so the front end was the actual package that we cloned from github so let's actually copy and delete this one and paste it in here and because i created the backend folder let's rename it back to backend all right so what we will do is oh my god we just got another lovely donation by def tech uh it's another hundred rupees thank you so much we really appreciate you and thank you so much for all these lovely donations and hey we just got uh atharva's donations as well uh thank you so much atharva really appreciate you too brother and great job bro and we want david merchand what really okay we can look into that too all right okay so with that said let's go ahead and open up a wii s code in this folder so what i will do is just go up a folder and say code space dot uh we yeah and that should bring up a vs code here we go so we have the backend folder which is completely empty and we got the starter project right here which is actually a fully functioning react uh uh app i'm serious about merge l o l by oh my god okay so uh by the way yesterday's telegram clone was cool with perez oh my god we are so happy for him uh to doing these lives he is going to start coming on our youtube channel and that is going to be some serious stuff okay uh yeah let's actually dive into this so i will zoom into this as well hopefully okay here we go uh this actually might be a bit too much and so what we will pretty much do is we have the front end ready working um what we will do is go over here and go up a folder and let's actually go into the starter project so that we can go ahead and i always make typos today i guess so we can go ahead and say every uh literally download everything all the dependencies that we actually need for this uh frontend project to work so we will just type in mpmi and saad asks is if there is any alternative for mongoose yes there actually is i mean you can literally um go and connect directly to mongodb but i just don't recommend doing that because that's a lot more uh of a pain in the neck uh so that's why we are using mangoes but let me know why you ask that and why you don't like mangoes and we can continue this conversation okay yeah let's actually switch the screens back so while this is doing the uh installing uh we will go ahead and create our backend project as well so let's actually go into our backend folder and guys let me know if you are excited for today's build and if you guys are pumped to transform the slack clone to a fully functioning mern project so with that said we will say mpm init and we will go ahead and okay we got the package name version description entry point should always be server.js test command git uh keywords author dr mirn perfect license and there we go we also need to go ahead and initialize the version control we have a video from a couple of weeks back check it out if you don't know what kit is and if you want to get started because we literally teach you the best and the easiest way to learn how to use git all right uh so with that said uh let's actually initialize the version control there we go and the backend project will require the following uh dependencies so we will on the backend side we will have node.js which is uh a javascript runtime we will also have the express js which we need to install separately and that is actually gonna be uh the server side javascript that we are gonna be using today uh after we will alway also use uh mongodb which will be today's nosql database which is super easy to set up and then we will connect to mongodb with uh make sure uh we will connect to the mango db with mongoose okay so let's actually go ahead and install all those stuff we will go ahead and type in mpmi mongoose express and we will also use pusher to make the whole thing uh real time and we will also install the course headers dependency okay so that's gonna be pretty fast and once we are done with that we can go ahead and we can go ahead and um have the whole thing ready everybody says buffering again i don't know why you guys say it we should we should be good yeah everything is good okay so on that let's go into our project uh don't worry about the uh frontend stuff let's just close that thing up and what we will do is open up the package.json and inside of there we will add in some some cool stuff which will enable our us using uh es6 and we will also add the auto start script so we will say um inside of uh package.json that the type should be module that will pretty much go ahead and enable us using importing instead of requiring and we will also uh add the start script which is going to be responsible to start the actual application once it is deployed to a server yeah the live is cool all right um let's actually go ahead and save it we will also add the server.js file here we go and once we are done with that let's actually import everything that we will need today as a dependency of course we are going to be needing the express uh we will need mongoose we will need the course headers and we will also import pusher now um next up let's just jot down how the application is going to look like here's it so okay wonderful what says here it's okay not buffering i'm glad i'm glad it's not buffering and guys let's actually go ahead and get the energy up smash the like button if you are excited for today's build stretch out uh get yourself a coffee get yourself water because this one and a half hour left that we have is going to be epic and intense and we are gonna be just uh i'm gonna be focusing on dropping as much value to guys as possible uh i will focus on more like the overall oversight and how you should be thinking before making some kind of transitions be because if you if you just learn how to do it you will not be able to manage it so i will try to address that side of the project as well so smash the like button guys if you're ready and if you want to go ahead and up your freelancing skills by like i don't know 30 at least and raise your uh well and and raise what you can charge so let's go ahead smash the like button get this video out there to everybody uh that it's possible and let's continue okay so inside of here what we will first do is just pretty much outline the app so we will have the app config then we will also have some middlewares um we will also have some kind of db config says let's go yes exactly and we will also have some api routes and of course our application needs to listen to what we try to reach or what we try to do with it right okay so with that done let's go ahead and create our application instance that will pretty much consist of two declarations and what we will do is just pop these two in and we the first one is pretty much creating the application instance and the second one is going to define what the port will be uh by the way the mic is crisp okay sounds good okay and just use body parts anymore because express has built in now express json yes we will actually use that let's actually add those to you today uh or right now okay so arafat says let's rock and roll exactly yes so let's actually go ahead and add those middlewares that we were talking about one of them being the express json which is the builtin uh json parser the other one is the course headers now next up what we will do is uh not worry about any of the db stuff first let's actually create our api on the first the health check api route this will only say yo so i mean we can say let's build oops okay um let's say hello clever clever programmer fam and a rocket so guys that will be retrieved by this application so uh if you guys go ahead and uh call this api using the get method uh on the on the route so guys if you're with me that you have uh all the stuff that i was just talking about if you have on this on your computer it's a pretty good uh way uh time to start so let's actually go ahead and continue so let's go ahead and add the listening part which will um pretty much go ahead and do that stuff and let me actually quickly get rid of all these other unnecessary uh noises um oops okay that was the problem all right now uh what we will do next up is uh is pretty much we can go ahead and test it out i will teach you guys something new stuff because today is actually a bit of uh the next level right so i'm gonna try to uh not use postman too much it's actually an awesome tool but i will introduce today that that is a bit faster than uh trying postman every single time for every api and if it's just a get api i highly recommend using the terminal so we will focus on uh focus on that a bit so what we will do is go ahead and um this is okay this is front end let's move up here and this is going to be the back end so what we will do let's actually start up our backend server that will pretty much go ahead and oops there's something going on already oh and i'm not even not even showing my screen but this uh so there is some stuff going on let's actually go ahead and debug that so we have the esm modules experimental throw error uh okay so the 9000 port is already in use let's actually use a thousand instead um i mean it might okay we didn't even need the debug mode but that's okay so and now my lights are not changing back okay so uh with that said we still have 155 people on house so guys uh let's actually get everybody working and let's start uh doing uh whatever uh doing today's build so well what i will just pretty much do is type in curl and say local host oops local host and 8 000 and that will pretty much just make the uh request for me it's it's kind of like making a get uh uh get call so um there we go now we got our answer and that's it so let's go ahead and actually start uh connecting to our database but before that let's actually set up our database okay so today uh today's steps are gonna be setting up our database connecting then creating the api routes and defining schema and that will pretty much be the backend build for today afterwards we will go ahead and connect it to the front end that was built by sunny so without further ado let's go yes girl okay so let's go ahead and go to mongodb.com and i don't need this youtube going so uh we should be pretty good all right so with that uh let's go ahead and sign into mongodb what we will do is if you don't have an account you can go ahead and create one for free uh and if you have it just obviously just log in and that will do the work for you okay so you guys say that it's buffering a bit that's uh interesting shouldn't um so let's go ahead and go here click new project and say uh how like richard give it a name however you want to call this uh okay everybody says it is buffering let me check it out quickly it's actually not buffering it's working perfectly okay um so with that let's add the name of slack live learn and let's continue next up i'm not gonna be working with anybody today so i will just go ahead and create a project without adding any members or setting any permissions first up we will pretty much go ahead and create our cluster we will use the free one let's go ahead and click all the uh oh my god okay palm trees all right i hate these actually let's verify okay cool i'm not a robot that's nice and okay guys i'm gonna turn off high definition so that you guys can actually uh yeah there is a problem with transmission hmm okay i just turned off high definition uh guys you should be able to see it now uh working perfectly we shouldn't be receiving any more buffering okay we should be good seems good now it's not buffering okay okay i just keep high definition uh off and then that will be and contact my provider i guess so uh what we will do is go ahead and hit database access add a new database user and we got malika in a house with a lovely 20 rupees donation thank you so much we appreciate you a lot and thank you so much for staying around and being on all our uh live streams and actually she has a tiny bit of contribution to today's build she helped me a bit uh on uh today uh on preparing with the slack clone so huge shout out and let's continue let's go ahead and add the user which will be admin and just go ahead auto generate a password and copy it or make sure that you guys save it somewhere safe oops and let's go ahead and add that user because you will never ever be able to retrieve that same password now with that said uh next up what we will do and what i don't recommend you to do in production environment because because uh we because it's just uh not production friendly we will allow access from all the ip addresses why i say it's not recommended is pretty much that we can go ahead and anybody can hack into that database and that will be it so this was a huge disclaimer it's just for teaching purposes i'm actually preparing with some kind of security related uh live stream and the security related knowledge um it's just a fast it's just for the sake of speed okay so let's continue and let's add network access at ip address and this is the do not do confirm and we will actually make a security related video where we will go ahead and secure everything uh on one project and it will be just unable to hack into okay thank you so much sagar uh keep up keep the energy high and thank you so much i really appreciate you let's continue all right so now we have our database set up let's go back to clusters let's go to connect and hit the button in the center which says connect your application hit that copy that will go ahead and get it to on your um what you call a clipboard and let's go ahead and add a new cons which will be [ __ ] uri and let's add it in here and inside of here we will actually need to paste your uh the password that we had i'm using offred so i don't need to worry about any of this stuff i have uh actually three months of clipboard history uh at at my hand so okay uh yes okay uh yeah definitely we will prepare for that and we will do a security streams okay all right so next up what we will do is go ahead and say mongoose connect and we will pass in the mongoose uri which we just added and haven't configured fully because the db name is actually left just like that which is not cool so what we will do is just type in uh slack db okay we will actually guys uh i have a better idea uh if you guys have any kind of security related requests or whatever we should be talking about it's a it's a good stuff that you are putting it in the chat let's do it too but this is my instagram account and everybody okay and everybody go ahead and drop a message here and actually you can go ahead and request uh projects because we want to give you guys the value that you guys actually need and you guys actually want to put on your portfolio so this is my instagram and drop me a message what you guys want to build and what you guys want presentations on so that we can go ahead and give you guys the value that we need that you guys actually need and guys please keep the chat clean we uh do not tolerate uh spamming so we are here for learning everybody is here uh to have a great time so please keep it clean and i will remove this comment okay so with that said let's continue and what we will do is pretty much let's check out if our database connection is working perfectly and let's actually go ahead and say mongoose.connection and mongo's connection once open we want to go ahead and just console.log db connected let's not worry about any anything else so um teamviewer is using sure yeah drop it in my instagram cool so next up what we will do is set up all the all right that's exactly we want to do you guys whatever you guys need so let's actually go ahead and request stuff all right when twitch burn clone uh it actually needs a tiny bit of adjusting it's actually in the pipe so stay tuned for that and we got pre and shoe in the house so everybody who is spamming the chat is gonna be banned all right let's continue we have 167 people in a house let's go guys all right so first api that we will actually build is not gonna be the api instead we will fix the error that i just made which is not closing one of the um brands okay so first up we would just go ahead and uh do the schema for our db and we're just going to call it [ __ ] data hey mango data dot js nice that's going to be just a regular js file and inside of there we will go ahead and import uh import mongoose from mongoose of course we will go ahead and create a new mango schema right and that will be pretty much it and we also gonna go ahead and add all these fields inside of there so that we can actually validate what kind of data comes in here and whatever that is just not related to our build is just going to be removed or omitted so this pretty much oh thank you so much that's the goal that's literally the goal so what we will do is uh go ahead and so okay so this actually needs a little explanation so if we go to the firebase uh firebase project of sony's build i'm gonna bring it just next here so what you can see here guys is let's go back in here so this is how this is the exact same database that sunny built back in a couple of months ago so we see that there is a collection which is called rooms inside of there there are all these rooms which i was just uh playing around we have a sample one we have general we also pwj awesome and we have a test all these random stuff and inside of there we have the messages okay and every single message is another document so that will pretty much be how it looked like now what we will do is say we got the channel name which is gonna be uh this one right so this is going to be the name okay so profit for javascript is the name and it's actually inside of rooms which is going to be the collection or actually the yeah it's going to be the collection where we store all these stuff now because actually firestore so firestore is a hybrid between sql and nosql databases it can uh have multiple uh collections nested into each other but because we today we are going to be only working with um nosql we will uh we will we will mimic that thing with arrays and objects okay so think of think of collections like arrays and objects like documents okay i hope it actually made sense this is the first time i'm actually explaining it like this let me know down there let me know in the chat if it was clear and and why we do what we do so what we will do is have the collection which will contain all our conversations and all our channels and all of them will have a name and will contain a conversation which actually can be named to messages but for just the sake of simplicity we will go with conversation uh and inside of there every single object is gonna be one message okay so of course of course it will have a message which will be a string we'll have a timestamp a user which will actually stand for the username and we will have the user image as well now so let's go ahead and say export this thing and we what we will do is uh export default mangoes model and inside of there we will this is what creates the collection where we will store everything and that is going to be uh defined with the select schema that we just created up here all right so i hope it was actually clear and let's actually continue we have 154 people in a house let's go guys next up what we will do is go ahead and import this what we just built that will be just as simple as a single line of code uh we will import it as [ __ ] data and we will just go ahead and import the [ __ ] js file david are you seeing the chat who would i talk to if i ran into an issue uh drop me a message on my instagram okay drop me a message uh yeah and let's actually continue so next up what we will do is start creating all our uh all the uh api endpoints that we will use today so first things first we will need to create new channels inside of those new channels we will need to send messages we will need to retrieve only the channels to the sidebar and we will need to retrieve all the messages to the chat view right so actually this is gonna be four uh apis and we can actually get started building that thing let's go back to our screen and the first uh first api that we will say or that we will create is going to be the channel creator one and what we will do is just say app.post and inside of there we will have a new slash channel and that will fire off a function which has a request and the response parameter which will go ahead and create our channel for us now because we will be passing in the uh channel name inside of the request body we will need to first store it in a database not database in a variable it's been a long day let's not talk about it so what we will do is go ahead and say whatever we get from the request body we want to save it to a const which will be the db data now uh we want to go ahead and use that vb data uh to create a new document inside of the [ __ ] data right so that is going to be used for that and inside of that we will just do a bit of a bit of an error handling and that will be just a simple if gate and if we are receiving an error team sip is like a very good mug of coffee at 1am that is exactly the goal that right there is exactly the goal okay that's actually funny i'm gonna save that okay boom here we go uh so now let's continue and we just uh handled our error and one api is oh how did i put that oh my god okay so i messed up a bit uh the code and you don't want to put it to the mongoose connection instead you want to put them here so what we will do yeah uh after we save the request body we want to go ahead and go mango data create and [Laughter] exactly priyansha yeah that's it mango data create and we will pass in the db data and if there is an error we will go ahead and set the response status to 500 and we will send the error back and what if everything is cool we will go ahead and say 201 which means in server language everything is okay the new document is created now next up what we will do is go ahead and add the new message inside of there uh where's team cp now some of them are in los angeles some of them are in in the philippines some of them are in the uk i'm here on youtube so yeah okay and let's go ahead and actually uh continue on working and next api that we will build is gonna be the new message one so app.post slash new slash message which will go ahead and uh fire off request response uh [ __ ] function and what we will do is we will actually need to save two variables and the two of them is going to be one is going to be the id which will be the document id so that we can go ahead and identify which conversation do we want to push our new message into why is my chair not working and the other one is going to be the new message right so we will obviously because we are sending a message obviously we're going to go ahead and save it right so this is going to be the juicier part of of this api because we're gonna go ahead and first things first um we need to close all the brackets all right so there's no joke there but next up what we will do and i'm gonna type this thing out is that we will say mango data and we will not create instead we will update okay so let's go ahead and say update and what we will do inside of there so first we need to filter which conversation when do we want to uh add the new stuff into next we will push that and push the new data into uh the conversation that we have in uh there in that document and next thing is going to be the error handling all right let's go ahead and do that so first thing first let's filter that out and let's say id is going to be the id and guys actually i want to highlight this that mongodb uh okay i was pressing the wrong combination so mongodb is actually storing the ids with an underscore all right so let's actually go ahead and say uh id so everybody should see that there is that underscore that i was talking about okay so let's go ahead and okay cool so with that uh this id is actually going to be the id that we just passed in as a query from the url and next up what we will do is gonna go ahead and say uh push why did the dollar sign become four so we will say push because of course we need to push that new message in there but we will push it into the conversation right so conversation and that's where the new message goes all clear let me know in the chat if it is clear um all right thank you so much i'm gonna go ahead and answer all the messages that i got in my inbox today okay let's go ahead and continue and the only thing for this api is gonna be the error handling so let's actually do that let's do it is back welcome to the house let's go and continue so what we would do is just uh the only thing left is go is the error handling and that will be pretty much it and there is some kind of uh error which is i think not closing something or some okay so i left out a column after push okay uh it's crystal clear david what those comments are getting strange guys what is going on in there okay diamond clear chris talk oh my okay let's continue let's continue let okay you guys having some kind of different kind of conversation you should be paying attention to me so let's go ahead and retrieve all uh the channel names right so we will go ahead and retrieve everything but we will filter out only the necessary data this is actually a an easier uh step of security or it's more like confidentiality and all that stuff but we will go ahead and go over all these principles okay so one what we would do quickly is say uh we will filter out all the channel names and just those are gonna be uh retrieved back to the front end okay let's continue all right so so first things first what we will do is definitely it will be a get api so let's actually add that new thing in here and what we will say is that inside of there we will uh go ahead and find everything that we find in the database all right we will also start doing it with our usual error handling so i'm just going to pop it in so oh my god it's freaking out of course because the indentation and all that stuff is not breaking out all right so what we will do is we have the mango data fine we are not giving any simple or any single kind of filtering we'll just go ahead and retrieve everything and let's see so if there is an error we're gonna handle it of course and let's actually add in the new stuff so let's uh create an array and that array is gonna be retrieved okay so is this javascript in visual studio it's actually a vs code and i'm trying to find an alternative let's not talk about it so uh this is gonna be the array that i'm gonna be uh sending back to the front end next up what i will do is that you see that we are getting the data back okay so i'm gonna loop through that thing and i'm gonna grab out the id and the channel name right yes uh so what i would say is say data.map dot map and i will be getting back some kind of channel data right so every channel data i'm going to be grabbing out just the id and the channel name i only need those two for the side for side um yeah i'm thinking of webstorm as well so the only thing i'm gonna need for the sidebar is the id and the channel name okay so uh let's actually map those out and get those things uh out and for that we will actually go ahead and create a new uh object okay and this is what we will be passing into so we will be pushing this so say channels.push and we will go ahead and add the channel not data channel info okay this is literally what we will need for that thing so guys if you are with me if you almost have your second a third api route ready smash the like button and let me know if you're getting a value out of this video or i should just shut down this stream because nobody's actually watching let me know uh if you guys are enjoying this and if this is something that you want to learn or if this is something that you are actually interested in because i am very much relying on your feedback okay so that i can improve uh all these stuff uh which screen are you coding and watching comments so this is the one that i am watching the comments and this is the one that i'm actually sharing you with you guys and that's my camera okay um so let's go ahead and continue and what we will say is we will go back and uh sand back the channels outside of that loop and that will be pretty much it the third uh third api route is gonna be it and i think i have forgotten to close some stuff so let's actually do that um pretty much it that's all okay so uh what we would do uh all right so we were actually just talking about that react native is on the way so yeah stay pumped for that okay uh what we will do next is the last and the only um the last api route that we will use today and that will be just a simple we will retrieve everything back and that will be pretty much it so we will say app.get get conversation and we will save the uh query id which we will be passing on so that we know which conversation are we actually in okay so remember uh if you guys have done sun is build uh with the slack clone we were using something called the react router and that actually makes the request and that id is going to be passed into this request which we will be uh which we will be uh filtering the data based on so this is the filter uh again the underscore id and that's it and next up what we will do is go ahead and sure let's do it and what we will do is just pretty much do the usual error handling now what we will next up do because our backend is pretty much done so that was the back end build for today now we're gonna go ahead and detach firebase and attach this back end and make the whole thing uh fully um what you call it real time okay so let me know guys who is pumped for that who is ready to make this or finish this build in just half an hour i think we can do this in just half an hour we are gonna be super fast today okay and we will actually bring new stuff to the channel very very soon so guys drop some fire in the chat let me know who is excited and who is pumped and let's continue so what we will do is go into the front end project and and what we will do is uh say uh go into source and the files that we will need is gonna be the chat chat input and sidebar and sidebar the other sidebar thing so let's open up the chat let's open our chat input we will also need the uh sidebar option and we will also need okay i see all the fire coming in hey let's go that's it okay nice more fire uh okay we got sam in a house all right let's go so what we will do is say all these d beat our collection and all these firebase stuff this is awesome stuff but we're just gonna get rid of it today and yeah all right so what we will next up do is we don't even need this one and we will grab the sidebar.js file so first thing first i think the easiest one is going to be just retrieving the sidebar data and whatever we are going to be uh adding to this sidebar type js yes and what we will do is let's actually go ahead and fire this project up so i'll say npm start over here so this is probably gonna be freaking out um and we let's actually first fix that okay so we we are getting all the fire and love in the uh chat that's nice and actually something okay so it's starting development server that's good and i'm just gonna grab the whole thing to a whole new page so okay i think i think it's building or something it's taking very very long okay and let's actually put this user on timeout thank you for being here and while we would okay so let's actually wait a bit while this development server is starting up i don't know what's freaking out by the way and rukia asks if we are going to be using router or browser router and nope i mean it it's already built by sunny so we are not going to be focusing on it and we got the slack clone over here we're just gonna go ahead sign in with google and let's actually go ahead and do that pretty quickly great content in the house and youtube burn possible um i mean we can totally do that okay i'll look into that and we can do that okay so if i go in here it's now obviously okay what is going on in here okay sample uh i think we're everybody uses my um my credentials so okay keep it clean guys probably i made a mistake by not by not removing all the api keys so you can just go ahead and we can have some conversation in here while we are detaching so let's actually go ahead and what we will do is uh change this part and this is not gonna be pulled in to the uh in from firestore anymore instead we will be pulling it in from uh mongodb all right so let me know if you're excited for that and let's drop some fire and let's go so what we will do is let's first actually just comment this part out and inside instead of just starting with axios and all that stuff uh let's add the uh axios as a dependency so let's go ahead and say uh npm i and axios and that will pretty much go ahead and are you going to publish this app on google store i don't think so okay stream pros buffering buffering buffering um try to refresh it high definition is off so it's guys it should be perfect okay uh see all the fire is coming in nice okay so we have the axios installed and let's actually go ahead and add a new file which we will call axios.js and what we will say in here is we will import axios from axios and then we will just pretty much go ahead and create a new um instance okay which will be an axios dot uh create nice and inside of that what we would just what we will be passing on is uh it's just the base url okay so the base url is of course it's gonna be uh http colon slash slash local host and 8 000. and my emoji app is going crazy and yeah uh any plan for meet up i mean once this corona stuff is over as far as i know we are going to be planning and we are going to be doing live events so stay tuned for that okay let's continue so what we will do next up is just go ahead and export it so we we will be using default exporting so however we want to we can import it on the other side so instance that's it and yeah my stream is going cool on the other side all right we should be good okay so uh our axios instance is uh is ready and we just got this question from ferox uh why we use axios and the reason for that is axios is actually converting the response immediately to json and we don't have to deal with all the other headache stuff and it's just a lot more professional and and it's just a better thing to use okay i actually raised my volume a bit so you guys can hear me more clearly so that's pretty much the reason why we use axios and not fetch and all that stuff and as far as i know node.js doesn't even support uh fetch you need to import that or with another uh package so it's um it's a bit messy so let's go ahead and say uh let's go back let's close axios.js up we will not use it anymore and inside of here we're going to go ahead and pretty much just uh import that and that's uh pretty much it and the one thing we will do is create a new function which we will be uh using to uh render out all this stuff so we will create a get channel list which is going to be in axios.get and we will go to the get channel list uh endpoint and i think i think that's not the correct uh oh yes it is okay so we will go ahead and grab the channel list and then the response will be so the response data is going to be set as the channels so that's pretty much what we will do here for now and we don't even have to worry about any of these stuff down here uh because these are just compatible because we designed it that way so um next up what we will do is say instead of the uh use effect and all the firebase stuff we really appreciate you son of brother but we are just not going to be using firebase today uh and instead we will just call this uh function that will pretty much go ahead and do our stuff and of course this is where our real time stuff will come in so let's just worry about that that's gonna be the last one and we will be just ending it like super fast okay so next up what we will do is go to sidebar option and here we also see this one which we can go ahead and get rid of and well we will pretty much replace it with is another uh three line called or actually two line code uh we will actually add the channel name as the channel name of course because that's how we uh defined it and that's how we will uh accept it and we will go and say axios post to new channel and that will pretty much go ahead and create a channel for us okay so next up what we would do and guys let's actually get this energy up i see okay i see a couple of you say the um um live is froze i don't think it actually is froze i'm watching it right here and it's working so let's go ahead and say um okay now youtube is freaking out and saying the bitrate is not enough but we should actually be good okay uh i think even my internet no that's fine that's fine okay let's continue guys get the energy up smash the like button if you're getting value out of this video and if you are enjoying this speedy build uh we really want to uh show you guys that this can be done in just a matter of like one hour or one and a half i mean with all the talking it's of course it's more than an hour but without all these it's definite and i actually see all the messages coming in and without all this talking it's actually a lot faster so guys the reason being is today the title actually includes the word intermediate because we are not really testing and we're just gonna be oops we're just gonna be debugging everything at the end if there is anything to debug and um and yeah so we are just gonna i'm trying i'm trying to uh teach you guys that this actually can be done super fast okay and shivangi asked if i have a personal uh youtube channel uh not yet should i create one okay and the build is going like that that's exactly what today is about we are speeding up and we are gonna be bringing some new stuff very shortly so stay tuned for that guys and let's actually uh go okay from teams only coding but also how to speak in english stylish if you're learning english from it that that might not be the best idea but actually i'm glad that you are getting like double times the value so that's awesome okay okay uh braxx asks uh what are we doing here so brother uh we i think you're new here uh but we are doing is um uh pretty much sunny who is an awesome team member of clever programmer has built a uh slack clone back i think in august or july and that was actually using react and firebase so it was a front and only plus uh plus a platform as a service and that was built by them and today i am taking it to the next level by removing firebase and actually adding a complete backend to it so if you actually enjoy if you actually if this actually sounds like interesting to you i highly recommend uh first go ahead and watch sonny's video on the front and build and then next up uh come back here and watch this one this is actually gonna be a much much shorter uh than the other one so all together it's gonna be like around five and a half hours okay but then you will actually have a front end with a platform as a service build on your portfolio which will be using realtime database and you will have a mirn stack application on your portfolio and you will be able to show these two off and show the differences and all that stuff so that you are super e you will be super uh super easily getting a job in 2020 which is actually uh one of our goals that to in this year we want to help 5 000 people to get jobs as developers so if you uh happen to get a job uh using one of the uh using the knowledge that we share on this youtube channel let's drop it in the chat okay and one more question i'm gonna answer is which language is the best for programming javascript of course okay maybe swift on the side but these two okay next up cool got you i'm down for a job in coronado that's it that's literally it that's the mindset just put in the work and that's it okay okay and let's actually continue smash the like button guys if you're getting uh value out of this video and let's continue so what we will do next up is uh because we have the add channel function already uh yeah we can pretty much i think omit this file and let's go into chat input but actually let's go into chat and so guys you probably see that this is like a lot of code we don't like a lot of code we like simple shorter codes and we want to help our front end developers as backend developers so that they don't have to work that much and they can focus on the creative stuff on oh and the great ux so we want to help them by just reducing their whole coding stuff to three lines okay um like this actually four okay so i uh messed something up here um okay so this is the code that we will be using instead of all these and let's actually don't even worry about uh all these firebase things uh these are awesome but this is just a lot of work uh to go go with so guys as backend developers your goal is always to help the frontend one um what hair conditioner do you use nothing dude just watch it uh so as backend developers you want to go ahead and help the have the frontend guys so that they will have the more more focus on making the products super crisp and awesome looking instead of worrying about all these api calls so what we will do is say axios get and get the conversation for that specific room right so this is the query that we are adding at the end and then from the response we will go ahead and grab the data and the first which is zero in programming uh youtube channel of club programmer don't worry about books okay so from the response uh inside of the data you want to go ahead and grab the first object and you want to grab the channel name for setting the room details that will go ahead and set uh on the top and down in the bottom everything for us and next up what we will do is set room messages to the conversation and it's freaking out because we haven't imported axios now let's do that very quickly so we will just go ahead and say import axios from um axios and that will pretty much solve our problems hopefully maybe not let's check it out okay it's oh it's from the sidebar option so we can go ahead and copy this one and drop it in here boom let's see if i forgot it from somewhere else so we will go ahead sign in let's go ahead and actually guys we should be seeing all the empty stuff because i actually haven't added anything but let's actually keep it this way and once we actually add everything you will see that this is like super crisp and super fast okay so let's leave it like this for now if you want to go ahead go ahead and test everything out like the ad channel should be working so yeah and we also have the uh also have everything ready i mean this is where all the channels should be showing up but because we don't have any of those channels we're just not going to be bringing up about those for now um what did you use for designing with google uh actually it's still firebase so the amount of headache that you would get to work with like passport edges and all that stuff it's just not worth it we will definitely do a video on that but that's going to be like a not a full project uh because that's just too much um so that's why we are using authentication for with the firebase and also because today's topic is how to abandon firebase if it's not enough for you um the authentication is always going to be enough so there's just not going to be any better option than firebase's uh authentication okay so uh let's go ahead and go back in here and what we will pretty much do and go ahead and do is actually uh get these get this uh get this uh get this request into a function and that will pretty much go ahead and we we're just gonna go ahead and grab this out of here and put it out here so that we can call it from inside and you guys will see very soon why is that important and polog asks what is git uh i highly recommend you go ahead and watch the video that i did with ammanot uh another part another team member of clever programmer and we did an awesome how to begin with or get 101 sort of uh video with two recommendations what the whole what what is the whole thing and how to start using it as a developer and all that stuff um hi captain cool so let's go back in here and let's continue so this is where all the real realtime stuff is gonna go uh real time stuff and we will actually go ahead and not today but uh later on we will drop a video on how to make your app like super optimized that it doesn't even use any kind of resource okay so um last but not least uh i think we have the chat input left to do yes that is correct let's remove that thing and whoo somebody says i'm muted i shouldn't be am i guys i shouldn't be muted no no i'm not muted definitely not muted so clever programmer what's more difficult backend or frontend um it depends which one which one do you like for me it's frontend because i just don't like to mess around with all the css stuff but okay oh okay okay okay there is some other conversation going on and i'm just gonna ignore that for now okay uh so inside of chat.js what we will do is get the uh no we will go to chat input and we will actually create um the post request and we will not uh have it out in other function let's just not worry about that and what we will do is just say axios pose new message and we will need to pass in the channel id right because that's how the backend determines where to push that new message and uh oh yeah okay and what we would do is say create the message and that's gonna be the input and we will say the the timestamp is going to be a data now which is going to be super simple and we also have the user which will be the user.display name which we are actually grabbing from the react context api and guys if you don't know what this real context api is i highly highly recommend going back and watching sonny's video on this slack uh clone he does an awesome job explaining it i'm just not gonna go into that because uh that will be uh that will be uh too much okay so let's go and because we just added everything we should be good to go let's go ahead and test this out of course it's not because we haven't imported uh um xcos so import xios from axios that's it uh yeah we will build an admin panel later on we can definitely do that okay drop me a message on instagram and we can totally do that okay so we just imported axios that should have uh got this done let's test this thing out and let's see what we got so we should be able to create a new channel which will be you tube okay nothing happens that that's completely fine that's completely fine why why is it uh completely fine because it's still not real time yet but we will go ahead and refresh it and we should be seeing it popping up on the left hand side so uh private chat room club programmer if we want to make a private chat room user to your can you make with the same method as with channels yes you can definitely do that i think i will actually uh create an other one uh which will include that okay let's go in and sign in and there we go we have our channel on the left hand side guys drop a comment if you are here with me if you have that channel functionality working both retrieving and both adding a new channel let me know uh if you are if you're following and if you're with me and if you're enjoying this and smash the like button if you are getting video out or value out of this video okay almost got that word order and let's go ahead and select that and okay so for some reason it's not updating up here neither down below let's actually go ahead and address that and let's see what is happening okay so it actually is freaking out because uh there is still the wrong address going on in here boom so let's say here we go and let's go ahead sign in oh request should be 8 000. uh maybe i have messed it up in my axios.js no i haven't it's it's 8 000 should be good okay there we go and let's go into youtube okay so it's freaking out for some reason uh not no worries we will address that in just a minute so let's actually debug whatever is happening yes it is gonna be uh posted on youtube so what we will do is quickly go into chat.js and let's actually let's actually realize that uh there were more data stored into room details so that's why uh it is freaking out for now but let's remove all these stuff and we will actually be uh fine with that and let's actually remove it from here so that we are not passing in the wrong kind of data so right now room details dot name is undefined because of course it is undefined right so we are only uh grabbing the channel name to the room details no key and all that stuff and no id and all that stuff so let's test that thing out and i think it should uh it should have made uh corrected that mistake and yes it has so guys down below there is uh youtube and up above there is youtube as well so smash the like button if you are here with me and if you have this thing working to the point where i'm at and let's actually continue okay uh boom so we should be uh good all right we got so much fire going on in the chat section that's awesome okay and what i will do is say uh next up i am gonna test out the message sending functionality so let's go ahead and say hey guys oops hey guys and at some fire boom and we should be able to see it once we refresh okay sign in with google okay here we go and what okay so it's freaking out no problem no problem no debug mode for this so what what is happening is that the timestamp is not in the correct format not a problem uh we can fix it like super quickly in message.js file let's actually go ahead and go into message.js so this is the line of code which is uh freaking out and what i think the problem could be is so we will need to say parse in first uh to ma to timestamp and we will add the parts and we will remove the question mark the optional chaining and all that and we don't need the to date either and i think this should be able to make the app work so let's sign in again we still have 140 people let's drop some fire let's smash that like button we are at 278 likes that is super awesome that is super cool and let me know guys if you're actually enjoying it and smash the like button and let's actually get this thing up to 300. we are so close we are very close so let's get it up there and let's show this video out there to everybody all over youtube so we are at 280 let's go ahead and let's actually push that number up to 300 okay let's go so we are two for 284 let's continue growing that number so with that said let's go ahead and log in here we go okay and we got the date back normally image we have the message we have my name so that is uh and we have kazi on the left hand side um sorry kazi i'm gonna remove you from there and everybody who has uh logged in their name is gonna be showing up there so we will go into sidebar.js and i think it's actually coded and there is this typo not a problem so instead of quasi we will say user the display name and i think it's gonna be freaking out because we don't have a user imported so we will say uh up here we're just gonna go ahead and uh get the user from react context api and we can just do that super simply now i think that actually uh solved the problem uh newstate value is not imported not a problem uh we're just going to go ahead and do this and i think here we go johnny one he said hey oh this channel is lit that's it let's go all right next up uh let's sign in and let's see what we got so logging in hey nice okay we got the name changed so um we have the sand we have all the functionality right that we needed to work on the back end time to make the thing real time and that will be pretty much it for today so let's go to pusher.com and let's actually go ahead sign in if you guys don't have an account you can go ahead and sign up it's completely free with a couple of restrictions but don't worry about that we have never reached those and let's go ahead create our app use us three and west so the front end is gonna be react it's as native but nope we will we will use node.js on the backend a alexandra is in the house nice and so we just selected our languages exactly that is our goal to make it this channel as informative as possible so yeah huge shout out and thanks and what we will do is actually scroll down here to the back end because that's so much easier to set up and let's go back to our server.js file go up here to app.config and just paste it in here okay uh cycle quarter ask asks if there is a alternative for pusher and probably there is but it's just super simple to set up and super easy to use and probably is one of the most uh popular and i know a lot of you guys are going to be like oh there's soccer i o and yes there is socket i o but there's just a pain in the neck so i was like yeah let's do the easy one and the powerful one because that actually saves time for me with preparing and for you when you're working with clients right so the the more so actually it's time is money right let's put a price tag on every hour you spend and you will understand it's super fast okay and and the faster you work the more jobs you can do the more money you can earn simple as that so that is the reason why we use pusher so let's actually change the encrypted to use tls because for some reason uh encrypted is uh deprecated and we are gonna be using the tls one and let's rename the uh let's remove the war and we will say we will say const instead you got it brother uh the psycho coder okay and next up what we will do is we're going to go ahead and set up our chain stream uh and what we will do is go ahead and set up the change stream which is literally a super nice way by uh mongoose that you we can go ahead and watch all these uh collections what we do is create a chain stream change stream which is going to be watching the mongoose connection collection so the collection of the mongoose connection which is actually the conversations and it's going to go ahead and watch it and once there is something going on we can pretty much go ahead and say ooh caps lock we can say chainstream.on of course it's going to be change we're going to fire off something which will have a change uh parameter inside and we can pretty much go ahead and that is where we gonna go and uh runner i am beginner i am very slow in js it is no it is not yes it is completely normal uh today we are actually uh going a bit faster than usual uh we are just trying this out so that everybody gets entertained and i highly highly recommend that you got you watch this video so that you actually can see how fast this can be right and how fun and fast and powerful this whole development can be and then go ahead and watch all the other videos there is a lot of begin like very very beginner friendly content on this channel so you can go ahead and watch those and then come back and watch this one as well and once you you pass through all those uh videos uh you will be able to rush through this one as well and then you will feel so powerful okay i can guarantee you that all right uh let's go back and say that if the change okay so inside of here we are passing in the change so if uh change the operation type is actually insert oh insert yeah okay i'll tell i'll i'll learn how to type exactly alongside literally drop the code in here okay so that that's what we will be adding okay uh so if it's insert we're gonna go ahead and trigger a pusher which is gonna be a new channel even on the channel stream and if it's not uh we will so that is literally uh gonna be watching if you are running a new channel right so remember when we add a new channel that's when we actually insert a new document but uh when we are adding a new message we are just updating one of the documents right okay so that is what is gonna happen here so we will add an else if and an else statement uh here okay there is some craziness going on over here okay um right so as if the cha if the operation type is in update so that means a new message gets pushed into the database then we're going to go ahead and trigger the pusher button in a bit of a different way so up here we are triggering the channels channel and we are adding the new channel event but this time we're gonna be adding the conversation uh channel and we're gonna add the new message even right and we're just gonna be passing through the change let's not worry about that for now uh we will make a video on how to make this super super seamless and not use too much resource okay and we will also add the console login here if something is not working perfectly we're just going to cancel like the error triggering pusher now with that done we literally are done with the back end so great job next up what we will do is go to our front end and we will add all this stuff wherever we are retrieving something so that is going to be chat.js file right so whatever we have a get api call that's what we want to make real time all the others don't worry about those so we have the get combo over here and what we will do is go up here and actually grab this one which will go ahead and create the uh instance so let's actually remove the war you don't ever want to use var you want to use const instead and you want to go ahead and grab this thing which we will insert after over here let's remove the alert and let's actually add the get the function calling over here as well and we will actually subscribe to uh which one is it so it's the chat dot js so we are gonna be uh subscribing to the conversation one right and we are gonna be subscribing to the new message uh even all right so guys if this makes sense let me know or if it was too fast and i need to go over it again but before we do anything let's remove this bar hey dinesh what is up so add const in here and that will pretty much go ahead and refresh our conversation and yeah that's it so optimizing it would be like uh we add a new uh so optimizing would be that whenever we are passing in a new message we are just pushing it from uh the database to here right but that would just uh take too much time to implement but we will do it in a separate video okay so stay tuned for that we will get all the optimization things in one video and we will cover it okay like next let's go ahead and what else do we got we got the sidebar.js file and that will be pretty much it for today okay so up here let's actually add the uh pusher instance and what we will do is say uh const instead of var and hey we got another lovely donation by ff uh it's 40 rupees bro how should i learn morn from scratch help me honestly by watching these videos okay so i would leave this one to as the last one but i would go ahead and watch tinder mirn uh then tick tock mirn what's up mern and maybe instagram learn then facebook moan and then coming here okay i think that will that is like a nice learning curve so first is just the basics like how to retrieve and store data in uh in mango db right so and then you will learn with instagram and facebook clone how to actually store images and actually files because you can i didn't tell you that time but you can literally like upload whatever files you want so if you want to go ahead and uh upload like a video you can do that if you want to go in and upload like a pdf file you can totally do that but mongodb has a 500 mb free storage so if you're exceeding that it's just not going to be transferred and next up i would go here and learn this one maybe uh netflix mean by yourself actually that's that's a good idea as well uh but i would definitely make one of the uh discord clone maybe an imessage clone as well so that you can separate those uh so you can see the fundamentals of how to have like different conversations and then get this one so that you can see that how fast it can be and if you remove all the chatter that i do and like reflecting and answering all these comments uh then you will see like how fast it can be okay and actually let me know in the comments and in the chat if you guys would be interested in seeing us or either me sonny or or whoever will do that but how we actually prepare to these uh lives right so if you guys are pumped for that and if you guys want to see us behind the scenes like how we prepare so like without an idea of how i started uh from the beginning till the very end when it is actually working drop some fire and let me know so that uh we will have a reference and and we can we can show you guys how we actually work on these builds okay uh and last but not least we will remove this comment and add the um and this inside of here remove the var replace it with a const and why is it okay and let's actually get the channel list again inside of here once we see that we receive a uh we received a new channel and we just got another donation from ff 30 rupees thank you so much brother uh we really appreciate uh that and thank you so much okay um what do you think about microservices is six system design essential uh microservices i think it's only useful when you're working for like huge company okay uh okay uh and we also need to uh sign up for the channels channel and now this application actually should be a real time once we uh import all the pusher stuff because we haven't installed anything obviously it's not going to work like that let's go ahead and type in mpmi pusher js and yeah that will pretty much go ahead and do the work for us it installs the dependency for the front end hey thank you so much appreciate the love okay and we have it installed and now what we will do is we need to go to chat.js and actually import it so we will say import uh i said import from pusher.js we will and this is actually a capital p okay so we are importing with a capital p because we are creating a new instance of it here with a not capital p i don't know how it's called but it's not capital definitely okay i hope this was clear but you just need to make sure that this is a capital one and we will need to make sure that on the sidebar.js we do the same thing again a oh my zsa that's exactly what i'm using so we are going to be importing uh pusher with a capital here as well from pusher.js with a capital p and we should be good to go okay uh let's refresh hey hey okay should be good uh let's actually sign in there we go and all right we have the youtube channel let's say we had a new channel like real time lovers couldn't i could have come up with a better name by the way okay it's refreshing it's real time actually so yes and what we will do is just add a new message like welcome guys and some drop some fire in here hey there we go this application is real time hey hola tobias como estas ha uh that was my spanish knowledge by the way um okay not gonna translate okay not gonna work out i was literally trying to translate some stuff to spanish but not gonna work out okay uh and now what we will be doing is because we have a little bit of time until we reach the two hour mark uh hey david makes everything super simple that was dope thank you so much thank you so much really appreciate that and what we will be doing is we will go ahead and actually let's have a chatter in this application because i'm gonna go ahead and deploy this and we will go ahead and i'm gonna just drop it in the chat and we guys can have some fun uh actually pusher is gonna limit the whole thing because we are 150 in the house and um okay it is what it is so the pricing actually says that um we can only have 100 concurrent uh connections with pusher but it happens so let's go ahead and open up heroku um yes and let's actually add oh hold on i wasn't sharing my screen so this is heroku this is where i'm gonna be uh installing the node.js package let's go ahead and create a new app and i'll say slack uh mern and let's go ahead create way hey so dope music makes you dope yes isn't it okay so what i will do is just go ahead and run this command in the back end over here sure okay so i don't know what the dollar sign is but it just makes your life like not cool okay there we go and we just added the heroku kit we'll just go ahead do a comment and then get push rock master okay so we will say get a and we would then go ahead and git commit dash am and done and git commit oh i think i added three m's but it's good that i remember that we need to edit getting or otherwise it's gonna go crazy so say get ignore and we're gonna add a node modules and yeah that's gonna do the work for us because node module is gonna just kill everything so okay and how do i reset get oh okay it means comment prompt okay so how to undo get uh dot and let's see okay git reset okay so i go ahead and say reset it's because i've mixed it and i say git status so let's go okay we have all the necessary stuff in here so i'll say go ahead get a dot as a dot git commit dash am done and say get push heroku master and this will actually go ahead and deploy my application uh if this was fast uh you can check it out any other uh no mern stack application that we did back in uh around september or the beginning of september and davidson both could learn host awesome presentation thank you so much really appreciate that all right and what and yeah we actually have 150 people in the house that's awesome okay smash the like button guys if you like today's build and if you're excited to have a chatter in the live slack clone that i'm just gonna go ahead and deploy quickly um that should have done it okay we should be cool and what i will okay so we have the back end probably so i will just go in and say uh heroku logs and guys if you actually want to have like a heroku and all these command line stuff going on okay nice so if you guys are interested in some kind of heracle crash course or something let me know in the chat as well as on my instagram so that we can present those stuff for you and what i will say is i just paste it in here thank you so much oh that way we actually see the comments thank you so much really appreciate that okay and we have hello clever programmer fam on up here that means our api is up and running that's good that's actually good now what i will do is go ahead and inside of axios.js i will change this link to this remove the slash and we should be good to go now uh let's actually test it out if it is actually working let's go ahead sign in and remember the front end is still not real time but actually is real time say yo and some rocket i said rocket boom we got it working and nice guys we just have like five minutes left from the stream stay here smash the like button if you're excited i'm just gonna go ahead deploy this and then we will be able to go in here and have some chat all right so what i will do uh what about back and stripe implementations david uh drop me a message on my instagram i will do it but i will not remember uh this comment so drop me a message and cool and we should be uh ready to build this so what i will do is say fire space in it because i already have my project ready my firebase project so i'm not gonna worry about that uh we have done it dozens of times so we would just make it fast so we would say hosting use existing project and we have this slack clone over here and this is actually super important uh you want you want to get rid of the public you want to go always with build so it will say build in here and we will use a single page application and we will not worry about the github stuff and we just set up the hosting we will go ahead and type in mpm run build that will pretty much survive all the developer stuff like hot reloading and all that stuff and creating an optimized production build that will just reduce the size to like 5 mb from 200 mb so it's a pretty nice uh reducing and it's still gonna be the awesome react that we know and love okay so we're just doing it it takes a little bit of time while we optimize everything so hopefully it's gonna be done very fast and thank you so much ram really appreciate that and exactly that is what's happening what alexandra's just dropped in we are running npm run build and firebase deploy and actually we could have set it up in package.json but we will actually we we can make a tips and tricks video very soon so guys if you're excited for like some kind of other content than just coding and projects let us know because that way we will go ahead and do the stuff that you actually request okay i'm excited for that now what is this doing for so much time we the production build should be ready by now let's wait a little bit okay there we go there we go and what i'm just gonna say is firebase deploy and we should be good very very soon okay it's deploying nice nice nice let's go it's uploading all the files finalizing version releasing the version there we go and i'm just going to go ahead and grab this link and test it out but and guys we should be good to go in any minute not authorized to run this operation okay uh we have some kind of issue going on in here let's go to our firebase and let's check it out so slack clone author is authentication hey okay so we have a couple of people in here that's actually good signing method um maybe because this is the wrong link at the domain okay let's let's try it out this way let's refresh because why not sign in with okay that was it that was it okay let's sign in hey welcome youtube hey guys yo what's up everyone we are live and let's actually add the red circle here and let's add some fire and we are live we are real time i'm gonna go ahead and drop it in the uh youtube chat so and i think i can even edit in restream chat okay maybe not so guys let's go to that link let's have some fun uh let's go everybody and come up here and let's get some let's get the energy over here and guys if you are if you enjoyed today's build there is a link down below in the description uh which is a okay you're live okay mack talk all right we are getting people in here nice okay this is working real time guys if we reach 100 uh it's gonna uh it's gonna like throw the whole thing off but that's it and one thing though so down below in the description there is a link which actually takes you from zero to hero in a react and that is a netflix clone if you want to take it to the next level i highly highly recommend going down there and watch it and we will we will totally uh work this out so if you wanna if you enjoyed it smash the like button hit that subscribe uh go and smash that uh bell icon as well so that you do not miss any of our videos and i think that is it for today this is david from cleverprogrammer and today we'll build the slack clone with mirn stack stay tuned we're gonna be dropping some bangers very very soon and i'll see you in the next video peace out guys um oh hey you
