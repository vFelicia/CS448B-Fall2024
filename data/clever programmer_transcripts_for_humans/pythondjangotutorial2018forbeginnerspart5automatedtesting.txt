With timestamps:

00:00 - hey guys what's up how's it going this
00:02 - is Kazi from clever programmer calm
00:04 - welcome back to yet another tutorial
00:07 - write your first django app part 5 I
00:13 - said part 5 in the last one but I really
00:15 - need to say it now so with that said I
00:19 - hope you're excited let's jump right
00:21 - into it and today do you guys hear that
00:26 - [Music]
00:49 - [Music]
00:59 - Wow
01:00 - guys I really can't believe that
01:02 - actually he's here yeah well anyways I
01:05 - really hope that I don't see any more of
01:07 - him so let's continue anyways so what
01:10 - are we doing in this tutorial we aren't
01:13 - gonna be doing a lot of automated
01:14 - testing okay so what the hell is
01:17 - automated testing well here let me break
01:19 - it down in a simple easy-to-understand
01:21 - way for you mere mortals out there let's
01:25 - say you have something like Amazon right
01:27 - something giant with millions of lines
01:31 - of code are you really gonna like every
01:34 - time you add a new feature are you gonna
01:36 - test all of the older features to make
01:38 - sure that they're working correctly
01:40 - probably not it's gonna take up a lot of
01:42 - your time plus you're gonna kill
01:43 - yourself so what you're gonna do is
01:45 - actually write these automated tests so
01:48 - every time you add a new feature to
01:50 - Amazon let's say that you add this new
01:53 - cool feature that recommends new shoes
01:56 - you want to make sure that the ability
01:58 - when user clicks Add to Cart that still
02:01 - works when the user clicks check out
02:03 - that still works so what you would
02:06 - normally do is go and manually test it
02:08 - except because Amazon is so big you're
02:10 - not gonna be doing that so you're gonna
02:11 - write automated test I'll test all
02:13 - those things every time you add a new
02:15 - feature so when you add a new feature it
02:16 - automatically tests everything that was
02:18 - before it that's the point of testing
02:22 - okay that's kind of the beautiful thing
02:24 - about it okay so why you need to create
02:27 - tests tests will save you time yep it
02:31 - will save you a lot of time because
02:32 - let's say you were to run into a bug or
02:35 - someone unexpected behavior you will
02:38 - know exactly why it's happening or
02:39 - you'll catch on to it a lot faster if
02:42 - you have code that tests those things as
02:44 - you go along rather than waiting till
02:46 - everything breaks the whole world comes
02:49 - falling down and then you're like wait
02:51 - what went wrong yeah good luck finding
02:53 - the bug in your millions of lines of
02:55 - code right you want a quality test each
02:58 - thing as it comes in tests don't just
03:01 - identify problems they prevent them okay
03:04 - so this helps you identify any
03:06 - problematic new bugs that could be
03:08 - coming in and not only like identified
03:11 - them but prevent them before it even
03:12 - happens almost think of testing kind of
03:15 - like if you just hired people without
03:17 - interviewing them I mean you wouldn't
03:21 - know right you would hire people like
03:22 - this guy and you would have people who
03:26 - you would have no control over don't
03:28 - know and like let's say something was
03:30 - going wrong in your company you're not
03:31 - gonna know who to blame because you
03:33 - never really tested any person right but
03:37 - if you run through an interview or a
03:38 - test with them then oftentimes you don't
03:41 - even have to hire them and you can kind
03:43 - of prevent it before that problem
03:45 - spreads or if they're awesome then you
03:47 - can add them in right to your company
03:49 - tests also make your code more
03:51 - attractive so basically like your code
03:54 - will look nice if you have tests
03:56 - otherwise developers won't take you
03:58 - seriously and tests help teams work
04:01 - together so if your team is working and
04:03 - some complex applications will be
04:06 - maintained by teams write and test
04:07 - guarantee that colleagues don't
04:09 - inadvertently break your code and that
04:12 - you don't break theirs without knowing
04:14 - so this way it also helps when you get
04:16 - employed and you have a job you know
04:19 - it'll help you identify like where the
04:21 - problems coming from and the people who
04:23 - are working with you on your team they
04:25 - know exactly what you're thinking
04:27 - and it won't cause problems in your code
04:31 - either so those are the benefits of
04:34 - testing now you have some basic testing
04:37 - strategies something called a
04:38 - test-driven development it's a pretty
04:40 - common thing it's called TDD TDD okay
04:45 - and basically it's like testing as you
04:48 - go rather than wait till I write my
04:49 - millions of lines of code and then
04:51 - freaking test it right wait till I have
04:53 - 30 employees and then I'll ask them and
04:56 - interview them and find out like don't
04:58 - do that test as you go okay and now what
05:02 - we're gonna do is we're gonna write our
05:04 - first test so oh we identify a bug who
05:09 - look at that well they're purposely
05:11 - planted a bug in our code and now we're
05:13 - gonna use testing to solve it okay we're
05:16 - gonna go Sherlock Holmes
05:19 - all right so fortunately there's a
05:22 - little bug in the pols application for
05:24 - us to fix right away the question was
05:26 - published recently so you guys remember
05:28 - that a little method we had was
05:30 - published recently in our models for
05:32 - question well it had a little bug and
05:35 - basically how it works is the method
05:36 - returns true if the question was
05:38 - published within the last day which is
05:39 - correct so if it was within the last 24
05:42 - hours
05:42 - it shows you true but it also shows you
05:46 - true if it was published in the future
05:49 - okay so it shouldn't say that it's
05:54 - recent if it was gonna happen in the
05:56 - future right you wouldn't say oh I
05:57 - recently got a car if you're gonna get a
05:59 - car 20 years from now when you finally
06:01 - get a job right so I'm just kidding you
06:04 - probably already have a job I don't
06:07 - let's continue do check if the bug
06:09 - really exists using the admin create a
06:12 - question whose date lies in the future
06:13 - and check the method check and check the
06:16 - method using the shell so first we're
06:18 - gonna check what's going on using the
06:20 - shell alright so let's go back to our
06:21 - code alright so the first thing we're
06:23 - gonna do is run our Python so we're we
06:28 - gonna run that from and we're gonna do
06:29 - Python manage that py shell don't just
06:32 - do Python and it hit enter like an idiot
06:34 - like I kind of did so once you run the
06:39 - Python wait
06:41 - this particular shell then what happens
06:43 - is you can like import your you know
06:46 - models and everything okay so now import
06:48 - daytime we're gonna do from Jango dot
06:53 - utils import time zone and then we're
06:57 - gonna do from pols dot models import
07:00 - wash T on with that said now we're gonna
07:05 - create a question instance with the
07:08 - publication date thirty days in the
07:10 - future okay so how does this work we're
07:12 - gonna create a variable called future
07:13 - question and we're gonna create it from
07:16 - the question class and we will say the
07:20 - pub date is equal to timezone dot now so
07:23 - we're saying that's published right now
07:25 - and then but to that time zone dot now
07:30 - we're gonna add some time to it okay so
07:33 - we're gonna do a daytime dot time Delta
07:37 - and we will do days is equal to thirty
07:40 - just like that okay now we're gonna hit
07:42 - enter so what I say I'm saying is like
07:45 - right now plus 30 days which in other
07:48 - words translates thirty days from now
07:50 - right so basically right now where I am
07:53 - at and what my current day for me is
07:57 - February 20th okay 2018 so it's gonna do
08:01 - February twentieth plus 30 days after
08:03 - February 20th okay so no it's not gonna
08:06 - be February 50th it's gonna be March
08:11 - something right cool
08:15 - was it published recently now we're
08:18 - gonna ask it and it should say no it's
08:20 - not published recently right it should
08:21 - return false except that it returns true
08:24 - so well there you have it we know that
08:27 - something with our code is broken right
08:30 - so since things in the future are not
08:33 - recent this is clearly wrong
08:35 - now we're gonna create a test to expose
08:38 - the bug so right now we expose the bug
08:41 - through the command line right we just
08:43 - use to interact terminal shell but like
08:45 - you don't want to be doing that every
08:46 - single time you also don't want to be
08:48 - doing that manually every single time so
08:52 - we're gonna write a test for it at the
08:54 - automat
08:55 - test it for us okay cool so now we're
08:59 - gonna go into our test file and write
09:02 - this code and then I'll kind of break it
09:04 - down so in our under our polls app we're
09:07 - gonna go into our tests and we will
09:09 - paste this guy here okay I copied over
09:12 - everything and I pasted it over it so
09:14 - what's going on we're importing
09:15 - date/time just like we did in the shell
09:17 - we're importing timezone you're
09:19 - importing test case and we're importing
09:21 - the question model from our models and
09:25 - how is this working the class is we're
09:29 - calling a question model test so the
09:32 - good idea is like every time you want to
09:34 - test a model make a class for that test
09:38 - okay so this way it's nice and organized
09:41 - this class inherits from test case
09:43 - that's coming from here you kind of put
09:46 - that in without really thinking about it
09:47 - okay just like look at what the Django
09:49 - Docs is saying and just like follow it
09:51 - on along it's not necessary for you to
09:53 - like learn about this test case class
09:55 - and how it's being inherited and like
09:57 - get a PhD in it you can but it's not
09:59 - necessary and then for your the name of
10:04 - the function that you're testing you
10:06 - wanna a good practice you want to like
10:08 - break each thing you're testing have a
10:10 - function for that particularly right so
10:12 - for example if I go into my models I
10:16 - have a method called was published
10:18 - recently so since we want to test that
10:20 - specific method under that class look
10:23 - I'm doing test was published recently
10:25 - right and named the test make it pretty
10:30 - specific so somebody who's reading your
10:32 - test method or your test function should
10:35 - kind of know what it's supposed to do
10:37 - just from reading the name so we're
10:39 - testing was published recently but would
10:41 - the future question so what if the
10:43 - question was like published 30 days in
10:45 - advance right here's a documentation for
10:49 - it was published recently returns false
10:51 - for questions whose publication date is
10:52 - in the future cool that's what it's
10:55 - supposed to do except it doesn't do that
10:57 - so now we're checking this okay we're
11:00 - saying hey set the time to 30 days from
11:02 - now that's what this is doing and then
11:05 - we make the future question
11:08 - from question class and then we set the
11:12 - publication date to that particular time
11:15 - from here line 16 and then on line 18
11:18 - we're just saying hey assert if this is
11:22 - this however this turns to true as we
11:29 - saw earlier right like right here so
11:32 - this is gonna this whole thing 1 if you
11:35 - run it right now is gonna turn to true
11:37 - and that's really the problem that we're
11:40 - having right and we need to fix that or
11:42 - our tests will expose it how do we run
11:44 - our test we're just gonna go to our
11:46 - command line we're gonna do Python
11:47 - manage that py test polls so I'm gonna
11:50 - exit out of this exit and now I will
11:54 - simply do Python manage py test polls so
11:59 - what I'm saying is like test the polls
12:01 - app and then it'll automatically
12:03 - basically run the tests a P Y file
12:05 - inside of the polls app that you created
12:08 - run it and look it says failed failures
12:11 - is equal to 1 and basically it says
12:15 - assertion error it tried this line
12:17 - solved at assert is and what it found
12:19 - out was this was not this and so its
12:23 - assertion error and it says true is not
12:25 - false now if this whole thing evaluated
12:29 - to false which is it's supposed to then
12:31 - it would go false as false and then this
12:34 - thing would return true and it would
12:36 - throw any errors okay now as you have
12:41 - more and more tests in here all you'll
12:43 - have to do is just run that once or you
12:45 - can set up a where where it runs that
12:46 - once automatically and that way you'll
12:50 - only alert you if something is broken
12:51 - otherwise they'll just go silently
12:53 - that's the beauty of tests by the way
12:58 - have you guys ever heard the song fly me
13:00 - to the moon by
13:03 - I've been in love with it and I can't
13:05 - stop thinking about it's like playing in
13:07 - my head
13:07 - non-stop anyways let's continue so what
13:10 - happened is this Python managed that py
13:14 - test polls looked for tests in the polls
13:16 - application and explained that - already
13:19 - it found a subclass of the Django that
13:22 - has a test case subclass it create a
13:26 - special database for the purpose of
13:28 - testing if I go here look it says
13:30 - destroying test database so it created
13:32 - its own database from what was happening
13:35 - right now it looked for test method ones
13:39 - whose ones whose names begin with tests
13:42 - ok so it's looking for everything that
13:44 - starts with tests if you don't have
13:46 - these starting with tests it won't find
13:47 - it ok so like let's just say it was like
13:50 - this and I'll hit save and then we'll
13:52 - also run this test pulls and it didn't
13:55 - even find it it said it ran zero tests
13:57 - and zero seconds but as soon as I do
13:59 - that and if I run it boom
14:03 - ran it created a in test was published
14:11 - recently was featured quiet it created a
14:12 - question instance whose publication
14:13 - field is thirty days in the future right
14:16 - over here and using the assert his
14:19 - method discovered that it was published
14:20 - recently returns Trudeau we wanted to
14:22 - return false what we found out here cool
14:25 - the test informs us which has failed and
14:29 - even the line on which the failure
14:31 - occurred so here it'll tell us which
14:35 - line we failed on line 18 right this is
14:38 - line 18 cool so now we're gonna go ahead
14:43 - and fix this bug how are we gonna fix it
14:47 - well this is the code that's gonna help
14:50 - us fix it we already know what the
14:51 - problem is amend the method in models
14:55 - rpy so it will return true of the data
14:56 - is also in the past so we're gonna go
14:59 - into models and we will change this to
15:03 - this
15:06 - indentation and whitespace and Python is
15:09 - important so make sure it's indented
15:10 - correctly underneath this was published
15:13 - recently method and basically we're
15:17 - saying hey set the time zone to now like
15:20 - exactly right now and then subtract one
15:23 - day from now if that's less than or
15:26 - equal to the publish and check if that's
15:29 - less than or equal to the self dot
15:31 - publish date okay so if that's less than
15:33 - or equal to the publish date and then
15:36 - check if cells that published it is less
15:39 - than or equal to now okay so in other
15:42 - words check that this publication date
15:46 - is in between this and this does that
15:54 - make sense
15:55 - it has to be sandwiched between the two
16:00 - and run the test again so now I'm gonna
16:05 - hit save and I will simply run the test
16:09 - again and now look it says ran one test
16:11 - and it gave me an OK and it's saying
16:15 - destroying the database so cool it looks
16:17 - like it had no errors it ran all the
16:20 - tests successfully if it showed me
16:23 - something red or said failures I'd know
16:27 - something failed so now it's working
16:31 - cool now we can also do after
16:34 - identifying a bug we wrote a test that
16:36 - exposes it and corrected the bug in the
16:39 - code so our test passes many other
16:43 - things might go wrong with our
16:45 - application in the future but we can be
16:46 - sure that we want inadvertently
16:48 - reintroduced this bug so it'll
16:50 - automatically keep checking it and we're
16:52 - not gonna be reintroducing this bug
16:53 - because we'll always find it because
16:55 - simply running the test will warn us
16:57 - immediately we can consider this little
17:00 - portion of the application pinned down
17:01 - safely
17:02 - forever pretty cool I think that's
17:06 - pretty freaking cool and now they're
17:09 - like alright we're gonna get into some
17:12 - more comprehensive tests while we're
17:19 - here we can
17:20 - further pin down the was published
17:23 - recently method in fact it would be
17:25 - positively embarrassing if in fixing one
17:28 - bug we had introduced another cool add
17:35 - to more test methods to the same class
17:37 - to test the behavior of the method more
17:40 - comprehensively so now we're gonna test
17:45 - was we're gonna test the was published
17:47 - recently method with old question and
17:50 - then we're also gonna test it with
17:52 - recent question and we already have the
17:54 - future question so you can only have
17:56 - three cases future question recent
17:58 - question or old question if a question
18:00 - is older than one day it should
18:04 - basically say that it's not um if the
18:09 - question is older than one day it will
18:11 - should return false
18:12 - it should say it's not recent if it's in
18:16 - the future it should say it's not recent
18:19 - if it's been posted less than one day
18:22 - then it should say it's recent so for
18:24 - example if we just look at this test
18:26 - code at a high level old question
18:29 - look it's asked it's making sure that
18:31 - it's asserting to be false so if it's
18:38 - one day and one second ago right so if
18:41 - it's one if it's exactly one day ago
18:43 - then what it should do is it should say
18:46 - yes it's still true but if it's one day
18:49 - and one second ago now it should say
18:51 - it's too late and it should be
18:53 - considered false okay it should be
18:57 - considered not recent and then published
18:59 - recently with recent or with recent
19:01 - question so if the question is as you
19:05 - can see here not even one day ago 23
19:09 - hours 59 minutes and 59 seconds ago
19:11 - almost one day it should assert it to be
19:14 - true okay take these and we will go into
19:19 - our tests and we will add this into our
19:24 - tests okay
19:29 - there we go 1 2 3 4 1 2 3 4 and 1 2 3 4
19:37 - 1 2 3 4 1 2 3 4 or 1 2 3 4 ok so just
19:48 - make sure that it's all indented
19:51 - correctly and then that you should be
19:53 - good there so now we have all of those
19:56 - scenarios covered future old or recent
20:00 - question let's run our test and let's
20:02 - see if we have any bugs no bugs it looks
20:06 - like our method is working perfectly
20:09 - okay just so you understand this code
20:15 - right here it'll only return true when
20:19 - the publication date is in between this
20:21 - and that okay so this is basically
20:26 - saying it's within one day and this is
20:29 - saying it's less than now okay so if
20:34 - this is in between it'll match and now
20:38 - we have three tests that confirm the
20:40 - question was published recently returned
20:42 - sensible values for past recent future
20:44 - questions good
20:46 - again polls is a simple application by
20:49 - however complex it grows in the future
20:51 - and whatever other code interacts would
20:53 - we now have some guarantee that the
20:55 - method we have written tests for will
20:57 - behave in expected ways test of view so
21:03 - you can also test views the polls
21:05 - application is fairly undiscriminating
21:07 - it will publish any question including
21:09 - ones whose publication date field lies
21:13 - in the future we should improve this
21:15 - setting a publication date in the future
21:16 - should mean of the questions published
21:17 - at that moment but invisible until then
21:19 - all right so what are we doing here well
21:22 - when we post our question if it's some
21:28 - data in the future it shouldn't show it
21:29 - just like for example on WordPress if
21:31 - you publish a blog post for let's say
21:33 - you know two days later it doesn't show
21:38 - until two days later right you can
21:40 - schedule your post or on YouTube
21:41 - sometimes I
21:42 - schedule my videos and you know I'll say
21:45 - show this video to the audience in one
21:48 - week from now right so if I do show it
21:52 - from one week from now it shouldn't be
21:54 - showing it at that same time that would
21:57 - be crazy that wouldn't make sense just
21:59 - like that we also want to do with our
22:02 - questions and make sure that it doesn't
22:03 - just show out of nowhere and we want to
22:07 - make a test for a view when we fix the
22:10 - bulk above we wrote the test first and
22:12 - then the code to fix it in fact that was
22:13 - a simple example of test-driven
22:15 - development but it doesn't really matter
22:17 - in which order we do the work in our
22:18 - first test we focus closely on the
22:21 - internal behavior of the code for this
22:23 - test we want to check its behavior as it
22:25 - would be experienced by a user through a
22:27 - web browser okay so the first one it was
22:30 - like the logic of the code this one
22:32 - we're focusing on what happens if the
22:34 - user is like testing it and the user is
22:37 - actually on the front end of the website
22:39 - what does it show to them and isn't that
22:43 - cool that you can automatically test
22:45 - that every time your code runs and you
22:46 - don't have to like go and check if your
22:48 - cart is working or your blog is showing
22:51 - things like that all right so the Django
22:53 - tests client so here's a command we're
22:56 - gonna go in our command line and type in
22:58 - so I'm gonna copy this guy again and
23:02 - remember we got to do Python manage that
23:05 - py shell then paste this guy and then we
23:08 - will get setup test environment just
23:11 - like that okay installs a template
23:16 - renderer which will allow us to blah
23:18 - blah blah blah blah okay we will get
23:21 - this guy and then also they say
23:24 - something about timezone so make sure
23:26 - your timezone is correct mine is in
23:29 - America / Los Angeles if I go in my
23:33 - settings and show you for you it might
23:36 - be something different so you can go in
23:39 - this go to this link and look up what
23:41 - your timezone is okay
23:49 - so we're gonna import the clients and
23:52 - then we're gonna create an instance of
23:54 - the client so here we're creating an
23:56 - instance and now we can get a response
24:00 - from our home page now when the response
24:04 - from your home page should give you
24:05 - something like not found or a 404 it's
24:09 - because if you go to your home page
24:11 - there's nothing there right if you just
24:13 - go to right now your localhost 127 dot 0
24:18 - dot 0 dot 1 colon 8000 it should give
24:21 - you an error the only routes that are
24:23 - mapped is like if you go to slash admin
24:25 - or if you go to slash pols
24:26 - remember that so that's why the home is
24:29 - giving us a 404 right now we should
24:32 - expect a 4 of 4 from that address let's
24:36 - just do response dot status code and
24:38 - here it is 404 we should expect to find
24:42 - something at polls though okay so let's
24:44 - try that we'll use reverse rather than a
24:47 - hard-coded URL so instead of doing like
24:49 - you know whatever slash polls we're
24:55 - gonna just do a reverse here okay so
24:57 - from Django we're gonna import reverse
25:01 - and we'll paste this guy right here and
25:06 - now if we do response that status code
25:09 - it shows me something if I do response
25:11 - it's saying template response status
25:13 - code is 200 and it's a text slash HTML
25:17 - file which it is okay and now we can
25:21 - also get the content we can do response
25:23 - that content so now it's showing me the
25:25 - content of that file and if you remember
25:27 - we do have unordered lists in the start
25:31 - and then we have bullet points so here
25:34 - you have what's cracking in HTML to show
25:37 - an apostrophe they have to do this
25:40 - ampersand number sign 39 semicolon
25:44 - that's basically apostrophe and we also
25:51 - have our other question what's new and
25:54 - you can see they're links here as well
25:56 - okay so this is like just showing the
26:00 - good version of what the user or we
26:02 - actually see on the front end and we can
26:07 - also do response a context and get the
26:10 - latest question list and look it gave us
26:13 - the questions what's cracking what's new
26:15 - what's up now we can improve our view as
26:20 - well the list of pulse the the list of
26:24 - poll shows polls that aren't published
26:26 - yet those that have publication date in
26:29 - the future let's fix that so right
26:32 - that's a problem so we need to fix that
26:35 - we introduced a class-based view based
26:37 - on list view so we're gonna go ahead and
26:40 - fix things in there now we need to amend
26:42 - it so let's go up to our views and our
26:46 - index view we need to fix this and
26:50 - change it so that it also checks the
26:52 - date by comparing it with timezone dot
26:55 - now first we need to add an import so at
26:58 - the top of our code we're gonna add this
27:00 - here import timezone and then our query
27:06 - set we're gonna change it a bit so
27:11 - where's our query set
27:22 - all right can we put this on one line so
27:25 - it looks slightly less confusing yeah we
27:27 - were fine we're not following PAP eight
27:30 - we're running across a little bit but
27:32 - according to my boy Raymond the og
27:36 - Hettinger or head injure you know
27:40 - according to him he says ninety to
27:42 - ninety five characters should be good
27:44 - enough pep eight I think with the whole
27:46 - edy character line is kind of stupid
27:50 - because honestly breaking this down into
27:53 - new lines messes up to code readability
27:55 - but right now this looks pretty easy to
27:58 - read if you just have it much easier if
28:00 - you just have it on one line anyway okay
28:02 - what is it doing it returns the last
28:05 - five published questions not including
28:07 - those set to be published in the future
28:09 - alright so how is it doing that it's
28:11 - taking the questions model it's finding
28:15 - all the objects and it's filtering those
28:17 - objects and only finding the following
28:20 - okay
28:22 - this statement here it's looking at the
28:27 - publication date and it's only finding
28:29 - so this underscore underscore LT means
28:32 - you're doing a reverse search and you're
28:33 - saying less than or equal to that's what
28:36 - LTE means less than or equal to so any
28:39 - publication date that was less than or
28:40 - equal to the current time meaning only
28:43 - past or current posts filter those and
28:48 - then once we find those we order those
28:53 - by descending publication date so which
28:56 - one was the most recent ones and then we
29:00 - show the first five that's it okay
29:05 - a lot going on and now we can also test
29:09 - our new view so now you can satisfy
29:11 - yourself that this behaves as expected
29:13 - by firing up the run server loading the
29:16 - site in your browser creating questions
29:18 - with dates in the past and future and
29:20 - checking that only those that have been
29:22 - published or listed you don't want to
29:24 - have to do that every single time you
29:26 - make a change that might affect this so
29:29 - let's create a test based on our shell
29:32 - session above sea shells see what is it
29:37 - see she sells seashells down the
29:40 - seashore okay that's a falling to pull
29:43 - slash test that py polls TAS all right
29:54 - we're adding reverse boom and we'll
29:59 - create a shortcut function to create
30:01 - questions as well as a new test class so
30:05 - this will create questions for us cool
30:08 - since this is not gonna be a method it's
30:11 - gonna be a function we're gonna put it
30:12 - outside like that
30:16 - this will create questions how will it
30:18 - create questions you give it a question
30:19 - text and you give it days and then what
30:22 - it does is it'll create a question with
30:25 - that number of days in the future or
30:28 - with that number of days in the past
30:29 - based on whether you pass in a positive
30:32 - number here or a negative number here or
30:35 - something like zero okay right here and
30:39 - then it goes into question that I've
30:41 - just and it creates that object in
30:43 - questions class and for the question tax
30:48 - keyword argument and passes in question
30:49 - text and for the pub date keyword
30:52 - argument it passes in the time which it
30:54 - gets from here cool cool
30:59 - okay so question view index what are we
31:02 - doing there question view question index
31:06 - view test so we're creating a new class
31:07 - here so I'm gonna go right there and
31:11 - paste it and save so now we're creating
31:15 - tests for our index view
31:18 - instead of model okay so this is our
31:21 - model test and what we're saying is like
31:23 - tests no questions if no question exists
31:26 - an appropriate and appropriate message
31:28 - is displayed so if I go into my views
31:32 - and you can see in my views let's see
31:38 - it's there is it not there or is it an
31:41 - RHD yeah I think it's in our HTML right
31:44 - index so here you can see it says if
31:49 - there are recent questions and show them
31:52 - else say no polls are available so we
31:56 - want to test that it actually does say
31:59 - no polls are available on our front end
32:01 - we can actually do that and right here
32:04 - and we say hey first check that the
32:07 - status code for this page is a 200
32:11 - meaning that you actually find this page
32:13 - second test that that response that you
32:16 - find it contains no polls are available
32:21 - ok so right now remember we have no
32:24 - questions at the moment and then also
32:28 - make sure that the cert query set is
32:31 - equal to the response is equal to the
32:36 - following so this thing latest question
32:40 - list should be empty that makes sense
32:42 - right that means there are no questions
32:43 - so it's just a no polls are available
32:45 - and it should check that this is
32:47 - actually just an empty list cool now
32:53 - what we want to do is test past
32:56 - questions okay again this could go on
33:07 - could this go on one line or this will
33:10 - be too crazy this is pretty crazy so I
33:13 - can I can break that up a little bit
33:16 - that's fine still readable for me
33:20 - okay so we're saying if we create a
33:26 - question
33:27 - okay again this creates its own database
33:30 - so it doesn't have our what's cracking
33:32 - and whatever tests available anymore for
33:34 - these tests it creates its own database
33:36 - and then it destroys that database
33:38 - afterward so within this database we're
33:42 - creating a question and the question
33:44 - text will be called past question
33:46 - instead of what's cracking or what's
33:47 - poppin or whatever and we're gonna say
33:50 - that it should be dirty it should have
33:53 - been created 30 days ago okay so this is
33:56 - a past question hence test past question
33:59 - and then what we're gonna say is hey
34:03 - response get that particular page and
34:07 - once we get that page we want to say hey
34:10 - is that are the latest questions of that
34:13 - page contain that question and the
34:16 - answer will be yes it does because we
34:19 - just created it right here and if this
34:22 - thing is equal to this then the test
34:25 - should pass we're also gonna create a
34:29 - future question so this should test a
34:38 - question thirty days in the future
34:40 - pretty much the same thing and make sure
34:47 - that a response contains no polls are
34:50 - available that makes sense right because
34:53 - if the question is in the future then it
34:55 - shouldn't be available right now so I
34:57 - should say no polls are available and
34:59 - also make sure that the response that
35:02 - context latest question is empty because
35:06 - there are no latest questions it's gonna
35:08 - be posted in the future okay
35:12 - cool and let's check this guy with the
35:18 - recent and past questions again I think
35:24 - it's a little bit more readable like
35:27 - that you can break it down like this
35:30 - that should be fine too but I like it
35:32 - like this and basically what we're
35:35 - testing here is that this thing should
35:38 - equal to this thing
35:40 - and what's going on here on the dock for
35:44 - this as this is test future question and
35:47 - pass question even if both past and
35:49 - future questions exist only past
35:51 - questions are displayed that makes sense
35:54 - too and how does it work we create a
35:57 - question 30 days in the past we create a
35:59 - question 30 days in the future question
36:03 - one is called past question question two
36:05 - is called future question we get the
36:10 - pols index page and then we say that
36:13 - this thing
36:15 - the latest question list should only
36:17 - have the past question those created 30
36:20 - days ago and not the recent question and
36:23 - it should match that and indeed and it
36:25 - should right if we did everything right
36:28 - we shouldn't get an error if we run this
36:30 - and then what we need to do is define
36:33 - two past questions
36:42 - all right now this is getting a little
36:45 - too big so let's break this one down now
36:50 - and you can indent this too
37:05 - okay so what am I saying here I'm saying
37:08 - so test two past questions so the
37:11 - questions index page may display
37:13 - multiple questions so we also want to
37:15 - see that it doesn't just display one
37:17 - question it displays multiple ones right
37:19 - so we have past question one which was
37:22 - created 30 days ago we have past
37:23 - question two which was created five days
37:25 - ago we get the polls index page and then
37:28 - we say make sure that the question list
37:34 - actually let's do it like this because I
37:36 - think it'll more readable actually so we
37:39 - want to say that this should equal to
37:41 - this okay latest question list should
37:45 - have both of the past questions why in
37:49 - this order because remember the most
37:51 - recent ones it shows it first right if
37:54 - we look at our views and how it does it
37:58 - ascending order it sorry descending
38:00 - order and then the five so that's why
38:04 - that's why I would show the past
38:06 - question too first and then this one
38:08 - right here cool basically the most
38:14 - recent question is just show all the way
38:16 - at the top all right so first is a
38:22 - question shortcut function create
38:24 - question to take some repetition yeah
38:29 - well we pretty much went over this whole
38:30 - thing so we don't have to check that and
38:33 - so on in effect we are using the test to
38:36 - tell a story of admin input and user
38:38 - experience on the site and checking that
38:39 - at every state and for every new change
38:42 - in the state of the system the expected
38:44 - results are published now that's a
38:46 - really important point like you're
38:48 - telling a story with your test guys like
38:50 - this is what's really important to
38:52 - understand so if you're working on a
38:53 - team with somebody and somebody's
38:54 - reading through your test they
38:56 - understand what each of your view is
38:58 - supposed to do and what it's supposed to
39:01 - return like so so so key like if I'm
39:04 - looking at somebody's code I don't know
39:06 - what the hell it's supposed to do right
39:08 - I don't know what the right answer is
39:10 - supposed to be but if I look at their
39:11 - test and they have like bunch of
39:13 - examples and what the correct answer and
39:16 - the wrong answer should be and then
39:18 - documentation I totally understand what
39:21 - each function is supposed to do what
39:23 - each class is supposed to do and then
39:26 - effectively I'm on the same page and
39:28 - then I can actually contribute to this
39:30 - project right I can go that's where you
39:32 - guys hear like hey just go ahead and
39:34 - contribute to open source projects this
39:36 - is one of the ways that you can do that
39:38 - understand look at their tests first and
39:40 - then like I can't tell you enough for
39:42 - those of you who are a little bit more
39:44 - advanced to understand the library
39:46 - here's a protip one of the best ways to
39:48 - do it is not just like instead of just
39:50 - reading the code go and look at their
39:52 - tests and they will have so many things
39:55 - in there and what it's supposed to do
39:56 - you'll start understanding how this
39:58 - library's supposed to work and it's how
40:00 - supposed to behave literally tells a
40:02 - story now we want to test the detail
40:13 - view okay so what we have works well
40:16 - however even though future questions
40:18 - don't appear in the index users can
40:20 - still reach them if they know or guess
40:22 - the right URL so we need to add a
40:24 - similar constraint to detail view okay
40:28 - so we don't want to our users to be able
40:31 - to reach those questions obviously
40:33 - because they don't exist so they
40:35 - shouldn't just be able to go to that
40:36 - particular URL okay like let's say you
40:44 - had a blog post like whatever your blog
40:49 - post is called banana so it's like John
40:53 - com slash blog slash banana
40:55 - if you scheduled it for like a month
40:59 - later I shouldn't be able just go to it
41:01 - from the URL okay so what's going on
41:07 - here we have the detailed view so let's
41:11 - go into our views let's go into our
41:12 - detail view it's right here what did I
41:15 - want us to do they want us to create a
41:17 - query set and do this with it okay
41:20 - excludes any questions that aren't
41:23 - published yet so filter make sure the
41:26 - publication date is less than or equal
41:28 - to then the time zone dot now
41:33 - that's that's it that's essentially it
41:36 - and those are the only ones you can
41:38 - check pretty cool okay
41:40 - very very powerful again you can see how
41:44 - powerful the generic method is and of
41:49 - course we will add some tests to check
41:51 - that a question whose publication date
41:53 - is in the past can be displayed and now
41:55 - one with a publication date in the
41:57 - future is not so let's go into our tests
42:05 - and let's an add the test for this so
42:10 - again it's a new class it should have
42:12 - its own methods and everything right so
42:19 - for the index view we created a class
42:24 - okay for those tests and now for our
42:28 - detailed views we're also creating a
42:30 - class okay very important now we test
42:34 - future question and we test past
42:35 - question how do we do that we create the
42:38 - question five days in advance we send
42:44 - you to the polls detail page so like for
42:48 - example an Instagram if you click into a
42:51 - image and it shows you that specific
42:54 - image that's equivalent in our app of
42:57 - polls detail or questions detail view
43:00 - and for the arguments we give it that
43:02 - questions ID from right here and as a
43:07 - response we get that particular URL and
43:10 - then we say hey make sure that the
43:13 - response actually returns a 404 and it
43:19 - will because here's how we told it and
43:26 - then test pass question so basically
43:29 - here we're saying 404 meaning it doesn't
43:32 - exist right so the detailed view of a
43:34 - question of the publication did in the
43:36 - past displays the questions text so past
43:41 - question we create the question here
43:43 - it's created five days ago
43:46 - we get the URL for the poles detail and
43:49 - we pass in the ID for the past question
43:51 - and then as a response we get that
43:54 - specific URL and then we assert and make
43:58 - sure that it can the response contains
44:00 - the following thing so a response and
44:03 - then it should have the question text in
44:06 - there okay it's a past question question
44:08 - text cool and let's see let us let's see
44:16 - if we're gonna be using any more command
44:17 - line stuff we're not so let's go an exit
44:21 - and let's just see right now if our
44:22 - tests are working in our poll slash view
44:27 - something is happening on line 18 what
44:31 - is happening ah okay it's not indented
44:41 - correctly obviously save up and enter
44:50 - and look at that all our tests ran in
44:53 - here and they all ran successfully
44:58 - so you can see all these tests have
45:00 - already gotten pretty complicated and
45:02 - they're testing our app pretty
45:03 - thoroughly
45:04 - you know this is not something you want
45:08 - to do manually every single time and you
45:09 - can already see the power of it
45:17 - all right ideas for more tests so we
45:20 - have to add similar query set method to
45:23 - results view and create a new test class
45:25 - for that view so we can also test
45:27 - results view it'll be very similar to
45:31 - what we have just created in fact there
45:33 - will be a lot of repetition we could
45:34 - also improve our application and other
45:36 - ways adding tests along the way for
45:38 - example it's silly that questions can be
45:39 - published on the site that have no
45:42 - choices so our views could check for
45:46 - this and exclude such questions our
45:47 - tests could create a question without
45:49 - choice and then test that it's not
45:50 - published as well as create a similar
45:52 - question with choices and tests that it
45:55 - is published also you can have logged in
45:59 - admin users who should be allowed to see
46:01 - unpublished questions but like ordinary
46:04 - visitors shouldn't be so if you're an
46:05 - admin right and you have WordPress blog
46:07 - and you schedule one in advance you can
46:10 - see it but other people can't just like
46:11 - I can't schedule my YouTube videos you
46:13 - can't see it I can whatever needs to be
46:18 - added to the software to accomplish this
46:19 - should be accompanied by a test whether
46:21 - you write the test first and then make
46:23 - the code pass the test this is a the
46:26 - test-driven way of doing it or work out
46:29 - the logic in your code first and then
46:31 - write a test to prove it at a certain
46:34 - point you're bound to look at your test
46:35 - and wonder whether your code is
46:37 - suffering from test bloat which brings
46:39 - us to the following so the thing that
46:41 - they say is when testing more is
46:45 - actually better okay so it might seem
46:49 - that your test is going out of control
46:50 - and there's a lot of like test bloat and
46:52 - you know what you're beautiful
46:55 - elegant and concise code compared to
46:57 - your test looks so much better
46:59 - that's totally okay tests are supposed
47:01 - to be bulky and a lot
47:02 - and this should cover your ass okay
47:06 - that's their job and so they don't have
47:08 - to look pretty they don't have to look
47:09 - beautiful they have to tell a story and
47:11 - have to tell it clearly so it doesn't
47:13 - matter right let them grow and for the
47:18 - most part you can write a test once and
47:20 - then forget about it it will continue
47:22 - performing its useful function as you
47:24 - continue to develop your program
47:26 - sometime they will need to be updated
47:28 - just like we had to update ours
47:31 - telling us exactly which test needs to
47:33 - be amended to bring you up to date so
47:35 - that extent tests help look after
47:38 - themselves at worst as you continue
47:40 - developing you might find that you have
47:41 - some tests that are redundant in testing
47:44 - redundancy is actually a good thing
47:48 - and even that redundancy is not a
47:50 - problem okay so the more you test the
47:54 - better and you don't have to go back and
47:56 - wipe anything clean as long there
48:00 - sensibly arranged they won't become
48:02 - unmanageable okay so the good rules of
48:04 - thumbs good rules of thumb include the
48:07 - following you should have a separate
48:09 - test class for each model or view so for
48:12 - remember for each of our models write or
48:15 - question model question model test we
48:20 - had a different class for this and for
48:24 - each of our views we actually had a
48:27 - different class for a detail view we had
48:29 - a different class for our index view and
48:31 - if we wanted to go further we could also
48:34 - add a different class for our results
48:36 - view a separate test method for each set
48:41 - of conditions you want to test so
48:43 - instead of testing test no questions
48:45 - test pass question and kind of like
48:47 - testing an all-in-one it's a good idea
48:49 - to break it down into separate different
48:52 - tests each tests doing only one job so
48:55 - here if no questions exist an
48:57 - appropriate message displayed that's
48:59 - what this is test is supposed to do this
49:02 - test over here questions with a
49:05 - publication date in the past are
49:06 - displayed on the end espeacially you can
49:08 - see each each test is trying to do one
49:10 - and one thing only okay test method
49:17 - names that describe their functions so
49:19 - the names themselves should describe the
49:22 - function of the test okay so test no
49:24 - questions test pass questions test
49:26 - future questions and once you build this
49:28 - naming convention you and your team
49:30 - starts understanding it and most of the
49:32 - times you guys will be able to just look
49:34 - at each other tests and know what your
49:36 - app is supposed to be doing or what it's
49:37 - not supposed to be doing further testing
49:42 - this tutorial only introduces some of
49:44 - the basics of
49:45 - there's a great deal more that you can
49:47 - do and a number of very useful tools at
49:50 - your disposal to achieve some very
49:52 - clever things for example so this is a
49:56 - pretty cool part right now we just kind
49:58 - of tested our back-end and a little bit
50:00 - of our front-end but what if we wanted
50:02 - to test our JavaScript and how it loads
50:05 - and literally like moving the mouse like
50:08 - have the computer move the mouse and
50:10 - select one of the votes and click vote
50:11 - how does that experience work how can we
50:14 - test that on autopilot where it happens
50:17 - automatically well there's something
50:18 - called saleem selenium or selenium and
50:22 - it's a way to test your HTML actually
50:26 - renders in a browser okay so these tools
50:29 - allow you to check not just a behavior
50:31 - of your Django code but also for example
50:33 - of your JavaScript and your browser
50:36 - pretty freaking mind-blowing it's quite
50:41 - something to see the tests launch a
50:42 - browser and start interacting with your
50:44 - site as if a human being were driving it
50:47 - and Django includes live server test
50:50 - case to facilitate integration with
50:52 - tools like selenium okay so if you want
50:54 - to get more advanced look up Django and
50:58 - selenium and you could even look up
51:00 - YouTube videos online and add those kind
51:02 - of tests within your app if you have a
51:05 - complex application you may want to run
51:07 - tests automatically with every commit
51:10 - for the purposes of continuous
51:12 - integration so if you guys know about
51:15 - github and commits you can make it so
51:17 - that when you're writing the code and as
51:19 - soon as you commit it
51:21 - I like to call it like the time machine
51:24 - because that's what get in version
51:26 - control allows you to do you can make it
51:28 - so then it tests it on every commit so
51:31 - that if any one of your commits you know
51:34 - fails any of the tests it'll be like hey
51:36 - this is broken and you'll find out right
51:38 - away before you actually push that code
51:42 - on to github and destroy your life
51:44 - embarrass yourself let down your family
51:47 - and be fired from your job so that
51:51 - quality control it is itself at least
51:54 - partially automated a good way a good
51:57 - way to spa untested
51:58 - parts of your application is to check
52:00 - code coverage this also helps identify
52:03 - fragile or even dead code if you can't
52:05 - test a piece of code it usually means
52:07 - that code should be refactored or
52:09 - removed that's those are some big words
52:14 - coverage will help to identify dead code
52:17 - C integration coverage dot py and you
52:21 - can check you know what's dead code and
52:24 - what's not and yeah so a lot of testing
52:29 - I hope that you enjoyed that in the next
52:32 - part of the tutorial we're gonna be
52:34 - learning on learning about static files
52:36 - management ok so that's it for this
52:38 - video thank you so much for watching
52:40 - again I do want to leave you with this I
52:42 - have my course the profitable programmer
52:45 - is just a badass course that helps you
52:47 - become an awesome Python Django
52:48 - developer it also shows you how to
52:52 - charge what you're worth and get your
52:54 - first client with Python in less than 90
52:57 - days the focus is on helping you get
53:00 - clients helping you get work if you are
53:03 - interested again here's the link and the
53:06 - link should also be in the description
53:07 - go to that page and sign up and join the
53:12 - VIP waitlist and as my gift to you I
53:15 - will give you a Python earning potential
53:17 - calculator so you can see how much
53:20 - you're earning potential could be as a
53:22 - Python developer okay and I'm gonna be
53:26 - giving you that obviously for free and
53:28 - by joining the VIP waitlist you will be
53:31 - the first to know when the course the
53:33 - profitable programmer opens up that's it
53:36 - for this video thank you so much for
53:38 - watching as always I love your faces off
53:40 - and I'll see you in the next video

Cleaned transcript:

hey guys what's up how's it going this is Kazi from clever programmer calm welcome back to yet another tutorial write your first django app part 5 I said part 5 in the last one but I really need to say it now so with that said I hope you're excited let's jump right into it and today do you guys hear that Wow guys I really can't believe that actually he's here yeah well anyways I really hope that I don't see any more of him so let's continue anyways so what are we doing in this tutorial we aren't gonna be doing a lot of automated testing okay so what the hell is automated testing well here let me break it down in a simple easytounderstand way for you mere mortals out there let's say you have something like Amazon right something giant with millions of lines of code are you really gonna like every time you add a new feature are you gonna test all of the older features to make sure that they're working correctly probably not it's gonna take up a lot of your time plus you're gonna kill yourself so what you're gonna do is actually write these automated tests so every time you add a new feature to Amazon let's say that you add this new cool feature that recommends new shoes you want to make sure that the ability when user clicks Add to Cart that still works when the user clicks check out that still works so what you would normally do is go and manually test it except because Amazon is so big you're not gonna be doing that so you're gonna write automated test I'll test all those things every time you add a new feature so when you add a new feature it automatically tests everything that was before it that's the point of testing okay that's kind of the beautiful thing about it okay so why you need to create tests tests will save you time yep it will save you a lot of time because let's say you were to run into a bug or someone unexpected behavior you will know exactly why it's happening or you'll catch on to it a lot faster if you have code that tests those things as you go along rather than waiting till everything breaks the whole world comes falling down and then you're like wait what went wrong yeah good luck finding the bug in your millions of lines of code right you want a quality test each thing as it comes in tests don't just identify problems they prevent them okay so this helps you identify any problematic new bugs that could be coming in and not only like identified them but prevent them before it even happens almost think of testing kind of like if you just hired people without interviewing them I mean you wouldn't know right you would hire people like this guy and you would have people who you would have no control over don't know and like let's say something was going wrong in your company you're not gonna know who to blame because you never really tested any person right but if you run through an interview or a test with them then oftentimes you don't even have to hire them and you can kind of prevent it before that problem spreads or if they're awesome then you can add them in right to your company tests also make your code more attractive so basically like your code will look nice if you have tests otherwise developers won't take you seriously and tests help teams work together so if your team is working and some complex applications will be maintained by teams write and test guarantee that colleagues don't inadvertently break your code and that you don't break theirs without knowing so this way it also helps when you get employed and you have a job you know it'll help you identify like where the problems coming from and the people who are working with you on your team they know exactly what you're thinking and it won't cause problems in your code either so those are the benefits of testing now you have some basic testing strategies something called a testdriven development it's a pretty common thing it's called TDD TDD okay and basically it's like testing as you go rather than wait till I write my millions of lines of code and then freaking test it right wait till I have 30 employees and then I'll ask them and interview them and find out like don't do that test as you go okay and now what we're gonna do is we're gonna write our first test so oh we identify a bug who look at that well they're purposely planted a bug in our code and now we're gonna use testing to solve it okay we're gonna go Sherlock Holmes all right so fortunately there's a little bug in the pols application for us to fix right away the question was published recently so you guys remember that a little method we had was published recently in our models for question well it had a little bug and basically how it works is the method returns true if the question was published within the last day which is correct so if it was within the last 24 hours it shows you true but it also shows you true if it was published in the future okay so it shouldn't say that it's recent if it was gonna happen in the future right you wouldn't say oh I recently got a car if you're gonna get a car 20 years from now when you finally get a job right so I'm just kidding you probably already have a job I don't let's continue do check if the bug really exists using the admin create a question whose date lies in the future and check the method check and check the method using the shell so first we're gonna check what's going on using the shell alright so let's go back to our code alright so the first thing we're gonna do is run our Python so we're we gonna run that from and we're gonna do Python manage that py shell don't just do Python and it hit enter like an idiot like I kind of did so once you run the Python wait this particular shell then what happens is you can like import your you know models and everything okay so now import daytime we're gonna do from Jango dot utils import time zone and then we're gonna do from pols dot models import wash T on with that said now we're gonna create a question instance with the publication date thirty days in the future okay so how does this work we're gonna create a variable called future question and we're gonna create it from the question class and we will say the pub date is equal to timezone dot now so we're saying that's published right now and then but to that time zone dot now we're gonna add some time to it okay so we're gonna do a daytime dot time Delta and we will do days is equal to thirty just like that okay now we're gonna hit enter so what I say I'm saying is like right now plus 30 days which in other words translates thirty days from now right so basically right now where I am at and what my current day for me is February 20th okay 2018 so it's gonna do February twentieth plus 30 days after February 20th okay so no it's not gonna be February 50th it's gonna be March something right cool was it published recently now we're gonna ask it and it should say no it's not published recently right it should return false except that it returns true so well there you have it we know that something with our code is broken right so since things in the future are not recent this is clearly wrong now we're gonna create a test to expose the bug so right now we expose the bug through the command line right we just use to interact terminal shell but like you don't want to be doing that every single time you also don't want to be doing that manually every single time so we're gonna write a test for it at the automat test it for us okay cool so now we're gonna go into our test file and write this code and then I'll kind of break it down so in our under our polls app we're gonna go into our tests and we will paste this guy here okay I copied over everything and I pasted it over it so what's going on we're importing date/time just like we did in the shell we're importing timezone you're importing test case and we're importing the question model from our models and how is this working the class is we're calling a question model test so the good idea is like every time you want to test a model make a class for that test okay so this way it's nice and organized this class inherits from test case that's coming from here you kind of put that in without really thinking about it okay just like look at what the Django Docs is saying and just like follow it on along it's not necessary for you to like learn about this test case class and how it's being inherited and like get a PhD in it you can but it's not necessary and then for your the name of the function that you're testing you wanna a good practice you want to like break each thing you're testing have a function for that particularly right so for example if I go into my models I have a method called was published recently so since we want to test that specific method under that class look I'm doing test was published recently right and named the test make it pretty specific so somebody who's reading your test method or your test function should kind of know what it's supposed to do just from reading the name so we're testing was published recently but would the future question so what if the question was like published 30 days in advance right here's a documentation for it was published recently returns false for questions whose publication date is in the future cool that's what it's supposed to do except it doesn't do that so now we're checking this okay we're saying hey set the time to 30 days from now that's what this is doing and then we make the future question from question class and then we set the publication date to that particular time from here line 16 and then on line 18 we're just saying hey assert if this is this however this turns to true as we saw earlier right like right here so this is gonna this whole thing 1 if you run it right now is gonna turn to true and that's really the problem that we're having right and we need to fix that or our tests will expose it how do we run our test we're just gonna go to our command line we're gonna do Python manage that py test polls so I'm gonna exit out of this exit and now I will simply do Python manage py test polls so what I'm saying is like test the polls app and then it'll automatically basically run the tests a P Y file inside of the polls app that you created run it and look it says failed failures is equal to 1 and basically it says assertion error it tried this line solved at assert is and what it found out was this was not this and so its assertion error and it says true is not false now if this whole thing evaluated to false which is it's supposed to then it would go false as false and then this thing would return true and it would throw any errors okay now as you have more and more tests in here all you'll have to do is just run that once or you can set up a where where it runs that once automatically and that way you'll only alert you if something is broken otherwise they'll just go silently that's the beauty of tests by the way have you guys ever heard the song fly me to the moon by I've been in love with it and I can't stop thinking about it's like playing in my head nonstop anyways let's continue so what happened is this Python managed that py test polls looked for tests in the polls application and explained that already it found a subclass of the Django that has a test case subclass it create a special database for the purpose of testing if I go here look it says destroying test database so it created its own database from what was happening right now it looked for test method ones whose ones whose names begin with tests ok so it's looking for everything that starts with tests if you don't have these starting with tests it won't find it ok so like let's just say it was like this and I'll hit save and then we'll also run this test pulls and it didn't even find it it said it ran zero tests and zero seconds but as soon as I do that and if I run it boom ran it created a in test was published recently was featured quiet it created a question instance whose publication field is thirty days in the future right over here and using the assert his method discovered that it was published recently returns Trudeau we wanted to return false what we found out here cool the test informs us which has failed and even the line on which the failure occurred so here it'll tell us which line we failed on line 18 right this is line 18 cool so now we're gonna go ahead and fix this bug how are we gonna fix it well this is the code that's gonna help us fix it we already know what the problem is amend the method in models rpy so it will return true of the data is also in the past so we're gonna go into models and we will change this to this indentation and whitespace and Python is important so make sure it's indented correctly underneath this was published recently method and basically we're saying hey set the time zone to now like exactly right now and then subtract one day from now if that's less than or equal to the publish and check if that's less than or equal to the self dot publish date okay so if that's less than or equal to the publish date and then check if cells that published it is less than or equal to now okay so in other words check that this publication date is in between this and this does that make sense it has to be sandwiched between the two and run the test again so now I'm gonna hit save and I will simply run the test again and now look it says ran one test and it gave me an OK and it's saying destroying the database so cool it looks like it had no errors it ran all the tests successfully if it showed me something red or said failures I'd know something failed so now it's working cool now we can also do after identifying a bug we wrote a test that exposes it and corrected the bug in the code so our test passes many other things might go wrong with our application in the future but we can be sure that we want inadvertently reintroduced this bug so it'll automatically keep checking it and we're not gonna be reintroducing this bug because we'll always find it because simply running the test will warn us immediately we can consider this little portion of the application pinned down safely forever pretty cool I think that's pretty freaking cool and now they're like alright we're gonna get into some more comprehensive tests while we're here we can further pin down the was published recently method in fact it would be positively embarrassing if in fixing one bug we had introduced another cool add to more test methods to the same class to test the behavior of the method more comprehensively so now we're gonna test was we're gonna test the was published recently method with old question and then we're also gonna test it with recent question and we already have the future question so you can only have three cases future question recent question or old question if a question is older than one day it should basically say that it's not um if the question is older than one day it will should return false it should say it's not recent if it's in the future it should say it's not recent if it's been posted less than one day then it should say it's recent so for example if we just look at this test code at a high level old question look it's asked it's making sure that it's asserting to be false so if it's one day and one second ago right so if it's one if it's exactly one day ago then what it should do is it should say yes it's still true but if it's one day and one second ago now it should say it's too late and it should be considered false okay it should be considered not recent and then published recently with recent or with recent question so if the question is as you can see here not even one day ago 23 hours 59 minutes and 59 seconds ago almost one day it should assert it to be true okay take these and we will go into our tests and we will add this into our tests okay there we go 1 2 3 4 1 2 3 4 and 1 2 3 4 1 2 3 4 1 2 3 4 or 1 2 3 4 ok so just make sure that it's all indented correctly and then that you should be good there so now we have all of those scenarios covered future old or recent question let's run our test and let's see if we have any bugs no bugs it looks like our method is working perfectly okay just so you understand this code right here it'll only return true when the publication date is in between this and that okay so this is basically saying it's within one day and this is saying it's less than now okay so if this is in between it'll match and now we have three tests that confirm the question was published recently returned sensible values for past recent future questions good again polls is a simple application by however complex it grows in the future and whatever other code interacts would we now have some guarantee that the method we have written tests for will behave in expected ways test of view so you can also test views the polls application is fairly undiscriminating it will publish any question including ones whose publication date field lies in the future we should improve this setting a publication date in the future should mean of the questions published at that moment but invisible until then all right so what are we doing here well when we post our question if it's some data in the future it shouldn't show it just like for example on WordPress if you publish a blog post for let's say you know two days later it doesn't show until two days later right you can schedule your post or on YouTube sometimes I schedule my videos and you know I'll say show this video to the audience in one week from now right so if I do show it from one week from now it shouldn't be showing it at that same time that would be crazy that wouldn't make sense just like that we also want to do with our questions and make sure that it doesn't just show out of nowhere and we want to make a test for a view when we fix the bulk above we wrote the test first and then the code to fix it in fact that was a simple example of testdriven development but it doesn't really matter in which order we do the work in our first test we focus closely on the internal behavior of the code for this test we want to check its behavior as it would be experienced by a user through a web browser okay so the first one it was like the logic of the code this one we're focusing on what happens if the user is like testing it and the user is actually on the front end of the website what does it show to them and isn't that cool that you can automatically test that every time your code runs and you don't have to like go and check if your cart is working or your blog is showing things like that all right so the Django tests client so here's a command we're gonna go in our command line and type in so I'm gonna copy this guy again and remember we got to do Python manage that py shell then paste this guy and then we will get setup test environment just like that okay installs a template renderer which will allow us to blah blah blah blah blah okay we will get this guy and then also they say something about timezone so make sure your timezone is correct mine is in America / Los Angeles if I go in my settings and show you for you it might be something different so you can go in this go to this link and look up what your timezone is okay so we're gonna import the clients and then we're gonna create an instance of the client so here we're creating an instance and now we can get a response from our home page now when the response from your home page should give you something like not found or a 404 it's because if you go to your home page there's nothing there right if you just go to right now your localhost 127 dot 0 dot 0 dot 1 colon 8000 it should give you an error the only routes that are mapped is like if you go to slash admin or if you go to slash pols remember that so that's why the home is giving us a 404 right now we should expect a 4 of 4 from that address let's just do response dot status code and here it is 404 we should expect to find something at polls though okay so let's try that we'll use reverse rather than a hardcoded URL so instead of doing like you know whatever slash polls we're gonna just do a reverse here okay so from Django we're gonna import reverse and we'll paste this guy right here and now if we do response that status code it shows me something if I do response it's saying template response status code is 200 and it's a text slash HTML file which it is okay and now we can also get the content we can do response that content so now it's showing me the content of that file and if you remember we do have unordered lists in the start and then we have bullet points so here you have what's cracking in HTML to show an apostrophe they have to do this ampersand number sign 39 semicolon that's basically apostrophe and we also have our other question what's new and you can see they're links here as well okay so this is like just showing the good version of what the user or we actually see on the front end and we can also do response a context and get the latest question list and look it gave us the questions what's cracking what's new what's up now we can improve our view as well the list of pulse the the list of poll shows polls that aren't published yet those that have publication date in the future let's fix that so right that's a problem so we need to fix that we introduced a classbased view based on list view so we're gonna go ahead and fix things in there now we need to amend it so let's go up to our views and our index view we need to fix this and change it so that it also checks the date by comparing it with timezone dot now first we need to add an import so at the top of our code we're gonna add this here import timezone and then our query set we're gonna change it a bit so where's our query set all right can we put this on one line so it looks slightly less confusing yeah we were fine we're not following PAP eight we're running across a little bit but according to my boy Raymond the og Hettinger or head injure you know according to him he says ninety to ninety five characters should be good enough pep eight I think with the whole edy character line is kind of stupid because honestly breaking this down into new lines messes up to code readability but right now this looks pretty easy to read if you just have it much easier if you just have it on one line anyway okay what is it doing it returns the last five published questions not including those set to be published in the future alright so how is it doing that it's taking the questions model it's finding all the objects and it's filtering those objects and only finding the following okay this statement here it's looking at the publication date and it's only finding so this underscore underscore LT means you're doing a reverse search and you're saying less than or equal to that's what LTE means less than or equal to so any publication date that was less than or equal to the current time meaning only past or current posts filter those and then once we find those we order those by descending publication date so which one was the most recent ones and then we show the first five that's it okay a lot going on and now we can also test our new view so now you can satisfy yourself that this behaves as expected by firing up the run server loading the site in your browser creating questions with dates in the past and future and checking that only those that have been published or listed you don't want to have to do that every single time you make a change that might affect this so let's create a test based on our shell session above sea shells see what is it see she sells seashells down the seashore okay that's a falling to pull slash test that py polls TAS all right we're adding reverse boom and we'll create a shortcut function to create questions as well as a new test class so this will create questions for us cool since this is not gonna be a method it's gonna be a function we're gonna put it outside like that this will create questions how will it create questions you give it a question text and you give it days and then what it does is it'll create a question with that number of days in the future or with that number of days in the past based on whether you pass in a positive number here or a negative number here or something like zero okay right here and then it goes into question that I've just and it creates that object in questions class and for the question tax keyword argument and passes in question text and for the pub date keyword argument it passes in the time which it gets from here cool cool okay so question view index what are we doing there question view question index view test so we're creating a new class here so I'm gonna go right there and paste it and save so now we're creating tests for our index view instead of model okay so this is our model test and what we're saying is like tests no questions if no question exists an appropriate and appropriate message is displayed so if I go into my views and you can see in my views let's see it's there is it not there or is it an RHD yeah I think it's in our HTML right index so here you can see it says if there are recent questions and show them else say no polls are available so we want to test that it actually does say no polls are available on our front end we can actually do that and right here and we say hey first check that the status code for this page is a 200 meaning that you actually find this page second test that that response that you find it contains no polls are available ok so right now remember we have no questions at the moment and then also make sure that the cert query set is equal to the response is equal to the following so this thing latest question list should be empty that makes sense right that means there are no questions so it's just a no polls are available and it should check that this is actually just an empty list cool now what we want to do is test past questions okay again this could go on could this go on one line or this will be too crazy this is pretty crazy so I can I can break that up a little bit that's fine still readable for me okay so we're saying if we create a question okay again this creates its own database so it doesn't have our what's cracking and whatever tests available anymore for these tests it creates its own database and then it destroys that database afterward so within this database we're creating a question and the question text will be called past question instead of what's cracking or what's poppin or whatever and we're gonna say that it should be dirty it should have been created 30 days ago okay so this is a past question hence test past question and then what we're gonna say is hey response get that particular page and once we get that page we want to say hey is that are the latest questions of that page contain that question and the answer will be yes it does because we just created it right here and if this thing is equal to this then the test should pass we're also gonna create a future question so this should test a question thirty days in the future pretty much the same thing and make sure that a response contains no polls are available that makes sense right because if the question is in the future then it shouldn't be available right now so I should say no polls are available and also make sure that the response that context latest question is empty because there are no latest questions it's gonna be posted in the future okay cool and let's check this guy with the recent and past questions again I think it's a little bit more readable like that you can break it down like this that should be fine too but I like it like this and basically what we're testing here is that this thing should equal to this thing and what's going on here on the dock for this as this is test future question and pass question even if both past and future questions exist only past questions are displayed that makes sense too and how does it work we create a question 30 days in the past we create a question 30 days in the future question one is called past question question two is called future question we get the pols index page and then we say that this thing the latest question list should only have the past question those created 30 days ago and not the recent question and it should match that and indeed and it should right if we did everything right we shouldn't get an error if we run this and then what we need to do is define two past questions all right now this is getting a little too big so let's break this one down now and you can indent this too okay so what am I saying here I'm saying so test two past questions so the questions index page may display multiple questions so we also want to see that it doesn't just display one question it displays multiple ones right so we have past question one which was created 30 days ago we have past question two which was created five days ago we get the polls index page and then we say make sure that the question list actually let's do it like this because I think it'll more readable actually so we want to say that this should equal to this okay latest question list should have both of the past questions why in this order because remember the most recent ones it shows it first right if we look at our views and how it does it ascending order it sorry descending order and then the five so that's why that's why I would show the past question too first and then this one right here cool basically the most recent question is just show all the way at the top all right so first is a question shortcut function create question to take some repetition yeah well we pretty much went over this whole thing so we don't have to check that and so on in effect we are using the test to tell a story of admin input and user experience on the site and checking that at every state and for every new change in the state of the system the expected results are published now that's a really important point like you're telling a story with your test guys like this is what's really important to understand so if you're working on a team with somebody and somebody's reading through your test they understand what each of your view is supposed to do and what it's supposed to return like so so so key like if I'm looking at somebody's code I don't know what the hell it's supposed to do right I don't know what the right answer is supposed to be but if I look at their test and they have like bunch of examples and what the correct answer and the wrong answer should be and then documentation I totally understand what each function is supposed to do what each class is supposed to do and then effectively I'm on the same page and then I can actually contribute to this project right I can go that's where you guys hear like hey just go ahead and contribute to open source projects this is one of the ways that you can do that understand look at their tests first and then like I can't tell you enough for those of you who are a little bit more advanced to understand the library here's a protip one of the best ways to do it is not just like instead of just reading the code go and look at their tests and they will have so many things in there and what it's supposed to do you'll start understanding how this library's supposed to work and it's how supposed to behave literally tells a story now we want to test the detail view okay so what we have works well however even though future questions don't appear in the index users can still reach them if they know or guess the right URL so we need to add a similar constraint to detail view okay so we don't want to our users to be able to reach those questions obviously because they don't exist so they shouldn't just be able to go to that particular URL okay like let's say you had a blog post like whatever your blog post is called banana so it's like John com slash blog slash banana if you scheduled it for like a month later I shouldn't be able just go to it from the URL okay so what's going on here we have the detailed view so let's go into our views let's go into our detail view it's right here what did I want us to do they want us to create a query set and do this with it okay excludes any questions that aren't published yet so filter make sure the publication date is less than or equal to then the time zone dot now that's that's it that's essentially it and those are the only ones you can check pretty cool okay very very powerful again you can see how powerful the generic method is and of course we will add some tests to check that a question whose publication date is in the past can be displayed and now one with a publication date in the future is not so let's go into our tests and let's an add the test for this so again it's a new class it should have its own methods and everything right so for the index view we created a class okay for those tests and now for our detailed views we're also creating a class okay very important now we test future question and we test past question how do we do that we create the question five days in advance we send you to the polls detail page so like for example an Instagram if you click into a image and it shows you that specific image that's equivalent in our app of polls detail or questions detail view and for the arguments we give it that questions ID from right here and as a response we get that particular URL and then we say hey make sure that the response actually returns a 404 and it will because here's how we told it and then test pass question so basically here we're saying 404 meaning it doesn't exist right so the detailed view of a question of the publication did in the past displays the questions text so past question we create the question here it's created five days ago we get the URL for the poles detail and we pass in the ID for the past question and then as a response we get that specific URL and then we assert and make sure that it can the response contains the following thing so a response and then it should have the question text in there okay it's a past question question text cool and let's see let us let's see if we're gonna be using any more command line stuff we're not so let's go an exit and let's just see right now if our tests are working in our poll slash view something is happening on line 18 what is happening ah okay it's not indented correctly obviously save up and enter and look at that all our tests ran in here and they all ran successfully so you can see all these tests have already gotten pretty complicated and they're testing our app pretty thoroughly you know this is not something you want to do manually every single time and you can already see the power of it all right ideas for more tests so we have to add similar query set method to results view and create a new test class for that view so we can also test results view it'll be very similar to what we have just created in fact there will be a lot of repetition we could also improve our application and other ways adding tests along the way for example it's silly that questions can be published on the site that have no choices so our views could check for this and exclude such questions our tests could create a question without choice and then test that it's not published as well as create a similar question with choices and tests that it is published also you can have logged in admin users who should be allowed to see unpublished questions but like ordinary visitors shouldn't be so if you're an admin right and you have WordPress blog and you schedule one in advance you can see it but other people can't just like I can't schedule my YouTube videos you can't see it I can whatever needs to be added to the software to accomplish this should be accompanied by a test whether you write the test first and then make the code pass the test this is a the testdriven way of doing it or work out the logic in your code first and then write a test to prove it at a certain point you're bound to look at your test and wonder whether your code is suffering from test bloat which brings us to the following so the thing that they say is when testing more is actually better okay so it might seem that your test is going out of control and there's a lot of like test bloat and you know what you're beautiful elegant and concise code compared to your test looks so much better that's totally okay tests are supposed to be bulky and a lot and this should cover your ass okay that's their job and so they don't have to look pretty they don't have to look beautiful they have to tell a story and have to tell it clearly so it doesn't matter right let them grow and for the most part you can write a test once and then forget about it it will continue performing its useful function as you continue to develop your program sometime they will need to be updated just like we had to update ours telling us exactly which test needs to be amended to bring you up to date so that extent tests help look after themselves at worst as you continue developing you might find that you have some tests that are redundant in testing redundancy is actually a good thing and even that redundancy is not a problem okay so the more you test the better and you don't have to go back and wipe anything clean as long there sensibly arranged they won't become unmanageable okay so the good rules of thumbs good rules of thumb include the following you should have a separate test class for each model or view so for remember for each of our models write or question model question model test we had a different class for this and for each of our views we actually had a different class for a detail view we had a different class for our index view and if we wanted to go further we could also add a different class for our results view a separate test method for each set of conditions you want to test so instead of testing test no questions test pass question and kind of like testing an allinone it's a good idea to break it down into separate different tests each tests doing only one job so here if no questions exist an appropriate message displayed that's what this is test is supposed to do this test over here questions with a publication date in the past are displayed on the end espeacially you can see each each test is trying to do one and one thing only okay test method names that describe their functions so the names themselves should describe the function of the test okay so test no questions test pass questions test future questions and once you build this naming convention you and your team starts understanding it and most of the times you guys will be able to just look at each other tests and know what your app is supposed to be doing or what it's not supposed to be doing further testing this tutorial only introduces some of the basics of there's a great deal more that you can do and a number of very useful tools at your disposal to achieve some very clever things for example so this is a pretty cool part right now we just kind of tested our backend and a little bit of our frontend but what if we wanted to test our JavaScript and how it loads and literally like moving the mouse like have the computer move the mouse and select one of the votes and click vote how does that experience work how can we test that on autopilot where it happens automatically well there's something called saleem selenium or selenium and it's a way to test your HTML actually renders in a browser okay so these tools allow you to check not just a behavior of your Django code but also for example of your JavaScript and your browser pretty freaking mindblowing it's quite something to see the tests launch a browser and start interacting with your site as if a human being were driving it and Django includes live server test case to facilitate integration with tools like selenium okay so if you want to get more advanced look up Django and selenium and you could even look up YouTube videos online and add those kind of tests within your app if you have a complex application you may want to run tests automatically with every commit for the purposes of continuous integration so if you guys know about github and commits you can make it so that when you're writing the code and as soon as you commit it I like to call it like the time machine because that's what get in version control allows you to do you can make it so then it tests it on every commit so that if any one of your commits you know fails any of the tests it'll be like hey this is broken and you'll find out right away before you actually push that code on to github and destroy your life embarrass yourself let down your family and be fired from your job so that quality control it is itself at least partially automated a good way a good way to spa untested parts of your application is to check code coverage this also helps identify fragile or even dead code if you can't test a piece of code it usually means that code should be refactored or removed that's those are some big words coverage will help to identify dead code C integration coverage dot py and you can check you know what's dead code and what's not and yeah so a lot of testing I hope that you enjoyed that in the next part of the tutorial we're gonna be learning on learning about static files management ok so that's it for this video thank you so much for watching again I do want to leave you with this I have my course the profitable programmer is just a badass course that helps you become an awesome Python Django developer it also shows you how to charge what you're worth and get your first client with Python in less than 90 days the focus is on helping you get clients helping you get work if you are interested again here's the link and the link should also be in the description go to that page and sign up and join the VIP waitlist and as my gift to you I will give you a Python earning potential calculator so you can see how much you're earning potential could be as a Python developer okay and I'm gonna be giving you that obviously for free and by joining the VIP waitlist you will be the first to know when the course the profitable programmer opens up that's it for this video thank you so much for watching as always I love your faces off and I'll see you in the next video
