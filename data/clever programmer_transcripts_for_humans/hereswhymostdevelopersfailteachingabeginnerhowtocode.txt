With timestamps:

00:00 - let's go man i'm over here my hands are
00:02 - like super cold right now just because
00:05 - of how nervous i am
00:10 - yo what's up guys how's it going this is
00:12 - qazi from cleverprogrammer.com today i
00:15 - have with me david what's up
00:18 - yo let's go david let's go today we're
00:21 - going to be doing something really
00:22 - interesting which is we're going to take
00:24 - david who has some coding skills david
00:27 - how would you describe yourself in your
00:29 - skill level you're advanced beginner
00:30 - [Music]
00:33 - right so he's one step below
00:35 - intermediate mostly beginner and we're
00:37 - gonna take david and work with him and
00:39 - give him some coding skills we'll see
00:41 - how it goes alright and hopefully you'll
00:43 - enjoy this with us let's rock and roll
00:46 - we'll just uh go through this together
00:48 - okay let's go through some javascript
00:50 - exercises and i want to see how you do
00:52 - in them okay so let's start with in
00:55 - javascript let's start with uh if you
00:57 - had to write something to figure out the
00:59 - max of an array would you be able to do
01:01 - that the max and if you don't know any
01:04 - of this is totally okay okay i'll work
01:05 - with you here i guess just start off by
01:07 - making an array in javascript okay and
01:09 - see if you could show it here where it
01:11 - says gs start if you just have like one
01:13 - of the items show up here on the header
01:15 - okay so i'll give you a hint on line six
01:18 - we have uh this that's showing up here
01:21 - so just start off by making a array in
01:23 - javascript and let's just put groceries
01:26 - in there um did i just take this over
01:27 - yes take it over you got it
01:30 - you said groceries yes
01:32 - oranges beautiful bananas uh-huh cool so
01:36 - we got our array right okay it's really
01:39 - good now
01:40 - i want you to
01:41 - um okay let's just do like i want you to
01:44 - print out bananas or console it out like
01:47 - so i want to see that how would you do
01:49 - that
01:50 - uh-huh and you said bananas groceries
01:53 - yeah and then get me get me bananas out
01:55 - of that two okay and let's take a look
01:58 - at the log
01:59 - and there we go bananas beautiful okay
02:02 - that so that looks really really good
02:04 - okay good job with that
02:06 - amazing okay awesome
02:08 - now make bananas pop up over here
02:12 - groceries dot
02:14 - get
02:15 - element by id
02:18 - and then i will say
02:21 - so let me give you a hint okay okay
02:23 - what exactly what you're trying to do
02:26 - somebody's already done that for you on
02:27 - line five and length six
02:29 - oh okay okay and then i would just have
02:31 - so somebody literally
02:33 - got that
02:34 - element by its id
02:36 - and then they changed its thing
02:39 - so
02:40 - i would just do the same thing in
02:41 - reverse
02:42 - so what you want to do is you already
02:44 - have access to this app div
02:47 - you just have to do app div dot inner
02:49 - html and make its inner html whatever
02:51 - you want got you okay
02:53 - there you go
02:55 - app
02:56 - and for everybody watching guys this is
02:58 - why it's really important for you before
03:00 - you go to react or anything else
03:03 - get your javascript right so let's keep
03:05 - going okay so try bananas so
03:08 - great it's showing up
03:10 - however
03:11 - what i want you to do so
03:13 - you know whether you wrote it like this
03:14 - or you wrote it like this it'll still
03:15 - say bananas here
03:17 - but what i actually want you to do is
03:19 - you hard-coded this
03:21 - but i want you to pull it out of this
03:23 - grocery array okay uh no don't know how
03:26 - to do that you did it on line 10.
03:29 - oh okay it's the same thing yes sir
03:32 - exactly wow nice work
03:35 - okay
03:37 - why this is important to know is because
03:39 - when you go into interviews this is
03:41 - exactly what happens i see like you guys
03:43 - saw this and everybody who's watching
03:45 - this saw this too it's like you knew how
03:46 - to do this you clearly just did it right
03:48 - right right but then because i asked you
03:50 - you probably just got stumped or your
03:53 - brain sometimes my brain literally
03:55 - started thinking
03:56 - wow i know how to do it but why am i
03:58 - going so slow why am i feel like i can't
04:00 - do it why do i yeah yeah yeah okay
04:03 - exactly
04:05 - exactly so that's why this is important
04:06 - for us to drill right okay
04:08 - cool so you're doing you're doing great
04:11 - so far this is this is looking good okay
04:14 - we have our banana showing up we're
04:16 - showing it from the array now what i
04:18 - want you to do is i want you to go ahead
04:20 - and loop through the groceries array
04:23 - and just like print everything out in
04:25 - the console i say print a lot because
04:27 - i'm from the python world and there you
04:29 - don't say console.log you print right
04:31 - okay so i want you to just console um
04:34 - put everything on the console like just
04:35 - loop through it and line by line show me
04:39 - all three of these items
04:41 - you're doing great by the way i need a
04:42 - hand let's take a look at this right so
04:44 - let name
04:45 - equals okay cool i know that it has to
04:48 - have parentheses so let's start here
04:50 - okay so for loops
04:53 - start with um have you ever written a
04:55 - loop in javascript or not right
04:57 - practicing that now okay cool so let for
05:01 - dot length
05:03 - [Music]
05:04 - i believe
05:06 - semicolon and then would be
05:09 - i
05:10 - plus plus
05:12 - cool and then it will have these
05:15 - curly brackets right there yep
05:17 - console.log
05:19 - and i think that's it so did you do what
05:22 - i asked you to do loop through okay you
05:24 - asked me to loop through all the items
05:26 - in the array until what and just make
05:29 - sure that each of them prints out line
05:31 - by line prints out line by line but
05:32 - what's happening here instead so it's
05:34 - just going to loop through what is it
05:36 - currently doing it's just gonna give all
05:38 - the arrays over and over and over yep
05:40 - it's just giving that array three times
05:43 - right when you do gross groceries it
05:46 - gives you the array again and again
05:47 - right right
05:49 - but uh if you were to do it by yours
05:51 - okay so
05:52 - show me how you would manually do it so
05:55 - go through
05:56 - forget about this loop and i want you to
05:58 - write out lines where it literally
06:01 - prints out apples apples then and then
06:04 - another console log that prints out
06:06 - oranges and then bananas okay so just do
06:09 - that manually without a loop without a
06:11 - loop yeah just cost
06:13 - groceries
06:15 - sorry
06:16 - zero
06:18 - and then i would you're going to know
06:20 - how to do that
06:21 - because
06:22 - we don't
06:23 - we don't need to type all over exactly
06:25 - copy and paste and let's go command c
06:28 - are you a windows guy no i'm a mad guy
06:30 - okay so let's make sure we do yeah
06:32 - perfect command c command v
06:34 - okay perfect good job you got it right
06:36 - now you're trying to automate this
06:38 - through this loop so what's the pattern
06:40 - that you see here
06:42 - zero one and two right so what's the
06:45 - thing that is there in every do you see
06:47 - that this bracket thing is there and
06:49 - every single thing you right so grocery
06:51 - sting is there every single line you
06:52 - wrote right right so that's why in the
06:54 - loop you're going to say groceries
06:56 - what else is there in every single line
06:58 - the location of the array yep so the the
07:02 - bracket is there and the location of the
07:04 - array is there right so pretty much
07:06 - we're gonna make the
07:08 - we can pretty much make the bracket here
07:09 - safely
07:11 - okay
07:12 - and then what's this thing that gives
07:13 - you zero one and two what what's that
07:15 - the location that's the location right
07:18 - so what do you have access to a variable
07:21 - or something
07:22 - that can give you zero on the first loop
07:25 - one on the second loop and two on the
07:27 - third loop because if you so if you hard
07:30 - coded zero here what would happen it
07:32 - would print out the first item in the
07:34 - array which is apples how many times
07:36 - maybe one or two times why would it be
07:38 - two times because it has i plus plus it
07:41 - will yes but it's running as many times
07:44 - as the length of the array so what's the
07:46 - length of the array the length of the
07:48 - array is two
07:50 - three three okay
07:52 - okay so it will print it out three times
07:54 - three times okay so let's type in a zero
07:57 - here and i got three apples gotcha
08:00 - okay what if i put a one here it would
08:03 - do the same thing before oranges and if
08:05 - i put two here bananas bananas but we
08:08 - don't want to hardcode a zero or one or
08:10 - a two
08:11 - out of all so i'll even give you this
08:13 - it's just on this one line
08:15 - there's this the variable that you
08:17 - created
08:18 - that on this first iteration is zero on
08:20 - its second it's one and a third is two
08:23 - do you know what that variable is in
08:24 - here okay so let's go through process of
08:26 - elimination okay okay is groceries
08:28 - itself a zero one or a two hold on guys
08:31 - i couldn't tell you guys what i know i'm
08:33 - like super nervous right now my brain is
08:35 - like frozen i'm not even thinking right
08:38 - now i know um how's he doing by the way
08:40 - guys super terrible
08:43 - he's doing great
08:44 - groceries just by itself is what what is
08:47 - groceries groceries is the array yes sir
08:50 - right okay so groceries is an array so
08:52 - groceries is not the number zero or one
08:55 - or two right right so it can't be
08:57 - groceries okay and therefore it can't be
09:00 - length right okay so what's another
09:02 - variable
09:03 - okay then it'll have to be i
09:06 - yes so try that and what did you get
09:09 - apples oranges bananas wow
09:12 - man
09:13 - wow
09:14 - so like
09:15 - all right i just got to take a pause man
09:16 - first of all guys disclaimer i wasn't
09:18 - ready
09:20 - no i'm kidding i'm kidding i'm learning
09:22 - a lot let's go you know these this is
09:24 - why these basics are so important to
09:25 - practice right because you can
09:27 - conceptually understand them right but
09:29 - if you don't do them on a regular basis
09:31 - it's so easy to forget what that is
09:34 - and what happens is when you don't have
09:36 - the building like if i want to teach you
09:39 - a more complex concept right if you
09:41 - haven't drilled this enough time it's
09:43 - going to be very difficult for you to
09:44 - understand a more some a complex concept
09:47 - understood that makes sense okay so like
09:49 - if i'm trying to teach you how
09:50 - functional programming works and you can
09:53 - turn this whole thing into one line of
09:54 - code using something called map do you
09:56 - know what i
09:58 - when we say this is the zeroth place
10:01 - first place second place do you know the
10:02 - term for that it starts with an i it's
10:04 - called index index okay zeroth index
10:07 - index first index right right right
10:10 - so really i here is your index i got you
10:14 - okay so you created this variable and
10:15 - you said let i equal zero so in the
10:18 - first loop i is zero which yeah in this
10:21 - case is going to be apples but i itself
10:23 - is just a number right it's literally
10:25 - zero
10:26 - well in the second loop what is i so
10:28 - first loop i is zero
10:29 - in the next loop i is i is groceries i
10:33 - is the number one the number one okay in
10:36 - the third loop i is
10:38 - the number two the number two
10:40 - okay so that's really what's happening
10:42 - here i see so the first time the loop
10:45 - goes
10:46 - it goes zero
10:48 - it prints out apples right
10:50 - then i becomes one one prints out
10:53 - oranges
10:55 - yep and then it becomes bananas after
10:56 - that okay
10:57 - my thought process right now is like so
11:00 - junked up man it's like i know this
11:01 - stuff but right now i'm like oh where's
11:03 - everything it's just gone right now yeah
11:06 - they're not the screen and everything's
11:07 - gone it's yeah i know i know you're like
11:10 - what is like it's almost feels like you
11:12 - never even coded before it feels like
11:13 - i've never even done it and i've seen it
11:15 - plenty of times but right now i'm just
11:17 - like yeah what
11:20 - what did you ask me to do
11:21 - that's what happens during interviews oh
11:23 - yeah that's the problem that happens
11:25 - with the interviews all the time people
11:27 - freeze it's almost like they kind of
11:28 - forget everything so the more times you
11:30 - can put yourself through in a situation
11:32 - like this
11:33 - the better yeah like my mind literally
11:36 - you're like creating an array
11:38 - i was like what's an array
11:40 - yeah exactly are you okay so let's
11:44 - create a function okay that adds two
11:46 - numbers
11:47 - and just returns them that's it so i
11:49 - should be able to give it like number
11:51 - one and number two for that function and
11:52 - then it just sums them up and returns
11:55 - let's say
11:57 - one plus two
12:00 - and then
12:02 - i guess i would say
12:05 - console
12:07 - dot
12:08 - log add
12:11 - okay so let's start off with the basics
12:13 - okay so here's the thing okay you have
12:17 - skills in a specific domain okay so when
12:20 - we spoke earlier you do shopify and you
12:23 - do stuff on e-commerce right right and
12:25 - so
12:26 - there you have more skills but the type
12:28 - of thing you're doing
12:30 - is you're taking existing code right and
12:33 - then you're making changes to it and
12:34 - you're making things work right it's
12:36 - very different than coding from scratch
12:38 - exactly okay so we're gonna have to
12:40 - develop these skills from
12:43 - the start
12:44 - okay
12:45 - so for example the first thing
12:48 - that i want it to come to your mind
12:50 - whenever you hear the word function
12:53 - you should start off by writing oh wait
12:56 - hold on function oh man see this is what
12:58 - i'm talking about my mind is just like
13:01 - okay right off on a break yeah
13:04 - bro function
13:07 - there we go
13:09 - [Laughter]
13:15 - man hold on
13:20 - so when we're calling this right you had
13:22 - the right hunch to add a parenthesis
13:25 - here because
13:26 - functions
13:27 - have
13:28 - they take in arguments right
13:31 - okay
13:31 - so
13:32 - your add function needs to have how many
13:35 - arguments that it takes i think it can
13:37 - take
13:38 - two in this case we're gonna give it two
13:40 - right a function can take as many
13:42 - arguments as you wanna give it you could
13:43 - literally give it a thousand arguments
13:45 - but here in this case we're just to give
13:47 - it two right okay you don't want to here
13:49 - you don't want to hard code anything
13:51 - okay
13:52 - uh
13:53 - because okay let's just say you did say
13:55 - two plus two and let's just say somehow
13:56 - it worked right your function whenever i
13:59 - call it would just return four what but
14:01 - what if i wanted you to add 20 and 50
14:03 - together it would still just give me
14:05 - back four or something okay so we cannot
14:08 - hard code in here and we need to give it
14:09 - two arguments and those two arguments
14:11 - should be variables
14:12 - all right so
14:14 - here you could put a comma b
14:16 - and then you can do later a plus b yes
14:18 - return see now it comes back yes now
14:21 - it's coming back right
14:22 - um however i like to make my things
14:25 - verbose so they're easier to understand
14:27 - okay so you could do this way as well
14:29 - but whichever way it's fine so let's do
14:32 - add a comma b
14:34 - and then what are you gonna do um so let
14:36 - me just say it like this okay
14:39 - hint
14:40 - turn that
14:41 - line into code your code should not be
14:44 - more than one like
14:46 - on line 24
14:47 - that's it you just get one line to write
14:50 - this
14:51 - okay um meaning that it doesn't it's not
14:54 - gonna be complicated it's not gonna have
14:55 - multiple lines right you don't need to
14:56 - set eight like look if you set a equal
14:59 - to one then if i give you
15:02 - your function
15:03 - okay like if i just call add one comma
15:06 - or let's say five comma two
15:09 - your function will not return seven
15:11 - right
15:12 - what your function will do it'll take
15:14 - five and set it to one set it to one
15:16 - here
15:17 - okay
15:18 - so that's what that will do and we don't
15:20 - want
15:21 - so i guess in this case i need to
15:23 - override i can put
15:24 - console.log a
15:27 - um
15:28 - plus b that's it yeah okay but instead
15:31 - of console.log i want you to return a
15:34 - plus b okay so let's do that
15:37 - okay so now
15:39 - let's go down
15:40 - and now i want you to console log this
15:43 - out and let's add up
15:45 - you know seven and ten and let's see
15:47 - what it gives us back
15:49 - okay so a few things here right
15:52 - your it's returning 17 so that's cool
15:54 - but are you calling your function here
15:56 - no you created no you're not calling
15:58 - your function here i need to cancel that
16:00 - log
16:01 - so you're giving it arguments okay so
16:03 - this is something you need to understand
16:05 - here you can't be adding both of the
16:07 - numbers oh okay
16:10 - your function takes two arguments
16:12 - arguments okay
16:14 - so
16:15 - you're doing what your function is
16:16 - supposed to do
16:17 - but let your function do that so you
16:19 - don't need to do this but you can give
16:21 - it to your function needs two inputs so
16:24 - let's give it two inputs
16:26 - so what would be the first input here
16:28 - hey
16:30 - okay it would be in this case so yeah
16:32 - here it's the variable a that's correct
16:35 - but
16:36 - you need to give it the hard-coded one
16:39 - here which is going to be the actual
16:40 - number which is seven
16:42 - okay so let's go seven seven
16:45 - comma comma ten
16:47 - yes
16:49 - okay and now it gives you back 17. okay
16:52 - so
16:53 - for you my diagnosis is this you need to
16:56 - start from scratch scratch yes
16:59 - it's going to hurt your ego no
17:01 - really because i
17:03 - i don't mind starting i don't mind um
17:05 - admitting when i don't know so we're
17:07 - good start learn the basics guys yes
17:10 - good so what i would
17:12 - uh prescribe to you
17:14 - is
17:16 - start from complete scratch you have so
17:20 - here's the thing right like you
17:21 - understand how arrays work you get the
17:24 - concept of indexing you conceptually
17:27 - understand how looping works
17:29 - there's a lot of conceptual things that
17:31 - you understand
17:32 - to me what's very clear is you're
17:34 - lacking a lot of practice
17:36 - you're not lacking necessarily like for
17:38 - example when i show you this you're like
17:39 - oh yeah i get it
17:41 - right
17:43 - but there's a difference between you
17:45 - getting it you being able to do it one
17:47 - is you're nervous i understand that
17:49 - but beyond that
17:51 - what's important is that you
17:53 - conceptually get this
17:55 - but you have to do
17:57 - in like a really high number of
18:00 - practices practice
18:02 - and that's where i would recommend to
18:05 - not look at
18:07 - online coding projects or building huge
18:10 - projects
18:10 - that's just to get your guys's
18:12 - attention
18:14 - that will make you a better coder that's
18:15 - just the truth
18:17 - like we make those fancy projects
18:18 - because we know everybody's gonna be
18:19 - like wow that's mind-blowing wait is
18:21 - this live
18:22 - it's not live oh okay
18:25 - all right all right cool
18:27 - because that that's kind of what has to
18:28 - be like shaken up i'm like
18:30 - froze i'm thinking a thousand people are
18:32 - watching me what do i do
18:34 - you're not live okay okay let's go
18:38 - i'm over here holding my breath
18:42 - okay okay
18:44 - like so let's practice okay let's go and
18:46 - do another exercise okay and let's
18:48 - literally do this exact one okay
18:51 - so if i give you so make a function that
18:54 - doesn't even reverse anything
18:56 - that um i'll call it like let's just
18:59 - call it a spitter okay so
19:02 - make a function called spitter because
19:04 - it just spits out what you give it and
19:07 - um
19:08 - just return the string that i gave you
19:11 - okay so you could take in a
19:12 - let's just say it takes in a string as
19:14 - an input
19:15 - okay
19:16 - and um yeah and your function should
19:18 - just return that so i want you to go
19:20 - ahead and write that function right and
19:22 - we'll walk through that too how to break
19:24 - down any problem that i give you to in a
19:26 - second okay so now what i want you to do
19:29 - is to prove that it works i want you to
19:32 - call your function okay and i want you
19:34 - to console.log its result
19:37 - and i want you to give it the phrase
19:39 - um
19:40 - let's just say we give it david let's
19:42 - just say give it the word or name david
19:44 - oh you said console log it
19:46 - and give it the argument david
19:49 - give it the argument david yes let's
19:53 - let's go over even more basic okay okay
19:56 - because what i'm realizing is i want you
19:57 - to learn how to call a function first
20:00 - because i right now and i said call a
20:01 - function i want you to know what that
20:03 - essentially means okay okay
20:05 - so
20:06 - if i
20:08 - created a function and i called it quasi
20:11 - okay and it has no
20:13 - it's not taking in anything
20:15 - okay
20:17 - and uh it just prints out
20:20 - causey
20:22 - okay right
20:24 - in order for me to call this function
20:27 - how would i call this function just put
20:30 - um
20:31 - kazi at the bottom there okay when i put
20:33 - quasi at the bottom here let's see what
20:35 - happens i get nothing in the console log
20:37 - so what should i do so if it's not
20:39 - showing in the console what's happening
20:41 - is i'm not actually calling that
20:43 - function a function is not a variable
20:45 - okay if quasi was a variable like if i
20:48 - if i had something like let causey
20:51 - equals
20:52 - causey
20:53 - and i saved this
20:55 - all right let's go
20:57 - identification has already been declared
20:59 - so i'm i'm declaring it here okay let's
21:01 - just go quasi with two eyes i could call
21:03 - the quasi with two eyes
21:05 - and i would just console log its result
21:08 - in order to show it but that would say
21:10 - causey
21:12 - but if i call
21:14 - that function that i wrote
21:16 - this one here okay that doesn't call it
21:18 - right so in order to call the function
21:20 - you have to put this open close
21:22 - parenthesis so whenever you're calling a
21:24 - function always remember to put these
21:27 - parentheses you cannot call a function
21:29 - without them you have to put the
21:31 - parentheses now if your function is
21:32 - dependent on a thing inside of it then
21:35 - you have to give it that argument okay
21:37 - so for example like if i could give it
21:38 - any name and it gives me back that name
21:40 - right right so if i like let's say had
21:42 - this go you know take any name well what
21:45 - would be the argument i give it it takes
21:47 - in a name
21:48 - right and then what does it do it
21:50 - returns the name right
21:51 - and then when i'm calling it i just go
21:54 - give it a name david it goes here the
21:57 - function gets called it changes this to
21:59 - david it goes to line 38 runs this line
22:02 - and you get kazi then it goes to line 39
22:04 - and it returns david right
22:07 - okay when i say that this function here
22:10 - takes in an argument this is what that
22:12 - means the function takes in something
22:14 - called name and i'm just giving it that
22:16 - name here right okay so first of all the
22:19 - few things that you were doing wrong
22:21 - with your spitter
22:22 - is that
22:23 - you were
22:25 - uh i think you call you did console log
22:27 - it's that was good okay then you
22:29 - did say spitter
22:31 - but you're not even calling your
22:32 - function here right
22:34 - okay so you have to call the function
22:36 - here and give it an argument okay so go
22:38 - ahead let's see how you would do that i
22:40 - have my function i have the splitter i
22:42 - have um
22:43 - this which is the equivalent of that
22:45 - right there yeah so then
22:48 - i could do
22:49 - you don't have to change your function
22:51 - right you just have to just on line 36
22:54 - how do you call spitter there you go
22:56 - and did it return it right here
22:59 - yeah did it return it yeah it did
23:01 - because it's above the function that you
23:03 - wrote exactly so it did return it so
23:05 - it's good
23:07 - but the important thing for you to see
23:09 - here was that you
23:11 - functions you call them so you put these
23:14 - parentheses
23:15 - and then if they have an argument you
23:17 - must give it those arguments right if
23:19 - you call it without this it's gonna
23:21 - not work yeah it's gonna return
23:23 - undefined so you have to give it the
23:25 - argument does it matter what you call
23:26 - this variable here
23:28 - no no as long as you also call it the
23:31 - same thing here
23:32 - right so it's like spitter takes in a
23:34 - thing
23:35 - and returns a thing that's all nothing
23:38 - could be anything exactly
23:40 - okay what if i was like hey spitter
23:42 - thick takes in a thing
23:44 - and then just like adds buy to it
23:47 - instead of spitter takes anything and
23:49 - adds buy to it yup so it's like i would
23:51 - just do a return buy so now it's like
23:53 - causing buy right and then right right
23:56 - those things are there to make it easier
23:58 - for you to kind of speak to yourself in
24:01 - coding you know i can give you the
24:03 - technical phrasing as well and sometimes
24:04 - what you can do is you can turn it into
24:06 - something that's simple for you to
24:08 - understand
24:09 - it takes anything
24:11 - in technical terms it means your
24:13 - function has an argument right okay and
24:15 - it takes in one argument then returns
24:18 - the thing it takes that argument and
24:19 - returns that argument right right cool
24:21 - so now we wrote a function that
24:23 - literally just
24:25 - returns whatever you give it it's not
24:26 - super helpful
24:28 - but it can do some it it does something
24:31 - why this was helpful right now just for
24:33 - you is because it taught you
24:35 - or it at least reminded you of how to
24:37 - qualify see i feel like i don't know if
24:39 - other people can relate but i feel like
24:42 - up here yeah i understand everything
24:45 - that's going on yes because i've studied
24:47 - it i know what it is
24:49 - but then when i sit down to do it
24:51 - i can get it you know fifty percent of
24:53 - the time yeah fifty percent of the time
24:55 - they yeah if that makes sense 100
24:58 - it does
24:59 - you can keep understanding and getting
25:01 - it right and that's the thing like i
25:03 - watch
25:04 - i watch a lot of chess okay so i watch
25:07 - magnus carlsen play chess all the time
25:09 - and he's the number one best player in
25:10 - the world and when i watch him play he
25:13 - plays so incredibly
25:15 - every move is on point it's perfection
25:18 - it's extremely well calculated and he
25:20 - makes it seem easy like it's water and
25:23 - i'm like wow this is awesome then i go
25:25 - to play a chess game and i'm like i'm
25:27 - going to play just as well as magnus
25:29 - carlsen and then all of a sudden i'm
25:31 - hanging pieces
25:33 - weird things are happening i'm hanging
25:35 - um a checkmate and i'm losing on the
25:37 - spot i'm like what the hell like
25:39 - i thought i would play exactly like
25:40 - carlson right
25:42 - and so the only difference between him
25:44 - and i is that he probably has like 10 or
25:47 - 20 years worth of more training just
25:51 - literally repetition
25:52 - skill building
25:54 - and so if even if you join pwj
25:57 - if you're watching the videos it's not
25:59 - the same as you doing it right
26:02 - and i want you to keep practicing doing
26:05 - it and never feel like you're better
26:07 - than the basics oh never that's why
26:10 - that's part of the thing that i told you
26:12 - earlier i haven't i i'm an empty cup i
26:15 - never feel like i know
26:17 - anything yeah no
26:18 - yeah that's good so you want to just
26:21 - keep practicing because people who put
26:22 - themselves above the basics this
26:24 - struggle forever so like keep practicing
26:26 - the basics again and again and again and
26:29 - again and again
26:30 - and that will make you really really
26:32 - dangerous and it's kind of crazy because
26:34 - man it's like i've seen this a thousand
26:36 - times i've seen yes a thousand times why
26:38 - can't i write a simple function have you
26:40 - done it a thousand times no that's the
26:42 - difference here's another thing i want
26:43 - you to do so let's make a new function
26:46 - and we'll call it reverser
26:50 - okay okay and what this function does
26:54 - is it takes in a thing
26:56 - and then it reverses it and then returns
26:59 - it okay okay so go ahead and write that
27:02 - function for me so i've never reversed
27:06 - anything javascript okay so very close
27:10 - the only difference with this is it
27:12 - reverses that thing and then returns it
27:15 - so
27:16 - but let's see if you can reverse a
27:17 - string
27:18 - okay so i'm not going to give you an
27:20 - array i'm going to give you a string
27:23 - so if i give you david okay could you
27:25 - reverse that and give me divad
27:28 - so you can look it up you can keep
27:30 - looking it up because you right now
27:31 - looked up how to reverse an array but i
27:33 - don't want you to reverse an array so
27:35 - what are you going to look for instead
27:37 - first a string
27:41 - so some of this stuff right might be
27:43 - trickier than other things
27:45 - but here they're giving you the solution
27:47 - it has 819 votes and it's simple enough
27:50 - right okay
27:52 - for example
27:53 - their code
27:55 - is saying what it's a function right
27:57 - it's called what reverse it takes in how
27:59 - many arguments one one so it's just like
28:02 - our so far we're just calling our
28:04 - argument thing they're calling it s yeah
28:06 - and then return and then we're just
28:08 - having it return this other thing so
28:10 - where they're saying s dot split ours
28:13 - would be s dot or is thing dot reverse
28:16 - exactly so you can pretty much copy
28:19 - paste that line
28:20 - oh no i want to type it out so thing
28:23 - yeah but it's not thing dot reverse dot
28:26 - join let's okay let's actually forget
28:28 - the split and join let's just write dot
28:31 - reverse can we write just dot reverse
28:34 - dot
28:35 - i don't think that will work but let's
28:37 - try it so let's try it let's see and
28:39 - i'll explain why
28:41 - if it doesn't work reverse and then it
28:42 - has the parentheses and i guess that's
28:45 - where i would put in my name
28:47 - not don't hardcode it because it'll
28:49 - always return okay
28:51 - so it'll be thing.reverse
28:54 - that's it return thing.reverse you're
28:56 - done
28:57 - oh okay return thing. okay yeah so
29:01 - because of how the code runs your return
29:03 - line won't run first
29:05 - it'll reverse the thing first and then
29:07 - return it okay
29:09 - cool so now
29:11 - call that and let's see if it does what
29:13 - we want it to do cool so it says reverse
29:15 - is not
29:16 - a function
29:18 - so here's why
29:20 - okay so let's go back here
29:22 - reverse is not a function that's made
29:24 - for strings this here is a string type
29:28 - okay
29:28 - reverse function is made for an array
29:31 - type
29:32 - so i'll give you an example okay if
29:34 - you're
29:35 - if you had an array like this okay and
29:38 - if i call dot reverse on this and i
29:40 - console log the result of that it
29:42 - reverses that thing you see what i'm
29:44 - saying i see what you're saying so it
29:45 - works on arrays it does not work
29:50 - on strings
29:51 - okay so the first thing we want to do is
29:54 - we want to take this string and turn it
29:57 - into an
29:59 - array
30:01 - but exactly like this one
30:03 - so a cool hack of doing that
30:06 - is i can say
30:07 - i can take david okay and go dot split
30:11 - and go just split it by like this okay
30:14 - and watch what happens okay i'll console
30:16 - log the result of this okay it literally
30:18 - took david and turned into an array and
30:20 - turn it into array right
30:23 - um this now i can actually reverse it so
30:27 - i can call dot reverse on this
30:31 - and now
30:32 - it's giving me the reverse of that okay
30:35 - and then the hack is to
30:38 - take it from that array
30:40 - and turn it back into a string again oh
30:42 - man you guys are crazy okay
30:44 - um
30:45 - [Music]
30:46 - so would that be that would be the dot
30:49 - join yes there we go so to write that
30:52 - here not join but that goes after that
30:55 - yeah that's right exactly
30:58 - and then i think that has to take
31:00 - parentheses with
31:02 - like that right
31:03 - yeah
31:04 - so is it giving you the right thing
31:06 - yes sir
31:09 - okay so now go to your function reverser
31:13 - and fix it fix line 49. so it will work
31:16 - for any name okay gotcha so in this case
31:19 - copy and paste thing let's let's make
31:22 - sure that we understand it though okay
31:23 - thing in this case corresponds to david
31:26 - david you understand that right
31:27 - so thing and dot what we're gonna take
31:30 - we're gonna take the string or the name
31:31 - and then what are we going to do to it
31:32 - let's go in order we're going to split
31:34 - it why are we going to split it because
31:36 - we need to turn it into an array
31:38 - beautiful so write split okay and we're
31:40 - going to split it by no spaces cool so
31:42 - that's fine right that's fine okay and
31:44 - then now we got that array now what are
31:46 - we going to do we're going to reverse it
31:49 - yes
31:50 - flip that thing and reverse it then
31:53 - we're going to dodge okay now call that
31:55 - function reverser and give it quasi and
31:58 - let's see if it returns like isaac boom
32:01 - that's sick right that's sick let's go
32:04 - and so now whatever you give it it will
32:06 - it will work
32:09 - okay that's the explanation behind that
32:11 - like
32:12 - one weird obfuscated line of code gotcha
32:15 - okay that's why data types are so
32:16 - important
32:17 - because if you know how to arrays work
32:20 - and strings work then you can mix and
32:22 - match
32:23 - even though you're like man it should
32:25 - just work it should be thing that
32:26 - reverse and works no so then you have to
32:28 - know how arrays work right so what data
32:31 - tabs would be booleans
32:32 - uh strings
32:34 - data types would be boolean strings
32:36 - arrays numbers exactly um i think that's
32:39 - it yeah i mean there's a bunch more like
32:42 - objects for example yeah objects okay
32:44 - and so
32:45 - it's really important to
32:48 - get a grasp on them and see what methods
32:50 - you can use right right be being
32:52 - familiar with them
32:53 - cool let's go and take it to another
32:56 - level but first we want to i want to
32:59 - make sure that you understand how if
33:00 - else conditional statements work right
33:03 - okay let's go so let's write let quasi
33:06 - equals um you know hungary so here's a
33:10 - here's the if else that i want if qazi
33:13 - is hungry print out hungry or food else
33:17 - print out work
33:19 - okay another important thing okay and
33:21 - and interviewers will give you bonus
33:23 - points for this and also make you really
33:25 - jacked at coding okay whenever you right
33:28 - now i'm doing you a favor by turning my
33:30 - words into pseudocode you understand
33:33 - what pseudocode means what i want you to
33:34 - do is in the future i want you to get in
33:36 - the habit of you writing the pseudo code
33:39 - i'm going to say to you and it's going
33:41 - to be your job to in very clear terms
33:44 - get it down
33:46 - that helps with the problem solving
33:48 - right yes because literally you just
33:50 - have to turn it from english to french
33:52 - aka english to code got you hey this is
33:54 - gonna be your sixth language you're
33:56 - gonna learn man paulie glut if um
34:00 - since your name is a string
34:03 - yeah if your name is a string kazi
34:10 - kazee
34:13 - equals
34:15 - hungary
34:24 - [Music]
34:26 - console.log food
34:29 - else
34:31 - console.log
34:33 - work
34:34 - but first
34:36 - i believe we have to
34:39 - let
34:43 - kazu
34:45 - kazi
34:53 - i think this goes also in the curly
34:55 - brackets if i'm not mistaken
34:58 - hold on so let's just walk through this
35:00 - we're going to remove all this because
35:02 - that you're just writing for no reason
35:04 - okay this was looking pretty good to me
35:06 - so if causey is hungry uh but here's the
35:09 - only thing about this okay you're not
35:12 - giving it a variable causey you're
35:13 - giving it a string quasi and you're
35:16 - saying that if string quasi is the same
35:19 - as string hungry will that ever be true
35:22 - yes let me ask you this will five ever
35:26 - equal eight no no no no no okay so you
35:30 - are giving it a string okay you're not
35:32 - do you understand the difference between
35:33 - string and a variable uh-huh yeah yeah
35:36 - strings are strings are like this
35:38 - they're like names and things like that
35:39 - so this is like hard-coded quasi this is
35:42 - not the variable causing online 58. okay
35:45 - this line will never
35:48 - see i got see i got you i got you oh i
35:50 - believe so let's let's um
35:52 - because kazi has been declared it's
35:54 - erroring out because we made a function
35:55 - called quasi so we'll just call it like
35:58 - if causey2 okay let's just do that so go
36:01 - ahead so i would say if i would take
36:04 - this out uh-huh
36:06 - and then i would put no u as he two
36:10 - equals hungary console.log okay i didn't
36:13 - see we i hadn't declared that up there
36:15 - exactly okay nice work
36:18 - damn sick so conditionals you did a good
36:21 - job with now what if on line 61 quasi 2
36:24 - was not hungry instead quasi 2 was you
36:27 - know focused
36:30 - perfect and it would
36:32 - consol log it would log work not return
36:35 - just because functions returns are only
36:37 - in functions gotcha and here we have
36:39 - written no function what you were trying
36:41 - to do earlier where you started putting
36:42 - random curly braces here and here i
36:46 - don't know if you remember yeah i
36:47 - remember yeah we're trying to wrap this
36:48 - in correlation right
36:50 - because this is where you're combining
36:52 - concepts with this because you've
36:54 - probably seen this written in a function
36:57 - right and if you were to wrap this up in
36:59 - a function then you would have to okay i
37:02 - got you now actually let's do that so
37:04 - let's take it from this to instead it
37:07 - takes in a thing and if that thing is
37:09 - hungry then it says food or let's say it
37:12 - takes in a person and if that person is
37:14 - hungry then it's uh says food otherwise
37:16 - it says work i want you to turn this
37:18 - into a function and basically i should
37:21 - be able to go person hungry or i should
37:24 - be able to call it like person you know
37:26 - focus whatever okay okay or maybe status
37:30 - okay maybe status is a better name for
37:32 - it so i want to be able to call your
37:34 - function like this
37:35 - got you so i want you to turn this into
37:38 - a function okay so i would say
37:40 - function
37:41 - status and then there it would say
37:44 - um can we call it a i'm assuming that
37:48 - goes like that
37:50 - and then we can put
37:52 - that down there and
37:54 - i think return
37:56 - you don't need to do return for this
37:58 - okay so yeah you could have changed line
38:01 - 68 and line 70 to be returned
38:03 - but console log in this case is fine
38:05 - okay it's fine
38:08 - no no no you don't have to
38:10 - are you calling this now is that what
38:12 - you're trying to do when it comes to
38:13 - this function i think you're done you
38:14 - don't need to write anything more inside
38:16 - of this function okay i was gonna put
38:18 - like return blah blah blah console.log
38:20 - blah blah blah and see like how we did
38:22 - it earlier okay so you want to call your
38:25 - function is that what you're saying
38:26 - that's what i was gonna do yeah yeah but
38:27 - you can't call your functions inside
38:29 - from inside of the function it has to be
38:30 - outside okay yeah so like you want to
38:32 - get outside of it so you can call it
38:34 - otherwise you'll run into a recursive
38:37 - loop and recursion is a whole different
38:39 - thing have you ever learned about
38:40 - recursion i've heard about it and i
38:42 - heard that it's difficult to stop those
38:44 - it's like mind-blowing dude recursion is
38:47 - the most fascinating and the coolest
38:49 - thing ever yeah so if you if you made
38:51 - this recursive you would essentially
38:52 - make it an infinite loop so for example
38:54 - if you in here set status something what
38:56 - will happen is your function will run
38:58 - it'll run this line this line this line
38:59 - and then i'll go down here and then
39:01 - it'll call the function status so i'll
39:03 - go up here then run all of this then
39:05 - i'll call status again okay and it'll
39:07 - just run forever i see and i heard
39:09 - that's bad for your browser bad for
39:11 - everything yeah it'll crash
39:12 - yeah now you can call your function yeah
39:14 - so i would say
39:16 - console.log um status and i believe
39:20 - right here would be
39:21 - okay
39:22 - so we give it hungry
39:24 - and let's see what it returned oh not
39:27 - status so here it would be a
39:30 - yes food okay perfect
39:33 - nice work and now instead of hungry what
39:35 - if i gave it focused
39:38 - if you gave it focused it would return
39:41 - work okay so let's try it exactly you
39:44 - can see the work right here and you
39:46 - could you could change these console
39:48 - logs or return statements as well okay
39:50 - and that what that would look like is
39:52 - you could do return okay i'm hungry or
39:54 - something yeah you could say return food
39:56 - or for this you could say returned what
39:59 - sleepy
40:00 - no i'm i'm
40:02 - just turning this cic i see right
40:04 - so
40:05 - these are the equivalent these are
40:07 - equivalent okay but return is slightly
40:10 - different than console logging and in
40:12 - functions generally you want things to
40:13 - return return console logging you
40:15 - generally want to do here great i mean
40:17 - we're making a lot of progress right we
40:20 - went from functions
40:22 - calling functions passing in arguments
40:25 - returning them how to call them
40:27 - arrays
40:28 - also
40:29 - we added conditional statements and then
40:32 - we learned we even did
40:34 - how to turn it into a function okay so
40:36 - you're doing a really good job one thing
40:39 - now i want to do
40:40 - is let's take this up a notch okay let's
40:43 - kick this up a notch i'm going to tell
40:44 - you it's going to be your job to write
40:46 - this down in pseudocode first okay and
40:48 - then you're going to try to turn it into
40:50 - a function okay i got you so i'm going
40:52 - to give you a string
40:54 - and
40:55 - you are going to
40:58 - find out if that string is a palindrome
41:00 - or not and based on that you're going to
41:02 - return it to true or false
41:04 - if the string is a palindrome or not yes
41:07 - okay a palindrome means for example a
41:10 - word like race car race car written
41:13 - forwards is the same as written
41:15 - backwards backwards so if i give you
41:17 - race car
41:18 - you will return
41:20 - race car
41:22 - wrong
41:22 - you will only return true or false okay
41:25 - got you got you got you i gave you race
41:27 - car you will return
41:28 - you can only return one of those oh it
41:30 - would be true yes you'll return true if
41:33 - i gave you baseball you will return
41:35 - false false
41:37 - got it got it that's what your function
41:38 - needs to be able to do okay
41:41 - so first i want you to write the pseudo
41:42 - code for what i just said and make sure
41:45 - that you understand the question clearly
41:46 - before you start writing any code so
41:49 - if i understand correctly if
41:52 - string
41:54 - is
41:54 - a
41:56 - how do you spell paddling
42:02 - yeah
42:03 - so
42:05 - it has it's palin with an end
42:08 - and then jerome d-r-o-m-e i believe oh
42:11 - palindrome yeah if string is a
42:14 - palindrome
42:16 - return
42:18 - true
42:19 - exactly
42:20 - and
42:21 - if
42:23 - not
42:24 - return
42:26 - false what's another way of saying if
42:28 - not
42:30 - else yes
42:33 - else
42:35 - return
42:37 - false
42:38 - cool so you said oh also you said create
42:40 - a function right yes okay
42:43 - well i guess i can just keep that in my
42:45 - mind
42:46 - um
42:47 - so i would say function
42:51 - pattern
42:53 - palindrome
42:55 - and then palindrome function um a
42:58 - i guess
43:00 - um
43:01 - and then i would say um
43:04 - so let's make your variables better okay
43:06 - so i'm gonna give you generally i'm
43:08 - gonna give you words
43:10 - okay so your argument should be what
43:13 - instead of a
43:14 - um can i say true or true comma false
43:18 - let me say this again
43:20 - the input
43:21 - right i'm gonna give you words words
43:24 - so you should call your input
43:27 - words
43:28 - word
43:29 - okay because i'm going to give you one
43:30 - word okay one word so make it as clear
43:33 - as possible in english so when
43:34 - somebody's reading your code they can
43:36 - understand it too so word is perfect
43:37 - it's great it's literally great
43:40 - okay because then it's easy it's
43:42 - descriptive when you're using your stuff
43:43 - so it's easy to read your code now okay
43:46 - it's like oh it's a function is called
43:47 - palindrome and it takes in a word oh let
43:49 - me give your palindrome a word and see
43:51 - what happens so
43:53 - so i guess how would i be able to write
43:56 - a function
43:58 - that
43:59 - knows
44:00 - that my word is a palindrome
44:04 - yeah that's a good question
44:07 - um that's gonna have to be on google no
44:10 - no no no no no no no so this is why we
44:12 - did a lot of other things we did so you
44:14 - could have all the building blocks
44:16 - and all the information all the
44:18 - information you need is already
44:20 - okay so before you start going through
44:22 - it let's think it through okay this is
44:24 - where a lot of software development like
44:26 - you become a software developer i want
44:28 - you to think this through okay
44:30 - so
44:31 - what does let's start breaking down what
44:33 - palindrome means right right
44:36 - if i have the word
44:37 - um
44:39 - qazi
44:42 - what does a pal what would it be if it
44:44 - was reversed
44:46 - it would spell out the same thing but
44:48 - just in reverse so causey reverses what
44:52 - is
44:53 - izak izak are they the same word no no
44:57 - so it's uh not a penalty
44:59 - okay right
45:01 - so
45:02 - what's the so let's go through
45:04 - it right what's the algorithm algorithm
45:06 - that we're saying out loud okay let's
45:08 - write it down okay so let's write it
45:10 - down step by step
45:12 - if word is
45:14 - causey
45:15 - then what should i do
45:17 - to check it what are we doing we need to
45:20 - check if it's
45:21 - a palindrome yeah but let's break it
45:23 - down even more so exactly you're right
45:25 - so
45:26 - if we're this quasi
45:29 - um i guess i would say if word is qazi
45:32 - yeah so let's take the word david right
45:34 - okay
45:36 - is david a palindrome no how do you know
45:38 - because it's not spelled the same way
45:40 - backwards
45:41 - so there's a step in there that you're
45:43 - not writing down here which is you're
45:45 - making it backwards
45:48 - okay so then okay so then we would do
45:50 - the reverse thing that we did exactly
45:53 - okay okay
45:54 - if kazi equals
45:56 - kazi in reverse yes
45:59 - write that down that's really important
46:01 - write that pseudo code down that's
46:02 - really important great so
46:04 - if word is quasi
46:07 - then
46:09 - um
46:10 - write down exactly how you said it okay
46:12 - so forget about what i wrote you did a
46:14 - great job of saying it so
46:16 - i done exactly what you said so i said
46:18 - if kazi
46:21 - is
46:22 - equal
46:23 - [Music]
46:25 - is equal to
46:28 - return
46:30 - true
46:31 - so kaz is always going to be equal to
46:33 - khasi right
46:35 - so are you so like for example if
46:37 - if i take david oh
46:39 - hold on if kazi i guess in this case
46:41 - would be equal to izak
46:44 - right right i
46:47 - z a q
46:48 - then return
46:50 - true exactly and then we don't use if we
46:54 - use else return
46:59 - false got it right exactly but what's
47:02 - another way of saying isa here so we can
47:05 - make it into a recipe because right now
47:07 - it's not a recipe it's like
47:09 - qazi is izak but what did we say if
47:11 - david you said this earlier you said
47:15 - so when i check david what am i checking
47:18 - it against
47:19 - you're checking it against
47:21 - my name in reverse right so you should
47:24 - write that down here instead of ezok
47:26 - another way of saying izak is like
47:29 - it's causey and reverse
47:31 - right so maybe write that down there if
47:34 - cos is equal to
47:37 - reverse of causey right or causey
47:39 - reverse or whatever you want to say
47:41 - reverse
47:43 - return true okay
47:46 - got it
47:47 - that's your algorithm
47:49 - okay so when we say data structures and
47:51 - algorithms and all of that this is a
47:53 - recipe okay this is your recipe that
47:55 - you're going to give to your function
47:57 - okay and if you can train your function
47:59 - to do this it will do this correctly
48:01 - every single time every single time okay
48:03 - so
48:04 - so now essentially turn that into code
48:07 - okay so then let's start from the top
48:10 - yeah i want to write a function which is
48:12 - right there it's already written okay
48:15 - but you can practice it again if you
48:16 - want that's fine it's okay so it's
48:18 - already here
48:19 - so then in that function
48:22 - i want to
48:25 - all right man we're just going to go
48:26 - developer mode
48:28 - where's some copy and paste action at
48:33 - uh
48:35 - so it would basically be something like
48:37 - this
48:38 - right
48:39 - so here's the thing
48:41 - because you so i'm gonna teach you
48:42 - something new right now
48:46 - the power of calling your functions
48:49 - so now we're gonna build on some we're
48:51 - gonna build on another thing which is
48:53 - you don't need to copy and paste that
48:55 - code you can actually call the function
48:56 - you created earlier
48:58 - with what i'm doing now yeah so let me
49:01 - like to give you an example right then i
49:02 - would i have to change
49:04 - that so i would i have to change that to
49:06 - be thing so that it matches the
49:09 - so for example if causing is equal to
49:16 - wow that's cool right okay yeah you see
49:19 - what i'm saying so you're calling your
49:21 - other function and now you don't even
49:23 - care how it works anymore you just let
49:25 - it do its thing
49:27 - split it reverse join whatever right
49:30 - split it then reverse it like you don't
49:31 - care about that you're just gonna you
49:34 - just call the function
49:36 - see what i'm saying i see what you're
49:38 - saying
49:39 - okay
49:40 - you know and
49:41 - yeah and you can keep generalizing this
49:43 - more and more because you still have it
49:45 - hard coded right it says if causey but
49:47 - another way of writing is if word
49:50 - is equal
49:51 - to
49:53 - reverse kazi reverser reverser
49:56 - what
49:57 - don't hardcode qazi forget about kazi
50:00 - we're changing kazi with word right so
50:03 - if the word that i give you is equal to
50:05 - reverser
50:07 - what um
50:09 - not quasi
50:10 - but
50:13 - it's right there word
50:15 - okay
50:16 - so if the word is the same as the
50:19 - reverse of the word
50:21 - return true
50:23 - true
50:24 - else return false
50:26 - does this make sense it makes sense i i
50:29 - understand the concept i'm um just
50:32 - thinking about how i would put it into
50:34 - code cool so we're gonna work on that in
50:36 - a second okay we're gonna work on in a
50:38 - second but when you do algorithms what i
50:40 - want you to start doing in your
50:42 - pseudocode is
50:43 - start off by writing hard code meaning
50:46 - like do you understand what i mean when
50:47 - i say hard code yeah right we're hard
50:49 - coding kazi everywhere
50:51 - but you're not gonna get cause you're
50:52 - gonna get something more general
50:54 - so we make a more general version of it
50:56 - which is word in this case and we know
50:58 - it corresponds with our word right there
51:00 - right so we're very close to turning
51:02 - this into actual code now okay so let's
51:06 - go ahead and do that how would we write
51:08 - in code this line 91 here how will we
51:11 - write in code the line 91 so i would say
51:15 - just go
51:16 - literally step by step for everything
51:18 - that you see there okay so i would go if
51:20 - and then i'll put parentheses so let's
51:23 - start with that okay
51:24 - [Music]
51:26 - if
51:27 - parentheses
51:29 - and then i would say
51:30 - i'm not sure if i can put your name here
51:33 - but you're not going to put any names
51:35 - here remember this is a function you're
51:37 - not hard coding in here okay okay
51:39 - so i would put this
51:40 - reverser
51:42 - wrong
51:43 - okay look
51:44 - read line 91
51:46 - reverser comes later oh so if word my
51:49 - bad
51:51 - word is equal to
51:56 - reverser
51:57 - word
51:58 - is that correct
52:00 - okay
52:01 - now what are you going to do if it is
52:03 - return true so let's do that
52:07 - return just remember for the if
52:09 - statements to put squigglies in the
52:11 - correct places right
52:18 - return
52:20 - true okay otherwise what are we gonna do
52:23 - on this line right here i'm gonna put
52:25 - else yeah
52:27 - and then we'll put other squiggly lines
52:29 - and then put
52:31 - return
52:32 - false okay so now
52:35 - in writing when you look at it does it
52:37 - look correct
52:38 - does it match the algorithm we wrote
52:40 - yeah it does it looks like what we just
52:42 - said yeah
52:44 - okay and look at this normally here you
52:47 - would need to write this long line of
52:49 - code to reverses right
52:51 - but you're using your own function you
52:53 - created within this function my mind is
52:55 - blown that's cool right
52:57 - yeah
52:59 - okay so now
53:01 - i want you to call this and let's see if
53:02 - it works okay so let's call palindrome
53:05 - on
53:06 - i want you to call palindrome on two
53:07 - different strings one is white house and
53:10 - two is
53:11 - race car okay
53:13 - what do you expect it to say if you
53:15 - wrote white house what do you expect
53:17 - your function to return false got it so
53:19 - let's try it let's see what it says so
53:21 - then i'll say console.log
53:25 - and then i would put in there
53:28 - pat
53:29 - lynn
53:30 - drong
53:31 - and then i guess i can put word right
53:34 - there
53:36 - no
53:37 - now you're gonna give it the actual word
53:39 - yeah
53:42 - white house
53:44 - and walk me through the algorithm before
53:46 - you continue walk me through the
53:47 - algorithm so when i go line 92 okay what
53:51 - happens where do i go once i hit line 92
53:54 - where does my code go next
53:56 - to line what to line um
53:59 - 88
54:00 - no line 84 984 so okay so kicks so once
54:04 - you console log this it goes to the top
54:06 - because you just called your function
54:08 - right and it checks to see if the word
54:10 - is equal give me hold one second does a
54:13 - console log like is the first thing that
54:16 - happened so within line 92 okay what's
54:19 - the first part that runs
54:21 - i think that it runs from this way to
54:23 - that way
54:24 - yeah so it's not console.log right it's
54:26 - checking to see if the it it's not
54:29 - checking anything it's calling this
54:30 - function call in the function that's all
54:31 - that's happening okay
54:33 - cool
54:34 - okay
54:35 - and then whatever that function
54:37 - simplifies to
54:38 - true or false right will sit inside of
54:40 - this console
54:41 - that makes sense you're with me so far
54:43 - so when i call this function where do i
54:45 - go
54:46 - you go to line 84. beautiful then walk
54:48 - me through what happens then line 85
54:51 - walk me through what happens then it
54:53 - checks to see if the word is equal and
54:56 - it's not a word anymore what is it if uh
54:58 - the string is equal what string white
55:01 - house so if white house is equal to
55:05 - her
55:06 - in reverse of what
55:08 - of white house of white house then it's
55:09 - going to return true
55:11 - else is going to return false and in
55:13 - this case it's going to return false
55:15 - because it's not a palindrome
55:18 - right so this here
55:20 - would turn to what this this line right
55:23 - here would resolve to what true or false
55:26 - it will resolve too fast this will
55:28 - results to false so once this resolves
55:30 - to false
55:32 - this will run does that make sense makes
55:35 - sense
55:36 - cool
55:36 - cool
55:37 - okay
55:38 - now
55:40 - i want you to do race car and what do
55:42 - you predict it will return it will
55:44 - return true okay let's try it
55:47 - console.log
55:49 - and then once you're done with that
55:50 - explain each line okay okay it returns
55:53 - true
55:56 - hey let's go let's go that's cool that
55:58 - was something new um
56:00 - okay so in this case um
56:03 - first that's crazy to work right crazy
56:06 - that worked it basically did
56:08 - well i guess let me try to explain it um
56:10 - so that i can make sure that i
56:12 - understand also
56:13 - so what happened is
56:16 - i called this function palindrome uh-huh
56:19 - it went to the top to line 84. yeah it
56:22 - checked to see if
56:25 - the word was equal to the word in
56:27 - reverse and and now when i'm asking you
56:30 - don't speak in general anymore
56:32 - okay so you cannot say word anymore i
56:35 - want you because i'm having to go
56:36 - through line by line at that point it's
56:38 - not word anymore it's something specific
56:41 - so what will we call it
56:43 - it's race car okay so i want you to say
56:45 - exactly what it is then it checks if in
56:48 - this case word which is equal to race
56:50 - car
56:50 - race car
56:52 - race car in reverse yes if so it returns
56:55 - true
56:56 - and just real quick right to be even
56:58 - more technical
57:00 - when it it calls the function reverse
57:02 - so it doesn't just go to line 86 where
57:05 - does it go when it calls this function
57:06 - reverser it goes to
57:09 - um the first function that's at the top
57:12 - exactly okay see what's happening here i
57:14 - for i forgot about that function until i
57:16 - was like let's copy and paste right okay
57:18 - so it goes to this function
57:20 - and then it goes
57:23 - take uh thing becomes what thing becomes
57:26 - uh race car race car it reverses race
57:29 - car right turns into the it turns it
57:31 - into the
57:33 - i'm i'm assuming that it turns it into
57:34 - the array then it reverses it then it
57:37 - joins it exactly okay so it returns a
57:40 - reverse of the word race car right right
57:43 - and then we come back to this line here
57:47 - and so is race car equal to race car
57:50 - true true so then this part here becomes
57:54 - true
57:54 - true
57:56 - so when that
57:58 - happens
58:00 - does it return the else part or does it
58:02 - return it doesn't have to go to the else
58:05 - no it doesn't right and then it does
58:07 - what
58:09 - it
58:09 - will show true in the console yeah
58:14 - amazing i feel like i actually learned
58:16 - more than watching a thousand youtube
58:19 - videos i'm being honest because i i see
58:22 - it up here it's here i know what i'm
58:23 - doing up here yeah but due to the fact
58:26 - of even turning my words into an
58:29 - algorithm to do that was quite difficult
58:32 - yes like
58:33 - you get stuck in tutorial hell and you
58:35 - can understand what these people are
58:37 - doing but when you go to do it yourself
58:39 - it's kind of like
58:40 - you know what i mean everything all the
58:42 - stuff that you you know you've seen you
58:44 - know you've practiced yeah kind of goes
58:47 - away yes when you're doing it yourself
58:50 - because it's almost like now you're in
58:52 - the deep end exactly you have to do it
58:55 - so yeah my brain was exercised today
58:57 - beautiful beautiful man that makes me
59:00 - that makes me really really happy to
59:02 - hear that's awesome i'm glad that you
59:04 - were able to get value from this and
59:06 - learn amazing any parting words you want
59:09 - to share or maybe like the biggest thing
59:11 - that the biggest value or takeaway for
59:13 - you from this other than just making
59:15 - sure that you have the basics down maybe
59:18 - get off youtube and sit down and do it
59:20 - that's the
59:22 - i mean kazi kazu's channel is great but
59:24 - actually putting this into practice
59:26 - yourself is is is great this is amazing
59:30 - yeah beautiful amazing thank you for
59:32 - coming out brother thank you man i like
59:34 - i said i learned so much more sitting
59:36 - down with you doing it then watching a
59:38 - thousand youtube videos so and you
59:40 - explained everything well and clear and
59:43 - even though i'm nervous here and i'm
59:44 - doing it with you i'm still trying to
59:46 - stay with you and make sure that i
59:48 - understand the concept yeah and i
59:50 - understand how to do it so yeah man this
59:52 - is doesn't have value on it this was
59:54 - amazing okay amazing thank you bro uh
59:57 - appreciate you for coming in um and
59:59 - what's crazy is that he was you were
60:01 - also at the javascript tour that we did
60:02 - in person which was really cool we were
60:05 - glad to have you there so there you guys
60:07 - go thank you guys so much for watching
60:08 - we appreciate you if you enjoyed it or
60:11 - you got value out of it please share an
60:13 - insight or a comment whatever also it
60:16 - would really help get this video out
60:18 - everywhere if you smash the like button
60:21 - yes
60:22 - it really helped out um
60:25 - so yeah go ahead do that that'd be
60:26 - amazing subscribe to the channel you'll
60:29 - learn coding and become a developer and
60:31 - with that said we love your beautiful
60:32 - face this is kazi and david
60:35 - and we'll see you
60:37 - in the next video
60:40 - [Music]
60:52 - [Music]
60:55 - you

Cleaned transcript:

let's go man i'm over here my hands are like super cold right now just because of how nervous i am yo what's up guys how's it going this is qazi from cleverprogrammer.com today i have with me david what's up yo let's go david let's go today we're going to be doing something really interesting which is we're going to take david who has some coding skills david how would you describe yourself in your skill level you're advanced beginner right so he's one step below intermediate mostly beginner and we're gonna take david and work with him and give him some coding skills we'll see how it goes alright and hopefully you'll enjoy this with us let's rock and roll we'll just uh go through this together okay let's go through some javascript exercises and i want to see how you do in them okay so let's start with in javascript let's start with uh if you had to write something to figure out the max of an array would you be able to do that the max and if you don't know any of this is totally okay okay i'll work with you here i guess just start off by making an array in javascript okay and see if you could show it here where it says gs start if you just have like one of the items show up here on the header okay so i'll give you a hint on line six we have uh this that's showing up here so just start off by making a array in javascript and let's just put groceries in there um did i just take this over yes take it over you got it you said groceries yes oranges beautiful bananas uhhuh cool so we got our array right okay it's really good now i want you to um okay let's just do like i want you to print out bananas or console it out like so i want to see that how would you do that uhhuh and you said bananas groceries yeah and then get me get me bananas out of that two okay and let's take a look at the log and there we go bananas beautiful okay that so that looks really really good okay good job with that amazing okay awesome now make bananas pop up over here groceries dot get element by id and then i will say so let me give you a hint okay okay what exactly what you're trying to do somebody's already done that for you on line five and length six oh okay okay and then i would just have so somebody literally got that element by its id and then they changed its thing so i would just do the same thing in reverse so what you want to do is you already have access to this app div you just have to do app div dot inner html and make its inner html whatever you want got you okay there you go app and for everybody watching guys this is why it's really important for you before you go to react or anything else get your javascript right so let's keep going okay so try bananas so great it's showing up however what i want you to do so you know whether you wrote it like this or you wrote it like this it'll still say bananas here but what i actually want you to do is you hardcoded this but i want you to pull it out of this grocery array okay uh no don't know how to do that you did it on line 10. oh okay it's the same thing yes sir exactly wow nice work okay why this is important to know is because when you go into interviews this is exactly what happens i see like you guys saw this and everybody who's watching this saw this too it's like you knew how to do this you clearly just did it right right right but then because i asked you you probably just got stumped or your brain sometimes my brain literally started thinking wow i know how to do it but why am i going so slow why am i feel like i can't do it why do i yeah yeah yeah okay exactly exactly so that's why this is important for us to drill right okay cool so you're doing you're doing great so far this is this is looking good okay we have our banana showing up we're showing it from the array now what i want you to do is i want you to go ahead and loop through the groceries array and just like print everything out in the console i say print a lot because i'm from the python world and there you don't say console.log you print right okay so i want you to just console um put everything on the console like just loop through it and line by line show me all three of these items you're doing great by the way i need a hand let's take a look at this right so let name equals okay cool i know that it has to have parentheses so let's start here okay so for loops start with um have you ever written a loop in javascript or not right practicing that now okay cool so let for dot length i believe semicolon and then would be i plus plus cool and then it will have these curly brackets right there yep console.log and i think that's it so did you do what i asked you to do loop through okay you asked me to loop through all the items in the array until what and just make sure that each of them prints out line by line prints out line by line but what's happening here instead so it's just going to loop through what is it currently doing it's just gonna give all the arrays over and over and over yep it's just giving that array three times right when you do gross groceries it gives you the array again and again right right but uh if you were to do it by yours okay so show me how you would manually do it so go through forget about this loop and i want you to write out lines where it literally prints out apples apples then and then another console log that prints out oranges and then bananas okay so just do that manually without a loop without a loop yeah just cost groceries sorry zero and then i would you're going to know how to do that because we don't we don't need to type all over exactly copy and paste and let's go command c are you a windows guy no i'm a mad guy okay so let's make sure we do yeah perfect command c command v okay perfect good job you got it right now you're trying to automate this through this loop so what's the pattern that you see here zero one and two right so what's the thing that is there in every do you see that this bracket thing is there and every single thing you right so grocery sting is there every single line you wrote right right so that's why in the loop you're going to say groceries what else is there in every single line the location of the array yep so the the bracket is there and the location of the array is there right so pretty much we're gonna make the we can pretty much make the bracket here safely okay and then what's this thing that gives you zero one and two what what's that the location that's the location right so what do you have access to a variable or something that can give you zero on the first loop one on the second loop and two on the third loop because if you so if you hard coded zero here what would happen it would print out the first item in the array which is apples how many times maybe one or two times why would it be two times because it has i plus plus it will yes but it's running as many times as the length of the array so what's the length of the array the length of the array is two three three okay okay so it will print it out three times three times okay so let's type in a zero here and i got three apples gotcha okay what if i put a one here it would do the same thing before oranges and if i put two here bananas bananas but we don't want to hardcode a zero or one or a two out of all so i'll even give you this it's just on this one line there's this the variable that you created that on this first iteration is zero on its second it's one and a third is two do you know what that variable is in here okay so let's go through process of elimination okay okay is groceries itself a zero one or a two hold on guys i couldn't tell you guys what i know i'm like super nervous right now my brain is like frozen i'm not even thinking right now i know um how's he doing by the way guys super terrible he's doing great groceries just by itself is what what is groceries groceries is the array yes sir right okay so groceries is an array so groceries is not the number zero or one or two right right so it can't be groceries okay and therefore it can't be length right okay so what's another variable okay then it'll have to be i yes so try that and what did you get apples oranges bananas wow man wow so like all right i just got to take a pause man first of all guys disclaimer i wasn't ready no i'm kidding i'm kidding i'm learning a lot let's go you know these this is why these basics are so important to practice right because you can conceptually understand them right but if you don't do them on a regular basis it's so easy to forget what that is and what happens is when you don't have the building like if i want to teach you a more complex concept right if you haven't drilled this enough time it's going to be very difficult for you to understand a more some a complex concept understood that makes sense okay so like if i'm trying to teach you how functional programming works and you can turn this whole thing into one line of code using something called map do you know what i when we say this is the zeroth place first place second place do you know the term for that it starts with an i it's called index index okay zeroth index index first index right right right so really i here is your index i got you okay so you created this variable and you said let i equal zero so in the first loop i is zero which yeah in this case is going to be apples but i itself is just a number right it's literally zero well in the second loop what is i so first loop i is zero in the next loop i is i is groceries i is the number one the number one okay in the third loop i is the number two the number two okay so that's really what's happening here i see so the first time the loop goes it goes zero it prints out apples right then i becomes one one prints out oranges yep and then it becomes bananas after that okay my thought process right now is like so junked up man it's like i know this stuff but right now i'm like oh where's everything it's just gone right now yeah they're not the screen and everything's gone it's yeah i know i know you're like what is like it's almost feels like you never even coded before it feels like i've never even done it and i've seen it plenty of times but right now i'm just like yeah what what did you ask me to do that's what happens during interviews oh yeah that's the problem that happens with the interviews all the time people freeze it's almost like they kind of forget everything so the more times you can put yourself through in a situation like this the better yeah like my mind literally you're like creating an array i was like what's an array yeah exactly are you okay so let's create a function okay that adds two numbers and just returns them that's it so i should be able to give it like number one and number two for that function and then it just sums them up and returns let's say one plus two and then i guess i would say console dot log add okay so let's start off with the basics okay so here's the thing okay you have skills in a specific domain okay so when we spoke earlier you do shopify and you do stuff on ecommerce right right and so there you have more skills but the type of thing you're doing is you're taking existing code right and then you're making changes to it and you're making things work right it's very different than coding from scratch exactly okay so we're gonna have to develop these skills from the start okay so for example the first thing that i want it to come to your mind whenever you hear the word function you should start off by writing oh wait hold on function oh man see this is what i'm talking about my mind is just like okay right off on a break yeah bro function there we go [Laughter] man hold on so when we're calling this right you had the right hunch to add a parenthesis here because functions have they take in arguments right okay so your add function needs to have how many arguments that it takes i think it can take two in this case we're gonna give it two right a function can take as many arguments as you wanna give it you could literally give it a thousand arguments but here in this case we're just to give it two right okay you don't want to here you don't want to hard code anything okay uh because okay let's just say you did say two plus two and let's just say somehow it worked right your function whenever i call it would just return four what but what if i wanted you to add 20 and 50 together it would still just give me back four or something okay so we cannot hard code in here and we need to give it two arguments and those two arguments should be variables all right so here you could put a comma b and then you can do later a plus b yes return see now it comes back yes now it's coming back right um however i like to make my things verbose so they're easier to understand okay so you could do this way as well but whichever way it's fine so let's do add a comma b and then what are you gonna do um so let me just say it like this okay hint turn that line into code your code should not be more than one like on line 24 that's it you just get one line to write this okay um meaning that it doesn't it's not gonna be complicated it's not gonna have multiple lines right you don't need to set eight like look if you set a equal to one then if i give you your function okay like if i just call add one comma or let's say five comma two your function will not return seven right what your function will do it'll take five and set it to one set it to one here okay so that's what that will do and we don't want so i guess in this case i need to override i can put console.log a um plus b that's it yeah okay but instead of console.log i want you to return a plus b okay so let's do that okay so now let's go down and now i want you to console log this out and let's add up you know seven and ten and let's see what it gives us back okay so a few things here right your it's returning 17 so that's cool but are you calling your function here no you created no you're not calling your function here i need to cancel that log so you're giving it arguments okay so this is something you need to understand here you can't be adding both of the numbers oh okay your function takes two arguments arguments okay so you're doing what your function is supposed to do but let your function do that so you don't need to do this but you can give it to your function needs two inputs so let's give it two inputs so what would be the first input here hey okay it would be in this case so yeah here it's the variable a that's correct but you need to give it the hardcoded one here which is going to be the actual number which is seven okay so let's go seven seven comma comma ten yes okay and now it gives you back 17. okay so for you my diagnosis is this you need to start from scratch scratch yes it's going to hurt your ego no really because i i don't mind starting i don't mind um admitting when i don't know so we're good start learn the basics guys yes good so what i would uh prescribe to you is start from complete scratch you have so here's the thing right like you understand how arrays work you get the concept of indexing you conceptually understand how looping works there's a lot of conceptual things that you understand to me what's very clear is you're lacking a lot of practice you're not lacking necessarily like for example when i show you this you're like oh yeah i get it right but there's a difference between you getting it you being able to do it one is you're nervous i understand that but beyond that what's important is that you conceptually get this but you have to do in like a really high number of practices practice and that's where i would recommend to not look at online coding projects or building huge projects that's just to get your guys's attention that will make you a better coder that's just the truth like we make those fancy projects because we know everybody's gonna be like wow that's mindblowing wait is this live it's not live oh okay all right all right cool because that that's kind of what has to be like shaken up i'm like froze i'm thinking a thousand people are watching me what do i do you're not live okay okay let's go i'm over here holding my breath okay okay like so let's practice okay let's go and do another exercise okay and let's literally do this exact one okay so if i give you so make a function that doesn't even reverse anything that um i'll call it like let's just call it a spitter okay so make a function called spitter because it just spits out what you give it and um just return the string that i gave you okay so you could take in a let's just say it takes in a string as an input okay and um yeah and your function should just return that so i want you to go ahead and write that function right and we'll walk through that too how to break down any problem that i give you to in a second okay so now what i want you to do is to prove that it works i want you to call your function okay and i want you to console.log its result and i want you to give it the phrase um let's just say we give it david let's just say give it the word or name david oh you said console log it and give it the argument david give it the argument david yes let's let's go over even more basic okay okay because what i'm realizing is i want you to learn how to call a function first because i right now and i said call a function i want you to know what that essentially means okay okay so if i created a function and i called it quasi okay and it has no it's not taking in anything okay and uh it just prints out causey okay right in order for me to call this function how would i call this function just put um kazi at the bottom there okay when i put quasi at the bottom here let's see what happens i get nothing in the console log so what should i do so if it's not showing in the console what's happening is i'm not actually calling that function a function is not a variable okay if quasi was a variable like if i if i had something like let causey equals causey and i saved this all right let's go identification has already been declared so i'm i'm declaring it here okay let's just go quasi with two eyes i could call the quasi with two eyes and i would just console log its result in order to show it but that would say causey but if i call that function that i wrote this one here okay that doesn't call it right so in order to call the function you have to put this open close parenthesis so whenever you're calling a function always remember to put these parentheses you cannot call a function without them you have to put the parentheses now if your function is dependent on a thing inside of it then you have to give it that argument okay so for example like if i could give it any name and it gives me back that name right right so if i like let's say had this go you know take any name well what would be the argument i give it it takes in a name right and then what does it do it returns the name right and then when i'm calling it i just go give it a name david it goes here the function gets called it changes this to david it goes to line 38 runs this line and you get kazi then it goes to line 39 and it returns david right okay when i say that this function here takes in an argument this is what that means the function takes in something called name and i'm just giving it that name here right okay so first of all the few things that you were doing wrong with your spitter is that you were uh i think you call you did console log it's that was good okay then you did say spitter but you're not even calling your function here right okay so you have to call the function here and give it an argument okay so go ahead let's see how you would do that i have my function i have the splitter i have um this which is the equivalent of that right there yeah so then i could do you don't have to change your function right you just have to just on line 36 how do you call spitter there you go and did it return it right here yeah did it return it yeah it did because it's above the function that you wrote exactly so it did return it so it's good but the important thing for you to see here was that you functions you call them so you put these parentheses and then if they have an argument you must give it those arguments right if you call it without this it's gonna not work yeah it's gonna return undefined so you have to give it the argument does it matter what you call this variable here no no as long as you also call it the same thing here right so it's like spitter takes in a thing and returns a thing that's all nothing could be anything exactly okay what if i was like hey spitter thick takes in a thing and then just like adds buy to it instead of spitter takes anything and adds buy to it yup so it's like i would just do a return buy so now it's like causing buy right and then right right those things are there to make it easier for you to kind of speak to yourself in coding you know i can give you the technical phrasing as well and sometimes what you can do is you can turn it into something that's simple for you to understand it takes anything in technical terms it means your function has an argument right okay and it takes in one argument then returns the thing it takes that argument and returns that argument right right cool so now we wrote a function that literally just returns whatever you give it it's not super helpful but it can do some it it does something why this was helpful right now just for you is because it taught you or it at least reminded you of how to qualify see i feel like i don't know if other people can relate but i feel like up here yeah i understand everything that's going on yes because i've studied it i know what it is but then when i sit down to do it i can get it you know fifty percent of the time yeah fifty percent of the time they yeah if that makes sense 100 it does you can keep understanding and getting it right and that's the thing like i watch i watch a lot of chess okay so i watch magnus carlsen play chess all the time and he's the number one best player in the world and when i watch him play he plays so incredibly every move is on point it's perfection it's extremely well calculated and he makes it seem easy like it's water and i'm like wow this is awesome then i go to play a chess game and i'm like i'm going to play just as well as magnus carlsen and then all of a sudden i'm hanging pieces weird things are happening i'm hanging um a checkmate and i'm losing on the spot i'm like what the hell like i thought i would play exactly like carlson right and so the only difference between him and i is that he probably has like 10 or 20 years worth of more training just literally repetition skill building and so if even if you join pwj if you're watching the videos it's not the same as you doing it right and i want you to keep practicing doing it and never feel like you're better than the basics oh never that's why that's part of the thing that i told you earlier i haven't i i'm an empty cup i never feel like i know anything yeah no yeah that's good so you want to just keep practicing because people who put themselves above the basics this struggle forever so like keep practicing the basics again and again and again and again and again and that will make you really really dangerous and it's kind of crazy because man it's like i've seen this a thousand times i've seen yes a thousand times why can't i write a simple function have you done it a thousand times no that's the difference here's another thing i want you to do so let's make a new function and we'll call it reverser okay okay and what this function does is it takes in a thing and then it reverses it and then returns it okay okay so go ahead and write that function for me so i've never reversed anything javascript okay so very close the only difference with this is it reverses that thing and then returns it so but let's see if you can reverse a string okay so i'm not going to give you an array i'm going to give you a string so if i give you david okay could you reverse that and give me divad so you can look it up you can keep looking it up because you right now looked up how to reverse an array but i don't want you to reverse an array so what are you going to look for instead first a string so some of this stuff right might be trickier than other things but here they're giving you the solution it has 819 votes and it's simple enough right okay for example their code is saying what it's a function right it's called what reverse it takes in how many arguments one one so it's just like our so far we're just calling our argument thing they're calling it s yeah and then return and then we're just having it return this other thing so where they're saying s dot split ours would be s dot or is thing dot reverse exactly so you can pretty much copy paste that line oh no i want to type it out so thing yeah but it's not thing dot reverse dot join let's okay let's actually forget the split and join let's just write dot reverse can we write just dot reverse dot i don't think that will work but let's try it so let's try it let's see and i'll explain why if it doesn't work reverse and then it has the parentheses and i guess that's where i would put in my name not don't hardcode it because it'll always return okay so it'll be thing.reverse that's it return thing.reverse you're done oh okay return thing. okay yeah so because of how the code runs your return line won't run first it'll reverse the thing first and then return it okay cool so now call that and let's see if it does what we want it to do cool so it says reverse is not a function so here's why okay so let's go back here reverse is not a function that's made for strings this here is a string type okay reverse function is made for an array type so i'll give you an example okay if you're if you had an array like this okay and if i call dot reverse on this and i console log the result of that it reverses that thing you see what i'm saying i see what you're saying so it works on arrays it does not work on strings okay so the first thing we want to do is we want to take this string and turn it into an array but exactly like this one so a cool hack of doing that is i can say i can take david okay and go dot split and go just split it by like this okay and watch what happens okay i'll console log the result of this okay it literally took david and turned into an array and turn it into array right um this now i can actually reverse it so i can call dot reverse on this and now it's giving me the reverse of that okay and then the hack is to take it from that array and turn it back into a string again oh man you guys are crazy okay um so would that be that would be the dot join yes there we go so to write that here not join but that goes after that yeah that's right exactly and then i think that has to take parentheses with like that right yeah so is it giving you the right thing yes sir okay so now go to your function reverser and fix it fix line 49. so it will work for any name okay gotcha so in this case copy and paste thing let's let's make sure that we understand it though okay thing in this case corresponds to david david you understand that right so thing and dot what we're gonna take we're gonna take the string or the name and then what are we going to do to it let's go in order we're going to split it why are we going to split it because we need to turn it into an array beautiful so write split okay and we're going to split it by no spaces cool so that's fine right that's fine okay and then now we got that array now what are we going to do we're going to reverse it yes flip that thing and reverse it then we're going to dodge okay now call that function reverser and give it quasi and let's see if it returns like isaac boom that's sick right that's sick let's go and so now whatever you give it it will it will work okay that's the explanation behind that like one weird obfuscated line of code gotcha okay that's why data types are so important because if you know how to arrays work and strings work then you can mix and match even though you're like man it should just work it should be thing that reverse and works no so then you have to know how arrays work right so what data tabs would be booleans uh strings data types would be boolean strings arrays numbers exactly um i think that's it yeah i mean there's a bunch more like objects for example yeah objects okay and so it's really important to get a grasp on them and see what methods you can use right right be being familiar with them cool let's go and take it to another level but first we want to i want to make sure that you understand how if else conditional statements work right okay let's go so let's write let quasi equals um you know hungary so here's a here's the if else that i want if qazi is hungry print out hungry or food else print out work okay another important thing okay and and interviewers will give you bonus points for this and also make you really jacked at coding okay whenever you right now i'm doing you a favor by turning my words into pseudocode you understand what pseudocode means what i want you to do is in the future i want you to get in the habit of you writing the pseudo code i'm going to say to you and it's going to be your job to in very clear terms get it down that helps with the problem solving right yes because literally you just have to turn it from english to french aka english to code got you hey this is gonna be your sixth language you're gonna learn man paulie glut if um since your name is a string yeah if your name is a string kazi kazee equals hungary console.log food else console.log work but first i believe we have to let kazu kazi i think this goes also in the curly brackets if i'm not mistaken hold on so let's just walk through this we're going to remove all this because that you're just writing for no reason okay this was looking pretty good to me so if causey is hungry uh but here's the only thing about this okay you're not giving it a variable causey you're giving it a string quasi and you're saying that if string quasi is the same as string hungry will that ever be true yes let me ask you this will five ever equal eight no no no no no okay so you are giving it a string okay you're not do you understand the difference between string and a variable uhhuh yeah yeah strings are strings are like this they're like names and things like that so this is like hardcoded quasi this is not the variable causing online 58. okay this line will never see i got see i got you i got you oh i believe so let's let's um because kazi has been declared it's erroring out because we made a function called quasi so we'll just call it like if causey2 okay let's just do that so go ahead so i would say if i would take this out uhhuh and then i would put no u as he two equals hungary console.log okay i didn't see we i hadn't declared that up there exactly okay nice work damn sick so conditionals you did a good job with now what if on line 61 quasi 2 was not hungry instead quasi 2 was you know focused perfect and it would consol log it would log work not return just because functions returns are only in functions gotcha and here we have written no function what you were trying to do earlier where you started putting random curly braces here and here i don't know if you remember yeah i remember yeah we're trying to wrap this in correlation right because this is where you're combining concepts with this because you've probably seen this written in a function right and if you were to wrap this up in a function then you would have to okay i got you now actually let's do that so let's take it from this to instead it takes in a thing and if that thing is hungry then it says food or let's say it takes in a person and if that person is hungry then it's uh says food otherwise it says work i want you to turn this into a function and basically i should be able to go person hungry or i should be able to call it like person you know focus whatever okay okay or maybe status okay maybe status is a better name for it so i want to be able to call your function like this got you so i want you to turn this into a function okay so i would say function status and then there it would say um can we call it a i'm assuming that goes like that and then we can put that down there and i think return you don't need to do return for this okay so yeah you could have changed line 68 and line 70 to be returned but console log in this case is fine okay it's fine no no no you don't have to are you calling this now is that what you're trying to do when it comes to this function i think you're done you don't need to write anything more inside of this function okay i was gonna put like return blah blah blah console.log blah blah blah and see like how we did it earlier okay so you want to call your function is that what you're saying that's what i was gonna do yeah yeah but you can't call your functions inside from inside of the function it has to be outside okay yeah so like you want to get outside of it so you can call it otherwise you'll run into a recursive loop and recursion is a whole different thing have you ever learned about recursion i've heard about it and i heard that it's difficult to stop those it's like mindblowing dude recursion is the most fascinating and the coolest thing ever yeah so if you if you made this recursive you would essentially make it an infinite loop so for example if you in here set status something what will happen is your function will run it'll run this line this line this line and then i'll go down here and then it'll call the function status so i'll go up here then run all of this then i'll call status again okay and it'll just run forever i see and i heard that's bad for your browser bad for everything yeah it'll crash yeah now you can call your function yeah so i would say console.log um status and i believe right here would be okay so we give it hungry and let's see what it returned oh not status so here it would be a yes food okay perfect nice work and now instead of hungry what if i gave it focused if you gave it focused it would return work okay so let's try it exactly you can see the work right here and you could you could change these console logs or return statements as well okay and that what that would look like is you could do return okay i'm hungry or something yeah you could say return food or for this you could say returned what sleepy no i'm i'm just turning this cic i see right so these are the equivalent these are equivalent okay but return is slightly different than console logging and in functions generally you want things to return return console logging you generally want to do here great i mean we're making a lot of progress right we went from functions calling functions passing in arguments returning them how to call them arrays also we added conditional statements and then we learned we even did how to turn it into a function okay so you're doing a really good job one thing now i want to do is let's take this up a notch okay let's kick this up a notch i'm going to tell you it's going to be your job to write this down in pseudocode first okay and then you're going to try to turn it into a function okay i got you so i'm going to give you a string and you are going to find out if that string is a palindrome or not and based on that you're going to return it to true or false if the string is a palindrome or not yes okay a palindrome means for example a word like race car race car written forwards is the same as written backwards backwards so if i give you race car you will return race car wrong you will only return true or false okay got you got you got you i gave you race car you will return you can only return one of those oh it would be true yes you'll return true if i gave you baseball you will return false false got it got it that's what your function needs to be able to do okay so first i want you to write the pseudo code for what i just said and make sure that you understand the question clearly before you start writing any code so if i understand correctly if string is a how do you spell paddling yeah so it has it's palin with an end and then jerome drome i believe oh palindrome yeah if string is a palindrome return true exactly and if not return false what's another way of saying if not else yes else return false cool so you said oh also you said create a function right yes okay well i guess i can just keep that in my mind um so i would say function pattern palindrome and then palindrome function um a i guess um and then i would say um so let's make your variables better okay so i'm gonna give you generally i'm gonna give you words okay so your argument should be what instead of a um can i say true or true comma false let me say this again the input right i'm gonna give you words words so you should call your input words word okay because i'm going to give you one word okay one word so make it as clear as possible in english so when somebody's reading your code they can understand it too so word is perfect it's great it's literally great okay because then it's easy it's descriptive when you're using your stuff so it's easy to read your code now okay it's like oh it's a function is called palindrome and it takes in a word oh let me give your palindrome a word and see what happens so so i guess how would i be able to write a function that knows that my word is a palindrome yeah that's a good question um that's gonna have to be on google no no no no no no no no so this is why we did a lot of other things we did so you could have all the building blocks and all the information all the information you need is already okay so before you start going through it let's think it through okay this is where a lot of software development like you become a software developer i want you to think this through okay so what does let's start breaking down what palindrome means right right if i have the word um qazi what does a pal what would it be if it was reversed it would spell out the same thing but just in reverse so causey reverses what is izak izak are they the same word no no so it's uh not a penalty okay right so what's the so let's go through it right what's the algorithm algorithm that we're saying out loud okay let's write it down okay so let's write it down step by step if word is causey then what should i do to check it what are we doing we need to check if it's a palindrome yeah but let's break it down even more so exactly you're right so if we're this quasi um i guess i would say if word is qazi yeah so let's take the word david right okay is david a palindrome no how do you know because it's not spelled the same way backwards so there's a step in there that you're not writing down here which is you're making it backwards okay so then okay so then we would do the reverse thing that we did exactly okay okay if kazi equals kazi in reverse yes write that down that's really important write that pseudo code down that's really important great so if word is quasi then um write down exactly how you said it okay so forget about what i wrote you did a great job of saying it so i done exactly what you said so i said if kazi is equal is equal to return true so kaz is always going to be equal to khasi right so are you so like for example if if i take david oh hold on if kazi i guess in this case would be equal to izak right right i z a q then return true exactly and then we don't use if we use else return false got it right exactly but what's another way of saying isa here so we can make it into a recipe because right now it's not a recipe it's like qazi is izak but what did we say if david you said this earlier you said so when i check david what am i checking it against you're checking it against my name in reverse right so you should write that down here instead of ezok another way of saying izak is like it's causey and reverse right so maybe write that down there if cos is equal to reverse of causey right or causey reverse or whatever you want to say reverse return true okay got it that's your algorithm okay so when we say data structures and algorithms and all of that this is a recipe okay this is your recipe that you're going to give to your function okay and if you can train your function to do this it will do this correctly every single time every single time okay so so now essentially turn that into code okay so then let's start from the top yeah i want to write a function which is right there it's already written okay but you can practice it again if you want that's fine it's okay so it's already here so then in that function i want to all right man we're just going to go developer mode where's some copy and paste action at uh so it would basically be something like this right so here's the thing because you so i'm gonna teach you something new right now the power of calling your functions so now we're gonna build on some we're gonna build on another thing which is you don't need to copy and paste that code you can actually call the function you created earlier with what i'm doing now yeah so let me like to give you an example right then i would i have to change that so i would i have to change that to be thing so that it matches the so for example if causing is equal to wow that's cool right okay yeah you see what i'm saying so you're calling your other function and now you don't even care how it works anymore you just let it do its thing split it reverse join whatever right split it then reverse it like you don't care about that you're just gonna you just call the function see what i'm saying i see what you're saying okay you know and yeah and you can keep generalizing this more and more because you still have it hard coded right it says if causey but another way of writing is if word is equal to reverse kazi reverser reverser what don't hardcode qazi forget about kazi we're changing kazi with word right so if the word that i give you is equal to reverser what um not quasi but it's right there word okay so if the word is the same as the reverse of the word return true true else return false does this make sense it makes sense i i understand the concept i'm um just thinking about how i would put it into code cool so we're gonna work on that in a second okay we're gonna work on in a second but when you do algorithms what i want you to start doing in your pseudocode is start off by writing hard code meaning like do you understand what i mean when i say hard code yeah right we're hard coding kazi everywhere but you're not gonna get cause you're gonna get something more general so we make a more general version of it which is word in this case and we know it corresponds with our word right there right so we're very close to turning this into actual code now okay so let's go ahead and do that how would we write in code this line 91 here how will we write in code the line 91 so i would say just go literally step by step for everything that you see there okay so i would go if and then i'll put parentheses so let's start with that okay if parentheses and then i would say i'm not sure if i can put your name here but you're not going to put any names here remember this is a function you're not hard coding in here okay okay so i would put this reverser wrong okay look read line 91 reverser comes later oh so if word my bad word is equal to reverser word is that correct okay now what are you going to do if it is return true so let's do that return just remember for the if statements to put squigglies in the correct places right return true okay otherwise what are we gonna do on this line right here i'm gonna put else yeah and then we'll put other squiggly lines and then put return false okay so now in writing when you look at it does it look correct does it match the algorithm we wrote yeah it does it looks like what we just said yeah okay and look at this normally here you would need to write this long line of code to reverses right but you're using your own function you created within this function my mind is blown that's cool right yeah okay so now i want you to call this and let's see if it works okay so let's call palindrome on i want you to call palindrome on two different strings one is white house and two is race car okay what do you expect it to say if you wrote white house what do you expect your function to return false got it so let's try it let's see what it says so then i'll say console.log and then i would put in there pat lynn drong and then i guess i can put word right there no now you're gonna give it the actual word yeah white house and walk me through the algorithm before you continue walk me through the algorithm so when i go line 92 okay what happens where do i go once i hit line 92 where does my code go next to line what to line um 88 no line 84 984 so okay so kicks so once you console log this it goes to the top because you just called your function right and it checks to see if the word is equal give me hold one second does a console log like is the first thing that happened so within line 92 okay what's the first part that runs i think that it runs from this way to that way yeah so it's not console.log right it's checking to see if the it it's not checking anything it's calling this function call in the function that's all that's happening okay cool okay and then whatever that function simplifies to true or false right will sit inside of this console that makes sense you're with me so far so when i call this function where do i go you go to line 84. beautiful then walk me through what happens then line 85 walk me through what happens then it checks to see if the word is equal and it's not a word anymore what is it if uh the string is equal what string white house so if white house is equal to her in reverse of what of white house of white house then it's going to return true else is going to return false and in this case it's going to return false because it's not a palindrome right so this here would turn to what this this line right here would resolve to what true or false it will resolve too fast this will results to false so once this resolves to false this will run does that make sense makes sense cool cool okay now i want you to do race car and what do you predict it will return it will return true okay let's try it console.log and then once you're done with that explain each line okay okay it returns true hey let's go let's go that's cool that was something new um okay so in this case um first that's crazy to work right crazy that worked it basically did well i guess let me try to explain it um so that i can make sure that i understand also so what happened is i called this function palindrome uhhuh it went to the top to line 84. yeah it checked to see if the word was equal to the word in reverse and and now when i'm asking you don't speak in general anymore okay so you cannot say word anymore i want you because i'm having to go through line by line at that point it's not word anymore it's something specific so what will we call it it's race car okay so i want you to say exactly what it is then it checks if in this case word which is equal to race car race car race car in reverse yes if so it returns true and just real quick right to be even more technical when it it calls the function reverse so it doesn't just go to line 86 where does it go when it calls this function reverser it goes to um the first function that's at the top exactly okay see what's happening here i for i forgot about that function until i was like let's copy and paste right okay so it goes to this function and then it goes take uh thing becomes what thing becomes uh race car race car it reverses race car right turns into the it turns it into the i'm i'm assuming that it turns it into the array then it reverses it then it joins it exactly okay so it returns a reverse of the word race car right right and then we come back to this line here and so is race car equal to race car true true so then this part here becomes true true so when that happens does it return the else part or does it return it doesn't have to go to the else no it doesn't right and then it does what it will show true in the console yeah amazing i feel like i actually learned more than watching a thousand youtube videos i'm being honest because i i see it up here it's here i know what i'm doing up here yeah but due to the fact of even turning my words into an algorithm to do that was quite difficult yes like you get stuck in tutorial hell and you can understand what these people are doing but when you go to do it yourself it's kind of like you know what i mean everything all the stuff that you you know you've seen you know you've practiced yeah kind of goes away yes when you're doing it yourself because it's almost like now you're in the deep end exactly you have to do it so yeah my brain was exercised today beautiful beautiful man that makes me that makes me really really happy to hear that's awesome i'm glad that you were able to get value from this and learn amazing any parting words you want to share or maybe like the biggest thing that the biggest value or takeaway for you from this other than just making sure that you have the basics down maybe get off youtube and sit down and do it that's the i mean kazi kazu's channel is great but actually putting this into practice yourself is is is great this is amazing yeah beautiful amazing thank you for coming out brother thank you man i like i said i learned so much more sitting down with you doing it then watching a thousand youtube videos so and you explained everything well and clear and even though i'm nervous here and i'm doing it with you i'm still trying to stay with you and make sure that i understand the concept yeah and i understand how to do it so yeah man this is doesn't have value on it this was amazing okay amazing thank you bro uh appreciate you for coming in um and what's crazy is that he was you were also at the javascript tour that we did in person which was really cool we were glad to have you there so there you guys go thank you guys so much for watching we appreciate you if you enjoyed it or you got value out of it please share an insight or a comment whatever also it would really help get this video out everywhere if you smash the like button yes it really helped out um so yeah go ahead do that that'd be amazing subscribe to the channel you'll learn coding and become a developer and with that said we love your beautiful face this is kazi and david and we'll see you in the next video you
