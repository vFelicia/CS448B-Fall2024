With timestamps:

00:00 - yo what is up guys coach daniel here and
00:02 - today i want to talk to you
00:04 - about why data structures and algorithms
00:06 - are actually very important for you
00:08 - because the reality is
00:09 - everyone is talking a lot of crap about
00:11 - it everyone's like oh you don't need it
00:13 - in real life oh they only ask you that
00:15 - for the interviews oh they only use that
00:16 - to try to make fun of you
00:18 - you can actually leverage data
00:20 - structures and algorithms
00:22 - to solve real-world complicated problems
00:25 - i'm gonna teach you the top five data
00:26 - structures that you need to learn and
00:28 - i'm gonna teach it in the very
00:29 - simple and easy to understand way if
00:32 - you've never
00:33 - understood data structures and you're
00:35 - tired of asking professor how they even
00:37 - work
00:38 - this is the video for you now these are
00:40 - the top four data structures that you're
00:42 - going to have to learn
00:43 - that are going to help you further in
00:44 - your career and i'm going to keep it
00:46 - super simple
00:47 - so if you're struggling computer science
00:48 - class listen up now before we get into
00:50 - it i need you to understand this
00:52 - data structures are important because
00:54 - they're going to help you to land your
00:56 - dream job
00:57 - as a developer this could be if they ask
00:59 - you in the interview
01:00 - or just to really understand how to
01:02 - solve hard
01:03 - complicated problems that the job is
01:05 - going to require so if you
01:06 - are looking to become that developer
01:09 - you're going to want to click the link
01:10 - below because we've developed a
01:11 - full-blown course
01:13 - that is going to take you from xero to
01:15 - becoming a developer and building
01:16 - real life projects that will help you to
01:19 - land a job when you put on the resume
01:21 - and impress the recruiters
01:23 - so if you want to take your career to
01:24 - the next level and become a six
01:26 - figure developer make sure to click the
01:28 - link below
01:29 - and check out the best javascript course
01:32 - in the planning
01:32 - wait so what is data structures great
01:36 - question frankie
01:37 - so what are data structures simply put
01:40 - it's just different modified ways of
01:42 - storing data
01:44 - so that you can use it to your advantage
01:46 - let me give you the perfect example
01:48 - everyone knows about excel sheets and
01:50 - spreadsheets it's very simple to just
01:52 - put your whole data
01:53 - on a table with lots of columns and rows
01:56 - but let me ask you this
01:57 - what if i was trying to store data from
02:00 - google maps
02:01 - where i need streets how long it's going
02:03 - to take me to get from a place to a
02:04 - different place
02:05 - all these different kinds of things that
02:07 - need to take into account
02:08 - it's not going to be as simple as just
02:10 - putting it on a spreadsheet
02:12 - so to put it in even more simpler terms
02:14 - if i was to go
02:15 - ask you to go bring me 12 fluid ounces
02:18 - of water
02:19 - would you get a 12 fluid ounce cup or
02:22 - would you go grab
02:23 - a 12 fluid ounce bag and go get the
02:25 - water
02:26 - obviously you would use the cup because
02:28 - it would make more sense you could
02:29 - transport it a lot easier and you could
02:31 - bring me the water that i need
02:32 - in the bag maybe it's a plastic bag it's
02:34 - not good if it's a cloth bag
02:36 - the water's just gonna all fall out so
02:38 - by thinking
02:40 - about how you're gonna store the data
02:41 - how you're gonna pass the data
02:43 - that is how you could start to use
02:44 - things to your advantage because maybe
02:47 - the bag might be useful for something
02:48 - else for example maybe the bag could
02:50 - store clothes
02:51 - as opposed to the cup that wouldn't
02:53 - really be good for storing clothes
02:55 - so to wrap that up data structures are a
02:58 - way to temporarily store and format
03:00 - specific data so that you can use it to
03:03 - your advantage
03:04 - all right so that's cool and all but how
03:06 - do i know
03:07 - what data structure to actually use i'm
03:10 - glad you asked frankie so how do we know
03:12 - what data structure
03:13 - do we want to use well this is where big
03:16 - o notation
03:17 - comes in handy big o notation is a
03:20 - simple way to measure
03:22 - how long an algorithm or a data
03:24 - structure will take to perform
03:26 - a single task so when you look at the
03:28 - big-o notation
03:29 - of a specific algorithm and data
03:30 - structure versus the bigger notation of
03:32 - another one
03:33 - you could start to see how they would
03:35 - differ if you start to give it
03:37 - more and more data and bagel notation is
03:40 - very simplified
03:41 - because it allows you to think in terms
03:43 - of thousands and hundreds of thousands
03:45 - and millions
03:46 - of pieces of data and how your algorithm
03:48 - would interact with them
03:49 - so big o notation allows you to compare
03:52 - how long it would actually take for
03:54 - specific algorithms such as
03:56 - adding an item getting an item or doing
03:58 - some sort of search functionality
04:01 - and how long that would take if you were
04:02 - to start to scale
04:04 - the input from a thousand to ten
04:06 - thousand
04:07 - to a hundred thousand and beyond and a
04:09 - million and beyond and millions and
04:11 - millions of inputs
04:13 - so back to the cup and bag analogy it's
04:16 - as
04:16 - if you were to bring me back the water
04:19 - and i had something to measure how much
04:21 - water you brought back to me because i
04:23 - was able to measure
04:24 - that the 12 fluid ounces of the cup did
04:27 - bring 12 fluid ounces as opposed to the
04:29 - bag that brought zero
04:30 - i know that the cup would be more
04:32 - optimal in that case
04:34 - so now let's get into the data
04:35 - structures data structure number one
04:38 - arrays i am so excited to talk about
04:40 - arrays because
04:41 - nobody nobody talks about how important
04:44 - arrays are
04:45 - to every other data structure let me
04:48 - tell you exactly what i mean
04:49 - when people go through arrays and they
04:50 - start to understand them they start to
04:52 - overlook them because like oh it's just
04:53 - a simple thing you can access
04:56 - specific data from but the reality is
04:59 - lots of other data structures such as
05:01 - queues stacks
05:03 - lists even some types of graphs and hash
05:05 - tables fundamentally
05:07 - under the hood leverage and use arrays
05:10 - because all an array is is a section of
05:13 - memory
05:14 - in your computer that has different
05:16 - blocks
05:17 - where you could store data so you could
05:20 - think about it in terms of
05:21 - if you were to go into your hard drive
05:24 - into your memory
05:25 - you could pick out 10 different memory
05:27 - blocks where you're going to have an
05:29 - array
05:29 - and now you can add in 10 different
05:31 - values and change those values to the
05:33 - array so the reason arrays are
05:35 - fundamental building blocks
05:37 - is because under the hood if you use a
05:40 - scripting language
05:41 - like python or javascript or if you use
05:44 - other data structures that we'll be
05:45 - talking about later they are leveraging
05:48 - arrays which are actually
05:49 - static in the memory block so something
05:51 - to note
05:52 - arrays are actually static which means
05:55 - whenever you
05:55 - allocate a certain amount of memory
05:58 - that's the memory that's already been
05:59 - allocated so in lower level languages
06:01 - like c
06:02 - or java you can't really just add or
06:05 - append another thing to it but in higher
06:08 - level programming languages
06:10 - like javascript or python you're
06:12 - actually able to do those things because
06:14 - that's all under the hood
06:15 - so a huge pro for raise is that you can
06:19 - literally get instant access to specific
06:22 - objects that you're storing because the
06:24 - computer already knows exactly
06:27 - where in the memory the array data is
06:30 - this has fast time complexity or big o
06:32 - notation
06:34 - when it comes to storing or retrieving
06:36 - data now a con might be that
06:38 - as i mentioned before it's not dynamic
06:41 - in
06:41 - these lower level programming languages
06:44 - so if you need to make
06:45 - any changes or you need to delete a
06:47 - specific
06:48 - value inside of the array you have to
06:50 - accommodate a little bit more
06:52 - by rearranging some of the elements
06:54 - inside of the array
06:56 - so next one number two hash tables
06:59 - now hash tables are very similar to
07:01 - arrays except
07:02 - rather than being in a continuous block
07:04 - of memory they might be scattered
07:07 - all around this in turn gives the
07:10 - developer
07:10 - a little more flexibility to being able
07:13 - to just
07:14 - add more elements if they want to or
07:16 - delete elements
07:17 - hash tables are used under the hood when
07:20 - you're using
07:21 - dictionaries or sets a simple way to
07:24 - think about hash tables is realizing
07:26 - that there is a key
07:27 - value pairing so very similar to how
07:30 - one specific key can open one specific
07:34 - house in the entire block
07:35 - this starts to become the way you
07:37 - identify different objects inside of
07:40 - your hash table or your dictionary or
07:41 - your set
07:42 - when you're given the key you're able to
07:44 - then go find
07:45 - what house that key belongs to and
07:48 - you're able to pair that information
07:49 - together
07:50 - so an advantage of hash table and
07:52 - dictionaries
07:53 - is you get to easily retrieve
07:56 - and create data but a con
08:00 - to having hash tables is you're not
08:02 - really gonna have the ability
08:03 - to sort things with hash tables number
08:06 - three
08:06 - stacks and queues i'm gonna be pairing
08:09 - up stacks and queues because they're
08:10 - actually very similar data structures so
08:14 - first
08:14 - let's dig into a stack so a stack goes
08:17 - by the philosophy of
08:19 - first in last out what that means is you
08:22 - could think about
08:23 - trade tables from the cafeteria when the
08:26 - cafeteria person comes over
08:28 - and puts all those tray tables the first
08:31 - one on the stack is the very bottom
08:33 - that's the first one that got placed
08:34 - and after that people keep putting tray
08:36 - tables on top
08:37 - but now when it's time for someone to go
08:39 - eat their food the
08:41 - first tray table that someone gets is
08:43 - the one on the top
08:45 - which was the last one to come in so
08:47 - it's first in
08:48 - last out or last in first out they both
08:51 - mean the same thing
08:52 - just the wording is inverted now because
08:55 - of the functionality that you are able
08:56 - to use with the stack
08:58 - stacks might be beneficial for breadth
09:01 - first search which is a search type of
09:04 - algorithm
09:05 - that will be very crucial especially
09:06 - when you get to the next data structure
09:08 - which i'll talk about right now
09:10 - now the next data structure is cues very
09:12 - similar to stacks where you have
09:14 - something right after the other one
09:15 - but the difference is the first thing
09:18 - into the queue
09:18 - is the first thing that gets to go out
09:20 - so you could think about this
09:22 - like a line at the theaters the first
09:24 - person to show up is going to be the
09:26 - first person that gets to go in
09:27 - and find their seat some of the pros of
09:30 - stacks
09:31 - and queues is that they are very
09:32 - efficient and can be leveraged
09:34 - for other data structures for example
09:37 - stacks could be used for
09:38 - depth first search while cues could be
09:40 - used for breadth first search
09:42 - when it comes to leveraging the next
09:44 - algorithm which we will talk about a con
09:46 - for stacks and queues is they really
09:47 - don't have all these different
09:49 - test cases and use cases such as arrays
09:52 - or hash tables or the next data
09:54 - structure
09:55 - number four graphs and trees
09:58 - graphs and trees are probably one of the
10:00 - most complicated data structures out
10:02 - there
10:02 - and the reason is because there are so
10:04 - many variants
10:06 - you could use these things but these
10:08 - tend to be the ones
10:09 - that get used for the more complicated
10:12 - problems that you need to solve
10:13 - a graph and a tree could be thought of
10:15 - some simple components
10:17 - so they're made up of nodes and edges
10:20 - you could kind of think like if you were
10:22 - able to go back to pre-kinder
10:24 - and you drew your first rectangle each
10:27 - side that you had connecting from the
10:28 - vertex to vertex
10:30 - was your edge and the node was your
10:32 - actual vertex
10:33 - so you can actually assign values to
10:36 - these nodes you could see how many edges
10:37 - specific nodes are apart
10:39 - you could start to trace a lot of
10:41 - different things you can also go on to
10:43 - create
10:43 - data structures like binary trees that
10:46 - might be
10:47 - used for more specific use cases under
10:50 - the nodes you can add specific data and
10:52 - on the edges you can also add specific
10:54 - data
10:54 - so for an edge you could talk about the
10:56 - length how long
10:58 - the duration something that may be but
11:00 - basically that's the separation from one
11:01 - node to the other node
11:02 - and the node you can have essential data
11:04 - of where something actually stops so
11:07 - anyways guys to be the best software
11:09 - developer that you can become
11:11 - you want to make sure that you are
11:12 - continuously investing
11:14 - into your own education and that's why
11:16 - today i want to talk about
11:18 - our sponsor for this video skillshare
11:21 - so skillshare is an amazing place where
11:23 - you could go to
11:24 - and could take courses on anything you
11:26 - want to learn especially
11:28 - in software development so you could
11:30 - become a better programmer
11:31 - one of the classes that i'm taking right
11:33 - now and that i really enjoy
11:35 - is called algorithms and data structures
11:37 - in javascript
11:38 - and that class is taught by lucasv and i
11:40 - really love it because it
11:42 - goes into the fundamentals of how you
11:44 - can leverage these data structures and
11:45 - how you could use these algorithms
11:48 - to make sure that you're building
11:49 - optimal code and in this way not only
11:52 - will you have basic foundational problem
11:54 - solving skills
11:55 - but you're also going to be able to
11:56 - practice and ace
11:58 - any interview that you take so make sure
12:00 - to click
12:01 - the link below because the first
12:03 - thousand people who do so and sign up
12:05 - are going to get the skillshare premium
12:08 - membership and if you do like the
12:10 - platform you can continue to learn
12:13 - and push what you're learning and the
12:15 - best part is that it's less than ten
12:17 - dollars a month literally if you just
12:19 - skip out on starbucks coffee
12:21 - for two days out of the entire month
12:24 - you're gonna be able to
12:25 - reinvest that money into skillshare and
12:28 - into yourself
12:29 - a perfect example might be google maps
12:32 - so if you're trying to get from point a
12:34 - to point b those would be notes
12:36 - when you look at your google maps map
12:39 - you're going to notice there's a lot of
12:40 - turns here and there
12:41 - so google has literally created nodes
12:45 - and edges and created a whole graph
12:48 - system
12:48 - to be able to create the map that we all
12:51 - use when we get lost
12:52 - so a big advantage of graphs and trees
12:55 - is you can use it and leverage it to
12:57 - solve
12:58 - crazy complicated problems alright guys
13:01 - so these are the four data structures
13:04 - that if you start to master
13:06 - not only will you be able to pass
13:09 - technical interviews
13:10 - with ease but you're probably also going
13:12 - to come across problems and you're going
13:14 - to know how to solve those problems
13:16 - because you understand how to use the
13:18 - data structures to store the data that
13:20 - you need to be storing so that is it for
13:22 - the data structures and now the next
13:24 - step is going to be something that's
13:25 - super important which is actually
13:26 - implementing and executing because if
13:29 - you start to develop these problem
13:30 - solving skills
13:31 - as a software developer then you're
13:34 - actually gonna become marketable and
13:35 - then you can hit the six figure mark
13:38 - so in order to execute and implement
13:41 - this
13:42 - i would recommend that you go to lee
13:44 - code hacker inc
13:45 - or any of the other sites that you
13:47 - prefer we could practice these
13:49 - algorithms
13:50 - these four specific data structures that
13:52 - i talked about today
13:53 - were the ones that i used in my
13:55 - interviews with google
13:57 - microsoft and blue origin and i was
13:59 - actually able to get job offers from
14:01 - them
14:01 - so if you want to become that six-figure
14:03 - developer
14:04 - i would highly recommend firstly making
14:07 - sure you build a technical skill set
14:10 - and a portfolio that would attract
14:13 - recruiters attention
14:14 - and you could do that by clicking the
14:16 - link below heading over to profit with
14:18 - javascript
14:18 - where we teach you everything from xero
14:21 - to learning and building
14:23 - real life applications and then you
14:25 - could use this video and what you
14:27 - learned from this video
14:28 - to ace the interview and land your six
14:31 - figure
14:31 - developer job so if you guys enjoyed
14:34 - this video and enjoy this content
14:36 - please give it a like so that we can
14:38 - push this out
14:39 - to the world using the youtube algorithm
14:43 - which you know talking about algorithmic
14:44 - data structures it's probably quite
14:46 - complicated
14:47 - also make sure to subscribe and hit that
14:50 - bell notification icon
14:51 - so that you can get the latest and
14:53 - greatest the minute that we release
14:54 - a new video now guys that is it for this
14:57 - video
14:58 - i appreciate you sticking all the way
15:00 - through and i hope to see you in the
15:01 - next one
15:02 - [Music]
15:08 - [Music]
15:10 - peace
15:14 - [Music]
15:24 - [Music]
15:31 - [Music]
15:48 - [Music]
15:53 - [Music]
15:59 - [Music]
16:04 - [Music]
16:06 - so
16:09 - [Music]
16:20 - so
16:22 - [Music]
16:43 - [Music]
16:55 - [Music]
17:16 - okay
17:23 - [Music]
17:30 - so
17:33 - [Music]
17:38 - [Music]
17:58 - go
18:00 - [Music]
18:09 - you

Cleaned transcript:

yo what is up guys coach daniel here and today i want to talk to you about why data structures and algorithms are actually very important for you because the reality is everyone is talking a lot of crap about it everyone's like oh you don't need it in real life oh they only ask you that for the interviews oh they only use that to try to make fun of you you can actually leverage data structures and algorithms to solve realworld complicated problems i'm gonna teach you the top five data structures that you need to learn and i'm gonna teach it in the very simple and easy to understand way if you've never understood data structures and you're tired of asking professor how they even work this is the video for you now these are the top four data structures that you're going to have to learn that are going to help you further in your career and i'm going to keep it super simple so if you're struggling computer science class listen up now before we get into it i need you to understand this data structures are important because they're going to help you to land your dream job as a developer this could be if they ask you in the interview or just to really understand how to solve hard complicated problems that the job is going to require so if you are looking to become that developer you're going to want to click the link below because we've developed a fullblown course that is going to take you from xero to becoming a developer and building real life projects that will help you to land a job when you put on the resume and impress the recruiters so if you want to take your career to the next level and become a six figure developer make sure to click the link below and check out the best javascript course in the planning wait so what is data structures great question frankie so what are data structures simply put it's just different modified ways of storing data so that you can use it to your advantage let me give you the perfect example everyone knows about excel sheets and spreadsheets it's very simple to just put your whole data on a table with lots of columns and rows but let me ask you this what if i was trying to store data from google maps where i need streets how long it's going to take me to get from a place to a different place all these different kinds of things that need to take into account it's not going to be as simple as just putting it on a spreadsheet so to put it in even more simpler terms if i was to go ask you to go bring me 12 fluid ounces of water would you get a 12 fluid ounce cup or would you go grab a 12 fluid ounce bag and go get the water obviously you would use the cup because it would make more sense you could transport it a lot easier and you could bring me the water that i need in the bag maybe it's a plastic bag it's not good if it's a cloth bag the water's just gonna all fall out so by thinking about how you're gonna store the data how you're gonna pass the data that is how you could start to use things to your advantage because maybe the bag might be useful for something else for example maybe the bag could store clothes as opposed to the cup that wouldn't really be good for storing clothes so to wrap that up data structures are a way to temporarily store and format specific data so that you can use it to your advantage all right so that's cool and all but how do i know what data structure to actually use i'm glad you asked frankie so how do we know what data structure do we want to use well this is where big o notation comes in handy big o notation is a simple way to measure how long an algorithm or a data structure will take to perform a single task so when you look at the bigo notation of a specific algorithm and data structure versus the bigger notation of another one you could start to see how they would differ if you start to give it more and more data and bagel notation is very simplified because it allows you to think in terms of thousands and hundreds of thousands and millions of pieces of data and how your algorithm would interact with them so big o notation allows you to compare how long it would actually take for specific algorithms such as adding an item getting an item or doing some sort of search functionality and how long that would take if you were to start to scale the input from a thousand to ten thousand to a hundred thousand and beyond and a million and beyond and millions and millions of inputs so back to the cup and bag analogy it's as if you were to bring me back the water and i had something to measure how much water you brought back to me because i was able to measure that the 12 fluid ounces of the cup did bring 12 fluid ounces as opposed to the bag that brought zero i know that the cup would be more optimal in that case so now let's get into the data structures data structure number one arrays i am so excited to talk about arrays because nobody nobody talks about how important arrays are to every other data structure let me tell you exactly what i mean when people go through arrays and they start to understand them they start to overlook them because like oh it's just a simple thing you can access specific data from but the reality is lots of other data structures such as queues stacks lists even some types of graphs and hash tables fundamentally under the hood leverage and use arrays because all an array is is a section of memory in your computer that has different blocks where you could store data so you could think about it in terms of if you were to go into your hard drive into your memory you could pick out 10 different memory blocks where you're going to have an array and now you can add in 10 different values and change those values to the array so the reason arrays are fundamental building blocks is because under the hood if you use a scripting language like python or javascript or if you use other data structures that we'll be talking about later they are leveraging arrays which are actually static in the memory block so something to note arrays are actually static which means whenever you allocate a certain amount of memory that's the memory that's already been allocated so in lower level languages like c or java you can't really just add or append another thing to it but in higher level programming languages like javascript or python you're actually able to do those things because that's all under the hood so a huge pro for raise is that you can literally get instant access to specific objects that you're storing because the computer already knows exactly where in the memory the array data is this has fast time complexity or big o notation when it comes to storing or retrieving data now a con might be that as i mentioned before it's not dynamic in these lower level programming languages so if you need to make any changes or you need to delete a specific value inside of the array you have to accommodate a little bit more by rearranging some of the elements inside of the array so next one number two hash tables now hash tables are very similar to arrays except rather than being in a continuous block of memory they might be scattered all around this in turn gives the developer a little more flexibility to being able to just add more elements if they want to or delete elements hash tables are used under the hood when you're using dictionaries or sets a simple way to think about hash tables is realizing that there is a key value pairing so very similar to how one specific key can open one specific house in the entire block this starts to become the way you identify different objects inside of your hash table or your dictionary or your set when you're given the key you're able to then go find what house that key belongs to and you're able to pair that information together so an advantage of hash table and dictionaries is you get to easily retrieve and create data but a con to having hash tables is you're not really gonna have the ability to sort things with hash tables number three stacks and queues i'm gonna be pairing up stacks and queues because they're actually very similar data structures so first let's dig into a stack so a stack goes by the philosophy of first in last out what that means is you could think about trade tables from the cafeteria when the cafeteria person comes over and puts all those tray tables the first one on the stack is the very bottom that's the first one that got placed and after that people keep putting tray tables on top but now when it's time for someone to go eat their food the first tray table that someone gets is the one on the top which was the last one to come in so it's first in last out or last in first out they both mean the same thing just the wording is inverted now because of the functionality that you are able to use with the stack stacks might be beneficial for breadth first search which is a search type of algorithm that will be very crucial especially when you get to the next data structure which i'll talk about right now now the next data structure is cues very similar to stacks where you have something right after the other one but the difference is the first thing into the queue is the first thing that gets to go out so you could think about this like a line at the theaters the first person to show up is going to be the first person that gets to go in and find their seat some of the pros of stacks and queues is that they are very efficient and can be leveraged for other data structures for example stacks could be used for depth first search while cues could be used for breadth first search when it comes to leveraging the next algorithm which we will talk about a con for stacks and queues is they really don't have all these different test cases and use cases such as arrays or hash tables or the next data structure number four graphs and trees graphs and trees are probably one of the most complicated data structures out there and the reason is because there are so many variants you could use these things but these tend to be the ones that get used for the more complicated problems that you need to solve a graph and a tree could be thought of some simple components so they're made up of nodes and edges you could kind of think like if you were able to go back to prekinder and you drew your first rectangle each side that you had connecting from the vertex to vertex was your edge and the node was your actual vertex so you can actually assign values to these nodes you could see how many edges specific nodes are apart you could start to trace a lot of different things you can also go on to create data structures like binary trees that might be used for more specific use cases under the nodes you can add specific data and on the edges you can also add specific data so for an edge you could talk about the length how long the duration something that may be but basically that's the separation from one node to the other node and the node you can have essential data of where something actually stops so anyways guys to be the best software developer that you can become you want to make sure that you are continuously investing into your own education and that's why today i want to talk about our sponsor for this video skillshare so skillshare is an amazing place where you could go to and could take courses on anything you want to learn especially in software development so you could become a better programmer one of the classes that i'm taking right now and that i really enjoy is called algorithms and data structures in javascript and that class is taught by lucasv and i really love it because it goes into the fundamentals of how you can leverage these data structures and how you could use these algorithms to make sure that you're building optimal code and in this way not only will you have basic foundational problem solving skills but you're also going to be able to practice and ace any interview that you take so make sure to click the link below because the first thousand people who do so and sign up are going to get the skillshare premium membership and if you do like the platform you can continue to learn and push what you're learning and the best part is that it's less than ten dollars a month literally if you just skip out on starbucks coffee for two days out of the entire month you're gonna be able to reinvest that money into skillshare and into yourself a perfect example might be google maps so if you're trying to get from point a to point b those would be notes when you look at your google maps map you're going to notice there's a lot of turns here and there so google has literally created nodes and edges and created a whole graph system to be able to create the map that we all use when we get lost so a big advantage of graphs and trees is you can use it and leverage it to solve crazy complicated problems alright guys so these are the four data structures that if you start to master not only will you be able to pass technical interviews with ease but you're probably also going to come across problems and you're going to know how to solve those problems because you understand how to use the data structures to store the data that you need to be storing so that is it for the data structures and now the next step is going to be something that's super important which is actually implementing and executing because if you start to develop these problem solving skills as a software developer then you're actually gonna become marketable and then you can hit the six figure mark so in order to execute and implement this i would recommend that you go to lee code hacker inc or any of the other sites that you prefer we could practice these algorithms these four specific data structures that i talked about today were the ones that i used in my interviews with google microsoft and blue origin and i was actually able to get job offers from them so if you want to become that sixfigure developer i would highly recommend firstly making sure you build a technical skill set and a portfolio that would attract recruiters attention and you could do that by clicking the link below heading over to profit with javascript where we teach you everything from xero to learning and building real life applications and then you could use this video and what you learned from this video to ace the interview and land your six figure developer job so if you guys enjoyed this video and enjoy this content please give it a like so that we can push this out to the world using the youtube algorithm which you know talking about algorithmic data structures it's probably quite complicated also make sure to subscribe and hit that bell notification icon so that you can get the latest and greatest the minute that we release a new video now guys that is it for this video i appreciate you sticking all the way through and i hope to see you in the next one peace so so okay so go you
