With timestamps:

00:00 - how's it going guys and what are we
00:02 - going to be building today sunny
00:04 - we are going to be building a dope
00:06 - looking netflix clone so let's go ahead
00:08 - and show them quasi
00:10 - so this is the clone that we are going
00:12 - to be building in today's
00:14 - project that's what we're gonna be
00:16 - working on guys uh so
00:18 - i'm going to quickly go ahead and start
00:20 - demoing it we apologize for running a
00:22 - little bit late just because we're
00:23 - dialing up
00:24 - dialing in our setup and making sure
00:26 - that it looks phenomenal for you guys
00:30 - but here is this clone that we're
00:32 - working on so first of all just take a
00:34 - look at it
00:35 - the feel it feels like
00:38 - netflix and if i go here and i want to
00:41 - play a trailer
00:43 - you can go ahead and play a trailer
00:46 - also guys if you actually want to check
00:48 - this app out you can go to that link
00:49 - right now at the top
00:50 - i'll drop it in the chat and you can
00:52 - actually play with this app yourself
00:55 - yep so you guys can actually go to this
00:57 - link right over here let me
00:59 - turn my audio a little bit lower so it
01:01 - doesn't peak
01:03 - so yeah you guys can go to this link
01:06 - boom
01:07 - there we go yeah and you guys can jump
01:09 - in and you guys can actually start
01:11 - playing with this
01:12 - app so here you can see i can scroll
01:15 - through it just like netflix
01:17 - i can play trailers so let me move this
01:21 - stuff out of the way
01:23 - move down what trailer should we show
01:25 - them next star wars
01:27 - yes yes check out star wars let's see
01:29 - all right
01:31 - so give it a little click and it should
01:33 - pop in
01:38 - dope
01:41 - nice and let me put on can i put on
01:45 - system audio too
01:48 - nice there we go so here's the cool
01:51 - thing about this
01:52 - which is that you even get that little
01:54 - bar that drops down from the top when i
01:56 - scroll down
02:00 - exactly netflix bar dynamic
02:03 - also guys just to know this isn't
02:05 - hard-coded information we're actually
02:06 - getting all of this data right now
02:08 - from a third party api so when we
02:10 - refresh you should notice that the top
02:12 - manner
02:13 - is going to change because we're pulling
02:15 - in new information yep
02:16 - so let's go ahead and refresh yeah so
02:19 - even if we refresh we can
02:21 - show you that we're it's dynamic because
02:22 - it's pulling in new information
02:25 - yeah so at the top you guys will see the
02:27 - top thing
02:28 - change and guys if you could do us a
02:31 - favor we bring in a lot of love and we
02:33 - build this with a lot of passion for you
02:35 - guys it doesn't take anything from you
02:37 - guys if you could just
02:37 - give this video a like that is
02:41 - huge um it automatically puts this video
02:45 - out everywhere and all of these projects
02:47 - that we're building there for you guys
02:49 - and so this spreads it out and makes it
02:52 - easier for everybody to get access to
02:53 - them so just go ahead
02:54 - give this video a like subscribe to the
02:57 - channel if you haven't already
02:58 - and uh let's get back to building these
03:01 - projects
03:02 - let's do it okay awesome so
03:05 - should we kind of jump in and actually
03:07 - get started on it now sunny
03:09 - yeah let's do it so we actually set up a
03:13 - coding terminal um that me and kazi are
03:16 - sharing right now and we're using vs
03:17 - code
03:18 - liveshare so it allows me and qazi so if
03:20 - i type in
03:21 - in the terminal you should see my little
03:23 - customer over here
03:24 - perfect perfect and what we're going to
03:27 - do
03:28 - is firstly before we actually set up
03:30 - anything
03:31 - actually i think we'll spin up a reactor
03:33 - at first that's always the first did we
03:34 - drop the link to this app by the way
03:36 - uh i dropped it on the youtube chat
03:38 - might be worth dropping on restream
03:40 - oh i see yeah that might be handy
03:44 - and then we can throw it out to everyone
03:45 - on facebook as well
03:47 - and guys if you guys are enjoying that
03:49 - and you actually mess around with the
03:50 - demo
03:51 - be sure to shoot an instagram video and
03:53 - show us when you show us when you
03:54 - actually do it because
03:56 - we love to see you guys we love to chat
03:57 - somebody actually sent out a
03:59 - awesome video yesterday uh cause you
04:01 - wanna talk about
04:02 - uh that story that we saw yesterday oh
04:05 - yeah that was actually
04:06 - really amazing let me see if i can even
04:09 - share it
04:10 - because we love when you guys share your
04:12 - projects and things like that with us
04:14 - so um if you guys want to go ahead and
04:16 - do that that would be really awesome
04:18 - let me go here and share
04:21 - what's up what's up sunny aka
04:25 - this was amazing
04:31 - so yeah if you guys want to do something
04:33 - like that that would be really freaking
04:34 - cool because we love seeing your guys's
04:37 - um you know how you guys built the app
04:40 - what your reaction to it was did you
04:42 - enjoy it because that keeps us going
04:45 - and you guys can actually send it to us
04:47 - right over here
04:48 - and we're going to get started building
04:50 - this app pretty much right away
04:52 - so one cool thing we're doing this time
04:54 - is on the right hand side of the screen
04:56 - you guys can see i just added a text
04:58 - overlay and this basically shows you
05:00 - what we're going to be doing and when
05:02 - we're going to be doing it so this table
05:04 - of contents
05:05 - is pretty much going to be on the screen
05:06 - the entire time
05:08 - and this will tell you what steps we've
05:10 - already completed
05:12 - and uh so it doesn't matter when you
05:13 - join this live stream or maybe you're
05:15 - watching this video later
05:16 - it's all good you can know what step
05:18 - you're on at any given time
05:21 - exactly so the first step
05:24 - is let's go ahead and grab so in order
05:27 - to
05:28 - actually pull all the information that
05:29 - you're seeing guys we're going to
05:31 - actually go ahead and grab
05:32 - something called we need an api key from
05:34 - a service that we're going to use
05:36 - and many of you guys have heard of
05:38 - something called imdb
05:40 - yeah but what we're going to be using is
05:41 - something called tmdb
05:43 - so if you just go over to the browser
05:45 - right now and you just need to set up a
05:47 - quick account so
05:49 - so i'm going to actually just go ahead
05:50 - and make sure everybody knows that
05:52 - that's what we're gonna be working on
05:53 - now
05:54 - and we're done actually demoing the app
05:57 - so you guys can see
05:58 - in the checklist that that has been
06:00 - updated
06:01 - and now we're gonna be actually getting
06:04 - get tmdb
06:05 - api key right exactly so you guys can
06:08 - follow along
06:09 - with us and actually do these exact
06:11 - steps if you want
06:13 - exactly so what you want to do is go
06:15 - over to your website called tmdb
06:18 - uh is it tmdb.com yeah just type in tmdb
06:22 - and then it will give you a nice little
06:24 - google link um
06:25 - so if you click on that one yeah
06:29 - and if you go to create an account with
06:31 - them
06:32 - so let's go ahead and go to
06:36 - uh should have a little account saying
06:38 - because you actually if you type in let
06:40 - me send you a link
06:41 - one second i didn't get you here we go
06:43 - here we go because i went to their
06:44 - developers one so this is probably what
06:46 - it is
06:48 - yeah that's the one nice okay yeah
06:52 - you just need to click oh yes you need
06:53 - to sign up uh-huh
06:57 - uh are we going to be sharing this with
06:59 - anybody else like our password or
07:01 - anything or should i just use my private
07:03 - password
07:04 - um so no this is going to be the api key
07:07 - is going to be visible for everyone
07:09 - um but this password is going to be
07:11 - blocked out so they won't be able to see
07:12 - it yeah so use a private
07:13 - user yeah whatever password okay
07:21 - okay so here we go awesome
07:26 - and what we're doing here guys is we're
07:28 - actually going to access a service
07:30 - which is basically like what we're going
07:32 - to do is we're going to make a request
07:33 - to this service called tmdb
07:35 - and they're going to give us back a
07:37 - bunch of information
07:38 - um about different films and what's
07:41 - really cool about this service
07:42 - is that they actually give us a bunch of
07:46 - different
07:46 - genres so we have like netflix originals
07:49 - trending now
07:50 - top rated action movies comedy horror
07:52 - etc and then what we do is we pull that
07:54 - information in
07:55 - and then we throw it on the front end
07:56 - and that's what you're going to be
07:57 - seeing and that's actually what you saw
07:59 - in the demo
07:59 - so we didn't hard code that that was
08:01 - being pulled from this api that we're
08:03 - setting up right now
08:04 - awesome so if you go to the top right
08:08 - and click on the little c and you want
08:10 - to click on profiles and settings and
08:11 - click on settings
08:13 - at the bottom okay
08:16 - and then on the left after you click on
08:18 - settings you want to click on api
08:20 - and you should get a little key uh so
08:23 - you go to create
08:25 - so right so go here and then go right
08:28 - there right
08:29 - yep so request an api key
08:34 - and then click on developer
08:35 - [Music]
08:37 - yep and this we just got a scroll down
08:40 - and accept that
08:44 - so at this point this won't take too
08:46 - long just click type of use
08:48 - uh do web application so if you do so
08:50 - click that one
08:52 - type of use website and if you just you
08:55 - might want to put this on a separate
08:56 - screen
08:57 - so we can hide this from the stream and
08:58 - then just chuck me on the screen that
09:00 - while we sort of
09:01 - go through this form yeah okay nice so
09:04 - what you guys want to do is you just
09:06 - want to put in all the details says
09:07 - application name application url
09:09 - what about the application url what
09:11 - should we make that
09:12 - the url doesn't actually matter to be
09:14 - honest i added a random one
09:16 - and it didn't crash the uh the app at
09:18 - all so here what we can do is and the
09:20 - application summary you need to give it
09:21 - a summary just saying like
09:22 - you're either making a demo or something
09:24 - otherwise it doesn't let you get past it
09:27 - and then enter your details and you
09:28 - should be able to go through so once
09:30 - that's done what we're going to be doing
09:32 - is for those of you who don't know what
09:33 - react is we have
09:35 - web development which is basically html
09:37 - css and javascript
09:39 - now all of those are the three
09:40 - fundamentals which is how we build a
09:42 - website but we pretty much
09:43 - wrap it in something that facebook built
09:46 - and that is called
09:48 - react and react allows us to build
09:50 - really scalable powerful
09:51 - apps and the main reason why it's called
09:53 - react is because it cleverly
09:55 - owns a very in a very smart way it only
09:57 - renders what it needs to render
09:59 - so we're going to be building that in a
10:00 - sec but let's go back to uh
10:02 - the screen and we can show you the next
10:05 - step
10:06 - so i got these screens yeah we got the
10:09 - api key
10:12 - yeah yeah so what we're going to do now
10:14 - is we just need to take note of that api
10:16 - key
10:17 - so you grab that and just paste that
10:18 - somewhere else
10:20 - uh and what we're gonna do is yeah maybe
10:23 - if we just chuck it there
10:24 - yeah awesome do we need uh do we need
10:28 - any of these other ones like api access
10:30 - token um so no we don't need the api
10:33 - access token but we could use the api
10:34 - request with postman just to give a demo
10:36 - if you want oh i see so like basically
10:39 - just do this
10:40 - and give a demo with this okay yep so
10:43 - for those of you guys who haven't used
10:44 - postman
10:45 - it allows you to send a request to any
10:48 - sort of api or a server
10:49 - so in this case what we're going to do
10:51 - is go ahead and make
10:53 - a most um
10:56 - get movies yeah and if you just paste it
10:58 - in there
10:59 - yeah right there let's click send
11:04 - and now we should get back so you can
11:06 - see we got back a bunch of information
11:09 - um and what you need here's fight club i
11:12 - love fight club let's
11:13 - try opening it and uh boom it sends me
11:17 - to this
11:19 - awesome okay
11:22 - great so you have a bunch of information
11:24 - that comes back from that request so
11:26 - that's an example of now we it's working
11:28 - because it actually gave us some
11:29 - information back
11:30 - so if you got this bit wrong then it's
11:32 - probably your api key isn't correct
11:34 - yeah okay so awesome the next step that
11:38 - we want to do
11:39 - is actually go ahead and start our and
11:41 - just so people know how i did this is i
11:43 - hit
11:43 - new yeah then i
11:46 - hit request right here
11:50 - and then all i did is paste this link
11:54 - just make sure this says get and then my
11:56 - next step was to hit that button
11:58 - send yeah that's it
12:02 - i think you can even press command t to
12:04 - open a new tab oh nice
12:06 - oh that's much easier okay um cool
12:11 - so the next step is let's go over to our
12:13 - code uh
12:14 - vs code and let's
12:17 - let's actually share a terminal with
12:19 - each other so that we can code easily
12:20 - together
12:21 - sure thing yeah so
12:24 - there we go and if i go ahead and type
12:27 - in i just need to click request read and
12:29 - write access
12:30 - here i made it so now i can type in that
12:34 - perfect
12:35 - okay so what we need to do now is we
12:37 - need to run a command to make sure
12:39 - you're in the right folder that you want
12:40 - to start your work in
12:41 - and we're going to basically run a
12:42 - command so it's mpx and you need to run
12:44 - mps
12:45 - you need to install npx before you can
12:46 - use it um and then we do
12:49 - create so just just one second so up
12:52 - until now right now
12:54 - we just completed our uh getting the api
12:58 - key right
12:59 - yeah the perfect okay nice and now we're
13:02 - about to create our react app
13:05 - that's it awesome nice
13:08 - [Music]
13:10 - there we go let's update that as the top
13:12 - one as well
13:14 - yeah so create react app
13:17 - yep keep going
13:20 - okay those sounds start getting more and
13:22 - more hyped as you get through it
13:26 - so now in the terminal we're going to
13:27 - say mpx create react app
13:30 - and then what you need to do is just add
13:32 - a space and then just give it some kind
13:34 - of name so in this case we're going to
13:35 - say netflix clone
13:37 - and we're going to click enter and
13:39 - that's actually going to set up
13:40 - everything guys
13:42 - so that sets up all of the stuff that
13:44 - you need to get running with your app
13:45 - it will install all of the dependencies
13:47 - and modules and all that sort of clever
13:49 - stuff behind the scenes
13:50 - um so you that'll take about a minute or
13:52 - so so while that's happening
13:53 - let's head over to firebase
13:57 - so firebase is a suite of tools by
13:59 - google and it allows you to do a bunch
14:01 - of clever things
14:02 - so you can host your website you can
14:03 - have a database you can have
14:05 - authentication
14:06 - in the previous session we did a bunch
14:08 - of authentication stuff so that'd be
14:09 - cool if anyone's interested in that to
14:11 - go check that out
14:12 - but here you just want to have a gmail
14:14 - account log in and click on add project
14:20 - and once it once we click on our project
14:22 - you just need to give it a name so in
14:24 - this case
14:24 - we'll go ahead and call it insta netflix
14:27 - clone
14:29 - there we go netflix phone
14:32 - awesome and this you can enable or
14:35 - disable based on if you want google
14:37 - analytics
14:41 - there we go nice so now we're setting up
14:44 - our back end
14:45 - so right now for today what we're going
14:47 - to be using firebase for
14:48 - is for the deployment of the app so that
14:50 - we can actually host it so when you guys
14:52 - were actually checking out the link
14:54 - that we had previously which was this
14:57 - one so you can see on the screen so the
14:59 - one that i'm highlighting at the moment
15:01 - on the code panel that link is actually
15:03 - a real link
15:04 - so that's a real link that's been
15:06 - deployed and we use firebase to do that
15:09 - which is really really powerful and it
15:10 - allows you to pretty much get the app
15:12 - up and running and live was really
15:14 - really quick
15:15 - um so yeah nice let's go ahead and click
15:17 - continue
15:20 - and now what we're going to do is if you
15:22 - just tap that little web
15:23 - icon at the top i will and just to be
15:27 - very clear we're now set
15:28 - setting up set up firebase hosting right
15:32 - yep so now exactly now we're setting up
15:34 - firebase hosting
15:36 - and we're done with the create react app
15:38 - yeah we're on fire
15:40 - moving fast yeah
15:46 - nice that's the sound of us being done
15:50 - with the sound of success cool we're
15:52 - gonna get so smooth with this
15:54 - all right let's keep going netflix and
15:56 - then there we go netflix
15:58 - and then you want to tick that little
15:59 - box here
16:02 - okay so uh let's register up
16:06 - okay so the next step where it says add
16:08 - firebase sdk
16:09 - we don't need to worry about that
16:11 - because we're using node modules uh
16:13 - but this step you do need so you're
16:15 - gonna go ahead copy that
16:16 - and then go to your terminal so i think
16:18 - let's open up a new terminal and do that
16:20 - command yeah
16:21 - so you just simply enter that command i
16:23 - think it might not work so if it doesn't
16:24 - work you might have to add sudo
16:26 - so whenever you install something with
16:28 - dash g you need to actually have admin
16:30 - rights you need to write sudo
16:32 - and sudo basically gives you admin
16:34 - rights which is why i ask for your
16:35 - password
16:36 - uh and then you pretty much run that
16:38 - command and everything should work
16:40 - as it as it needs to and that's gonna
16:42 - basically our nice
16:43 - best channel for react now on youtube ah
16:45 - that's awesome dude
16:47 - thank you very much love stuff like that
16:51 - um yeah so pretty much installing the
16:54 - firebase tools
16:56 - is very simple you just add that you
16:58 - just run that
16:59 - fund and then you'll be able to type in
17:02 - firebase
17:03 - in your command line and you'll get
17:04 - access to all of the firebase tools
17:06 - uh so that's pretty awesome so somebody
17:09 - said chris weiss are back with you guys
17:10 - today i actually spoke to chris barley
17:12 - on instagram
17:13 - nice really nice yeah yeah he
17:16 - refreshed the story so guys that's what
17:18 - i'm saying like repost stories and i can
17:19 - have it and we can me and quasi can have
17:21 - it yeah and you guys
17:22 - this time when you make a story make
17:23 - sure you tag both of us
17:25 - and also like i want to hear you speak
17:26 - with your in your video and like show us
17:28 - your code
17:30 - exactly yeah that would be awesome yeah
17:32 - yeah
17:33 - oh i've been upset are you using all my
17:36 - zsh
17:37 - yes we are sanchez says gotta say man
17:40 - the qualities live streams are top-notch
17:42 - feels so smooth almost like a video
17:43 - thank you
17:44 - yeah that's the goal that's the goal
17:46 - nice yeah a lot of effort goes into
17:48 - making these super smooth and slick
17:50 - yeah okay
17:53 - so we have done a bunch of work so
17:56 - firebase tools has been installed so
17:58 - that's good
17:58 - the next step i guess is so the create
18:01 - react app just finished
18:02 - and we've got firebase which is just
18:04 - finished so let's go ahead and
18:06 - for now what we what tasks
18:10 - okay so we're done with firebase hosting
18:12 - or not yet
18:13 - not just yet not just yet let's go back
18:15 - to the browser and let's open up to the
18:18 - little burger menu and click on the
18:19 - hosting okay yep
18:23 - that one there and let's go ahead
18:26 - and click on get started
18:29 - awesome and click next and we can do
18:33 - that afterwards
18:34 - yeah next five is the next awesome
18:38 - so this will set up everything we need
18:39 - and the last step before we can say this
18:42 - steps completely done is let's go ahead
18:44 - and
18:44 - click that burger icon in the top left
18:48 - and let's click on the little settings
18:50 - cog
18:51 - so the settings yep project settings
18:54 - and once that's loaded let's go down to
18:57 - the bottom
18:58 - and here we will find the sort of magic
19:01 - which
19:01 - oh actually we don't actually need this
19:03 - today we don't actually need this today
19:04 - so we are done we are done with the step
19:06 - nice okay yeah so now we're done with
19:09 - this step completely right
19:12 - yeah we are completely done with five
19:14 - minutes awesome let's make sure that we
19:16 - put a nice little
19:18 - check mark next to it yep
19:21 - i want to hear the little nice
19:26 - so now we're going to be what getting
19:28 - all the movies
19:30 - yeah so now we actually start the build
19:32 - so this is going to be the sort of where
19:33 - all of this sort of logic happens and
19:35 - everything like that
19:36 - um so yeah we can actually get ahead go
19:38 - ahead and get started so get all the
19:40 - movies
19:41 - okay um okay nice so
19:44 - let's actually get the app running on
19:46 - the right and we'll get the code running
19:48 - on the left
19:50 - cool
19:52 - let's do it so in order to start the app
19:54 - guys what you need to do
19:56 - after we actually run create react app
19:58 - you need to do
19:59 - cd and then netflix clone if you're
20:02 - using omaze you don't need to write a cd
20:04 - but
20:04 - for those of you who aren't using that
20:06 - you need to do cd and then do
20:08 - um oh i can't actually type into that
20:10 - one uh the first one i can you know
20:12 - cd netflix clone so netflix and then you
20:15 - can tab
20:15 - and you do clone and then we're in the
20:17 - correct folder so if you do ls to list
20:19 - all the files you should see
20:20 - all of this stuff so if you see that
20:22 - you're in the right place so to get the
20:24 - app actually up and running
20:25 - you just do mpm start and what that's
20:28 - going to do
20:29 - is it's just going to spin up the react
20:31 - app so when you use create reactor it
20:32 - gives you a very nice template
20:34 - that gives you a really nice sort of
20:36 - starter project and it will launch it on
20:37 - something called localhost 3000
20:39 - so you have everything up on there so
20:41 - yeah second we should see a little
20:42 - spinner
20:46 - nice there we go right there yep
20:50 - yep awesome so and now what we want to
20:52 - do is we want to
20:54 - i've also got access to your shared
20:55 - terminal that's nice awesome okay
20:58 - awesome so i guess next all we need to
21:00 - do is actually get started with the
21:02 - build so
21:02 - what we can do is let's open up let's
21:05 - actually do our cleanup process
21:07 - um so kazi you want to explain the
21:08 - cleanup process so yeah
21:10 - so basically yeah so basically in the
21:12 - cleanup process guys what we want to do
21:14 - is there are a bunch of these test
21:18 - files and we don't actually need them
21:20 - and
21:21 - also we can remove the logo so let's go
21:24 - ahead and select
21:25 - all three of these right click and just
21:28 - delete
21:29 - and now so that's clean now you're
21:32 - probably wondering
21:33 - why is it failing to compile and
21:36 - uh really the reason why it's failing to
21:37 - compile as well that logo svg is not
21:40 - there anymore we just deleted it
21:42 - so we're just gonna go in here and what
21:45 - we like to do
21:46 - is if i'm gonna just full screen for a
21:48 - second is um
21:49 - take everything inside of this uh
21:53 - in the header right you just let's just
21:55 - remove this entire header
21:57 - so inside of that div let's just remove
21:59 - everything
22:02 - boom there we go yep and also line
22:06 - two we have nice sergeant is here how
22:08 - are you doing nice welcome welcome
22:09 - carlos thank you for saying you guys
22:11 - rock
22:12 - really love your guys's energy
22:16 - this is amazing right cool so now it's
22:19 - cleaned up so now what i'm gonna just
22:20 - say
22:21 - is hey clever programmer
22:24 - let's build netflix clone
22:28 - front end today so
22:32 - just to be clear we're going to be
22:33 - working on the front end today guys
22:36 - yep but we're still going to be playing
22:38 - with data in
22:40 - in real time so yeah
22:43 - awesome so we have that's our starting
22:45 - point guys so that's literally where you
22:47 - want to get to to get everything sort of
22:49 - up and running
22:50 - uh and get everything sort of where we
22:51 - need to get that app started so
22:53 - the next step that we want to do now is
22:56 - so remember we got an api key right
22:59 - so in order to actually make the
23:00 - requests that we saw
23:02 - so for example the um the stuff that we
23:06 - saw
23:06 - earlier with um the postman requests
23:10 - in order to get that actually up and
23:12 - running we need to actually
23:14 - use something which will handle sending
23:16 - requests from our code
23:18 - and the thing that i like to use is
23:19 - something called axios so let's go ahead
23:22 - and install axios into our into our
23:24 - project so in order to do that
23:25 - we need to go over to our terminal
23:28 - uh-huh so let's go over to our terminal
23:30 - right here
23:31 - cool yeah so let's go to your terminal
23:34 - and let's install axios so npmi
23:37 - axios and all this is going to do is
23:39 - imagine it's basically going to replace
23:41 - uh what we were doing previously with um
23:45 - with postman but instead we're going to
23:47 - be doing it with
23:49 - axios so we're going to be making the
23:50 - request with axios in our code
23:52 - okay stop uh next i just want to
23:55 - because if you just follow me in the
23:56 - code yep here we go
24:00 - nice okay so now what we want to do is
24:02 - we actually need to set
24:04 - up our axios because we need to set up
24:05 - our request sender
24:07 - let's call it that and just like cause
24:09 - you're doing make sure you do npm start
24:11 - nice to restart the app
24:12 - so what we're going to do is we're going
24:14 - to create a file called requests.js
24:17 - so what i want you guys to do is what i
24:19 - want to cause you to do over there is
24:21 - just to
24:21 - create a new file called requests.js
24:26 - so um requests.js and is it going to be
24:29 - a component or should we
24:30 - should it be capitalized or no that's a
24:33 - good question so as it's not a component
24:35 - it's just sort of a functional module we
24:37 - just want to have it as a lowercase r
24:39 - so if we only have an uppercase uh uh r
24:43 - if
24:43 - it's a components let's change that to a
24:45 - lowercase r
24:48 - okay so let's go here
24:51 - and rename it yup
24:55 - so the convention guys is you would have
24:57 - it as an uppercase
24:58 - only if you are trying to resemble a
25:00 - component in your file name
25:02 - okay so awesome so we should have icons
25:06 - oh yeah there we go requests nice okay
25:08 - so now what we're going to do is i need
25:10 - to actually so there's a bunch of
25:11 - endpoints
25:12 - that i found previously so i found these
25:15 - on the tmdb website and what i'm going
25:18 - to do here
25:19 - is basically first i'm going to add a
25:22 - the key itself so remember that key that
25:24 - we got earlier
25:25 - so let's just add that here so we say
25:26 - const
25:28 - api key api oops const api key
25:33 - and here we're basically going to drop
25:34 - the key inside of here so if you don't
25:36 - mind just
25:36 - pasting it inside there cozy
25:38 - [Music]
25:41 - oh oops what's going on here is am i out
25:43 - of sync maybe
25:45 - uh i might have gone out of sync with
25:48 - you you see that
25:50 - yeah everything's gonna [ __ ] okay so
25:51 - i'm gonna quickly rejoin
25:53 - your actually then again we might be
25:55 - good enough
25:56 - okay so no i don't think we are
26:00 - okay i'm gonna rejoin give me one sec
26:03 - yeah
26:04 - yep so let me rejoin maybe we can answer
26:08 - some questions in the meantime
26:09 - yep i'll take on questions guys so you
26:11 - guys have questions
26:13 - let's take on some of your guys
26:14 - questions paulo asks or
26:16 - have you tried insomnia instead of
26:19 - postmen
26:20 - so yeah the answer is i mean
26:24 - i there is a there's echo right on his
26:27 - voice i don't know why that's actually
26:28 - happening
26:29 - because i don't really feel like
26:34 - yeah give me one second guys i want to
26:35 - figure out like if there is echo i want
26:37 - to remove it for you guys and just make
26:39 - sure but to answer you guys this
26:40 - question yes i've used
26:42 - them both i haven't used insomnia as
26:44 - much but i'm just a
26:46 - more of a fan of uh postman it was kind
26:49 - of confusing for me to just figure my
26:51 - way around so i kind of
26:53 - just stopped using it
26:57 - so an alternative for firebase um so
27:01 - actually there's not actually many
27:02 - alternatives to firebase i've seen that
27:04 - do as much as firebase do
27:06 - so you have aws you can do things like
27:08 - they can they have
27:09 - instead of cloud functions they have
27:11 - lambdas um
27:12 - there's a bunch of things like that but
27:15 - honestly the easiest one i found
27:17 - is firebase as a back end yep so that's
27:20 - to answer that question
27:22 - um okay awesome i think i'm it's working
27:26 - now yeah
27:27 - okay cool let's keep going perfect
27:30 - okay so we added the api key over here
27:32 - so everything's all good now
27:34 - so the next step is i found a bunch of
27:37 - api requests
27:38 - and all these are basically going to do
27:40 - is they
27:41 - all they simply do is these are the end
27:44 - points so basically i'm going to just
27:45 - copy and paste a snippet of code now
27:48 - so what this is is essentially an object
27:50 - we're just exporting
27:51 - an object here so if we it was to
27:53 - simplify this it's literally just a case
27:55 - of
27:56 - imagine we have a bunch of requests
27:58 - right and they're an object
28:00 - and each of those requests are basically
28:02 - inside of here and all we're doing is
28:04 - we're exporting that
28:05 - so we're just exporting it like this
28:08 - right
28:08 - so each one here uh is it is it equity
28:14 - um because i could hear it on your
28:17 - screen as well
28:18 - maybe yeah i think it's because yeah the
28:21 - audio is coming from my laptop and then
28:24 - they're able to hear it so maybe if i
28:25 - put in headsets
28:26 - might help a lot yeah
28:33 - okay
28:38 - so qazi your voice is low and sonny's
28:40 - voice is loud now
28:41 - um after we just plugged in the headset
28:44 - how was that
28:45 - my one says sonny you are doing great
28:47 - thank you very much there's my lovely
28:49 - cool friend
28:51 - and kazi love both of you nice
28:54 - um how about real quick guys how does it
28:57 - sound
28:58 - let me just try this so how is it
29:00 - sounding
29:01 - right now can you guys hear me clearly
29:04 - and sunny go ahead speak for a second
29:07 - hello hello hello are we all good i
29:09 - think we're good now i can't actually
29:11 - hear myself
29:12 - yeah should be a lot better yeah yeah
29:14 - okay
29:15 - yeah that's much better okay nice
29:18 - so carrying on so what we're going to do
29:19 - here and the reason why we're doing this
29:21 - guys is
29:22 - pretty much just to make it easier later
29:24 - to use these requests
29:25 - right so if we actually check out
29:28 - the um the the request
29:31 - so these are basically imagine like
29:34 - these are just the ends of the url
29:35 - so they're just the endings of a url and
29:38 - all we're doing is we're just inserting
29:39 - our api
29:40 - key right wherever it's needed and what
29:43 - you can notice is
29:44 - at the end of each of the lines so if
29:46 - you just throw
29:47 - if you scroll to the end of the lines
29:49 - cozy
29:51 - so yeah oh you mean like this
29:55 - like this yeah so you can see they have
29:58 - a weird sort of syntax uh
30:00 - sort of a weird sort of way that we
30:01 - request data from them
30:03 - so for example to get the netflix
30:04 - originals we have to use this
30:07 - so it's a weird param but this was on
30:09 - their docs and you pretty much pass this
30:11 - and that will give you the netflix
30:12 - originals
30:13 - to get the for example action films you
30:15 - give the
30:16 - the key code 28 for the genres and so
30:19 - forth so each one has a specific key
30:21 - code and they will give you the films
30:23 - back
30:23 - for that that sort of stuff so in order
30:26 - to
30:26 - get that working i actually went ahead
30:29 - earlier on and i found all this so that
30:31 - way we
30:31 - saved ourselves a bunch of headache in
30:33 - finding that during the stream
30:35 - um and then so that's the first step
30:37 - done right we actually have all of this
30:39 - stuff in a really convenient object
30:41 - and we're going to pair this together so
30:43 - we're going to go ahead and create a
30:45 - another file another
30:48 - well now i can't actually see your um
30:52 - i can't actually see your your photo
30:54 - structure cause you
30:56 - oh yeah so if you go ahead and go to
31:00 - you have to go inside netflix clone yeah
31:03 - uh
31:04 - for some reason it's not showing up on
31:05 - mine but it might come up once you start
31:07 - doing stuff so if you uh add a file here
31:09 - [Music]
31:11 - and then sort in source right
31:14 - yep in source and we're gonna call this
31:16 - one axios so lowercase a
31:18 - axios.js okay
31:21 - right uh nice so i can follow you into
31:24 - files but i can't actually see the files
31:26 - myself
31:27 - just super strange can you use a
31:28 - shortcut like command p and then switch
31:30 - between
31:31 - or like command shift p and switch
31:33 - between
31:34 - command p and switch files uh no because
31:37 - it goes into my one but it's fine so
31:39 - i'll follow you around until we sort of
31:41 - run into a hiccup
31:42 - okay um yeah so now what we'll do is in
31:45 - axios what we're going to do is
31:46 - so every single request that i want to
31:49 - send
31:50 - is going to have the same beginning of
31:52 - like this
31:53 - the same starting url right uh so what
31:56 - i'm going to do is i've got a little
31:57 - snippet of code here
31:58 - i'm just going to paste it here we're
31:59 - going to explain what this does so the
32:01 - top what we did is we're importing axios
32:04 - and basically that's just using the
32:07 - package manager
32:08 - the package or the module that we've
32:09 - installed earlier
32:11 - which is essentially going to do what
32:12 - postman does right and then next what
32:14 - we're going to do is we're going to
32:16 - create an
32:16 - instance so we have axios gives us this
32:19 - very nice method called create
32:21 - and all you do is you pass it a base url
32:23 - right so this basically means
32:25 - every single time i was to do something
32:27 - like instant
32:29 - so instance dot get then for example
32:32 - this would be sending a get request
32:34 - so if i was to write for example foobar
32:38 - then the url that we're actually going
32:40 - to be sending to
32:41 - is going to be this so it's going to
32:44 - actually look something like this
32:47 - i see does that make sense yeah so
32:49 - basically it's just taking this thing
32:51 - and then it's appending it to that yeah
32:54 - and it's a very simple sort of it's a
32:56 - very good pattern to use whenever you're
32:58 - doing a lot of sort of
32:59 - uh requests from your app so with that
33:02 - said what we're doing is we're exporting
33:04 - this
33:05 - um and then we pretty much have the
33:07 - bones for
33:08 - sort of starting to make requests right
33:10 - so everything sort of is looking good
33:11 - right now
33:12 - so let's go again let's go over to
33:14 - app.js so i think you may need to follow
33:16 - me
33:17 - yep so i've got yes so now what we're
33:20 - going to do
33:20 - is let's actually start to get a little
33:23 - bit
33:24 - so right now i guess we actually said
33:27 - that we were going to fetch movies right
33:30 - yeah um so this step actually is
33:32 - combined with the next step so we're
33:33 - going to sort of overlap some of this
33:35 - the two steps here so maybe it might be
33:37 - worth on the screen let's just have a
33:39 - finger pointing at both of those steps
33:41 - okay and what are the two steps
33:45 - so the two steps that we're going to
33:46 - combine pretty much are getting all the
33:47 - movies
33:48 - and building the rows because what we're
33:51 - going to what we want to do is
33:53 - as we sort of build those rows that you
33:54 - saw earlier
33:56 - um so if we go back to the app when i
33:58 - say rows
33:59 - what we're talking about is if we go to
34:01 - the um get all the movies and build the
34:04 - rows
34:07 - okay nice so if we go over to the demo
34:09 - app that we actually demonstrated
34:10 - earlier
34:13 - so in the second tab i think you've got
34:15 - your opening
34:16 - [Music]
34:18 - so you see the the in the in chrome you
34:20 - should have the tab open
34:22 - for the deployed app okay for the
34:24 - deployed app
34:25 - yep so that one so the roads that we're
34:27 - talking about now guys
34:28 - is these ones so you see where it says
34:30 - netflix originals
34:32 - where it says trending now um so we
34:34 - basically that is actually one component
34:37 - so every single row you see here is one
34:39 - component
34:42 - yes yeah and what we do is we pass in
34:45 - something called prop so
34:46 - for those of you who are new to react
34:48 - all we need to basically be doing
34:50 - or what react is sort of a revolved
34:52 - around is component based
34:54 - work or component based design so you
34:57 - write one component
34:58 - and then you reuse it by passing in
35:00 - different props props standing for
35:02 - properties
35:03 - got it right so what we're going to do
35:05 - here is let's go over to app.js
35:09 - yep zap.js and you might just want to
35:11 - follow
35:12 - so it will sort of go with the cursor
35:15 - yep yeah nice and then what we'll do
35:17 - here is we're basically going to
35:19 - have a component like this where it's
35:21 - going to say row
35:22 - and what we want to do is we want to
35:23 - customize the row
35:25 - by basically passing in a title right
35:29 - so in in the first case the title that
35:31 - we saw was netflix original so it's like
35:33 - this netflix
35:34 - originals and the second one that we saw
35:37 - was
35:38 - an example like i think it was trending
35:41 - now
35:41 - so trending now okay yeah and so this is
35:45 - going to work out oh nice this is
35:46 - basically yeah nice so this these rows
35:48 - are going to be
35:49 - this trending now one is going to be
35:51 - this one over here
35:53 - exactly nice and the reason why i'm
35:54 - building the rows first
35:56 - is because it's the most like apparent
35:58 - um thing on the screen so
36:00 - let's just start with that and then we
36:01 - can sort of build the banners and we can
36:03 - build everything else around it
36:04 - um okay so let's go ahead and start with
36:07 - that so um
36:08 - the next step is we need to actually
36:09 - create our row so let's go ahead and
36:11 - create a file called row.js
36:20 - and is this gonna this is gonna be a
36:21 - component right yeah this is a component
36:24 - so it needs to be capitalized
36:26 - and then here we've got a really nice
36:28 - snippet so
36:29 - um what we need to do now is to uh
36:33 - okay i think okay so kazi while you set
36:36 - that component up i'm going to rejoin
36:37 - the session
36:38 - so it doesn't mess up one second
36:41 - so i think all you need to do is run
36:43 - rfce so using the es7 snippets
36:48 - and that should get you up and going
36:54 - so rfce guys is a really nice trick by
36:56 - the way
36:57 - um that many people don't know about and
37:00 - it's basically going to
37:01 - um allow you just to write those three
37:04 - four
37:04 - four letters and press enter and then
37:08 - it will actually sort of get everything
37:09 - set up i don't know why my code base
37:11 - isn't starting one second let me just
37:13 - restart my vs code
37:16 - okay yeah like literally that one line
37:20 - will do this because this is something
37:21 - you constantly have to do in react you
37:23 - constantly keep having to make react
37:26 - components
37:27 - um and you always want to export them
37:30 - so then you can use them in a different
37:31 - file like this row component i'm gonna
37:33 - be able to use it in my
37:34 - axios file maybe or my app.js file so
37:38 - rfce just allows you to do this thing
37:40 - very easily yeah exactly
37:43 - and if you code so carlos one thing i do
37:46 - want to mention is like
37:49 - i also do a lot of development in vim
37:52 - and one thing i recommend is at least
37:54 - for me
37:55 - i wanted to take the modern world like
37:57 - visual studio code pycharm all that and
37:59 - then combine it with vim which is just
38:01 - all command line and the best solution i
38:05 - found is
38:05 - use vim inside of visual studio code so
38:09 - like i'm still
38:10 - fast but i have all the bells and
38:13 - whistles of
38:14 - visual studio code now nice
38:18 - yeah because he's trying to get me over
38:20 - to vim i'm still we're always going back
38:22 - and forth on it
38:25 - um so now what we're gonna do is uh
38:29 - if you just follow me cozzy in live show
38:33 - give me one second because for whatever
38:35 - reason
38:37 - it switched audio it's like it's not
38:40 - from my headsets anymore so give me one
38:41 - second
38:43 - yep okay now we are
38:47 - good go ahead
38:50 - okay all right there we go
38:54 - so now what we're gonna do is let's just
38:56 - sort of get a baseline so
38:58 - what i like to do is i just mark it out
39:00 - so here we're going to have some kind of
39:02 - title which is going to say trending now
39:04 - netflix originals etc and then we're
39:06 - going to have
39:08 - a bunch of images so i want to have a
39:09 - container
39:11 - so like some kind of container with a
39:13 - bunch of
39:14 - uh let's just call it um let's call it
39:17 - posters inside right so there's gonna be
39:19 - a bunch of posters inside of it
39:21 - and those are referring to each of the
39:22 - films that you see and then we're gonna
39:24 - have
39:25 - a uh after that we are going to have
39:28 - oh i think that's it actually we're just
39:30 - going to have that and then the
39:31 - container with posters inside
39:33 - so here we notice that when we actually
39:35 - created
39:36 - the um component over here which we
39:39 - actually need to import so i'm going to
39:40 - quickly import that so i go to the top
39:42 - and i say import
39:43 - row from and then we do the file
39:47 - directory so
39:48 - row and that should pull in our
39:50 - component that we just created
39:52 - so here what i'm going to do is we
39:53 - passed in these two props title
39:56 - title right yeah so it's one prop with
39:58 - the value type so we're going to go back
40:00 - to our row
40:01 - and we're going to use some
40:01 - destructuring here so this is where the
40:03 - props come in
40:04 - but you can actually pull apart that
40:05 - object at this point by using some es6
40:08 - sugar and here we say props oh no sorry
40:10 - here we say title
40:12 - and that right now if i do this little
40:14 - neat trick and i say
40:16 - uh h2 let's put h2 and we say title
40:20 - look what happens now guys so if we
40:21 - actually have the app running on the
40:22 - right
40:24 - we can now see you see it's rendering
40:26 - the two rows and it's popping out h2
40:28 - tags with netflix originals and trending
40:30 - now
40:31 - so we've already got that sort of
40:32 - starting point which is quite nice
40:34 - yeah yeah nice and now what we're going
40:38 - to do
40:39 - is we're going to proceed to the next
40:41 - part so the next part is sort of
40:43 - where we got to think about things a
40:44 - little bit more so we
40:46 - initially had a bunch of requests
40:50 - that we had previously right so just one
40:52 - one thing real quick i do want to
40:53 - mention
40:54 - mongizi asks before i joined qazi's
40:57 - python course do you guys have a react
41:00 - course i'm still basic in javascript so
41:05 - yes we do have a react and javascript
41:08 - course and that course is called profit
41:10 - with javascript so if you guys are
41:11 - interested
41:12 - and you want to join that course so you
41:14 - can learn all of these skills but most
41:16 - importantly learn how to actually make
41:18 - an
41:18 - income with these skills the link will
41:20 - be in the description and you can click
41:22 - that
41:23 - uh and that monkeys you can check that
41:25 - course out that might be helpful for you
41:28 - yeah yeah and it doesn't matter if
41:30 - you're still basic guys
41:32 - we go from literally basic all the way
41:33 - up to react development
41:35 - which is awesome so
41:38 - cracking on we've got the row component
41:42 - so here what we want to do next is i
41:45 - actually want to have it so that
41:47 - we have a bunch of movies right um
41:50 - and what we're going to do is
41:53 - the way we're going to do it so it's a
41:55 - combination of things that we need to do
41:56 - now so the first thing we're going to do
41:57 - is we're going to use something called
41:59 - state
41:59 - to keep track of those movies so state
42:02 - is like short-term memory
42:04 - when we refresh it disappears but it's a
42:06 - very good
42:07 - place to store some information so the
42:09 - the easy way of putting it
42:11 - is that state is basically a react the
42:13 - way to write variables in react
42:16 - right so here we're basically going to
42:17 - write const and then i'm going to do
42:20 - this and the name of the variable is
42:22 - movies
42:23 - and this is the way this is the syntax
42:25 - of how we do it so it's movies
42:26 - and then you say set oh oops i don't
42:29 - know why it's done now
42:30 - the set so movies set movies
42:33 - like this right um mcvision says
42:37 - how can i join your course quasi so
42:39 - there is a link in the description below
42:41 - uh you can check that out and it's got
42:42 - all of the course details and everything
42:44 - that we offer
42:45 - uh feel free to just go ahead and check
42:47 - that out yep so yeah so
42:51 - yeah so this is how we pretty much set
42:53 - up a piece of state so we say use state
42:55 - so we're using a react hook here and
42:57 - hooks are like these little functional
42:59 - pieces of code
43:00 - that make our life so much easier and
43:03 - then inside of these brackets you give
43:04 - an
43:04 - initial value so here i'm going to give
43:06 - an array so an empty array
43:10 - empty array like that and then what we
43:12 - need to do is because we're using that
43:14 - we need to pull it in from react so we
43:16 - say use state
43:17 - up here and that means that we can
43:19 - actually start using it otherwise it
43:20 - will freak out saying why using use
43:22 - state before you put it in
43:24 - so with that said we now have an empty
43:26 - movies array
43:27 - so it's an empty array because we
43:28 - declare that over here now what we want
43:30 - to do
43:31 - is we need to kind of fill it with some
43:33 - information right we need to give it
43:34 - some information we need to actually
43:36 - populate it with some stuff but what we
43:40 - need to actually do at this point so
43:41 - remember those requests
43:43 - that we we sort of set out to and
43:45 - created earlier right
43:46 - if we go back to app.js what i'm going
43:49 - to do now
43:49 - is i'm actually going to do a very sort
43:51 - of nice little trick here
43:53 - and if i go to app.js so i just want to
43:56 - check so yeah stephanie where are you
43:59 - getting these code snippets to paste and
44:01 - so
44:02 - basically we have an extension called uh
44:06 - which one is it is es6 something right
44:09 - yeah es7 react redux snippets so that's
44:12 - where we actually pull that rfc e
44:14 - snippet from
44:16 - um and these are other extensions that
44:17 - we're currently using the
44:19 - bracket pair one and the live share one
44:21 - that's how we're able to share
44:22 - live with each other exactly
44:25 - yeah and i do recommend you get those
44:28 - extensions because it saves you the
44:29 - hassle of remembering how to write stuff
44:32 - which which we all sort of forget so
44:34 - next we're going to basically add
44:35 - another prop and we're going to call
44:36 - this one
44:36 - fetch url right and this one
44:40 - basically is just going to be so when i
44:42 - say fetch it's basically the url
44:44 - that we're going to start pulling the
44:45 - information from because imagine
44:47 - the netflix originals row is going to
44:49 - have a different request to the trending
44:51 - now
44:52 - row because they're going to pull
44:53 - different information right
44:55 - so in order to do that what i'm going to
44:57 - do is i'm going to pass in a value here
44:59 - and a value here and those values are
45:01 - going to be the requests that we set up
45:03 - earlier
45:03 - so here i'm actually going to say import
45:06 - and i'm going to say
45:06 - requests from and i'm going to basically
45:10 - just go over to the requests so requests
45:13 - and what this will do is if we actually
45:15 - go ahead and look at our requests again
45:17 - we can see so remember all of these
45:19 - requests so the fetch trending effects
45:21 - fetch netflix originals etc now i don't
45:24 - need to write this long
45:25 - ugly sort of thing inside of my app code
45:28 - i can just pretty much
45:29 - reference this key and it will give me
45:31 - what i need so we can go back
45:34 - and now i can basically say requests
45:37 - dot and the one here i think it was
45:41 - fetch let me find the name of it oops
45:44 - was it so if we go back to
45:46 - let me get that up as well so we've got
45:48 - the requests
45:50 - yes i want this one so i want fetch next
45:52 - flicks originals
45:54 - so here i'm going to say effects fetch
45:57 - netflix originals
45:58 - and here i'm going to say requests dot
46:01 - and this one is going to be trending now
46:03 - so request start trending now
46:26 - yeah yeah
46:29 - even on your screen i think mine doesn't
46:30 - show but if you click on
46:32 - if you add a dot after request the
46:35 - minute you add a dot it will show you
46:36 - all the options
46:37 - so if you do request dot dot so
46:42 - if you if i yeah
46:45 - uh you need to do it yeah
46:49 - so request dot there you go
46:52 - so that's really clean and then that way
46:54 - you don't have to remember everything
46:55 - off the top of your head
46:57 - awesome so now we're passing in the urls
47:00 - right so what we're going to do is we're
47:02 - going to use that so we're going to go
47:03 - inside our row component and here we're
47:04 - going to say
47:05 - fetch url and now we we have the sort of
47:09 - url
47:10 - that we're going to sort of go and grab
47:12 - some information from so
47:13 - what we need to do now is we basically
47:16 - need
47:16 - a snippet of code so what this is what i
47:19 - need right now
47:20 - i need a snippet of code so a snippet
47:24 - of code which runs which runs
47:29 - based on a specific condition
47:34 - oh yeah here we go yeah so what i just
47:38 - wrote here is
47:39 - we basically need a snippet of code
47:40 - which runs based on a specific
47:43 - condition or variable um and basically
47:45 - what react does is it gives us
47:48 - am i muted
47:52 - for a second frankie just told me i was
47:54 - uh i was not following you earlier
47:56 - so i just clicked follow oh yeah yeah i
47:58 - don't i don't think you got muted but i
48:00 - saw that when you weren't following
48:01 - yeah got it okay um so now
48:04 - we need this so a snippet of code which
48:06 - runs based on specific conditional
48:08 - variable
48:09 - and react luckily gives us a really nice
48:11 - uh
48:12 - hook so it's called usefx we have to
48:15 - import it
48:16 - and basically what we do is we write
48:19 - use effect
48:22 - and inside of here we basically do the
48:25 - we have two things we have the first
48:27 - argument which is just in a function
48:29 - here and then the second thing is these
48:32 - brackets so these square brackets and
48:35 - basically so i'm going to explain what
48:36 - this does now so
48:38 - this piece of code inside of here what
48:41 - are we trying to by the way what are we
48:42 - trying to achieve sunny
48:43 - like right like with this
48:47 - yeah so what we're trying to achieve
48:48 - here is i need to run a piece of code
48:51 - uh when the row loads so when this row
48:53 - component loads on the screen
48:55 - i need to run a piece of code just to be
48:56 - clear when this thing loads
48:58 - you want something to run yeah exactly
49:02 - so when that robe appears on the screen
49:04 - and it loads i want to basically
49:06 - make a request to tmdb which is that
49:10 - movie server
49:12 - you want to be able to pull this
49:13 - information right when that road loads
49:16 - right
49:17 - exactly got it so like even this thing
49:20 - okay cool
49:21 - so and then you want to be able to
49:24 - basically pull the information for all
49:25 - of these and when we see information
49:27 - well it's the image that we need
49:31 - yeah we also need it from the trending
49:33 - now or the top rated category
49:36 - yep okay so i need so
49:39 - yeah so the categories are based on the
49:41 - fetch url that we passed in as a prop
49:44 - yep so that was this is so this is a
49:46 - really good way of using use effect you
49:48 - guys like basically
49:49 - every time this row will load this
49:52 - snippet of code will run
49:53 - and so as soon as this row is loading we
49:56 - want to be able to like feed it the
49:58 - the information that it needs exactly
50:02 - and what we can do is in this bracket
50:04 - here if we leave this blank
50:06 - we're basically saying run one so
50:09 - if if we leave the brackets blank
50:13 - then we're saying run once when
50:16 - the row loads and
50:19 - don't run it again right
50:23 - yeah that's what we say if it blank uh
50:25 - if you were to pass in a variable here
50:27 - so for example if i passed in movies
50:29 - it's going to run once when the row
50:32 - loads
50:33 - and then it's going to run every single
50:34 - time movies changes
50:36 - so we call that a dependency so it's
50:38 - dependent on if movies changes
50:40 - as to whether or not it needs to refill
50:42 - so anytime this variable movie changes
50:45 - this snippet of code is going to run but
50:46 - if you remove that sunny
50:48 - movies from here and it's an empty
50:50 - bracket yeah so basically this code is
50:52 - only going to run once because
50:54 - of this only on page load and that's it
50:58 - exactly yep yeah so that should help
51:01 - everyone understand sort of what use
51:03 - effect does
51:04 - so let's actually start coding in here
51:06 - so what we need to do is i'm going to
51:08 - pull in
51:09 - remember we created that little axios
51:11 - helper so i'm going to actually use that
51:12 - here so i'm going to say import
51:14 - i'm going to say axios from but i'm not
51:17 - going to do the typical thing of pulling
51:19 - it from axios to depend the dependency
51:21 - i'm going to go ahead over to our file
51:23 - where we created
51:24 - um our little helper because this one
51:26 - remember if um
51:28 - we actually um so if i go over to that
51:31 - file just right here
51:34 - yeah this one right here so remember we
51:36 - we called it cons
51:37 - instance here but because we export it
51:39 - as a default when we bring it in
51:41 - it doesn't actually matter what name we
51:42 - use which is why
51:44 - over here when i actually import it i
51:46 - can call it whatever i want
51:48 - really right here i can say accurate
51:49 - yeah so if you have a default import
51:52 - you can actually rename it very well
51:54 - interesting
51:56 - okay if it's not a default import that's
51:58 - when you have these squiggly brackets
52:00 - so if it's not so this is why
52:03 - i thought this name was like really
52:05 - important or something because i was
52:06 - always confused why we really need that
52:08 - name but now
52:10 - so this is just like really the alias
52:12 - whatever you want to call it
52:13 - okay i understand yeah but a handy
52:16 - little lesson is if we go back to accio
52:18 - suggest
52:19 - if i was to basically do this so if i
52:21 - was to go here and get rid of export
52:23 - default
52:24 - then you would have to structure it yeah
52:26 - so if i yeah exactly
52:28 - yeah why was it giving away oh i see
52:31 - because you'd have to do it like this
52:32 - yeah and then you get rid of that
52:34 - but so so a rule of thumb here guys is
52:37 - you can only have
52:38 - one default export in a file but you can
52:40 - have several ah
52:41 - that's really nice so then you could oh
52:44 - okay that is
52:45 - really helpful because every time i was
52:46 - like oh if i need to make multiple
52:48 - components i
52:48 - i have to make multiple files but maybe
52:52 - i can actually
52:53 - keep them in the same file and then
52:55 - destructure them in another one
52:58 - yeah so exactly so that's why it's
53:00 - really really nice thing and a lot of
53:01 - people it took me quite a while to
53:03 - figure that one out as well like
53:04 - a default is actually uh i didn't
53:07 - realize you could rename it i thought it
53:08 - was super crucial to keep the name
53:10 - yeah yeah yeah yeah nice okay
53:14 - so uh i think you just want to need to
53:15 - re-follow uh because
53:17 - if you go back to yeah nice uh so now
53:20 - what we're going to do here is we're
53:22 - going to use it so i'm basically going
53:23 - to say
53:24 - um what i need to do now is i actually
53:27 - need to run a bit of asynchronous
53:29 - work so i need to i need to basically
53:30 - make an asynchronous call because
53:32 - i'm sending a request outside to a
53:35 - third-party service
53:36 - remember guys it's going to take it'll
53:38 - be really quick but it's going to
53:40 - it's going to maybe even take a second
53:42 - or half a second but we call that
53:44 - async so in order to run an async
53:46 - function
53:47 - inside of this little use effect because
53:49 - you can't actually use
53:50 - async things inside of a user effect you
53:52 - have to do it in a special way you do
53:54 - this you say async function
53:56 - and you say fetch data so you write a
53:59 - little internal function
54:00 - right so inside of here we're going to
54:02 - actually do all the fetching
54:04 - and then afterwards you just call it you
54:06 - just say fetch data
54:07 - that's how you do it inside of a use
54:09 - effect
54:10 - so it's a bit of a strange one but you
54:12 - actually need to do it like that
54:13 - whenever you have an async right
54:15 - so now what we're going to do is we're
54:16 - going to say const request so we need to
54:19 - make a request
54:20 - and the way we're going to do it is we
54:21 - say a weight
54:23 - so await is going to say when you make
54:25 - this request wait for the promise to
54:27 - come back so wait for the answer to come
54:28 - back
54:29 - so if it goes off to a server even if it
54:31 - takes five seconds
54:33 - wait for it to come back and then do
54:34 - something um so we say axios
54:37 - dot get and then here i'm going to use
54:39 - that fetch url
54:41 - that we talked about earlier so imagine
54:43 - what it's doing here is it's going here
54:45 - and it's starting
54:46 - you get this beginning url so imagine
54:49 - like this is what we're doing so we get
54:50 - that beginning url
54:52 - and then we pass in a url here so
54:56 - for example we passed in the fetch
54:58 - netflix url
54:59 - which if we go to this one is this so
55:02 - i'm just going to grab this and show you
55:03 - what we're doing
55:05 - and then here this is actually just
55:07 - going to
55:08 - because we're using the axios that we
55:10 - set up earlier it's basically doing this
55:12 - so this is the url it's sending a
55:14 - request to now but it will replace the
55:16 - api key
55:17 - with our api key nice does that make
55:19 - sense yeah yeah so you see it's a very
55:21 - very nice slick implementation
55:24 - um and that but it looks very clean as
55:26 - well like we don't have to write much
55:27 - code to get that working
55:28 - and now what we're going to do is we
55:30 - basically so what i like to do at this
55:32 - point
55:33 - is do console.log request
55:36 - right so console.log request and and the
55:38 - reason why i do that
55:40 - is because i like to see what the data
55:42 - structure is that we get back
55:43 - because remember we don't actually know
55:45 - what so i need to just do a little
55:47 - something like here
55:48 - to return requests so that it doesn't
55:50 - freak out but here
55:52 - console.log request is needed so that we
55:54 - can actually see the data structure that
55:56 - we're getting back so
55:57 - i'm going to save this now and what i
55:59 - want you to do is if you full screen uh
56:01 - the browser
56:04 - so let's go ahead and full screen the
56:05 - browser and let's just open the
56:06 - inspector but let's go to our app
56:08 - so the the the local host version
56:12 - yep says open inspector and now on the
56:15 - right so if you've got a sort of console
56:16 - if you open up the console
56:19 - yeah we can see see there's an object
56:21 - right
56:22 - yep see it says object if you click that
56:24 - you see this is what's coming back from
56:26 - that request
56:27 - so there's two objects because there's
56:28 - two rows and each one has a different
56:30 - thing
56:30 - so now this is how you actually inspect
56:33 - what comes back so
56:34 - we're not interested in the config we're
56:36 - interested in the data
56:37 - and in specific we're looking at
56:40 - data.results
56:42 - so that's how we sort of find what the
56:43 - structure is right this one so whenever
56:45 - you make
56:46 - a yeah so whenever you make any sort of
56:49 - api request
56:50 - a thing that people usually get stuck on
56:51 - is like how do i know what's coming back
56:54 - and a good way of testing that is
56:56 - console.log it and then see what you're
56:57 - getting back so now we know that
56:59 - the stuff that we're interested in is
57:01 - inside of data.results
57:03 - so these are actually the same movies
57:05 - like if i actually put them side by side
57:08 - just to show it visually
57:11 - even though we're not here yet in our
57:13 - new build
57:14 - but like if we actually look these are
57:16 - the same movies that we were getting
57:18 - here so that's dark
57:20 - it's just we haven't made it yeah we
57:22 - haven't made it look nice yet but here's
57:24 - warrior run here
57:26 - is lucifer so that's
57:29 - now our next job is going to be to
57:30 - actually make it look nice
57:33 - exactly yeah so now what we do
57:37 - is um so we found out the data structure
57:40 - and we saw that it was
57:42 - request.data.results
57:44 - right yes that's the one request of data
57:46 - dot results so i'm just going to add
57:47 - that here so we have a note
57:49 - um and let's go ahead and split the
57:51 - screen i'm just going gonna actually
57:53 - make this
57:54 - a little bit bigger cool nice
57:57 - and you see they give you a bunch of
57:58 - information there guys so like if you
57:59 - need extra information you can always
58:01 - use that to see what's coming back
58:03 - um nice so what we're gonna do now is we
58:06 - are going to
58:07 - actually go ahead and put that
58:09 - information so you saw those those
58:10 - results that kazi was showing earlier
58:12 - we're going to go ahead and set that
58:14 - inside the movies so i'm obviously going
58:15 - to get the request
58:16 - dot data dot results which was a it's an
58:19 - array
58:20 - and i'm going to go ahead and pop that
58:22 - inside of our movies
58:24 - all right so what we need to there's one
58:26 - more step now
58:27 - so whenever you use anything inside of a
58:30 - use effect
58:31 - if there is any variable that is being
58:34 - you that is being pulled in from
58:36 - outside but it's used inside of the use
58:38 - effect you
58:39 - have to have to have to have to include
58:41 - it inside of here
58:43 - the reason being is because it's
58:45 - dependent on that variable so it's now a
58:47 - dependency so
58:49 - every time this changes we have to
58:51 - update our use effect so that way
58:53 - that is one of the things that i was
58:55 - actually getting really stuck in when i
58:57 - was
58:58 - building my own app with react and i had
59:01 - to use
59:02 - asynchronous function and so i just
59:05 - could not figure out how to get it to
59:07 - load but this is
59:08 - this is pretty sick okay because if you
59:12 - don't include that what happens is say
59:14 - i passed in a different fetch url it
59:16 - wouldn't re-render the user effect
59:18 - but it wouldn't re-calculate the user
59:20 - effect so you would have a
59:21 - you would you'd get a different answer
59:23 - to what you expected and that's why a
59:25 - lot of people run into an issue and then
59:27 - it gets very confusing when you're also
59:28 - combining that with async and
59:30 - and all that stuff so that's a very just
59:32 - a neat way of thinking about it
59:34 - so just just for one one second so why
59:36 - is it this one that we have
59:40 - yeah as a dependent so the reason why
59:42 - the reason why is this one
59:44 - is because we have we're using a
59:46 - variable
59:47 - which is being passed from outside of
59:49 - the block so and then when i say that is
59:51 - we're talking about this one
59:52 - yep you see because it's outside of the
59:55 - block
59:56 - in we need to tell use effect that
59:57 - you're using
59:59 - this variable which is outside the block
60:01 - i see
60:02 - so and the reason why is because that
60:04 - way use effect knows that something
60:06 - changed so i need to refile the code
60:08 - got it okay yep if that if that url
60:12 - changes now the way what i like to do
60:14 - just to get a little sanity check is i
60:16 - console log
60:17 - the movies to see if if anything's
60:19 - actually working or pulling through as
60:20 - we expect
60:21 - so if we go ahead and inspect the um the
60:24 - the uh screen we should be able to see
60:27 - now
60:28 - you can see that we get an array and
60:29 - that's got a bunch of movies inside of
60:31 - it
60:31 - oh nice so now that's all we're just
60:33 - getting here
60:35 - instead of getting all through yeah
60:38 - beautiful awesome so we get all the
60:41 - movies that come through
60:43 - uh and then the next step i guess what
60:44 - we need to do is actually just kind of
60:46 - render out so let's render out our first
60:48 - bunch of images
60:50 - so what i'm gonna do now is we've got
60:52 - those movies
60:53 - i'm gonna create a div and i'm gonna
60:54 - call this div
60:56 - so i like to use something called bem
60:58 - which is a way that we use um
61:00 - it's a way of naming your classes inside
61:02 - of react so
61:03 - in this case the the component that
61:05 - we're inside of is called row
61:06 - so what i'm going to do is i'm going to
61:08 - say the the the surrounding container
61:11 - is going to have a class name of row and
61:13 - then inside of it
61:15 - i'm going to have a div so this is going
61:17 - to be the container around all of those
61:19 - films that you saw previously yeah and
61:21 - the reason why i want them in
61:22 - inside of a container is so that you can
61:23 - scroll through them right so we need to
61:25 - kind of scroll through it so that's why
61:27 - it needs to be surrounded inside of a
61:28 - container so
61:30 - so these rows are going to be inside of
61:31 - a container right right these ones
61:33 - yeah okay exactly so
61:37 - visually kind of have a container like
61:39 - this
61:40 - exactly that yeah so this one's going to
61:42 - be row posters so this is actually going
61:44 - to be the container called row posters
61:46 - and then inside
61:47 - we're going to have some elements which
61:49 - is going to be row poster
61:50 - we have several elements with row poster
61:53 - yeah
61:54 - yeah so several row posters
61:59 - right um let me just do this yeah so
62:02 - nice so now what we need to do is we
62:05 - basically just kind of need to map
62:06 - through so what i need to do now is i
62:08 - need to say
62:08 - movies dot map oops movies
62:12 - dot map and what map is going to do is
62:15 - basically going to go through that
62:17 - array that we saw earlier so it's 20
62:19 - different things inside that array
62:21 - and every single time we iterate it's
62:23 - going to get go ahead and get the next
62:25 - stop logan is here
62:26 - awesome hey welcome logan nice essay is
62:30 - here
62:30 - ss like this looks awesome dude nice
62:34 - glad
62:34 - you're watching it one thing i wanted to
62:36 - tell you sunny too is you know about
62:37 - this one
62:37 - devin says you should definitely try an
62:39 - extension like quoka to auto print the
62:42 - console logs in the code editor
62:44 - no way that's actually awesome i don't
62:47 - know about that
62:48 - what is that insane is it a extension
62:51 - i haven't used that we can look at it
62:53 - right now we can have a check and croco
62:55 - yeah let's actually let's go ahead and
62:57 - check that i haven't heard that i wonder
62:59 - how it
62:59 - evaluates things that are like sort of
63:01 - asynchronous live scratch ipad
63:06 - uh just go down and check the docs to
63:08 - see what it does
63:09 - so a weight result oh what oh look
63:14 - oh damn hold on i'm having a lot of
63:16 - trouble seeing this
63:18 - community features only right
63:21 - yeah okay so we got it so is there a way
63:24 - to be uh to make it work or is it just
63:26 - gonna work right here
63:29 - um i don't know i don't know let's have
63:33 - a let's have a check so if i do console
63:34 - movies i guess it would have
63:36 - if i do something like this so const a
63:38 - equals let's just say one
63:41 - and let's say console log
63:44 - a yeah nothing came up no
63:48 - i mean we can we can definitely look
63:49 - into that that'll be pretty cool though
63:50 - that might be handy
63:52 - okay yeah because then we can if we get
63:54 - that working outside of the session it
63:55 - might be handy for everyone to see
63:57 - awesome okay so now what we need to do
64:00 - is we say movies
64:01 - dot map and then that's going to go
64:03 - through that list of 20 things that kazi
64:05 - sort of showed earlier
64:06 - and for every single object so we call
64:09 - that movie
64:09 - so we're writing an es6 function here um
64:12 - so movie
64:13 - and then what we're going to do is we're
64:14 - going to say return me
64:17 - uh console so it's erroring out because
64:20 - i've got an empty div here
64:22 - so here we're going to say return me an
64:25 - image
64:26 - so i want to do an image and the reason
64:27 - why i don't do an image is because
64:29 - we're basically going to see the um
64:32 - we want to see those pictures right that
64:33 - we see so
64:36 - inside of those arrays objects that we
64:38 - saw earlier
64:39 - there was a special property in there
64:41 - which was called
64:42 - um poster path right so it was movie
64:46 - and then it's dot poster path and what
64:48 - we're going to do here is and for the
64:50 - alternative
64:51 - we're just going to say if it doesn't
64:52 - have that we're going to say get the
64:55 - movie dot name so that was another sort
64:57 - of attribute inside of one of those
64:58 - objects
64:59 - oh nice alternative so that's basically
65:01 - like a fallback for images so if it
65:03 - doesn't get the image it'll just get the
65:07 - exactly nice okay cool exactly
65:10 - so it's going to go ahead and give you
65:12 - that oh that is cool instead of console
65:14 - log
65:14 - do console.table that is a great hack
65:17 - look at that
65:18 - oh damn i didn't know that that's nice
65:22 - dev um yeah this this is um
65:25 - we need devin gray on every live stream
65:27 - because he's just dropping major keys
65:30 - this is the one he's really really cool
65:34 - console.table that's the first time i've
65:38 - heard of that nice
65:39 - that is clean
65:42 - you can sort the table too look at that
65:44 - you can sort the table
65:47 - oh damn it's like full ready to go that
65:50 - is
65:50 - actually mind-blowing that is so helpful
65:54 - you can drag it you could drag it look
65:56 - at that
65:58 - nice yeah because sometimes when you use
66:01 - the normal inspector it doesn't come out
66:03 - too nice
66:04 - yeah but uh i would recommend doing a
66:07 - console log to see the structure though
66:09 - so that you would see that it's an array
66:11 - see that it's um an object that will
66:13 - help you sort of understand the
66:14 - structure
66:16 - but that's a really good tip yeah nice
66:18 - okay so
66:19 - what we're gonna do now is for some
66:20 - reason we're seeing this error which is
66:22 - strange so if i
66:23 - open up my inspector let's see what
66:24 - happens so we've got array i'm just
66:26 - looking inside
66:27 - so we can see array and then we've got
66:29 - poster path
66:31 - um interesting so it should be
66:34 - right poster path
66:38 - just trying to figure out why that's
66:40 - actually freaking out um
66:44 - oh yeah okay nice so the reason why this
66:47 - is happening now
66:49 - is because poster part is actually looks
66:51 - something like this so i'm just going to
66:53 - paste it in here right
66:54 - so this i know why this is happening now
66:56 - so i'm going to go ahead
66:57 - and paste a poster so just so you guys
67:00 - see the attribute that i was talking
67:01 - about was something like this it looks
67:03 - something like this right
67:05 - so you can see that's not a url which is
67:07 - why
67:08 - it's falling right oh yeah yeah so what
67:11 - we needed to do
67:12 - is there is a url and i found it
67:14 - previously in the docs
67:16 - so if we go up to the top of the file
67:17 - i'm going to add a const here
67:19 - and this is the base url that we
67:21 - actually need ah nice and then it append
67:23 - to that
67:24 - is where you'll get your images from
67:27 - exactly that so right now what i need to
67:29 - do is i need to say
67:30 - i'm going to do string interpolation so
67:32 - this is a javascript feature and then
67:33 - here i'm going to say
67:35 - um boom i'm going to do this boom
67:39 - and i'm going to say base url so i'm
67:42 - going to do
67:44 - base url and then i'm going to have the
67:48 - movie poster
67:49 - right which is should be all good now so
67:52 - now if
67:52 - we save it we should see some huge
67:54 - images
67:56 - right nice nice so we get some massive
67:59 - massive images now
68:00 - wow that's happening oh yeah there we go
68:03 - yeah
68:04 - because we haven't seen any styling so
68:06 - you just can get these huge images
68:07 - and at this point don't freak out guys
68:10 - it's a completely normal thing and
68:11 - we just need to add some styles to this
68:13 - to get it working right
68:14 - so what we're going to do now is to get
68:17 - that looking a bit cleaner we're just
68:19 - going to do
68:19 - we're going to do a few things at this
68:20 - point we're going to say we're going to
68:22 - add a class name
68:23 - so we're going to add a class name and
68:24 - we're going to say this is a row
68:26 - poster and save it so
68:30 - let's go ahead and you know we should we
68:32 - should actually add pretty yeah
68:33 - by the way um devin said yeah we can add
68:36 - prettier right now too devin
68:38 - said you have to run quoca by holding
68:39 - ctrl shift
68:41 - q on the current
68:46 - control shift here oh no don't do that
68:50 - don't do that
68:51 - oh control shift oh i'll press command
68:53 - shift
68:54 - yeah 150 i was like whoa
68:57 - yeah yeah control
69:01 - shift here logan says those images are
69:04 - very high resolution
69:07 - yeah yeah i think i'll look into it
69:10 - later
69:10 - after this stream yeah we'll check that
69:13 - out so for now
69:14 - what were we doing we were saying did
69:16 - you want to install prettier
69:18 - yeah let's actually do that now because
69:20 - that might actually be really helpful so
69:21 - let's go to extensions
69:23 - i recommend everyone does this by the
69:24 - way guys it's a really handy extension
69:26 - so type in priya
69:27 - yeah and then what i like to do look at
69:30 - this seven
69:30 - million downloads insane seven million
69:34 - developers
69:35 - and then let's go to you need to go to
69:38 - your preferences
69:39 - so if you go to the little apple icon
69:42 - um oh yeah oh nice i'm gonna make it out
69:46 - uh so here if you type in so if you get
69:49 - rid of everything inside the search at
69:50 - the top
69:52 - and just type in format
69:55 - so go ahead and type in format and save
69:58 - yeah this is the most annoying one guys
70:00 - like you will not
70:01 - find this but this is actually like i
70:04 - could not get prettier to work for so
70:06 - long
70:07 - because i didn't know my way around
70:08 - visual studio code that much i'm from
70:10 - pycharm and python world and so
70:14 - here you make sure you go into the
70:16 - settings
70:17 - so step one is get into settings
70:21 - very important step two is type in
70:23 - format
70:24 - okay literally type it hit enter and
70:27 - then this is where it will come up
70:29 - format on save editor check that box
70:32 - once you check that box you will be good
70:35 - to go then every time you hit save
70:37 - prettier your app will run and format
70:40 - all your code for you
70:41 - if you don't do that prettier will never
70:44 - work and you will always wonder
70:46 - why your life is so bad
70:49 - yeah and we'll give a little
70:50 - demonstration of how good this really is
70:52 - so i think you need to follow me again
70:54 - after we installed that
70:58 - nice so now what we'll do is if i
71:00 - basically so you always run into
71:01 - situations where your indentations
71:03 - everything's messed up
71:04 - so now if we pretty much hit save look
71:07 - what happens
71:07 - so as soon as i hit save it just fixes
71:09 - everything yeah so it's going to save
71:11 - you a bunch of time
71:12 - when where and it's going to actually be
71:14 - a lot easier to sort of do stuff so
71:16 - what i'm going to do now is i'm going to
71:18 - create a row.css file so i think i might
71:21 - be able to say row.css
71:22 - nice yep so we create a row.css
71:26 - and if i go to the top and i import that
71:29 - file
71:29 - so this is a benefit of using components
71:32 - because now we can only we can have all
71:34 - of our
71:34 - uh row css inside of uh its own file
71:38 - which is me so let's go ahead and
71:41 - actually style that so
71:42 - let me just check something so row
71:46 - right so what we need to do here is
71:48 - basically i'm going to actually
71:49 - so all of these posters right i want to
71:51 - just style them a little bit so i'm
71:53 - going to go here
71:54 - i'm basically going to say all of the
71:55 - row posters i want to do a neat little
71:57 - trick so i want to say
71:59 - the width is going to be a hundred
72:01 - percent
72:02 - right so it's only going to use up 100
72:04 - of the screen
72:06 - rather than what doing what it's doing
72:07 - now so you see now it's corrected and
72:09 - it's sort of fitting within the screen
72:10 - right
72:11 - i'm also going to add another rule so
72:13 - i'm going to say object fit
72:15 - so this is a really trick object fit
72:18 - contain
72:19 - will keep the aspect ratio so regardless
72:22 - of how i move it and shape it and size
72:24 - it
72:24 - it's going to keep that looking really
72:26 - really nice
72:27 - another thing i want to do okay is is it
72:32 - is it working your object contain thing
72:35 - yeah so the reason why it's not changing
72:37 - at the moment because remember the width
72:38 - is 100 so it's good
72:40 - so it's using up 100 but the aspect
72:42 - ratio is still correct
72:44 - but where that comes into play is when i
72:46 - actually say
72:47 - a set of max height so here if i say max
72:49 - height
72:50 - of 100 pixels and i save this now check
72:53 - this out
72:54 - oh nice okay so yeah
72:57 - so we have a quite a nice looking thing
73:00 - there
73:00 - yeah what we're trying to get it to just
73:04 - so we can
73:04 - all visually see it is like we're trying
73:07 - to get it to look like this
73:09 - you know but right now we have
73:12 - right now we have a giant column but
73:15 - essentially we need to turn it into
73:18 - a row like that yeah
73:21 - so the way we do that now is if we go to
73:24 - remember we actually surrounded all
73:26 - everything
73:26 - inside of a container called row posters
73:30 - right
73:31 - so i'm going to go ahead this thing
73:34 - is in a container called row posters and
73:36 - so basically what we're going to do
73:37 - is maybe drop in flexbox
73:41 - and then make it exactly all column
73:43 - based so flexbox will allow us to just
73:45 - do it with like
73:46 - literally two lines and then boom will
73:48 - go from
73:49 - column to a row yeah so
73:52 - if we i'll comment it out and then i'll
73:55 - uncomment it and show what it does
73:57 - so let's have the app running
74:00 - so the local yeah so without flexbox it
74:03 - does this
74:03 - thank you if as soon as i add flexbox
74:05 - into the container
74:06 - look what happens boom
74:09 - so there we go remove that flexbox let's
74:12 - see that in action again that is sick
74:14 - so flexbox is so nice you guys it makes
74:16 - your life so damn easy
74:19 - do that again exactly so as soon as i
74:22 - uncomment that like boom
74:24 - it's gonna just change everything
74:26 - another thing that um
74:27 - logan dropped that was pretty awesome as
74:29 - logan said uh
74:31 - he's like man between these three clones
74:34 - and jacob's e-commerce store next week
74:36 - my portfolio is going to be tenfold
74:39 - he's like thank you awesome yeah that's
74:42 - exactly what we aim for
74:43 - and i recommend everyone does that so
74:44 - all of these make sure you build them
74:46 - add them to a portfolio that's like
74:48 - the most valuable thing you can have
74:50 - yeah because if you then go to upwork or
74:52 - you go to craigslist or you go to any
74:54 - platform
74:54 - then go and get jobs they will look at
74:57 - your portfolio and they'll be like okay
74:59 - awesome
74:59 - we'll hire you exactly
75:04 - so now we actually have a really nice
75:06 - starting point everything's looking good
75:08 - um i guess what we should do next is
75:11 - i like to add a little sort of
75:13 - transition effect to the poster
75:15 - so that way if it ever changes size it
75:17 - will do it in a really slow way
75:19 - so that's basically just saying if we
75:20 - ever change the size for any reason
75:23 - add a little transition so it basically
75:25 - just takes
75:26 - four i think that's four and a half so
75:28 - 450 so it's like
75:29 - just under half a second i think um and
75:32 - it'll basically just nicely
75:34 - sort of change size um and then what i'm
75:37 - going to do
75:38 - is i'm going to add a margin right to
75:40 - everything so right now you see all the
75:42 - pictures are touching each other right
75:43 - yeah everything's touching each other
75:45 - but we kind of want to have this
75:47 - oh remove that again so do it a few
75:50 - times whenever you do these changes do
75:51 - it a few times like repeat it a few
75:53 - times so you can visually see it
75:55 - yeah nice okay i love that you see that
75:59 - it's a really nice sort of effect right
76:01 - and then it
76:01 - sort of then it stops everything from
76:02 - touching um nice
76:04 - and what we're going to do next is we're
76:06 - also going to add a
76:08 - hover effect so i'm going to go over
76:09 - here and i'm going to say row
76:11 - poster oops and i'm going to say
76:14 - when you hover over it yeah i want to do
76:16 - the following
76:17 - so i want it to kind of grow a little
76:19 - bit right so i want to say here
76:22 - when you say grow what do you mean by
76:23 - that you mean like
76:25 - so when you say you literally mean this
76:28 - thing right when i hover
76:29 - over this boom does that nice little
76:33 - so basically now what we're trying to do
76:35 - is build that experience in
76:37 - our app because ours doesn't have that
76:39 - when i hover over it it's just kind of
76:40 - very static
76:41 - sits there but we want ours to grow
76:45 - exactly that and right now what we
76:48 - want to do is remember we added that
76:50 - transition so it means if we ever change
76:52 - the size
76:53 - it's going to actually so anytime we use
76:56 - the transform
76:57 - effect so i'm going to use that here so
76:58 - i'm going to say transform and scale
77:01 - to 1.08 of your size which is just like
77:04 - a sweet spot yeah it's a very light like
77:06 - light light amount so i just tested this
77:08 - out before so it's a very light light
77:10 - sweet spot here
77:11 - and then we're going to say opacity one
77:13 - um so that i can actually get rid of i
77:14 - don't need that right now um
77:16 - yeah so what we're going to do now is if
77:17 - we go over it because i've combined this
77:20 - with transition
77:21 - so i'm saying apply a very small delay
77:24 - so don't just
77:25 - pop up and be bigger so we'll show that
77:26 - effect in action so if you just hover
77:28 - over it oh
77:30 - look at that that is really nice
77:35 - remove that trash if i get rid of the
77:38 - transition look what happens it'll snap
77:40 - so that oh that looks clunky
77:43 - yeah it looks horrible right but if you
77:45 - have a slight delay this transition
77:47 - then look how silky smooth it looks oh
77:49 - that is silky smooth
77:51 - but with so little like that and that
77:55 - thing
77:55 - right there that is nice it's crazy
77:58 - right
77:58 - that is beautiful so on hover you guys
78:00 - that's what's happening
78:01 - that's cool so okay oh yeah
78:05 - and one good point that michael also
78:07 - makes for
78:09 - you know why we have this distance over
78:10 - here is
78:12 - it's important to keep distance in these
78:13 - times
78:16 - nice yeah so a little bit of social
78:18 - distancing even for our app
78:20 - nice so for the row on
78:23 - so so that container that we spoke about
78:25 - earlier if you notice i
78:27 - because if you just go over to the app
78:29 - now and just start scrolling right look
78:31 - what happens
78:34 - so start scrolling whoa
78:37 - like we don't want that to happen right
78:40 - we don't want to
78:40 - we don't literally my header is moving
78:44 - out of the way whereas in the actual app
78:47 - the header and everything stays there
78:50 - and
78:50 - just this thing moves um and also just
78:54 - that row moves actually i just realized
78:56 - nothing else moves just that road that's
78:58 - really cool so here this entire app
79:02 - moves rather than the row
79:05 - yeah so we want to keep it we want to
79:06 - kind of keep that straight forward there
79:09 - so
79:09 - the way we do that is we go over to our
79:12 - container
79:13 - which is row posters and we add this
79:15 - rule here we say overflow
79:16 - y should be hidden so that's we're
79:19 - saying
79:20 - the vertical axes if there's any sort of
79:22 - room to for
79:23 - for a little scroll bar but we want to
79:25 - hide that and then we're going to say
79:27 - the x axis should now be a scroll
79:30 - right so now look what happens you add
79:33 - it threw in a scroll bar
79:36 - nice that is so clean all right
79:40 - look at that and you have a little spoon
79:42 - yeah it's beautiful hold on one second
79:45 - oh so this scroll bar actually works
79:47 - even on my computer if i just hold shift
79:49 - and i scroll that works too
79:52 - yeah so that's cool right and that's
79:55 - really clean
79:56 - but look what happens when you hover
79:58 - over the uh the the pictures now
80:02 - and all you hold all you have to do dude
80:04 - front end is actually blowing my mind
80:06 - one second this might be like
80:07 - normal stuff for you but it's actually
80:09 - pretty freaking mind blowing for me so
80:10 - like this one
80:11 - line here added the scroll yeah
80:15 - yeah so can you can you also add scroll
80:17 - here i want to see what happens
80:19 - it'll add a scroll on the y-axis right
80:22 - yeah so if we do that now you see it
80:24 - adds a little bit of scroll for the
80:26 - y-axis
80:27 - i don't see any scroll for the y-axis
80:29 - okay can you see that
80:30 - on the right look at that little tiny oh
80:32 - yeah yeah yeah yeah it's a tiny scroll
80:34 - bar it's
80:35 - it's there yeah yeah yeah oh yeah i can
80:36 - go up and down yeah
80:38 - and the reason why that's happening is
80:39 - because remember like think about what's
80:41 - happening here so
80:42 - when it goes a little bit bigger the the
80:45 - actual container is getting bigger so
80:46 - there's a reason to scroll
80:48 - right i see yeah so so here we run into
80:51 - like a front end sort of decision what
80:53 - we need to say is we need to say
80:55 - okay in that case we want to hide the
80:57 - the vertical scroll
80:59 - and what we want to do instead is add a
81:01 - padding of 20 pixels
81:03 - so that when it grows it's going to grow
81:06 - and you can see the growth so that now
81:07 - if you hover over it
81:12 - and now it doesn't crop you see that
81:14 - it's not cropping the tops off
81:16 - yeah right but if i get rid of that
81:18 - padding look what happens
81:20 - yeah it's gonna cross it zooms in and it
81:22 - crops out yeah i see
81:23 - i see what you're saying yeah you have
81:26 - to like if you're going to do a
81:27 - transform you're going to have to pad
81:28 - your container
81:30 - yeah so that's the first thing but if
81:32 - you notice in netflix like in our clone
81:34 - we didn't have that
81:35 - little scroll bar because to be honest
81:36 - it looks a little bit ugly right
81:38 - yeah that's why yeah yeah so what you
81:42 - need to do
81:42 - is you need to basically do this special
81:44 - rule you need to say
81:46 - row posters uh some row posters and then
81:49 - you say
81:50 - colon codon and you say webkit so it's
81:53 - webkit so i think it's dash
81:55 - webkit and then it's dash
81:59 - scroll bar and then here
82:02 - you basically are saying you'll be this
82:05 - is basically a rule to say
82:07 - tell all of the browsers so whether it
82:09 - be in
82:10 - edge chrome firefox whatever you're
82:12 - using
82:14 - display none so this is saying don't
82:16 - ever display
82:17 - your scroll bars but keep the
82:19 - functionality of it
82:23 - nice that is clean no more scroll bars
82:28 - so that way it looks really nice right
82:30 - yeah so that's
82:31 - that's really cool so then we get that
82:33 - working and everything sort of nice in
82:34 - that front
82:35 - now what we're gonna do and this is
82:37 - going to blow your mind a little bit
82:39 - so we've basically just set up the row
82:42 - right we've set up a row it seems to be
82:45 - all good everything seems to be nice
82:47 - um what we're going to do is we're
82:48 - actually going to do a little
82:50 - optimization here so
82:51 - in react whenever we render a big list
82:54 - so in this case
82:55 - i know it doesn't sound like a lot but
82:56 - when you've got 20 items in a row and
82:59 - then you've got a bunch of those rows
83:01 - we should be rendering it in the most
83:02 - efficient way and react has something
83:04 - called a key right
83:06 - and here if you pass you just need to
83:08 - pass some unique
83:09 - information here which is unique to that
83:12 - specific
83:13 - in our case each of those pictures we
83:14 - need to give it like an identity right
83:17 - so that way
83:18 - if anything changes in that row react
83:20 - doesn't simply re-render the entire row
83:23 - it just re-renders what it needs to
83:24 - re-render right so
83:26 - what we can do here is we can say movie
83:28 - dot id
83:29 - because each of those movies that came
83:31 - back actually had their own id
83:33 - yep so we can go ahead and do that and
83:35 - that will fix it for us
83:36 - so if i do this and save it now what you
83:39 - can see is it
83:40 - you wouldn't know it's much but it's
83:42 - actually a slightly bit faster than what
83:44 - it was before
83:45 - nice right so that's a small
83:47 - optimization step that you do
83:49 - yeah remove it real quick i know it's
83:51 - probably not going to show that much but
83:54 - yeah so if we remove it now uh you'll
83:56 - see
83:57 - if you refresh it yeah even i'm going to
83:59 - refresh it refreshes just a little bit
84:01 - slower on to what it almost feels like
84:04 - yeah yeah and when i scroll you're gonna
84:06 - notice it yeah especially when you
84:08 - scroll through and the way
84:09 - sort of react caches and everything like
84:11 - that it
84:12 - really does play a good part in sort of
84:14 - helping out so we can get rid of our
84:16 - little marker now and we've got some
84:17 - simple code that's sort of doing what we
84:18 - want nice
84:20 - so the nice juicy part now is basically
84:22 - where we rendered all the rows before
84:25 - wow this is one cool compliment so devin
84:29 - says it's funny i just struggled with
84:30 - this padding trick for hours yesterday
84:32 - for a slideshow
84:34 - if only this video came out yesterday
84:37 - dude honestly i feel your pain do you
84:40 - know how many times i sat there and i
84:42 - couldn't figure out i had a job once and
84:43 - i couldn't figure out
84:44 - how to overcome that padding issue and i
84:47 - must have spent the entire day
84:48 - trying to figure out how the hell do i
84:50 - get like the padding to show out of it
84:52 - so you're welcome i'm glad i know that i
84:54 - know that pain
84:55 - yeah nice damn it's funny because sunny
84:58 - will know all these things like
85:00 - all of this stuff takes like so many
85:03 - days or weeks or months of pain
85:05 - but then you might just give that trick
85:08 - just up front almost kind of like it's
85:10 - nothing
85:10 - so a person who's listening and even
85:12 - this happens to me because you say it so
85:14 - casually because now it's normal to you
85:17 - and maybe it's not normal to me you know
85:19 - i'm listening to it and i'm like
85:21 - oh maybe maybe it's important but if i
85:23 - hear your voice in this normal team i'm
85:25 - like i'll ignore
85:26 - it it's probably not that important so
85:28 - yeah one thing that's important for
85:29 - everybody if you're watching this
85:32 - just know that whatever value you're
85:33 - getting is months or
85:35 - years in the making on many different
85:38 - you know uh
85:39 - jobs freelancing and all of those skills
85:42 - and just hours and hours of
85:43 - like learning this and you also have
85:45 - your masters right
85:47 - yeah so so yeah when he says it he will
85:51 - his
85:51 - his style is he will say everything like
85:54 - super calmly like it's actually no big
85:55 - deal
85:56 - but like write that [ __ ] down because
85:58 - it's gonna
85:59 - save so many hours and frustration for
86:02 - you guys so i would
86:03 - that's just one thing i want to say um
86:06 - you know just because i know sunny yeah
86:08 - he's a good friend of mines nice yeah
86:11 - it's true actually it's a really good
86:12 - point that causes mention because i tend
86:13 - to sort of forget that
86:15 - very quickly and then it's like because
86:17 - he always rolls me in back to sort of
86:18 - like you're saying it really casually
86:20 - to maybe explain it a bit more so i
86:22 - think something just to know and add to
86:24 - what kazi said there is
86:25 - guys whenever you're sort of coding
86:27 - something or like building from scratch
86:29 - you're always going to run into problems
86:32 - or situations where
86:34 - you would spend hours i'm not joking
86:36 - like we've spent even when me and kazi
86:37 - have been coding before
86:38 - there's been hours where we sit there
86:40 - and then we had a problem
86:42 - one day where we spent hours and then
86:43 - within five minutes we set a timer and
86:45 - we managed to solve the problem
86:47 - yeah so sometimes yeah sometimes it's
86:49 - insane like
86:51 - it could take so long and then suddenly
86:52 - a light bulb will click just don't
86:54 - quit and even like sometimes it's very
86:57 - disappointing because
86:59 - even when we were working on the stripe
87:01 - to make that one form work
87:03 - i mean there's like yeah we spent 80
87:06 - hours and three or four days coding that
87:08 - up like non-stop coding and most of the
87:11 - coding was just like looking at
87:13 - documentation just being frustrated
87:15 - and like not understanding and like we
87:17 - couldn't even make one
87:19 - line of code progress on that project
87:21 - for so
87:22 - long so that happens sometimes
87:25 - definitely it does happen and it's
87:27 - something which is completely normal
87:29 - and you shouldn't feel disheartened by
87:30 - that yeah yeah
87:32 - so we're going to have a little bit of
87:33 - magic here where basically we've just
87:36 - built
87:36 - a bunch of components and we built in
87:38 - such a way
87:40 - that it's going to be really impressive
87:42 - to show you something now so if i go
87:43 - ahead
87:44 - and i just paste these components out so
87:47 - inside of the app
87:48 - the really nice thing now is we have a
87:49 - bunch of different categories so we've
87:51 - got trending now
87:52 - we have top rated so top braided just to
87:55 - be clear
87:56 - i'm gonna say here so they can see it
87:59 - so we have top rated which is going to
88:01 - be this category right here
88:04 - what's the next i think it's action
88:05 - movies action movies right there
88:10 - there's comedy movies yep
88:13 - then it's horror movies mm-hmm
88:18 - romance movies
88:23 - where's my arrow when i need it and
88:26 - terry's oh yeah i spell that wrong yeah
88:29 - documentaries
88:30 - document it teddies right here
88:34 - yeah there we go and here what we're
88:37 - going to do is we are going to add in
88:39 - the
88:39 - appropriate requests so this is another
88:42 - example of if you build something right
88:44 - it's actually going to be very easy and
88:46 - it's going to make your life super easy
88:48 - when it comes to doing it i just need to
88:50 - get the request from ice cream because i
88:51 - don't get the auto complete
88:53 - some reason um so let me go ahead and
88:55 - open up requests
88:57 - so now let's go ahead and pop these in
88:59 - so we've got
89:00 - fetch top rated so this one's top rated
89:04 - fetch and guys you can start from the
89:05 - bottom and i'll start from the top
89:08 - uh you can start popping them in if you
89:09 - want so actually just i'll stop
89:11 - following you
89:13 - oh yeah so fetch action movies
89:17 - comedy and horror movies
89:24 - there we go so that one's documentaries
89:27 - and that one's because this is how you
89:28 - guys are gonna see it
89:29 - so romance that one is yep and then the
89:32 - final one is horror movies
89:34 - so i think let's swap this one out
89:38 - so this one is dot uh
89:41 - fetch horror movies awesome
89:45 - uh now if i just click save the whole
89:48 - app
89:48 - the whole app is literally gonna do this
89:50 - magic
89:52 - oh
89:55 - [Music]
89:58 - that's so cool that just worked
90:03 - just clean it just works look at that
90:06 - hover over it
90:07 - so nice yeah
90:11 - and also we forgot to do one clean up
90:13 - step so
90:15 - when we actually were cleaning up the
90:17 - app if you just uh
90:18 - follow me one more time
90:29 - so let's uh yeah so now what we're going
90:33 - to do is let's go over to app.css
90:35 - so when you actually start off guys i
90:37 - want you to get rid of this stuff
90:39 - so go ahead and clear our app.css it
90:41 - will change the look and feel of your
90:42 - app
90:43 - but we don't want to have anything
90:44 - inside of our app what i would recommend
90:46 - is you go inside here
90:48 - and you add this one rule which does
90:50 - this we say margin
90:52 - zero so because by default the browsers
90:54 - give you this weird margin so if you
90:56 - notice on the right where cause he's
90:57 - got the preview open as soon as i add
90:59 - this one i save
91:01 - look at the imaginary margins that are
91:02 - going to disappear right
91:04 - see that it gets rid of all those
91:06 - imaginary margins right and we just
91:07 - don't want those to start with because
91:09 - we don't want to deal with them
91:10 - um so that's something just a side note
91:13 - you want to get
91:14 - i love dara just get rid of that stuff
91:19 - yeah oh yeah that this one has the mine
91:28 - yep
91:39 - yeah and then that way all of your
91:42 - styling is going to be
91:43 - all of your actual styling it's not
91:44 - going to be getting rid of things
91:46 - index.css you can leave this stuff this
91:48 - is just going to be some font stuff so
91:49 - unless you change the fonts i'll just
91:51 - keep this
91:52 - um but app.css i would change okay so
91:54 - now with that said we've got a nice
91:56 - looking app
91:57 - but have you noticed that the app that
91:59 - we saw earlier
92:04 - uh if you notice the app that we saw
92:06 - earlier uh
92:08 - so we had the the netflix originals were
92:10 - bigger than the trending now top braided
92:12 - so we had larger tiles
92:14 - so yeah we're gonna
92:18 - yeah i can hear you know
92:25 - oh really okay oh yeah yeah
92:29 - that's true actually it might be not on
92:30 - the stream okay
92:43 - okay
92:48 - okay now i can't eat you know
92:51 - cool you can get back to it yeah
92:55 - yeah i got you right okay so now what we
92:58 - need to do
92:59 - is
92:59 - [Laughter]
93:03 - so now what we need to do is change that
93:04 - to app first um so
93:06 - here what we want to do now is there's a
93:08 - few things
93:09 - we need to change so if we notice that
93:12 - look at the deployed app quasi
93:16 - um the deployed version so notice how
93:19 - the
93:20 - those you see the tiles here are bigger
93:23 - right so let's go down
93:25 - so notice how the tiles are bigger and
93:27 - also if you look a bit
93:29 - further down you'll see on trending now
93:32 - we don't actually have uh the posters
93:35 - you have these other
93:36 - thumbnails right yeah yeah
93:40 - so we need to fix this and but we want
93:42 - to use the same component but we just
93:43 - want to have a slight variation
93:45 - so what i'm going to propose is as all
93:48 - of the stuff
93:49 - from the um netflix originals down
93:52 - are the smaller design and everything
93:54 - and it's only one roll
93:56 - at the top which is slightly bigger yeah
93:59 - it's like the height
94:00 - there's like more height here right and
94:02 - maybe less width no
94:04 - wait i think looks so if you look at the
94:07 - posters so the post is actually much
94:08 - bigger
94:09 - as opposed to the ones that you can see
94:11 - in trending now
94:12 - i see yeah so you get a much smaller
94:15 - poster there because we're pulling in
94:17 - not the uh a poster but we're putting in
94:19 - a thumbnail instead
94:20 - got it so what i'm going to do now is
94:22 - i'll show you how we can actually do
94:24 - that so
94:25 - for that bigger one what we're going to
94:27 - do is we're going to pass in
94:29 - a is large row so is large row
94:32 - right and by default what this means is
94:36 - it means true but you don't actually
94:37 - have to write that um
94:39 - so we're going to pass this in so if we
94:41 - go over to row
94:42 - i'm going to go and pull in that prop so
94:44 - we're pulling that in and now
94:46 - i'm basically going to render the styles
94:49 - based on
94:50 - this so the first difference i want to
94:51 - have is rather than having a poster
94:54 - i want to have it so that
94:57 - if the if we're using a large row don't
95:00 - use the poster part but use the back
95:03 - is something called the backdrop part so
95:05 - what i'm going to do is i'm going to say
95:06 - if you're using a large row then use the
95:08 - poster path
95:09 - otherwise use the movie dot backdrop
95:13 - path
95:14 - and this will make sense in a sec when
95:15 - we save it so as soon as i save this
95:17 - notice on the right now all of the
95:19 - trending now top rated and everything
95:21 - look what happens you see that
95:25 - looking nice yeah but the sizing is
95:28 - is the opposite way now so we want those
95:30 - to be smaller and the other one to be a
95:32 - bit bigger
95:32 - right yeah so the way we fix that
95:36 - is we go over to our row.css and i just
95:39 - need to do a
95:40 - few different rules now so firstly i
95:42 - need to apply a class name
95:44 - based on which one was actually coming
95:46 - in so what i'm going to do here is i'm
95:47 - going to do some string concatenation so
95:49 - i'm going to do
95:50 - this so i'm just going to do a little
95:51 - change a tweak here
95:53 - i'm going to say everything gets a row
95:54 - poster class
95:56 - everything gets the original role poster
95:58 - but if it's a large row
96:00 - so if it's a large row then i'm going to
96:03 - give it
96:04 - an additional sort of class called roll
96:07 - poster lodge row poster large right
96:10 - and what this is going to do is we're
96:12 - going to style it basically and say
96:14 - you get the bigger styles if you are a
96:17 - larger row
96:18 - right so if we go into row.css now what
96:21 - i'm going to say
96:23 - is that the larger rows are going to get
96:27 - a max height of 250 pixels
96:30 - but they're going to get slightly bigger
96:31 - so if you see the normal rows got 100
96:33 - pixels but the bigger one
96:35 - is gonna get a 250 pixel limit so this
96:38 - is going to be the netflix original one
96:41 - yeah so now you see that right yep
96:44 - they're a bit bigger and then we go over
96:47 - here and we say row
96:48 - and then i'm going to add another hover
96:50 - rule so just like we've done
96:52 - here but instead i'm going to say this
96:54 - one gets a slightly bigger hover
96:56 - so it's not naught point it's one it's
96:57 - not point zero eight
96:59 - it's point zero nine instead right oh
97:02 - and this one
97:04 - so now check this out look at that so
97:07 - now if you do
97:08 - wow it's really thick right you get a
97:11 - really nice user interface
97:12 - and you get bigger posters at the top
97:15 - and guys
97:16 - this is all using the same component so
97:18 - i really want to stress that
97:20 - so now we have a all just by passing in
97:22 - one prop
97:23 - we can differentiate if if that row is a
97:26 - large row or if it's a small row
97:28 - oh that's really powerful wait hold on
97:30 - hold on so okay so let me actually
97:34 - so go over to app.js and you'll see it
97:36 - here
97:38 - so row okay so you're you're
97:41 - you have a row component and then you
97:44 - are giving it a title prop
97:46 - and where are you telling it it's a
97:47 - large row so
97:49 - just for the large row we pass in this
97:51 - is large row
97:53 - with nothing no equal signs nothing
97:55 - right
97:56 - so so if you don't pass the equal sign
97:58 - it defaults to this
98:00 - okay and so when i go to row
98:04 - it's taking the title fetch url in this
98:06 - large row
98:08 - nice okay and if that is true
98:12 - then it does this large styling
98:15 - yep okay and also got it and this large
98:18 - styling
98:19 - is where is this large styling at
98:22 - it's in row.js
98:26 - no i mean yes sorry yeah
98:31 - nice okay so right over
98:35 - here okay nice nice nice nice nice clean
98:38 - very clean really nice right yeah
98:41 - nice okay so now what we're going to do
98:43 - is we are going to move
98:45 - over to the uh so we we we've got the
98:48 - rows set up so they look really nice
98:49 - they look really clean um
98:52 - what i do want to do is if you just
98:53 - follow me again let's just go to the
98:56 - css oh oh nice yeah so we got to grow
98:59 - so now the outside row if we notice it's
99:02 - actually touching the side so i don't
99:03 - want it to touch the side so i want to
99:05 - basically say
99:06 - row and then i want to give it a margin
99:10 - and i'm going to say give that margin
99:11 - white um sorry margin
99:13 - uh left of 20 pixels
99:16 - so now look what happens um so if we go
99:19 - back and i uncomment that out
99:20 - so you see it pushes it to the to the
99:24 - right because we're giving it a left
99:25 - margin right
99:26 - and that gives that little nice gap yeah
99:30 - um and now what we're going to do is
99:32 - we're going to basically go
99:33 - to our app and basically i'm going to
99:35 - base get rid of this top
99:37 - a clever programmers let's build netflix
99:39 - cone for today
99:40 - and i'm going to mark down some stuff
99:42 - that we want to have here so there's two
99:43 - components i need to build now
99:45 - there's one which is the nav bar
99:48 - so the nav bar should be at the top and
99:50 - there's another one which
99:51 - we're going to call it a banner right so
99:54 - if you go into the deploy that we can
99:56 - give a quick demonstration of what we're
99:57 - talking about
100:00 - so you've got the the banner at the top
100:02 - which is this big thing
100:03 - and then you've got the nav bar which is
100:05 - the the navbar with the query so banner
100:08 - when you say big thing is like where it
100:10 - says the witcher right now
100:12 - yeah exactly okay so we're gonna build
100:14 - this banner out right now
100:16 - right and then um header is this thing
100:19 - right over here where it says netflix at
100:21 - the top
100:22 - exactly okay and now we'll start to see
100:25 - everything sort of pull together when we
100:27 - get this in
100:28 - so banner we're gonna go ahead and
100:29 - create right now so we're gonna go and
100:31 - do
100:31 - we're gonna create banner and i'll
100:33 - create the file so that way it doesn't
100:35 - stop
100:35 - the sharing so i'll go in and create a
100:37 - banner.js
100:40 - and so inside and right now inside
100:42 - banner.js and then we go here
100:44 - i just need to import it so i need to do
100:48 - import
100:50 - from oops import banner from
100:54 - uh banner yep
100:58 - there we go and i remember guys this
101:00 - little snippet trick so we say rfce
101:03 - boom it gives us everything which is
101:05 - always nice
101:07 - um and now i'm gonna just check
101:09 - something so now what we're gonna do is
101:11 - we basically want to so for this banner
101:14 - we need to think about how it works
101:16 - right so it's basically because it's a
101:18 - top
101:18 - it's going to be something called a
101:20 - header instead of a div
101:22 - um so i just like to do that all the
101:24 - like always to start things off but i
101:25 - want to basically have a few things i
101:27 - want to have
101:28 - a title so the title is if you open up
101:30 - the deployed app
101:31 - because it'll be more visual to show
101:33 - them yeah
101:35 - so so we have a title so that's the
101:37 - witcher so this is
101:38 - okay i've got it yeah
101:42 - so we have the the title which is for
101:44 - the witcher we then have
101:46 - um we're gonna have a div and inside of
101:49 - that div we're gonna have two buttons
101:51 - so that's gonna be the ones that you see
101:53 - so play and my list
101:55 - and then we're gonna have a description
101:58 - right
101:59 - yep so these two buttons right over here
102:02 - yeah and for this part um so i'm just
102:05 - going to add a comment here
102:06 - oops um let me just add a
102:09 - one second we add a comment here so
102:13 - this header i'm going to actually give
102:15 - it a background
102:16 - image right so this header i'm going to
102:19 - give it a background image and that's
102:20 - where you see that with your image right
102:22 - yeah
102:24 - so that's basically i always recommend
102:26 - you do this because it kind of gives you
102:27 - a nice sort of overview of what's going
102:29 - on
102:30 - so what i want to do now is i'll
102:32 - basically need to
102:34 - have a movie so this is where we have
102:36 - some some pretty cool logic so i'm going
102:38 - to make a request here
102:40 - so i'm going to need the um so first
102:42 - thing i'm going to need to set up some
102:43 - state so i need to have a movie
102:45 - piece of state and i'm going to do set
102:47 - movie so i'm just setting up some state
102:49 - here
102:49 - and what the purpose of this state is
102:51 - going to be pretty simple and the re and
102:53 - what all it's going to do now
102:55 - is it's basically just going to be
102:56 - responsible for whatever random movie
102:58 - gets selected at the top
103:00 - yeah so yeah this is being this is a
103:03 - random movie because every time
103:05 - you refresh this it actually gives you a
103:07 - new movie right
103:09 - yeah exactly so we're going to write
103:10 - that exact logic right now
103:14 - yeah and it is fast every time i hit
103:17 - refresh that's crazy
103:19 - yeah the styling here was the really
103:21 - really sort of critical part
103:23 - because it's super responsive here um so
103:25 - we'll we'll show that now as well
103:28 - so if we go to what we need to do now is
103:30 - remember we
103:31 - use we have we demonstrated the use
103:32 - effect earlier so use effect is a piece
103:34 - of code
103:35 - which runs based on a given condition so
103:38 - in this case we want this to run
103:40 - once when the banner component loads and
103:43 - that's signified by this
103:44 - because we have nothing inside of it
103:47 - yeah
103:47 - nice yeah and then just like earlier we
103:51 - showed that if you want to run
103:52 - a asynchronous function so anything
103:54 - which makes a call to an external api or
103:56 - something
103:57 - here we're going to say fetch data
104:00 - so you do it like this and then you have
104:02 - your code in here
104:04 - and then you basically you need to
104:05 - actually call it so you say fetch
104:07 - data yeah that's a good idea actually
104:10 - that we should update the uh the side
104:11 - panel
104:12 - yeah i just did i just updated the top
104:15 - yep so now we're doing the banner build
104:17 - yeah oh banner build yeah yeah yeah
104:20 - yeah so now we're building the banners
104:22 - um
104:24 - awesome and then we should tick off the
104:26 - rows because the rows are pretty much
104:27 - done though
104:29 - nice so then what we're going to do is
104:32 - we have fetch data
104:33 - so all i need to do here is i need to
104:35 - actually first i need two things i need
104:38 - requests so i need my request so i'm
104:40 - gonna say import
104:41 - axios which is remember like a sort of
104:43 - postman kind of thing
104:45 - from our axios which had that sort of
104:47 - base url configuration already sell
104:51 - and then i'm going to say import the
104:53 - requests so remember those predefined
104:55 - requests the ones that we have like
104:57 - fetch from the romantic section or
105:00 - fraction fetch from the action movies
105:02 - all of that stuff we're going to import
105:03 - that stuff as well
105:04 - and then what i'm going to do is i'm
105:06 - going to say const request so const
105:08 - request
105:09 - equals and then here i'm basically just
105:12 - doing
105:13 - this so i'm going to say a weight and
105:15 - then we're making a request to get the
105:17 - netflix originals because all of those
105:18 - random films
105:19 - are at the top i want to have them to be
105:21 - the netflix originals
105:23 - but you could have them to be the action
105:24 - films or the trending films or something
105:26 - like that
105:27 - yeah yeah and now this is the clever
105:30 - part
105:30 - right so previously the way we did it
105:33 - was we had something like this we had
105:35 - console.log we had something like this
105:36 - we had request
105:38 - dot data dot results right and that had
105:41 - 20 different results in oops
105:42 - request.dated
105:46 - so this look this was a big array so
105:48 - imagine like you've got the array here
105:50 - it's a bigger and then we had like movie
105:52 - one movie two
105:55 - like movie three right we had a bunch of
105:56 - movies inside of this array
105:59 - right um but the problem is
106:02 - is that now we don't actually want we
106:04 - just want one
106:05 - but i want to basically randomly select
106:07 - it so i want to randomly select
106:09 - which one i want so in order to randomly
106:12 - select
106:13 - which one the way we do it is i say
106:16 - so this function right here
106:20 - is just basically grabbing a random one
106:23 - yeah yeah so this little this this right
106:26 - here
106:27 - is grabbing a num a random number
106:30 - between
106:31 - like zero so the beginning of the array
106:34 - all the way to
106:34 - you have to do minus one so that way it
106:36 - doesn't risk going over
106:38 - yeah um yep so we do that so then what
106:40 - i'm going to do now is i'm going to say
106:44 - i have a nice one i want to show you
106:45 - yeah it's like i have a yeah
106:47 - there you go yeah
106:51 - so you could do that right and then what
106:53 - we're going to do is
106:54 - rather than console logging it here i'm
106:56 - actually going to just go ahead and
106:57 - straight away
106:58 - set this as the movie because this is
107:00 - going to get us one thing back nice yep
107:02 - so let's go ahead and do this
107:04 - and to test that it all works so this is
107:07 - just a random this is this
107:09 - all simplifies to one string
107:12 - guys or one specific movie or object or
107:15 - something right
107:16 - like the yeah it's an object in that
107:18 - array so this will just get you
107:20 - one of those items randomly
107:23 - yeah so i've got some error here where
107:25 - is it because we've got this
107:28 - set movie is this you're not closing i
107:31 - think
107:31 - this uh there's something with the
107:33 - squiggly and this thing happening so
107:34 - something of the closing
107:39 - uh i've got a snippet here pressing a
107:42 - bit so let's just do this
107:43 - so this is a pressure yeah there we go
107:45 - yeah nice so we return the request
107:48 - outside okay cool uh we need to
107:50 - basically
107:51 - uh import user access
107:55 - yeah oh yeah you can here we go all
107:57 - right nice
107:58 - nice and then basically to get to make
108:00 - sure that this is working i always just
108:02 - do a console log
108:03 - i'll do a console log so console log
108:06 - movie so now where do you have clg
108:12 - uh oh that's a snippet that's es6
108:14 - snippets so that's another extension
108:17 - that's another extension called es6
108:19 - snippets
108:22 - um so here what we're going to do now is
108:24 - this is from requests
108:26 - that's what's freaking out
108:29 - okay so now if you open up the inspector
108:31 - you should see
108:32 - that a random movie gets pulled in in
108:35 - the console
108:40 - okay so you should see oh we need to
108:42 - actually stop
108:43 - so i'm gonna just go to row and stop
108:45 - console logging in row because that's
108:47 - spamming the console log um so now if it
108:50 - refreshes
108:51 - we should see it you should see
108:54 - um the original
109:00 - are you getting you're getting the
109:02 - entire object right
109:04 - yeah i am so so now i should be doing it
109:07 - so
109:09 - we've got we're doing we're making a
109:10 - request to the netflix originals
109:14 - banner 21 so it would start off as empty
109:17 - but then
109:18 - if you go down it should actually be
109:19 - correct so let me double check on my yes
109:21 - it is there
109:22 - is that yeah so if you go down uh-huh
109:26 - it's empty it's coming it's coming up on
109:28 - my localhost so if you refresh again
109:34 - so there you go so if you go up nice
109:35 - right here there you go yeah
109:37 - yeah so that's going to be the the movie
109:39 - the randomly selected one right
109:41 - and every time it sort of starts it will
109:43 - randomly get one
109:45 - yeah um so what we're going to do now is
109:47 - we're actually going to
109:48 - use that movie to actually put that
109:51 - background image and do a bunch of stuff
109:53 - around that
109:54 - yeah so the first thing we're going to
109:56 - do is we are going to have
109:57 - a div so i'm just going to go here and
110:01 - inside of this header i'm going to have
110:04 - a div
110:04 - and i'm going to call this div i'm going
110:06 - to say banner content so this is just
110:08 - going to be all the contents that we see
110:10 - including the text the buttons and
110:12 - everything like that yeah everything
110:14 - except
110:14 - yeah yeah right there but the actual
110:17 - sort of header itself should just have a
110:19 - class name of banner so this goes with
110:21 - them
110:21 - and then everything inside here now goes
110:25 - here so we've got some structure to it
110:26 - right
110:29 - okay and then what we're going to do now
110:31 - is
110:32 - for the title i'm going to have a h1 so
110:35 - i'm just going to h1
110:37 - so what's the what's the reason for
110:39 - having a header
110:40 - like this class over here and then this
110:42 - banner contents
110:44 - like why can't you just not have this
110:46 - header over here and just have
110:47 - everything inside of this div
110:49 - yeah so that's a very good question the
110:51 - reason comes to when we start styling it
110:54 - so i need to start doing some stuff with
110:56 - the background image for the banner
110:59 - i don't want to affect this stuff so i
111:02 - want to apply a different rule
111:04 - here than i do to this container so this
111:06 - is applying to that image in the
111:08 - background
111:10 - yeah so that would be applying to that
111:11 - sort of background stuff but the banner
111:13 - contents
111:15 - you run into some small quirks yeah got
111:18 - it but most of the time you you can
111:19 - actually get rid of the div but in this
111:21 - case the way we're going to style it
111:22 - it kind of clashes so which is why we
111:25 - have to be a bit careful
111:26 - makes sense um okay so the next thing
111:29 - now so
111:29 - the first step i'm going to do is
111:31 - actually add that that banner background
111:33 - so
111:33 - let's go ahead and here i'm just i've
111:36 - got a snippet here so
111:38 - let's go ahead and use this so basically
111:41 - i'm adding
111:42 - so in um react what you can do is you
111:44 - can actually add
111:46 - like sort of javascript css right so
111:49 - here you can do style
111:51 - and then you can add you can basically
111:53 - pass an object so an object
111:55 - inside of your jsx and inside the object
111:57 - i'm going to pass these rules so
111:59 - background size means
112:00 - use up all of the size from the the
112:02 - container
112:03 - background image this is remember that
112:06 - base url this is just that base url for
112:08 - any picture
112:09 - and we're saying go and get the backdrop
112:10 - path so
112:12 - not the poster image that we're seeing
112:14 - on netflix originals but the trending
112:16 - now and the top rated that sort of image
112:18 - we want to see that one on the back
112:21 - yeah this little question mark is for if
112:23 - if the movie is
112:24 - ever for any reason undefined it won't
112:26 - freak out and and crash
112:28 - it will just say like handle it
112:29 - elegantly
112:31 - right and background position basically
112:34 - just centers it
112:35 - right so now if we save this we should
112:37 - see so let's
112:38 - scroll up and i'll save it and then
112:41 - we'll see it pop in
112:42 - so now if i save this we should be able
112:45 - to see
112:46 - a um oh right because we haven't
112:49 - actually got any content inside here
112:51 - there's going to be nothing to sort of
112:52 - so that's why it's not going to see
112:53 - anything just yet
112:54 - yeah we need to add something here so
112:56 - what we're going to do is in the h1
112:58 - i'm going to basically do this so i'm
112:59 - going to say i did notice so i actually
113:02 - tested this a little bit earlier and i
113:03 - found
113:04 - that some films that come through here
113:07 - actually either give you a title a name
113:11 - or something called an original name so
113:12 - the way we sort of account for that
113:14 - is we do this all right and we say
113:17 - yes you say if because some apis don't
113:19 - always give you consistent information
113:21 - so
113:21 - to account for it you just find the edge
113:24 - cases
113:25 - so in this case they they can give us so
113:27 - this is so
113:28 - elegant i love that like question it's
113:32 - cool
113:32 - you got the little oars that take care
113:34 - of your edge cases and then this little
113:36 - thing here that is clean
113:40 - that is clean and it doesn't it doesn't
113:42 - empower you as well so it's kind of
113:43 - yeah yeah and because you're using all
113:47 - the truthiness that's already built in
113:50 - you don't have to write because most
113:51 - people would be like if movie title does
113:53 - not exist
113:55 - you know then basically look for a name
113:58 - and then or then look for original names
114:00 - so they would have this like giant if
114:02 - then
114:02 - statement here you're just like using
114:05 - um you know taking advantage of how ore
114:08 - works
114:09 - because yeah that's effectively what
114:11 - it's doing and then this question mark
114:13 - here just handling any errors i mean
114:14 - this is this is a really clean
114:16 - this is really clean it's really elegant
114:19 - yeah
114:19 - i recommend that everyone uses the
114:21 - question mark was actually something
114:23 - pretty new
114:24 - that came in it's called optional
114:25 - training um and it's just yeah as soon
114:27 - as they came in i was super happy about
114:29 - that
114:29 - because it saves you a bunch of headache
114:31 - and stuff so
114:32 - let's save that file now and we should
114:34 - be able to see i saw something at the
114:36 - top right there
114:38 - yeah so if we've remember we haven't
114:40 - started that properly but it's actually
114:42 - starting to look a bit somewhat in the
114:44 - right direction right
114:45 - yeah um so let's carry on with that so
114:48 - we've got that
114:49 - and then what we need to do now is
114:51 - actually so remember we've got this
114:53 - so we can get rid of our little marker
114:54 - here there we go and
114:56 - here we want to have a div so i'm going
114:57 - to say div and this div
114:59 - is going to be called uh banner
115:01 - underscore buttons
115:04 - and inside of here i want to have two
115:06 - buttons so i'm going to have
115:07 - button and then in emit you can see this
115:10 - you can say button times two
115:12 - which is cool and you can actually say
115:14 - so this is a really cool thing in emmet
115:15 - so
115:16 - emits a shortcut that's usually built
115:18 - into vs code
115:19 - so you see you can do this you can say
115:20 - button and then for each of them i want
115:22 - them to have
115:23 - a class name or button and i want to say
115:26 - i want to have two of those buttons
115:27 - and then watch it so as soon as i hit
115:28 - enter boom gives me two buttons
115:33 - nice really cool right yeah
115:36 - kind of saves you from typing out all
115:38 - that boring stuff and it gets the class
115:39 - name right
115:41 - yeah so the first button is going to be
115:43 - called play the second button is going
115:44 - to be called my
115:46 - list yeah uh
115:49 - and then that's the same and it's called
115:52 - emmett
115:53 - no i know i know but but but what did
115:55 - you do to make sure it got the class
115:56 - name did you give it the class then when
115:58 - you hit
115:59 - the autocomplete or whatever
116:02 - yeah you didn't actually write this
116:03 - entire thing in in the one emmet
116:05 - statement so i do div
116:07 - yeah so that i want to div with banner
116:10 - buttons oh yeah yeah you did give it a
116:12 - class side of it
116:14 - i want to have a button with banner
116:17 - uh buttons and i want to have two of
116:19 - those and look what happens
116:22 - if i say oh nice yeah
116:26 - it all happened at once yeah that is
116:27 - nice slick
116:29 - really good and to auto complete it you
116:32 - what do you what do you actually
116:33 - what what's the hotkey to autocomplete
116:35 - an emmett statement
116:37 - you just hit enter it will automatically
116:39 - start to do it so you know like how you
116:40 - did you do h1 and you click enter
116:44 - that's emmet nice okay awesome i love
116:47 - how your girlfriend marabon she is like
116:49 - stopping people from spamming in the
116:51 - chat that's real support
116:58 - i think we actually have a we have a
117:00 - mediator right we have a few
117:01 - we have multiple mediators yeah
117:05 - yeah go melbourne nice uh
117:08 - so we've got the div and the last thing
117:10 - we're gonna do is description so
117:13 - uh i'm gonna quickly add a description
117:15 - so i'm gonna use h1 and just say
117:17 - uh class name so i'm gonna get a class
117:20 - name
117:21 - of banner oh i should have used emmett
117:23 - here
117:24 - comment description that's fine
117:27 - description and then here i'm basically
117:29 - going to use
117:30 - the movie overview so here movie
117:34 - overview so that's another property
117:36 - which is actually just they actually do
117:37 - give us a description
117:38 - so it's like a synopsis right so we're
117:41 - gonna do that
117:42 - so nice so we have everything on the
117:44 - page in a rough fashion
117:46 - right so it might not look that pretty
117:47 - but it's it's all sort of there
117:49 - um okay so now we're gonna actually
117:51 - style that because it looks really
117:53 - horrible right now yeah the
117:54 - information is there i agree yeah it
117:57 - looks
117:58 - really horrible so this is gonna be a
118:00 - real transformation right now that you
118:01 - guys are gonna see
118:02 - so we need to i'm gonna create a
118:04 - banner.css so banner.com oh the button
118:07 - is there's buttons are there too i just
118:09 - realized the buttons are there
118:11 - marvel's daredevil the header is there i
118:13 - mean as a back-end developer i mean what
118:15 - else do you need
118:16 - you got everything what's that yeah i
118:19 - mean like a back end developer at this
118:20 - point would say i'm done
118:22 - yeah yeah jacob jacob at this point
118:25 - would usually be like i'm finished
118:27 - yeah yeah
118:32 - so what we're going to do here is now
118:35 - we're going to have
118:36 - banner so let's do this
118:39 - what was that keep going keep going keep
118:41 - going yeah so we're going to have the
118:43 - banner
118:44 - um and here i'm going to say the color
118:46 - of the text is going to be white
118:48 - so that's the first change yo check this
118:50 - out bro
118:51 - uh devin just said didn't know about the
118:55 - asterisk 2 in emmett that's crazy to me
118:58 - i also
118:59 - didn't know about the nested emmet
119:01 - commands you just sped up my workflow
119:03 - like crazy
119:05 - dude you can even put brackets around
119:07 - complicated emit statements and do times
119:09 - too
119:10 - so you get the whole thing it's insane
119:13 - like you did you could do that level of
119:15 - like
119:15 - it's it's really crazy damn bro i
119:19 - did i just realized i look adorable with
119:21 - this little thing
119:22 - right right underneath here you know i
119:24 - got a good look going so i'm just gonna
119:25 - keep it
119:28 - i mean you got a few people saying can i
119:29 - be your friend cozzy so i think it's
119:31 - like
119:32 - slick is working all right guys let's
119:35 - get back to the code
119:38 - oh nice let's see what you did there
119:42 - object fit
119:45 - and then here we're gonna do i'm gonna
119:48 - give it a set height
119:49 - so a height of i saw was playing around
119:52 - with it earlier and i think
119:58 - like the most specific thing yeah as
120:01 - like when you're a good developer you
120:02 - guys you can just
120:03 - nail this in the first try like
120:07 - yeah honestly
120:10 - because all i was doing was looking at
120:12 - the the actual
120:13 - netflix app and i was kind of just like
120:15 - adjusting that number until it came
120:17 - somewhat near it
120:19 - um so yeah i said that's how i got that
120:21 - number
120:22 - um nice so what we're going to do next
120:24 - is we have the height
120:26 - and then i'm also going to do
120:30 - the contents next so the contents are
120:33 - what actually contain
120:35 - everything inside of the um so if we
120:37 - look at our banner here
120:39 - everything that we have so all of the
120:41 - the sort of text elements so you see
120:43 - where the buttons are where the header
120:44 - is where the description is
120:46 - is all inside of banner contents so if
120:48 - we go over to banner contents i'm going
120:50 - to add a margin left so i'm going to add
120:51 - these one at a time so
120:53 - margin left is first gonna push the
120:55 - stuff slightly away from the edge
120:57 - so as soon as i save that we'll see
120:59 - everything push slightly away from the
121:01 - edge
121:02 - we should see that uh oh it hasn't saved
121:04 - yep
121:06 - so now you'll see on your screen it
121:07 - should have pushed away from the edge
121:09 - so banana.css am i oh i'm not importing
121:13 - oops so yeah that happens at times
121:17 - say import banner dot cs oh
121:26 - there we go so save so now you can see
121:29 - that we've got white text and it's
121:31 - pushed away slightly
121:32 - then i'm going to add a bit of padding
121:33 - to the top so i'm going to go ahead and
121:36 - get rid of this
121:38 - and then i'm also going to change the
121:40 - height of the content so you see we
121:42 - added the
121:43 - it changed the the height there right
121:45 - we're also going to change the height
121:49 - but you see it's it's sort of flying off
121:51 - it right
121:53 - which is yeah so we will kind of want to
121:57 - limit that height
121:58 - so i'm setting a fixed height of 190
122:02 - pixels
122:07 - oh nice that's the melbourne sister hey
122:10 - sir
122:11 - nice oh that's cool
122:15 - she's gone back to university so she's
122:17 - probably watching from birmingham right
122:18 - now
122:19 - nice yeah got the whole family in
122:23 - um so now let's actually style the title
122:27 - so um let's go ahead and change
122:30 - banner tai also banner title
122:35 - so banner title is going to be the top
122:38 - title that was talking about so whatever
122:40 - the film
122:41 - whether the film was called we're going
122:43 - to title it style it here so
122:45 - i'm going to change the phone yeah
122:49 - that's what i mean you've already got
122:50 - that sort of gap that we saw earlier
122:51 - right
122:52 - so i'm going to
122:56 - yeah exactly so right now
122:59 - i'm actually gonna um use something
123:01 - called font size
123:03 - so font size um but i'm gonna use rem so
123:06 - i inspected netflix earlier and i was
123:08 - trying to figure out what they had
123:10 - and they use these exact values so i use
123:11 - them too so rem is a different
123:13 - measurement so
123:14 - we're using pixels but ram is also a
123:16 - good one
123:17 - font weight this is going to change the
123:19 - sort of boldness of the
123:21 - uh the top and then i'm going to add a
123:23 - tiny bit of padding
123:24 - underneath the banner title so this one
123:26 - here so you should see now as soon as i
123:28 - click save
123:29 - oh my god a shout out nice
123:32 - and she got highlighted on the screen
123:36 - nice
123:40 - yes there we have a nice little thing
123:42 - going so we've got
123:43 - that i don't know did that take effect
123:45 - on your screen
123:47 - or no on your
123:51 - yeah so on the title so banner title
123:56 - no i didn't actually add the class name
123:58 - okay so here that's why we didn't see
123:59 - that so if we go here
124:02 - yeah so as soon as i add this in so
124:05 - class name so if i do banner underscore
124:07 - title banana tile so now if i save that
124:11 - you should see
124:13 - um we should have a little bit there we
124:15 - go so you see the text got a little bit
124:17 - bigger
124:18 - and it has a tiny bit so that still
124:21 - looks rubbish
124:22 - the the sort of um description so i'm
124:24 - going to start that next
124:26 - so what we're going to do for the the
124:28 - description is
124:30 - i'm going to go ahead and do banner
124:32 - description
124:34 - oops bem you do double underscore so
124:36 - it's banner description
124:39 - and then here i'm going to do a bunch of
124:41 - rules now to get it looking as we want
124:43 - it so
124:44 - firstly i'm going to change the width
124:45 - because if you notice in um
124:48 - in in netflix and stuff like that the
124:50 - width never sort of goes past
124:52 - a certain amount so i checked out what
124:54 - they were using and it's 45 rem
124:56 - and that's pretty much a case of it will
124:58 - stop it going
124:59 - greater than a certain width on the page
125:01 - okay
125:03 - the next thing is line height so again i
125:06 - figured out that they use 1.3
125:08 - and i was trying to sort of mimic what
125:10 - they had on theirs
125:12 - and there was a few other things so
125:13 - there was padding top and font size
125:15 - i also grabbed from them so the padding
125:17 - top was one rim
125:18 - so you'll see it push slightly up and
125:20 - the font size is not okay
125:22 - so you can see it's already starting to
125:23 - start start to sort of look like them
125:25 - right
125:26 - and the way i did that is i sort of went
125:27 - to their website and i just inspected
125:29 - and i could see the different sizes and
125:30 - i was playing around until i got like a
125:32 - a close sort of number comparison right
125:35 - uh
125:37 - okay so what we're gonna do now is uh
125:39 - also i'm gonna add these two rules so
125:41 - the first one is max width right so max
125:44 - width is just gonna limit it
125:46 - always to 360 pixels so you see that it
125:49 - pulled it in
125:50 - right so if i get rid of that it flies
125:53 - off to the side
125:57 - yeah so this is completely going to be
125:59 - responsive and it will keep it very very
126:01 - nice
126:02 - and then the height the height is also
126:04 - something we need to sort of bring in
126:06 - right so i'm going to give it a height
126:07 - of 80 pixels
126:09 - right so as soon as i do that it should
126:12 - yeah so i have 80 pixels so that should
126:14 - limit it to 80 pixels
126:16 - um okay so we've done that the
126:19 - next thing is right now of course if you
126:21 - noticed in our demonstration
126:23 - it kind of truncated the text so when i
126:25 - say truncated i mean
126:27 - when it gets too big um success thanks
126:30 - and you've got to get back to teeth
126:32 - see you soon alright all the best she's
126:34 - a dentist
126:36 - nice um so truncate is basically when
126:40 - we have too much text on the screen so
126:43 - you want to just have
126:44 - that little ellipsis you know the three
126:45 - dots
126:48 - yeah so the way we do that is if we go
126:49 - to banner.js
126:51 - then what we could do here is i'm going
126:54 - to create a function now
126:55 - and this is a function i found online
126:57 - and it's completely copied and pasted
126:59 - from a stack overflow article
127:00 - but it works really well um so i'm going
127:03 - to paste the function here so it's
127:04 - truncate and it basically takes a string
127:06 - and you give it a number here so n is a
127:08 - number which is basically saying
127:10 - truncate after like
127:11 - let's say 500 characters and you can see
127:14 - here
127:19 - exactly
127:24 - exactly that yeah so over here where it
127:27 - says movie overview
127:28 - i'm just gonna pop it in here so you see
127:31 - truncate
127:32 - and i'm saying after 100
127:35 - yep so now if you refresh so that one's
127:38 - actually quite small so if you refresh
127:40 - one more time
127:48 - oh there we go so you see that it
127:49 - truncated yeah
127:51 - yeah so that's a really nice way of sort
127:53 - of keeping it nice and short and
127:55 - that was a first for me as well doing
127:57 - that which is quite nice
127:58 - um okay so the next one
128:02 - is the buttons so the buttons look a bit
128:04 - like ugly right now so
128:05 - i'm gonna just copy this entire snipper
128:07 - because this pretty much the buttons i
128:08 - literally got
128:09 - the styling exactly from what i saw so
128:13 - this exact snippet right here
128:15 - is the cursor is basically going to make
128:17 - it so it's that little finger
128:19 - pointer the color of the text is going
128:21 - to be white
128:22 - i don't want to have any borders the
128:24 - font weight should be slightly bold
128:26 - i bought a radius of this means it's
128:28 - going to be slightly rounded on the
128:29 - corners
128:30 - and then a bunch of padding and margin
128:32 - rules and then the background color this
128:34 - is like a
128:35 - light gray that we have here and then
128:36 - the slight padding on the bottom so to
128:38 - make it easier to reach
128:43 - i can hear you yeah
128:59 - also guys if you can't hear quasi
129:01 - because it might not be coming through
129:02 - oh
129:03 - no i have somehow i was muted for like
129:09 - a really long time like probably
129:16 - oh really like i just realized i was
129:18 - probably muted for literally like half
129:20 - the stream or something
129:22 - something really long oh dumb
129:25 - yeah i just i just saw that so thank you
129:28 - guys for
129:28 - letting me know that was muted now it
129:30 - should be working okay i'll
129:32 - keep the i was i was hiding the volume
129:35 - levels sound levels i'm just going to
129:36 - keep them visible
129:37 - at all times so we can see it yeah
129:42 - nice um okay so i think if everything if
129:45 - it's all working yes now
129:46 - now it's working okay nice um guys if
129:49 - that ever happens just let us know
129:51 - um cool so now what we're going to do is
129:53 - i'm going to save that so
129:55 - the css rules for that and we should see
129:58 - you see the buttons have got a nice
129:59 - little star now
130:02 - ah yeah yeah yeah right here i can see
130:05 - them they're looking clean
130:07 - look at that yeah and the one more rule
130:10 - that i'm going to add here so i'm going
130:11 - to say for the button
130:12 - when we hover so look at that it's
130:14 - already looking like fresh but
130:16 - when we hover over the button i want it
130:18 - to sort of invert the color
130:20 - all right i wanted sort of the text to
130:21 - go black and then i want the background
130:22 - to go slightly gray
130:24 - white and i want it to transition when
130:26 - it does it so i'm adding this snippet of
130:28 - code here
130:30 - yeah yeah so this is transition all just
130:33 - means give every sort of transition that
130:35 - could have come
130:36 - come into play um allow it to sort of
130:39 - slightly fade over so if you now hover
130:42 - over it you'll see it's got a really
130:43 - nice sort of gentle
130:45 - um styling so if you hover over the play
130:48 - in my list button
130:50 - oh nice yeah
130:54 - yeah awesome so now we actually have
130:57 - pretty much everything set up but
130:59 - there's one thing that we need to do now
131:01 - so as you can see everything looks nice
131:03 - right but it doesn't fade really nicely
131:05 - into netflix originals
131:07 - right yeah so there's two things we need
131:09 - you know the first thing is
131:10 - cuts off a little bit uh so that's more
131:14 - the resolution so it sent
131:15 - us off but like that's sort of a
131:17 - compromise so if you scale in you see
131:19 - it sort of scales yeah so that's gonna
131:22 - include that's gonna need some
131:23 - additional code but
131:24 - for now it gets the majority of screen
131:26 - sizes you see that like it would work
131:28 - from sorry but like that's more of a
131:30 - dynamic issue
131:31 - yep um but in this case what we need to
131:33 - do now is the background of the app
131:35 - so i'm going to go ahead and find out
131:37 - what we do what we've done here so
131:38 - background of the app
131:39 - so if we go over to our app.css
131:43 - i'm going to add a slight background
131:46 - cover
131:46 - a background color so you see the entire
131:49 - app is surrounded by a div
131:51 - here i'm going to style that div and
131:53 - give it a background color
131:55 - of background color of
131:58 - this so one one one so this is i think
132:00 - this is like a it's near to black
132:02 - i think it might be black but it's
132:03 - pretty much just slightly off it's just
132:05 - slightly off right
132:06 - oh nice yeah so it's starting to look a
132:09 - little bit better but i mean like the
132:11 - text on the uh
132:14 - the text is gone yeah where it says
132:15 - trending now and all of that
132:18 - yeah so we need to go too oh i see
132:20 - because it's actually black
132:22 - that's why yeah you see like it's
132:25 - like a nice kind of subtle sort of uh
132:27 - gray right now right
132:28 - yeah so all we need to do is go to our
132:30 - row and change the color of the text so
132:32 - color to white
132:33 - so if i save that now boom
132:35 - [Music]
132:37 - yeah sort of gets that color back so
132:40 - what we need to do now is if you look at
132:42 - the deployed version
132:46 - so if you check out the deployed version
132:48 - yeah uh
132:49 - you'll be able to see there's like
132:50 - there's this really nice kind of
132:53 - uh gentle sort of um fade
132:56 - right so that fade looks super nice like
132:59 - and it adds that sort of final sort of
133:01 - finishing touch to it right
133:02 - so if we go over to banner so i'm going
133:04 - to go over to mana right now banner.js
133:07 - and what i'm going to do is so if i go
133:09 - to mana
133:11 - oops banner dot js
133:14 - um that's not my banner oops dot js here
133:18 - so if i go here now what i'm going to
133:20 - add is i'm just going to add an empty
133:22 - div
133:23 - right so this is this might sound very
133:24 - strange but i'm going to add an empty
133:26 - div
133:27 - and it's just going to have this so in
133:29 - bem whenever you've got the like we're
133:31 - saying we want to have a banner but
133:33 - it's going to have a modifier so the
133:34 - modifiers we're going to say fade bottom
133:36 - right i think you're not uh following me
133:38 - anymore are you i am
133:39 - are you oh yeah nice yes we're going to
133:42 - add a fade bottom so
133:44 - now i'm going to style this in css and
133:45 - basically we're just going to make this
133:48 - like an invisible sort of banner which
133:50 - is just going to be
133:52 - sitting there and it's just going to be
133:54 - the only purpose it's going to have
133:56 - is to essentially make it look nice and
133:58 - and fade into the the bottom
134:00 - right so the way we get that working is
134:03 - we basically need to add the following
134:06 - so this height i've calculated based on
134:10 - the height that we use up here
134:13 - the one that we've done it takes it
134:16 - takes them playing around guys whenever
134:17 - you have
134:18 - whenever you have like a fade you're
134:20 - honestly gonna have to play around with
134:21 - it and i'll show you what i mean by that
134:23 - so this is this is a background image
134:24 - it's got a linear gradient
134:26 - yeah so if you inspect it
134:30 - if you inspect it i'll show you what i
134:31 - mean wait wait what what is about what
134:34 - has that um is it
134:37 - this over here has a little uh gradient
134:42 - no so yeah so if you inspect uh uh so if
134:45 - you click the inspector and you
134:46 - basically
134:48 - click over you you if you click over
134:50 - where the gradient is
134:51 - so if you click the inspector little
134:53 - thing so if you you see on the left
134:55 - yeah grab that and then go to the bottom
134:58 - so remember i put it underneath right
135:00 - i chucked it underneath the the header
135:02 - stuff right so it's just
135:03 - underneath the closing bag of the header
135:05 - so that's why it's at the bottom and
135:06 - then i've given it a
135:08 - a like a height a set height and you can
135:10 - see now
135:11 - what it is it's just like an empty
135:13 - container with a linear gradient
135:15 - ah i see so yeah when i basically take
135:17 - it out
135:18 - oh that is cl that is nice dude that is
135:21 - so
135:21 - clean like it just adds a little touch
135:24 - because when i
135:25 - add it or take it away it makes a big
135:28 - difference yeah
135:29 - and honestly that's one of the things so
135:31 - front end development
135:33 - is like all about these subtle changes
135:35 - and then when they come together you're
135:36 - like whoa okay that just made the whole
135:38 - thing look really nice
135:40 - yeah like this looks so nice i mean this
135:42 - looks like a full-on
135:44 - final project you know it doesn't just
135:45 - look like oh here's another
135:47 - dummy app that we're building yeah
135:50 - like i've seen a few dummy apps and
135:52 - stuff like that and they just didn't
135:53 - look that clean so i went
135:54 - sort of and added these extra little
135:56 - things that sort of add or get closer to
135:58 - the actual netflix
136:00 - um so nice so i guess now that's the
136:02 - actual top banner done
136:04 - right that's the top down so what's up
136:08 - no no keep going keep going i'm just
136:10 - talking about i'm talking about frankie
136:12 - oh so now what we need to do is we need
136:14 - to add the final thing so the
136:16 - app so the nav so this is one the final
136:18 - thing so
136:19 - i think we can take off i just want to
136:22 - say like this app looks
136:24 - so nice i mean it just looks so clean i
136:27 - feel like if people want to see
136:29 - us do part two or part three of it where
136:31 - if they want to see
136:32 - user authentication around netflix or
136:35 - they want to see
136:36 - um i don't know yeah being able to
136:38 - register have your own account things
136:40 - like that
136:41 - yeah i mean that's something maybe we
136:42 - can even build it into the course sony
136:44 - like add it
136:45 - add it into profit with javascript that
136:48 - would be amazing yeah because we could
136:50 - actually have the um
136:51 - sort of uh you know that login screen
136:54 - that pops up on netflix and then it says
136:56 - which user is sort of in the account we
136:58 - could do that
136:59 - yeah and uh this is what here's what
137:01 - devin is saying devin says
137:02 - i've i'm finally seeing bem in action i
137:05 - know what it does i've seen companies
137:07 - use it but i've never
137:08 - actually tried writing it before it
137:10 - makes more sense now
137:12 - yeah honestly that's really the case
137:15 - with me when i first saw bem
137:17 - i was like um i i just i didn't really
137:20 - agree with that i was like why do i need
137:21 - to use this when i used it with the
137:22 - components
137:24 - i just saw that said this movie looks
137:27 - good
137:28 - nice sunny showing us the nitty-gritty
137:31 - with the british accent
137:34 - yeah like how we say it is like it's
137:37 - very
137:37 - knit nitty-gritty you know and you're
137:39 - just like you'll just eat all of that
137:40 - ni it's my favorite thing me agree
137:44 - let's get down to the [ __ ] so now we
137:47 - need to do i think logan said forget
137:49 - uh react teaching is sunny is teaching
137:51 - me lots of nifty css tricks oh thank you
137:53 - very much yeah i'm glad you guys are
137:54 - finding it useful
137:55 - it took me a long time to sort of work
137:58 - out all of these
137:58 - like little kinks in sort of css stuff
138:02 - um i think what would be cool cars is if
138:04 - we actually do a flexbox foggy one one
138:05 - day
138:06 - yes i think a lot of people are useful
138:08 - yeah i really think so i think
138:10 - that would be awesome and uh it is
138:13 - devon also says if you want to overlay
138:15 - gradient over an image
138:16 - you can just do background linear
138:18 - gradient but if the images are dynamic
138:20 - then it's better to add the fade on a
138:21 - separate element
138:24 - yeah so if the images are done at this
138:26 - pattern
138:27 - yeah exactly so it's kind of a mix
138:30 - between like
138:31 - there's always going to be like one way
138:32 - or another i would honestly recommend
138:34 - just playing around with it i've done
138:35 - this approach in some cases i've done
138:37 - different
138:38 - approaches than others um just find what
138:40 - works for you
138:41 - half the time you end up forgetting
138:43 - about what you did five months ago so
138:45 - i'd recommend you just kind of keep
138:46 - track of these or keep a portfolio is so
138:49 - good because you can go back and check
138:50 - the code and see how you did it yeah
138:53 - it's so hard to point like i'm trying to
138:56 - point where
138:57 - we're working on but it's really hard
138:58 - because it's all like
139:00 - inverse of everything right there yeah
139:04 - there you go build the banner so now
139:07 - now we're actually done on the banner so
139:09 - now we're moving to build number
139:12 - so i think it's time to uh time to drop
139:15 - that little
139:16 - the little chime so we've got this oh oh
139:19 - yeah
139:20 - okay hold on we're done with that yeah
139:23 - we're done on the banner yeah when i do
139:26 - this
139:26 - um when i change these things does it
139:29 - actually show it to you guys when i'm
139:32 - like yeah can you guys actually see the
139:35 - editor window
139:36 - yeah can you guys see the editor window
139:38 - with the color open and everything i
139:39 - actually don't think they can dude like
139:41 - ecam is
139:42 - sick you can't miss so yeah because
139:45 - otherwise they would see like sunny and
139:46 - cozy in the top left or something so
139:48 - so what is uh so we just got done with
139:50 - this what are we on now
139:53 - so we are now moving to the number
139:56 - okay let's build nav bar
140:00 - yeah and we'll do this and then we're
140:04 - gonna go
140:04 - to the build the banner and now we're
140:08 - gonna add a little
140:09 - check mark next to it and uh now we're
140:13 - gonna
140:13 - put our now we're gonna be working on
140:15 - build the navbar so that's where the
140:16 - pointer is going to go
140:18 - and i think it's time for a
140:20 - [Music]
140:22 - just hey i didn't i don't think they can
140:24 - hear it they can't
140:26 - no one no no they heard that it broke
140:30 - some of their ears
140:32 - yeah now they're they they can hear him
140:34 - they heard it twice not terrible
140:36 - all right guys let's let's get it
140:40 - nice all right so now we're going to
140:42 - create a navbar component so i'm going
140:44 - to go ahead and create
140:45 - nav.js and while i'm there i'm actually
140:48 - going to create a nav.css so nav.css as
140:51 - well
140:52 - nice so we've got nav.js css so inside
140:56 - of our app
140:56 - i'm going to basically pull that in so
140:58 - i'm going to say nav
141:00 - like that and then here in nav i'm going
141:03 - to say rfce
141:04 - because we love that little shortcut and
141:06 - boom we get we get in that bar
141:08 - so now and also this is actually one of
141:12 - the cleanest builds we've done like look
141:13 - at the
141:14 - the actual layout of the app it's
141:16 - actually what you're seeing it's like
141:18 - the nav bar then the banner
141:19 - then all of the rows like this is how
141:21 - component-based design should be
141:23 - because then if you need to jump into it
141:24 - you can just jump into the appropriate
141:26 - like sort of component
141:27 - and work on it um so
141:30 - now this is actually a good idea i just
141:33 - wanted to mention this
141:35 - uh somebody on our facebook said it
141:37 - would also be good if you include how
141:40 - movie suggestion works in the course i'm
141:42 - sure i'm not the only one who's curious
141:44 - about that so i'm sure they're i think
141:45 - they're talking about
141:48 - you know how netflix suggests movies to
141:50 - you or how they make recommendations so
141:52 - i think that could actually be adding
141:54 - some data science portion to this
141:56 - project could actually be really cool
141:57 - like react
141:58 - data science and that would be cool
142:02 - yeah i would wonder how we would do it
142:04 - to be honest but um
142:05 - i mean we could actually mess around
142:06 - with firebase see if they have some they
142:08 - have some machine learning stuff on
142:09 - there
142:10 - yeah um we could definitely look into it
142:11 - yeah that would be cool that would be a
142:13 - lot of fun
142:15 - yeah everyone said we definitely heard
142:16 - it and everyone think we heard it i
142:18 - heard it
142:21 - bloody hell oh yeah ready yeah
142:25 - all right so now we've got the um yeah
142:28 - so the top so
142:28 - now i'm going to give it a class name
142:31 - the class name of nav
142:33 - so last name of nav and then we're gonna
142:35 - have at the top now so
142:37 - i need the netflix logo and i need that
142:39 - little user avatar
142:41 - right so the first one i'm gonna have is
142:43 - this
142:44 - so i'm gonna have the nav logo so
142:47 - this is literally a netflix logo there's
142:49 - a link to a netflix logo
142:51 - uh an alternative it should always be
142:52 - like context specific so in this case
142:54 - it's a netflix logo
142:56 - so if i save that it's not defined
143:00 - import import now from
143:03 - [Music]
143:06 - no there you go
143:11 - yeah so if we see that you should be
143:12 - able to see um
143:14 - okay so one actually may not be there
143:19 - so it's not actually there at the moment
143:22 - what we can do is oh no
143:24 - wait wait no it's there it's a very cute
143:27 - tiny little nav bar
143:30 - actually it kind of looks cool
143:34 - yeah like if you're in full screen and
143:36 - you come to netflix like this i mean i
143:37 - don't know it kind of looks actually
143:39 - cool like screaming at you aggressively
143:44 - um so what we're going to do now is
143:46 - we're going to go into our nav
143:49 - by the way just so we can put it side by
143:50 - side
143:52 - so you guys can see what it actually
143:54 - should be like
143:56 - is um this netflix should look like that
144:01 - right there yeah so that's what we're
144:04 - working on
144:05 - should be a much smaller little logo so
144:08 - i'm going to add the second logo which
144:10 - is the little avatar that you saw on the
144:11 - right
144:12 - yeah so if i save that so that's pretty
144:15 - much a link to a very small avatar so
144:16 - you should see
144:17 - on the on your screen now you've got
144:18 - that little smiley face right yeah very
144:20 - little
144:21 - so tiny so now this would be a really
144:24 - good exercise for everyone to pay
144:25 - attention for it it's going to be pretty
144:27 - much how we use flexbox and we combine
144:29 - that with
144:30 - uh fixed positioning to get everything
144:33 - that we need
144:34 - in the correct layout and form right so
144:36 - let's just put it side by side real
144:38 - quick just to kind of address what
144:39 - you're talking about so
144:41 - basically we're going to be using so
144:43 - right now first of all this is
144:45 - in a column and this is in a row
144:49 - yeah so we're probably going to use
144:51 - flexbox and
144:52 - do that put it in a row like this right
144:56 - exactly and then are we going to be
144:58 - using object fit contain
145:00 - to make the sizes smaller of this or
145:02 - does flex
145:03 - box will automatically do that no we do
145:06 - need to whenever you're dealing with
145:07 - images if you want to keep the aspect
145:09 - ratio
145:10 - so that it doesn't stretch or act
145:11 - overweight you have to use object fit
145:13 - contain
145:14 - got it and how will we make it this
145:16 - small
145:18 - so that we're going to use a uh we're
145:20 - just going to set the width and height
145:22 - of it
145:23 - yeah so we're going to set the width and
145:25 - height of it and then we're going to
145:26 - allow flexbox to determine how far apart
145:28 - the two elements should be
145:30 - got it that makes sense okay yeah
145:33 - and i'm also going to show you a little
145:34 - sort of edge case that everyone runs
145:37 - into
145:38 - because i ran into it today again um and
145:40 - it's a really sort of
145:41 - cool uh really sort of nifty point that
145:43 - everyone should sort of um
145:45 - if you run into it we're gonna go over
145:47 - how you fix it so
145:48 - the first part is is the div that we're
145:50 - gonna style so this is the sort of
145:52 - container that surrounds everything
145:53 - so the first thing i want to do is i
145:55 - want to say that this it should be there
145:57 - all the time so i want it to kind of
145:59 - always be at the top of the screen right
146:01 - so fixed position allows it to stick to
146:04 - the top of the screen so if i do this
146:07 - like this and now if i do that you
146:09 - should see that even if
146:10 - now if you was to scroll uh i need to
146:12 - save this save the file okay
146:15 - so now if you scroll down importing are
146:17 - you importing this file and
146:19 - in your oh i'm not that's good for good
146:23 - yeah that's twice now damn it i'm
146:26 - picking up on the pattern you know
146:28 - that's it now css so now it should come
146:31 - in so
146:33 - clean now i just see that right
146:37 - dude i don't know it looks cool i think
146:39 - we're done
146:41 - i think we're done i think like everyone
146:43 - give the video a thumbs up if you
146:44 - enjoyed that
146:50 - so now what we're going to do is we are
146:52 - going to
146:53 - um so this is the problem right if i
146:56 - give this
146:57 - display flex yeah so what we would
146:59 - typically do at this point is i would
147:00 - say display flex
147:02 - and then by default it should go into a
147:03 - row right so if i save this
147:06 - it should go into a row but can you see
147:08 - how it it did go into a row but it's
147:10 - it's a bit it's acting a bit strange
147:12 - right now yeah
147:13 - yeah so i mean what we're going to do is
147:15 - we're going to we're going to handle it
147:16 - as we normally would and we would assume
147:19 - that because the netflix logo is so big
147:21 - it's just pushed over
147:22 - so far to the side so i'm going to go
147:24 - ahead and style that logo so i'm going
147:25 - to say nav
147:27 - logo and i'm going to give that a so
147:29 - we're going to say that one is
147:32 - width of 80 pixels so it's going to be
147:35 - very small
147:36 - so you see this if we do this and save
147:37 - it now you see it's horrible it
147:40 - scrunches up right
147:42 - so to fix that we do object fit
147:45 - contain right and save it
147:48 - and now you should see like it saved
147:50 - that aspect ratio so now it's like that
147:52 - tiny little thing right
147:54 - yeah now if i do nav avatar
147:58 - and i do it like this and i say position
148:01 - oh sorry i say width
148:02 - nice 30 pixels
148:06 - now this one and i remember i also need
148:08 - to do object fit contain otherwise it's
148:10 - going to get all horribly messed up
148:12 - which i think contains so if i do that
148:14 - them two together boom
148:16 - oh yeah clean this time
148:19 - clean and then if i do justify content
148:23 - so justify content i do space between
148:26 - so i want to kind of i want the flexbox
148:28 - to figure out what the space between it
148:29 - should be
148:31 - right so this is where you would think
148:34 - things are broken
148:35 - right so i i ran into this today and i
148:36 - was like why is it not working oh my god
148:38 - like why is it not behaving
148:40 - so what happens is when you use position
148:42 - fixed
148:43 - with these rules you it doesn't behave
148:46 - the way you need it to
148:48 - for some reason so i think it's
148:49 - positionflix has a clash with justified
148:51 - content or something like that and i
148:53 - tried to do with the 100
148:54 - so even if we were to do width of a
148:57 - hundred percent here
148:58 - you can see it's also oh well oh okay
149:02 - then again oh nice
149:05 - all right let's just let's just maybe go
149:08 - with that
149:09 - because uh i ran into an issue earlier
149:10 - where i had to double wrap it but i mean
149:13 - okay let's go with that so in that case
149:15 - we're gonna
149:16 - we've almost got it looking as we need
149:18 - it but
149:19 - right now what we need to do is add some
149:21 - additional padding so we're going to say
149:23 - netflix here there's spacing and then on
149:26 - ours there's like it's touching the
149:28 - corner too much
149:29 - oh you actually did it it's actually
149:32 - yeah i added it yes sir
149:33 - right but here's the problem yeah so you
149:36 - see like how it goes off on the side a
149:37 - little bit
149:38 - yeah my avatar is like gone
149:42 - so it doesn't look that nice right so
149:45 - what we can do at this point is we can
149:47 - kind of do two things right so
149:48 - i kind of have an approach with this and
149:51 - this is very opinionated how you sort of
149:53 - approach this issue
149:54 - um so what i would do here is i would
149:56 - give the nav logo because it's always
149:59 - going to be fixed in that top corner
150:01 - i would give the the logo a fixed
150:03 - position and i would say
150:05 - left zero and i would say and that so
150:08 - so now the the logo is not actually
150:10 - going to look like it changed too much
150:11 - or it is going to go push to the left a
150:13 - bit
150:14 - right yeah and then the right one i'm
150:17 - going to give it a position fixed but
150:18 - i'm going to say right
150:20 - um right but i don't want it to touch
150:22 - the side so i'm going to say 20 pixels
150:24 - so it's going to just slightly go away
150:25 - from the side
150:27 - oh see that yeah
150:30 - but for the first one i can i can
150:33 - actually say rather than left 20 pixels
150:35 - uh
150:35 - i can give left 20 pixels sorry and it
150:37 - should push away from the left
150:39 - right yeah now i don't actually need
150:42 - that additional padding i
150:44 - believe oh no i do need that padding
150:46 - because that's the top of the
150:47 - thing right so that's why i did that
150:48 - yeah so in this case now we've got fixed
150:51 - positioning so if you was to scroll down
150:53 - now
150:53 - everything looks perfect as it should
150:55 - like yeah look at that
150:57 - wow that whoops everything looks really
150:59 - clean it looks nice and it sort of does
151:01 - what we want it to do
151:03 - damn um look at that that is looking
151:05 - perfect
151:07 - it's nice right but what we want to do
151:09 - now
151:10 - is basically have it so how can we do it
151:13 - so that
151:14 - i have this so if i do background color
151:17 - black
151:18 - right so this so you see like here for
151:22 - example
151:22 - i need to give it a height so say for
151:24 - example i want to have
151:26 - so i'm going to show a neat little trick
151:27 - now so i'm going to set the height
151:29 - of 30 pixels because these these values
151:32 - can be fixed because we know what the
151:34 - size of the logo is and we know what the
151:35 - size of the avatar is
151:36 - so it's fine to give a fixed title so if
151:38 - i gave that 30 pixels there we go
151:40 - right nice
151:45 - yeah i don't want that black stuff to
151:47 - come up until i scroll down
151:49 - um all right so if you look at the
151:51 - deployed version
151:53 - yeah basically it's it's nothing is
151:55 - there right
151:56 - there there's nothing there let me
151:57 - refresh maybe get a lighter
151:59 - cover so it's more visible um yeah so
152:02 - there's nothing around here right now
152:04 - but then
152:04 - as i start to scroll down boom it pops
152:08 - up right over there
152:10 - so yeah that's what we get really nice
152:12 - you get a really nice sort of effect
152:14 - with that right
152:15 - yeah so what we need to do is firstly
152:17 - because it's a header it's always a good
152:18 - idea to add a z-index of one
152:20 - so it's always going to be at the top
152:22 - yeah
152:23 - and then what we're going to do is we
152:25 - are going to go into our navbar
152:28 - so this is something that is relatively
152:31 - new to me i've used it once before
152:33 - but it's basically what we're doing here
152:36 - is we need to add some kind of
152:38 - scroll listener inside of our navbar
152:40 - component so that way
152:41 - it's listening to the scroll
152:44 - sort of so we need to attach a listener
152:46 - to the window and say when you scroll
152:47 - down
152:48 - i need you to do something right yeah so
152:51 - what we're going to do here is i'm going
152:52 - to say
152:52 - i'm going to have a use effect because
152:54 - that's what we kind of run to whenever
152:56 - we need this
152:56 - sort of like a piece of code that needs
152:59 - to execute on a
153:00 - given condition so in our case we need
153:03 - the code to run
153:03 - once when the navbar component loads
153:05 - right and that's and then and that's
153:07 - because
153:07 - we want to attach a list now right yeah
153:10 - so
153:10 - the code is basically this one so
153:14 - i'm going to explain what it is i'm
153:15 - going to snip it out so it's here
153:17 - and it sets a piece of state so it's
153:20 - listening to
153:21 - it's listening to a scroll and if you
153:24 - scroll on the y-axis is
153:26 - greater than 100. like so basically 100
153:28 - pixels or whatever so basically i'm
153:30 - imagining like
153:31 - uh even if i go to this app and i scroll
153:34 - down so it's like
153:35 - it doesn't happen right this second it
153:36 - doesn't happen now it doesn't happen now
153:38 - it doesn't happen now but basically when
153:40 - i'm 100 pixels probably down from the
153:43 - y-axis that's when it kicks in
153:46 - exactly yeah okay so that's when we
153:49 - basically want to set a piece of state
153:51 - so handle show to be true right
153:54 - otherwise if you're not 100 pixels
153:56 - downwards in the y axis
153:58 - set it to false right and what this is
154:01 - doing is it's saying
154:02 - every time like use effect gets fired
154:04 - off for whatever reason
154:06 - before you fire it off again just remove
154:08 - the listener so that way you don't get
154:09 - like 20 listeners
154:11 - if using oh you can remove listeners too
154:14 - like that
154:15 - yeah okay which is really clean right
154:20 - so we need to obviously add a piece of
154:21 - state here so the state that we need
154:24 - is this one here so it's gonna say const
154:26 - show
154:27 - handle show use state so we're just
154:29 - setting up a piece of state here so i'm
154:30 - going to import it over here and say use
154:32 - state like this and now
154:36 - what we're going to see is use effect oh
154:38 - so we also need to use effect so use
154:40 - effect and what we're going to do now
154:44 - is basically we're going to add a very
154:46 - little neat little sort of
154:47 - block here so where we have the class
154:51 - name
154:51 - here right we're going to basically do
154:53 - some string concatenation
154:55 - and i'm going to say it always should
154:57 - have the nav nav class
154:58 - i always wanted to have the nav class
155:00 - but
155:02 - if show is true right so if
155:05 - if they've scrolled past so 100 pixels
155:09 - and and that variable gets set to true
155:11 - then i want to also
155:13 - append this class we're going to call it
155:15 - nav black
155:16 - because it's going to have the black
155:17 - background right so i'm going to save
155:20 - that
155:21 - which means that now if if you scroll
155:23 - past
155:24 - if you scroll down 10 pixels if you
155:26 - scroll down it's going to get the black
155:27 - bar but obviously
155:28 - we haven't set up the css yet yeah so
155:32 - previously i had it to always apply
155:34 - right so if i get rid of that
155:36 - when i save it now it's going to have
155:37 - nothing as a background
155:39 - yeah yeah but if i now add the rule
155:42 - for nav black so if i say nav
155:45 - so firstly i need to actually i want to
155:47 - copy that background color so where is
155:49 - it
155:50 - this one i'm going to copy that
155:53 - and i'm going to say nav black
155:56 - here the background color this so now no
155:59 - look what happens if we scroll down
156:02 - it's going to snap the color in nice yep
156:04 - it does it instantly
156:06 - but i mean it's all make it let's make
156:09 - it let's make it really visible
156:12 - so here guys if you look at it there's
156:14 - nothing right
156:15 - but when i scroll down you'll notice it
156:18 - snaps it in you guys see that right
156:20 - there
156:21 - the little snap in like that so we want
156:23 - to make sure that
156:24 - that's not there if we look in our
156:27 - completed app when i scroll down
156:31 - you'll see that it has this nice little
156:34 - fade in
156:35 - so that's what we want to add to our app
156:37 - right now
156:38 - yeah that's a really good point yeah so
156:40 - that's what exactly what we're about to
156:41 - add so
156:42 - the animation code to add that is this
156:44 - so here we pretty much have a transition
156:47 - so this right here is saying add a
156:51 - transition to everything that you do in
156:53 - here so whether whether or not the width
156:55 - changes whether or not the opacity
156:56 - changes anything add a 0.5 second delay
156:59 - to it so it's going to have a nice
157:00 - little fade
157:01 - and then we're saying this is basically
157:03 - saying for all of your transitions how
157:05 - do you want to handle them so we're
157:06 - going to use something called ease in
157:08 - which gives you a very nice sort of
157:09 - gradual fade in
157:11 - right so let's save that and let's check
157:14 - it now
157:15 - and it should all be really nicely doing
157:17 - it
157:19 - so if we scroll down nice if i scroll
157:21 - down yeah
157:22 - that's awesome nice little scroll let's
157:26 - refresh so it's clear
157:28 - let's find a lighter image
157:31 - so right here this is gonna be yeah boom
157:33 - ooh
157:34 - that is slick it is so crazy how
157:38 - i went from just keep feeling like oh
157:40 - it's a draft app and i don't really care
157:42 - to like
157:43 - i really feel good about this app like i
157:46 - kind of want to just be
157:46 - in it and do stuff even though i know we
157:49 - didn't have
157:50 - much more functionality and that's the
157:52 - thing guys like
157:53 - front-end development what makes a good
157:55 - front-end developer is literally
157:57 - very subtle things like it's super
157:59 - subtle
158:00 - um but many people think it's always
158:02 - like these massive changes that you need
158:03 - to do
158:04 - honestly it's this the small tweaks that
158:06 - you learn to sort of do
158:08 - really well that give you big wins so
158:10 - literally in this case
158:11 - that little fade in how do you how do
158:13 - you get that the little sort of uh
158:15 - fade in from the um the banner to the
158:18 - rest of the app
158:19 - those sort of little small wins if you
158:21 - sort of learn those little tricks and
158:23 - sort of caveats then you can pretty much
158:24 - get
158:25 - your apps looking like this all the time
158:27 - yeah it just takes a lot of practice and
158:29 - i would recommend honestly
158:30 - just as much time as you put into sort
158:32 - of development look into design courses
158:34 - and stuff like that because they do they
158:35 - do make a big difference
158:37 - yeah that's actually true because
158:39 - honestly sometimes it motivates me to
158:41 - then add
158:42 - more back and and more functionality to
158:44 - my app because i get inspired
158:46 - every time i look at my app because when
158:49 - i'm looking at just
158:50 - console logs or a broken down html you
158:54 - know tables that i've built
158:56 - it doesn't really motivate me to keep
158:58 - making more things
159:00 - on that app exactly exactly
159:03 - and it's going to start to like sort of
159:05 - bring down your like if
159:07 - your app doesn't look good it kind of
159:09 - kills your motivation
159:11 - but the minute it starts looking like
159:12 - this you just want to keep on working on
159:14 - it
159:14 - like you want to keep on adding
159:15 - functionality and adding yeah yeah
159:17 - that's exactly right
159:18 - yeah so you're literally going to sit
159:20 - here and just play with it all night
159:22 - because you're just you're gonna you're
159:23 - gonna have this pride for this sort of
159:24 - app and then you wanna put it on your
159:26 - portfolio because you wanna show it
159:27 - talk about it and everything um nice
159:31 - so i think with that said so i think the
159:33 - last thing we actually need to do
159:35 - so there's two steps now right we've
159:37 - actually finished the banner so let's go
159:38 - ahead and take that off
159:42 - on the yes let's go ahead and take that
159:45 - off on the
159:46 - list
159:50 - oh so nice
159:54 - nice here we go let's hear that like
159:59 - hey build a navbar just got completed
160:02 - and
160:02 - we're also going to deploy it right yeah
160:06 - so we need to do oh right yes yes we
160:08 - kind of like
160:10 - that's a mistake on our end we should
160:12 - have had that
160:17 - deploy up to firebase yeah
160:20 - yeah oh right oh our css broke
160:29 - there we go uh cool so that's looking
160:32 - good and then now
160:34 - we're gonna work on adding trailer
160:36 - pop-ups
160:37 - yeah so trailer pop-ups right now
160:41 - this one is more of a so we use two
160:45 - packages to
160:46 - to get this to work right we used one
160:48 - which is react youtube
160:50 - so the first thing i'm going to do is
160:51 - install a dependency in our project
160:53 - called react youtube and i'm going to go
160:57 - over to the app
160:58 - or terminal before we continue working
161:01 - on it let's just explain what it is so
161:03 - for example
161:04 - when i hover over dark and i click it
161:10 - you think you can fix me nice you are
161:13 - not
161:14 - and we want it so that when you click
161:15 - dark again it will close that
161:18 - then when i click it again yep it's gone
161:21 - and
161:21 - um yeah that's here
161:29 - so that's effectively what we're trying
161:32 - to achieve
161:32 - sunny you were on mute for a little just
161:34 - a few seconds because i was
161:36 - playing system audio but now you're back
161:39 - so
161:39 - yeah this is this is uh this is what
161:42 - we're trying to
161:43 - build right now guys the ability to add
161:45 - like trailers
161:46 - to our app exactly yeah
161:50 - so now the way we're gonna do that is
161:51 - we're gonna use two packages one is
161:53 - called react youtube so i'm gonna go
161:55 - ahead and install that so i'm gonna cut
161:56 - the
161:57 - the app running and i'm going to say npm
161:59 - i uh react youtube
162:02 - so i'm in the terminal right now kazi
162:04 - yep
162:05 - you want me to follow you yeah okay
162:07 - there we go command j
162:10 - yep so i just write a command called npm
162:13 - i react youtube
162:14 - and that's going to bring it here yeah
162:17 - that's going to bring in the code for
162:18 - that
162:20 - and then we also have another one
162:21 - command is called
162:23 - npm um i react
162:26 - youtube right yep and there's another
162:29 - one called mpmi
162:31 - uh and we need to do a movie trailer so
162:33 - it's npmi
162:34 - and it's movie trailer movie dash
162:37 - trailer
162:38 - yeah movie dash trailer yeah okay this
162:40 - is and you guys can see my whiteboard
162:42 - right when i have it here
162:48 - cool so yom now i actually said a good
162:51 - point so yeah kind of yes you don't need
162:52 - a back-end if you use firebase yeah
162:54 - so honestly you can actually really use
162:58 - like speed up your front-end development
163:00 - with firebase because you don't need a
163:01 - back-end for a lot of this stuff
163:03 - uh in this case we're not actually using
163:04 - too much back-end support and
163:06 - yesterday's call an instagram clone
163:08 - you could see the real power of a um of
163:10 - using firebase to actually get rid of
163:12 - all of that backhand headache that you
163:14 - usually have to deal with
163:16 - yeah nice so let's go ahead
163:19 - and so i installed two packages one was
163:22 - movie trailer and one was youtube
163:24 - so what i'm gonna do is go over to the
163:26 - row
163:28 - let's go over to row and i'm gonna
163:31 - type in so i actually need a few things
163:36 - now so i need one is going to be the
163:40 - um so let's figure this one out so
163:42 - firstly we want to get the
163:44 - a youtube embed underneath a row
163:47 - right so in order to test this out what
163:50 - we need to do is go underneath our row
163:52 - so i'm going to go over here and i'm
163:54 - just going to pop in
164:04 - yep looking at you
164:13 - all right yeah
164:20 - okay nice cool so right now
164:25 - now what we're doing is we are going to
164:27 - go and we need to add a youtube embed
164:28 - right so this is the code that we pulled
164:30 - in
164:31 - it allowed us to basically so i need to
164:33 - do an import at the top so we need to do
164:34 - import youtube from that package that i
164:37 - just installed so import youtube from
164:39 - react youtube
164:40 - and what this takes is it takes a video
164:42 - id
164:43 - and ignore the trailer url for now so
164:45 - i'm going to give you that in a second
164:46 - and it takes some options
164:48 - so the options we can actually add right
164:49 - now so this was
164:51 - literally on their documentation so you
164:53 - can pretty much check this out on their
164:54 - site so if you go to react youtube and
164:57 - type in npm it will come up
164:59 - here we just have some options and what
165:01 - i'm saying here is i want it to auto
165:03 - play
165:03 - when it loads in and i want to be 100 of
165:06 - the width
165:06 - and 390 pixels height right
165:11 - and then what we need is we basically
165:13 - just need to give it
165:14 - a video id so if i go over to youtube
165:18 - right now and i quickly grab a video id
165:20 - i'll show you how this works
165:21 - so if i go to youtube um oh
165:24 - my computer's actually freezing up for
165:26 - some reason um
165:29 - there we go we're good yep so if i go
165:31 - ahead and get a video id so let's say i
165:33 - get the netflix
165:35 - yeah yeah yeah go ahead and what i'm
165:38 - saying here is i want it to all
165:39 - play okay so there we go so if i go into
165:43 - video id and i just add in
165:45 - i think it's this should be enough right
165:49 - so now if i go and check the app out so
165:51 - if we go over to
165:52 - localhost and we refresh
165:56 - i just need to save ooh nice save yeah i
165:59 - see
165:59 - there we go right but you see it's
166:01 - coming under every single row right
166:03 - for now which isn't going to be ideal
166:09 - okay that's this
166:38 - yeah something hold on something really
166:40 - weird is happening i don't know
166:43 - on the stream something really weird is
166:46 - that
166:49 - well i think only you can hear that
166:51 - because i can't hear that on the
166:53 - on the stream yeah something
166:57 - um i hold on i think now it's back to
166:59 - normal something
167:00 - really weird just happened on the audio
167:02 - side i don't know exactly know what
167:04 - happened
167:05 - but no i know i mean you're because
167:07 - you're behind us but i think now
167:09 - it's fine there is sound
167:12 - sunny speak for a second hello hello
167:15 - hello
167:15 - yeah i think yeah it should be good to
167:18 - go it's about to happen yeah
167:21 - there we go okay nice so we have the
167:25 - video and
167:25 - we saw that if i added the trailer url
167:28 - like before
167:29 - it was popping in um
168:12 - meet me on the okay guys now we should
168:14 - be good to go sorry
168:16 - it was that like auto play was just
168:19 - freaking me out like crazy because it
168:21 - started playing my our own live stream
168:24 - so i started hearing
168:25 - all of us all over again so that really
168:28 - threw me off
168:28 - uh sorry about that i should have
168:31 - realized when i
168:32 - when i put that in i was because it was
168:34 - gonna actually started the amount of
168:36 - rows that we have
168:37 - it started that many live streams oh
168:41 - geez yeah because it was really crazy it
168:44 - was like
168:45 - one of those movies you know where they
168:46 - started going crazy in a mental asylum i
168:48 - was like holy crap what is happening
168:51 - i can hear myself 500 times over while
168:54 - loop in my ear
168:57 - so now what we need to do is i need to
168:59 - have a piece of state which is going to
169:01 - get the trailer url so whenever we click
169:04 - on a thumbnail
169:05 - i want to capture the trailer url now
169:07 - how we do that we're going to figure it
169:08 - out
169:09 - um but the actual sort of i only want to
169:12 - show that youtube video
169:14 - when we have the trailer url so the way
169:17 - i do that is i say when we have a
169:18 - trailer url
169:20 - for the url then i want to show the
169:22 - youtube video
169:23 - right um so that answers that bit so now
169:27 - what we need to do is i need to have it
169:29 - so that when we click
169:30 - on the um image
169:33 - so when i click on the image wait hold
169:35 - on they're saying
169:36 - problem with the sound but now it should
169:38 - be good
169:40 - yeah i think it's all good now i think
169:41 - it's because there was a delay on theirs
169:44 - oh yeah sound back yeah okay cool cool
169:46 - cool
169:47 - okay so now what we do is we add a on
169:51 - click
169:51 - so we say handle and then you're own
169:53 - click but i'm passing in the movie
169:55 - right because we're going to need to do
169:57 - that so i need to create that function
169:59 - so i need to go here and i need to say
170:00 - const
170:02 - handle click so this is b this this
170:04 - handle click is going to be
170:06 - when the user clicks on the picture so
170:10 - i click on the picture and then we pass
170:13 - in the movie
170:14 - here and the movie we get obviously
170:16 - because we're inside of a map function
170:18 - so it's going to be based on what what
170:20 - movie you click on
170:21 - that's going to be the one that gets
170:22 - past this function and
170:24 - then what we're going to do is we are
170:26 - going to have
170:27 - um some stuff here so basically i want
170:30 - to say now i want to say
170:31 - if there was already a trailer url so if
170:34 - the video was already open
170:36 - right and you've clicked that picture
170:38 - what i want you to do then is i want to
170:40 - say
170:40 - set the trailer url to be empty so that
170:43 - way it actually closes it
170:45 - right so that's the first thing we're
170:46 - going to do so if it's already open
170:48 - if there's already a trailer url and the
170:50 - video was already playing like we showed
170:51 - it in the beginning
170:52 - then you're going to basically clear it
170:54 - and it's going to hide the video so
170:55 - that's how we get that functionality
170:56 - when you click it twice
170:58 - then we're going to say else and this is
170:59 - where we have all the sort of magic
171:01 - so here we're going to say movie trailer
171:04 - so if we go to
171:05 - here we say movie trailer and then here
171:08 - i basically pass in so i say
171:10 - movie dot name right and what movie
171:14 - trailer is is
171:15 - it's an npm module and somebody else has
171:17 - coded this and
171:18 - if we pass it a name it's going to go
171:20 - ahead and try and find a youtube
171:22 - uh a youtube uh trailer for it
171:26 - right and what we need to do is here
171:28 - i've realized that
171:29 - like if you don't include this in this
171:31 - case because sometimes
171:33 - the name is also undefined um which
171:36 - which means we
171:37 - have this little protection here so then
171:39 - i want to do is just say then
171:41 - because it's a promise and then that's
171:42 - going to give us a url
171:44 - right it's either going to give us a url
171:46 - and we're going to do a bunch of stuff
171:47 - with it or
171:48 - it's going to give us a catch which is
171:50 - an error so if it gives us an error
171:52 - we're going to capture the error oops
171:54 - capture the error and then i'm going to
171:55 - console log it so that way we can just
171:57 - see what the error is but here
172:00 - i'm going to say so here i'm actually
172:03 - going to say
172:04 - const and basically what this is this
172:07 - gives us a full url guys
172:09 - but on youtube every single video
172:12 - has um so i don't know if it's gonna
172:15 - freak out so if i do this like when it
172:17 - youtube it won't do that thing again
172:19 - i'll catch it before it does that so if
172:22 - i
172:22 - copy the image the link address so let
172:25 - me just grab this link copy link address
172:27 - so for example this is the live stream
172:28 - link so if i go over here
172:31 - this is a live stream link right we need
172:33 - this
172:34 - that's the video id right so
172:37 - the way we do that in javascript is we
172:39 - can do this we can say const
172:40 - url rams
172:44 - and what we can do is we just need to
172:45 - pull out this one right
172:48 - yeah so i'm going to use a mixture of
172:50 - things now so in order to get the search
172:52 - so in order to get basically
172:54 - this part or no sorry in order to get
172:56 - this part
172:58 - right we do this this we say url
173:01 - and then we say um we pass it a url
173:05 - and then basically we do this dot search
173:07 - so that's how we actually this is a
173:10 - trick to basically we pass in this url
173:12 - so we're passing in like you get
173:14 - everything after the question mark
173:17 - yeah to basically and then this will
173:18 - give us that exact string
173:20 - right and then what we're going to do is
173:23 - we actually wrap all of this in
173:25 - something called a url search param so
173:27 - we wrap all of this inside of this
173:30 - so we say url search params and we do
173:32 - that
173:33 - right and what this allows us to do now
173:36 - is it allows us to do a get so it allows
173:39 - us to do this it allows us to say url
173:41 - params dot get
173:44 - and then we can actually get so say for
173:46 - example in this case
173:47 - v and what that does is it gets anything
173:50 - so say we have like a bunch of things
173:52 - after here parameters it's getting this
173:54 - one v so it's going to give us back this
173:55 - value
173:57 - yeah even if we had like even after this
174:00 - if we had
174:01 - banana is equal to five it will
174:05 - just get you the value of v and will not
174:08 - get you banana but if you write banana
174:10 - then it will get you
174:12 - that value right there five yeah
174:16 - so in this case we want v right so
174:18 - that's how we get that so what i can do
174:20 - here is i can just say
174:21 - set trailer url there's a really nice
174:24 - sort of little
174:25 - like hacky way of doing this you say set
174:27 - trailer url
174:28 - to to that right and then obviously if
174:31 - it's gonna
174:32 - then populate this and it should show
174:34 - the video and everything should be
174:35 - working
174:36 - so now if we go ahead and try so i need
174:38 - to just import at the top so there's one
174:40 - more step so i need to go ahead and do
174:43 - this so i need to go and say
174:47 - import movie oops import movie
174:51 - trailer from oh god
174:54 - oops from
174:57 - movie trailer okay
175:00 - so if you're going to give that a demo
175:02 - quasi then it should be good
175:12 - hey look at that oh nice that's working
175:15 - yeah yeah
175:18 - right so there you can see like
175:20 - everything's sort of working and then
175:21 - when we actually click
175:22 - the the the thumbnail again it will
175:26 - actually
175:27 - um hide the youtube video
175:30 - nice yeah so i click it and it shows it
175:38 - don't so i'm accidentally linked says i
175:40 - don't usually subscribe to channels but
175:42 - to yours i did thank you for the hard
175:43 - work you're welcome dude
175:45 - we're glad you're enjoying it yeah
175:48 - that's awesome
175:49 - thanks appreciate the love here that's
175:52 - really nice
175:53 - there's one more thing we need to
175:54 - account for actually i think we've
175:56 - already done it yeah
175:57 - we have already done it nice okay so
176:00 - in that case i think then we're ready
176:02 - right
176:04 - we're ready for the big deployment yeah
176:06 - hey
176:07 - nice so let's make sure we go ahead and
176:10 - uh
176:11 - let everybody know where we're at so
176:13 - we're gonna change this
176:14 - up
176:18 - so now you guys gotta see questions oh
176:20 - yeah
176:21 - nice so check it out now we're on the
176:25 - wait hold on did that actually play
176:27 - sound effects are muted i think
176:29 - so that did not play here we go nice
176:32 - little green check mark for add trailer
176:34 - pop-ups are done
176:36 - now guys we'll be we will be moving on
176:38 - to deploying
176:40 - uh to firebase so we'll be uh hosting
176:42 - our app
176:43 - online yep exactly
176:48 - awesome so now what we're going to be
176:50 - doing
176:51 - is pretty much and guys when we do this
176:54 - it would mean a lot if you guys just
176:56 - so that we can reach out to you guys and
176:58 - see who's actually watching and
176:59 - interacting
177:00 - once we deploy it you're going to get a
177:01 - little url and you guys can actually go
177:03 - and visit the project that we just built
177:05 - right now
177:06 - and you can go and see that on your own
177:08 - computer and see it live and it will be
177:10 - up and working and everything that we've
177:11 - shown you
177:12 - can actually be on your screen yeah and
177:14 - what we want you to do is if you just
177:15 - share an instagram video
177:16 - and look make sure you record yourselves
177:18 - when you do this
177:20 - as well because we love to see your guys
177:21 - and see that it's all real and
177:23 - otherwise it doesn't to us it's just a
177:24 - number otherwise um
177:26 - it's really nice to be able to see your
177:27 - faces and then also show us the
177:29 - the video and make sure you tag us and
177:31 - that'll be awesome yeah
177:32 - seriously yeah i would take it do that
177:36 - guys because that actually is
177:38 - really really powerful for us just to
177:40 - see you and how much you guys are
177:41 - enjoying it
177:42 - so uh share that with us and we will
177:44 - definitely respond to you so we're gonna
177:46 - show you the app
177:46 - go demo it take a story show your face
177:49 - in it too
177:50 - you know just tell us what your biggest
177:51 - takeaway was and tag me
177:53 - at cleverkazy and uh make sure to tag
177:57 - sunny as well as sanga so maybe
178:00 - we can show it on the screen because i
178:03 - think
178:04 - um not everybody remembers what our
178:08 - tags are so here is um for me it's at
178:12 - cleverkazy
178:13 - right here you guys can see my screen
178:14 - hopefully right
178:16 - um and then for sunny it
178:19 - is uh sss so make sure to
178:24 - tag him on the story and share what you
178:27 - guys have built
178:28 - uh with us awesome nice and we love it
178:32 - because we can have a chat with you guys
178:33 - and see like
178:34 - what you're into and sort of see how
178:36 - it's going for you guys um and we love
178:38 - to see when you guys actually rebuild
178:39 - the project
178:40 - it's so cool for us and yeah everything
178:43 - and one more thing guys if you guys
178:45 - could just if you have watched at this
178:46 - point you know we
178:47 - put a lot of time and energy into this
178:50 - uh
178:50 - if you guys could just hit that like
178:52 - button that means the world to us it
178:54 - really helps that video
178:56 - go out for other people to be able to
178:59 - view it and get value out of this as
179:01 - well
179:01 - and it doesn't really cost you anything
179:03 - so if you can just go ahead
179:05 - hit that like button subscribe to the
179:06 - channel that would mean a lot thank you
179:09 - amazing perfect um so yeah let's go
179:12 - ahead and i think we don't actually even
179:14 - need to go into firebase console at this
179:15 - point
179:16 - because we set things up earlier yeah we
179:18 - just deployed
179:20 - yeah we can go into our terminal
179:23 - and here we can pretty much uh says open
179:26 - up terminal and then this cancel
179:28 - most people if you haven't done it
179:29 - you're gonna have to just run firebase
179:31 - login
179:32 - um so in our case firebase logout yep so
179:35 - we're gonna log out to show you guys
179:38 - so you need to run a command to say
179:40 - firebase login and that will pretty much
179:42 - so
179:43 - devin gray said is there some fancy cd
179:45 - ci get related setup for the point of
179:46 - firebase
179:47 - so actually it's super clean and you're
179:49 - gonna see it right now
179:51 - all you have to do is firebase login is
179:52 - the first step
179:54 - and um then what we need to do is pretty
179:57 - much go ahead
179:58 - and go to um the terminal and do
180:02 - firebase init
180:04 - right so this is the bit that we have to
180:06 - be quite careful about guys we have to
180:08 - make sure we do it very carefully and
180:09 - correctly
180:10 - so let's go down to hosting and let's go
180:13 - enter
180:14 - and let's get use an existing project
180:16 - and you want to make sure you find the
180:18 - right one so netflix clone
180:19 - there we go and here you need to make
180:22 - sure you type in build
180:23 - yeah it has to be built for react guys
180:26 - yeah
180:27 - so you make sure that that is built not
180:30 - and you don't just spam the enter key
180:31 - because this is really important
180:32 - configuration
180:33 - yeah i always find myself spamming the
180:36 - enter key so that's important build
180:38 - right over here guys pay attention
180:41 - yeah so make sure that's build and then
180:44 - what you want to do
180:45 - is for the next step you need to
180:47 - configure as a single page apps you're
180:48 - going to put y
180:49 - exactly so that's another important
180:51 - thing so put yeah that's a
180:53 - let me actually just in case it's not
180:55 - visible there just put
180:56 - y yeah and hit enter yeah exactly
181:01 - uh and then enter and then that's it so
181:03 - that's what the configuration done
181:05 - and now we have two things so most
181:06 - people actually end up deploying it but
181:08 - they see this
181:09 - default firebase page and that's because
181:11 - you need to run
181:12 - mpm run build to get the latest version
181:15 - of all of your stuff that you've coded
181:17 - right so in this case
181:19 - i love this comment michael says
181:21 - firebase init with british accent
181:23 - suddenly just makes more sense to me
181:27 - nice 5 8 in it yeah
181:36 - now what we need to do is uh we need to
181:39 - do mpm so if you just open up the
181:41 - directory guardian we can show everyone
181:43 - what it's actually going to do
181:45 - so open up build so you can so right now
181:48 - the build is empty it has a plain index
181:50 - html okay okay cool
181:52 - yeah so it's empty you'll get to this
181:54 - point and it'll just have some one file
181:55 - in it which is nothing
181:57 - so at this point you want to do mpm run
181:59 - build
182:01 - and you will see what will happen once
182:03 - we actually type that command in is this
182:05 - will start to build out right here
182:07 - yeah and what we need to do is what this
182:10 - is doing guys is it builds a production
182:12 - ready
182:13 - uh build of your react bundle so like
182:16 - your react app is basically stripping
182:17 - out the
182:18 - the developer stuff like the hot
182:20 - reloading all the expensive sort of
182:22 - stuff that takes up a lot of
182:23 - space and stuff like we don't need that
182:25 - in the actual production build
182:27 - so when it goes online we just need to
182:29 - be as lightweight as possible
182:31 - right we need to be as lightweight and
182:32 - just quick as possible so that's it so
182:34 - everything goes into that build folder
182:36 - and then we set up firebase to deploy it
182:38 - from that build folder
182:40 - so i think i think we can we can get
182:42 - ready for this big big
182:43 - big release now so you can say five
182:44 - there we go guys are you guys ready for
182:46 - this
182:47 - we're about to deploy this app online
182:50 - and all the hard work that we have done
182:52 - up until now
182:54 - is gonna pay off and you are gonna get
182:56 - access to this app
182:57 - and you will be able to actually use it
182:59 - right now
183:00 - are you excited we want to know
183:03 - let's do it we're not going to actually
183:05 - you know what we're not going to hit
183:06 - that deploy button
183:08 - unless we get a message from the chat
183:10 - that you guys are actually pumped up
183:11 - about
183:12 - this yeah i think we should just leave
183:14 - them like just
183:15 - right on the edge you know like if we
183:17 - get some excitement we get it going then
183:19 - then we'll hit that deploy button yeah i
183:21 - think actually we can just start
183:23 - chatting about what we're going to be
183:24 - doing next i guess sunny so
183:26 - um you know oh yeah uh yeah i'm gonna be
183:29 - coming down to uh
183:30 - britain at some point i'm gonna hang out
183:39 - yeah you're not in wales right where are
183:41 - you again
183:42 - no london london yeah how far is that
183:46 - oh damn people are actually excited
183:48 - joe's like let's go
183:49 - michael is like let's go
183:52 - they're like deploy and joy's like i'm
183:55 - pumped
183:57 - holy crap all right here we go that's
184:01 - that level of energy we're talking about
184:03 - guys you guys are falling asleep on us
184:05 - and that's not acceptable
184:06 - so that's the level of energy we want in
184:08 - this freaking room all right
184:10 - five four three
184:14 - two one one all right let's check it out
184:17 - i'm gonna hit enter
184:18 - vamos we're getting let's go in all
184:20 - kinds of languages that's what i'm
184:21 - talking about lauren john
184:23 - it's deploying pumped it's deployed
184:27 - and hold on i think it just deployed
184:33 - let's go all right let me actually
184:37 - click this now hopefully it doesn't
184:39 - drastic in the link
184:40 - let me drop it also there it is guys
184:43 - that's what we just built
184:46 - nice i dropped it in the chat
184:49 - go check it out guys let us know in the
184:51 - comments what you think
184:52 - and give it a resize try and break it
184:55 - you know play around with it a bit
184:59 - awesome final netflix clone app
185:02 - i'm gonna drop the link i'm dropping the
185:04 - link in chat
185:07 - i think everyone really loved that and
185:08 - guys if you're doing it remember shoot
185:10 - an instagram story and make sure you tag
185:12 - us
185:12 - it's always we always love to see your
185:14 - name says thanks guys such an amazing
185:16 - session you're the best
185:18 - blah blah blah nice lit lit
185:22 - liftoff i see i see netflix alone yeah
185:25 - people are dropping the link
185:26 - alexandros thank you for dropping the
185:28 - link everything he says comes with a
185:30 - plus have you noticed that any time you
185:32 - get a message
185:33 - i don't know why that is is he is he
185:35 - messaging us from like the command line
185:37 - or something
185:39 - maybe if he is we need to bring him on
185:42 - yeah wow that is sick uh sunny can we
185:45 - find out how many people are hitting
185:48 - can we find out how many people are
185:49 - hitting this page probably from
185:51 - uh firebase right from firebase console
185:54 - i should be able to get access to that
185:56 - information netflix clone i mean
185:58 - you say up with analytics right here we
186:00 - go
186:01 - here we go where where is it
186:07 - i think it might be hosting oh it says
186:10 - waiting for analytics there
186:12 - oh really did i just go back to the
186:16 - the main page
186:19 - overview jesus
186:22 - yeah better than netflix itself
186:28 - damn holy crap
186:32 - look at the response damn guys if you
186:35 - haven't already smash the thumbs up
186:36 - button because it will really help the
186:38 - video grow and more people can see it
186:40 - yes please yes smash that button share
186:43 - it with your friends
186:44 - family anybody you think would get value
186:46 - out of this just spread this
186:48 - like wildfire um michael is like it's
186:51 - lagging a bit because the traffic
186:52 - yeah that's funny i'm sure let me
186:55 - actually hit refresh
186:56 - funny can i talk uh we can only read
186:59 - uh messages at the moment joe so you can
187:02 - message in the comment section and we
187:03 - can you can
187:05 - he goes is that being cool nice yeah
187:08 - that's awesome that's such a fun part of
187:10 - it bro joe diaz is in the course
187:13 - yeah i know i was actually thinking that
187:15 - i'm pretty sure actually he's in the
187:17 - course
187:18 - yeah that's awesome let's go this is
187:21 - cool people are loving this
187:23 - also guys if you find this really useful
187:25 - we do this stuff we have four weekly
187:27 - coaching calls every week and we always
187:29 - build stuff like this
187:30 - um so if you're interested go check out
187:33 - the link in the description and have a
187:34 - look at the course
187:35 - that'll be awesome and you can even
187:38 - check this out in your phone and yeah
187:40 - guys if you guys want to learn
187:41 - all this stuff and you want to be able
187:42 - to learn how to make an income with this
187:44 - it would just be silly for us to not
187:46 - push you to go
187:47 - click the link in the description below
187:50 - to check out the course profit
187:52 - with javascript we literally teach you
187:55 - how to build
187:55 - all of these apps but more importantly
187:57 - we show you how can you go to upwork how
187:59 - can you go to freelancer all these
188:00 - platforms and actually
188:02 - like take your skills and make an income
188:05 - with it get those
188:06 - projects whether it's a 500 project or a
188:08 - 5 000
188:09 - project or a six-figure job we show you
188:12 - how to be able to get those
188:13 - uh in profit with javascript so click
188:16 - that link in the description below
188:18 - and jump in the course yeah
188:21 - exactly also paulo says trailer isn't
188:24 - working
188:25 - some of the clickable uh posters don't
188:27 - have trailers or is the the module that
188:29 - we're using isn't finding a trailer for
188:31 - them
188:32 - so that might be the reason why you're
188:33 - you're seeing that
188:35 - yeah man these analytics huh these
188:38 - analytics
188:39 - freaking take me take forever yeah i
188:42 - know i think that's gonna
188:44 - i don't know when that's gonna come true
188:45 - i think it does take like
188:47 - unless you're going through uh google
188:50 - analytics itself i think there's a big
188:51 - delay with that
188:53 - yeah well it's all good i think this was
188:56 - still fun
188:57 - um hopefully yeah this was fun i hope
189:01 - everybody
189:02 - all of you guys really really enjoyed
189:04 - this experience thank you guys for
189:05 - giving the video a like
189:06 - just make sure to do that if you haven't
189:08 - already we're going to be live streaming
189:10 - our goal is to live stream
189:12 - um and test out i mean we tried this
189:14 - week and going
189:15 - five times a week so we're gonna do
189:17 - something tomorrow as well
189:19 - and then for next week our goal is to
189:22 - hit five
189:22 - live streams next week as well so
189:25 - sometimes
189:26 - uh yeah the offer raja is saying is the
189:29 - offer over
189:31 - yes that offer is over we had a
189:34 - sale for july 4th and we were sharing it
189:37 - with you guys but
189:38 - if you have missed that offer
189:40 - unfortunately whoops one second
189:44 - yeah so that offer is gone and it's not
189:46 - going to come back and this program is
189:48 - kind of only going to go up in price
189:51 - you know i mean we have we have tons of
189:53 - students who are like yo this
189:54 - program should be worth more than a ten
189:57 - thousand dollar coding bootcamp because
189:59 - those are the programs they've gone to
190:01 - and in this program they actually get
190:03 - much more value than a ten thousand
190:06 - dollar coding bootcamp so for you to be
190:08 - able to get it at the price you can get
190:10 - it
190:10 - it's just stupid it's silly like
190:12 - literally nobody in the market would do
190:14 - that because it just would not make
190:15 - sense
190:16 - we just have a great team great
190:18 - community and we got
190:20 - you know we have you guys and we were
190:21 - able to put this together so
190:23 - we're really proud of this course we've
190:25 - worked tremendously hard over the last
190:28 - year non-stop on this course and so
190:32 - you know if you want we have success
190:33 - coaches who give you personalized video
190:35 - feedback
190:36 - i mean i don't know anybody else who's
190:37 - doing that we have uh
190:39 - you know over 1200 1300 active members
190:42 - who will answer your questions
190:44 - live we have four people who give live
190:46 - coaching calls
190:47 - tell me any program i mean i don't care
190:49 - if you tell me west boss or you tell me
190:51 - like some of the biggest most respected
190:53 - people
190:54 - in the programming space they are not
190:57 - doing that the fact that sunny is live
191:00 - in that program every single week
191:03 - helping you build projects and then you
191:04 - get a homework and then that homework
191:06 - gets
191:07 - personal video feedback that is not
191:09 - happening anywhere
191:10 - you getting a call with nas every single
191:13 - week and you guys build
191:14 - full-on projects and last week they
191:16 - built a covet 19 tracker
191:18 - that is not happening and the people who
191:20 - some of the people who built the covet
191:22 - 19 tracker actually got
191:23 - paid uh and got freelancing jobs where
191:26 - they were literally building a covet 19
191:28 - tracker for them
191:30 - so the combination of the live trainings
191:33 - the recorded courses
191:35 - and then us teaching how to go make an
191:36 - income just not happening anywhere so
191:39 - if this offer is available to you and
191:41 - the price where it's available right now
191:43 - and you click it trust me you don't want
191:45 - to miss out on it and if you're serious
191:47 - about this
191:48 - stop playing around click it and join
191:50 - and we want to see you inside we'll help
191:51 - you
191:52 - 100 and i love it when people join and
191:55 - we end up having a conversation in the
191:57 - community and in slack
191:58 - it's it's such a guy's like not even
192:00 - just for the content the community is
192:03 - unbelievable like it's so supportive
192:05 - it's like
192:06 - i i can guarantee everyone who's a
192:08 - developer here has gone on to stack
192:09 - overflow and been a bit disheartened
192:11 - when they try and shoot a question where
192:13 - in slack in our community like in profit
192:15 - javascript
192:16 - we i barely get a chance to be able to
192:19 - reply first
192:20 - to your comments because somebody else
192:22 - would have jumped in that quick
192:23 - like it's it's really insane so
192:26 - mathuradon says do you only
192:28 - have a weekend-only training so we
192:30 - actually have uh weekly coaching calls
192:32 - across the week so it's completely
192:34 - within the week and
192:35 - on the weekends um so yeah we have very
192:38 - flexible sort of uh coaching calls
192:40 - so that it can get everyone's schedule
192:42 - devin says i may
192:43 - join just for the freelancer help for
192:46 - sure devon i mean the level of skill you
192:48 - have and you're even helping us
192:50 - in the live stream and you're bringing
192:51 - so much value like i know
192:53 - what level where you're at and if you
192:55 - join that community i
192:57 - promise you you're gonna get massive
192:59 - massive help in the community
193:01 - i mean the community is unbelievable so
193:03 - if you're in there and you're looking
193:04 - for freelancers to help you or even
193:07 - recruit somebody with you so you get
193:09 - like those clients and you get
193:10 - work you can distribute it with the
193:13 - people in there to even help you out
193:15 - so if it was you i mean you're probably
193:18 - you can get one or two projects that are
193:20 - going to pay
193:21 - 10 times the amount of what is going to
193:24 - cost you to get in the course
193:26 - and you're not just going to have access
193:27 - to those people like you have access to
193:29 - me directly
193:30 - you have access to sunny and you get to
193:33 - be on live calls with him every single
193:34 - week and
193:35 - for the people in the comm like youtube
193:37 - and facebook and stuff like that
193:39 - you guys can see there are 200 people
193:41 - live at any given time and we're pumped
193:43 - to have you
193:43 - but it's really hard to communicate
193:45 - one-on-one with every single person
193:48 - it just doesn't really allow for that
193:49 - but in slack
193:51 - you can communicate with us real time
193:53 - and then when we do zoom hosted calls
193:55 - you can literally talk to us one on one
193:57 - we bring your question we speak with you
193:59 - and then we solve that question
194:01 - oftentimes even nas last
194:02 - week i talked to him by the way sunny i
194:05 - talked to nas last week
194:06 - and nas was like he got on a call with
194:08 - one of the students for 42 minutes
194:11 - literally 42 minutes and
194:14 - he helped that student solve all of his
194:16 - coding problems that he had for his job
194:19 - and it blew my mind i'm like that is
194:21 - insane amount of value so
194:23 - that's the level of value and care
194:26 - and passion that we bring it's just not
194:30 - there in the market
194:31 - anywhere and so if you're serious about
194:34 - this and you want to do this
194:35 - and you want some support you just want
194:37 - somebody to be there with you
194:39 - that's who we are and so that is why i'm
194:42 - saying and i'm so passionate behind
194:44 - so passionate about this like go click
194:47 - that link
194:48 - and jump in the program and we're going
194:49 - to be closing this program in a few days
194:51 - so
194:52 - please please please if you're serious
194:53 - don't miss out on that
194:55 - yeah and guys i'll say it firsthand
194:57 - having gone to university and even did a
194:59 - masters after that
195:01 - this course if i knew it existed i would
195:03 - have saved every single penny and i just
195:05 - would have gone
195:06 - and done a bootcamp like this like and
195:08 - it's more than a boot camp it's not just
195:09 - a simple sort of course or something
195:11 - like that
195:12 - it's just going to take you from
195:13 - absolutely nothing
195:15 - so literally never having coded before
195:17 - all the way
195:18 - and we teach you don't we don't even
195:19 - teach you just the basics of like
195:21 - getting a job at the end of it we show
195:23 - you different ways of making money so we
195:25 - teach you
195:26 - how even after a week of coding from
195:29 - basic pure beginner guys
195:30 - after a week of coding being able to
195:32 - make an income by teaching
195:34 - somebody else who's never coded before
195:36 - um
195:37 - and that really really actually
195:39 - incredibly does well for a lot of our
195:41 - students
195:42 - um and it's and i've actually lost i've
195:44 - honestly lost count of the amount of
195:46 - students now that i've seen
195:47 - who have landed jobs freelancing clients
195:50 - tutoring clients we have a 17 year old
195:52 - who made 180 dollars on a
195:55 - uh on i think it was like on two
195:57 - coaching calls which is insane
195:59 - like yeah that's he that means he's
196:01 - charging 90
196:03 - an hour um yeah and we have had students
196:07 - who have gotten hundred and ten thousand
196:10 - dollar contracts
196:11 - we have ryan noble who last month closed
196:14 - out twenty eight thousand 000
196:15 - in one month so we have i mean from
196:19 - students who are like making their first
196:20 - 50 dollars to more advanced people who
196:23 - are making 28 grand or 40 grand
196:25 - and so there are levels to this so not
196:27 - only we're going to give you that like
196:29 - side of
196:30 - coding but we're going to give you that
196:31 - side of freelancing the kick in the ass
196:33 - like how do you actually go approach
196:35 - clients like
196:36 - retain them over a long period of time
196:39 - make sure that they're not just paying
196:40 - you 500
196:41 - for this one project they'll work with
196:42 - you throughout the year and pay you like
196:44 - 6 000
196:44 - because you can bring so much value and
196:48 - really help them out and i love that
196:50 - devin just said um
196:52 - he's like i'm sold bro he's like lol
196:55 - keep talking
196:56 - and take my money awesome devin we want
196:59 - to see you in the program
197:00 - and if you jump in you know this week
197:03 - sonny is going to get on a call with you
197:05 - and hell like you know what i'll just
197:07 - i'll get on a one-on-one personal call
197:08 - with you like if you jump
197:10 - actually you jump in and i see your name
197:12 - pop up because i have it on my phone
197:14 - where i can see who's coming in so i
197:16 - know like indra yani joined
197:19 - a little bit ago all right so if i see
197:21 - you pop up in here
197:22 - and you join the program i'm definitely
197:25 - just going to jump on a one-on-one call
197:26 - with you
197:27 - and put you in touch with people and see
197:29 - where you could use the most help
197:31 - and then you're going to have calls with
197:33 - sunny and nas and everybody like that so
197:35 - whether it's freelancing help or
197:36 - building projects like we have got you
197:38 - covered
197:40 - exactly malika certhi asked a good
197:42 - question would one-on-one guidance be
197:43 - available
197:44 - honestly this is the closest thing you
197:45 - will ever get to one-on-one guidance
197:47 - like
197:47 - the amount of students that i have
197:49 - one-on-one chats with every single day
197:52 - like my mornings and my evenings pretty
197:53 - much consist of just chatting to
197:55 - students
197:55 - um so it could be literally if you've
197:57 - landed an interview if you have a
197:59 - question about your homework or coding
198:01 - or anything like that
198:02 - i literally say there's no sort of
198:04 - barrier you can just ask me whenever you
198:05 - feel like it throughout the day
198:07 - at any point in time and i'll get back
198:09 - to you asap and
198:11 - every single time it it's a massive
198:13 - value to all of the students they love
198:14 - it
198:15 - they feel like they can chat to us uh
198:17 - and you don't even just have one guys
198:18 - you have like all of us you have me
198:20 - kazzy nars jacob like everybody's at
198:22 - your disposal and it's
198:24 - really really gonna it's a game changer
198:26 - in this sort of space
198:28 - yeah so guys take advantage of this this
198:31 - could be your secret weapon the link is
198:33 - in the description below
198:34 - click it join it we want to see you in
198:36 - the program
198:37 - live calls happening every week multiple
198:39 - live calls great community personalized
198:41 - video feedback and just we love you and
198:43 - we you know we got you
198:44 - and again if you don't like it for any
198:47 - reason you can cancel at any time you
198:49 - can cancel within your own dashboard
198:51 - there's no weird way you have to cancel
198:53 - so you can cancel any time you need a
198:55 - refund you're not happy we got you
198:57 - covered we don't want you
198:58 - your money we just want you to succeed
199:00 - and that's about it
199:01 - guys at this point if you watched up
199:03 - until now thank you so much for watching
199:05 - like the video if you haven't already
199:06 - just much love to everybody
199:09 - joe thank you for the support michael
199:11 - everybody who's on this live stream
199:13 - uh we love you guys and uh we will see
199:16 - you guys
199:17 - we're going to see them tomorrow right
199:18 - sunny that's it we're going to see you
199:20 - tomorrow for another build
199:22 - yep we're going to see you guys tomorrow
199:24 - just one thing for my own satisfaction
199:26 - you know it's um i just want to really
199:29 - hit this
199:31 - right there and just um you know just a
199:34 - little like
199:36 - right there there we go so now this
199:39 - project is just done
199:40 - completed and um also i just want to
199:43 - have the live
199:46 - live build of the app guys this is what
199:48 - we build these are the types of projects
199:49 - you guys will be
199:50 - learning how to build every single week
199:52 - um and tomorrow we're gonna go live
199:54 - again and build something give us your
199:56 - ideas
199:56 - shoot us your ideas on instagram and tag
199:59 - us
200:00 - outside of that sonny what else what
200:02 - else do we got
200:04 - uh i think honestly guys like we the one
200:07 - thing i would love to say is that like
200:09 - shoot us your ideas because literally we
200:11 - came up with this build like today and
200:13 - one day we came up with the build
200:14 - and we've already started to get some
200:16 - ideas from people but like we said like
200:19 - the ones that are actually really kind
200:20 - of get to us are the ones where people
200:22 - actually just send the video like
200:23 - literally
200:24 - yesterday we had a video submission and
200:26 - if we see one of those we're more likely
200:27 - to pick that one
200:28 - idea and you're gonna see the idea being
200:30 - built so um
200:32 - yeah honestly i'll say yeah just shoot
200:33 - us your ideas and we can def we'll build
200:35 - them for you
200:36 - yeah yep awesome devin gray says just
200:39 - purchase
200:40 - can't wait to link up with y'all amazing
200:42 - devin
200:43 - and as a matter of fact if you ever come
200:45 - out to la
200:46 - come hang out with us the entire team
200:48 - you're more than welcome to that'd be
200:50 - amazing
200:51 - and uh yeah anything we can do just let
200:54 - us know i'm
200:55 - super pumped to have you in the program
200:57 - you're going to be blown away
200:58 - and keep joining us on these live
201:00 - streams i mean i feel like you're
201:01 - already a part of the community honestly
201:03 - like
201:03 - even the live stream we were doing today
201:05 - i felt you were
201:06 - adding so much value so it's going to be
201:09 - exchange of both
201:10 - both ways you know value and so one
201:12 - thing i want to highlight here is that
201:15 - we have a high caliber of people in the
201:16 - community so like
201:18 - it's not just that devin is going to get
201:20 - value from the program
201:21 - the community is actually going to get
201:23 - value from devon as well so those are
201:25 - the type of people we actually attract
201:27 - in this community so that's another huge
201:30 - benefit for why you should consider it
201:32 - because you're going to have people like
201:34 - devin and people like
201:36 - you know our-minded people who are on
201:38 - this live stream and you can even see
201:40 - from the chat
201:40 - how positive and good energy and just
201:43 - positive vibes everybody has
201:46 - exactly yeah
201:49 - um awesome guys devin says i'm in the
201:53 - valley i'll bring masks and come see
201:55 - y'all hey
201:56 - nice awesome we got we got a few extra
201:59 - masks for you so
202:00 - uh we're located in hollywood so that
202:02 - would be actually really really cool
202:04 - awesome guys thank you so much and we
202:06 - will see you guys tomorrow
202:08 - on another build see you guys
202:11 - peace yo raja says payment failed
202:15 - um raja if your payment is failing
202:19 - don't worry just act just uh send us an
202:21 - email at support cleverprogrammer.com
202:23 - we'll try to help you out
202:25 - but yeah we'll try to help you out um
202:28 - and uh
202:30 - try using paypal as well that's that's
202:32 - we've we found that close to you
202:34 - yeah yeah exactly try paypal that works
202:37 - so yeah give that a try
202:39 - awesome guys love you peace okay see you
202:42 - guys tomorrow peace

Cleaned transcript:

how's it going guys and what are we going to be building today sunny we are going to be building a dope looking netflix clone so let's go ahead and show them quasi so this is the clone that we are going to be building in today's project that's what we're gonna be working on guys uh so i'm going to quickly go ahead and start demoing it we apologize for running a little bit late just because we're dialing up dialing in our setup and making sure that it looks phenomenal for you guys but here is this clone that we're working on so first of all just take a look at it the feel it feels like netflix and if i go here and i want to play a trailer you can go ahead and play a trailer also guys if you actually want to check this app out you can go to that link right now at the top i'll drop it in the chat and you can actually play with this app yourself yep so you guys can actually go to this link right over here let me turn my audio a little bit lower so it doesn't peak so yeah you guys can go to this link boom there we go yeah and you guys can jump in and you guys can actually start playing with this app so here you can see i can scroll through it just like netflix i can play trailers so let me move this stuff out of the way move down what trailer should we show them next star wars yes yes check out star wars let's see all right so give it a little click and it should pop in dope nice and let me put on can i put on system audio too nice there we go so here's the cool thing about this which is that you even get that little bar that drops down from the top when i scroll down exactly netflix bar dynamic also guys just to know this isn't hardcoded information we're actually getting all of this data right now from a third party api so when we refresh you should notice that the top manner is going to change because we're pulling in new information yep so let's go ahead and refresh yeah so even if we refresh we can show you that we're it's dynamic because it's pulling in new information yeah so at the top you guys will see the top thing change and guys if you could do us a favor we bring in a lot of love and we build this with a lot of passion for you guys it doesn't take anything from you guys if you could just give this video a like that is huge um it automatically puts this video out everywhere and all of these projects that we're building there for you guys and so this spreads it out and makes it easier for everybody to get access to them so just go ahead give this video a like subscribe to the channel if you haven't already and uh let's get back to building these projects let's do it okay awesome so should we kind of jump in and actually get started on it now sunny yeah let's do it so we actually set up a coding terminal um that me and kazi are sharing right now and we're using vs code liveshare so it allows me and qazi so if i type in in the terminal you should see my little customer over here perfect perfect and what we're going to do is firstly before we actually set up anything actually i think we'll spin up a reactor at first that's always the first did we drop the link to this app by the way uh i dropped it on the youtube chat might be worth dropping on restream oh i see yeah that might be handy and then we can throw it out to everyone on facebook as well and guys if you guys are enjoying that and you actually mess around with the demo be sure to shoot an instagram video and show us when you show us when you actually do it because we love to see you guys we love to chat somebody actually sent out a awesome video yesterday uh cause you wanna talk about uh that story that we saw yesterday oh yeah that was actually really amazing let me see if i can even share it because we love when you guys share your projects and things like that with us so um if you guys want to go ahead and do that that would be really awesome let me go here and share what's up what's up sunny aka this was amazing so yeah if you guys want to do something like that that would be really freaking cool because we love seeing your guys's um you know how you guys built the app what your reaction to it was did you enjoy it because that keeps us going and you guys can actually send it to us right over here and we're going to get started building this app pretty much right away so one cool thing we're doing this time is on the right hand side of the screen you guys can see i just added a text overlay and this basically shows you what we're going to be doing and when we're going to be doing it so this table of contents is pretty much going to be on the screen the entire time and this will tell you what steps we've already completed and uh so it doesn't matter when you join this live stream or maybe you're watching this video later it's all good you can know what step you're on at any given time exactly so the first step is let's go ahead and grab so in order to actually pull all the information that you're seeing guys we're going to actually go ahead and grab something called we need an api key from a service that we're going to use and many of you guys have heard of something called imdb yeah but what we're going to be using is something called tmdb so if you just go over to the browser right now and you just need to set up a quick account so so i'm going to actually just go ahead and make sure everybody knows that that's what we're gonna be working on now and we're done actually demoing the app so you guys can see in the checklist that that has been updated and now we're gonna be actually getting get tmdb api key right exactly so you guys can follow along with us and actually do these exact steps if you want exactly so what you want to do is go over to your website called tmdb uh is it tmdb.com yeah just type in tmdb and then it will give you a nice little google link um so if you click on that one yeah and if you go to create an account with them so let's go ahead and go to uh should have a little account saying because you actually if you type in let me send you a link one second i didn't get you here we go here we go because i went to their developers one so this is probably what it is yeah that's the one nice okay yeah you just need to click oh yes you need to sign up uhhuh uh are we going to be sharing this with anybody else like our password or anything or should i just use my private password um so no this is going to be the api key is going to be visible for everyone um but this password is going to be blocked out so they won't be able to see it yeah so use a private user yeah whatever password okay okay so here we go awesome and what we're doing here guys is we're actually going to access a service which is basically like what we're going to do is we're going to make a request to this service called tmdb and they're going to give us back a bunch of information um about different films and what's really cool about this service is that they actually give us a bunch of different genres so we have like netflix originals trending now top rated action movies comedy horror etc and then what we do is we pull that information in and then we throw it on the front end and that's what you're going to be seeing and that's actually what you saw in the demo so we didn't hard code that that was being pulled from this api that we're setting up right now awesome so if you go to the top right and click on the little c and you want to click on profiles and settings and click on settings at the bottom okay and then on the left after you click on settings you want to click on api and you should get a little key uh so you go to create so right so go here and then go right there right yep so request an api key and then click on developer yep and this we just got a scroll down and accept that so at this point this won't take too long just click type of use uh do web application so if you do so click that one type of use website and if you just you might want to put this on a separate screen so we can hide this from the stream and then just chuck me on the screen that while we sort of go through this form yeah okay nice so what you guys want to do is you just want to put in all the details says application name application url what about the application url what should we make that the url doesn't actually matter to be honest i added a random one and it didn't crash the uh the app at all so here what we can do is and the application summary you need to give it a summary just saying like you're either making a demo or something otherwise it doesn't let you get past it and then enter your details and you should be able to go through so once that's done what we're going to be doing is for those of you who don't know what react is we have web development which is basically html css and javascript now all of those are the three fundamentals which is how we build a website but we pretty much wrap it in something that facebook built and that is called react and react allows us to build really scalable powerful apps and the main reason why it's called react is because it cleverly owns a very in a very smart way it only renders what it needs to render so we're going to be building that in a sec but let's go back to uh the screen and we can show you the next step so i got these screens yeah we got the api key yeah yeah so what we're going to do now is we just need to take note of that api key so you grab that and just paste that somewhere else uh and what we're gonna do is yeah maybe if we just chuck it there yeah awesome do we need uh do we need any of these other ones like api access token um so no we don't need the api access token but we could use the api request with postman just to give a demo if you want oh i see so like basically just do this and give a demo with this okay yep so for those of you guys who haven't used postman it allows you to send a request to any sort of api or a server so in this case what we're going to do is go ahead and make a most um get movies yeah and if you just paste it in there yeah right there let's click send and now we should get back so you can see we got back a bunch of information um and what you need here's fight club i love fight club let's try opening it and uh boom it sends me to this awesome okay great so you have a bunch of information that comes back from that request so that's an example of now we it's working because it actually gave us some information back so if you got this bit wrong then it's probably your api key isn't correct yeah okay so awesome the next step that we want to do is actually go ahead and start our and just so people know how i did this is i hit new yeah then i hit request right here and then all i did is paste this link just make sure this says get and then my next step was to hit that button send yeah that's it i think you can even press command t to open a new tab oh nice oh that's much easier okay um cool so the next step is let's go over to our code uh vs code and let's let's actually share a terminal with each other so that we can code easily together sure thing yeah so there we go and if i go ahead and type in i just need to click request read and write access here i made it so now i can type in that perfect okay so what we need to do now is we need to run a command to make sure you're in the right folder that you want to start your work in and we're going to basically run a command so it's mpx and you need to run mps you need to install npx before you can use it um and then we do create so just just one second so up until now right now we just completed our uh getting the api key right yeah the perfect okay nice and now we're about to create our react app that's it awesome nice there we go let's update that as the top one as well yeah so create react app yep keep going okay those sounds start getting more and more hyped as you get through it so now in the terminal we're going to say mpx create react app and then what you need to do is just add a space and then just give it some kind of name so in this case we're going to say netflix clone and we're going to click enter and that's actually going to set up everything guys so that sets up all of the stuff that you need to get running with your app it will install all of the dependencies and modules and all that sort of clever stuff behind the scenes um so you that'll take about a minute or so so while that's happening let's head over to firebase so firebase is a suite of tools by google and it allows you to do a bunch of clever things so you can host your website you can have a database you can have authentication in the previous session we did a bunch of authentication stuff so that'd be cool if anyone's interested in that to go check that out but here you just want to have a gmail account log in and click on add project and once it once we click on our project you just need to give it a name so in this case we'll go ahead and call it insta netflix clone there we go netflix phone awesome and this you can enable or disable based on if you want google analytics there we go nice so now we're setting up our back end so right now for today what we're going to be using firebase for is for the deployment of the app so that we can actually host it so when you guys were actually checking out the link that we had previously which was this one so you can see on the screen so the one that i'm highlighting at the moment on the code panel that link is actually a real link so that's a real link that's been deployed and we use firebase to do that which is really really powerful and it allows you to pretty much get the app up and running and live was really really quick um so yeah nice let's go ahead and click continue and now what we're going to do is if you just tap that little web icon at the top i will and just to be very clear we're now set setting up set up firebase hosting right yep so now exactly now we're setting up firebase hosting and we're done with the create react app yeah we're on fire moving fast yeah nice that's the sound of us being done with the sound of success cool we're gonna get so smooth with this all right let's keep going netflix and then there we go netflix and then you want to tick that little box here okay so uh let's register up okay so the next step where it says add firebase sdk we don't need to worry about that because we're using node modules uh but this step you do need so you're gonna go ahead copy that and then go to your terminal so i think let's open up a new terminal and do that command yeah so you just simply enter that command i think it might not work so if it doesn't work you might have to add sudo so whenever you install something with dash g you need to actually have admin rights you need to write sudo and sudo basically gives you admin rights which is why i ask for your password uh and then you pretty much run that command and everything should work as it as it needs to and that's gonna basically our nice best channel for react now on youtube ah that's awesome dude thank you very much love stuff like that um yeah so pretty much installing the firebase tools is very simple you just add that you just run that fund and then you'll be able to type in firebase in your command line and you'll get access to all of the firebase tools uh so that's pretty awesome so somebody said chris weiss are back with you guys today i actually spoke to chris barley on instagram nice really nice yeah yeah he refreshed the story so guys that's what i'm saying like repost stories and i can have it and we can me and quasi can have it yeah and you guys this time when you make a story make sure you tag both of us and also like i want to hear you speak with your in your video and like show us your code exactly yeah that would be awesome yeah yeah oh i've been upset are you using all my zsh yes we are sanchez says gotta say man the qualities live streams are topnotch feels so smooth almost like a video thank you yeah that's the goal that's the goal nice yeah a lot of effort goes into making these super smooth and slick yeah okay so we have done a bunch of work so firebase tools has been installed so that's good the next step i guess is so the create react app just finished and we've got firebase which is just finished so let's go ahead and for now what we what tasks okay so we're done with firebase hosting or not yet not just yet not just yet let's go back to the browser and let's open up to the little burger menu and click on the hosting okay yep that one there and let's go ahead and click on get started awesome and click next and we can do that afterwards yeah next five is the next awesome so this will set up everything we need and the last step before we can say this steps completely done is let's go ahead and click that burger icon in the top left and let's click on the little settings cog so the settings yep project settings and once that's loaded let's go down to the bottom and here we will find the sort of magic which oh actually we don't actually need this today we don't actually need this today so we are done we are done with the step nice okay yeah so now we're done with this step completely right yeah we are completely done with five minutes awesome let's make sure that we put a nice little check mark next to it yep i want to hear the little nice so now we're going to be what getting all the movies yeah so now we actually start the build so this is going to be the sort of where all of this sort of logic happens and everything like that um so yeah we can actually get ahead go ahead and get started so get all the movies okay um okay nice so let's actually get the app running on the right and we'll get the code running on the left cool let's do it so in order to start the app guys what you need to do after we actually run create react app you need to do cd and then netflix clone if you're using omaze you don't need to write a cd but for those of you who aren't using that you need to do cd and then do um oh i can't actually type into that one uh the first one i can you know cd netflix clone so netflix and then you can tab and you do clone and then we're in the correct folder so if you do ls to list all the files you should see all of this stuff so if you see that you're in the right place so to get the app actually up and running you just do mpm start and what that's going to do is it's just going to spin up the react app so when you use create reactor it gives you a very nice template that gives you a really nice sort of starter project and it will launch it on something called localhost 3000 so you have everything up on there so yeah second we should see a little spinner nice there we go right there yep yep awesome so and now what we want to do is we want to i've also got access to your shared terminal that's nice awesome okay awesome so i guess next all we need to do is actually get started with the build so what we can do is let's open up let's actually do our cleanup process um so kazi you want to explain the cleanup process so yeah so basically yeah so basically in the cleanup process guys what we want to do is there are a bunch of these test files and we don't actually need them and also we can remove the logo so let's go ahead and select all three of these right click and just delete and now so that's clean now you're probably wondering why is it failing to compile and uh really the reason why it's failing to compile as well that logo svg is not there anymore we just deleted it so we're just gonna go in here and what we like to do is if i'm gonna just full screen for a second is um take everything inside of this uh in the header right you just let's just remove this entire header so inside of that div let's just remove everything boom there we go yep and also line two we have nice sergeant is here how are you doing nice welcome welcome carlos thank you for saying you guys rock really love your guys's energy this is amazing right cool so now it's cleaned up so now what i'm gonna just say is hey clever programmer let's build netflix clone front end today so just to be clear we're going to be working on the front end today guys yep but we're still going to be playing with data in in real time so yeah awesome so we have that's our starting point guys so that's literally where you want to get to to get everything sort of up and running uh and get everything sort of where we need to get that app started so the next step that we want to do now is so remember we got an api key right so in order to actually make the requests that we saw so for example the um the stuff that we saw earlier with um the postman requests in order to get that actually up and running we need to actually use something which will handle sending requests from our code and the thing that i like to use is something called axios so let's go ahead and install axios into our into our project so in order to do that we need to go over to our terminal uhhuh so let's go over to our terminal right here cool yeah so let's go to your terminal and let's install axios so npmi axios and all this is going to do is imagine it's basically going to replace uh what we were doing previously with um with postman but instead we're going to be doing it with axios so we're going to be making the request with axios in our code okay stop uh next i just want to because if you just follow me in the code yep here we go nice okay so now what we want to do is we actually need to set up our axios because we need to set up our request sender let's call it that and just like cause you're doing make sure you do npm start nice to restart the app so what we're going to do is we're going to create a file called requests.js so what i want you guys to do is what i want to cause you to do over there is just to create a new file called requests.js so um requests.js and is it going to be a component or should we should it be capitalized or no that's a good question so as it's not a component it's just sort of a functional module we just want to have it as a lowercase r so if we only have an uppercase uh uh r if it's a components let's change that to a lowercase r okay so let's go here and rename it yup so the convention guys is you would have it as an uppercase only if you are trying to resemble a component in your file name okay so awesome so we should have icons oh yeah there we go requests nice okay so now what we're going to do is i need to actually so there's a bunch of endpoints that i found previously so i found these on the tmdb website and what i'm going to do here is basically first i'm going to add a the key itself so remember that key that we got earlier so let's just add that here so we say const api key api oops const api key and here we're basically going to drop the key inside of here so if you don't mind just pasting it inside there cozy oh oops what's going on here is am i out of sync maybe uh i might have gone out of sync with you you see that yeah everything's gonna [ __ ] okay so i'm gonna quickly rejoin your actually then again we might be good enough okay so no i don't think we are okay i'm gonna rejoin give me one sec yeah yep so let me rejoin maybe we can answer some questions in the meantime yep i'll take on questions guys so you guys have questions let's take on some of your guys questions paulo asks or have you tried insomnia instead of postmen so yeah the answer is i mean i there is a there's echo right on his voice i don't know why that's actually happening because i don't really feel like yeah give me one second guys i want to figure out like if there is echo i want to remove it for you guys and just make sure but to answer you guys this question yes i've used them both i haven't used insomnia as much but i'm just a more of a fan of uh postman it was kind of confusing for me to just figure my way around so i kind of just stopped using it so an alternative for firebase um so actually there's not actually many alternatives to firebase i've seen that do as much as firebase do so you have aws you can do things like they can they have instead of cloud functions they have lambdas um there's a bunch of things like that but honestly the easiest one i found is firebase as a back end yep so that's to answer that question um okay awesome i think i'm it's working now yeah okay cool let's keep going perfect okay so we added the api key over here so everything's all good now so the next step is i found a bunch of api requests and all these are basically going to do is they all they simply do is these are the end points so basically i'm going to just copy and paste a snippet of code now so what this is is essentially an object we're just exporting an object here so if we it was to simplify this it's literally just a case of imagine we have a bunch of requests right and they're an object and each of those requests are basically inside of here and all we're doing is we're exporting that so we're just exporting it like this right so each one here uh is it is it equity um because i could hear it on your screen as well maybe yeah i think it's because yeah the audio is coming from my laptop and then they're able to hear it so maybe if i put in headsets might help a lot yeah okay so qazi your voice is low and sonny's voice is loud now um after we just plugged in the headset how was that my one says sonny you are doing great thank you very much there's my lovely cool friend and kazi love both of you nice um how about real quick guys how does it sound let me just try this so how is it sounding right now can you guys hear me clearly and sunny go ahead speak for a second hello hello hello are we all good i think we're good now i can't actually hear myself yeah should be a lot better yeah yeah okay yeah that's much better okay nice so carrying on so what we're going to do here and the reason why we're doing this guys is pretty much just to make it easier later to use these requests right so if we actually check out the um the the request so these are basically imagine like these are just the ends of the url so they're just the endings of a url and all we're doing is we're just inserting our api key right wherever it's needed and what you can notice is at the end of each of the lines so if you just throw if you scroll to the end of the lines cozy so yeah oh you mean like this like this yeah so you can see they have a weird sort of syntax uh sort of a weird sort of way that we request data from them so for example to get the netflix originals we have to use this so it's a weird param but this was on their docs and you pretty much pass this and that will give you the netflix originals to get the for example action films you give the the key code 28 for the genres and so forth so each one has a specific key code and they will give you the films back for that that sort of stuff so in order to get that working i actually went ahead earlier on and i found all this so that way we saved ourselves a bunch of headache in finding that during the stream um and then so that's the first step done right we actually have all of this stuff in a really convenient object and we're going to pair this together so we're going to go ahead and create a another file another well now i can't actually see your um i can't actually see your your photo structure cause you oh yeah so if you go ahead and go to you have to go inside netflix clone yeah uh for some reason it's not showing up on mine but it might come up once you start doing stuff so if you uh add a file here and then sort in source right yep in source and we're gonna call this one axios so lowercase a axios.js okay right uh nice so i can follow you into files but i can't actually see the files myself just super strange can you use a shortcut like command p and then switch between or like command shift p and switch between command p and switch files uh no because it goes into my one but it's fine so i'll follow you around until we sort of run into a hiccup okay um yeah so now what we'll do is in axios what we're going to do is so every single request that i want to send is going to have the same beginning of like this the same starting url right uh so what i'm going to do is i've got a little snippet of code here i'm just going to paste it here we're going to explain what this does so the top what we did is we're importing axios and basically that's just using the package manager the package or the module that we've installed earlier which is essentially going to do what postman does right and then next what we're going to do is we're going to create an instance so we have axios gives us this very nice method called create and all you do is you pass it a base url right so this basically means every single time i was to do something like instant so instance dot get then for example this would be sending a get request so if i was to write for example foobar then the url that we're actually going to be sending to is going to be this so it's going to actually look something like this i see does that make sense yeah so basically it's just taking this thing and then it's appending it to that yeah and it's a very simple sort of it's a very good pattern to use whenever you're doing a lot of sort of uh requests from your app so with that said what we're doing is we're exporting this um and then we pretty much have the bones for sort of starting to make requests right so everything sort of is looking good right now so let's go again let's go over to app.js so i think you may need to follow me yep so i've got yes so now what we're going to do is let's actually start to get a little bit so right now i guess we actually said that we were going to fetch movies right yeah um so this step actually is combined with the next step so we're going to sort of overlap some of this the two steps here so maybe it might be worth on the screen let's just have a finger pointing at both of those steps okay and what are the two steps so the two steps that we're going to combine pretty much are getting all the movies and building the rows because what we're going to what we want to do is as we sort of build those rows that you saw earlier um so if we go back to the app when i say rows what we're talking about is if we go to the um get all the movies and build the rows okay nice so if we go over to the demo app that we actually demonstrated earlier so in the second tab i think you've got your opening so you see the the in the in chrome you should have the tab open for the deployed app okay for the deployed app yep so that one so the roads that we're talking about now guys is these ones so you see where it says netflix originals where it says trending now um so we basically that is actually one component so every single row you see here is one component yes yeah and what we do is we pass in something called prop so for those of you who are new to react all we need to basically be doing or what react is sort of a revolved around is component based work or component based design so you write one component and then you reuse it by passing in different props props standing for properties got it right so what we're going to do here is let's go over to app.js yep zap.js and you might just want to follow so it will sort of go with the cursor yep yeah nice and then what we'll do here is we're basically going to have a component like this where it's going to say row and what we want to do is we want to customize the row by basically passing in a title right so in in the first case the title that we saw was netflix original so it's like this netflix originals and the second one that we saw was an example like i think it was trending now so trending now okay yeah and so this is going to work out oh nice this is basically yeah nice so this these rows are going to be this trending now one is going to be this one over here exactly nice and the reason why i'm building the rows first is because it's the most like apparent um thing on the screen so let's just start with that and then we can sort of build the banners and we can build everything else around it um okay so let's go ahead and start with that so um the next step is we need to actually create our row so let's go ahead and create a file called row.js and is this gonna this is gonna be a component right yeah this is a component so it needs to be capitalized and then here we've got a really nice snippet so um what we need to do now is to uh okay i think okay so kazi while you set that component up i'm going to rejoin the session so it doesn't mess up one second so i think all you need to do is run rfce so using the es7 snippets and that should get you up and going so rfce guys is a really nice trick by the way um that many people don't know about and it's basically going to um allow you just to write those three four four letters and press enter and then it will actually sort of get everything set up i don't know why my code base isn't starting one second let me just restart my vs code okay yeah like literally that one line will do this because this is something you constantly have to do in react you constantly keep having to make react components um and you always want to export them so then you can use them in a different file like this row component i'm gonna be able to use it in my axios file maybe or my app.js file so rfce just allows you to do this thing very easily yeah exactly and if you code so carlos one thing i do want to mention is like i also do a lot of development in vim and one thing i recommend is at least for me i wanted to take the modern world like visual studio code pycharm all that and then combine it with vim which is just all command line and the best solution i found is use vim inside of visual studio code so like i'm still fast but i have all the bells and whistles of visual studio code now nice yeah because he's trying to get me over to vim i'm still we're always going back and forth on it um so now what we're gonna do is uh if you just follow me cozzy in live show give me one second because for whatever reason it switched audio it's like it's not from my headsets anymore so give me one second yep okay now we are good go ahead okay all right there we go so now what we're gonna do is let's just sort of get a baseline so what i like to do is i just mark it out so here we're going to have some kind of title which is going to say trending now netflix originals etc and then we're going to have a bunch of images so i want to have a container so like some kind of container with a bunch of uh let's just call it um let's call it posters inside right so there's gonna be a bunch of posters inside of it and those are referring to each of the films that you see and then we're gonna have a uh after that we are going to have oh i think that's it actually we're just going to have that and then the container with posters inside so here we notice that when we actually created the um component over here which we actually need to import so i'm going to quickly import that so i go to the top and i say import row from and then we do the file directory so row and that should pull in our component that we just created so here what i'm going to do is we passed in these two props title title right yeah so it's one prop with the value type so we're going to go back to our row and we're going to use some destructuring here so this is where the props come in but you can actually pull apart that object at this point by using some es6 sugar and here we say props oh no sorry here we say title and that right now if i do this little neat trick and i say uh h2 let's put h2 and we say title look what happens now guys so if we actually have the app running on the right we can now see you see it's rendering the two rows and it's popping out h2 tags with netflix originals and trending now so we've already got that sort of starting point which is quite nice yeah yeah nice and now what we're going to do is we're going to proceed to the next part so the next part is sort of where we got to think about things a little bit more so we initially had a bunch of requests that we had previously right so just one one thing real quick i do want to mention mongizi asks before i joined qazi's python course do you guys have a react course i'm still basic in javascript so yes we do have a react and javascript course and that course is called profit with javascript so if you guys are interested and you want to join that course so you can learn all of these skills but most importantly learn how to actually make an income with these skills the link will be in the description and you can click that uh and that monkeys you can check that course out that might be helpful for you yeah yeah and it doesn't matter if you're still basic guys we go from literally basic all the way up to react development which is awesome so cracking on we've got the row component so here what we want to do next is i actually want to have it so that we have a bunch of movies right um and what we're going to do is the way we're going to do it so it's a combination of things that we need to do now so the first thing we're going to do is we're going to use something called state to keep track of those movies so state is like shortterm memory when we refresh it disappears but it's a very good place to store some information so the the easy way of putting it is that state is basically a react the way to write variables in react right so here we're basically going to write const and then i'm going to do this and the name of the variable is movies and this is the way this is the syntax of how we do it so it's movies and then you say set oh oops i don't know why it's done now the set so movies set movies like this right um mcvision says how can i join your course quasi so there is a link in the description below uh you can check that out and it's got all of the course details and everything that we offer uh feel free to just go ahead and check that out yep so yeah so yeah so this is how we pretty much set up a piece of state so we say use state so we're using a react hook here and hooks are like these little functional pieces of code that make our life so much easier and then inside of these brackets you give an initial value so here i'm going to give an array so an empty array empty array like that and then what we need to do is because we're using that we need to pull it in from react so we say use state up here and that means that we can actually start using it otherwise it will freak out saying why using use state before you put it in so with that said we now have an empty movies array so it's an empty array because we declare that over here now what we want to do is we need to kind of fill it with some information right we need to give it some information we need to actually populate it with some stuff but what we need to actually do at this point so remember those requests that we we sort of set out to and created earlier right if we go back to app.js what i'm going to do now is i'm actually going to do a very sort of nice little trick here and if i go to app.js so i just want to check so yeah stephanie where are you getting these code snippets to paste and so basically we have an extension called uh which one is it is es6 something right yeah es7 react redux snippets so that's where we actually pull that rfc e snippet from um and these are other extensions that we're currently using the bracket pair one and the live share one that's how we're able to share live with each other exactly yeah and i do recommend you get those extensions because it saves you the hassle of remembering how to write stuff which which we all sort of forget so next we're going to basically add another prop and we're going to call this one fetch url right and this one basically is just going to be so when i say fetch it's basically the url that we're going to start pulling the information from because imagine the netflix originals row is going to have a different request to the trending now row because they're going to pull different information right so in order to do that what i'm going to do is i'm going to pass in a value here and a value here and those values are going to be the requests that we set up earlier so here i'm actually going to say import and i'm going to say requests from and i'm going to basically just go over to the requests so requests and what this will do is if we actually go ahead and look at our requests again we can see so remember all of these requests so the fetch trending effects fetch netflix originals etc now i don't need to write this long ugly sort of thing inside of my app code i can just pretty much reference this key and it will give me what i need so we can go back and now i can basically say requests dot and the one here i think it was fetch let me find the name of it oops was it so if we go back to let me get that up as well so we've got the requests yes i want this one so i want fetch next flicks originals so here i'm going to say effects fetch netflix originals and here i'm going to say requests dot and this one is going to be trending now so request start trending now yeah yeah even on your screen i think mine doesn't show but if you click on if you add a dot after request the minute you add a dot it will show you all the options so if you do request dot dot so if you if i yeah uh you need to do it yeah so request dot there you go so that's really clean and then that way you don't have to remember everything off the top of your head awesome so now we're passing in the urls right so what we're going to do is we're going to use that so we're going to go inside our row component and here we're going to say fetch url and now we we have the sort of url that we're going to sort of go and grab some information from so what we need to do now is we basically need a snippet of code so what this is what i need right now i need a snippet of code so a snippet of code which runs which runs based on a specific condition oh yeah here we go yeah so what i just wrote here is we basically need a snippet of code which runs based on a specific condition or variable um and basically what react does is it gives us am i muted for a second frankie just told me i was uh i was not following you earlier so i just clicked follow oh yeah yeah i don't i don't think you got muted but i saw that when you weren't following yeah got it okay um so now we need this so a snippet of code which runs based on specific conditional variable and react luckily gives us a really nice uh hook so it's called usefx we have to import it and basically what we do is we write use effect and inside of here we basically do the we have two things we have the first argument which is just in a function here and then the second thing is these brackets so these square brackets and basically so i'm going to explain what this does now so this piece of code inside of here what are we trying to by the way what are we trying to achieve sunny like right like with this yeah so what we're trying to achieve here is i need to run a piece of code uh when the row loads so when this row component loads on the screen i need to run a piece of code just to be clear when this thing loads you want something to run yeah exactly so when that robe appears on the screen and it loads i want to basically make a request to tmdb which is that movie server you want to be able to pull this information right when that road loads right exactly got it so like even this thing okay cool so and then you want to be able to basically pull the information for all of these and when we see information well it's the image that we need yeah we also need it from the trending now or the top rated category yep okay so i need so yeah so the categories are based on the fetch url that we passed in as a prop yep so that was this is so this is a really good way of using use effect you guys like basically every time this row will load this snippet of code will run and so as soon as this row is loading we want to be able to like feed it the the information that it needs exactly and what we can do is in this bracket here if we leave this blank we're basically saying run one so if if we leave the brackets blank then we're saying run once when the row loads and don't run it again right yeah that's what we say if it blank uh if you were to pass in a variable here so for example if i passed in movies it's going to run once when the row loads and then it's going to run every single time movies changes so we call that a dependency so it's dependent on if movies changes as to whether or not it needs to refill so anytime this variable movie changes this snippet of code is going to run but if you remove that sunny movies from here and it's an empty bracket yeah so basically this code is only going to run once because of this only on page load and that's it exactly yep yeah so that should help everyone understand sort of what use effect does so let's actually start coding in here so what we need to do is i'm going to pull in remember we created that little axios helper so i'm going to actually use that here so i'm going to say import i'm going to say axios from but i'm not going to do the typical thing of pulling it from axios to depend the dependency i'm going to go ahead over to our file where we created um our little helper because this one remember if um we actually um so if i go over to that file just right here yeah this one right here so remember we we called it cons instance here but because we export it as a default when we bring it in it doesn't actually matter what name we use which is why over here when i actually import it i can call it whatever i want really right here i can say accurate yeah so if you have a default import you can actually rename it very well interesting okay if it's not a default import that's when you have these squiggly brackets so if it's not so this is why i thought this name was like really important or something because i was always confused why we really need that name but now so this is just like really the alias whatever you want to call it okay i understand yeah but a handy little lesson is if we go back to accio suggest if i was to basically do this so if i was to go here and get rid of export default then you would have to structure it yeah so if i yeah exactly yeah why was it giving away oh i see because you'd have to do it like this yeah and then you get rid of that but so so a rule of thumb here guys is you can only have one default export in a file but you can have several ah that's really nice so then you could oh okay that is really helpful because every time i was like oh if i need to make multiple components i i have to make multiple files but maybe i can actually keep them in the same file and then destructure them in another one yeah so exactly so that's why it's really really nice thing and a lot of people it took me quite a while to figure that one out as well like a default is actually uh i didn't realize you could rename it i thought it was super crucial to keep the name yeah yeah yeah yeah nice okay so uh i think you just want to need to refollow uh because if you go back to yeah nice uh so now what we're going to do here is we're going to use it so i'm basically going to say um what i need to do now is i actually need to run a bit of asynchronous work so i need to i need to basically make an asynchronous call because i'm sending a request outside to a thirdparty service remember guys it's going to take it'll be really quick but it's going to it's going to maybe even take a second or half a second but we call that async so in order to run an async function inside of this little use effect because you can't actually use async things inside of a user effect you have to do it in a special way you do this you say async function and you say fetch data so you write a little internal function right so inside of here we're going to actually do all the fetching and then afterwards you just call it you just say fetch data that's how you do it inside of a use effect so it's a bit of a strange one but you actually need to do it like that whenever you have an async right so now what we're going to do is we're going to say const request so we need to make a request and the way we're going to do it is we say a weight so await is going to say when you make this request wait for the promise to come back so wait for the answer to come back so if it goes off to a server even if it takes five seconds wait for it to come back and then do something um so we say axios dot get and then here i'm going to use that fetch url that we talked about earlier so imagine what it's doing here is it's going here and it's starting you get this beginning url so imagine like this is what we're doing so we get that beginning url and then we pass in a url here so for example we passed in the fetch netflix url which if we go to this one is this so i'm just going to grab this and show you what we're doing and then here this is actually just going to because we're using the axios that we set up earlier it's basically doing this so this is the url it's sending a request to now but it will replace the api key with our api key nice does that make sense yeah yeah so you see it's a very very nice slick implementation um and that but it looks very clean as well like we don't have to write much code to get that working and now what we're going to do is we basically so what i like to do at this point is do console.log request right so console.log request and and the reason why i do that is because i like to see what the data structure is that we get back because remember we don't actually know what so i need to just do a little something like here to return requests so that it doesn't freak out but here console.log request is needed so that we can actually see the data structure that we're getting back so i'm going to save this now and what i want you to do is if you full screen uh the browser so let's go ahead and full screen the browser and let's just open the inspector but let's go to our app so the the the local host version yep says open inspector and now on the right so if you've got a sort of console if you open up the console yeah we can see see there's an object right yep see it says object if you click that you see this is what's coming back from that request so there's two objects because there's two rows and each one has a different thing so now this is how you actually inspect what comes back so we're not interested in the config we're interested in the data and in specific we're looking at data.results so that's how we sort of find what the structure is right this one so whenever you make a yeah so whenever you make any sort of api request a thing that people usually get stuck on is like how do i know what's coming back and a good way of testing that is console.log it and then see what you're getting back so now we know that the stuff that we're interested in is inside of data.results so these are actually the same movies like if i actually put them side by side just to show it visually even though we're not here yet in our new build but like if we actually look these are the same movies that we were getting here so that's dark it's just we haven't made it yeah we haven't made it look nice yet but here's warrior run here is lucifer so that's now our next job is going to be to actually make it look nice exactly yeah so now what we do is um so we found out the data structure and we saw that it was request.data.results right yes that's the one request of data dot results so i'm just going to add that here so we have a note um and let's go ahead and split the screen i'm just going gonna actually make this a little bit bigger cool nice and you see they give you a bunch of information there guys so like if you need extra information you can always use that to see what's coming back um nice so what we're gonna do now is we are going to actually go ahead and put that information so you saw those those results that kazi was showing earlier we're going to go ahead and set that inside the movies so i'm obviously going to get the request dot data dot results which was a it's an array and i'm going to go ahead and pop that inside of our movies all right so what we need to there's one more step now so whenever you use anything inside of a use effect if there is any variable that is being you that is being pulled in from outside but it's used inside of the use effect you have to have to have to have to include it inside of here the reason being is because it's dependent on that variable so it's now a dependency so every time this changes we have to update our use effect so that way that is one of the things that i was actually getting really stuck in when i was building my own app with react and i had to use asynchronous function and so i just could not figure out how to get it to load but this is this is pretty sick okay because if you don't include that what happens is say i passed in a different fetch url it wouldn't rerender the user effect but it wouldn't recalculate the user effect so you would have a you would you'd get a different answer to what you expected and that's why a lot of people run into an issue and then it gets very confusing when you're also combining that with async and and all that stuff so that's a very just a neat way of thinking about it so just just for one one second so why is it this one that we have yeah as a dependent so the reason why the reason why is this one is because we have we're using a variable which is being passed from outside of the block so and then when i say that is we're talking about this one yep you see because it's outside of the block in we need to tell use effect that you're using this variable which is outside the block i see so and the reason why is because that way use effect knows that something changed so i need to refile the code got it okay yep if that if that url changes now the way what i like to do just to get a little sanity check is i console log the movies to see if if anything's actually working or pulling through as we expect so if we go ahead and inspect the um the the uh screen we should be able to see now you can see that we get an array and that's got a bunch of movies inside of it oh nice so now that's all we're just getting here instead of getting all through yeah beautiful awesome so we get all the movies that come through uh and then the next step i guess what we need to do is actually just kind of render out so let's render out our first bunch of images so what i'm gonna do now is we've got those movies i'm gonna create a div and i'm gonna call this div so i like to use something called bem which is a way that we use um it's a way of naming your classes inside of react so in this case the the component that we're inside of is called row so what i'm going to do is i'm going to say the the the surrounding container is going to have a class name of row and then inside of it i'm going to have a div so this is going to be the container around all of those films that you saw previously yeah and the reason why i want them in inside of a container is so that you can scroll through them right so we need to kind of scroll through it so that's why it needs to be surrounded inside of a container so so these rows are going to be inside of a container right right these ones yeah okay exactly so visually kind of have a container like this exactly that yeah so this one's going to be row posters so this is actually going to be the container called row posters and then inside we're going to have some elements which is going to be row poster we have several elements with row poster yeah yeah so several row posters right um let me just do this yeah so nice so now what we need to do is we basically just kind of need to map through so what i need to do now is i need to say movies dot map oops movies dot map and what map is going to do is basically going to go through that array that we saw earlier so it's 20 different things inside that array and every single time we iterate it's going to get go ahead and get the next stop logan is here awesome hey welcome logan nice essay is here ss like this looks awesome dude nice glad you're watching it one thing i wanted to tell you sunny too is you know about this one devin says you should definitely try an extension like quoka to auto print the console logs in the code editor no way that's actually awesome i don't know about that what is that insane is it a extension i haven't used that we can look at it right now we can have a check and croco yeah let's actually let's go ahead and check that i haven't heard that i wonder how it evaluates things that are like sort of asynchronous live scratch ipad uh just go down and check the docs to see what it does so a weight result oh what oh look oh damn hold on i'm having a lot of trouble seeing this community features only right yeah okay so we got it so is there a way to be uh to make it work or is it just gonna work right here um i don't know i don't know let's have a let's have a check so if i do console movies i guess it would have if i do something like this so const a equals let's just say one and let's say console log a yeah nothing came up no i mean we can we can definitely look into that that'll be pretty cool though that might be handy okay yeah because then we can if we get that working outside of the session it might be handy for everyone to see awesome okay so now what we need to do is we say movies dot map and then that's going to go through that list of 20 things that kazi sort of showed earlier and for every single object so we call that movie so we're writing an es6 function here um so movie and then what we're going to do is we're going to say return me uh console so it's erroring out because i've got an empty div here so here we're going to say return me an image so i want to do an image and the reason why i don't do an image is because we're basically going to see the um we want to see those pictures right that we see so inside of those arrays objects that we saw earlier there was a special property in there which was called um poster path right so it was movie and then it's dot poster path and what we're going to do here is and for the alternative we're just going to say if it doesn't have that we're going to say get the movie dot name so that was another sort of attribute inside of one of those objects oh nice alternative so that's basically like a fallback for images so if it doesn't get the image it'll just get the exactly nice okay cool exactly so it's going to go ahead and give you that oh that is cool instead of console log do console.table that is a great hack look at that oh damn i didn't know that that's nice dev um yeah this this is um we need devin gray on every live stream because he's just dropping major keys this is the one he's really really cool console.table that's the first time i've heard of that nice that is clean you can sort the table too look at that you can sort the table oh damn it's like full ready to go that is actually mindblowing that is so helpful you can drag it you could drag it look at that nice yeah because sometimes when you use the normal inspector it doesn't come out too nice yeah but uh i would recommend doing a console log to see the structure though so that you would see that it's an array see that it's um an object that will help you sort of understand the structure but that's a really good tip yeah nice okay so what we're gonna do now is for some reason we're seeing this error which is strange so if i open up my inspector let's see what happens so we've got array i'm just looking inside so we can see array and then we've got poster path um interesting so it should be right poster path just trying to figure out why that's actually freaking out um oh yeah okay nice so the reason why this is happening now is because poster part is actually looks something like this so i'm just going to paste it in here right so this i know why this is happening now so i'm going to go ahead and paste a poster so just so you guys see the attribute that i was talking about was something like this it looks something like this right so you can see that's not a url which is why it's falling right oh yeah yeah so what we needed to do is there is a url and i found it previously in the docs so if we go up to the top of the file i'm going to add a const here and this is the base url that we actually need ah nice and then it append to that is where you'll get your images from exactly that so right now what i need to do is i need to say i'm going to do string interpolation so this is a javascript feature and then here i'm going to say um boom i'm going to do this boom and i'm going to say base url so i'm going to do base url and then i'm going to have the movie poster right which is should be all good now so now if we save it we should see some huge images right nice nice so we get some massive massive images now wow that's happening oh yeah there we go yeah because we haven't seen any styling so you just can get these huge images and at this point don't freak out guys it's a completely normal thing and we just need to add some styles to this to get it working right so what we're going to do now is to get that looking a bit cleaner we're just going to do we're going to do a few things at this point we're going to say we're going to add a class name so we're going to add a class name and we're going to say this is a row poster and save it so let's go ahead and you know we should we should actually add pretty yeah by the way um devin said yeah we can add prettier right now too devin said you have to run quoca by holding ctrl shift q on the current control shift here oh no don't do that don't do that oh control shift oh i'll press command shift yeah 150 i was like whoa yeah yeah control shift here logan says those images are very high resolution yeah yeah i think i'll look into it later after this stream yeah we'll check that out so for now what were we doing we were saying did you want to install prettier yeah let's actually do that now because that might actually be really helpful so let's go to extensions i recommend everyone does this by the way guys it's a really handy extension so type in priya yeah and then what i like to do look at this seven million downloads insane seven million developers and then let's go to you need to go to your preferences so if you go to the little apple icon um oh yeah oh nice i'm gonna make it out uh so here if you type in so if you get rid of everything inside the search at the top and just type in format so go ahead and type in format and save yeah this is the most annoying one guys like you will not find this but this is actually like i could not get prettier to work for so long because i didn't know my way around visual studio code that much i'm from pycharm and python world and so here you make sure you go into the settings so step one is get into settings very important step two is type in format okay literally type it hit enter and then this is where it will come up format on save editor check that box once you check that box you will be good to go then every time you hit save prettier your app will run and format all your code for you if you don't do that prettier will never work and you will always wonder why your life is so bad yeah and we'll give a little demonstration of how good this really is so i think you need to follow me again after we installed that nice so now what we'll do is if i basically so you always run into situations where your indentations everything's messed up so now if we pretty much hit save look what happens so as soon as i hit save it just fixes everything yeah so it's going to save you a bunch of time when where and it's going to actually be a lot easier to sort of do stuff so what i'm going to do now is i'm going to create a row.css file so i think i might be able to say row.css nice yep so we create a row.css and if i go to the top and i import that file so this is a benefit of using components because now we can only we can have all of our uh row css inside of uh its own file which is me so let's go ahead and actually style that so let me just check something so row right so what we need to do here is basically i'm going to actually so all of these posters right i want to just style them a little bit so i'm going to go here i'm basically going to say all of the row posters i want to do a neat little trick so i want to say the width is going to be a hundred percent right so it's only going to use up 100 of the screen rather than what doing what it's doing now so you see now it's corrected and it's sort of fitting within the screen right i'm also going to add another rule so i'm going to say object fit so this is a really trick object fit contain will keep the aspect ratio so regardless of how i move it and shape it and size it it's going to keep that looking really really nice another thing i want to do okay is is it is it working your object contain thing yeah so the reason why it's not changing at the moment because remember the width is 100 so it's good so it's using up 100 but the aspect ratio is still correct but where that comes into play is when i actually say a set of max height so here if i say max height of 100 pixels and i save this now check this out oh nice okay so yeah so we have a quite a nice looking thing there yeah what we're trying to get it to just so we can all visually see it is like we're trying to get it to look like this you know but right now we have right now we have a giant column but essentially we need to turn it into a row like that yeah so the way we do that now is if we go to remember we actually surrounded all everything inside of a container called row posters right so i'm going to go ahead this thing is in a container called row posters and so basically what we're going to do is maybe drop in flexbox and then make it exactly all column based so flexbox will allow us to just do it with like literally two lines and then boom will go from column to a row yeah so if we i'll comment it out and then i'll uncomment it and show what it does so let's have the app running so the local yeah so without flexbox it does this thank you if as soon as i add flexbox into the container look what happens boom so there we go remove that flexbox let's see that in action again that is sick so flexbox is so nice you guys it makes your life so damn easy do that again exactly so as soon as i uncomment that like boom it's gonna just change everything another thing that um logan dropped that was pretty awesome as logan said uh he's like man between these three clones and jacob's ecommerce store next week my portfolio is going to be tenfold he's like thank you awesome yeah that's exactly what we aim for and i recommend everyone does that so all of these make sure you build them add them to a portfolio that's like the most valuable thing you can have yeah because if you then go to upwork or you go to craigslist or you go to any platform then go and get jobs they will look at your portfolio and they'll be like okay awesome we'll hire you exactly so now we actually have a really nice starting point everything's looking good um i guess what we should do next is i like to add a little sort of transition effect to the poster so that way if it ever changes size it will do it in a really slow way so that's basically just saying if we ever change the size for any reason add a little transition so it basically just takes four i think that's four and a half so 450 so it's like just under half a second i think um and it'll basically just nicely sort of change size um and then what i'm going to do is i'm going to add a margin right to everything so right now you see all the pictures are touching each other right yeah everything's touching each other but we kind of want to have this oh remove that again so do it a few times whenever you do these changes do it a few times like repeat it a few times so you can visually see it yeah nice okay i love that you see that it's a really nice sort of effect right and then it sort of then it stops everything from touching um nice and what we're going to do next is we're also going to add a hover effect so i'm going to go over here and i'm going to say row poster oops and i'm going to say when you hover over it yeah i want to do the following so i want it to kind of grow a little bit right so i want to say here when you say grow what do you mean by that you mean like so when you say you literally mean this thing right when i hover over this boom does that nice little so basically now what we're trying to do is build that experience in our app because ours doesn't have that when i hover over it it's just kind of very static sits there but we want ours to grow exactly that and right now what we want to do is remember we added that transition so it means if we ever change the size it's going to actually so anytime we use the transform effect so i'm going to use that here so i'm going to say transform and scale to 1.08 of your size which is just like a sweet spot yeah it's a very light like light light amount so i just tested this out before so it's a very light light sweet spot here and then we're going to say opacity one um so that i can actually get rid of i don't need that right now um yeah so what we're going to do now is if we go over it because i've combined this with transition so i'm saying apply a very small delay so don't just pop up and be bigger so we'll show that effect in action so if you just hover over it oh look at that that is really nice remove that trash if i get rid of the transition look what happens it'll snap so that oh that looks clunky yeah it looks horrible right but if you have a slight delay this transition then look how silky smooth it looks oh that is silky smooth but with so little like that and that thing right there that is nice it's crazy right that is beautiful so on hover you guys that's what's happening that's cool so okay oh yeah and one good point that michael also makes for you know why we have this distance over here is it's important to keep distance in these times nice yeah so a little bit of social distancing even for our app nice so for the row on so so that container that we spoke about earlier if you notice i because if you just go over to the app now and just start scrolling right look what happens so start scrolling whoa like we don't want that to happen right we don't want to we don't literally my header is moving out of the way whereas in the actual app the header and everything stays there and just this thing moves um and also just that row moves actually i just realized nothing else moves just that road that's really cool so here this entire app moves rather than the row yeah so we want to keep it we want to kind of keep that straight forward there so the way we do that is we go over to our container which is row posters and we add this rule here we say overflow y should be hidden so that's we're saying the vertical axes if there's any sort of room to for for a little scroll bar but we want to hide that and then we're going to say the x axis should now be a scroll right so now look what happens you add it threw in a scroll bar nice that is so clean all right look at that and you have a little spoon yeah it's beautiful hold on one second oh so this scroll bar actually works even on my computer if i just hold shift and i scroll that works too yeah so that's cool right and that's really clean but look what happens when you hover over the uh the the pictures now and all you hold all you have to do dude front end is actually blowing my mind one second this might be like normal stuff for you but it's actually pretty freaking mind blowing for me so like this one line here added the scroll yeah yeah so can you can you also add scroll here i want to see what happens it'll add a scroll on the yaxis right yeah so if we do that now you see it adds a little bit of scroll for the yaxis i don't see any scroll for the yaxis okay can you see that on the right look at that little tiny oh yeah yeah yeah yeah it's a tiny scroll bar it's it's there yeah yeah yeah oh yeah i can go up and down yeah and the reason why that's happening is because remember like think about what's happening here so when it goes a little bit bigger the the actual container is getting bigger so there's a reason to scroll right i see yeah so so here we run into like a front end sort of decision what we need to say is we need to say okay in that case we want to hide the the vertical scroll and what we want to do instead is add a padding of 20 pixels so that when it grows it's going to grow and you can see the growth so that now if you hover over it and now it doesn't crop you see that it's not cropping the tops off yeah right but if i get rid of that padding look what happens yeah it's gonna cross it zooms in and it crops out yeah i see i see what you're saying yeah you have to like if you're going to do a transform you're going to have to pad your container yeah so that's the first thing but if you notice in netflix like in our clone we didn't have that little scroll bar because to be honest it looks a little bit ugly right yeah that's why yeah yeah so what you need to do is you need to basically do this special rule you need to say row posters uh some row posters and then you say colon codon and you say webkit so it's webkit so i think it's dash webkit and then it's dash scroll bar and then here you basically are saying you'll be this is basically a rule to say tell all of the browsers so whether it be in edge chrome firefox whatever you're using display none so this is saying don't ever display your scroll bars but keep the functionality of it nice that is clean no more scroll bars so that way it looks really nice right yeah so that's that's really cool so then we get that working and everything sort of nice in that front now what we're gonna do and this is going to blow your mind a little bit so we've basically just set up the row right we've set up a row it seems to be all good everything seems to be nice um what we're going to do is we're actually going to do a little optimization here so in react whenever we render a big list so in this case i know it doesn't sound like a lot but when you've got 20 items in a row and then you've got a bunch of those rows we should be rendering it in the most efficient way and react has something called a key right and here if you pass you just need to pass some unique information here which is unique to that specific in our case each of those pictures we need to give it like an identity right so that way if anything changes in that row react doesn't simply rerender the entire row it just rerenders what it needs to rerender right so what we can do here is we can say movie dot id because each of those movies that came back actually had their own id yep so we can go ahead and do that and that will fix it for us so if i do this and save it now what you can see is it you wouldn't know it's much but it's actually a slightly bit faster than what it was before nice right so that's a small optimization step that you do yeah remove it real quick i know it's probably not going to show that much but yeah so if we remove it now uh you'll see if you refresh it yeah even i'm going to refresh it refreshes just a little bit slower on to what it almost feels like yeah yeah and when i scroll you're gonna notice it yeah especially when you scroll through and the way sort of react caches and everything like that it really does play a good part in sort of helping out so we can get rid of our little marker now and we've got some simple code that's sort of doing what we want nice so the nice juicy part now is basically where we rendered all the rows before wow this is one cool compliment so devin says it's funny i just struggled with this padding trick for hours yesterday for a slideshow if only this video came out yesterday dude honestly i feel your pain do you know how many times i sat there and i couldn't figure out i had a job once and i couldn't figure out how to overcome that padding issue and i must have spent the entire day trying to figure out how the hell do i get like the padding to show out of it so you're welcome i'm glad i know that i know that pain yeah nice damn it's funny because sunny will know all these things like all of this stuff takes like so many days or weeks or months of pain but then you might just give that trick just up front almost kind of like it's nothing so a person who's listening and even this happens to me because you say it so casually because now it's normal to you and maybe it's not normal to me you know i'm listening to it and i'm like oh maybe maybe it's important but if i hear your voice in this normal team i'm like i'll ignore it it's probably not that important so yeah one thing that's important for everybody if you're watching this just know that whatever value you're getting is months or years in the making on many different you know uh jobs freelancing and all of those skills and just hours and hours of like learning this and you also have your masters right yeah so so yeah when he says it he will his his style is he will say everything like super calmly like it's actually no big deal but like write that [ __ ] down because it's gonna save so many hours and frustration for you guys so i would that's just one thing i want to say um you know just because i know sunny yeah he's a good friend of mines nice yeah it's true actually it's a really good point that causes mention because i tend to sort of forget that very quickly and then it's like because he always rolls me in back to sort of like you're saying it really casually to maybe explain it a bit more so i think something just to know and add to what kazi said there is guys whenever you're sort of coding something or like building from scratch you're always going to run into problems or situations where you would spend hours i'm not joking like we've spent even when me and kazi have been coding before there's been hours where we sit there and then we had a problem one day where we spent hours and then within five minutes we set a timer and we managed to solve the problem yeah so sometimes yeah sometimes it's insane like it could take so long and then suddenly a light bulb will click just don't quit and even like sometimes it's very disappointing because even when we were working on the stripe to make that one form work i mean there's like yeah we spent 80 hours and three or four days coding that up like nonstop coding and most of the coding was just like looking at documentation just being frustrated and like not understanding and like we couldn't even make one line of code progress on that project for so long so that happens sometimes definitely it does happen and it's something which is completely normal and you shouldn't feel disheartened by that yeah yeah so we're going to have a little bit of magic here where basically we've just built a bunch of components and we built in such a way that it's going to be really impressive to show you something now so if i go ahead and i just paste these components out so inside of the app the really nice thing now is we have a bunch of different categories so we've got trending now we have top rated so top braided just to be clear i'm gonna say here so they can see it so we have top rated which is going to be this category right here what's the next i think it's action movies action movies right there there's comedy movies yep then it's horror movies mmhmm romance movies where's my arrow when i need it and terry's oh yeah i spell that wrong yeah documentaries document it teddies right here yeah there we go and here what we're going to do is we are going to add in the appropriate requests so this is another example of if you build something right it's actually going to be very easy and it's going to make your life super easy when it comes to doing it i just need to get the request from ice cream because i don't get the auto complete some reason um so let me go ahead and open up requests so now let's go ahead and pop these in so we've got fetch top rated so this one's top rated fetch and guys you can start from the bottom and i'll start from the top uh you can start popping them in if you want so actually just i'll stop following you oh yeah so fetch action movies comedy and horror movies there we go so that one's documentaries and that one's because this is how you guys are gonna see it so romance that one is yep and then the final one is horror movies so i think let's swap this one out so this one is dot uh fetch horror movies awesome uh now if i just click save the whole app the whole app is literally gonna do this magic oh that's so cool that just worked just clean it just works look at that hover over it so nice yeah and also we forgot to do one clean up step so when we actually were cleaning up the app if you just uh follow me one more time so let's uh yeah so now what we're going to do is let's go over to app.css so when you actually start off guys i want you to get rid of this stuff so go ahead and clear our app.css it will change the look and feel of your app but we don't want to have anything inside of our app what i would recommend is you go inside here and you add this one rule which does this we say margin zero so because by default the browsers give you this weird margin so if you notice on the right where cause he's got the preview open as soon as i add this one i save look at the imaginary margins that are going to disappear right see that it gets rid of all those imaginary margins right and we just don't want those to start with because we don't want to deal with them um so that's something just a side note you want to get i love dara just get rid of that stuff yeah oh yeah that this one has the mine yep yeah and then that way all of your styling is going to be all of your actual styling it's not going to be getting rid of things index.css you can leave this stuff this is just going to be some font stuff so unless you change the fonts i'll just keep this um but app.css i would change okay so now with that said we've got a nice looking app but have you noticed that the app that we saw earlier uh if you notice the app that we saw earlier uh so we had the the netflix originals were bigger than the trending now top braided so we had larger tiles so yeah we're gonna yeah i can hear you know oh really okay oh yeah yeah that's true actually it might be not on the stream okay okay okay now i can't eat you know cool you can get back to it yeah yeah i got you right okay so now what we need to do is [Laughter] so now what we need to do is change that to app first um so here what we want to do now is there's a few things we need to change so if we notice that look at the deployed app quasi um the deployed version so notice how the those you see the tiles here are bigger right so let's go down so notice how the tiles are bigger and also if you look a bit further down you'll see on trending now we don't actually have uh the posters you have these other thumbnails right yeah yeah so we need to fix this and but we want to use the same component but we just want to have a slight variation so what i'm going to propose is as all of the stuff from the um netflix originals down are the smaller design and everything and it's only one roll at the top which is slightly bigger yeah it's like the height there's like more height here right and maybe less width no wait i think looks so if you look at the posters so the post is actually much bigger as opposed to the ones that you can see in trending now i see yeah so you get a much smaller poster there because we're pulling in not the uh a poster but we're putting in a thumbnail instead got it so what i'm going to do now is i'll show you how we can actually do that so for that bigger one what we're going to do is we're going to pass in a is large row so is large row right and by default what this means is it means true but you don't actually have to write that um so we're going to pass this in so if we go over to row i'm going to go and pull in that prop so we're pulling that in and now i'm basically going to render the styles based on this so the first difference i want to have is rather than having a poster i want to have it so that if the if we're using a large row don't use the poster part but use the back is something called the backdrop part so what i'm going to do is i'm going to say if you're using a large row then use the poster path otherwise use the movie dot backdrop path and this will make sense in a sec when we save it so as soon as i save this notice on the right now all of the trending now top rated and everything look what happens you see that looking nice yeah but the sizing is is the opposite way now so we want those to be smaller and the other one to be a bit bigger right yeah so the way we fix that is we go over to our row.css and i just need to do a few different rules now so firstly i need to apply a class name based on which one was actually coming in so what i'm going to do here is i'm going to do some string concatenation so i'm going to do this so i'm just going to do a little change a tweak here i'm going to say everything gets a row poster class everything gets the original role poster but if it's a large row so if it's a large row then i'm going to give it an additional sort of class called roll poster lodge row poster large right and what this is going to do is we're going to style it basically and say you get the bigger styles if you are a larger row right so if we go into row.css now what i'm going to say is that the larger rows are going to get a max height of 250 pixels but they're going to get slightly bigger so if you see the normal rows got 100 pixels but the bigger one is gonna get a 250 pixel limit so this is going to be the netflix original one yeah so now you see that right yep they're a bit bigger and then we go over here and we say row and then i'm going to add another hover rule so just like we've done here but instead i'm going to say this one gets a slightly bigger hover so it's not naught point it's one it's not point zero eight it's point zero nine instead right oh and this one so now check this out look at that so now if you do wow it's really thick right you get a really nice user interface and you get bigger posters at the top and guys this is all using the same component so i really want to stress that so now we have a all just by passing in one prop we can differentiate if if that row is a large row or if it's a small row oh that's really powerful wait hold on hold on so okay so let me actually so go over to app.js and you'll see it here so row okay so you're you're you have a row component and then you are giving it a title prop and where are you telling it it's a large row so just for the large row we pass in this is large row with nothing no equal signs nothing right so so if you don't pass the equal sign it defaults to this okay and so when i go to row it's taking the title fetch url in this large row nice okay and if that is true then it does this large styling yep okay and also got it and this large styling is where is this large styling at it's in row.js no i mean yes sorry yeah nice okay so right over here okay nice nice nice nice nice clean very clean really nice right yeah nice okay so now what we're going to do is we are going to move over to the uh so we we we've got the rows set up so they look really nice they look really clean um what i do want to do is if you just follow me again let's just go to the css oh oh nice yeah so we got to grow so now the outside row if we notice it's actually touching the side so i don't want it to touch the side so i want to basically say row and then i want to give it a margin and i'm going to say give that margin white um sorry margin uh left of 20 pixels so now look what happens um so if we go back and i uncomment that out so you see it pushes it to the to the right because we're giving it a left margin right and that gives that little nice gap yeah um and now what we're going to do is we're going to basically go to our app and basically i'm going to base get rid of this top a clever programmers let's build netflix cone for today and i'm going to mark down some stuff that we want to have here so there's two components i need to build now there's one which is the nav bar so the nav bar should be at the top and there's another one which we're going to call it a banner right so if you go into the deploy that we can give a quick demonstration of what we're talking about so you've got the the banner at the top which is this big thing and then you've got the nav bar which is the the navbar with the query so banner when you say big thing is like where it says the witcher right now yeah exactly okay so we're gonna build this banner out right now right and then um header is this thing right over here where it says netflix at the top exactly okay and now we'll start to see everything sort of pull together when we get this in so banner we're gonna go ahead and create right now so we're gonna go and do we're gonna create banner and i'll create the file so that way it doesn't stop the sharing so i'll go in and create a banner.js and so inside and right now inside banner.js and then we go here i just need to import it so i need to do import from oops import banner from uh banner yep there we go and i remember guys this little snippet trick so we say rfce boom it gives us everything which is always nice um and now i'm gonna just check something so now what we're gonna do is we basically want to so for this banner we need to think about how it works right so it's basically because it's a top it's going to be something called a header instead of a div um so i just like to do that all the like always to start things off but i want to basically have a few things i want to have a title so the title is if you open up the deployed app because it'll be more visual to show them yeah so so we have a title so that's the witcher so this is okay i've got it yeah so we have the the title which is for the witcher we then have um we're gonna have a div and inside of that div we're gonna have two buttons so that's gonna be the ones that you see so play and my list and then we're gonna have a description right yep so these two buttons right over here yeah and for this part um so i'm just going to add a comment here oops um let me just add a one second we add a comment here so this header i'm going to actually give it a background image right so this header i'm going to give it a background image and that's where you see that with your image right yeah so that's basically i always recommend you do this because it kind of gives you a nice sort of overview of what's going on so what i want to do now is i'll basically need to have a movie so this is where we have some some pretty cool logic so i'm going to make a request here so i'm going to need the um so first thing i'm going to need to set up some state so i need to have a movie piece of state and i'm going to do set movie so i'm just setting up some state here and what the purpose of this state is going to be pretty simple and the re and what all it's going to do now is it's basically just going to be responsible for whatever random movie gets selected at the top yeah so yeah this is being this is a random movie because every time you refresh this it actually gives you a new movie right yeah exactly so we're going to write that exact logic right now yeah and it is fast every time i hit refresh that's crazy yeah the styling here was the really really sort of critical part because it's super responsive here um so we'll we'll show that now as well so if we go to what we need to do now is remember we use we have we demonstrated the use effect earlier so use effect is a piece of code which runs based on a given condition so in this case we want this to run once when the banner component loads and that's signified by this because we have nothing inside of it yeah nice yeah and then just like earlier we showed that if you want to run a asynchronous function so anything which makes a call to an external api or something here we're going to say fetch data so you do it like this and then you have your code in here and then you basically you need to actually call it so you say fetch data yeah that's a good idea actually that we should update the uh the side panel yeah i just did i just updated the top yep so now we're doing the banner build yeah oh banner build yeah yeah yeah yeah so now we're building the banners um awesome and then we should tick off the rows because the rows are pretty much done though nice so then what we're going to do is we have fetch data so all i need to do here is i need to actually first i need two things i need requests so i need my request so i'm gonna say import axios which is remember like a sort of postman kind of thing from our axios which had that sort of base url configuration already sell and then i'm going to say import the requests so remember those predefined requests the ones that we have like fetch from the romantic section or fraction fetch from the action movies all of that stuff we're going to import that stuff as well and then what i'm going to do is i'm going to say const request so const request equals and then here i'm basically just doing this so i'm going to say a weight and then we're making a request to get the netflix originals because all of those random films are at the top i want to have them to be the netflix originals but you could have them to be the action films or the trending films or something like that yeah yeah and now this is the clever part right so previously the way we did it was we had something like this we had console.log we had something like this we had request dot data dot results right and that had 20 different results in oops request.dated so this look this was a big array so imagine like you've got the array here it's a bigger and then we had like movie one movie two like movie three right we had a bunch of movies inside of this array right um but the problem is is that now we don't actually want we just want one but i want to basically randomly select it so i want to randomly select which one i want so in order to randomly select which one the way we do it is i say so this function right here is just basically grabbing a random one yeah yeah so this little this this right here is grabbing a num a random number between like zero so the beginning of the array all the way to you have to do minus one so that way it doesn't risk going over yeah um yep so we do that so then what i'm going to do now is i'm going to say i have a nice one i want to show you yeah it's like i have a yeah there you go yeah so you could do that right and then what we're going to do is rather than console logging it here i'm actually going to just go ahead and straight away set this as the movie because this is going to get us one thing back nice yep so let's go ahead and do this and to test that it all works so this is just a random this is this all simplifies to one string guys or one specific movie or object or something right like the yeah it's an object in that array so this will just get you one of those items randomly yeah so i've got some error here where is it because we've got this set movie is this you're not closing i think this uh there's something with the squiggly and this thing happening so something of the closing uh i've got a snippet here pressing a bit so let's just do this so this is a pressure yeah there we go yeah nice so we return the request outside okay cool uh we need to basically uh import user access yeah oh yeah you can here we go all right nice nice and then basically to get to make sure that this is working i always just do a console log i'll do a console log so console log movie so now where do you have clg uh oh that's a snippet that's es6 snippets so that's another extension that's another extension called es6 snippets um so here what we're going to do now is this is from requests that's what's freaking out okay so now if you open up the inspector you should see that a random movie gets pulled in in the console okay so you should see oh we need to actually stop so i'm gonna just go to row and stop console logging in row because that's spamming the console log um so now if it refreshes we should see it you should see um the original are you getting you're getting the entire object right yeah i am so so now i should be doing it so we've got we're doing we're making a request to the netflix originals banner 21 so it would start off as empty but then if you go down it should actually be correct so let me double check on my yes it is there is that yeah so if you go down uhhuh it's empty it's coming it's coming up on my localhost so if you refresh again so there you go so if you go up nice right here there you go yeah yeah so that's going to be the the movie the randomly selected one right and every time it sort of starts it will randomly get one yeah um so what we're going to do now is we're actually going to use that movie to actually put that background image and do a bunch of stuff around that yeah so the first thing we're going to do is we are going to have a div so i'm just going to go here and inside of this header i'm going to have a div and i'm going to call this div i'm going to say banner content so this is just going to be all the contents that we see including the text the buttons and everything like that yeah everything except yeah yeah right there but the actual sort of header itself should just have a class name of banner so this goes with them and then everything inside here now goes here so we've got some structure to it right okay and then what we're going to do now is for the title i'm going to have a h1 so i'm just going to h1 so what's the what's the reason for having a header like this class over here and then this banner contents like why can't you just not have this header over here and just have everything inside of this div yeah so that's a very good question the reason comes to when we start styling it so i need to start doing some stuff with the background image for the banner i don't want to affect this stuff so i want to apply a different rule here than i do to this container so this is applying to that image in the background yeah so that would be applying to that sort of background stuff but the banner contents you run into some small quirks yeah got it but most of the time you you can actually get rid of the div but in this case the way we're going to style it it kind of clashes so which is why we have to be a bit careful makes sense um okay so the next thing now so the first step i'm going to do is actually add that that banner background so let's go ahead and here i'm just i've got a snippet here so let's go ahead and use this so basically i'm adding so in um react what you can do is you can actually add like sort of javascript css right so here you can do style and then you can add you can basically pass an object so an object inside of your jsx and inside the object i'm going to pass these rules so background size means use up all of the size from the the container background image this is remember that base url this is just that base url for any picture and we're saying go and get the backdrop path so not the poster image that we're seeing on netflix originals but the trending now and the top rated that sort of image we want to see that one on the back yeah this little question mark is for if if the movie is ever for any reason undefined it won't freak out and and crash it will just say like handle it elegantly right and background position basically just centers it right so now if we save this we should see so let's scroll up and i'll save it and then we'll see it pop in so now if i save this we should be able to see a um oh right because we haven't actually got any content inside here there's going to be nothing to sort of so that's why it's not going to see anything just yet yeah we need to add something here so what we're going to do is in the h1 i'm going to basically do this so i'm going to say i did notice so i actually tested this a little bit earlier and i found that some films that come through here actually either give you a title a name or something called an original name so the way we sort of account for that is we do this all right and we say yes you say if because some apis don't always give you consistent information so to account for it you just find the edge cases so in this case they they can give us so this is so elegant i love that like question it's cool you got the little oars that take care of your edge cases and then this little thing here that is clean that is clean and it doesn't it doesn't empower you as well so it's kind of yeah yeah and because you're using all the truthiness that's already built in you don't have to write because most people would be like if movie title does not exist you know then basically look for a name and then or then look for original names so they would have this like giant if then statement here you're just like using um you know taking advantage of how ore works because yeah that's effectively what it's doing and then this question mark here just handling any errors i mean this is this is a really clean this is really clean it's really elegant yeah i recommend that everyone uses the question mark was actually something pretty new that came in it's called optional training um and it's just yeah as soon as they came in i was super happy about that because it saves you a bunch of headache and stuff so let's save that file now and we should be able to see i saw something at the top right there yeah so if we've remember we haven't started that properly but it's actually starting to look a bit somewhat in the right direction right yeah um so let's carry on with that so we've got that and then what we need to do now is actually so remember we've got this so we can get rid of our little marker here there we go and here we want to have a div so i'm going to say div and this div is going to be called uh banner underscore buttons and inside of here i want to have two buttons so i'm going to have button and then in emit you can see this you can say button times two which is cool and you can actually say so this is a really cool thing in emmet so emits a shortcut that's usually built into vs code so you see you can do this you can say button and then for each of them i want them to have a class name or button and i want to say i want to have two of those buttons and then watch it so as soon as i hit enter boom gives me two buttons nice really cool right yeah kind of saves you from typing out all that boring stuff and it gets the class name right yeah so the first button is going to be called play the second button is going to be called my list yeah uh and then that's the same and it's called emmett no i know i know but but but what did you do to make sure it got the class name did you give it the class then when you hit the autocomplete or whatever yeah you didn't actually write this entire thing in in the one emmet statement so i do div yeah so that i want to div with banner buttons oh yeah yeah you did give it a class side of it i want to have a button with banner uh buttons and i want to have two of those and look what happens if i say oh nice yeah it all happened at once yeah that is nice slick really good and to auto complete it you what do you what do you actually what what's the hotkey to autocomplete an emmett statement you just hit enter it will automatically start to do it so you know like how you did you do h1 and you click enter that's emmet nice okay awesome i love how your girlfriend marabon she is like stopping people from spamming in the chat that's real support i think we actually have a we have a mediator right we have a few we have multiple mediators yeah yeah go melbourne nice uh so we've got the div and the last thing we're gonna do is description so uh i'm gonna quickly add a description so i'm gonna use h1 and just say uh class name so i'm gonna get a class name of banner oh i should have used emmett here comment description that's fine description and then here i'm basically going to use the movie overview so here movie overview so that's another property which is actually just they actually do give us a description so it's like a synopsis right so we're gonna do that so nice so we have everything on the page in a rough fashion right so it might not look that pretty but it's it's all sort of there um okay so now we're gonna actually style that because it looks really horrible right now yeah the information is there i agree yeah it looks really horrible so this is gonna be a real transformation right now that you guys are gonna see so we need to i'm gonna create a banner.css so banner.com oh the button is there's buttons are there too i just realized the buttons are there marvel's daredevil the header is there i mean as a backend developer i mean what else do you need you got everything what's that yeah i mean like a back end developer at this point would say i'm done yeah yeah jacob jacob at this point would usually be like i'm finished yeah yeah so what we're going to do here is now we're going to have banner so let's do this what was that keep going keep going keep going yeah so we're going to have the banner um and here i'm going to say the color of the text is going to be white so that's the first change yo check this out bro uh devin just said didn't know about the asterisk 2 in emmett that's crazy to me i also didn't know about the nested emmet commands you just sped up my workflow like crazy dude you can even put brackets around complicated emit statements and do times too so you get the whole thing it's insane like you did you could do that level of like it's it's really crazy damn bro i did i just realized i look adorable with this little thing right right underneath here you know i got a good look going so i'm just gonna keep it i mean you got a few people saying can i be your friend cozzy so i think it's like slick is working all right guys let's get back to the code oh nice let's see what you did there object fit and then here we're gonna do i'm gonna give it a set height so a height of i saw was playing around with it earlier and i think like the most specific thing yeah as like when you're a good developer you guys you can just nail this in the first try like yeah honestly because all i was doing was looking at the the actual netflix app and i was kind of just like adjusting that number until it came somewhat near it um so yeah i said that's how i got that number um nice so what we're going to do next is we have the height and then i'm also going to do the contents next so the contents are what actually contain everything inside of the um so if we look at our banner here everything that we have so all of the the sort of text elements so you see where the buttons are where the header is where the description is is all inside of banner contents so if we go over to banner contents i'm going to add a margin left so i'm going to add these one at a time so margin left is first gonna push the stuff slightly away from the edge so as soon as i save that we'll see everything push slightly away from the edge we should see that uh oh it hasn't saved yep so now you'll see on your screen it should have pushed away from the edge so banana.css am i oh i'm not importing oops so yeah that happens at times say import banner dot cs oh there we go so save so now you can see that we've got white text and it's pushed away slightly then i'm going to add a bit of padding to the top so i'm going to go ahead and get rid of this and then i'm also going to change the height of the content so you see we added the it changed the the height there right we're also going to change the height but you see it's it's sort of flying off it right which is yeah so we will kind of want to limit that height so i'm setting a fixed height of 190 pixels oh nice that's the melbourne sister hey sir nice oh that's cool she's gone back to university so she's probably watching from birmingham right now nice yeah got the whole family in um so now let's actually style the title so um let's go ahead and change banner tai also banner title so banner title is going to be the top title that was talking about so whatever the film whether the film was called we're going to title it style it here so i'm going to change the phone yeah that's what i mean you've already got that sort of gap that we saw earlier right so i'm going to yeah exactly so right now i'm actually gonna um use something called font size so font size um but i'm gonna use rem so i inspected netflix earlier and i was trying to figure out what they had and they use these exact values so i use them too so rem is a different measurement so we're using pixels but ram is also a good one font weight this is going to change the sort of boldness of the uh the top and then i'm going to add a tiny bit of padding underneath the banner title so this one here so you should see now as soon as i click save oh my god a shout out nice and she got highlighted on the screen nice yes there we have a nice little thing going so we've got that i don't know did that take effect on your screen or no on your yeah so on the title so banner title no i didn't actually add the class name okay so here that's why we didn't see that so if we go here yeah so as soon as i add this in so class name so if i do banner underscore title banana tile so now if i save that you should see um we should have a little bit there we go so you see the text got a little bit bigger and it has a tiny bit so that still looks rubbish the the sort of um description so i'm going to start that next so what we're going to do for the the description is i'm going to go ahead and do banner description oops bem you do double underscore so it's banner description and then here i'm going to do a bunch of rules now to get it looking as we want it so firstly i'm going to change the width because if you notice in um in in netflix and stuff like that the width never sort of goes past a certain amount so i checked out what they were using and it's 45 rem and that's pretty much a case of it will stop it going greater than a certain width on the page okay the next thing is line height so again i figured out that they use 1.3 and i was trying to sort of mimic what they had on theirs and there was a few other things so there was padding top and font size i also grabbed from them so the padding top was one rim so you'll see it push slightly up and the font size is not okay so you can see it's already starting to start start to sort of look like them right and the way i did that is i sort of went to their website and i just inspected and i could see the different sizes and i was playing around until i got like a a close sort of number comparison right uh okay so what we're gonna do now is uh also i'm gonna add these two rules so the first one is max width right so max width is just gonna limit it always to 360 pixels so you see that it pulled it in right so if i get rid of that it flies off to the side yeah so this is completely going to be responsive and it will keep it very very nice and then the height the height is also something we need to sort of bring in right so i'm going to give it a height of 80 pixels right so as soon as i do that it should yeah so i have 80 pixels so that should limit it to 80 pixels um okay so we've done that the next thing is right now of course if you noticed in our demonstration it kind of truncated the text so when i say truncated i mean when it gets too big um success thanks and you've got to get back to teeth see you soon alright all the best she's a dentist nice um so truncate is basically when we have too much text on the screen so you want to just have that little ellipsis you know the three dots yeah so the way we do that is if we go to banner.js then what we could do here is i'm going to create a function now and this is a function i found online and it's completely copied and pasted from a stack overflow article but it works really well um so i'm going to paste the function here so it's truncate and it basically takes a string and you give it a number here so n is a number which is basically saying truncate after like let's say 500 characters and you can see here exactly exactly that yeah so over here where it says movie overview i'm just gonna pop it in here so you see truncate and i'm saying after 100 yep so now if you refresh so that one's actually quite small so if you refresh one more time oh there we go so you see that it truncated yeah yeah so that's a really nice way of sort of keeping it nice and short and that was a first for me as well doing that which is quite nice um okay so the next one is the buttons so the buttons look a bit like ugly right now so i'm gonna just copy this entire snipper because this pretty much the buttons i literally got the styling exactly from what i saw so this exact snippet right here is the cursor is basically going to make it so it's that little finger pointer the color of the text is going to be white i don't want to have any borders the font weight should be slightly bold i bought a radius of this means it's going to be slightly rounded on the corners and then a bunch of padding and margin rules and then the background color this is like a light gray that we have here and then the slight padding on the bottom so to make it easier to reach i can hear you yeah also guys if you can't hear quasi because it might not be coming through oh no i have somehow i was muted for like a really long time like probably oh really like i just realized i was probably muted for literally like half the stream or something something really long oh dumb yeah i just i just saw that so thank you guys for letting me know that was muted now it should be working okay i'll keep the i was i was hiding the volume levels sound levels i'm just going to keep them visible at all times so we can see it yeah nice um okay so i think if everything if it's all working yes now now it's working okay nice um guys if that ever happens just let us know um cool so now what we're going to do is i'm going to save that so the css rules for that and we should see you see the buttons have got a nice little star now ah yeah yeah yeah right here i can see them they're looking clean look at that yeah and the one more rule that i'm going to add here so i'm going to say for the button when we hover so look at that it's already looking like fresh but when we hover over the button i want it to sort of invert the color all right i wanted sort of the text to go black and then i want the background to go slightly gray white and i want it to transition when it does it so i'm adding this snippet of code here yeah yeah so this is transition all just means give every sort of transition that could have come come into play um allow it to sort of slightly fade over so if you now hover over it you'll see it's got a really nice sort of gentle um styling so if you hover over the play in my list button oh nice yeah yeah awesome so now we actually have pretty much everything set up but there's one thing that we need to do now so as you can see everything looks nice right but it doesn't fade really nicely into netflix originals right yeah so there's two things we need you know the first thing is cuts off a little bit uh so that's more the resolution so it sent us off but like that's sort of a compromise so if you scale in you see it sort of scales yeah so that's gonna include that's gonna need some additional code but for now it gets the majority of screen sizes you see that like it would work from sorry but like that's more of a dynamic issue yep um but in this case what we need to do now is the background of the app so i'm going to go ahead and find out what we do what we've done here so background of the app so if we go over to our app.css i'm going to add a slight background cover a background color so you see the entire app is surrounded by a div here i'm going to style that div and give it a background color of background color of this so one one one so this is i think this is like a it's near to black i think it might be black but it's pretty much just slightly off it's just slightly off right oh nice yeah so it's starting to look a little bit better but i mean like the text on the uh the text is gone yeah where it says trending now and all of that yeah so we need to go too oh i see because it's actually black that's why yeah you see like it's like a nice kind of subtle sort of uh gray right now right yeah so all we need to do is go to our row and change the color of the text so color to white so if i save that now boom yeah sort of gets that color back so what we need to do now is if you look at the deployed version so if you check out the deployed version yeah uh you'll be able to see there's like there's this really nice kind of uh gentle sort of um fade right so that fade looks super nice like and it adds that sort of final sort of finishing touch to it right so if we go over to banner so i'm going to go over to mana right now banner.js and what i'm going to do is so if i go to mana oops banner dot js um that's not my banner oops dot js here so if i go here now what i'm going to add is i'm just going to add an empty div right so this is this might sound very strange but i'm going to add an empty div and it's just going to have this so in bem whenever you've got the like we're saying we want to have a banner but it's going to have a modifier so the modifiers we're going to say fade bottom right i think you're not uh following me anymore are you i am are you oh yeah nice yes we're going to add a fade bottom so now i'm going to style this in css and basically we're just going to make this like an invisible sort of banner which is just going to be sitting there and it's just going to be the only purpose it's going to have is to essentially make it look nice and and fade into the the bottom right so the way we get that working is we basically need to add the following so this height i've calculated based on the height that we use up here the one that we've done it takes it takes them playing around guys whenever you have whenever you have like a fade you're honestly gonna have to play around with it and i'll show you what i mean by that so this is this is a background image it's got a linear gradient yeah so if you inspect it if you inspect it i'll show you what i mean wait wait what what is about what has that um is it this over here has a little uh gradient no so yeah so if you inspect uh uh so if you click the inspector and you basically click over you you if you click over where the gradient is so if you click the inspector little thing so if you you see on the left yeah grab that and then go to the bottom so remember i put it underneath right i chucked it underneath the the header stuff right so it's just underneath the closing bag of the header so that's why it's at the bottom and then i've given it a a like a height a set height and you can see now what it is it's just like an empty container with a linear gradient ah i see so yeah when i basically take it out oh that is cl that is nice dude that is so clean like it just adds a little touch because when i add it or take it away it makes a big difference yeah and honestly that's one of the things so front end development is like all about these subtle changes and then when they come together you're like whoa okay that just made the whole thing look really nice yeah like this looks so nice i mean this looks like a fullon final project you know it doesn't just look like oh here's another dummy app that we're building yeah like i've seen a few dummy apps and stuff like that and they just didn't look that clean so i went sort of and added these extra little things that sort of add or get closer to the actual netflix um so nice so i guess now that's the actual top banner done right that's the top down so what's up no no keep going keep going i'm just talking about i'm talking about frankie oh so now what we need to do is we need to add the final thing so the app so the nav so this is one the final thing so i think we can take off i just want to say like this app looks so nice i mean it just looks so clean i feel like if people want to see us do part two or part three of it where if they want to see user authentication around netflix or they want to see um i don't know yeah being able to register have your own account things like that yeah i mean that's something maybe we can even build it into the course sony like add it add it into profit with javascript that would be amazing yeah because we could actually have the um sort of uh you know that login screen that pops up on netflix and then it says which user is sort of in the account we could do that yeah and uh this is what here's what devin is saying devin says i've i'm finally seeing bem in action i know what it does i've seen companies use it but i've never actually tried writing it before it makes more sense now yeah honestly that's really the case with me when i first saw bem i was like um i i just i didn't really agree with that i was like why do i need to use this when i used it with the components i just saw that said this movie looks good nice sunny showing us the nittygritty with the british accent yeah like how we say it is like it's very knit nittygritty you know and you're just like you'll just eat all of that ni it's my favorite thing me agree let's get down to the [ __ ] so now we need to do i think logan said forget uh react teaching is sunny is teaching me lots of nifty css tricks oh thank you very much yeah i'm glad you guys are finding it useful it took me a long time to sort of work out all of these like little kinks in sort of css stuff um i think what would be cool cars is if we actually do a flexbox foggy one one day yes i think a lot of people are useful yeah i really think so i think that would be awesome and uh it is devon also says if you want to overlay gradient over an image you can just do background linear gradient but if the images are dynamic then it's better to add the fade on a separate element yeah so if the images are done at this pattern yeah exactly so it's kind of a mix between like there's always going to be like one way or another i would honestly recommend just playing around with it i've done this approach in some cases i've done different approaches than others um just find what works for you half the time you end up forgetting about what you did five months ago so i'd recommend you just kind of keep track of these or keep a portfolio is so good because you can go back and check the code and see how you did it yeah it's so hard to point like i'm trying to point where we're working on but it's really hard because it's all like inverse of everything right there yeah there you go build the banner so now now we're actually done on the banner so now we're moving to build number so i think it's time to uh time to drop that little the little chime so we've got this oh oh yeah okay hold on we're done with that yeah we're done on the banner yeah when i do this um when i change these things does it actually show it to you guys when i'm like yeah can you guys actually see the editor window yeah can you guys see the editor window with the color open and everything i actually don't think they can dude like ecam is sick you can't miss so yeah because otherwise they would see like sunny and cozy in the top left or something so so what is uh so we just got done with this what are we on now so we are now moving to the number okay let's build nav bar yeah and we'll do this and then we're gonna go to the build the banner and now we're gonna add a little check mark next to it and uh now we're gonna put our now we're gonna be working on build the navbar so that's where the pointer is going to go and i think it's time for a just hey i didn't i don't think they can hear it they can't no one no no they heard that it broke some of their ears yeah now they're they they can hear him they heard it twice not terrible all right guys let's let's get it nice all right so now we're going to create a navbar component so i'm going to go ahead and create nav.js and while i'm there i'm actually going to create a nav.css so nav.css as well nice so we've got nav.js css so inside of our app i'm going to basically pull that in so i'm going to say nav like that and then here in nav i'm going to say rfce because we love that little shortcut and boom we get we get in that bar so now and also this is actually one of the cleanest builds we've done like look at the the actual layout of the app it's actually what you're seeing it's like the nav bar then the banner then all of the rows like this is how componentbased design should be because then if you need to jump into it you can just jump into the appropriate like sort of component and work on it um so now this is actually a good idea i just wanted to mention this uh somebody on our facebook said it would also be good if you include how movie suggestion works in the course i'm sure i'm not the only one who's curious about that so i'm sure they're i think they're talking about you know how netflix suggests movies to you or how they make recommendations so i think that could actually be adding some data science portion to this project could actually be really cool like react data science and that would be cool yeah i would wonder how we would do it to be honest but um i mean we could actually mess around with firebase see if they have some they have some machine learning stuff on there yeah um we could definitely look into it yeah that would be cool that would be a lot of fun yeah everyone said we definitely heard it and everyone think we heard it i heard it bloody hell oh yeah ready yeah all right so now we've got the um yeah so the top so now i'm going to give it a class name the class name of nav so last name of nav and then we're gonna have at the top now so i need the netflix logo and i need that little user avatar right so the first one i'm gonna have is this so i'm gonna have the nav logo so this is literally a netflix logo there's a link to a netflix logo uh an alternative it should always be like context specific so in this case it's a netflix logo so if i save that it's not defined import import now from no there you go yeah so if we see that you should be able to see um okay so one actually may not be there so it's not actually there at the moment what we can do is oh no wait wait no it's there it's a very cute tiny little nav bar actually it kind of looks cool yeah like if you're in full screen and you come to netflix like this i mean i don't know it kind of looks actually cool like screaming at you aggressively um so what we're going to do now is we're going to go into our nav by the way just so we can put it side by side so you guys can see what it actually should be like is um this netflix should look like that right there yeah so that's what we're working on should be a much smaller little logo so i'm going to add the second logo which is the little avatar that you saw on the right yeah so if i save that so that's pretty much a link to a very small avatar so you should see on the on your screen now you've got that little smiley face right yeah very little so tiny so now this would be a really good exercise for everyone to pay attention for it it's going to be pretty much how we use flexbox and we combine that with uh fixed positioning to get everything that we need in the correct layout and form right so let's just put it side by side real quick just to kind of address what you're talking about so basically we're going to be using so right now first of all this is in a column and this is in a row yeah so we're probably going to use flexbox and do that put it in a row like this right exactly and then are we going to be using object fit contain to make the sizes smaller of this or does flex box will automatically do that no we do need to whenever you're dealing with images if you want to keep the aspect ratio so that it doesn't stretch or act overweight you have to use object fit contain got it and how will we make it this small so that we're going to use a uh we're just going to set the width and height of it yeah so we're going to set the width and height of it and then we're going to allow flexbox to determine how far apart the two elements should be got it that makes sense okay yeah and i'm also going to show you a little sort of edge case that everyone runs into because i ran into it today again um and it's a really sort of cool uh really sort of nifty point that everyone should sort of um if you run into it we're gonna go over how you fix it so the first part is is the div that we're gonna style so this is the sort of container that surrounds everything so the first thing i want to do is i want to say that this it should be there all the time so i want it to kind of always be at the top of the screen right so fixed position allows it to stick to the top of the screen so if i do this like this and now if i do that you should see that even if now if you was to scroll uh i need to save this save the file okay so now if you scroll down importing are you importing this file and in your oh i'm not that's good for good yeah that's twice now damn it i'm picking up on the pattern you know that's it now css so now it should come in so clean now i just see that right dude i don't know it looks cool i think we're done i think we're done i think like everyone give the video a thumbs up if you enjoyed that so now what we're going to do is we are going to um so this is the problem right if i give this display flex yeah so what we would typically do at this point is i would say display flex and then by default it should go into a row right so if i save this it should go into a row but can you see how it it did go into a row but it's it's a bit it's acting a bit strange right now yeah yeah so i mean what we're going to do is we're going to we're going to handle it as we normally would and we would assume that because the netflix logo is so big it's just pushed over so far to the side so i'm going to go ahead and style that logo so i'm going to say nav logo and i'm going to give that a so we're going to say that one is width of 80 pixels so it's going to be very small so you see this if we do this and save it now you see it's horrible it scrunches up right so to fix that we do object fit contain right and save it and now you should see like it saved that aspect ratio so now it's like that tiny little thing right yeah now if i do nav avatar and i do it like this and i say position oh sorry i say width nice 30 pixels now this one and i remember i also need to do object fit contain otherwise it's going to get all horribly messed up which i think contains so if i do that them two together boom oh yeah clean this time clean and then if i do justify content so justify content i do space between so i want to kind of i want the flexbox to figure out what the space between it should be right so this is where you would think things are broken right so i i ran into this today and i was like why is it not working oh my god like why is it not behaving so what happens is when you use position fixed with these rules you it doesn't behave the way you need it to for some reason so i think it's positionflix has a clash with justified content or something like that and i tried to do with the 100 so even if we were to do width of a hundred percent here you can see it's also oh well oh okay then again oh nice all right let's just let's just maybe go with that because uh i ran into an issue earlier where i had to double wrap it but i mean okay let's go with that so in that case we're gonna we've almost got it looking as we need it but right now what we need to do is add some additional padding so we're going to say netflix here there's spacing and then on ours there's like it's touching the corner too much oh you actually did it it's actually yeah i added it yes sir right but here's the problem yeah so you see like how it goes off on the side a little bit yeah my avatar is like gone so it doesn't look that nice right so what we can do at this point is we can kind of do two things right so i kind of have an approach with this and this is very opinionated how you sort of approach this issue um so what i would do here is i would give the nav logo because it's always going to be fixed in that top corner i would give the the logo a fixed position and i would say left zero and i would say and that so so now the the logo is not actually going to look like it changed too much or it is going to go push to the left a bit right yeah and then the right one i'm going to give it a position fixed but i'm going to say right um right but i don't want it to touch the side so i'm going to say 20 pixels so it's going to just slightly go away from the side oh see that yeah but for the first one i can i can actually say rather than left 20 pixels uh i can give left 20 pixels sorry and it should push away from the left right yeah now i don't actually need that additional padding i believe oh no i do need that padding because that's the top of the thing right so that's why i did that yeah so in this case now we've got fixed positioning so if you was to scroll down now everything looks perfect as it should like yeah look at that wow that whoops everything looks really clean it looks nice and it sort of does what we want it to do damn um look at that that is looking perfect it's nice right but what we want to do now is basically have it so how can we do it so that i have this so if i do background color black right so this so you see like here for example i need to give it a height so say for example i want to have so i'm going to show a neat little trick now so i'm going to set the height of 30 pixels because these these values can be fixed because we know what the size of the logo is and we know what the size of the avatar is so it's fine to give a fixed title so if i gave that 30 pixels there we go right nice yeah i don't want that black stuff to come up until i scroll down um all right so if you look at the deployed version yeah basically it's it's nothing is there right there there's nothing there let me refresh maybe get a lighter cover so it's more visible um yeah so there's nothing around here right now but then as i start to scroll down boom it pops up right over there so yeah that's what we get really nice you get a really nice sort of effect with that right yeah so what we need to do is firstly because it's a header it's always a good idea to add a zindex of one so it's always going to be at the top yeah and then what we're going to do is we are going to go into our navbar so this is something that is relatively new to me i've used it once before but it's basically what we're doing here is we need to add some kind of scroll listener inside of our navbar component so that way it's listening to the scroll sort of so we need to attach a listener to the window and say when you scroll down i need you to do something right yeah so what we're going to do here is i'm going to say i'm going to have a use effect because that's what we kind of run to whenever we need this sort of like a piece of code that needs to execute on a given condition so in our case we need the code to run once when the navbar component loads right and that's and then and that's because we want to attach a list now right yeah so the code is basically this one so i'm going to explain what it is i'm going to snip it out so it's here and it sets a piece of state so it's listening to it's listening to a scroll and if you scroll on the yaxis is greater than 100. like so basically 100 pixels or whatever so basically i'm imagining like uh even if i go to this app and i scroll down so it's like it doesn't happen right this second it doesn't happen now it doesn't happen now it doesn't happen now but basically when i'm 100 pixels probably down from the yaxis that's when it kicks in exactly yeah okay so that's when we basically want to set a piece of state so handle show to be true right otherwise if you're not 100 pixels downwards in the y axis set it to false right and what this is doing is it's saying every time like use effect gets fired off for whatever reason before you fire it off again just remove the listener so that way you don't get like 20 listeners if using oh you can remove listeners too like that yeah okay which is really clean right so we need to obviously add a piece of state here so the state that we need is this one here so it's gonna say const show handle show use state so we're just setting up a piece of state here so i'm going to import it over here and say use state like this and now what we're going to see is use effect oh so we also need to use effect so use effect and what we're going to do now is basically we're going to add a very little neat little sort of block here so where we have the class name here right we're going to basically do some string concatenation and i'm going to say it always should have the nav nav class i always wanted to have the nav class but if show is true right so if if they've scrolled past so 100 pixels and and that variable gets set to true then i want to also append this class we're going to call it nav black because it's going to have the black background right so i'm going to save that which means that now if if you scroll past if you scroll down 10 pixels if you scroll down it's going to get the black bar but obviously we haven't set up the css yet yeah so previously i had it to always apply right so if i get rid of that when i save it now it's going to have nothing as a background yeah yeah but if i now add the rule for nav black so if i say nav so firstly i need to actually i want to copy that background color so where is it this one i'm going to copy that and i'm going to say nav black here the background color this so now no look what happens if we scroll down it's going to snap the color in nice yep it does it instantly but i mean it's all make it let's make it let's make it really visible so here guys if you look at it there's nothing right but when i scroll down you'll notice it snaps it in you guys see that right there the little snap in like that so we want to make sure that that's not there if we look in our completed app when i scroll down you'll see that it has this nice little fade in so that's what we want to add to our app right now yeah that's a really good point yeah so that's what exactly what we're about to add so the animation code to add that is this so here we pretty much have a transition so this right here is saying add a transition to everything that you do in here so whether whether or not the width changes whether or not the opacity changes anything add a 0.5 second delay to it so it's going to have a nice little fade and then we're saying this is basically saying for all of your transitions how do you want to handle them so we're going to use something called ease in which gives you a very nice sort of gradual fade in right so let's save that and let's check it now and it should all be really nicely doing it so if we scroll down nice if i scroll down yeah that's awesome nice little scroll let's refresh so it's clear let's find a lighter image so right here this is gonna be yeah boom ooh that is slick it is so crazy how i went from just keep feeling like oh it's a draft app and i don't really care to like i really feel good about this app like i kind of want to just be in it and do stuff even though i know we didn't have much more functionality and that's the thing guys like frontend development what makes a good frontend developer is literally very subtle things like it's super subtle um but many people think it's always like these massive changes that you need to do honestly it's this the small tweaks that you learn to sort of do really well that give you big wins so literally in this case that little fade in how do you how do you get that the little sort of uh fade in from the um the banner to the rest of the app those sort of little small wins if you sort of learn those little tricks and sort of caveats then you can pretty much get your apps looking like this all the time yeah it just takes a lot of practice and i would recommend honestly just as much time as you put into sort of development look into design courses and stuff like that because they do they do make a big difference yeah that's actually true because honestly sometimes it motivates me to then add more back and and more functionality to my app because i get inspired every time i look at my app because when i'm looking at just console logs or a broken down html you know tables that i've built it doesn't really motivate me to keep making more things on that app exactly exactly and it's going to start to like sort of bring down your like if your app doesn't look good it kind of kills your motivation but the minute it starts looking like this you just want to keep on working on it like you want to keep on adding functionality and adding yeah yeah that's exactly right yeah so you're literally going to sit here and just play with it all night because you're just you're gonna you're gonna have this pride for this sort of app and then you wanna put it on your portfolio because you wanna show it talk about it and everything um nice so i think with that said so i think the last thing we actually need to do so there's two steps now right we've actually finished the banner so let's go ahead and take that off on the yes let's go ahead and take that off on the list oh so nice nice here we go let's hear that like hey build a navbar just got completed and we're also going to deploy it right yeah so we need to do oh right yes yes we kind of like that's a mistake on our end we should have had that deploy up to firebase yeah yeah oh right oh our css broke there we go uh cool so that's looking good and then now we're gonna work on adding trailer popups yeah so trailer popups right now this one is more of a so we use two packages to to get this to work right we used one which is react youtube so the first thing i'm going to do is install a dependency in our project called react youtube and i'm going to go over to the app or terminal before we continue working on it let's just explain what it is so for example when i hover over dark and i click it you think you can fix me nice you are not and we want it so that when you click dark again it will close that then when i click it again yep it's gone and um yeah that's here so that's effectively what we're trying to achieve sunny you were on mute for a little just a few seconds because i was playing system audio but now you're back so yeah this is this is uh this is what we're trying to build right now guys the ability to add like trailers to our app exactly yeah so now the way we're gonna do that is we're gonna use two packages one is called react youtube so i'm gonna go ahead and install that so i'm gonna cut the the app running and i'm going to say npm i uh react youtube so i'm in the terminal right now kazi yep you want me to follow you yeah okay there we go command j yep so i just write a command called npm i react youtube and that's going to bring it here yeah that's going to bring in the code for that and then we also have another one command is called npm um i react youtube right yep and there's another one called mpmi uh and we need to do a movie trailer so it's npmi and it's movie trailer movie dash trailer yeah movie dash trailer yeah okay this is and you guys can see my whiteboard right when i have it here cool so yom now i actually said a good point so yeah kind of yes you don't need a backend if you use firebase yeah so honestly you can actually really use like speed up your frontend development with firebase because you don't need a backend for a lot of this stuff uh in this case we're not actually using too much backend support and yesterday's call an instagram clone you could see the real power of a um of using firebase to actually get rid of all of that backhand headache that you usually have to deal with yeah nice so let's go ahead and so i installed two packages one was movie trailer and one was youtube so what i'm gonna do is go over to the row let's go over to row and i'm gonna type in so i actually need a few things now so i need one is going to be the um so let's figure this one out so firstly we want to get the a youtube embed underneath a row right so in order to test this out what we need to do is go underneath our row so i'm going to go over here and i'm just going to pop in yep looking at you all right yeah okay nice cool so right now now what we're doing is we are going to go and we need to add a youtube embed right so this is the code that we pulled in it allowed us to basically so i need to do an import at the top so we need to do import youtube from that package that i just installed so import youtube from react youtube and what this takes is it takes a video id and ignore the trailer url for now so i'm going to give you that in a second and it takes some options so the options we can actually add right now so this was literally on their documentation so you can pretty much check this out on their site so if you go to react youtube and type in npm it will come up here we just have some options and what i'm saying here is i want it to auto play when it loads in and i want to be 100 of the width and 390 pixels height right and then what we need is we basically just need to give it a video id so if i go over to youtube right now and i quickly grab a video id i'll show you how this works so if i go to youtube um oh my computer's actually freezing up for some reason um there we go we're good yep so if i go ahead and get a video id so let's say i get the netflix yeah yeah yeah go ahead and what i'm saying here is i want it to all play okay so there we go so if i go into video id and i just add in i think it's this should be enough right so now if i go and check the app out so if we go over to localhost and we refresh i just need to save ooh nice save yeah i see there we go right but you see it's coming under every single row right for now which isn't going to be ideal okay that's this yeah something hold on something really weird is happening i don't know on the stream something really weird is that well i think only you can hear that because i can't hear that on the on the stream yeah something um i hold on i think now it's back to normal something really weird just happened on the audio side i don't know exactly know what happened but no i know i mean you're because you're behind us but i think now it's fine there is sound sunny speak for a second hello hello hello yeah i think yeah it should be good to go it's about to happen yeah there we go okay nice so we have the video and we saw that if i added the trailer url like before it was popping in um meet me on the okay guys now we should be good to go sorry it was that like auto play was just freaking me out like crazy because it started playing my our own live stream so i started hearing all of us all over again so that really threw me off uh sorry about that i should have realized when i when i put that in i was because it was gonna actually started the amount of rows that we have it started that many live streams oh geez yeah because it was really crazy it was like one of those movies you know where they started going crazy in a mental asylum i was like holy crap what is happening i can hear myself 500 times over while loop in my ear so now what we need to do is i need to have a piece of state which is going to get the trailer url so whenever we click on a thumbnail i want to capture the trailer url now how we do that we're going to figure it out um but the actual sort of i only want to show that youtube video when we have the trailer url so the way i do that is i say when we have a trailer url for the url then i want to show the youtube video right um so that answers that bit so now what we need to do is i need to have it so that when we click on the um image so when i click on the image wait hold on they're saying problem with the sound but now it should be good yeah i think it's all good now i think it's because there was a delay on theirs oh yeah sound back yeah okay cool cool cool okay so now what we do is we add a on click so we say handle and then you're own click but i'm passing in the movie right because we're going to need to do that so i need to create that function so i need to go here and i need to say const handle click so this is b this this handle click is going to be when the user clicks on the picture so i click on the picture and then we pass in the movie here and the movie we get obviously because we're inside of a map function so it's going to be based on what what movie you click on that's going to be the one that gets past this function and then what we're going to do is we are going to have um some stuff here so basically i want to say now i want to say if there was already a trailer url so if the video was already open right and you've clicked that picture what i want you to do then is i want to say set the trailer url to be empty so that way it actually closes it right so that's the first thing we're going to do so if it's already open if there's already a trailer url and the video was already playing like we showed it in the beginning then you're going to basically clear it and it's going to hide the video so that's how we get that functionality when you click it twice then we're going to say else and this is where we have all the sort of magic so here we're going to say movie trailer so if we go to here we say movie trailer and then here i basically pass in so i say movie dot name right and what movie trailer is is it's an npm module and somebody else has coded this and if we pass it a name it's going to go ahead and try and find a youtube uh a youtube uh trailer for it right and what we need to do is here i've realized that like if you don't include this in this case because sometimes the name is also undefined um which which means we have this little protection here so then i want to do is just say then because it's a promise and then that's going to give us a url right it's either going to give us a url and we're going to do a bunch of stuff with it or it's going to give us a catch which is an error so if it gives us an error we're going to capture the error oops capture the error and then i'm going to console log it so that way we can just see what the error is but here i'm going to say so here i'm actually going to say const and basically what this is this gives us a full url guys but on youtube every single video has um so i don't know if it's gonna freak out so if i do this like when it youtube it won't do that thing again i'll catch it before it does that so if i copy the image the link address so let me just grab this link copy link address so for example this is the live stream link so if i go over here this is a live stream link right we need this that's the video id right so the way we do that in javascript is we can do this we can say const url rams and what we can do is we just need to pull out this one right yeah so i'm going to use a mixture of things now so in order to get the search so in order to get basically this part or no sorry in order to get this part right we do this this we say url and then we say um we pass it a url and then basically we do this dot search so that's how we actually this is a trick to basically we pass in this url so we're passing in like you get everything after the question mark yeah to basically and then this will give us that exact string right and then what we're going to do is we actually wrap all of this in something called a url search param so we wrap all of this inside of this so we say url search params and we do that right and what this allows us to do now is it allows us to do a get so it allows us to do this it allows us to say url params dot get and then we can actually get so say for example in this case v and what that does is it gets anything so say we have like a bunch of things after here parameters it's getting this one v so it's going to give us back this value yeah even if we had like even after this if we had banana is equal to five it will just get you the value of v and will not get you banana but if you write banana then it will get you that value right there five yeah so in this case we want v right so that's how we get that so what i can do here is i can just say set trailer url there's a really nice sort of little like hacky way of doing this you say set trailer url to to that right and then obviously if it's gonna then populate this and it should show the video and everything should be working so now if we go ahead and try so i need to just import at the top so there's one more step so i need to go ahead and do this so i need to go and say import movie oops import movie trailer from oh god oops from movie trailer okay so if you're going to give that a demo quasi then it should be good hey look at that oh nice that's working yeah yeah right so there you can see like everything's sort of working and then when we actually click the the the thumbnail again it will actually um hide the youtube video nice yeah so i click it and it shows it don't so i'm accidentally linked says i don't usually subscribe to channels but to yours i did thank you for the hard work you're welcome dude we're glad you're enjoying it yeah that's awesome thanks appreciate the love here that's really nice there's one more thing we need to account for actually i think we've already done it yeah we have already done it nice okay so in that case i think then we're ready right we're ready for the big deployment yeah hey nice so let's make sure we go ahead and uh let everybody know where we're at so we're gonna change this up so now you guys gotta see questions oh yeah nice so check it out now we're on the wait hold on did that actually play sound effects are muted i think so that did not play here we go nice little green check mark for add trailer popups are done now guys we'll be we will be moving on to deploying uh to firebase so we'll be uh hosting our app online yep exactly awesome so now what we're going to be doing is pretty much and guys when we do this it would mean a lot if you guys just so that we can reach out to you guys and see who's actually watching and interacting once we deploy it you're going to get a little url and you guys can actually go and visit the project that we just built right now and you can go and see that on your own computer and see it live and it will be up and working and everything that we've shown you can actually be on your screen yeah and what we want you to do is if you just share an instagram video and look make sure you record yourselves when you do this as well because we love to see your guys and see that it's all real and otherwise it doesn't to us it's just a number otherwise um it's really nice to be able to see your faces and then also show us the the video and make sure you tag us and that'll be awesome yeah seriously yeah i would take it do that guys because that actually is really really powerful for us just to see you and how much you guys are enjoying it so uh share that with us and we will definitely respond to you so we're gonna show you the app go demo it take a story show your face in it too you know just tell us what your biggest takeaway was and tag me at cleverkazy and uh make sure to tag sunny as well as sanga so maybe we can show it on the screen because i think um not everybody remembers what our tags are so here is um for me it's at cleverkazy right here you guys can see my screen hopefully right um and then for sunny it is uh sss so make sure to tag him on the story and share what you guys have built uh with us awesome nice and we love it because we can have a chat with you guys and see like what you're into and sort of see how it's going for you guys um and we love to see when you guys actually rebuild the project it's so cool for us and yeah everything and one more thing guys if you guys could just if you have watched at this point you know we put a lot of time and energy into this uh if you guys could just hit that like button that means the world to us it really helps that video go out for other people to be able to view it and get value out of this as well and it doesn't really cost you anything so if you can just go ahead hit that like button subscribe to the channel that would mean a lot thank you amazing perfect um so yeah let's go ahead and i think we don't actually even need to go into firebase console at this point because we set things up earlier yeah we just deployed yeah we can go into our terminal and here we can pretty much uh says open up terminal and then this cancel most people if you haven't done it you're gonna have to just run firebase login um so in our case firebase logout yep so we're gonna log out to show you guys so you need to run a command to say firebase login and that will pretty much so devin gray said is there some fancy cd ci get related setup for the point of firebase so actually it's super clean and you're gonna see it right now all you have to do is firebase login is the first step and um then what we need to do is pretty much go ahead and go to um the terminal and do firebase init right so this is the bit that we have to be quite careful about guys we have to make sure we do it very carefully and correctly so let's go down to hosting and let's go enter and let's get use an existing project and you want to make sure you find the right one so netflix clone there we go and here you need to make sure you type in build yeah it has to be built for react guys yeah so you make sure that that is built not and you don't just spam the enter key because this is really important configuration yeah i always find myself spamming the enter key so that's important build right over here guys pay attention yeah so make sure that's build and then what you want to do is for the next step you need to configure as a single page apps you're going to put y exactly so that's another important thing so put yeah that's a let me actually just in case it's not visible there just put y yeah and hit enter yeah exactly uh and then enter and then that's it so that's what the configuration done and now we have two things so most people actually end up deploying it but they see this default firebase page and that's because you need to run mpm run build to get the latest version of all of your stuff that you've coded right so in this case i love this comment michael says firebase init with british accent suddenly just makes more sense to me nice 5 8 in it yeah now what we need to do is uh we need to do mpm so if you just open up the directory guardian we can show everyone what it's actually going to do so open up build so you can so right now the build is empty it has a plain index html okay okay cool yeah so it's empty you'll get to this point and it'll just have some one file in it which is nothing so at this point you want to do mpm run build and you will see what will happen once we actually type that command in is this will start to build out right here yeah and what we need to do is what this is doing guys is it builds a production ready uh build of your react bundle so like your react app is basically stripping out the the developer stuff like the hot reloading all the expensive sort of stuff that takes up a lot of space and stuff like we don't need that in the actual production build so when it goes online we just need to be as lightweight as possible right we need to be as lightweight and just quick as possible so that's it so everything goes into that build folder and then we set up firebase to deploy it from that build folder so i think i think we can we can get ready for this big big big release now so you can say five there we go guys are you guys ready for this we're about to deploy this app online and all the hard work that we have done up until now is gonna pay off and you are gonna get access to this app and you will be able to actually use it right now are you excited we want to know let's do it we're not going to actually you know what we're not going to hit that deploy button unless we get a message from the chat that you guys are actually pumped up about this yeah i think we should just leave them like just right on the edge you know like if we get some excitement we get it going then then we'll hit that deploy button yeah i think actually we can just start chatting about what we're going to be doing next i guess sunny so um you know oh yeah uh yeah i'm gonna be coming down to uh britain at some point i'm gonna hang out yeah you're not in wales right where are you again no london london yeah how far is that oh damn people are actually excited joe's like let's go michael is like let's go they're like deploy and joy's like i'm pumped holy crap all right here we go that's that level of energy we're talking about guys you guys are falling asleep on us and that's not acceptable so that's the level of energy we want in this freaking room all right five four three two one one all right let's check it out i'm gonna hit enter vamos we're getting let's go in all kinds of languages that's what i'm talking about lauren john it's deploying pumped it's deployed and hold on i think it just deployed let's go all right let me actually click this now hopefully it doesn't drastic in the link let me drop it also there it is guys that's what we just built nice i dropped it in the chat go check it out guys let us know in the comments what you think and give it a resize try and break it you know play around with it a bit awesome final netflix clone app i'm gonna drop the link i'm dropping the link in chat i think everyone really loved that and guys if you're doing it remember shoot an instagram story and make sure you tag us it's always we always love to see your name says thanks guys such an amazing session you're the best blah blah blah nice lit lit liftoff i see i see netflix alone yeah people are dropping the link alexandros thank you for dropping the link everything he says comes with a plus have you noticed that any time you get a message i don't know why that is is he is he messaging us from like the command line or something maybe if he is we need to bring him on yeah wow that is sick uh sunny can we find out how many people are hitting can we find out how many people are hitting this page probably from uh firebase right from firebase console i should be able to get access to that information netflix clone i mean you say up with analytics right here we go here we go where where is it i think it might be hosting oh it says waiting for analytics there oh really did i just go back to the the main page overview jesus yeah better than netflix itself damn holy crap look at the response damn guys if you haven't already smash the thumbs up button because it will really help the video grow and more people can see it yes please yes smash that button share it with your friends family anybody you think would get value out of this just spread this like wildfire um michael is like it's lagging a bit because the traffic yeah that's funny i'm sure let me actually hit refresh funny can i talk uh we can only read uh messages at the moment joe so you can message in the comment section and we can you can he goes is that being cool nice yeah that's awesome that's such a fun part of it bro joe diaz is in the course yeah i know i was actually thinking that i'm pretty sure actually he's in the course yeah that's awesome let's go this is cool people are loving this also guys if you find this really useful we do this stuff we have four weekly coaching calls every week and we always build stuff like this um so if you're interested go check out the link in the description and have a look at the course that'll be awesome and you can even check this out in your phone and yeah guys if you guys want to learn all this stuff and you want to be able to learn how to make an income with this it would just be silly for us to not push you to go click the link in the description below to check out the course profit with javascript we literally teach you how to build all of these apps but more importantly we show you how can you go to upwork how can you go to freelancer all these platforms and actually like take your skills and make an income with it get those projects whether it's a 500 project or a 5 000 project or a sixfigure job we show you how to be able to get those uh in profit with javascript so click that link in the description below and jump in the course yeah exactly also paulo says trailer isn't working some of the clickable uh posters don't have trailers or is the the module that we're using isn't finding a trailer for them so that might be the reason why you're you're seeing that yeah man these analytics huh these analytics freaking take me take forever yeah i know i think that's gonna i don't know when that's gonna come true i think it does take like unless you're going through uh google analytics itself i think there's a big delay with that yeah well it's all good i think this was still fun um hopefully yeah this was fun i hope everybody all of you guys really really enjoyed this experience thank you guys for giving the video a like just make sure to do that if you haven't already we're going to be live streaming our goal is to live stream um and test out i mean we tried this week and going five times a week so we're gonna do something tomorrow as well and then for next week our goal is to hit five live streams next week as well so sometimes uh yeah the offer raja is saying is the offer over yes that offer is over we had a sale for july 4th and we were sharing it with you guys but if you have missed that offer unfortunately whoops one second yeah so that offer is gone and it's not going to come back and this program is kind of only going to go up in price you know i mean we have we have tons of students who are like yo this program should be worth more than a ten thousand dollar coding bootcamp because those are the programs they've gone to and in this program they actually get much more value than a ten thousand dollar coding bootcamp so for you to be able to get it at the price you can get it it's just stupid it's silly like literally nobody in the market would do that because it just would not make sense we just have a great team great community and we got you know we have you guys and we were able to put this together so we're really proud of this course we've worked tremendously hard over the last year nonstop on this course and so you know if you want we have success coaches who give you personalized video feedback i mean i don't know anybody else who's doing that we have uh you know over 1200 1300 active members who will answer your questions live we have four people who give live coaching calls tell me any program i mean i don't care if you tell me west boss or you tell me like some of the biggest most respected people in the programming space they are not doing that the fact that sunny is live in that program every single week helping you build projects and then you get a homework and then that homework gets personal video feedback that is not happening anywhere you getting a call with nas every single week and you guys build fullon projects and last week they built a covet 19 tracker that is not happening and the people who some of the people who built the covet 19 tracker actually got paid uh and got freelancing jobs where they were literally building a covet 19 tracker for them so the combination of the live trainings the recorded courses and then us teaching how to go make an income just not happening anywhere so if this offer is available to you and the price where it's available right now and you click it trust me you don't want to miss out on it and if you're serious about this stop playing around click it and join and we want to see you inside we'll help you 100 and i love it when people join and we end up having a conversation in the community and in slack it's it's such a guy's like not even just for the content the community is unbelievable like it's so supportive it's like i i can guarantee everyone who's a developer here has gone on to stack overflow and been a bit disheartened when they try and shoot a question where in slack in our community like in profit javascript we i barely get a chance to be able to reply first to your comments because somebody else would have jumped in that quick like it's it's really insane so mathuradon says do you only have a weekendonly training so we actually have uh weekly coaching calls across the week so it's completely within the week and on the weekends um so yeah we have very flexible sort of uh coaching calls so that it can get everyone's schedule devin says i may join just for the freelancer help for sure devon i mean the level of skill you have and you're even helping us in the live stream and you're bringing so much value like i know what level where you're at and if you join that community i promise you you're gonna get massive massive help in the community i mean the community is unbelievable so if you're in there and you're looking for freelancers to help you or even recruit somebody with you so you get like those clients and you get work you can distribute it with the people in there to even help you out so if it was you i mean you're probably you can get one or two projects that are going to pay 10 times the amount of what is going to cost you to get in the course and you're not just going to have access to those people like you have access to me directly you have access to sunny and you get to be on live calls with him every single week and for the people in the comm like youtube and facebook and stuff like that you guys can see there are 200 people live at any given time and we're pumped to have you but it's really hard to communicate oneonone with every single person it just doesn't really allow for that but in slack you can communicate with us real time and then when we do zoom hosted calls you can literally talk to us one on one we bring your question we speak with you and then we solve that question oftentimes even nas last week i talked to him by the way sunny i talked to nas last week and nas was like he got on a call with one of the students for 42 minutes literally 42 minutes and he helped that student solve all of his coding problems that he had for his job and it blew my mind i'm like that is insane amount of value so that's the level of value and care and passion that we bring it's just not there in the market anywhere and so if you're serious about this and you want to do this and you want some support you just want somebody to be there with you that's who we are and so that is why i'm saying and i'm so passionate behind so passionate about this like go click that link and jump in the program and we're going to be closing this program in a few days so please please please if you're serious don't miss out on that yeah and guys i'll say it firsthand having gone to university and even did a masters after that this course if i knew it existed i would have saved every single penny and i just would have gone and done a bootcamp like this like and it's more than a boot camp it's not just a simple sort of course or something like that it's just going to take you from absolutely nothing so literally never having coded before all the way and we teach you don't we don't even teach you just the basics of like getting a job at the end of it we show you different ways of making money so we teach you how even after a week of coding from basic pure beginner guys after a week of coding being able to make an income by teaching somebody else who's never coded before um and that really really actually incredibly does well for a lot of our students um and it's and i've actually lost i've honestly lost count of the amount of students now that i've seen who have landed jobs freelancing clients tutoring clients we have a 17 year old who made 180 dollars on a uh on i think it was like on two coaching calls which is insane like yeah that's he that means he's charging 90 an hour um yeah and we have had students who have gotten hundred and ten thousand dollar contracts we have ryan noble who last month closed out twenty eight thousand 000 in one month so we have i mean from students who are like making their first 50 dollars to more advanced people who are making 28 grand or 40 grand and so there are levels to this so not only we're going to give you that like side of coding but we're going to give you that side of freelancing the kick in the ass like how do you actually go approach clients like retain them over a long period of time make sure that they're not just paying you 500 for this one project they'll work with you throughout the year and pay you like 6 000 because you can bring so much value and really help them out and i love that devin just said um he's like i'm sold bro he's like lol keep talking and take my money awesome devin we want to see you in the program and if you jump in you know this week sonny is going to get on a call with you and hell like you know what i'll just i'll get on a oneonone personal call with you like if you jump actually you jump in and i see your name pop up because i have it on my phone where i can see who's coming in so i know like indra yani joined a little bit ago all right so if i see you pop up in here and you join the program i'm definitely just going to jump on a oneonone call with you and put you in touch with people and see where you could use the most help and then you're going to have calls with sunny and nas and everybody like that so whether it's freelancing help or building projects like we have got you covered exactly malika certhi asked a good question would oneonone guidance be available honestly this is the closest thing you will ever get to oneonone guidance like the amount of students that i have oneonone chats with every single day like my mornings and my evenings pretty much consist of just chatting to students um so it could be literally if you've landed an interview if you have a question about your homework or coding or anything like that i literally say there's no sort of barrier you can just ask me whenever you feel like it throughout the day at any point in time and i'll get back to you asap and every single time it it's a massive value to all of the students they love it they feel like they can chat to us uh and you don't even just have one guys you have like all of us you have me kazzy nars jacob like everybody's at your disposal and it's really really gonna it's a game changer in this sort of space yeah so guys take advantage of this this could be your secret weapon the link is in the description below click it join it we want to see you in the program live calls happening every week multiple live calls great community personalized video feedback and just we love you and we you know we got you and again if you don't like it for any reason you can cancel at any time you can cancel within your own dashboard there's no weird way you have to cancel so you can cancel any time you need a refund you're not happy we got you covered we don't want you your money we just want you to succeed and that's about it guys at this point if you watched up until now thank you so much for watching like the video if you haven't already just much love to everybody joe thank you for the support michael everybody who's on this live stream uh we love you guys and uh we will see you guys we're going to see them tomorrow right sunny that's it we're going to see you tomorrow for another build yep we're going to see you guys tomorrow just one thing for my own satisfaction you know it's um i just want to really hit this right there and just um you know just a little like right there there we go so now this project is just done completed and um also i just want to have the live live build of the app guys this is what we build these are the types of projects you guys will be learning how to build every single week um and tomorrow we're gonna go live again and build something give us your ideas shoot us your ideas on instagram and tag us outside of that sonny what else what else do we got uh i think honestly guys like we the one thing i would love to say is that like shoot us your ideas because literally we came up with this build like today and one day we came up with the build and we've already started to get some ideas from people but like we said like the ones that are actually really kind of get to us are the ones where people actually just send the video like literally yesterday we had a video submission and if we see one of those we're more likely to pick that one idea and you're gonna see the idea being built so um yeah honestly i'll say yeah just shoot us your ideas and we can def we'll build them for you yeah yep awesome devin gray says just purchase can't wait to link up with y'all amazing devin and as a matter of fact if you ever come out to la come hang out with us the entire team you're more than welcome to that'd be amazing and uh yeah anything we can do just let us know i'm super pumped to have you in the program you're going to be blown away and keep joining us on these live streams i mean i feel like you're already a part of the community honestly like even the live stream we were doing today i felt you were adding so much value so it's going to be exchange of both both ways you know value and so one thing i want to highlight here is that we have a high caliber of people in the community so like it's not just that devin is going to get value from the program the community is actually going to get value from devon as well so those are the type of people we actually attract in this community so that's another huge benefit for why you should consider it because you're going to have people like devin and people like you know ourminded people who are on this live stream and you can even see from the chat how positive and good energy and just positive vibes everybody has exactly yeah um awesome guys devin says i'm in the valley i'll bring masks and come see y'all hey nice awesome we got we got a few extra masks for you so uh we're located in hollywood so that would be actually really really cool awesome guys thank you so much and we will see you guys tomorrow on another build see you guys peace yo raja says payment failed um raja if your payment is failing don't worry just act just uh send us an email at support cleverprogrammer.com we'll try to help you out but yeah we'll try to help you out um and uh try using paypal as well that's that's we've we found that close to you yeah yeah exactly try paypal that works so yeah give that a try awesome guys love you peace okay see you guys tomorrow peace
