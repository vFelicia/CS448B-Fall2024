With timestamps:

00:00 - hey what's up guys this is Anna from
00:03 - clever programmer again um and today I
00:05 - just want to talk about something really
00:06 - cool in Python called indexing slicing
00:09 - and striding in arrays and strings so
00:12 - let's get started alright first year
00:19 - what I'm gonna want to go to repple that
00:21 - IT as usual so once you're here click on
00:23 - new ripple and I'll follow along please
00:26 - why is python not popping up at the top
00:30 - that is just perverse anyways so let's
00:34 - just name this uh what did I say
00:37 - indexing slicing and striding so that
00:40 - might not make any sense to you right
00:42 - now but I'm about to explain so this is
00:44 - a really cool thing that you can do in
00:46 - Python on to play around with strings
00:49 - and arrays strings are basically just
00:51 - arrays but yeah you're able to do a lot
00:55 - of cool things with it so I'll just jump
00:56 - right in first let's start with a with
00:58 - uh with a list so I'm just gonna call
01:01 - this list digits and then I'm just gonna
01:03 - put the digits from 1 to 9 here or 0 to
01:07 - 9 so there's 10 digits in here right and
01:09 - these are actually the same as the
01:10 - indexes of every digit I'm I'm that
01:13 - might make it a little bit easier for
01:14 - you guys to understand so um once we
01:16 - have that there all you guys should be
01:18 - familiar with simple indexing if you're
01:20 - not I'll please look that up real quick
01:22 - and come back but if you do then you
01:24 - should know that if I go like this
01:26 - digits at 0 then this is just gonna
01:29 - print out the first element of this
01:30 - array so she's gonna print out 0 let's
01:32 - see if it does and that's exactly what
01:34 - happens same deal if I put in 1 or 2 or
01:36 - 3 or 4 then I'm just gonna get that same
01:39 - index back alright one thing you might
01:43 - not have known about Python I'm not sure
01:45 - of any other languages you can do this
01:46 - in I'm sure there are but I don't think
01:48 - you can in Java or C++ or other
01:50 - languages like that but you can actually
01:52 - use negative indexing so let's like what
01:55 - would that even mean like think about it
01:56 - for a second if you had a negative index
01:58 - in array what what could that possibly
01:59 - mean maybe you could be like indexing
02:02 - through it and then maybe like you start
02:04 - you loop around to the beginning again
02:05 - like once you once you loop too much
02:08 - like almost like like a mod modulus but
02:11 - actually what Python decided to do which
02:13 - I
02:13 - I think is pretty intelligent is
02:14 - actually make it so that you count from
02:16 - the back of the list so if we're in that
02:19 - indexing the positive numbers this would
02:21 - be 0 this would be 1 this would be 2 3
02:23 - so on and so forth
02:24 - oops but if you use a negative index
02:26 - let's just say negative 1 you would
02:28 - actually be accessing this last one so
02:30 - let's try print this out and as you can
02:32 - see the very last element is printed out
02:34 - if I put negative 2 again the
02:36 - second-to-last element is printed out 8
02:38 - so actually if I wanted to get the very
02:40 - first element using a negative index
02:42 - then you could actually just put
02:44 - negative 10 because there's 10 elements
02:46 - in this array or even better just put
02:48 - negative you just use the length
02:51 - function you like you guys know that
02:52 - length function if you don't then it
02:54 - just give you the length of any list or
02:58 - string I believe I'm not sure if it
03:00 - works on strings but I think it does so
03:02 - yeah see if you do that then this
03:04 - automatically comes 10 this makes it
03:05 - negative and then we can get the first
03:07 - element that way so you can actually
03:08 - call every element by two different
03:09 - names in Python that's really cool um
03:11 - it's very handy if you just want to get
03:13 - the last element just boom just like
03:14 - slapping negative one you're done it's
03:17 - very nice and easy and clean um another
03:20 - cool thing we can do is uh there's
03:22 - actually gonna be a lot of cool action
03:23 - happening between these two brackets you
03:25 - can do a lot of stuff between these two
03:26 - with like multiple : signs and and weird
03:29 - weird little codes but it's very very
03:33 - powerful for doing different kind of
03:36 - reading from arrays and strings so what
03:39 - else you can do is let's stick a colon
03:41 - in here so what the heck does that mean
03:42 - alright so all this means is you can
03:44 - actually put a range of an array in here
03:47 - so that means instead of just putting in
03:50 - like a single element you can actually
03:52 - put a range of elements so let's say if
03:53 - I wanted to just get the first two
03:56 - elements or two yeah the first first 3
03:58 - so 0 1 2 I would leave nothing at the
04:00 - beginning and then let's say we would
04:02 - end at a limit 3 so it'll go up to 3 but
04:09 - not include it so it'll actually give us
04:10 - this entire thing back instead of just
04:12 - one elements so you can actually you can
04:14 - actually reference parts of the array in
04:16 - chunks and you can specify exactly the
04:19 - chunks you want so let's try to run this
04:21 - and see what happens exactly what I
04:23 - thought would happen 0 1 2 because this
04:25 - will start from the very beginning
04:27 - because we didn't specify anything here
04:28 - I think you put zero the same thing
04:30 - would actually work yeah because it
04:33 - starts from here includes this so this
04:34 - number is inclusive and this number is
04:36 - exclusive so this will print out
04:39 - everything from 0 1 & 2 likewise and put
04:42 - it all the way up to 9 this will go from
04:44 - 0 all the way up to 8 so I would
04:45 - actually get from 0 to 8 here when I run
04:47 - it and yep exactly what happens so
04:49 - that's basically what slicing is in
04:51 - Python Oh
04:52 - very useful if you just want to get like
04:54 - a chunk of it let's say you wanted you
04:55 - had like a name like a name in a string
04:57 - like maybe let's just pop this in here
04:59 - real quick name equals first last just
05:05 - like that go like this and let's say I
05:07 - just want to pick out the first name you
05:10 - can actually find that the the correct
05:14 - index so 0 1 2 3 4 5 and if I put 0 2 5
05:18 - and you can actually get rid of the 0
05:20 - because it's the same thing as nothing
05:21 - and I run it first prints out so see how
05:24 - you can get a different substring from
05:25 - that string very cool in Python I always
05:28 - just get rid of this because I guess we
05:30 - don't need it let's go back to this
05:32 - example so also you can also slice into
05:37 - arrays using negative negative elements
05:40 - so you can actually put in like a
05:41 - negative 1 like this and this should be
05:45 - from the very first element to the very
05:47 - last element remember this is exclusive
05:49 - so it's not going to include the 9 let's
05:51 - try that and again the same thing pops
05:53 - out also I believe you can yeah this is
06:00 - one thing almost forgot to do you can
06:06 - put a number at the beginning and leave
06:08 - the last the last part empty so that
06:10 - this will go from element 5 inclusive
06:12 - all the way to the end note though if
06:14 - you put 10 here umm yeah 10 index 10
06:17 - here you're actually going to exclude it
06:19 - but if you just don't put anything at
06:20 - all you'll actually include the last
06:22 - digit so that's something to keep in
06:24 - mind there what else can we do so I
06:27 - think that's about it when it comes to
06:28 - slicing also another thing you can do is
06:32 - called striding so slicing is very
06:34 - simple use put a you have a chunk you
06:37 - can just get any any range in the array
06:38 - you want one
06:39 - zero up to all of it but you can also do
06:42 - stride so that's actually gonna
06:43 - incorporate two colons alright so what
06:46 - this means is you can actually have a
06:48 - slice here so let's say from zero to two
06:50 - ten right or let's say uh yeah to ten
06:54 - and then what the stride is is how many
06:57 - how big the jumps you want to be so if
06:59 - the stride was one we're just gonna hop
07:01 - one time every time so it's gonna go
07:03 - from zero to one - two - three - four -
07:05 - five - six etcetera but if you put two
07:07 - you can actually skip so it'll actually
07:10 - jump and skip from zero to two to four
07:12 - to six so we can actually pick out all
07:14 - the even numbers this way let's try this
07:15 - I'll run this and as you can see we get
07:18 - zero two four six eight if we put in
07:20 - three then you'll actually jump in um in
07:22 - strides of three so you get 0 3 6 9 um
07:26 - you wanna get to 9 cuz this is ten let's
07:28 - see oh it did pop up so the 9 did pop up
07:31 - there hold on those are basically what
07:34 - strides do again you can use negative
07:36 - indexes here is in any combination you
07:38 - want you can omit things so if you admit
07:40 - the first one you're gonna start from
07:41 - the very beginning including them this
07:42 - one if you omit this one you're gonna do
07:43 - um include all of them all go up to the
07:45 - end also you could do something like
07:48 - this so this just includes everything
07:51 - this is just everything and the stride
07:53 - of one just includes everything but
07:54 - let's say you put a stride of two then
07:56 - you just get the even numbers or um or
08:01 - you could even actually use negative
08:02 - strides as well I forgot um for a second
08:04 - but I believe if you put a negative
08:05 - stride what would that mean remember the
08:07 - negative index we actually um the
08:10 - negative index you would um start from
08:13 - the end of the array but what about a
08:15 - stride a stride kind of tells you okay
08:17 - jump in a certain direction at a certain
08:19 - jump so a stride of two you would jump
08:21 - in um in leaps of two in strides of two
08:26 - you would keep jumping over and over and
08:27 - over or a stride with three you jump
08:29 - over and over and over and over and
08:30 - stride three leaps of three so a
08:32 - negative one on what makes most sense
08:34 - what the people who designed Python came
08:36 - up with was if it's negative go backward
08:38 - so actually putting a destryed of
08:40 - negative one you'll start from the end
08:41 - of the list and you'll go backwards so
08:43 - let's see how that works
08:44 - let's put um right row let's click run
08:47 - and as you can see the list gets spit
08:50 - out backwards so this is actually a cool
08:51 - little
08:52 - that you can do in pot in Python to
08:54 - reverse any array or string just stick a
08:57 - little little negative one here also if
09:00 - you put a negative two and you hit run
09:02 - then the same thing happens it starts
09:04 - from the N and goes to the beginning of
09:06 - the array but it's going in strides of
09:08 - two hence the only odd numbers here very
09:11 - cool one thing to note with negative
09:13 - Strides is if you have negative strides
09:15 - and you also want to slice you need to
09:17 - make sure that this index here is on the
09:19 - right side of this index here so I can't
09:21 - put like index 0 here and index 5 here
09:24 - because that doesn't make any sense how
09:26 - can I go from index 5 to index 0 oh
09:30 - sorry I have it backwards this way how
09:35 - can I go from index 0 to index 5 going
09:38 - in this direction to the left it doesn't
09:41 - make any sense so you need to make sure
09:43 - that the stride direction if it's
09:45 - positive or negative that the slicing
09:47 - indexes also make sense during the right
09:50 - order so you need to make sure that if
09:52 - it's negative then the the slicing is
09:54 - going to the left and then if the stride
09:56 - is a positive number then the slicing is
09:58 - going to the right so this would not
09:59 - work on this this would work but if we
10:02 - have a negative 2 then we would need to
10:04 - actually change these 2 5 and 0 so that
10:07 - we're going from 5 to 0 and strides of 2
10:11 - so it would be 5 3 1 and that's exactly
10:14 - what happens so that might have been a
10:17 - little bit confusing um there are very
10:20 - very useful thing once you figure out
10:23 - how to use them just play around with it
10:24 - a little bit I'm kind of rambling on a
10:25 - little bit here but if you just like pop
10:28 - in some numbers with these two colons
10:29 - and really figure out like what happens
10:31 - and try to predict what's coming out the
10:32 - way I did then it'll actually be a
10:34 - really good learning exercise for you so
10:35 - why don't you go in there and I'll do
10:37 - some cool stuff like just play around
10:38 - get some sub strings get some like sub
10:40 - arrays and reverse some things and go in
10:42 - the opposite direction and just have fun
10:44 - with it
10:44 - alright so that's pretty much it when it
10:48 - comes to indexing slicing and striding
10:50 - including negative numbers but now I
10:53 - actually want to do a little example
10:55 - where instead of just having numbers in
10:57 - these slices you can actually use
10:59 - variables so on one little cool thing
11:02 - that I came up with was if we just have
11:05 - a for loop
11:06 - called for I in range how many digits I
11:12 - have ten yeah but let's just put length
11:14 - use a length function because that's
11:15 - more robust you're able to make the
11:19 - program smarter that way because it'll
11:22 - it'll automatically adjust so always use
11:23 - the length function instead of
11:24 - hard-coding numbers try to never hard
11:26 - code numbers in your in your code is
11:28 - just not a good idea um when you are
11:31 - trying to make big programs so length of
11:35 - digits would be end up being 10 so for
11:38 - range in 10 let's try to just print out
11:43 - digits from the beginning to I this this
11:51 - zero is optional but I just put it in
11:52 - there for clarity sake let's run this
11:54 - and before I do though what do you think
11:57 - will print out think about it and I'm
12:02 - gonna run it now and you'll see so you
12:05 - can ignore this this is from that first
12:07 - print statement but this is exactly what
12:09 - prints out here this weird cascading
12:11 - thing here now think about what's
12:14 - happening here we are we have a loop
12:16 - with a with a variable I that goes
12:21 - through the digits here from 0 to 9 and
12:23 - then each time we go through this loop
12:25 - you want to print from the beginning of
12:27 - the list up to that digit so every time
12:29 - this loop goes I is getting a little bit
12:31 - bigger which means this is going from
12:33 - the beginning to somewhere and then
12:34 - beginning to a summer little bit bigger
12:35 - and the beginning to somewhere little
12:37 - bit bigger beginning is somewhere a
12:38 - little bigger and so on and so forth and
12:40 - that's why you get this you start at the
12:41 - beginning and then you go from the
12:42 - beginning to one and then beginning to
12:44 - two and so on and so forth all the way
12:45 - until you get to the end at eight so
12:49 - this is um a little bit advanced of
12:51 - putting putting variables in slices but
12:54 - you can actually do some really really
12:55 - interesting things when you are when
12:58 - you're doing like complicated algorithms
12:59 - and what not putting variables in slices
13:02 - like this what's strides and you could
13:04 - even put like equations in these slices
13:06 - and whatnot like like modulus signs and
13:08 - and weird function calls and stuff and
13:10 - you can put a lot in there and you can
13:12 - actually do some really interesting
13:13 - things when it comes to on grouping
13:16 - grouping together things so let's say
13:18 - one actually kind of
13:19 - advanced example that I came up with but
13:21 - I really want to show you guys it's
13:23 - pretty cool it's let's say I have so I
13:25 - have this list from 0 to 9 here now
13:28 - let's say I want to get every group of 3
13:31 - possible in this list so if I have this
13:34 - entire list I want to get 0 1 2 I want
13:37 - to get 1 2 3 1 2 3
13:39 - I want to get 2 3 4 3 4 5 so on and so
13:42 - forth all the way up until a 7 8 9 all
13:44 - right but no further I don't want eaten
13:46 - I don't want just eaten I don't want
13:47 - just 9 I don't want just 0
13:48 - ok so um you can actually let's let's
13:53 - start by writing a for loop again so for
13:55 - I in range
13:57 - let's just go lengths of digits again
14:00 - let's just start there that's always a
14:02 - good place to start sometimes you have
14:03 - to like subtract 1 or 2 to get rid of
14:05 - some weird offsets but just start by
14:08 - using the length function always and um
14:12 - let's just try to print digits at from I
14:21 - oops from i to i plus 3 so let's think
14:27 - about this before i run it okay for i in
14:30 - range the length of digits so this is
14:33 - this loop is gonna run 10 times because
14:35 - this list is 10 10 elements long then
14:40 - every time this runs we are gonna go
14:42 - from the current index so whatever is it
14:44 - on whatever iteration run so 0 1 2 3 or
14:46 - all up to 9 + 3 so the current index + 3
14:51 - so what is this defining here this t
14:53 - this is defining a slice in the array
14:55 - okay a slice in the array of size 3 but
15:01 - it's constantly moving because this is I
15:02 - and I plus 3 then we know that it's
15:04 - going to be of length 3 wherever I is so
15:06 - let's just try to run this and see what
15:08 - pop up pops out let's comment this out
15:11 - so we don't the output doesn't get
15:12 - confusing
15:14 - boom-boom-boom run so as we can see the
15:18 - it almost has the correct functionality
15:20 - that we want 0 1 2 1 2 3 2 3 4 3 4 5
15:25 - because you can see like these the first
15:26 - elements of all these of all this output
15:29 - these are actually the iterations of the
15:31 - for loop and then we just added three to
15:33 - the to the end of the the slice so
15:35 - that's what we get the second two
15:36 - following numbers after that so that's
15:39 - that's how we do that but what about
15:40 - this thing here there's this 8 9 and 9
15:43 - but I want to get rid of that because
15:44 - those aren't groups of 3 so let's think
15:46 - about that what could you do to get rid
15:48 - of those well you could just subtract 2
15:51 - iterations from the for loop right you
15:53 - could just chop it off just by putting a
15:55 - minus 2 in here and a little cheeky -2
15:57 - boom and you just get rid of those two
15:59 - and just ignore them completely but
16:01 - that's not the best idea usually you
16:04 - don't want negative just the same way I
16:05 - didn't want to put 10 here and I use
16:07 - length on digits length of digits
16:10 - instead you also don't want to do a
16:12 - minus 2 or a plus 3 here even just bear
16:15 - with me for a second well it might make
16:18 - a little more sense once you see it so
16:20 - you don't want this negative 2 or plus 3
16:21 - but then how do you get rid of that well
16:23 - let's just say I said I wanted a window
16:25 - size right window size of 3 so let's do
16:30 - that
16:31 - now let's get rid of this so suddenly we
16:35 - can get rid of that 3 so this should run
16:38 - exactly the same as before
16:39 - boom yes it runs exactly and does what
16:42 - we want us to do and we actually
16:43 - specified the window size here so that's
16:45 - really cool but we still have this minus
16:46 - 2 here so what what is what does that
16:49 - mean how do we get rid of that well
16:51 - let's think about what this 2 is really
16:54 - doing this two is subtracting off 2
16:57 - iterations of loop because there is a
16:59 - trailing some trailing things like once
17:02 - these iterations over here happen
17:03 - there's not there's not enough digits
17:05 - afterwards to get an entire group of 3
17:07 - so um what the key distinction I want to
17:10 - make here is that 2 is one digit less
17:12 - than 3 all right because let's say I put
17:16 - okay let's get rid of this and I'll just
17:18 - show you guys if the window size was
17:19 - actually five so I know now I can change
17:22 - so you see this is actually another good
17:24 - reason why you want to have variables
17:27 - like this because you can just change
17:28 - one variable see I change this one
17:29 - variable to five and then now I can
17:31 - actually change the window size of five
17:33 - so I can get these five and then these
17:35 - five and then these five and so on and
17:37 - so forth and chunks or even I can just
17:39 - go that entire array I can get all 10 10
17:42 - elements at once but let's just go with
17:45 - five and run this and see what happens
17:46 - so you can see that it's running as
17:49 - expected we're getting groups of 5 from
17:51 - 0 to 4 and then 1 to 5 and 2 to 6 and so
17:53 - on but we have all this junk at the end
17:55 - again but do you notice how we actually
17:57 - don't only have two iterations there's
17:59 - actually 4 iterations so remember we had
18:01 - 3 iterations and we had to get rid of 2
18:03 - iterations and now there's four extra
18:06 - iterations so 3 & 2 the difference is 1
18:09 - and then now there's 4 iteration or the
18:12 - window size was 5 and we had to get rid
18:14 - of 4 iterations so you see how 5 & 4
18:16 - their own their own their difference is
18:18 - 1 again so we found the relationship
18:20 - between these two numbers this number
18:22 - always needs to be 1 less than this
18:24 - number in order for this window size
18:26 - thing to work okay does that make sense
18:29 - if it doesn't try to rewatch that whole
18:31 - little section again and think about um
18:34 - the relationship between these two
18:35 - numbers why would this weird ramp thing
18:38 - here get longer as this number gets
18:40 - bigger so if I put in a 6 to put in a 6
18:43 - this got this ramp got one one longer
18:46 - but put in a 7 this round got even one
18:48 - one longer so we got to get keep getting
18:50 - rid of one more iteration of the for
18:52 - loop at the end every single time once
18:55 - you understand that then it's very
18:56 - simple because all you need to do is so
19:00 - one we need to subtract 6 from here if
19:04 - you need to subtract 6 from here at 6 is
19:06 - 1 less than 7 and what is 7 7 is window
19:09 - size so actually let's just put instead
19:12 - of minus 6 let's go - window size but
19:15 - remember it has to be 1 less than window
19:16 - size so minus 1
19:18 - um there is one exception to the rule
19:20 - every now and then you actually need to
19:22 - have a minus one or a plus one to get
19:24 - rid of like weird offsets and whatnot so
19:27 - it's okay to have minus ones or plus
19:28 - ones in your code but you never ever
19:30 - want like a negative like 400 27.76 or
19:33 - something like that because then it's
19:35 - hard coded in the program and that's not
19:37 - what you want in a robust um
19:39 - well-rounded program so minus one is
19:41 - okay but when we run this let's click
19:43 - run and see what happens as you can see
19:47 - what happened here
19:49 - oops yeah as you can see we get all the
19:54 - other groups of seven actually we don't
19:56 - what is what is happening here did I
20:00 - make a mistake alright guys thanks for
20:09 - standing by I had to take a couple
20:10 - minutes to figure that out this kind of
20:12 - stuff happens all the time like even
20:13 - when I even when you plant stuff out so
20:15 - uh just just be aware that even people
20:19 - who have been programming for like seven
20:20 - years like me they still screw up I was
20:22 - actually a very simple bug here what I
20:23 - realized was yes it does this number
20:26 - does need to be one more than this
20:27 - number but earlier I did not have the
20:30 - parentheses here so when I was doing
20:32 - this he was actually subtracting um the
20:37 - I think of subtracting numbers
20:38 - incorrectly but once I I grouped it
20:41 - together here by putting these
20:45 - parentheses in I feel like I shouldn't
20:46 - change anything but for some reason that
20:48 - is fixed at issue so if I wanted to get
20:51 - groups of windows of size seven now this
20:54 - will actually become six within this
20:56 - parentheses so I can do this and as you
20:58 - can see now we get all four instead of
21:01 - what we had before I believe this is
21:02 - what we had and this was giving us
21:04 - errors but yeah I guess sometimes it's
21:06 - it's always safe safer to use
21:08 - parentheses more parentheses and less
21:10 - parentheses to UM be very very clear
21:12 - about your order of operations because
21:13 - that's a very easy mistake to make in
21:16 - math and then um those same those same
21:19 - same easy mistakes translate over to
21:22 - programming very very smoothly which is
21:26 - actually a kind of a negative thing it's
21:27 - also a positive thing if you know how to
21:29 - work out math problems just just be
21:31 - aware of that any any math that doesn't
21:33 - work in real life won't work on a
21:35 - computer all right that's just something
21:37 - note but yeah that's the last kind of
21:39 - advanced example I wanted to give you
21:42 - guys with with slicing so here we're
21:44 - actually using a dynamic slicing scheme
21:48 - here to actually change this slice and a
21:51 - for loop over and over again so we're
21:52 - actually playing around with some
21:53 - numbers and then all we have to do is
21:55 - change one number up here one little
21:57 - configuration thing and we can actually
21:59 - get on any size window we want so this
22:02 - is every side every window of size one
22:04 - every window of size two like you guys
22:06 - get it so on and so forth so yeah guys
22:08 - um that is the end of this video
22:10 - I might have drone on for a little bit
22:12 - I'm trying to get better at that I
22:13 - noticed I dragged on a little bit but um
22:14 - I like to be more of your boast and less
22:16 - verbose because I think it's better to
22:18 - be clear and then just watch the video
22:20 - on like two times speed because that's
22:22 - kind of what I learned in my um my own
22:24 - personal schooling I'm currently in
22:25 - graduate school but yeah stay tuned
22:27 - thanks for watching guys and I'll see
22:29 - you next time I'm gonna be releasing a
22:30 - bunch of new YouTube videos in these
22:32 - next few weeks I'm leading up to this a
22:34 - lot of cool content for you guys but
22:36 - actually all this stuff is actually lead
22:37 - up to this new product we're going to be
22:39 - launching called how to automate stuff
22:41 - with Python yes how to automate stuff
22:44 - with Python it is exactly what it sounds
22:46 - like pretty much you're gonna be
22:47 - automating a lot of stuff on your
22:49 - computer with Python it's actually
22:52 - pretty cool but yeah I just want to
22:53 - mention that in there um stay tuned I'm
22:55 - here more about it I'll be talking about
22:57 - it more in the future but definitely a
22:59 - very very cool course we're gonna go
23:01 - going over a lot of stuff like
23:02 - automation um cool little like like
23:05 - automating mouse clicks and keyboard
23:07 - presses on your computer while you're
23:08 - not even there stuff like that like
23:09 - really really cool stuff um but
23:11 - definitely stay tuned and that is all
23:13 - for this video guys thank you for
23:15 - watching and I will see you next time
23:17 - good bye
23:19 - [Music]

Cleaned transcript:

hey what's up guys this is Anna from clever programmer again um and today I just want to talk about something really cool in Python called indexing slicing and striding in arrays and strings so let's get started alright first year what I'm gonna want to go to repple that IT as usual so once you're here click on new ripple and I'll follow along please why is python not popping up at the top that is just perverse anyways so let's just name this uh what did I say indexing slicing and striding so that might not make any sense to you right now but I'm about to explain so this is a really cool thing that you can do in Python on to play around with strings and arrays strings are basically just arrays but yeah you're able to do a lot of cool things with it so I'll just jump right in first let's start with a with uh with a list so I'm just gonna call this list digits and then I'm just gonna put the digits from 1 to 9 here or 0 to 9 so there's 10 digits in here right and these are actually the same as the indexes of every digit I'm I'm that might make it a little bit easier for you guys to understand so um once we have that there all you guys should be familiar with simple indexing if you're not I'll please look that up real quick and come back but if you do then you should know that if I go like this digits at 0 then this is just gonna print out the first element of this array so she's gonna print out 0 let's see if it does and that's exactly what happens same deal if I put in 1 or 2 or 3 or 4 then I'm just gonna get that same index back alright one thing you might not have known about Python I'm not sure of any other languages you can do this in I'm sure there are but I don't think you can in Java or C++ or other languages like that but you can actually use negative indexing so let's like what would that even mean like think about it for a second if you had a negative index in array what what could that possibly mean maybe you could be like indexing through it and then maybe like you start you loop around to the beginning again like once you once you loop too much like almost like like a mod modulus but actually what Python decided to do which I I think is pretty intelligent is actually make it so that you count from the back of the list so if we're in that indexing the positive numbers this would be 0 this would be 1 this would be 2 3 so on and so forth oops but if you use a negative index let's just say negative 1 you would actually be accessing this last one so let's try print this out and as you can see the very last element is printed out if I put negative 2 again the secondtolast element is printed out 8 so actually if I wanted to get the very first element using a negative index then you could actually just put negative 10 because there's 10 elements in this array or even better just put negative you just use the length function you like you guys know that length function if you don't then it just give you the length of any list or string I believe I'm not sure if it works on strings but I think it does so yeah see if you do that then this automatically comes 10 this makes it negative and then we can get the first element that way so you can actually call every element by two different names in Python that's really cool um it's very handy if you just want to get the last element just boom just like slapping negative one you're done it's very nice and easy and clean um another cool thing we can do is uh there's actually gonna be a lot of cool action happening between these two brackets you can do a lot of stuff between these two with like multiple signs and and weird weird little codes but it's very very powerful for doing different kind of reading from arrays and strings so what else you can do is let's stick a colon in here so what the heck does that mean alright so all this means is you can actually put a range of an array in here so that means instead of just putting in like a single element you can actually put a range of elements so let's say if I wanted to just get the first two elements or two yeah the first first 3 so 0 1 2 I would leave nothing at the beginning and then let's say we would end at a limit 3 so it'll go up to 3 but not include it so it'll actually give us this entire thing back instead of just one elements so you can actually you can actually reference parts of the array in chunks and you can specify exactly the chunks you want so let's try to run this and see what happens exactly what I thought would happen 0 1 2 because this will start from the very beginning because we didn't specify anything here I think you put zero the same thing would actually work yeah because it starts from here includes this so this number is inclusive and this number is exclusive so this will print out everything from 0 1 & 2 likewise and put it all the way up to 9 this will go from 0 all the way up to 8 so I would actually get from 0 to 8 here when I run it and yep exactly what happens so that's basically what slicing is in Python Oh very useful if you just want to get like a chunk of it let's say you wanted you had like a name like a name in a string like maybe let's just pop this in here real quick name equals first last just like that go like this and let's say I just want to pick out the first name you can actually find that the the correct index so 0 1 2 3 4 5 and if I put 0 2 5 and you can actually get rid of the 0 because it's the same thing as nothing and I run it first prints out so see how you can get a different substring from that string very cool in Python I always just get rid of this because I guess we don't need it let's go back to this example so also you can also slice into arrays using negative negative elements so you can actually put in like a negative 1 like this and this should be from the very first element to the very last element remember this is exclusive so it's not going to include the 9 let's try that and again the same thing pops out also I believe you can yeah this is one thing almost forgot to do you can put a number at the beginning and leave the last the last part empty so that this will go from element 5 inclusive all the way to the end note though if you put 10 here umm yeah 10 index 10 here you're actually going to exclude it but if you just don't put anything at all you'll actually include the last digit so that's something to keep in mind there what else can we do so I think that's about it when it comes to slicing also another thing you can do is called striding so slicing is very simple use put a you have a chunk you can just get any any range in the array you want one zero up to all of it but you can also do stride so that's actually gonna incorporate two colons alright so what this means is you can actually have a slice here so let's say from zero to two ten right or let's say uh yeah to ten and then what the stride is is how many how big the jumps you want to be so if the stride was one we're just gonna hop one time every time so it's gonna go from zero to one two three four five six etcetera but if you put two you can actually skip so it'll actually jump and skip from zero to two to four to six so we can actually pick out all the even numbers this way let's try this I'll run this and as you can see we get zero two four six eight if we put in three then you'll actually jump in um in strides of three so you get 0 3 6 9 um you wanna get to 9 cuz this is ten let's see oh it did pop up so the 9 did pop up there hold on those are basically what strides do again you can use negative indexes here is in any combination you want you can omit things so if you admit the first one you're gonna start from the very beginning including them this one if you omit this one you're gonna do um include all of them all go up to the end also you could do something like this so this just includes everything this is just everything and the stride of one just includes everything but let's say you put a stride of two then you just get the even numbers or um or you could even actually use negative strides as well I forgot um for a second but I believe if you put a negative stride what would that mean remember the negative index we actually um the negative index you would um start from the end of the array but what about a stride a stride kind of tells you okay jump in a certain direction at a certain jump so a stride of two you would jump in um in leaps of two in strides of two you would keep jumping over and over and over or a stride with three you jump over and over and over and over and stride three leaps of three so a negative one on what makes most sense what the people who designed Python came up with was if it's negative go backward so actually putting a destryed of negative one you'll start from the end of the list and you'll go backwards so let's see how that works let's put um right row let's click run and as you can see the list gets spit out backwards so this is actually a cool little that you can do in pot in Python to reverse any array or string just stick a little little negative one here also if you put a negative two and you hit run then the same thing happens it starts from the N and goes to the beginning of the array but it's going in strides of two hence the only odd numbers here very cool one thing to note with negative Strides is if you have negative strides and you also want to slice you need to make sure that this index here is on the right side of this index here so I can't put like index 0 here and index 5 here because that doesn't make any sense how can I go from index 5 to index 0 oh sorry I have it backwards this way how can I go from index 0 to index 5 going in this direction to the left it doesn't make any sense so you need to make sure that the stride direction if it's positive or negative that the slicing indexes also make sense during the right order so you need to make sure that if it's negative then the the slicing is going to the left and then if the stride is a positive number then the slicing is going to the right so this would not work on this this would work but if we have a negative 2 then we would need to actually change these 2 5 and 0 so that we're going from 5 to 0 and strides of 2 so it would be 5 3 1 and that's exactly what happens so that might have been a little bit confusing um there are very very useful thing once you figure out how to use them just play around with it a little bit I'm kind of rambling on a little bit here but if you just like pop in some numbers with these two colons and really figure out like what happens and try to predict what's coming out the way I did then it'll actually be a really good learning exercise for you so why don't you go in there and I'll do some cool stuff like just play around get some sub strings get some like sub arrays and reverse some things and go in the opposite direction and just have fun with it alright so that's pretty much it when it comes to indexing slicing and striding including negative numbers but now I actually want to do a little example where instead of just having numbers in these slices you can actually use variables so on one little cool thing that I came up with was if we just have a for loop called for I in range how many digits I have ten yeah but let's just put length use a length function because that's more robust you're able to make the program smarter that way because it'll it'll automatically adjust so always use the length function instead of hardcoding numbers try to never hard code numbers in your in your code is just not a good idea um when you are trying to make big programs so length of digits would be end up being 10 so for range in 10 let's try to just print out digits from the beginning to I this this zero is optional but I just put it in there for clarity sake let's run this and before I do though what do you think will print out think about it and I'm gonna run it now and you'll see so you can ignore this this is from that first print statement but this is exactly what prints out here this weird cascading thing here now think about what's happening here we are we have a loop with a with a variable I that goes through the digits here from 0 to 9 and then each time we go through this loop you want to print from the beginning of the list up to that digit so every time this loop goes I is getting a little bit bigger which means this is going from the beginning to somewhere and then beginning to a summer little bit bigger and the beginning to somewhere little bit bigger beginning is somewhere a little bigger and so on and so forth and that's why you get this you start at the beginning and then you go from the beginning to one and then beginning to two and so on and so forth all the way until you get to the end at eight so this is um a little bit advanced of putting putting variables in slices but you can actually do some really really interesting things when you are when you're doing like complicated algorithms and what not putting variables in slices like this what's strides and you could even put like equations in these slices and whatnot like like modulus signs and and weird function calls and stuff and you can put a lot in there and you can actually do some really interesting things when it comes to on grouping grouping together things so let's say one actually kind of advanced example that I came up with but I really want to show you guys it's pretty cool it's let's say I have so I have this list from 0 to 9 here now let's say I want to get every group of 3 possible in this list so if I have this entire list I want to get 0 1 2 I want to get 1 2 3 1 2 3 I want to get 2 3 4 3 4 5 so on and so forth all the way up until a 7 8 9 all right but no further I don't want eaten I don't want just eaten I don't want just 9 I don't want just 0 ok so um you can actually let's let's start by writing a for loop again so for I in range let's just go lengths of digits again let's just start there that's always a good place to start sometimes you have to like subtract 1 or 2 to get rid of some weird offsets but just start by using the length function always and um let's just try to print digits at from I oops from i to i plus 3 so let's think about this before i run it okay for i in range the length of digits so this is this loop is gonna run 10 times because this list is 10 10 elements long then every time this runs we are gonna go from the current index so whatever is it on whatever iteration run so 0 1 2 3 or all up to 9 + 3 so the current index + 3 so what is this defining here this t this is defining a slice in the array okay a slice in the array of size 3 but it's constantly moving because this is I and I plus 3 then we know that it's going to be of length 3 wherever I is so let's just try to run this and see what pop up pops out let's comment this out so we don't the output doesn't get confusing boomboomboom run so as we can see the it almost has the correct functionality that we want 0 1 2 1 2 3 2 3 4 3 4 5 because you can see like these the first elements of all these of all this output these are actually the iterations of the for loop and then we just added three to the to the end of the the slice so that's what we get the second two following numbers after that so that's that's how we do that but what about this thing here there's this 8 9 and 9 but I want to get rid of that because those aren't groups of 3 so let's think about that what could you do to get rid of those well you could just subtract 2 iterations from the for loop right you could just chop it off just by putting a minus 2 in here and a little cheeky 2 boom and you just get rid of those two and just ignore them completely but that's not the best idea usually you don't want negative just the same way I didn't want to put 10 here and I use length on digits length of digits instead you also don't want to do a minus 2 or a plus 3 here even just bear with me for a second well it might make a little more sense once you see it so you don't want this negative 2 or plus 3 but then how do you get rid of that well let's just say I said I wanted a window size right window size of 3 so let's do that now let's get rid of this so suddenly we can get rid of that 3 so this should run exactly the same as before boom yes it runs exactly and does what we want us to do and we actually specified the window size here so that's really cool but we still have this minus 2 here so what what is what does that mean how do we get rid of that well let's think about what this 2 is really doing this two is subtracting off 2 iterations of loop because there is a trailing some trailing things like once these iterations over here happen there's not there's not enough digits afterwards to get an entire group of 3 so um what the key distinction I want to make here is that 2 is one digit less than 3 all right because let's say I put okay let's get rid of this and I'll just show you guys if the window size was actually five so I know now I can change so you see this is actually another good reason why you want to have variables like this because you can just change one variable see I change this one variable to five and then now I can actually change the window size of five so I can get these five and then these five and then these five and so on and so forth and chunks or even I can just go that entire array I can get all 10 10 elements at once but let's just go with five and run this and see what happens so you can see that it's running as expected we're getting groups of 5 from 0 to 4 and then 1 to 5 and 2 to 6 and so on but we have all this junk at the end again but do you notice how we actually don't only have two iterations there's actually 4 iterations so remember we had 3 iterations and we had to get rid of 2 iterations and now there's four extra iterations so 3 & 2 the difference is 1 and then now there's 4 iteration or the window size was 5 and we had to get rid of 4 iterations so you see how 5 & 4 their own their own their difference is 1 again so we found the relationship between these two numbers this number always needs to be 1 less than this number in order for this window size thing to work okay does that make sense if it doesn't try to rewatch that whole little section again and think about um the relationship between these two numbers why would this weird ramp thing here get longer as this number gets bigger so if I put in a 6 to put in a 6 this got this ramp got one one longer but put in a 7 this round got even one one longer so we got to get keep getting rid of one more iteration of the for loop at the end every single time once you understand that then it's very simple because all you need to do is so one we need to subtract 6 from here if you need to subtract 6 from here at 6 is 1 less than 7 and what is 7 7 is window size so actually let's just put instead of minus 6 let's go window size but remember it has to be 1 less than window size so minus 1 um there is one exception to the rule every now and then you actually need to have a minus one or a plus one to get rid of like weird offsets and whatnot so it's okay to have minus ones or plus ones in your code but you never ever want like a negative like 400 27.76 or something like that because then it's hard coded in the program and that's not what you want in a robust um wellrounded program so minus one is okay but when we run this let's click run and see what happens as you can see what happened here oops yeah as you can see we get all the other groups of seven actually we don't what is what is happening here did I make a mistake alright guys thanks for standing by I had to take a couple minutes to figure that out this kind of stuff happens all the time like even when I even when you plant stuff out so uh just just be aware that even people who have been programming for like seven years like me they still screw up I was actually a very simple bug here what I realized was yes it does this number does need to be one more than this number but earlier I did not have the parentheses here so when I was doing this he was actually subtracting um the I think of subtracting numbers incorrectly but once I I grouped it together here by putting these parentheses in I feel like I shouldn't change anything but for some reason that is fixed at issue so if I wanted to get groups of windows of size seven now this will actually become six within this parentheses so I can do this and as you can see now we get all four instead of what we had before I believe this is what we had and this was giving us errors but yeah I guess sometimes it's it's always safe safer to use parentheses more parentheses and less parentheses to UM be very very clear about your order of operations because that's a very easy mistake to make in math and then um those same those same same easy mistakes translate over to programming very very smoothly which is actually a kind of a negative thing it's also a positive thing if you know how to work out math problems just just be aware of that any any math that doesn't work in real life won't work on a computer all right that's just something note but yeah that's the last kind of advanced example I wanted to give you guys with with slicing so here we're actually using a dynamic slicing scheme here to actually change this slice and a for loop over and over again so we're actually playing around with some numbers and then all we have to do is change one number up here one little configuration thing and we can actually get on any size window we want so this is every side every window of size one every window of size two like you guys get it so on and so forth so yeah guys um that is the end of this video I might have drone on for a little bit I'm trying to get better at that I noticed I dragged on a little bit but um I like to be more of your boast and less verbose because I think it's better to be clear and then just watch the video on like two times speed because that's kind of what I learned in my um my own personal schooling I'm currently in graduate school but yeah stay tuned thanks for watching guys and I'll see you next time I'm gonna be releasing a bunch of new YouTube videos in these next few weeks I'm leading up to this a lot of cool content for you guys but actually all this stuff is actually lead up to this new product we're going to be launching called how to automate stuff with Python yes how to automate stuff with Python it is exactly what it sounds like pretty much you're gonna be automating a lot of stuff on your computer with Python it's actually pretty cool but yeah I just want to mention that in there um stay tuned I'm here more about it I'll be talking about it more in the future but definitely a very very cool course we're gonna go going over a lot of stuff like automation um cool little like like automating mouse clicks and keyboard presses on your computer while you're not even there stuff like that like really really cool stuff um but definitely stay tuned and that is all for this video guys thank you for watching and I will see you next time good bye
