With timestamps:

00:00 - hey what's up you guys so welcome to the
00:02 - postman crash course what post been
00:04 - super useful it's one of the greatest
00:06 - tools you can use if you're working with
00:07 - api's at all and if you want to be
00:09 - serious in the software industry you
00:10 - need to know what api's are and how to
00:12 - use them so this tool will save you so
00:14 - much time all right we're gonna go over
00:16 - all the basics of postman we're gonna be
00:18 - going over how to use it all the
00:20 - functionality the whole UI like what its
00:22 - uses are and do a few examples and go
00:24 - through pretty much everything is it's
00:25 - pretty exhaustive but not everything but
00:27 - I mean it'll it'll be more than enough
00:28 - to get you started so we're gonna be
00:30 - going over how to create mock servers
00:32 - how to use variables and how to send
00:35 - requests all different kind of HTTP
00:37 - requests to any any of server or web
00:40 - server you can think of any website
00:41 - getting all your responses back all the
00:43 - analytics of it all of the data and all
00:46 - the statistics that you get from it this
00:48 - is a bunch of stuff it might seem kind
00:49 - of wordy now but when we get into it
00:51 - you'll see and it'll be pretty great so
00:53 - let's get started hey guys so welcome to
00:57 - the video before we get started though
00:58 - Before we jump into it I want to tell
01:00 - you that we have an epic free three-part
01:02 - master class it teaches you how to go
01:03 - from being a complete beginner and
01:06 - programming not knowing anything if
01:07 - you've never written a single line of
01:08 - code and the steps you can take to
01:11 - become a six-figure freelancer or a
01:13 - software developer so if you want to
01:15 - learn how to go from there to there
01:16 - click the link in the description down
01:18 - below it should be down there just gonna
01:19 - pop in your email address in your name
01:21 - and we'll send you an email to the login
01:25 - page for that and you can access it
01:27 - completely for free
01:27 - and it ends with a an exclusive webinar
01:31 - if you want to check that out too after
01:32 - the three parts so if I guess it's kind
01:34 - of like a four part masterclass but I
01:36 - definitely check it out alright it'll
01:37 - it's just a lot of free value and just
01:39 - we want to offer that to you so check it
01:41 - out
01:44 - [Music]
01:46 - all right you guys so let's start it
01:49 - with be posting a crash course alright
01:51 - so just a few prerequisites before you
01:54 - get started to understand how to use
01:56 - post pin and everything I'm gonna go
01:58 - over in this crash course you're going
01:59 - to need to know about what api's are
02:02 - about what rest api's are what web
02:04 - frameworks web servers and web clients
02:06 - are and stuff like that a lot of like
02:08 - online coding things and what hTML is
02:10 - and JSON and XML and I'll be familiar
02:13 - with all these terms in order to be able
02:16 - to follow along because you need to
02:18 - understand all this stuff to even use
02:19 - postman to begin with so if you don't
02:21 - know that then go back and learn how to
02:23 - do that first and then come back to this
02:25 - I will be explaining a little bit as we
02:27 - go just to like jog your memory so if
02:29 - you kind of know what those are and I
02:31 - mentioned things and you will be ok and
02:32 - things will come back to memory but if
02:36 - you have no idea what those things are
02:37 - then this crash course is not for you
02:39 - you should probably close out and go
02:40 - learn those things first start with a
02:42 - start with HTML and some other simple
02:45 - web stuff and go up the frameworks and
02:46 - and all that stuff and then you'll be
02:49 - ready for actually testing API stuff Oh
02:53 - an HTTP request and stuff as well that's
02:56 - very important to know that's what API
02:58 - is are based on but besides all those
03:00 - prerequisite stuff let's just get
03:02 - started okay so postman so postman in a
03:05 - sentence postman is a tool that you can
03:08 - use to work with api's all right so it
03:12 - basically allows you to test api's build
03:15 - api's and like create mock api's like
03:17 - servers like mock servers or mock
03:19 - clients and whatever so you can test
03:21 - them so while you're developing let's
03:22 - say you're developing a server or
03:24 - something then you can test it with this
03:27 - tool to make sure everything's working
03:29 - properly and vice versa so if you have a
03:30 - client then you could create a mock
03:32 - server or I mean if you're creating if
03:34 - you're trying to program a server then
03:36 - you can use postman as a mock client by
03:38 - sending requests to it like HTTP
03:40 - requests to it and whatnot but that's
03:43 - just a little overview of what it is
03:44 - let's just get started now so we're
03:46 - gonna want to download it first um you
03:48 - can either use the native app or the
03:50 - Chrome extension but I realized that the
03:53 - Chrome extension is deprecated as a
03:55 - saying right here but yeah let's just go
03:57 - to the web
03:58 - like here we go so this is postman it's
04:00 - just a plication we can use and we're
04:02 - gonna get into it very soon all right
04:04 - use cookies got it and pretty much what
04:07 - you need to do is just download it first
04:08 - okay so click download the app and yep
04:12 - just download it for whatever operating
04:13 - system using I use it for I'm using it
04:15 - from Mac right now and I already
04:17 - downloaded it but yeah so after you
04:19 - download it and you create an account
04:21 - and all that then we can get started
04:23 - with postman okay so go do that first
04:26 - I'm gonna continue on because I already
04:28 - have it downloaded and I'm gonna open up
04:29 - the postman app right now all right so I
04:32 - have a postman over here open it up and
04:34 - get this started loading awesome so it's
04:44 - loaded up perfect let's get this on a
04:47 - separate desktop cool so now I can go
04:50 - between my browser here my chrome and my
04:53 - postman so when you open it up you
04:57 - should probably see something like this
04:58 - or something similar you can just close
05:00 - out of this we're just gonna go straight
05:02 - to the UI I want to show you all the
05:03 - basics first now that we have it
05:05 - downloaded so I just want to go over all
05:06 - the UI and what all the buttons do when
05:08 - everything means and kind of just give
05:10 - you a tour of postman before we get into
05:12 - anything advanced all right so this is
05:13 - kinda like the basics like the basics
05:15 - crash course portion of the entire crash
05:17 - course all right so this is postman we
05:19 - are in postman and like I said it's just
05:21 - a tool that allows us to work with api's
05:23 - we can send requests we can crate mock
05:26 - servers and yada yada here we have all
05:29 - of the different requests we can do so
05:31 - we can basically send any HTTP request
05:35 - I'm here get and post are the two most
05:37 - common ones but of course you can use
05:39 - put and delete and all these other ones
05:41 - that we use occasionally but mainly just
05:44 - get in post alright and then when you
05:47 - are wanting to test an API then you can
05:49 - just use things here so let's just give
05:51 - a simple example all right so let's just
05:52 - say we want to test a this so we just
05:55 - want to get Emma's on comm you hit send
05:58 - then it will it there we go it grabs the
06:02 - the code the HTML code back from when we
06:04 - type in Amazon a common tool browser we
06:06 - get all the HTML code back and we can
06:08 - actually hit preview here and you can
06:09 - actually see that actual web site so
06:11 - my postman is is just a way a tool that
06:15 - gives you a lot of like leverage in
06:16 - different ways to change parameters and
06:19 - whatnot to work with api's and web
06:21 - servers and all this stuff okay we're
06:22 - not gonna be using Amazon the con when
06:23 - you season this because everybody's
06:24 - familiar with the webpage and then they
06:26 - understand how this is working so if we
06:27 - use a get request on the website then
06:29 - boom we get it right back alright but
06:31 - we're not gonna be using this anymore
06:32 - that was just for demonstration purposes
06:33 - so now let's actually use an example and
06:36 - I'll explain what everything is as we go
06:38 - okay so let's just do a get request
06:42 - first okay so let's um I have this cool
06:45 - JSON place all the website right here
06:48 - which allows us to it's a free open API
06:51 - where you can go into it and you get
06:53 - JSON back it's just that's why it's
06:55 - called JSON placeholder but we're gonna
06:56 - be using that right now at home for
06:57 - these basics let's just start that so
07:00 - yeah you can you can choose your type of
07:02 - request here we're just gonna do a get
07:04 - request and then when you hit Send it'll
07:07 - actually send it and get it back just
07:09 - like we did with Amazon so let's do that
07:10 - first and we'll hit send and as you can
07:15 - see we get our JSON back okay so if I
07:19 - actually pop this into chrome as well
07:21 - we would get the same exact thing just
07:23 - like we didn't post me and we just get
07:26 - some JSON back alright so JSON file if
07:28 - you don't know that is then this will
07:29 - make sense but this is JSON data and
07:31 - we're getting all this back alright just
07:33 - like we are in postman but here we have
07:35 - all the different options here to view
07:37 - it so we have pretty which is cool
07:38 - because you can actually collapse the
07:40 - JSON data or if it's XML data or whatnot
07:42 - well you could you can view the raw data
07:44 - which is just a raw string with
07:46 - formatting the preview which is what it
07:48 - would look like in your browser that's
07:49 - why when we went to amazon.com we
07:51 - actually saw the actual thing is they
07:53 - just HTML code because this is what it
07:54 - looked like in your browser and chrome
07:56 - it's auto formatted though but I mean
07:58 - that's just like extra fancy thing that
08:00 - chrome does and most browsers do but
08:02 - it's supposed to look like just like
08:03 - this just a raw string okay and
08:06 - visualize beta this I don't know what
08:08 - that is
08:08 - it's new I haven't checked it out too
08:10 - much but so if we are getting JSON data
08:13 - back then this will automatically go to
08:15 - JSON but of course whenever we are using
08:18 - a get request then we can have all
08:20 - different kinds of data coming back
08:22 - so whether it's XML or HTML just like we
08:25 - did when requesting up a webpage or text
08:29 - in general or whatever also when we are
08:32 - sending a get request then you can
08:34 - actually set your query parameters here
08:36 - so this is your query string like if you
08:38 - want to say like okay parameters like
08:40 - something like user ID oops
08:44 - user ID equals six like if you're gonna
08:46 - have that in the URL when you're calling
08:48 - an API then you can actually see that it
08:51 - auto cottle fills it out first here but
08:53 - likewise we can also do something like
08:56 - this
08:56 - right like hello this is a tight tool
08:59 - okay and it'll auto fill it all out for
09:02 - us and makes it very easy to construct
09:04 - these things so you have to type it from
09:05 - scratch so let's just get rid of that
09:07 - but yeah basically you can write our key
09:09 - value pairs here for any query string
09:12 - parameters and you can also set your
09:15 - headers and your body here okay so body
09:17 - is more important when you're actually
09:17 - doing post requests right but if you
09:21 - want to set your headers like content
09:22 - type or whatnot then you can actually
09:24 - you can actually specify these here okay
09:27 - or anything any other headers that
09:29 - aren't done by default then you can add
09:31 - them in here and it should actually
09:32 - autocomplete I think yup so like if you
09:34 - have like content type or like content
09:36 - length or something or whatever then you
09:38 - can just pop that in and then yeah that
09:42 - won't be auto generate for you you can
09:44 - also toggle these on or off so if it's
09:46 - on then it'll be it'll it'll be used but
09:49 - if it's ticked off then it's as if it
09:50 - wasn't even there to begin with but it's
09:51 - just nice to have it there because this
09:53 - is a tool so you want to make it easy to
09:55 - test api's and all that so let's go back
09:58 - Oh another thing I want to point out is
10:01 - you can actually um save so like I have
10:04 - this get request here right and I have
10:07 - like a bunch of different query
10:08 - parameters and different headers and
10:09 - bodies and everything like set up in a
10:10 - certain way and perhaps I want to keep
10:13 - testing it over and over again and I
10:14 - want to save it then you can actually
10:15 - save it here by using this button okay
10:17 - you can save this request but another
10:20 - thing is that there's a history of
10:22 - everything you actually sent so we sent
10:23 - to get requests already you can see the
10:25 - amazon com1 and then the one that I just
10:27 - sent so these will always be here and
10:29 - you can click on them and it'll actually
10:30 - take you like oh it'll open up another
10:32 - tab for you another tab for you and
10:34 - allow you to look at
10:36 - the requests that you sent okay so
10:38 - that's nice if you want to go back in
10:39 - your history like keeps everything there
10:40 - of course you can clear it all but yeah
10:43 - let's continue Oh another thing I'd
10:46 - mention whenever you are doing a when
10:49 - you send our HTTP requests then it'll
10:51 - get you the status code back here it
10:52 - also tell you how much time it took to
10:54 - do the request with all the stats there
10:56 - you can see the DNS lookup and all that
10:59 - stuff you know what if you actually know
11:00 - what all that means and also the size of
11:02 - the returning file the response file
11:06 - okay and then you can also save
11:07 - responses here but yeah I think you can
11:11 - also when you send you can actually send
11:13 - in downloads instead of just sending the
11:14 - request whenever you get the response
11:16 - you can actually download this entire
11:18 - file separately okay but that's only if
11:21 - one if you only want to download it but
11:23 - I think that is pretty much most of it
11:26 - for the get I think did I go over this
11:28 - headers oh this is the headers that we
11:29 - get back in the response so we'll have
11:32 - the date that the response was sent down
11:34 - the content type of course its
11:35 - application slash JSON and the reason
11:37 - UTF um utf-8 the char set blah blah blah
11:41 - and like all this other stuff I don't
11:42 - know what all of this means but I mean
11:44 - these are all the headers that we got
11:46 - from our JSON data which is very clearly
11:48 - JSON data okay and yeah I think that's
11:52 - pretty much it forget let's for get
11:56 - requests let's now try post requests so
12:00 - I believe in this open API what we can
12:04 - do here is they actually have an open
12:06 - API where you can put posts so now we
12:08 - can test post requests and we can send
12:10 - those out to this to this URL here and
12:13 - actually test post requests now so let's
12:16 - just turn on post request they're real
12:19 - as you can see the other get requests
12:21 - popped up here when I when I call it
12:22 - again but now let's do post okay so if
12:25 - we go into posts of course we have our
12:28 - query parameters and whatnot so let's
12:30 - just try this sending a post out as you
12:33 - can see here they are expecting a user
12:35 - ID or that isn't allowed key key and one
12:39 - of the key value pairs in on this API so
12:42 - let's just pop that into one of the
12:43 - query parameters okay let's just say
12:46 - user ID equals I don't know six or
12:48 - something
12:49 - or let's just put two whatever it
12:51 - doesn't really matter I don't know why
12:51 - I'm deciding changing it but we can put
12:55 - that and you whenever we send a post
12:58 - request then what we get back is
12:59 - actually the ID of the post entry that
13:04 - was just created okay
13:06 - so when we hit sent we're actually going
13:08 - to see that the ID comes back of 101 and
13:11 - you can see the post request pops up
13:13 - here but let's go back here let's go
13:15 - over some of the headers again you can
13:17 - set your headers of what kind of content
13:19 - you want to be putting there or
13:20 - ascending through and any other header
13:22 - few fields that you want and of course
13:24 - when we're doing a post request you
13:26 - actually need to specify what's in the
13:27 - body that's the most important part okay
13:29 - so within the body we can actually send
13:32 - nothing which would I guess do nothing
13:35 - it's just kind of useless maybe useful
13:38 - in some cases but form data of course is
13:40 - what we can do if you just want to send
13:41 - like JSON data up-and-down which is kind
13:43 - of what we're doing here by sending user
13:45 - ideas um user IDs and whatever titles or
13:48 - whatever it has I forget what was there
13:50 - me let me see V add our user IDs or
13:57 - regular IDs or title or body and all
13:59 - this stuff but when we're doing post of
14:02 - course we can send form data we can send
14:05 - form URL encoded data or raw data just
14:09 - straight string just straight string
14:10 - data or even binary data okay so if we
14:12 - wouldn't actually upload images then we
14:14 - could very easily just select an image
14:16 - to post to this here okay if our API
14:21 - allows it if whatever web server we are
14:23 - coding up or using or accessing if we're
14:27 - maybe using yeah yeah if we're coding
14:30 - our own web server and if it allows it
14:33 - that we can send it okay yeah I mean if
14:37 - we were sending a JPEG or something or
14:39 - something like that if we're sending a
14:40 - binary JPEG please like to the JPEG
14:42 - image here or PNG something then we
14:44 - could actually go here and change this
14:46 - it could be like image slash JPEG or
14:50 - whatnot and then that's how we could
14:52 - send a post across with an image and
14:54 - then of course we would have to select
14:55 - the image file here so you could just
14:58 - pick a image from your computer
15:00 - um but yeah all right well I think that
15:08 - pretty much sums up most of the basics
15:10 - here I think I went over pretty much all
15:11 - of the buttons of course he can get the
15:13 - headers again from your post response
15:15 - and test results we'll go over that
15:20 - later maybe and what else did happen I
15:24 - seen collections collections are just
15:26 - collections of different requests pretty
15:29 - much that you can put together you can
15:31 - like create them and just kind of keep
15:33 - them organized if you want or you can
15:35 - just like do test one by one like we
15:36 - were here um this gets a little bit more
15:38 - advanced maybe we'll do that later but I
15:40 - think I've gone over most of the basics
15:42 - here so you guys shouldn't know how to
15:44 - send getting post requests and how to
15:46 - set all of your different parameters and
15:48 - whatnot whether it be quarry string
15:51 - parameters or headers or your body and
15:53 - your body types and all these different
15:54 - things and you should be able to see how
15:55 - like how to see what's coming back and
15:57 - whatnot and it's just very useful if you
16:00 - are working with api's and you're trying
16:01 - to like test if you're like coding up a
16:03 - client's side thing and you want to have
16:06 - a mock server or to like compare if
16:09 - things are working correctly then you
16:10 - can use postman to like create create
16:13 - dummy requests or like mimic some of the
16:15 - requests and see if what's getting
16:17 - coming back is what you're expecting to
16:18 - come back and so forth basically it just
16:21 - allows you to fake servers and fake
16:24 - clients and to make sure it's working
16:26 - correctly just so you can test your API
16:28 - so whether you're building it or testing
16:29 - it or or just using an API but yeah that
16:32 - covers all the basics and I will see you
16:35 - in a few seconds going over whatever we
16:38 - go over next all right you guys should
16:41 - be a few seconds later for you but now I
16:43 - just want to go over really quick about
16:44 - bulk editing query search query string
16:47 - parameters and creating new requests and
16:50 - collections credit collections and
16:52 - saving requests to collections well it's
16:55 - still pretty basic but I just need to go
16:56 - over it a little bit more involved but
16:59 - that's I'm going over it now so let's
17:03 - say let's create or let's change it
17:05 - first let's let's just query amazon.com
17:09 - again I actually I'm gonna use this
17:10 - again
17:11 - amazon.com all right
17:14 - so we can preview it we can see that we
17:17 - have the webpage here and have the HTML
17:19 - code here but let's say we wanted to
17:22 - actually search something on Amazon okay
17:25 - so let's I believe on Amazon if you just
17:27 - put s that's the search URL so now it's
17:30 - getting ready for a search and then we
17:31 - just have to add into the query string
17:34 - parameter here um I believe it's K I
17:37 - don't know why it's called K but we can
17:38 - put anything we want in the value so if
17:40 - as you can see when we're typing it down
17:42 - here it's Auto completing the query
17:43 - string parameter so we're gonna say
17:45 - amazon.com search and the term search
17:47 - term we're gonna search for is iPhone so
17:49 - let's just hit Send and if we click on
17:54 - preview then you should actually see
17:57 - that iPhone was complete up on the arm
17:58 - in the search bar under all departments
18:01 - and I'll be can see a bunch of hyphens
18:04 - pop up there might be like another
18:05 - parameter here for departments like
18:07 - something might actually change what
18:09 - this is instead of like just all the
18:11 - parts you get to go to like technology
18:12 - or something I don't know I guess
18:14 - there's something something there that
18:17 - would make more sense for iPhone but
18:20 - yeah that's that and let's say we maybe
18:23 - have another one so maybe there actually
18:26 - is one I don't think this is actually
18:27 - true but like let's say if we had like
18:29 - Department we could be like all or
18:31 - something okay Department equals all and
18:33 - that could be like this now I want to
18:35 - show you bulk edit so if you go to bulk
18:36 - edit here on the right instead of having
18:39 - this nice interface using key value
18:40 - pairs you can actually click on bulk
18:42 - edit here and see everything you have as
18:44 - just a string and this is useful because
18:46 - you can just go in here and just copy
18:47 - and paste or just copy it and then you
18:49 - can actually go up here and click plus
18:51 - and you can actually type in amazon.com
18:56 - again oops comm / s and then down here
19:01 - go to bulk edit and then just paste this
19:03 - in here and go back and as you can see
19:06 - it's all auto completed so you can like
19:08 - copy request that way you can also just
19:10 - right click up here and duplicate the
19:12 - tabs but that's actually not a true copy
19:15 - sometimes like the names and stuff still
19:17 - get the names will always be the same or
19:19 - something like that so I don't like
19:20 - using that I always just create a on do
19:23 - one from scratch but let's just get rid
19:24 - of this one don't save it let's go
19:26 - back to this request that we had okay so
19:28 - search for iPhones let's turn off the
19:32 - bulk edit mode going back here so we
19:34 - have an iPhone search now let's talk
19:35 - about creating a collection and saving
19:37 - requests to collections all right so
19:40 - once we have a request here we have a
19:42 - get request on Amazon just searching for
19:43 - iPhones then we can click Save over here
19:46 - alright and it brings up this save
19:47 - request little window so in order to
19:51 - save your request you actually need to
19:52 - create a collection um it's kind of just
19:54 - like a folder for a bunch of requests I
19:56 - mentioned that a few minutes ago but
19:58 - let's just click create collections down
20:00 - here and let's just call it Amazon
20:02 - searches alright hit this little orange
20:05 - check sign and now it's selected if I
20:08 - click back on it you can see all your
20:09 - collections here and then this you can't
20:10 - save anymore but when I select Amazon
20:12 - searches I'm in here and now I'm able to
20:14 - save a time on services so the name of
20:16 - this request it's going to be Auto
20:18 - completed to whatever the URL is the
20:21 - query string but I actually just want to
20:23 - make it cleaner and say Amazon search
20:24 - and I'm just gonna say iPhone just like
20:27 - that okay you can put a description if
20:29 - you want but that's optional
20:30 - I just put hello sure why not and now we
20:35 - can just click save to Amazon searches
20:36 - all right so now we save this request
20:38 - you can see the name up here change to
20:40 - Amazon search iPhone and if I want to
20:42 - change the name then I can I find this
20:45 - little down arrow then you can see the
20:46 - description you can also edit the
20:47 - description down here you can even use
20:49 - markdown which is pretty cool
20:51 - save will collapse this back up so
20:54 - that's that and now now that we have our
20:58 - collection made if you I should click on
21:00 - collections over here on the on the left
21:02 - you can see that our Amazon surges
21:03 - collection was made and it says there's
21:05 - one request inside let's just click on
21:06 - it and as you can see there's Amazon
21:07 - search iPhone okay now let's just create
21:12 - a another one okay so let's actually use
21:14 - this well let's go to bulk edit and just
21:16 - copy all this oh not that much I mean
21:18 - you could actually just like type it in
21:20 - yourself but I got a bunch of these
21:21 - different parameters if you wanna copy
21:22 - over it's actually useful turn this off
21:24 - go to this plus sign create another one
21:27 - I'll let's just say it's Amazon calm
21:30 - slash s again go to the bulk edit paste
21:32 - it in
21:33 - go back cool and now I don't I don't
21:35 - want to search for iPhones anymore maybe
21:37 - I want to search for MacBook
21:39 - okay or just MacBook and now let's pop
21:43 - send sending the request waiting for the
21:47 - response down here go down to preview
21:51 - and as you can see now we have our
21:54 - search results for a MacBook and if we
21:55 - scroll down then there's a bunch of mac
21:57 - books available okay cool
21:58 - so now I'm gonna save this to alright
22:00 - and I'm just gonna go Amazon search and
22:06 - it's gonna be MacBook okay and no
22:09 - description this time okay and then we
22:11 - have it selected you can already see our
22:12 - our previous one iPhone was created down
22:14 - here you can see it faded out and we'll
22:17 - just hit save and boom there we go so
22:20 - that's how you save your searches okay
22:22 - so that way you have to keep typing from
22:23 - scratch every time you can close out of
22:25 - both of these so when you open up
22:27 - launchpad I mean on postman and this is
22:30 - oh yeah this is launch pad too you can
22:32 - go here and there's a bunch of other UI
22:34 - stuff but later later now we have our
22:40 - collections here so we have our history
22:42 - of course we can go through um you can
22:43 - delete all this stuff let's just delete
22:44 - these why not
22:45 - delete okay so they're gone forever but
22:48 - if you go to collections then they're
22:49 - still here I mean you can delete these
22:50 - two by hitting these buttons but now we
22:52 - have the ability to see these again so
22:54 - when you click on it they pop up see its
22:56 - italicized though so if I go to other
22:57 - one then they don't stay open but if I
22:59 - want to keep it open
23:00 - and then you just can hit Send and then
23:03 - see it'll it'll on italicize right now
23:06 - after I send it and then now when I
23:08 - select macbook then it just opens opens
23:10 - it up in another tab there we go so we
23:12 - have iPhone and MacBook and you guys get
23:15 - the idea okay
23:17 - well that wraps up creating collections
23:19 - and saving requests and using the bulk
23:21 - edit mode and I will see you guys in a
23:23 - few seconds again to go over whatever we
23:25 - go over next alright you guys so now
23:28 - we're gonna go over variables in postman
23:31 - so variables are exactly what they sound
23:33 - like they allow us to set variables and
23:35 - have those things change wherever those
23:38 - variables are so if you have some
23:39 - variables in this URL here like if you
23:41 - had something like a variable here or
23:43 - whatever slash variable one or something
23:47 - that we could actually set this variable
23:48 - somewhere else and then have it this be
23:51 - filled in with whatever the value of
23:52 - variable one is so there's actually two
23:54 - different ways we can do variables um
23:57 - there are path variables and then
23:59 - traditional we're not traditional path
24:01 - variables and then like real like global
24:03 - variables I'll go over to path variables
24:06 - first cuz it's very simple in straight-4
24:07 - it's like a mini variable pretty much
24:08 - only for paths in the URL and then real
24:13 - variables are like variables that are
24:14 - like within postman that you can set
24:15 - variables like within the entire app so
24:18 - that whenever you change one of the
24:19 - variables then in every single request
24:21 - everywhere then that variable is change
24:25 - or something like that like they're very
24:26 - very powerful but let's go over the path
24:28 - of riyals first which is very simple
24:30 - this will make more sense as we get into
24:31 - it okay so we were using this nice API
24:35 - here let's just click this again send a
24:37 - get request to see what comes back and
24:39 - we get a bunch of stuff it's been a
24:41 - couple days from me so I might already
24:43 - gone over this I'm just kind of half
24:45 - refreshing myself and half reminding you
24:46 - if you're coming back or something but
24:48 - all right so we have this thing we have
24:49 - a bunch of posts here all right and if
24:51 - we could filter by perhaps if we use ID
24:58 - then we could like oops then we could
25:02 - filter it like that and it's send and
25:04 - then just get the one with all the user
25:05 - ID of one or the mean the ID of one and
25:08 - also if we did users then we also get a
25:13 - bunch of stuff here and we can again
25:18 - filter by the ID of one okay send that
25:23 - and boom we have just this one instead
25:28 - of all of them so now I want to point
25:31 - out that we are able to change the path
25:34 - here so users here we can actually
25:36 - change users to posts like we did before
25:39 - and if we hit send again and get the
25:41 - response back then we have a different
25:45 - post here so perhaps we wanted to go
25:47 - through all the posts and users that
25:48 - have this same ID doesn't really make
25:50 - sense logically but I mean this is just
25:51 - for demonstration purposes so as you can
25:53 - see this is the portion that's changing
25:55 - so if we wanted to create a path
25:58 - variable there's a little secret trick
26:00 - here it's kind of hidden and what you
26:02 - actually have to do is um get to the
26:04 - portion where you want to have as a path
26:07 - variable and delete it and then just put
26:09 - a coolant okay and then I'm gonna put
26:11 - path and as you can see if you look
26:14 - right down here like look great in this
26:16 - area when I type when I start typing
26:18 - this thing called path variables
26:19 - magically pops up okay Matt just
26:22 - magically pops up there and that's
26:24 - because we're able to set path variables
26:26 - okay so I'm just going to call this path
26:28 - 1 or path of r1 or whatever cool and
26:34 - down here is where I'm able to actually
26:36 - set users or posts or the value of the
26:40 - path variable so the way this is working
26:42 - is because this is preceded by a colon
26:45 - this is considered a path variable and
26:46 - path 401 so whatever this is is going to
26:48 - be filled in with whatever we type in
26:50 - here so user um this is going to be the
26:54 - same as what we just had oops
26:57 - users sorry there we go so we have a
27:01 - user with the ID of 1 and then same with
27:04 - posts send and it works as expected okay
27:12 - so this might seem a little bit clunky
27:14 - it kind of is I mean right now for this
27:17 - example like you wouldn't need to use it
27:18 - for this one but it's very useful if
27:21 - perhaps you have an API where you're
27:24 - working with you're accessing something
27:26 - like maybe you're accessing YouTube
27:27 - right you're accessing YouTube and you
27:30 - have like you want access like different
27:31 - comments on a video and every comment
27:33 - has an ID okay but you want to iterate
27:35 - through all of them or something like
27:36 - that then you could it could be very
27:39 - simple like um it might be like
27:41 - youtube.com or whatever yeah just
27:45 - pretend this is youtube.com and then you
27:46 - could have like or slash video 1
27:51 - whatever it is slash um comment comments
27:56 - slash and then you could have like that
27:58 - I like the comment ID or something like
28:00 - that ok and then you would put in like
28:02 - ok comment ID and then from there then
28:05 - you could actually like put in the
28:06 - different numbers and send it and then
28:08 - change it and keep iterating and just
28:09 - keep going up and up and up or whatever
28:12 - you wanted to do like it's very useful
28:13 - for that and then of course you can have
28:14 - multiple ones so
28:16 - comment ID and then you could have like
28:18 - whatever else after that
28:19 - like comment ID - etc like you guys get
28:24 - the idea
28:25 - but let's go back to what we had before
28:31 - yeah we don't need this oh and the last
28:34 - thing I want to mention about these is
28:35 - in order for this to work this has to be
28:37 - part of the path path variable okay and
28:40 - you see part in the path up here in
28:41 - front after the domain with all the
28:43 - slashes and stuff it can't be part of
28:44 - the parameters okay so no you cannot if
28:47 - you wanted to go like okay path and then
28:49 - ID if you wanted to go ID here then as
28:53 - you can see it's getting changed here
28:54 - it's not actually popping up as another
28:56 - thing here so remember when I typed in
28:59 - path then imagine we popped up here
29:02 - right if I type another slash and then I
29:04 - typed in here and I typed an ID see how
29:07 - it pops up down here but if I type it in
29:11 - over here outside of the path and after
29:12 - the variables the query string
29:14 - parameters I mean the app yeah the the
29:15 - parameters after the question mark then
29:17 - it won't work okay it won't so we can't
29:20 - do it that way that's the whole point of
29:22 - these down here okay because you already
29:24 - have the parameters pretty much so this
29:26 - is actually two parts of it it's just as
29:28 - part is hidden this is how you change
29:30 - you can use um put variables in this URL
29:32 - on the left side of the question mark
29:35 - and this stuff up here the query
29:36 - parameter is how you use variables on
29:37 - the right side of the question mark okay
29:40 - and that is pretty much um path
29:42 - variables so let's get into variables
29:46 - next alright so now we're getting into
29:51 - true variables like real traditional
29:53 - variables home I recorded this whole
29:56 - segment then I got deleted which is kind
29:57 - of annoying so I'm starting over on
29:58 - that's why this looks as different all
30:00 - of a sudden but pretty much variables
30:02 - true variables allow us to pretty much
30:05 - put anything we want in here anywhere at
30:06 - all and to specify what the variable is
30:09 - so pretty much it is what it sounds like
30:12 - unlike path labels we're limited to only
30:14 - changing the path over here like per per
30:19 - parts of the path or query string
30:21 - parameters we're only able to change
30:22 - like parameters over here variables we
30:24 - can change anything we want and we can
30:26 - basically be a full freedom with it
30:28 - you can create variables at many
30:30 - different levels and postman so like one
30:32 - level is collections so if you myrrh we
30:34 - created this Amazon searches collection
30:35 - then we can actually set variables at
30:38 - that level that's what I'm gonna
30:39 - demonstrate first but you can also
30:40 - create it at the environment level or
30:43 - the global level and just explain what
30:47 - of environment is really quick
30:48 - we're actually will do that later let's
30:50 - just actually this videos can be better
30:51 - because I'm gonna go in a better order
30:52 - but so let's just create one at the
30:55 - collection level first alright so
30:56 - remember we had this collection that had
30:57 - two requests were searching for iPhones
30:59 - let's send that in and you can see the
31:02 - responses already there but we'll just
31:04 - send it again if it will hurry up
31:10 - bear with me guys there we go
31:12 - so iPhones and then also Mac books right
31:15 - I'm not gonna demonstrate this because
31:17 - it's already there it's exactly the same
31:19 - but let's say that in the collection we
31:22 - wanted to set a variable to find some
31:25 - similarity between these two so within
31:27 - these two requests we can tell that this
31:30 - part here amazon.com /s s is a short for
31:32 - search is the same in both so why don't
31:36 - we set that as a variable okay so let's
31:38 - just copy that and hit copy and then go
31:41 - over here to collections hit on this
31:42 - triple dot thing go down to edit and all
31:45 - now that we're in here in this
31:46 - collection there's like a little tab
31:47 - here called variables we go there and
31:48 - now we can specify a variable okay so
31:50 - let's just specify a variable called
31:52 - Amazon all right Amazon and then the
31:56 - value we're gonna give it is amazon.com
31:58 - slash s okay and it tells you the
32:01 - current value as well if it's changing
32:02 - over time but let's just hit update
32:04 - alright and now we can see if we go back
32:07 - here we go back to edit then the
32:10 - variables it should be there this little
32:11 - green dot telling us that there's stuff
32:13 - in there and we have Amazon so now that
32:15 - we have that the way we access a
32:18 - variable in postman is to use double
32:21 - curly braces just like that okay and as
32:23 - you can see it turned red to specify
32:25 - that to show that we're using a variable
32:27 - now and now we can I'll pop in the name
32:31 - of the variable which was just Amazon
32:32 - and this will actually autocomplete to
32:35 - amazon.com slash s as you can see if we
32:37 - hover over it that little um it actually
32:40 - tells you what the via
32:42 - the initial value of the variable was
32:44 - and then what the current one is and
32:45 - then also the scope so these variables
32:48 - only apply to this collection so if you
32:49 - use Amazon and anything within this
32:51 - collection then it'll autocomplete to
32:52 - that but any other collection or outside
32:54 - of it it will not okay so that's that
32:57 - let's hit send to just prove that it's
32:58 - still working I mean you guys can
33:04 - probably take my word for it you can
33:06 - test it yourself but I'm just showing
33:07 - proof reasons there you go that works
33:09 - and then again let's do the same thing
33:11 - but let's just copy and paste it should
33:15 - copy and paste the reason I mean you
33:20 - could you could argue that it this is
33:21 - also the same to the question mark and
33:23 - the K equals the search term in both
33:25 - which is true but I mean I don't think
33:27 - it's very it's not very good practice to
33:29 - just like do that because you don't want
33:30 - to like bridge the gap with the
33:31 - parameter question mark splitter thing
33:34 - here where the parameters start it just
33:35 - doesn't make very much sense like you
33:36 - have like maybe like a separate variable
33:38 - to keep the question mark there and then
33:40 - have like oh like a search term or
33:42 - something okay but let's just test to
33:44 - make sure this works as well get the get
33:47 - request for this one the Mac Book Search
33:50 - and as you can see it works as expected
33:53 - as well okay so this is pretty cool I
33:58 - mean you can have multiple variables of
33:59 - course in the collection and and whatnot
34:03 - but also there's a way you can slit
34:05 - global variables environment variables
34:06 - let's get into that now I'll show you
34:08 - global variables wifey let me explain
34:10 - environments first so we're actually
34:11 - gonna get into environments next right
34:13 - after this um in depth and how to create
34:15 - them and stuff but I'm just gonna
34:15 - explain what they are really quick so if
34:17 - we go up here this kind of like where
34:18 - your environments are this little
34:19 - rectangle here it says you can cite your
34:21 - environment there's no farm mines
34:22 - created we're gonna create one later but
34:23 - if you click on this little eye thing
34:24 - and then it says environment here and
34:27 - Global's okay so these are two other
34:29 - levels where you can create variables so
34:30 - we just created at the collection level
34:31 - which is like the lowest level or one of
34:34 - the lower levels and then now we're
34:36 - environment so an environment is just a
34:38 - set of variables that allow you to
34:39 - switch the context of your requests so
34:41 - that's pretty cool because we can set a
34:43 - bunch of variables with an environment
34:45 - and then whenever we were in that
34:46 - environment automatically everything um
34:49 - has those variables applied which is
34:52 - very cool so
34:53 - and then if variables of course just
34:56 - applies to all environments okay so this
34:58 - is like overarching no matter what and
34:59 - then environment so but we can switch
35:01 - our environment and pick one - how like
35:02 - a set of variables set so this is pretty
35:04 - cool
35:04 - like one example I just thought of is
35:07 - let's say you know how we're doing
35:09 - Amazon searches here
35:10 - maybe we have a we also want to search a
35:16 - bay or something okay and there have
35:17 - like two different collections or I mean
35:20 - yeah we're what two different sets of
35:22 - does happy clash there's two different
35:23 - sets of requests we have to do
35:24 - environments maybe we wanted to have
35:27 - like one Amazon search so or actually
35:32 - just like um I think I better explain it
35:34 - is if we wanted to have two environments
35:36 - like one Amazon and one eBay okay then
35:39 - we could have our request to be even
35:42 - simpler so instead of so this being
35:44 - amazon.com right we could just have it
35:46 - be like website okay or like shopping
35:52 - website or something like that okay and
35:53 - then have this as an environment
35:56 - variable and then whenever this changes
35:59 - I mean whatever we changed environments
36:02 - then like in the Amazon environment in
36:03 - the Amazon environment then the shopping
36:05 - website variable would be amazon.com and
36:07 - then the eBay environment this variable
36:10 - would actually change to something else
36:12 - so that these requests are like useful
36:14 - depending on are still useful depending
36:16 - on which environment we are so like
36:17 - let's say we want to also check a Bay
36:18 - for like Mac books and iPhones this is K
36:21 - for the search room for Amazon but it
36:23 - might be different for eBay but we're
36:25 - using variables you could just say okay
36:26 - search term you know something like that
36:29 - and but I mean this is always gonna be
36:31 - the same question mark and then equals
36:33 - always gonna be the same but this gives
36:34 - us a power here because now if we're in
36:36 - the Amazon environment we can just say
36:37 - shopping website is Amazon the comp
36:39 - search term is K I'll mean slash s2
36:42 - right we need / s oops / s for Amazon
36:47 - but we could keep that we could include
36:48 - that in something or people like search
36:50 - whatever but the idea is that yeah you
36:54 - could you could use this same request
36:55 - for both Amazon and eBay to search for
36:58 - iPhones and Mac books just by hot
37:00 - swapping the environment if we had the
37:01 - environment set up correctly so that's
37:03 - pretty cool okay because yeah just if
37:06 - you guys still aren't
37:07 - we following then it might be like
37:09 - amazon.com / s and then search term
37:14 - equals iPhone but eBay might be like
37:17 - ebay.com / search term equals iPhone so
37:25 - the term here but it says K here and
37:29 - then um this will be / s and then it
37:32 - says s here but it says search here or
37:33 - something like that this isn't probably
37:35 - actually right but I mean that's just
37:36 - the idea of it okay so that is that
37:40 - let's put this back to Amazon alright
37:43 - because it's complaining that is an
37:45 - unresolved variable there we go and then
37:48 - make this okay and send it again last
37:51 - thing I want to talk about Oh
37:56 - Amazon typos bear see and that's
37:58 - actually a very good point um I was just
38:01 - about to explain that the issue with
38:03 - variables though is whenever you have a
38:05 - bunch of variables here suppose you have
38:06 - like five ten whatever variables in your
38:08 - query request string here then you can't
38:12 - actually see what's being sent okay
38:13 - because the variable is hiding what is
38:15 - here you don't have to keep opening like
38:17 - okay if you had like a collection
38:18 - variable and an environment variable and
38:19 - then a global variable or global
38:21 - variable is real quick I forgot to
38:22 - mention that let's go to global
38:23 - variables if you click on this little
38:25 - setting sign up here on the top right
38:26 - okay then you can go down here to
38:28 - Global's and you can actually set global
38:31 - variables so this is like things that
38:33 - make sense to be global so it could be
38:34 - like my name value is gonna be air in
38:37 - okay and then like there and you just
38:40 - hit save and then when you hit save it
38:42 - just automatically saves it blue global
38:44 - as you can see it's still there my name
38:45 - ahran and that pretty much just applies
38:47 - to everything every environment
38:49 - everything at all I can use this
38:50 - anywhere I want if I have if I type in
38:52 - my name it's just gonna autocomplete the
38:54 - arrant no matter what okay very simple
38:56 - and you can delete them by clicking on
38:57 - the X here that's global variables very
39:00 - straightforward but getting back to what
39:01 - I was saying but sometimes if you're
39:03 - trying to troubleshoot with variables
39:06 - and whatnot then it's very easy to make
39:07 - mistakes because you might have a bunch
39:08 - of variables and you can't actually see
39:09 - what's actually being sent I'm like me I
39:12 - just had a typo right but I might have
39:13 - not known that be like why is my request
39:14 - working what the heck oh this is so
39:16 - annoying
39:16 - I mean first all you can hover over it
39:20 - which is good because
39:21 - tell you it's an unresolved variable but
39:24 - also if you just want to see like the
39:26 - exact raw static request that you're
39:27 - getting on the response you're getting
39:29 - then you can use something called the
39:30 - postman console which is like a
39:31 - no-frills version of everything sending
39:33 - the requests and responses so we have
39:35 - our cool thing here with all the
39:36 - variables but if you go to the bottom
39:38 - left here the little thing a little icon
39:39 - when I hover it says postman console
39:41 - let's click on it and it'll open up a
39:42 - new window and pretty much what this
39:46 - does is it just shows us all of our
39:50 - quests so let's go back to postman and
39:51 - I'm using this variable here I'm
39:52 - searching for Mac books let's hit Send
39:54 - let's go back to this and as you can see
39:57 - now this little get request just popped
39:59 - up okay get amazon.com / s see how it
40:03 - auto fills out the variable for us and
40:05 - then it says search I mean then K equals
40:07 - Mac Book we can collapse it and then we
40:10 - can see the request headers everything
40:11 - in here absolutely everything the
40:12 - response headers and the whole response
40:14 - body but we can't see it because it
40:16 - needs to be larger anything larger than
40:17 - one megabyte can't be shown but that's
40:19 - okay because we can just go down here to
40:21 - raw or pretty and get the response
40:23 - string there if we want okay but that's
40:26 - just a nice little thing to allow us to
40:28 - troubleshoot if we're having issues with
40:30 - variables or using variables and we
40:31 - can't figure something out and you need
40:32 - to really like see at the low level
40:33 - exactly what's being sent and received
40:35 - um then we can go here to post on
40:38 - console okay if you don't this little
40:39 - icon down here on the left then you can
40:40 - go to view show postman console or use
40:43 - your little shortcut here um it might be
40:44 - different on Windows but yeah just
40:45 - looking like view or something or or or
40:48 - google it you can find the console Oh or
40:50 - whatever version of postmates using but
40:53 - that pretty much wraps up variables for
40:56 - you guys we're gonna get into
40:57 - environments next a little bit involved
40:59 - actually creating environments in blah
41:01 - blah blah and setting variables within
41:02 - dos all right you guys so now let's go
41:05 - over environment okay so I said earlier
41:08 - environment is just a set of variables
41:10 - and that's exactly what it is like
41:12 - literally it's just a set of key value
41:14 - pairs that we can turn on and have it
41:16 - applied to something to whatever
41:19 - right the I'm actually gonna do the
41:20 - example that I did the Amazon eBay we're
41:22 - actually gonna do it I mean we're gonna
41:23 - go through with it and um create a
41:26 - environment for Amazon and create Amazon
41:28 - I'm an environment for eBay and then be
41:30 - able to hots off between those two
41:32 - collection environments to run the same
41:34 - amount of
41:35 - requests the same series of quests the
41:37 - same collection of requests to search
41:40 - both websites based on the environment
41:41 - so on before we get into the environment
41:43 - though really quick let's go to a
41:45 - collection here I mean collections again
41:47 - I'm on my Amazon searches and then if I
41:49 - click this little arrow and and click
41:50 - run then I can actually run the entire
41:53 - collection okay which is just gonna run
41:56 - each of these one by one
41:57 - alright we have a bunch of different
42:00 - settings here I'm not gonna go over this
42:01 - right now let's just click run Amazon
42:03 - search collection and it's running it
42:05 - says little progress bar here 50%
42:07 - running one iteration no environment
42:10 - that's uh
42:11 - note that this is no environment here
42:13 - very important we're getting our
42:16 - responses back and it's almost done
42:20 - we're taking a little bit there we go
42:24 - and it's done so get all our results
42:27 - back run summary yada yada it's not
42:31 - we're not going over this right now but
42:33 - I just want to show you that you can run
42:34 - everything in a in a collection all the
42:36 - requests in a collection this is no
42:37 - environment so what we're actually going
42:38 - to do is we're going to create a
42:39 - collection of searches and then create
42:42 - different environments for depending on
42:43 - which environment we're running those
42:44 - searches in in our case it'll be Amazon
42:46 - eBay and then we can actually hot-swap
42:48 - those environments in and run the same
42:50 - requests with those different
42:51 - environments okay which is really cool
42:53 - because then we can create environments
42:54 - for maybe Google um shopping or any
42:58 - other searching shopping websites that
43:01 - all might exist so yeah let's let's
43:05 - start with just duplicating oops let's
43:09 - start with duplicating in this
43:10 - collection I don't want to get rid of it
43:12 - that's why so just go to duplicate cool
43:14 - here it is
43:15 - and now let's close both of these don't
43:19 - save and don't save whatever did it save
43:25 - those variables no it didn't that's cool
43:27 - though alright so let's go into here and
43:29 - now let's just change the name of this
43:31 - um to shopping website search cool
43:43 - and then oops actually searches okay
43:50 - cool
43:50 - and then here it'll just be we rename
43:54 - this to just iPhone
43:56 - so just iPhone this one's going to be
44:00 - just MacBook and then of course we can
44:03 - add more that we want whenever we want
44:05 - but we're just gonna do this and uh okay
44:09 - let's get started so um I think we
44:17 - should create the actually let's do this
44:20 - first let's just oh now I think we
44:24 - should create the new armor first let's
44:26 - go up here at the top left you can click
44:28 - this button and there's little window
44:29 - pops up environment we can click this or
44:31 - you can just click this little drop down
44:32 - menu and click environment here which is
44:35 - what we're gonna do so now the
44:38 - environment is just going to be Amazon
44:40 - Amazon okay and then for variables we
44:44 - can set all the variables one for this
44:45 - environment so what we're going to set
44:48 - is going to be I believe shop being
44:58 - website is think about I use before and
45:00 - then for us it'll just be Amazon calm
45:03 - cool and then also we're going to use
45:08 - search
45:09 - oh sorry actually don't need these in
45:12 - here silly me
45:15 - and then also we need search endpoint
45:23 - yep search endpoint and that will be
45:27 - just slash s and I guess we can put WWE
45:34 - don't need that screw it like that and
45:37 - then also search term and that will be K
45:48 - alright so as you can see we have
45:51 - amazon.com slash s and then we're gonna
45:53 - our parameters and it's going to be K
45:55 - and
45:56 - equals whatever it is and but then we
45:58 - have these nice variables here okay
45:59 - shopping website search endpoint and
46:03 - search term okay so let's just add all
46:05 - these all done here's our environment
46:09 - with the three things in there and now
46:11 - let's go back to here let's go to here
46:15 - and instead of Amazon we're going to use
46:19 - shopping website okay and then instead
46:23 - of search term I mean we're going to use
46:28 - search endpoint all right and then a set
46:31 - of K we're going to use search term all
46:37 - right and um yeah then iPhone stays
46:44 - because its host be iPhone so that is it
46:47 - let's send this it's probably not gonna
46:50 - work because we're not in the we don't
46:52 - have the environment set for it okay for
46:53 - this request which is okay but let's go
47:00 - and do the same thing for macbook so
47:06 - actually let's delete this one
47:08 - delete macbook and then just duplicate
47:11 - iphone duplicate and in here we will
47:17 - just rename this to macbook cool and
47:20 - then also we're going to just change
47:23 - this to macbook and that's pretty much
47:27 - it okay it's not gonna work again it's
47:30 - broken
47:35 - it didn't copy all this over
47:42 - all right copy that in just like that
47:50 - okay well I'd save this one I'd save on
47:56 - this one maybe that's why I didn't I'll
47:57 - duplicate correctly because I didn't
47:59 - save it alright so now that we have
48:03 - these two these two searches this is
48:05 - going to search for iPhones depending on
48:07 - any websites we have the website and
48:08 - then whatever search think we have to
48:10 - add on to it and then also the term that
48:13 - is required to search for an item on
48:16 - that website and we have the same thing
48:18 - for both which is cool but now now that
48:20 - we have this let's actually this
48:21 - collapse this let's actually set up an
48:23 - environment now that will arm well we
48:26 - already have the Amazon one set up so
48:28 - let's just run that okay so let's go to
48:29 - shopping website searches let's go to
48:31 - run okay and hopefully I typed in all of
48:34 - these variables correctly there's no
48:37 - typos let's go down to here so as you
48:42 - can see we have two searches to request
48:44 - your iPhone and MacBook with those
48:45 - variables in place and then if we just
48:47 - go down to environment and we select
48:49 - Amazon the one we just created um
48:50 - earlier and one iterations no delay
48:54 - you can set delays like between the
48:57 - searches I mean through the iterations
48:59 - like if you want to run on everything
49:01 - twice then you just put two iterations
49:03 - and then you could put like delays and
49:04 - whatnot but yeah let's just go there the
49:07 - main point was just environment you want
49:08 - to show you guys this and then when we
49:10 - run it you can actually see that the
49:15 - request that's actually being sent is
49:17 - amazon.com /s query parameter K equals
49:21 - iPhone okay and same thing
49:25 - amazon.com / s query search term equals
49:30 - Mac Book okay so everything's going
49:32 - correctly it's just a bit slow sorry
49:35 - this computer is not that powerful I
49:38 - should probably use the other one but
49:39 - it's not so bad alright cool so they
49:43 - both work correctly we got the green
49:46 - checkmarks and that was wearing the
49:50 - collection in with the Amazon
49:51 - environment so now let's create in ebay
49:53 - environment
49:54 - then we can see how we can use two
49:56 - different vironment for the same
49:57 - collection and run this collection over
49:59 - and over again depending on the
50:00 - environment we choose okay so let's go
50:02 - to here so new environment and actually
50:09 - I think if we just go to Amazon I think
50:11 - we can duplicate it is this duplicate or
50:14 - can we duplicate there we go duplicate
50:17 - perfect that makes it nice and easy it's
50:21 - not just going to here and instead of
50:22 - this we're gonna say eBay alright and
50:25 - then now now that we have all the same
50:27 - variables here now now I can't make any
50:29 - typos perfect we can actually change it
50:32 - so instead of amazon.com now we're going
50:36 - to have a bay comm of course all right
50:42 - update oops
50:52 - you better calm and then the search end
50:58 - point I believe for eBay I looked it up
50:59 - earlier the search end point is a little
51:02 - bit weird it's this ok it's not just /s
51:06 - like Amazon it's actually this alright
51:11 - and let's just pop those in there like
51:13 - that update and then last lastly the
51:18 - search term is also kind of funky
51:20 - it's ampersand underscore and kW
51:25 - whatever that means instead of just K
51:27 - but the point is that we're gonna put
51:31 - these in here like this update alright
51:34 - so now we have Amazon and eBay let's
51:37 - close out of here and now we have our
51:41 - commands here now if we go to this
51:44 - collection and we hit run and this time
51:53 - we can select eBay or Amazon and then
51:56 - run the file or run the collection then
52:01 - we can see that we are getting ebay.com
52:04 - / SC h / HTML and that one too and you
52:16 - can see that they both passed and it was
52:19 - it was filled out correctly because of
52:21 - the environment use but we were actually
52:22 - ran the same exact collection it's just
52:24 - with different environments okay
52:26 - so that's pretty simple like literally
52:27 - all environment is just a bunch of key
52:29 - value pairs let's go here again
52:30 - environment and you can just set them
52:33 - all and then you have a bunch of
52:35 - different vitamins and then you can you
52:36 - can like select these environments like
52:37 - if we're ho here in Amazon okay if you
52:40 - have this selected here well let's do a
52:43 - okay if we were in eBay and then um then
52:45 - we sent it let me go to preview then we
52:53 - can actually see that there was i phone
52:55 - searches in ebay here okay because we
52:58 - have it selected and same with macbook
53:01 - it is gonna behave the same exact way
53:08 - and there we go oh and I realized I
53:13 - didn't actually show swapping so really
53:14 - quick we had the eBay MacBook search
53:16 - here let's just run this again so
53:19 - running fresh and then all we need to do
53:24 - we see we have our macbook our macbook
53:29 - search results on ebay all we need to do
53:31 - is just hot swap to amazon the amazon
53:33 - environment and then running it again
53:35 - the same exact request we're just in a
53:37 - different environment and it'll load
53:45 - suddenly we are on amazon searching for
53:47 - macbook as well okay so that's the power
53:49 - of environments now we can you could add
53:52 - on like different technologies you could
53:54 - change to like oh technology website
53:55 - searches whatever and then have like
53:58 - iphones MacBooks i don't know i watches
54:02 - whatever Apple watches any anything else
54:05 - you want but yeah that's environment so
54:08 - you guys hey you guys so now we're gonna
54:12 - go over writing scripts and postman I've
54:16 - specifically pre request pre pre request
54:20 - scripts it's hard to say as you can see
54:23 - over here that I'm clicking on and I'm
54:26 - also tests you can write tests the
54:28 - difference between these two is we can
54:30 - both of them are scripting pretty much
54:31 - but pre request scripts will run before
54:34 - it runs the request and then tests run
54:36 - the tests both the response comes back
54:40 - so it's kind of like okay where we can
54:41 - edit the request here by um running
54:43 - scripts and then when the response comes
54:44 - back then we can run tests on the
54:45 - response to make sure um things are
54:48 - coming back as expected but right now
54:50 - I'm gonna go over just pre request
54:51 - scripts first um you can have this in
54:53 - many different levels you can write
54:54 - these at the collection level so it
54:55 - applies to like everything in a
54:57 - collection when you run a collection
54:58 - it'll run this script before every
54:59 - collection and every request and
55:02 - likewise with scripts I mean I'm like
55:04 - rise with tests that it'll it'll apply
55:07 - to all of the the entire collection that
55:12 - as you can see here I click on edit
55:14 - collection and there's also pre request
55:15 - scripts and eight
55:16 - um option here for collection so you can
55:20 - write it at the request level like I am
55:22 - right now per request or you can write
55:23 - the collection level and I believe you
55:25 - can even write it like other levels but
55:29 - we will just be focusing on this because
55:32 - it like if you understand one then you
55:33 - can apply it to all the different levels
55:35 - and it works just fine all right so
55:39 - let's let's go back to I'm in this
55:42 - collection right now with the
55:44 - environment we have the environment of
55:46 - Amazon and then we're running the the
55:48 - iPhone search term and let's just say I
55:53 - wanted to change some variables that's a
55:57 - very common thing to do in the strip's
55:58 - change some variables before we run the
56:00 - request okay so let's say we have like
56:02 - okay we have this whole thing here and
56:04 - we're searching for iPhones well I want
56:05 - to show you how maybe we could change
56:07 - that so like I mean obviously we can
56:09 - just go to the parameters and change
56:10 - this iPhone to Apple watch or something
56:14 - right manually right here but maybe we
56:15 - didn't want to do that maybe we want to
56:17 - like test it like on a different
56:22 - parameter or something like oh if if
56:24 - iPhone has no results blah blah blah or
56:27 - something or iPhone something and
56:29 - anything then you can just change it
56:31 - like on some parameter like basically
56:32 - you can you have full flexibility
56:33 - because you're just coding out here but
56:36 - I'm just gonna show you how you can get
56:37 - variables and set variables which is the
56:38 - most common thing you would do most
56:40 - basic thing you would do in pre request
56:42 - scripting okay so if you if we go to
56:48 - this upper end thing on the environments
56:50 - and then I click on Global's you
56:51 - remember that I set a global variable
56:53 - called my name and set it to my name
56:55 - Erin you know the current value is
56:56 - currently airing and this is all we're
56:58 - going to need I'm just gonna use this
56:59 - use this as demonstration purposes to
57:01 - show you how to do this so um we are in
57:03 - a pre request script for this request so
57:07 - what I want to draw your attention to is
57:10 - here on the right there are something
57:12 - called snippets a bunch of snippets here
57:14 - and pretty much what these do is they
57:15 - just allow us to it writes code for us
57:19 - automatically very easily so that we
57:21 - don't have to like code it all from
57:22 - scratch so as you can see we can get an
57:25 - environment variable we can get a global
57:26 - variable we can get a variable you can
57:29 - set all these variables we can
57:30 - clearing variables on all the stuff we
57:32 - can even send a request we can send a
57:34 - request within the script before we send
57:36 - this request and stuff like that as you
57:40 - can see like well it's going to this URL
57:42 - blah blah blah and then like just
57:44 - printing the stuff out to the console as
57:46 - when I clicked on it you saw that it
57:48 - auto complete which is pretty cool but
57:49 - we're just gonna use one just to show
57:50 - you you guys you can explore all of them
57:52 - yourself if you want but in this priam
57:53 - request script I'm just going to get a
57:55 - global variable okay
57:57 - well actually first let's comment that
57:59 - out this is a node GS I believe if I'm
58:02 - not mistaken so you probably need to
58:04 - know that to make you submit but not
58:06 - really because you can just use these
58:07 - snippets and kind of get it done and if
58:09 - you're not a program in general then you
58:10 - can kind of figure it out but let's just
58:12 - do console dot log first okay and let's
58:20 - just go hello world okay
58:21 - just to show you how this script will
58:24 - work we have this here and let me open
58:27 - my let me open a fresh postman console
58:37 - there we go and it's going and now it's
58:40 - empty but let's run this request okay go
58:44 - back here and as you can see hello world
58:46 - popped up in the console alright and
58:47 - before the request was sent you see how
58:50 - that works
58:51 - hello world was printed and then the get
58:54 - request was sent okay and then if we go
58:56 - back to postman we can see that yeah we
58:58 - look for iPhones and I was on cool now
59:01 - now um that we know how to print we
59:03 - printed hello world now I want to get I
59:07 - actually let me delete this if you guys
59:09 - forgot I want to get a global variable
59:11 - so I just click on this snippet and boom
59:13 - that's how I get a global variable
59:14 - remember I had the global variable of my
59:16 - name so it's this variable key every
59:18 - variable is a key value pair so what is
59:20 - the key of that variable well it was
59:22 - just my name like that okay now you can
59:25 - even see it autocompletes for you with
59:28 - the initial current and scope tells you
59:30 - global and then you just say my name and
59:31 - then we can actually print this out as
59:36 - well if we needed to okay
59:38 - so let's run this again go back to the
59:42 - console as you can see hello world
59:43 - printed out
59:44 - as normal but also Aaron printed out
59:46 - which is the global variable my name
59:48 - okay and then we sent the request
59:51 - because this is a pre request script so
59:54 - again we can do all these cool things
59:55 - you can also like like set variables
60:02 - within here cuz of course you can code
60:04 - you have full control over everything
60:06 - and go like this and then have variables
60:12 - in here and then you could like like
60:14 - check can be like if if my name equals
60:18 - Aron yada yada you know stuff like that
60:22 - or whatever however you want to type it
60:25 - all pretty much you can do anything you
60:26 - want in here I'm just showing you the
60:28 - the basics and then you're free to
60:30 - problem solved as you wish so that's how
60:32 - you can like set variables and whatnot
60:34 - and print them out in pre scripts um one
60:37 - more snippet I want to show you is
60:40 - actually setting so let's just set a
60:41 - global variable and now it says they're
60:43 - asking for the variable key so this is
60:44 - gonna be my name okay and the variable
60:47 - value I want to put it to my last name
60:49 - which is just Bernath alright so this is
60:53 - going to set so we have we're just gonna
60:56 - print hello world and then we're going
60:58 - to get my name which is gonna be Erin
60:59 - it's gonna print out and then actually
61:02 - let's close this so that doesn't get
61:03 - confusing let's open up a fresh one this
61:07 - is irrelevant I'm just showing you how
61:08 - to how to save a variable I'm going to
61:10 - delete that and then then we're gonna
61:12 - set it and then we're gonna do it and
61:14 - then we're gonna print it again alright
61:17 - just like that so right now the global
61:22 - variable is iron right there as you can
61:24 - see and the postman console is empty and
61:29 - let's hit Send on this get request wait
61:32 - for things that come in as you can see
61:34 - hello world popped up okay Erin and then
61:37 - Erin popped up because we printed it out
61:39 - and then we set the my name Google
61:41 - variable to Bernath and then printed the
61:43 - burneth variable the my name variable
61:44 - again which is verrat my last name and
61:46 - then it sent the get request okay and
61:48 - actually if we go up here to global
61:50 - variables we can see that the the value
61:53 - of the global variable is actually
61:54 - changed okay so that is pretty
61:57 - what you can do in pre request scripts I
61:59 - mean you're able to basically modify all
62:01 - of the variables like if you want to
62:03 - modify these environment variables
62:04 - instead of as we're in the Amazon
62:07 - environment variable right I mean we're
62:09 - in then we're in the Amazon environment
62:11 - right so we I could actually go in and
62:12 - get these variables out like Amazon calm
62:16 - and slash s and K and stuff and I'm
62:20 - going there and actually change those
62:21 - just by calling these things like get an
62:25 - environment variable PM stands for post
62:28 - mates in case you're wondering PM post
62:30 - mates dot blah blah blah or postman not
62:33 - post mates I guess I'm getting hungry
62:36 - and then set environment variable to
62:38 - same deal and then regular variables of
62:41 - course so that's kind of the general
62:43 - idea maybe like you wanted to be able to
62:45 - change the iPhone thing like I mentioned
62:47 - earlier like you like basically you're
62:49 - able to just use code to do whatever you
62:50 - want with the request so you have like
62:52 - full control over all of it okay so
62:54 - that's pure um request scripts um now
62:56 - we're gonna get into testing which is
62:57 - very similar alright so testing so
63:03 - writing test scripts like I said earlier
63:05 - is testing the response that we get back
63:07 - from a request okay so we are going to
63:10 - try that now so I found a different API
63:12 - here other one was giving me a little
63:14 - bit of trouble with it um but this one's
63:17 - cleaner and easier the JSON is is just
63:19 - cleaner so we're gonna use this one let
63:23 - me just run the command so you can see
63:24 - what it looks like it's HTTP rec rests
63:28 - which is probably request response NDP
63:31 - I've at slash users it's just like a
63:33 - dummy API that we can use there's some
63:34 - nice JSON here very similar to what
63:37 - you're using before but um yeah so now
63:43 - let's write a test let's just go
63:44 - straight here and just start reading it
63:45 - so this is the response we get back okay
63:46 - as you can see there's a bunch of
63:50 - different stats here like the status 201
63:51 - okay and then time I took in all that
63:52 - stuff from the size of it but if you go
63:54 - to the snippets here it's actually a
63:56 - little bit different than the pre
63:57 - request script if you go to pre request
63:58 - script we can see there's only a few
64:00 - here but if you go to tests then there's
64:02 - a bunch there's a bunch of different
64:03 - ones ok so let's just go through some of
64:05 - them and I explained the most common
64:08 - ones and some useful ones obviously we
64:10 - can get environment
64:11 - variables and global variables just like
64:13 - we did before environment variable like
64:16 - we're currently in the Amazon
64:17 - environment so if we looked up if we
64:19 - looked up like the shopping website or
64:21 - something like that let's take a look if
64:23 - we looked here if we type in any one of
64:25 - these we get the value out okay same
64:28 - thing we can actually set those from
64:29 - here if we wanted to after the tests
64:31 - came back so maybe like if the response
64:34 - came back and then we did find something
64:38 - we did find a term or whatever above
64:40 - what like we found what we're looking
64:42 - for then we could like change them with
64:43 - the variables and run another request
64:44 - and like chain them together like that
64:46 - but that's not what we're doing right
64:48 - now um you can again it send a request
64:51 - but here's one that is immediately
64:53 - catching my attention that's pretty
64:55 - simple and easy to understand status
64:57 - code code is 200 so if I click this ok
65:00 - this pops up it says postman dot test
65:03 - status goes 200 and then I just make
65:05 - sure that the status is 200 so when we
65:07 - ran this we got a 200 ok so let's just
65:09 - try to send this again and see what
65:10 - happens ok if we go to test results it
65:12 - says there was no test for this request
65:16 - but now if we go run this again ok with
65:22 - this test in place as you can see test
65:24 - results now has 1 out of 1 so let's go
65:26 - to test results 1 and then as you can
65:28 - see it's as it passed because status
65:29 - code is 200 because status code was 200
65:32 - ok but let's say we were checking for
65:34 - let's say we type in a bogus URL okay so
65:38 - like I'll just type in a bunch of F's
65:40 - here this URL I don't think exists when
65:43 - I run this then maybe it does exist or
65:48 - something hmm
65:51 - I'm trying to get it to fail here we go
65:55 - send
66:03 - API slash users slash ten or something
66:11 - come on just give me a just give me a
66:13 - four for when I need the four or four
66:14 - area um air it doesn't pop up oh my
66:17 - goodness
66:18 - alright well the point is if I was
66:19 - getting a 404 error then this would feel
66:21 - actually let's go like this okay did
66:24 - this will demonstrate what I'm trying to
66:25 - demonstrate let's just go to there we go
66:30 - test result failed so the check we're
66:33 - making was we wanted the status code to
66:35 - actually be 404 we're trying to make
66:37 - sure that it is 404 and that's when it
66:39 - is considered passed so since we got a
66:41 - 200 this is actually considered to fail
66:43 - so it says fail status code is 404 the
66:46 - expected the status code 404 but got 200
66:49 - which is kind of a funny thing to check
66:50 - for but that's just demonstrating the
66:52 - idea okay so that's testing results pass
66:55 - and fail and also when we run
66:57 - collections like these test results come
66:59 - in handy because when you run the whole
67:00 - collection then all the tests will to
67:01 - come back together which is nice okay
67:03 - but let's change this back to 200 okay
67:05 - because that's the proper functionality
67:08 - and let's just keep going down a few
67:10 - more so we can check for code is 200
67:17 - what else responsive body contains
67:19 - string so let's let's do that okay so
67:21 - contain string let's just click on this
67:23 - and then we're just making sure that
67:24 - there's something in here is um is there
67:26 - so let's just grab Janet okay and then
67:28 - just like pop this in here like that
67:30 - hit send again and as you can see boom
67:32 - now we have test results two out of two
67:34 - and it says body matches string okay
67:36 - which is because Janet here is there
67:38 - however though if we put um Janet with a
67:42 - double tee then or I don't know let's
67:45 - put like Jackson instead we're looking
67:48 - for Jackson inside here which is not
67:50 - there and we hit Send then we fill
67:53 - obviously okay so as his body matches
67:55 - string I'm expected to see Jackson but
67:58 - it didn't see jacks it's pretty much
68:00 - what it's saying alright but of course
68:02 - we can put that we can put Weaver this
68:05 - should pass again because was Weaver
68:07 - right there that'll pass yep and that
68:12 - kind of explains that one okay
68:14 - but now we are starting to get some more
68:16 - interesting things so um the others also
68:19 - on here response time is less than 200
68:21 - milliseconds this would be useful if
68:23 - like we wanted to make sure that our
68:24 - website is really fast or something like
68:25 - make sure it responds quick enough you
68:27 - know amaz almost taking kind of a long
68:29 - time okay like we could run like some
68:31 - tests in here and be like oh if response
68:33 - time is more than 200 then something's
68:35 - wrong blah blah blah display something
68:37 - pretty much anything we can just like
68:39 - test for the amount of time but I mean
68:41 - this is 200 but we can send it to a
68:43 - thousand if you wanted to we can put it
68:45 - to anything we want all right but let's
68:48 - just put 200 and run this as well we
68:51 - should have three passes cool and um now
68:54 - let's uh instead of just looking at just
68:57 - one and see what all the users we get
69:00 - the whole thing and again we have all
69:01 - the passes because of course that Janet
69:03 - data was inside the entire thing so it
69:06 - still passes but now now let's say where
69:11 - it gets interesting is or another one is
69:15 - you can like check the content-type
69:16 - header so like okay make sure we're
69:18 - getting JSON back our mate make sure
69:19 - we're getting HTML back or make sure
69:20 - we're getting an image back or something
69:22 - you can kind of like specify the content
69:24 - time but you're getting just like
69:25 - enforce that you can check that out if
69:26 - you want but we're just gonna check this
69:27 - last one here it's called JSON value
69:30 - check okay so this one is cool because
69:33 - oops because it allows us to really dig
69:35 - into the JSON data and then we can
69:38 - really check things in like and make
69:39 - sure that things were correct like if we
69:40 - posted something to an API and we
69:42 - created it and then we went to I share
69:43 - it posted correctly when we get the
69:45 - response back we can like dig into the
69:46 - JSON response and whenever it makes sure
69:48 - like it was right and this in that like
69:49 - oh I'll make sure the post request was
69:51 - successful like actually here there's
69:53 - another status code request to make sure
69:55 - that the that the on post request was
69:58 - successful because 200 is for get
70:00 - requests right mainly forget requests
70:02 - it's like okay - um status code 200 I
70:05 - found the web page here it is but - um
70:07 - anything 200 is good but 201 and 202 I
70:10 - believe is if you post something it's
70:12 - like oh yeah we posted it it's good
70:13 - here's a response blah blah so I mean
70:15 - you can do that there's a bunch you can
70:17 - check them all out if you want but this
70:19 - Dom we're just gonna continue don't want
70:20 - this one so sorry
70:24 - so here um what's going on here is
70:28 - we are getting the json data back in the
70:30 - response so the postman response object
70:33 - we are converting it to a json file or
70:35 - json object with the json and then we
70:37 - just get json data here saved in a
70:39 - variable okay and now that we have json
70:40 - data we're able to just use dot notation
70:42 - to dig into any of this json that we
70:45 - want pretty much okay and then we could
70:46 - just say oh whatever data is in the json
70:48 - it needs to equal something and then we
70:50 - can use that as tests in assertions
70:52 - okay so let's just try this so json data
70:55 - so the first thing we have is page let's
70:58 - try page so because jace we have json
71:01 - data which is this here this bracket
71:03 - here then the very first thing is page
71:05 - the very very first level um this page
71:07 - so we can actually do this and this
71:09 - should should equal one so when i hit
71:11 - send there should be a fourth test and
71:13 - it should be passing oops oops i don't
71:24 - know what the issue is
71:33 - oh there we go I think that was the
71:36 - issue all right there we go
71:40 - I had a typo there so test results um
71:42 - the the page does equal 1 but like if we
71:47 - put maybe 2 here which is not equal then
71:49 - they should actually fail and as you can
71:53 - see yes it does fail because page the
71:56 - page thing here in this JSON is supposed
71:57 - to be 1 not equal to 2 but let's say we
72:00 - wanted to dig down like really deep like
72:01 - arbitrarily deep let's dig back down to
72:03 - jannat again okay ID 2 and just let's
72:06 - just make sure that her um her last name
72:08 - actually is Weaver or something like
72:10 - that okay make sure her last name is
72:12 - Weaver so how will we do that is okay we
72:15 - have our JSON data here you guys
72:16 - probably already figured this out if you
72:17 - know how to code but just I'm just gonna
72:19 - follow I'm just gonna follow through for
72:20 - a completeness sake but we're not gonna
72:23 - go to page we're gonna have to go to
72:24 - data which is also the first level so we
72:27 - can go directly to it but then once
72:29 - we're in here then we have a list all
72:32 - right so we have a list of JSON objects
72:36 - in here itself so we want to find Janet
72:39 - so this is a 0th one this is the first
72:42 - one so it would have to be indexed at
72:44 - zero data now we're in here okay and now
72:47 - we just keep using dot notation and we
72:49 - want last name right so now we just type
72:51 - dot last name our last name and now this
72:55 - should equal Weaver okay so I'm just
72:56 - gonna copy this and I'm going to pop
72:58 - this in here just like that but make
73:00 - sure it's a string okay because it's a
73:02 - string type and hit Send and this test
73:05 - result should come back is pass and
73:08 - apparently not let's see what the issue
73:13 - is oh because the okay this one let's
73:17 - say 500 less than 500 now we should all
73:22 - have a pass make it a little bit easier
73:25 - on us okay so actually this previous
73:26 - test field that wasn't the one that we
73:28 - just did so pretty much this is working
73:30 - as intended we're saying okay if the
73:32 - JSON data they'll be digging down below
73:33 - blah blah of this key if the value is
73:36 - equal to this then we consider pass if
73:37 - not like um if we put like
73:41 - huazi cool I don't know what that is but
73:43 - if we use that then it would fail okay
73:46 - you would say that the certian air
73:48 - Weaver but was expecting huazi all right
73:50 - so that is how you run test scripts in
73:54 - postman for your response objects um or
73:58 - from your HTTP responses or whatever you
74:00 - want to call it you can also run these
74:02 - at the collection level just like you
74:04 - could with the pre request scripts as
74:05 - well okay so when you run the entire
74:07 - collection then all these tests will be
74:08 - run after it and again you can you can
74:10 - make variables in here as you can see
74:11 - JSON data right here and you have full
74:13 - control over everything in the code with
74:16 - within your request any responses to
74:18 - really test anything you could imagine
74:20 - pretty much okay but I gave you all the
74:22 - basics that you guys need now it's your
74:25 - job to go out and actually apply these
74:26 - things to figuring out how to use
74:29 - postman to solve whatever problem with
74:31 - the API as you're trying to solve okay
74:33 - but that's pretty much it for scripting
74:36 - pre request scripts and tests and I'll
74:39 - see you guys in a few seconds to go over
74:41 - on the next thing alright you guys so
74:46 - now we're gonna go over pretty much the
74:48 - last thing in this postman crash course
74:49 - and that is setting up mock servers all
74:52 - right so I mentioned this a lot at the
74:54 - beginning of this crash course we kept
74:55 - saying old mock server this mock server
74:57 - that that's because up to this point
74:58 - we've been doing a lot of client stuff
75:00 - so we might have been working on or
75:05 - creating like dummy client arm requests
75:09 - so we can like create basically any
75:11 - client request we want and then we can
75:12 - send it to any existing API that or you
75:14 - exists and then get something back ok so
75:17 - we had flexibility around shaping what
75:20 - the client was happening with the client
75:21 - but the API is had to already be there
75:23 - in place now mock servers will allow us
75:25 - to do the flip flip option of that let's
75:28 - say the API doesn't exist okay maybe
75:31 - we're developing a client and a server
75:34 - for a client or something and both
75:37 - things need to be developed but the
75:38 - server doesn't exist but we need to
75:40 - build the client like one of them needs
75:41 - to exist to be able to test it so we are
75:44 - able to UM work on the server and then
75:47 - send mock requests to the server using
75:51 - postman which is what we've been doing
75:52 - up to this point we can just create
75:53 - whatever quests we want and
75:55 - paying the server but let's see we're
75:57 - all working on the client-side and we
75:59 - need to send requests somewhere and get
76:02 - a response back but the server doesn't
76:04 - exist yet okay if the server doesn't the
76:06 - API doesn't exist then we need still
76:08 - need somewhere to test it so that's
76:09 - where mock servers come in we can create
76:10 - mock servers which basically says oh if
76:13 - there's a request to this URL - yeah -
76:18 - this specific URL on the server then
76:21 - reply with this we're basically gonna be
76:24 - hard coding in responses to specific
76:27 - requests so like if it's if if like oh
76:29 - this specific request ins with these
76:31 - specific headers and this specific URL
76:33 - and all this yada yada comes in send
76:35 - back this specific response be it JSON
76:38 - or HTML or whatever kind of data were
76:41 - sending back the entire response object
76:43 - with its own headers and everything so
76:46 - it's kind of an overview of what we're
76:47 - gonna be doing now we're actually going
76:48 - to postman and go through actually doing
76:50 - an example with this you can see see how
76:51 - it's done and maybe understand it a
76:53 - little bit better so let's first start
76:56 - with creating a new collection okay so
76:58 - you need a box server I mean we need a
77:01 - collection to create a mock server
77:02 - because every mock server has a
77:05 - collection associated with remember a
77:07 - collection is just a group of requests
77:09 - and that kind of makes sense because we
77:11 - need a mock server up and running and
77:14 - then we're gonna have a bunch of
77:15 - requests that can be sent to that mock
77:17 - server and it's just nice to have all of
77:18 - those requests together in a collection
77:20 - okay so I'm gonna call this mock server
77:23 - requests name of this collection because
77:27 - this is gonna be when she requests going
77:29 - to the mock server and let's hit create
77:31 - so that's done but there's zero requests
77:35 - in here so let's just add one request
77:36 - really quick and we're just gonna call
77:38 - it request one alright so this is gonna
77:40 - be request one and um we just need a
77:43 - after we're done creating this request
77:45 - basically we're gonna have to have on
77:47 - the mock server know what to reply when
77:49 - this requests one specifically this
77:51 - request one comes in so let's just
77:53 - create request one there nice so we have
77:56 - a collection we have the request that
77:58 - we're gonna send to the mock server and
77:59 - now we actually need to setup the actual
78:00 - mock server within um that's associated
78:03 - with this collection with this
78:04 - collection so we hit this little button
78:06 - here and if you go over to the right
78:07 - here on this tab
78:08 - it says mocks and it says this
78:11 - collection is not being mocked okay a
78:13 - mock lets you simulate endpoints and
78:14 - their corresponding responses and
78:16 - collection without actually spinning up
78:18 - a back-end so that means yeah if the
78:20 - back end doesn't exist then we can
78:21 - simulate endpoints and points are just
78:23 - URLs pretty much like the path like oh
78:24 - if you reach this certain URL path then
78:26 - um then do something respond with
78:30 - something so let's just create um click
78:33 - create mock uh create a mock server and
78:37 - now we're just going to create a mock
78:38 - server so we're just gonna call it mock
78:40 - server all right very straight for I'm
78:44 - create a version tag this a little bit
78:46 - Vance we don't need this right now she's
78:47 - saying if this server is going to
78:50 - correspond with a specific API version
78:52 - maybe we're actually working on a new
78:54 - version of an API instead of like
78:55 - creating some from scratch and then we
78:56 - have to have a version yadda yadda but
78:59 - those are details that only matter when
79:01 - you're actually doing them and then also
79:04 - you can have environments um I'm just
79:06 - gonna click no environment but you can
79:08 - choose to import all the environments
79:10 - for this mock server so that all the
79:12 - variables that you have in that
79:13 - environment are already existing but we
79:14 - don't need that now either and they make
79:17 - this mock super private we could if you
79:18 - want but then you'd need a API that
79:20 - occation key and all that stuff and
79:21 - we're not gonna set that up right now so
79:23 - we're just gonna keep it public so let's
79:25 - create and create the mock server and
79:27 - that was pretty easy right it says mocks
79:29 - ever created we are done and I'm all you
79:32 - have to do is to call them mock server
79:34 - is just go to this URL alright
79:37 - this URL right here in orange and pretty
79:42 - much what this is saying is ok this is
79:43 - your mock server so when you go to this
79:44 - URL anything that comes after this like
79:47 - treating this as a domain and it comes
79:49 - after this can be um created as a mock
79:53 - server API so like ok if you like ok
79:55 - slash users or something um this slash
79:58 - users then you were gonna have to need
80:00 - to send something back basically this is
80:03 - just standing in for the domain maybe if
80:05 - we had an API in the future like this
80:07 - would act like if we were actually
80:08 - working on a project that needed a
80:10 - server using PHP or whatever server code
80:14 - you want to use or Django or flask or
80:17 - whatever
80:19 - then it would be like okay WWE my server
80:25 - calm slash API or something instead of
80:28 - this here but this is just a standard
80:29 - alright so on that little URL is right
80:32 - here it pops in as you can see now when
80:33 - we go to mocks then the mock server is
80:36 - here and there's a URL associated with
80:38 - it which is pretty cool so we're
80:40 - basically saying when you reach this URL
80:41 - then we are now integrating acting with
80:43 - our mock server so now we can start
80:44 - creating hard-coded responses to
80:48 - specific requests so if you click this
80:50 - button it's gonna copy the mock URL all
80:53 - right and now we're gonna go to the
80:55 - request ok let's close on with these
80:57 - tabs we don't need these anymore
81:09 - all right so now we have the request
81:12 - open and let's just pop in the mock
81:16 - server base URL okay
81:18 - the very base one the domain and nothing
81:21 - else
81:22 - let's hit Send and see what happens
81:31 - and as you can see this thing pops up
81:34 - okay this is the response we got so if
81:37 - we're writing if we run a get command
81:40 - just to the base mock server URL that we
81:42 - have then we get an error back and it
81:44 - says mock request not found error as in
81:47 - whatever's associated with this there
81:50 - was no response associated that we
81:52 - didn't find and the message says this
81:55 - collection does not have any examples um
81:57 - an example of something we're about to
81:59 - create it's a thing in postman right up
82:00 - here on this top right we're just about
82:02 - to talk about it but it says this
82:03 - collection does not have any examples
82:04 - please examples to the requests in this
82:06 - collection to enable mocking okay so all
82:09 - an example is is just the response we're
82:12 - gonna send back for a specific requests
82:14 - so so we're basically gonna say um well
82:16 - let's just go here up the examples okay
82:17 - it says no examples added save responses
82:20 - and associated request examples so we're
82:22 - just gonna click add example okay we get
82:24 - this new tab as you can see over here if
82:26 - this says get this is a request and then
82:29 - if we go here this is an example it
82:30 - actually says ie um eg dot which is a
82:34 - Latin abbreviation for example for
82:39 - example I think it's like or go
82:41 - something but it doesn't matter but so
82:43 - this is an example tab and now we can
82:46 - see that this example is actually set up
82:50 - so if when we were when we sent our
82:51 - question we got this response and the
82:54 - cool thing is that this response is
82:55 - exactly the same as what this response
82:58 - down here is okay that's because we're
83:01 - saying oh when we hit when we're in this
83:03 - example we're saying well we hit this
83:05 - and we hit this URL with these
83:07 - parameters and these headers and this
83:09 - body in other words anything the example
83:12 - requests up here anything in this white
83:13 - box whatever
83:15 - um this is specified exactly whenever
83:17 - that exact thing comes in to our mocks
83:20 - server then give this exact response
83:23 - okay so this is the base mock server and
83:25 - if we send that with note with no path
83:28 - coming after it with nothing after it at
83:30 - all and nothing else in it at all send
83:32 - back this JSON data with a 404 not found
83:36 - status okay and then have all the
83:38 - headers and stuff - okay
83:39 - this is JSON and this is clearly JSON so
83:42 - let me go back to the request and we
83:43 - send this again that
83:45 - explains why we're getting this okay
83:47 - sent that's what we're getting this like
83:50 - everything this is actually an error
83:51 - that was Auto created by postman now
83:53 - let's say we actually typed in something
83:55 - crazy like like whatever a bunch of
83:57 - stuff and then we hit Send um then we
84:01 - get the same issue
84:02 - um I think postman is just like
84:04 - autocomplete into whenever there's
84:05 - something doesn't exist then this pops
84:07 - up which is very handy but what we want
84:10 - to actually do is create a new example
84:12 - or did I save it what we actually want
84:15 - to do is create a example for um maybe
84:19 - another endpoint another URL so we can
84:21 - actually see how that would go now okay
84:23 - so let's go let's just duplicate this to
84:28 - make it clear so duplicate this and we
84:32 - are going to rename this to request to
84:36 - okay
84:37 - and copy that in there and then we're
84:41 - just gonna say users okay and then here
84:44 - this example well actually we can just
84:48 - go back up here and just create another
84:51 - example and then we're going to call
84:53 - this response - all right so we request
84:58 - one response one which was just a base
85:00 - and we're getting back this error and
85:03 - then now we're doing a request to in
85:06 - response to so now I actually want to
85:07 - add in something different so if we
85:10 - actually reach this um URL endpoint the
85:13 - mock server or base domain + users then
85:17 - I want to reply with something different
85:21 - okay so here we have it filled out on
85:24 - parameters I'm just gonna keep it light
85:26 - it makes sense it should be pretty
85:27 - straightforward that you can put in
85:28 - whatever you want here okay but I'm just
85:30 - gonna keep it empty because that's
85:32 - unneeded so we're just saying when we
85:35 - hit this URL end point then send a 200
85:38 - okay response and then let's send um you
85:42 - could just send raw text so it could be
85:43 - like okay hi whatever but let's just
85:48 - send back JSON data so let's check JSON
85:50 - data as you can see you can send back
85:52 - XML or HTML or anything but let's just
85:54 - send back JSON data and it says slash
85:57 - users
85:58 - so let's um let's just make some dummy
86:02 - JSON data okay so this is gonna be the
86:03 - hard-coded response that we're gonna
86:05 - have to this very specific request and
86:07 - then let's just say um users like that
86:14 - and then we just say like name is Erin
86:27 - and ID is one cool and then let's just
86:36 - do the same thing um there we go
86:43 - but let's change this to name is cause
86:45 - II and ID is - okay very straightforward
86:50 - so I just create some dummy JSON here as
86:53 - a response so now we're saying on this
86:55 - mock server whenever somebody goes to
86:57 - this mock server
86:58 - um slash users then reply with this JSON
87:02 - data okay this JSON data with the 200
87:08 - okay
87:08 - response okay and I think we need to
87:12 - actually say some of the headers too so
87:14 - let's just go into here other one and um
87:17 - maybe just copy all these or let's just
87:22 - run it and see what happens okay so
87:24 - let's run this
87:37 - alright guys so yeah I don't know why I
87:39 - wasn't getting the correct one maybe I
87:40 - didn't save it or something but now it's
87:42 - working so I created this this
87:45 - hard-coded respond to this JSON down
87:47 - here like we just did a few seconds ago
87:48 - and now um I go into this slash users in
87:52 - point URL and now when I go to request
87:54 - um to and I go to that same exact URL at
87:57 - the same endpoint slash users and I hit
87:59 - Send then it works as expected I didn't
88:02 - change anything okay um I don't know
88:06 - what it was I think it was yeah I just
88:08 - don't think I saved but if we view this
88:09 - as JSON then you can see that the
88:10 - response we get is exactly what we said
88:13 - the example should return we said
88:15 - example should return this stuff if we
88:17 - go here and when we actually go there on
88:19 - a request that's what we get back very
88:21 - very straightforward okay
88:22 - um originally I thought it was because
88:25 - all the headers weren't there but we
88:26 - don't need all them but I mean we can
88:28 - fill it out if you wanted to all these
88:30 - headers here the easiest way to just be
88:33 - like I actually duplicate this other one
88:34 - that has all of them in there
88:36 - um here and then all the headers already
88:38 - there and then just copy and paste all
88:41 - of this code
88:42 - this was JSON response instead and to
88:46 - here like this okay paste that in and
88:49 - then let's just actually call this
88:52 - response 2.5 and um say slash users I
88:59 - guess we're doing this really quick and
89:03 - save that ok should be saved
89:09 - users yep um and let's just put Aaron 2
89:14 - in Kazi 2 just so we're aware that it's
89:16 - the right one a little difference in the
89:19 - response so that's saved let's just
89:26 - let's just delete this one I guess
89:28 - response to it delete
89:33 - and there we go so that doesn't exist
89:35 - anymore now this example should be
89:39 - associated with this endpoint so now we
89:41 - go to this endpoint again and we hit
89:43 - Send then as you can see Aaron - and
89:47 - Kazi to pop up which is the change we
89:49 - made and all the headers are there okay
89:51 - which is that once we copy it over so as
89:54 - you can see it autocompletes to json
89:55 - before remember it was just like Oh
89:57 - autocomplete comm HTML and it was
89:59 - looking kind of ugly that's because we
90:01 - didn't have the content type set to JSON
90:03 - and stuff because there is no headers
90:04 - and some of these headers are are
90:06 - mandatory by good practice pretty much
90:09 - but that really simplifies things if we
90:11 - just copy over all of the headers from
90:13 - the original example okay over here and
90:17 - that's pretty much it you guys for mock
90:20 - servers so you're able to create a
90:22 - collection with a bunch of requests in
90:23 - it and then you have a mock server base
90:29 - domain associated with that collection
90:32 - and then all the requests you send to
90:34 - that domain can be given hard coded
90:40 - responses by creating examples okay
90:42 - and that's pretty much the overarching
90:45 - logic of it very simple just remember
90:46 - that and you guys can pretty much set up
90:48 - any mock server you want so any request
90:50 - that comes in you can specify exactly
90:51 - what you want to get sent back so it
90:53 - makes it very easy for developing
90:55 - client-side servers or client-side API s
90:59 - and whatnot so that should be it for the
91:03 - post in crash course pretty much thanks
91:06 - you guys for watching hope you guys
91:07 - learn a bunch and I hope you guys have
91:08 - fun playing around with the API is
91:10 - whether it be your own or ones you find
91:12 - on the Internet yourself there's a lot
91:14 - of cool ones out there but yep that
91:16 - pretty much wraps it up you guys
91:17 - good bye
91:19 - [Music]
91:31 - hey what's up you guys so if you'd like
91:33 - that video if you have an epic
91:34 - three-part free master class that
91:37 - teaches you how to go from complete zero
91:38 - to becoming a six-figure freelance
91:40 - developer with Python if you want to
91:42 - check it out they click click the link
91:44 - below in the description there should be
91:46 - a place where you can put in your email
91:49 - and your phone number and your name and
91:50 - you can sign up and you can get direct
91:52 - access about it there's a lot of free
91:54 - value there just go check it out I think
91:56 - you'll really like

Cleaned transcript:

hey what's up you guys so welcome to the postman crash course what post been super useful it's one of the greatest tools you can use if you're working with api's at all and if you want to be serious in the software industry you need to know what api's are and how to use them so this tool will save you so much time all right we're gonna go over all the basics of postman we're gonna be going over how to use it all the functionality the whole UI like what its uses are and do a few examples and go through pretty much everything is it's pretty exhaustive but not everything but I mean it'll it'll be more than enough to get you started so we're gonna be going over how to create mock servers how to use variables and how to send requests all different kind of HTTP requests to any any of server or web server you can think of any website getting all your responses back all the analytics of it all of the data and all the statistics that you get from it this is a bunch of stuff it might seem kind of wordy now but when we get into it you'll see and it'll be pretty great so let's get started hey guys so welcome to the video before we get started though Before we jump into it I want to tell you that we have an epic free threepart master class it teaches you how to go from being a complete beginner and programming not knowing anything if you've never written a single line of code and the steps you can take to become a sixfigure freelancer or a software developer so if you want to learn how to go from there to there click the link in the description down below it should be down there just gonna pop in your email address in your name and we'll send you an email to the login page for that and you can access it completely for free and it ends with a an exclusive webinar if you want to check that out too after the three parts so if I guess it's kind of like a four part masterclass but I definitely check it out alright it'll it's just a lot of free value and just we want to offer that to you so check it out all right you guys so let's start it with be posting a crash course alright so just a few prerequisites before you get started to understand how to use post pin and everything I'm gonna go over in this crash course you're going to need to know about what api's are about what rest api's are what web frameworks web servers and web clients are and stuff like that a lot of like online coding things and what hTML is and JSON and XML and I'll be familiar with all these terms in order to be able to follow along because you need to understand all this stuff to even use postman to begin with so if you don't know that then go back and learn how to do that first and then come back to this I will be explaining a little bit as we go just to like jog your memory so if you kind of know what those are and I mentioned things and you will be ok and things will come back to memory but if you have no idea what those things are then this crash course is not for you you should probably close out and go learn those things first start with a start with HTML and some other simple web stuff and go up the frameworks and and all that stuff and then you'll be ready for actually testing API stuff Oh an HTTP request and stuff as well that's very important to know that's what API is are based on but besides all those prerequisite stuff let's just get started okay so postman so postman in a sentence postman is a tool that you can use to work with api's all right so it basically allows you to test api's build api's and like create mock api's like servers like mock servers or mock clients and whatever so you can test them so while you're developing let's say you're developing a server or something then you can test it with this tool to make sure everything's working properly and vice versa so if you have a client then you could create a mock server or I mean if you're creating if you're trying to program a server then you can use postman as a mock client by sending requests to it like HTTP requests to it and whatnot but that's just a little overview of what it is let's just get started now so we're gonna want to download it first um you can either use the native app or the Chrome extension but I realized that the Chrome extension is deprecated as a saying right here but yeah let's just go to the web like here we go so this is postman it's just a plication we can use and we're gonna get into it very soon all right use cookies got it and pretty much what you need to do is just download it first okay so click download the app and yep just download it for whatever operating system using I use it for I'm using it from Mac right now and I already downloaded it but yeah so after you download it and you create an account and all that then we can get started with postman okay so go do that first I'm gonna continue on because I already have it downloaded and I'm gonna open up the postman app right now all right so I have a postman over here open it up and get this started loading awesome so it's loaded up perfect let's get this on a separate desktop cool so now I can go between my browser here my chrome and my postman so when you open it up you should probably see something like this or something similar you can just close out of this we're just gonna go straight to the UI I want to show you all the basics first now that we have it downloaded so I just want to go over all the UI and what all the buttons do when everything means and kind of just give you a tour of postman before we get into anything advanced all right so this is kinda like the basics like the basics crash course portion of the entire crash course all right so this is postman we are in postman and like I said it's just a tool that allows us to work with api's we can send requests we can crate mock servers and yada yada here we have all of the different requests we can do so we can basically send any HTTP request I'm here get and post are the two most common ones but of course you can use put and delete and all these other ones that we use occasionally but mainly just get in post alright and then when you are wanting to test an API then you can just use things here so let's just give a simple example all right so let's just say we want to test a this so we just want to get Emma's on comm you hit send then it will it there we go it grabs the the code the HTML code back from when we type in Amazon a common tool browser we get all the HTML code back and we can actually hit preview here and you can actually see that actual web site so my postman is is just a way a tool that gives you a lot of like leverage in different ways to change parameters and whatnot to work with api's and web servers and all this stuff okay we're not gonna be using Amazon the con when you season this because everybody's familiar with the webpage and then they understand how this is working so if we use a get request on the website then boom we get it right back alright but we're not gonna be using this anymore that was just for demonstration purposes so now let's actually use an example and I'll explain what everything is as we go okay so let's just do a get request first okay so let's um I have this cool JSON place all the website right here which allows us to it's a free open API where you can go into it and you get JSON back it's just that's why it's called JSON placeholder but we're gonna be using that right now at home for these basics let's just start that so yeah you can you can choose your type of request here we're just gonna do a get request and then when you hit Send it'll actually send it and get it back just like we did with Amazon so let's do that first and we'll hit send and as you can see we get our JSON back okay so if I actually pop this into chrome as well we would get the same exact thing just like we didn't post me and we just get some JSON back alright so JSON file if you don't know that is then this will make sense but this is JSON data and we're getting all this back alright just like we are in postman but here we have all the different options here to view it so we have pretty which is cool because you can actually collapse the JSON data or if it's XML data or whatnot well you could you can view the raw data which is just a raw string with formatting the preview which is what it would look like in your browser that's why when we went to amazon.com we actually saw the actual thing is they just HTML code because this is what it looked like in your browser and chrome it's auto formatted though but I mean that's just like extra fancy thing that chrome does and most browsers do but it's supposed to look like just like this just a raw string okay and visualize beta this I don't know what that is it's new I haven't checked it out too much but so if we are getting JSON data back then this will automatically go to JSON but of course whenever we are using a get request then we can have all different kinds of data coming back so whether it's XML or HTML just like we did when requesting up a webpage or text in general or whatever also when we are sending a get request then you can actually set your query parameters here so this is your query string like if you want to say like okay parameters like something like user ID oops user ID equals six like if you're gonna have that in the URL when you're calling an API then you can actually see that it auto cottle fills it out first here but likewise we can also do something like this right like hello this is a tight tool okay and it'll auto fill it all out for us and makes it very easy to construct these things so you have to type it from scratch so let's just get rid of that but yeah basically you can write our key value pairs here for any query string parameters and you can also set your headers and your body here okay so body is more important when you're actually doing post requests right but if you want to set your headers like content type or whatnot then you can actually you can actually specify these here okay or anything any other headers that aren't done by default then you can add them in here and it should actually autocomplete I think yup so like if you have like content type or like content length or something or whatever then you can just pop that in and then yeah that won't be auto generate for you you can also toggle these on or off so if it's on then it'll be it'll it'll be used but if it's ticked off then it's as if it wasn't even there to begin with but it's just nice to have it there because this is a tool so you want to make it easy to test api's and all that so let's go back Oh another thing I want to point out is you can actually um save so like I have this get request here right and I have like a bunch of different query parameters and different headers and bodies and everything like set up in a certain way and perhaps I want to keep testing it over and over again and I want to save it then you can actually save it here by using this button okay you can save this request but another thing is that there's a history of everything you actually sent so we sent to get requests already you can see the amazon com1 and then the one that I just sent so these will always be here and you can click on them and it'll actually take you like oh it'll open up another tab for you another tab for you and allow you to look at the requests that you sent okay so that's nice if you want to go back in your history like keeps everything there of course you can clear it all but yeah let's continue Oh another thing I'd mention whenever you are doing a when you send our HTTP requests then it'll get you the status code back here it also tell you how much time it took to do the request with all the stats there you can see the DNS lookup and all that stuff you know what if you actually know what all that means and also the size of the returning file the response file okay and then you can also save responses here but yeah I think you can also when you send you can actually send in downloads instead of just sending the request whenever you get the response you can actually download this entire file separately okay but that's only if one if you only want to download it but I think that is pretty much most of it for the get I think did I go over this headers oh this is the headers that we get back in the response so we'll have the date that the response was sent down the content type of course its application slash JSON and the reason UTF um utf8 the char set blah blah blah and like all this other stuff I don't know what all of this means but I mean these are all the headers that we got from our JSON data which is very clearly JSON data okay and yeah I think that's pretty much it forget let's for get requests let's now try post requests so I believe in this open API what we can do here is they actually have an open API where you can put posts so now we can test post requests and we can send those out to this to this URL here and actually test post requests now so let's just turn on post request they're real as you can see the other get requests popped up here when I when I call it again but now let's do post okay so if we go into posts of course we have our query parameters and whatnot so let's just try this sending a post out as you can see here they are expecting a user ID or that isn't allowed key key and one of the key value pairs in on this API so let's just pop that into one of the query parameters okay let's just say user ID equals I don't know six or something or let's just put two whatever it doesn't really matter I don't know why I'm deciding changing it but we can put that and you whenever we send a post request then what we get back is actually the ID of the post entry that was just created okay so when we hit sent we're actually going to see that the ID comes back of 101 and you can see the post request pops up here but let's go back here let's go over some of the headers again you can set your headers of what kind of content you want to be putting there or ascending through and any other header few fields that you want and of course when we're doing a post request you actually need to specify what's in the body that's the most important part okay so within the body we can actually send nothing which would I guess do nothing it's just kind of useless maybe useful in some cases but form data of course is what we can do if you just want to send like JSON data upanddown which is kind of what we're doing here by sending user ideas um user IDs and whatever titles or whatever it has I forget what was there me let me see V add our user IDs or regular IDs or title or body and all this stuff but when we're doing post of course we can send form data we can send form URL encoded data or raw data just straight string just straight string data or even binary data okay so if we wouldn't actually upload images then we could very easily just select an image to post to this here okay if our API allows it if whatever web server we are coding up or using or accessing if we're maybe using yeah yeah if we're coding our own web server and if it allows it that we can send it okay yeah I mean if we were sending a JPEG or something or something like that if we're sending a binary JPEG please like to the JPEG image here or PNG something then we could actually go here and change this it could be like image slash JPEG or whatnot and then that's how we could send a post across with an image and then of course we would have to select the image file here so you could just pick a image from your computer um but yeah all right well I think that pretty much sums up most of the basics here I think I went over pretty much all of the buttons of course he can get the headers again from your post response and test results we'll go over that later maybe and what else did happen I seen collections collections are just collections of different requests pretty much that you can put together you can like create them and just kind of keep them organized if you want or you can just like do test one by one like we were here um this gets a little bit more advanced maybe we'll do that later but I think I've gone over most of the basics here so you guys shouldn't know how to send getting post requests and how to set all of your different parameters and whatnot whether it be quarry string parameters or headers or your body and your body types and all these different things and you should be able to see how like how to see what's coming back and whatnot and it's just very useful if you are working with api's and you're trying to like test if you're like coding up a client's side thing and you want to have a mock server or to like compare if things are working correctly then you can use postman to like create create dummy requests or like mimic some of the requests and see if what's getting coming back is what you're expecting to come back and so forth basically it just allows you to fake servers and fake clients and to make sure it's working correctly just so you can test your API so whether you're building it or testing it or or just using an API but yeah that covers all the basics and I will see you in a few seconds going over whatever we go over next all right you guys should be a few seconds later for you but now I just want to go over really quick about bulk editing query search query string parameters and creating new requests and collections credit collections and saving requests to collections well it's still pretty basic but I just need to go over it a little bit more involved but that's I'm going over it now so let's say let's create or let's change it first let's let's just query amazon.com again I actually I'm gonna use this again amazon.com all right so we can preview it we can see that we have the webpage here and have the HTML code here but let's say we wanted to actually search something on Amazon okay so let's I believe on Amazon if you just put s that's the search URL so now it's getting ready for a search and then we just have to add into the query string parameter here um I believe it's K I don't know why it's called K but we can put anything we want in the value so if as you can see when we're typing it down here it's Auto completing the query string parameter so we're gonna say amazon.com search and the term search term we're gonna search for is iPhone so let's just hit Send and if we click on preview then you should actually see that iPhone was complete up on the arm in the search bar under all departments and I'll be can see a bunch of hyphens pop up there might be like another parameter here for departments like something might actually change what this is instead of like just all the parts you get to go to like technology or something I don't know I guess there's something something there that would make more sense for iPhone but yeah that's that and let's say we maybe have another one so maybe there actually is one I don't think this is actually true but like let's say if we had like Department we could be like all or something okay Department equals all and that could be like this now I want to show you bulk edit so if you go to bulk edit here on the right instead of having this nice interface using key value pairs you can actually click on bulk edit here and see everything you have as just a string and this is useful because you can just go in here and just copy and paste or just copy it and then you can actually go up here and click plus and you can actually type in amazon.com again oops comm / s and then down here go to bulk edit and then just paste this in here and go back and as you can see it's all auto completed so you can like copy request that way you can also just right click up here and duplicate the tabs but that's actually not a true copy sometimes like the names and stuff still get the names will always be the same or something like that so I don't like using that I always just create a on do one from scratch but let's just get rid of this one don't save it let's go back to this request that we had okay so search for iPhones let's turn off the bulk edit mode going back here so we have an iPhone search now let's talk about creating a collection and saving requests to collections all right so once we have a request here we have a get request on Amazon just searching for iPhones then we can click Save over here alright and it brings up this save request little window so in order to save your request you actually need to create a collection um it's kind of just like a folder for a bunch of requests I mentioned that a few minutes ago but let's just click create collections down here and let's just call it Amazon searches alright hit this little orange check sign and now it's selected if I click back on it you can see all your collections here and then this you can't save anymore but when I select Amazon searches I'm in here and now I'm able to save a time on services so the name of this request it's going to be Auto completed to whatever the URL is the query string but I actually just want to make it cleaner and say Amazon search and I'm just gonna say iPhone just like that okay you can put a description if you want but that's optional I just put hello sure why not and now we can just click save to Amazon searches all right so now we save this request you can see the name up here change to Amazon search iPhone and if I want to change the name then I can I find this little down arrow then you can see the description you can also edit the description down here you can even use markdown which is pretty cool save will collapse this back up so that's that and now now that we have our collection made if you I should click on collections over here on the on the left you can see that our Amazon surges collection was made and it says there's one request inside let's just click on it and as you can see there's Amazon search iPhone okay now let's just create a another one okay so let's actually use this well let's go to bulk edit and just copy all this oh not that much I mean you could actually just like type it in yourself but I got a bunch of these different parameters if you wanna copy over it's actually useful turn this off go to this plus sign create another one I'll let's just say it's Amazon calm slash s again go to the bulk edit paste it in go back cool and now I don't I don't want to search for iPhones anymore maybe I want to search for MacBook okay or just MacBook and now let's pop send sending the request waiting for the response down here go down to preview and as you can see now we have our search results for a MacBook and if we scroll down then there's a bunch of mac books available okay cool so now I'm gonna save this to alright and I'm just gonna go Amazon search and it's gonna be MacBook okay and no description this time okay and then we have it selected you can already see our our previous one iPhone was created down here you can see it faded out and we'll just hit save and boom there we go so that's how you save your searches okay so that way you have to keep typing from scratch every time you can close out of both of these so when you open up launchpad I mean on postman and this is oh yeah this is launch pad too you can go here and there's a bunch of other UI stuff but later later now we have our collections here so we have our history of course we can go through um you can delete all this stuff let's just delete these why not delete okay so they're gone forever but if you go to collections then they're still here I mean you can delete these two by hitting these buttons but now we have the ability to see these again so when you click on it they pop up see its italicized though so if I go to other one then they don't stay open but if I want to keep it open and then you just can hit Send and then see it'll it'll on italicize right now after I send it and then now when I select macbook then it just opens opens it up in another tab there we go so we have iPhone and MacBook and you guys get the idea okay well that wraps up creating collections and saving requests and using the bulk edit mode and I will see you guys in a few seconds again to go over whatever we go over next alright you guys so now we're gonna go over variables in postman so variables are exactly what they sound like they allow us to set variables and have those things change wherever those variables are so if you have some variables in this URL here like if you had something like a variable here or whatever slash variable one or something that we could actually set this variable somewhere else and then have it this be filled in with whatever the value of variable one is so there's actually two different ways we can do variables um there are path variables and then traditional we're not traditional path variables and then like real like global variables I'll go over to path variables first cuz it's very simple in straight4 it's like a mini variable pretty much only for paths in the URL and then real variables are like variables that are like within postman that you can set variables like within the entire app so that whenever you change one of the variables then in every single request everywhere then that variable is change or something like that like they're very very powerful but let's go over the path of riyals first which is very simple this will make more sense as we get into it okay so we were using this nice API here let's just click this again send a get request to see what comes back and we get a bunch of stuff it's been a couple days from me so I might already gone over this I'm just kind of half refreshing myself and half reminding you if you're coming back or something but all right so we have this thing we have a bunch of posts here all right and if we could filter by perhaps if we use ID then we could like oops then we could filter it like that and it's send and then just get the one with all the user ID of one or the mean the ID of one and also if we did users then we also get a bunch of stuff here and we can again filter by the ID of one okay send that and boom we have just this one instead of all of them so now I want to point out that we are able to change the path here so users here we can actually change users to posts like we did before and if we hit send again and get the response back then we have a different post here so perhaps we wanted to go through all the posts and users that have this same ID doesn't really make sense logically but I mean this is just for demonstration purposes so as you can see this is the portion that's changing so if we wanted to create a path variable there's a little secret trick here it's kind of hidden and what you actually have to do is um get to the portion where you want to have as a path variable and delete it and then just put a coolant okay and then I'm gonna put path and as you can see if you look right down here like look great in this area when I type when I start typing this thing called path variables magically pops up okay Matt just magically pops up there and that's because we're able to set path variables okay so I'm just going to call this path 1 or path of r1 or whatever cool and down here is where I'm able to actually set users or posts or the value of the path variable so the way this is working is because this is preceded by a colon this is considered a path variable and path 401 so whatever this is is going to be filled in with whatever we type in here so user um this is going to be the same as what we just had oops users sorry there we go so we have a user with the ID of 1 and then same with posts send and it works as expected okay so this might seem a little bit clunky it kind of is I mean right now for this example like you wouldn't need to use it for this one but it's very useful if perhaps you have an API where you're working with you're accessing something like maybe you're accessing YouTube right you're accessing YouTube and you have like you want access like different comments on a video and every comment has an ID okay but you want to iterate through all of them or something like that then you could it could be very simple like um it might be like youtube.com or whatever yeah just pretend this is youtube.com and then you could have like or slash video 1 whatever it is slash um comment comments slash and then you could have like that I like the comment ID or something like that ok and then you would put in like ok comment ID and then from there then you could actually like put in the different numbers and send it and then change it and keep iterating and just keep going up and up and up or whatever you wanted to do like it's very useful for that and then of course you can have multiple ones so comment ID and then you could have like whatever else after that like comment ID etc like you guys get the idea but let's go back to what we had before yeah we don't need this oh and the last thing I want to mention about these is in order for this to work this has to be part of the path path variable okay and you see part in the path up here in front after the domain with all the slashes and stuff it can't be part of the parameters okay so no you cannot if you wanted to go like okay path and then ID if you wanted to go ID here then as you can see it's getting changed here it's not actually popping up as another thing here so remember when I typed in path then imagine we popped up here right if I type another slash and then I typed in here and I typed an ID see how it pops up down here but if I type it in over here outside of the path and after the variables the query string parameters I mean the app yeah the the parameters after the question mark then it won't work okay it won't so we can't do it that way that's the whole point of these down here okay because you already have the parameters pretty much so this is actually two parts of it it's just as part is hidden this is how you change you can use um put variables in this URL on the left side of the question mark and this stuff up here the query parameter is how you use variables on the right side of the question mark okay and that is pretty much um path variables so let's get into variables next alright so now we're getting into true variables like real traditional variables home I recorded this whole segment then I got deleted which is kind of annoying so I'm starting over on that's why this looks as different all of a sudden but pretty much variables true variables allow us to pretty much put anything we want in here anywhere at all and to specify what the variable is so pretty much it is what it sounds like unlike path labels we're limited to only changing the path over here like per per parts of the path or query string parameters we're only able to change like parameters over here variables we can change anything we want and we can basically be a full freedom with it you can create variables at many different levels and postman so like one level is collections so if you myrrh we created this Amazon searches collection then we can actually set variables at that level that's what I'm gonna demonstrate first but you can also create it at the environment level or the global level and just explain what of environment is really quick we're actually will do that later let's just actually this videos can be better because I'm gonna go in a better order but so let's just create one at the collection level first alright so remember we had this collection that had two requests were searching for iPhones let's send that in and you can see the responses already there but we'll just send it again if it will hurry up bear with me guys there we go so iPhones and then also Mac books right I'm not gonna demonstrate this because it's already there it's exactly the same but let's say that in the collection we wanted to set a variable to find some similarity between these two so within these two requests we can tell that this part here amazon.com /s s is a short for search is the same in both so why don't we set that as a variable okay so let's just copy that and hit copy and then go over here to collections hit on this triple dot thing go down to edit and all now that we're in here in this collection there's like a little tab here called variables we go there and now we can specify a variable okay so let's just specify a variable called Amazon all right Amazon and then the value we're gonna give it is amazon.com slash s okay and it tells you the current value as well if it's changing over time but let's just hit update alright and now we can see if we go back here we go back to edit then the variables it should be there this little green dot telling us that there's stuff in there and we have Amazon so now that we have that the way we access a variable in postman is to use double curly braces just like that okay and as you can see it turned red to specify that to show that we're using a variable now and now we can I'll pop in the name of the variable which was just Amazon and this will actually autocomplete to amazon.com slash s as you can see if we hover over it that little um it actually tells you what the via the initial value of the variable was and then what the current one is and then also the scope so these variables only apply to this collection so if you use Amazon and anything within this collection then it'll autocomplete to that but any other collection or outside of it it will not okay so that's that let's hit send to just prove that it's still working I mean you guys can probably take my word for it you can test it yourself but I'm just showing proof reasons there you go that works and then again let's do the same thing but let's just copy and paste it should copy and paste the reason I mean you could you could argue that it this is also the same to the question mark and the K equals the search term in both which is true but I mean I don't think it's very it's not very good practice to just like do that because you don't want to like bridge the gap with the parameter question mark splitter thing here where the parameters start it just doesn't make very much sense like you have like maybe like a separate variable to keep the question mark there and then have like oh like a search term or something okay but let's just test to make sure this works as well get the get request for this one the Mac Book Search and as you can see it works as expected as well okay so this is pretty cool I mean you can have multiple variables of course in the collection and and whatnot but also there's a way you can slit global variables environment variables let's get into that now I'll show you global variables wifey let me explain environments first so we're actually gonna get into environments next right after this um in depth and how to create them and stuff but I'm just gonna explain what they are really quick so if we go up here this kind of like where your environments are this little rectangle here it says you can cite your environment there's no farm mines created we're gonna create one later but if you click on this little eye thing and then it says environment here and Global's okay so these are two other levels where you can create variables so we just created at the collection level which is like the lowest level or one of the lower levels and then now we're environment so an environment is just a set of variables that allow you to switch the context of your requests so that's pretty cool because we can set a bunch of variables with an environment and then whenever we were in that environment automatically everything um has those variables applied which is very cool so and then if variables of course just applies to all environments okay so this is like overarching no matter what and then environment so but we can switch our environment and pick one how like a set of variables set so this is pretty cool like one example I just thought of is let's say you know how we're doing Amazon searches here maybe we have a we also want to search a bay or something okay and there have like two different collections or I mean yeah we're what two different sets of does happy clash there's two different sets of requests we have to do environments maybe we wanted to have like one Amazon search so or actually just like um I think I better explain it is if we wanted to have two environments like one Amazon and one eBay okay then we could have our request to be even simpler so instead of so this being amazon.com right we could just have it be like website okay or like shopping website or something like that okay and then have this as an environment variable and then whenever this changes I mean whatever we changed environments then like in the Amazon environment in the Amazon environment then the shopping website variable would be amazon.com and then the eBay environment this variable would actually change to something else so that these requests are like useful depending on are still useful depending on which environment we are so like let's say we want to also check a Bay for like Mac books and iPhones this is K for the search room for Amazon but it might be different for eBay but we're using variables you could just say okay search term you know something like that and but I mean this is always gonna be the same question mark and then equals always gonna be the same but this gives us a power here because now if we're in the Amazon environment we can just say shopping website is Amazon the comp search term is K I'll mean slash s2 right we need / s oops / s for Amazon but we could keep that we could include that in something or people like search whatever but the idea is that yeah you could you could use this same request for both Amazon and eBay to search for iPhones and Mac books just by hot swapping the environment if we had the environment set up correctly so that's pretty cool okay because yeah just if you guys still aren't we following then it might be like amazon.com / s and then search term equals iPhone but eBay might be like ebay.com / search term equals iPhone so the term here but it says K here and then um this will be / s and then it says s here but it says search here or something like that this isn't probably actually right but I mean that's just the idea of it okay so that is that let's put this back to Amazon alright because it's complaining that is an unresolved variable there we go and then make this okay and send it again last thing I want to talk about Oh Amazon typos bear see and that's actually a very good point um I was just about to explain that the issue with variables though is whenever you have a bunch of variables here suppose you have like five ten whatever variables in your query request string here then you can't actually see what's being sent okay because the variable is hiding what is here you don't have to keep opening like okay if you had like a collection variable and an environment variable and then a global variable or global variable is real quick I forgot to mention that let's go to global variables if you click on this little setting sign up here on the top right okay then you can go down here to Global's and you can actually set global variables so this is like things that make sense to be global so it could be like my name value is gonna be air in okay and then like there and you just hit save and then when you hit save it just automatically saves it blue global as you can see it's still there my name ahran and that pretty much just applies to everything every environment everything at all I can use this anywhere I want if I have if I type in my name it's just gonna autocomplete the arrant no matter what okay very simple and you can delete them by clicking on the X here that's global variables very straightforward but getting back to what I was saying but sometimes if you're trying to troubleshoot with variables and whatnot then it's very easy to make mistakes because you might have a bunch of variables and you can't actually see what's actually being sent I'm like me I just had a typo right but I might have not known that be like why is my request working what the heck oh this is so annoying I mean first all you can hover over it which is good because tell you it's an unresolved variable but also if you just want to see like the exact raw static request that you're getting on the response you're getting then you can use something called the postman console which is like a nofrills version of everything sending the requests and responses so we have our cool thing here with all the variables but if you go to the bottom left here the little thing a little icon when I hover it says postman console let's click on it and it'll open up a new window and pretty much what this does is it just shows us all of our quests so let's go back to postman and I'm using this variable here I'm searching for Mac books let's hit Send let's go back to this and as you can see now this little get request just popped up okay get amazon.com / s see how it auto fills out the variable for us and then it says search I mean then K equals Mac Book we can collapse it and then we can see the request headers everything in here absolutely everything the response headers and the whole response body but we can't see it because it needs to be larger anything larger than one megabyte can't be shown but that's okay because we can just go down here to raw or pretty and get the response string there if we want okay but that's just a nice little thing to allow us to troubleshoot if we're having issues with variables or using variables and we can't figure something out and you need to really like see at the low level exactly what's being sent and received um then we can go here to post on console okay if you don't this little icon down here on the left then you can go to view show postman console or use your little shortcut here um it might be different on Windows but yeah just looking like view or something or or or google it you can find the console Oh or whatever version of postmates using but that pretty much wraps up variables for you guys we're gonna get into environments next a little bit involved actually creating environments in blah blah blah and setting variables within dos all right you guys so now let's go over environment okay so I said earlier environment is just a set of variables and that's exactly what it is like literally it's just a set of key value pairs that we can turn on and have it applied to something to whatever right the I'm actually gonna do the example that I did the Amazon eBay we're actually gonna do it I mean we're gonna go through with it and um create a environment for Amazon and create Amazon I'm an environment for eBay and then be able to hots off between those two collection environments to run the same amount of requests the same series of quests the same collection of requests to search both websites based on the environment so on before we get into the environment though really quick let's go to a collection here I mean collections again I'm on my Amazon searches and then if I click this little arrow and and click run then I can actually run the entire collection okay which is just gonna run each of these one by one alright we have a bunch of different settings here I'm not gonna go over this right now let's just click run Amazon search collection and it's running it says little progress bar here 50% running one iteration no environment that's uh note that this is no environment here very important we're getting our responses back and it's almost done we're taking a little bit there we go and it's done so get all our results back run summary yada yada it's not we're not going over this right now but I just want to show you that you can run everything in a in a collection all the requests in a collection this is no environment so what we're actually going to do is we're going to create a collection of searches and then create different environments for depending on which environment we're running those searches in in our case it'll be Amazon eBay and then we can actually hotswap those environments in and run the same requests with those different environments okay which is really cool because then we can create environments for maybe Google um shopping or any other searching shopping websites that all might exist so yeah let's let's start with just duplicating oops let's start with duplicating in this collection I don't want to get rid of it that's why so just go to duplicate cool here it is and now let's close both of these don't save and don't save whatever did it save those variables no it didn't that's cool though alright so let's go into here and now let's just change the name of this um to shopping website search cool and then oops actually searches okay cool and then here it'll just be we rename this to just iPhone so just iPhone this one's going to be just MacBook and then of course we can add more that we want whenever we want but we're just gonna do this and uh okay let's get started so um I think we should create the actually let's do this first let's just oh now I think we should create the new armor first let's go up here at the top left you can click this button and there's little window pops up environment we can click this or you can just click this little drop down menu and click environment here which is what we're gonna do so now the environment is just going to be Amazon Amazon okay and then for variables we can set all the variables one for this environment so what we're going to set is going to be I believe shop being website is think about I use before and then for us it'll just be Amazon calm cool and then also we're going to use search oh sorry actually don't need these in here silly me and then also we need search endpoint yep search endpoint and that will be just slash s and I guess we can put WWE don't need that screw it like that and then also search term and that will be K alright so as you can see we have amazon.com slash s and then we're gonna our parameters and it's going to be K and equals whatever it is and but then we have these nice variables here okay shopping website search endpoint and search term okay so let's just add all these all done here's our environment with the three things in there and now let's go back to here let's go to here and instead of Amazon we're going to use shopping website okay and then instead of search term I mean we're going to use search endpoint all right and then a set of K we're going to use search term all right and um yeah then iPhone stays because its host be iPhone so that is it let's send this it's probably not gonna work because we're not in the we don't have the environment set for it okay for this request which is okay but let's go and do the same thing for macbook so actually let's delete this one delete macbook and then just duplicate iphone duplicate and in here we will just rename this to macbook cool and then also we're going to just change this to macbook and that's pretty much it okay it's not gonna work again it's broken it didn't copy all this over all right copy that in just like that okay well I'd save this one I'd save on this one maybe that's why I didn't I'll duplicate correctly because I didn't save it alright so now that we have these two these two searches this is going to search for iPhones depending on any websites we have the website and then whatever search think we have to add on to it and then also the term that is required to search for an item on that website and we have the same thing for both which is cool but now now that we have this let's actually this collapse this let's actually set up an environment now that will arm well we already have the Amazon one set up so let's just run that okay so let's go to shopping website searches let's go to run okay and hopefully I typed in all of these variables correctly there's no typos let's go down to here so as you can see we have two searches to request your iPhone and MacBook with those variables in place and then if we just go down to environment and we select Amazon the one we just created um earlier and one iterations no delay you can set delays like between the searches I mean through the iterations like if you want to run on everything twice then you just put two iterations and then you could put like delays and whatnot but yeah let's just go there the main point was just environment you want to show you guys this and then when we run it you can actually see that the request that's actually being sent is amazon.com /s query parameter K equals iPhone okay and same thing amazon.com / s query search term equals Mac Book okay so everything's going correctly it's just a bit slow sorry this computer is not that powerful I should probably use the other one but it's not so bad alright cool so they both work correctly we got the green checkmarks and that was wearing the collection in with the Amazon environment so now let's create in ebay environment then we can see how we can use two different vironment for the same collection and run this collection over and over again depending on the environment we choose okay so let's go to here so new environment and actually I think if we just go to Amazon I think we can duplicate it is this duplicate or can we duplicate there we go duplicate perfect that makes it nice and easy it's not just going to here and instead of this we're gonna say eBay alright and then now now that we have all the same variables here now now I can't make any typos perfect we can actually change it so instead of amazon.com now we're going to have a bay comm of course all right update oops you better calm and then the search end point I believe for eBay I looked it up earlier the search end point is a little bit weird it's this ok it's not just /s like Amazon it's actually this alright and let's just pop those in there like that update and then last lastly the search term is also kind of funky it's ampersand underscore and kW whatever that means instead of just K but the point is that we're gonna put these in here like this update alright so now we have Amazon and eBay let's close out of here and now we have our commands here now if we go to this collection and we hit run and this time we can select eBay or Amazon and then run the file or run the collection then we can see that we are getting ebay.com / SC h / HTML and that one too and you can see that they both passed and it was it was filled out correctly because of the environment use but we were actually ran the same exact collection it's just with different environments okay so that's pretty simple like literally all environment is just a bunch of key value pairs let's go here again environment and you can just set them all and then you have a bunch of different vitamins and then you can you can like select these environments like if we're ho here in Amazon okay if you have this selected here well let's do a okay if we were in eBay and then um then we sent it let me go to preview then we can actually see that there was i phone searches in ebay here okay because we have it selected and same with macbook it is gonna behave the same exact way and there we go oh and I realized I didn't actually show swapping so really quick we had the eBay MacBook search here let's just run this again so running fresh and then all we need to do we see we have our macbook our macbook search results on ebay all we need to do is just hot swap to amazon the amazon environment and then running it again the same exact request we're just in a different environment and it'll load suddenly we are on amazon searching for macbook as well okay so that's the power of environments now we can you could add on like different technologies you could change to like oh technology website searches whatever and then have like iphones MacBooks i don't know i watches whatever Apple watches any anything else you want but yeah that's environment so you guys hey you guys so now we're gonna go over writing scripts and postman I've specifically pre request pre pre request scripts it's hard to say as you can see over here that I'm clicking on and I'm also tests you can write tests the difference between these two is we can both of them are scripting pretty much but pre request scripts will run before it runs the request and then tests run the tests both the response comes back so it's kind of like okay where we can edit the request here by um running scripts and then when the response comes back then we can run tests on the response to make sure um things are coming back as expected but right now I'm gonna go over just pre request scripts first um you can have this in many different levels you can write these at the collection level so it applies to like everything in a collection when you run a collection it'll run this script before every collection and every request and likewise with scripts I mean I'm like rise with tests that it'll it'll apply to all of the the entire collection that as you can see here I click on edit collection and there's also pre request scripts and eight um option here for collection so you can write it at the request level like I am right now per request or you can write the collection level and I believe you can even write it like other levels but we will just be focusing on this because it like if you understand one then you can apply it to all the different levels and it works just fine all right so let's let's go back to I'm in this collection right now with the environment we have the environment of Amazon and then we're running the the iPhone search term and let's just say I wanted to change some variables that's a very common thing to do in the strip's change some variables before we run the request okay so let's say we have like okay we have this whole thing here and we're searching for iPhones well I want to show you how maybe we could change that so like I mean obviously we can just go to the parameters and change this iPhone to Apple watch or something right manually right here but maybe we didn't want to do that maybe we want to like test it like on a different parameter or something like oh if if iPhone has no results blah blah blah or something or iPhone something and anything then you can just change it like on some parameter like basically you can you have full flexibility because you're just coding out here but I'm just gonna show you how you can get variables and set variables which is the most common thing you would do most basic thing you would do in pre request scripting okay so if you if we go to this upper end thing on the environments and then I click on Global's you remember that I set a global variable called my name and set it to my name Erin you know the current value is currently airing and this is all we're going to need I'm just gonna use this use this as demonstration purposes to show you how to do this so um we are in a pre request script for this request so what I want to draw your attention to is here on the right there are something called snippets a bunch of snippets here and pretty much what these do is they just allow us to it writes code for us automatically very easily so that we don't have to like code it all from scratch so as you can see we can get an environment variable we can get a global variable we can get a variable you can set all these variables we can clearing variables on all the stuff we can even send a request we can send a request within the script before we send this request and stuff like that as you can see like well it's going to this URL blah blah blah and then like just printing the stuff out to the console as when I clicked on it you saw that it auto complete which is pretty cool but we're just gonna use one just to show you you guys you can explore all of them yourself if you want but in this priam request script I'm just going to get a global variable okay well actually first let's comment that out this is a node GS I believe if I'm not mistaken so you probably need to know that to make you submit but not really because you can just use these snippets and kind of get it done and if you're not a program in general then you can kind of figure it out but let's just do console dot log first okay and let's just go hello world okay just to show you how this script will work we have this here and let me open my let me open a fresh postman console there we go and it's going and now it's empty but let's run this request okay go back here and as you can see hello world popped up in the console alright and before the request was sent you see how that works hello world was printed and then the get request was sent okay and then if we go back to postman we can see that yeah we look for iPhones and I was on cool now now um that we know how to print we printed hello world now I want to get I actually let me delete this if you guys forgot I want to get a global variable so I just click on this snippet and boom that's how I get a global variable remember I had the global variable of my name so it's this variable key every variable is a key value pair so what is the key of that variable well it was just my name like that okay now you can even see it autocompletes for you with the initial current and scope tells you global and then you just say my name and then we can actually print this out as well if we needed to okay so let's run this again go back to the console as you can see hello world printed out as normal but also Aaron printed out which is the global variable my name okay and then we sent the request because this is a pre request script so again we can do all these cool things you can also like like set variables within here cuz of course you can code you have full control over everything and go like this and then have variables in here and then you could like like check can be like if if my name equals Aron yada yada you know stuff like that or whatever however you want to type it all pretty much you can do anything you want in here I'm just showing you the the basics and then you're free to problem solved as you wish so that's how you can like set variables and whatnot and print them out in pre scripts um one more snippet I want to show you is actually setting so let's just set a global variable and now it says they're asking for the variable key so this is gonna be my name okay and the variable value I want to put it to my last name which is just Bernath alright so this is going to set so we have we're just gonna print hello world and then we're going to get my name which is gonna be Erin it's gonna print out and then actually let's close this so that doesn't get confusing let's open up a fresh one this is irrelevant I'm just showing you how to how to save a variable I'm going to delete that and then then we're gonna set it and then we're gonna do it and then we're gonna print it again alright just like that so right now the global variable is iron right there as you can see and the postman console is empty and let's hit Send on this get request wait for things that come in as you can see hello world popped up okay Erin and then Erin popped up because we printed it out and then we set the my name Google variable to Bernath and then printed the burneth variable the my name variable again which is verrat my last name and then it sent the get request okay and actually if we go up here to global variables we can see that the the value of the global variable is actually changed okay so that is pretty what you can do in pre request scripts I mean you're able to basically modify all of the variables like if you want to modify these environment variables instead of as we're in the Amazon environment variable right I mean we're in then we're in the Amazon environment right so we I could actually go in and get these variables out like Amazon calm and slash s and K and stuff and I'm going there and actually change those just by calling these things like get an environment variable PM stands for post mates in case you're wondering PM post mates dot blah blah blah or postman not post mates I guess I'm getting hungry and then set environment variable to same deal and then regular variables of course so that's kind of the general idea maybe like you wanted to be able to change the iPhone thing like I mentioned earlier like you like basically you're able to just use code to do whatever you want with the request so you have like full control over all of it okay so that's pure um request scripts um now we're gonna get into testing which is very similar alright so testing so writing test scripts like I said earlier is testing the response that we get back from a request okay so we are going to try that now so I found a different API here other one was giving me a little bit of trouble with it um but this one's cleaner and easier the JSON is is just cleaner so we're gonna use this one let me just run the command so you can see what it looks like it's HTTP rec rests which is probably request response NDP I've at slash users it's just like a dummy API that we can use there's some nice JSON here very similar to what you're using before but um yeah so now let's write a test let's just go straight here and just start reading it so this is the response we get back okay as you can see there's a bunch of different stats here like the status 201 okay and then time I took in all that stuff from the size of it but if you go to the snippets here it's actually a little bit different than the pre request script if you go to pre request script we can see there's only a few here but if you go to tests then there's a bunch there's a bunch of different ones ok so let's just go through some of them and I explained the most common ones and some useful ones obviously we can get environment variables and global variables just like we did before environment variable like we're currently in the Amazon environment so if we looked up if we looked up like the shopping website or something like that let's take a look if we looked here if we type in any one of these we get the value out okay same thing we can actually set those from here if we wanted to after the tests came back so maybe like if the response came back and then we did find something we did find a term or whatever above what like we found what we're looking for then we could like change them with the variables and run another request and like chain them together like that but that's not what we're doing right now um you can again it send a request but here's one that is immediately catching my attention that's pretty simple and easy to understand status code code is 200 so if I click this ok this pops up it says postman dot test status goes 200 and then I just make sure that the status is 200 so when we ran this we got a 200 ok so let's just try to send this again and see what happens ok if we go to test results it says there was no test for this request but now if we go run this again ok with this test in place as you can see test results now has 1 out of 1 so let's go to test results 1 and then as you can see it's as it passed because status code is 200 because status code was 200 ok but let's say we were checking for let's say we type in a bogus URL okay so like I'll just type in a bunch of F's here this URL I don't think exists when I run this then maybe it does exist or something hmm I'm trying to get it to fail here we go send API slash users slash ten or something come on just give me a just give me a four for when I need the four or four area um air it doesn't pop up oh my goodness alright well the point is if I was getting a 404 error then this would feel actually let's go like this okay did this will demonstrate what I'm trying to demonstrate let's just go to there we go test result failed so the check we're making was we wanted the status code to actually be 404 we're trying to make sure that it is 404 and that's when it is considered passed so since we got a 200 this is actually considered to fail so it says fail status code is 404 the expected the status code 404 but got 200 which is kind of a funny thing to check for but that's just demonstrating the idea okay so that's testing results pass and fail and also when we run collections like these test results come in handy because when you run the whole collection then all the tests will to come back together which is nice okay but let's change this back to 200 okay because that's the proper functionality and let's just keep going down a few more so we can check for code is 200 what else responsive body contains string so let's let's do that okay so contain string let's just click on this and then we're just making sure that there's something in here is um is there so let's just grab Janet okay and then just like pop this in here like that hit send again and as you can see boom now we have test results two out of two and it says body matches string okay which is because Janet here is there however though if we put um Janet with a double tee then or I don't know let's put like Jackson instead we're looking for Jackson inside here which is not there and we hit Send then we fill obviously okay so as his body matches string I'm expected to see Jackson but it didn't see jacks it's pretty much what it's saying alright but of course we can put that we can put Weaver this should pass again because was Weaver right there that'll pass yep and that kind of explains that one okay but now we are starting to get some more interesting things so um the others also on here response time is less than 200 milliseconds this would be useful if like we wanted to make sure that our website is really fast or something like make sure it responds quick enough you know amaz almost taking kind of a long time okay like we could run like some tests in here and be like oh if response time is more than 200 then something's wrong blah blah blah display something pretty much anything we can just like test for the amount of time but I mean this is 200 but we can send it to a thousand if you wanted to we can put it to anything we want all right but let's just put 200 and run this as well we should have three passes cool and um now let's uh instead of just looking at just one and see what all the users we get the whole thing and again we have all the passes because of course that Janet data was inside the entire thing so it still passes but now now let's say where it gets interesting is or another one is you can like check the contenttype header so like okay make sure we're getting JSON back our mate make sure we're getting HTML back or make sure we're getting an image back or something you can kind of like specify the content time but you're getting just like enforce that you can check that out if you want but we're just gonna check this last one here it's called JSON value check okay so this one is cool because oops because it allows us to really dig into the JSON data and then we can really check things in like and make sure that things were correct like if we posted something to an API and we created it and then we went to I share it posted correctly when we get the response back we can like dig into the JSON response and whenever it makes sure like it was right and this in that like oh I'll make sure the post request was successful like actually here there's another status code request to make sure that the that the on post request was successful because 200 is for get requests right mainly forget requests it's like okay um status code 200 I found the web page here it is but um anything 200 is good but 201 and 202 I believe is if you post something it's like oh yeah we posted it it's good here's a response blah blah so I mean you can do that there's a bunch you can check them all out if you want but this Dom we're just gonna continue don't want this one so sorry so here um what's going on here is we are getting the json data back in the response so the postman response object we are converting it to a json file or json object with the json and then we just get json data here saved in a variable okay and now that we have json data we're able to just use dot notation to dig into any of this json that we want pretty much okay and then we could just say oh whatever data is in the json it needs to equal something and then we can use that as tests in assertions okay so let's just try this so json data so the first thing we have is page let's try page so because jace we have json data which is this here this bracket here then the very first thing is page the very very first level um this page so we can actually do this and this should should equal one so when i hit send there should be a fourth test and it should be passing oops oops i don't know what the issue is oh there we go I think that was the issue all right there we go I had a typo there so test results um the the page does equal 1 but like if we put maybe 2 here which is not equal then they should actually fail and as you can see yes it does fail because page the page thing here in this JSON is supposed to be 1 not equal to 2 but let's say we wanted to dig down like really deep like arbitrarily deep let's dig back down to jannat again okay ID 2 and just let's just make sure that her um her last name actually is Weaver or something like that okay make sure her last name is Weaver so how will we do that is okay we have our JSON data here you guys probably already figured this out if you know how to code but just I'm just gonna follow I'm just gonna follow through for a completeness sake but we're not gonna go to page we're gonna have to go to data which is also the first level so we can go directly to it but then once we're in here then we have a list all right so we have a list of JSON objects in here itself so we want to find Janet so this is a 0th one this is the first one so it would have to be indexed at zero data now we're in here okay and now we just keep using dot notation and we want last name right so now we just type dot last name our last name and now this should equal Weaver okay so I'm just gonna copy this and I'm going to pop this in here just like that but make sure it's a string okay because it's a string type and hit Send and this test result should come back is pass and apparently not let's see what the issue is oh because the okay this one let's say 500 less than 500 now we should all have a pass make it a little bit easier on us okay so actually this previous test field that wasn't the one that we just did so pretty much this is working as intended we're saying okay if the JSON data they'll be digging down below blah blah of this key if the value is equal to this then we consider pass if not like um if we put like huazi cool I don't know what that is but if we use that then it would fail okay you would say that the certian air Weaver but was expecting huazi all right so that is how you run test scripts in postman for your response objects um or from your HTTP responses or whatever you want to call it you can also run these at the collection level just like you could with the pre request scripts as well okay so when you run the entire collection then all these tests will be run after it and again you can you can make variables in here as you can see JSON data right here and you have full control over everything in the code with within your request any responses to really test anything you could imagine pretty much okay but I gave you all the basics that you guys need now it's your job to go out and actually apply these things to figuring out how to use postman to solve whatever problem with the API as you're trying to solve okay but that's pretty much it for scripting pre request scripts and tests and I'll see you guys in a few seconds to go over on the next thing alright you guys so now we're gonna go over pretty much the last thing in this postman crash course and that is setting up mock servers all right so I mentioned this a lot at the beginning of this crash course we kept saying old mock server this mock server that that's because up to this point we've been doing a lot of client stuff so we might have been working on or creating like dummy client arm requests so we can like create basically any client request we want and then we can send it to any existing API that or you exists and then get something back ok so we had flexibility around shaping what the client was happening with the client but the API is had to already be there in place now mock servers will allow us to do the flip flip option of that let's say the API doesn't exist okay maybe we're developing a client and a server for a client or something and both things need to be developed but the server doesn't exist but we need to build the client like one of them needs to exist to be able to test it so we are able to UM work on the server and then send mock requests to the server using postman which is what we've been doing up to this point we can just create whatever quests we want and paying the server but let's see we're all working on the clientside and we need to send requests somewhere and get a response back but the server doesn't exist yet okay if the server doesn't the API doesn't exist then we need still need somewhere to test it so that's where mock servers come in we can create mock servers which basically says oh if there's a request to this URL yeah this specific URL on the server then reply with this we're basically gonna be hard coding in responses to specific requests so like if it's if if like oh this specific request ins with these specific headers and this specific URL and all this yada yada comes in send back this specific response be it JSON or HTML or whatever kind of data were sending back the entire response object with its own headers and everything so it's kind of an overview of what we're gonna be doing now we're actually going to postman and go through actually doing an example with this you can see see how it's done and maybe understand it a little bit better so let's first start with creating a new collection okay so you need a box server I mean we need a collection to create a mock server because every mock server has a collection associated with remember a collection is just a group of requests and that kind of makes sense because we need a mock server up and running and then we're gonna have a bunch of requests that can be sent to that mock server and it's just nice to have all of those requests together in a collection okay so I'm gonna call this mock server requests name of this collection because this is gonna be when she requests going to the mock server and let's hit create so that's done but there's zero requests in here so let's just add one request really quick and we're just gonna call it request one alright so this is gonna be request one and um we just need a after we're done creating this request basically we're gonna have to have on the mock server know what to reply when this requests one specifically this request one comes in so let's just create request one there nice so we have a collection we have the request that we're gonna send to the mock server and now we actually need to setup the actual mock server within um that's associated with this collection with this collection so we hit this little button here and if you go over to the right here on this tab it says mocks and it says this collection is not being mocked okay a mock lets you simulate endpoints and their corresponding responses and collection without actually spinning up a backend so that means yeah if the back end doesn't exist then we can simulate endpoints and points are just URLs pretty much like the path like oh if you reach this certain URL path then um then do something respond with something so let's just create um click create mock uh create a mock server and now we're just going to create a mock server so we're just gonna call it mock server all right very straight for I'm create a version tag this a little bit Vance we don't need this right now she's saying if this server is going to correspond with a specific API version maybe we're actually working on a new version of an API instead of like creating some from scratch and then we have to have a version yadda yadda but those are details that only matter when you're actually doing them and then also you can have environments um I'm just gonna click no environment but you can choose to import all the environments for this mock server so that all the variables that you have in that environment are already existing but we don't need that now either and they make this mock super private we could if you want but then you'd need a API that occation key and all that stuff and we're not gonna set that up right now so we're just gonna keep it public so let's create and create the mock server and that was pretty easy right it says mocks ever created we are done and I'm all you have to do is to call them mock server is just go to this URL alright this URL right here in orange and pretty much what this is saying is ok this is your mock server so when you go to this URL anything that comes after this like treating this as a domain and it comes after this can be um created as a mock server API so like ok if you like ok slash users or something um this slash users then you were gonna have to need to send something back basically this is just standing in for the domain maybe if we had an API in the future like this would act like if we were actually working on a project that needed a server using PHP or whatever server code you want to use or Django or flask or whatever then it would be like okay WWE my server calm slash API or something instead of this here but this is just a standard alright so on that little URL is right here it pops in as you can see now when we go to mocks then the mock server is here and there's a URL associated with it which is pretty cool so we're basically saying when you reach this URL then we are now integrating acting with our mock server so now we can start creating hardcoded responses to specific requests so if you click this button it's gonna copy the mock URL all right and now we're gonna go to the request ok let's close on with these tabs we don't need these anymore all right so now we have the request open and let's just pop in the mock server base URL okay the very base one the domain and nothing else let's hit Send and see what happens and as you can see this thing pops up okay this is the response we got so if we're writing if we run a get command just to the base mock server URL that we have then we get an error back and it says mock request not found error as in whatever's associated with this there was no response associated that we didn't find and the message says this collection does not have any examples um an example of something we're about to create it's a thing in postman right up here on this top right we're just about to talk about it but it says this collection does not have any examples please examples to the requests in this collection to enable mocking okay so all an example is is just the response we're gonna send back for a specific requests so so we're basically gonna say um well let's just go here up the examples okay it says no examples added save responses and associated request examples so we're just gonna click add example okay we get this new tab as you can see over here if this says get this is a request and then if we go here this is an example it actually says ie um eg dot which is a Latin abbreviation for example for example I think it's like or go something but it doesn't matter but so this is an example tab and now we can see that this example is actually set up so if when we were when we sent our question we got this response and the cool thing is that this response is exactly the same as what this response down here is okay that's because we're saying oh when we hit when we're in this example we're saying well we hit this and we hit this URL with these parameters and these headers and this body in other words anything the example requests up here anything in this white box whatever um this is specified exactly whenever that exact thing comes in to our mocks server then give this exact response okay so this is the base mock server and if we send that with note with no path coming after it with nothing after it at all and nothing else in it at all send back this JSON data with a 404 not found status okay and then have all the headers and stuff okay this is JSON and this is clearly JSON so let me go back to the request and we send this again that explains why we're getting this okay sent that's what we're getting this like everything this is actually an error that was Auto created by postman now let's say we actually typed in something crazy like like whatever a bunch of stuff and then we hit Send um then we get the same issue um I think postman is just like autocomplete into whenever there's something doesn't exist then this pops up which is very handy but what we want to actually do is create a new example or did I save it what we actually want to do is create a example for um maybe another endpoint another URL so we can actually see how that would go now okay so let's go let's just duplicate this to make it clear so duplicate this and we are going to rename this to request to okay and copy that in there and then we're just gonna say users okay and then here this example well actually we can just go back up here and just create another example and then we're going to call this response all right so we request one response one which was just a base and we're getting back this error and then now we're doing a request to in response to so now I actually want to add in something different so if we actually reach this um URL endpoint the mock server or base domain + users then I want to reply with something different okay so here we have it filled out on parameters I'm just gonna keep it light it makes sense it should be pretty straightforward that you can put in whatever you want here okay but I'm just gonna keep it empty because that's unneeded so we're just saying when we hit this URL end point then send a 200 okay response and then let's send um you could just send raw text so it could be like okay hi whatever but let's just send back JSON data so let's check JSON data as you can see you can send back XML or HTML or anything but let's just send back JSON data and it says slash users so let's um let's just make some dummy JSON data okay so this is gonna be the hardcoded response that we're gonna have to this very specific request and then let's just say um users like that and then we just say like name is Erin and ID is one cool and then let's just do the same thing um there we go but let's change this to name is cause II and ID is okay very straightforward so I just create some dummy JSON here as a response so now we're saying on this mock server whenever somebody goes to this mock server um slash users then reply with this JSON data okay this JSON data with the 200 okay response okay and I think we need to actually say some of the headers too so let's just go into here other one and um maybe just copy all these or let's just run it and see what happens okay so let's run this alright guys so yeah I don't know why I wasn't getting the correct one maybe I didn't save it or something but now it's working so I created this this hardcoded respond to this JSON down here like we just did a few seconds ago and now um I go into this slash users in point URL and now when I go to request um to and I go to that same exact URL at the same endpoint slash users and I hit Send then it works as expected I didn't change anything okay um I don't know what it was I think it was yeah I just don't think I saved but if we view this as JSON then you can see that the response we get is exactly what we said the example should return we said example should return this stuff if we go here and when we actually go there on a request that's what we get back very very straightforward okay um originally I thought it was because all the headers weren't there but we don't need all them but I mean we can fill it out if you wanted to all these headers here the easiest way to just be like I actually duplicate this other one that has all of them in there um here and then all the headers already there and then just copy and paste all of this code this was JSON response instead and to here like this okay paste that in and then let's just actually call this response 2.5 and um say slash users I guess we're doing this really quick and save that ok should be saved users yep um and let's just put Aaron 2 in Kazi 2 just so we're aware that it's the right one a little difference in the response so that's saved let's just let's just delete this one I guess response to it delete and there we go so that doesn't exist anymore now this example should be associated with this endpoint so now we go to this endpoint again and we hit Send then as you can see Aaron and Kazi to pop up which is the change we made and all the headers are there okay which is that once we copy it over so as you can see it autocompletes to json before remember it was just like Oh autocomplete comm HTML and it was looking kind of ugly that's because we didn't have the content type set to JSON and stuff because there is no headers and some of these headers are are mandatory by good practice pretty much but that really simplifies things if we just copy over all of the headers from the original example okay over here and that's pretty much it you guys for mock servers so you're able to create a collection with a bunch of requests in it and then you have a mock server base domain associated with that collection and then all the requests you send to that domain can be given hard coded responses by creating examples okay and that's pretty much the overarching logic of it very simple just remember that and you guys can pretty much set up any mock server you want so any request that comes in you can specify exactly what you want to get sent back so it makes it very easy for developing clientside servers or clientside API s and whatnot so that should be it for the post in crash course pretty much thanks you guys for watching hope you guys learn a bunch and I hope you guys have fun playing around with the API is whether it be your own or ones you find on the Internet yourself there's a lot of cool ones out there but yep that pretty much wraps it up you guys good bye hey what's up you guys so if you'd like that video if you have an epic threepart free master class that teaches you how to go from complete zero to becoming a sixfigure freelance developer with Python if you want to check it out they click click the link below in the description there should be a place where you can put in your email and your phone number and your name and you can sign up and you can get direct access about it there's a lot of free value there just go check it out I think you'll really like
