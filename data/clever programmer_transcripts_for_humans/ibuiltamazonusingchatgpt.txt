With timestamps:

00:00 - in this video we're going to be building
00:01 - the Amazon clone using chat GPT I hope
00:05 - you're excited if you want to follow
00:07 - along click the link in the description
00:08 - below it's a replit link that allow you
00:11 - to Fork this Rebel so that you could
00:13 - code alongside me it is completely free
00:16 - so go ahead and do that and set that up
00:18 - we're also going to be adding a database
00:20 - to this using replit which allows you to
00:22 - set up postgres because otherwise if
00:25 - you're trying to set up postgres on your
00:26 - own it will be a nightmare now this repo
00:29 - that you're gonna click and access it's
00:31 - going to be a completely empty
00:33 - repository however it's going to have
00:35 - project assets for you set up there so
00:37 - just go ahead Fork that and start your
00:39 - project from there so with that said
00:41 - let's go now this is going to be built
00:43 - in about 12 steps so we're gonna follow
00:45 - along from Step Zero which is create
00:47 - replica project and we're going to move
00:49 - on to step one which is going to be
00:51 - create headers we're going to do that
00:52 - soon but first we just want to see if
00:54 - our replit is up and running and it
00:56 - should basically say react plus fight
00:58 - plus replied is an amazing package
01:00 - manager and let's go ahead and write
01:02 - hello here and that should work if any
01:04 - point you get lost all of us remember
01:07 - that the link is in the description
01:09 - below you could always Fork that and
01:11 - copy the exact project that I have built
01:14 - it's completely free to be able to do
01:15 - that on replit and so do take advantage
01:18 - of that okay but for now just follow
01:19 - along so I'm gonna say I want to build
01:21 - an Amazon clone with react.js let's
01:22 - start with the code for the header this
01:24 - should use functional components no need
01:26 - to use react router Dom for the
01:28 - navigation the navigation should contain
01:29 - home shop about and contact let's go
01:32 - ahead and see what chat GPT spits back
01:35 - out at us and it goes here's a
01:37 - functional component and it has home
01:39 - shop about contact length and it's
01:41 - creating a header component for us which
01:44 - is absolutely phenomenal so once we have
01:48 - this I'm going to copy that and I'm
01:49 - going to go inside of my source and I'm
01:51 - going to create
01:53 - I'm gonna go ahead and create a header
01:55 - component
01:57 - components folder put header inside of
01:59 - that and then I'm going to just paste
02:00 - the header component that Chad GPT gave
02:02 - me
02:03 - now
02:04 - once we go back to our main app.jsx I'm
02:07 - going to change that to divs and I'm
02:10 - going to go ahead and import the header
02:11 - component we just wrote
02:13 - so let's go ahead and type in header and
02:16 - let's go ahead and import our header
02:17 - component from components
02:19 - there we go and now we could see it okay
02:22 - next up what I'm going to do is we're
02:24 - going to go ahead and we're already at
02:26 - step two so good job you're making
02:28 - really good progress so far out of this
02:30 - 12 steps and now what we're going to do
02:32 - is we're going to style this header with
02:33 - inspiration from Amazon styling
02:36 - so let's see how good of a job Chad GPT
02:38 - does in being able to do that I think it
02:41 - will I think it will do a decent job
02:43 - let's see like this is so cool
02:45 - especially for people like me who are
02:46 - terrible at styling like you could just
02:48 - get this stuff and go back and pop that
02:50 - in and it just boom done for you that is
02:53 - crazy that is awesome that's exciting so
02:55 - for those of you guys who are afraid
02:57 - don't be afraid this is not going to
03:00 - replace you supercharging you right I'm
03:02 - still the one driving and telling it
03:04 - what I need
03:05 - and it says Hey basically once you add
03:07 - the styling you also need to go change
03:11 - you'll also need to go change your main
03:14 - file and import CSS so I'm going to copy
03:17 - this code and I'm going to replace my
03:19 - header component with this new code and
03:21 - then I'm going to copy the styling and
03:23 - paste that in okay so that's what it's
03:26 - saying so let's go ahead and copy that
03:28 - come back to our header and I'm gonna go
03:31 - ahead and paste that in here so now I
03:33 - have import CS import header CSS at the
03:36 - top
03:36 - remember Chad GPT will not always give
03:39 - you the same stuff so if you're writing
03:41 - the same exact prompts as me and you're
03:43 - freaking out why you're not getting the
03:44 - same stuff kgpt will give you different
03:45 - stuff it's artificial intelligence okay
03:47 - it's not like a search engine so you're
03:49 - gonna get different results your thing
03:51 - might look different than mine but just
03:53 - you can use
03:54 - and follow along what I'm doing and be
03:56 - able to ask it the right questions and
03:59 - produce similar results to mine even if
04:01 - you don't produce exact results to mine
04:03 - if you want to get the exact results of
04:04 - mine Fork the replit in the link below
04:07 - let's go ahead and components let's
04:09 - create a header.css and we're going to
04:12 - go ahead and copy our CSS from chat GPT
04:14 - and I'm going to come back in here and
04:15 - paste that okay now that I have that
04:18 - pasted let's go ahead and look inside of
04:21 - our header.jsx and it seems like our
04:24 - import okay there we go we just needed
04:26 - to call it header with a capital H so
04:28 - there are a couple of things you'll need
04:30 - to figure out yourself with Chad GPT
04:32 - it's not going to be doing everything
04:33 - and boom look at that we already have a
04:37 - nav bar that says home shop about
04:40 - contact and styling was already done so
04:42 - we didn't have to worry too much about
04:44 - the styling I mean for somebody like me
04:46 - that is absolutely beautiful and
04:48 - wonderful news
04:50 - all right now we're going to make the
04:51 - header look more like Amazon styling
04:54 - okay
04:55 - so it says sure to make the header look
04:58 - more like Amazon styling you can add the
04:59 - following elements to the component
05:01 - and now it's going to give us an example
05:03 - of what to add so here we go okay so
05:08 - it's giving us a bunch of stuff and you
05:10 - can see it's using a bunch of icons as
05:12 - well right the FASFA shopping cart and
05:15 - stuff like that that we're seeing
05:17 - right around here right it's using icons
05:20 - and so that's great
05:24 - let's go back
05:25 - and then in the styling it's saying Hey
05:27 - to resemble that we'll need to add in a
05:29 - header section a header left a logo
05:31 - search form and search input and search
05:33 - button and that's perfect because if you
05:35 - you know I'm sure Amazon styling is
05:38 - embedded in your head if you can
05:39 - visualize it in your head Amazon has all
05:42 - of those things there right so we're
05:44 - going to add all of these things in
05:46 - ours as well if it ever ends abruptly
05:50 - like how it did you can use this search
05:52 - this term called continue and that will
05:55 - just make it continue writing
05:57 - so it goes sure here's the continuation
05:59 - of the CSS
06:00 - so it's giving me all the CSS now
06:03 - account drop down
06:05 - fa shopping cart how to style it etc etc
06:08 - so we're gonna go ahead copy that whole
06:11 - thing
06:12 - okay or you could just hit copy code
06:14 - whichever one
06:17 - and let's go ahead and we're going to
06:19 - copy the styling
06:21 - let's go to header.css and we're going
06:23 - to paste that
06:25 - and let's go down
06:27 - and copy that as well from nav a lot and
06:30 - we're going to paste that as well okay
06:32 - so now with that styling you can already
06:35 - see that the margins are longer in
06:38 - between and The Styling is starting to
06:40 - look a little bit better
06:42 - and I'm going to ask you hey can we use
06:44 - the same background color that Amazon
06:45 - uses for their header
06:47 - the background color for Amazon's header
06:49 - might change over time but as of my
06:51 - knowledge cut off date Amazon's header
06:53 - uses a dark blue color for their header
06:56 - okay so it's also smart letting you know
06:58 - hey I have historical data I don't have
07:01 - access to real-time data but based off
07:03 - of that this was the background color
07:04 - that we're using
07:06 - cool so we're going to grab that
07:07 - background color
07:09 - and we're going to replace our
07:10 - background color with the Amazon's
07:12 - background color
07:13 - so let's hit it and boom we're getting
07:18 - that dark blue
07:19 - okay now the next thing we need to do is
07:22 - grab the
07:24 - updated section that it gave us okay I'm
07:27 - going to copy that come to header.jsx so
07:29 - I just copied all the stuff that he gave
07:31 - us for the header
07:32 - and I'm bringing that over to this now
07:36 - okay and we'll paste that in so all the
07:38 - shopping cart icons and everything okay
07:41 - now header.css is giving an error so
07:43 - let's make sure to change that to header
07:45 - with a capital h
07:47 - and we need to say we need to import
07:50 - let's create another folder we'll call
07:53 - it assets
07:54 - and inside of that folder
07:57 - we're gonna drop in the Amazon logo
08:00 - okay so you should go ahead and grab the
08:02 - Amazon logo we'll link it in the
08:04 - description below or you could just grab
08:06 - it
08:06 - from online just get Amazon logo PNG
08:10 - put it in your assets folder
08:12 - and here we're going to say import logo
08:14 - we're going to say go to assets and grab
08:16 - the Amazon logo.png
08:19 - so now it's able to pull that and we got
08:22 - the search bar and we got the search
08:24 - button that is absolutely crazy it's
08:28 - already looking so damn good none of the
08:31 - icons are showing up but remember for
08:32 - the icons we're going to need to import
08:34 - things okay now it says instead of using
08:37 - now let's ask it instead of using font
08:39 - awesome because it's using font awesome
08:41 - currently
08:42 - we're gonna say hey can you show me how
08:44 - to implement the icons
08:47 - with the react icons
08:49 - and it goes sure you can use react icons
08:51 - library to implement icons in your react
08:53 - applications
08:55 - so it's so freaking smart right it even
08:57 - understands icons and now it's like okay
08:59 - I'll show you how to do the same thing
09:00 - with react icons so we can go ahead and
09:03 - install react icons now
09:05 - and then it says hey
09:07 - just do it like this fa shopping cart fa
09:10 - bars from react icons and that should be
09:12 - able to do the trick and it's telling
09:14 - you exactly what you need to do
09:15 - in your files okay so let's get past
09:19 - that fast and now we're going to come
09:21 - back to our app
09:23 - okay we're going to copy this
09:26 - we're going to come back to our app
09:28 - okay and let's go
09:30 - and it says and I pasted that over I
09:33 - pasted that header code over this and
09:36 - now we got the react icons as you can
09:38 - see fa shopping cart and Fa bars and
09:41 - we're just gonna make sure that our logo
09:42 - is coming from assets Amazon logo and
09:44 - our header CSS with the capital h
09:48 - okay
09:49 - perfect now let's stop it and run it
09:53 - again
09:54 - and you could see that at the bottom
09:56 - it's installing react icons
09:58 - let's open up the web View
10:01 - and there we go we're starting to see
10:03 - the icons
10:06 - and this is what's nice about replit
10:07 - like this is already deployed and it's
10:09 - already online so you could use this as
10:11 - you're building and you could also share
10:12 - it with anybody you want
10:14 - so let's see what's happening here
10:17 - let's go to our header.jsx okay
10:19 - everything looks like it's opening and
10:21 - closing correctly so that looks good
10:24 - and let's go ahead in our header CSS and
10:27 - in our header I'm just going to add
10:28 - display Flex
10:30 - and boom just because I had to display
10:32 - Flex you could see that it's now
10:34 - starting to look great
10:37 - it doesn't look weird like how it was
10:38 - looking earlier now let's say hey make
10:40 - sure the navigation header left and
10:42 - header right fill the space
10:46 - in the header
10:47 - okay so now I'm starting to give it
10:49 - Specific Instructions just massage it to
10:52 - give me the correct things that I want
10:54 - and it goes sure you could use flex grow
10:57 - and add it to your header left nav and
11:00 - header right classes so now starting to
11:02 - show me my header left add flexgro and
11:05 - my nav add flexgro and my header Right
11:07 - add Flex Pro
11:09 - okay
11:11 - and let's go back to my header CSS
11:14 - and I'm going to go ahead and add Flex
11:16 - one
11:17 - and I'm going to go to my nav and add
11:19 - Flex one and then we'll go to my header
11:22 - right and add flex1 here
11:24 - okay and let's look and now the spacing
11:27 - is starting to look a little bit better
11:28 - with that count going all the way let's
11:31 - add padding of 10x to header right and
11:34 - we'll add a padding of 10 pixels to the
11:38 - navigation
11:39 - okay and we'll add a padding of 10
11:42 - pixels to my header left
11:45 - okay
11:46 - so let's go and look now
11:49 - you can see that count is all the way to
11:51 - the right which is good
11:52 - okay now in my fa shopping cart I'll add
11:55 - a class name so now see we're working
11:58 - alongside chat GPT and this is what you
12:01 - need to be getting better at as well and
12:03 - I'm going to say hey I'm going to call
12:05 - the class menu icon
12:07 - and we'll create a new class called menu
12:09 - icon in my header CSS
12:12 - and we're going to color it white we're
12:15 - going to give it a font size of 20
12:16 - pixels
12:18 - and boom there you go now our icons are
12:20 - getting proper styling and proper sizing
12:23 - okay let's create a new div and let's
12:25 - add them there so they're within a div
12:26 - and then we'll give a div a class name
12:29 - of Icon so that way we can grab the
12:31 - icons and style that whole div better
12:33 - and we'll go display Flex on that okay
12:36 - and you notice I put a gap of 10 pixels
12:38 - there
12:40 - and you can see the icons are starting
12:42 - to look really good
12:43 - okay we can see the card icon and the
12:46 - collapsible bars
12:48 - for menu icon we'll give it 27 pixels
12:51 - and cursor pointer when you hover over
12:54 - it so there we go when you hover over we
12:56 - could see it properly okay so the nav
12:59 - bar is starting to look a lot better
13:00 - let's add a gap of 30 pixels in our
13:03 - header left
13:04 - as well
13:06 - okay and we're going to tell it hey can
13:08 - you fix the styling of the search bar to
13:10 - look to more look like Amazon
13:14 - okay so it goes yeah to fix the styling
13:16 - to more like Amazon you can use the CSS
13:18 - to change the size color and properties
13:20 - of the search bar
13:21 - and now it shows us
13:23 - we can align the items we can position
13:25 - as position it relative and it's giving
13:28 - a specific clear specifications for the
13:30 - search input on the width height
13:32 - border radius Etc color
13:35 - and then even what happens when we focus
13:38 - over on it and what happens to the
13:40 - button what happens when we hover over
13:42 - onto the button what should happen
13:45 - so adding all of those things okay so
13:47 - I'm going to copy that code
13:49 - we're going to go back to our app and
13:51 - we're going to go to our CSS
13:54 - and let's replace search form search
13:56 - input search button with what we got
13:58 - everything related to the search and
14:00 - paste it over that so I'm completely
14:02 - overwriting everything that had to do
14:04 - with search and now it's giving us a
14:07 - more Amazon looking search we're going
14:09 - to reduce the padding a little bit
14:11 - because it's made it too big so I'm
14:13 - going to make it point three instead of
14:15 - 0.5 okay let's make it point two let's
14:18 - make it even a little bit smaller
14:20 - okay now it's starting to look a little
14:22 - bit better and the search is starting to
14:23 - look a little bit better as well okay
14:25 - now we're going to make it so the button
14:27 - is inside of the search input the right
14:32 - side of the search input okay instead of
14:34 - the button being all the way outside so
14:37 - it goes to make the button appear inside
14:39 - the right side of the search input you
14:41 - could use position and write properties
14:42 - in CSS
14:44 - so here's how we do it
14:46 - spitting it out search button and you
14:48 - can see that the search button position
14:50 - is absolute whereas the other component
14:54 - other thing is relative so now it's
14:57 - going to allow us to put the search
14:59 - button within the search bar
15:02 - okay with this example the search button
15:04 - is set to position absolute and write
15:06 - zero top zero bottom zero we're going to
15:08 - copy this we're going to come back and
15:11 - we're going to replace everything
15:12 - related to search here and paste except
15:15 - for the search button
15:17 - okay the research button hover except
15:19 - for that
15:20 - we're going to override it over
15:22 - everything and paste it
15:23 - and there we go look at that Chan GPT is
15:28 - so freaking smart right it brought the
15:30 - button inside and it allows us to make
15:34 - that happen I mean that is so freaking
15:36 - cool
15:37 - look at that that is phenomenal
15:40 - okay now we're gonna go ahead and
15:42 - outline it to
15:45 - none so there are no outlines so it
15:47 - doesn't look weird and now it's starting
15:48 - to look a lot better right we got search
15:51 - now we're going to say Okay add products
15:53 - list with products so now we're going to
15:54 - move on so we're done with styling so
15:57 - we're done with step two out of 12. now
15:59 - we're going to go ahead and move on to
16:01 - step three
16:02 - so step three is going to be creating
16:04 - that product list
16:06 - all right then step four is going to be
16:07 - styling it so let's stick to step three
16:09 - here so at product lists with products
16:11 - that has styling that looks like Amazon
16:14 - so basically I just said hey man add
16:16 - products list with products that have
16:17 - styling that looks like Amazon for the
16:19 - Amazon clone that we're building with
16:21 - react.js and it goes sure to add
16:23 - products list with styling that looks
16:25 - like Amazon for Amazon clone you can
16:27 - create a component that runs there's a
16:29 - list of products and apply CSS styles to
16:31 - match Amazon styling
16:32 - so here it's mapping through and
16:35 - creating product list
16:37 - okay so product list is a component that
16:39 - takes in the products and then it just
16:41 - builds them out and this is fantastic
16:42 - because not only is it writing code for
16:45 - you but it's writing reusable code for
16:48 - you in such an easy way where you could
16:49 - just give it an array of products here
16:52 - and it'll just build them all out so if
16:54 - you gave it five products this will
16:55 - build it up for five products
16:57 - and each product it has you know image
17:00 - name
17:02 - price
17:04 - so this is so freaking cool this is so
17:07 - freaking cool okay so in this example it
17:09 - goes I've created a product list
17:11 - component that takes in a prop called
17:12 - products which is an array of product
17:15 - objects
17:16 - and then it basically breaks down the
17:19 - you know the nerdy stuff
17:21 - now it's also creating the styling for
17:24 - this product list and what that should
17:26 - look like and what the product should
17:27 - look like and what's a product image
17:29 - should look like and basically what
17:31 - we're going to do is we're going to tell
17:32 - it to continue and once it's done we're
17:35 - going to start grabbing all of this and
17:37 - integrating it intelligently because
17:38 - you're noticing now you can't just copy
17:41 - and paste
17:42 - like a good developer who knows how to
17:45 - use stack Overflow you need to know
17:46 - exactly where to copy and paste
17:49 - as a key skill so
17:52 - let's keep going through this it goes
17:53 - I've added styles for the product
17:55 - details including the product name
17:57 - okay
17:59 - so let's go ahead and grab this product
18:01 - list component let's come back in our
18:04 - components we'll create a new component
18:05 - called product list
18:07 - and inside of here I'm going to add the
18:09 - product list that it gave us
18:11 - cool
18:12 - let's go back
18:14 - soon let's create another components
18:16 - let's create another component
18:18 - and we'll create the styling for product
18:20 - list.css
18:22 - and we're going to grab the styling
18:25 - and we're going to pop that into our
18:27 - product list.css
18:29 - okay we're gonna grab more of the
18:31 - styling that it gave and we're gonna add
18:33 - that as well so we've finished adding to
18:35 - adding all of the styling
18:37 - now
18:38 - we're gonna go back to our app.jsx and
18:42 - we're going to add in our product list
18:43 - component let's make sure to import it
18:45 - correctly product list from components
18:47 - slash product list
18:49 - and for product lists we're going to add
18:51 - our products
18:53 - and we're going to give it our array of
18:55 - products so here let's just create a
18:56 - demi array of products as well products
18:59 - and we'll give it um it's going to be an
19:02 - array of objects remember because
19:03 - products have different properties right
19:05 - it could have an image and a price
19:07 - description whatever whatnot
19:11 - so let's go ahead I'm going to call it
19:12 - const products
19:14 - and we'll build that out in a second
19:17 - uh we're gonna say hey make a status
19:19 - product list to pass to the
19:23 - products list component
19:25 - so
19:27 - uh it's basically just gonna give us
19:30 - uh I'm sorry I meant to say static not
19:33 - stat test so give me a static product
19:36 - list to pass to the product list
19:37 - component okay and you could even pause
19:40 - the prompt right and edit it and then
19:42 - ask it this is a new update that they
19:44 - made
19:45 - you could tell it to stop generating
19:47 - because it was super annoying when it
19:48 - would just keep going
19:49 - all right so here is the dummy list of
19:52 - products is giving us so we're gonna
19:53 - grab those products and we're gonna pop
19:55 - that in so it's so smart it's giving us
19:56 - ID name price and image because it knows
19:59 - our product list component needs that
20:01 - how freaking smart is this thing
20:04 - too smart so let's go
20:06 - and we're gonna cop that cop all of
20:10 - those products come back to our bad boy
20:13 - paste it in there we go now we got all
20:16 - our products with the images and the
20:17 - pricing and The Styling is showing up
20:20 - beautifully I mean of course it could be
20:22 - more beautiful but I mean come on this
20:24 - is things that for a bad front-end
20:28 - developer like me would take
20:30 - like
20:31 - five hours four hours and here we got it
20:35 - done in like what 20 minutes
20:37 - jeez
20:39 - or less actually probably five ten
20:42 - minutes
20:42 - since the video is edited for you all
20:45 - right here we go and now we're gonna say
20:47 - hey style the product list to look more
20:48 - like Amazon because right now it looks
20:50 - like poop it does not look good at all I
20:53 - mean it looks terrible
20:55 - so we're going to tell it to make it
20:57 - look more so add more detail styling
21:00 - to make the product list look more like
21:03 - Amazon okay so we're telling it to add
21:06 - some more detail styling
21:07 - okay and it goes to add more detail
21:09 - styling to the product to look more like
21:11 - Amazon you can adjust the CSS
21:14 - so it's telling us okay this is what you
21:16 - need to be doing with the product list
21:17 - and you can see grid template columns
21:19 - grid Gap so that is already telling me
21:21 - the repeat four and one that's already
21:23 - telling me that they're going to be four
21:24 - columns just creating that is starting
21:27 - to look nice right each row will have
21:29 - four items
21:30 - that looks more like what we need to be
21:33 - building and again I'm not a
21:35 - professional CSS developer or a
21:37 - front-end developer but I could look at
21:39 - that and go okay that makes sense
21:41 - it's moving Us in the right direction
21:44 - okay
21:45 - okay so let's go ahead and hit continue
21:48 - because I think it just froze there so
21:50 - I'm going to say continue from the
21:52 - product button
21:53 - and then it goes sure here's the
21:55 - continuation of the CSS
21:57 - product button
21:59 - it's finishing that up
22:01 - and it goes in this example of added
22:03 - grid layout to show the products in four
22:04 - column space between the products I've
22:06 - also added hover effects to make the
22:08 - product look more like Amazon's
22:10 - wonderful
22:12 - so we're going to go ahead and copy this
22:13 - code we're going to go to our product
22:15 - list CSS and paste it in let's go back
22:18 - and let's paste that into our product
22:19 - list CSS as well
22:22 - and boom We Got The Styling and we got
22:24 - the updates to the component
22:26 - and let's make sure to import The
22:28 - Styling because we're actually haven't
22:30 - we hadn't been using the styling at all
22:32 - so it might have had already a good
22:34 - styling but we won't know and look at
22:36 - that that is gorgeous you got the images
22:40 - you got border radius on the images you
22:42 - got a drop shadow effect you got a hover
22:44 - effect you got descriptions and the uh
22:47 - and the pricing styling looking
22:48 - different
22:50 - that is very nice
22:52 - that is very nice now we're going to add
22:54 - in some of the products so I just got a
22:56 - bunch of random Amazon Project products
22:58 - like the Apple watch you know wireless
23:01 - headphones you could grab whatever
23:03 - things you want I got shoes and they're
23:06 - all jpegs with like a white background
23:08 - kind of
23:10 - and well I'm gonna go ahead into my app
23:12 - and I'm going to import my Apple watch
23:15 - from assets Apple watch I'm going to go
23:17 - ahead and import my headphones I'm gonna
23:18 - go ahead and import my Nike sneakers and
23:21 - I'm gonna just replace the images with
23:22 - Nike I'm gonna replace the headphones
23:25 - um with the headphones I'm going to
23:27 - replace the Apple watch with the Apple
23:29 - watch here item three with Apple watch
23:31 - and there we go right all of them are
23:34 - starting to show up
23:36 - it looks beautiful
23:38 - height or instead of uh let's see if we
23:40 - can make the height 200 pixels hard
23:42 - coded
23:43 - ah that looks a little bit better but
23:45 - let's make it 175 let's play around with
23:47 - that a little bit
23:49 - okay that's that's fine for now let's go
23:51 - back and let's add in something for item
23:55 - four let's just add the shoes again
23:57 - and beautiful look at that so now we and
24:01 - we just updated the titles now as well
24:03 - so we just updated the titles to
24:06 - wireless headphones Nike running shoes
24:08 - Apple watch Nike so do that as well and
24:10 - everything will look gorgeous
24:13 - okay
24:14 - now we need to move on to step five
24:18 - we're done with four of the steps we
24:20 - just finished dialing the product list
24:22 - so at this point we have created the
24:25 - project created that we've created the
24:27 - header finish the styling created
24:30 - product list
24:31 - style the product list and now we're on
24:33 - to step five which is setting up a basic
24:37 - node Express backend
24:39 - so let's go ahead and set that up I'm
24:42 - going to go ahead and do Amazon with
24:43 - Chad GPT back end
24:45 - and we're gonna get started now here's
24:47 - what we need to do so we are going to
24:48 - need to set up postgres here which is a
24:52 - back-end database and it's so cool how
24:54 - they've made it in replica where it's
24:56 - all integrated so I'm about to blow your
24:57 - mind with this stuff so let's go ahead
24:59 - click postgres
25:01 - okay I'm gonna go ahead and say use
25:03 - Cycles to create DB so use a hundred
25:06 - Cycles okay
25:08 - go ahead and do that and set up your it
25:11 - says you're paying 100 Cycles which is
25:13 - one dollar a day
25:15 - okay and uh now I'm going to
25:19 - go ahead
25:21 - you know so I recommend you use this
25:23 - this will make your life so easy it's
25:25 - also really impressive and fast if you
25:27 - don't want to do it this way then you'll
25:29 - have to then postgres is a can be a
25:32 - nightmare okay so then if you're setting
25:34 - it up locally do it at your own Peril
25:35 - okay you're saving about a dollar a day
25:37 - which is what like
25:39 - I mean just don't eat like
25:41 - three bags of chips in the month and you
25:44 - will have
25:46 - you know you'll be fine like don't eat
25:47 - don't decide not to eat chips today and
25:49 - you could have this database up and
25:51 - running and learn coding okay so that's
25:53 - what I would recommend but it's up to
25:55 - you
25:56 - all right let's keep going
25:59 - um
26:00 - let's go ahead and um
26:03 - all right so let's go ahead and do cons
26:05 - Express and we're going to say require
26:06 - Express so let's get Express that up
26:08 - here so this is essentially a Pern stack
26:11 - now which is postgres Express react and
26:15 - node so it's like a Pern app we're gonna
26:19 - set up a pool and we're gonna set a
26:20 - require postgres
26:23 - um app is going to be by exp it's going
26:25 - to be an Express app and we're going to
26:27 - go ahead and say port 3001.
26:30 - let's enable cores on this as well so we
26:33 - don't get screwed by cores and we're
26:34 - going to say hey make sure you're using
26:36 - course for the app
26:37 - okay for the origin we're going to say
26:40 - hey just make all Origins available and
26:43 - usable and we're going to add in a get
26:45 - request we're going to make it async
26:48 - okay and we'll say that just send back
26:51 - hello world for now
26:53 - and we're gonna say Hey listen on the
26:55 - following
26:56 - Port say server listening on Port
26:59 - whichever Port you're listening on
27:02 - okay now let's run it and let's see what
27:05 - happens here so it's installing course
27:06 - Express and postgres
27:09 - okay and boom there we go it's saying
27:11 - hello world great great sign
27:14 - okay so now we need to build out a pool
27:18 - and for this new pool we're going to set
27:21 - the user
27:22 - okay access Secret Key by key as an
27:25 - environment variable so we can access
27:27 - all of the postgres related things from
27:29 - here
27:30 - so we're just going to say const my
27:32 - secret
27:33 - is going to be process and PG users just
27:36 - say that and that'll be user
27:38 - for host let's go ahead and see how to
27:41 - get access to the host we're just going
27:42 - to say
27:44 - process.npg host
27:46 - okay and then we're just going to do the
27:47 - following for everything else like for
27:49 - the database we're going to say PG
27:51 - database password PG password Port PG
27:54 - Port okay
27:55 - so that looks good to me so far
27:58 - for SSL we're going to say true
28:01 - and that's pretty good for now
28:05 - let's go ahead and take a look at the
28:07 - database content so I'm going to click
28:08 - that
28:09 - and we're going to go ahead and check
28:12 - the database so here you can even write
28:14 - database queries which makes your life
28:17 - so easy to type postgres queries here to
28:20 - use the database
28:22 - so create table products
28:24 - and I'm going to create a product uh
28:27 - tables Pro I'm going to create a table
28:29 - for products here that's where my Nike
28:32 - stuff will go my image pricing and
28:36 - this is a SQL database so this is going
28:38 - to be structured you won't be able to
28:40 - change it later so you need to Define
28:42 - your structure stick to that structure
28:44 - so we're gonna have
28:46 - our ID is going to be an integer it's
28:48 - going to be not null so it's always
28:50 - going to have some value it can't be not
28:52 - null and it's going to be the primary
28:55 - key of how we're going to be storing
28:58 - this data okay
29:00 - uh let's make integer Capital it doesn't
29:03 - really matter but it just looks better
29:04 - okay here we're going to say that the
29:07 - name we're going to also create another
29:09 - field call name so the first field is
29:10 - called ID so I'm also going to teach you
29:12 - how to read and write postgres and SQL
29:14 - here so the line two are one of the
29:19 - fields we're creating is called ID the
29:21 - second field we're creating his name
29:22 - another field we'll create is going to
29:23 - be image and another field we're going
29:25 - to create is going to be price now for
29:28 - ID it's going to be integer for name
29:31 - that's going to be a string so string in
29:35 - SQL you could just say VAR car which is
29:37 - super ugly way of just saying string
29:39 - okay and the size of it is going to be
29:41 - 255 and I'm going to say hey name cannot
29:43 - be null okay so make sure it's not null
29:45 - price is going to be a float it's going
29:47 - to be not null and then we're going to
29:49 - have image and that's also going to be
29:51 - not null so the product will need to
29:53 - have an image
29:55 - okay these are all required and now
29:57 - we're going to go ahead and run query so
29:59 - it should create our table with the
30:01 - following four Fields all right so we
30:04 - got an error so let's remove that comma
30:07 - let's run it boom query successful and
30:11 - now let's look at all the contents and
30:13 - we got products as a table we clicked it
30:15 - and there are no rows but the products
30:18 - table is made and it's available in our
30:20 - public schema
30:22 - and you'll always be able to also take a
30:24 - look at your query history here which is
30:26 - really nice so I'm going to bookmark and
30:28 - pin this query so you can always come
30:31 - back and look at it later
30:32 - okay
30:34 - all right now we're going to insert into
30:36 - products
30:37 - and
30:39 - we're going to insert into products of
30:40 - following
30:42 - okay ID name price
30:45 - image
30:46 - and those four fields in those four
30:49 - columns
30:50 - and here are the values that we're going
30:52 - to insert so the first one is going to
30:55 - be we're going to give it ID of one it's
30:57 - going to be headphones this is the price
30:58 - of the headphones
31:00 - and here's the link to the image
31:03 - and boom we're going to pop that in and
31:05 - now we're going to repeat that four
31:06 - times there we go so we got all of them
31:09 - now okay now let's run the query and it
31:11 - should insert into the table these four
31:14 - items that we just created let's hit run
31:16 - query query successful okay that's great
31:20 - let's go look at the contents and look
31:22 - at that we could see the table now this
31:25 - is so nice how easy ruplet makes it for
31:28 - you to be able to do this very very easy
31:31 - invisible all in one place and it tells
31:33 - you
31:34 - each field and what its type is and then
31:37 - what the contents are so we got integer
31:39 - our character varying double precision
31:41 - and character varying which is just
31:42 - string
31:44 - float Etc okay now in our code let's go
31:49 - ahead and add the following I'm going to
31:53 - say get all products
31:55 - and uh here it's going to be an async
31:58 - function that we're going to write and
32:00 - it's going to be we're going to wrap it
32:01 - up in a try catch block okay so if
32:04 - there's an error just print out the
32:05 - error and return the error and here's
32:07 - what I want you to try so I want you to
32:11 - get me the response okay you're gonna
32:13 - await the pool query and here's the
32:15 - query you're going to write you're going
32:16 - to select everything from products table
32:20 - okay you're gonna select everything from
32:22 - products table and you're going to
32:24 - return the rows from that okay so
32:27 - imagine I'm going to get back
32:30 - an array
32:32 - of items
32:34 - and it's going to be
32:36 - four objects that I'm going to get back
32:38 - in this case right my squiggly drawing
32:40 - is horrible but I hope that you
32:44 - uh get the point okay this is my
32:47 - squiggly drawing but you're going to get
32:50 - four
32:51 - items
32:53 - and
32:55 - that's what it's going to return and
32:57 - then we can send that over to our front
32:59 - end okay our back end is just used to
33:02 - communicate with SQL and then boom send
33:04 - back the data to us okay
33:07 - great
33:09 - okay let's keep going
33:10 - all right
33:12 - now in line 33 I'm gonna go ahead and
33:15 - say hey const products get all of the
33:18 - products
33:19 - and here's the and then return it as and
33:23 - then return it as a Json
33:26 - okay so then they're really easy to use
33:28 - on our
33:30 - front end
33:31 - so that's we're adding that to our get
33:33 - request and you could actually see that
33:36 - we have been able to query all of those
33:39 - products from our postgres database and
33:41 - return them as Json objects
33:44 - this is actually so such an easy setup
33:47 - with postgres this is crazy
33:49 - usually postgres is a nightmare compared
33:51 - to something like Firebase or whatnot
33:53 - now we're going to go ahead and say hey
33:55 - products from database and set products
33:57 - from database
33:58 - to create a state for it in our app
34:02 - okay please edit this from this part
34:05 - forward
34:06 - so cut out some of the last part don't
34:08 - show the front end yet show the front
34:10 - end later please right now we're going
34:12 - to go from the
34:13 - postgres
34:15 - and then we're gonna go back to where we
34:17 - were
34:18 - okay
34:19 - so basically step nine is now going to
34:22 - become step 12 and I'm gonna go directly
34:26 - from get all product function
34:28 - to add to cart functionality
34:31 - okay
34:32 - so at this point you can see that we've
34:35 - added and we have to get all products
34:37 - functionality done as well with our
34:39 - postgres oops hold on one second
34:42 - don't add that part
34:44 - edit from he sorry
34:46 - edit from here
34:48 - so at this point you can see that we
34:50 - have the postgres functionality we're
34:51 - able to get all the products we're able
34:53 - to show all of the products right for
34:55 - example here
34:58 - we just ran if we run this query right
35:00 - now
35:01 - so I did this I'm going to run it and
35:04 - boom there we go so now it just ran and
35:08 - it was able to pull all of our products
35:10 - right and it's able to show all of our
35:13 - products and make sure
35:15 - on our you know we have the other replit
35:18 - running as well because we have to have
35:19 - both of these running so they have to be
35:21 - listening to each other on the ports the
35:24 - so this is the back end and the other
35:25 - one is the front end so there we go we
35:27 - already have this up and running things
35:29 - are looking good we're able to get back
35:30 - the data now that our postgres is set up
35:32 - we're gonna go back and we're going to
35:36 - work on the add to cart functionality
35:38 - now that's where we're going to add in
35:40 - next
35:41 - so this is what our products are looking
35:43 - like currently let's go back to our chat
35:45 - GPT and we're going to work on the add
35:47 - to cart functionality so I'm going to go
35:49 - to chat GPT and I'm going to be like hey
35:50 - buddy can you add an add to cart
35:53 - functionality keeping track of all items
35:57 - a user clicks on
35:59 - okay adding it to the cart and keep
36:01 - track of the total price of all items in
36:03 - the cart so that is a pretty heavy query
36:06 - let's see what
36:08 - Chad GPT does it goes hey to add an add
36:11 - to cart functionality you can create a
36:12 - state to keep track of the items in the
36:14 - cart and the total price it goes you can
36:15 - then pass a callback function to the
36:17 - product list component that updates the
36:19 - card State when the button is clicked so
36:21 - explanation of what it should be doing
36:23 - is correct now let's look at the code
36:26 - all right so we got all our products was
36:28 - going to put all the dummy products in
36:30 - here that it had and then it's going to
36:32 - create a state for cart and it's also
36:35 - creating a state for the total price
36:37 - and now it's going to do some really
36:39 - interesting things here it has our add
36:41 - to cart function which is going to
36:43 - update our cart and it's going to update
36:44 - our total price and it's going to pass
36:47 - the total price it's going to take it in
36:49 - as a string and turn it into a dollar
36:50 - and you can see it's replacing that with
36:52 - a dollar sign
36:54 - and then we're working on creating a
36:56 - component here so let's keep going with
36:57 - this we have a product list we pass our
37:01 - products or the product list component
37:03 - and then we build out the cart we Loop
37:05 - through the cart items and we list out
37:07 - the card items and their names and their
37:09 - price
37:11 - and then we just simply export it okay
37:14 - so it goes hey in this example I've
37:16 - added two State variables cart and total
37:17 - price and we were going to tell it to
37:19 - continue at this point
37:21 - okay so it goes hey here's the
37:23 - continuation of this and now it adds a
37:26 - lot of explanation and now let's take a
37:28 - look at the code and it's talking about
37:29 - local storage or session storage
37:31 - okay
37:33 - so we're going to go ahead and copy this
37:36 - State stuff that it did for us I'm going
37:39 - to go ahead copy this we're going to go
37:40 - back to our app and I'm going to go
37:43 - ahead and add that in so now we're
37:45 - keeping track of the state and we have
37:47 - add to cart function completed as well
37:50 - okay let's go ahead and also import use
37:53 - State because we have we're importing
37:55 - react but we just need to import new
37:56 - state so let's go ahead and say import
37:58 - use State and we're going to just say
38:01 - from react
38:02 - okay the new react versions you don't
38:04 - have the same for react from react
38:07 - okay let's go back
38:09 - and I'm going to go ahead and grab this
38:11 - add to cart
38:13 - and bring that in
38:15 - essentially like a prop right so add to
38:18 - cart prop
38:19 - I'm going to bring that in
38:21 - and we're going to give it the add to
38:23 - cart function
38:24 - okay
38:26 - and then we need to update our code on
38:27 - the back we need to update our product
38:29 - list component and we're going to say
38:31 - hey on click I need you to run the add
38:33 - to cart function so there are certain
38:35 - things you still have to do manually
38:37 - okay this is why AI is pretty good but
38:40 - you do need to be helping it out
38:43 - so I'm going to say add to cart and then
38:44 - we're going to pass it the product
38:47 - okay
38:48 - let's go back to our app
38:50 - so product
38:52 - boom that's where the product is coming
38:55 - from
38:56 - okay
38:57 - now in my app another thing I'm going to
38:59 - do is I'm just going to console log cart
39:01 - so let's see if we're able to retrieve
39:03 - our card and
39:05 - currently we have this empty
39:08 - bracket so we see with nothing inside of
39:10 - it but when I click it watch this
39:12 - boom that item is added to the cart so
39:15 - look at how quickly chat GPT was able to
39:18 - add this functionality so now I click
39:19 - the second item
39:21 - and you can see that the second item was
39:23 - added to the cart now I click the third
39:25 - item and you can see the third item was
39:26 - also added to the cart that is
39:28 - mind-blowing
39:30 - okay let's go back to chat GPT
39:33 - and now we're going to say hey let's
39:34 - display the cart in a modal that opens
39:37 - when you click on the cart in the header
39:41 - and has Amazon like styling okay this is
39:44 - now getting really wild let's see if we
39:46 - can pull this off
39:48 - so there we go here's an example it says
39:50 - here's an example of how you can do this
39:52 - right so it fills out our it's rewriting
39:55 - some of the code we already have so we
39:57 - can skip past that interesting parts are
39:59 - the show modal part that now it has
40:01 - written so you can see here it's a show
40:03 - modal right now it's going to actually
40:05 - start building out the modal it seems
40:07 - like so set total price is totally fine
40:10 - and then now it's saying open modal so
40:12 - it's giving us open modal and it's going
40:14 - to give us closed modal as well so we're
40:15 - just going to say continue from the app
40:17 - component
40:18 - so there we go so now it's giving us
40:20 - open modal it's giving us closed modal
40:23 - and it's giving us it's returning this
40:27 - right so open one on click it's gonna do
40:29 - the open modal and then it's going to
40:31 - give us closed model and it goes here in
40:33 - this example I've created a new
40:34 - component called cart modal that renders
40:36 - the cart items and total price I've also
40:37 - added open modal functions it sets the
40:39 - show modal state to true in the cart
40:41 - button the header is clicked and the
40:42 - closed model function that sets show
40:44 - model my god so let's go ahead and give
40:48 - this a try
40:49 - so we need to build a cart modal
40:52 - component so let's go into components
40:53 - and let's do cartmodal.jsx
40:56 - okay now we're going to go ahead and add
40:58 - our cart modal
41:00 - inside of that so let's go ahead pop
41:03 - that in there so we got our cart model
41:05 - and let's export default our cart model
41:08 - okay now I'm going to go ahead and grab
41:10 - the show model
41:12 - and bring that in and we're going to add
41:14 - in our show model in here so let's go
41:17 - ahead and do that show modal and set
41:19 - show modal States we need to keep track
41:21 - of them
41:23 - okay
41:24 - and now let's grab the open modal and
41:26 - close model functions that we created
41:28 - and add those in here as well so boom
41:31 - there we go we got open modal and we got
41:33 - closed modal
41:35 - okay
41:36 - so they're hard-coded to be true and
41:38 - false right now
41:39 - now we need to add that to our div here
41:43 - as well
41:44 - okay so in the header I'm going to say
41:47 - the header is going to have open modal
41:49 - and we're going to pass it a prop the
41:52 - open modal function and header is going
41:54 - to have open modal okay and we're going
41:56 - to pass our open modal to our shopping
41:59 - cart icon so when you click on the
42:02 - shopping cart icon it's going to open
42:04 - the modal
42:05 - okay there we go button on click and now
42:08 - we need to add the show modal and once
42:11 - the it shows modal state is true then
42:14 - it's going to show the total price and
42:17 - it's going to show the cart items okay
42:19 - so that's why we need to create this
42:21 - cart modal component and pass it all of
42:24 - those things
42:26 - okay
42:27 - okay so basically let's go back here
42:30 - and I'm gonna go ahead and check out
42:33 - what's happening so let's click so now
42:35 - when I click on this item
42:37 - it says cart modal is not defined that's
42:40 - the particular error that we're getting
42:41 - right now so let's go ahead and fix that
42:44 - and why cart modal is not defined
42:46 - are we importing it we're not importing
42:48 - it so let's go ahead and just import
42:49 - that so I'm going to say import cart
42:51 - model from spell it correctly
42:54 - from components
42:57 - slash cart modal
42:59 - okay so we're going to go ahead and do
43:01 - that
43:02 - and now we should be good there we go we
43:05 - got our cards uh cart modal and all that
43:08 - stuff popping up right here and we got
43:11 - our products okay and we got the total
43:13 - price for the products as well
43:15 - okay so the model is working but it does
43:19 - not look very good so we need to work on
43:21 - that now so let's go ahead and let's
43:22 - style the cart model to look like
43:25 - Amazon's cart model so it's doing a
43:27 - fantastic job so far I mean it already
43:29 - made the card model so here's the
43:32 - styling for the model that it's building
43:33 - now so it's adding the background color
43:35 - the transparency the flow all of that uh
43:39 - what should it look like when you hover
43:41 - over the clothes what should the close
43:43 - button look like what should the modal
43:45 - content look like
43:47 - all of that is coming up here
43:50 - so
43:51 - let's go ahead
43:54 - and now add all of that in here
43:57 - okay so we're going to go ahead and add
43:59 - it in
44:00 - let's import cart modal CSS and look at
44:04 - that it is already looking so much
44:07 - better the cart model looks so much
44:09 - better
44:10 - we have the close button we could close
44:12 - it we have the cart right click that and
44:15 - boom it just closed right away click it
44:16 - brings it up again
44:18 - and all the items it's showing them so
44:21 - it's looking fantastic so far with
44:23 - almost no not much effort now we're
44:26 - going to go ahead and add more detailed
44:28 - styling to the card model to make it
44:30 - look like Amazon's cart model
44:32 - okay
44:33 - so let's go ahead and add that now
44:37 - so it's adding some more detailed
44:39 - styling so let's go through the styling
44:41 - okay
44:43 - I'm going to say continue so it gives me
44:45 - all of the styling so you can also sell
44:47 - it like give me more detailed styling
44:49 - and then it'll go into more
44:50 - specifications and details
44:52 - okay
44:53 - and let's go ahead copy that and paste
44:57 - that in here
44:58 - boom paste that in and it's looking
45:02 - decent it's so total is all the way to
45:04 - the right hand side the cart models kind
45:06 - of on the left hand side so that's
45:08 - looking good
45:10 - all right so here we go so
45:13 - it has given us much more detail styling
45:15 - so we're going to go ahead and copy
45:16 - paste that
45:17 - there were certain things that it feels
45:19 - like it still needs to fix so we're
45:21 - going to go ahead and say hey make the
45:22 - styling the card model look better and
45:25 - more like Amazon
45:27 - and so now I'm kind of digging deeper
45:29 - and just asking it hey can you help me
45:31 - out a little bit more and can you spread
45:33 - that out it's too close to each other
45:36 - it's too uncomfortable
45:37 - and it's adding some display Flex a line
45:41 - items justify content that I already see
45:43 - which to me looks like that should kind
45:44 - of do the trick but let's take a look at
45:47 - it okay so once it gives this to us
45:49 - we're going to say continue blah blah
45:50 - blah and now we're going to copy this
45:52 - whole thing
45:53 - okay what will the component look like
45:55 - wait hold on what will the component
45:57 - look like implementing these new Styles
45:59 - okay
46:01 - here is an example of how the component
46:03 - would look like implementing so it's
46:04 - even telling us here's how to add The
46:07 - Styling to the components okay so how to
46:10 - name the class name how to add class
46:13 - names to them right how to basically
46:15 - import The Styling there what are the
46:18 - things that we need to update so this is
46:20 - what the component will look like so
46:22 - let's go ahead and copy this code let's
46:24 - go ahead and update our cart modal
46:26 - component so I'm just going to copy and
46:28 - paste that so that's what the brand new
46:29 - styling and boom look at that it's
46:32 - already starting to look better we have
46:34 - multiple dollar signs which looks a
46:36 - little bit funny
46:38 - so let's keep going
46:40 - and let's go ahead and grab the style
46:45 - and then we're going to take this style
46:48 - okay and
46:50 - we're gonna go ahead and paste that in
46:52 - okay so this is the modal styling
46:55 - and copy that too let's go ahead and
46:57 - paste that in
46:59 - okay now let's take a look at it now
47:01 - it's looking way better even though it
47:04 - has two dollar signs for each product
47:06 - which is not the end of the world but it
47:07 - looks significantly better the image is
47:10 - kind of broken and they're two dollar
47:13 - signs so we have to fix just a few of
47:15 - those things so we're going to remove
47:16 - our dollar sign that we were putting in
47:18 - our
47:19 - cart model jsx
47:21 - okay because it seems like it's already
47:23 - it has a function that's already doing
47:26 - that
47:27 - so we can remove our dollar sign from
47:29 - here perfect so now we have one dollar
47:31 - sign now there's something happening
47:33 - with the image so let's take a look at
47:35 - it
47:36 - card.map item item that I it's not IMG
47:39 - it's actually image so we're going to go
47:41 - ahead and make that
47:42 - image I believe and then it should be
47:44 - good so let's see
47:46 - okay so let's take a look at the item so
47:48 - let's just print out the item so there
47:49 - we go and you can see its image right
47:51 - it's not IMG
47:53 - so let's go ahead and copy that and
47:57 - write that item dot image and then let's
48:01 - take a look and beautiful this model is
48:04 - looking so much better I mean this
48:07 - honestly looks
48:09 - looks kind of stunning
48:11 - and now we're going to add a continued
48:14 - checkout button to the cart modal and
48:16 - style it to look like Amazon so now
48:18 - you'll have a button that can say hey
48:20 - continue to check out and then you can
48:22 - buy it from there so let's go ahead and
48:24 - work on adding that checkout button now
48:27 - okay it's adding that button it's adding
48:29 - in The Styling for that button so let's
48:31 - just go through this fast now we don't
48:33 - need to sit there and watch this it's
48:35 - very boring
48:37 - um
48:37 - let's go ahead and grab the checkout
48:40 - button okay and let's go back to our
48:43 - code and I'm gonna go ahead and I'm
48:46 - gonna paste that button right there okay
48:49 - all the way at the bottom right
48:50 - underneath the total price so we could
48:52 - see it look at that looks gorgeous okay
48:55 - now we got this we got this we got the
48:57 - continue checkout button
48:59 - now these products are product one
49:01 - product two let's call them let's give
49:02 - them actual names so let's get let's go
49:04 - Nike running shoes for this one let's go
49:07 - ahead and say wireless headphones for
49:09 - this one let's go Apple watch right and
49:11 - for the next one we're gonna go ahead
49:13 - and call it
49:16 - um Nike okay and now keep in mind guys
49:20 - we are at functionality
49:23 - you know
49:25 - 10 out of 12 like we are we just created
49:28 - the card model we're actually 11 out of
49:30 - 12. so we have not only created style
49:33 - component but we've already we've also
49:35 - sorry we have not only created the cart
49:37 - model we've already styled the cart
49:40 - modal as well so pretty soon we're gonna
49:43 - be moving on to the final step step 12
49:45 - which is going to be getting the data
49:47 - from our back end from our SQL database
49:51 - so let's go here let's take a look okay
49:55 - so far I can click the Nike button the
49:58 - Apple watch one it looks good
50:00 - all right now that looks a bit funny
50:02 - right
50:03 - 94.949999 like what the heck is going on
50:06 - there so let's just go ahead and fix
50:08 - that
50:09 - I'm gonna go ahead and just say hey
50:11 - total not price two uh and we're going
50:13 - to say to fix two so give me two decimal
50:16 - points essentially so there we go 94.95
50:19 - and that should be good
50:22 - okay
50:23 - let's keep going
50:25 - so honestly at this point the app is
50:27 - looking fantastic it is pretty much done
50:30 - we're pretty much good to go with the
50:32 - app the only thing that is left at this
50:35 - point is the final step step 12 out of
50:40 - 12 which is connecting our back end to
50:43 - our front end okay so we're just going
50:46 - to be connecting our front end to our
50:47 - back end now that's all we're doing
50:49 - that's the only thing that's left so
50:51 - let's go ahead and do that now so I'm
50:53 - going to scroll down here and I'm going
50:54 - to basically say hey
50:57 - um we're gonna have products
51:00 - from database and then we're gonna
51:03 - set products from database so this is
51:05 - going to be a state that we're going to
51:06 - set here
51:07 - okay
51:08 - now the next thing we want to do is we
51:11 - want to get products
51:14 - async and we want to use the function
51:16 - that we created which hits that home
51:17 - page route right and it gets us access
51:19 - to the products that we built on our
51:21 - back end so we're going to do something
51:22 - similar here we're just going to say hey
51:23 - response
51:24 - fetch
51:26 - okay let's go look at the route that we
51:28 - have to hit so in this case that's the
51:30 - route that we have to hit so we're going
51:31 - to copy that exact piece of uh URL there
51:35 - Amazon with gbt
51:38 - backend.cleverprogrammer.rebel.co or
51:40 - whatever
51:40 - let's go back and let's paste that in
51:44 - okay so we're going to say go fetch that
51:47 - and then I want you to get the data
51:49 - await the response and get the data from
51:51 - there
51:52 - okay and then let's just console log the
51:54 - data so let's see if that works
51:57 - let's go ahead and hit refresh
52:00 - refresh here
52:02 - and
52:04 - seems like we're running into a bit of a
52:06 - problem
52:07 - so let's create a use effect hook here
52:09 - okay and then that use effect hook we
52:12 - have the
52:14 - um we already have the set total price
52:16 - because that actually increments right
52:18 - and gives me the total price but let's
52:20 - go ahead on line 56 and add in call our
52:24 - get products function because we made
52:26 - the function but we never called it so
52:28 - let's go ahead and make sure that we
52:29 - call it
52:30 - now let's refresh so it should call it
52:32 - on refresh we got some undefined stuff
52:36 - so why is that why did we get undefined
52:39 - stuff here
52:40 - let's put a fire Emoji next to that and
52:43 - let's see what happens let's do
52:45 - response.json now instead of
52:46 - response.data
52:48 - and boom there you go we're pulling this
52:52 - information from our back end that is
52:55 - absolutely amazing so now we know that
52:59 - data is pulling that information so what
53:02 - we need to do is keep track of that data
53:05 - so we're going to call the set products
53:06 - from database function and
53:09 - um Mark put the data in there okay that
53:12 - should be good
53:13 - okay
53:14 - and now we need to just kind of do the
53:17 - last thing where instead of using our
53:19 - static products on line 81 we're going
53:23 - to use our products from our database so
53:24 - I'm just going to say products from
53:25 - database and boom look at that you can
53:30 - see we got headphones and we got an
53:32 - orange T-shirt and we got Apple watch
53:34 - and Nike sneaker and all of this has the
53:37 - images
53:38 - and everything that we have on our back
53:40 - end so there you have it that is the
53:44 - Amazon clone we just built it with chat
53:45 - GPT hope it blew your mind if you want
53:47 - to get the exact app I'm using click the
53:49 - link in the description below and it has
53:51 - that replit link there you can Fork this
53:54 - exact app and play around with it and
53:56 - use it on your own
53:57 - of course you'll kind of have to add in
53:59 - your postgres stuff to make it your own
54:00 - and then you should be good to go but
54:02 - there you have it I hope you enjoyed
54:04 - this video I hope you learned a lot out
54:06 - of it and it was fun informational and
54:09 - as always I'll see you in the next video

Cleaned transcript:

in this video we're going to be building the Amazon clone using chat GPT I hope you're excited if you want to follow along click the link in the description below it's a replit link that allow you to Fork this Rebel so that you could code alongside me it is completely free so go ahead and do that and set that up we're also going to be adding a database to this using replit which allows you to set up postgres because otherwise if you're trying to set up postgres on your own it will be a nightmare now this repo that you're gonna click and access it's going to be a completely empty repository however it's going to have project assets for you set up there so just go ahead Fork that and start your project from there so with that said let's go now this is going to be built in about 12 steps so we're gonna follow along from Step Zero which is create replica project and we're going to move on to step one which is going to be create headers we're going to do that soon but first we just want to see if our replit is up and running and it should basically say react plus fight plus replied is an amazing package manager and let's go ahead and write hello here and that should work if any point you get lost all of us remember that the link is in the description below you could always Fork that and copy the exact project that I have built it's completely free to be able to do that on replit and so do take advantage of that okay but for now just follow along so I'm gonna say I want to build an Amazon clone with react.js let's start with the code for the header this should use functional components no need to use react router Dom for the navigation the navigation should contain home shop about and contact let's go ahead and see what chat GPT spits back out at us and it goes here's a functional component and it has home shop about contact length and it's creating a header component for us which is absolutely phenomenal so once we have this I'm going to copy that and I'm going to go inside of my source and I'm going to create I'm gonna go ahead and create a header component components folder put header inside of that and then I'm going to just paste the header component that Chad GPT gave me now once we go back to our main app.jsx I'm going to change that to divs and I'm going to go ahead and import the header component we just wrote so let's go ahead and type in header and let's go ahead and import our header component from components there we go and now we could see it okay next up what I'm going to do is we're going to go ahead and we're already at step two so good job you're making really good progress so far out of this 12 steps and now what we're going to do is we're going to style this header with inspiration from Amazon styling so let's see how good of a job Chad GPT does in being able to do that I think it will I think it will do a decent job let's see like this is so cool especially for people like me who are terrible at styling like you could just get this stuff and go back and pop that in and it just boom done for you that is crazy that is awesome that's exciting so for those of you guys who are afraid don't be afraid this is not going to replace you supercharging you right I'm still the one driving and telling it what I need and it says Hey basically once you add the styling you also need to go change you'll also need to go change your main file and import CSS so I'm going to copy this code and I'm going to replace my header component with this new code and then I'm going to copy the styling and paste that in okay so that's what it's saying so let's go ahead and copy that come back to our header and I'm gonna go ahead and paste that in here so now I have import CS import header CSS at the top remember Chad GPT will not always give you the same stuff so if you're writing the same exact prompts as me and you're freaking out why you're not getting the same stuff kgpt will give you different stuff it's artificial intelligence okay it's not like a search engine so you're gonna get different results your thing might look different than mine but just you can use and follow along what I'm doing and be able to ask it the right questions and produce similar results to mine even if you don't produce exact results to mine if you want to get the exact results of mine Fork the replit in the link below let's go ahead and components let's create a header.css and we're going to go ahead and copy our CSS from chat GPT and I'm going to come back in here and paste that okay now that I have that pasted let's go ahead and look inside of our header.jsx and it seems like our import okay there we go we just needed to call it header with a capital H so there are a couple of things you'll need to figure out yourself with Chad GPT it's not going to be doing everything and boom look at that we already have a nav bar that says home shop about contact and styling was already done so we didn't have to worry too much about the styling I mean for somebody like me that is absolutely beautiful and wonderful news all right now we're going to make the header look more like Amazon styling okay so it says sure to make the header look more like Amazon styling you can add the following elements to the component and now it's going to give us an example of what to add so here we go okay so it's giving us a bunch of stuff and you can see it's using a bunch of icons as well right the FASFA shopping cart and stuff like that that we're seeing right around here right it's using icons and so that's great let's go back and then in the styling it's saying Hey to resemble that we'll need to add in a header section a header left a logo search form and search input and search button and that's perfect because if you you know I'm sure Amazon styling is embedded in your head if you can visualize it in your head Amazon has all of those things there right so we're going to add all of these things in ours as well if it ever ends abruptly like how it did you can use this search this term called continue and that will just make it continue writing so it goes sure here's the continuation of the CSS so it's giving me all the CSS now account drop down fa shopping cart how to style it etc etc so we're gonna go ahead copy that whole thing okay or you could just hit copy code whichever one and let's go ahead and we're going to copy the styling let's go to header.css and we're going to paste that and let's go down and copy that as well from nav a lot and we're going to paste that as well okay so now with that styling you can already see that the margins are longer in between and The Styling is starting to look a little bit better and I'm going to ask you hey can we use the same background color that Amazon uses for their header the background color for Amazon's header might change over time but as of my knowledge cut off date Amazon's header uses a dark blue color for their header okay so it's also smart letting you know hey I have historical data I don't have access to realtime data but based off of that this was the background color that we're using cool so we're going to grab that background color and we're going to replace our background color with the Amazon's background color so let's hit it and boom we're getting that dark blue okay now the next thing we need to do is grab the updated section that it gave us okay I'm going to copy that come to header.jsx so I just copied all the stuff that he gave us for the header and I'm bringing that over to this now okay and we'll paste that in so all the shopping cart icons and everything okay now header.css is giving an error so let's make sure to change that to header with a capital h and we need to say we need to import let's create another folder we'll call it assets and inside of that folder we're gonna drop in the Amazon logo okay so you should go ahead and grab the Amazon logo we'll link it in the description below or you could just grab it from online just get Amazon logo PNG put it in your assets folder and here we're going to say import logo we're going to say go to assets and grab the Amazon logo.png so now it's able to pull that and we got the search bar and we got the search button that is absolutely crazy it's already looking so damn good none of the icons are showing up but remember for the icons we're going to need to import things okay now it says instead of using now let's ask it instead of using font awesome because it's using font awesome currently we're gonna say hey can you show me how to implement the icons with the react icons and it goes sure you can use react icons library to implement icons in your react applications so it's so freaking smart right it even understands icons and now it's like okay I'll show you how to do the same thing with react icons so we can go ahead and install react icons now and then it says hey just do it like this fa shopping cart fa bars from react icons and that should be able to do the trick and it's telling you exactly what you need to do in your files okay so let's get past that fast and now we're going to come back to our app okay we're going to copy this we're going to come back to our app okay and let's go and it says and I pasted that over I pasted that header code over this and now we got the react icons as you can see fa shopping cart and Fa bars and we're just gonna make sure that our logo is coming from assets Amazon logo and our header CSS with the capital h okay perfect now let's stop it and run it again and you could see that at the bottom it's installing react icons let's open up the web View and there we go we're starting to see the icons and this is what's nice about replit like this is already deployed and it's already online so you could use this as you're building and you could also share it with anybody you want so let's see what's happening here let's go to our header.jsx okay everything looks like it's opening and closing correctly so that looks good and let's go ahead in our header CSS and in our header I'm just going to add display Flex and boom just because I had to display Flex you could see that it's now starting to look great it doesn't look weird like how it was looking earlier now let's say hey make sure the navigation header left and header right fill the space in the header okay so now I'm starting to give it Specific Instructions just massage it to give me the correct things that I want and it goes sure you could use flex grow and add it to your header left nav and header right classes so now starting to show me my header left add flexgro and my nav add flexgro and my header Right add Flex Pro okay and let's go back to my header CSS and I'm going to go ahead and add Flex one and I'm going to go to my nav and add Flex one and then we'll go to my header right and add flex1 here okay and let's look and now the spacing is starting to look a little bit better with that count going all the way let's add padding of 10x to header right and we'll add a padding of 10 pixels to the navigation okay and we'll add a padding of 10 pixels to my header left okay so let's go and look now you can see that count is all the way to the right which is good okay now in my fa shopping cart I'll add a class name so now see we're working alongside chat GPT and this is what you need to be getting better at as well and I'm going to say hey I'm going to call the class menu icon and we'll create a new class called menu icon in my header CSS and we're going to color it white we're going to give it a font size of 20 pixels and boom there you go now our icons are getting proper styling and proper sizing okay let's create a new div and let's add them there so they're within a div and then we'll give a div a class name of Icon so that way we can grab the icons and style that whole div better and we'll go display Flex on that okay and you notice I put a gap of 10 pixels there and you can see the icons are starting to look really good okay we can see the card icon and the collapsible bars for menu icon we'll give it 27 pixels and cursor pointer when you hover over it so there we go when you hover over we could see it properly okay so the nav bar is starting to look a lot better let's add a gap of 30 pixels in our header left as well okay and we're going to tell it hey can you fix the styling of the search bar to look to more look like Amazon okay so it goes yeah to fix the styling to more like Amazon you can use the CSS to change the size color and properties of the search bar and now it shows us we can align the items we can position as position it relative and it's giving a specific clear specifications for the search input on the width height border radius Etc color and then even what happens when we focus over on it and what happens to the button what happens when we hover over onto the button what should happen so adding all of those things okay so I'm going to copy that code we're going to go back to our app and we're going to go to our CSS and let's replace search form search input search button with what we got everything related to the search and paste it over that so I'm completely overwriting everything that had to do with search and now it's giving us a more Amazon looking search we're going to reduce the padding a little bit because it's made it too big so I'm going to make it point three instead of 0.5 okay let's make it point two let's make it even a little bit smaller okay now it's starting to look a little bit better and the search is starting to look a little bit better as well okay now we're going to make it so the button is inside of the search input the right side of the search input okay instead of the button being all the way outside so it goes to make the button appear inside the right side of the search input you could use position and write properties in CSS so here's how we do it spitting it out search button and you can see that the search button position is absolute whereas the other component other thing is relative so now it's going to allow us to put the search button within the search bar okay with this example the search button is set to position absolute and write zero top zero bottom zero we're going to copy this we're going to come back and we're going to replace everything related to search here and paste except for the search button okay the research button hover except for that we're going to override it over everything and paste it and there we go look at that Chan GPT is so freaking smart right it brought the button inside and it allows us to make that happen I mean that is so freaking cool look at that that is phenomenal okay now we're gonna go ahead and outline it to none so there are no outlines so it doesn't look weird and now it's starting to look a lot better right we got search now we're going to say Okay add products list with products so now we're going to move on so we're done with styling so we're done with step two out of 12. now we're going to go ahead and move on to step three so step three is going to be creating that product list all right then step four is going to be styling it so let's stick to step three here so at product lists with products that has styling that looks like Amazon so basically I just said hey man add products list with products that have styling that looks like Amazon for the Amazon clone that we're building with react.js and it goes sure to add products list with styling that looks like Amazon for Amazon clone you can create a component that runs there's a list of products and apply CSS styles to match Amazon styling so here it's mapping through and creating product list okay so product list is a component that takes in the products and then it just builds them out and this is fantastic because not only is it writing code for you but it's writing reusable code for you in such an easy way where you could just give it an array of products here and it'll just build them all out so if you gave it five products this will build it up for five products and each product it has you know image name price so this is so freaking cool this is so freaking cool okay so in this example it goes I've created a product list component that takes in a prop called products which is an array of product objects and then it basically breaks down the you know the nerdy stuff now it's also creating the styling for this product list and what that should look like and what the product should look like and what's a product image should look like and basically what we're going to do is we're going to tell it to continue and once it's done we're going to start grabbing all of this and integrating it intelligently because you're noticing now you can't just copy and paste like a good developer who knows how to use stack Overflow you need to know exactly where to copy and paste as a key skill so let's keep going through this it goes I've added styles for the product details including the product name okay so let's go ahead and grab this product list component let's come back in our components we'll create a new component called product list and inside of here I'm going to add the product list that it gave us cool let's go back soon let's create another components let's create another component and we'll create the styling for product list.css and we're going to grab the styling and we're going to pop that into our product list.css okay we're gonna grab more of the styling that it gave and we're gonna add that as well so we've finished adding to adding all of the styling now we're gonna go back to our app.jsx and we're going to add in our product list component let's make sure to import it correctly product list from components slash product list and for product lists we're going to add our products and we're going to give it our array of products so here let's just create a demi array of products as well products and we'll give it um it's going to be an array of objects remember because products have different properties right it could have an image and a price description whatever whatnot so let's go ahead I'm going to call it const products and we'll build that out in a second uh we're gonna say hey make a status product list to pass to the products list component so uh it's basically just gonna give us uh I'm sorry I meant to say static not stat test so give me a static product list to pass to the product list component okay and you could even pause the prompt right and edit it and then ask it this is a new update that they made you could tell it to stop generating because it was super annoying when it would just keep going all right so here is the dummy list of products is giving us so we're gonna grab those products and we're gonna pop that in so it's so smart it's giving us ID name price and image because it knows our product list component needs that how freaking smart is this thing too smart so let's go and we're gonna cop that cop all of those products come back to our bad boy paste it in there we go now we got all our products with the images and the pricing and The Styling is showing up beautifully I mean of course it could be more beautiful but I mean come on this is things that for a bad frontend developer like me would take like five hours four hours and here we got it done in like what 20 minutes jeez or less actually probably five ten minutes since the video is edited for you all right here we go and now we're gonna say hey style the product list to look more like Amazon because right now it looks like poop it does not look good at all I mean it looks terrible so we're going to tell it to make it look more so add more detail styling to make the product list look more like Amazon okay so we're telling it to add some more detail styling okay and it goes to add more detail styling to the product to look more like Amazon you can adjust the CSS so it's telling us okay this is what you need to be doing with the product list and you can see grid template columns grid Gap so that is already telling me the repeat four and one that's already telling me that they're going to be four columns just creating that is starting to look nice right each row will have four items that looks more like what we need to be building and again I'm not a professional CSS developer or a frontend developer but I could look at that and go okay that makes sense it's moving Us in the right direction okay okay so let's go ahead and hit continue because I think it just froze there so I'm going to say continue from the product button and then it goes sure here's the continuation of the CSS product button it's finishing that up and it goes in this example of added grid layout to show the products in four column space between the products I've also added hover effects to make the product look more like Amazon's wonderful so we're going to go ahead and copy this code we're going to go to our product list CSS and paste it in let's go back and let's paste that into our product list CSS as well and boom We Got The Styling and we got the updates to the component and let's make sure to import The Styling because we're actually haven't we hadn't been using the styling at all so it might have had already a good styling but we won't know and look at that that is gorgeous you got the images you got border radius on the images you got a drop shadow effect you got a hover effect you got descriptions and the uh and the pricing styling looking different that is very nice that is very nice now we're going to add in some of the products so I just got a bunch of random Amazon Project products like the Apple watch you know wireless headphones you could grab whatever things you want I got shoes and they're all jpegs with like a white background kind of and well I'm gonna go ahead into my app and I'm going to import my Apple watch from assets Apple watch I'm going to go ahead and import my headphones I'm gonna go ahead and import my Nike sneakers and I'm gonna just replace the images with Nike I'm gonna replace the headphones um with the headphones I'm going to replace the Apple watch with the Apple watch here item three with Apple watch and there we go right all of them are starting to show up it looks beautiful height or instead of uh let's see if we can make the height 200 pixels hard coded ah that looks a little bit better but let's make it 175 let's play around with that a little bit okay that's that's fine for now let's go back and let's add in something for item four let's just add the shoes again and beautiful look at that so now we and we just updated the titles now as well so we just updated the titles to wireless headphones Nike running shoes Apple watch Nike so do that as well and everything will look gorgeous okay now we need to move on to step five we're done with four of the steps we just finished dialing the product list so at this point we have created the project created that we've created the header finish the styling created product list style the product list and now we're on to step five which is setting up a basic node Express backend so let's go ahead and set that up I'm going to go ahead and do Amazon with Chad GPT back end and we're gonna get started now here's what we need to do so we are going to need to set up postgres here which is a backend database and it's so cool how they've made it in replica where it's all integrated so I'm about to blow your mind with this stuff so let's go ahead click postgres okay I'm gonna go ahead and say use Cycles to create DB so use a hundred Cycles okay go ahead and do that and set up your it says you're paying 100 Cycles which is one dollar a day okay and uh now I'm going to go ahead you know so I recommend you use this this will make your life so easy it's also really impressive and fast if you don't want to do it this way then you'll have to then postgres is a can be a nightmare okay so then if you're setting it up locally do it at your own Peril okay you're saving about a dollar a day which is what like I mean just don't eat like three bags of chips in the month and you will have you know you'll be fine like don't eat don't decide not to eat chips today and you could have this database up and running and learn coding okay so that's what I would recommend but it's up to you all right let's keep going um let's go ahead and um all right so let's go ahead and do cons Express and we're going to say require Express so let's get Express that up here so this is essentially a Pern stack now which is postgres Express react and node so it's like a Pern app we're gonna set up a pool and we're gonna set a require postgres um app is going to be by exp it's going to be an Express app and we're going to go ahead and say port 3001. let's enable cores on this as well so we don't get screwed by cores and we're going to say hey make sure you're using course for the app okay for the origin we're going to say hey just make all Origins available and usable and we're going to add in a get request we're going to make it async okay and we'll say that just send back hello world for now and we're gonna say Hey listen on the following Port say server listening on Port whichever Port you're listening on okay now let's run it and let's see what happens here so it's installing course Express and postgres okay and boom there we go it's saying hello world great great sign okay so now we need to build out a pool and for this new pool we're going to set the user okay access Secret Key by key as an environment variable so we can access all of the postgres related things from here so we're just going to say const my secret is going to be process and PG users just say that and that'll be user for host let's go ahead and see how to get access to the host we're just going to say process.npg host okay and then we're just going to do the following for everything else like for the database we're going to say PG database password PG password Port PG Port okay so that looks good to me so far for SSL we're going to say true and that's pretty good for now let's go ahead and take a look at the database content so I'm going to click that and we're going to go ahead and check the database so here you can even write database queries which makes your life so easy to type postgres queries here to use the database so create table products and I'm going to create a product uh tables Pro I'm going to create a table for products here that's where my Nike stuff will go my image pricing and this is a SQL database so this is going to be structured you won't be able to change it later so you need to Define your structure stick to that structure so we're gonna have our ID is going to be an integer it's going to be not null so it's always going to have some value it can't be not null and it's going to be the primary key of how we're going to be storing this data okay uh let's make integer Capital it doesn't really matter but it just looks better okay here we're going to say that the name we're going to also create another field call name so the first field is called ID so I'm also going to teach you how to read and write postgres and SQL here so the line two are one of the fields we're creating is called ID the second field we're creating his name another field we'll create is going to be image and another field we're going to create is going to be price now for ID it's going to be integer for name that's going to be a string so string in SQL you could just say VAR car which is super ugly way of just saying string okay and the size of it is going to be 255 and I'm going to say hey name cannot be null okay so make sure it's not null price is going to be a float it's going to be not null and then we're going to have image and that's also going to be not null so the product will need to have an image okay these are all required and now we're going to go ahead and run query so it should create our table with the following four Fields all right so we got an error so let's remove that comma let's run it boom query successful and now let's look at all the contents and we got products as a table we clicked it and there are no rows but the products table is made and it's available in our public schema and you'll always be able to also take a look at your query history here which is really nice so I'm going to bookmark and pin this query so you can always come back and look at it later okay all right now we're going to insert into products and we're going to insert into products of following okay ID name price image and those four fields in those four columns and here are the values that we're going to insert so the first one is going to be we're going to give it ID of one it's going to be headphones this is the price of the headphones and here's the link to the image and boom we're going to pop that in and now we're going to repeat that four times there we go so we got all of them now okay now let's run the query and it should insert into the table these four items that we just created let's hit run query query successful okay that's great let's go look at the contents and look at that we could see the table now this is so nice how easy ruplet makes it for you to be able to do this very very easy invisible all in one place and it tells you each field and what its type is and then what the contents are so we got integer our character varying double precision and character varying which is just string float Etc okay now in our code let's go ahead and add the following I'm going to say get all products and uh here it's going to be an async function that we're going to write and it's going to be we're going to wrap it up in a try catch block okay so if there's an error just print out the error and return the error and here's what I want you to try so I want you to get me the response okay you're gonna await the pool query and here's the query you're going to write you're going to select everything from products table okay you're gonna select everything from products table and you're going to return the rows from that okay so imagine I'm going to get back an array of items and it's going to be four objects that I'm going to get back in this case right my squiggly drawing is horrible but I hope that you uh get the point okay this is my squiggly drawing but you're going to get four items and that's what it's going to return and then we can send that over to our front end okay our back end is just used to communicate with SQL and then boom send back the data to us okay great okay let's keep going all right now in line 33 I'm gonna go ahead and say hey const products get all of the products and here's the and then return it as and then return it as a Json okay so then they're really easy to use on our front end so that's we're adding that to our get request and you could actually see that we have been able to query all of those products from our postgres database and return them as Json objects this is actually so such an easy setup with postgres this is crazy usually postgres is a nightmare compared to something like Firebase or whatnot now we're going to go ahead and say hey products from database and set products from database to create a state for it in our app okay please edit this from this part forward so cut out some of the last part don't show the front end yet show the front end later please right now we're going to go from the postgres and then we're gonna go back to where we were okay so basically step nine is now going to become step 12 and I'm gonna go directly from get all product function to add to cart functionality okay so at this point you can see that we've added and we have to get all products functionality done as well with our postgres oops hold on one second don't add that part edit from he sorry edit from here so at this point you can see that we have the postgres functionality we're able to get all the products we're able to show all of the products right for example here we just ran if we run this query right now so I did this I'm going to run it and boom there we go so now it just ran and it was able to pull all of our products right and it's able to show all of our products and make sure on our you know we have the other replit running as well because we have to have both of these running so they have to be listening to each other on the ports the so this is the back end and the other one is the front end so there we go we already have this up and running things are looking good we're able to get back the data now that our postgres is set up we're gonna go back and we're going to work on the add to cart functionality now that's where we're going to add in next so this is what our products are looking like currently let's go back to our chat GPT and we're going to work on the add to cart functionality so I'm going to go to chat GPT and I'm going to be like hey buddy can you add an add to cart functionality keeping track of all items a user clicks on okay adding it to the cart and keep track of the total price of all items in the cart so that is a pretty heavy query let's see what Chad GPT does it goes hey to add an add to cart functionality you can create a state to keep track of the items in the cart and the total price it goes you can then pass a callback function to the product list component that updates the card State when the button is clicked so explanation of what it should be doing is correct now let's look at the code all right so we got all our products was going to put all the dummy products in here that it had and then it's going to create a state for cart and it's also creating a state for the total price and now it's going to do some really interesting things here it has our add to cart function which is going to update our cart and it's going to update our total price and it's going to pass the total price it's going to take it in as a string and turn it into a dollar and you can see it's replacing that with a dollar sign and then we're working on creating a component here so let's keep going with this we have a product list we pass our products or the product list component and then we build out the cart we Loop through the cart items and we list out the card items and their names and their price and then we just simply export it okay so it goes hey in this example I've added two State variables cart and total price and we were going to tell it to continue at this point okay so it goes hey here's the continuation of this and now it adds a lot of explanation and now let's take a look at the code and it's talking about local storage or session storage okay so we're going to go ahead and copy this State stuff that it did for us I'm going to go ahead copy this we're going to go back to our app and I'm going to go ahead and add that in so now we're keeping track of the state and we have add to cart function completed as well okay let's go ahead and also import use State because we have we're importing react but we just need to import new state so let's go ahead and say import use State and we're going to just say from react okay the new react versions you don't have the same for react from react okay let's go back and I'm going to go ahead and grab this add to cart and bring that in essentially like a prop right so add to cart prop I'm going to bring that in and we're going to give it the add to cart function okay and then we need to update our code on the back we need to update our product list component and we're going to say hey on click I need you to run the add to cart function so there are certain things you still have to do manually okay this is why AI is pretty good but you do need to be helping it out so I'm going to say add to cart and then we're going to pass it the product okay let's go back to our app so product boom that's where the product is coming from okay now in my app another thing I'm going to do is I'm just going to console log cart so let's see if we're able to retrieve our card and currently we have this empty bracket so we see with nothing inside of it but when I click it watch this boom that item is added to the cart so look at how quickly chat GPT was able to add this functionality so now I click the second item and you can see that the second item was added to the cart now I click the third item and you can see the third item was also added to the cart that is mindblowing okay let's go back to chat GPT and now we're going to say hey let's display the cart in a modal that opens when you click on the cart in the header and has Amazon like styling okay this is now getting really wild let's see if we can pull this off so there we go here's an example it says here's an example of how you can do this right so it fills out our it's rewriting some of the code we already have so we can skip past that interesting parts are the show modal part that now it has written so you can see here it's a show modal right now it's going to actually start building out the modal it seems like so set total price is totally fine and then now it's saying open modal so it's giving us open modal and it's going to give us closed modal as well so we're just going to say continue from the app component so there we go so now it's giving us open modal it's giving us closed modal and it's giving us it's returning this right so open one on click it's gonna do the open modal and then it's going to give us closed model and it goes here in this example I've created a new component called cart modal that renders the cart items and total price I've also added open modal functions it sets the show modal state to true in the cart button the header is clicked and the closed model function that sets show model my god so let's go ahead and give this a try so we need to build a cart modal component so let's go into components and let's do cartmodal.jsx okay now we're going to go ahead and add our cart modal inside of that so let's go ahead pop that in there so we got our cart model and let's export default our cart model okay now I'm going to go ahead and grab the show model and bring that in and we're going to add in our show model in here so let's go ahead and do that show modal and set show modal States we need to keep track of them okay and now let's grab the open modal and close model functions that we created and add those in here as well so boom there we go we got open modal and we got closed modal okay so they're hardcoded to be true and false right now now we need to add that to our div here as well okay so in the header I'm going to say the header is going to have open modal and we're going to pass it a prop the open modal function and header is going to have open modal okay and we're going to pass our open modal to our shopping cart icon so when you click on the shopping cart icon it's going to open the modal okay there we go button on click and now we need to add the show modal and once the it shows modal state is true then it's going to show the total price and it's going to show the cart items okay so that's why we need to create this cart modal component and pass it all of those things okay okay so basically let's go back here and I'm gonna go ahead and check out what's happening so let's click so now when I click on this item it says cart modal is not defined that's the particular error that we're getting right now so let's go ahead and fix that and why cart modal is not defined are we importing it we're not importing it so let's go ahead and just import that so I'm going to say import cart model from spell it correctly from components slash cart modal okay so we're going to go ahead and do that and now we should be good there we go we got our cards uh cart modal and all that stuff popping up right here and we got our products okay and we got the total price for the products as well okay so the model is working but it does not look very good so we need to work on that now so let's go ahead and let's style the cart model to look like Amazon's cart model so it's doing a fantastic job so far I mean it already made the card model so here's the styling for the model that it's building now so it's adding the background color the transparency the flow all of that uh what should it look like when you hover over the clothes what should the close button look like what should the modal content look like all of that is coming up here so let's go ahead and now add all of that in here okay so we're going to go ahead and add it in let's import cart modal CSS and look at that it is already looking so much better the cart model looks so much better we have the close button we could close it we have the cart right click that and boom it just closed right away click it brings it up again and all the items it's showing them so it's looking fantastic so far with almost no not much effort now we're going to go ahead and add more detailed styling to the card model to make it look like Amazon's cart model okay so let's go ahead and add that now so it's adding some more detailed styling so let's go through the styling okay I'm going to say continue so it gives me all of the styling so you can also sell it like give me more detailed styling and then it'll go into more specifications and details okay and let's go ahead copy that and paste that in here boom paste that in and it's looking decent it's so total is all the way to the right hand side the cart models kind of on the left hand side so that's looking good all right so here we go so it has given us much more detail styling so we're going to go ahead and copy paste that there were certain things that it feels like it still needs to fix so we're going to go ahead and say hey make the styling the card model look better and more like Amazon and so now I'm kind of digging deeper and just asking it hey can you help me out a little bit more and can you spread that out it's too close to each other it's too uncomfortable and it's adding some display Flex a line items justify content that I already see which to me looks like that should kind of do the trick but let's take a look at it okay so once it gives this to us we're going to say continue blah blah blah and now we're going to copy this whole thing okay what will the component look like wait hold on what will the component look like implementing these new Styles okay here is an example of how the component would look like implementing so it's even telling us here's how to add The Styling to the components okay so how to name the class name how to add class names to them right how to basically import The Styling there what are the things that we need to update so this is what the component will look like so let's go ahead and copy this code let's go ahead and update our cart modal component so I'm just going to copy and paste that so that's what the brand new styling and boom look at that it's already starting to look better we have multiple dollar signs which looks a little bit funny so let's keep going and let's go ahead and grab the style and then we're going to take this style okay and we're gonna go ahead and paste that in okay so this is the modal styling and copy that too let's go ahead and paste that in okay now let's take a look at it now it's looking way better even though it has two dollar signs for each product which is not the end of the world but it looks significantly better the image is kind of broken and they're two dollar signs so we have to fix just a few of those things so we're going to remove our dollar sign that we were putting in our cart model jsx okay because it seems like it's already it has a function that's already doing that so we can remove our dollar sign from here perfect so now we have one dollar sign now there's something happening with the image so let's take a look at it card.map item item that I it's not IMG it's actually image so we're going to go ahead and make that image I believe and then it should be good so let's see okay so let's take a look at the item so let's just print out the item so there we go and you can see its image right it's not IMG so let's go ahead and copy that and write that item dot image and then let's take a look and beautiful this model is looking so much better I mean this honestly looks looks kind of stunning and now we're going to add a continued checkout button to the cart modal and style it to look like Amazon so now you'll have a button that can say hey continue to check out and then you can buy it from there so let's go ahead and work on adding that checkout button now okay it's adding that button it's adding in The Styling for that button so let's just go through this fast now we don't need to sit there and watch this it's very boring um let's go ahead and grab the checkout button okay and let's go back to our code and I'm gonna go ahead and I'm gonna paste that button right there okay all the way at the bottom right underneath the total price so we could see it look at that looks gorgeous okay now we got this we got this we got the continue checkout button now these products are product one product two let's call them let's give them actual names so let's get let's go Nike running shoes for this one let's go ahead and say wireless headphones for this one let's go Apple watch right and for the next one we're gonna go ahead and call it um Nike okay and now keep in mind guys we are at functionality you know 10 out of 12 like we are we just created the card model we're actually 11 out of 12. so we have not only created style component but we've already we've also sorry we have not only created the cart model we've already styled the cart modal as well so pretty soon we're gonna be moving on to the final step step 12 which is going to be getting the data from our back end from our SQL database so let's go here let's take a look okay so far I can click the Nike button the Apple watch one it looks good all right now that looks a bit funny right 94.949999 like what the heck is going on there so let's just go ahead and fix that I'm gonna go ahead and just say hey total not price two uh and we're going to say to fix two so give me two decimal points essentially so there we go 94.95 and that should be good okay let's keep going so honestly at this point the app is looking fantastic it is pretty much done we're pretty much good to go with the app the only thing that is left at this point is the final step step 12 out of 12 which is connecting our back end to our front end okay so we're just going to be connecting our front end to our back end now that's all we're doing that's the only thing that's left so let's go ahead and do that now so I'm going to scroll down here and I'm going to basically say hey um we're gonna have products from database and then we're gonna set products from database so this is going to be a state that we're going to set here okay now the next thing we want to do is we want to get products async and we want to use the function that we created which hits that home page route right and it gets us access to the products that we built on our back end so we're going to do something similar here we're just going to say hey response fetch okay let's go look at the route that we have to hit so in this case that's the route that we have to hit so we're going to copy that exact piece of uh URL there Amazon with gbt backend.cleverprogrammer.rebel.co or whatever let's go back and let's paste that in okay so we're going to say go fetch that and then I want you to get the data await the response and get the data from there okay and then let's just console log the data so let's see if that works let's go ahead and hit refresh refresh here and seems like we're running into a bit of a problem so let's create a use effect hook here okay and then that use effect hook we have the um we already have the set total price because that actually increments right and gives me the total price but let's go ahead on line 56 and add in call our get products function because we made the function but we never called it so let's go ahead and make sure that we call it now let's refresh so it should call it on refresh we got some undefined stuff so why is that why did we get undefined stuff here let's put a fire Emoji next to that and let's see what happens let's do response.json now instead of response.data and boom there you go we're pulling this information from our back end that is absolutely amazing so now we know that data is pulling that information so what we need to do is keep track of that data so we're going to call the set products from database function and um Mark put the data in there okay that should be good okay and now we need to just kind of do the last thing where instead of using our static products on line 81 we're going to use our products from our database so I'm just going to say products from database and boom look at that you can see we got headphones and we got an orange Tshirt and we got Apple watch and Nike sneaker and all of this has the images and everything that we have on our back end so there you have it that is the Amazon clone we just built it with chat GPT hope it blew your mind if you want to get the exact app I'm using click the link in the description below and it has that replit link there you can Fork this exact app and play around with it and use it on your own of course you'll kind of have to add in your postgres stuff to make it your own and then you should be good to go but there you have it I hope you enjoyed this video I hope you learned a lot out of it and it was fun informational and as always I'll see you in the next video
