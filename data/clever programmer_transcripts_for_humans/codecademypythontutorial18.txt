With timestamps:

00:00 - hey guys what is up this is kazy from
00:03 - clever
00:04 - program.com and you are watching code
00:07 - academy part
00:10 - 18 no forget the fingers I don't know
00:13 - why I did that but it's part 18 okay I
00:17 - was super excited to get to my studio
00:19 - today so I can start recording this and
00:22 - we can get to part 18 all right so get
00:25 - psyched cuz we're going to get through
00:27 - this and it's going to be awesome we
00:30 - finished
00:32 - hide that had to do with grids
00:34 - battleships remember just a little
00:37 - Recall now we're going to move
00:40 - on to the N Seek part of hide right you
00:44 - can't have hide Without End seek and
00:48 - then it's not cheating it's debugging so
00:50 - we're going to have that as well so
00:52 - let's see let's hit start next lesson
00:55 - great job for now let's store
00:58 - coordinates for the ship in the
01:00 - variables all right the raw input asks
01:04 - user for input and returns it as a
01:06 - string what we're going to want to use
01:09 - integers for our guesses so what they're
01:12 - having us do is take an input from the
01:15 - user so we can use it as a guess right
01:18 - so for example this line
01:21 - here I can now paste it here and let's
01:25 - see what happens this is Python 3 so raw
01:28 - input won't work so I'm going to copy
01:30 - this and I'm going to use it in my idle
01:32 - which is opened by Def which is opened
01:35 - in Python 2 okay so I'm going to hit
01:38 - this part and after hitting enter it's
01:41 - going to say enter a number so whatever
01:43 - number I type in it's now going to store
01:45 - in the variable number okay so your user
01:48 - is going to come on in at this point and
01:51 - say
01:53 - four and now if I spit out number it's
01:56 - four okay it's not an integer four but
02:00 - it's the string for if you wanted to
02:02 - turn it into an integer right you'd have
02:04 - to call Int on it or you can just say
02:06 - int number since four the string four is
02:09 - stored in the variable
02:12 - number okay so they're teaching us how
02:16 - we can get input from the user to do
02:18 - this we'll wrap the raw input with in so
02:20 - here what they're doing they're just
02:22 - saying we'll wrap the raw input with
02:24 - end okay what does that mean here's what
02:27 - it
02:28 - means instead of calling int later we
02:32 - can just call Int right here and store
02:35 - it as a variable so what happens here
02:38 - I'll tell you right now now if I print
02:41 - out number look at what it is it's a
02:43 - integer this part got evaluated right
02:46 - when the user typed in something this
02:48 - entire part got evaluated to the number
02:51 - four the string four and then integer
02:56 - got called on that so here's what
02:58 - happened int
03:00 - the inside parenthesis part where the
03:02 - user entered their number got evaluated
03:04 - to four then int got called on four and
03:07 - that turned it into a four and that's
03:09 - stored it in the variable number okay so
03:12 - this whole thing eventually just turned
03:14 - into the integer
03:18 - four create a new variable called guest
03:21 - row and set it to
03:23 - that okay so what they want us to do is
03:26 - just create guess row now okay so
03:29 - instead of number call it guess row and
03:33 - then guess uh column
03:37 - so big uh scheme of things what we're
03:40 - doing is we're creating the 5x5 grid
03:42 - we're randomly selecting some Square
03:46 - there to hide our ship and then we let
03:48 - the other player try to see where the
03:51 - ship is or the other player could be you
03:53 - maybe playing against the computer and
03:54 - you have to guess where the ship is so
03:56 - you have to give the row and the column
03:58 - to attack that point in the grid okay so
04:02 - 2 1 right row two column 1 that would
04:05 - mean it's two rows down and one column
04:07 - over to the
04:09 - right that's the right from your
04:11 - perspective
04:13 - probably from my perspective the right
04:15 - is
04:16 - this okay so let's do exactly what
04:20 - they're saying guest row is equal to int
04:25 - uh how I write this a lot of times is I
04:27 - write the inner part and then I write
04:28 - the outer part cuz that's actually how
04:30 - python will read it so I'll do raw
04:34 - input
04:36 - guess
04:38 - column okay and now once the user gives
04:41 - us something they'll store it as like a
04:44 - number and then we should call Int on
04:46 - that number right so that's the logic
04:48 - behind
04:50 - why we need to Now call Int right here
04:55 - okay once this part gets evaluated to
04:58 - like a string four int gets called on it
05:00 - and it just turns into a four and gets
05:02 - stored
05:03 - there okay same logic applies here oh
05:07 - sorry not guess column guess
05:10 - row and for this one it should be guess
05:12 - column but not row here guess
05:15 - call that should be
05:21 - good we should now simply be able to
05:23 - save and submit it's taking a second so
05:26 - I'm going to refresh the page but I
05:29 - copied the code so just in case
05:31 - everything is gone we should be a
05:37 - okay guess row okay I'll say four guess
05:41 - column I'll say three okay those got
05:44 - stored in there as integers you see that
05:47 - no strings around that bad
05:49 - boy it's not cheating it's debugging
05:52 - awesome now we have a hidden
05:55 - Battleship and a guess from our player
06:02 - in the next few steps we'll check out
06:03 - the user's guess to see if they are
06:06 - correct okay so in the next few steps
06:09 - we're going to figure out how we can
06:10 - detect what the user guests and check it
06:13 - against the random uh hidden ship
06:16 - location if it's correct then the ship
06:18 - maybe sinks otherwise it doesn't sink
06:20 - and we keep playing so you can already
06:22 - probably imagine it's going to be some
06:24 - kind of you know uh if then kind of
06:27 - situation and if we want want to play
06:29 - the game over and over again what helps
06:33 - you do things over and over again H does
06:37 - it sound like Loops so maybe we'll have
06:40 - to put our entire program in a giant
06:44 - Loop okay so already start thinking
06:47 - about
06:48 - that while we're waiting and debugging
06:50 - this part of the program it will be
06:52 - helpful to know where that battleship is
06:54 - hidden let's add a print statement that
06:57 - displays the location of the Hidden ship
06:59 - so we're going to try to find where it's
07:01 - hidden and so we'll print out that of
07:04 - course we'll remove this output when
07:05 - we're finish debugging since it we left
07:08 - it in our game wouldn't be very
07:09 - challenging so if we right now we're
07:13 - just doing it for debugging and seeing
07:15 - where the hidden location is but if we
07:16 - had it for the game the game wouldn't be
07:18 - very challenging cuz you'll see right
07:20 - away where you hit it and then you can
07:22 - just give guest the right row and right
07:24 - column and win every
07:26 - time so print
07:30 - ship row and print
07:34 - ship
07:36 - coal short for
07:38 - column okay four
07:41 - four okay so we guessed 4 four but the
07:45 - actual location was one Z all right hit
07:49 - or miss so now we're going to detect if
07:50 - we hit it or miss it
07:52 - probably okay now for the fun we have
07:56 - the actual location of the ship and the
07:58 - players guess so we we can check to see
08:00 - if the player guessed right that makes
08:02 - sense for a guess to be right guess
08:04 - column should equal ship column and
08:07 - guess row should equal ship
08:09 - row that also makes
08:12 - sense um The Columns should match and
08:15 - the row should match right if they if
08:17 - you want to guess the correct location
08:19 - um row should match with the column and
08:22 - vice versa so I think you get the idea
08:25 - there the example above is just a
08:27 - reminder about how if statements work I
08:29 - think at this point you have plenty of
08:31 - practice you understand how if
08:33 - statements work uh so try to write it
08:36 - without looking at the code and then
08:37 - come back to this
08:39 - video so here's how it works if guest
08:42 - row equal equal ship row and guest call
08:48 - equal equal ship call then we're going
08:51 - to say print uh step two this is what
08:54 - I'm reading now I just translated step
08:56 - one now we're on step uh two in that
08:59 - case PR print
09:03 - congratulations you sank my
09:07 - battleship and
09:10 - boom
09:12 - okay um that's pretty good that's uh you
09:17 - know kind of the logic of the game right
09:24 - here okay let's play this game a little
09:27 - bit I think it's ready to be taken out
09:29 - for a spin here so let's play it a a
09:32 - little
09:33 - bit and we're going to cheat we're going
09:35 - to put this print uh
09:42 - statement uh we're going to figure out
09:44 - where the hidden ships
09:47 - are before we get to guess our answer so
09:50 - this way we can
09:55 - win evaluating a command undefined
09:59 - what command is undefined I don't see
10:01 - any undefined
10:04 - commands Okay let's refresh this page
10:06 - and come back to
10:19 - it join oh okay print see print evil
10:27 - print ship row is not defined ship row
10:31 - is defined right there what line is it
10:34 - complaining about line 20 it says ship
10:37 - row is not
10:39 - defined well that would make sense
10:42 - because it's not defined at that point
10:45 - it's
10:47 - defined here okay so we see that it was
10:50 - put at0 0 so we're going to guess row
10:52 - zero and guess column zero and it's
10:54 - going to say congratulations you sank my
10:56 - S uh sh sank my ship now let's do it
11:00 - again it guessed uh two for row it
11:03 - printed it out and for column it guessed
11:06 - uh four so I'm going to guess two for
11:09 - row four for column and again it goes
11:11 - congratulations you sank my ship where
11:14 - is 2 and four well
11:17 - zero uh Row one row two so this is row
11:22 - two and then where's column four 0 1 2 3
11:27 - 4 so that's actually where the hidden
11:29 - point is
11:33 - okay see right here awesome let's do
11:37 - start next lesson danger Will Robinson
11:41 - great of course the player isn't going
11:43 - to guess right all the time so we also
11:45 - need to handle the case where the guess
11:47 - is wrong so what happens if the user
11:49 - guess is wrong well I would think that
11:52 - the user should have uh less guesses
11:56 - left right so let's say the user has had
11:59 - 10 guesses if he guesses wrong he should
12:01 - have less guesses left maybe nine
12:02 - guesses that's just my um hunch let's
12:07 - see what they say the example above
12:10 - prints
12:12 - out o the element in the third row and
12:16 - fourth column because they're all
12:19 - O's add an else under the ifs we we
12:24 - wrote in the previous step print out you
12:27 - missed my battleship okay so what I'm
12:31 - going to write is if the column and the
12:33 - row does not match with the guess then
12:36 - I'm going to
12:40 - say print you missed my battle
12:45 - ship okay and then I'm going to say I'm
12:49 - going to do set the list element at
12:51 - Guest row guest column to X okay so I'm
12:56 - going to change that element in the the
12:58 - list 2 and X which means that let's say
13:02 - that um your ship was hidden right here
13:04 - where I highlighted okay so let's say
13:06 - your ship was hidden in row one column
13:09 - one this part right here and let's say I
13:13 - guessed in row 0 column 1 so I guessed
13:18 - right here since I missed your ship it's
13:21 - going to say you missed the ship and
13:23 - it's going to turn this o into an X that
13:26 - way we know we've we're I've already try
13:29 - to shoot your ship or um where I've
13:32 - guessed already
13:33 - okay that's what we're effectively
13:35 - trying to do here so I'm going to
13:39 - say
13:42 - board right that's how that's the
13:44 - variable board right there I'm going to
13:46 - say
13:49 - board guest
13:52 - row guest column where the user guest
13:56 - set that location equal to X okay so if
14:00 - you guess 0 1 row 0er column 1 uh up
14:07 - there is going to change the O into an
14:10 - X as the last line in your L statement
14:13 - call Print board so now we're going to
14:15 - call our print board function which is
14:17 - going to print out the board in a nice
14:19 - way instead of our regular print
14:20 - function cuz remember regular print
14:23 - function just prints out the list of
14:25 - five
14:26 - elements and uh which all list
14:29 - themselves which just looks hideous but
14:31 - when we create our print board function
14:33 - we make it look really pretty and have
14:36 - our each o on its own
14:40 - line so you can see the X so we're
14:42 - printing out the board like so we can
14:44 - see the X and that should be good okay
14:48 - so let's play the game here we're going
14:51 - to guess Row three column
14:55 - 2 and it says you missed my battle ship
15:00 - right
15:02 - cuz the actual location was
15:05 - 30 so we guess Row three column 2 but
15:09 - they hid their ship at three and zero
15:11 - now it says you missed my battleship and
15:14 - it shows
15:15 - us that at location 32 that's where we
15:19 - tried to shoot the ship so this is zero
15:22 - this is Row one this is row two Row
15:24 - three and this is a column zero column 1
15:28 - and column two okay let's move on start
15:31 - next lesson bad
15:34 - aim great job now we can handle both
15:37 - correct and incorrect guesses from the
15:39 - user but now let's think a little bit
15:41 - more about the Miss condition what else
15:45 - should happen in Miss again in my head
15:47 - we should be reducing lives or something
15:50 - right reducing um guesses or something
15:54 - there should be a negative there
15:56 - otherwise what kind of game is it
15:59 - they can enter a guess that's off the
16:01 - board they can guess a spot they've
16:03 - already guessed yeah so what about if
16:05 - they guess off the board your board is a
16:08 - 5x5 grid which means that you should you
16:12 - can the only rows you can access is
16:15 - between the number uh 0 and five
16:18 - including 0 and five and the only
16:21 - columns you can access is 0 and five
16:23 - including 0 and five
16:26 - so if user guess is negative 1 for
16:29 - column and positive 6 for row should
16:33 - they be able to guess that and if they
16:35 - do guess that what happens well your
16:37 - program throws a giant error or big
16:39 - error written in red which everybody
16:43 - hates do you use one of your favorite
16:45 - apps and if you do something uh I don't
16:48 - know kind of weird that doesn't make any
16:51 - sense you click somewhere there's
16:53 - nothing does it just crash the entire
16:55 - app and red lines start showing up no so
16:58 - they must have done something in the
16:59 - back end to be like okay if the user
17:01 - does something stupid we still want to
17:04 - take care of it and not give them an
17:06 - error back so that's effectively what
17:08 - you're trying to do predict you're
17:11 - trying to predict these things right
17:13 - like M Mystic Mac I'm trying to predict
17:15 - the errors so you can catch them and
17:17 - make everything look super
17:19 - nice so they can enter a guest that's
17:22 - off the board too they can guess a spot
17:24 - they've already guessed so you can guess
17:26 - 21 then guess 21 again should it allow
17:29 - you to do that no that would be boring
17:32 - you keep guessing the same spot they can
17:35 - just miss the ship um yeah they can just
17:38 - miss the ship we've kind of taken care
17:40 - of that by saying you missed my ship but
17:43 - we want to now probably do something
17:46 - else we'll add these tests inside our
17:48 - else condition let's build the first
17:50 - test now so if X is not in range 8 or Y
17:55 - not in range three so think about it
17:59 - if what we can say is if ship row guest
18:02 - row is not in
18:06 - range
18:07 - five 0 1 2 3 4 right those are
18:14 - your five
18:16 - places oh sorry I think I confused you
18:19 - guys earlier when I said 0 to five
18:22 - including 0 and 5 that's wrong it's 0
18:24 - and four including 0 and four cuz 0 1 2
18:28 - 3 4 that gives you five locations it
18:31 - gives you five rows 0 1 2 3 4 that gives
18:35 - you five columns okay uh sorry about
18:39 - that I didn't mean to confuse you but I
18:41 - fix that now let's keep going so what we
18:45 - can say is if our ship row or our guest
18:48 - row is not in the range
18:53 - five right Range Five what does that
18:56 - give you that gives you a list with
18:58 - it goes from 0 to four so Range
19:01 - Five okay 0 1 2 3 4 that's actually all
19:06 - our ship rows can be and our ship
19:09 - columns or our guest columns can only be
19:12 - between that range and including those
19:15 - end points so range of five is our range
19:20 - so what we can say is if
19:22 - our if guest row not in
19:27 - range
19:28 - five
19:30 - or guess column not in range
19:37 - five
19:39 - then say outside the range or something
19:42 - yeah print uh your thing was outside of
19:45 - the range you you got it
19:47 - wrong uh and how does you know or
19:51 - conditions uh I'll show you their beauty
19:53 - really
19:57 - quickly
20:07 - you guest outside of the
20:20 - board okay so it picked it up it says
20:23 - you guessed outside of the board uh and
20:26 - how did the or condition work well let
20:29 - me go through it one more time and let's
20:30 - say I put two and I put five you guess
20:34 - outside of the board how did it work
20:36 - guess row not in range five Range Five
20:40 - remember is 0 1 2 3
20:43 - 4 and Range Five here is also 0 1 2
20:48 - 3
20:50 - 4 the only time the if condition runs if
20:55 - uh the block of code underneath the if
20:57 - statement runs
20:58 - is if the
21:00 - condition is evaluated to true so this
21:03 - whole part is one condition okay and if
21:08 - this whole thing evaluates to a true
21:10 - then this block of code runs if this
21:12 - evaluates to a false then line 38 and
21:14 - anything underneath that you know if
21:16 - it's part of that if statement will not
21:18 - run so how will this work
21:23 - okay so not in checks if the guest row
21:27 - was in this list okay for
21:31 - example uh I can show you a trick with
21:34 - in and it checks if something exists so
21:37 - I can say five in list 05
21:41 - 64 and you can see it's a true if I do
21:45 - the same thing and I don't have a five
21:47 - in there it will say false if I say five
21:50 - not in 0 54 what do you think it will
21:54 - say we're saying five is not in that
21:57 - list
21:58 - it's going to give me back false because
22:01 - five is in that list and now if I do it
22:04 - on this list it'll say true you're right
22:07 - five is not in that list okay so you can
22:10 - use not in and in to kind of check
22:12 - through things instead of having to do
22:14 - these long Loops um python made it so
22:17 - it's very easy for
22:18 - you so how does this work guest row
22:21 - evaluates to some integer in our case it
22:24 - was a two right we gave it a two right
22:27 - here forget column we gave it a five so
22:30 - let's see what happens two two not in 0
22:33 - 1 2 3
22:34 - 4 is two not in all of
22:39 - that right that's uh this statement
22:43 - right here what do you think it will
22:45 - be right let's take it in our idle and
22:48 - put it right there it says
22:51 - false and now let's check this
22:54 - part is this part false what's going
22:58 - going on
22:59 - here well if we go through this part
23:03 - guest column is
23:05 - six this evaluates to a what a false
23:10 - statement or sorry we we have five
23:13 - here this part evaluates a true
23:15 - statement
23:17 - right sorry
23:19 - idle true you're right five is not in so
23:24 - we have this statement is a false and
23:28 - this statement is a true and lo and
23:30 - behold we come back to our Bare Bones
23:33 - fundamentals Boolean logic and I've
23:37 - already gave you those poison and ice
23:39 - cream uh or statement examples so you
23:42 - should be a boss of this and figure it
23:44 - out right away what is this whole thing
23:46 - going to evaluate
23:49 - to don't fail me here please it's going
23:53 - to evaluate to a
23:54 - true right the only time or statement is
23:58 - false is when both of the conditions are
24:00 - false so now this whole thing evaluates
24:02 - to a true and our line 38 runs
24:08 - okay
24:10 - hopefully the that blew your mind or
24:15 - statements are not something you know
24:17 - just used for very simple examples you
24:18 - can actually use them for some
24:20 - complicated cool stuff as
24:22 - well all right add a new if statement
24:26 - that is under the on that is nested
24:29 - under the
24:31 - else so nested under the else this means
24:34 - that I'm not going to put a new if
24:36 - statement here it's going to be a part
24:37 - of the else statement so it needs to run
24:40 - every time this else block runs so it
24:43 - needs to be
24:45 - indented uh stim like the example above
24:48 - it should check if guest row is not in
24:49 - range five so guest
24:51 - row um guest row not in range five and
24:59 - guess call not in
25:02 - range five okay they did that hiest
25:06 - thing with Slash I'm not going to stoop
25:08 - down to that
25:09 - level I hate that backward slash so what
25:12 - they're saying is that you can do this
25:14 - and hit enter and then continue writing
25:16 - code here and it'll see it as one line
25:18 - but that just makes your code look
25:19 - hideous don't do it if guest row not in
25:23 - range five and guest column is not in
25:26 - range five
25:31 - and it reads like English right at the
25:32 - end of the day that's what I want you oh
25:34 - I'm sorry
25:36 - or or did they do yeah or basically what
25:40 - we want to do is any one of them uh is
25:43 - outside of the range it should stop
25:45 - because if you did and and both of the
25:48 - statements would have to be true you
25:50 - remember with and both conditions have
25:52 - to be true for it to evaluate to a true
25:55 - so what that means is that both both of
25:58 - row and column would have to be outside
26:00 - of the board but that's not uh
26:04 - necessarily true only one of the indices
26:08 - a row or a column has to be outside of
26:09 - the board and then the whole thing is um
26:12 - false or in this in our case it's true
26:15 - and then we run like you you are outside
26:17 - of the board or
26:19 - something if guest R not in range five
26:22 - and guest column not in range five let's
26:25 - see what happens print
26:28 - oops that's kind of funny that's not
26:32 - even in the
26:34 - ocean it's almost like a disrespectful
26:37 - message right after your if statement
26:40 - add an
26:42 - else um I got to make it look nicer here
26:44 - a little
26:46 - bit else and that else should be a part
26:49 - of that if statement that we wrote right
26:51 - this else is actually connected to that
26:53 - if statement you can't just write an
26:55 - else by itself it has to be connected to
26:57 - an if
26:59 - statement else uh that contains your
27:02 - existing Handler for an incorrect
27:06 - guess
27:11 - um
27:15 - what H add a new if statement that is
27:19 - nested under the else if that is the
27:21 - case print out oops after your new if
27:25 - statement add an l contains your
27:28 - existing Handler for an incorrect guess
27:34 - what does they mean by existing
27:39 - Handler okay let's reason through
27:43 - this if you guess my row and column
27:48 - correctly you win
27:50 - hooray if you don't we run the cell
27:54 - statement here I Mark that spot as X
27:58 - and I print the
28:01 - board if guess
28:06 - is if guess uh if you guess outside of
28:10 - the range I print oops that's not even
28:12 - in the ocean do they want me to put this
28:15 - whole thing right here now how's going
28:22 - on so basically that's saying that if
28:25 - it's not out of the range
28:28 - then go ahead and Mark that spot as an
28:34 - X yeah I think that's what they're
28:37 - saying it's weird not again great now
28:41 - let's handle the second type of
28:42 - incorrect guess the player guess is a
28:44 - location that's already guessed how will
28:46 - we know that a location was previously
28:50 - guessed Okay add an else if so okay
28:54 - first of all think about it how can we
28:56 - know if the first location was already
28:58 - guessed it's simple you guys that
29:00 - location has an x on it right if it
29:04 - doesn't have an O it has an x on it you
29:06 - already know it's been checked so don't
29:08 - check that so maybe just write a simple
29:10 - L if or whatever condition that checks
29:13 - for that X if it's that X then you know
29:17 - um guess again or
29:19 - something so here add an else if to see
29:23 - if the guest location already has an X
29:26 - in it so I'm going to
29:28 - write an else if which I can put in here
29:33 - right else if goes in between if and
29:34 - else so I can say else
29:38 - if a board of that guess row and guess
29:46 - column if that is equal to an X so what
29:49 - will happen the board this board is a
29:52 - 5x5 grid I'm not going to put it here
29:55 - it's going to look confusing but this is
29:56 - a this this is a 5x5 grid this is an
30:00 - index this is some index and this is
30:02 - another
30:04 - index uh using this you access an
30:07 - element of the board and that element
30:09 - might either be an o or if the ship has
30:11 - already been hit it might be an X okay
30:15 - so we're checking if it's an
30:17 - X so if that is an X we're going to say
30:20 - print you guessed that one
30:25 - already okay
30:27 - just like
30:37 - that I
30:39 - did you guessed that one already
30:43 - already I did put that
30:46 - message did you put that message in your
30:49 - elsf statement yep I
30:52 - did did they want me to put this else if
30:55 - in here is that what they want me to do
31:08 - um did you remember to add the you guess
31:11 - that one already message in your else if
31:21 - statement I said if that board location
31:25 - already has an X
31:29 - print you guessed that oh oh my goodness
31:33 - okay I didn't put a period in there okay
31:35 - wow big
31:37 - deal all
31:39 - right these guys you got to be careful
31:42 - you got to pay attention to
31:44 - detail attention to
31:46 - detail
31:49 - goodness okay guys um so for this video
31:53 - that is it we are going to continue from
31:57 - test run and we're getting so close to
32:01 - sinking the ship you're you sunk my
32:03 - battleship and all the way here and
32:05 - finishing this up just to so stay
32:08 - motivated you're doing a great job
32:10 - making it so far cuz I know we're so far
32:13 - into this but all good things come with
32:16 - hard work okay so don't give up now
32:19 - you're at your beast mode right now
32:21 - we're at
32:23 - 57% and where are we 60 8% we're almost
32:28 - completed with this okay we're more than
32:29 - halfway there and we have pretty much
32:31 - completed the game we just have to do
32:33 - some very basic parts of it now all
32:36 - right that's it for this video please
32:39 - like the video if you liked it please
32:41 - subscribe to the channel it would really
32:43 - help out and other than that I will see
32:46 - you guys in code academy Python tutorial
32:48 - part 19 boom nailed it this time take
32:53 - care

Cleaned transcript:

hey guys what is up this is kazy from clever program.com and you are watching code academy part 18 no forget the fingers I don't know why I did that but it's part 18 okay I was super excited to get to my studio today so I can start recording this and we can get to part 18 all right so get psyched cuz we're going to get through this and it's going to be awesome we finished hide that had to do with grids battleships remember just a little Recall now we're going to move on to the N Seek part of hide right you can't have hide Without End seek and then it's not cheating it's debugging so we're going to have that as well so let's see let's hit start next lesson great job for now let's store coordinates for the ship in the variables all right the raw input asks user for input and returns it as a string what we're going to want to use integers for our guesses so what they're having us do is take an input from the user so we can use it as a guess right so for example this line here I can now paste it here and let's see what happens this is Python 3 so raw input won't work so I'm going to copy this and I'm going to use it in my idle which is opened by Def which is opened in Python 2 okay so I'm going to hit this part and after hitting enter it's going to say enter a number so whatever number I type in it's now going to store in the variable number okay so your user is going to come on in at this point and say four and now if I spit out number it's four okay it's not an integer four but it's the string for if you wanted to turn it into an integer right you'd have to call Int on it or you can just say int number since four the string four is stored in the variable number okay so they're teaching us how we can get input from the user to do this we'll wrap the raw input with in so here what they're doing they're just saying we'll wrap the raw input with end okay what does that mean here's what it means instead of calling int later we can just call Int right here and store it as a variable so what happens here I'll tell you right now now if I print out number look at what it is it's a integer this part got evaluated right when the user typed in something this entire part got evaluated to the number four the string four and then integer got called on that so here's what happened int the inside parenthesis part where the user entered their number got evaluated to four then int got called on four and that turned it into a four and that's stored it in the variable number okay so this whole thing eventually just turned into the integer four create a new variable called guest row and set it to that okay so what they want us to do is just create guess row now okay so instead of number call it guess row and then guess uh column so big uh scheme of things what we're doing is we're creating the 5x5 grid we're randomly selecting some Square there to hide our ship and then we let the other player try to see where the ship is or the other player could be you maybe playing against the computer and you have to guess where the ship is so you have to give the row and the column to attack that point in the grid okay so 2 1 right row two column 1 that would mean it's two rows down and one column over to the right that's the right from your perspective probably from my perspective the right is this okay so let's do exactly what they're saying guest row is equal to int uh how I write this a lot of times is I write the inner part and then I write the outer part cuz that's actually how python will read it so I'll do raw input guess column okay and now once the user gives us something they'll store it as like a number and then we should call Int on that number right so that's the logic behind why we need to Now call Int right here okay once this part gets evaluated to like a string four int gets called on it and it just turns into a four and gets stored there okay same logic applies here oh sorry not guess column guess row and for this one it should be guess column but not row here guess call that should be good we should now simply be able to save and submit it's taking a second so I'm going to refresh the page but I copied the code so just in case everything is gone we should be a okay guess row okay I'll say four guess column I'll say three okay those got stored in there as integers you see that no strings around that bad boy it's not cheating it's debugging awesome now we have a hidden Battleship and a guess from our player in the next few steps we'll check out the user's guess to see if they are correct okay so in the next few steps we're going to figure out how we can detect what the user guests and check it against the random uh hidden ship location if it's correct then the ship maybe sinks otherwise it doesn't sink and we keep playing so you can already probably imagine it's going to be some kind of you know uh if then kind of situation and if we want want to play the game over and over again what helps you do things over and over again H does it sound like Loops so maybe we'll have to put our entire program in a giant Loop okay so already start thinking about that while we're waiting and debugging this part of the program it will be helpful to know where that battleship is hidden let's add a print statement that displays the location of the Hidden ship so we're going to try to find where it's hidden and so we'll print out that of course we'll remove this output when we're finish debugging since it we left it in our game wouldn't be very challenging so if we right now we're just doing it for debugging and seeing where the hidden location is but if we had it for the game the game wouldn't be very challenging cuz you'll see right away where you hit it and then you can just give guest the right row and right column and win every time so print ship row and print ship coal short for column okay four four okay so we guessed 4 four but the actual location was one Z all right hit or miss so now we're going to detect if we hit it or miss it probably okay now for the fun we have the actual location of the ship and the players guess so we we can check to see if the player guessed right that makes sense for a guess to be right guess column should equal ship column and guess row should equal ship row that also makes sense um The Columns should match and the row should match right if they if you want to guess the correct location um row should match with the column and vice versa so I think you get the idea there the example above is just a reminder about how if statements work I think at this point you have plenty of practice you understand how if statements work uh so try to write it without looking at the code and then come back to this video so here's how it works if guest row equal equal ship row and guest call equal equal ship call then we're going to say print uh step two this is what I'm reading now I just translated step one now we're on step uh two in that case PR print congratulations you sank my battleship and boom okay um that's pretty good that's uh you know kind of the logic of the game right here okay let's play this game a little bit I think it's ready to be taken out for a spin here so let's play it a a little bit and we're going to cheat we're going to put this print uh statement uh we're going to figure out where the hidden ships are before we get to guess our answer so this way we can win evaluating a command undefined what command is undefined I don't see any undefined commands Okay let's refresh this page and come back to it join oh okay print see print evil print ship row is not defined ship row is defined right there what line is it complaining about line 20 it says ship row is not defined well that would make sense because it's not defined at that point it's defined here okay so we see that it was put at0 0 so we're going to guess row zero and guess column zero and it's going to say congratulations you sank my S uh sh sank my ship now let's do it again it guessed uh two for row it printed it out and for column it guessed uh four so I'm going to guess two for row four for column and again it goes congratulations you sank my ship where is 2 and four well zero uh Row one row two so this is row two and then where's column four 0 1 2 3 4 so that's actually where the hidden point is okay see right here awesome let's do start next lesson danger Will Robinson great of course the player isn't going to guess right all the time so we also need to handle the case where the guess is wrong so what happens if the user guess is wrong well I would think that the user should have uh less guesses left right so let's say the user has had 10 guesses if he guesses wrong he should have less guesses left maybe nine guesses that's just my um hunch let's see what they say the example above prints out o the element in the third row and fourth column because they're all O's add an else under the ifs we we wrote in the previous step print out you missed my battleship okay so what I'm going to write is if the column and the row does not match with the guess then I'm going to say print you missed my battle ship okay and then I'm going to say I'm going to do set the list element at Guest row guest column to X okay so I'm going to change that element in the the list 2 and X which means that let's say that um your ship was hidden right here where I highlighted okay so let's say your ship was hidden in row one column one this part right here and let's say I guessed in row 0 column 1 so I guessed right here since I missed your ship it's going to say you missed the ship and it's going to turn this o into an X that way we know we've we're I've already try to shoot your ship or um where I've guessed already okay that's what we're effectively trying to do here so I'm going to say board right that's how that's the variable board right there I'm going to say board guest row guest column where the user guest set that location equal to X okay so if you guess 0 1 row 0er column 1 uh up there is going to change the O into an X as the last line in your L statement call Print board so now we're going to call our print board function which is going to print out the board in a nice way instead of our regular print function cuz remember regular print function just prints out the list of five elements and uh which all list themselves which just looks hideous but when we create our print board function we make it look really pretty and have our each o on its own line so you can see the X so we're printing out the board like so we can see the X and that should be good okay so let's play the game here we're going to guess Row three column 2 and it says you missed my battle ship right cuz the actual location was 30 so we guess Row three column 2 but they hid their ship at three and zero now it says you missed my battleship and it shows us that at location 32 that's where we tried to shoot the ship so this is zero this is Row one this is row two Row three and this is a column zero column 1 and column two okay let's move on start next lesson bad aim great job now we can handle both correct and incorrect guesses from the user but now let's think a little bit more about the Miss condition what else should happen in Miss again in my head we should be reducing lives or something right reducing um guesses or something there should be a negative there otherwise what kind of game is it they can enter a guess that's off the board they can guess a spot they've already guessed yeah so what about if they guess off the board your board is a 5x5 grid which means that you should you can the only rows you can access is between the number uh 0 and five including 0 and five and the only columns you can access is 0 and five including 0 and five so if user guess is negative 1 for column and positive 6 for row should they be able to guess that and if they do guess that what happens well your program throws a giant error or big error written in red which everybody hates do you use one of your favorite apps and if you do something uh I don't know kind of weird that doesn't make any sense you click somewhere there's nothing does it just crash the entire app and red lines start showing up no so they must have done something in the back end to be like okay if the user does something stupid we still want to take care of it and not give them an error back so that's effectively what you're trying to do predict you're trying to predict these things right like M Mystic Mac I'm trying to predict the errors so you can catch them and make everything look super nice so they can enter a guest that's off the board too they can guess a spot they've already guessed so you can guess 21 then guess 21 again should it allow you to do that no that would be boring you keep guessing the same spot they can just miss the ship um yeah they can just miss the ship we've kind of taken care of that by saying you missed my ship but we want to now probably do something else we'll add these tests inside our else condition let's build the first test now so if X is not in range 8 or Y not in range three so think about it if what we can say is if ship row guest row is not in range five 0 1 2 3 4 right those are your five places oh sorry I think I confused you guys earlier when I said 0 to five including 0 and 5 that's wrong it's 0 and four including 0 and four cuz 0 1 2 3 4 that gives you five locations it gives you five rows 0 1 2 3 4 that gives you five columns okay uh sorry about that I didn't mean to confuse you but I fix that now let's keep going so what we can say is if our ship row or our guest row is not in the range five right Range Five what does that give you that gives you a list with it goes from 0 to four so Range Five okay 0 1 2 3 4 that's actually all our ship rows can be and our ship columns or our guest columns can only be between that range and including those end points so range of five is our range so what we can say is if our if guest row not in range five or guess column not in range five then say outside the range or something yeah print uh your thing was outside of the range you you got it wrong uh and how does you know or conditions uh I'll show you their beauty really quickly you guest outside of the board okay so it picked it up it says you guessed outside of the board uh and how did the or condition work well let me go through it one more time and let's say I put two and I put five you guess outside of the board how did it work guess row not in range five Range Five remember is 0 1 2 3 4 and Range Five here is also 0 1 2 3 4 the only time the if condition runs if uh the block of code underneath the if statement runs is if the condition is evaluated to true so this whole part is one condition okay and if this whole thing evaluates to a true then this block of code runs if this evaluates to a false then line 38 and anything underneath that you know if it's part of that if statement will not run so how will this work okay so not in checks if the guest row was in this list okay for example uh I can show you a trick with in and it checks if something exists so I can say five in list 05 64 and you can see it's a true if I do the same thing and I don't have a five in there it will say false if I say five not in 0 54 what do you think it will say we're saying five is not in that list it's going to give me back false because five is in that list and now if I do it on this list it'll say true you're right five is not in that list okay so you can use not in and in to kind of check through things instead of having to do these long Loops um python made it so it's very easy for you so how does this work guest row evaluates to some integer in our case it was a two right we gave it a two right here forget column we gave it a five so let's see what happens two two not in 0 1 2 3 4 is two not in all of that right that's uh this statement right here what do you think it will be right let's take it in our idle and put it right there it says false and now let's check this part is this part false what's going going on here well if we go through this part guest column is six this evaluates to a what a false statement or sorry we we have five here this part evaluates a true statement right sorry idle true you're right five is not in so we have this statement is a false and this statement is a true and lo and behold we come back to our Bare Bones fundamentals Boolean logic and I've already gave you those poison and ice cream uh or statement examples so you should be a boss of this and figure it out right away what is this whole thing going to evaluate to don't fail me here please it's going to evaluate to a true right the only time or statement is false is when both of the conditions are false so now this whole thing evaluates to a true and our line 38 runs okay hopefully the that blew your mind or statements are not something you know just used for very simple examples you can actually use them for some complicated cool stuff as well all right add a new if statement that is under the on that is nested under the else so nested under the else this means that I'm not going to put a new if statement here it's going to be a part of the else statement so it needs to run every time this else block runs so it needs to be indented uh stim like the example above it should check if guest row is not in range five so guest row um guest row not in range five and guess call not in range five okay they did that hiest thing with Slash I'm not going to stoop down to that level I hate that backward slash so what they're saying is that you can do this and hit enter and then continue writing code here and it'll see it as one line but that just makes your code look hideous don't do it if guest row not in range five and guest column is not in range five and it reads like English right at the end of the day that's what I want you oh I'm sorry or or did they do yeah or basically what we want to do is any one of them uh is outside of the range it should stop because if you did and and both of the statements would have to be true you remember with and both conditions have to be true for it to evaluate to a true so what that means is that both both of row and column would have to be outside of the board but that's not uh necessarily true only one of the indices a row or a column has to be outside of the board and then the whole thing is um false or in this in our case it's true and then we run like you you are outside of the board or something if guest R not in range five and guest column not in range five let's see what happens print oops that's kind of funny that's not even in the ocean it's almost like a disrespectful message right after your if statement add an else um I got to make it look nicer here a little bit else and that else should be a part of that if statement that we wrote right this else is actually connected to that if statement you can't just write an else by itself it has to be connected to an if statement else uh that contains your existing Handler for an incorrect guess um what H add a new if statement that is nested under the else if that is the case print out oops after your new if statement add an l contains your existing Handler for an incorrect guess what does they mean by existing Handler okay let's reason through this if you guess my row and column correctly you win hooray if you don't we run the cell statement here I Mark that spot as X and I print the board if guess is if guess uh if you guess outside of the range I print oops that's not even in the ocean do they want me to put this whole thing right here now how's going on so basically that's saying that if it's not out of the range then go ahead and Mark that spot as an X yeah I think that's what they're saying it's weird not again great now let's handle the second type of incorrect guess the player guess is a location that's already guessed how will we know that a location was previously guessed Okay add an else if so okay first of all think about it how can we know if the first location was already guessed it's simple you guys that location has an x on it right if it doesn't have an O it has an x on it you already know it's been checked so don't check that so maybe just write a simple L if or whatever condition that checks for that X if it's that X then you know um guess again or something so here add an else if to see if the guest location already has an X in it so I'm going to write an else if which I can put in here right else if goes in between if and else so I can say else if a board of that guess row and guess column if that is equal to an X so what will happen the board this board is a 5x5 grid I'm not going to put it here it's going to look confusing but this is a this this is a 5x5 grid this is an index this is some index and this is another index uh using this you access an element of the board and that element might either be an o or if the ship has already been hit it might be an X okay so we're checking if it's an X so if that is an X we're going to say print you guessed that one already okay just like that I did you guessed that one already already I did put that message did you put that message in your elsf statement yep I did did they want me to put this else if in here is that what they want me to do um did you remember to add the you guess that one already message in your else if statement I said if that board location already has an X print you guessed that oh oh my goodness okay I didn't put a period in there okay wow big deal all right these guys you got to be careful you got to pay attention to detail attention to detail goodness okay guys um so for this video that is it we are going to continue from test run and we're getting so close to sinking the ship you're you sunk my battleship and all the way here and finishing this up just to so stay motivated you're doing a great job making it so far cuz I know we're so far into this but all good things come with hard work okay so don't give up now you're at your beast mode right now we're at 57% and where are we 60 8% we're almost completed with this okay we're more than halfway there and we have pretty much completed the game we just have to do some very basic parts of it now all right that's it for this video please like the video if you liked it please subscribe to the channel it would really help out and other than that I will see you guys in code academy Python tutorial part 19 boom nailed it this time take care
