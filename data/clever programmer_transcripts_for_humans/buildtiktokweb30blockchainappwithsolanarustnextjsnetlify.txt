With timestamps:

00:00 - in this video you'll build a tick tock
00:02 - web 3.0 dab with next js you'll be
00:05 - building this on the solana blockchain
00:08 - we'll write your own program and you'll
00:10 - code up your smart contract and what's
00:12 - amazing about this is you'll be using
00:14 - anchor framework which makes it so much
00:16 - easier to actually use rust again why
00:18 - we'll be using solana for this is solana
00:20 - is blazingly fast and it is a wonderful
00:23 - user experience that's why this app is
00:26 - gonna be on solana you'll use cargo to
00:29 - compile and deploy your very own smart
00:31 - contract i'll show you how to use
00:33 - phantom wallet to actually authenticate
00:36 - users so they can log in and log out of
00:38 - your app lastly we'll take this app and
00:41 - deploy it using netlify and at that
00:44 - point you'll have your very own tick
00:46 - tock web 3.0 dab deployed and hosted on
00:50 - the internet ready for anyone to be able
00:51 - to use also i am super excited to
00:54 - actually share this with you guys this
00:56 - has been weeks and months in the process
00:59 - we have built our own cli tool that you
01:01 - guys will now get to start using i'm
01:04 - unbelievably excited about this we
01:05 - publish our own package in npm nerdy
01:08 - things aside what this basically means
01:10 - is you'll be able to write one line like
01:12 - npx clever programmer and it'll get you
01:15 - set up with the entire project with all
01:17 - the assets you don't have to go and like
01:18 - get the images from somewhere else you
01:20 - don't have to like download different
01:22 - dependencies on your own this will just
01:24 - install all the dependencies and
01:26 - everything taken care of for you so i'm
01:28 - especially excited because you'll get to
01:30 - do that in this project with that said
01:32 - go ahead and smash that like button
01:35 - break that thing right now and uh
01:37 - subscribe to the channel because this is
01:39 - a channel where you become a better web
01:40 - 3d developer so i hope you're excited
01:42 - with that said i'm gonna get out of your
01:44 - way and i'm gonna let your instructor
01:47 - lance take it away and get you started
01:49 - on this build lance let's go welcome
01:51 - welcome to the tick tock demo lance here
01:53 - let me show you guys around so when you
01:55 - first open your app you're going to see
01:56 - this page right here all this means is
01:59 - that you need to select your wallet and
02:01 - of course we're going to be using
02:02 - phantom because this is on solana so as
02:05 - you can see phantom's detected i'm going
02:06 - to connect my wallet bam and all we need
02:09 - to do now is just pick a username for
02:10 - yourself so i'm going to use qazi's name
02:12 - for this one and let's get a profile
02:14 - image at the moment we set it up so that
02:16 - we're going to use dicepear to get all
02:18 - our avatars so if i go here we can
02:20 - create our custom profile by writing in
02:23 - a seat so if i just put kazi this is
02:25 - what it thinks kazi or generates for
02:27 - qazi so very beautiful let's take that
02:30 - svg and paste it onto here i'll just
02:32 - click sign up so every time we do
02:35 - something on this app you're gonna see
02:37 - the phantom wallet here ask if we can
02:38 - approve this transaction that's because
02:40 - everything we do is gonna be stored on
02:42 - chain so let's hit approve and bam there
02:44 - we go we are logged in on tick tock and
02:47 - how do i know because if i scroll down
02:48 - you're gonna see all these different
02:50 - tick tocks by different people as you
02:51 - can see drac we got lance here we got
02:54 - another launch one here and if i press
02:56 - play
02:59 - how awesome is that and you can see on
03:02 - each of these there's different comments
03:04 - like this one right so if i look there's
03:06 - comments there's our boy kevi kev
03:08 - awesome and another cool feature that
03:10 - you can do is that you can actually add
03:11 - a comment so thank you all right i'm
03:13 - logged in as kazi i'm gonna go hit reply
03:15 - and let's leave a comment and like i
03:17 - said before even the comments are stored
03:19 - on change and after a couple seconds bam
03:21 - there you go there's qazi's comment over
03:23 - there 40 seconds ago how awesome is that
03:26 - cool and you don't have to worry because
03:28 - all of this is on the dev net this is
03:30 - not the main answer you're not going to
03:31 - lose actual solana by storing these
03:33 - comments on chain but the purpose of
03:35 - this video is to show you guys how to
03:36 - develop on the solana chain so we can
03:39 - leave comments and not only that we can
03:40 - go ahead and click this little heart and
03:42 - let's drop a like and bam look at that
03:44 - so the heart turns red and there's a
03:46 - beautiful three right there so that's
03:48 - pretty sick we got comments we got likes
03:50 - but guess what that's not all we can
03:52 - also upload your very own tick tocks
03:54 - onto your app so let me show you guys
03:56 - how to do that all we need to do is
03:58 - click this plus icon right here and
04:00 - you're going to see this model for
04:01 - upload new video that's because we need
04:03 - to fill in now so to get a tick tock
04:04 - video of course let's go to tech talk
04:06 - and i'm going to go to our clever
04:08 - programmer tick tock and let's pick a
04:10 - random video let's do this building
04:12 - chess app right here what you need to do
04:14 - is right click this click copy video
04:16 - address head back over to your app and
04:19 - you can just put any description you
04:20 - want building chess app and react right
04:23 - and then paste that video url and let's
04:25 - hit create new awesome and all you have
04:28 - to do is hit a proof again and bam there
04:30 - it is this is the video i just uploaded
04:32 - and you can see it's uploaded by the
04:35 - username that's login quasi so how cool
04:37 - is that you can put your very own tick
04:38 - tocks on a website that you created so
04:41 - that's enough demo do you guys want to
04:42 - build this let's head over to the
04:44 - tutorial and just like kazi said this is
04:46 - gonna be on the salon chain so i'm
04:49 - pretty excited one thing i wanted to
04:50 - mention i love making these projects so
04:52 - that you guys can have cool stuff for
04:54 - your portfolio one thing that you could
04:56 - do to make it better it would make me
04:57 - really happy is to go in this code
04:59 - change all of it understand how it works
05:01 - and make it your own right let's say you
05:03 - don't want to make tick tock maybe you
05:04 - want to make your own version of tick
05:05 - tock this is a really good launching
05:07 - point to do that enough of my rant let's
05:09 - get started with the build so over here
05:11 - you'll see that i have my terminal open
05:13 - and one thing that i'm happy to announce
05:16 - is that clever programmer has their own
05:19 - cli tool so if you guys just do npx
05:21 - clever programmer now you're gonna get
05:23 - the tick tock project like the starter
05:25 - files that we need so no more creating
05:27 - next step no more install dependencies
05:29 - or looking for the repo to get it
05:30 - working you're gonna have everything
05:32 - you'll need the only thing i'll need to
05:33 - ask from you is double check on your
05:34 - terminal for node dash version yeah cool
05:37 - and notice how i have 16. so our cli
05:40 - tool is going to work on version 16 and
05:42 - up so if you're version 14 or 12
05:44 - definitely update it if you're watching
05:46 - this from the future this might be a
05:48 - little bit different when you run this
05:49 - command okay so if you're with me in the
05:51 - present do npx clever programmer and
05:54 - let's see boom awesome so you're going
05:55 - to see a couple questions enter your
05:57 - email address i'm going to say lance
05:59 - clever programmer and for my name i'ma
06:01 - hit links beautiful cool and look at
06:04 - this how cool is this when it says what
06:05 - project would you like to initialize at
06:07 - the moment it's just tick tock but soon
06:09 - we're going to have all the other
06:10 - starter files for each project going
06:12 - forward so it's going to make all of our
06:14 - lives easier so i'm going to go ahead
06:15 - and select tick tock and look at that
06:17 - while you wait smash that like button
06:18 - and if you look at the front end it's
06:20 - installing the dependencies boom and i
06:22 - don't know if you guys saw that but as
06:24 - it finished it literally opens up bs
06:26 - code and opens the project right away so
06:29 - that is super cool if i look at vs code
06:31 - now the front end folder is already set
06:33 - up this is our next js app if you look
06:35 - the yarn lock file you're gonna notice
06:37 - all the packages that we have installed
06:39 - is already in here and the package.json
06:42 - as well right there's solana wallet
06:44 - adapter axios javascript time ago react
06:47 - icons all of it is in there and guess
06:49 - what you all have to do was write npx
06:50 - clever programmer so with that said
06:53 - setup is done okay cool so all i did so
06:55 - far was x out my terminal and made this
06:57 - a little bit bigger because we're no
06:58 - longer going to need it i can just use
07:00 - my integrated terminal one thing i
07:01 - wanted to mention with our cli tool we
07:03 - essentially just did a git clone so if
07:05 - you want to push this you're gonna see
07:07 - that you don't have permission i'm gonna
07:08 - do right now and show you guys how to
07:10 - create your own repo and any changes
07:12 - that you wanna make on here will now be
07:14 - pushed to that repository so how do we
07:16 - do that all you have to do is just open
07:18 - up your browser so go to github.com and
07:22 - i'm gonna go ahead and make this bigger
07:23 - and let's just create a new repository
07:26 - okay you're with me so far and again
07:28 - there is many many different ways to do
07:30 - one thing if you have your own way go
07:32 - for it i'm just going to make a new repo
07:33 - and connect this to it if you're new for
07:35 - my beginners out there feel free to
07:37 - follow along so all i'm going to do is
07:38 - do a tick tock solana that's going to be
07:40 - the name of my repo and for now i can
07:42 - just do create repo boom so you're going
07:44 - to see this page and it's going to show
07:46 - you give you insight on how to set it up
07:48 - but what we can do here is head over
07:50 - back to your vs code right and i'm going
07:52 - to click control b and command control j
07:56 - or command j if you're on mac and all
07:57 - you guys need to do let me just fix this
07:59 - up all you guys need to do is just get
08:01 - remote set dash url origin we're going
08:05 - to change the remote origin of this one
08:07 - to now be connected to the new repo we
08:10 - just made so go ahead and copy this link
08:11 - i'm gonna copy and i'm gonna right click
08:13 - and there we go i'm gonna hit enter boom
08:15 - so now it's connected how do i know
08:17 - because now if i try to push so let's
08:19 - make it small change all i'm gonna do is
08:20 - add a space here hit save and if i do a
08:23 - git status you can check the changes
08:25 - that you made i modified pack json cool
08:27 - and if you're okay with that change just
08:29 - do a git add dot to add all changes and
08:33 - then you just do a git commit i'm gonna
08:35 - say set up own repo okay and then i'll
08:38 - just do a git push and now you shouldn't
08:40 - see permission failed or anything like
08:42 - that because now it's directly connected
08:44 - to the one we just created boom so get
08:46 - push awesome and if i hit refresh on
08:48 - here look at that and here's my comment
08:50 - setup on repo essentially you forked the
08:52 - project that we created and as you can
08:54 - see our boy david who originally created
08:56 - project is a contributor and now you're
08:59 - free to just add whatever you want to
09:00 - this so that's how we're going to be
09:01 - developing once that's set up we can
09:03 - actually set this up to netlify now
09:05 - right if you don't know netlify is a
09:07 - website that can host your static apps
09:09 - one thing we can do is connect our
09:11 - github repo so every time i make a
09:12 - change it's going to redeploy it live so
09:15 - it's always going to be redeployed we'll
09:16 - have to set it up once we do it for the
09:18 - first time so if that sounds cool to you
09:20 - let me show you guys how to do that
09:21 - awesome so once you clear terminal the
09:22 - first thing you want to do is an npm
09:24 - install netlify dash cli dash g if
09:28 - you're wondering what this does we're
09:29 - just installing the cli tool from
09:31 - netlify globally so i don't have to go
09:32 - on the website and set things up i can
09:34 - just do it all from the comfort of my
09:36 - command line so i'm going to do this and
09:37 - hit enter i already have it installed
09:39 - but i want to do it with you guys okay
09:41 - cool so once that's done all you guys
09:43 - have to do now is if you type in the
09:44 - word netlify you're going to see a list
09:46 - of commands that you can run with the
09:48 - cli tool we see init which we're going
09:50 - to use later build api add-ons there's a
09:52 - bunch of different things you could do
09:53 - you can even set up environment
09:54 - variables through the cli what we want
09:56 - to focus on is initializing our site
10:00 - right so i can shorten our command
10:02 - instead of saying netlify i can say ntl
10:04 - and then i'm going to say ntl login
10:06 - right i'm going to hit enter and for me
10:08 - i'm already logged in but for you guys
10:10 - what might happen is on your browser the
10:12 - netlify website will pop up and it's
10:14 - going to prompt you to log in i highly
10:16 - suggest you connect it to github because
10:18 - it's going to make this next step a lot
10:19 - simpler so make a netlife account with
10:22 - them make an account with them by just
10:24 - hopping to your new tab right here and
10:26 - all you have to write is
10:27 - ntl.fyi
10:29 - clever and you can go ahead and sign up
10:31 - with them if you don't have an account
10:32 - nice cool so once you have an account
10:34 - and logged in you can go ahead and exit
10:37 - out what you need to do next right after
10:38 - i clear this it's just going to be an
10:40 - ntl init what this does it automatically
10:42 - sets up a netlife website and i'll show
10:45 - you guys in a second ntl init boom so
10:47 - look at that so now it's going to ask
10:48 - you connect this to an existing metlife
10:50 - site or just make a new one so we're
10:52 - making a new one i'm gonna hit this one
10:54 - and now we can give it a name i'm gonna
10:55 - go ahead and select create and configure
10:57 - a new site because we're making a new
10:59 - one awesome for the team just select
11:01 - enter and then now here's where you can
11:03 - name your website so this will be the
11:04 - url that people type in to get there so
11:07 - for me i'm just going to say tick tock
11:08 - solana awesome so there isn't any other
11:10 - ones called tick-tock solano that i have
11:12 - so it went through for the base
11:14 - directory make sure it's front end
11:16 - especially if you use our cli tool
11:18 - because that's where our next app lives
11:20 - enter and we used yarn so what you need
11:22 - to write in this section is yarn run
11:24 - build and for current directory you can
11:26 - just hit enter for this for net life
11:28 - functions folder hit enter and now we
11:30 - just say yes because we need this plugin
11:32 - and boom adding deploy key cool so now
11:35 - it's hooked up to our github repo and
11:38 - every time i hit push it's going to
11:39 - deploy the site so what we could do to
11:42 - test this out let's run it again do this
11:44 - and make that change take out that space
11:46 - hit save go through the process of
11:48 - setting up git again if i do a git add
11:49 - dot commit
11:51 - m removed spacing from
11:54 - package.json and we'll still get push
11:56 - okay boom we can see those changes on
11:59 - our github just like normal remove
12:00 - spacing from package.json and then we
12:02 - head to netlify we can make this guy a
12:05 - little bit bigger i'm gonna hit login
12:07 - and there it is there's tik-tok solana
12:08 - and you're going to notice that it
12:09 - failed right the reason why it failed is
12:11 - because there's some things we got to
12:12 - set up on this and what we can do is go
12:14 - to deploy settings go to environment and
12:17 - click edit variables you can also do
12:19 - this on the cli tool but i'm just going
12:20 - to show you since we're already on the
12:22 - website what you want to do at this
12:23 - point is going to be in capitals npm
12:26 - flags right flags or flag and we're
12:29 - going to just put dash force make sure
12:31 - this one is lowercase okay i'm just
12:33 - going to check it's force awesome
12:35 - because what you might run into is some
12:37 - peer dependency issues on the modules
12:40 - this will just override that because you
12:41 - should just be fine okay once that's
12:43 - done i'm gonna go back to deploys and
12:46 - let's do trigger deploy and let's clear
12:48 - cache and deploy site cool and now let's
12:50 - just wait for this thing to be finished
12:51 - and live oops hold on might be a mistake
12:54 - on my part let me go back to environment
12:56 - i think this should actually be flags
12:58 - let's hit save now let's try this again
13:00 - okay cool now let's wait for it to load
13:02 - there we go so you can see the dash test
13:04 - force is disabled now look at that so
13:06 - the side is live now so what that means
13:07 - is i can go over here and click preview
13:10 - if you want to preview the site or we
13:12 - can click deploys and just click on the
13:13 - link right here so you can see tic tac
13:16 - solana lfi dot app and you can actually
13:19 - copy this link and send it to all your
13:20 - friends and show them what you made
13:22 - obviously right now ain't much but every
13:24 - time we push to our github repo this
13:26 - live site is updating and that's the
13:27 - cool part about this so with that said
13:29 - netlify set up we have our repo ready to
13:31 - go let's get to coding before we move
13:33 - any further i want to talk about the
13:35 - project so what i'm going to do is open
13:37 - up my little whiteboarding app and as
13:39 - you know we're coding this project on
13:41 - the solana chain and if you watched our
13:42 - facebook video you know that we use
13:44 - something called anchor and as a
13:46 - refresher anchor is just a framework
13:48 - where we can build secure solana
13:52 - programs quickly and if you didn't know
13:54 - if you're more familiar with the term
13:55 - smart contract that is the equivalent on
13:57 - solana programs or essentially smart
13:59 - contracts yeah cool so with that said
14:02 - anchor underneath the hood handles a
14:04 - bunch of security checks that we don't
14:05 - really need to do that we're gonna need
14:07 - to care about if we're gonna write this
14:08 - natively but since we're running anchor
14:10 - it's gonna make that a lot easier the
14:12 - main reason i'm using anchor is because
14:14 - it creates an interface that we can use
14:17 - on the front end to call our solana
14:19 - program what does that mean to you guys
14:21 - on our next.js app if i want to be able
14:23 - to create and upload a video i'm going
14:25 - to need to talk to my solana smart
14:27 - contract to create that video and it
14:29 - makes it really easy with anchor you
14:31 - with me so far another prerequisites to
14:33 - this is one you have to be able to
14:35 - install the anchor cli tool and lucky
14:38 - for you guys if you did npx clever
14:40 - programmer you're going to notice this
14:42 - folder called tick tock clone this is
14:44 - actually the anchor build itself so that
14:45 - step is already done for you but if you
14:47 - wanted to do this on your own one thing
14:49 - that i like to share with you guys are
14:50 - these links right here all right let me
14:52 - just clean this up a little bit and
14:53 - we'll also provide these links in the
14:54 - description but essentially these this
14:56 - is how we can get started with
14:58 - installation and if you want to learn
14:59 - about any cli commands this is where
15:02 - you're going to go and as a disclaimer
15:03 - by no means am i saying i'm a developer
15:06 - expert and solana what i want to do is
15:08 - get as much practice as i can and
15:10 - whatever i learned from building these
15:12 - amazing projects for you i want you guys
15:13 - to be able to take away and learn on
15:15 - your own so what that means is if you're
15:17 - watching this and none of this is making
15:18 - sense watch it over and over again and
15:20 - take what you do understand and build
15:22 - something that you're passionate about
15:24 - because that's how you really understand
15:26 - my goals with these builds is to
15:27 - essentially be a launching pad for you
15:29 - to create really cool projects and maybe
15:31 - learn something along the way cool with
15:32 - that said one benefit that i want to
15:34 - show you guys is we can use the anchor
15:37 - cli tool to write a program but if the
15:40 - setup is really difficult for you guys
15:42 - solana made something really cool and
15:44 - i'm about to show you guys there is a
15:46 - tool out there where you don't need to
15:47 - install anchor at all all you have to do
15:49 - is type in this beta.solepg.io
15:52 - hit enter and as you can see let me make
15:54 - this bigger if you guys are familiar
15:56 - with remix at all if you're coming from
15:57 - solidity background this is essentially
15:59 - the remix for solana what that means is
16:02 - i can write my smart contracts on here
16:04 - deploy them build them and test them all
16:06 - on the browser which is amazing so that
16:08 - if setup is an issue this is going to be
16:10 - the way to go so what i'll be doing for
16:12 - this tutorial is creating the smart
16:14 - contract on solana playground that being
16:16 - said i'm excited for this build i want
16:18 - you guys to take your time with these
16:20 - concepts that i'm going to be talking
16:21 - about today and for my anchor experts my
16:23 - rust experts out there if there's any
16:25 - you know improvements that i could do
16:26 - feel free to leave a comment down below
16:28 - i'm always wanting to learn more just
16:29 - like you guys so with that said let's go
16:31 - awesome so this is the solano playground
16:33 - like i mentioned before this is a place
16:35 - where we can write the smart contract of
16:37 - our build so we're going to start with
16:39 - this first and build out the whole smart
16:41 - contract and another benefit about doing
16:43 - this is that the tests are really easy
16:45 - to do so once we make a function i can
16:47 - just test it right away and see if it
16:48 - works cool so let's get started one
16:50 - thing i want to do is set up any
16:52 - additional libraries that we're going to
16:53 - need awesome so the anchor prelude comes
16:55 - by default another one that we're going
16:57 - to need to do is
16:58 - use right this is how the equivalent of
17:00 - an import in javascript we can say
17:02 - solana underscore program colon entry
17:06 - point colon program result okay that's
17:09 - one that we're gonna use another one
17:10 - that we're gonna use we're gonna say use
17:12 - std mem colon size of
17:16 - this one is important because
17:18 - with rust or with anchor they really
17:20 - care about the size of everything unlike
17:23 - javascript where you can put like in a
17:25 - massive array and it wouldn't cause any
17:27 - problems the reason for this is because
17:29 - rust is a lower level language and error
17:31 - handling is a lot easier if we know
17:33 - exactly the size of everything and we
17:35 - can do that by using this library right
17:37 - here cool other than that let's do
17:39 - another use anchor let's see anchor lang
17:42 - i believe and then after that it's colon
17:44 - colon solana underscore program log
17:47 - brackets soul underscore log compute
17:52 - underscore units right this is going to
17:53 - help us log our units this is
17:55 - essentially important for budgeting when
17:57 - it comes to how much solana are we
17:58 - spending for the smart contract right
18:00 - don't worry about that too much these
18:01 - are all the libraries that we're going
18:02 - to be needing to use right over here
18:05 - this is the place where we're going to
18:07 - declare ird or in other words our
18:09 - programs address so by default when you
18:11 - use the lab program it's going to be all
18:13 - these ones but once i hit this build
18:15 - button it's going to generate a new
18:17 - program for us later okay cool now i
18:20 - just want to take this time to go over
18:21 - the anatomy of an anchor project and
18:24 - explain to you guys to the best of my
18:25 - knowledge so if you see this hashtag
18:27 - bracket program you can think of this as
18:30 - what anchor uses to define what a solana
18:32 - smart contract or program is right so
18:35 - this is the name of our smart contract
18:37 - by default it's called hello anchor and
18:39 - if you see this pub fn you can look at
18:41 - that as a function if you're coming from
18:43 - javascript so what is this function it's
18:45 - initializing right here are the
18:47 - parameters right it's context is
18:50 - initialized which i'll get into in a
18:51 - second and notice how it talks about
18:54 - it's going to take in a parameter called
18:55 - data and this is the data type an
18:57 - unsigned integer that's 64 bytes okay
19:00 - cool and then it's going to take in a
19:01 - result and here is the logic for that
19:04 - initialize function so you might be
19:05 - wondering what the hell does this mean
19:07 - well essentially context is essentially
19:09 - the state so if we come down here you're
19:12 - going to see something called pub struct
19:14 - initialize what that means is i'm
19:16 - creating essentially initialize object
19:19 - and i'm defining the characteristics of
19:21 - that object right so you can see pub new
19:24 - account is going to be account and the
19:26 - signer is the user that is associated
19:29 - with the program and the system program
19:31 - is the program and it also brings in all
19:33 - the information about it that's what it
19:35 - is on a really high level and that's how
19:36 - i'm using to explain to you guys coming
19:38 - in from javascript or our old builds
19:40 - okay cool notice how we have another
19:42 - obstruct here right like i said if this
19:44 - is creating a new object this is
19:46 - essentially a class and here are the
19:49 - properties it's gonna take in data cool
19:51 - so that's essentially on a high level
19:53 - the anatomy of an anchor project i'm
19:55 - gonna be morphing this to what we want
19:57 - out of this build cool so like i said if
20:00 - this program is telling us what a smart
20:02 - contract is then this mod is essentially
20:05 - all the instructions that we want our
20:08 - smart contract to do so at the moment
20:10 - you can say that this smart contract we
20:12 - can initialize something if you
20:13 - understand that let's go ahead and think
20:15 - about what i want to do for this app
20:16 - right so i'm just going to make some
20:17 - space here to separate it and let's go
20:19 - ahead and delete this cool so the first
20:22 - thing i want to do is pub fn create
20:25 - underscore user so if i were to ask you
20:27 - guys what does this function do or what
20:29 - do you think it does it's just going to
20:30 - create a user create a user for what for
20:33 - my next app right for tick tock this is
20:35 - creating a user on tiktok okay if that's
20:37 - the case it's me like normal where you
20:39 - make this a function and the difference
20:40 - if you're coming from javascript going
20:42 - into rust is i'm gonna make this arrow
20:45 - here and then i'm gonna say program
20:47 - result camel case right this is the
20:49 - library that we're importing you can
20:50 - look at this is what is this function
20:53 - returning right on a very high level so
20:55 - i'm going to do something like this and
20:56 - what i can write in here is going to be
20:57 - the logic of how do we want to create a
20:59 - user so just like any other function
21:01 - this function is going to take a couple
21:03 - parameters and with rust you need to
21:06 - define what is the type that you're
21:08 - expecting from the parameters so that
21:10 - error handling is a lot easier so if i
21:12 - say something like ctx all right that
21:14 - just means context and context is
21:17 - essentially a container that holds the
21:19 - data that we define on this program so
21:21 - what i'll do is i'll write everything
21:22 - out and i'll talk about it a little bit
21:24 - after so ctx is all you need to write
21:26 - here and put a colon and then you're
21:27 - just going to write context create user
21:30 - all right then you have a comma here
21:32 - because there's a couple more parameters
21:33 - that i want to add and it's going to be
21:34 - named and that's going to be string and
21:36 - it's going to take in a profile url
21:39 - right so what i want to do later in tik
21:41 - tok is you can sign up and put in
21:43 - whatever name or username that you want
21:45 - and i also want to give you guys a nice
21:47 - profile image that you can attach to it
21:49 - so that's why it's going to take that in
21:50 - as a parameter so profile url and then
21:53 - that's also going to be a string cool
21:55 - awesome with that said ctx here is the
21:58 - parameter you're probably wondering what
21:59 - is create user so before we move any
22:02 - further with this if you're wondering
22:04 - what create user is it doesn't exist yet
22:05 - we haven't made a struct or in other
22:07 - words class that defines what a create
22:10 - user object is so what we can do is
22:12 - actually edit this one so we still need
22:15 - this here hashtag derive accounts
22:16 - because if you remember the word
22:18 - accounts in this case it's essentially
22:20 - like data stored on the solana network
22:22 - it's a trait that we can add to this
22:24 - object or class whatever so whatever
22:27 - struct i create after this line is going
22:29 - to inherit all the qualities of it so
22:31 - enough jibber jabber i'm just going to
22:33 - start coding what i'm going to do here
22:34 - is for this struct i'm going to write
22:36 - create user right so now when i pass in
22:40 - a create user object you know what i'm
22:41 - you know what i'm talking about also
22:43 - you're gonna need this info here it's
22:44 - essentially what's called a lifetime
22:46 - variable if you know what rust is that's
22:48 - something that's common within that
22:49 - language okay we're gonna need this here
22:51 - to get all the information about create
22:52 - user and then when you come down to here
22:54 - this hashtag account this part alone is
22:56 - essentially an attribute that can define
22:59 - specific behaviors for our account for
23:02 - example i'm saying the payer is the
23:04 - signer which is essentially the one who
23:06 - created the contract the wallet that's
23:07 - associated with that and there's
23:08 - something that's space equals eight plus
23:11 - eight that's essentially saying how much
23:13 - space is this taking okay like i said
23:16 - space is very important to know for this
23:18 - code so what i want to do is let's edit
23:20 - this oh so the changes i want to make is
23:22 - a little something like this i'm just
23:23 - going to format it because there's a
23:24 - couple things i want to add to it cool
23:26 - so we're still going to need init here
23:28 - another thing that we're going to add is
23:29 - something called seeds essentially you
23:32 - could look at this as a hash and
23:33 - whatever i put here will help generate a
23:36 - unique hash all right later down in the
23:38 - video i'm going to be talking about die
23:40 - something called dice bear and this what
23:42 - this does is let you create an avatar
23:45 - based on whatever you type in here so
23:46 - take a look if i do blah blah blah blah
23:48 - i get this randomly generated avatar
23:51 - based on what i wrote so if i say lance
23:52 - this will generate this right so without
23:55 - getting too low level or complicated if
23:57 - i go back to the solana playground
23:59 - whatever i put in this array is going to
24:01 - generate a unique hash or seed so what
24:04 - we can do here is input a bunch of
24:06 - information that will help create
24:08 - generate that okay so don't worry too
24:10 - much about what i put here that's just
24:12 - mainly the main purpose so what i'm
24:13 - going to write is b as ref oops
24:16 - lowercase after that let's add a comma
24:18 - because i also want to put authority dot
24:21 - key parentheses dot as underscore okay
24:24 - cool another thing to add is a comma
24:26 - right after this and put something
24:27 - called bump so adding on to what i said
24:30 - earlier whatever i put here will
24:31 - generate a unique hash if that hash
24:34 - already exists what bump will do is
24:37 - basically add like a number or two i
24:39 - believe it does like 20 times until it
24:41 - checks if that unique hash is used or
24:44 - not so that's why i'm going gonna add
24:45 - bump here cool so that we can ensure we
24:47 - have a unique hash after that the payer
24:49 - here is actually gonna equal the
24:51 - authority if you didn't know the
24:52 - authority is the one that is gonna allow
24:55 - us to upgrade our contract basically
24:58 - whoever the address that's associated
25:00 - with making this program so we'll do
25:01 - that as the authority and then for the
25:03 - space it's not going to be equals eight
25:05 - plus eight what it's going to be though
25:07 - is size of do the user right that's
25:11 - created so i say user account then
25:13 - parentheses
25:14 - then we're gonna say plus the user right
25:17 - the space of this is gonna depend on the
25:19 - user that's logged in on his name so if
25:22 - my name is lance or if my name is
25:24 - supercalifragic listbigalidocious right
25:27 - we need to add that as the space great
25:29 - so the username that length and also the
25:32 - underscore url blank
25:34 - then plus eight okay cool all right off
25:36 - the bat you're gonna say like lance this
25:38 - doesn't exist where are you getting this
25:39 - from there's a couple things you have to
25:40 - do also so what i mean is coming back up
25:43 - to the top here underneath the declarity
25:45 - let's add some space like i said we're
25:47 - going to need to essentially hard code
25:49 - how much space we're going to be taking
25:50 - for each thing all right so in this case
25:52 - we need to determine how long can users
25:55 - make their name and essentially how long
25:57 - can the video url length be so if i
25:59 - write const user underscore name
26:02 - underscore length right i have to
26:04 - determine how big it will be so if i say
26:06 - colon i'll say it's a use size of about
26:09 - equal 100 so this kind of equates to
26:12 - roughly one character right so this is
26:13 - how long the username how long do you
26:15 - want the video url to be well we can say
26:17 - const video oops video underscore url
26:21 - length and let's give this a size of
26:24 - about
26:25 - 225. so if we try to input a size that's
26:28 - longer than this it's not going to work
26:30 - i'm literally saying how much space that
26:33 - this account is going to be does that
26:34 - make sense cool all right so i'm going
26:36 - to be coming back jumping around and
26:38 - adding more essentially constants for
26:40 - each thing so while i'm here let's make
26:43 - another cons and this one is going to be
26:44 - the user underscore url underscore
26:48 - length all right which is also going to
26:50 - be the same as the video length so 225
26:53 - so essentially it doesn't matter which
26:54 - one we put here video url length or user
26:57 - url link because it's supposed to be the
26:59 - same size and again this con's user url
27:01 - length is going to represent the url
27:03 - that we get from this so if this is my
27:05 - url it can only be 225 characters long
27:08 - which this is plenty with this awesome
27:10 - so just in case you guys forget this is
27:12 - going to be username length username
27:14 - length this one just contains the user
27:17 - profile image url link cool awesome all
27:21 - right so that is that's essentially all
27:23 - we're gonna need to authenticate the
27:24 - user account the next thing i want to do
27:26 - is basically define the
27:29 - attributes of a create user right are
27:32 - probably not needed so let me just start
27:34 - fresh i'm just gonna code it up and then
27:36 - talk about it okay so what i'm gonna do
27:37 - is pub user say account brackets info
27:43 - cool so i'm essentially saying the user
27:45 - is going to be all of this information
27:47 - right this user account here and this
27:50 - user account here isn't just essentially
27:52 - another struct that hasn't been created
27:53 - yet so we're going to get to that what
27:55 - would a user object look like but right
27:57 - now we're dealing with create user so
27:58 - the next attribute we're going to need
28:00 - to do the hashtag account and just make
28:02 - this mutable when you see something like
28:04 - mute here mut i'm saying that this could
28:07 - be changed essentially what i'm trying
28:09 - to set up is this i'll say pub the
28:12 - authority is gonna be whoever the signer
28:15 - is okay i'm gonna have this comma boom
28:17 - and then also make a little comment for
28:19 - me and for you this is essentially the
28:21 - authority or in other words this is
28:24 - signer who paid the transaction fee
28:28 - because anytime we store something on
28:29 - train there's going to be some
28:30 - transaction fees so i'm just saying
28:32 - who's ever paying for this is going to
28:34 - represent who's paying for it okay so
28:35 - now i'm going to move a little bit more
28:36 - quicker now now that you guys are
28:37 - starting to get used to the flow i'm
28:39 - going to say pub
28:40 - system underscore program it's going to
28:42 - be an unchecked account and of course
28:44 - we're going to put in this lifetime
28:46 - variable here info again okay which is
28:48 - essentially a simple test account for
28:50 - tick tock okay cool so next step what i
28:52 - want to do is just say pub clock and
28:55 - it's just going to be sis var this and
28:58 - say our info again and i'll say clock
29:01 - essentially we're going to use this
29:02 - clock to save time cool and with that
29:04 - said this is our create user struct
29:06 - awesome using this same pattern we can
29:08 - actually make the user account structure
29:10 - let's define what is a user account look
29:12 - like and maybe that will make more sense
29:13 - to you guys so coming down before here
29:15 - we don't need this i'm just going to
29:17 - edit this i don't need the hashtag
29:19 - derive default but i will be using the
29:20 - hashtag account again here and the name
29:22 - of this struct is like i said is going
29:24 - to be user account so what i ask you
29:27 - guys here is what would be the if you
29:29 - were making a schema or an object in
29:31 - javascript or what a user account would
29:34 - look like what would be some properties
29:35 - that you want to keep track of what i'm
29:36 - thinking is pub user underscore name
29:39 - what is their username and what would be
29:40 - the data type of it exactly you got it
29:42 - muhammad it's a string i don't know if
29:44 - your name is actually muhammad but i
29:46 - hope that you guys like realized and
29:48 - looked so shout out to muhammad out
29:49 - there okay so that's the username all
29:51 - right what's next i also want to keep
29:52 - track of pub user wallet address right
29:55 - essentially what's the wallet address of
29:57 - the user so this one can just be the pub
29:59 - key or sorry pub key like that okay
30:02 - lastly remember what i said earlier
30:04 - we're going to be storing that user's
30:05 - name so if it's me it's lance and also
30:07 - the nice profile url that we get here so
30:10 - for this i'm just going to say user
30:12 - underscore profile underscore image
30:15 - underscore url colon string okay so this
30:18 - is essentially the behaviors or what can
30:20 - we expect when i say user account and if
30:22 - i wanted to access any specific
30:24 - properties of that later in my front end
30:26 - i can reference it using this so i hope
30:29 - that makes a little bit more sense to
30:30 - you because now this should be a little
30:32 - bit more clear right when i create a go
30:34 - ahead and create a user object right i'm
30:36 - going to take into account what is a
30:38 - user account and for the space of it i
30:40 - want to check what is that user's name
30:42 - that length then the video url that link
30:44 - or like i said it could have been uh
30:46 - user url as well cool so now it should
30:48 - be all connecting together slowly
30:50 - awesome so now that's set up we can go
30:52 - ahead and write the logic of the create
30:54 - user function and it should make a
30:55 - little bit more sense to you when i
30:57 - start typing this out so in the create
30:58 - user function if i want to create be
31:00 - creating a user let's say let user is
31:02 - going to equal this okay cool so let's
31:04 - break this down i'm saying in this
31:06 - function there's going to be a user
31:07 - variable and it's going to equal this
31:09 - and mute so remember what i said earlier
31:11 - mute make sure that this can be changed
31:14 - depending on when i call it where i call
31:16 - it what am i calling that what am i
31:17 - making mutable this ctx ctx right from
31:20 - the parameter and it's grabbing the
31:22 - context of create user so get the
31:25 - contacts that i need go into the
31:28 - accounts which again is just the data
31:29 - stored on the program and get me the
31:32 - user and once you get that storyline to
31:34 - the variable and that's going to
31:35 - represent the user are you with me so
31:37 - far cool other than that let's set up
31:39 - the authority so what i can do is say
31:41 - user dot user underscore wallet
31:44 - underscore address all right so if you
31:46 - think about it what is user underscore
31:48 - wallet where is this coming from this
31:50 - property remember what we just did if
31:52 - you see the highlighted it's coming from
31:53 - here right so that tells me that user is
31:56 - referencing this struct and i'm
31:58 - referencing that user's wallet address
32:02 - cool so that user's wallet address i'm
32:04 - going to set it equal to the context
32:06 - right the data that i have stored that
32:08 - accounts.authority.key
32:11 - right essentially i'm setting the
32:13 - authority key as this user's value or
32:17 - the value of this i set the value of the
32:19 - wallet address to be what i get from
32:21 - here which is exactly what it is okay in
32:23 - other words i just set up the authority
32:25 - awesome all right so the next thing i
32:26 - want to do is if i write writing
32:28 - comments let's set the text all right so
32:30 - set the text let's move a little bit
32:31 - faster now user.username
32:34 - is going to equal name right
32:36 - user.username is coming from once again
32:38 - here and i'm setting the value of that
32:40 - property to be the name and what is the
32:42 - name it's going to be whatever i passed
32:44 - in so imagine me later in my front end
32:46 - i'm going to be calling this create user
32:48 - function and i'm going to be passing in
32:50 - lance and i'm going to be passing in my
32:52 - url that i get from here all right so
32:54 - that's what i'm doing setting it equal
32:55 - to there and then from there let's do a
32:57 - user dot user underscore profile
33:00 - underscore image underscore url it's
33:02 - gonna equal you guessed it this whatever
33:05 - i passed in as my url awesome all right
33:08 - so take a second you tell me what does
33:10 - this mean so if you were able to explain
33:12 - it i think you're getting the hang of
33:13 - this so that's essentially all the logic
33:15 - we need to write all we need to do now
33:17 - is write something called message
33:18 - exclamation point and we're gonna say
33:20 - user added you can look at this as the
33:23 - equivalent of console logging on a
33:25 - solana program so if i put a comment
33:27 - here this is just logging it right cool
33:29 - after that remember this where it's
33:31 - going to compute the units all right i
33:33 - just want to make sure i'm going to do
33:34 - that here so i'm going to say solana log
33:36 - underscore compute oops underscore units
33:40 - and call that function all right oops in
33:42 - short this essentially is also logging
33:44 - right but it's going to log how many
33:47 - compute units are left if you're
33:49 - wondering why i'm doing this it's
33:51 - important for the budget because
33:52 - remember it's all based on who the
33:53 - signer who the authority is so this is
33:55 - gonna help okay one last thing is you
33:57 - wanna and it's kind of unique to rust uh
34:00 - you wanna add this okay right here which
34:02 - essentially it's essentially saying that
34:05 - if all this runs the function has passed
34:07 - cool so we're gonna be adding this okay
34:08 - to every single function
34:10 - with that said that's the create user
34:12 - function that wasn't too bad so let's go
34:13 - ahead and go over here and you'll notice
34:15 - build and deploy all i want to do is
34:16 - build and what i do with build is you
34:18 - can see any errors that come up if i
34:20 - wrote something wrong or you get any
34:22 - warning so let's try building let's see
34:23 - what we get yep here we go already have
34:25 - some errors and that's because ah quick
34:27 - thing to note i can see starting from
34:30 - line 16 it's expecting a semicolon right
34:33 - so in javascript we can get away without
34:36 - putting any semicolons but any other
34:37 - language like java or even rust like
34:40 - this but semicolons are pretty important
34:42 - so cool let's see if that fixes the
34:44 - issue let's hit build again okay cool so
34:46 - now the issue is on line 33 this sysvar
34:49 - thing i might have typed it wrong pub
34:51 - struct sysfar info t oh i see so after
34:54 - looking around i realized that this it
34:56 - should be more like this info instead of
34:57 - the back tick and just add that in there
34:59 - and anytime i see info i should put this
35:02 - like that boom so now it's actually the
35:03 - right color that makes more sense so let
35:05 - me try building okay cool okay let's
35:08 - build this up cool okay it says problem
35:10 - with my compute units probably because
35:13 - semicolon again let's see if that gets
35:15 - fixed going back to here
35:17 - unchecked account i see another info
35:19 - that i missed awesome all right so let
35:21 - me just hit refresh because this is
35:22 - getting hard to read cool all right so
35:24 - now that's done let's go back to this
35:26 - and if i refresh notice how it still
35:28 - saves everything i coded up that's
35:29 - because whatever you write here is just
35:31 - cached on the browser if you wanted to
35:32 - reset it back to default just clear your
35:34 - brush your cache let's hit build and
35:36 - awesome so i only see
35:38 - oh okay we actually got a couple errors
35:40 - expected more semicolon issues yep
35:43 - that's one right there and of course
35:45 - another one right here all right so i'm
35:46 - gonna take a moment to get all the
35:47 - semicolons done and i'll let you guys
35:48 - know if there was anything interesting
35:49 - that i see use your username that's a
35:51 - semicolon 54
35:53 - size has issue with size of oh i see
35:56 - that's because this should actually be
35:58 - underscore and if you see warnings don't
36:00 - worry about those because it's just
36:02 - letting me know that it's unused so
36:03 - let's do a build again alright so build
36:05 - asreft okay oh i see i just forgot to
36:09 - put the parentheses here i might have
36:10 - done that somewhere else let's do build
36:12 - unexpected 935 yep this should have a
36:16 - semicolon too let me just refresh this
36:18 - get a little bit clearer picture yes
36:19 - okay cool final so yeah i just add a
36:21 - bunch of semicolons and some typos here
36:23 - and there which is expected sometimes
36:26 - and if you just see warnings we're good
36:27 - to go right like for example user url
36:30 - length i'm not using it in there so
36:32 - anchor is just letting me know like hey
36:33 - this isn't you other than that every
36:34 - single thing seems to be working fine
36:36 - awesome uh deployment can only be done
36:38 - from the playground wallet right because
36:40 - playground comes with the wallet and
36:42 - when i want to deploy this i have to be
36:44 - connected so we can just hit connect for
36:45 - now let's also just save key pair
36:47 - because we're going to need that later
36:48 - cool and i'm going to remember it
36:49 - because it's key pair one awesome so now
36:51 - i can deploy but i don't want you to do
36:53 - that yet i wanted to do deploy once i
36:55 - know that the build is stable and
36:57 - working and if you come down to here we
36:59 - can actually test all these functions we
37:01 - create once we deployed it so for now
37:03 - i'm just gonna be checking it with build
37:05 - and then i'm gonna be testing the
37:06 - functions after it's all said and done
37:08 - so this is like the trial run try to get
37:10 - you guys familiar with the anatomy but
37:12 - from this point forward i'm gonna be
37:13 - moving forward like faster and not
37:15 - explaining everything as much sounds
37:17 - good all right let's keep up right so
37:18 - one of the first things i want to do is
37:20 - come up to the very very top here and
37:22 - you see this mod hello anchor right
37:24 - that's not the name of my smart contract
37:26 - right what i want to call this smart
37:27 - contract is tick tock underscore clone
37:30 - you can name this whatever you want but
37:31 - this is what i want okay cool now let's
37:34 - go ahead and make our next function so
37:36 - that was kind of just a quick demo on
37:38 - what the anatomy of an anchor project
37:40 - looks like so hopefully i didn't scare
37:42 - you away too much and you clicked off
37:44 - the video but if you're still here
37:45 - amazing you're taking that leap so just
37:47 - to reward you guys let's hop back into
37:49 - our build and let's get back to some
37:51 - nice comfortable web 2 stuff so what i'm
37:54 - saying is let me just do it something
37:56 - like this make sure you're in the front
37:58 - end and we can x out all of these guys
38:01 - let's start working on our index so let
38:04 - me set it up real quick this is our
38:06 - beautiful next app that we'll have like
38:08 - this and how is that can you guys see
38:10 - that cool so again we don't need all of
38:13 - this starter file so let's go ahead and
38:15 - clean it up i'm gonna go ahead and take
38:17 - out the head from here we can keep the
38:19 - styles for now i also just want to erase
38:21 - everything from here onwards until that
38:24 - closing div let's hit delete hit save
38:26 - and if you remember this is actually our
38:28 - live version which we'll check back in a
38:29 - bit later i'll clean up this because
38:31 - it's our netlify and i'll clean up this
38:32 - because it's our github cool so if i
38:34 - press ctrl j or command j we'll get the
38:37 - terminal and remember since we're using
38:39 - the fire cli tool let's just do ntl dev
38:42 - and what i'll do is just open up your
38:45 - local
38:46 - machine and open up localhost 888 and we
38:49 - should see a blank project awesome so
38:51 - now we're ready to get started let's
38:52 - work on the index okay cool the next
38:55 - thing i want to do is i'm probably not
38:57 - going to use this styles home module and
38:59 - just so you know we're not going to be
39:00 - using tailwind for this we're going to
39:02 - be using vanilla css so that's been a
39:04 - while so what i'm going to do is change
39:06 - this not from container but i think i
39:07 - should just call this
39:10 - and we don't since i'm calling it app
39:12 - and i'm going to use this in our global
39:14 - css i'm just going to say class name app
39:16 - awesome so i just want to talk about how
39:18 - i'm thinking about this index right so
39:20 - if i'm making a app on the salon chain
39:22 - we're going to essentially need a wallet
39:24 - to connect to our app so for this app
39:27 - i'm going to be using phantom wallet so
39:30 - i want to set some conditional rendering
39:32 - that if it's connected the wallet is
39:34 - connected we're going to load the main
39:36 - view component right based on our
39:38 - ternary statement and if we're not
39:40 - connected what i want to do is load up
39:43 - some different jsx so i'm going to say
39:45 - div with the class name equal to login
39:48 - container okay and if i make that dip
39:51 - let's make a closing do awesome and
39:54 - you're going to see the squiggly line
39:55 - that's because this is commented out if
39:57 - i brought it back in though it looks a
39:58 - lot nicer so let's leave it in for now
40:00 - but because that component doesn't exist
40:02 - we're going to comment it out later cool
40:03 - so i'm going to quickly do this set up
40:05 - another div and let's see this one i'm
40:08 - going to call class name login title and
40:11 - we'll say log 2 because again if the
40:13 - user is not logged in i want this little
40:15 - like jsx that's going to represent a
40:18 - little thing that says the user should
40:19 - log in so let's do that div here class
40:22 - name equals login sub title cool and
40:26 - then there we just want to say manage
40:28 - your account something like check
40:31 - notifications
40:33 - comment on videos comma more and if i do
40:37 - like an alt z here you should be able to
40:39 - see all that in one line nice cool then
40:41 - there's a closing div awesome and like i
40:43 - said if i hit save we're going to see
40:44 - some errors because main view doesn't
40:46 - exist so let's go ahead and create it so
40:48 - to create a component all we have to do
40:50 - is come over to our front end and let's
40:52 - see and just make a folder let's call it
40:55 - components all right in this component
40:57 - folder i'm going to hit new file and
40:59 - let's say main view dot js cool and then
41:02 - when we make the main vjs i'm going to
41:04 - command b and let's do rs code snippet
41:06 - this is an extension that i'm using
41:08 - that's just going to create a component
41:09 - like so so if i hit save on the main
41:12 - view it's all good and saved and again
41:14 - we don't have connected yet so what i'll
41:16 - do is let's just temporarily make a
41:18 - variable called connected and if we are
41:20 - connected we should see the main view so
41:23 - let's hit save main view is not defined
41:25 - and guess what that's because rule
41:26 - number one if you want to use a
41:27 - component let's import said component
41:30 - right okay so i'm gonna do is write main
41:32 - view from that path so it's dot forward
41:35 - slash components slash main view and
41:37 - look at that main view is highlighted
41:39 - and now if i hit save hey look at that
41:41 - so main view is gonna load if my wallet
41:44 - is hypothetically connected if i were to
41:46 - say false we should see log on to tick
41:49 - tock so let's just fix this make it look
41:51 - a little nicer cool so now that our
41:53 - index is set up let's clean up our login
41:56 - so like i said i'm just gonna put this
41:58 - in our global css so if i go to
42:01 - not pages to styles let's go to global
42:03 - css i'm just going to add it on to here
42:05 - cool so if i do command b can you guys
42:08 - see that yeah cool so let's do dot app
42:11 - because that is like the main container
42:13 - if you remember index this is app the
42:16 - styling that i want to put for this is
42:18 - going to be a height of 100 vh because i
42:20 - want my app to take 100 of my screen or
42:23 - in this case the view height next let's
42:25 - add a background right background of
42:29 - 2
42:30 - c 2
42:31 - d 3 0 hit save boom that's the
42:34 - background for our tick tock and then
42:36 - we're going to add display flex here
42:38 - because i want to use flexbox for this
42:39 - and then we'll do a justify content
42:42 - center and a align items center cool so
42:46 - that's the css for the app and if you
42:47 - want to take a look if i go to localhost
42:51 - 3001 i actually have the finished
42:53 - project up and running so this is what
42:55 - we want to get to so i basically want to
42:57 - create a nice little square that has
43:00 - this text and this select wallet button
43:03 - right here okay but if you look at where
43:05 - we're at right now we're not quite there
43:07 - yet so let's add a little bit more
43:08 - styling to our project so if i remember
43:11 - see what's the next thing i need to
43:12 - style it's going to be the login
43:14 - container itself that is going to be
43:16 - this white background that you see here
43:18 - so let's select it by saying login
43:21 - container then we can say background
43:23 - color is simply just white cool save you
43:26 - can see it instantly reflected right
43:27 - here now how do i get that square that i
43:29 - was talking about just say
43:31 - 350 pixels and say min underscore height
43:35 - height and height then we can say 300
43:37 - pixels let's hit save cool right so
43:39 - we're slowly getting there all right so
43:40 - now let's see i want to format this in
43:43 - the right spot so what i can do is use
43:45 - flexbox what i'll do is a display
43:48 - lex all right so anytime you want to use
43:50 - flexbox you have to run display flex so
43:52 - that you can start using it so next i
43:55 - don't want it in a row because that's
43:56 - what it is by default so i can select
43:58 - the direction direction as column so
44:01 - look what happens it makes it back to
44:02 - the original column but the main reason
44:04 - why i did this is because then i can do
44:06 - an align item center cool let's do a
44:08 - justify content a space around nice and
44:12 - we can do a border radius of 15 pixels
44:15 - and now
44:17 - it's looking a lot closer to what it is
44:19 - right so now as you can see the manager
44:21 - account and check notifications is a
44:22 - little funky that's because that one is
44:25 - gonna be the login subtitle which might
44:28 - fix it so let's go ahead and go back to
44:30 - there
44:31 - so let's target the login subtitle login
44:34 - sub subtitle i believe that's how we
44:36 - spelled it yes it's correct and let's
44:39 - make the font size of this uh let's say
44:41 - one are you okay cool just to make sure
44:43 - and then the color i'm just gonna add
44:46 - hashtag nine five
44:48 - nine five nine five okay and for the
44:51 - text aligned because i want it more
44:53 - center let's make it center and let's
44:55 - add a margin top of negative 80 pixels
44:59 - and i'm noticing it too guys it's not
45:01 - exactly moving so let's see what's going
45:03 - on login subtitle is that exactly what i
45:05 - wrote it is not that's why okay cool so
45:08 - let's put it back to here because i
45:09 - think i wanted it like this hey there
45:11 - you go that looks more like it so let's
45:14 - compare yeah so this should actually be
45:16 - together and that just might be because
45:18 - of the way i put the divs together i
45:20 - just pressed alt z again so now it looks
45:22 - more like this and see yeah i think i
45:25 - want it more like this all i did was
45:26 - just make this capital and just change
45:28 - the spacing around here what you'll
45:30 - notice is that it's not exactly like
45:32 - this that's because once i add you know
45:34 - phantom wallet button the margin top
45:37 - minus 80 pixels will start taking an
45:39 - effect okay so for now this is it let's
45:42 - go ahead and set up our phantom
45:44 - connection okay cool so the next thing i
45:46 - want to do is we can go ahead and press
45:48 - ctrl b or command b and what i want to
45:50 - do is let's go ahead and set up a
45:53 - context folder don't make it in
45:55 - components make it at the root of your
45:58 - project of your front end i mean and
45:59 - i'll say context okay what i want to do
46:02 - with this context is create a wallet
46:05 - connection provider so let's go inside
46:06 - contacts and let's do a new file and
46:08 - let's write wallet connection
46:11 - provider.js
46:12 - this is something that we're going to
46:13 - need to do in order to set up phantom
46:15 - wallet with our app and for now since
46:18 - there's nothing that we're going to see
46:19 - in the front end i'm just going to make
46:20 - this full screen cool all right so
46:21 - within the wallet connection provider
46:23 - we're going to import a couple of things
46:25 - so let's set it up like so we're going
46:27 - to be importing the connection provider
46:30 - and something called the wallet provider
46:33 - these are things that we're going to
46:34 - need to wrap around our app in order to
46:36 - get started with phantom so if you're
46:37 - wondering where this specifically is
46:39 - coming from it's from all right let me
46:41 - do command control b here from at solana
46:45 - wallet adapter dash react okay cool
46:49 - because if i go ahead and do control b
46:51 - and click on package json all right this
46:53 - is where we're getting that library from
46:56 - cool now to understand it let's keep on
46:57 - moving we got the wall provider if i do
46:59 - i'll see here all right we can see it a
47:00 - lot better awesome so that's not all we
47:02 - do have some more things to import like
47:04 - i want to import the wallet modal so
47:07 - let's get the provider for that as well
47:08 - let's do the water modal provider from
47:11 - that solana oops slash wallet slash dash
47:15 - dash react and you want boom all right
47:17 - like i said this is just a model modal
47:18 - that comes with this library that's
47:21 - gonna pop up when i press the button
47:23 - okay cool so next we want specifically
47:26 - the phantom wallet adapter and that's
47:28 - going to be coming from hat solana
47:31 - wallet
47:32 - adapter dash wallets cool i hope i solo
47:35 - that right double check dash i want to
47:37 - see the pop-up solana ah okay another
47:40 - thing you want to do is import in a
47:41 - react hook which is just going to be use
47:44 - memo okay and that's going to be coming
47:46 - from react of course cool so after we
47:48 - import use memo all we need to do is
47:50 - import something called cluster api url
47:54 - from solana web3.js right because when
47:56 - you're developing on the salon chain you
47:58 - could go to connect a different cluster
48:00 - url so that means like you can connect
48:01 - to the devnet the
48:03 - testnet the your local environment more
48:06 - more importantly if you want to upload
48:08 - this to the mainnet or you actually use
48:10 - you could for this project particularly
48:12 - we're going to be going and working on
48:14 - the devnet so what we're going to do is
48:16 - let's set up our wallet connection
48:18 - provider wallet connection provider
48:21 - we're taking that import provider and
48:23 - just make sure it's spelled it correctly
48:26 - provider wallet connection provider
48:28 - awesome and then what we're going to do
48:29 - from here is make the arrow function and
48:32 - it's going to take in two parameters on
48:33 - this case which is just going to be
48:35 - children awesome cool so within here
48:37 - we're going to set up a few variables
48:38 - one i'm going to call endpoint and in
48:40 - this endpoint we're going to use memo
48:42 - right and inside that memo it's going to
48:44 - have an anonymous that is going to
48:47 - simply just call cluster api url and
48:50 - we're just going to pass in devnet so if
48:51 - you wanted to change this to mainnet at
48:53 - all in the future like you're confident
48:55 - with your build it's stable and secure
48:56 - you can just say mainnet or if you want
48:58 - to go to testnet you could say testname
49:00 - so for like i said we'll be using devnet
49:02 - here and over here let's put a comma
49:04 - okay yep i was right comma here and then
49:06 - just empty array and what i want to do
49:08 - next is set up another variable which is
49:09 - going to be const wallet all right and
49:12 - the wallets like i said is going to use
49:13 - use memo once again and what we're going
49:15 - to do is set up anonymous function again
49:18 - which is going to return a new phantom
49:21 - wallet adapter so we're making use of
49:23 - that library over here all right just
49:25 - add the parentheses because that's
49:26 - actually a function and then we're going
49:28 - to do another comma array cool and then
49:30 - from there we just need to return all
49:32 - the providers so we can get it up and
49:34 - running let's do a connection provider
49:37 - and let's close that off boom and here
49:40 - we can add attribute called endpoint and
49:42 - it's going to be exactly what it is
49:44 - which is just the endpoint const that we
49:47 - made i'm basically saying let's use this
49:49 - to connect to the devnet that's all
49:52 - that's saying and then the next line
49:54 - let's put in the wallet provider that we
49:56 - inputted cool and what wallet do we want
49:58 - to provide like i said we're just using
50:00 - phantom if you guys wanted to use
50:01 - different wallets or add more you could
50:03 - do that through here so i'm going to
50:05 - pass in that and we'll also put auto
50:06 - connect if it's connected okay awesome
50:09 - so now after that i want to set up the
50:11 - modal so we'll use that provider and
50:13 - it's going to take in children not
50:15 - capital children because that is the
50:16 - parameter that's getting passed in and
50:18 - after all this setup we of course have
50:20 - to do an export default wallet
50:23 - connection provide save and i'll just
50:25 - copy boom save and i just need this to
50:28 - remember this so once that's done let's
50:30 - head over to our app all right so to
50:32 - head to the index what i can do is
50:34 - control p and not index we actually need
50:36 - to go to underscore app because in the
50:39 - app this is where we need to import that
50:41 - provider and wrap it within our whole
50:44 - next.js app right here so we need that
50:46 - global but we also need to import
50:48 - dynamic that's just something we're
50:49 - going to need for our wallet connection
50:51 - provider and this is going to come from
50:53 - next slash dynamic then from there we
50:56 - can also import that salon
50:59 - wallet adapter see if i can type it out
51:01 - adapter dash react ui that's the one and
51:05 - we want the styling styles.css boom so i
51:08 - import that this can stay the same cool
51:11 - and since we have dynamic what i want to
51:12 - do next is come up to the top here and
51:15 - then we'll do a const wallet connection
51:17 - provider equals dynamic and then inside
51:21 - parentheses
51:22 - here which is how we're going to import
51:24 - all of that context so we're going to do
51:25 - arrow function and then write import and
51:28 - then write dot dot forward slash context
51:30 - slash the provider cool so then from
51:33 - there we're going to write this line ssr
51:35 - and let's make that false awesome and
51:38 - then from there now we can safely wrap
51:40 - this with the provider itself so i'm
51:42 - just going to add these parentheses here
51:44 - and let's tab on this and then on here
51:46 - let's add the provider wallet connection
51:48 - provider boom bam cool that's a lot of
51:50 - space let me just format that awesome so
51:52 - if i hit save here now we wrapped our
51:54 - whole app with the provider all we have
51:56 - to do now is actually add that button
51:59 - because now we can use that okay and
52:00 - then before i move on let's go check in
52:02 - our little app just gonna click on this
52:04 - expected oh i know let me just take a
52:06 - look yes this parenthesis should
52:08 - actually just go right down here
52:10 - beautiful so if i look at the app again
52:12 - yep we shouldn't see any issues with
52:14 - that so i'm gonna make this smaller once
52:17 - again so that we can actually see it so
52:19 - now we have module not found we should
52:21 - have the module so i don't think it's
52:23 - missing let me just take a look aha
52:26 - adapt react ui why don't you guys say
52:28 - i'm something all right it's adapter
52:30 - save boom okay so we're all good and
52:32 - like i said now we just have to hop back
52:34 - into index and import a couple of things
52:37 - so what i'd like to import is something
52:39 - called use wallet and it's just a hook
52:41 - that comes from the solana wallet
52:44 - adapter it's a nana wallet adapter
52:46 - specifically the react one okay and the
52:48 - last thing i want to import is the
52:50 - wallet multi button which is literally
52:52 - the button that i mentioned over here
52:54 - it's the select wobble button and once
52:55 - we add that the spacing will look a lot
52:58 - better from at solana adapter wallet
53:01 - connect ui boom that looks good to me
53:04 - let's hit save and check this out guys
53:06 - if i go in between these two divs that's
53:08 - where i want to insert it i'm just going
53:09 - to say wallet multi button and bam there
53:12 - we go there's the select the wallet
53:14 - button let's give this a try let's see
53:16 - what happens if i click oh actually
53:17 - before i even get too excited guys
53:19 - remember how we had connected is false
53:21 - right this hard-coded attribute if i put
53:23 - true we're going to load the main view
53:25 - or in other words right if i log in with
53:28 - the actual finished app we see the modal
53:30 - this is the model coming to play this is
53:31 - the wallet that is detected i click on
53:33 - phantom put in your password and bam
53:36 - there is the tick tock and this is what
53:38 - i call the main view alright so if you
53:40 - look here that's what we're supposed to
53:41 - see if connected is true right so now
53:43 - the actual variable is going to come
53:45 - into play so i won't need that anymore
53:47 - what i will need is to make use of the
53:49 - used wallet and get the connected from
53:52 - the used wallet hook basically if the
53:55 - wallet is connected this should return
53:57 - true and then we'll see the main view if
53:59 - it's not connected load the login button
54:01 - cool so moment of truth let's see if
54:02 - this works let's select wallet and let's
54:04 - hit phantom hey look at that it's up and
54:07 - running it's good to go so now we're
54:09 - logged in that is the phantom wallet
54:11 - connection and just in case you have no
54:13 - idea what i'm talking about what is
54:14 - phantom if you go to phantom google
54:17 - chrome you should see the extension here
54:19 - and this is how you can get your wallet
54:21 - where you can hold your solana your
54:22 - other cryptocurrencies that are
54:24 - available so just add it to your chrome
54:26 - extension and you should be able to use
54:28 - the app sounds good awesome this is
54:30 - super cool let's move on awesome so now
54:32 - that you understand how this main view
54:34 - component is being loaded one thing that
54:37 - you didn't get to see from me coding
54:39 - this is that there's a step in between
54:41 - like when you first log in there should
54:44 - be a sign up model that comes up if you
54:46 - don't have an account on the app just
54:48 - yet uh because
54:50 - i did it's got load it up already so let
54:52 - me show you if i go to my second wallet
54:54 - and i press refresh here notice how it
54:56 - loads up right away because i already
54:57 - have an account i don't need to see the
54:59 - log it's connected and i have an account
55:01 - but if i were to make a new wallet on
55:03 - phantom let's go to add connect create
55:05 - new wallet boom wallet number six we'll
55:07 - see the login that we did before and
55:10 - then what happens when i click select
55:11 - wallet boom the signup model appears so
55:14 - all of this is located in the main view
55:17 - component and if you didn't know from
55:19 - the demo if i were to input something
55:21 - for the username and the profile image
55:24 - it's going to call the create user
55:25 - function from my solana smart contract
55:27 - and create a user and once that's done
55:29 - it will then load the actual page itself
55:32 - so if i were to make an account and i
55:34 - can show you by switching back to while
55:36 - it won and i hit refresh you sign up for
55:37 - a second but it recognizes there's a
55:39 - user already and bam there is the tick
55:42 - tock app right so what we want to do now
55:44 - is let's set up that sign up code so
55:46 - just to get you guys familiar with what
55:49 - it looks like i'll just load up wallet
55:50 - numbers let's hit refresh boom we're
55:52 - already connected with phantom so we
55:54 - don't see the login but we don't have an
55:56 - account so we see the sign up so what i
55:58 - want to do now is come over here press
56:00 - control p or command p and let's go to
56:03 - main view and this is the one where it's
56:05 - not going to show up here because i'm
56:06 - not connected to that wallet but when i
56:09 - log in i want to see this so there is a
56:11 - couple things that do go
56:13 - does go into main view so we are going
56:15 - to be jumping back and forth from this
56:17 - and updating it as we go okay so what
56:19 - i'll start is probably just the jsx of
56:21 - this so let me just see if i can select
56:23 - wallet let's see let's get back to
56:25 - wallet number one so we can see it
56:27 - instantly okay let's hit refresh on this
56:28 - guy phantom boom so we're back to main
56:30 - view now we can see this if i took main
56:32 - view out hit save boom it's gone so
56:34 - again working on the jsx one thing i
56:36 - want to set up it'll make more sense
56:38 - later is a fragment here and within this
56:41 - fragment we're going to have another
56:43 - conditional rendering with a ternary
56:45 - statement so this time we're going to be
56:47 - checking for his account okay and again
56:49 - his account doesn't exist yet but it
56:51 - will in a bit okay cool so basically if
56:54 - there is an account we want to be
56:56 - loading
56:57 - the tick tocks right tick tocks will go
57:00 - here if we do have an account difference
57:02 - is if we don't have an account you can
57:04 - go
57:05 - to here space this guy up call in
57:07 - parentheses boom and you can put these
57:09 - guys back together actually if we don't
57:11 - have an account we need to load the sign
57:13 - up so this is where signup is going to
57:15 - go so again all right i'll set it up
57:17 - sign so cool so now that signup's here
57:19 - if i hit save we're going to see an
57:21 - error because one is account is not
57:22 - defined and sign up isn't defined either
57:25 - so let's temporarily add is account and
57:27 - let's say uh false because i do want to
57:30 - see sign and now we're going to see what
57:32 - i said which is sign up is not defined
57:33 - yep cool which is totally fine all we
57:35 - need to do to fix that is just make that
57:37 - signup component so i'm going to new
57:39 - file and i'm just going to say sign up
57:41 - okay and now that i have the sign up js
57:43 - here take out that menu you do our
57:45 - little code snippet boom and then within
57:47 - the sign up we can hit save and then
57:50 - come back to main view and simply just
57:52 - import the sign up from boom so now it's
57:55 - there okay let's hit save do i see it
57:57 - anywhere signup should have the div in
58:00 - here where are you sign up okay cool it
58:02 - showed up when i hit refresh there it is
58:04 - there's sign up and then again just like
58:06 - before if i change his account to true
58:08 - tick tocks will go here yeah is that
58:10 - simple enough so let's bring it back to
58:13 - false and let's start making the jsx for
58:16 - sign up so this is what we want to
58:17 - eventually get into so i can see the
58:20 - background color of this is definitely
58:22 - going to be white it looks like we're
58:23 - going to have to separate this into a
58:25 - div write this into a div and then
58:26 - there's a sign up button as well so i'm
58:28 - going to go code that up now like i was
58:30 - saying before we're going to be using
58:31 - vanilla css for this so if i go to
58:34 - jobman b go to my styles let's go ahead
58:38 - and make a new file the file that i want
58:40 - to make is going to be the name of the
58:43 - component so that's the convention i'm
58:44 - going for so
58:46 - signup.module.css and since we're here
58:48 - let's also do main view name view dot
58:53 - module dot css okay so sign up we can
58:56 - head over to there and let's just set up
58:59 - the classes that i want because i
59:00 - already have them in mind and i don't
59:02 - want i want you guys to be able to see
59:03 - the changes as i go okay i'm gonna hit
59:05 - ctrl b and let's just set up the classes
59:08 - and i'm not gonna fill it out because
59:10 - again i want to show you guys so that's
59:11 - the auth container i'm gonna be using
59:13 - something called title and i'm going to
59:15 - be using comment sign up form we're
59:18 - going to be having an input field class
59:20 - and after input field class let's do an
59:22 - input title and we'll do an input
59:26 - contain we'll also have input itself
59:29 - we'll have a hybrid input again we're
59:31 - gonna do a login button then we're gonna
59:33 - have a login button oops button cool so
59:37 - again i just selected all the classes
59:39 - and reason being is if i hit save now
59:42 - command b and i go back to
59:44 - see i go back to sign up and now i
59:47 - import styles from then i'll say and
59:50 - then i'll say
59:52 - dot styles slash sign up module dot css
59:56 - and hit save and now i can just freely
59:58 - add classes and you won't see that
60:00 - annoying styles is not defined styles is
60:02 - not defined or it'll be like login
60:03 - containers not defined it's all going to
60:05 - be there and now i'm just free to make
60:06 - these dips so here's the first div and
60:09 - then this one will be the class name of
60:11 - that auth container so style dot
60:14 - container okay so we have the auth
60:16 - container already go back to the sign up
60:18 - module take a look at what auth
60:20 - container is going to have so if i say
60:22 - auth container here you can give this
60:24 - one a background color of and if i hit
60:27 - save you won't see anything because
60:29 - let's see if i add some words now there
60:31 - it is so now the background of this div
60:33 - is white right cool well that's what i
60:35 - have just for now i'm going to add the
60:37 - rest of the dibs okay cool we just added
60:39 - a quick h1 with a class name styles
60:42 - let's do alt c so that's easier that's
60:44 - way better then another div here this
60:46 - will be where our
60:48 - style that sign up form goes and within
60:50 - that we'll also have another div with
60:53 - the input okay another one this one will
60:55 - be input and i'll have username in here
60:57 - cool and that's its own div which will
60:59 - be the actual input container and it's
61:01 - like its name it will hold an input and
61:03 - inputs can actually be self-closing i
61:05 - will give this a class name of input as
61:08 - well that's what i set up before type
61:09 - will be text and the we're going to have
61:12 - an on change here right later on let's
61:14 - just set it up on change equals and it's
61:16 - going to be we're going to be using some
61:18 - state here but we can comment that out
61:19 - for now so closing div closing div then
61:21 - we have the following div will be
61:23 - another input field and this one this
61:24 - input field is going to be for the url
61:26 - so this one will be style dot input
61:30 - field and then same convention as before
61:32 - styles dot input title scroll down okay
61:35 - and this one will be title for this will
61:37 - just be
61:38 - profile
61:40 - image oh and i also forgot to put the
61:42 - colon on this guy awesome and now that
61:44 - we have that let's add the actual input
61:47 - container oh and this should be style
61:49 - nice the input container will contain
61:51 - input same as before text and again
61:54 - there's also going to be an unchanged
61:56 - here that i'll put just to remind me but
61:58 - let's also count it out because i'm not
61:59 - using it yet okay so then it's closing
62:01 - div closing div closing div and then you
62:04 - need this little sign up button styles
62:07 - dot log in and there will be an on click
62:09 - here as well but i'm just gonna leave it
62:11 - blank for now and again the button is
62:13 - just gonna say sign let's save boom
62:15 - we're done right imagine this is your
62:17 - sign up but our goal is to make it look
62:19 - very pretty just like this okay so now
62:21 - for the fun part now the jsx is there to
62:24 - get it started looking like this we just
62:25 - have to add some more css you guys still
62:28 - with me cool thank you for answering so
62:30 - now let's just give this a min width i'm
62:33 - thinking 25 rem and then let me have min
62:36 - height of 20 rpm okay now we'll have a
62:38 - display flex oh let me just show you
62:40 - guys so you can see this display flex
62:43 - because i want to use flexbox and let's
62:45 - make the flex direction column but look
62:47 - what happens if i save this it looks
62:48 - like that once i put flux direction
62:50 - column it's going to put it back to how
62:52 - it was essentially but you can control
62:54 - that direction with flexbox again the
62:56 - main reason why i want to use flexbox is
62:58 - for justify content center and also
63:00 - let's align it horizontally we can do
63:03 - that with a line item center we can also
63:05 - add a little bit of padding which will
63:07 - just be 1.2 rem nice you see is that the
63:10 - right size yes
63:12 - okay cool now we have the padding we
63:14 - have the background color let's also
63:16 - border radius something one a
63:20 - okay we're getting there uh the reason
63:22 - why it doesn't look as like the height
63:24 - doesn't look as the same is because once
63:25 - we add the button it is gonna take up
63:27 - more space and the padding will take be
63:28 - taken into an account yeah okay so for
63:31 - the title is next we'll give it a font
63:33 - weight of there see how that looks okay
63:34 - didn't really change that much reads
63:36 - bolder yeah i don't think this does much
63:38 - but let me just make sure i have a title
63:40 - do i have a title okay and yeah i do
63:42 - have a title sign up to tick tock but i
63:44 - think it's because it's h1 it's already
63:45 - gonna be bold already but we can't mess
63:47 - with the font size i'm thinking let's
63:49 - make this one size 1.5 rem okay cool
63:52 - yeah so we're changing it back to this i
63:54 - was thinking that was a little too big
63:56 - but now it's about the same size okay
63:58 - and just for fun let's add a margin zero
64:02 - three rem zero
64:04 - there we go that's better in terms of
64:06 - spacing and now we'll work on the sign
64:08 - up yeah i liked making out the classes
64:11 - first and then building out with you
64:12 - guys so you could like literally see me
64:14 - changing it live okay now we display
64:16 - flex awesome now you can see because
64:18 - this is the sign up form right here and
64:20 - when i display flex this it puts it into
64:22 - a row and again we don't necessarily
64:25 - want this to be a row we just want to do
64:27 - display flex to start using flexbox but
64:30 - by default it always makes it rough okay
64:32 - back to normal let's do a width of 100
64:35 - okay and now the margin bottom will be
64:39 - 1.5 rem there you go okay cool so don't
64:41 - freak out that the input is all the way
64:43 - to the left here that's what we want to
64:45 - do we're just gonna when i get to the
64:46 - input part of this we're gonna increase
64:48 - the width of it so it takes up all of
64:50 - the space so don't worry we'll do that
64:52 - next so for input field if i just do it
64:55 - with a hundred percent let's see what
64:56 - happens okay i'll put input filed input
65:00 - how you spell it input field oh i put
65:02 - that dot okay there was another input
65:04 - field somewhere oh i see now there is
65:07 - this again so let me go styles input
65:11 - filed input field and the dot dot again
65:14 - it says save cool all right so going
65:16 - back to this with 100
65:18 - let's just do a background color of so
65:20 - there you go so this is the input field
65:22 - that we're seeing here it's the
65:23 - container right how do i know because if
65:26 - when i put a background color aqua it
65:28 - made this whole background aqua and
65:30 - because there's another import field div
65:32 - this is also going to be awkward so it
65:34 - looks like one block but it's actually
65:35 - just two divs two days with the same
65:37 - name and same styling cool so that
65:38 - should be fine then what we do want to
65:40 - do is margin bottom one are you a okay
65:44 - cool so the spacing is starting to get a
65:46 - lot more clear now for the title we also
65:48 - want to give this a width of a hundred
65:50 - percent all right and again you don't
65:51 - notice a change but if i put a
65:52 - background color of red right what
65:54 - happens when i take out the hundred
65:55 - percent okay i guess i didn't change
65:57 - anything but the background color is red
65:59 - and now it's taking up a hundred percent
66:00 - oops oh yeah i guess i don't really need
66:02 - this then what i do need though is a
66:04 - font weight and let's make this 600 okay
66:07 - cool yeah that is a little bit bolder
66:09 - and now with the title let's mess with
66:12 - the font size which should also be one
66:15 - aria okay and margin bottom will be 0.5
66:19 - already cool now we're going to mess
66:20 - with the actual input container and if
66:22 - you're wondering what is input container
66:24 - let's do like a green there you go this
66:26 - whole thing is the input container that
66:28 - holds the input as you can see okay and
66:31 - in fact we actually do need to give this
66:32 - a background color because if you
66:33 - remember this is the actual background
66:35 - color of the input this is how we style
66:37 - inputs because by default we get this
66:40 - ugly old looking square with the outline
66:42 - but we can change it up by just making
66:45 - the background color the same as the
66:49 - finished which is f a f c f c cool hard
66:51 - to see but that should be the same color
66:54 - as this awesome so what i'll do now is a
66:57 - display flex and let's add a border of
67:00 - one pixel and let's give that border an
67:03 - e c f one f four solid oh yeah cool so
67:08 - now it's a little bit more easy to see
67:09 - now that we have that slight border but
67:11 - notice how this is annoying when i get
67:12 - to input we can remove that outline what
67:15 - i do want to add is some padding though
67:17 - for the padding i want to do 0.6 rem and
67:20 - 0.4 rna boom there we go now we're
67:23 - getting somewhere right so let's fix
67:25 - this eyesore let's give it a flex of one
67:27 - oops oh next one none let me just see
67:30 - something real quick okay that's weird
67:32 - this should actually be two input fields
67:34 - but when i did flex one it doesn't look
67:37 - like it let me just double check and
67:38 - troubleshoot real quick ah okay so on
67:40 - line 25 i have a styles filed input
67:44 - container like i've mashed it into one
67:46 - so what i'll do to fix this is we have
67:49 - the field we have the title we need the
67:51 - input container here okay there we go
67:54 - that's a lot better i'm happy with that
67:56 - now we can just go back to styling so
67:58 - border none let's get rid of that
68:00 - learning annoying outline and if you
68:02 - didn't know what outline is on input if
68:04 - i click on this that little black border
68:05 - that comes up let's do it outline now
68:08 - okay so now when i click it no outline
68:10 - and you can see how it looks you can see
68:12 - the input still it's not the same color
68:14 - but if i do a background none here boom
68:16 - custom input field i can still click
68:18 - this and i can still type in it super
68:20 - cool i think one thing i'm missing is we
68:22 - want the round edges on the input field
68:25 - and that should actually go on input
68:27 - container so let's add that too okay so
68:29 - board border
68:31 - radius is going to be 1rm border radius
68:35 - oh nice okay cool i'm getting really
68:38 - happy with that so let's start styling
68:40 - that login button there's a couple of
68:42 - things for this it's going to be
68:43 - background and the color i have for you
68:45 - guys is going to be 4e before like i
68:48 - said you don't always have to follow my
68:50 - colors and styling automatically if you
68:52 - don't like how this is styled i highly
68:54 - encourage you to style it on your own
68:55 - right padding so i feel like that's the
68:57 - best way to learn if you are making a
68:59 - project with us and making it your own
69:01 - instead of just just mindlessly
69:03 - following i think mindlessly following
69:04 - tutorial is good if you're a beginner
69:06 - just so you can get exposed to coding
69:07 - but going back into the code and
69:09 - understanding is definitely the way to
69:10 - go i really can't spell radius for the
69:12 - life of me but this is how you spell it
69:14 - now it's looking better okay so for
69:16 - color should be a nice white-ish color
69:18 - now let's do a cursor pointer cursor
69:21 - pointer yep now it feels like an actual
69:22 - button and there's actually a little
69:24 - transition that i have where it changes
69:26 - let's see if it's working all right do
69:27 - you see that the sign up button boom
69:29 - it's really cool oops i clicked out of
69:31 - it yeah so to do that it's this cool
69:33 - little transition here nope am i not
69:34 - logged in oh yeah we already have an
69:36 - account on this let's get back to this
69:38 - wallet or actually this wallet there you
69:40 - go cool like i said cool transition when
69:42 - i click on it it's just a nice little
69:43 - touch which is going to be 0.2 seconds
69:47 - linear cool so there's that transition
69:49 - then we're gonna do a max width of 500
69:52 - pixels oh yeah this guy needs to see it
69:55 - too very cool max width 500 pixels and
69:58 - what else oh the min width this is
70:00 - really going to change it 300. there you
70:02 - go cool awesome now i'm just going to
70:04 - make sure the sign up looks a lot better
70:07 - and to do that we can just add display
70:10 - flex right you see something display
70:13 - flex and let's do a line item center
70:16 - okay so that so if display flex is
70:19 - actually row align items will now center
70:21 - things horizontally vertically and now
70:23 - justify content is going to put that in
70:25 - the center there cool from here let's
70:27 - add a font weight of 800
70:31 - okay nice and then a font size 1.2 rem
70:34 - oh i got way bigger nice and i can
70:36 - already see the difference it's like a
70:38 - spot to diff game right what's the
70:40 - difference you guys see it yep i know i
70:42 - see it too tick tock has a capital t
70:44 - here okay cool and again we have the
70:46 - login button active which is going to
70:48 - activate that transition and when that
70:50 - transition happens i want to see scale
70:53 - 0.9 let's test it out
70:56 - this feels really nice all right so
70:57 - that's pretty cool again you can take
70:59 - any things that you learned if you
71:01 - didn't know how transitions worked for a
71:02 - beginner you now know that you can do
71:04 - transform scale with an active state to
71:06 - do this nice so that is the sign up to
71:10 - use tick tock cool so the next step is i
71:12 - want to start getting this function
71:13 - working where we can create a user
71:15 - because we already have it written in
71:17 - our smart contract we just need to hook
71:19 - it up into our front end so at the
71:20 - moment i can click this button all i
71:22 - want but nothing is going to happen so
71:23 - one thing that we're going to have to do
71:24 - first there's a lot of setup involved
71:26 - when connecting it to your front end but
71:28 - the first thing i wanted to do is
71:29 - probably make a new folder inside the
71:31 - front and we'll call this folder utils
71:33 - all right inside utils we'll also have a
71:35 - file called const.js all right this is
71:38 - where this is where our constants will
71:40 - go and since we're not going to be doing
71:42 - any front end for a while let's just go
71:44 - ahead and make this bigger okay cool can
71:46 - the class see it yes you can awesome so
71:48 - now we're going to do and import the
71:50 - cluster url api url again from solana
71:54 - web 3.js like we did before and then
71:56 - we're also going to do the public key
71:59 - from there as well public key and let's
72:01 - make this camp case okay awesome and
72:03 - then what we're going to do is export
72:05 - const right solana oops oh wait we
72:07 - already did that already if we don't
72:08 - need to do that what we need to do is
72:10 - export cons tick tock underscore program
72:14 - underscore id if you guys are wondering
72:16 - what the program id is if i go back to
72:19 - my website right and i make this bigger
72:22 - i'm on the salon playground when we
72:24 - first started if you notice this was one
72:26 - one one one one but when i hit build it
72:28 - generated a new program id which again
72:30 - is just your contract address if you're
72:32 - more familiar with that okay so here i'm
72:34 - setting up a variable that has just that
72:37 - so to do that we're going to set it
72:38 - equal to new public key and inside we're
72:41 - just going to paste that address so i
72:43 - actually should have grabbed it while it
72:44 - was there but we can easily just copy
72:46 - this this is the program address and
72:48 - we're gonna hit paste right here boom so
72:51 - that is our program address okay cool
72:54 - and another thing that we're gonna need
72:56 - to do over here is oops let's cancel
72:58 - that over here is if you go over to here
73:01 - one thing or one step that we're gonna
73:02 - have to do often is after we deploy
73:05 - we're gonna have to export the program
73:08 - idl okay this is gonna contain all our
73:10 - functions and our structs all the
73:12 - information about our program
73:13 - essentially okay and what i wanna do
73:15 - with this is essentially click on this
73:18 - and it should open in vs code boom so
73:21 - you can see in the idea we have the
73:23 - hello anchor name the bruiser profile
73:25 - image right that's the default anchor
73:27 - program so that means this isn't the
73:29 - right idea what we need to do is
73:30 - actually deploy this now okay cool so
73:32 - this is good to know so if i refresh and
73:34 - i hit deploy all right we're back to
73:35 - smart contract stuff if i hit deploy
73:37 - you're going to say initial deployment
73:38 - cost 5.24 and i only have four solana
73:42 - right so even in the devnet you need
73:44 - solana but luckily on the devnet you
73:46 - don't need to pay for it what you could
73:47 - do is there's a solana faucet right
73:50 - somebody made this website where you can
73:52 - just get solana easily so i can just
73:54 - airdrop two
73:55 - and put in your address so the address
73:57 - is going to be right here so i just want
73:59 - to copy this so i'm just click on this
74:02 - it takes you to the salon explorer okay
74:04 - this is ticking all so what we could
74:06 - actually do is come over to here and
74:08 - let's click on oops we're connected
74:11 - again let's click on this wallet thing
74:12 - let's click connect to phantom wallet so
74:14 - we could just directly connect to my
74:15 - wall cool and i don't want to be wallet
74:17 - six let's be wallet one because i
74:18 - definitely have some salon in there cool
74:20 - so now you can see this is the wallet
74:22 - this is the new wallet address and now
74:24 - it's easier for me to get it and i
74:25 - should have plenty of soul but again i
74:27 - wanted to show you guys if you did once
74:29 - you can just go to your phantom wallet
74:31 - copy your address paste it on here talk
74:33 - about how much soil you want usually i
74:34 - just do two at a time and click devnet
74:36 - cool successfully airdropped to seoul to
74:38 - that wall address so i remember i had
74:40 - 15. so what do i have now i have 17.
74:43 - okay so let's try deploying let's just
74:45 - do build and deploy so i'm going to
74:47 - build just warnings no errors that's
74:49 - fine and let's hit deploy oh i see it's
74:51 - because it still wants to use my
74:53 - playground wallet that's fine then that
74:55 - just means that we need to connect to
74:57 - our playground wallet then so i guess i
74:59 - do have to go back here i want to see if
75:01 - i can actually just copy this without
75:03 - any issues no there can be a smart way
75:05 - to do this extra program credentials
75:08 - program id we got that
75:11 - oh silly me how could i forget the
75:13 - reason why it's taking a long time to
75:14 - load is because it should actually be
75:16 - devnet boom okay cool so you can see my
75:19 - attempts to build are here but really i
75:22 - just want the address give me the
75:23 - address and what i can do now is on the
75:26 - solana faucet instead of my actual
75:28 - phantom wallet i'll put the playground
75:30 - wallet which is the authority to upgrade
75:32 - and deploy your smart contract i'll hit
75:34 - devnet back to seoul faucet and now we
75:36 - have six sole i suggest just doing this
75:38 - over and over so that you have a lot of
75:40 - soul and you don't have to worry about
75:41 - air dropping for a while but since i'm
75:43 - building with you guys i'm just gonna
75:44 - head and hit deploy because we already
75:47 - built and see how it took the solana and
75:49 - now we wait boom deployment successful
75:52 - so now we should have a new idea so
75:54 - let's just double check that now it's
75:56 - ideal three i'll delete them later but
75:58 - there you go the name doesn't say hello
75:59 - anchor anymore the instructions are here
76:03 - right user profile image url and type
76:05 - string cool and now we can see if i
76:07 - press alt z create user that's there
76:09 - awesome cool so let me just go back to
76:13 - that vs code and what we want to do is
76:15 - take this idl right head over to here
76:18 - all i did was hit copy right copy and in
76:21 - my utils i'm going to make a new file
76:23 - and i'm going to call it tick talk clone
76:26 - dot json this is very important every
76:28 - time when i set this up this is the name
76:29 - that i want to use and inside this will
76:31 - be the idl contents that you had before
76:34 - cool so now in my utils it's there what
76:36 - i can do from here is go to const and
76:39 - import it okay so if i want to import it
76:41 - all i'm going to do is just say import
76:43 - tick tock from that path so now it's
76:46 - there and every time i say the word
76:47 - tiktok here right i'm gonna say export
76:50 - cons
76:51 - talk idl and again this step is
76:53 - important so that we can use this to
76:56 - interact with our program on the solana
76:58 - chain and just run the commands or
77:00 - instructions that we set up on there
77:01 - okay cool and that's going to be our
77:03 - constraint yes all right for my next
77:06 - trick we're going to go back into the
77:07 - utils folder and let's make another file
77:10 - which oops not folder and make another
77:13 - file and we're going to call it
77:15 - utils.js okay and then utils.js there's
77:18 - a couple things that we need to import
77:20 - so what i'm going to import is import
77:22 - star as anchor from this is the at
77:25 - project serum anchor right so we're
77:26 - going to import anchor here and we also
77:28 - want to import something called wallet
77:31 - not connected error right from the
77:33 - solano wallet adapter base and then
77:36 - remember the things that we literally
77:37 - just set up the tick tock idl tick tock
77:40 - ideal and we also want the tick tock
77:43 - program underscore id which should also
77:46 - come from the cons yep tick tock program
77:48 - underscore id amazing and what we could
77:50 - do after that is let's set up a function
77:53 - so the function that i want to create
77:55 - and i make sure i export this one it's
77:57 - called get program instance so like i
78:00 - said we need to from the front end get
78:03 - the program that's on the solana chain
78:05 - that's the first step so what we're
78:06 - gonna need to pass is connection right
78:09 - and wallet so what kind of connection
78:11 - are we going to have and what kind of
78:12 - wallet are we using so there we go
78:14 - semicolon i mean curly brackets here and
78:16 - all we're going to write is if there is
78:18 - no or not wallet dot public key then we
78:22 - want to throw a new wallet not connected
78:25 - error okay just some error handling for
78:27 - the edge case and if there is then let's
78:30 - cut up a provider variable and that
78:32 - provider will have a new anchor right
78:34 - we're using anchor anchor provider
78:36 - connection wallet let me just format
78:39 - this connection wallet let's see what
78:41 - else that we passed in as well as the
78:44 - anchor dot anchor provider dot default
78:48 - options yep cool awesome and still in
78:50 - that function i just want to set up the
78:52 - idl cons idl is equal to the tick tock
78:56 - idl that we imported and then this will
78:58 - have the address of the program or
79:01 - specifically the deployed program so
79:03 - here i want to save it as program id
79:06 - equals tick tock programming so anytime
79:08 - i'll go back into my cons and redeploy
79:11 - my smart contract i just change this and
79:13 - now it's dynamic so when i do program id
79:16 - it'll be known as program id and we can
79:17 - also make a variable called const
79:19 - program and that's going to be equal to
79:21 - this program client from that we create
79:23 - from the idl so we're going to say
79:25 - anchor here dot program idl comma
79:28 - program id and provider yes sir and then
79:32 - last but not least let's return that
79:34 - program that we just created okay so get
79:36 - every set up everything pass it in to
79:38 - the client or the cli client and return
79:41 - the program cool i think this utils
79:44 - looks good what i want to do now is set
79:46 - up our own custom hook so if you didn't
79:48 - know and react especially if you're
79:49 - doing function based components there is
79:51 - something called hooks which are
79:53 - essentially like super powers or
79:55 - functions in react we can actually make
79:57 - our own custom hooks so what i want to
79:59 - do is let's make a folder in our front
80:01 - end and i'm going to call it hooks right
80:03 - this will be where two of our hooks are
80:05 - going to go the main one that i want to
80:06 - focus on if i want to create a user it's
80:08 - going to be a hook called use account
80:10 - and that's just what i'm going to call
80:11 - this awesome so with use account there
80:13 - is a lot of things we need to import on
80:15 - this one so bear with me we're going to
80:16 - import and use effect hook right come in
80:19 - here click react and we're going to
80:21 - import token program id and this program
80:23 - id is not the one that we created this
80:25 - one is specifically going to come from
80:27 - the solana spl token one you also want
80:29 - to import use wallet from the adapter
80:33 - react let's see we're going to import
80:35 - get program instance from utils that one
80:38 - we're getting from our details and that
80:40 - should be it another one probably is if
80:42 - you remember going back to here nope
80:45 - believe it is in here we did this import
80:48 - cluster api we're going to do that again
80:50 - but i just thought of a way to make it
80:51 - just a little bit more dynamic so what
80:53 - i'll do is head over to const instead of
80:55 - calling this directly and then passing
80:57 - cluster api at devnet this is what we
80:59 - could do in const we can set up another
81:02 - variable actually we can say export
81:04 - because i want to be able to use this
81:05 - solana host right this is just a
81:08 - variable to hold our devnet url so again
81:12 - this is a good time to use this right
81:14 - you can say cluster api url devnet right
81:18 - so here we go we have a dynamic way to
81:20 - do this without manually putting a
81:22 - cluster api url everywhere what i could
81:24 - do with this is the following so if i
81:26 - remember while the connection provider i
81:29 - can just import solana host right so we
81:32 - don't need this anymore we can just
81:34 - import the lana host from the const and
81:36 - then instead of saying this guess what
81:39 - we can say salon host right with that
81:41 - same example we can go back into use
81:44 - account and let's import solana host
81:46 - again that's the whole reason why we did
81:47 - this i'll say solana host and bam boom
81:50 - okay i keep saying noises boom bam boom
81:52 - so after we do that let's set up some
81:54 - variables here we can do a const anchor
81:56 - this one we're going to use require for
81:58 - pat project serum anchor and then we can
82:01 - say cons utf 8 is going to equal
82:04 - anchor.utils.bytes.utf8
82:08 - okay cool so that's that variable setup
82:10 - there's come up with more things we want
82:11 - to destructure this anchor real quick
82:14 - and get the bn and get the web3 from the
82:17 - anchor object and another one i want to
82:19 - get is something called system program
82:22 - and that's going to come from web3 so
82:24 - yeah we've got web3 from anchor and then
82:26 - we got system program from web3 now we
82:28 - want to set up a variable here called
82:30 - default accounts and the default account
82:32 - is going to be an object which has a
82:35 - property of token program which will in
82:37 - turn have a value of our token program
82:40 - id and again it's not the one that we
82:42 - made it's the salon from the salon spl
82:44 - token okay then we have a clock
82:46 - attribute with the anchor dot web three
82:49 - dot sis var
82:51 - there you go then we have the system
82:54 - program oops not that one which is going
82:56 - to take the actual system program we
82:57 - destructured but specifically the exact
83:00 - program id nice okay cool so now for the
83:03 - actual hook itself right we just set up
83:05 - an object here and imported a bunch of
83:06 - stuff what this hook will actually do is
83:09 - the following we can say the function
83:10 - const use account right it's going to be
83:13 - equal a constitutes account is actually
83:15 - gonna be a function and it's gonna have
83:16 - a variable called cons and it's going to
83:18 - use wallet and that's what we imported
83:20 - here cool and we also want to set up a
83:22 - connection variable and the connection
83:24 - is going to have a value of the
83:26 - web3.connection
83:28 - and we just pass in whatever url we're
83:30 - using devnet testnet and if you remember
83:33 - it's all stored in solana host right now
83:36 - it's making sense so probably let's do a
83:37 - cons program and let's use the get
83:40 - program instance that we made earlier in
83:42 - utils right to actually get the program
83:45 - and if you remember what it passes in it
83:47 - takes in a connection and a wallet so we
83:50 - can just pass in the same thing to the
83:52 - devnet and then the wallet we pass in is
83:54 - wallet from the used wallet awesome so
83:56 - for cons sign up oops it's a variable
83:59 - which will equal an asynchronous
84:01 - function okay this asynchronous function
84:04 - is going to take in a name and as well
84:06 - as a profile because remember the front
84:08 - end it's going to take a name and a
84:10 - profile image and this function is going
84:13 - to contain
84:14 - the smart contract instruction call so
84:17 - in here we're going to have to call the
84:19 - create user okay cool so if i want to
84:22 - call create user there's a couple things
84:23 - that we need to do so the first thing is
84:25 - the following to make a variable user
84:28 - pda right and we say await anchor dot
84:31 - web three dot public capital k
84:34 - key dot find program address okay and
84:38 - i'm just gonna press enter for spacing
84:40 - and we're gonna do in this it's gonna
84:42 - take an argument of utf-8 dot encode use
84:46 - and then wallet dot public key dot 2
84:50 - buffer
84:51 - and last but not least it will take the
84:52 - program dot program id okay and remember
84:56 - what program is it's program from the
84:58 - get program instance and we get the
85:00 - actual id here just press let's see
85:02 - how's that cool awesome we can simply
85:04 - just do an await now and we also want to
85:07 - wait for the actual instruction call so
85:09 - if program oops program if program is
85:13 - the actual program itself then we want
85:16 - to connect to it by doing the rpc and
85:18 - from here call the name of our
85:20 - instructions what was the name of our
85:21 - instruction in our smart contract do you
85:22 - remember exactly it was create user
85:25 - right just double check salon playground
85:28 - what is our command create user awesome
85:31 - make sure it's the same spelling okay so
85:33 - that's it rpc.create user and what does
85:36 - that instruction and the program take
85:38 - takes name and profile yes is it coming
85:41 - together now i hope so i really hope so
85:43 - guys again these are not easy concepts
85:44 - to understand the first time it takes me
85:47 - a while to understand and i'm still
85:48 - learning even today so my goal is if i
85:50 - keep repeating those concepts it's just
85:51 - going to click right so account user can
85:54 - be user underscore and authority is
85:56 - going to be the wallet dot public key
85:59 - like key comma
86:02 - dot default accounts all the accounts
86:05 - that are associated with this smart
86:07 - contract and at the moment it's
86:09 - technically zero but eventually if a lot
86:10 - of people are using your app you'll have
86:11 - a lot of counts okay cool all right so
86:14 - there's closing curly bracket closing
86:16 - parenthesis closing curly bracket and
86:18 - then here is where we want to return our
86:21 - sign up and again that's our function
86:23 - cool so that is it we're not actually
86:25 - calling the create user yet we just set
86:28 - it up so when we run this custom hook
86:30 - then create the user okay and now the
86:32 - next thing to do is figure out when do i
86:35 - want to run this hook okay so i'm super
86:38 - happy you guys are following along so
86:39 - far and i know it was a lot of setup but
86:41 - now we can go back on the things we
86:43 - already made and get everything up and
86:45 - connected so what i mean by that is
86:46 - let's head over to main view again so if
86:48 - i scroll here main view and let's just
86:51 - set up a bunch of things that we wanted
86:53 - to get so that's gonna be import use
86:56 - effect right we're gonna be using some
86:58 - of this later use effect and also the
87:00 - hook use state from react okay and then
87:04 - we also want to import use wallet from
87:08 - atlanta
87:09 - slash adapter dash react yay okay and
87:13 - then from there i put in ort m port okay
87:16 - then we can also do oops import our good
87:19 - old friend solana host we're going to
87:21 - mac the maximum use of that variable and
87:24 - this is going to come from this path i
87:25 - believe it's utils yeah nutils and then
87:29 - const we also want to bring in get
87:31 - program instance right so now this
87:33 - should all start being familiar to you
87:35 - on what everything is which would make
87:37 - me super happy so now it's like utils
87:39 - details yeah okay and then we're gonna
87:41 - do another import of the token program
87:44 - id but again this is from the at salon
87:48 - spl and if you didn't know spl is solana
87:50 - program library so that's what the
87:52 - program id is for all righty so we have
87:55 - that and now another thing we could do
87:57 - is import some hooks or just the one
87:59 - hook so far which is going to be import
88:02 - use account from the hooks slash use
88:05 - account so now we can start using this
88:07 - okay oh and one thing i forgot to
88:09 - mention too is we didn't import the
88:11 - styles from here yet so let's import
88:13 - styles from that path which was dot
88:16 - styles yep and then we could just say
88:19 - main dot module dot css and we do have
88:22 - that right guys let me just double check
88:24 - it was command styles yes sir okay it's
88:27 - right there main view okay cool so now
88:29 - we can start like making the jsx of the
88:30 - main view later okay so there we have it
88:32 - all right so moving on let's set up some
88:35 - more variables and the variable that i
88:36 - want to set up is the anchor one again
88:38 - so let's set up an anchor is equal to
88:41 - the require the project serum all right
88:43 - boom and cons utf-8 it's going to equal
88:49 - anchor.mutils.bytes.etf8 okay and just
88:52 - like before we want to do the
88:53 - structuring of the anchor object and get
88:56 - bn and web3 and we want to destructure
88:58 - web 3 again too let me just fix this
89:01 - const cis
89:03 - program set that equal to web 3. yes
89:06 - cool so we're getting again web 3 from
89:07 - anchor and system program from three
89:10 - awesome i also want to be setting up my
89:11 - default accounts again let's kind of
89:13 - let's do a default accounts you're going
89:15 - to notice as we're building there's a
89:17 - lot of the same code or just similar
89:19 - code in different places so once you
89:20 - know what the piece is you can see like
89:22 - oh this goes here this goes here token
89:24 - program it's going to be exactly the
89:26 - same as last time token program id clock
89:29 - will be anchor dot web 3 cis var cloud
89:33 - clock pub key and system program will be
89:37 - system program dot program id yes okay
89:41 - got the default accounts and remember
89:43 - how we got the use state there is a
89:45 - bunch of state that i want to start
89:48 - setting up and to do that if you want to
89:49 - start using the hook it should be inside
89:51 - the function component itself so here
89:53 - i'll start setting a bunch of them up
89:55 - cool so there's you state here and for
89:57 - now we'll just do is count so now you're
90:00 - going to see this is where it comes from
90:01 - is account and set account and the
90:04 - default state will be false if i ask you
90:06 - guys if it's initially going to be false
90:08 - right is account is going to be false
90:09 - which one is going to load sign up or
90:11 - the tick talks will go here so if you
90:13 - said sign up you're right because the
90:15 - default state is false there they sign
90:17 - up then we can switch this state to true
90:19 - so we're kind of using this like a flag
90:20 - or a toggle okay awesome and while we're
90:22 - here let's do the cons wallet is equal
90:24 - to use wallet and we're going to set up
90:26 - the connection again which is going to
90:28 - be new anchor dot web 3 dot connection
90:31 - and this is where our solana host comes
90:33 - in so i'm basically saying the
90:34 - connection is on the devnet again okay
90:37 - and the cons program remember the get
90:39 - program instance we're fetching the
90:40 - program essentially with the connection
90:43 - which is devnet and the wallet which
90:45 - will be phantom okay cool here we can
90:48 - actually use the used account hook so
90:50 - remember what the use account hook does
90:52 - right where are you use account hook yes
90:55 - use account is actually the function
90:57 - sign up right where it actually keeps
90:59 - saying actually
91:00 - it's the function signup which will in
91:02 - turn create the user from our program so
91:05 - coming back to main view let's use that
91:06 - hook so i want to get to the sign up
91:08 - function from use account right so let's
91:12 - think about this in my main view is that
91:14 - where i'm going to call the sign up
91:16 - function what is main view main view is
91:18 - let's go here main view is essentially
91:21 - the view after the user signed up which
91:24 - is where the tick tocks go like i was
91:25 - saying so it wouldn't be in main view
91:27 - the sign up function should go in sign
91:30 - up so now the naming should start making
91:31 - some sense too cool so how do we get the
91:33 - sign up function in the signup component
91:36 - well there's something called props
91:38 - which essentially you can pass things
91:40 - down from parent to child so if i were
91:42 - to illustrate this concept let's picture
91:44 - like a square here that represents our
91:47 - main view right so this is m for main
91:50 - view component right what is the child
91:52 - main view component it's going to be
91:54 - sign up because that lives inside the
91:56 - main view so we can illustrate that
91:58 - drawing so the child of maine is going
92:00 - to be
92:01 - sign up so i'll just write it as sign i
92:03 - feel like khan academy right now okay
92:04 - cool so where does the sign up function
92:06 - live the signup function lives in main
92:08 - view so let's have a little circle here
92:11 - and that represents the function we're
92:13 - good so if the function is here how do i
92:15 - get it to this component we're gonna
92:16 - have to pass it down to sign up as a
92:18 - prop okay so now you might be asking
92:20 - lance how do i pass it down as a prop
92:22 - luckily it's pretty easy and it's like a
92:24 - react basic so this one's for you
92:26 - beginners if i go back to my selection
92:29 - here all i need to do to get that to
92:31 - start working is come down below here
92:33 - and say sign up alright that's the name
92:35 - of the prop is equal to the sign up
92:38 - function so this is how we pass down
92:41 - props to a child all right while we're
92:43 - here i also want to pass down another
92:45 - prop called wallet and what i'll pass is
92:47 - the wallop republic and we got to make
92:49 - sure that it's 2 base 58 because that's
92:52 - the format that it wants it in or that
92:54 - makes it a lot more easy to deal with or
92:56 - work with cool so those are just so if i
92:58 - ask you how many props we passed down
92:59 - you pass down two and they will all
93:01 - exist in one prop object okay cool so
93:04 - pass down to props to sign up let's move
93:06 - over to sign up and i'm sorry the whole
93:08 - time the sidebar was here and then let's
93:09 - go to sign up and now you might ask okay
93:11 - so now that signup function exists or is
93:14 - passed down to sign up but you now have
93:16 - to accept the prop so usually what
93:18 - happens is you go props right and if i
93:20 - were to console log this you would see
93:22 - an object that contains wallet and sign
93:24 - up and to get the signup function you
93:26 - have to usually say props dot signup
93:28 - cool but we can use something called
93:29 - destructuring which you've seen me done
93:31 - before which is this so if it's an
93:33 - object to destructure it you write out
93:35 - the brackets for the object and instead
93:37 - of writing props i can now just write
93:39 - the names of the attributes so here in
93:42 - this case it'll just be sign up is this
93:44 - the real one i'm going to use i just
93:45 - have wallet there just in case i don't
93:46 - believe i'm actually using it but i
93:48 - could revisit that later all i want to
93:49 - do now is just pass in or accept the
93:52 - signup
93:53 - so this is so every time i say sign up
93:55 - now i don't have to say props that sign
93:57 - up or in this case sign up signup this
94:00 - looks so weird to me all right cool
94:02 - sounds good and while we're here let's
94:04 - also import the hook that i want to use
94:06 - which is just going to be use state
94:08 - which will come into play in a second
94:09 - now let's see what's going on oh from
94:11 - react awesome so if i hit save this is
94:14 - our main app maybe we can split it up a
94:16 - little bit cool how are we doing nice
94:19 - okay so now no errors right i can see
94:22 - sign up if i were to console.log it like
94:23 - i told you let's see what we see we
94:25 - might not see it yet because we're not
94:27 - in the sign up part yet yep i was right
94:29 - so what we have to do is this click
94:31 - select wallet phantom log in again
94:33 - webpack imported module is not defined
94:36 - oh one second okay this is actually
94:38 - telling me that use account in main view
94:42 - is not a function okay so let's look at
94:45 - use account okay it's not a function ah
94:48 - there we go the reason why it's not
94:50 - recognizing as a function is because i
94:51 - forgot to add a export default use
94:55 - account hey there we go so now we can
94:58 - head back over to sign up hit refresh
95:00 - real quick hey so here we are so now
95:02 - let's see if my console log is working
95:04 - and it should show us a function yes
95:06 - exactly so we got our hooks working
95:08 - awesome so now we successfully passed
95:10 - down the sign up the question is when do
95:12 - i use this function and what are you
95:13 - guys passing into it so in other words
95:16 - if i were to make an account called
95:17 - lance and my profile image is this cool
95:20 - guy right here right how do we save this
95:23 - and then pass it to the signup function
95:25 - because right now it's really not
95:27 - getting saved that's where the use stake
95:29 - hook comes in and we just have to set it
95:31 - up like so if you come up here we don't
95:33 - need this console log anymore what we
95:35 - can say is const array is equal to use
95:38 - state because again this remember i
95:39 - talked about the structuring an object
95:41 - this is how you destructure an array
95:42 - because you state actually returns an
95:44 - array with two things right whatever an
95:47 - array of whatever you pass in here by
95:49 - default it's undefined and a function
95:51 - and i can define those by giving them a
95:53 - name so i'll call that username and the
95:55 - function is going to be called set that
95:57 - username that's typically the convention
95:59 - is set whatever you put here by that
96:01 - logic how should we do profile try to
96:03 - guess it before i write it i'm gonna say
96:04 - const profile is set profile you got it
96:08 - so then we say use state right here yeah
96:11 - cool awesome once that is done right how
96:14 - do we then sign up we can create a
96:17 - function called sign clicked all right
96:19 - this can really just be whatever name
96:21 - you want i'm just going to do it that
96:22 - because it makes sense to me and let's
96:24 - console.log signing up all right cool
96:27 - we'll just leave that at there because
96:28 - it's really noticeable awesome okay cool
96:30 - so this function is something we just
96:32 - created when is it being called i really
96:34 - believe program is just thinking so if i
96:36 - was thinking when should the function be
96:38 - called if i'm using this app if you said
96:39 - when i click the button you're correct
96:41 - at the moment we don't we shouldn't see
96:43 - a console log that's because in here and
96:45 - i mentioned this before we're going to
96:46 - add an on click yeah in that on click
96:49 - we're going to have the sign signup
96:51 - click and notice it's signup clicked not
96:53 - the sign up function yeah so let's save
96:56 - that and now if i make this guy bigger
96:58 - let's see what we see boom
97:00 - every time i click this we're running
97:01 - that signup function we created so what
97:03 - do we want to happen when the sign up is
97:06 - clicked that's what i would ask myself
97:07 - and what i want to happen we call the
97:10 - sign up function right we say sign up i
97:13 - think it's just like this sign up and
97:15 - what do we pass in the signup function
97:17 - if you forgot what we have to pass in go
97:19 - back to use account and look we pass in
97:21 - a name right name and profile i hope
97:25 - that's coming together for you but then
97:26 - how do i pass in the name i could hard
97:28 - code it right you're right i could put
97:29 - lance here and then i put the image here
97:31 - but that means every time i sign up all
97:33 - the accounts are going to be lands with
97:34 - the same image i want to make this
97:36 - dynamic so to make it dynamic we need to
97:38 - put like a variable here so what
97:40 - variables can we put here that's right
97:42 - username and profile so for now let's
97:44 - take this out because i don't want to
97:45 - call it when i press it let's figure out
97:47 - how to say like if i were to write lance
97:49 - here how would i save that using state
97:51 - so that's right you might be catching on
97:53 - if you were paying attention right on
97:55 - change is going to come into play now so
97:56 - we don't know on change basically will
97:58 - run when there's a change in this input
98:02 - field right so let's say on change we're
98:04 - going to say e for event and we're going
98:06 - to say set user name so using that
98:08 - function from the state and we're going
98:09 - to say e dot target dot value so that's
98:12 - how we grab the
98:14 - value of the inputs on change so
98:17 - essentially we want to copy this down
98:18 - here right but what should i change here
98:20 - if you're thinking about this yes you
98:22 - guys are experts right it's going to be
98:24 - set profile yes and it's going to be
98:27 - target that value still because that's
98:28 - going to be whatever i write here so
98:31 - what should we do to see this is let's
98:34 - console.log right username and profile
98:37 - let's try to run this experiment and i'm
98:38 - going to make this bigger so it's super
98:40 - clear because once i explain this i'm
98:41 - not going to explain it as much later on
98:43 - awesome so in the console when i hit
98:45 - refresh for the very first time we see
98:47 - undefined and that's because there is no
98:49 - username there is no profile image but
98:51 - if i were to click on that input field
98:52 - and let me just make this a little bit
98:53 - bigger if i were to click on the input
98:54 - field of username if i type in l will
98:56 - happened right look at the console it's
98:58 - a l in there because when i click l
99:01 - that's considered a change and every
99:03 - time there is a change we're setting the
99:05 - user name so that's why only the top
99:07 - part is changed if i say a and c e right
99:10 - so the latest one is what
99:12 - the username is currently all right if
99:14 - i'm talking about this guy right here i
99:16 - hit paste how many changes would this be
99:18 - if i hit paste one change so now
99:20 - username is lance and my profile image
99:22 - is this image right so now we have the
99:24 - variable that contains whatever i put in
99:27 - my input the reason why i'm taking my
99:28 - time to explain this is because you can
99:30 - reuse this for any app all right this is
99:33 - like react fundamentals to me so enough
99:35 - over explaining if you guys already get
99:37 - the idea feel free to skip but i hope
99:40 - that was you were able to understand
99:41 - that so now that i know that these two
99:43 - variables will always contain what's
99:44 - ever in the input i can then call sign
99:47 - up and then pass in username for name
99:49 - and profile for the profile image
99:51 - beautiful so now that that function is
99:53 - done let's see what it brings us and as
99:56 - i was saying once that function is done
99:58 - it's all hooked up and it should be
100:00 - ready to go one last thing i will do
100:02 - though is coming over and use account
100:04 - once this await is done right i want to
100:06 - have a console log here is with user
100:09 - oops user is signed up this is how we
100:12 - can test if code went through from the
100:15 - front end there's a way to test it on
100:17 - the anchor build itself and also solano
100:19 - playground itself but since i'm already
100:21 - here this console should only run if
100:23 - this function call is resolved does that
100:26 - make sense cool so moment of truth now
100:28 - i'll go ahead and bring back my little
100:31 - website and for all intents and purposes
100:33 - i'm going to hit refresh cool now
100:35 - there's no username username state is
100:37 - blank because it gets reset and i'll say
100:39 - lance and my profile image will be this
100:41 - guy and let's see what happens right and
100:42 - actually should make this bigger in fact
100:45 - so that we can see that console look all
100:46 - right so i'm expecting errors but let's
100:48 - see if it works on the first try okay
100:50 - transaction may have failed to confirm
100:51 - usually if you see this that's not a
100:53 - good sign and there you go failed to
100:54 - send transaction transaction simulation
100:57 - failed let's see if i can troubleshoot
100:59 - this problem okay so from my
101:01 - understanding whenever i see this that
101:02 - usually means they try to take seoul
101:06 - because any time you do something on the
101:07 - chain you have to pay some transaction
101:09 - fees and that usually means i have no
101:11 - soul but i thought i did but if i check
101:13 - my wallet while it's six oh obviously
101:15 - now wallet six has no solana so that
101:17 - makes a lot of sense why this isn't
101:19 - working so let me just refresh this real
101:21 - quick and actually change the wallet
101:23 - where i have plenty of soul so i'm in
101:25 - walnut 1 and i have 17 so that shouldn't
101:27 - be an issue let's see if we get the same
101:29 - error so repeating the steps again if i
101:31 - see if i write lance now username has
101:34 - something if i paste this that should be
101:37 - the dice pair oh it gets so happy
101:39 - because it doesn't say transaction may
101:40 - fail this is actually working once it
101:43 - approved a user is signed up so
101:46 - officially there is an account that is
101:48 - signed up with our program and its name
101:51 - is lance and the profile image is this
101:53 - dice pair of now the seed kodi so that's
101:55 - super exciting to know every time we
101:57 - make a new function on solano playground
101:59 - or your smart contract we're going to be
102:01 - testing it on here and it's the same
102:03 - process throughout right we did a lot of
102:05 - the setup so it's going to be the same
102:06 - thing so that's exciting let's move on
102:08 - to the next function okay so i think
102:10 - that's a pretty good spot to stop on the
102:12 - front end i want to start coding back on
102:15 - the smart contract so i hope you guys
102:17 - are ready for to come back to that one
102:18 - thing i want to do is save my progress
102:20 - by coming down below and let's hit this
102:23 - vs code right here if you remember we do
102:26 - a command j and then let's update that
102:29 - github repo so if i do see boom so we
102:31 - could do a cd dot dot and let's do a git
102:33 - status right so if i go to date status
102:35 - you can see all the things that we
102:36 - change and if i increase the size of
102:38 - this it's going to look a lot better all
102:39 - right so look at all the work we did so
102:41 - far one thing that you should get into
102:42 - the habit of is saving your progress by
102:45 - updating on your repo if i do get status
102:47 - again we should see i added all those
102:48 - files so git commit and i know we added
102:51 - a lot of things it's been a while since
102:52 - i've pushed so let's just say add i
102:55 - added create user functionality because
102:58 - that's kind of summing up everything
103:00 - usually i like to be pushing more often
103:02 - but that's a good start so if we do that
103:04 - we can do get push and if you remember
103:06 - our old tic toc lana solana tik tok
103:10 - app.net life i think if i go to netflix
103:12 - here go to log in we should be able to
103:14 - see our website update all right so this
103:16 - is what it was at the very beginning of
103:18 - this video but now if i come below here
103:20 - it's going to be building again so every
103:22 - time we push it's directly connected to
103:24 - our github it should push all those
103:25 - changes and show the app again okay here
103:28 - we go it's starting to move now it's not
103:29 - going to take as long as the initial
103:31 - deployment because it's already deployed
103:33 - so it's a lot faster now awesome so this
103:35 - is good to see side is live and the
103:37 - beautiful sparkle emoji so this was our
103:40 - live site i hit refresh wow it's already
103:42 - live and it's already up to date so we
103:44 - can connect our wallet hit connect and
103:47 - we can create a user okay that's good to
103:50 - know all we need to do now is next this
103:52 - out and let's hop over to solana
103:55 - playground okay so going back to the
103:57 - playground let's just clean a lot of
103:58 - this up we can keep these guys dice
104:01 - barrier cool but i don't need that
104:02 - specific image and we don't need any of
104:04 - these so it's all cleaned up full screen
104:07 - and now we're back to our smart contract
104:09 - i hope you guys didn't forget but i want
104:11 - to add another function so if we're
104:13 - thinking about tick-tock right what are
104:14 - the functions on here so this is the
104:17 - finished app once again let's see am i
104:19 - on
104:19 - one sure boom so i'm already signed up
104:21 - and we have all the videos here right so
104:24 - how did we add the video on tiktok if
104:26 - you remember the demo we clicked on this
104:28 - guy and then we uploaded a new video by
104:30 - inputting a description and putting up
104:32 - your video url if you're already looking
104:34 - at this and thinking about how we did
104:35 - create user it's a lot similar right so
104:38 - what did we do if you remember the steps
104:39 - we created a new function or the
104:42 - instruction that we want our program to
104:44 - do awesome so let's get started all
104:45 - right so to get started i remember i
104:47 - made some variables here that we have to
104:48 - determine the size of i'm going to make
104:50 - the rest of them now so we did username
104:52 - length we also need to do something
104:54 - called text all right for text length
104:57 - all that is will be the video and
104:59 - comment text length which will just be a
105:01 - use size again but this time of 10 24 so
105:05 - we can have a long description
105:07 - essentially okay other than that another
105:10 - variable that i want to set up since
105:11 - we're already here is going to be
105:12 - concept number of allowed likes right
105:16 - space we don't want the users to be
105:19 - liking the same video over and over
105:20 - again we just want to be able to like it
105:22 - once cool so we're just going to say
105:23 - five then after that we're going to say
105:25 - const number of allowed likes wait no i
105:28 - did that already awesome so number of
105:30 - allowed like space will just be five
105:32 - okay that should be good for now in
105:33 - terms of hard-coded space what we can do
105:36 - now is start coding up the instruction
105:38 - and the next instruction is gonna be
105:40 - like i said create video right that's
105:43 - the process of uploading a new video on
105:45 - tick tock right so how do we start off a
105:48 - function we can use this kind of as a
105:49 - template so we'll say pub fn and the
105:52 - name which is create underscore video
105:54 - and for create video it's going to take
105:56 - in a couple parameters as well which is
105:58 - going to be ctx for context and this
106:01 - time is going to be context remember if
106:03 - we looked we took create user i'm sorry
106:05 - guys let me zoom this in so you can see
106:06 - that a lot better how's that
106:08 - create video will be the context right
106:10 - so again we have to create a struct so
106:13 - let's do a description it'll be a
106:16 - description parameter and what is the
106:18 - data type of the description of the
106:19 - video it's going to be a string all
106:21 - right how do i know it's a string it's
106:22 - because this will be considered a string
106:24 - and this is the description right here
106:26 - building chess app and react okay so
106:28 - description will be string the video url
106:30 - which is a lot like the profile image
106:33 - url is gonna be string as well all right
106:35 - so we also wanna store or take in the
106:37 - creator name right so if i'm logged in
106:39 - as lance this is where we're gonna pass
106:41 - in links and then of course the creator
106:44 - creator url which will be a string as
106:46 - well so they're all strings except for
106:48 - the context of create video okay and we
106:50 - need this little arrow here and we're
106:52 - gonna type in program result and that's
106:55 - going to be what gets passed in so for
106:58 - program result right we just want to log
107:00 - the description here we'll say and oops
107:03 - description so we can see it once a week
107:05 - another thing i want to do is literally
107:07 - get the video so before i move any
107:09 - further remember how we we're starting
107:11 - out this function and for it's a lot
107:13 - make a lot more sense we created the
107:14 - struct for create user i'm going to do
107:16 - the same thing so let's take a moment to
107:18 - do just that all right so coming down
107:19 - below over here where we see the structs
107:22 - what i want to do is make another one
107:24 - this one is going to be for create video
107:27 - so just if you scroll up here using this
107:28 - as a template we also want to derive
107:31 - accounts so we're going to derive
107:33 - accounts okay when we derive accounts we
107:35 - have to write the struct exactly right
107:37 - over it we're gonna write pubstruct the
107:39 - name of the class or the structure here
107:41 - so we say create video and we always do
107:45 - info here okay info after that curly
107:47 - brackets and everything within this
107:49 - curly brackets is going to define what
107:51 - needs to happen or what are the
107:52 - behaviors of creating the video okay so
107:55 - first we need to authenticate the video
107:57 - account right so we're going to do the
107:59 - brackets account just like we did
108:01 - previously nothing new and we had
108:02 - parentheses here and oops it
108:04 - automatically finished it for us but we
108:06 - just want to do init we're going to set
108:08 - the seeds again the seed is going to
108:10 - equal b
108:12 - video
108:15 - dot as underscore ref parentheses
108:18 - comma random key dot key
108:23 - [Applause]
108:24 - dot as
108:26 - ref
108:27 - okay cool so now that we set up the
108:29 - seeds we also want to add the bump again
108:32 - just in case it's not a unique hash
108:35 - we're going to add the bump to increment
108:36 - it by like one five and i think it's up
108:38 - to 20. uh the pair just like before is
108:41 - going to be the same as the authority
108:43 - cool after the pair we have to define
108:45 - the space of the video how much space
108:47 - does it take it's going to be size of
108:50 - video account video account okay and
108:52 - that's parentheses here plus right all
108:55 - the defined stuff that we put in at the
108:57 - top so it's going to be whatever the
108:59 - size of video count and text underscore
109:02 - length plus the username length plus the
109:06 - user url underscore and last but not
109:09 - least we also want the video url link
109:12 - video underscore url
109:14 - let me always do a plus eight right here
109:16 - plus eight i wonder if this works
109:18 - without z no okay cool so that should be
109:20 - fine i wonder why these aren't
109:22 - highlighted the same way diffuser url
109:25 - length let me see that's interesting to
109:26 - know but that's essentially should be
109:28 - the size of it all right plus i'm going
109:31 - to keep going i wonder if i can hit
109:32 - enter here plus 8 plus 32 and then it's
109:35 - going to be times the number of allowed
109:38 - likes right so we're actually using that
109:40 - as well space all right so there's 32
109:42 - bits in a pub key and we have five so
109:44 - for this one cool so there's a lot of
109:46 - things that goes into the video
109:48 - essentially that's why there's a lot
109:49 - other than that underneath this we need
109:51 - to define the essentially the attributes
109:54 - of the pub key which is going to be pub
109:56 - video which will have a value of the
109:58 - account info video account and again we
110:02 - don't have a video account just yet
110:03 - we're going to create that struct in
110:04 - just a bit next we're going to we're
110:06 - essentially going to do something just
110:07 - like this or similar we're gonna get the
110:10 - hashtag account again and say mute and
110:13 - this time this is gonna be random key
110:15 - which will also be account info info
110:19 - okay after that let's define the
110:21 - authority right essentially the signer
110:23 - who pays the transaction fee once again
110:25 - it's literally the same as this all
110:26 - right i can even copy paste it because
110:28 - that's going to be the same okay other
110:29 - than that we need to run a system
110:31 - program again and we also do the clock
110:33 - so do you see what i mean like after a
110:35 - certain point you're going to start to
110:36 - recognize oh some of these things need
110:38 - the same exact pubs so there you go for
110:41 - that and remember this one is just to
110:42 - save the time cool so we made the see we
110:46 - made the create user struct and then we
110:47 - made the user account we made the create
110:49 - video now let's make the create let's
110:52 - make now let's make the actual video
110:54 - account itself okay so to do that we can
110:56 - just get our account attribute and say
110:59 - pub struct once again okay cool so this
111:01 - one is simple a lot more simplified and
111:03 - easier to understand a video count right
111:05 - what should go what should be the keys
111:08 - of a video object if you're thinking
111:09 - java the ones that might not be
111:11 - inherently obvious would be you need to
111:13 - keep track of the authority which was
111:15 - just pub key you need to keep track of
111:17 - what else the description of the video
111:19 - so if you remember if this is the video
111:21 - object itself there's a description that
111:23 - we're going to need to save or set so we
111:25 - can set that up by saying pub
111:27 - description and we define what the type
111:29 - is right after okay so we also need pub
111:31 - video underscore url which will also be
111:34 - string right these all are going to be
111:35 - strings the most part pub creator
111:38 - underscore name string we also have pub
111:41 - creator url which will also be string
111:44 - and we'll also have pub comment count
111:46 - right we need to be able to count how
111:47 - many comments there are so if i go here
111:50 - you can see there's one on this one zero
111:51 - on this one four on this one so each
111:54 - video has a property called common count
111:56 - and this is where we are setting up or
111:58 - defining that just like we would in a
112:00 - class so then that one is going to be
112:02 - unsigned 64 integer so pub index all
112:05 - right the video's index is going to be
112:07 - 64. because we're going to be multiple
112:09 - videos so we're going to give them an
112:10 - index as well so let's do pub creator
112:13 - time all right this one will be i-64
112:16 - okay assigned 64. cool next we want to
112:19 - set up something called a vector which
112:20 - is something you'll understand if you
112:22 - know rust so you're going to say people
112:25 - who
112:25 - liked and that's going to be the
112:28 - property beck pub key so the way i look
112:31 - at this with rust you should know
112:33 - exactly how much space you're using with
112:35 - the vector the amount of likes can
112:38 - drastically go up right there's no we
112:40 - can't set a real hard-coded limit to it
112:42 - so with the vector you're just
112:43 - essentially allotting space for it and
112:45 - pointing to it okay this is how much
112:46 - people liked it all right at least from
112:48 - that's to my knowledge okay so pub likes
112:50 - you can say and then you can say pub
112:52 - remove 64. cool so all of that is what
112:55 - makes up a video object and we're taking
112:58 - that into account when we create a video
113:01 - right here video count and we're also
113:03 - taking that account when we're talking
113:05 - about the space okay cool so one thing
113:07 - i'll do is i should add some semicolons
113:10 - i believe i'm missing some but again
113:12 - build will let me know let's see i'm
113:13 - expecting a couple warnings or errors
113:15 - cons text length i see help provide a
113:18 - item for text oh duh i have to put like
113:21 - the use size of it i just put 10 24. let
113:23 - me just double check yeah use size i
113:25 - know i did put u size i just put two
113:27 - here build mismatched okay so i'm just
113:30 - going to go through all these errors one
113:31 - by one let's try to figure this out
113:32 - together oh there's actually is a
113:34 - semicolon that i just added that
113:35 - shouldn't be there boom i'm gonna hit
113:37 - refresh to clear it it's pretty easy to
113:38 - read nice that's normal oh did i not
113:40 - remove that semicolon oh no i didn't
113:42 - okay compiling oh there you go that's
113:44 - where we need some semicolons i knew i
113:46 - was missing it somewhere okay expected a
113:49 - comma oh not single one comma cool and
113:52 - that definitely affected the likes there
113:54 - pine pub key in the scope can just
113:56 - refresh that again let's see yeah if you
113:59 - wonder why i'm refreshing it's because
114:00 - sometimes it's hard for me to read all
114:02 - those errors there's so many but if i
114:04 - just click build let's see again yeah
114:06 - just move this around it's easier to see
114:08 - okay that's a little bit easier to see
114:10 - now program result expected result that
114:14 - not have program result we have salon
114:16 - entry point here so let me see if i copy
114:18 - this over i might have just typed this
114:20 - wrong so this is program result
114:21 - reflected here should be the same oh duh
114:25 - i didn't finish creating the rest of the
114:26 - function so program result isn't going
114:28 - to give anything okay cool now i see the
114:30 - issue let's just carry on what we need
114:32 - to do is create underscore video right
114:35 - create
114:37 - okay so and then if you're wondering
114:38 - what happened with the other errors i
114:40 - might have missed up something with beck
114:42 - public key so if you need a second i'm
114:44 - going to show you guys this just make
114:45 - sure your video count all the properties
114:48 - are this and pause it give you a second
114:50 - cool awesome so now it's all fixed up i
114:52 - just format it a lot better and fix some
114:53 - spelling okay now we can move on and
114:55 - finish the rest of the create video
114:58 - function so that's going to be over here
115:00 - and i'm just logging the description
115:02 - that's passed in from this function and
115:03 - now let's actually get the video so to
115:06 - get the video i'm going to make a
115:07 - variable here and it will say and mute
115:10 - right because remember mute means i'm
115:11 - going to be able to change it if i don't
115:12 - put mute it becomes immutable and i
115:15 - can't change it oops the account video
115:17 - account we're getting that video account
115:19 - and then on top of that we're setting
115:21 - that equal to mute ctx so essentially
115:24 - this video will have a data type of
115:26 - account video account and it's going to
115:28 - equal the context.accounts
115:31 - remember it's taking in the context of
115:33 - create video so we're going to take that
115:35 - context go to the account and then grab
115:38 - the video so we're getting the video so
115:40 - this thing right here you can look at it
115:42 - as get the video okay once we got the
115:44 - video with that line of code just line
115:46 - this up with that line of code what i
115:47 - want to do next is set the authority so
115:50 - if i say video because we got it now the
115:52 - authority i want it to equal the context
115:56 - of the accounts and in the count the not
115:58 - only is the video stored on there but
116:00 - the authority is too we know that from
116:03 - authority dot key okay boom then we also
116:06 - want the video dot description the
116:08 - description must be the have the value
116:10 - of description that's passed in so
116:11 - notice how we're taking the keys from
116:15 - the video account struct and we're
116:17 - setting and defining the values for them
116:19 - here okay and this is the one where i
116:21 - can't forget i should be putting a
116:22 - semicolon okay semicolon i'm going to
116:24 - say video why this why isn't this
116:26 - formatting the way i want to okay cool
116:28 - so let's do a video
116:30 - dot video underscore url that's the next
116:33 - and do video that's what gets passed in
116:35 - all right then we can do a video creator
116:37 - name creator i'm just going in and set
116:40 - that equal to the creator name that's
116:41 - passed in which should be the same of
116:43 - the username right so if i log in as
116:45 - lance the creator name should also be
116:47 - passed in atlanta
116:48 - so video doctor underscore url gonna be
116:51 - equal to that creator url so we're gonna
116:55 - technically separate these just to
116:56 - visualize a little bit better this is
116:58 - like the video stuff this is the
116:59 - creator's information cool and each
117:01 - video is going to have a comment count
117:03 - so what should be the value of the
117:05 - comment account at the beginning when
117:07 - you upload video it shouldn't start with
117:08 - five comments so that's why i'm gonna
117:10 - set it to zero also video dot create
117:13 - tour underscore time that's gonna be ctx
117:15 - accounts dot unix underscore time stamp
117:18 - so we can have a timestamp associated
117:20 - with the creating time okay then we have
117:23 - the video that likes which is just like
117:25 - comments how many likes can we expect
117:27 - when first creating a video it's zero
117:29 - awesome okay and once all that's said
117:31 - and done we can say message here and say
117:33 - video again which is just logging and
117:35 - just like before we want to do our soul
117:37 - log and compute the units so we know
117:40 - exactly how much units are left and
117:42 - every function has to end with an okay
117:44 - because that's how you know everything
117:46 - passed and i believe you can pass things
117:48 - in here as well but we don't need to
117:50 - awesome so let's run anchor build let's
117:52 - see what errors come up oh look at that
117:54 - message and description okay that's fine
117:55 - we just need to add a semicolon i can
117:58 - understand that let video unexpected
118:01 - token oh that's because yeah that's
118:03 - because i didn't add the semicolon so
118:04 - this compiling separates it so cannot
118:07 - find function solana compute unit okay
118:11 - that should be
118:12 - units okay compiling so now it's the
118:14 - video authority no field authority on
118:17 - type count video account okay so let's
118:19 - go into video seven let's see what we're
118:21 - missing so it's saying oh authori thor
118:23 - ritti okay finished no way okay cool
118:26 - awesome it always makes me happy when
118:28 - you run the code and there's no errors
118:29 - who can relate finished let's go so now
118:32 - what we could do is upgrade this
118:34 - right the cool thing about cilantro
118:36 - programs is that it's upgradable unlike
118:38 - other contracts because like once you
118:40 - finish the contract and you put all your
118:42 - functions in there you try to change it
118:44 - it's not gonna work luckily with these
118:46 - programs you can upgrade them so i'm
118:48 - going to upgrade this contract and once
118:50 - we do we should update our idea luckily
118:52 - i had enough soul see did i have enough
118:54 - soul deployment successful awesome so
118:57 - one thing i want to show you is if you
118:58 - come over back to vs code right i zoomed
119:00 - out a lot and we just do command j here
119:02 - command b awesome and let's just head
119:04 - over to
119:06 - the idl right or in other words the
119:09 - utils tic tac clone json do an alt z
119:11 - here you can see how there is a create
119:13 - user function in the under the
119:15 - instructions but there shouldn't be well
119:17 - there now there should be a create video
119:19 - instruction and that's what this idl
119:22 - should contain so just to make sure
119:23 - everyone refreshed and let's do a idl
119:26 - and export it idl4 and let's take a look
119:28 - if it's there so now we have create user
119:30 - as an instruction and create video
119:33 - awesome so let's take this idl for and
119:35 - copy the contents and remember this idea
119:37 - is not in our project right so we can
119:39 - access out let's x out two and let's
119:41 - make sure we paste it in our tiktok
119:43 - clone and now that's a lot better let's
119:45 - hit save so now when we get the program
119:47 - instance and we get the idl it's updated
119:50 - with the new instructions and the
119:53 - structs that we created on here so
119:54 - that's the process to update your
119:57 - program
119:58 - with your front end okay so remember
119:59 - that we're gonna be doing it about two
120:01 - more times after this so now that we
120:03 - have that function let's set up the
120:05 - front end for it yeah all right and we
120:07 - had our fun making the create user
120:09 - function but now let's go back into
120:11 - comfortable front end web 2 stuff so
120:14 - let's head back to the code so coming
120:16 - below here oh my god this looks insane
120:18 - but we can just save this and let's head
120:21 - back into main view just for a second
120:23 - here and what i want to talk about now
120:24 - is we made the function for create video
120:26 - but in order to test we have to create
120:28 - something that's going to fetch the
120:30 - videos that are already there so at the
120:31 - moment there is none because we haven't
120:33 - uploaded any but we need to set that up
120:34 - still in order to see something
120:36 - happening so what we're going to do is
120:38 - come over to your hooks again and let's
120:40 - make a new file this one is we use tick
120:42 - tock tick tock.js boom all right so
120:45 - we're making another custom hook all
120:47 - right so i can go ahead and make this a
120:49 - wave okay and we can increase the size
120:51 - of this too how's that guys all right
120:53 - cool so follow along with me it's going
120:54 - to be a similar process to when we did
120:56 - the last custom hook except this time we
120:58 - want to be fetching the video accounts
121:01 - that are in the program so let's import
121:03 - which would be the first thing we do the
121:05 - token program id from solana not from
121:08 - our utils from solana sbl token okay
121:10 - from there let's also get the wallet
121:12 - from solano adapter react we also can
121:15 - import something called public key which
121:16 - we have before public key which will
121:18 - come from solana web3.js and our best
121:22 - friend the solana host okay so if you
121:24 - think about this logically we want to be
121:27 - getting the videos from the smart
121:29 - contract right so in order to do that we
121:31 - have to get the program luckily we
121:32 - already made something that gets the
121:34 - program so let's do import get program
121:37 - instance from there we're going to do
121:39 - utils slash utils that's where it lives
121:42 - we can also do a const anchor equals
121:45 - require the at project serum anchor okay
121:48 - now this thing is similar to literally
121:51 - the last hook we're gonna get the
121:55 - anchor.utils.utf8 okay then we use const
121:57 - bn because we're going to be
121:58 - destructuring again anchor and then
122:00 - remember we're getting web 3 from here
122:01 - so what did we get last time from web3
122:04 - we got you're exactly right system
122:06 - program from web3 okay cool let's set up
122:09 - our default account again then it's
122:11 - going to be token program is the value
122:14 - shall be token program id and then the
122:17 - clock which just saves the time will be
122:19 - anchor
122:20 - web3.cis bar underscore clock underscore
122:23 - pub key system program is going to be
122:27 - systemprogram.pro
122:29 - id cool so that's our default accounts
122:31 - nothing new here we're just setting it
122:33 - up once again now for the real function
122:35 - itself tic tac we're going to do const
122:38 - use tick tock okay awesome this
122:40 - shouldn't be curly brackets it should
122:42 - actually be parentheses and again since
122:45 - it's a function we just got to set up
122:46 - like one there we go okay now that we
122:48 - set up the function let's take in a
122:49 - couple of parameters and there's
122:51 - actually a lot that comes with the use
122:52 - tick tock we want to get a parameter
122:54 - called set tick talks right this is
122:57 - capital t and then user detail video url
123:02 - description remember this is all the
123:04 - besides that tick tock these are all the
123:07 - keys of video object that we created
123:09 - from our smart program we're gonna pass
123:11 - all those information in so we can set
123:12 - it same kind of pattern set description
123:15 - set video url and set new video cool so
123:20 - just to quickly go over these parameters
123:22 - like i said these are the keys of the
123:24 - video when you see something with set we
123:26 - can infer that we're probably going to
123:28 - pass in a state here that's going to
123:31 - have the description like the same way
123:33 - we did with the login right so if i come
123:36 - back to here really quickly right
123:37 - remember how we save the state of the
123:38 - user name and with set username we can
123:40 - assume that we're probably going to save
123:42 - the state of the description and the
123:44 - video url so that's how i'm thinking
123:46 - about this right so a set of description
123:48 - video rail and then also set tick tocks
123:51 - should hold all the tick tocks that we
123:53 - have in that account so they're going to
123:55 - do const wallet which is the first line
123:57 - of code in the function and con's wallet
124:00 - will equal use wallet again and let's
124:02 - get our connection ready so the
124:03 - connection is going to equal new
124:07 - anchor.web3.connection and this is
124:08 - capital c solana host because what is
124:11 - solano host you should be hearing it in
124:13 - your head i don't even have to say it
124:14 - yes it's dev const program equals get
124:18 - program instance connection wallet all
124:20 - right okay cool so again this is the use
124:22 - tick tock function now within here we'll
124:25 - have the get tick tocks it's going to be
124:27 - asynchronous this is like the sign up
124:29 - section of the user account right where
124:31 - in this use tick tock we have a get tick
124:34 - tocks function okay let's have a console
124:35 - log here just to know so i know that it
124:38 - is like in fact fetching or at least
124:40 - it's running and afterwards let's say
124:43 - cons videos and let's get that video
124:45 - account so to get the video we can do
124:47 - program.account right dot video account
124:50 - that's the specific type of account that
124:52 - i want and if i do all i get all of them
124:54 - okay then we can just console log the
124:56 - videos which should be just an array of
124:58 - every single video that we have if
125:00 - there's no videos like we have right now
125:01 - the array will be empty so if we are
125:03 - able to get those videos we're gonna
125:05 - just use set tick tocks right which will
125:07 - be videos yeah awesome and again we
125:09 - didn't make the state for set tick tocks
125:11 - but we are when we set it up in main
125:14 - view i believe but here we're just
125:15 - calling it right because where we're
125:17 - gonna use that tick tocks set tick tocks
125:18 - will exist i hope that makes sense to
125:20 - you guys so let's make a comment here
125:22 - save all videos in state for frontend
125:26 - awesome so that's to get tick tocks
125:28 - within use tick tock but there's
125:29 - actually more functions within there so
125:31 - this one is going to be like video so
125:33 - like video is exactly what it sounds
125:35 - like it's going to be what's going to
125:36 - allow us to
125:38 - one like the video or in other words
125:41 - create a comment so maybe we don't need
125:43 - to make this just yet but i can set up
125:45 - the skeleton of it okay so function to
125:48 - call like video from smart contract all
125:51 - right so we don't have that yet but
125:53 - we're setting up a skeleton cool and if
125:54 - we're gonna follow that convention we
125:56 - also have a function that's gonna allow
125:58 - us to function to call create comments
126:02 - from smart contract yeah so notice how
126:04 - we made a function we're going to be
126:05 - making a video function from the smart
126:07 - contract in our playground and a create
126:09 - comment but we didn't need to make a get
126:11 - video because there's already a way to
126:12 - get all the videos just directly calling
126:14 - the account from the program so that's
126:17 - the reason why it's like this okay so
126:18 - this one's going to be consecrate
126:20 - comment equals async address and i'll go
126:24 - over this again once we have that
126:25 - function but for now i'm just continuing
126:27 - to code this cool now this is the one
126:29 - that we do need this one is the actual
126:32 - new video itself right so what function
126:34 - are we gonna call from the smart
126:35 - contract here function to call create
126:37 - video there it is new video just to make
126:40 - it different name async just like the
126:42 - others and it's not gonna take any
126:43 - parameters because the parameters that
126:45 - we're going to take all exist already
126:46 - globally use tick-tock and we just have
126:48 - to pass it in when we call the
126:50 - instruction okay so one of the first
126:52 - things is we need a random and we can
126:53 - get a render key by saying anchor web 3
126:56 - key pair keypair oops.keeper and it
126:58 - actually has a generate method in here
127:00 - dot generate and then what do you want
127:01 - to just read which is the public key
127:03 - cool awesome other than that let's do a
127:05 - let video
127:07 - underscore pda equal to weight
127:10 - anchor.web3.com public key find program
127:15 - address
127:16 - okay address parentheses here and inside
127:19 - we can have the utf-8 again dot encode
127:23 - video comma random key that we set up to
127:26 - buffer okay and then we want to put
127:28 - comma program.program
127:31 - just passing this all in the program
127:33 - address okay after that we have the
127:35 - transaction which is going to be
127:37 - abbreviated as tx and here we're going
127:39 - to await the program rpc8 video and
127:43 - inside it's going to take in a couple
127:44 - parameters and it's going to take the
127:45 - exact same parameters that we set up on
127:48 - our playground so if you remember it's
127:50 - going to be the description the video
127:52 - url the creator name and the creator url
127:55 - so let's translate that in here let me
127:57 - make sure i spell
127:58 - description script we're going to pass
128:01 - in video url and this one will say user
128:04 - detail as the creator name because these
128:06 - are detail user name and user detail dot
128:10 - user profile image your all right
128:13 - because we also want the profile image
128:15 - so if you take a look in here we have
128:18 - the
128:19 - name and when i look at the comments our
128:21 - picture is also on here cool all right
128:23 - so let's go back to the code user
128:25 - profile image url and then it's going to
128:27 - take in an object all right that's why
128:29 - this is really well so the object that
128:31 - this is taking in is going to be
128:32 - accounts and the accounts are going
128:34 - gonna have the video pda from before and
128:38 - random key as the random key and then
128:40 - we're gonna have the authority be the
128:42 - wallet public key and again we're gonna
128:45 - do this dot dot default
128:48 - account
128:49 - and the closing parentheses here is the
128:51 - end of the parameters and all you need
128:54 - to do is console.log right tx all of
128:56 - that was part of dx if i'm able to
128:59 - console.log tx we can assume that a
129:01 - video was created so we can test that
129:03 - function okay from there we also want to
129:06 - set the description to empty right we're
129:09 - doing this because if i create a new
129:11 - video we should clear the description
129:13 - because that's going to indicate that we
129:15 - already sent it right if you were making
129:17 - a to-do app and you put in your to-do in
129:19 - the input field you press enter that
129:21 - should be cleared so we can do that
129:23 - since it's saved as a state by saying
129:25 - set description is just empty string and
129:27 - set see what else do we need set video
129:29 - url to empty string and set new video
129:34 - show as false because that's going to be
129:36 - true okay awesome and then there is this
129:39 - function within use ticktalk called get
129:41 - you can just set that here and i'm just
129:43 - going to keep it here so let me make a
129:44 - comment for this one function to fetch
129:47 - comments from the comments on the smart
129:51 - contract all right so there's no
129:53 - function that we're creating called get
129:54 - comments we're just fetching it from the
129:56 - account itself cool and i won't forget
129:58 - this time i got you guys after getting
130:00 - all the comments did i write this right
130:02 - let me see oh yeah get comments after
130:03 - writing all the comments i wanted to be
130:05 - able to return all those functions right
130:08 - you have to return it like this so if i
130:10 - do get tick tocks like video create
130:13 - comment new video and get comments so if
130:17 - i return it like this i'm essentially
130:19 - going to be able to destructure each
130:22 - function individually from this hook so
130:24 - that's how you make your own custom hook
130:26 - and like i said i won't forget let's do
130:27 - export default tick tock cool all right
130:30 - so that's the use tick tock hook
130:31 - completely so once that's done we can
130:34 - actually put this to use so let me just
130:36 - add the front end and we can just start
130:38 - testing some of these things okay so now
130:40 - that we have this custom hook we can hop
130:42 - back over to main view and make a little
130:44 - bit more progress on this thing okay so
130:46 - when we have say the use tick tock right
130:50 - hook we want to import that as well
130:51 - where is use account right here let's
130:53 - type in import use tick tock awesome so
130:57 - remember when we're using hook it should
130:58 - always be within the function component
131:01 - itself and if i do use tick tock i'm
131:04 - going to write it down here and that's
131:05 - the structure the functions that we're
131:07 - going to use which is going to be pretty
131:09 - much all of them it's going to be get
131:10 - tick tocks right tick tocks liking the
131:13 - video create comment new video and get
131:17 - comments and get comments and we're
131:19 - going to set that equal to that hook and
131:21 - use tick tock is going to take in a
131:24 - couple different things going to be set
131:26 - tick tocks actually this makes more
131:28 - sense if i put in those states right
131:29 - because it's going to remember if you
131:30 - remember use tick tock we are using
131:33 - states right so we need to pass those in
131:35 - and if we want to pass them in we have
131:37 - to set it up so i'm going to set it up
131:38 - right under here and we say cons tick
131:40 - tocks comma set tick tocks right this is
131:44 - a use date right that we're setting up
131:46 - that's going to hold all the tick tocks
131:48 - in our app other than that we can just
131:50 - set up the rest let's do use state and i
131:52 - know there's going to be a couple of
131:53 - these so let's make copies so it's going
131:54 - to be one two three and four i believe
131:57 - so the first one new video
131:59 - show right and then there's set new
132:02 - video show we're also gonna have a
132:04 - description and set description this is
132:06 - going to be similar to the username like
132:09 - i keep mentioning over and over but it's
132:10 - going to be running the on change okay
132:12 - and this one is going to be set video
132:14 - your same deal after that this is going
132:16 - to be user detail this is going to help
132:19 - out mostly for comments so this one
132:20 - makes this one will make sense much
132:21 - later okay so now let's set the initial
132:23 - state like when we first load new video
132:25 - show what should be the initial state
132:27 - like i was talking about earlier it
132:29 - should be false which should be the
132:30 - initial state of description empty
132:32 - string because it should be blank an
132:33 - empty string if i were to put hello here
132:35 - you would see in the input field hello
132:37 - because that's what's i want to show up
132:39 - in that input okay and then user detail
132:40 - you can actually just leave blank it can
132:42 - be undefined cool so now we set up all
132:43 - those states i feel more comfortable of
132:45 - passing them in parameters so let's put
132:47 - set tech talks here notice how it's not
132:48 - grayed out anymore right user detail
132:51 - video url
132:53 - description description and set video
132:56 - url and of course set new video show
133:00 - okay we're passing that into use tick
133:01 - tock so that when we call anything of
133:03 - any of those things in the function it
133:04 - exists so it wouldn't be undefined or
133:06 - not
133:07 - show cool so did we import use effect
133:09 - yet yes we did so we could set that up
133:12 - next let's set up the use effect and if
133:13 - you don't know use effect is a react
133:15 - hook which lets us perform side effects
133:17 - at different points in the component's
133:19 - life cycle so if that doesn't make sense
133:21 - to you go look up documentation on use
133:23 - effect but the best thing i can explain
133:25 - to you is i want if you want to run a
133:27 - function when the component first loads
133:29 - or when there's a change or when it
133:31 - unmounts this is the place to do it so
133:33 - you just put a function in here or a
133:35 - check that you want to happen every
133:36 - single time right so basically what i
133:38 - want to happen is if wallet we're
133:40 - getting this from the wallet contacts
133:43 - if it's connected or while it dot
133:45 - connected that is true then what should
133:48 - happen we shouldn't see this sign up
133:50 - anymore i clicked sign up and there's
133:52 - already a user but we should get to the
133:55 - page and we should get the tick tocks so
133:57 - let's go back to the page if the wild is
133:59 - connected let's get the tick tocks okay
134:02 - cool so remember there is one more thing
134:03 - i want to do there also is the check
134:06 - account and that doesn't exist yet check
134:08 - account so let's make a function const
134:10 - check account all right this function is
134:12 - literally going to check if the user is
134:15 - connected or not this is where this is
134:17 - finally going to come into play so
134:19 - follow along with me it's going to be
134:20 - let user underscore pda just like the
134:22 - video pda but now it's user now it's
134:24 - going to be weight anchor dot web3 dot
134:28 - public key dot find program parentheses
134:31 - utf8 and then code okay and now we do a
134:34 - wallet dot public key dot to buffer from
134:38 - there we're gonna do a program.program
134:41 - id awesome so we have the user plda and
134:43 - from there let's set up a try catch
134:45 - block i'm gonna set up the cache first
134:46 - since it's easy if there is no user we
134:49 - gotta make sure the set account is false
134:51 - right because what happens if the
134:52 - account is false right if the account is
134:54 - false then we should be re seeing this
134:56 - up still but then if the account does
134:59 - exist let's do a const user info is
135:02 - equal to await.program.program
135:05 - waitprogram dot account
135:08 - dot user account dot fetch user pda okay
135:12 - so then if that works then let's console
135:14 - log the user info so we can actually see
135:16 - the account that we're fetching and then
135:18 - we're gonna set the user detail with
135:20 - that user info okay and then we have set
135:23 - user detail here that exists and of
135:25 - course we want to set the account to
135:27 - true so now it should start to come
135:30 - together if is account is true what's
135:32 - going to happen we should see the
135:33 - essentially the tick tock app but for
135:36 - now there's like a placeholder that says
135:37 - tic tocs will go here okay cool so i
135:39 - feel comfortable with that and that's
135:40 - the function that's the what i call the
135:42 - recipe but when do you want to run this
135:44 - command i want to run it if the wallet
135:47 - is connected yeah so let's do check
135:49 - account here right so when we first load
135:51 - the component if that wallet is
135:53 - connected then we can check the account
135:56 - and get tick tocks the problem with
135:58 - usefx is every time there is an update
136:00 - right let's say i change something under
136:02 - the create new video this user effect is
136:05 - going to run again so we're going to
136:06 - check account again and get tick-tock i
136:08 - don't want that to happen so use effect
136:10 - actually takes two parameters and comma
136:12 - here and this is called a dependency
136:14 - module right if you just have an empty
136:16 - array here this use effect will only run
136:19 - once when the component first okay i
136:21 - hope you're following because if the
136:24 - dependency module has something in here
136:26 - like wallet.connected it will only
136:28 - update once or if this is changed like
136:32 - if it changed to true or false it will
136:34 - run this and check it which is exactly
136:36 - how i want to run it and that's why you
136:38 - use these effects because it gives you a
136:39 - lot of control of when to run certain
136:41 - functions if you're familiar with with
136:43 - the web 2 space you can use user effects
136:46 - to make an api call you can use effects
136:48 - to authenticate a user and many more
136:50 - things like that so that's only a little
136:52 - spiel and use effects awesome okay so
136:54 - just taking a look that should be just
136:57 - fine and we are importing the style
137:00 - import styles from main view okay cool
137:02 - so i'm going to do the same thing like
137:03 - we did with sign up where i prepared the
137:06 - skeleton of the css and then we coded up
137:10 - as you see it but just for fun let's go
137:12 - test our app right so i'm going to
137:13 - refresh this oh let me open up the vs
137:16 - code are you running the project still
137:17 - no we're not so in here let's do a ntl
137:21 - dev and get up and running not found
137:23 - that's probably because i'm not in the
137:24 - right path we're in tick tock clone
137:26 - youtube only but when we should be in
137:29 - front and okay clear now we should be
137:31 - able to entail there because that
137:32 - actually exists there hey okay so our
137:35 - login is still working i can input my
137:37 - path boom tick tocks will go here we
137:39 - already have an account so we loaded
137:41 - right wait for it we loaded this jsx
137:44 - because we have an account made already
137:46 - we did that earlier but what if i did
137:48 - wallet two now let's see wallet number
137:50 - two i'll hit refresh right now it's
137:52 - gonna prompt us to log in and let's also
137:54 - keep track of the console because
137:55 - remember it should be showing us the
137:57 - user later let's select wallet phantom
138:00 - detected approve and now we're gonna
138:02 - register wallet number two for our app
138:03 - for the very first time we'll hit
138:05 - connect fetching tick tock so that's
138:07 - working we shouldn't be getting any tick
138:09 - tock so we don't have any and now it's
138:10 - prompting us to sign up all right so for
138:13 - the username let's think i'm gonna shout
138:16 - out one of my students arnesha right and
138:18 - we're going to get her a nice profile
138:20 - picture let's do our nisha cool this is
138:23 - our new show and let's bring that over
138:24 - here and get x out the old one this is
138:26 - our profile image let's hit sign up hey
138:29 - okay so that means it should be working
138:30 - let's get signing up user is signed up
138:33 - and it does take a couple seconds but if
138:35 - i hit refresh now oops nothing i'm gonna
138:38 - give someone some time there we go
138:40 - awesome so that means our nisha is
138:42 - signed up and if you look it's console
138:44 - logging that user the user details so
138:46 - that's amazing so now let's make this
138:50 - very pretty because it should look more
138:52 - like this yeah so if you want to learn
138:53 - how to do that get excited because now
138:56 - it's happening so like i said i want to
138:58 - be setting up the css so that's going to
139:01 - be easy for us to see what's happening
139:03 - so i'm going to go and do control p and
139:06 - let's find main view module that css
139:09 - there we go and the only thing that we
139:11 - need for the skeleton is i'm gonna have
139:13 - a div called app videos we're gonna have
139:15 - another videos but this time i'm using
139:18 - the webkit webkit scroll bar because the
139:20 - way i'm setting up i want to be able to
139:22 - hide that scroll bar this is how you and
139:24 - you say this i can just add that now
139:25 - display now and we'll talk about it
139:26 - later so you can see what i mean cool so
139:28 - this hides the scroll bar for i believe
139:30 - chrome safari and opera but this one
139:34 - this app videos oops if i do dash ms
139:38 - overflowed over
139:40 - none and then we do scroll bar dash with
139:44 - none this one is specifically going to
139:46 - hide the videos for i believe internet
139:48 - explorer and firefox all right it could
139:50 - be switched i sometimes mix this up but
139:52 - for now this is it i'm gonna add up
139:54 - videos later so i'm gonna hit save okay
139:56 - go back to medium i guess i can do
139:57 - control p and now when i add the jsx
140:00 - it's not gonna say undefined because we
140:02 - are already importing awesome cool so
140:04 - there's going to be a bunch of
140:05 - unfinished things here but bear with me
140:07 - so let's do this again if right there is
140:09 - an account we need to take new video
140:12 - show right and upload models but
140:14 - essentially if new video show exists
140:16 - we're gonna load the upload model all
140:18 - right upload okay and upload model
140:21 - doesn't exist so let's just quickly
140:23 - create it now we're finally gonna start
140:24 - to make all the components on tick tock
140:26 - now okay cool so now it exists we'll
140:28 - come back to this in a second but it's
140:30 - just closing div trying to see curly
140:32 - bracket and
140:33 - we can hit enter here and now for some
140:36 - styling right this should be the app
140:38 - itself so this is where it comes in div
140:40 - class name oops styles dot app videos
140:44 - right is that how i named it should be
140:46 - app videos yes it is thanks for
140:48 - confirming guys okay now in this div
140:50 - right i'm gonna get the tick tocks dot
140:53 - length equal to zero i'm setting this up
140:56 - as a condition for my ternary statement
140:58 - which is basically saying if the tick
140:59 - tock length is zero right this is where
141:02 - we'll have just something really ugly
141:04 - it's just gonna say no video you can
141:06 - upload this and fix it yourself but for
141:08 - now this is what i'm gonna include for
141:10 - no videos like i said since this is a
141:12 - ternary what happens if the length is
141:15 - not zero and it can only be more than
141:17 - zero so in that case if it is then we
141:19 - want to do it tick tocks dot map and
141:22 - we're mapping through the tick tock's
141:24 - state that we set up which holds every
141:25 - single tick tock for us it is going to
141:27 - be zero it's going to be empty but if it
141:29 - did have some all right we're going to
141:30 - use the map function and for every
141:33 - single tick tock in an array let's say
141:34 - we have two we're going to iterate twice
141:36 - this map is going to run twice so every
141:39 - single time we want to be returning a
141:42 - video component oops a video component
141:44 - all right and this doesn't exist yet but
141:46 - this component will hold the actual
141:48 - tick-tock video itself so you can
141:49 - imagine we'll be passing a lot of things
141:51 - onto this cool cool setting up video now
141:53 - and let's import video okay this is why
141:55 - i held off from styling the main view
141:57 - all because if i did this at the
141:58 - beginning it'd be a little bit confusing
142:00 - but now it's not right so here where is
142:02 - the end of the map oh and if i do this i
142:05 - won't have to write return awesome okay
142:07 - so then there's this closing parenthesis
142:10 - closing bracket and then the closing div
142:12 - then over here in between this will have
142:14 - another component called bottom bar if
142:17 - you're wondering what bottom bar is if i
142:18 - take a second bottom bar is going to be
142:20 - this little guy right here right so that
142:22 - is that component which is going to have
142:24 - the button to create a new video we
142:26 - actually use this button to refresh to
142:28 - get the tick tocks again as well too so
142:30 - you don't have to refresh the browser so
142:31 - that's good to know for later that is
142:33 - the bottom bar oops click the playground
142:35 - awesome so where was i and then should
142:37 - be closing div and then sign up and
142:41 - everything else sounds good save and
142:43 - let's take a look at our app any errors
142:45 - yep bottom bar is not defined as
142:47 - expected all right so let's make that a
142:48 - new component okay hitting save and now
142:50 - when i check are you undefined still oh
142:54 - duh i have to import it i was on such a
142:55 - good flow guys but now here we go bottom
142:57 - bar nice so let's refresh this a bit hey
143:00 - no videos bottom bar right that's
143:03 - totally fine but once we add styling to
143:05 - everything it should make a little bit
143:07 - more sense so i'm thinking about this i
143:09 - think i want to start styling the
143:11 - video.js because if i style the video
143:14 - component when we create a new video
143:16 - you'll be able to see it yeah let's do
143:18 - that so to start styling our video
143:21 - component we're going to need to hop
143:23 - back to our code and let's go to
143:25 - video.js let's get started so the first
143:27 - thing i want to do is import a couple
143:29 - things from react so let's import use
143:31 - ref use state from react cool so after
143:36 - that we have a couple different things
143:38 - we can import but it's not going to make
143:40 - sense till later on so what i'll do
143:42 - instead is let's just import our
143:44 - styles from and the path of styles slash
143:49 - video dot module dot css and yes i know
143:52 - this doesn't exist just yet but we'll
143:54 - get to it we'll get to it right now so
143:56 - go into styles let's make a new file
143:58 - it's just gonna be video
143:59 - module.css all right same thing i'm
144:01 - setting up the styles so that later on
144:04 - we can just not worry about it being
144:05 - undefined wrapper and then dot video
144:08 - player okay unfortunately we're not
144:10 - going to be able to really see what this
144:13 - looks like until we get a video and
144:15 - luckily since it doesn't have any
144:16 - styling i think i'm just going to style
144:18 - it as we go now so position is going to
144:20 - be relative and the background color is
144:21 - going to be black and the width is going
144:24 - to be 100
144:25 - okay the height is also going to be 100
144:28 - and the scroll snap align is going to be
144:32 - start so this is the feature where in
144:34 - tick tock scroll it just a little bit it
144:36 - like goes to that and scrolls to the
144:38 - next dip boom right so i'm not like
144:40 - scrolling hands up boom see that's
144:42 - pretty cool so this is going to help
144:44 - with that there awesome and then the
144:46 - video player itself is going to be
144:47 - object fit
144:49 - fill and with 100
144:51 - and height 100 okay cool so now that's
144:55 - done we can head back over to our video
144:57 - and we're gonna need to pass down a lot
144:59 - of props so remember what i explained
145:00 - before props going back into main let's
145:03 - take a look at what we need to pass into
145:05 - video which i'd imagine is a lot okay so
145:08 - one of the first things about this is
145:10 - this first parameter in map represents
145:12 - the element in the tick tock array which
145:15 - is literally a tick tock which is why
145:16 - we're client tick top second parameter
145:18 - in map is essentially the incrementer
145:21 - for an index so it goes 0 one two three
145:23 - four anytime you're creating a component
145:26 - you should give it a unique key so
145:28 - that's what i'll set up first the key is
145:30 - gonna equal the id right so if there's
145:32 - one video the id will be zero there's
145:34 - two the id will be one cool so let's
145:36 - address is going to equal right and now
145:39 - we just have to map out the object so if
145:42 - tick tock is the object that holds the
145:44 - tick top we can get the address by doing
145:46 - tick tock dot public key and remember we
145:48 - want it to be readable so let's do two
145:50 - base 50 and there you go so the url
145:52 - we're gonna do the same kind of thing
145:53 - for all the other properties so it's
145:54 - gonna be
145:57 - ticktock.account.videourl okay and for
145:58 - the channel the channel you can look at
146:00 - it as the ticktock name
146:02 - ticktalkcount.creator
146:05 - name i think that's what we called it
146:06 - channel and then the index of the video
146:09 - index of the video is going to be tick
146:11 - tock oops dot account index dot two
146:15 - number okay and then from there if we do
146:18 - likes likes will be however many likes
146:20 - the tick tock has tick tock that account
146:22 - that likes and if you remember what it
146:23 - is by default it should be zero now so
146:25 - something that we will visually see the
146:27 - most is the description of the tick tock
146:30 - and it's simply just tick tock dot
146:31 - account dot description if you're
146:34 - wondering where i was able to figure
146:35 - this out on is if you were to take this
146:37 - out and just only console log tick tock
146:39 - you will see each object and if you open
146:41 - up that object you can see like oh if i
146:43 - open up publicly i should see the public
146:45 - key okay so description now we can just
146:47 - see the number of shares i don't think
146:49 - we actually have the amount of shares on
146:51 - this but we do have like video is going
146:53 - to be just like video there's also like
146:56 - a dress right this each video needs to
146:58 - store
146:59 - the people that liked it so just to put
147:02 - a visual to that this video is storing
147:04 - that i this account liked it all right
147:06 - but this guy i didn't like i didn't
147:08 - personally like this tic tac on this
147:10 - account but three other people did and
147:12 - it's remembering that it saved it on so
147:13 - that's what like address is right so to
147:16 - get that we can do tick tock count dot
147:20 - people who
147:21 - liked okay then we can also do create
147:24 - comment because we should be able to
147:26 - create a comment from each video alright
147:27 - again visual if i can do this i should
147:29 - be able to create comments so let's
147:31 - create a comment to get comments and
147:33 - then we should also be keeping track of
147:35 - the common count which again by default
147:37 - it's one until somebody adds their own
147:40 - account let's do a two number here
147:42 - helping like video comes from get tick
147:44 - tocks yep looks pretty good to me all
147:46 - that's passed in from main view so now
147:49 - we have to accept those props from the
147:51 - video now coming to video we can accept
147:54 - the props here and if we destructure
147:56 - them it'll be a lot easier to call them
147:58 - so i'm just going to write them all out
147:59 - okay so that was a lot awesome and then
148:02 - yes okay cool so then there's a couple
148:04 - of states that we want to set up here
148:06 - and remember how i'm using use rep it's
148:07 - going to come into play later but let's
148:09 - set it up so const playing i want to
148:12 - keep track of the playing state right is
148:14 - the tick tock playing if it is right
148:16 - then it should be true but if it's not
148:18 - playing it should be false so by default
148:20 - do you want your tick tocks to be
148:21 - playing probably not so i'm going to set
148:23 - playing to false otherwise it would all
148:25 - play at once and that's really insane so
148:26 - let's do show comments right as another
148:29 - state we want to keep track of so this
148:30 - is where we click on the comment and
148:33 - then we'll see the little text that
148:35 - showcases all the comments so we can
148:37 - change that essentially this is going to
148:39 - be like a toggle just is playing and
148:41 - then cons video ref right this is where
148:44 - the user ref comes in and by default
148:46 - it's no all right we're going to be
148:48 - grabbing a reference to the video where
148:51 - we can set it to play or pause all right
148:54 - it's going to be a lot more clear once i
148:55 - start building more of it out but if
148:56 - you're following with me you're gucci so
148:58 - on video press that's the function name
149:00 - i'm creating right so if i click the
149:02 - video or press the video in this case
149:04 - we're going to check if playing is true
149:06 - or false because if playing is true does
149:09 - that mean the video is running or does
149:11 - that mean the video is paused it means
149:12 - the video is running if playing is true
149:14 - so what do you want to happen we want
149:15 - video ref current right because that's
149:17 - coming from the ref object to be dot
149:20 - pause okay else which means if playing
149:23 - is false we need to be able to play the
149:26 - video so let's do the same thing here
149:27 - except this time and of course in order
149:29 - to change the state of playing after we
149:32 - hit pause we have to do a set playing
149:34 - false and then followed by a set playing
149:37 - true underneath the else yeah cool all
149:40 - right so we also want to be able to hide
149:42 - comments this is a function that we're
149:44 - going to place somewhere what state is
149:45 - going to be affected by this it's going
149:47 - to be the set show comments model and if
149:51 - i want to hide comments it should be
149:52 - false what if i want to show comments
149:54 - that's a no it's a whole function on
149:55 - itself show comments and if i want to
149:57 - show comments it's going to be show
149:59 - comments modal true yes true true true
150:01 - okay awesome so for the just x of the
150:04 - video there's gonna be components in
150:06 - this video itself right like the sidebar
150:09 - the footer the comments but i'm not
150:12 - gonna make all them right away i'll just
150:13 - write out the whole jsx and then we'll
150:16 - start talking about it so we can do is
150:17 - do that
150:18 - and we can say class name styles dot
150:21 - wrapper okay and there's actually a
150:23 - video tag here that we can call upon
150:25 - with the class name the video player
150:27 - right so styles that video player and we
150:29 - want to say uh loop you can just put
150:32 - that right here because after it's done
150:33 - playing it should loop just like it
150:34 - doesn't so on click that can equal on
150:37 - video press then we hit ref that can
150:40 - equal the video ref right this is where
150:42 - we're getting the use of use rep and
150:44 - getting the reference of this video
150:46 - through here right every
150:47 - tag is going to come with a reference
150:49 - object or attribute sorry and the source
150:52 - of this video is just going to be the
150:53 - tick tock url right and that's how we're
150:55 - able to play these videos so in theory
150:57 - you should be able to do it with youtube
150:58 - as well if you wanted to use those kind
151:00 - of videos but you might have to format
151:02 - it or you might have to deal with some
151:03 - cores if youtube doesn't allow you to
151:05 - just copy youtube videos like that cool
151:07 - all right so for now i already know
151:08 - there's gonna be a component that goes
151:10 - here so let's comment it out there's
151:11 - also gonna be a sidebar yes these are
151:14 - all things that i'm going to come back
151:15 - to once i have an actual video right
151:17 - because you can't even see these things
151:18 - until we have one okay i will set up
151:20 - show comments model because we already
151:22 - did set up that state so this can exist
151:24 - and since it's javascript right in html
151:28 - you have to separate it by putting these
151:31 - curly brackets here so i'm writing
151:32 - javascript now and essentially if show
151:34 - comments model is true we should show
151:37 - comments component and we need the
151:39 - closing first delaware awesome so this
151:41 - one i can make because if i save this it
151:43 - will say it's undefined even though like
151:45 - when i load the video and i don't want
151:47 - to want that to happen so let's import
151:49 - that let's do new file comments cool all
151:52 - right i feel comfortable with that for
151:53 - now so if anything we should just see a
151:56 - video minus the footer in the sidebar
151:58 - alright so we're making great progress
152:00 - on being able to create a video real
152:02 - soon the next thing we should probably
152:04 - just work on is the upload model so if
152:06 - we're going to work on the upload model
152:08 - click the upload model file and then
152:11 - let's set it up okay so i'm in the
152:13 - upload model file and there is some
152:15 - props that we're going to be needing to
152:16 - pass so i think actually i lied let's go
152:19 - back and go do that so in main view
152:21 - let's take a look at what props we need
152:22 - to pass down to upload modo all right
152:25 - there's only a few not as much as video
152:26 - look at this alright but upload model
152:28 - does need some and now upload model is
152:31 - going to need description and that can
152:33 - just be as description video url which
152:35 - is just video url new video as new video
152:39 - set description we're gonna pass in that
152:41 - state there and set video url and set
152:45 - new video show cool so now we're good to
152:48 - go awesome so let's accept those props
152:50 - by destruction them first so that we can
152:52 - call them by their names without saying
152:54 - props dot the description video url and
152:57 - so forth okay awesome so that's all the
153:00 - props i believe let's also set up the
153:03 - css so i'm going to go back to styles
153:05 - simply just say new file upload
153:08 - modal.module that's css okay cool and i
153:11 - usually do i'm gonna set up the skeleton
153:13 - so that you guys can visually see it as
153:15 - well and actually i won't fill out the
153:17 - styling cool so there will be a wrapper
153:19 - there will be modal buttons there will
153:21 - be a title div and input okay just like
153:24 - before we also need an input class and a
153:27 - button class so this is the skeleton of
153:29 - all the divs i may might forget one but
153:31 - let's see i think that's pretty solid we
153:33 - just need to import that style so import
153:36 - styles from and then that path which
153:39 - should just be the forward slash upload
153:42 - model it doesn't even show up css yeah
153:44 - that sounds about right cool and luckily
153:47 - luckily there's no like hooks or
153:48 - anything we need to do here we just need
153:49 - to set up all the dips so let's clean
153:51 - this up a bit and i'll just say class
153:53 - name wrapper yeah this styles right then
153:55 - we got div class name upload video input
153:59 - field i can never spell feel it filed
154:01 - again
154:02 - there you go thank you guys then we can
154:04 - do a div class name of input title which
154:08 - will just hold this word description
154:10 - it's if you're noticing it's very
154:11 - similar to when we were trying to sign
154:13 - up a user same kind of text box so if
154:16 - you want the visual just like that very
154:18 - similar to signing up yeah there you go
154:20 - awesome so after the input title let's
154:22 - do the input container which of course
154:25 - contains n input the input has the input
154:29 - class type equal text value is equaling
154:32 - description and then we gotta have the
154:34 - on change which i can actually put now i
154:36 - don't have to save it for later you guys
154:37 - know what this is now description yep
154:39 - and of course if you want the input
154:41 - field you want to do e dot target that
154:42 - value so closing div closing div enter
154:45 - div class name all right so we're just
154:47 - going to the same setup with input field
154:49 - and the title in the container
155:22 - [Applause]
155:25 - you
155:32 - [Applause]
155:42 - it's like silent coding session because
155:44 - i'm so focused what you guys should be
155:46 - following along it's like the same thing
155:47 - yeah unchange again set video url we
155:50 - want to make your e target dot value to
155:53 - grab that input nothing new here div
155:55 - closing div and we want to set the modal
155:58 - buttons do i have that class in here oh
156:00 - yeah i do moto buttons cool so this is
156:02 - going to contain buttons oh and uh an on
156:04 - click and we actually have the function
156:06 - that i want to run if we click it which
156:08 - is going to be set new video to false
156:11 - okay this one's going to have a unique
156:14 - class name it's going to have two let me
156:16 - see there's a cancel button and then
156:18 - there's just a button it's going to have
156:19 - both so to write that we're going to
156:20 - write a template literal i'm going to
156:22 - say style dot button as well as
156:25 - style.cancel
156:26 - okay and in between them we'll just have
156:28 - the word cancel right just in case you
156:30 - want one more button on click again and
156:32 - when we click we're going to run new
156:33 - video right which is a function that
156:35 - comes from that's getting passed down to
156:36 - upload modal and give it two class names
156:39 - as well template literal style dot
156:42 - button and style dot create and i know i
156:45 - just realized it's gonna be styles cool
156:48 - style styles all right i'm just gonna
156:49 - write create new one here create okay
156:52 - default upload model i'll hit save now
156:55 - and it's not gonna have any css if i
156:57 - were to open it it's just not possible
156:59 - to open it because if you remember you
157:01 - get this upload model to get here you
157:03 - have to click this right here and to get
157:05 - this we're going to need the bottom bar
157:08 - component okay so let's get it rolling
157:09 - with the bottom bar we want to make this
157:11 - little guy over here so i'm going to
157:13 - head over to my code and let's get back
157:15 - to main view reason why i go to main
157:17 - view is because with bottom bar there's
157:19 - a couple of things i want to pass down
157:21 - so with bottom bar all it's going to
157:22 - take as props is set new video show and
157:26 - that's going to be set new video show
157:28 - all right i'm going to get tick tocks
157:30 - and put in get tick tocks awesome so
157:33 - those are the only two see if i spell
157:35 - them right yes so now i'm going to go to
157:38 - bottom bar and since i have this little
157:40 - guy open let's make a bottom bar styling
157:43 - bottom bar css so bottom bar dot module
157:48 - dot css okay cool so now that i have
157:50 - that set up let's get the skeleton of
157:52 - this wrapper we have an add video button
157:55 - and just a bottom icon nice okay bottom
157:59 - icon so just those three things and then
158:02 - coming back to the bottom bar component
158:04 - clear this up oops image stop bring this
158:07 - up a little bit and here there's a
158:08 - couple react icons that we're going to
158:10 - get and remember our cli tool was able
158:13 - to import react icons so there's no need
158:16 - for you to do that which is super
158:17 - awesome and let's also import style from
158:21 - that styles slash bar dot module that's
158:24 - css alright so take a second these are
158:26 - the icons that we're going to need a
158:28 - iphil home the outline compass io's ad
158:31 - and the message minus the bs person all
158:34 - this is are just the icons that you see
158:36 - here yeah cool so let's destructure our
158:40 - beautiful props and set new video show
158:43 - is what we're going to type then we can
158:44 - get tick tocks here and nice all right
158:46 - time for some jsx we're going to fix up
158:48 - this div and give it a name i'm thinking
158:51 - oh i said style let me put the style
158:53 - with s styles so styles dot wrapper is
158:56 - the parent tip and here we'll use the ai
158:59 - fill home and i can actually give icons
159:01 - a class name as well which will just be
159:03 - style dot bottom icon okay underneath
159:06 - the ai from home we have ai outline
159:09 - compass with the same class name okay
159:12 - and we're not going to close it just yet
159:13 - because i want to add in an on click to
159:15 - this all right so for the on click let's
159:18 - see if i do this we can say on click
159:21 - let's get tick tocks because remember i
159:24 - said this button right here actually
159:26 - refreshes and runs the get tick tock
159:28 - function again so we don't have to click
159:30 - this refresh button okay just a smart
159:32 - way to do that all right after that we
159:34 - can finally write another div and say
159:36 - class name styles add video book okay
159:39 - and the add video button is the middle
159:41 - thing so it's going to be ios app so
159:43 - close give it the class name and on
159:46 - click of course and what we want to
159:47 - happen is set
159:49 - new video true because if set new video
159:52 - is true we're going to load that
159:54 - component the upload model right let's
159:56 - see oh give it some in some inline
159:58 - styling it looks like which is going to
160:00 - be oops color black cool closing dad the
160:04 - rest of the icons now it's the buy
160:06 - message minus class name style dot
160:08 - bottom line or styles okay then there is
160:11 - bs person with class name styles that
160:15 - bottom icon awesome let's save that and
160:18 - now it's been a while but let's do the
160:20 - split screen again and there it is
160:22 - there's our beautiful little app with
160:25 - all the icons on there right and i'm
160:27 - gonna have to zoom out a little bit guys
160:28 - sorry so i can see this a lot better but
160:30 - we can do it a little bit more like this
160:33 - there we go i'm feeling that we can zoom
160:35 - this in just a little bit more cool so
160:37 - take a look this is what our bottom bar
160:39 - looks like with all the icons but it
160:42 - should be looking more like this so how
160:44 - can we get it to look like that that's
160:45 - where the css comes in so to start let's
160:49 - add a width actually before i start the
160:52 - width let's add a background color let's
160:53 - make it red cool so this is our bottom
160:55 - bar this red thing so it's going to be
160:57 - black but i just read because it's
160:58 - easier to see now if i give a width of
161:02 - 72.6 percent okay and let's give it a
161:05 - display flex because if you remember
161:07 - what is the default flex direction if
161:09 - you just say this ball it's row you got
161:11 - it so then here let's justify content
161:14 - and
161:15 - i want space evenly okay so this puts
161:18 - even space around all of that for this
161:20 - we want the color to be white cool
161:22 - except for the plus icon plus icon
161:24 - should be back with black with a
161:25 - background of white okay now for the
161:27 - font size that should be 2 rm the
161:31 - padding let's give it some padding on
161:32 - here 20 pixels nice and let's give it a
161:36 - border dash top of 2 pixels solid white
161:40 - okay and that's just this little line
161:42 - that separates the video from the bottom
161:44 - bar you guys haven't even noticed that
161:45 - when i was using tick tock but it's
161:47 - pretty cool small details that you don't
161:48 - notice that developers think of so now
161:50 - let's add a border radius and if you
161:53 - didn't know the way i'm formatting this
161:54 - it's top right
161:56 - bottom left i believe oh what the hell
161:58 - oh yeah i was here zero zero 20 pixels
162:01 - nice so see how i was right top right
162:04 - nothing yeah left right bottom right and
162:07 - top bottom left that's what i mean there
162:09 - we go now we want the gap to be about 40
162:12 - pixels oops hey so added spacing between
162:14 - all of them and now it grew so it should
162:17 - be almost the size of it let's see let's
162:19 - do a margin dash left 47 nice yeah don't
162:23 - worry about the new no videos that's
162:25 - going to go away once we have videos
162:26 - cool now let's work on the add video
162:28 - button which will just have a width of
162:31 - 45 pixels oops a background color of
162:34 - white and we get the idea with this i
162:36 - don't want to make it ready when i saw
162:37 - it let's do black there we go and now
162:39 - let's fix up this add video button but
162:41 - the color of it should be black not sure
162:44 - if that changed much let's do display
162:45 - flex on this because i want to make sure
162:47 - that it's centered as you can see it's
162:48 - like by default nuts okay justify
162:51 - content center nice and let's align the
162:54 - items okay cool so now it's super center
162:55 - let's do border radius of 0.4 are you
163:00 - there we go awesome okay and again if it
163:02 - doesn't match up with the size that's
163:04 - probably because the icons are small oh
163:07 - did i just delete it localhost three
163:09 - thousand
163:10 - and one okay cool all right for the
163:12 - bottom icon let's do a cursor cursor
163:14 - awesome oops cool so that's our bottom
163:16 - bar let's see if i can click this hey
163:18 - there's our model and one comes up i can
163:20 - hit cancel and it's gone boom boom boom
163:22 - boom all right of course it looks ugly
163:24 - because if you remember we didn't do the
163:26 - css for it so let's go back and get that
163:29 - done so it can look more like this cool
163:31 - so what we're gonna do is go over to
163:34 - joel p upload modal css all right so
163:38 - let's get to work so getting started
163:40 - with this going back to the top let's
163:42 - open that model and this is the before
163:44 - and this should be the after right so as
163:47 - you can see we're gonna need to make a
163:49 - white background again this is probably
163:51 - its own div which we did and we got to
163:54 - style our own custom input once again
163:56 - okay so building off what we learned
163:58 - before for the wrapper let's make the
164:00 - position absolute left 50
164:04 - top should be 50 and it's gonna be a
164:07 - transform effect here transform
164:09 - translate negative 50
164:11 - percent and negative 50
164:14 - as well okay i'm going to give this a z
164:16 - index 10 and can't forget the semicolon
164:19 - background color of white cool it's in
164:22 - the perfect spot all right after that we
164:23 - need the min width and make that min
164:26 - width 20 rem let's make the min height
164:29 - 20 rem as well cool yeah it's obviously
164:31 - not in the right spot but we're gonna
164:33 - get it there border dash radius radius
164:36 - 10 pixels to make it nice and let's add
164:38 - a padding give it a padding of 1.2 rpm
164:41 - display flex and again if i hit save
164:44 - here it's going to put it in a row but
164:46 - we want it back to the column column
164:48 - flex direction justify content center
164:52 - and align cool back over there now we
164:56 - have model buttons next which is the
164:58 - display flex justify content space
165:02 - evenly then we're going to add a margin
165:05 - top 20 pixels and a padding of 10 pixels
165:09 - cool all right for the title if you're
165:10 - not sure what the title is if i give
165:11 - this a background color around that's
165:13 - the title right that's what i do if i'm
165:14 - not sure what i'm targeting but i know
165:16 - what i'm targeting now let's do a font
165:18 - weight of boulder why did i pick control
165:21 - s wax and folder font size was going to
165:24 - be 1.5 rem and for the margin i just
165:28 - want to give it like a 1.5 rem a zero
165:31 - three rem and a zero okay that's looking
165:33 - a lot nicer and let's start working on
165:35 - our input fields so again let's do a
165:37 - background color biscuit right that's
165:39 - the input field there's two of them so
165:41 - it doesn't it looks like a one big box
165:42 - but it's not right with 100 we've seen
165:44 - this before margin dash bottom one rem
165:48 - okay then we have input title 100
165:50 - oops input title font size needs to be
165:54 - one are you one rep and let's add a
165:56 - margin bottom margin bottom can be 0.5
165:59 - already there you go then for the
166:01 - container let's do a display flex a
166:04 - border one pixel hash tag pc f4 let's
166:08 - make it solid nice okay then a border
166:10 - dash radius rem padding is going to be
166:13 - 0.6 and then 0.4 here then we got
166:17 - background color which will be hashtag
166:19 - fa fcfc hey okay cool cool now for input
166:24 - let's give it a flex of one yeah i can
166:25 - only tell uh one of these divs are
166:27 - messed up but let me just fix finish
166:29 - this input styling border is none oops
166:32 - border dash radius okay now it's
166:35 - bothering us i'm gonna save this
166:36 - temporarily yeah this one is round
166:37 - already that doesn't seem right styles
166:40 - oh i see i gave this input container
166:42 - instead of there you go now it's in sync
166:44 - now i can give this a border radius one
166:46 - rem as well yes
166:48 - okay
166:49 - next let's give it a padding let's beef
166:50 - it up a little bit same as the other one
166:52 - and a background color i think i'm
166:54 - styling this wrong this is actually just
166:55 - a flex one right this is border none and
166:58 - there should be no outline that's what
167:00 - i'm missing and the background should be
167:01 - known i was like it doesn't make sense
167:02 - that it has a color there we go that's
167:04 - more get on custom input all right let's
167:06 - dial the button color will be white the
167:09 - padding will be five pixels the border
167:12 - dash radius can be nine pixels color
167:16 - will be hashtag fff and we'll have a
167:19 - transition from 0.2 linear with and then
167:22 - we can do an align
167:24 - items center here okay we can do justify
167:26 - content center display flex font weight
167:31 - of 600 font dash size i'm thinking 0.9
167:36 - rem okay and a margin of 0.5 cool if
167:40 - you're wondering why they're the same
167:41 - thing once we get to the create button
167:43 - and the cancel button they'll start to
167:44 - look a little bit different watch so i
167:45 - do background color and i do this
167:47 - hashtag for e that's create new and the
167:50 - border will be two pixels oops two
167:53 - pixels hashtag fed five five solid and
167:57 - the color of this one shall be right
167:59 - here f e two d by five what should be
168:03 - property value expected color there you
168:05 - go that's more like it canceled the only
168:07 - issue is that the upload new video is
168:10 - not entirely in the right spot that's so
168:12 - strange like we're so close it should be
168:14 - more in the middle that should be taken
168:16 - care of from the transform someone's
168:17 - gonna come back up here transform
168:20 - that's why translate hey there we go so
168:23 - we got the upload model up and running
168:26 - and there it's good to go so that's it
168:29 - we have it right here awesome so while
168:30 - i'm here i just remembered if i go back
168:32 - to main view
168:34 - css i didn't finish the app videos so
168:37 - what i'm going to do is go ahead and
168:39 - finish that so for main view css and
168:43 - remain view css for app videos all i
168:46 - want to do is a position
168:48 - relative a height of 800 pixels a border
168:53 - dash radius 20 pixels 20 pixels zero and
168:57 - margin dash left of 47 pixel okay we
169:01 - also want to overflow
169:03 - scroll here and the width of 80 percent
169:07 - and the max width max width of 500
169:11 - pixels okay and then there's the
169:13 - squirrel
169:14 - snap type and let's do y mandatory hit
169:18 - save and yeah there's that scroll bar
169:20 - that we didn't want so that means this
169:22 - needs to be fixed webkit oh it should be
169:25 - dash webkit there we go i guess that's
169:26 - all i need to do other than that this is
169:29 - looking a lot closer to this cool so
169:32 - that is the upload model css along with
169:35 - finishing the main view finally all
169:37 - right so are you guys ready because that
169:39 - was a lot of front end we got a lot done
169:42 - we got the skinnier slim version of tik
169:44 - tok that's okay but what i really want
169:47 - to see is if i click the upload model
169:49 - will my tick tock upload and can we
169:52 - create a video from our smart contract
169:54 - so let's enjoy that process and let's
169:56 - see if we get any errors and it works
169:58 - first time so what we can do is head
169:59 - over to tick tock right oh i saw it
170:01 - already let's do tick tock clever
170:03 - programmer and i'm going to go ahead and
170:05 - click this and let's click copy video
170:08 - address all right i always like to make
170:09 - sure that it's the bigger version or
170:11 - you'll help yes or something this is the
170:13 - one you want all right so the one you
170:14 - copied from here is the one you want we
170:16 - actually don't need the code and for the
170:18 - description let's put tutorial hell
170:21 - because that is the description let's
170:23 - hit paste and here we go nervous let's
170:25 - hit create new oh yeah password okay
170:28 - okay so let's log in first before we do
170:30 - anything crazy cool so it's prompting me
170:33 - to log in boom this is my account with
170:35 - tiktok let's click this let's hit
170:38 - description tutorial hell and just to
170:40 - make sure this is wallet have solana yes
170:43 - it does this is wallet number two i
170:45 - forgot what username i put for this oh i
170:46 - think it was our nisha that's it yes
170:48 - okay it doesn't say transaction made
170:49 - fail it actually gives us an estimate to
170:52 - approve okay so the model disappeared
170:53 - which is a good sign no major errors so
170:57 - we just gotta wait a bit let's see let's
170:58 - go we have a tick tock right the main
171:01 - thing i want to see is if this is
171:03 - something wow okay longest time that i
171:05 - can imagine we were able to generate a
171:08 - tick tock from our link and we ran it
171:10 - through a smart contract so all of it's
171:12 - working this is not just for show we can
171:15 - actually add videos so cool and of
171:18 - course we can't really comment because
171:19 - we haven't set up that front end but
171:21 - what i want to do now is since we have
171:23 - so much momentum guys let's start
171:25 - building out the rest of the smart
171:27 - contracts so i'm actually really happy
171:28 - that worked on the first try if you're
171:30 - watching this video and you worked the
171:32 - first try without any errors give this
171:34 - video a thumbs up and leave a comment
171:36 - down below saying bear if you say bear
171:38 - in the comments i'll know that you made
171:40 - it up to this point and you're able to
171:42 - create a video and create a user so
171:44 - leave that comment bear give this a
171:45 - thumbs up and let's continue on so
171:47 - coming into the solana playground we
171:50 - have so much momentum guys we've made
171:51 - create user we made create video let's
171:53 - make create comment again we can just
171:56 - use our previous functions as a template
171:58 - right so it's not like you're going in
171:59 - blind each time you make this it should
172:01 - make a little bit more sense so if we
172:03 - want to go ahead and create a comment
172:06 - what we should do is come down below
172:07 - here let's do some spacing and let's say
172:10 - pub let's increase the size of this pub
172:13 - fn create underscore comment all right
172:16 - it's going to take in some parameters
172:18 - and same pattern the context parameter
172:20 - is going to be the data type of context
172:23 - create comment yes a struct that we're
172:26 - going to make in just a bit okay so
172:28 - we're gonna have the text right when we
172:29 - create a comment we should pass in
172:32 - whatever we said as text and that's
172:34 - gonna always be a string cool then we
172:36 - need the commenter name like the person
172:38 - who commented and then we need the
172:40 - commenter url what's their profile
172:43 - picture which is also be a string so
172:45 - those are the only parameters that we're
172:46 - going to need we just need to put in
172:48 - program result again and tell our code
172:51 - what is that result okay so the logic
172:54 - for this instruction is going to be
172:56 - something like we're going to say let
172:58 - video and say and mute count video
173:02 - account right because we want to get the
173:03 - video why do we want to get a video
173:05 - because we want to be directly affecting
173:08 - the video account object because the
173:10 - video count object holds the comments or
173:13 - at least how much number of comments
173:15 - there are and now that's going to equal
173:17 - the and mute because we want to make it
173:19 - mutable and say ctx.accounts.video
173:22 - we're taking the context we're getting
173:25 - the the context of the account and we're
173:27 - getting the video here okay semicolon
173:29 - right next we can say let comment which
173:32 - is going to have data type of and mute
173:34 - again account and comment account so we
173:37 - need to make a stroke for this so keep
173:38 - that in mind for later okay so now we
173:40 - can say equals and mute ctx accounts dot
173:46 - comments or not comments sorry should be
173:48 - comment semicolon i wonder if i can make
173:50 - this smaller can i okay that's the
173:52 - smallest it goes cool so zoom out a bit
173:54 - you can probably see it a lot better and
173:55 - before i write any more logic let's
173:57 - create the structs for it so again if
173:59 - you ever get lost we can use this as a
174:01 - template right so we need to make the
174:03 - create comment struct and also the
174:04 - comment account struct so when creating
174:07 - the create comment struct what are we
174:09 - going to need take a guess it's going to
174:11 - be the hash to derive counts and we're
174:14 - going to add pub struct right after it
174:17 - so that it can inherit the information
174:19 - we need so create comment is going to
174:21 - have info and not that it's going to be
174:23 - this one yep give it that lifetime
174:25 - variable info and we can also do
174:28 - account and put mute and we can say pub
174:31 - video is going to have the account info
174:35 - right of video account okay and then
174:37 - from there let's authenticate the
174:40 - comment account just like we did with
174:41 - video so we can control its behavior
174:45 - here by putting parentheses oops and yes
174:47 - basically something like the suggestion
174:49 - right here we do need init we got to set
174:51 - up the seeds to create that unique hash
174:54 - and to create that in cuny cash we're
174:55 - going to pass in a couple things like b
174:58 - comment dot as underscore ref
175:00 - parentheses comma video key dot as
175:04 - underscore ref comma comma video dot
175:08 - comment underscore count dot 2
175:11 - underscore b underscore bytes i turn it
175:14 - then from there we can do a dot as
175:15 - underscore ref parentheses okie dokie so
175:18 - that's the seeds and usually what we do
175:20 - after writing all of that we add this
175:23 - bump just in case it's not a unique hash
175:25 - we can increment it by 1 or up to 20 i
175:27 - believe so payer is going to be the same
175:30 - as the authority and the space we
175:32 - determine how is this create comment
175:35 - struck right and the size of this is
175:37 - going to be this whatever the size of
175:40 - comment count is no parentheses plus
175:43 - plus the text underscore plus user
175:47 - underscore name score name underscore
175:50 - length plus
175:51 - user underscore
175:53 - url underscore length plus the video
175:57 - underscore url underscore link it's
175:59 - going to need all the information to get
176:02 - an accurate estimate of how much space
176:04 - the comment will create a comment is
176:06 - going to take okay looks pretty good to
176:07 - me hard to see so i'm going to just zoom
176:09 - out one more time just for now then
176:11 - underneath that we can add comment pub
176:14 - comment right here say account say
176:17 - info and it's going to take in the
176:19 - comment account which doesn't exist yet
176:22 - cool let's do a hashtag count mute all
176:25 - right this is the same thing as before
176:27 - right if you remember we had the
176:30 - authority we needed the system program
176:32 - and we needed the clock very standard
176:34 - we're going to use that same information
176:35 - again so look what happens paste same
176:37 - thing authority signer info system
176:39 - program one of the differences this
176:41 - should have system and this is infoclock
176:44 - i believe that's the only difference
176:45 - cool so that is create comment now let's
176:48 - create the comment account struct so to
176:51 - get started with that let's get the
176:52 - account attribute again and say pub
176:54 - struct comment account okay then we can
176:58 - say club authority will be the pub key
177:01 - pub text will be a string and again i
177:04 - don't know if i have to explain this
177:05 - again but the comment account is
177:06 - essentially what the comment object
177:09 - looks like so the authority is always
177:11 - needed but the text is going to be what
177:14 - is the comment string or the text inside
177:16 - of it what information will we need
177:17 - again it's going to be the commenter's
177:20 - name i want that to be a key of this all
177:22 - right you can look at this as like
177:23 - setting up schemas in the database right
177:25 - because this is technically our back end
177:26 - here so this is our commenter url string
177:30 - then we can do a pub index q64
177:33 - unsigned integer then we can do a pub
177:36 - video underscore time and do i 60
177:39 - signage let's put everything correctly
177:42 - awesome so that's it for comments we
177:44 - have the comrade comment struck the
177:47 - common account struct and now i'm feel
177:50 - comfortable explaining the rest of the
177:52 - function yes so this is where we left
177:54 - off and what i wanted to do next is now
177:57 - that we're going to create the comment
177:59 - function we can set values to
178:03 - the keys of the comment account object
178:06 - so what i mean by that if i do
178:07 - comment.authority what should be the
178:09 - value right if you remember from
178:11 - previous examples it's going to be
178:12 - ctx.accounts and then we can get the
178:14 - authority from there by doing that
178:16 - authority method okay now how do i get
178:19 - the text of a comment account we can do
178:22 - comments here right because we have that
178:23 - context and we can do comment dot right
178:26 - scroll down text that's how we get the
178:28 - text comment text equal to text right
178:31 - i'm saying equal to text because that is
178:32 - a parameter that we pass in when i'm
178:35 - making that call okay so i hope that
178:37 - makes sense and let's add these
178:38 - semicolons so then let's continue on
178:40 - let's move faster commenter oh no no
178:43 - comment dot com enter underscore name
178:46 - should be the commenter i'm just going
178:49 - to that's passed in we have the comments
178:51 - dot com mentor underscore url is equal
178:54 - to the commenter underscore url cool
178:57 - another thing i want to keep track of
178:58 - and i believe i did also in this case i
179:00 - forgot we kept track of the index right
179:03 - and video time so let's do that so
179:05 - comment dot index is going to equal
179:08 - video dot comment underscore count and
179:11 - comment dot video underscore time is
179:14 - going to equal c to x counts dot clock
179:17 - unix underscore time snap cool and when
179:20 - we create a comment on a video let's say
179:24 - if i create a comment onto this video
179:25 - how many comments should have should it
179:27 - be plus two plus three right it should
179:29 - be common sense plus one so how do we
179:32 - increase the videos comments or and
179:35 - specifically the video and we have the
179:37 - videos contacts information because of
179:39 - this so i can save video here videos
179:42 - comment i'm accessing that key
179:44 - underscore count right so by default
179:46 - it's zero but if i'm creating a comment
179:49 - plus equals one if you have any basic
179:51 - programming languages this isn't scary
179:54 - so cool and again what do we put when
179:57 - the function is passed or it's true or
180:00 - executed we can say okay boom all right
180:02 - so that is the create comment there's
180:05 - only one more function i want to make
180:07 - which is liking the video and since
180:09 - we're here i'm thinking let's go ahead
180:11 - and make it so that we can just bang out
180:13 - the front end and we'll be done cool so
180:16 - after getting the create comment
180:18 - function down let's go ahead and make
180:20 - the like video one or like i said so
180:22 - where am i where am i so this is where
180:24 - it is pub fn come down here and all we
180:28 - need to do is write pub fn like video at
180:31 - this point you guys are pros at making
180:33 - functions on the solana chain and i'm
180:35 - super proud all right so again it's
180:37 - gonna take in a parameter but luckily if
180:39 - we're just liking a video it's not gonna
180:41 - take much all we need is just the
180:42 - context of
180:44 - like video so that is gonna be a struct
180:46 - yes okay cool so then we can take
180:48 - program result then program result and
180:51 - what programs is going to be is let
180:53 - video right because we want to get the
180:55 - video once again and to get the video we
180:57 - can say mute count video count alright
181:01 - so this tells me i'm grabbing the video
181:04 - account and setting it equal to the the
181:07 - type this variable is going to be the
181:08 - video count and it's going to be equal
181:10 - to mute
181:13 - ctx.accounts.video that's how i get that
181:15 - reference cool so this is the part that
181:17 - i'm excited about it's definitely
181:18 - different than the other functions we've
181:20 - done so far but there's a way to
181:22 - essentially loop through something on
181:24 - rust and there is for loops on rust from
181:27 - what i know but iterating is what we're
181:30 - going to do so we're going to use
181:30 - something called iter which essentially
181:32 - is going to iterate through the accounts
181:34 - and the reason why we're doing that is
181:35 - because it is safer than indexing
181:39 - because with indexing with a for loop
181:41 - there could be a chance that your loop
181:43 - goes out of bounds and that just means
181:45 - outside the number of elements in the
181:47 - array so if there's an array of three
181:49 - right if you do it in array bracket
181:51 - three that's going to be undefined so
181:53 - it's safer than indexing so for loops
181:55 - aren't really used as much i'd say right
181:57 - to my knowledge but mostly they're going
181:59 - to be using something called iter so to
182:01 - iterate we're going to say editor pub
182:03 - key and that's the type and we're going
182:05 - to set it equal to video that people who
182:09 - liked so just to break it down but we're
182:11 - getting the video or the video data from
182:13 - the accounts and what we're doing next
182:15 - is the value at people who liked
182:18 - which is essentially just an array and
182:20 - we're going to loop through them or
182:21 - iterate through them is the better term
182:22 - so from there we want to do let user the
182:26 - liking the video okay and the type is
182:28 - pub key equal ctx and we just have to
182:31 - get the pup key so
182:32 - ctx.accounts.authority.key
182:34 - same time same well same thing that
182:36 - we've done before to get the key cool
182:38 - and from there we can just do a video
182:41 - dot likes plus
182:43 - equals one right because when we like
182:45 - the video we want to increment that like
182:47 - counter by one so if this was two before
182:50 - when i liked it it became three yeah
182:52 - simple enough so that's what we want to
182:54 - set up with this and remember in the
182:56 - video struct there is a key that's
182:59 - people who liked just keeps the array
183:01 - that's this one right here we want to
183:03 - also
183:04 - save who liked the video so that way you
183:06 - can't like it twice so let's dot push
183:09 - right user liking the video so
183:11 - essentially user liking the video is the
183:14 - that account authority who's ever logged
183:16 - in and you're pushing that into that
183:18 - array at that key cool and that's all
183:21 - like video is right so from there we can
183:23 - say okay to confirm and bam and the only
183:26 - struck i believe we need to make for
183:27 - this is just like video struct which
183:29 - shouldn't be too hard so i'm just going
183:31 - to scroll all the way down to the bottom
183:33 - let's find my like video stroke okay
183:35 - coming down to the bottom now we'll do
183:37 - the pub struct right oh and don't forget
183:40 - we also need to of course derive the
183:43 - accounts again and do a publish drop
183:45 - like video and we'll get the info okay
183:48 - then from there let's do the hashtag
183:51 - accounts attribute and remember we want
183:52 - to define that behavior so we say mute
183:55 - you want to be make it changeable and we
183:57 - could say pub video
183:59 - and the pub video is going to be the
184:02 - account
184:03 - info comma video account because the
184:05 - like is
184:06 - associated with the video so we're gonna
184:08 - need it here okay and it's the same
184:10 - thing as before we need that authority
184:11 - again but i'm not gonna copy this one
184:13 - because this one included system we need
184:15 - this guy again same thing boom so system
184:18 - program unchecked account info comma and
184:21 - then info clock yes sir
184:23 - believe it or not that's it for like
184:24 - video alright so that wasn't too bad i
184:26 - think that's a good sign getting the
184:27 - hang of it but still a little confusing
184:29 - for you just making and stuff over and
184:31 - over again like your own anchor projects
184:33 - it's going to make this a lot more easy
184:35 - to understand so let's go ahead and hit
184:36 - build let's see any errors that come up
184:38 - i'm expecting some i think i see why i
184:41 - copy pasted this and just added system
184:43 - but in reality this shouldn't care about
184:45 - unchecked account this should just be
184:47 - program info system there we go that was
184:49 - my fault guys i thought i could just
184:50 - simply copy paste it but i could not so
184:52 - let's build this again and now it has a
184:54 - problem with the seeds on 203 well i
184:57 - thought there would be a lot more but
184:58 - this isn't bad so the as ref i'm
185:00 - assuming that's because it should be
185:02 - more like this because it's a method
185:04 - okay 104 can't find pub key in this
185:07 - scope that's interesting okay what if i
185:11 - remove this
185:13 - and not define the type would be mad at
185:15 - me oh okay so no warnings but i'm not
185:18 - sure if that's gonna work
185:19 - but the only way to find out is just to
185:21 - actually test it so no warnings that's a
185:23 - good sign with that that's all the
185:26 - functions inside our smart contract the
185:28 - only time we'll come back here is if
185:29 - there's any errors but again let's
185:32 - update our smart contract by upgrading
185:34 - it and let's see i have 6.5 so hopefully
185:36 - that's enough it is pretty big now so
185:38 - it's deploying and as it's deploying
185:40 - there are the two things that we need to
185:42 - check now is to are we able to create
185:45 - comments because that's what we added
185:46 - and can we like the video a
185:49 - deployment successful so what's the
185:51 - process for upgrading your new upgraded
185:54 - smart contract onto your front end if
185:56 - you remember i go in here and let's
185:59 - export the new program idl right so now
186:01 - it's idl5 let's go ahead and open let's
186:04 - go to this vs code let's click on this
186:07 - so hopefully it opens up to there see
186:09 - i'm gonna have to open it up in my
186:10 - downloads okay there it is idl5 and boom
186:13 - it's really small so let's increase that
186:15 - size let's do an alt c here and now it
186:17 - looks hideous but let's see if our new
186:20 - instructions are here so there's i see
186:22 - create user i see create video do we
186:25 - have create comment yes we do do we have
186:27 - like video yes we do so this is our
186:29 - latest ideal let's control c right and
186:32 - let's go click on tick tock clone json
186:34 - this is our old idl from our last
186:37 - program before we updated it and it
186:38 - doesn't have create comment or like
186:40 - video so we want to basically erase this
186:43 - and paste it so now because of the way
186:45 - we set it up in the beginning it's gonna
186:47 - be updated no need to change any code on
186:49 - the front end this is all you have to do
186:51 - so that's pretty simple to update your
186:53 - program and now all we need to do next
186:55 - is set up the front end for create
186:57 - comments and like in the video so the
187:00 - first thing i want to tackle back into
187:02 - our front end is the sidebar so let me
187:05 - just double check in main view here we
187:07 - have sidebar where is the sidebar oh it
187:10 - might be in video.js actually yep we
187:13 - have a sidebar and a footer to carry
187:15 - what we're gonna do is let's set it up
187:17 - okay so just to quickly recap in the
187:18 - video.js we are passing so many things
187:21 - that we're gonna need for the video and
187:23 - we're going to need to pass some of that
187:25 - into sidebar as well so for sidebar
187:28 - let's pass in all those props that we
187:30 - need which essentially is just address
187:32 - we have chairs on show comments and then
187:36 - show comments all of these are coming
187:38 - from our used tick tock hook if you
187:41 - remember we set up all the functions of
187:43 - getting comments of liking the video we
187:46 - just didn't add that functionality to
187:48 - call it from our front end just yet but
187:50 - for now i'm just going to set up the jsx
187:52 - of each component then we can go back
187:54 - and do that sounds like a plan awesome
187:55 - we're almost done guys so let's do a
187:57 - like video then we do index and then
188:00 - we'll set that to index the index that's
188:02 - in curly brackets okay and then let's do
188:04 - the likes
188:06 - address which will be the same name
188:08 - likes address okay for messages it's
188:11 - going to be comment and bam that's the
188:13 - sidebar right while we're here let's
188:15 - just set up the props for footer i'm not
188:17 - going to do anything just yet but i do
188:19 - want to set up the props oh and i just
188:21 - realized i think it might be pretty
188:22 - small so for footer you can have channel
188:25 - is equal to channel which is just a
188:28 - creator name prescription is equal to
188:30 - description and there's also something
188:33 - that we have song and that's just gonna
188:35 - be uh index if you did want to pass in
188:37 - the actual song name you'd have to save
188:40 - as well okay so that's it for the footer
188:42 - we can also do comments right since
188:44 - we're here for comments there is
188:46 - something called on hide where we can
188:48 - now hide comments there it is the put
188:50 - the index in here as well you can put
188:52 - the address here create comment get
188:55 - comments and a comment count and that's
188:59 - going to be it cool so i'm passing props
189:00 - now so when we go back around to add
189:02 - them all later but the main focus right
189:04 - now is going to be the sidebar so with
189:06 - that said if i go into the sidebar side
189:10 - do i not have a sidebar that doesn't
189:11 - seem right oh yeah i guess i never did
189:13 - make a sidebar component because they
189:15 - were commented out cool so let's make
189:17 - those components so i believe that was
189:19 - sidebar dot js okay and there was also
189:23 - footer since i commented that out as
189:24 - well okay trying to think what was
189:26 - footer again not too sure but we'll
189:28 - cross that bridge when we get to it this
189:29 - is side and on video we should be
189:31 - importing all those things so import
189:33 - sidebar cool import nice okay so
189:37 - shouldn't have any errors of like
189:38 - sidebar being undefined since we made
189:40 - this sidebar let's also make the css
189:43 - file for it so that's going to be
189:46 - sidebar.module.css cool and what else
189:49 - what else
189:50 - yeah we could just set up the css for it
189:53 - like the skeleton is just going to be
189:54 - sidebar and sidebar button that's it for
189:58 - the skeleton for now let's go on to here
190:02 - and let's just take a look at our app
190:03 - it's been a while see enter password i
190:05 - want to see what lance is my lance
190:08 - account which is wallet number one and
190:09 - if we in a new wallet we have to refresh
190:12 - because now i'm signed in as myself for
190:14 - sure because i'm in wallet number one
190:15 - and again no sidebar is visible right
190:18 - now then let's get to work on that so i
190:20 - guess the first thing we should do is
190:23 - sidebar module let's actually set up
190:26 - some things for the sidebar itself if i
190:28 - do position
190:29 - absolute and top 50 percent i just want
190:33 - to make it make sure it's visible right
190:36 - 10 pixels and color white okay so let's
190:39 - just save that for now we'll worry about
190:41 - sidebar button later okay not visible
190:43 - yet probably because we're going to need
190:45 - to
190:46 - put in the name of the div so let's
190:48 - first import that import styles from
190:53 - dot sidebar.module.css class name is the
190:55 - style sidebar i don't know why that's
190:57 - cap hey there it is that's in the right
190:59 - spot too the sidebar should be just
191:01 - about there and then just drop down as
191:03 - well okay awesome so let's make the rest
191:06 - of the things that we're going to need
191:08 - and i can already tell you that there is
191:10 - the icons right what if i go back to
191:12 - here oops i got too excited there you go
191:14 - now i should be able to click my pen i
191:16 - need to get these icons right here and
191:19 - one way to get them is actually with
191:20 - material ui once again okay and i
191:22 - already have them picked out for you you
191:24 - just need to write the same ones that i
191:25 - do so
191:27 - going back to the code you can do the
191:29 - split screen style okay oof all right
191:31 - that's a lot better so let me get the
191:33 - react icons and that's going to be right
191:35 - here so we have favorite icon the
191:37 - message icon and the share icon yeah
191:41 - okay and then from here there's some
191:43 - hooks that i want to use in sidebar so
191:45 - let's do this use effect and use state
191:48 - once again and while we're importing
191:50 - let's get use wallet at this point you
191:51 - guys should know where this is from
191:53 - adapter react cool and we passed a
191:56 - couple things into sidebar so let's
191:57 - destructure and that is the following
192:00 - address likes shares messages on show
192:04 - comments like video
192:06 - index
192:08 - likes address cool now in terms of
192:10 - states all right we can also set that up
192:12 - here i'm going to do a const con use
192:14 - state and const wallet is going to equal
192:18 - that hook for the use state the initial
192:20 - state is false and the variable or like
192:22 - the name of the state will be light and
192:25 - set because if we like it the heart
192:28 - should turn red yeah if we unlock if
192:30 - it's not liked or not like that at all
192:32 - it should be false so there's no toggle
192:34 - like button just if it's liked or not
192:36 - cool so remember how you passed in a
192:37 - like address we want to actually want to
192:39 - loop through that and double check if we
192:42 - liked it or not so again i'm using use
192:44 - effect here to do just that so if
192:47 - wallet.connected which is why we
192:49 - imported wallet if it's connected let's
192:51 - actually loop through the address likes
192:53 - address dot for each and it's just gonna
192:56 - be an address here cool now if as we're
193:00 - looping through the addresses if the
193:02 - wallet dot public key right dot 2 base
193:05 - 58 to format it is equal equal equal to
193:08 - address dot 2 base 58 essentially if i'm
193:11 - looping through and i find that the user
193:14 - that's logged in is matched to one of
193:15 - the people that liked the video already
193:18 - right then we can set
193:20 - liked to true because if it is true then
193:23 - we should see the red heart cool nice so
193:26 - that's the if statement here and i don't
193:28 - want this to run every time there's a
193:29 - change right every time we're fetching
193:31 - or changing the state of something we
193:32 - want this to run when the wallet changes
193:34 - or when the likes address changes which
193:37 - makes sense to me cool okay so from
193:40 - there let's just work on jsx in that
193:42 - case then we need to write the div with
193:44 - another class name this one is
193:45 - styles.sidebar
193:47 - button okay then like question mark all
193:50 - right turn every statement here if it is
193:52 - it is true then the favorite icon right
193:56 - favorite icon the font size needs to be
193:59 - large and we're gonna have some inline
194:02 - styling here where the fill will be red
194:05 - so that's how we make sure that
194:06 - something is light we're gonna color
194:08 - this icon red and the stroke is also red
194:10 - okay cool now if set is false which is
194:14 - by default right what should happen is
194:16 - we have the favorite icon still the
194:19 - difference is the font size is still
194:21 - large but right we're not going to add
194:23 - any styling because it's not doesn't
194:25 - have to be red or anything it should be
194:26 - just clear as is but we will add it on
194:28 - click because if it's not liked we
194:30 - should have the functionality of liking
194:32 - it and if you remember we have used tick
194:34 - tock and we passed down that function
194:36 - here to like the video and we pass in is
194:39 - liking the video that's why i put
194:40 - address here okay because if you
194:42 - remember it's kind of hard to see but
194:44 - going down to our instructions like
194:47 - video takes in an address okay or rather
194:51 - yet this like video is taking in the
194:53 - struck like video and in the front end
194:55 - we're gonna make a function that is also
194:56 - that is like video all right so in
194:58 - reality what i actually mean to say is
195:00 - this like video is coming from this
195:02 - right here yeah remember it's the
195:04 - function to call it like video from
195:05 - smart contract and it takes in cool so i
195:07 - hope that cleared it up just going back
195:09 - into the sidebar awesome so we have all
195:12 - of that stuff oh yeah there's extra
195:14 - parentheses here there you go then next
195:16 - to it i want like the likes it should
195:18 - show the number of likes so that's why
195:20 - we have this right here then it should
195:22 - be closing div and then in between these
195:24 - two we'll have another div this one will
195:25 - be styles dot side bar button and here
195:29 - we can have an on click of show comments
195:32 - so what that tells me is this is the
195:35 - button that we pressed to look at the or
195:36 - just bring up that component is that how
195:38 - i spelled it let me just double check
195:40 - yeah the suggestion confirms it you just
195:42 - all see this not gonna make it any
195:43 - better oops control minus cool so i know
195:46 - that's a little small i just needed to
195:47 - see just a little bit for now yeah so
195:49 - this should go out here and we should
195:52 - close it off nice so now i feel
195:54 - comfortable zooming back in for you guys
195:56 - awesome so now we can just get the
195:57 - message icon that we imported give it
196:00 - font size large to match with the heart
196:03 - and
196:04 - we can give the messages here okay so
196:07 - it's closing div opening div class name
196:09 - and this is also styles that sidebar
196:11 - button it's going to have share icon
196:14 - font size large also and it should show
196:17 - me the shares okay and then closing div
196:19 - closing div sidebar boom so let's save
196:21 - it's been a while let's take a look oh
196:22 - on show comment is not defined so that's
196:25 - on show comments wait a second oh
196:28 - comments cool let's refresh connect keep
196:31 - signing me out boom hey there we go that
196:33 - makes sense okay for some reason we're
196:35 - not seeing the oh no the share icon is
196:37 - in there see cool and the reason why it
196:39 - looks a little wonky is because the
196:41 - styling isn't all the way there and we
196:43 - don't have this stuff set up right here
196:45 - you can x this guy out cool but in that
196:48 - case this is it for the sidebar okay i
196:51 - did speak too soon because i did want to
196:53 - finish up the sidebar css because i
196:56 - believe i didn't finish that just yet
196:57 - awesome so yeah it looks like that but
197:00 - if we have this sidebar here let's
197:02 - change the padding to 20 pixels there we
197:05 - go and let's do a text align center
197:08 - there we go so that looks a lot better
197:10 - now of course it is a little bit
197:11 - skinnier but it might be fixed once we
197:13 - add in that footer so now the sidebar is
197:16 - complete one thing we can do while we're
197:18 - here is it's been a while since we
197:20 - pushed so let's go ahead and get status
197:23 - cool so this is all the changes we've
197:25 - made since the last time i pushed it's a
197:26 - lot once again but let's just open up
197:28 - our netlife again so it's tick tock
197:30 - solana i think i see it boom test one
197:33 - two three four boom and let's see did i
197:36 - not have an account with this guy oh
197:37 - it's wallet one okay oh oh i know it's
197:40 - because i haven't it's been a while
197:41 - since i uploaded this all right so we're
197:43 - going to use git i'll get add dot to add
197:46 - those changes and you can view those
197:47 - right hit commit add create video
197:51 - and more front end all right that's the
197:54 - best way i could describe that so let's
197:55 - do git push and netfly will redeploy our
197:59 - live app for us so once again so let's
198:00 - go to nullify just watch it grow okay
198:03 - and then go to sites tick tock solana
198:05 - and there it is building awesome so site
198:08 - is live let's go ahead and go back to
198:10 - this and we should be able to click this
198:12 - link again hey and it automatically
198:14 - logged me in because my wallet is
198:15 - connected and i already have an account
198:17 - look at that it's just like our local
198:19 - host was cool so now our live site is
198:22 - updated so if your friends were to look
198:23 - at this link they would see those
198:25 - changes awesome so now that it's pushed
198:28 - i think the next thing to do is let's
198:30 - set up that footer so i'm just going to
198:32 - go in here bring this guy down oh and
198:34 - just to make sure we can see stuff now
198:36 - that will fight dev connects this guy
198:37 - out and since it's going to generate a
198:39 - new one with texas cool let's do the
198:41 - footer so with the footer it has a
198:43 - little bit more stuff than the sidebar
198:45 - so to get started i'm thinking we should
198:48 - just get the css file out of the way so
198:50 - if i do this go to styles new file
198:53 - footer.module.css
198:56 - cool and let's import that now import
198:58 - styles styles nice okay so let's set up
199:01 - the skeleton so that we can just
199:03 - visualize me styling the footer a lot
199:05 - easier cool so that footer is the class
199:08 - that i want to set up there's a dot
199:09 - footer text dot footer text p dot footer
199:14 - record there's also a div that i'm
199:16 - seeing footer icon and dot footer ticker
199:20 - oh and this one's special it's like
199:22 - ticker okay there's also a container or
199:24 - a class called footer text and i believe
199:28 - it's actually underscore there is dot
199:30 - footer ticker h1 and there are some key
199:34 - frames on here right because looking at
199:36 - the finished product you see the
199:37 - spinning record to do that we have some
199:39 - keyframes or essentially just animations
199:42 - to spin that record so to get started
199:44 - with keyframes you just say add
199:45 - keyframes and press tab there's like a
199:47 - little guide here with the identifier
199:49 - for us it's going to be spin
199:51 - the record cool so then we can say from
199:54 - transform rotate 0 degrees to transform
200:00 - rotate 360 because that means it's going
200:02 - to just do a full rotation and then once
200:04 - it reaches zero get back to zero it's
200:05 - gonna do it again okay awesome so i will
200:07 - finish that but that's gonna be the
200:09 - skeleton of the footer css coming back
200:11 - to here all right i'm gonna go ahead and
200:14 - start coding what i need so i will need
200:16 - the music note icon which is that record
200:20 - so i'll just paste that on here no state
200:22 - at all but we are gonna use an image
200:24 - here so let's do import image from next
200:26 - image and i'm sorry it's not music note
200:28 - icon isn't the spinning record that's
200:30 - actually something else cool we got the
200:32 - styles here and now let's accept the
200:34 - props that footer passes down and let me
200:36 - just remind myself what that
200:38 - i think it was in video yes so just
200:40 - three things description song and
200:42 - channel okay so destructuring this let's
200:45 - get channel with two ends description
200:47 - and song okay cool now when it comes to
200:50 - the jsx let's give this guy a beautiful
200:53 - name i'm thinking we'll call her
200:56 - style.footer
200:57 - okay then within that i'm going to do
200:59 - class name styles order text and we're
201:01 - basically using all the classes that i
201:03 - defined in the css okay cool so for h3
201:06 - we can say at the channel name which is
201:09 - essentially just the username and
201:10 - underneath is the description so for
201:12 - this video we should see tutorialhelp as
201:14 - a description if it's on there nope now
201:16 - it's working and underneath that
201:18 - underneath that p tag we have a div
201:19 - which i'll call styles.footer starts up
201:22 - for the ticker and here we'll use the
201:24 - music note i can give that a class name
201:26 - of
201:27 - styles.folder and we have a p tag which
201:29 - just holds some spacing of and nbsp i'm
201:33 - gonna do this two more times and we'll
201:35 - have the song right here which isn't
201:37 - really going to show anything so div
201:39 - then opening did for this style name
201:40 - we'll have the dot footer record and
201:43 - remember we we have it set up so we can
201:45 - have an image so let's use that image
201:47 - and it's going to have a source i have
201:49 - the link for you guys one second it's
201:50 - going to be this right here the static
201:53 - dot noun project let me do alt static
201:56 - dot now the noun project dot com
201:59 - slash png and then these numbers.png so
202:01 - you can pause that take the image or you
202:03 - might be able to find it in the next
202:04 - config as well and let's give it an alt
202:07 - final record so this is the spinny thing
202:09 - so the width is going to be 50 and the
202:12 - height will also be 50. okay export
202:15 - default footer that looks pretty good to
202:17 - me and don't really see much because let
202:20 - me refresh yeah don't really see much
202:22 - but maybe if i add styling you can see
202:23 - it a lot better all right let's get to
202:25 - work so for dot footer position i'm
202:27 - gonna make relative and color shall be
202:30 - white okay the bottom will be 150 pixels
202:33 - hey
202:34 - oh cool am i on wallet too should be in
202:36 - one one oh i registered as their nisha
202:38 - yeah and one i just totally forgot cool
202:41 - so shout out my student anisha so margin
202:44 - left 40 pixels okay then we'll do
202:46 - display flex awesome then we're going to
202:48 - do a flex
202:50 - one cool so we're getting there and it
202:51 - says zero because that's the index so
202:53 - for this class i'm targeting let's do a
202:56 - padding bottom let's make that 20 pixels
202:58 - okay cool that added some spacing now
203:00 - for the record here is where we can
203:02 - include the animation if i press tab uh
203:04 - all the little parameters can help us
203:06 - right here but we just need the name
203:08 - which is spin the record which will then
203:11 - get those keyframes we want to say
203:13 - infinite because we want to keep it
203:14 - going the time it takes to make that
203:16 - rotation five seconds and let's play
203:18 - linear look at that i'm gonna go just
203:20 - spin it around there let's put the
203:22 - height 50 pixels cool so once you have
203:24 - the height it made it spin in place now
203:26 - the filter invert one nice position
203:30 - absolute oh that's okay and we're gonna
203:33 - get it back to the right spot in a
203:34 - second and let's do a right 20 pixels
203:37 - there you go now it's aligned i like
203:38 - that so for the footer icon i think it's
203:41 - position absolute no that's relative but
203:43 - let's be absolute nice so now for the
203:46 - ticker thing let's have a height of fit
203:48 - content okay and the margin left 30
203:52 - pixels okay and a width of 60
203:56 - cool and just make sure that i have
203:58 - those classes
203:59 - footer ticker okay oh okay so it's just
204:02 - yeah i don't really have a dot ticker
204:04 - okay that's why i didn't really do much
204:05 - but i'm sure this will do something i
204:08 - think i have footer text right
204:09 - underscore oh i don't have footer text
204:11 - oh yeah i guess there is instead of
204:12 - missing dibs there's divs i don't really
204:14 - need because it does look fine and on
204:16 - its own okay we do we can do this one i
204:19 - have padding bottom here but i forgot
204:20 - why i coded this up initially that
204:23 - changing no not really okay i might have
204:25 - removed this so if i do a dot footer
204:27 - ticker h1 let's do a padding dash top
204:30 - seven pixels cool again nothing but
204:32 - other than that this looks pretty good
204:33 - so far yep i'm pretty happy with that so
204:35 - there you go once the footer all said
204:37 - and done okay so at this point i'd say
204:39 - we have everything we need to get like
204:41 - video working the only thing that we do
204:43 - have to do is go to the use tick tock
204:46 - hook and set it up so use tick tock all
204:49 - right so remember this like video
204:50 - everything should be hooked up we just
204:52 - need to add the functionality so with
204:54 - like video i want to add a console log
204:56 - here that's just going to say video
204:58 - light video has been light cool so if
204:59 - you see that console log that means just
205:01 - tells us the function has been running
205:03 - what we're going to need to do is make
205:04 - const x again and a weight program we
205:08 - got be using this from get program rpc
205:11 - dot the name of the instruction which is
205:14 - like video i'm getting this like video
205:16 - here from our solana playground because
205:18 - that's the name of my function pretty
205:19 - sure unless it's like underscore oh it
205:22 - is like underscore video it's good catch
205:24 - so like underscore video okay let's have
205:26 - a parenthesis here and curly brackets
205:28 - because this is going to take in
205:30 - accounts okay and for the key of
205:32 - accounts the video is going to be new
205:34 - public key address and for the authority
205:37 - we know how to get the authority it's
205:38 - going to from from the front end to my
205:40 - wallet.public key with the default
205:43 - accounts okay cool all right i guess
205:45 - that's pretty much it that's pretty much
205:46 - it for the like video i guess we can
205:49 - just console.log tx here so that we know
205:51 - it did go through but because we set up
205:53 - the front end we should see the red
205:55 - heart so again it always makes me
205:57 - nervous because now we're gonna see if
205:59 - our smart contract is working so let's
206:01 - see if it works first try of course that
206:03 - like video is not a function okay let's
206:05 - do like video let me just check that
206:08 - idea that's how i can confirm for sure
206:11 - see
206:11 - create user i see create create comment
206:15 - oh okay it is like video so it took out
206:18 - that underscore not this okay awesome so
206:20 - i'm just going crazy let's head back to
206:22 - that use tick tock hook i think i pasted
206:24 - something boom so let's save this it's
206:26 - like video now i'm just going to hit
206:28 - refresh just to smoothen the deal let's
206:31 - do the whole process let's go to wallet
206:33 - refresh all right okay that's good to
206:35 - know tick tocks dot length on main view
206:38 - so let's go to main view it's a good
206:40 - thing we did this guys i don't want to
206:41 - print that what i did want to do was
206:42 - this tick tocks dot length let's try to
206:45 - refresh that again nice okay so now
206:48 - lance wants to upload a video let's go
206:50 - back to tick tock and get just going to
206:51 - take this one copy video address just to
206:54 - double check that's really loud and now
206:56 - let's go back to here cool so
206:59 - to confirm this 888 is the one that we
207:01 - made if i do this i forgot what the name
207:03 - of this starting out with blockchain
207:05 - sure starting out with blockchain let's
207:07 - put the video url in there create new
207:10 - we actually have the estimated soul
207:12 - proof takes a second let's see if this
207:14 - refresh button works
207:16 - so if i click this video it's there and
207:18 - that's me there's my account that's
207:19 - there so let's say i'm looking at our
207:21 - niches let's see if i can like the video
207:23 - come on no balance charges found so
207:26 - that's entry i hit approve the tx
207:28 - console log oh video liked and the
207:30 - console logged huh i guess we can really
207:32 - tell once i refresh because it should
207:34 - set this to true let's go we can like
207:36 - tick tocks awesome all right if i click
207:38 - this again i can't like it because i
207:40 - already did all right so that's awesome
207:42 - so lance gave a like to this tick tock i
207:45 - could give a like to the next talk oh
207:47 - what okay that's interesting this
207:49 - shouldn't be red as well that is a
207:51 - problem okay so it went away when i
207:53 - press refresh if i click this oh okay so
207:56 - i can like the video for some reason it
207:58 - also showed up there but it fixed itself
208:00 - once i refreshed it a few times yeah
208:02 - cool so that makes sense i like this
208:03 - video i did not like this one but i
208:06 - can't alright if i switch to anisha
208:08 - let's see to wallet number two let's see
208:10 - if that stays hey look at that one that
208:12 - was me all right number one but it's not
208:14 - red so but if i do like it and approve
208:17 - it's gonna take a little bit hey
208:19 - two likes all right we're going up we're
208:21 - going we're getting closer and closer to
208:22 - getting viral here all right so we got
208:24 - two likes now and the like feature is
208:26 - working beautifully so let me just log
208:29 - on to my account and refresh so we can
208:31 - see that's two and it shows that i like
208:33 - and this should still be zero awesome so
208:35 - it looks pretty good to me i think what
208:37 - i'll do next is let's create the
208:39 - comments model that comes up right
208:42 - because if you look here if i click on
208:43 - this little icon there it is there's the
208:45 - comments and right that's the component
208:48 - on itself but once we finish that guys
208:50 - we're pretty much done with the project
208:51 - so how exciting is that we are almost
208:53 - done with the build if you're looking at
208:55 - me and you've made it this far you're
208:57 - crushing it right now so let's set up
209:00 - the front end now okay okay
209:02 - let's move on to our next component
209:05 - right it's gonna be the comments one
209:07 - which we already set up but we do need
209:09 - to set up the
209:12 - comments.module.css right now cool so
209:14 - get rid of that let's get the skeleton
209:17 - out of the way so we have our usual
209:18 - wrapper a class called comments header
209:21 - the close button see what else do i have
209:24 - here after the close button we have some
209:25 - more keyframes for the wrapper and
209:27 - actually call it wrapper and on the
209:29 - keyframes i'll just set it up now it's
209:31 - gonna be
209:32 - zero percent
209:34 - the zero percent the opacity will be
209:36 - zero and then we want to transform
209:39 - y make it move up nope not translate and
209:42 - let's make it go up a hundred percent
209:44 - and when it's 100
209:46 - i want the opacity to just be one
209:48 - visible not visible i always mix up the
209:50 - two transform translate
209:53 - y make it go down okay cool so that's
209:55 - the keyframes for the wrapper okay from
209:57 - here let's do that button and we have a
210:00 - comment input wrapper and then we do
210:03 - this i'm targeting all the inputs in the
210:05 - comment input wrapper which should just
210:07 - be one in this case and if i hit save
210:09 - the skeleton is there we go to comments
210:11 - let's import that guy styles from styles
210:15 - comments.module.css
210:17 - beautiful
210:19 - okay awesome so there are some states
210:21 - that we will use here so let me just
210:23 - grab that real quick let's say use state
210:26 - use effect okay that should be it for
210:28 - now and just refresh my memory oops what
210:32 - are we passing into comments can you
210:34 - tell me guys did you say it we are
210:36 - passing
210:37 - so a couple things so let's just
210:39 - destructure those guys so i believe it's
210:41 - address on hide we have create comment
210:45 - index get comments and comment count
210:49 - cool and for our states on the menu
210:52 - today we have const equals use date to
210:55 - set up our use date and it's going to be
210:57 - comments right so this state is going to
210:59 - hold all our comments and we're going to
211:02 - have that set comments here too so the
211:04 - idea is with using tick tock we're going
211:05 - to get all the comments associated with
211:08 - that video and with that same hook we're
211:10 - going to set those comments into the
211:12 - state so we can put it into our front
211:14 - end that's the idea so the initial state
211:16 - will be empty array then we can say
211:18 - const new comment set new comment is
211:22 - equal to use date okay awesome okay cool
211:26 - so next thing i want to do is let's make
211:28 - a function here that's actually going to
211:30 - get the comments so getting
211:33 - comments this will be an asynchronous
211:35 - function and it's going to do let
211:37 - comments equals away get comments we've
211:40 - done this something similar to this a
211:42 - little bit ago and we'll get comment
211:44 - count as well we're going to pass that
211:45 - in to get comments because where is get
211:47 - comments coming from as i was mentioning
211:49 - before it should be from use tik tok get
211:52 - comments right you function to fetch the
211:54 - comments from the comment account in
211:56 - smart contract which we set up so that's
211:57 - what we're doing here on comments okay
212:00 - then we're going to do a comments dot
212:02 - sort all right we're going to sort all
212:03 - the comments so it always shows up in
212:05 - order and we put in a b and we're gonna
212:08 - set it so that b is the video time.2
212:11 - number minus a
212:14 - dot video time to number as well yeah
212:17 - that's about right then we're going to
212:18 - do set comments to those sorted comments
212:22 - awesome so we're basically fetching all
212:23 - the comments and it might not come
212:25 - sorted when we get them so we're going
212:27 - to sort them to make sure and then set
212:29 - it to that state but again this is just
212:31 - the function when do we call this that's
212:34 - where our use effect comes in so let's
212:35 - call use effect again and the key here
212:37 - is what do you what is the function that
212:39 - you want to do getting comments and when
212:41 - do you want to when do you want to run
212:43 - it whenever the index changes right it's
212:46 - going to be once when it loads and then
212:48 - whenever the index gets updated cool so
212:51 - there's another function here that's
212:52 - going to be called reply clicked also
212:55 - asynchronous and this one's going to
212:57 - await create comment right and remember
213:00 - create comment is also in use tick tock
213:03 - and that one actually calls the create
213:06 - comment from the smart contract okay so
213:09 - it does take in some parameters like the
213:11 - address and the
213:13 - comment account wait no it doesn't i
213:15 - lied does not take the address wait it
213:18 - does take the comment i was just looking
213:19 - at the wrong comment count and it does
213:21 - take new comment that's the only
213:22 - difference between the two functions and
213:24 - then after that set the new comment to
213:26 - clear right because there's going to be
213:28 - a little input here where you can write
213:29 - the comment so that tells me we're gonna
213:31 - have it unchanged somewhere that's what
213:33 - this state is for okay so that's where
213:34 - pi clicked and this should function
213:37 - should run when i click the reply button
213:39 - or the add comment button whatever you
213:41 - want okay so jsx time now we have class
213:44 - name styles.wrapper
213:46 - and within that one we'll have another
213:48 - div called class name style dot comments
213:51 - header okay then we have a p tag called
213:54 - comment right and then just say how many
213:56 - comments we see like three comments four
213:58 - comments all right then we'll have
214:00 - another p tag and just to be curious i
214:02 - wonder if this works already ah okay i
214:03 - see comments dot sort oh it's okay
214:06 - because we didn't fetch any comments so
214:08 - this can't possibly so it's not gonna
214:10 - work just yet let me just finish this
214:11 - out after this it will have a class name
214:14 - which is style.close button and yeah
214:17 - this is part of the reason why it's not
214:18 - working because it's going to be on
214:19 - click on hi is there an unhide yes there
214:22 - is okay cool okay and here there's going
214:25 - to be end times let's close the p tag
214:28 - right here that makes more sense okay so
214:30 - then it should be closing div and here
214:32 - this is something interesting once we
214:34 - get that comments array all right let me
214:36 - see comments is
214:37 - oh yeah we're getting it from this once
214:39 - we get that comments array we can say
214:42 - comments dot map comment all right we're
214:44 - gonna map through each comment and for
214:47 - every single comment in the array i want
214:49 - to make a component called comment card
214:53 - so you might be wondering lance what is
214:54 - comic card comic card john is going to
214:58 - be this thing each individual thing
215:01 - right here is considered a comic card
215:03 - and we're just making that component so
215:05 - that we can reuse it without making it
215:07 - over and over right does that make sense
215:09 - so what we're going to do now
215:11 - all right is make that common card so
215:13 - here this is probably our last component
215:15 - right give it up for our last component
215:16 - guys we're already here so common
215:18 - card.js rafc e boom common card cool and
215:22 - since we're here this guy is going to
215:23 - take some props which is going to be the
215:25 - key which will be yeah so every like
215:28 - prop or component needs a key so let's
215:31 - do index.2 number all right so there's
215:34 - already an index associated with it
215:35 - let's just make that the key so that's
215:37 - what i'm saying here the username so we
215:39 - can get the username in here it's going
215:40 - to be equal to comment
215:42 - dot commenter name the only errors i can
215:45 - foresee is either i spelled something
215:47 - wrong or i forgot something so let's
215:49 - take a look at that
215:51 - that text avatar and if i had to put
215:53 - money on it it's probably something to
215:54 - comment with all these m's comment dot
215:57 - commenter url right for the avatar then
216:00 - there's a time stamp which is going to
216:02 - be comment video time videotime.2 number
216:06 - yeah that's it for common card cool
216:09 - closing parentheses and then all these
216:10 - guys and then this is where we should
216:12 - have the comment input wrapper yeah and
216:14 - i already know that when i was messing
216:16 - with this looks funny when there's no
216:18 - comments but when there's more it looks
216:19 - a lot nicer okay this input is
216:21 - self-closing the type will equal text
216:24 - there's an on change on here right
216:26 - remember we have predicted that how not
216:28 - predicted i knew but based on the name
216:30 - that i was writing you guys can probably
216:32 - infer that there's a set new comment
216:35 - here on change and they're going to need
216:37 - to be e and how do we grab that input
216:39 - field
216:40 - e.target.value again you could use that
216:42 - for anything you need if you want to
216:43 - grab an input so value is going to be
216:45 - equal to whatever a new comment is all
216:47 - right and placeholder it's that nice
216:50 - little message that says leave comment
216:52 - little cta right there and button class
216:55 - name oops let me style that button oops
216:58 - see daisy oh okay i hope that's a lot
217:01 - easier to see you can take a moment to
217:02 - pause and see what i wrote so far okay
217:04 - cool so now we gotta on click to here
217:07 - because this is where the reply click
217:10 - will be called right that button and
217:12 - we'll just have a little reply here cool
217:13 - i know we don't have the get comments
217:15 - functionality yet cool so to get this
217:18 - annoying error out of the way we need to
217:20 - go into use tick tock and let's get
217:23 - create comment up does xs app and for
217:26 - create comment this is what we'll do
217:27 - we'll say let comment underscore pda
217:30 - equal to await anchor dot web 3 dot
217:34 - capital public key dot find program
217:38 - address parentheses right inside those
217:41 - parentheses again you might have seen
217:43 - this might be familiar to you that's
217:44 - because it is same kind of template that
217:46 - we're going to need this time instead of
217:48 - video we're doing comment and the new
217:50 - public key pass in address dot to buffer
217:54 - then we'll do a new b and u b n count oh
217:59 - i know what comma here new n account dot
218:02 - two array
218:04 - like method and let's pass in buffer yep
218:08 - be eight okay cool and just add a comma
218:11 - and i'll just put in the program id as
218:13 - well program that cool so that is the
218:16 - argument of find program address then
218:18 - here if user detail which we should have
218:21 - then we should set up a tx again and
218:24 - just await program.rpc.com
218:27 - again this isn't fetching comments this
218:29 - is the ability to make one so comma user
218:33 - detail dot user name comma user detail
218:38 - dot user profile is it profile image
218:40 - yeah it is profile image url because we
218:42 - want to get the user's name and their
218:44 - image just as you can see here okay boom
218:47 - is that it oh no there's also an object
218:49 - that we need to pass in here which is
218:51 - just the accounts like i done before so
218:53 - video dot new pub key address comment
218:57 - will be comment underscore pda authority
219:00 - will be wallet dot public key then we'll
219:03 - do that comma default accounts again
219:05 - spread operator and just for formatting
219:07 - purposes add some column and just to be
219:09 - super sure it's console.tx all right
219:12 - because that means if we can see this
219:13 - that means we can see the
219:15 - basically the receipt or like the
219:16 - transaction hash that comes after it's
219:18 - done so let me refresh cool awesome not
219:21 - only that i can't really create comment
219:23 - till we also get all the comments all
219:26 - right so we need to complete this
219:27 - function as well that's the reason why
219:29 - we're getting the error the first time
219:30 - so to get comments we're gonna need to
219:32 - make an empty array so let's say comment
219:34 - signers equals empty array and then
219:36 - let's make a for loop a regular for loop
219:38 - so it's just going to be eyes less than
219:40 - the count which is then increment cool
219:43 - and now what we can do is let comment
219:46 - signer add some space between these guys
219:49 - oh that explains a lot okay set that
219:51 - equal to all weight anchor dot web three
219:55 - dot public key dot program address all
219:58 - right same thing we pass in if you want
220:00 - the program address which is gonna be u
220:03 - utf8
220:05 - code passing comment again new public
220:08 - key pass an address and then the buffer
220:10 - we do the new bn except this time we put
220:14 - dot 2 array and then put buffer with be
220:18 - and eight then we do program.program id
220:21 - okay then we do comment signers.push oh
220:23 - this one should be signers and then you
220:25 - push the comment signer into there yep
220:27 - that makes a lot more sense to me but
220:28 - we're not done yet that was just a for
220:30 - loop looping through all the comments
220:32 - and then adding that comment onto there
220:34 - what we need to do next is const
220:36 - comments is equal to await program dot
220:40 - account dot comment account or get all
220:43 - the comment account and then we need to
220:45 - do a fetch multiple yep that's a method
220:48 - to fetch multiple comment signers yes
220:52 - that's why we set it up before and over
220:54 - here we can console log the comments to
220:56 - see the ones that we're getting and then
220:57 - we need to return comments so if we
220:59 - return comments that's an array that we
221:01 - can sort so that's why we wouldn't see
221:02 - that error from here anymore so let's
221:04 - hit sin and now moment of truth refresh
221:07 - right click comment what's going on
221:08 - invalid class name what do you mean
221:11 - class name i should show me where this
221:12 - was i'm going to say
221:14 - it's at comments it's the only thing i
221:16 - could think of nope nope yeah i'm going
221:18 - to say it's that comments because it
221:19 - only happened when i clicked it let's
221:21 - check out class name class lowercase
221:23 - name oh i see it yeah right there good
221:25 - catch so let's refresh this again make
221:27 - him a big okay nothing still come on all
221:30 - right so if it's nothing that means we
221:33 - need to look at the sidebar again that's
221:35 - why you can't see it guys that's because
221:37 - we didn't do the styling for it so let's
221:38 - do this down for it right now so let's
221:40 - do the comments so if i remember it
221:43 - correctly text line will be center the
221:45 - background will be hashtag fff all right
221:49 - so i wonder if that would actually show
221:50 - it already no okay i got too excited
221:52 - width will be 100
221:54 - the height will be 60 percent of the
221:56 - page and let's give it a padding of 20
222:00 - pixels okay position will be absolute
222:03 - okay i'm just seeing something no okay
222:05 - and then we can add border top that's
222:07 - not done left radius which will be 20
222:10 - pixels and the border top right radius
222:14 - will be also 20 pixels because again
222:16 - what we're styling here is this guy so
222:18 - look how it's supposed to be round over
222:20 - here we're gonna do bottom zero i'm
222:22 - gonna do left zero oh it's there it
222:25 - exists and if i click this x ay
222:28 - awesome i was going crazy i was like i
222:30 - thought i did this already but
222:31 - apparently i didn't so the animation is
222:33 - gonna be comment 0.2 that's like
222:36 - actually a standard 0.2 ease in it's
222:38 - like easy on the eyes that's how i
222:40 - remember cool now moving on to the
222:42 - comments header pull this up we're going
222:43 - to do a display flex which will set it
222:46 - to a row then we can do justify content
222:49 - space align item center and let's give
222:51 - it some more padding over here 0 and 20
222:54 - pixels so top left
222:56 - 0 right top 0 20 pixels believe margin
223:00 - top will be 20 or minus 20 yeah and
223:04 - let's just see is that right let me just
223:05 - add the rest of this then we can figure
223:07 - it out let's do a font size 2 rem cursor
223:11 - pointer this might be because there's
223:12 - four comments but let me just see
223:14 - something with no no it should be more
223:15 - like that i think the margin top is too
223:17 - much maybe like 10. that feels pretty
223:19 - good to me cool so then we have the
223:21 - close button it's like right there it's
223:23 - so small compared to that one okay but
223:25 - then we have the button itself right
223:27 - here which we can give a background of
223:30 - hashtag
223:31 - 4 e or 4ce hey okay cool that's the
223:35 - button padding i'll just give you a 0.6
223:38 - rem and one rem border
223:40 - radius 0.6 then a color of fff there we
223:45 - go also cursor pointer uh a transition
223:49 - let's give it that transition of 0.2
223:52 - seconds linear do it max with oh 5.5 rem
223:56 - all right from there let's do an align
223:57 - items center justify content and display
224:01 - flex probably should do that first then
224:03 - we can do font weight let's give it 600
224:06 - and font size oops font dash size 0.8
224:11 - and of course border okay looks a lot
224:13 - better so let's fix up that comment
224:15 - input oh wait i don't need to write that
224:17 - i already heard i already wrote it the
224:18 - whole point so this one has display flex
224:20 - i'll put that first this time and
224:21 - adjustify content center and align item
224:25 - center let's give it a gap of 10 pixels
224:27 - right we're back on track it's back on
224:29 - the right place a margin top of 11 rem
224:33 - awesome like i said the the comment's
224:34 - going to look going to be in a weird
224:36 - spot but once we add more it's going to
224:37 - look a lot cleaner padding 10 pixels
224:39 - okay cool so from here the border will
224:41 - be none the outline will be none the
224:45 - width will be 100
224:47 - yay okay cool looks a lot i feel a lot
224:49 - better about that one all right 100
224:51 - and the font size font size it's going
224:54 - to be 1 r e m cool all right so now that
224:58 - we have all the front end you don't
225:00 - really need this as much now i can just
225:02 - go boop and boop and once i have more
225:04 - comments populate this will get pushed
225:06 - down to where it's supposed to go
225:07 - awesome so let's just refresh this for
225:09 - sanity and let's run through the process
225:11 - let's see if we can create a comment so
225:13 - moment of truth once again let's comment
225:15 - out with this one and let's say this
225:19 - not tutorial hell all right let's hit
225:21 - reply yes okay cool it doesn't say
225:23 - transaction may fail like i said it's
225:25 - actually computing how much solo would
225:26 - take that's a good sign i'll hit approve
225:28 - no errors okay i'm going to exit out
225:32 - just let it chill for a bit and we just
225:33 - wait till the comment finally loads yep
225:36 - no common card is not defined and that's
225:39 - an easy fix though okay i'll be perfect
225:42 - let's import comp card here common card
225:44 - save refresh okay let's click yes okay
225:47 - it's working right like it's funny
225:49 - because it just says comment card but
225:51 - that's just because there's only one
225:53 - comment and if there is a comment
225:54 - because of the map it's just going to
225:55 - load this div so the next step is let's
225:57 - finish out the comma card man i don't
226:00 - understand how happy i am that our smart
226:02 - contract is working just fine i hope you
226:04 - guys are just excited as i am so like i
226:06 - just was saying we only have to do is
226:07 - just comment card so i'm gonna set that
226:10 - up right now so first order of business
226:12 - let's make the common card style comment
226:16 - card dot module dot css and now that's
226:19 - done i can set up the skeleton of this
226:22 - okay so again you guys know the drill by
226:24 - now let's set up the skeleton the
226:26 - wrapper text container div oops there
226:29 - you go text container i think i want an
226:31 - avatar we'll have a username class as
226:34 - well there'll be like a reply bit and
226:37 - there's a comment text there's a time
226:40 - stamp and last but not least there's a
226:43 - button cool now in common card let's
226:45 - import styles from you believe this is
226:48 - our last component guys so who's with me
226:50 - you're almost done let's do styles slash
226:54 - comment card dot module.css amazing so
226:58 - let's finish this out strong so what i
227:00 - want to do set up all my imports import
227:03 - image from next image
227:05 - i want to import a heart outlined and we
227:09 - have an assets folder if you didn't know
227:11 - that you got from the cli tool that
227:12 - comes with all the images so no more
227:14 - making their builds along with me and
227:16 - you're like lance where did you get
227:17 - those assets from all right the cli tool
227:19 - will take care of all of your problems
227:22 - okay assets slash heart outlined svg and
227:26 - it's a package that it's installed we're
227:27 - going to get time ago all right that's
227:29 - how we're going to get the timestamp on
227:30 - the front end side okay let's also
227:32 - import yen from
227:34 - that javascript time ago slash locale
227:37 - slash end.json we're gonna need that one
227:40 - okay and we can do time ago dot add
227:44 - default locale pass in en and we can
227:47 - make a variable here called time go
227:49 - which will equal new time ago the end us
227:53 - it's going to constantly update when
227:54 - that comment was posted on the front end
227:56 - and again i just need to double check
227:59 - what i got from the comments card which
228:01 - again is actually from comments ah key
228:03 - username comment avatar timestamp so
228:06 - let's destructure stuff username
228:08 - timestamp avatar and comment nice okay
228:13 - and in the return here clean this up and
228:15 - let's plug in all the names so this is
228:17 - where our parent div goes and it's
228:18 - usually the wrapper and within that
228:20 - wrapper we'll have a div with no name
228:23 - and inside that div will host our image
228:26 - oops and we can actually define the
228:28 - width here 34 height of 34. okay this is
228:32 - where we give it that class name of
228:34 - style avatar styles that avatar habitat
228:38 - avatar and the source will equal avatar
228:41 - and even the will equal the username
228:43 - because that kind of makes sense yeah so
228:45 - closing div then opening with the
228:47 - opening div we're just going to do a
228:49 - style.txt container which has a nameless
228:53 - div and here it's going to contain that
228:55 - user like the actual username and the
228:57 - photo itself so style.username
229:00 - username alright so this contains our
229:02 - picture and this contains our username
229:04 - and the comment itself okay that's what
229:06 - it is after those two divs hit enter
229:09 - here inside of spam and the span will
229:11 - show us how long ago was that comment
229:13 - that i just made okay so that's going to
229:15 - be new date time stamp times 100 a
229:19 - thousand all right this is how you
229:20 - format it and then let's say let me see
229:23 - twitter oh yeah it is twitter
229:25 - now or dash now yeah okay and then we
229:29 - close the span which it already is then
229:31 - it's closing closing div and open the
229:33 - div so now that's it goes closing div
229:35 - closing div and now this makes more
229:38 - sense if i do a class name style dot
229:42 - button here and let's put a div in
229:44 - between that which will also hold the
229:46 - image of that outline like we can't like
229:49 - these replies but on tick tock you
229:51 - should see a little heart next to the
229:52 - comment where you can like it but if you
229:54 - did want to add that functionality you
229:55 - can now that you know how to add
229:56 - instructions on your smart contract so
229:58 - this one i'll give a width of 24 and a
230:01 - height of 24 as well unexpected i guess
230:05 - it lost the closing dude that it was
230:07 - supposed to have oh i see another one of
230:09 - these all right i'll take a look at that
230:10 - in a second let me just finish this out
230:12 - yep oh yeah there's no source that's why
230:14 - could be the reason outlined there you
230:16 - go there's my profile picture lance this
230:18 - is not tutorial that was my comment but
230:20 - now it's fully loaded it just looks
230:22 - really ugly because i didn't add any
230:24 - styling yet so that's the image closing
230:26 - div closing div and closing div yep that
230:29 - looks good all right last step guys
230:31 - let's add some css so for the final css
230:36 - that we need to add we're going to start
230:37 - with the wrapper which is just going to
230:39 - be display flex and we're going to add
230:41 - some padding 20 pixels that's padding
230:43 - right 10 pixels add some padding bottom
230:46 - 0 and padding top there could have been
230:50 - an easy way to do this but i already
230:51 - committed okay so then font size is
230:53 - going to be
230:54 - 0.9 rem text container is going to be
230:57 - text align left because i want all these
231:00 - comments to shift to the left there you
231:02 - go we can also add a margin left while
231:04 - we're here 10 pixels boom add some
231:06 - spacing there and of course a display
231:08 - flex yes okay then justify content space
231:12 - between and online
231:15 - center that hard over and a width of 100
231:18 - see if it takes up that space there we
231:20 - go look at that and it's 14 minutes ago
231:21 - that's pretty accurate let's do border
231:23 - radius for the avatar let's make it 50
231:26 - percent cool it wouldn't be that much
231:28 - noticeable but we also want to do an
231:29 - object fit cover yeah okay next is
231:32 - username i don't know why that's all in
231:33 - caps wait did i just add a username i
231:36 - don't want to do that cool and then for
231:37 - username let's add opacity of 0.5 yes
231:42 - okay and there's a little reply bit here
231:44 - that says cursor
231:46 - pointer which i believe now i'm thinking
231:47 - about i think i'm missing go back to
231:49 - common card it's the reply bit here
231:51 - apply bit i guess i don't have that
231:52 - anymore so i guess i can count that out
231:53 - and then there's comment text this one
231:56 - will have margin of four pixels and zero
231:59 - just shifts it down font size of one rem
232:03 - yes
232:04 - and let's style that timestamp a little
232:06 - bit let's give it an opacity of 0.5 and
232:10 - the button will have an opacity 0.3 cool
232:13 - and there it is there's our beautiful
232:15 - comment with that said i think that's it
232:17 - guys we have the tick tock build right
232:20 - so let's just run through all the
232:22 - functionality one last time all right
232:24 - and you know what before we even do that
232:26 - before i get too excited let's do this
232:28 - on our live link it's only fitting so if
232:31 - we go to get status let's see all the
232:33 - changes yep all the comments stuff hit
232:35 - add get commit m right add the rest of
232:38 - the front end basically and then we can
232:40 - do git push let's visit netlify see how
232:43 - he's doing or just write nullify
232:45 - tick-tock solana and because we pushed
232:47 - it's automatically building once again
232:48 - now we wait oh okay that's a good sign
232:51 - there's failed to come to resolve heart
232:54 - outline that's why it's good to watch
232:56 - our deploys because now i know exactly
232:57 - where it failed and that's because this
232:59 - guy right here i'm surprised even got
233:01 - the heart outline even though it wasn't
233:03 - spelled the same but oh yeah since that
233:05 - was a change we can actually read a
233:07 - trigger redeploy by just adding that
233:09 - fixed import for heart outline and a
233:13 - good push yes sir and then we go back to
233:16 - here and now you see it failed and now
233:18 - it's building okay cool so let's just
233:19 - track it one more time fingers crossed
233:21 - okay side is live okay cool so it's up
233:25 - and running let's click deploys let's
233:27 - click tick-tock salon and let's connect
233:29 - our phantom one awesome so again i'm
233:31 - logged in as lance because i'm in wallet
233:33 - one but what if let's select the random
233:36 - wallets pick wallet for all right let's
233:37 - run through the process right this is it
233:40 - we built this together it's been a long
233:42 - day building with you guys but i hope
233:44 - you're happy with this app let's
233:46 - celebrate by walking through what it can
233:48 - do so here it is this is demo but i hope
233:51 - you guys are demoing with me so log it's
233:52 - tick tock select the wallet we're using
233:54 - phantom of course click connect and
233:56 - let's create a user all right this one
233:58 - i'll call it alex and we have alex right
234:03 - here wow this is alex i like his hair
234:05 - this is his profile image and we'll
234:07 - click sign up click approve give it a
234:09 - second we can even refresh in a bit boom
234:11 - we're in our app i'm logged in as alex
234:14 - and you can see the tick tocks that
234:16 - we've uploaded previously and just to
234:18 - make sure i can give this one okay let's
234:20 - hit approve give it a chance to
234:21 - communicate with the blockchain hey you
234:23 - saw that it changed one like right
234:25 - provided by alex we can add a comment
234:28 - and say this is amazing all right we'll
234:31 - hit reply again all of these are being
234:34 - stored on the solana network right even
234:36 - my comments will hit of course on a
234:38 - large scale that is a lot of storage
234:41 - that we're going to be taking up if we
234:42 - put our comments here remember the main
234:44 - purpose of this build is to show you
234:46 - something that's familiar on web 2 and
234:48 - help you learn about concepts about web
234:51 - 3. this time it's on solana chain which
234:53 - means we're using anchor rust and all
234:56 - the other technologies that you learned
234:57 - so a lot of playground is in the beta
234:59 - stages right now and i showed you guys
235:00 - how to use it so again shout outs to a
235:03 - developer called akron he is one of the
235:05 - developers behind this playground and he
235:08 - helped me a lot understand russ code and
235:10 - anchor and even help me fix some bugs on
235:12 - here so super cool dude the people
235:15 - behind the solana playground are amazing
235:16 - i left a comment let's see if i refresh
235:18 - it see one hey look it's alex he says
235:20 - this is amazing i'm so happy with that
235:22 - let's go and now for the finale right
235:25 - let's add a video on tick tock so let's
235:28 - do a throwback here all the way let's do
235:31 - this advice for inspiring javascript
235:34 - developers i feel like that's kidding
235:35 - let's copy that link how do we create a
235:37 - new video you click this guy right here
235:39 - advice for aspiring developers i'll
235:42 - shorten it okay and let's paste it here
235:44 - let's hit create new let's hit approve
235:46 - right give it a couple seconds and there
235:48 - it is a tick tock uploaded by alex
235:51 - himself the new user that we logged in
235:54 - this is amazing congratulations on
235:56 - making it this far on the build right we
235:58 - did so much this site is even live you
236:01 - can copy this link and send it to your
236:02 - mom and she can see it and log in and
236:04 - make a tick tock i hope you guys enjoyed
236:07 - this i highly encourage you guys to play
236:09 - with the code add some more functions on
236:12 - the smart contract because i showed you
236:13 - how to do that and upgrade it i also
236:15 - want you guys to be on the lookout for
236:16 - our future videos and if you haven't go
236:18 - watch our amazon video that isn't on the
236:20 - salon chain but we use other cool
236:22 - technologies on that as well it's been a
236:24 - pleasure i'll see you guys in the next
236:26 - video peace

Cleaned transcript:

in this video you'll build a tick tock web 3.0 dab with next js you'll be building this on the solana blockchain we'll write your own program and you'll code up your smart contract and what's amazing about this is you'll be using anchor framework which makes it so much easier to actually use rust again why we'll be using solana for this is solana is blazingly fast and it is a wonderful user experience that's why this app is gonna be on solana you'll use cargo to compile and deploy your very own smart contract i'll show you how to use phantom wallet to actually authenticate users so they can log in and log out of your app lastly we'll take this app and deploy it using netlify and at that point you'll have your very own tick tock web 3.0 dab deployed and hosted on the internet ready for anyone to be able to use also i am super excited to actually share this with you guys this has been weeks and months in the process we have built our own cli tool that you guys will now get to start using i'm unbelievably excited about this we publish our own package in npm nerdy things aside what this basically means is you'll be able to write one line like npx clever programmer and it'll get you set up with the entire project with all the assets you don't have to go and like get the images from somewhere else you don't have to like download different dependencies on your own this will just install all the dependencies and everything taken care of for you so i'm especially excited because you'll get to do that in this project with that said go ahead and smash that like button break that thing right now and uh subscribe to the channel because this is a channel where you become a better web 3d developer so i hope you're excited with that said i'm gonna get out of your way and i'm gonna let your instructor lance take it away and get you started on this build lance let's go welcome welcome to the tick tock demo lance here let me show you guys around so when you first open your app you're going to see this page right here all this means is that you need to select your wallet and of course we're going to be using phantom because this is on solana so as you can see phantom's detected i'm going to connect my wallet bam and all we need to do now is just pick a username for yourself so i'm going to use qazi's name for this one and let's get a profile image at the moment we set it up so that we're going to use dicepear to get all our avatars so if i go here we can create our custom profile by writing in a seat so if i just put kazi this is what it thinks kazi or generates for qazi so very beautiful let's take that svg and paste it onto here i'll just click sign up so every time we do something on this app you're gonna see the phantom wallet here ask if we can approve this transaction that's because everything we do is gonna be stored on chain so let's hit approve and bam there we go we are logged in on tick tock and how do i know because if i scroll down you're gonna see all these different tick tocks by different people as you can see drac we got lance here we got another launch one here and if i press play how awesome is that and you can see on each of these there's different comments like this one right so if i look there's comments there's our boy kevi kev awesome and another cool feature that you can do is that you can actually add a comment so thank you all right i'm logged in as kazi i'm gonna go hit reply and let's leave a comment and like i said before even the comments are stored on change and after a couple seconds bam there you go there's qazi's comment over there 40 seconds ago how awesome is that cool and you don't have to worry because all of this is on the dev net this is not the main answer you're not going to lose actual solana by storing these comments on chain but the purpose of this video is to show you guys how to develop on the solana chain so we can leave comments and not only that we can go ahead and click this little heart and let's drop a like and bam look at that so the heart turns red and there's a beautiful three right there so that's pretty sick we got comments we got likes but guess what that's not all we can also upload your very own tick tocks onto your app so let me show you guys how to do that all we need to do is click this plus icon right here and you're going to see this model for upload new video that's because we need to fill in now so to get a tick tock video of course let's go to tech talk and i'm going to go to our clever programmer tick tock and let's pick a random video let's do this building chess app right here what you need to do is right click this click copy video address head back over to your app and you can just put any description you want building chess app and react right and then paste that video url and let's hit create new awesome and all you have to do is hit a proof again and bam there it is this is the video i just uploaded and you can see it's uploaded by the username that's login quasi so how cool is that you can put your very own tick tocks on a website that you created so that's enough demo do you guys want to build this let's head over to the tutorial and just like kazi said this is gonna be on the salon chain so i'm pretty excited one thing i wanted to mention i love making these projects so that you guys can have cool stuff for your portfolio one thing that you could do to make it better it would make me really happy is to go in this code change all of it understand how it works and make it your own right let's say you don't want to make tick tock maybe you want to make your own version of tick tock this is a really good launching point to do that enough of my rant let's get started with the build so over here you'll see that i have my terminal open and one thing that i'm happy to announce is that clever programmer has their own cli tool so if you guys just do npx clever programmer now you're gonna get the tick tock project like the starter files that we need so no more creating next step no more install dependencies or looking for the repo to get it working you're gonna have everything you'll need the only thing i'll need to ask from you is double check on your terminal for node dash version yeah cool and notice how i have 16. so our cli tool is going to work on version 16 and up so if you're version 14 or 12 definitely update it if you're watching this from the future this might be a little bit different when you run this command okay so if you're with me in the present do npx clever programmer and let's see boom awesome so you're going to see a couple questions enter your email address i'm going to say lance clever programmer and for my name i'ma hit links beautiful cool and look at this how cool is this when it says what project would you like to initialize at the moment it's just tick tock but soon we're going to have all the other starter files for each project going forward so it's going to make all of our lives easier so i'm going to go ahead and select tick tock and look at that while you wait smash that like button and if you look at the front end it's installing the dependencies boom and i don't know if you guys saw that but as it finished it literally opens up bs code and opens the project right away so that is super cool if i look at vs code now the front end folder is already set up this is our next js app if you look the yarn lock file you're gonna notice all the packages that we have installed is already in here and the package.json as well right there's solana wallet adapter axios javascript time ago react icons all of it is in there and guess what you all have to do was write npx clever programmer so with that said setup is done okay cool so all i did so far was x out my terminal and made this a little bit bigger because we're no longer going to need it i can just use my integrated terminal one thing i wanted to mention with our cli tool we essentially just did a git clone so if you want to push this you're gonna see that you don't have permission i'm gonna do right now and show you guys how to create your own repo and any changes that you wanna make on here will now be pushed to that repository so how do we do that all you have to do is just open up your browser so go to github.com and i'm gonna go ahead and make this bigger and let's just create a new repository okay you're with me so far and again there is many many different ways to do one thing if you have your own way go for it i'm just going to make a new repo and connect this to it if you're new for my beginners out there feel free to follow along so all i'm going to do is do a tick tock solana that's going to be the name of my repo and for now i can just do create repo boom so you're going to see this page and it's going to show you give you insight on how to set it up but what we can do here is head over back to your vs code right and i'm going to click control b and command control j or command j if you're on mac and all you guys need to do let me just fix this up all you guys need to do is just get remote set dash url origin we're going to change the remote origin of this one to now be connected to the new repo we just made so go ahead and copy this link i'm gonna copy and i'm gonna right click and there we go i'm gonna hit enter boom so now it's connected how do i know because now if i try to push so let's make it small change all i'm gonna do is add a space here hit save and if i do a git status you can check the changes that you made i modified pack json cool and if you're okay with that change just do a git add dot to add all changes and then you just do a git commit i'm gonna say set up own repo okay and then i'll just do a git push and now you shouldn't see permission failed or anything like that because now it's directly connected to the one we just created boom so get push awesome and if i hit refresh on here look at that and here's my comment setup on repo essentially you forked the project that we created and as you can see our boy david who originally created project is a contributor and now you're free to just add whatever you want to this so that's how we're going to be developing once that's set up we can actually set this up to netlify now right if you don't know netlify is a website that can host your static apps one thing we can do is connect our github repo so every time i make a change it's going to redeploy it live so it's always going to be redeployed we'll have to set it up once we do it for the first time so if that sounds cool to you let me show you guys how to do that awesome so once you clear terminal the first thing you want to do is an npm install netlify dash cli dash g if you're wondering what this does we're just installing the cli tool from netlify globally so i don't have to go on the website and set things up i can just do it all from the comfort of my command line so i'm going to do this and hit enter i already have it installed but i want to do it with you guys okay cool so once that's done all you guys have to do now is if you type in the word netlify you're going to see a list of commands that you can run with the cli tool we see init which we're going to use later build api addons there's a bunch of different things you could do you can even set up environment variables through the cli what we want to focus on is initializing our site right so i can shorten our command instead of saying netlify i can say ntl and then i'm going to say ntl login right i'm going to hit enter and for me i'm already logged in but for you guys what might happen is on your browser the netlify website will pop up and it's going to prompt you to log in i highly suggest you connect it to github because it's going to make this next step a lot simpler so make a netlife account with them make an account with them by just hopping to your new tab right here and all you have to write is ntl.fyi clever and you can go ahead and sign up with them if you don't have an account nice cool so once you have an account and logged in you can go ahead and exit out what you need to do next right after i clear this it's just going to be an ntl init what this does it automatically sets up a netlife website and i'll show you guys in a second ntl init boom so look at that so now it's going to ask you connect this to an existing metlife site or just make a new one so we're making a new one i'm gonna hit this one and now we can give it a name i'm gonna go ahead and select create and configure a new site because we're making a new one awesome for the team just select enter and then now here's where you can name your website so this will be the url that people type in to get there so for me i'm just going to say tick tock solana awesome so there isn't any other ones called ticktock solano that i have so it went through for the base directory make sure it's front end especially if you use our cli tool because that's where our next app lives enter and we used yarn so what you need to write in this section is yarn run build and for current directory you can just hit enter for this for net life functions folder hit enter and now we just say yes because we need this plugin and boom adding deploy key cool so now it's hooked up to our github repo and every time i hit push it's going to deploy the site so what we could do to test this out let's run it again do this and make that change take out that space hit save go through the process of setting up git again if i do a git add dot commit m removed spacing from package.json and we'll still get push okay boom we can see those changes on our github just like normal remove spacing from package.json and then we head to netlify we can make this guy a little bit bigger i'm gonna hit login and there it is there's tiktok solana and you're going to notice that it failed right the reason why it failed is because there's some things we got to set up on this and what we can do is go to deploy settings go to environment and click edit variables you can also do this on the cli tool but i'm just going to show you since we're already on the website what you want to do at this point is going to be in capitals npm flags right flags or flag and we're going to just put dash force make sure this one is lowercase okay i'm just going to check it's force awesome because what you might run into is some peer dependency issues on the modules this will just override that because you should just be fine okay once that's done i'm gonna go back to deploys and let's do trigger deploy and let's clear cache and deploy site cool and now let's just wait for this thing to be finished and live oops hold on might be a mistake on my part let me go back to environment i think this should actually be flags let's hit save now let's try this again okay cool now let's wait for it to load there we go so you can see the dash test force is disabled now look at that so the side is live now so what that means is i can go over here and click preview if you want to preview the site or we can click deploys and just click on the link right here so you can see tic tac solana lfi dot app and you can actually copy this link and send it to all your friends and show them what you made obviously right now ain't much but every time we push to our github repo this live site is updating and that's the cool part about this so with that said netlify set up we have our repo ready to go let's get to coding before we move any further i want to talk about the project so what i'm going to do is open up my little whiteboarding app and as you know we're coding this project on the solana chain and if you watched our facebook video you know that we use something called anchor and as a refresher anchor is just a framework where we can build secure solana programs quickly and if you didn't know if you're more familiar with the term smart contract that is the equivalent on solana programs or essentially smart contracts yeah cool so with that said anchor underneath the hood handles a bunch of security checks that we don't really need to do that we're gonna need to care about if we're gonna write this natively but since we're running anchor it's gonna make that a lot easier the main reason i'm using anchor is because it creates an interface that we can use on the front end to call our solana program what does that mean to you guys on our next.js app if i want to be able to create and upload a video i'm going to need to talk to my solana smart contract to create that video and it makes it really easy with anchor you with me so far another prerequisites to this is one you have to be able to install the anchor cli tool and lucky for you guys if you did npx clever programmer you're going to notice this folder called tick tock clone this is actually the anchor build itself so that step is already done for you but if you wanted to do this on your own one thing that i like to share with you guys are these links right here all right let me just clean this up a little bit and we'll also provide these links in the description but essentially these this is how we can get started with installation and if you want to learn about any cli commands this is where you're going to go and as a disclaimer by no means am i saying i'm a developer expert and solana what i want to do is get as much practice as i can and whatever i learned from building these amazing projects for you i want you guys to be able to take away and learn on your own so what that means is if you're watching this and none of this is making sense watch it over and over again and take what you do understand and build something that you're passionate about because that's how you really understand my goals with these builds is to essentially be a launching pad for you to create really cool projects and maybe learn something along the way cool with that said one benefit that i want to show you guys is we can use the anchor cli tool to write a program but if the setup is really difficult for you guys solana made something really cool and i'm about to show you guys there is a tool out there where you don't need to install anchor at all all you have to do is type in this beta.solepg.io hit enter and as you can see let me make this bigger if you guys are familiar with remix at all if you're coming from solidity background this is essentially the remix for solana what that means is i can write my smart contracts on here deploy them build them and test them all on the browser which is amazing so that if setup is an issue this is going to be the way to go so what i'll be doing for this tutorial is creating the smart contract on solana playground that being said i'm excited for this build i want you guys to take your time with these concepts that i'm going to be talking about today and for my anchor experts my rust experts out there if there's any you know improvements that i could do feel free to leave a comment down below i'm always wanting to learn more just like you guys so with that said let's go awesome so this is the solano playground like i mentioned before this is a place where we can write the smart contract of our build so we're going to start with this first and build out the whole smart contract and another benefit about doing this is that the tests are really easy to do so once we make a function i can just test it right away and see if it works cool so let's get started one thing i want to do is set up any additional libraries that we're going to need awesome so the anchor prelude comes by default another one that we're going to need to do is use right this is how the equivalent of an import in javascript we can say solana underscore program colon entry point colon program result okay that's one that we're gonna use another one that we're gonna use we're gonna say use std mem colon size of this one is important because with rust or with anchor they really care about the size of everything unlike javascript where you can put like in a massive array and it wouldn't cause any problems the reason for this is because rust is a lower level language and error handling is a lot easier if we know exactly the size of everything and we can do that by using this library right here cool other than that let's do another use anchor let's see anchor lang i believe and then after that it's colon colon solana underscore program log brackets soul underscore log compute underscore units right this is going to help us log our units this is essentially important for budgeting when it comes to how much solana are we spending for the smart contract right don't worry about that too much these are all the libraries that we're going to be needing to use right over here this is the place where we're going to declare ird or in other words our programs address so by default when you use the lab program it's going to be all these ones but once i hit this build button it's going to generate a new program for us later okay cool now i just want to take this time to go over the anatomy of an anchor project and explain to you guys to the best of my knowledge so if you see this hashtag bracket program you can think of this as what anchor uses to define what a solana smart contract or program is right so this is the name of our smart contract by default it's called hello anchor and if you see this pub fn you can look at that as a function if you're coming from javascript so what is this function it's initializing right here are the parameters right it's context is initialized which i'll get into in a second and notice how it talks about it's going to take in a parameter called data and this is the data type an unsigned integer that's 64 bytes okay cool and then it's going to take in a result and here is the logic for that initialize function so you might be wondering what the hell does this mean well essentially context is essentially the state so if we come down here you're going to see something called pub struct initialize what that means is i'm creating essentially initialize object and i'm defining the characteristics of that object right so you can see pub new account is going to be account and the signer is the user that is associated with the program and the system program is the program and it also brings in all the information about it that's what it is on a really high level and that's how i'm using to explain to you guys coming in from javascript or our old builds okay cool notice how we have another obstruct here right like i said if this is creating a new object this is essentially a class and here are the properties it's gonna take in data cool so that's essentially on a high level the anatomy of an anchor project i'm gonna be morphing this to what we want out of this build cool so like i said if this program is telling us what a smart contract is then this mod is essentially all the instructions that we want our smart contract to do so at the moment you can say that this smart contract we can initialize something if you understand that let's go ahead and think about what i want to do for this app right so i'm just going to make some space here to separate it and let's go ahead and delete this cool so the first thing i want to do is pub fn create underscore user so if i were to ask you guys what does this function do or what do you think it does it's just going to create a user create a user for what for my next app right for tick tock this is creating a user on tiktok okay if that's the case it's me like normal where you make this a function and the difference if you're coming from javascript going into rust is i'm gonna make this arrow here and then i'm gonna say program result camel case right this is the library that we're importing you can look at this is what is this function returning right on a very high level so i'm going to do something like this and what i can write in here is going to be the logic of how do we want to create a user so just like any other function this function is going to take a couple parameters and with rust you need to define what is the type that you're expecting from the parameters so that error handling is a lot easier so if i say something like ctx all right that just means context and context is essentially a container that holds the data that we define on this program so what i'll do is i'll write everything out and i'll talk about it a little bit after so ctx is all you need to write here and put a colon and then you're just going to write context create user all right then you have a comma here because there's a couple more parameters that i want to add and it's going to be named and that's going to be string and it's going to take in a profile url right so what i want to do later in tik tok is you can sign up and put in whatever name or username that you want and i also want to give you guys a nice profile image that you can attach to it so that's why it's going to take that in as a parameter so profile url and then that's also going to be a string cool awesome with that said ctx here is the parameter you're probably wondering what is create user so before we move any further with this if you're wondering what create user is it doesn't exist yet we haven't made a struct or in other words class that defines what a create user object is so what we can do is actually edit this one so we still need this here hashtag derive accounts because if you remember the word accounts in this case it's essentially like data stored on the solana network it's a trait that we can add to this object or class whatever so whatever struct i create after this line is going to inherit all the qualities of it so enough jibber jabber i'm just going to start coding what i'm going to do here is for this struct i'm going to write create user right so now when i pass in a create user object you know what i'm you know what i'm talking about also you're gonna need this info here it's essentially what's called a lifetime variable if you know what rust is that's something that's common within that language okay we're gonna need this here to get all the information about create user and then when you come down to here this hashtag account this part alone is essentially an attribute that can define specific behaviors for our account for example i'm saying the payer is the signer which is essentially the one who created the contract the wallet that's associated with that and there's something that's space equals eight plus eight that's essentially saying how much space is this taking okay like i said space is very important to know for this code so what i want to do is let's edit this oh so the changes i want to make is a little something like this i'm just going to format it because there's a couple things i want to add to it cool so we're still going to need init here another thing that we're going to add is something called seeds essentially you could look at this as a hash and whatever i put here will help generate a unique hash all right later down in the video i'm going to be talking about die something called dice bear and this what this does is let you create an avatar based on whatever you type in here so take a look if i do blah blah blah blah i get this randomly generated avatar based on what i wrote so if i say lance this will generate this right so without getting too low level or complicated if i go back to the solana playground whatever i put in this array is going to generate a unique hash or seed so what we can do here is input a bunch of information that will help create generate that okay so don't worry too much about what i put here that's just mainly the main purpose so what i'm going to write is b as ref oops lowercase after that let's add a comma because i also want to put authority dot key parentheses dot as underscore okay cool another thing to add is a comma right after this and put something called bump so adding on to what i said earlier whatever i put here will generate a unique hash if that hash already exists what bump will do is basically add like a number or two i believe it does like 20 times until it checks if that unique hash is used or not so that's why i'm going gonna add bump here cool so that we can ensure we have a unique hash after that the payer here is actually gonna equal the authority if you didn't know the authority is the one that is gonna allow us to upgrade our contract basically whoever the address that's associated with making this program so we'll do that as the authority and then for the space it's not going to be equals eight plus eight what it's going to be though is size of do the user right that's created so i say user account then parentheses then we're gonna say plus the user right the space of this is gonna depend on the user that's logged in on his name so if my name is lance or if my name is supercalifragic listbigalidocious right we need to add that as the space great so the username that length and also the underscore url blank then plus eight okay cool all right off the bat you're gonna say like lance this doesn't exist where are you getting this from there's a couple things you have to do also so what i mean is coming back up to the top here underneath the declarity let's add some space like i said we're going to need to essentially hard code how much space we're going to be taking for each thing all right so in this case we need to determine how long can users make their name and essentially how long can the video url length be so if i write const user underscore name underscore length right i have to determine how big it will be so if i say colon i'll say it's a use size of about equal 100 so this kind of equates to roughly one character right so this is how long the username how long do you want the video url to be well we can say const video oops video underscore url length and let's give this a size of about 225. so if we try to input a size that's longer than this it's not going to work i'm literally saying how much space that this account is going to be does that make sense cool all right so i'm going to be coming back jumping around and adding more essentially constants for each thing so while i'm here let's make another cons and this one is going to be the user underscore url underscore length all right which is also going to be the same as the video length so 225 so essentially it doesn't matter which one we put here video url length or user url link because it's supposed to be the same size and again this con's user url length is going to represent the url that we get from this so if this is my url it can only be 225 characters long which this is plenty with this awesome so just in case you guys forget this is going to be username length username length this one just contains the user profile image url link cool awesome all right so that is that's essentially all we're gonna need to authenticate the user account the next thing i want to do is basically define the attributes of a create user right are probably not needed so let me just start fresh i'm just gonna code it up and then talk about it okay so what i'm gonna do is pub user say account brackets info cool so i'm essentially saying the user is going to be all of this information right this user account here and this user account here isn't just essentially another struct that hasn't been created yet so we're going to get to that what would a user object look like but right now we're dealing with create user so the next attribute we're going to need to do the hashtag account and just make this mutable when you see something like mute here mut i'm saying that this could be changed essentially what i'm trying to set up is this i'll say pub the authority is gonna be whoever the signer is okay i'm gonna have this comma boom and then also make a little comment for me and for you this is essentially the authority or in other words this is signer who paid the transaction fee because anytime we store something on train there's going to be some transaction fees so i'm just saying who's ever paying for this is going to represent who's paying for it okay so now i'm going to move a little bit more quicker now now that you guys are starting to get used to the flow i'm going to say pub system underscore program it's going to be an unchecked account and of course we're going to put in this lifetime variable here info again okay which is essentially a simple test account for tick tock okay cool so next step what i want to do is just say pub clock and it's just going to be sis var this and say our info again and i'll say clock essentially we're going to use this clock to save time cool and with that said this is our create user struct awesome using this same pattern we can actually make the user account structure let's define what is a user account look like and maybe that will make more sense to you guys so coming down before here we don't need this i'm just going to edit this i don't need the hashtag derive default but i will be using the hashtag account again here and the name of this struct is like i said is going to be user account so what i ask you guys here is what would be the if you were making a schema or an object in javascript or what a user account would look like what would be some properties that you want to keep track of what i'm thinking is pub user underscore name what is their username and what would be the data type of it exactly you got it muhammad it's a string i don't know if your name is actually muhammad but i hope that you guys like realized and looked so shout out to muhammad out there okay so that's the username all right what's next i also want to keep track of pub user wallet address right essentially what's the wallet address of the user so this one can just be the pub key or sorry pub key like that okay lastly remember what i said earlier we're going to be storing that user's name so if it's me it's lance and also the nice profile url that we get here so for this i'm just going to say user underscore profile underscore image underscore url colon string okay so this is essentially the behaviors or what can we expect when i say user account and if i wanted to access any specific properties of that later in my front end i can reference it using this so i hope that makes a little bit more sense to you because now this should be a little bit more clear right when i create a go ahead and create a user object right i'm going to take into account what is a user account and for the space of it i want to check what is that user's name that length then the video url that link or like i said it could have been uh user url as well cool so now it should be all connecting together slowly awesome so now that's set up we can go ahead and write the logic of the create user function and it should make a little bit more sense to you when i start typing this out so in the create user function if i want to create be creating a user let's say let user is going to equal this okay cool so let's break this down i'm saying in this function there's going to be a user variable and it's going to equal this and mute so remember what i said earlier mute make sure that this can be changed depending on when i call it where i call it what am i calling that what am i making mutable this ctx ctx right from the parameter and it's grabbing the context of create user so get the contacts that i need go into the accounts which again is just the data stored on the program and get me the user and once you get that storyline to the variable and that's going to represent the user are you with me so far cool other than that let's set up the authority so what i can do is say user dot user underscore wallet underscore address all right so if you think about it what is user underscore wallet where is this coming from this property remember what we just did if you see the highlighted it's coming from here right so that tells me that user is referencing this struct and i'm referencing that user's wallet address cool so that user's wallet address i'm going to set it equal to the context right the data that i have stored that accounts.authority.key right essentially i'm setting the authority key as this user's value or the value of this i set the value of the wallet address to be what i get from here which is exactly what it is okay in other words i just set up the authority awesome all right so the next thing i want to do is if i write writing comments let's set the text all right so set the text let's move a little bit faster now user.username is going to equal name right user.username is coming from once again here and i'm setting the value of that property to be the name and what is the name it's going to be whatever i passed in so imagine me later in my front end i'm going to be calling this create user function and i'm going to be passing in lance and i'm going to be passing in my url that i get from here all right so that's what i'm doing setting it equal to there and then from there let's do a user dot user underscore profile underscore image underscore url it's gonna equal you guessed it this whatever i passed in as my url awesome all right so take a second you tell me what does this mean so if you were able to explain it i think you're getting the hang of this so that's essentially all the logic we need to write all we need to do now is write something called message exclamation point and we're gonna say user added you can look at this as the equivalent of console logging on a solana program so if i put a comment here this is just logging it right cool after that remember this where it's going to compute the units all right i just want to make sure i'm going to do that here so i'm going to say solana log underscore compute oops underscore units and call that function all right oops in short this essentially is also logging right but it's going to log how many compute units are left if you're wondering why i'm doing this it's important for the budget because remember it's all based on who the signer who the authority is so this is gonna help okay one last thing is you wanna and it's kind of unique to rust uh you wanna add this okay right here which essentially it's essentially saying that if all this runs the function has passed cool so we're gonna be adding this okay to every single function with that said that's the create user function that wasn't too bad so let's go ahead and go over here and you'll notice build and deploy all i want to do is build and what i do with build is you can see any errors that come up if i wrote something wrong or you get any warning so let's try building let's see what we get yep here we go already have some errors and that's because ah quick thing to note i can see starting from line 16 it's expecting a semicolon right so in javascript we can get away without putting any semicolons but any other language like java or even rust like this but semicolons are pretty important so cool let's see if that fixes the issue let's hit build again okay cool so now the issue is on line 33 this sysvar thing i might have typed it wrong pub struct sysfar info t oh i see so after looking around i realized that this it should be more like this info instead of the back tick and just add that in there and anytime i see info i should put this like that boom so now it's actually the right color that makes more sense so let me try building okay cool okay let's build this up cool okay it says problem with my compute units probably because semicolon again let's see if that gets fixed going back to here unchecked account i see another info that i missed awesome all right so let me just hit refresh because this is getting hard to read cool all right so now that's done let's go back to this and if i refresh notice how it still saves everything i coded up that's because whatever you write here is just cached on the browser if you wanted to reset it back to default just clear your brush your cache let's hit build and awesome so i only see oh okay we actually got a couple errors expected more semicolon issues yep that's one right there and of course another one right here all right so i'm gonna take a moment to get all the semicolons done and i'll let you guys know if there was anything interesting that i see use your username that's a semicolon 54 size has issue with size of oh i see that's because this should actually be underscore and if you see warnings don't worry about those because it's just letting me know that it's unused so let's do a build again alright so build asreft okay oh i see i just forgot to put the parentheses here i might have done that somewhere else let's do build unexpected 935 yep this should have a semicolon too let me just refresh this get a little bit clearer picture yes okay cool final so yeah i just add a bunch of semicolons and some typos here and there which is expected sometimes and if you just see warnings we're good to go right like for example user url length i'm not using it in there so anchor is just letting me know like hey this isn't you other than that every single thing seems to be working fine awesome uh deployment can only be done from the playground wallet right because playground comes with the wallet and when i want to deploy this i have to be connected so we can just hit connect for now let's also just save key pair because we're going to need that later cool and i'm going to remember it because it's key pair one awesome so now i can deploy but i don't want you to do that yet i wanted to do deploy once i know that the build is stable and working and if you come down to here we can actually test all these functions we create once we deployed it so for now i'm just gonna be checking it with build and then i'm gonna be testing the functions after it's all said and done so this is like the trial run try to get you guys familiar with the anatomy but from this point forward i'm gonna be moving forward like faster and not explaining everything as much sounds good all right let's keep up right so one of the first things i want to do is come up to the very very top here and you see this mod hello anchor right that's not the name of my smart contract right what i want to call this smart contract is tick tock underscore clone you can name this whatever you want but this is what i want okay cool now let's go ahead and make our next function so that was kind of just a quick demo on what the anatomy of an anchor project looks like so hopefully i didn't scare you away too much and you clicked off the video but if you're still here amazing you're taking that leap so just to reward you guys let's hop back into our build and let's get back to some nice comfortable web 2 stuff so what i'm saying is let me just do it something like this make sure you're in the front end and we can x out all of these guys let's start working on our index so let me set it up real quick this is our beautiful next app that we'll have like this and how is that can you guys see that cool so again we don't need all of this starter file so let's go ahead and clean it up i'm gonna go ahead and take out the head from here we can keep the styles for now i also just want to erase everything from here onwards until that closing div let's hit delete hit save and if you remember this is actually our live version which we'll check back in a bit later i'll clean up this because it's our netlify and i'll clean up this because it's our github cool so if i press ctrl j or command j we'll get the terminal and remember since we're using the fire cli tool let's just do ntl dev and what i'll do is just open up your local machine and open up localhost 888 and we should see a blank project awesome so now we're ready to get started let's work on the index okay cool the next thing i want to do is i'm probably not going to use this styles home module and just so you know we're not going to be using tailwind for this we're going to be using vanilla css so that's been a while so what i'm going to do is change this not from container but i think i should just call this and we don't since i'm calling it app and i'm going to use this in our global css i'm just going to say class name app awesome so i just want to talk about how i'm thinking about this index right so if i'm making a app on the salon chain we're going to essentially need a wallet to connect to our app so for this app i'm going to be using phantom wallet so i want to set some conditional rendering that if it's connected the wallet is connected we're going to load the main view component right based on our ternary statement and if we're not connected what i want to do is load up some different jsx so i'm going to say div with the class name equal to login container okay and if i make that dip let's make a closing do awesome and you're going to see the squiggly line that's because this is commented out if i brought it back in though it looks a lot nicer so let's leave it in for now but because that component doesn't exist we're going to comment it out later cool so i'm going to quickly do this set up another div and let's see this one i'm going to call class name login title and we'll say log 2 because again if the user is not logged in i want this little like jsx that's going to represent a little thing that says the user should log in so let's do that div here class name equals login sub title cool and then there we just want to say manage your account something like check notifications comment on videos comma more and if i do like an alt z here you should be able to see all that in one line nice cool then there's a closing div awesome and like i said if i hit save we're going to see some errors because main view doesn't exist so let's go ahead and create it so to create a component all we have to do is come over to our front end and let's see and just make a folder let's call it components all right in this component folder i'm going to hit new file and let's say main view dot js cool and then when we make the main vjs i'm going to command b and let's do rs code snippet this is an extension that i'm using that's just going to create a component like so so if i hit save on the main view it's all good and saved and again we don't have connected yet so what i'll do is let's just temporarily make a variable called connected and if we are connected we should see the main view so let's hit save main view is not defined and guess what that's because rule number one if you want to use a component let's import said component right okay so i'm gonna do is write main view from that path so it's dot forward slash components slash main view and look at that main view is highlighted and now if i hit save hey look at that so main view is gonna load if my wallet is hypothetically connected if i were to say false we should see log on to tick tock so let's just fix this make it look a little nicer cool so now that our index is set up let's clean up our login so like i said i'm just gonna put this in our global css so if i go to not pages to styles let's go to global css i'm just going to add it on to here cool so if i do command b can you guys see that yeah cool so let's do dot app because that is like the main container if you remember index this is app the styling that i want to put for this is going to be a height of 100 vh because i want my app to take 100 of my screen or in this case the view height next let's add a background right background of 2 c 2 d 3 0 hit save boom that's the background for our tick tock and then we're going to add display flex here because i want to use flexbox for this and then we'll do a justify content center and a align items center cool so that's the css for the app and if you want to take a look if i go to localhost 3001 i actually have the finished project up and running so this is what we want to get to so i basically want to create a nice little square that has this text and this select wallet button right here okay but if you look at where we're at right now we're not quite there yet so let's add a little bit more styling to our project so if i remember see what's the next thing i need to style it's going to be the login container itself that is going to be this white background that you see here so let's select it by saying login container then we can say background color is simply just white cool save you can see it instantly reflected right here now how do i get that square that i was talking about just say 350 pixels and say min underscore height height and height then we can say 300 pixels let's hit save cool right so we're slowly getting there all right so now let's see i want to format this in the right spot so what i can do is use flexbox what i'll do is a display lex all right so anytime you want to use flexbox you have to run display flex so that you can start using it so next i don't want it in a row because that's what it is by default so i can select the direction direction as column so look what happens it makes it back to the original column but the main reason why i did this is because then i can do an align item center cool let's do a justify content a space around nice and we can do a border radius of 15 pixels and now it's looking a lot closer to what it is right so now as you can see the manager account and check notifications is a little funky that's because that one is gonna be the login subtitle which might fix it so let's go ahead and go back to there so let's target the login subtitle login sub subtitle i believe that's how we spelled it yes it's correct and let's make the font size of this uh let's say one are you okay cool just to make sure and then the color i'm just gonna add hashtag nine five nine five nine five okay and for the text aligned because i want it more center let's make it center and let's add a margin top of negative 80 pixels and i'm noticing it too guys it's not exactly moving so let's see what's going on login subtitle is that exactly what i wrote it is not that's why okay cool so let's put it back to here because i think i wanted it like this hey there you go that looks more like it so let's compare yeah so this should actually be together and that just might be because of the way i put the divs together i just pressed alt z again so now it looks more like this and see yeah i think i want it more like this all i did was just make this capital and just change the spacing around here what you'll notice is that it's not exactly like this that's because once i add you know phantom wallet button the margin top minus 80 pixels will start taking an effect okay so for now this is it let's go ahead and set up our phantom connection okay cool so the next thing i want to do is we can go ahead and press ctrl b or command b and what i want to do is let's go ahead and set up a context folder don't make it in components make it at the root of your project of your front end i mean and i'll say context okay what i want to do with this context is create a wallet connection provider so let's go inside contacts and let's do a new file and let's write wallet connection provider.js this is something that we're going to need to do in order to set up phantom wallet with our app and for now since there's nothing that we're going to see in the front end i'm just going to make this full screen cool all right so within the wallet connection provider we're going to import a couple of things so let's set it up like so we're going to be importing the connection provider and something called the wallet provider these are things that we're going to need to wrap around our app in order to get started with phantom so if you're wondering where this specifically is coming from it's from all right let me do command control b here from at solana wallet adapter dash react okay cool because if i go ahead and do control b and click on package json all right this is where we're getting that library from cool now to understand it let's keep on moving we got the wall provider if i do i'll see here all right we can see it a lot better awesome so that's not all we do have some more things to import like i want to import the wallet modal so let's get the provider for that as well let's do the water modal provider from that solana oops slash wallet slash dash dash react and you want boom all right like i said this is just a model modal that comes with this library that's gonna pop up when i press the button okay cool so next we want specifically the phantom wallet adapter and that's going to be coming from hat solana wallet adapter dash wallets cool i hope i solo that right double check dash i want to see the popup solana ah okay another thing you want to do is import in a react hook which is just going to be use memo okay and that's going to be coming from react of course cool so after we import use memo all we need to do is import something called cluster api url from solana web3.js right because when you're developing on the salon chain you could go to connect a different cluster url so that means like you can connect to the devnet the testnet the your local environment more more importantly if you want to upload this to the mainnet or you actually use you could for this project particularly we're going to be going and working on the devnet so what we're going to do is let's set up our wallet connection provider wallet connection provider we're taking that import provider and just make sure it's spelled it correctly provider wallet connection provider awesome and then what we're going to do from here is make the arrow function and it's going to take in two parameters on this case which is just going to be children awesome cool so within here we're going to set up a few variables one i'm going to call endpoint and in this endpoint we're going to use memo right and inside that memo it's going to have an anonymous that is going to simply just call cluster api url and we're just going to pass in devnet so if you wanted to change this to mainnet at all in the future like you're confident with your build it's stable and secure you can just say mainnet or if you want to go to testnet you could say testname so for like i said we'll be using devnet here and over here let's put a comma okay yep i was right comma here and then just empty array and what i want to do next is set up another variable which is going to be const wallet all right and the wallets like i said is going to use use memo once again and what we're going to do is set up anonymous function again which is going to return a new phantom wallet adapter so we're making use of that library over here all right just add the parentheses because that's actually a function and then we're going to do another comma array cool and then from there we just need to return all the providers so we can get it up and running let's do a connection provider and let's close that off boom and here we can add attribute called endpoint and it's going to be exactly what it is which is just the endpoint const that we made i'm basically saying let's use this to connect to the devnet that's all that's saying and then the next line let's put in the wallet provider that we inputted cool and what wallet do we want to provide like i said we're just using phantom if you guys wanted to use different wallets or add more you could do that through here so i'm going to pass in that and we'll also put auto connect if it's connected okay awesome so now after that i want to set up the modal so we'll use that provider and it's going to take in children not capital children because that is the parameter that's getting passed in and after all this setup we of course have to do an export default wallet connection provide save and i'll just copy boom save and i just need this to remember this so once that's done let's head over to our app all right so to head to the index what i can do is control p and not index we actually need to go to underscore app because in the app this is where we need to import that provider and wrap it within our whole next.js app right here so we need that global but we also need to import dynamic that's just something we're going to need for our wallet connection provider and this is going to come from next slash dynamic then from there we can also import that salon wallet adapter see if i can type it out adapter dash react ui that's the one and we want the styling styles.css boom so i import that this can stay the same cool and since we have dynamic what i want to do next is come up to the top here and then we'll do a const wallet connection provider equals dynamic and then inside parentheses here which is how we're going to import all of that context so we're going to do arrow function and then write import and then write dot dot forward slash context slash the provider cool so then from there we're going to write this line ssr and let's make that false awesome and then from there now we can safely wrap this with the provider itself so i'm just going to add these parentheses here and let's tab on this and then on here let's add the provider wallet connection provider boom bam cool that's a lot of space let me just format that awesome so if i hit save here now we wrapped our whole app with the provider all we have to do now is actually add that button because now we can use that okay and then before i move on let's go check in our little app just gonna click on this expected oh i know let me just take a look yes this parenthesis should actually just go right down here beautiful so if i look at the app again yep we shouldn't see any issues with that so i'm gonna make this smaller once again so that we can actually see it so now we have module not found we should have the module so i don't think it's missing let me just take a look aha adapt react ui why don't you guys say i'm something all right it's adapter save boom okay so we're all good and like i said now we just have to hop back into index and import a couple of things so what i'd like to import is something called use wallet and it's just a hook that comes from the solana wallet adapter it's a nana wallet adapter specifically the react one okay and the last thing i want to import is the wallet multi button which is literally the button that i mentioned over here it's the select wobble button and once we add that the spacing will look a lot better from at solana adapter wallet connect ui boom that looks good to me let's hit save and check this out guys if i go in between these two divs that's where i want to insert it i'm just going to say wallet multi button and bam there we go there's the select the wallet button let's give this a try let's see what happens if i click oh actually before i even get too excited guys remember how we had connected is false right this hardcoded attribute if i put true we're going to load the main view or in other words right if i log in with the actual finished app we see the modal this is the model coming to play this is the wallet that is detected i click on phantom put in your password and bam there is the tick tock and this is what i call the main view alright so if you look here that's what we're supposed to see if connected is true right so now the actual variable is going to come into play so i won't need that anymore what i will need is to make use of the used wallet and get the connected from the used wallet hook basically if the wallet is connected this should return true and then we'll see the main view if it's not connected load the login button cool so moment of truth let's see if this works let's select wallet and let's hit phantom hey look at that it's up and running it's good to go so now we're logged in that is the phantom wallet connection and just in case you have no idea what i'm talking about what is phantom if you go to phantom google chrome you should see the extension here and this is how you can get your wallet where you can hold your solana your other cryptocurrencies that are available so just add it to your chrome extension and you should be able to use the app sounds good awesome this is super cool let's move on awesome so now that you understand how this main view component is being loaded one thing that you didn't get to see from me coding this is that there's a step in between like when you first log in there should be a sign up model that comes up if you don't have an account on the app just yet uh because i did it's got load it up already so let me show you if i go to my second wallet and i press refresh here notice how it loads up right away because i already have an account i don't need to see the log it's connected and i have an account but if i were to make a new wallet on phantom let's go to add connect create new wallet boom wallet number six we'll see the login that we did before and then what happens when i click select wallet boom the signup model appears so all of this is located in the main view component and if you didn't know from the demo if i were to input something for the username and the profile image it's going to call the create user function from my solana smart contract and create a user and once that's done it will then load the actual page itself so if i were to make an account and i can show you by switching back to while it won and i hit refresh you sign up for a second but it recognizes there's a user already and bam there is the tick tock app right so what we want to do now is let's set up that sign up code so just to get you guys familiar with what it looks like i'll just load up wallet numbers let's hit refresh boom we're already connected with phantom so we don't see the login but we don't have an account so we see the sign up so what i want to do now is come over here press control p or command p and let's go to main view and this is the one where it's not going to show up here because i'm not connected to that wallet but when i log in i want to see this so there is a couple things that do go does go into main view so we are going to be jumping back and forth from this and updating it as we go okay so what i'll start is probably just the jsx of this so let me just see if i can select wallet let's see let's get back to wallet number one so we can see it instantly okay let's hit refresh on this guy phantom boom so we're back to main view now we can see this if i took main view out hit save boom it's gone so again working on the jsx one thing i want to set up it'll make more sense later is a fragment here and within this fragment we're going to have another conditional rendering with a ternary statement so this time we're going to be checking for his account okay and again his account doesn't exist yet but it will in a bit okay cool so basically if there is an account we want to be loading the tick tocks right tick tocks will go here if we do have an account difference is if we don't have an account you can go to here space this guy up call in parentheses boom and you can put these guys back together actually if we don't have an account we need to load the sign up so this is where signup is going to go so again all right i'll set it up sign so cool so now that signup's here if i hit save we're going to see an error because one is account is not defined and sign up isn't defined either so let's temporarily add is account and let's say uh false because i do want to see sign and now we're going to see what i said which is sign up is not defined yep cool which is totally fine all we need to do to fix that is just make that signup component so i'm going to new file and i'm just going to say sign up okay and now that i have the sign up js here take out that menu you do our little code snippet boom and then within the sign up we can hit save and then come back to main view and simply just import the sign up from boom so now it's there okay let's hit save do i see it anywhere signup should have the div in here where are you sign up okay cool it showed up when i hit refresh there it is there's sign up and then again just like before if i change his account to true tick tocks will go here yeah is that simple enough so let's bring it back to false and let's start making the jsx for sign up so this is what we want to eventually get into so i can see the background color of this is definitely going to be white it looks like we're going to have to separate this into a div write this into a div and then there's a sign up button as well so i'm going to go code that up now like i was saying before we're going to be using vanilla css for this so if i go to jobman b go to my styles let's go ahead and make a new file the file that i want to make is going to be the name of the component so that's the convention i'm going for so signup.module.css and since we're here let's also do main view name view dot module dot css okay so sign up we can head over to there and let's just set up the classes that i want because i already have them in mind and i don't want i want you guys to be able to see the changes as i go okay i'm gonna hit ctrl b and let's just set up the classes and i'm not gonna fill it out because again i want to show you guys so that's the auth container i'm gonna be using something called title and i'm going to be using comment sign up form we're going to be having an input field class and after input field class let's do an input title and we'll do an input contain we'll also have input itself we'll have a hybrid input again we're gonna do a login button then we're gonna have a login button oops button cool so again i just selected all the classes and reason being is if i hit save now command b and i go back to see i go back to sign up and now i import styles from then i'll say and then i'll say dot styles slash sign up module dot css and hit save and now i can just freely add classes and you won't see that annoying styles is not defined styles is not defined or it'll be like login containers not defined it's all going to be there and now i'm just free to make these dips so here's the first div and then this one will be the class name of that auth container so style dot container okay so we have the auth container already go back to the sign up module take a look at what auth container is going to have so if i say auth container here you can give this one a background color of and if i hit save you won't see anything because let's see if i add some words now there it is so now the background of this div is white right cool well that's what i have just for now i'm going to add the rest of the dibs okay cool we just added a quick h1 with a class name styles let's do alt c so that's easier that's way better then another div here this will be where our style that sign up form goes and within that we'll also have another div with the input okay another one this one will be input and i'll have username in here cool and that's its own div which will be the actual input container and it's like its name it will hold an input and inputs can actually be selfclosing i will give this a class name of input as well that's what i set up before type will be text and the we're going to have an on change here right later on let's just set it up on change equals and it's going to be we're going to be using some state here but we can comment that out for now so closing div closing div then we have the following div will be another input field and this one this input field is going to be for the url so this one will be style dot input field and then same convention as before styles dot input title scroll down okay and this one will be title for this will just be profile image oh and i also forgot to put the colon on this guy awesome and now that we have that let's add the actual input container oh and this should be style nice the input container will contain input same as before text and again there's also going to be an unchanged here that i'll put just to remind me but let's also count it out because i'm not using it yet okay so then it's closing div closing div closing div and then you need this little sign up button styles dot log in and there will be an on click here as well but i'm just gonna leave it blank for now and again the button is just gonna say sign let's save boom we're done right imagine this is your sign up but our goal is to make it look very pretty just like this okay so now for the fun part now the jsx is there to get it started looking like this we just have to add some more css you guys still with me cool thank you for answering so now let's just give this a min width i'm thinking 25 rem and then let me have min height of 20 rpm okay now we'll have a display flex oh let me just show you guys so you can see this display flex because i want to use flexbox and let's make the flex direction column but look what happens if i save this it looks like that once i put flux direction column it's going to put it back to how it was essentially but you can control that direction with flexbox again the main reason why i want to use flexbox is for justify content center and also let's align it horizontally we can do that with a line item center we can also add a little bit of padding which will just be 1.2 rem nice you see is that the right size yes okay cool now we have the padding we have the background color let's also border radius something one a okay we're getting there uh the reason why it doesn't look as like the height doesn't look as the same is because once we add the button it is gonna take up more space and the padding will take be taken into an account yeah okay so for the title is next we'll give it a font weight of there see how that looks okay didn't really change that much reads bolder yeah i don't think this does much but let me just make sure i have a title do i have a title okay and yeah i do have a title sign up to tick tock but i think it's because it's h1 it's already gonna be bold already but we can't mess with the font size i'm thinking let's make this one size 1.5 rem okay cool yeah so we're changing it back to this i was thinking that was a little too big but now it's about the same size okay and just for fun let's add a margin zero three rem zero there we go that's better in terms of spacing and now we'll work on the sign up yeah i liked making out the classes first and then building out with you guys so you could like literally see me changing it live okay now we display flex awesome now you can see because this is the sign up form right here and when i display flex this it puts it into a row and again we don't necessarily want this to be a row we just want to do display flex to start using flexbox but by default it always makes it rough okay back to normal let's do a width of 100 okay and now the margin bottom will be 1.5 rem there you go okay cool so don't freak out that the input is all the way to the left here that's what we want to do we're just gonna when i get to the input part of this we're gonna increase the width of it so it takes up all of the space so don't worry we'll do that next so for input field if i just do it with a hundred percent let's see what happens okay i'll put input filed input how you spell it input field oh i put that dot okay there was another input field somewhere oh i see now there is this again so let me go styles input filed input field and the dot dot again it says save cool all right so going back to this with 100 let's just do a background color of so there you go so this is the input field that we're seeing here it's the container right how do i know because if when i put a background color aqua it made this whole background aqua and because there's another import field div this is also going to be awkward so it looks like one block but it's actually just two divs two days with the same name and same styling cool so that should be fine then what we do want to do is margin bottom one are you a okay cool so the spacing is starting to get a lot more clear now for the title we also want to give this a width of a hundred percent all right and again you don't notice a change but if i put a background color of red right what happens when i take out the hundred percent okay i guess i didn't change anything but the background color is red and now it's taking up a hundred percent oops oh yeah i guess i don't really need this then what i do need though is a font weight and let's make this 600 okay cool yeah that is a little bit bolder and now with the title let's mess with the font size which should also be one aria okay and margin bottom will be 0.5 already cool now we're going to mess with the actual input container and if you're wondering what is input container let's do like a green there you go this whole thing is the input container that holds the input as you can see okay and in fact we actually do need to give this a background color because if you remember this is the actual background color of the input this is how we style inputs because by default we get this ugly old looking square with the outline but we can change it up by just making the background color the same as the finished which is f a f c f c cool hard to see but that should be the same color as this awesome so what i'll do now is a display flex and let's add a border of one pixel and let's give that border an e c f one f four solid oh yeah cool so now it's a little bit more easy to see now that we have that slight border but notice how this is annoying when i get to input we can remove that outline what i do want to add is some padding though for the padding i want to do 0.6 rem and 0.4 rna boom there we go now we're getting somewhere right so let's fix this eyesore let's give it a flex of one oops oh next one none let me just see something real quick okay that's weird this should actually be two input fields but when i did flex one it doesn't look like it let me just double check and troubleshoot real quick ah okay so on line 25 i have a styles filed input container like i've mashed it into one so what i'll do to fix this is we have the field we have the title we need the input container here okay there we go that's a lot better i'm happy with that now we can just go back to styling so border none let's get rid of that learning annoying outline and if you didn't know what outline is on input if i click on this that little black border that comes up let's do it outline now okay so now when i click it no outline and you can see how it looks you can see the input still it's not the same color but if i do a background none here boom custom input field i can still click this and i can still type in it super cool i think one thing i'm missing is we want the round edges on the input field and that should actually go on input container so let's add that too okay so board border radius is going to be 1rm border radius oh nice okay cool i'm getting really happy with that so let's start styling that login button there's a couple of things for this it's going to be background and the color i have for you guys is going to be 4e before like i said you don't always have to follow my colors and styling automatically if you don't like how this is styled i highly encourage you to style it on your own right padding so i feel like that's the best way to learn if you are making a project with us and making it your own instead of just just mindlessly following i think mindlessly following tutorial is good if you're a beginner just so you can get exposed to coding but going back into the code and understanding is definitely the way to go i really can't spell radius for the life of me but this is how you spell it now it's looking better okay so for color should be a nice whiteish color now let's do a cursor pointer cursor pointer yep now it feels like an actual button and there's actually a little transition that i have where it changes let's see if it's working all right do you see that the sign up button boom it's really cool oops i clicked out of it yeah so to do that it's this cool little transition here nope am i not logged in oh yeah we already have an account on this let's get back to this wallet or actually this wallet there you go cool like i said cool transition when i click on it it's just a nice little touch which is going to be 0.2 seconds linear cool so there's that transition then we're gonna do a max width of 500 pixels oh yeah this guy needs to see it too very cool max width 500 pixels and what else oh the min width this is really going to change it 300. there you go cool awesome now i'm just going to make sure the sign up looks a lot better and to do that we can just add display flex right you see something display flex and let's do a line item center okay so that so if display flex is actually row align items will now center things horizontally vertically and now justify content is going to put that in the center there cool from here let's add a font weight of 800 okay nice and then a font size 1.2 rem oh i got way bigger nice and i can already see the difference it's like a spot to diff game right what's the difference you guys see it yep i know i see it too tick tock has a capital t here okay cool and again we have the login button active which is going to activate that transition and when that transition happens i want to see scale 0.9 let's test it out this feels really nice all right so that's pretty cool again you can take any things that you learned if you didn't know how transitions worked for a beginner you now know that you can do transform scale with an active state to do this nice so that is the sign up to use tick tock cool so the next step is i want to start getting this function working where we can create a user because we already have it written in our smart contract we just need to hook it up into our front end so at the moment i can click this button all i want but nothing is going to happen so one thing that we're going to have to do first there's a lot of setup involved when connecting it to your front end but the first thing i wanted to do is probably make a new folder inside the front and we'll call this folder utils all right inside utils we'll also have a file called const.js all right this is where this is where our constants will go and since we're not going to be doing any front end for a while let's just go ahead and make this bigger okay cool can the class see it yes you can awesome so now we're going to do and import the cluster url api url again from solana web 3.js like we did before and then we're also going to do the public key from there as well public key and let's make this camp case okay awesome and then what we're going to do is export const right solana oops oh wait we already did that already if we don't need to do that what we need to do is export cons tick tock underscore program underscore id if you guys are wondering what the program id is if i go back to my website right and i make this bigger i'm on the salon playground when we first started if you notice this was one one one one one but when i hit build it generated a new program id which again is just your contract address if you're more familiar with that okay so here i'm setting up a variable that has just that so to do that we're going to set it equal to new public key and inside we're just going to paste that address so i actually should have grabbed it while it was there but we can easily just copy this this is the program address and we're gonna hit paste right here boom so that is our program address okay cool and another thing that we're gonna need to do over here is oops let's cancel that over here is if you go over to here one thing or one step that we're gonna have to do often is after we deploy we're gonna have to export the program idl okay this is gonna contain all our functions and our structs all the information about our program essentially okay and what i wanna do with this is essentially click on this and it should open in vs code boom so you can see in the idea we have the hello anchor name the bruiser profile image right that's the default anchor program so that means this isn't the right idea what we need to do is actually deploy this now okay cool so this is good to know so if i refresh and i hit deploy all right we're back to smart contract stuff if i hit deploy you're going to say initial deployment cost 5.24 and i only have four solana right so even in the devnet you need solana but luckily on the devnet you don't need to pay for it what you could do is there's a solana faucet right somebody made this website where you can just get solana easily so i can just airdrop two and put in your address so the address is going to be right here so i just want to copy this so i'm just click on this it takes you to the salon explorer okay this is ticking all so what we could actually do is come over to here and let's click on oops we're connected again let's click on this wallet thing let's click connect to phantom wallet so we could just directly connect to my wall cool and i don't want to be wallet six let's be wallet one because i definitely have some salon in there cool so now you can see this is the wallet this is the new wallet address and now it's easier for me to get it and i should have plenty of soul but again i wanted to show you guys if you did once you can just go to your phantom wallet copy your address paste it on here talk about how much soil you want usually i just do two at a time and click devnet cool successfully airdropped to seoul to that wall address so i remember i had 15. so what do i have now i have 17. okay so let's try deploying let's just do build and deploy so i'm going to build just warnings no errors that's fine and let's hit deploy oh i see it's because it still wants to use my playground wallet that's fine then that just means that we need to connect to our playground wallet then so i guess i do have to go back here i want to see if i can actually just copy this without any issues no there can be a smart way to do this extra program credentials program id we got that oh silly me how could i forget the reason why it's taking a long time to load is because it should actually be devnet boom okay cool so you can see my attempts to build are here but really i just want the address give me the address and what i can do now is on the solana faucet instead of my actual phantom wallet i'll put the playground wallet which is the authority to upgrade and deploy your smart contract i'll hit devnet back to seoul faucet and now we have six sole i suggest just doing this over and over so that you have a lot of soul and you don't have to worry about air dropping for a while but since i'm building with you guys i'm just gonna head and hit deploy because we already built and see how it took the solana and now we wait boom deployment successful so now we should have a new idea so let's just double check that now it's ideal three i'll delete them later but there you go the name doesn't say hello anchor anymore the instructions are here right user profile image url and type string cool and now we can see if i press alt z create user that's there awesome cool so let me just go back to that vs code and what we want to do is take this idl right head over to here all i did was hit copy right copy and in my utils i'm going to make a new file and i'm going to call it tick talk clone dot json this is very important every time when i set this up this is the name that i want to use and inside this will be the idl contents that you had before cool so now in my utils it's there what i can do from here is go to const and import it okay so if i want to import it all i'm going to do is just say import tick tock from that path so now it's there and every time i say the word tiktok here right i'm gonna say export cons talk idl and again this step is important so that we can use this to interact with our program on the solana chain and just run the commands or instructions that we set up on there okay cool and that's going to be our constraint yes all right for my next trick we're going to go back into the utils folder and let's make another file which oops not folder and make another file and we're going to call it utils.js okay and then utils.js there's a couple things that we need to import so what i'm going to import is import star as anchor from this is the at project serum anchor right so we're going to import anchor here and we also want to import something called wallet not connected error right from the solano wallet adapter base and then remember the things that we literally just set up the tick tock idl tick tock ideal and we also want the tick tock program underscore id which should also come from the cons yep tick tock program underscore id amazing and what we could do after that is let's set up a function so the function that i want to create and i make sure i export this one it's called get program instance so like i said we need to from the front end get the program that's on the solana chain that's the first step so what we're gonna need to pass is connection right and wallet so what kind of connection are we going to have and what kind of wallet are we using so there we go semicolon i mean curly brackets here and all we're going to write is if there is no or not wallet dot public key then we want to throw a new wallet not connected error okay just some error handling for the edge case and if there is then let's cut up a provider variable and that provider will have a new anchor right we're using anchor anchor provider connection wallet let me just format this connection wallet let's see what else that we passed in as well as the anchor dot anchor provider dot default options yep cool awesome and still in that function i just want to set up the idl cons idl is equal to the tick tock idl that we imported and then this will have the address of the program or specifically the deployed program so here i want to save it as program id equals tick tock programming so anytime i'll go back into my cons and redeploy my smart contract i just change this and now it's dynamic so when i do program id it'll be known as program id and we can also make a variable called const program and that's going to be equal to this program client from that we create from the idl so we're going to say anchor here dot program idl comma program id and provider yes sir and then last but not least let's return that program that we just created okay so get every set up everything pass it in to the client or the cli client and return the program cool i think this utils looks good what i want to do now is set up our own custom hook so if you didn't know and react especially if you're doing function based components there is something called hooks which are essentially like super powers or functions in react we can actually make our own custom hooks so what i want to do is let's make a folder in our front end and i'm going to call it hooks right this will be where two of our hooks are going to go the main one that i want to focus on if i want to create a user it's going to be a hook called use account and that's just what i'm going to call this awesome so with use account there is a lot of things we need to import on this one so bear with me we're going to import and use effect hook right come in here click react and we're going to import token program id and this program id is not the one that we created this one is specifically going to come from the solana spl token one you also want to import use wallet from the adapter react let's see we're going to import get program instance from utils that one we're getting from our details and that should be it another one probably is if you remember going back to here nope believe it is in here we did this import cluster api we're going to do that again but i just thought of a way to make it just a little bit more dynamic so what i'll do is head over to const instead of calling this directly and then passing cluster api at devnet this is what we could do in const we can set up another variable actually we can say export because i want to be able to use this solana host right this is just a variable to hold our devnet url so again this is a good time to use this right you can say cluster api url devnet right so here we go we have a dynamic way to do this without manually putting a cluster api url everywhere what i could do with this is the following so if i remember while the connection provider i can just import solana host right so we don't need this anymore we can just import the lana host from the const and then instead of saying this guess what we can say salon host right with that same example we can go back into use account and let's import solana host again that's the whole reason why we did this i'll say solana host and bam boom okay i keep saying noises boom bam boom so after we do that let's set up some variables here we can do a const anchor this one we're going to use require for pat project serum anchor and then we can say cons utf 8 is going to equal anchor.utils.bytes.utf8 okay cool so that's that variable setup there's come up with more things we want to destructure this anchor real quick and get the bn and get the web3 from the anchor object and another one i want to get is something called system program and that's going to come from web3 so yeah we've got web3 from anchor and then we got system program from web3 now we want to set up a variable here called default accounts and the default account is going to be an object which has a property of token program which will in turn have a value of our token program id and again it's not the one that we made it's the salon from the salon spl token okay then we have a clock attribute with the anchor dot web three dot sis var there you go then we have the system program oops not that one which is going to take the actual system program we destructured but specifically the exact program id nice okay cool so now for the actual hook itself right we just set up an object here and imported a bunch of stuff what this hook will actually do is the following we can say the function const use account right it's going to be equal a constitutes account is actually gonna be a function and it's gonna have a variable called cons and it's going to use wallet and that's what we imported here cool and we also want to set up a connection variable and the connection is going to have a value of the web3.connection and we just pass in whatever url we're using devnet testnet and if you remember it's all stored in solana host right now it's making sense so probably let's do a cons program and let's use the get program instance that we made earlier in utils right to actually get the program and if you remember what it passes in it takes in a connection and a wallet so we can just pass in the same thing to the devnet and then the wallet we pass in is wallet from the used wallet awesome so for cons sign up oops it's a variable which will equal an asynchronous function okay this asynchronous function is going to take in a name and as well as a profile because remember the front end it's going to take a name and a profile image and this function is going to contain the smart contract instruction call so in here we're going to have to call the create user okay cool so if i want to call create user there's a couple things that we need to do so the first thing is the following to make a variable user pda right and we say await anchor dot web three dot public capital k key dot find program address okay and i'm just gonna press enter for spacing and we're gonna do in this it's gonna take an argument of utf8 dot encode use and then wallet dot public key dot 2 buffer and last but not least it will take the program dot program id okay and remember what program is it's program from the get program instance and we get the actual id here just press let's see how's that cool awesome we can simply just do an await now and we also want to wait for the actual instruction call so if program oops program if program is the actual program itself then we want to connect to it by doing the rpc and from here call the name of our instructions what was the name of our instruction in our smart contract do you remember exactly it was create user right just double check salon playground what is our command create user awesome make sure it's the same spelling okay so that's it rpc.create user and what does that instruction and the program take takes name and profile yes is it coming together now i hope so i really hope so guys again these are not easy concepts to understand the first time it takes me a while to understand and i'm still learning even today so my goal is if i keep repeating those concepts it's just going to click right so account user can be user underscore and authority is going to be the wallet dot public key like key comma dot default accounts all the accounts that are associated with this smart contract and at the moment it's technically zero but eventually if a lot of people are using your app you'll have a lot of counts okay cool all right so there's closing curly bracket closing parenthesis closing curly bracket and then here is where we want to return our sign up and again that's our function cool so that is it we're not actually calling the create user yet we just set it up so when we run this custom hook then create the user okay and now the next thing to do is figure out when do i want to run this hook okay so i'm super happy you guys are following along so far and i know it was a lot of setup but now we can go back on the things we already made and get everything up and connected so what i mean by that is let's head over to main view again so if i scroll here main view and let's just set up a bunch of things that we wanted to get so that's gonna be import use effect right we're gonna be using some of this later use effect and also the hook use state from react okay and then we also want to import use wallet from atlanta slash adapter dash react yay okay and then from there i put in ort m port okay then we can also do oops import our good old friend solana host we're going to mac the maximum use of that variable and this is going to come from this path i believe it's utils yeah nutils and then const we also want to bring in get program instance right so now this should all start being familiar to you on what everything is which would make me super happy so now it's like utils details yeah okay and then we're gonna do another import of the token program id but again this is from the at salon spl and if you didn't know spl is solana program library so that's what the program id is for all righty so we have that and now another thing we could do is import some hooks or just the one hook so far which is going to be import use account from the hooks slash use account so now we can start using this okay oh and one thing i forgot to mention too is we didn't import the styles from here yet so let's import styles from that path which was dot styles yep and then we could just say main dot module dot css and we do have that right guys let me just double check it was command styles yes sir okay it's right there main view okay cool so now we can start like making the jsx of the main view later okay so there we have it all right so moving on let's set up some more variables and the variable that i want to set up is the anchor one again so let's set up an anchor is equal to the require the project serum all right boom and cons utf8 it's going to equal anchor.mutils.bytes.etf8 okay and just like before we want to do the structuring of the anchor object and get bn and web3 and we want to destructure web 3 again too let me just fix this const cis program set that equal to web 3. yes cool so we're getting again web 3 from anchor and system program from three awesome i also want to be setting up my default accounts again let's kind of let's do a default accounts you're going to notice as we're building there's a lot of the same code or just similar code in different places so once you know what the piece is you can see like oh this goes here this goes here token program it's going to be exactly the same as last time token program id clock will be anchor dot web 3 cis var cloud clock pub key and system program will be system program dot program id yes okay got the default accounts and remember how we got the use state there is a bunch of state that i want to start setting up and to do that if you want to start using the hook it should be inside the function component itself so here i'll start setting a bunch of them up cool so there's you state here and for now we'll just do is count so now you're going to see this is where it comes from is account and set account and the default state will be false if i ask you guys if it's initially going to be false right is account is going to be false which one is going to load sign up or the tick talks will go here so if you said sign up you're right because the default state is false there they sign up then we can switch this state to true so we're kind of using this like a flag or a toggle okay awesome and while we're here let's do the cons wallet is equal to use wallet and we're going to set up the connection again which is going to be new anchor dot web 3 dot connection and this is where our solana host comes in so i'm basically saying the connection is on the devnet again okay and the cons program remember the get program instance we're fetching the program essentially with the connection which is devnet and the wallet which will be phantom okay cool here we can actually use the used account hook so remember what the use account hook does right where are you use account hook yes use account is actually the function sign up right where it actually keeps saying actually it's the function signup which will in turn create the user from our program so coming back to main view let's use that hook so i want to get to the sign up function from use account right so let's think about this in my main view is that where i'm going to call the sign up function what is main view main view is let's go here main view is essentially the view after the user signed up which is where the tick tocks go like i was saying so it wouldn't be in main view the sign up function should go in sign up so now the naming should start making some sense too cool so how do we get the sign up function in the signup component well there's something called props which essentially you can pass things down from parent to child so if i were to illustrate this concept let's picture like a square here that represents our main view right so this is m for main view component right what is the child main view component it's going to be sign up because that lives inside the main view so we can illustrate that drawing so the child of maine is going to be sign up so i'll just write it as sign i feel like khan academy right now okay cool so where does the sign up function live the signup function lives in main view so let's have a little circle here and that represents the function we're good so if the function is here how do i get it to this component we're gonna have to pass it down to sign up as a prop okay so now you might be asking lance how do i pass it down as a prop luckily it's pretty easy and it's like a react basic so this one's for you beginners if i go back to my selection here all i need to do to get that to start working is come down below here and say sign up alright that's the name of the prop is equal to the sign up function so this is how we pass down props to a child all right while we're here i also want to pass down another prop called wallet and what i'll pass is the wallop republic and we got to make sure that it's 2 base 58 because that's the format that it wants it in or that makes it a lot more easy to deal with or work with cool so those are just so if i ask you how many props we passed down you pass down two and they will all exist in one prop object okay cool so pass down to props to sign up let's move over to sign up and i'm sorry the whole time the sidebar was here and then let's go to sign up and now you might ask okay so now that signup function exists or is passed down to sign up but you now have to accept the prop so usually what happens is you go props right and if i were to console log this you would see an object that contains wallet and sign up and to get the signup function you have to usually say props dot signup cool but we can use something called destructuring which you've seen me done before which is this so if it's an object to destructure it you write out the brackets for the object and instead of writing props i can now just write the names of the attributes so here in this case it'll just be sign up is this the real one i'm going to use i just have wallet there just in case i don't believe i'm actually using it but i could revisit that later all i want to do now is just pass in or accept the signup so this is so every time i say sign up now i don't have to say props that sign up or in this case sign up signup this looks so weird to me all right cool sounds good and while we're here let's also import the hook that i want to use which is just going to be use state which will come into play in a second now let's see what's going on oh from react awesome so if i hit save this is our main app maybe we can split it up a little bit cool how are we doing nice okay so now no errors right i can see sign up if i were to console.log it like i told you let's see what we see we might not see it yet because we're not in the sign up part yet yep i was right so what we have to do is this click select wallet phantom log in again webpack imported module is not defined oh one second okay this is actually telling me that use account in main view is not a function okay so let's look at use account okay it's not a function ah there we go the reason why it's not recognizing as a function is because i forgot to add a export default use account hey there we go so now we can head back over to sign up hit refresh real quick hey so here we are so now let's see if my console log is working and it should show us a function yes exactly so we got our hooks working awesome so now we successfully passed down the sign up the question is when do i use this function and what are you guys passing into it so in other words if i were to make an account called lance and my profile image is this cool guy right here right how do we save this and then pass it to the signup function because right now it's really not getting saved that's where the use stake hook comes in and we just have to set it up like so if you come up here we don't need this console log anymore what we can say is const array is equal to use state because again this remember i talked about the structuring an object this is how you destructure an array because you state actually returns an array with two things right whatever an array of whatever you pass in here by default it's undefined and a function and i can define those by giving them a name so i'll call that username and the function is going to be called set that username that's typically the convention is set whatever you put here by that logic how should we do profile try to guess it before i write it i'm gonna say const profile is set profile you got it so then we say use state right here yeah cool awesome once that is done right how do we then sign up we can create a function called sign clicked all right this can really just be whatever name you want i'm just going to do it that because it makes sense to me and let's console.log signing up all right cool we'll just leave that at there because it's really noticeable awesome okay cool so this function is something we just created when is it being called i really believe program is just thinking so if i was thinking when should the function be called if i'm using this app if you said when i click the button you're correct at the moment we don't we shouldn't see a console log that's because in here and i mentioned this before we're going to add an on click yeah in that on click we're going to have the sign signup click and notice it's signup clicked not the sign up function yeah so let's save that and now if i make this guy bigger let's see what we see boom every time i click this we're running that signup function we created so what do we want to happen when the sign up is clicked that's what i would ask myself and what i want to happen we call the sign up function right we say sign up i think it's just like this sign up and what do we pass in the signup function if you forgot what we have to pass in go back to use account and look we pass in a name right name and profile i hope that's coming together for you but then how do i pass in the name i could hard code it right you're right i could put lance here and then i put the image here but that means every time i sign up all the accounts are going to be lands with the same image i want to make this dynamic so to make it dynamic we need to put like a variable here so what variables can we put here that's right username and profile so for now let's take this out because i don't want to call it when i press it let's figure out how to say like if i were to write lance here how would i save that using state so that's right you might be catching on if you were paying attention right on change is going to come into play now so we don't know on change basically will run when there's a change in this input field right so let's say on change we're going to say e for event and we're going to say set user name so using that function from the state and we're going to say e dot target dot value so that's how we grab the value of the inputs on change so essentially we want to copy this down here right but what should i change here if you're thinking about this yes you guys are experts right it's going to be set profile yes and it's going to be target that value still because that's going to be whatever i write here so what should we do to see this is let's console.log right username and profile let's try to run this experiment and i'm going to make this bigger so it's super clear because once i explain this i'm not going to explain it as much later on awesome so in the console when i hit refresh for the very first time we see undefined and that's because there is no username there is no profile image but if i were to click on that input field and let me just make this a little bit bigger if i were to click on the input field of username if i type in l will happened right look at the console it's a l in there because when i click l that's considered a change and every time there is a change we're setting the user name so that's why only the top part is changed if i say a and c e right so the latest one is what the username is currently all right if i'm talking about this guy right here i hit paste how many changes would this be if i hit paste one change so now username is lance and my profile image is this image right so now we have the variable that contains whatever i put in my input the reason why i'm taking my time to explain this is because you can reuse this for any app all right this is like react fundamentals to me so enough over explaining if you guys already get the idea feel free to skip but i hope that was you were able to understand that so now that i know that these two variables will always contain what's ever in the input i can then call sign up and then pass in username for name and profile for the profile image beautiful so now that that function is done let's see what it brings us and as i was saying once that function is done it's all hooked up and it should be ready to go one last thing i will do though is coming over and use account once this await is done right i want to have a console log here is with user oops user is signed up this is how we can test if code went through from the front end there's a way to test it on the anchor build itself and also solano playground itself but since i'm already here this console should only run if this function call is resolved does that make sense cool so moment of truth now i'll go ahead and bring back my little website and for all intents and purposes i'm going to hit refresh cool now there's no username username state is blank because it gets reset and i'll say lance and my profile image will be this guy and let's see what happens right and actually should make this bigger in fact so that we can see that console look all right so i'm expecting errors but let's see if it works on the first try okay transaction may have failed to confirm usually if you see this that's not a good sign and there you go failed to send transaction transaction simulation failed let's see if i can troubleshoot this problem okay so from my understanding whenever i see this that usually means they try to take seoul because any time you do something on the chain you have to pay some transaction fees and that usually means i have no soul but i thought i did but if i check my wallet while it's six oh obviously now wallet six has no solana so that makes a lot of sense why this isn't working so let me just refresh this real quick and actually change the wallet where i have plenty of soul so i'm in walnut 1 and i have 17 so that shouldn't be an issue let's see if we get the same error so repeating the steps again if i see if i write lance now username has something if i paste this that should be the dice pair oh it gets so happy because it doesn't say transaction may fail this is actually working once it approved a user is signed up so officially there is an account that is signed up with our program and its name is lance and the profile image is this dice pair of now the seed kodi so that's super exciting to know every time we make a new function on solano playground or your smart contract we're going to be testing it on here and it's the same process throughout right we did a lot of the setup so it's going to be the same thing so that's exciting let's move on to the next function okay so i think that's a pretty good spot to stop on the front end i want to start coding back on the smart contract so i hope you guys are ready for to come back to that one thing i want to do is save my progress by coming down below and let's hit this vs code right here if you remember we do a command j and then let's update that github repo so if i do see boom so we could do a cd dot dot and let's do a git status right so if i go to date status you can see all the things that we change and if i increase the size of this it's going to look a lot better all right so look at all the work we did so far one thing that you should get into the habit of is saving your progress by updating on your repo if i do get status again we should see i added all those files so git commit and i know we added a lot of things it's been a while since i've pushed so let's just say add i added create user functionality because that's kind of summing up everything usually i like to be pushing more often but that's a good start so if we do that we can do get push and if you remember our old tic toc lana solana tik tok app.net life i think if i go to netflix here go to log in we should be able to see our website update all right so this is what it was at the very beginning of this video but now if i come below here it's going to be building again so every time we push it's directly connected to our github it should push all those changes and show the app again okay here we go it's starting to move now it's not going to take as long as the initial deployment because it's already deployed so it's a lot faster now awesome so this is good to see side is live and the beautiful sparkle emoji so this was our live site i hit refresh wow it's already live and it's already up to date so we can connect our wallet hit connect and we can create a user okay that's good to know all we need to do now is next this out and let's hop over to solana playground okay so going back to the playground let's just clean a lot of this up we can keep these guys dice barrier cool but i don't need that specific image and we don't need any of these so it's all cleaned up full screen and now we're back to our smart contract i hope you guys didn't forget but i want to add another function so if we're thinking about ticktock right what are the functions on here so this is the finished app once again let's see am i on one sure boom so i'm already signed up and we have all the videos here right so how did we add the video on tiktok if you remember the demo we clicked on this guy and then we uploaded a new video by inputting a description and putting up your video url if you're already looking at this and thinking about how we did create user it's a lot similar right so what did we do if you remember the steps we created a new function or the instruction that we want our program to do awesome so let's get started all right so to get started i remember i made some variables here that we have to determine the size of i'm going to make the rest of them now so we did username length we also need to do something called text all right for text length all that is will be the video and comment text length which will just be a use size again but this time of 10 24 so we can have a long description essentially okay other than that another variable that i want to set up since we're already here is going to be concept number of allowed likes right space we don't want the users to be liking the same video over and over again we just want to be able to like it once cool so we're just going to say five then after that we're going to say const number of allowed likes wait no i did that already awesome so number of allowed like space will just be five okay that should be good for now in terms of hardcoded space what we can do now is start coding up the instruction and the next instruction is gonna be like i said create video right that's the process of uploading a new video on tick tock right so how do we start off a function we can use this kind of as a template so we'll say pub fn and the name which is create underscore video and for create video it's going to take in a couple parameters as well which is going to be ctx for context and this time is going to be context remember if we looked we took create user i'm sorry guys let me zoom this in so you can see that a lot better how's that create video will be the context right so again we have to create a struct so let's do a description it'll be a description parameter and what is the data type of the description of the video it's going to be a string all right how do i know it's a string it's because this will be considered a string and this is the description right here building chess app and react okay so description will be string the video url which is a lot like the profile image url is gonna be string as well all right so we also wanna store or take in the creator name right so if i'm logged in as lance this is where we're gonna pass in links and then of course the creator creator url which will be a string as well so they're all strings except for the context of create video okay and we need this little arrow here and we're gonna type in program result and that's going to be what gets passed in so for program result right we just want to log the description here we'll say and oops description so we can see it once a week another thing i want to do is literally get the video so before i move any further remember how we we're starting out this function and for it's a lot make a lot more sense we created the struct for create user i'm going to do the same thing so let's take a moment to do just that all right so coming down below over here where we see the structs what i want to do is make another one this one is going to be for create video so just if you scroll up here using this as a template we also want to derive accounts so we're going to derive accounts okay when we derive accounts we have to write the struct exactly right over it we're gonna write pubstruct the name of the class or the structure here so we say create video and we always do info here okay info after that curly brackets and everything within this curly brackets is going to define what needs to happen or what are the behaviors of creating the video okay so first we need to authenticate the video account right so we're going to do the brackets account just like we did previously nothing new and we had parentheses here and oops it automatically finished it for us but we just want to do init we're going to set the seeds again the seed is going to equal b video dot as underscore ref parentheses comma random key dot key dot as ref okay cool so now that we set up the seeds we also want to add the bump again just in case it's not a unique hash we're going to add the bump to increment it by like one five and i think it's up to 20. uh the pair just like before is going to be the same as the authority cool after the pair we have to define the space of the video how much space does it take it's going to be size of video account video account okay and that's parentheses here plus right all the defined stuff that we put in at the top so it's going to be whatever the size of video count and text underscore length plus the username length plus the user url underscore and last but not least we also want the video url link video underscore url let me always do a plus eight right here plus eight i wonder if this works without z no okay cool so that should be fine i wonder why these aren't highlighted the same way diffuser url length let me see that's interesting to know but that's essentially should be the size of it all right plus i'm going to keep going i wonder if i can hit enter here plus 8 plus 32 and then it's going to be times the number of allowed likes right so we're actually using that as well space all right so there's 32 bits in a pub key and we have five so for this one cool so there's a lot of things that goes into the video essentially that's why there's a lot other than that underneath this we need to define the essentially the attributes of the pub key which is going to be pub video which will have a value of the account info video account and again we don't have a video account just yet we're going to create that struct in just a bit next we're going to we're essentially going to do something just like this or similar we're gonna get the hashtag account again and say mute and this time this is gonna be random key which will also be account info info okay after that let's define the authority right essentially the signer who pays the transaction fee once again it's literally the same as this all right i can even copy paste it because that's going to be the same okay other than that we need to run a system program again and we also do the clock so do you see what i mean like after a certain point you're going to start to recognize oh some of these things need the same exact pubs so there you go for that and remember this one is just to save the time cool so we made the see we made the create user struct and then we made the user account we made the create video now let's make the create let's make now let's make the actual video account itself okay so to do that we can just get our account attribute and say pub struct once again okay cool so this one is simple a lot more simplified and easier to understand a video count right what should go what should be the keys of a video object if you're thinking java the ones that might not be inherently obvious would be you need to keep track of the authority which was just pub key you need to keep track of what else the description of the video so if you remember if this is the video object itself there's a description that we're going to need to save or set so we can set that up by saying pub description and we define what the type is right after okay so we also need pub video underscore url which will also be string right these all are going to be strings the most part pub creator underscore name string we also have pub creator url which will also be string and we'll also have pub comment count right we need to be able to count how many comments there are so if i go here you can see there's one on this one zero on this one four on this one so each video has a property called common count and this is where we are setting up or defining that just like we would in a class so then that one is going to be unsigned 64 integer so pub index all right the video's index is going to be 64. because we're going to be multiple videos so we're going to give them an index as well so let's do pub creator time all right this one will be i64 okay assigned 64. cool next we want to set up something called a vector which is something you'll understand if you know rust so you're going to say people who liked and that's going to be the property beck pub key so the way i look at this with rust you should know exactly how much space you're using with the vector the amount of likes can drastically go up right there's no we can't set a real hardcoded limit to it so with the vector you're just essentially allotting space for it and pointing to it okay this is how much people liked it all right at least from that's to my knowledge okay so pub likes you can say and then you can say pub remove 64. cool so all of that is what makes up a video object and we're taking that into account when we create a video right here video count and we're also taking that account when we're talking about the space okay cool so one thing i'll do is i should add some semicolons i believe i'm missing some but again build will let me know let's see i'm expecting a couple warnings or errors cons text length i see help provide a item for text oh duh i have to put like the use size of it i just put 10 24. let me just double check yeah use size i know i did put u size i just put two here build mismatched okay so i'm just going to go through all these errors one by one let's try to figure this out together oh there's actually is a semicolon that i just added that shouldn't be there boom i'm gonna hit refresh to clear it it's pretty easy to read nice that's normal oh did i not remove that semicolon oh no i didn't okay compiling oh there you go that's where we need some semicolons i knew i was missing it somewhere okay expected a comma oh not single one comma cool and that definitely affected the likes there pine pub key in the scope can just refresh that again let's see yeah if you wonder why i'm refreshing it's because sometimes it's hard for me to read all those errors there's so many but if i just click build let's see again yeah just move this around it's easier to see okay that's a little bit easier to see now program result expected result that not have program result we have salon entry point here so let me see if i copy this over i might have just typed this wrong so this is program result reflected here should be the same oh duh i didn't finish creating the rest of the function so program result isn't going to give anything okay cool now i see the issue let's just carry on what we need to do is create underscore video right create okay so and then if you're wondering what happened with the other errors i might have missed up something with beck public key so if you need a second i'm going to show you guys this just make sure your video count all the properties are this and pause it give you a second cool awesome so now it's all fixed up i just format it a lot better and fix some spelling okay now we can move on and finish the rest of the create video function so that's going to be over here and i'm just logging the description that's passed in from this function and now let's actually get the video so to get the video i'm going to make a variable here and it will say and mute right because remember mute means i'm going to be able to change it if i don't put mute it becomes immutable and i can't change it oops the account video account we're getting that video account and then on top of that we're setting that equal to mute ctx so essentially this video will have a data type of account video account and it's going to equal the context.accounts remember it's taking in the context of create video so we're going to take that context go to the account and then grab the video so we're getting the video so this thing right here you can look at it as get the video okay once we got the video with that line of code just line this up with that line of code what i want to do next is set the authority so if i say video because we got it now the authority i want it to equal the context of the accounts and in the count the not only is the video stored on there but the authority is too we know that from authority dot key okay boom then we also want the video dot description the description must be the have the value of description that's passed in so notice how we're taking the keys from the video account struct and we're setting and defining the values for them here okay and this is the one where i can't forget i should be putting a semicolon okay semicolon i'm going to say video why this why isn't this formatting the way i want to okay cool so let's do a video dot video underscore url that's the next and do video that's what gets passed in all right then we can do a video creator name creator i'm just going in and set that equal to the creator name that's passed in which should be the same of the username right so if i log in as lance the creator name should also be passed in atlanta so video doctor underscore url gonna be equal to that creator url so we're gonna technically separate these just to visualize a little bit better this is like the video stuff this is the creator's information cool and each video is going to have a comment count so what should be the value of the comment account at the beginning when you upload video it shouldn't start with five comments so that's why i'm gonna set it to zero also video dot create tour underscore time that's gonna be ctx accounts dot unix underscore time stamp so we can have a timestamp associated with the creating time okay then we have the video that likes which is just like comments how many likes can we expect when first creating a video it's zero awesome okay and once all that's said and done we can say message here and say video again which is just logging and just like before we want to do our soul log and compute the units so we know exactly how much units are left and every function has to end with an okay because that's how you know everything passed and i believe you can pass things in here as well but we don't need to awesome so let's run anchor build let's see what errors come up oh look at that message and description okay that's fine we just need to add a semicolon i can understand that let video unexpected token oh that's because yeah that's because i didn't add the semicolon so this compiling separates it so cannot find function solana compute unit okay that should be units okay compiling so now it's the video authority no field authority on type count video account okay so let's go into video seven let's see what we're missing so it's saying oh authori thor ritti okay finished no way okay cool awesome it always makes me happy when you run the code and there's no errors who can relate finished let's go so now what we could do is upgrade this right the cool thing about cilantro programs is that it's upgradable unlike other contracts because like once you finish the contract and you put all your functions in there you try to change it it's not gonna work luckily with these programs you can upgrade them so i'm going to upgrade this contract and once we do we should update our idea luckily i had enough soul see did i have enough soul deployment successful awesome so one thing i want to show you is if you come over back to vs code right i zoomed out a lot and we just do command j here command b awesome and let's just head over to the idl right or in other words the utils tic tac clone json do an alt z here you can see how there is a create user function in the under the instructions but there shouldn't be well there now there should be a create video instruction and that's what this idl should contain so just to make sure everyone refreshed and let's do a idl and export it idl4 and let's take a look if it's there so now we have create user as an instruction and create video awesome so let's take this idl for and copy the contents and remember this idea is not in our project right so we can access out let's x out two and let's make sure we paste it in our tiktok clone and now that's a lot better let's hit save so now when we get the program instance and we get the idl it's updated with the new instructions and the structs that we created on here so that's the process to update your program with your front end okay so remember that we're gonna be doing it about two more times after this so now that we have that function let's set up the front end for it yeah all right and we had our fun making the create user function but now let's go back into comfortable front end web 2 stuff so let's head back to the code so coming below here oh my god this looks insane but we can just save this and let's head back into main view just for a second here and what i want to talk about now is we made the function for create video but in order to test we have to create something that's going to fetch the videos that are already there so at the moment there is none because we haven't uploaded any but we need to set that up still in order to see something happening so what we're going to do is come over to your hooks again and let's make a new file this one is we use tick tock tick tock.js boom all right so we're making another custom hook all right so i can go ahead and make this a wave okay and we can increase the size of this too how's that guys all right cool so follow along with me it's going to be a similar process to when we did the last custom hook except this time we want to be fetching the video accounts that are in the program so let's import which would be the first thing we do the token program id from solana not from our utils from solana sbl token okay from there let's also get the wallet from solano adapter react we also can import something called public key which we have before public key which will come from solana web3.js and our best friend the solana host okay so if you think about this logically we want to be getting the videos from the smart contract right so in order to do that we have to get the program luckily we already made something that gets the program so let's do import get program instance from there we're going to do utils slash utils that's where it lives we can also do a const anchor equals require the at project serum anchor okay now this thing is similar to literally the last hook we're gonna get the anchor.utils.utf8 okay then we use const bn because we're going to be destructuring again anchor and then remember we're getting web 3 from here so what did we get last time from web3 we got you're exactly right system program from web3 okay cool let's set up our default account again then it's going to be token program is the value shall be token program id and then the clock which just saves the time will be anchor web3.cis bar underscore clock underscore pub key system program is going to be systemprogram.pro id cool so that's our default accounts nothing new here we're just setting it up once again now for the real function itself tic tac we're going to do const use tick tock okay awesome this shouldn't be curly brackets it should actually be parentheses and again since it's a function we just got to set up like one there we go okay now that we set up the function let's take in a couple of parameters and there's actually a lot that comes with the use tick tock we want to get a parameter called set tick talks right this is capital t and then user detail video url description remember this is all the besides that tick tock these are all the keys of video object that we created from our smart program we're gonna pass all those information in so we can set it same kind of pattern set description set video url and set new video cool so just to quickly go over these parameters like i said these are the keys of the video when you see something with set we can infer that we're probably going to pass in a state here that's going to have the description like the same way we did with the login right so if i come back to here really quickly right remember how we save the state of the user name and with set username we can assume that we're probably going to save the state of the description and the video url so that's how i'm thinking about this right so a set of description video rail and then also set tick tocks should hold all the tick tocks that we have in that account so they're going to do const wallet which is the first line of code in the function and con's wallet will equal use wallet again and let's get our connection ready so the connection is going to equal new anchor.web3.connection and this is capital c solana host because what is solano host you should be hearing it in your head i don't even have to say it yes it's dev const program equals get program instance connection wallet all right okay cool so again this is the use tick tock function now within here we'll have the get tick tocks it's going to be asynchronous this is like the sign up section of the user account right where in this use tick tock we have a get tick tocks function okay let's have a console log here just to know so i know that it is like in fact fetching or at least it's running and afterwards let's say cons videos and let's get that video account so to get the video we can do program.account right dot video account that's the specific type of account that i want and if i do all i get all of them okay then we can just console log the videos which should be just an array of every single video that we have if there's no videos like we have right now the array will be empty so if we are able to get those videos we're gonna just use set tick tocks right which will be videos yeah awesome and again we didn't make the state for set tick tocks but we are when we set it up in main view i believe but here we're just calling it right because where we're gonna use that tick tocks set tick tocks will exist i hope that makes sense to you guys so let's make a comment here save all videos in state for frontend awesome so that's to get tick tocks within use tick tock but there's actually more functions within there so this one is going to be like video so like video is exactly what it sounds like it's going to be what's going to allow us to one like the video or in other words create a comment so maybe we don't need to make this just yet but i can set up the skeleton of it okay so function to call like video from smart contract all right so we don't have that yet but we're setting up a skeleton cool and if we're gonna follow that convention we also have a function that's gonna allow us to function to call create comments from smart contract yeah so notice how we made a function we're going to be making a video function from the smart contract in our playground and a create comment but we didn't need to make a get video because there's already a way to get all the videos just directly calling the account from the program so that's the reason why it's like this okay so this one's going to be consecrate comment equals async address and i'll go over this again once we have that function but for now i'm just continuing to code this cool now this is the one that we do need this one is the actual new video itself right so what function are we gonna call from the smart contract here function to call create video there it is new video just to make it different name async just like the others and it's not gonna take any parameters because the parameters that we're going to take all exist already globally use ticktock and we just have to pass it in when we call the instruction okay so one of the first things is we need a random and we can get a render key by saying anchor web 3 key pair keypair oops.keeper and it actually has a generate method in here dot generate and then what do you want to just read which is the public key cool awesome other than that let's do a let video underscore pda equal to weight anchor.web3.com public key find program address okay address parentheses here and inside we can have the utf8 again dot encode video comma random key that we set up to buffer okay and then we want to put comma program.program just passing this all in the program address okay after that we have the transaction which is going to be abbreviated as tx and here we're going to await the program rpc8 video and inside it's going to take in a couple parameters and it's going to take the exact same parameters that we set up on our playground so if you remember it's going to be the description the video url the creator name and the creator url so let's translate that in here let me make sure i spell description script we're going to pass in video url and this one will say user detail as the creator name because these are detail user name and user detail dot user profile image your all right because we also want the profile image so if you take a look in here we have the name and when i look at the comments our picture is also on here cool all right so let's go back to the code user profile image url and then it's going to take in an object all right that's why this is really well so the object that this is taking in is going to be accounts and the accounts are going gonna have the video pda from before and random key as the random key and then we're gonna have the authority be the wallet public key and again we're gonna do this dot dot default account and the closing parentheses here is the end of the parameters and all you need to do is console.log right tx all of that was part of dx if i'm able to console.log tx we can assume that a video was created so we can test that function okay from there we also want to set the description to empty right we're doing this because if i create a new video we should clear the description because that's going to indicate that we already sent it right if you were making a todo app and you put in your todo in the input field you press enter that should be cleared so we can do that since it's saved as a state by saying set description is just empty string and set see what else do we need set video url to empty string and set new video show as false because that's going to be true okay awesome and then there is this function within use ticktalk called get you can just set that here and i'm just going to keep it here so let me make a comment for this one function to fetch comments from the comments on the smart contract all right so there's no function that we're creating called get comments we're just fetching it from the account itself cool and i won't forget this time i got you guys after getting all the comments did i write this right let me see oh yeah get comments after writing all the comments i wanted to be able to return all those functions right you have to return it like this so if i do get tick tocks like video create comment new video and get comments so if i return it like this i'm essentially going to be able to destructure each function individually from this hook so that's how you make your own custom hook and like i said i won't forget let's do export default tick tock cool all right so that's the use tick tock hook completely so once that's done we can actually put this to use so let me just add the front end and we can just start testing some of these things okay so now that we have this custom hook we can hop back over to main view and make a little bit more progress on this thing okay so when we have say the use tick tock right hook we want to import that as well where is use account right here let's type in import use tick tock awesome so remember when we're using hook it should always be within the function component itself and if i do use tick tock i'm going to write it down here and that's the structure the functions that we're going to use which is going to be pretty much all of them it's going to be get tick tocks right tick tocks liking the video create comment new video and get comments and get comments and we're going to set that equal to that hook and use tick tock is going to take in a couple different things going to be set tick tocks actually this makes more sense if i put in those states right because it's going to remember if you remember use tick tock we are using states right so we need to pass those in and if we want to pass them in we have to set it up so i'm going to set it up right under here and we say cons tick tocks comma set tick tocks right this is a use date right that we're setting up that's going to hold all the tick tocks in our app other than that we can just set up the rest let's do use state and i know there's going to be a couple of these so let's make copies so it's going to be one two three and four i believe so the first one new video show right and then there's set new video show we're also gonna have a description and set description this is going to be similar to the username like i keep mentioning over and over but it's going to be running the on change okay and this one is going to be set video your same deal after that this is going to be user detail this is going to help out mostly for comments so this one makes this one will make sense much later okay so now let's set the initial state like when we first load new video show what should be the initial state like i was talking about earlier it should be false which should be the initial state of description empty string because it should be blank an empty string if i were to put hello here you would see in the input field hello because that's what's i want to show up in that input okay and then user detail you can actually just leave blank it can be undefined cool so now we set up all those states i feel more comfortable of passing them in parameters so let's put set tech talks here notice how it's not grayed out anymore right user detail video url description description and set video url and of course set new video show okay we're passing that into use tick tock so that when we call anything of any of those things in the function it exists so it wouldn't be undefined or not show cool so did we import use effect yet yes we did so we could set that up next let's set up the use effect and if you don't know use effect is a react hook which lets us perform side effects at different points in the component's life cycle so if that doesn't make sense to you go look up documentation on use effect but the best thing i can explain to you is i want if you want to run a function when the component first loads or when there's a change or when it unmounts this is the place to do it so you just put a function in here or a check that you want to happen every single time right so basically what i want to happen is if wallet we're getting this from the wallet contacts if it's connected or while it dot connected that is true then what should happen we shouldn't see this sign up anymore i clicked sign up and there's already a user but we should get to the page and we should get the tick tocks so let's go back to the page if the wild is connected let's get the tick tocks okay cool so remember there is one more thing i want to do there also is the check account and that doesn't exist yet check account so let's make a function const check account all right this function is literally going to check if the user is connected or not this is where this is finally going to come into play so follow along with me it's going to be let user underscore pda just like the video pda but now it's user now it's going to be weight anchor dot web3 dot public key dot find program parentheses utf8 and then code okay and now we do a wallet dot public key dot to buffer from there we're gonna do a program.program id awesome so we have the user plda and from there let's set up a try catch block i'm gonna set up the cache first since it's easy if there is no user we gotta make sure the set account is false right because what happens if the account is false right if the account is false then we should be re seeing this up still but then if the account does exist let's do a const user info is equal to await.program.program waitprogram dot account dot user account dot fetch user pda okay so then if that works then let's console log the user info so we can actually see the account that we're fetching and then we're gonna set the user detail with that user info okay and then we have set user detail here that exists and of course we want to set the account to true so now it should start to come together if is account is true what's going to happen we should see the essentially the tick tock app but for now there's like a placeholder that says tic tocs will go here okay cool so i feel comfortable with that and that's the function that's the what i call the recipe but when do you want to run this command i want to run it if the wallet is connected yeah so let's do check account here right so when we first load the component if that wallet is connected then we can check the account and get tick tocks the problem with usefx is every time there is an update right let's say i change something under the create new video this user effect is going to run again so we're going to check account again and get ticktock i don't want that to happen so use effect actually takes two parameters and comma here and this is called a dependency module right if you just have an empty array here this use effect will only run once when the component first okay i hope you're following because if the dependency module has something in here like wallet.connected it will only update once or if this is changed like if it changed to true or false it will run this and check it which is exactly how i want to run it and that's why you use these effects because it gives you a lot of control of when to run certain functions if you're familiar with with the web 2 space you can use user effects to make an api call you can use effects to authenticate a user and many more things like that so that's only a little spiel and use effects awesome okay so just taking a look that should be just fine and we are importing the style import styles from main view okay cool so i'm going to do the same thing like we did with sign up where i prepared the skeleton of the css and then we coded up as you see it but just for fun let's go test our app right so i'm going to refresh this oh let me open up the vs code are you running the project still no we're not so in here let's do a ntl dev and get up and running not found that's probably because i'm not in the right path we're in tick tock clone youtube only but when we should be in front and okay clear now we should be able to entail there because that actually exists there hey okay so our login is still working i can input my path boom tick tocks will go here we already have an account so we loaded right wait for it we loaded this jsx because we have an account made already we did that earlier but what if i did wallet two now let's see wallet number two i'll hit refresh right now it's gonna prompt us to log in and let's also keep track of the console because remember it should be showing us the user later let's select wallet phantom detected approve and now we're gonna register wallet number two for our app for the very first time we'll hit connect fetching tick tock so that's working we shouldn't be getting any tick tock so we don't have any and now it's prompting us to sign up all right so for the username let's think i'm gonna shout out one of my students arnesha right and we're going to get her a nice profile picture let's do our nisha cool this is our new show and let's bring that over here and get x out the old one this is our profile image let's hit sign up hey okay so that means it should be working let's get signing up user is signed up and it does take a couple seconds but if i hit refresh now oops nothing i'm gonna give someone some time there we go awesome so that means our nisha is signed up and if you look it's console logging that user the user details so that's amazing so now let's make this very pretty because it should look more like this yeah so if you want to learn how to do that get excited because now it's happening so like i said i want to be setting up the css so that's going to be easy for us to see what's happening so i'm going to go and do control p and let's find main view module that css there we go and the only thing that we need for the skeleton is i'm gonna have a div called app videos we're gonna have another videos but this time i'm using the webkit webkit scroll bar because the way i'm setting up i want to be able to hide that scroll bar this is how you and you say this i can just add that now display now and we'll talk about it later so you can see what i mean cool so this hides the scroll bar for i believe chrome safari and opera but this one this app videos oops if i do dash ms overflowed over none and then we do scroll bar dash with none this one is specifically going to hide the videos for i believe internet explorer and firefox all right it could be switched i sometimes mix this up but for now this is it i'm gonna add up videos later so i'm gonna hit save okay go back to medium i guess i can do control p and now when i add the jsx it's not gonna say undefined because we are already importing awesome cool so there's going to be a bunch of unfinished things here but bear with me so let's do this again if right there is an account we need to take new video show right and upload models but essentially if new video show exists we're gonna load the upload model all right upload okay and upload model doesn't exist so let's just quickly create it now we're finally gonna start to make all the components on tick tock now okay cool so now it exists we'll come back to this in a second but it's just closing div trying to see curly bracket and we can hit enter here and now for some styling right this should be the app itself so this is where it comes in div class name oops styles dot app videos right is that how i named it should be app videos yes it is thanks for confirming guys okay now in this div right i'm gonna get the tick tocks dot length equal to zero i'm setting this up as a condition for my ternary statement which is basically saying if the tick tock length is zero right this is where we'll have just something really ugly it's just gonna say no video you can upload this and fix it yourself but for now this is what i'm gonna include for no videos like i said since this is a ternary what happens if the length is not zero and it can only be more than zero so in that case if it is then we want to do it tick tocks dot map and we're mapping through the tick tock's state that we set up which holds every single tick tock for us it is going to be zero it's going to be empty but if it did have some all right we're going to use the map function and for every single tick tock in an array let's say we have two we're going to iterate twice this map is going to run twice so every single time we want to be returning a video component oops a video component all right and this doesn't exist yet but this component will hold the actual ticktock video itself so you can imagine we'll be passing a lot of things onto this cool cool setting up video now and let's import video okay this is why i held off from styling the main view all because if i did this at the beginning it'd be a little bit confusing but now it's not right so here where is the end of the map oh and if i do this i won't have to write return awesome okay so then there's this closing parenthesis closing bracket and then the closing div then over here in between this will have another component called bottom bar if you're wondering what bottom bar is if i take a second bottom bar is going to be this little guy right here right so that is that component which is going to have the button to create a new video we actually use this button to refresh to get the tick tocks again as well too so you don't have to refresh the browser so that's good to know for later that is the bottom bar oops click the playground awesome so where was i and then should be closing div and then sign up and everything else sounds good save and let's take a look at our app any errors yep bottom bar is not defined as expected all right so let's make that a new component okay hitting save and now when i check are you undefined still oh duh i have to import it i was on such a good flow guys but now here we go bottom bar nice so let's refresh this a bit hey no videos bottom bar right that's totally fine but once we add styling to everything it should make a little bit more sense so i'm thinking about this i think i want to start styling the video.js because if i style the video component when we create a new video you'll be able to see it yeah let's do that so to start styling our video component we're going to need to hop back to our code and let's go to video.js let's get started so the first thing i want to do is import a couple things from react so let's import use ref use state from react cool so after that we have a couple different things we can import but it's not going to make sense till later on so what i'll do instead is let's just import our styles from and the path of styles slash video dot module dot css and yes i know this doesn't exist just yet but we'll get to it we'll get to it right now so go into styles let's make a new file it's just gonna be video module.css all right same thing i'm setting up the styles so that later on we can just not worry about it being undefined wrapper and then dot video player okay unfortunately we're not going to be able to really see what this looks like until we get a video and luckily since it doesn't have any styling i think i'm just going to style it as we go now so position is going to be relative and the background color is going to be black and the width is going to be 100 okay the height is also going to be 100 and the scroll snap align is going to be start so this is the feature where in tick tock scroll it just a little bit it like goes to that and scrolls to the next dip boom right so i'm not like scrolling hands up boom see that's pretty cool so this is going to help with that there awesome and then the video player itself is going to be object fit fill and with 100 and height 100 okay cool so now that's done we can head back over to our video and we're gonna need to pass down a lot of props so remember what i explained before props going back into main let's take a look at what we need to pass into video which i'd imagine is a lot okay so one of the first things about this is this first parameter in map represents the element in the tick tock array which is literally a tick tock which is why we're client tick top second parameter in map is essentially the incrementer for an index so it goes 0 one two three four anytime you're creating a component you should give it a unique key so that's what i'll set up first the key is gonna equal the id right so if there's one video the id will be zero there's two the id will be one cool so let's address is going to equal right and now we just have to map out the object so if tick tock is the object that holds the tick top we can get the address by doing tick tock dot public key and remember we want it to be readable so let's do two base 50 and there you go so the url we're gonna do the same kind of thing for all the other properties so it's gonna be ticktock.account.videourl okay and for the channel the channel you can look at it as the ticktock name ticktalkcount.creator name i think that's what we called it channel and then the index of the video index of the video is going to be tick tock oops dot account index dot two number okay and then from there if we do likes likes will be however many likes the tick tock has tick tock that account that likes and if you remember what it is by default it should be zero now so something that we will visually see the most is the description of the tick tock and it's simply just tick tock dot account dot description if you're wondering where i was able to figure this out on is if you were to take this out and just only console log tick tock you will see each object and if you open up that object you can see like oh if i open up publicly i should see the public key okay so description now we can just see the number of shares i don't think we actually have the amount of shares on this but we do have like video is going to be just like video there's also like a dress right this each video needs to store the people that liked it so just to put a visual to that this video is storing that i this account liked it all right but this guy i didn't like i didn't personally like this tic tac on this account but three other people did and it's remembering that it saved it on so that's what like address is right so to get that we can do tick tock count dot people who liked okay then we can also do create comment because we should be able to create a comment from each video alright again visual if i can do this i should be able to create comments so let's create a comment to get comments and then we should also be keeping track of the common count which again by default it's one until somebody adds their own account let's do a two number here helping like video comes from get tick tocks yep looks pretty good to me all that's passed in from main view so now we have to accept those props from the video now coming to video we can accept the props here and if we destructure them it'll be a lot easier to call them so i'm just going to write them all out okay so that was a lot awesome and then yes okay cool so then there's a couple of states that we want to set up here and remember how i'm using use rep it's going to come into play later but let's set it up so const playing i want to keep track of the playing state right is the tick tock playing if it is right then it should be true but if it's not playing it should be false so by default do you want your tick tocks to be playing probably not so i'm going to set playing to false otherwise it would all play at once and that's really insane so let's do show comments right as another state we want to keep track of so this is where we click on the comment and then we'll see the little text that showcases all the comments so we can change that essentially this is going to be like a toggle just is playing and then cons video ref right this is where the user ref comes in and by default it's no all right we're going to be grabbing a reference to the video where we can set it to play or pause all right it's going to be a lot more clear once i start building more of it out but if you're following with me you're gucci so on video press that's the function name i'm creating right so if i click the video or press the video in this case we're going to check if playing is true or false because if playing is true does that mean the video is running or does that mean the video is paused it means the video is running if playing is true so what do you want to happen we want video ref current right because that's coming from the ref object to be dot pause okay else which means if playing is false we need to be able to play the video so let's do the same thing here except this time and of course in order to change the state of playing after we hit pause we have to do a set playing false and then followed by a set playing true underneath the else yeah cool all right so we also want to be able to hide comments this is a function that we're going to place somewhere what state is going to be affected by this it's going to be the set show comments model and if i want to hide comments it should be false what if i want to show comments that's a no it's a whole function on itself show comments and if i want to show comments it's going to be show comments modal true yes true true true okay awesome so for the just x of the video there's gonna be components in this video itself right like the sidebar the footer the comments but i'm not gonna make all them right away i'll just write out the whole jsx and then we'll start talking about it so we can do is do that and we can say class name styles dot wrapper okay and there's actually a video tag here that we can call upon with the class name the video player right so styles that video player and we want to say uh loop you can just put that right here because after it's done playing it should loop just like it doesn't so on click that can equal on video press then we hit ref that can equal the video ref right this is where we're getting the use of use rep and getting the reference of this video through here right every tag is going to come with a reference object or attribute sorry and the source of this video is just going to be the tick tock url right and that's how we're able to play these videos so in theory you should be able to do it with youtube as well if you wanted to use those kind of videos but you might have to format it or you might have to deal with some cores if youtube doesn't allow you to just copy youtube videos like that cool all right so for now i already know there's gonna be a component that goes here so let's comment it out there's also gonna be a sidebar yes these are all things that i'm going to come back to once i have an actual video right because you can't even see these things until we have one okay i will set up show comments model because we already did set up that state so this can exist and since it's javascript right in html you have to separate it by putting these curly brackets here so i'm writing javascript now and essentially if show comments model is true we should show comments component and we need the closing first delaware awesome so this one i can make because if i save this it will say it's undefined even though like when i load the video and i don't want to want that to happen so let's import that let's do new file comments cool all right i feel comfortable with that for now so if anything we should just see a video minus the footer in the sidebar alright so we're making great progress on being able to create a video real soon the next thing we should probably just work on is the upload model so if we're going to work on the upload model click the upload model file and then let's set it up okay so i'm in the upload model file and there is some props that we're going to be needing to pass so i think actually i lied let's go back and go do that so in main view let's take a look at what props we need to pass down to upload modo all right there's only a few not as much as video look at this alright but upload model does need some and now upload model is going to need description and that can just be as description video url which is just video url new video as new video set description we're gonna pass in that state there and set video url and set new video show cool so now we're good to go awesome so let's accept those props by destruction them first so that we can call them by their names without saying props dot the description video url and so forth okay awesome so that's all the props i believe let's also set up the css so i'm going to go back to styles simply just say new file upload modal.module that's css okay cool and i usually do i'm gonna set up the skeleton so that you guys can visually see it as well and actually i won't fill out the styling cool so there will be a wrapper there will be modal buttons there will be a title div and input okay just like before we also need an input class and a button class so this is the skeleton of all the divs i may might forget one but let's see i think that's pretty solid we just need to import that style so import styles from and then that path which should just be the forward slash upload model it doesn't even show up css yeah that sounds about right cool and luckily luckily there's no like hooks or anything we need to do here we just need to set up all the dips so let's clean this up a bit and i'll just say class name wrapper yeah this styles right then we got div class name upload video input field i can never spell feel it filed again there you go thank you guys then we can do a div class name of input title which will just hold this word description it's if you're noticing it's very similar to when we were trying to sign up a user same kind of text box so if you want the visual just like that very similar to signing up yeah there you go awesome so after the input title let's do the input container which of course contains n input the input has the input class type equal text value is equaling description and then we gotta have the on change which i can actually put now i don't have to save it for later you guys know what this is now description yep and of course if you want the input field you want to do e dot target that value so closing div closing div enter div class name all right so we're just going to the same setup with input field and the title in the container you it's like silent coding session because i'm so focused what you guys should be following along it's like the same thing yeah unchange again set video url we want to make your e target dot value to grab that input nothing new here div closing div and we want to set the modal buttons do i have that class in here oh yeah i do moto buttons cool so this is going to contain buttons oh and uh an on click and we actually have the function that i want to run if we click it which is going to be set new video to false okay this one's going to have a unique class name it's going to have two let me see there's a cancel button and then there's just a button it's going to have both so to write that we're going to write a template literal i'm going to say style dot button as well as style.cancel okay and in between them we'll just have the word cancel right just in case you want one more button on click again and when we click we're going to run new video right which is a function that comes from that's getting passed down to upload modal and give it two class names as well template literal style dot button and style dot create and i know i just realized it's gonna be styles cool style styles all right i'm just gonna write create new one here create okay default upload model i'll hit save now and it's not gonna have any css if i were to open it it's just not possible to open it because if you remember you get this upload model to get here you have to click this right here and to get this we're going to need the bottom bar component okay so let's get it rolling with the bottom bar we want to make this little guy over here so i'm going to head over to my code and let's get back to main view reason why i go to main view is because with bottom bar there's a couple of things i want to pass down so with bottom bar all it's going to take as props is set new video show and that's going to be set new video show all right i'm going to get tick tocks and put in get tick tocks awesome so those are the only two see if i spell them right yes so now i'm going to go to bottom bar and since i have this little guy open let's make a bottom bar styling bottom bar css so bottom bar dot module dot css okay cool so now that i have that set up let's get the skeleton of this wrapper we have an add video button and just a bottom icon nice okay bottom icon so just those three things and then coming back to the bottom bar component clear this up oops image stop bring this up a little bit and here there's a couple react icons that we're going to get and remember our cli tool was able to import react icons so there's no need for you to do that which is super awesome and let's also import style from that styles slash bar dot module that's css alright so take a second these are the icons that we're going to need a iphil home the outline compass io's ad and the message minus the bs person all this is are just the icons that you see here yeah cool so let's destructure our beautiful props and set new video show is what we're going to type then we can get tick tocks here and nice all right time for some jsx we're going to fix up this div and give it a name i'm thinking oh i said style let me put the style with s styles so styles dot wrapper is the parent tip and here we'll use the ai fill home and i can actually give icons a class name as well which will just be style dot bottom icon okay underneath the ai from home we have ai outline compass with the same class name okay and we're not going to close it just yet because i want to add in an on click to this all right so for the on click let's see if i do this we can say on click let's get tick tocks because remember i said this button right here actually refreshes and runs the get tick tock function again so we don't have to click this refresh button okay just a smart way to do that all right after that we can finally write another div and say class name styles add video book okay and the add video button is the middle thing so it's going to be ios app so close give it the class name and on click of course and what we want to happen is set new video true because if set new video is true we're going to load that component the upload model right let's see oh give it some in some inline styling it looks like which is going to be oops color black cool closing dad the rest of the icons now it's the buy message minus class name style dot bottom line or styles okay then there is bs person with class name styles that bottom icon awesome let's save that and now it's been a while but let's do the split screen again and there it is there's our beautiful little app with all the icons on there right and i'm gonna have to zoom out a little bit guys sorry so i can see this a lot better but we can do it a little bit more like this there we go i'm feeling that we can zoom this in just a little bit more cool so take a look this is what our bottom bar looks like with all the icons but it should be looking more like this so how can we get it to look like that that's where the css comes in so to start let's add a width actually before i start the width let's add a background color let's make it red cool so this is our bottom bar this red thing so it's going to be black but i just read because it's easier to see now if i give a width of 72.6 percent okay and let's give it a display flex because if you remember what is the default flex direction if you just say this ball it's row you got it so then here let's justify content and i want space evenly okay so this puts even space around all of that for this we want the color to be white cool except for the plus icon plus icon should be back with black with a background of white okay now for the font size that should be 2 rm the padding let's give it some padding on here 20 pixels nice and let's give it a border dash top of 2 pixels solid white okay and that's just this little line that separates the video from the bottom bar you guys haven't even noticed that when i was using tick tock but it's pretty cool small details that you don't notice that developers think of so now let's add a border radius and if you didn't know the way i'm formatting this it's top right bottom left i believe oh what the hell oh yeah i was here zero zero 20 pixels nice so see how i was right top right nothing yeah left right bottom right and top bottom left that's what i mean there we go now we want the gap to be about 40 pixels oops hey so added spacing between all of them and now it grew so it should be almost the size of it let's see let's do a margin dash left 47 nice yeah don't worry about the new no videos that's going to go away once we have videos cool now let's work on the add video button which will just have a width of 45 pixels oops a background color of white and we get the idea with this i don't want to make it ready when i saw it let's do black there we go and now let's fix up this add video button but the color of it should be black not sure if that changed much let's do display flex on this because i want to make sure that it's centered as you can see it's like by default nuts okay justify content center nice and let's align the items okay cool so now it's super center let's do border radius of 0.4 are you there we go awesome okay and again if it doesn't match up with the size that's probably because the icons are small oh did i just delete it localhost three thousand and one okay cool all right for the bottom icon let's do a cursor cursor awesome oops cool so that's our bottom bar let's see if i can click this hey there's our model and one comes up i can hit cancel and it's gone boom boom boom boom all right of course it looks ugly because if you remember we didn't do the css for it so let's go back and get that done so it can look more like this cool so what we're gonna do is go over to joel p upload modal css all right so let's get to work so getting started with this going back to the top let's open that model and this is the before and this should be the after right so as you can see we're gonna need to make a white background again this is probably its own div which we did and we got to style our own custom input once again okay so building off what we learned before for the wrapper let's make the position absolute left 50 top should be 50 and it's gonna be a transform effect here transform translate negative 50 percent and negative 50 as well okay i'm going to give this a z index 10 and can't forget the semicolon background color of white cool it's in the perfect spot all right after that we need the min width and make that min width 20 rem let's make the min height 20 rem as well cool yeah it's obviously not in the right spot but we're gonna get it there border dash radius radius 10 pixels to make it nice and let's add a padding give it a padding of 1.2 rpm display flex and again if i hit save here it's going to put it in a row but we want it back to the column column flex direction justify content center and align cool back over there now we have model buttons next which is the display flex justify content space evenly then we're going to add a margin top 20 pixels and a padding of 10 pixels cool all right for the title if you're not sure what the title is if i give this a background color around that's the title right that's what i do if i'm not sure what i'm targeting but i know what i'm targeting now let's do a font weight of boulder why did i pick control s wax and folder font size was going to be 1.5 rem and for the margin i just want to give it like a 1.5 rem a zero three rem and a zero okay that's looking a lot nicer and let's start working on our input fields so again let's do a background color biscuit right that's the input field there's two of them so it doesn't it looks like a one big box but it's not right with 100 we've seen this before margin dash bottom one rem okay then we have input title 100 oops input title font size needs to be one are you one rep and let's add a margin bottom margin bottom can be 0.5 already there you go then for the container let's do a display flex a border one pixel hash tag pc f4 let's make it solid nice okay then a border dash radius rem padding is going to be 0.6 and then 0.4 here then we got background color which will be hashtag fa fcfc hey okay cool cool now for input let's give it a flex of one yeah i can only tell uh one of these divs are messed up but let me just fix finish this input styling border is none oops border dash radius okay now it's bothering us i'm gonna save this temporarily yeah this one is round already that doesn't seem right styles oh i see i gave this input container instead of there you go now it's in sync now i can give this a border radius one rem as well yes okay next let's give it a padding let's beef it up a little bit same as the other one and a background color i think i'm styling this wrong this is actually just a flex one right this is border none and there should be no outline that's what i'm missing and the background should be known i was like it doesn't make sense that it has a color there we go that's more get on custom input all right let's dial the button color will be white the padding will be five pixels the border dash radius can be nine pixels color will be hashtag fff and we'll have a transition from 0.2 linear with and then we can do an align items center here okay we can do justify content center display flex font weight of 600 font dash size i'm thinking 0.9 rem okay and a margin of 0.5 cool if you're wondering why they're the same thing once we get to the create button and the cancel button they'll start to look a little bit different watch so i do background color and i do this hashtag for e that's create new and the border will be two pixels oops two pixels hashtag fed five five solid and the color of this one shall be right here f e two d by five what should be property value expected color there you go that's more like it canceled the only issue is that the upload new video is not entirely in the right spot that's so strange like we're so close it should be more in the middle that should be taken care of from the transform someone's gonna come back up here transform that's why translate hey there we go so we got the upload model up and running and there it's good to go so that's it we have it right here awesome so while i'm here i just remembered if i go back to main view css i didn't finish the app videos so what i'm going to do is go ahead and finish that so for main view css and remain view css for app videos all i want to do is a position relative a height of 800 pixels a border dash radius 20 pixels 20 pixels zero and margin dash left of 47 pixel okay we also want to overflow scroll here and the width of 80 percent and the max width max width of 500 pixels okay and then there's the squirrel snap type and let's do y mandatory hit save and yeah there's that scroll bar that we didn't want so that means this needs to be fixed webkit oh it should be dash webkit there we go i guess that's all i need to do other than that this is looking a lot closer to this cool so that is the upload model css along with finishing the main view finally all right so are you guys ready because that was a lot of front end we got a lot done we got the skinnier slim version of tik tok that's okay but what i really want to see is if i click the upload model will my tick tock upload and can we create a video from our smart contract so let's enjoy that process and let's see if we get any errors and it works first time so what we can do is head over to tick tock right oh i saw it already let's do tick tock clever programmer and i'm going to go ahead and click this and let's click copy video address all right i always like to make sure that it's the bigger version or you'll help yes or something this is the one you want all right so the one you copied from here is the one you want we actually don't need the code and for the description let's put tutorial hell because that is the description let's hit paste and here we go nervous let's hit create new oh yeah password okay okay so let's log in first before we do anything crazy cool so it's prompting me to log in boom this is my account with tiktok let's click this let's hit description tutorial hell and just to make sure this is wallet have solana yes it does this is wallet number two i forgot what username i put for this oh i think it was our nisha that's it yes okay it doesn't say transaction made fail it actually gives us an estimate to approve okay so the model disappeared which is a good sign no major errors so we just gotta wait a bit let's see let's go we have a tick tock right the main thing i want to see is if this is something wow okay longest time that i can imagine we were able to generate a tick tock from our link and we ran it through a smart contract so all of it's working this is not just for show we can actually add videos so cool and of course we can't really comment because we haven't set up that front end but what i want to do now is since we have so much momentum guys let's start building out the rest of the smart contracts so i'm actually really happy that worked on the first try if you're watching this video and you worked the first try without any errors give this video a thumbs up and leave a comment down below saying bear if you say bear in the comments i'll know that you made it up to this point and you're able to create a video and create a user so leave that comment bear give this a thumbs up and let's continue on so coming into the solana playground we have so much momentum guys we've made create user we made create video let's make create comment again we can just use our previous functions as a template right so it's not like you're going in blind each time you make this it should make a little bit more sense so if we want to go ahead and create a comment what we should do is come down below here let's do some spacing and let's say pub let's increase the size of this pub fn create underscore comment all right it's going to take in some parameters and same pattern the context parameter is going to be the data type of context create comment yes a struct that we're going to make in just a bit okay so we're gonna have the text right when we create a comment we should pass in whatever we said as text and that's gonna always be a string cool then we need the commenter name like the person who commented and then we need the commenter url what's their profile picture which is also be a string so those are the only parameters that we're going to need we just need to put in program result again and tell our code what is that result okay so the logic for this instruction is going to be something like we're going to say let video and say and mute count video account right because we want to get the video why do we want to get a video because we want to be directly affecting the video account object because the video count object holds the comments or at least how much number of comments there are and now that's going to equal the and mute because we want to make it mutable and say ctx.accounts.video we're taking the context we're getting the the context of the account and we're getting the video here okay semicolon right next we can say let comment which is going to have data type of and mute again account and comment account so we need to make a stroke for this so keep that in mind for later okay so now we can say equals and mute ctx accounts dot comments or not comments sorry should be comment semicolon i wonder if i can make this smaller can i okay that's the smallest it goes cool so zoom out a bit you can probably see it a lot better and before i write any more logic let's create the structs for it so again if you ever get lost we can use this as a template right so we need to make the create comment struct and also the comment account struct so when creating the create comment struct what are we going to need take a guess it's going to be the hash to derive counts and we're going to add pub struct right after it so that it can inherit the information we need so create comment is going to have info and not that it's going to be this one yep give it that lifetime variable info and we can also do account and put mute and we can say pub video is going to have the account info right of video account okay and then from there let's authenticate the comment account just like we did with video so we can control its behavior here by putting parentheses oops and yes basically something like the suggestion right here we do need init we got to set up the seeds to create that unique hash and to create that in cuny cash we're going to pass in a couple things like b comment dot as underscore ref parentheses comma video key dot as underscore ref comma comma video dot comment underscore count dot 2 underscore b underscore bytes i turn it then from there we can do a dot as underscore ref parentheses okie dokie so that's the seeds and usually what we do after writing all of that we add this bump just in case it's not a unique hash we can increment it by 1 or up to 20 i believe so payer is going to be the same as the authority and the space we determine how is this create comment struck right and the size of this is going to be this whatever the size of comment count is no parentheses plus plus the text underscore plus user underscore name score name underscore length plus user underscore url underscore length plus the video underscore url underscore link it's going to need all the information to get an accurate estimate of how much space the comment will create a comment is going to take okay looks pretty good to me hard to see so i'm going to just zoom out one more time just for now then underneath that we can add comment pub comment right here say account say info and it's going to take in the comment account which doesn't exist yet cool let's do a hashtag count mute all right this is the same thing as before right if you remember we had the authority we needed the system program and we needed the clock very standard we're going to use that same information again so look what happens paste same thing authority signer info system program one of the differences this should have system and this is infoclock i believe that's the only difference cool so that is create comment now let's create the comment account struct so to get started with that let's get the account attribute again and say pub struct comment account okay then we can say club authority will be the pub key pub text will be a string and again i don't know if i have to explain this again but the comment account is essentially what the comment object looks like so the authority is always needed but the text is going to be what is the comment string or the text inside of it what information will we need again it's going to be the commenter's name i want that to be a key of this all right you can look at this as like setting up schemas in the database right because this is technically our back end here so this is our commenter url string then we can do a pub index q64 unsigned integer then we can do a pub video underscore time and do i 60 signage let's put everything correctly awesome so that's it for comments we have the comrade comment struck the common account struct and now i'm feel comfortable explaining the rest of the function yes so this is where we left off and what i wanted to do next is now that we're going to create the comment function we can set values to the keys of the comment account object so what i mean by that if i do comment.authority what should be the value right if you remember from previous examples it's going to be ctx.accounts and then we can get the authority from there by doing that authority method okay now how do i get the text of a comment account we can do comments here right because we have that context and we can do comment dot right scroll down text that's how we get the text comment text equal to text right i'm saying equal to text because that is a parameter that we pass in when i'm making that call okay so i hope that makes sense and let's add these semicolons so then let's continue on let's move faster commenter oh no no comment dot com enter underscore name should be the commenter i'm just going to that's passed in we have the comments dot com mentor underscore url is equal to the commenter underscore url cool another thing i want to keep track of and i believe i did also in this case i forgot we kept track of the index right and video time so let's do that so comment dot index is going to equal video dot comment underscore count and comment dot video underscore time is going to equal c to x counts dot clock unix underscore time snap cool and when we create a comment on a video let's say if i create a comment onto this video how many comments should have should it be plus two plus three right it should be common sense plus one so how do we increase the videos comments or and specifically the video and we have the videos contacts information because of this so i can save video here videos comment i'm accessing that key underscore count right so by default it's zero but if i'm creating a comment plus equals one if you have any basic programming languages this isn't scary so cool and again what do we put when the function is passed or it's true or executed we can say okay boom all right so that is the create comment there's only one more function i want to make which is liking the video and since we're here i'm thinking let's go ahead and make it so that we can just bang out the front end and we'll be done cool so after getting the create comment function down let's go ahead and make the like video one or like i said so where am i where am i so this is where it is pub fn come down here and all we need to do is write pub fn like video at this point you guys are pros at making functions on the solana chain and i'm super proud all right so again it's gonna take in a parameter but luckily if we're just liking a video it's not gonna take much all we need is just the context of like video so that is gonna be a struct yes okay cool so then we can take program result then program result and what programs is going to be is let video right because we want to get the video once again and to get the video we can say mute count video count alright so this tells me i'm grabbing the video account and setting it equal to the the type this variable is going to be the video count and it's going to be equal to mute ctx.accounts.video that's how i get that reference cool so this is the part that i'm excited about it's definitely different than the other functions we've done so far but there's a way to essentially loop through something on rust and there is for loops on rust from what i know but iterating is what we're going to do so we're going to use something called iter which essentially is going to iterate through the accounts and the reason why we're doing that is because it is safer than indexing because with indexing with a for loop there could be a chance that your loop goes out of bounds and that just means outside the number of elements in the array so if there's an array of three right if you do it in array bracket three that's going to be undefined so it's safer than indexing so for loops aren't really used as much i'd say right to my knowledge but mostly they're going to be using something called iter so to iterate we're going to say editor pub key and that's the type and we're going to set it equal to video that people who liked so just to break it down but we're getting the video or the video data from the accounts and what we're doing next is the value at people who liked which is essentially just an array and we're going to loop through them or iterate through them is the better term so from there we want to do let user the liking the video okay and the type is pub key equal ctx and we just have to get the pup key so ctx.accounts.authority.key same time same well same thing that we've done before to get the key cool and from there we can just do a video dot likes plus equals one right because when we like the video we want to increment that like counter by one so if this was two before when i liked it it became three yeah simple enough so that's what we want to set up with this and remember in the video struct there is a key that's people who liked just keeps the array that's this one right here we want to also save who liked the video so that way you can't like it twice so let's dot push right user liking the video so essentially user liking the video is the that account authority who's ever logged in and you're pushing that into that array at that key cool and that's all like video is right so from there we can say okay to confirm and bam and the only struck i believe we need to make for this is just like video struct which shouldn't be too hard so i'm just going to scroll all the way down to the bottom let's find my like video stroke okay coming down to the bottom now we'll do the pub struct right oh and don't forget we also need to of course derive the accounts again and do a publish drop like video and we'll get the info okay then from there let's do the hashtag accounts attribute and remember we want to define that behavior so we say mute you want to be make it changeable and we could say pub video and the pub video is going to be the account info comma video account because the like is associated with the video so we're gonna need it here okay and it's the same thing as before we need that authority again but i'm not gonna copy this one because this one included system we need this guy again same thing boom so system program unchecked account info comma and then info clock yes sir believe it or not that's it for like video alright so that wasn't too bad i think that's a good sign getting the hang of it but still a little confusing for you just making and stuff over and over again like your own anchor projects it's going to make this a lot more easy to understand so let's go ahead and hit build let's see any errors that come up i'm expecting some i think i see why i copy pasted this and just added system but in reality this shouldn't care about unchecked account this should just be program info system there we go that was my fault guys i thought i could just simply copy paste it but i could not so let's build this again and now it has a problem with the seeds on 203 well i thought there would be a lot more but this isn't bad so the as ref i'm assuming that's because it should be more like this because it's a method okay 104 can't find pub key in this scope that's interesting okay what if i remove this and not define the type would be mad at me oh okay so no warnings but i'm not sure if that's gonna work but the only way to find out is just to actually test it so no warnings that's a good sign with that that's all the functions inside our smart contract the only time we'll come back here is if there's any errors but again let's update our smart contract by upgrading it and let's see i have 6.5 so hopefully that's enough it is pretty big now so it's deploying and as it's deploying there are the two things that we need to check now is to are we able to create comments because that's what we added and can we like the video a deployment successful so what's the process for upgrading your new upgraded smart contract onto your front end if you remember i go in here and let's export the new program idl right so now it's idl5 let's go ahead and open let's go to this vs code let's click on this so hopefully it opens up to there see i'm gonna have to open it up in my downloads okay there it is idl5 and boom it's really small so let's increase that size let's do an alt c here and now it looks hideous but let's see if our new instructions are here so there's i see create user i see create video do we have create comment yes we do do we have like video yes we do so this is our latest ideal let's control c right and let's go click on tick tock clone json this is our old idl from our last program before we updated it and it doesn't have create comment or like video so we want to basically erase this and paste it so now because of the way we set it up in the beginning it's gonna be updated no need to change any code on the front end this is all you have to do so that's pretty simple to update your program and now all we need to do next is set up the front end for create comments and like in the video so the first thing i want to tackle back into our front end is the sidebar so let me just double check in main view here we have sidebar where is the sidebar oh it might be in video.js actually yep we have a sidebar and a footer to carry what we're gonna do is let's set it up okay so just to quickly recap in the video.js we are passing so many things that we're gonna need for the video and we're going to need to pass some of that into sidebar as well so for sidebar let's pass in all those props that we need which essentially is just address we have chairs on show comments and then show comments all of these are coming from our used tick tock hook if you remember we set up all the functions of getting comments of liking the video we just didn't add that functionality to call it from our front end just yet but for now i'm just going to set up the jsx of each component then we can go back and do that sounds like a plan awesome we're almost done guys so let's do a like video then we do index and then we'll set that to index the index that's in curly brackets okay and then let's do the likes address which will be the same name likes address okay for messages it's going to be comment and bam that's the sidebar right while we're here let's just set up the props for footer i'm not going to do anything just yet but i do want to set up the props oh and i just realized i think it might be pretty small so for footer you can have channel is equal to channel which is just a creator name prescription is equal to description and there's also something that we have song and that's just gonna be uh index if you did want to pass in the actual song name you'd have to save as well okay so that's it for the footer we can also do comments right since we're here for comments there is something called on hide where we can now hide comments there it is the put the index in here as well you can put the address here create comment get comments and a comment count and that's going to be it cool so i'm passing props now so when we go back around to add them all later but the main focus right now is going to be the sidebar so with that said if i go into the sidebar side do i not have a sidebar that doesn't seem right oh yeah i guess i never did make a sidebar component because they were commented out cool so let's make those components so i believe that was sidebar dot js okay and there was also footer since i commented that out as well okay trying to think what was footer again not too sure but we'll cross that bridge when we get to it this is side and on video we should be importing all those things so import sidebar cool import nice okay so shouldn't have any errors of like sidebar being undefined since we made this sidebar let's also make the css file for it so that's going to be sidebar.module.css cool and what else what else yeah we could just set up the css for it like the skeleton is just going to be sidebar and sidebar button that's it for the skeleton for now let's go on to here and let's just take a look at our app it's been a while see enter password i want to see what lance is my lance account which is wallet number one and if we in a new wallet we have to refresh because now i'm signed in as myself for sure because i'm in wallet number one and again no sidebar is visible right now then let's get to work on that so i guess the first thing we should do is sidebar module let's actually set up some things for the sidebar itself if i do position absolute and top 50 percent i just want to make it make sure it's visible right 10 pixels and color white okay so let's just save that for now we'll worry about sidebar button later okay not visible yet probably because we're going to need to put in the name of the div so let's first import that import styles from dot sidebar.module.css class name is the style sidebar i don't know why that's cap hey there it is that's in the right spot too the sidebar should be just about there and then just drop down as well okay awesome so let's make the rest of the things that we're going to need and i can already tell you that there is the icons right what if i go back to here oops i got too excited there you go now i should be able to click my pen i need to get these icons right here and one way to get them is actually with material ui once again okay and i already have them picked out for you you just need to write the same ones that i do so going back to the code you can do the split screen style okay oof all right that's a lot better so let me get the react icons and that's going to be right here so we have favorite icon the message icon and the share icon yeah okay and then from here there's some hooks that i want to use in sidebar so let's do this use effect and use state once again and while we're importing let's get use wallet at this point you guys should know where this is from adapter react cool and we passed a couple things into sidebar so let's destructure and that is the following address likes shares messages on show comments like video index likes address cool now in terms of states all right we can also set that up here i'm going to do a const con use state and const wallet is going to equal that hook for the use state the initial state is false and the variable or like the name of the state will be light and set because if we like it the heart should turn red yeah if we unlock if it's not liked or not like that at all it should be false so there's no toggle like button just if it's liked or not cool so remember how you passed in a like address we want to actually want to loop through that and double check if we liked it or not so again i'm using use effect here to do just that so if wallet.connected which is why we imported wallet if it's connected let's actually loop through the address likes address dot for each and it's just gonna be an address here cool now if as we're looping through the addresses if the wallet dot public key right dot 2 base 58 to format it is equal equal equal to address dot 2 base 58 essentially if i'm looping through and i find that the user that's logged in is matched to one of the people that liked the video already right then we can set liked to true because if it is true then we should see the red heart cool nice so that's the if statement here and i don't want this to run every time there's a change right every time we're fetching or changing the state of something we want this to run when the wallet changes or when the likes address changes which makes sense to me cool okay so from there let's just work on jsx in that case then we need to write the div with another class name this one is styles.sidebar button okay then like question mark all right turn every statement here if it is it is true then the favorite icon right favorite icon the font size needs to be large and we're gonna have some inline styling here where the fill will be red so that's how we make sure that something is light we're gonna color this icon red and the stroke is also red okay cool now if set is false which is by default right what should happen is we have the favorite icon still the difference is the font size is still large but right we're not going to add any styling because it's not doesn't have to be red or anything it should be just clear as is but we will add it on click because if it's not liked we should have the functionality of liking it and if you remember we have used tick tock and we passed down that function here to like the video and we pass in is liking the video that's why i put address here okay because if you remember it's kind of hard to see but going down to our instructions like video takes in an address okay or rather yet this like video is taking in the struck like video and in the front end we're gonna make a function that is also that is like video all right so in reality what i actually mean to say is this like video is coming from this right here yeah remember it's the function to call it like video from smart contract and it takes in cool so i hope that cleared it up just going back into the sidebar awesome so we have all of that stuff oh yeah there's extra parentheses here there you go then next to it i want like the likes it should show the number of likes so that's why we have this right here then it should be closing div and then in between these two we'll have another div this one will be styles dot side bar button and here we can have an on click of show comments so what that tells me is this is the button that we pressed to look at the or just bring up that component is that how i spelled it let me just double check yeah the suggestion confirms it you just all see this not gonna make it any better oops control minus cool so i know that's a little small i just needed to see just a little bit for now yeah so this should go out here and we should close it off nice so now i feel comfortable zooming back in for you guys awesome so now we can just get the message icon that we imported give it font size large to match with the heart and we can give the messages here okay so it's closing div opening div class name and this is also styles that sidebar button it's going to have share icon font size large also and it should show me the shares okay and then closing div closing div sidebar boom so let's save it's been a while let's take a look oh on show comment is not defined so that's on show comments wait a second oh comments cool let's refresh connect keep signing me out boom hey there we go that makes sense okay for some reason we're not seeing the oh no the share icon is in there see cool and the reason why it looks a little wonky is because the styling isn't all the way there and we don't have this stuff set up right here you can x this guy out cool but in that case this is it for the sidebar okay i did speak too soon because i did want to finish up the sidebar css because i believe i didn't finish that just yet awesome so yeah it looks like that but if we have this sidebar here let's change the padding to 20 pixels there we go and let's do a text align center there we go so that looks a lot better now of course it is a little bit skinnier but it might be fixed once we add in that footer so now the sidebar is complete one thing we can do while we're here is it's been a while since we pushed so let's go ahead and get status cool so this is all the changes we've made since the last time i pushed it's a lot once again but let's just open up our netlife again so it's tick tock solana i think i see it boom test one two three four boom and let's see did i not have an account with this guy oh it's wallet one okay oh oh i know it's because i haven't it's been a while since i uploaded this all right so we're going to use git i'll get add dot to add those changes and you can view those right hit commit add create video and more front end all right that's the best way i could describe that so let's do git push and netfly will redeploy our live app for us so once again so let's go to nullify just watch it grow okay and then go to sites tick tock solana and there it is building awesome so site is live let's go ahead and go back to this and we should be able to click this link again hey and it automatically logged me in because my wallet is connected and i already have an account look at that it's just like our local host was cool so now our live site is updated so if your friends were to look at this link they would see those changes awesome so now that it's pushed i think the next thing to do is let's set up that footer so i'm just going to go in here bring this guy down oh and just to make sure we can see stuff now that will fight dev connects this guy out and since it's going to generate a new one with texas cool let's do the footer so with the footer it has a little bit more stuff than the sidebar so to get started i'm thinking we should just get the css file out of the way so if i do this go to styles new file footer.module.css cool and let's import that now import styles styles nice okay so let's set up the skeleton so that we can just visualize me styling the footer a lot easier cool so that footer is the class that i want to set up there's a dot footer text dot footer text p dot footer record there's also a div that i'm seeing footer icon and dot footer ticker oh and this one's special it's like ticker okay there's also a container or a class called footer text and i believe it's actually underscore there is dot footer ticker h1 and there are some key frames on here right because looking at the finished product you see the spinning record to do that we have some keyframes or essentially just animations to spin that record so to get started with keyframes you just say add keyframes and press tab there's like a little guide here with the identifier for us it's going to be spin the record cool so then we can say from transform rotate 0 degrees to transform rotate 360 because that means it's going to just do a full rotation and then once it reaches zero get back to zero it's gonna do it again okay awesome so i will finish that but that's gonna be the skeleton of the footer css coming back to here all right i'm gonna go ahead and start coding what i need so i will need the music note icon which is that record so i'll just paste that on here no state at all but we are gonna use an image here so let's do import image from next image and i'm sorry it's not music note icon isn't the spinning record that's actually something else cool we got the styles here and now let's accept the props that footer passes down and let me just remind myself what that i think it was in video yes so just three things description song and channel okay so destructuring this let's get channel with two ends description and song okay cool now when it comes to the jsx let's give this guy a beautiful name i'm thinking we'll call her style.footer okay then within that i'm going to do class name styles order text and we're basically using all the classes that i defined in the css okay cool so for h3 we can say at the channel name which is essentially just the username and underneath is the description so for this video we should see tutorialhelp as a description if it's on there nope now it's working and underneath that underneath that p tag we have a div which i'll call styles.footer starts up for the ticker and here we'll use the music note i can give that a class name of styles.folder and we have a p tag which just holds some spacing of and nbsp i'm gonna do this two more times and we'll have the song right here which isn't really going to show anything so div then opening did for this style name we'll have the dot footer record and remember we we have it set up so we can have an image so let's use that image and it's going to have a source i have the link for you guys one second it's going to be this right here the static dot noun project let me do alt static dot now the noun project dot com slash png and then these numbers.png so you can pause that take the image or you might be able to find it in the next config as well and let's give it an alt final record so this is the spinny thing so the width is going to be 50 and the height will also be 50. okay export default footer that looks pretty good to me and don't really see much because let me refresh yeah don't really see much but maybe if i add styling you can see it a lot better all right let's get to work so for dot footer position i'm gonna make relative and color shall be white okay the bottom will be 150 pixels hey oh cool am i on wallet too should be in one one oh i registered as their nisha yeah and one i just totally forgot cool so shout out my student anisha so margin left 40 pixels okay then we'll do display flex awesome then we're going to do a flex one cool so we're getting there and it says zero because that's the index so for this class i'm targeting let's do a padding bottom let's make that 20 pixels okay cool that added some spacing now for the record here is where we can include the animation if i press tab uh all the little parameters can help us right here but we just need the name which is spin the record which will then get those keyframes we want to say infinite because we want to keep it going the time it takes to make that rotation five seconds and let's play linear look at that i'm gonna go just spin it around there let's put the height 50 pixels cool so once you have the height it made it spin in place now the filter invert one nice position absolute oh that's okay and we're gonna get it back to the right spot in a second and let's do a right 20 pixels there you go now it's aligned i like that so for the footer icon i think it's position absolute no that's relative but let's be absolute nice so now for the ticker thing let's have a height of fit content okay and the margin left 30 pixels okay and a width of 60 cool and just make sure that i have those classes footer ticker okay oh okay so it's just yeah i don't really have a dot ticker okay that's why i didn't really do much but i'm sure this will do something i think i have footer text right underscore oh i don't have footer text oh yeah i guess there is instead of missing dibs there's divs i don't really need because it does look fine and on its own okay we do we can do this one i have padding bottom here but i forgot why i coded this up initially that changing no not really okay i might have removed this so if i do a dot footer ticker h1 let's do a padding dash top seven pixels cool again nothing but other than that this looks pretty good so far yep i'm pretty happy with that so there you go once the footer all said and done okay so at this point i'd say we have everything we need to get like video working the only thing that we do have to do is go to the use tick tock hook and set it up so use tick tock all right so remember this like video everything should be hooked up we just need to add the functionality so with like video i want to add a console log here that's just going to say video light video has been light cool so if you see that console log that means just tells us the function has been running what we're going to need to do is make const x again and a weight program we got be using this from get program rpc dot the name of the instruction which is like video i'm getting this like video here from our solana playground because that's the name of my function pretty sure unless it's like underscore oh it is like underscore video it's good catch so like underscore video okay let's have a parenthesis here and curly brackets because this is going to take in accounts okay and for the key of accounts the video is going to be new public key address and for the authority we know how to get the authority it's going to from from the front end to my wallet.public key with the default accounts okay cool all right i guess that's pretty much it that's pretty much it for the like video i guess we can just console.log tx here so that we know it did go through but because we set up the front end we should see the red heart so again it always makes me nervous because now we're gonna see if our smart contract is working so let's see if it works first try of course that like video is not a function okay let's do like video let me just check that idea that's how i can confirm for sure see create user i see create create comment oh okay it is like video so it took out that underscore not this okay awesome so i'm just going crazy let's head back to that use tick tock hook i think i pasted something boom so let's save this it's like video now i'm just going to hit refresh just to smoothen the deal let's do the whole process let's go to wallet refresh all right okay that's good to know tick tocks dot length on main view so let's go to main view it's a good thing we did this guys i don't want to print that what i did want to do was this tick tocks dot length let's try to refresh that again nice okay so now lance wants to upload a video let's go back to tick tock and get just going to take this one copy video address just to double check that's really loud and now let's go back to here cool so to confirm this 888 is the one that we made if i do this i forgot what the name of this starting out with blockchain sure starting out with blockchain let's put the video url in there create new we actually have the estimated soul proof takes a second let's see if this refresh button works so if i click this video it's there and that's me there's my account that's there so let's say i'm looking at our niches let's see if i can like the video come on no balance charges found so that's entry i hit approve the tx console log oh video liked and the console logged huh i guess we can really tell once i refresh because it should set this to true let's go we can like tick tocks awesome all right if i click this again i can't like it because i already did all right so that's awesome so lance gave a like to this tick tock i could give a like to the next talk oh what okay that's interesting this shouldn't be red as well that is a problem okay so it went away when i press refresh if i click this oh okay so i can like the video for some reason it also showed up there but it fixed itself once i refreshed it a few times yeah cool so that makes sense i like this video i did not like this one but i can't alright if i switch to anisha let's see to wallet number two let's see if that stays hey look at that one that was me all right number one but it's not red so but if i do like it and approve it's gonna take a little bit hey two likes all right we're going up we're going we're getting closer and closer to getting viral here all right so we got two likes now and the like feature is working beautifully so let me just log on to my account and refresh so we can see that's two and it shows that i like and this should still be zero awesome so it looks pretty good to me i think what i'll do next is let's create the comments model that comes up right because if you look here if i click on this little icon there it is there's the comments and right that's the component on itself but once we finish that guys we're pretty much done with the project so how exciting is that we are almost done with the build if you're looking at me and you've made it this far you're crushing it right now so let's set up the front end now okay okay let's move on to our next component right it's gonna be the comments one which we already set up but we do need to set up the comments.module.css right now cool so get rid of that let's get the skeleton out of the way so we have our usual wrapper a class called comments header the close button see what else do i have here after the close button we have some more keyframes for the wrapper and actually call it wrapper and on the keyframes i'll just set it up now it's gonna be zero percent the zero percent the opacity will be zero and then we want to transform y make it move up nope not translate and let's make it go up a hundred percent and when it's 100 i want the opacity to just be one visible not visible i always mix up the two transform translate y make it go down okay cool so that's the keyframes for the wrapper okay from here let's do that button and we have a comment input wrapper and then we do this i'm targeting all the inputs in the comment input wrapper which should just be one in this case and if i hit save the skeleton is there we go to comments let's import that guy styles from styles comments.module.css beautiful okay awesome so there are some states that we will use here so let me just grab that real quick let's say use state use effect okay that should be it for now and just refresh my memory oops what are we passing into comments can you tell me guys did you say it we are passing so a couple things so let's just destructure those guys so i believe it's address on hide we have create comment index get comments and comment count cool and for our states on the menu today we have const equals use date to set up our use date and it's going to be comments right so this state is going to hold all our comments and we're going to have that set comments here too so the idea is with using tick tock we're going to get all the comments associated with that video and with that same hook we're going to set those comments into the state so we can put it into our front end that's the idea so the initial state will be empty array then we can say const new comment set new comment is equal to use date okay awesome okay cool so next thing i want to do is let's make a function here that's actually going to get the comments so getting comments this will be an asynchronous function and it's going to do let comments equals away get comments we've done this something similar to this a little bit ago and we'll get comment count as well we're going to pass that in to get comments because where is get comments coming from as i was mentioning before it should be from use tik tok get comments right you function to fetch the comments from the comment account in smart contract which we set up so that's what we're doing here on comments okay then we're going to do a comments dot sort all right we're going to sort all the comments so it always shows up in order and we put in a b and we're gonna set it so that b is the video time.2 number minus a dot video time to number as well yeah that's about right then we're going to do set comments to those sorted comments awesome so we're basically fetching all the comments and it might not come sorted when we get them so we're going to sort them to make sure and then set it to that state but again this is just the function when do we call this that's where our use effect comes in so let's call use effect again and the key here is what do you what is the function that you want to do getting comments and when do you want to when do you want to run it whenever the index changes right it's going to be once when it loads and then whenever the index gets updated cool so there's another function here that's going to be called reply clicked also asynchronous and this one's going to await create comment right and remember create comment is also in use tick tock and that one actually calls the create comment from the smart contract okay so it does take in some parameters like the address and the comment account wait no it doesn't i lied does not take the address wait it does take the comment i was just looking at the wrong comment count and it does take new comment that's the only difference between the two functions and then after that set the new comment to clear right because there's going to be a little input here where you can write the comment so that tells me we're gonna have it unchanged somewhere that's what this state is for okay so that's where pi clicked and this should function should run when i click the reply button or the add comment button whatever you want okay so jsx time now we have class name styles.wrapper and within that one we'll have another div called class name style dot comments header okay then we have a p tag called comment right and then just say how many comments we see like three comments four comments all right then we'll have another p tag and just to be curious i wonder if this works already ah okay i see comments dot sort oh it's okay because we didn't fetch any comments so this can't possibly so it's not gonna work just yet let me just finish this out after this it will have a class name which is style.close button and yeah this is part of the reason why it's not working because it's going to be on click on hi is there an unhide yes there is okay cool okay and here there's going to be end times let's close the p tag right here that makes more sense okay so then it should be closing div and here this is something interesting once we get that comments array all right let me see comments is oh yeah we're getting it from this once we get that comments array we can say comments dot map comment all right we're gonna map through each comment and for every single comment in the array i want to make a component called comment card so you might be wondering lance what is comic card comic card john is going to be this thing each individual thing right here is considered a comic card and we're just making that component so that we can reuse it without making it over and over right does that make sense so what we're going to do now all right is make that common card so here this is probably our last component right give it up for our last component guys we're already here so common card.js rafc e boom common card cool and since we're here this guy is going to take some props which is going to be the key which will be yeah so every like prop or component needs a key so let's do index.2 number all right so there's already an index associated with it let's just make that the key so that's what i'm saying here the username so we can get the username in here it's going to be equal to comment dot commenter name the only errors i can foresee is either i spelled something wrong or i forgot something so let's take a look at that that text avatar and if i had to put money on it it's probably something to comment with all these m's comment dot commenter url right for the avatar then there's a time stamp which is going to be comment video time videotime.2 number yeah that's it for common card cool closing parentheses and then all these guys and then this is where we should have the comment input wrapper yeah and i already know that when i was messing with this looks funny when there's no comments but when there's more it looks a lot nicer okay this input is selfclosing the type will equal text there's an on change on here right remember we have predicted that how not predicted i knew but based on the name that i was writing you guys can probably infer that there's a set new comment here on change and they're going to need to be e and how do we grab that input field e.target.value again you could use that for anything you need if you want to grab an input so value is going to be equal to whatever a new comment is all right and placeholder it's that nice little message that says leave comment little cta right there and button class name oops let me style that button oops see daisy oh okay i hope that's a lot easier to see you can take a moment to pause and see what i wrote so far okay cool so now we gotta on click to here because this is where the reply click will be called right that button and we'll just have a little reply here cool i know we don't have the get comments functionality yet cool so to get this annoying error out of the way we need to go into use tick tock and let's get create comment up does xs app and for create comment this is what we'll do we'll say let comment underscore pda equal to await anchor dot web 3 dot capital public key dot find program address parentheses right inside those parentheses again you might have seen this might be familiar to you that's because it is same kind of template that we're going to need this time instead of video we're doing comment and the new public key pass in address dot to buffer then we'll do a new b and u b n count oh i know what comma here new n account dot two array like method and let's pass in buffer yep be eight okay cool and just add a comma and i'll just put in the program id as well program that cool so that is the argument of find program address then here if user detail which we should have then we should set up a tx again and just await program.rpc.com again this isn't fetching comments this is the ability to make one so comma user detail dot user name comma user detail dot user profile is it profile image yeah it is profile image url because we want to get the user's name and their image just as you can see here okay boom is that it oh no there's also an object that we need to pass in here which is just the accounts like i done before so video dot new pub key address comment will be comment underscore pda authority will be wallet dot public key then we'll do that comma default accounts again spread operator and just for formatting purposes add some column and just to be super sure it's console.tx all right because that means if we can see this that means we can see the basically the receipt or like the transaction hash that comes after it's done so let me refresh cool awesome not only that i can't really create comment till we also get all the comments all right so we need to complete this function as well that's the reason why we're getting the error the first time so to get comments we're gonna need to make an empty array so let's say comment signers equals empty array and then let's make a for loop a regular for loop so it's just going to be eyes less than the count which is then increment cool and now what we can do is let comment signer add some space between these guys oh that explains a lot okay set that equal to all weight anchor dot web three dot public key dot program address all right same thing we pass in if you want the program address which is gonna be u utf8 code passing comment again new public key pass an address and then the buffer we do the new bn except this time we put dot 2 array and then put buffer with be and eight then we do program.program id okay then we do comment signers.push oh this one should be signers and then you push the comment signer into there yep that makes a lot more sense to me but we're not done yet that was just a for loop looping through all the comments and then adding that comment onto there what we need to do next is const comments is equal to await program dot account dot comment account or get all the comment account and then we need to do a fetch multiple yep that's a method to fetch multiple comment signers yes that's why we set it up before and over here we can console log the comments to see the ones that we're getting and then we need to return comments so if we return comments that's an array that we can sort so that's why we wouldn't see that error from here anymore so let's hit sin and now moment of truth refresh right click comment what's going on invalid class name what do you mean class name i should show me where this was i'm going to say it's at comments it's the only thing i could think of nope nope yeah i'm going to say it's that comments because it only happened when i clicked it let's check out class name class lowercase name oh i see it yeah right there good catch so let's refresh this again make him a big okay nothing still come on all right so if it's nothing that means we need to look at the sidebar again that's why you can't see it guys that's because we didn't do the styling for it so let's do this down for it right now so let's do the comments so if i remember it correctly text line will be center the background will be hashtag fff all right so i wonder if that would actually show it already no okay i got too excited width will be 100 the height will be 60 percent of the page and let's give it a padding of 20 pixels okay position will be absolute okay i'm just seeing something no okay and then we can add border top that's not done left radius which will be 20 pixels and the border top right radius will be also 20 pixels because again what we're styling here is this guy so look how it's supposed to be round over here we're gonna do bottom zero i'm gonna do left zero oh it's there it exists and if i click this x ay awesome i was going crazy i was like i thought i did this already but apparently i didn't so the animation is gonna be comment 0.2 that's like actually a standard 0.2 ease in it's like easy on the eyes that's how i remember cool now moving on to the comments header pull this up we're going to do a display flex which will set it to a row then we can do justify content space align item center and let's give it some more padding over here 0 and 20 pixels so top left 0 right top 0 20 pixels believe margin top will be 20 or minus 20 yeah and let's just see is that right let me just add the rest of this then we can figure it out let's do a font size 2 rem cursor pointer this might be because there's four comments but let me just see something with no no it should be more like that i think the margin top is too much maybe like 10. that feels pretty good to me cool so then we have the close button it's like right there it's so small compared to that one okay but then we have the button itself right here which we can give a background of hashtag 4 e or 4ce hey okay cool that's the button padding i'll just give you a 0.6 rem and one rem border radius 0.6 then a color of fff there we go also cursor pointer uh a transition let's give it that transition of 0.2 seconds linear do it max with oh 5.5 rem all right from there let's do an align items center justify content and display flex probably should do that first then we can do font weight let's give it 600 and font size oops font dash size 0.8 and of course border okay looks a lot better so let's fix up that comment input oh wait i don't need to write that i already heard i already wrote it the whole point so this one has display flex i'll put that first this time and adjustify content center and align item center let's give it a gap of 10 pixels right we're back on track it's back on the right place a margin top of 11 rem awesome like i said the the comment's going to look going to be in a weird spot but once we add more it's going to look a lot cleaner padding 10 pixels okay cool so from here the border will be none the outline will be none the width will be 100 yay okay cool looks a lot i feel a lot better about that one all right 100 and the font size font size it's going to be 1 r e m cool all right so now that we have all the front end you don't really need this as much now i can just go boop and boop and once i have more comments populate this will get pushed down to where it's supposed to go awesome so let's just refresh this for sanity and let's run through the process let's see if we can create a comment so moment of truth once again let's comment out with this one and let's say this not tutorial hell all right let's hit reply yes okay cool it doesn't say transaction may fail like i said it's actually computing how much solo would take that's a good sign i'll hit approve no errors okay i'm going to exit out just let it chill for a bit and we just wait till the comment finally loads yep no common card is not defined and that's an easy fix though okay i'll be perfect let's import comp card here common card save refresh okay let's click yes okay it's working right like it's funny because it just says comment card but that's just because there's only one comment and if there is a comment because of the map it's just going to load this div so the next step is let's finish out the comma card man i don't understand how happy i am that our smart contract is working just fine i hope you guys are just excited as i am so like i just was saying we only have to do is just comment card so i'm gonna set that up right now so first order of business let's make the common card style comment card dot module dot css and now that's done i can set up the skeleton of this okay so again you guys know the drill by now let's set up the skeleton the wrapper text container div oops there you go text container i think i want an avatar we'll have a username class as well there'll be like a reply bit and there's a comment text there's a time stamp and last but not least there's a button cool now in common card let's import styles from you believe this is our last component guys so who's with me you're almost done let's do styles slash comment card dot module.css amazing so let's finish this out strong so what i want to do set up all my imports import image from next image i want to import a heart outlined and we have an assets folder if you didn't know that you got from the cli tool that comes with all the images so no more making their builds along with me and you're like lance where did you get those assets from all right the cli tool will take care of all of your problems okay assets slash heart outlined svg and it's a package that it's installed we're going to get time ago all right that's how we're going to get the timestamp on the front end side okay let's also import yen from that javascript time ago slash locale slash end.json we're gonna need that one okay and we can do time ago dot add default locale pass in en and we can make a variable here called time go which will equal new time ago the end us it's going to constantly update when that comment was posted on the front end and again i just need to double check what i got from the comments card which again is actually from comments ah key username comment avatar timestamp so let's destructure stuff username timestamp avatar and comment nice okay and in the return here clean this up and let's plug in all the names so this is where our parent div goes and it's usually the wrapper and within that wrapper we'll have a div with no name and inside that div will host our image oops and we can actually define the width here 34 height of 34. okay this is where we give it that class name of style avatar styles that avatar habitat avatar and the source will equal avatar and even the will equal the username because that kind of makes sense yeah so closing div then opening with the opening div we're just going to do a style.txt container which has a nameless div and here it's going to contain that user like the actual username and the photo itself so style.username username alright so this contains our picture and this contains our username and the comment itself okay that's what it is after those two divs hit enter here inside of spam and the span will show us how long ago was that comment that i just made okay so that's going to be new date time stamp times 100 a thousand all right this is how you format it and then let's say let me see twitter oh yeah it is twitter now or dash now yeah okay and then we close the span which it already is then it's closing closing div and open the div so now that's it goes closing div closing div and now this makes more sense if i do a class name style dot button here and let's put a div in between that which will also hold the image of that outline like we can't like these replies but on tick tock you should see a little heart next to the comment where you can like it but if you did want to add that functionality you can now that you know how to add instructions on your smart contract so this one i'll give a width of 24 and a height of 24 as well unexpected i guess it lost the closing dude that it was supposed to have oh i see another one of these all right i'll take a look at that in a second let me just finish this out yep oh yeah there's no source that's why could be the reason outlined there you go there's my profile picture lance this is not tutorial that was my comment but now it's fully loaded it just looks really ugly because i didn't add any styling yet so that's the image closing div closing div and closing div yep that looks good all right last step guys let's add some css so for the final css that we need to add we're going to start with the wrapper which is just going to be display flex and we're going to add some padding 20 pixels that's padding right 10 pixels add some padding bottom 0 and padding top there could have been an easy way to do this but i already committed okay so then font size is going to be 0.9 rem text container is going to be text align left because i want all these comments to shift to the left there you go we can also add a margin left while we're here 10 pixels boom add some spacing there and of course a display flex yes okay then justify content space between and online center that hard over and a width of 100 see if it takes up that space there we go look at that and it's 14 minutes ago that's pretty accurate let's do border radius for the avatar let's make it 50 percent cool it wouldn't be that much noticeable but we also want to do an object fit cover yeah okay next is username i don't know why that's all in caps wait did i just add a username i don't want to do that cool and then for username let's add opacity of 0.5 yes okay and there's a little reply bit here that says cursor pointer which i believe now i'm thinking about i think i'm missing go back to common card it's the reply bit here apply bit i guess i don't have that anymore so i guess i can count that out and then there's comment text this one will have margin of four pixels and zero just shifts it down font size of one rem yes and let's style that timestamp a little bit let's give it an opacity of 0.5 and the button will have an opacity 0.3 cool and there it is there's our beautiful comment with that said i think that's it guys we have the tick tock build right so let's just run through all the functionality one last time all right and you know what before we even do that before i get too excited let's do this on our live link it's only fitting so if we go to get status let's see all the changes yep all the comments stuff hit add get commit m right add the rest of the front end basically and then we can do git push let's visit netlify see how he's doing or just write nullify ticktock solana and because we pushed it's automatically building once again now we wait oh okay that's a good sign there's failed to come to resolve heart outline that's why it's good to watch our deploys because now i know exactly where it failed and that's because this guy right here i'm surprised even got the heart outline even though it wasn't spelled the same but oh yeah since that was a change we can actually read a trigger redeploy by just adding that fixed import for heart outline and a good push yes sir and then we go back to here and now you see it failed and now it's building okay cool so let's just track it one more time fingers crossed okay side is live okay cool so it's up and running let's click deploys let's click ticktock salon and let's connect our phantom one awesome so again i'm logged in as lance because i'm in wallet one but what if let's select the random wallets pick wallet for all right let's run through the process right this is it we built this together it's been a long day building with you guys but i hope you're happy with this app let's celebrate by walking through what it can do so here it is this is demo but i hope you guys are demoing with me so log it's tick tock select the wallet we're using phantom of course click connect and let's create a user all right this one i'll call it alex and we have alex right here wow this is alex i like his hair this is his profile image and we'll click sign up click approve give it a second we can even refresh in a bit boom we're in our app i'm logged in as alex and you can see the tick tocks that we've uploaded previously and just to make sure i can give this one okay let's hit approve give it a chance to communicate with the blockchain hey you saw that it changed one like right provided by alex we can add a comment and say this is amazing all right we'll hit reply again all of these are being stored on the solana network right even my comments will hit of course on a large scale that is a lot of storage that we're going to be taking up if we put our comments here remember the main purpose of this build is to show you something that's familiar on web 2 and help you learn about concepts about web 3. this time it's on solana chain which means we're using anchor rust and all the other technologies that you learned so a lot of playground is in the beta stages right now and i showed you guys how to use it so again shout outs to a developer called akron he is one of the developers behind this playground and he helped me a lot understand russ code and anchor and even help me fix some bugs on here so super cool dude the people behind the solana playground are amazing i left a comment let's see if i refresh it see one hey look it's alex he says this is amazing i'm so happy with that let's go and now for the finale right let's add a video on tick tock so let's do a throwback here all the way let's do this advice for inspiring javascript developers i feel like that's kidding let's copy that link how do we create a new video you click this guy right here advice for aspiring developers i'll shorten it okay and let's paste it here let's hit create new let's hit approve right give it a couple seconds and there it is a tick tock uploaded by alex himself the new user that we logged in this is amazing congratulations on making it this far on the build right we did so much this site is even live you can copy this link and send it to your mom and she can see it and log in and make a tick tock i hope you guys enjoyed this i highly encourage you guys to play with the code add some more functions on the smart contract because i showed you how to do that and upgrade it i also want you guys to be on the lookout for our future videos and if you haven't go watch our amazon video that isn't on the salon chain but we use other cool technologies on that as well it's been a pleasure i'll see you guys in the next video peace
