With timestamps:

00:00 - hey guys what's up in this video I want
00:02 - to talk about for loops and how they
00:05 - work okay so we're going to get into
00:07 - loops you saw that we did a little bit a
00:09 - lot earlier in when we were using the
00:13 - turtle module so hopefully there are a
00:15 - little intuitive to you by now but now
00:18 - let's use them for more and guess
00:19 - realistic purposes right things to do
00:23 - with numbers and manipulation of data so
00:27 - not only can you use it for visual
00:29 - graphics but you can use it for anything
00:32 - now that's what I'm going to teach you
00:33 - so if you're making your own game you'll
00:35 - be able to use it after learning these
00:37 - things or if you were creating your own
00:40 - script maybe you're at a job whatever is
00:44 - the case you're going to become more
00:46 - familiar with loops and it's going to
00:48 - help you do a lot of powerful things
00:52 - okay
00:52 - so let's get started how loops work
00:55 - essentially it's a way of doing
00:57 - something multiple times whenever you
00:59 - think hmmm I need this done a lot of
01:02 - times what can I do for example if
01:05 - somebody told you print out numbers from
01:08 - 1 to 2
01:09 - you'll be like ok I'll just write print
01:11 - 1 in print too good but now what if that
01:16 - same person told you print numbers from
01:18 - 1 through 10 you'll say okay I'll just
01:20 - write print 1 print to print 3.4 print 5
01:23 - all up to print 10 whoo a lot of typing
01:27 - but hey it wasn't so bad now let's say I
01:31 - tell you to print up to 1000 could you
01:37 - type that of course you can would it
01:40 - take you maybe 2 hours 3 hours maybe
01:42 - you'll copy paste you'll do tricks it'll
01:45 - be harder now if I tell you type in a
01:47 - million is going to get much much much
01:49 - harder okay so for loop helps us
01:51 - overcome the burden of doing repetitive
01:54 - tasks so let's try something okay let's
01:58 - say I want to do something five times
02:00 - that's how I would say it okay I want
02:02 - you to look at it less from Python
02:04 - syntax specific perspective of I want to
02:07 - zoom in microscopically and what what is
02:10 - I it's hurting my eyes and what is range
02:12 - and what does it do and I'm
02:13 - getting a headache over here and where
02:15 - do I put a colon where I want you to
02:17 - read this as do something five times
02:20 - okay that's how I want you to read it do
02:24 - something five times that's what this is
02:26 - saying and here I'm going to say print
02:28 - hello so if I told you do do print hello
02:33 - five times that's how you would think of
02:35 - it you would go okay print hello five
02:38 - times you'll say do something five times
02:40 - and that something is print hello
02:43 - okay I want you to get in an intuitive
02:46 - sense of this so then you can reproduce
02:48 - these and do them on your own away from
02:51 - the screen okay so for example now let's
02:54 - run this code and let's see what it does
02:56 - and you can see print it out hello
02:58 - multiple times now you might be asking
03:00 - what is I if you don't already know you
03:03 - can call it whatever you want you can
03:05 - call it banana the code will still run
03:07 - what we need to do is break this one
03:10 - break this down one line at a time if we
03:13 - need to look at it more introspectively
03:15 - and see what's going on so what is range
03:18 - of five well let's check it out let's
03:20 - see what range of five is so I'm going
03:22 - to print this out range of five is
03:25 - really a list of numbers from zero
03:27 - through four okay so to use loops you
03:31 - need to know what a list is since we've
03:33 - covered what a list is that's there you
03:36 - go so range of five really evaluates to
03:40 - this okay when you write the reason why
03:43 - you should write lists here is because
03:45 - python hides it it secretly writes it
03:47 - and you can't tell what it is and
03:50 - especially since you're starting out
03:52 - this is going to confuse you when it
03:53 - says that okay when you get more
03:55 - advanced you'll know why it says this
03:57 - but for now I'm gonna not hide it unhide
04:00 - it and take out the actual form of what
04:03 - it looks like and I know that if I call
04:05 - list it'll show you like the actual type
04:07 - of what what it's doing under the hood
04:09 - so essentially whenever you see a range
04:13 - of five
04:13 - you should think oh that's just this
04:17 - it's a list containing five elements
04:19 - starting from zero all the way up to
04:21 - four okay so now we can try we can start
04:25 - to break all of this
04:26 - down we can go okay if range of five is
04:30 - really this hmm so range of five is
04:32 - actually that zero one two three for the
04:36 - first time right let me write this code
04:39 - here let me let me change this hello and
04:41 - let me change it with an eye okay and
04:44 - let's let's do that
04:45 - you see zero one two three four hmm what
04:48 - happened there so let's see the first
04:51 - time we ran the code I is zero so it
04:54 - prints out zero the second time around
04:55 - the code I went and became the second
04:58 - element of the list so I became one then
05:00 - where I was here it became one it
05:03 - printed out the one then I became two it
05:05 - put two here printed out two then I
05:07 - became three three four and printed out
05:10 - four and there you go you see all of
05:12 - that on the right hand side zero got
05:14 - printed then one got printed and two
05:16 - that's why it's all separated by a line
05:18 - okay so that's really what that I there
05:22 - does could we call this number yes we
05:27 - can and that's actually a better
05:28 - variable name so my suggestion to you
05:31 - especially if you're starting out with
05:32 - programming never ever use one letter
05:36 - variables never okay so even if you
05:41 - think you have you can use an I here or
05:42 - an X or Y don't do it take your time and
05:46 - pick up pick better variable names so
05:50 - I'm going to change this with number
05:51 - because number is that variable this
05:55 - variable we created on the fly and I'm
05:58 - going to say from zero through four now
06:00 - let me tell you something about the
06:02 - range function in Python the range
06:04 - function take start and stop okay but
06:08 - it's kind of like this if you have to
06:11 - think about it mathematically it
06:12 - includes this point which is why I put
06:15 - this here and it goes up to but not does
06:18 - not include the stop okay so the range
06:21 - function takes in two arguments start
06:23 - and stop so if I gave it one or let's
06:26 - say I gave it zero and let's say I gave
06:28 - it ten you get back let's just do two
06:31 - because I'm lazy oh you get back
06:34 - zero one and two well what if I wanted
06:37 - to print up to from
06:39 - 2:40 right what if I wanted to do that
06:42 - well I can certainly write a list from
06:45 - 20 to 40 right I can go 20 21 22 23 24
06:51 - all the way up to 40 but that would take
06:53 - a long time let's use range to generate
06:55 - that on the fly let's start with 20 and
06:57 - go up to 41 but not including 41 it
07:01 - excludes the 41 so this actually
07:05 - translates to a list starting from 20
07:07 - going up to 40 and if we print it out
07:09 - you can see goes from 20 all the way up
07:12 - to 40 so loops are great now in the next
07:19 - video I want to talk about while loops
07:20 - before I get to that I want to tell you
07:22 - something so up until now we have done a
07:24 - lot of Python syntax stuff learn the
07:27 - basics of Python and how it works
07:31 - programming specific syntax where do you
07:34 - put the colon or did he do this now
07:37 - after this point especially after the
07:39 - while loops we're gonna get into
07:41 - exercises and we're gonna kind of drill
07:43 - and kill exercises I'm going to make
07:45 - this the best Python course there is for
07:49 - learning Python hands down what's
07:51 - lacking from a lot of the online video
07:53 - courses or exercises and I'm going to
07:56 - give you guys so many exercises is going
07:58 - to hurt your brain but in a good way
08:00 - where as it makes you smarter and you
08:02 - get better because without doing
08:04 - exercises you will not get better you
08:06 - can look at me write code all day long
08:08 - you're not going to get better because
08:11 - of that you need to do it on your own no
08:13 - matter how simple it is
08:14 - and while code Academy and all those
08:16 - things are great the hand holds you
08:18 - quite a bit which means that you're not
08:22 - really learning a lot of those things
08:25 - okay so we're gonna take a break from a
08:28 - lot of these tutorials and do exercises
08:31 - really get these ideas down okay what do
08:35 - I mean by an exercise let's do an
08:36 - exercise right here right now okay live
08:39 - I'm gonna leave this here for you guys
08:42 - because I want to leave this link into
08:45 - the youtube description so you can
08:46 - actually go look at these notes okay
08:48 - so I'm gonna save this and I'm going to
08:50 - leave this as notes
08:52 - print numbers from 20 through 40
08:58 - including 40 ha right or rather I can
09:03 - say through to 41 and I can say
09:08 - excluding 41 that's probably a better
09:10 - way for me to write it because that's
09:12 - how Python thinks a bit okay now let's
09:15 - do an exercise let's say that we take
09:18 - numbers from a list sum them up and
09:20 - return them what do I mean if I give you
09:23 - a list containing 1 2 3 you should give
09:26 - me back 6 because 1 plus 2 plus 3 is 6
09:29 - so if I gave you this list you should
09:34 - give me back a 6 but now let's also
09:37 - start adding together everything we've
09:40 - learned so far
09:41 - let's create a function okay that takes
09:44 - in something and then does it so we're
09:46 - going to build up to that
09:47 - ok so first let's just write something
09:50 - using a for loop that sums up all the
09:52 - numbers in the list and then returns
09:54 - them back to us okay or prints them out
09:56 - back to us so let's do this let's say
09:59 - count is equal to 0 so we're going to
10:02 - use some variable to keep track of every
10:06 - number so essentially then we can say
10:08 - that if when we go through the loop we
10:11 - can say okay I want you to add 1 to
10:15 - count then when I want to go through the
10:17 - loop again I wanna I want to say add 2
10:20 - to count then when I go through the loop
10:21 - again I want to say add 3 to count okay
10:25 - and so in the start you'll have a count
10:28 - being 1 then you'll have it being 1 plus
10:30 - 2 so 3 and then you'll have it being 2
10:33 - plus 3 so 6 so you should get you know
10:36 - arm back 6 so let's try it so I will say
10:41 - for number in range let's say range what
10:45 - will I say to range to create a list
10:47 - from 0 to 3 or 1 to 3 basically I would
10:51 - say 1 2 4 ok this creates a list of 1 2
10:57 - & 3
10:57 - ok
10:58 - so I'm going to say range one through
11:01 - four okay now let's do how can we
11:07 - increment count okay I know that number
11:11 - is going to be one the first time then
11:12 - two then three that's not a problem so
11:14 - number is good what we're getting with
11:16 - number but how can I increment it to
11:18 - count every single time here's what I
11:20 - will do also count is equal to count
11:22 - plus number okay what does this mean
11:26 - here's what this means this says I want
11:31 - the new count to be so the new count to
11:34 - be here new count is equal to old count
11:38 - plus number okay but so this is saying
11:43 - my new variable count is going to be
11:46 - what my old variable count was plus
11:50 - number okay so the first time we go
11:52 - through the loop the number is going to
11:53 - be one old count is going to be zero
11:56 - okay and so it's going to say now count
12:00 - is one okay then when we go through the
12:03 - loop the second time number is going to
12:05 - be two oh by the way this count is going
12:07 - to turn to one right because we
12:09 - redefined what count is then what's
12:13 - going to happen is that a number is
12:16 - going to be two so essentially you're
12:18 - going to get back half plus number which
12:21 - is going to evaluate to count plus two
12:23 - and number is two and count was one so
12:27 - this is going to evaluate to three store
12:29 - count as three then you're going to get
12:31 - back count plus number here again right
12:33 - and then you're going to get so the
12:36 - number is now this time going to be
12:38 - three and so you get back count which is
12:42 - three plus three this evaluates to a six
12:45 - and our loop ends okay so let's just
12:48 - undo this damage that we have done and
12:52 - let's check it out let's print count so
12:56 - we run through this entire loop right
12:59 - and once we're done running through this
13:00 - entire loop we print out count it should
13:04 - be
13:05 - in our in this case six so let's check
13:08 - it okay and you can see that count does
13:12 - indeed give us back a six well that's
13:15 - great that we wrote a four loop that
13:17 - runs for the numbers one two and three
13:19 - what if we want to write this for loop
13:22 - and we want it to run right we want it
13:26 - to run and sum up lists for any list
13:29 - given to it any size list it could be a
13:31 - size one list size 30 list size a
13:35 - bajillion lists whatever okay so let's
13:38 - see how we do it okay because practice
13:41 - is key right how do you go from
13:43 - conscious competence to in conscious
13:46 - competence
13:47 - that's how jordan belfort says it right
13:50 - the guy in walls wolf of Wall Street the
13:53 - movie oh-hoo-hoo wolf of Wall Street was
13:55 - bait the person who wolf of Wall Street
13:57 - was based on he defines two concepts
14:00 - conscious competence and unconscious
14:02 - competence what is conscious competence
14:04 - that's you thinking about something and
14:08 - then being good at it what's in
14:09 - conscious competence you get so damn
14:11 - good at what you do that you don't even
14:14 - have to think about it and you do it
14:15 - okay so how do we go from conscious
14:18 - competence you're looking at your notes
14:19 - he's really thinking about it and how
14:21 - does a function work to like you just
14:24 - writing code is practice okay there's no
14:27 - there's there's no substitution for that
14:30 - the only thing that you can do is hard
14:33 - work okay there's no getting around it
14:35 - there's no you can't watch somebody
14:37 - else's videos or my videos and just sit
14:40 - there and try to synthesize information
14:41 - be like why am I not getting it you
14:43 - can't just take notes all day from your
14:45 - professor you have to try to do this
14:48 - stuff on your own end of rant let's
14:52 - continue so let's write this function
14:53 - that can take in any size list and sum
14:57 - it up okay so I'm going to say define
15:00 - function okay so let's just write a
15:02 - little note at the top so so we know
15:04 - what we're doing right a function that
15:09 - sums sums all elements of a list and
15:13 - returns them okay that's what this is
15:16 - doing that's what returns them let's
15:20 - just put a little thing here like this
15:24 - all right so let's write this function
15:27 - I'm going to say define that's the first
15:29 - step to defining a function and I'm
15:31 - going to say a sum list okay so the
15:33 - function is called sum list it takes in
15:35 - one argument let's make that argument be
15:38 - whatever my list okay that's you can
15:42 - call it whatever you want you can call
15:43 - ABC X Z but remember my rule try not to
15:47 - think the name things as one bit of one
15:50 - letter variable try to make it more
15:51 - descriptive so I'm assuming I'm going to
15:54 - get a my list or a list as input so I'm
15:57 - going to call it my list so I'm going to
16:00 - hit enter now what's the next part okay
16:03 - hmm
16:04 - let's think about it so the next part I
16:06 - want to put here is I want to have a
16:11 - counter variable right that's what we
16:13 - had when we were writing this for loop
16:15 - and I want to say for number in well
16:20 - what's the list we're working with here
16:22 - the list we were working with is one
16:24 - through four right kind of like this
16:26 - list so imagine if we had that list as
16:29 - my list well we know it's called my list
16:31 - whatever the list we get is called my
16:34 - list and so just so you guys know what
16:38 - we are kind of doing is eventually what
16:40 - we want to be able to do is it's a sum
16:43 - list and pass it to list one two three
16:46 - and this should give us back a six okay
16:50 - so we want to say assert that sum list
16:54 - is this is equal to six
16:59 - okay so this is a nice little test for
17:01 - you guys which asserts things for
17:02 - example if I write an assertion that's
17:04 - false it's going to give me back false
17:06 - so if I said five is equal to six my
17:09 - code is going to yell at me hold on
17:11 - I'm obviously having an error here
17:13 - because I'm writing funky business but
17:15 - you but you can say yes you can see I
17:17 - get an assertion error it goes hey five
17:19 - is not equal to six but if I go six is
17:22 - equal to
17:22 - six you can see that assertion gives me
17:25 - a nice little three here right which is
17:28 - which is or sorry does this give me
17:32 - three there no I'm sorry yeah what so
17:35 - assertion basically just doesn't give
17:37 - you an error okay
17:38 - when assertion works it just doesn't
17:40 - give you an error okay so certian
17:44 - doesn't give me back anything it just
17:46 - gives me back no error when it works and
17:48 - it gives me a big red angry
17:50 - scary-looking error when it when it's
17:53 - wrong so I want to have this assertion
17:56 - here and why this assertion will be
17:58 - helpful to me is it's going to test my
18:00 - code okay
18:02 - let's have another assertion and let's
18:07 - say for and this should give me back 10
18:10 - so I'm also teaching you guys how to
18:12 - test your code so once I write this
18:14 - function you should be able to call the
18:16 - function by saying some list passing it
18:19 - any list in this case this list 1 2 3
18:23 - and it should give you back a 6 and it
18:25 - should give you back a 10 when you run
18:26 - this code if it doesn't give you an
18:28 - error that means it's passed all of
18:30 - these test cases if it fails it means it
18:32 - failed one of these test cases and your
18:35 - code is wrong all right let's keep going
18:37 - so I want to say for a number in my list
18:40 - right that's the list I get so remember
18:44 - this list is going to be if we pass this
18:47 - test case right if we give it this test
18:49 - case and list is going to be 1 2 3
18:50 - really right so let's just say my list
18:54 - and what I want to do is what do I want
18:57 - to do now I want to go count is equal to
18:59 - count plus 1 ok so even though we're
19:02 - doing it this exercise right now I'm
19:03 - gonna have you guys do it again in the
19:05 - exercises portion just so you can do it
19:07 - from scratch for now just watch along
19:09 - and get the concepts and how it works
19:11 - ok so I increment count by what should
19:15 - increment count by I don't want to
19:17 - increment it by 1 that would be wrong I
19:19 - want to increment it by the actual
19:24 - number right so I want to say number
19:26 - here oh I'm sorry I wrote this wrong I'm
19:28 - silly I meant to
19:30 - I meant incrementing by number up there
19:32 - hopefully that didn't throw you off too
19:34 - much okay
19:35 - so but for you guys when you guys look
19:38 - at the notes it's going to be fixed okay
19:40 - I change it to number sorry about that
19:42 - all right
19:43 - so whatever count was plus the number
19:47 - from list okay great and now at the end
19:52 - we have to say return count okay just
19:57 - format it a little bit nicer let's
19:59 - remove some of these extra spaces and
20:02 - let's save it again
20:04 - and now I'm going to run it and if I
20:06 - don't get back an assertion error which
20:08 - I didn't that means that runs perfectly
20:11 - imagine if okay so if I said one plus
20:13 - two plus three should not give you a six
20:15 - let's say I said give it it should give
20:17 - me a seven you'll see that it gives me
20:19 - an assertion error it says hey calling
20:21 - some list on one two three does not give
20:23 - me a seven so it should give you back a
20:26 - six okay that's good
20:28 - and just for sanity check let's run it
20:31 - and print something let's say one two
20:33 - what should that give us that should
20:35 - give us a four right or sorry three one
20:38 - plus two

Cleaned transcript:

hey guys what's up in this video I want to talk about for loops and how they work okay so we're going to get into loops you saw that we did a little bit a lot earlier in when we were using the turtle module so hopefully there are a little intuitive to you by now but now let's use them for more and guess realistic purposes right things to do with numbers and manipulation of data so not only can you use it for visual graphics but you can use it for anything now that's what I'm going to teach you so if you're making your own game you'll be able to use it after learning these things or if you were creating your own script maybe you're at a job whatever is the case you're going to become more familiar with loops and it's going to help you do a lot of powerful things okay so let's get started how loops work essentially it's a way of doing something multiple times whenever you think hmmm I need this done a lot of times what can I do for example if somebody told you print out numbers from 1 to 2 you'll be like ok I'll just write print 1 in print too good but now what if that same person told you print numbers from 1 through 10 you'll say okay I'll just write print 1 print to print 3.4 print 5 all up to print 10 whoo a lot of typing but hey it wasn't so bad now let's say I tell you to print up to 1000 could you type that of course you can would it take you maybe 2 hours 3 hours maybe you'll copy paste you'll do tricks it'll be harder now if I tell you type in a million is going to get much much much harder okay so for loop helps us overcome the burden of doing repetitive tasks so let's try something okay let's say I want to do something five times that's how I would say it okay I want you to look at it less from Python syntax specific perspective of I want to zoom in microscopically and what what is I it's hurting my eyes and what is range and what does it do and I'm getting a headache over here and where do I put a colon where I want you to read this as do something five times okay that's how I want you to read it do something five times that's what this is saying and here I'm going to say print hello so if I told you do do print hello five times that's how you would think of it you would go okay print hello five times you'll say do something five times and that something is print hello okay I want you to get in an intuitive sense of this so then you can reproduce these and do them on your own away from the screen okay so for example now let's run this code and let's see what it does and you can see print it out hello multiple times now you might be asking what is I if you don't already know you can call it whatever you want you can call it banana the code will still run what we need to do is break this one break this down one line at a time if we need to look at it more introspectively and see what's going on so what is range of five well let's check it out let's see what range of five is so I'm going to print this out range of five is really a list of numbers from zero through four okay so to use loops you need to know what a list is since we've covered what a list is that's there you go so range of five really evaluates to this okay when you write the reason why you should write lists here is because python hides it it secretly writes it and you can't tell what it is and especially since you're starting out this is going to confuse you when it says that okay when you get more advanced you'll know why it says this but for now I'm gonna not hide it unhide it and take out the actual form of what it looks like and I know that if I call list it'll show you like the actual type of what what it's doing under the hood so essentially whenever you see a range of five you should think oh that's just this it's a list containing five elements starting from zero all the way up to four okay so now we can try we can start to break all of this down we can go okay if range of five is really this hmm so range of five is actually that zero one two three for the first time right let me write this code here let me let me change this hello and let me change it with an eye okay and let's let's do that you see zero one two three four hmm what happened there so let's see the first time we ran the code I is zero so it prints out zero the second time around the code I went and became the second element of the list so I became one then where I was here it became one it printed out the one then I became two it put two here printed out two then I became three three four and printed out four and there you go you see all of that on the right hand side zero got printed then one got printed and two that's why it's all separated by a line okay so that's really what that I there does could we call this number yes we can and that's actually a better variable name so my suggestion to you especially if you're starting out with programming never ever use one letter variables never okay so even if you think you have you can use an I here or an X or Y don't do it take your time and pick up pick better variable names so I'm going to change this with number because number is that variable this variable we created on the fly and I'm going to say from zero through four now let me tell you something about the range function in Python the range function take start and stop okay but it's kind of like this if you have to think about it mathematically it includes this point which is why I put this here and it goes up to but not does not include the stop okay so the range function takes in two arguments start and stop so if I gave it one or let's say I gave it zero and let's say I gave it ten you get back let's just do two because I'm lazy oh you get back zero one and two well what if I wanted to print up to from 240 right what if I wanted to do that well I can certainly write a list from 20 to 40 right I can go 20 21 22 23 24 all the way up to 40 but that would take a long time let's use range to generate that on the fly let's start with 20 and go up to 41 but not including 41 it excludes the 41 so this actually translates to a list starting from 20 going up to 40 and if we print it out you can see goes from 20 all the way up to 40 so loops are great now in the next video I want to talk about while loops before I get to that I want to tell you something so up until now we have done a lot of Python syntax stuff learn the basics of Python and how it works programming specific syntax where do you put the colon or did he do this now after this point especially after the while loops we're gonna get into exercises and we're gonna kind of drill and kill exercises I'm going to make this the best Python course there is for learning Python hands down what's lacking from a lot of the online video courses or exercises and I'm going to give you guys so many exercises is going to hurt your brain but in a good way where as it makes you smarter and you get better because without doing exercises you will not get better you can look at me write code all day long you're not going to get better because of that you need to do it on your own no matter how simple it is and while code Academy and all those things are great the hand holds you quite a bit which means that you're not really learning a lot of those things okay so we're gonna take a break from a lot of these tutorials and do exercises really get these ideas down okay what do I mean by an exercise let's do an exercise right here right now okay live I'm gonna leave this here for you guys because I want to leave this link into the youtube description so you can actually go look at these notes okay so I'm gonna save this and I'm going to leave this as notes print numbers from 20 through 40 including 40 ha right or rather I can say through to 41 and I can say excluding 41 that's probably a better way for me to write it because that's how Python thinks a bit okay now let's do an exercise let's say that we take numbers from a list sum them up and return them what do I mean if I give you a list containing 1 2 3 you should give me back 6 because 1 plus 2 plus 3 is 6 so if I gave you this list you should give me back a 6 but now let's also start adding together everything we've learned so far let's create a function okay that takes in something and then does it so we're going to build up to that ok so first let's just write something using a for loop that sums up all the numbers in the list and then returns them back to us okay or prints them out back to us so let's do this let's say count is equal to 0 so we're going to use some variable to keep track of every number so essentially then we can say that if when we go through the loop we can say okay I want you to add 1 to count then when I want to go through the loop again I wanna I want to say add 2 to count then when I go through the loop again I want to say add 3 to count okay and so in the start you'll have a count being 1 then you'll have it being 1 plus 2 so 3 and then you'll have it being 2 plus 3 so 6 so you should get you know arm back 6 so let's try it so I will say for number in range let's say range what will I say to range to create a list from 0 to 3 or 1 to 3 basically I would say 1 2 4 ok this creates a list of 1 2 & 3 ok so I'm going to say range one through four okay now let's do how can we increment count okay I know that number is going to be one the first time then two then three that's not a problem so number is good what we're getting with number but how can I increment it to count every single time here's what I will do also count is equal to count plus number okay what does this mean here's what this means this says I want the new count to be so the new count to be here new count is equal to old count plus number okay but so this is saying my new variable count is going to be what my old variable count was plus number okay so the first time we go through the loop the number is going to be one old count is going to be zero okay and so it's going to say now count is one okay then when we go through the loop the second time number is going to be two oh by the way this count is going to turn to one right because we redefined what count is then what's going to happen is that a number is going to be two so essentially you're going to get back half plus number which is going to evaluate to count plus two and number is two and count was one so this is going to evaluate to three store count as three then you're going to get back count plus number here again right and then you're going to get so the number is now this time going to be three and so you get back count which is three plus three this evaluates to a six and our loop ends okay so let's just undo this damage that we have done and let's check it out let's print count so we run through this entire loop right and once we're done running through this entire loop we print out count it should be in our in this case six so let's check it okay and you can see that count does indeed give us back a six well that's great that we wrote a four loop that runs for the numbers one two and three what if we want to write this for loop and we want it to run right we want it to run and sum up lists for any list given to it any size list it could be a size one list size 30 list size a bajillion lists whatever okay so let's see how we do it okay because practice is key right how do you go from conscious competence to in conscious competence that's how jordan belfort says it right the guy in walls wolf of Wall Street the movie ohhoohoo wolf of Wall Street was bait the person who wolf of Wall Street was based on he defines two concepts conscious competence and unconscious competence what is conscious competence that's you thinking about something and then being good at it what's in conscious competence you get so damn good at what you do that you don't even have to think about it and you do it okay so how do we go from conscious competence you're looking at your notes he's really thinking about it and how does a function work to like you just writing code is practice okay there's no there's there's no substitution for that the only thing that you can do is hard work okay there's no getting around it there's no you can't watch somebody else's videos or my videos and just sit there and try to synthesize information be like why am I not getting it you can't just take notes all day from your professor you have to try to do this stuff on your own end of rant let's continue so let's write this function that can take in any size list and sum it up okay so I'm going to say define function okay so let's just write a little note at the top so so we know what we're doing right a function that sums sums all elements of a list and returns them okay that's what this is doing that's what returns them let's just put a little thing here like this all right so let's write this function I'm going to say define that's the first step to defining a function and I'm going to say a sum list okay so the function is called sum list it takes in one argument let's make that argument be whatever my list okay that's you can call it whatever you want you can call ABC X Z but remember my rule try not to think the name things as one bit of one letter variable try to make it more descriptive so I'm assuming I'm going to get a my list or a list as input so I'm going to call it my list so I'm going to hit enter now what's the next part okay hmm let's think about it so the next part I want to put here is I want to have a counter variable right that's what we had when we were writing this for loop and I want to say for number in well what's the list we're working with here the list we were working with is one through four right kind of like this list so imagine if we had that list as my list well we know it's called my list whatever the list we get is called my list and so just so you guys know what we are kind of doing is eventually what we want to be able to do is it's a sum list and pass it to list one two three and this should give us back a six okay so we want to say assert that sum list is this is equal to six okay so this is a nice little test for you guys which asserts things for example if I write an assertion that's false it's going to give me back false so if I said five is equal to six my code is going to yell at me hold on I'm obviously having an error here because I'm writing funky business but you but you can say yes you can see I get an assertion error it goes hey five is not equal to six but if I go six is equal to six you can see that assertion gives me a nice little three here right which is which is or sorry does this give me three there no I'm sorry yeah what so assertion basically just doesn't give you an error okay when assertion works it just doesn't give you an error okay so certian doesn't give me back anything it just gives me back no error when it works and it gives me a big red angry scarylooking error when it when it's wrong so I want to have this assertion here and why this assertion will be helpful to me is it's going to test my code okay let's have another assertion and let's say for and this should give me back 10 so I'm also teaching you guys how to test your code so once I write this function you should be able to call the function by saying some list passing it any list in this case this list 1 2 3 and it should give you back a 6 and it should give you back a 10 when you run this code if it doesn't give you an error that means it's passed all of these test cases if it fails it means it failed one of these test cases and your code is wrong all right let's keep going so I want to say for a number in my list right that's the list I get so remember this list is going to be if we pass this test case right if we give it this test case and list is going to be 1 2 3 really right so let's just say my list and what I want to do is what do I want to do now I want to go count is equal to count plus 1 ok so even though we're doing it this exercise right now I'm gonna have you guys do it again in the exercises portion just so you can do it from scratch for now just watch along and get the concepts and how it works ok so I increment count by what should increment count by I don't want to increment it by 1 that would be wrong I want to increment it by the actual number right so I want to say number here oh I'm sorry I wrote this wrong I'm silly I meant to I meant incrementing by number up there hopefully that didn't throw you off too much okay so but for you guys when you guys look at the notes it's going to be fixed okay I change it to number sorry about that all right so whatever count was plus the number from list okay great and now at the end we have to say return count okay just format it a little bit nicer let's remove some of these extra spaces and let's save it again and now I'm going to run it and if I don't get back an assertion error which I didn't that means that runs perfectly imagine if okay so if I said one plus two plus three should not give you a six let's say I said give it it should give me a seven you'll see that it gives me an assertion error it says hey calling some list on one two three does not give me a seven so it should give you back a six okay that's good and just for sanity check let's run it and print something let's say one two what should that give us that should give us a four right or sorry three one plus two
