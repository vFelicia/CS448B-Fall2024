With timestamps:

00:00 - welcome to the best Python tutorial in
00:03 - the world they'll take you from a
00:04 - complete beginner to not so bad this
00:07 - tutorial will cover so many things
00:10 - you're going to be building amazing
00:11 - projects all with python as a beginner
00:14 - so you're going to be building an app
00:16 - with like a counter app we're gonna go
00:18 - ahead and build guess the number game a
00:20 - YouTube app that's gonna queer YouTube
00:22 - get the data back show it on the screen
00:24 - rock paper scissors who doesn't like
00:27 - rock paper scissors and we're also going
00:29 - to be building a random dog generator
00:31 - app which is going to be awesome you'll
00:32 - be able to click on the dogs generate
00:34 - the dogs it'll remember you logging in
00:36 - it'll remember you logging out there'll
00:37 - be a leaderboard of who generated the
00:38 - most dogs I mean oh my gosh all this
00:41 - with python while all of that is fun
00:42 - first we need to get our fundamentals so
00:44 - the first thing this course is going to
00:46 - start with is clear cut beautiful
00:50 - amazing fundamentals okay mastering
00:53 - basic concepts starting from variables
00:55 - to going to conditionals going to Loops
00:58 - for Loops diction
01:00 - lists you name it list comprehensions
01:03 - all of that stuff we're going to cover
01:05 - if you've never coded before a day in
01:07 - your life you're absolutely in the right
01:09 - place if you're even intermediate I
01:11 - promise there's going to be things in
01:12 - here that I'm going to show you they're
01:13 - going to blow your mind ways to refactor
01:15 - your code or List comprehensions Lambda
01:18 - functions all the stuff is available for
01:20 - you if you're Advanced there might be
01:22 - still some tidbits that are there that
01:24 - you'll be able to pick up with that said
01:26 - hey if you don't know me I'm rafikaze
01:28 - the CEO and founder of clever programmer
01:30 - I've helped teach millions of people how
01:33 - to code and now my goal is to help you
01:35 - learn how to code and become a software
01:38 - developer alright now if you want to
01:40 - follow along with me into this course
01:42 - you're gonna need to scroll down below
01:44 - and click the link in the description
01:47 - join.replet.com
01:49 - CP Dash python open that up and Fork
01:53 - this repository if you don't Fork you
01:55 - won't be able to write any of your code
01:57 - or do anything with this okay and the
01:59 - reason why I'm having you use this Rebel
02:02 - is so you don't have to install python
02:04 - you can just get it up and running
02:05 - without having to do anything everything
02:07 - will be here like the images and the
02:09 - assets you'll need your project links
02:11 - for your exercises all the notes will be
02:13 - here for you so everything that you need
02:14 - to be able to get access to you'll have
02:16 - it in here without doing anything and
02:18 - then once you're done it'll bring you to
02:20 - a page like this in this main.py file is
02:24 - where you're going to write all of your
02:27 - code and I mean all of it everything
02:29 - goes in here okay this quasi.py file
02:32 - that's here this is all the code I will
02:35 - be writing in the video and you'll be
02:37 - following along with me and so you can
02:38 - go at any time to this quasi.py here and
02:42 - you'll get access to and be able to see
02:44 - all the code that I've written so that
02:46 - way if you're worried about missing
02:47 - notes or anything don't be because
02:48 - everything is already there and so
02:50 - you're not going to miss anything this
02:51 - readme you should be seeing this over
02:53 - here in the if you select markdown at
02:56 - the top here okay and this is pretty
02:57 - important and this will have all of your
02:59 - Prime projects here available for you
03:01 - these projects you won't be jumping into
03:03 - them now but you'll be jumping into them
03:05 - once you master certain Concepts that
03:07 - shows you that you're going to be
03:07 - building this app right here and it
03:09 - tells you hey these are the concepts
03:11 - pure python Concepts that are going to
03:12 - be covered so make sure before you get
03:14 - to this project you master all of these
03:17 - Concepts that I have listed out here
03:18 - okay and then it tells you hey don't
03:20 - worry about the web development Concepts
03:21 - you won't need to know these uh before
03:23 - you can start building this all of these
03:25 - applications you build will be already
03:27 - online and deployed which means that you
03:29 - could just send it off to anybody
03:30 - anywhere and they can play with these
03:32 - projects that you build any project that
03:34 - you go to will have this project link
03:35 - where you can write your code it'll have
03:37 - this demo link where you can go ahead
03:39 - and demo your apps and then it'll have a
03:41 - solution link as well so you could click
03:43 - and view the solution and all the notes
03:45 - we're going to take throughout this will
03:47 - be made available to you here as well in
03:49 - this markdown if you ever want to go to
03:51 - it again just hit markdown and then just
03:53 - scroll down and so like if I'm talking
03:54 - about dictionaries those will be listed
03:56 - out here conditionals Etc with that said
03:58 - we're going to start from complete
04:01 - complete complete beginner stuff okay so
04:03 - don't stress Don't Worry Don't let this
04:05 - file overwhelm you this is more to just
04:07 - give you a road map and what's happening
04:09 - we're gonna start from baby steps I'm
04:12 - Gonna Hold Your Hand every single step
04:14 - of the way and it's gonna be a lot of
04:15 - fun with that said I hope you're excited
04:17 - before we get into the video do me a
04:19 - huge favor smash that like button turn
04:23 - it blue turn it white I don't care what
04:26 - color you're turning make sure it's
04:28 - filled and it has color and you've
04:30 - smashed it that's the most important
04:31 - part and as a way to thank you here's a
04:34 - picture of a baby a koala bear and a
04:36 - banana spinning all of it at the same
04:39 - time oh too much all good I don't care
04:42 - I'm here to help you learn how to code
04:43 - and if we have to do some things like
04:45 - criminal activities like have fun once
04:48 - in a while for God's sakes we will
04:50 - freaking do that with that said let's go
04:52 - ahead get started and start coding this
04:54 - bad boy up right now now before we start
04:57 - foreign
04:59 - it up here's what I want you to do we
05:02 - have turned this course into a
05:04 - bite-sized Drip by drip netflix-like
05:07 - binge-worthy course content and in a
05:10 - course portal it is completely free the
05:12 - only idea behind it is that you the
05:15 - student will have a great experience
05:17 - going through it if you want to be a
05:19 - part of that the link is in the
05:21 - description below click that link it'll
05:23 - take you to a page where you can pop in
05:25 - your email and it will give you access
05:27 - to this exact python course it's going
05:29 - to be the same material as is on YouTube
05:31 - and everything's gonna be all nicely in
05:34 - one place so I recommend you go ahead
05:36 - click that button below and sign up for
05:38 - it again it's completely free enjoy just
05:40 - giving extra resources so you can be a
05:42 - better developer before we started
05:43 - diving deep into coding and starting to
05:46 - write every single line of code you've
05:48 - chosen python let's just talk about why
05:51 - and what your career as a software
05:53 - developer or just a person learning
05:55 - python could look like why doesn't
05:57 - matter so I think let's get the context
06:00 - around python first and then we'll get
06:02 - to the coding part if you want to get to
06:04 - the coding part right away and you don't
06:05 - care you just want me to stop yapping
06:07 - and shut up you can just skip this part
06:08 - time stamps are below you could skim and
06:10 - do whatever you want it's a free country
06:12 - with that said I'm gonna kind of go into
06:14 - why should you choose python I think
06:16 - python is one of the best ways to start
06:18 - learning how to code I started about 10
06:20 - years ago coding and my first language
06:23 - of choice was Python and the
06:24 - opportunities you get by becoming a
06:26 - python developer are absolutely insane
06:28 - because first of all it's one of the
06:29 - most popular programming languages and
06:32 - there are insane number of job openings
06:34 - with python you could look on indeed.com
06:36 - or really any other online platform so
06:39 - the popularity of the language is also
06:42 - huge if you look on stack Overflow it's
06:43 - one of the top most wanted and learned
06:47 - programming languages in the world and
06:48 - when it comes to people's salaries
06:50 - people are making sixty thousand seventy
06:52 - thousand hundred thousand dollars a year
06:54 - plus now what type of jobs do people do
06:56 - lot of people with python do data
06:58 - analysts type of job data science type
07:01 - of job I mean of course there are a lot
07:02 - of web developers with python too
07:04 - because you can learn different
07:05 - Frameworks okay like flask or Django Etc
07:08 - and you could do web development as well
07:10 - so there's a lot that you could do with
07:12 - python and your career could look great
07:14 - whether you want to learn it as an
07:16 - entrepreneur or a student in high school
07:18 - or you're just trying to get through
07:19 - college man or just watching these
07:21 - videos so you could pass your exams I
07:23 - mean either any of those options is
07:25 - totally fine now the way I structure
07:27 - this course you have a little bit of
07:29 - insight going into it is I've designed
07:31 - it as a practical step-by-step guide
07:34 - where I hand hold you and we learn
07:36 - together but then we do exercises
07:38 - together and then we do big projects
07:40 - together and the whole idea is how can
07:42 - you learn in a practical way so tomorrow
07:44 - you could take this knowledge and go get
07:47 - a job okay now you won't get a job right
07:49 - after taking this course but if you
07:50 - synthesize this material and then add a
07:53 - lot of supplementary material and spend
07:54 - some time this will set you on a path to
07:56 - being able to get a job as a software
07:58 - developer freelance with it have a
08:01 - full-time job or maybe you want to have
08:04 - your own business or start a SAS
08:06 - whatever your case may be but my goal in
08:08 - this course just to give you a taste of
08:10 - python and build amazing projects you
08:13 - can understand and just fall in love
08:14 - with that said let's just get into it
08:16 - boom
08:20 - all right welcome to the ultimate Python
08:21 - tutorial now how I'm going to teach you
08:24 - is almost like we're walking step by
08:26 - step and learning side by side together
08:28 - kind of like how I did with my
08:29 - JavaScript tutorial if you watched that
08:31 - earlier so let's just get started okay
08:33 - like we're buddies and we're doing this
08:34 - and learning this together so the first
08:36 - thing that I want to tell you about is
08:38 - something called comments and comments
08:40 - are basically anything that's ignored by
08:43 - the computer so anything that we write
08:45 - with a hashtag computer will just ignore
08:47 - that line the next thing we're going to
08:49 - talk about are variables how do
08:51 - variables work in Python well if I
08:53 - actually do print hello world okay first
08:56 - let's just start off with this and I hit
08:57 - run on the right hand side over here
09:00 - you're gonna see a hello world so this
09:03 - allows us to print out whatever we're
09:06 - doing into here for example if you did
09:08 - not say print and you just said hello
09:11 - world like this it wouldn't actually
09:13 - show anything to the console so we want
09:15 - to put it in print and then put quotes
09:17 - like this around it now what the heck
09:20 - are variables and how do they work well
09:22 - let's say I want to print my name Rafe
09:25 - Kazi now every time I want to print my
09:27 - name maybe I want to print it again well
09:29 - I'll have to write print I'll have to
09:31 - write rough it cozy and then do this
09:33 - again and then do this again using this
09:35 - ton of work but what if I just created a
09:37 - variable that said name and set that to
09:40 - rafikaze and make sure you put these
09:42 - single quotes or double quotes either
09:44 - should be fine and what if I did this
09:46 - and then I said print name and now if I
09:50 - command enter or click run there it's
09:53 - going to print out my name okay on the
09:55 - right hand side and now if I change the
09:57 - name I only have to change it in one
09:58 - place not on every single line let's
10:00 - change the name to clever programmer and
10:04 - now I'll run this and there you go you
10:07 - could see that that name is being
10:08 - printed out because of line 9 right this
10:11 - is referring to that variable over there
10:13 - if I have another variable like age is
10:17 - 25 I can now also say print age and when
10:21 - we run this you'll see that it actually
10:23 - says the age right over there now here
10:26 - are a couple of things you can and can't
10:28 - do with variables that you should just
10:30 - know about so for example I can't name a
10:33 - variable starting with the number three
10:35 - name equals quasi and now if I try to
10:39 - print three name and run this I'm going
10:42 - to get an error okay and it says hey
10:44 - what tech is going on invalid syntax
10:47 - that means you wrote something that's
10:48 - not right so when we're naming variables
10:51 - make sure that they start with a letter
10:53 - most of the times and then you should be
10:55 - good to go now other things I could do
10:57 - is I could say full underscore name and
11:00 - now we can do print full name and let's
11:02 - run this and now it reads out our full
11:05 - name underscores are allowed in Python
11:08 - whenever you're writing multiple words
11:09 - you separate it out with underscores
11:12 - this is snake casing okay so you keep
11:15 - everything usually lower and then you
11:18 - separate things by underscores and kind
11:21 - of one of the last things I'm going to
11:22 - touch on for now with variables is you
11:24 - could have two variables being saved in
11:27 - one go so I could say with comma height
11:30 - is equal to 400 by 500. what this does
11:33 - is it actually sets the value of 400
11:36 - inside of width and then it saves a
11:38 - value of 500 inside of height and now to
11:41 - prove that out we can go ahead and say
11:43 - print with and if I go ahead here and
11:45 - say print height and when I run this
11:48 - you're going to see that we get a 400
11:49 - over here 500 over there that's how
11:52 - naming multiple variables in one go
11:54 - Works outside of this we're good with
11:57 - variables so we're going to keep going
11:58 - okay now let's talk about what could we
12:01 - do with this stuff what is something
12:03 - that we could actually do with python
12:05 - well there's something called input that
12:07 - I actually really like and what input
12:09 - does is when you have input it's going
12:11 - to ask you to put in something right
12:12 - here as the user so we can make our
12:15 - names a little bit more Dynamic now and
12:17 - make the name dependent on the user or
12:20 - whatever the user wants the name to be
12:21 - let's say we create a variable called
12:23 - your name and then inside of this
12:25 - variable your name we'll say input lease
12:28 - enter your name so your name is going to
12:31 - store the value that the user types in
12:33 - okay it's going to ask for the input and
12:34 - it's going to give this as a prompt so
12:36 - watch what happens when I run it on the
12:38 - right hand side here you'll see please
12:40 - enter your name so I'll actually say
12:42 - let's say I will say Andrew let's hit
12:45 - enter now it was stored Andrew ended up
12:49 - being stored inside of your name but we
12:51 - need to show that so how do we show that
12:54 - what have you learned so far where you
12:56 - can actually go ahead and show that to
12:57 - me so print and what would you print
13:00 - okay take three seconds right now three
13:02 - two one you would print your underscore
13:06 - name right if you want to show it out on
13:08 - the screen so let's run this now and I
13:11 - will say cozy and boom look at that it
13:13 - says qazi and if we want to make a
13:15 - little greeting thing that can greet
13:18 - greet us we can we can say a high plus
13:21 - your name so like just like this hi plus
13:24 - your name so let's give that a try and
13:26 - we'll say qazi okay now it says hi Kazi
13:28 - look at that that is beautiful if you
13:31 - don't want some of these lines to run
13:32 - that are the previously there like that
13:34 - and that just comment it out or what you
13:36 - could do is highlight it and hold
13:38 - command and press slash I'm pressing
13:41 - this button right here this slash or
13:44 - hold Ctrl and press slash if you're on
13:46 - Windows let's go see if we can do other
13:48 - things like can I give two inputs and
13:50 - then we can sum them up so let's try it
13:52 - so let's say num one is equal to input
13:55 - enter a number okay and then we'll copy
13:58 - that and say num2 Okay so this will give
14:00 - us two numbers and then it'll print out
14:03 - those two numbers so let's try this so
14:04 - we'll say num one comma num two let's
14:07 - run this and we'll say 10 and we'll say
14:10 - 20. okay so 10 and 20 got printed out
14:12 - that means we were able to take that
14:14 - value from the user and then show it out
14:16 - onto the screen now what I want to do is
14:19 - something a little bit more interesting
14:22 - so I want to add these two numbers
14:24 - together that the user is giving me well
14:27 - if I want to add them together wouldn't
14:28 - that be really simple can't I just do
14:31 - num1 plus num2 right because that's what
14:34 - the user is giving me and so I should
14:35 - just add them together and if let's say
14:37 - the user gave me 10 plus 20 this will
14:40 - become 10 and this will become 20 and
14:43 - well 10 plus 20 well that is a 30 and so
14:46 - that should print out 30 onto the screen
14:48 - right well let's take a look at what
14:50 - happened so I'll run this and then I'll
14:51 - give 10 and 20 and what should it return
14:54 - if I add 10 to 20 what do you get 30
14:56 - right let's hit run and look at that I
15:00 - instead get 10 20. what is happening
15:03 - here so when you add two things together
15:07 - two strings together it adds them up and
15:11 - mumbles and jumbles them so this is a
15:13 - good point to talk about strings versus
15:15 - numbers so there are different data
15:18 - types inside of python on and there's
15:20 - there's a bunch of data types so you
15:22 - have strings as a data type numbers is a
15:25 - data type numbers is not a really data
15:27 - type but integer is you know float these
15:30 - are what we just refer to as numbers and
15:32 - then there's other data types like lists
15:34 - and python there are dictionaries but
15:37 - some of this stuff is a little bit more
15:38 - advanced like lists dictionaries we'll
15:40 - talk about these later for now what I
15:42 - want to just talk about is I want to
15:44 - talk about the num difference between
15:46 - strings and numbers I'm just going to
15:48 - write some examples of strings hello is
15:50 - a string cookie anything within these
15:53 - single quotes or really double quotes is
15:56 - a string you're telling the computer
15:57 - literally this it literally this and
16:00 - literally that so when I add them
16:02 - together if I ever added this together
16:05 - the computer would give me back hello
16:06 - cookie as one string so what's happening
16:09 - right now is we're storing a number our
16:11 - numbers as a string data type so it's
16:14 - saying taking a string of one string of
16:16 - two string of 10 rather and string of 20
16:19 - and is returning a string of 10 20
16:21 - because it's just combining them because
16:23 - that's what it knows what to do with
16:25 - strings so when you input a number it
16:28 - doesn't think of it as a number it
16:30 - actually stores this as a as a string so
16:32 - what we want python to do is we want to
16:34 - tell python hey convert that into an
16:37 - integer okay a number in other words
16:39 - that I could actually use and when you
16:41 - add numbers together to actually add up
16:43 - rather than just get concatenated and
16:45 - squished together so what I want to do
16:48 - here is this num one that I get I want
16:52 - to call the function int on it so I'll
16:55 - store it as an integer or let me just
16:57 - show you something simpler even in the
16:59 - console so let's say I have five and you
17:01 - can see it has quotes around it this is
17:03 - a string but if I call this function
17:06 - called int and I pass 5 to it okay as a
17:10 - string it will Typecast it and turn it
17:13 - into five so that's actually what
17:17 - happens so what we want to do here is
17:19 - store for the input that we get from the
17:22 - user as an integer so I can take this
17:25 - entire thing and wrap it inside of int
17:28 - or I can call Int right here either way
17:31 - should work now let's run this and we'll
17:33 - do 10 20 and you can see that it
17:35 - actually added it up to a 30 because it
17:38 - said hey turn it into an integer the
17:41 - number one which is 10 turn the second
17:43 - number into an integer which is 20
17:45 - integer 10 plus integer 20 that gets you
17:49 - a 30 and then that gets output to the
17:51 - screen does that make sense okay great
17:54 - now let's end this section off by making
17:56 - a little baby app you know every every
17:59 - single thing we do I like to actually
18:01 - make it step by step like a project or
18:03 - some kind of app that we make even if
18:05 - it's like a baby or a really really
18:07 - small app so let's do it so what we want
18:09 - to do is we want to make a tip
18:11 - calculator app in this case Okay so this
18:13 - is going to be something that's very
18:15 - simple what we're going to do is let's
18:18 - comment out this stuff right here here
18:19 - so I'll commented out you know I can
18:21 - comment down basically uh everything up
18:24 - until now that's fine so in my tip
18:26 - calculator app what I want to do is uh
18:29 - let's say that I went to a restaurant to
18:32 - eat some food and let's say the food was
18:34 - a hundred dollars well if that food was
18:36 - a hundred dollars and I want to give a
18:39 - 20 tip you know the question would be
18:41 - how much am I paying in total if you're
18:45 - quick at math you'll realize this is 120
18:47 - dollars right because this is actually
18:50 - the food amount like 100 and this is the
18:54 - tip amount twenty percent tip okay and
18:57 - then 20 of 100 is twenty dollars you
19:01 - might know that in your head but how do
19:03 - we actually do that in calculation so
19:06 - let's go ahead and make this right so
19:09 - let's set a food amount to be a hundred
19:11 - dollars let's represent a tip percentage
19:15 - to be you know let's say 20 percent and
19:19 - and then we could divide this by 100 or
19:22 - or just make it 0.2 because this
19:24 - represents 20 as well so we could you
19:27 - know since it's a percentage let's go
19:29 - ahead and just do 0.2 or 20 divided by
19:32 - 100 okay and these are some math
19:34 - operators which we'll talk about more
19:36 - later but if I just go ahead and show
19:38 - you in the console here if I take 100
19:40 - and I divide it by 20 I get 5. if I take
19:44 - 20 divided by 100 okay I got 0.2 this is
19:48 - like division what we learn in like
19:50 - second or third grade all right and now
19:52 - math operators well there's uh some
19:55 - interesting ones two inside of python so
19:57 - for example I could actually go ahead
19:59 - and say
20:01 - hundred two division signs and 20 well
20:04 - you'll be like well this doesn't really
20:06 - look that much difference but watch this
20:08 - if I do 20 and I do two division signs
20:11 - and I do 100 I get zero that's
20:13 - interesting so what this basically does
20:15 - is it says hey don't give me anything
20:17 - that has any kind of remainder like just
20:19 - give me things like divided you know if
20:23 - something divides completely then show
20:24 - it to me otherwise I don't care I don't
20:27 - need a floating or a decimal point as a
20:29 - division let's say I take 135 divided by
20:33 - 2 it gives me back a 67. okay whereas if
20:38 - I did it the regular way I would get a
20:40 - 67.5 so this will actually divide and
20:44 - then round it down okay so when I round
20:47 - that down I get 67 so you'll get whole
20:50 - numbers this is sometimes like actually
20:53 - helpful because if you want to just
20:55 - quickly round down the thing and you
20:56 - don't want to do like all kinds of stuff
20:58 - and Typecast a thing and make it all
21:00 - this this simple way okay so in terms of
21:03 - math operators we'll talk more about
21:05 - these later as well but some simple math
21:08 - operators that we have are like the plus
21:10 - sign you have the minus sign you have
21:13 - the division sign multiplication so you
21:15 - can multiply things right you have
21:17 - exponents so if you do 2 to the power of
21:20 - 2 you'll get 4 and if you do 2 to the
21:23 - power of 4 you'll get 16 right so a
21:26 - regular exponents you have uh divide and
21:29 - get a whole number this one and then you
21:32 - know kind of the last one that I'll just
21:34 - leave you with for now is is a modulo so
21:36 - this just gives you what the remainder
21:38 - is so 20 modulo four there's no
21:40 - remainder so you get zero but 20 modulo
21:43 - 3 you get a remainder right because 20
21:47 - if you divide it by three you will go up
21:50 - to 18 but then you can't go beyond 18
21:53 - and then you'll have remainder of two so
21:55 - I'll leave the modulo here as well okay
21:58 - so these are some of the math operators
22:00 - that's like good for you to kind of know
22:02 - and we're just going to be using the
22:04 - division and maybe the multiplication
22:06 - one when we're doing our tip percentage
22:08 - okay and with tip percentage Yeah we do
22:10 - care about the float number so that's
22:12 - why we're just going to use a single
22:14 - division sign we don't need it to be a
22:16 - whole number we need it to be a actual
22:18 - number that it's like you know it could
22:21 - be afloat because we are expecting a 0.2
22:24 - so anything that's a decimal like this
22:27 - right if I go 0.2 it's a float number if
22:31 - I go one or two or three these are all
22:35 - integers okay and this is a float float
22:38 - is just another way of saying decimal
22:40 - numbers in uh encoding most of the time
22:44 - so whenever you float think some number
22:47 - that's a zero point something so this is
22:50 - representing 0.2 right so I have my
22:53 - amount this is 20 as a tip okay and then
22:58 - what's the tip amount so tip amount in
23:01 - this case would be
23:03 - a hundred multiplied by that so if I
23:06 - have a hundred multiplied by 0.2 that's
23:09 - a twenty dollar tip so that's the actual
23:12 - tip of mail so it's food amount
23:15 - times tip percentage and that's my tip
23:19 - amount we got the tip amount right which
23:22 - is food amount multiplied by the
23:24 - percentage so let's just go ahead and
23:27 - print out the tip Mount and let's just
23:28 - see if it's um if it's what we expect it
23:31 - to be so I'm going to hit command enter
23:33 - and run this it's saying percentage aha
23:36 - so it's tip underscore percentage right
23:38 - not just percentage and that's what the
23:40 - error is telling me so errors are your
23:42 - friends don't freak out just read them
23:44 - and usually when you're reading errors
23:47 - you don't have to read like the top part
23:48 - that much you can read this part but
23:50 - I'll also kind of make you familiar with
23:52 - errors okay we're not going to go crazy
23:54 - into like reading errors but in a simple
23:57 - way like if we're looking at this error
23:58 - here it says Hey percentage is not
24:01 - defined
24:02 - so that was simple because we never had
24:05 - a variable called percentage we had tip
24:07 - underscore percentage so that makes
24:08 - sense so name error right and then the
24:11 - next thing it says is Trace back it says
24:13 - the error is in main.py which makes
24:15 - sense because this file is called
24:16 - main.py and it tells you that the error
24:19 - is happening on Line 39 this is Line 39
24:21 - and it tells you that it's happening
24:23 - specifically somewhere here okay so it
24:25 - really really makes your life simple
24:27 - once you can kind of read it and not
24:29 - freak out so much about it and let's
24:32 - keep going so let me run this here and
24:35 - let's see and it calculates a tip amount
24:37 - correctly so look tip amount is twenty
24:39 - dollars well now my question to you is
24:41 - how are you going to get the total okay
24:44 - we have the you know total if I had to
24:47 - put total so first of all you should try
24:49 - and see if you can get the total here
24:53 - so you can just pause the video and give
24:55 - that a try I'll give you five seconds
24:56 - five four three two one so what is total
25:00 - total is really just two things right
25:03 - it's food amount
25:06 - plus tip amount that's what a total is
25:09 - right it's how much did you pay for the
25:11 - food and how much was the tip
25:13 - so in order to turn this and translate
25:15 - it into code all we say is we say
25:19 - total is equal to food amount plus tip
25:23 - amount and now let's print out total and
25:25 - let's take a look and over here we have
25:28 - 120 okay 120 dollars okay now
25:35 - we're seeing 120
25:37 - and that's cool right but what we would
25:40 - really like is if the 120 looked like uh
25:44 - you know 120 dollars instead of 120 just
25:49 - some number so I want to put a dollar
25:52 - sign here so there's a few ways we could
25:54 - do this okay so one way I could do is I
25:56 - could put a dollar sign here and then I
25:57 - could say plus and this is called string
26:01 - concatenation and it's giving us an
26:03 - error so let's see what the error is so
26:05 - error says error can only concatenate
26:08 - string to string so it's basically
26:11 - saying this total here is of type float
26:14 - because it's a decimal right it's
26:17 - 120.0 so that means this is a decimal
26:21 - which means
26:23 - that this is
26:25 - a float in coding terms okay so it's
26:28 - basically saying hey you're trying to
26:30 - combine a string this string over here
26:33 - with a float Tomatoes Tomatoes tomatoes
26:37 - and oranges you know what can't compare
26:40 - oranges and apples together what's going
26:42 - on here what we could do is we could
26:43 - turn this into a string the total into a
26:46 - string so I could just call Str and wrap
26:48 - it in this function Str you'll learn
26:50 - more about functions later but for now
26:53 - all you need to know is if I take a
26:55 - number like a 100 and I call STR on it
26:59 - you'll see they'll put these quotes
27:01 - around it which means that it
27:02 - successfully has turned it from an
27:05 - integer type to a string type likewise
27:08 - if I take a hundred like this and I call
27:11 - string on that it will also turn it into
27:14 - a string type as a float okay so this
27:17 - will work so let's try this and there we
27:20 - go that looks a lot better right a
27:22 - hundred and twenty dollars boom we're
27:25 - getting our answer and it looks clean
27:27 - okay so that's that's kind of how we
27:30 - want to do this when I said we're gonna
27:32 - make a baby app well let's make it
27:34 - interactive and then we will actually be
27:36 - done with this little project and then
27:38 - we'll keep moving on so right now it's
27:41 - hard we've hard-coded data food amount
27:43 - is 100. the tip percentage is also hard
27:46 - coded but what if you were at a
27:48 - restaurant and you actually took this
27:50 - file and you tried to run it and you
27:52 - tried to get it to help you well it
27:54 - won't really help you with any tip
27:55 - calculation or or really how much the
27:57 - total total bill is because it's just
28:01 - running it for a hundred dollars and
28:02 - twenty percent tip what if in reality
28:04 - you were sitting at a restaurant right
28:05 - now and maybe your food cost twenty four
28:08 - dollars and maybe your tip was 10 what
28:12 - you will have to come to your app and
28:13 - then change the hard-coded numbers
28:15 - that's not how users are going to use
28:16 - this right it's going to be very
28:18 - frustrating experience if you do that so
28:20 - we're going to change this to an input
28:21 - so we're going to say enter food amount
28:25 - okay and we're going to say dollars and
28:27 - then here I'm not going to change this
28:30 - 100 but I'm gonna change this part okay
28:33 - so we're going to make this a dynamic
28:34 - part we're going to say enter your tip
28:37 - percentage so the user is going to put
28:39 - in their tip percentage and let's say
28:41 - the user says 20 we'll just put a 20
28:43 - here and then 20 divided by 100 will
28:45 - give you a 20 tip or 0.2 all right and
28:49 - uh the next thing that we want to do is
28:51 - remember this is going to be given to us
28:54 - as what data type I'll give you five
28:56 - seconds five four three two one food
29:00 - amount is going to be stored as a string
29:02 - but what do we want it to be stored as
29:04 - because if we start as a string it's not
29:06 - going to do the right things that we
29:08 - wanted to do right you're you're going
29:09 - to try to add a string to a string and
29:11 - you're going to do 10 plus 20 and you're
29:12 - gonna get 10 20 instead of 30. so how do
29:15 - we force this to become in integer okay
29:19 - or a number so for example the user is
29:22 - gonna put in some number like hey the
29:24 - food costs fifty dollars so it'll be a
29:26 - string and then what we want to do is
29:27 - turn it from a string data type because
29:30 - it's a string data type two an actual 50
29:33 - either an integer or a float let's go
29:36 - ahead I think would float and the reason
29:38 - is because the user could say it's fifty
29:41 - dollars and fifty cents right so that's
29:43 - why I think a float would actually be a
29:45 - better representative of this and so we
29:47 - will say float and wrap this whole thing
29:49 - in float and then we'll wrap this here
29:51 - and Float but not the whole thing just
29:53 - this part right here so now boom and
29:56 - let's run this so let's say the food
29:59 - amount is a hundred dollars and let's
30:01 - say our tip percentage is 20 and we get
30:04 - a hundred and twenty dollars boom oh
30:07 - look at that that is working the only
30:09 - thing I don't like about this right now
30:10 - is a percentage and the 20 look too
30:12 - close to each other so I'm gonna put a
30:15 - colon here I'm gonna put a space here
30:17 - and I'm gonna put a percent sign percent
30:20 - sign here to represent that we're asking
30:22 - for a percentage let's run this again
30:24 - food amount I will say it's fifty
30:26 - dollars tip percentage let's say it's 20
30:29 - and let's give this a try and boom look
30:33 - at that it tells us that is sixty
30:36 - dollars total that we owe uh now if we
30:38 - wanted to make it prettier I'll show you
30:41 - a little sneak peek into something
30:42 - called string formatting and there's
30:44 - something really cool in Python so what
30:46 - if I wanted to let the user know which
30:48 - one is the tip and which one is the
30:50 - total and which one is the tip
30:53 - percentage and all of that all here in a
30:56 - nice interface that shows everything up
30:58 - front Okay so for example let's do that
31:00 - right so it should say total is 60 60 or
31:03 - whatever right it should say tip amount
31:06 - is let's say twenty dollars or whatever
31:09 - so if you want to do that type of string
31:11 - formatting let's do it like this so I'm
31:14 - going to say print and I'm going to say
31:16 - f and then we're just going to go ahead
31:19 - and write out what we're looking for so
31:21 - I'm going to say tip amount and I'll put
31:23 - a colon and then I'll put these curly
31:25 - braces means I can now write python code
31:27 - inside of this so the python code all
31:30 - right is tip amount now when I run this
31:32 - and let's say tip amount tip percentage
31:34 - is 10 so 10 percent of ten dollars tip
31:38 - amount is one and now let's go ahead and
31:40 - put a dollar sign here so it actually
31:42 - looks like one dollar a hundred to
31:44 - percentage is ten you can see tip amount
31:47 - is ten dollars beautiful now let's go
31:50 - ahead and copy paste this again and
31:53 - instead of tip amount now what I want to
31:55 - say is I want to say food amount okay
31:58 - and we could put that above this and
32:00 - let's go ahead and say food amount and
32:02 - let's run this and let's see what we get
32:04 - so we'll say food amount is a hundred
32:06 - dollars tip percentage is 10 so you can
32:08 - see food amount is ten dollars tip
32:10 - amount is ten dollars or a hundred
32:13 - dollars and ten dollars okay and then
32:14 - the left for the last one let's do the
32:16 - same thing
32:17 - except I'm gonna say total amount and
32:19 - what are you gonna say in here we're
32:22 - gonna replace this with the five four
32:25 - three two one we're gonna replace this
32:28 - with the total okay now let's run this a
32:31 - hundred dollars and ten percent boom
32:34 - look at that and we don't need this
32:35 - final line anymore and if you want to
32:37 - make it like a little bit cooler
32:38 - whatever you could add emojis if you if
32:40 - you can download an emoji app I have
32:42 - rocket on Mac and that's really easy I
32:45 - just press colon and then I press right
32:46 - and then it allows me to do this it'll
32:48 - look you can make this look really nice
32:50 - so let's put total amount food amount
32:53 - can be it chicken food so let's run this
32:56 - now 110 and we can see the total amount
32:59 - is a hundred and ten dollars and it
33:00 - looks you know a little pretty now if we
33:03 - want to make this look even nicer we can
33:06 - actually go ahead and just add these at
33:08 - the top and then we could take this and
33:10 - add this at the bottom now if I run this
33:12 - we get a hundred ten percent tip and you
33:15 - can see food amount is hundred dollars
33:17 - to of amount is ten dollars and total
33:19 - amount is a hundred and ten dollars
33:21 - maybe I wanna add a new line in between
33:24 - total amount and tip amount so what you
33:26 - could do is you could print and go
33:28 - backslash n this encoding means a new
33:32 - line so it's going to just put a new
33:34 - line over here uh tip amount let's just
33:36 - put a scale for tip I guess so at least
33:39 - everything has an emoji and a little
33:40 - cleaner food amount is a hundred dollars
33:42 - to percentage is ten percent there we go
33:45 - food amount tip amount and then the
33:47 - overall total amount that looks very
33:49 - clean if we want to add some new lines
33:52 - here as well if you want to add multiple
33:54 - new lines we could do this so let's run
33:57 - this again there we go we're getting our
33:59 - food percentage and total amount so this
34:02 - string formatting stuff is very very
34:04 - useful it's really helpful and it can
34:07 - make your thing look pretty but more
34:10 - importantly it is very easy to write
34:12 - because you're just writing out
34:14 - everything you want to write and then
34:15 - right when you want to write python code
34:17 - you just put it in curly braces and
34:20 - you're good to go okay it's as simple as
34:22 - that so there you go we have made our
34:25 - first little app with Pythons if you got
34:27 - to hear congratulations you're doing
34:29 - great with that said we're gonna keep
34:32 - going and we're gonna keep learning I
34:33 - love your beautiful face I'll see you in
34:34 - a second all right now the next thing is
34:37 - going to be a pretty important thing
34:38 - let's talk about Boolean okay this is
34:40 - another data type it's called Boolean
34:42 - this is very very important it basically
34:45 - anytime you hear if then else all that
34:49 - logic which is really programming at its
34:51 - heart because most things that you write
34:53 - with programming pretty much almost
34:55 - always have some kind of if then
34:57 - statements going on okay very important
34:59 - this is the heart of Boolean so like for
35:01 - example let's just talk about the real
35:03 - life where are where do we use this well
35:05 - let me ask you this if you have zero
35:06 - dollars in your bank account can you
35:07 - take out a thousand dollars you can't
35:09 - why not the reason why you can't take
35:11 - out your money is literally there's a
35:13 - piece of code that says if withdrawal
35:15 - amount is greater than and the balance
35:18 - don't allow withdrawal there's a there's
35:22 - like a code line written there okay that
35:25 - literally says that okay so it reads
35:27 - like English too and in Python it'll
35:29 - probably look like something like this
35:31 - okay it'd be like if the withdrawal
35:33 - amount is greater than the balance don't
35:35 - allow withdrawal or we might just say
35:37 - return or just like don't do anything
35:39 - but if it's not then allow withdrawal
35:42 - okay so let's say we go here else I can
35:46 - say allow withdrawal so I hope that this
35:49 - conversationally just makes sense to you
35:52 - like if I'm just chatting with you like
35:53 - a buddy right or we're at a bar and I'm
35:55 - just explaining to see like this I hope
35:57 - it makes sense before we get formal and
35:59 - I start trying to explain to you in like
36:00 - at a very specific level that's what
36:02 - that means hey the withdrawal amount is
36:03 - greater than the balance don't allow it
36:05 - otherwise allow it okay so that's a
36:07 - simple example of where it happens well
36:09 - there's probably a lot of other places
36:10 - it happens as well like if the user hits
36:14 - accelerator accelerate the car if the
36:17 - use user hits break break the car
36:20 - imagine if you did if the if you hit
36:23 - accelerator and it break your car or if
36:25 - you hit the brake in an accelerated your
36:27 - car that would be catastrophic there'd
36:30 - be so many accidents and there would be
36:32 - like so many debts right and why would
36:34 - that happen that would happen because
36:36 - somebody wrote somebody just programmed
36:38 - it incorrectly so that's why this if
36:40 - else stuff is very awesome and it's also
36:43 - very important because it's at the heart
36:45 - of what we do as programmers so let's
36:48 - make like a little baby app so we'll
36:50 - make like a baby weather app and um
36:53 - let's comment out this entire thing with
36:56 - with the tip calculator we don't really
36:58 - need to worry about that right now so
37:00 - for example if I run my code I should
37:02 - see nothing right now it should be empty
37:04 - and basically what this should be say is
37:07 - hey what's the weather like so I'll give
37:10 - you a premise for this app it should
37:12 - tell you what to have if it's raining
37:15 - outside it should tell you you know grab
37:17 - an umbrella otherwise grab your
37:21 - sunglasses so that's pretty much what
37:23 - the app should do it should be a very
37:25 - simple one and that's what I should say
37:28 - Okay so let's say we have weather here
37:30 - and the weather will say is rain okay so
37:32 - if it's rain then it should say grounded
37:35 - umbrella so here's how we're gonna write
37:36 - our if statement so we're going to say
37:37 - if weather is rain if this is true print
37:42 - umbrella else otherwise print sunglasses
37:47 - okay I'll use emojis if you don't have
37:48 - emojis feel free to just write this
37:50 - stuff out and let's go ahead and print
37:52 - this and let me ask you a question
37:54 - before we even run this and before you
37:55 - ask me why are we putting two equal
37:57 - signs and what is this colon about and
38:00 - what's happening here if you just
38:01 - followed along with me and you just did
38:03 - what I did and you hit enter here and
38:05 - you just wrote this and your indentation
38:06 - and the whole thing looks exactly like
38:08 - mine and you hit print or run what do
38:10 - you think is going to print with your
38:11 - gut feeling before we even run this for
38:13 - the first time do you think it's going
38:14 - to say rain or do you think it's gonna
38:15 - say sunglasses it's checking for of the
38:18 - weather is rain and we have set the
38:20 - weather to rain so what would be your
38:21 - guess I'll give you five seconds five
38:23 - four three two one okay it would be the
38:28 - umbrella you see that right there now
38:30 - why are we getting now why are we
38:34 - getting an umbrella so let's break it
38:37 - down at a further level and let's talk
38:38 - about Boolean which we didn't talk about
38:40 - yet so booleans are very simple they're
38:43 - either true or false that's the data
38:46 - type that's all it contains it's either
38:48 - true or false so a Boolean can either be
38:50 - true or false that's it those are the
38:53 - only two values it could have so for
38:55 - example if I said hey it's five greater
38:59 - than 10 and we'll also talk about
39:01 - comparison operators I'll just make a
39:03 - little note of it comparison operators
39:05 - and notice that I got back false okay
39:10 - because 5 is not greater than ten what
39:12 - if I said 5 is equal to 5. it says true
39:15 - now the reason why we put two equals
39:17 - lines two equal signs is a comparison
39:21 - operator because if you did one equal
39:23 - sign that is an assignment operator so
39:25 - if I did five equals five it's going to
39:27 - give an error it says you can't assign
39:29 - the value 5 to a literal to a five you
39:32 - can assign five to you can say a equals
39:35 - five you could do that but you can't do
39:37 - five equals five that doesn't make sense
39:39 - but you could check if 5 is the same as
39:43 - five you can compare these two values
39:46 - and I will tell you if they are the same
39:48 - or they are not in this case they are so
39:51 - I'm going to say true is 10 the same as
39:53 - 5. what do you think is going to say
39:55 - it's going to say false okay it's 5 less
39:58 - than 25 yes it is it's 5 less than or
40:02 - equal to 25 yes it is so let's write
40:06 - some of these comparison operators so we
40:08 - have less than or equal less than we
40:10 - have greater than we have less than or
40:13 - equal to we have greater than or equal
40:15 - to so these are all the different assign
40:17 - operators that we have inside of python
40:19 - so now going back to this over here
40:22 - what's Happening Here is if I say if
40:24 - true so if you have an if statement
40:26 - where you have a true and we've just
40:28 - hard coded it to be true you will always
40:30 - get back the if statement value not the
40:33 - else value okay so if I make this a true
40:35 - right there watch what's going to happen
40:37 - when I run this I'm going to get back an
40:39 - umbrella but if I make this it falls
40:42 - what do you think I'm gonna get do you
40:43 - think I'm still going to get back an
40:45 - umbrella or do you think I'm gonna get
40:45 - back sunglasses very good if you said
40:48 - sunglasses let's run this and I get back
40:49 - sunglasses because if this is false the
40:52 - code says do not run this line of code
40:55 - run the else line of code when I say if
40:59 - weather is rain what I'm really saying
41:01 - is if this variable here has the value
41:05 - rain in it check if that is the case if
41:08 - that's the case take this whole thing
41:10 - and then it'll turn it to True okay so
41:13 - literally it plugs in rain here and then
41:16 - it goes is rain equal equal to rain and
41:19 - then it goes yes it is true and since
41:22 - that evaluates are true it ends up
41:23 - running this line of code now watch what
41:26 - happens if I said Sunny what do you
41:28 - think is going to happen do you think
41:29 - it's going to print out this umbrella
41:31 - right over here or do you think is going
41:32 - to print out the sunglasses I'll give
41:34 - you five seconds five four three two one
41:37 - let's run it and boom look at that I got
41:41 - my sunglasses so that's how that works
41:43 - now in order to make this kind of an
41:45 - interactive app let's instead of
41:47 - hard-coded weather data let's take input
41:50 - from the user so at this point you
41:52 - should know how to do this and you
41:54 - should be able to do this part okay so
41:55 - I'll give you five seconds pause the
41:57 - video and do it on your own five four
41:59 - three two one all right let's do it
42:03 - together if you got it great if you did
42:05 - it that's okay we'll do it together no
42:06 - problem so I'm gonna go ahead and I'm
42:08 - gonna say input because that's how I
42:10 - take user data I don't need to Typecast
42:12 - it to anything because it's already a
42:14 - string so input is fine so I'm going to
42:16 - say input and I'm going to say how is
42:19 - the weather question mark
42:22 - all right and we're going to just do put
42:23 - a space there let's go there how is the
42:26 - weather and I will say it is sunny and I
42:30 - will get back this Emoji right here and
42:33 - let's run it again and now it'll say
42:35 - rain and it'll give me back the rain
42:38 - Emoji right there okay so that tells me
42:41 - that my app is working it can already
42:44 - take in user data and figure out what to
42:48 - do with it it can ask the user the
42:50 - weather and once the user tells it how
42:52 - the weather is it can print out rain or
42:56 - umbrella so what I'd recommend is you
42:59 - play around with this okay and try this
43:02 - so let's chain this up a little bit more
43:05 - so let's take this if else condition a
43:08 - little bit farther okay so now let's do
43:10 - something interesting right so we're
43:12 - gonna go ahead and say else if so we're
43:15 - going to add elseif whether is cloudy
43:19 - then you know uh where a hat or
43:23 - something I don't know why you would
43:24 - wear a hat but maybe a hoodie so do we
43:27 - have a hoodie or a jacket we don't have
43:29 - a jacket let's just put clouds okay just
43:32 - print out a cloud that's it that's
43:35 - perfect else give me these sunglasses so
43:40 - now watch what happens when I run this
43:41 - if I say rain it'll give me the umbrella
43:45 - if I run this again if I choose cloudy
43:48 - it's actually going to give me the cloud
43:50 - if it's neither of those so if it's
43:53 - neither of those I'll just say ha or
43:55 - I'll say thunderstorm it'll give me
43:58 - sunglasses so I'll give you a little
44:00 - challenge right now add another else if
44:02 - condition and you could chain as many
44:04 - else of conditions as you want and one
44:06 - thing I need to tell you about python is
44:08 - this if statement how you write it you
44:10 - put this colon you hit enter this
44:12 - indentation in Python is important if
44:14 - you don't have this indentation this
44:16 - code will break it will not work so
44:18 - python uses white space and it's really
44:21 - important as a part of it to make sure
44:23 - that you indent things correctly if your
44:25 - code ever breaks is most likely all
44:27 - you'll have to do is go back and hit
44:29 - enter like this and you should be good
44:30 - so go ahead write another else if
44:33 - condition which should account for
44:36 - thunderstorm so if it's thunderstorming
44:38 - it should print out a thunder icon or
44:42 - something so see if you could try that
44:43 - so I'll give you five seconds to pause
44:45 - it and give it a try five four three two
44:49 - one all right let's go ahead and do this
44:52 - together so the last thing that I'm
44:55 - going to say here is else if weather and
44:58 - we're going to say it's thunderstorm
45:00 - okay and then then we'll say print and
45:03 - let's see if there's thunderstorm there
45:05 - is not let's say lightning okay there we
45:09 - go we'll say lightning with rain and
45:11 - thunderstorm okay so there we go and now
45:13 - let's run it we'll say whether it's
45:15 - thunderstorm and boom we're getting this
45:18 - icon right here so we could chain these
45:21 - and we could make this multiple so let's
45:23 - do for example another exercise what if
45:26 - I wanna check out my you know grades so
45:29 - I'm gonna go ahead comment this out and
45:31 - I'm going to check out my grade so you
45:34 - know or score so let's say I got a score
45:36 - of in this case I'll give you some notes
45:38 - so let's say anything you know anything
45:41 - that's 90 anything that's not greater
45:43 - than a 90 this will be considered an A
45:47 - anything greater than an 80 will be
45:49 - considered a b anything greater than a
45:53 - 70 will be considered a c anything
45:56 - greater than a 60 will be considered a d
45:58 - and then anything less than 60 will be
46:04 - considered an F so anything less than 60
46:08 - will be an F so see if you could try
46:10 - this right now and create a if else if
46:14 - chained that could represent this okay
46:17 - so if I give you a score that's above a
46:19 - 90 it should say an a it print an a if I
46:24 - give you a score of between 80 and 90
46:26 - should be a b uh C
46:29 - Etc so see if you could give that a try
46:31 - I'll give you five seconds to pause the
46:33 - video and then you should give this a
46:35 - full try on your own five four three two
46:39 - one
46:41 - all right I hope you pause it and you
46:43 - try to give it a try but regardless of
46:46 - what however it went let's go ahead and
46:48 - do this together so I'm going to create
46:50 - a score so we'll just start with some
46:52 - kind of score we're going to say if
46:54 - score is greater than 90 print a right
46:59 - and then we're going to say else if
47:01 - score is greater than 80 print B okay
47:07 - and actually let me give you a better
47:10 - parameter because if it's 80 that's also
47:13 - a b okay so I want if the score is 80
47:17 - it's also a b this would only account
47:20 - for 81 something higher than an 80. so
47:23 - what we're going to do is score is
47:24 - greater than or equal to 80 greater than
47:26 - or equal to 90 greater than or equal to
47:28 - greater than or equal to okay and then
47:31 - this is actually less than 69 so this is
47:33 - fine because we want you know 59.9 to be
47:37 - an f and then I'm going to say else if
47:39 - score is so we're going to to say
47:41 - greater than or equal to and we can say
47:43 - else if score is less than 60 print F
47:49 - let's run this and you can see that it
47:51 - says I got an F now let's change the
47:54 - score to be an 80. let's run this you
47:57 - could see it gave me a b and then let's
48:00 - change this over here to be in 90 and
48:04 - boom you can see I got an A now what if
48:06 - it was a 95 let's run this and it's
48:09 - still an a what if it was an 87 let's
48:13 - run this and you could see that I got a
48:15 - B okay so with that logic you know we
48:19 - can fill the rest of it out if you
48:21 - weren't able to do it now you should
48:22 - definitely be able to do it so let's go
48:24 - ahead and we're going to say else if
48:25 - score is greater than or equal to 70 I'm
48:29 - going to say print C and then we're
48:32 - going to say else if score is greater
48:35 - than or equal to 60 let's say print D
48:39 - and then what we could also also say is
48:42 - we could say else so I can actually
48:45 - remove all of this and I can be pretty
48:46 - clever here and say print F because
48:48 - that's the only other case left because
48:50 - we have a case that's higher than 90 and
48:53 - then we have all the way down to a case
48:56 - that's greater than 60. so the only time
48:58 - an else would happen is if it was
49:00 - something less than 60. that's the only
49:02 - time right because otherwise it would be
49:04 - caught by this guy right here okay
49:07 - because that would mean it's higher than
49:08 - 90. so anything less than a 60 is an F
49:11 - so we could just be clean and write it
49:12 - like this now let's go ahead and try a
49:15 - few different numbers so 87 and I got a
49:17 - B let's try 93 what do I get a 103 maybe
49:22 - I I scored so well I got above 100 for
49:25 - this yeah so that's pretty good let's go
49:28 - ahead and try you know 67 and that's a d
49:32 - that's very good let's try maybe 53 53
49:37 - what what do I get here boom and I got
49:39 - an F
49:40 - okay so not good I failed the class okay
49:44 - this was my score in math every math
49:47 - class that was my score so this is not
49:49 - too far from the truth anyway so I hope
49:51 - you got some good practice with how if
49:54 - else if else conditions work and what
49:57 - Boolean really means because everything
49:59 - here at the end of the day is very
50:02 - simple this is either the word true or
50:05 - it's either the word either the type
50:07 - false okay and this is a very specific
50:09 - data type true or false and how I can
50:12 - prove to you that these are data types
50:14 - this is Boolean data type so for example
50:16 - if I uh call type on the number five
50:19 - it'll tell me that is of class integer
50:21 - if I call type on 5.2 it will tell me
50:25 - that it's of type float if I call it on
50:29 - type on hello it'll tell me it's a
50:32 - string so see if you can call type on
50:36 - false and what do you get and false is
50:38 - like this with a capital f okay so give
50:41 - that a try five four three two one what
50:43 - did you discover right let's look at it
50:45 - false and it's of class Bool and if I go
50:49 - type true it's of class Bool so booleans
50:53 - those are the only two Boolean values
50:56 - that exist true or false and now you
51:00 - know if we want to take it even further
51:01 - we can actually chain values together as
51:05 - well okay so for example let's say we
51:08 - wanted to either have we wanted to show
51:10 - either a passing grade or a failing
51:14 - grade okay so if we wanted to just do
51:15 - that and we didn't have this A B C D
51:18 - minus stuff okay or a b c d uh F stuff
51:22 - we just had you passed and so if you
51:24 - pass it just said P okay or maybe just
51:27 - pass and if you failed it just said
51:28 - failed that's it so how could I do that
51:31 - well I wanted to be where if you got you
51:35 - know within this range let's just say
51:37 - this is a passing range and anything
51:39 - less than that just doesn't work so I
51:42 - could actually say that I could say if
51:44 - score and let's say I set the score here
51:47 - 80 for now if if score is greater than
51:50 - or equal to 60 and to make this example
51:53 - even better let's say you have pass
51:55 - failing and then you have like super
51:58 - pass meaning the the student got let's
52:01 - say uh you know superpass is when they
52:04 - get greater than a hundred okay so they
52:07 - just really crushed it let's say I start
52:09 - with the passing grade condition so the
52:11 - passing grade condition I'll say if the
52:13 - score is greater than or equal to 60 and
52:18 - score is less than a hundred if it's or
52:24 - less than or equal to a hundred because
52:26 - we're defining superpass to be something
52:27 - that's greater than 100 okay so 101
52:30 - would be like you pass Super past it so
52:32 - we could actually even say this we can
52:34 - actually write multiple booleans here so
52:37 - for example I could say true and false
52:39 - and I get false so when you write with
52:42 - the Boolean gate logic or Boolean logic
52:44 - both of these statements have to be true
52:46 - whenever you have an and both statements
52:48 - have to be true or all statements have
52:49 - to be true in order for you to get a
52:51 - true so true and true and in other words
52:53 - like 5 is greater than six okay five
52:57 - five uh let's say 10 is greater than
52:59 - five and ten is greater than six since
53:03 - both of these statements are true you're
53:04 - going to get back true but if you said
53:06 - 10 is greater than 5 and 10 is less than
53:09 - 6 since this statement is a false here
53:11 - this whole thing is going to evaluate to
53:13 - false and not work which means that the
53:16 - only way that the code is going to run
53:18 - is if it's if the score is in between
53:21 - these numbers if it's greater than 100
53:24 - or it's less than a 60 it will break and
53:28 - it won't work and we're just going to go
53:30 - ahead here and say passing grade so
53:32 - let's go ahead and run this and you can
53:33 - see that I'm getting passing grade now
53:36 - another cool thing and kind of important
53:38 - thing I want to show you in Python is
53:40 - there's another way to write it which is
53:42 - really nice and it's called pythonic
53:45 - okay so very pythonic way of writing it
53:47 - it just means you're writing very clean
53:49 - code that is pretty language specific
53:51 - can't really write in JavaScript and
53:54 - also this code is very stylistic in
53:56 - Python okay it's a nice way of writing
53:58 - it so I'll give you an example so
54:00 - there's multiple ways of writing the
54:01 - same statement another way to write it
54:03 - is you could say if score so since we're
54:05 - really saying score in between these two
54:07 - numbers there's a nicer way to write it
54:09 - you could actually say and this looks
54:12 - nicer and reads nicer in my opinion and
54:14 - you don't need to write a bunch of and
54:15 - statements and you could say print pass
54:18 - and grade and to prove that it's working
54:20 - I'll comment out this part and run
54:22 - you'll still see that it says passing
54:24 - grade okay I'll run it again just so you
54:26 - can see it and I'll choose 59 as a score
54:29 - and it won't say anything and then I'll
54:32 - choose 103 and it won't say anything
54:34 - it's detecting that it's out of that
54:36 - range and right when I put it in that
54:37 - range it will show up and say passing
54:39 - grade this is really cool this allows
54:43 - you to capture in between array change
54:45 - okay and this is the same thing as
54:47 - writing this guy over here same exact
54:50 - thing so you could chain your booleans
54:53 - with an and statement and then the last
54:55 - thing I want to show you is you could
54:56 - also change your booleans with an or
54:58 - statement like this okay so you if you
55:01 - have a true or false you're going to get
55:03 - back a true so an or statement only one
55:06 - of them has to be true so for example
55:08 - it's like hey what time did you eat
55:09 - today well I either ate at 3 P.M or I
55:12 - ate at 10 pm I'm not technically wrong
55:15 - okay I am telling you the truth one of
55:19 - them is correct so here it's giving me a
55:23 - true so if I have 3 is greater than 5 or
55:27 - 5 is less than three okay or we can say
55:30 - five is greater than three it's going to
55:32 - give me a true because here 5 is greater
55:35 - than 3. so since this is true and this
55:37 - is false it's going to Value to true so
55:39 - all that confusion aside okay I can also
55:42 - write ORS so I can say if score is less
55:48 - than 60 or score is greater than 100 I
55:54 - can say you either failed or you passed
55:58 - or you super passed okay so now let's
56:01 - choose the score and make the score 103
56:04 - and let's see what it says it says you
56:06 - either failed or you super pass yep and
56:09 - if I choose 59 you either failed or you
56:11 - super passed that's correct and if I
56:13 - choose a 63
56:14 - it'll it'll do this passing grade okay
56:17 - so you can see that this or statement
56:20 - works and it catches two things it's
56:23 - catching two you know it's caching below
56:26 - the boundary and then above the boundary
56:28 - so this or is super helpful too and I
56:31 - just want you to be aware of that or
56:33 - statement that it that it exists okay so
56:36 - this is a range there's an or way of
56:39 - doing this okay and then there's an and
56:41 - way of doing this I hope this was like
56:44 - not too confusing but I wanted to show
56:46 - you all these things because as we start
56:48 - to build up and add more layers of
56:50 - complexity it's really going to help you
56:53 - because these tools are going to come in
56:55 - handy and then you'll be able to write
56:57 - more pythonic code so this here I'm
57:00 - sorry if I didn't explain this correctly
57:01 - but this here is a very pythonic way of
57:05 - writing it
57:06 - this over here is like a regular way of
57:10 - writing it this is how somebody who's
57:12 - maybe coming from another programming
57:13 - language would write it somebody who's
57:15 - been in the python ecosystem knows that
57:17 - they can write it like this and this
57:19 - looks way way cleaner just these are the
57:21 - three examples that you should look at
57:23 - and these will be helpful so if you want
57:26 - to take note of this you know this is
57:28 - available for you the whole time this
57:31 - will be available to you the entire time
57:33 - and on the left hand side I have
57:35 - quasi.py right that's the file I am
57:39 - going to be coding in okay quasi.py just
57:42 - to be very clear main.py is the file
57:44 - you're going to be coding in and if you
57:46 - don't want any of my lines to run just
57:49 - go ahead and comment this out by the
57:51 - time you're watching this this might be
57:52 - they're commented out or deleted already
57:54 - so I wouldn't worry about it too much
57:56 - but my file is quasi.py okay you're
57:59 - going to write in main.py and follow
58:01 - along there so there you go just wanted
58:03 - to give you a little crash course on if
58:05 - else conditions because I think this
58:06 - will be valuable for you with that said
58:08 - let's keep on rocking and rolling all
58:11 - right you are doing great so far now
58:14 - what we're gonna do is we're just gonna
58:16 - comment out everything else that we
58:18 - don't need so make sure it's commented
58:20 - out and if at any time you look over
58:22 - here and you see things changed don't
58:24 - worry because I'm gonna keep adding
58:26 - things and adding more exercises and
58:28 - projects for you guys inside of this
58:30 - course all you need to worry about is
58:33 - keep coding inside of main okay main.py
58:36 - and since I'm cozy I'm just going to be
58:38 - coding in kazi.py so at any time you can
58:42 - go into cosita py you should have all
58:44 - the notes and everything because that's
58:45 - where I'm going to be doing all of my
58:47 - work now with that said let's keep
58:49 - rocking and rolling let's work on
58:51 - understanding and learning how functions
58:54 - work inside of python so in order to
58:58 - define a function I will do something
59:00 - along the lines of death okay d e f
59:04 - which is Define a function and then say
59:06 - I'm gonna call it say my name like this
59:09 - and first we'll just call this function
59:11 - and then we'll see what happens okay and
59:13 - this is just going to say hi rafae qazi
59:16 - it doesn't need to even say hi I'll just
59:18 - be like this now if I run this piece of
59:21 - code you'll notice that nothing actually
59:23 - happened why am I not actually seeing
59:26 - anything in this case now the reason why
59:28 - I'm not seeing anything is it's just
59:30 - like I defining a variable and if you
59:32 - don't call that variable it doesn't
59:33 - really do anything so for example say I
59:35 - said name is Rafi qazi well now I need
59:38 - to call that variable right if I need to
59:40 - do this so let's just say here name is
59:42 - John how would I call this here if I run
59:45 - this it doesn't actually output John to
59:47 - the screen
59:48 - if I want to call it I do print name
59:52 - and when I run this it will actually say
59:55 - John but the difference between a
59:58 - function is when you call it it's very
60:00 - similar to a variable but when you call
60:03 - a function you have to put these open
60:05 - close parentheses in front of it okay so
60:08 - it's very similar to a variable name
60:09 - except you got to do this and once you
60:12 - do this it runs everything that's inside
60:15 - of here so I'm going to hit run and you
60:18 - can see it says say my name okay we're
60:20 - going to get rid of this John thing here
60:22 - now what if I wanted it to say more
60:26 - names okay so let's say John and then
60:30 - let's go here and let's say Cara and
60:32 - let's say here and say sam and if I run
60:35 - this it'll run all of those lines of
60:39 - code but if I comment this part out
60:42 - right here it will say nothing so
60:45 - whenever I uncomment this this entire
60:47 - chunk of code is going to run that's the
60:50 - cool thing about a function it'll allows
60:53 - us to run big chunks of code at one time
60:58 - now I'm going to show you something else
61:00 - so what I want to do here is I want to
61:03 - make another function and this one will
61:06 - be more Dynamic so we'll call it say my
61:08 - name two okay so we're going to make our
61:10 - function a little bit Dynamic so it's
61:12 - going to basically take in a user input
61:14 - I'm going to say print rafikaze okay and
61:18 - let's just call our function print say
61:21 - my name to and then make sure we call it
61:24 - open close parens and I don't have to
61:26 - actually say print here because I'm
61:28 - already printing from the function
61:29 - itself so there we go I got Rafa quasi
61:33 - in this case what I want to actually say
61:37 - is I want this part to be dynamic so I
61:40 - want this to be name dynamically but it
61:43 - says this is not defined so what I'm
61:45 - going to do is this function is going to
61:46 - take in an argument and that argument is
61:49 - going to be name so it's going to take
61:51 - in a name and whatever name the user
61:53 - gives it print is going to put that name
61:56 - right here and then call the print
61:57 - function and then it's going to print it
61:59 - out onto the screen all right so I'm
62:03 - going to go ahead and say say my name
62:04 - and I will say Cosi and let's run it and
62:07 - boom you're going to get cozy I can say
62:10 - Rafe and boom it's going to run it so
62:14 - you can see how uh it can run your full
62:17 - name like that now we're gonna step it
62:20 - up a notch so I'm gonna comment this out
62:22 - because I don't need to run this
62:23 - function right now so we're going to
62:25 - comment this out I'm going to make a
62:26 - greeting function and this will take in
62:29 - your name okay so we can do some string
62:31 - formatting here so I'm going to say hey
62:33 - and then we'll say name
62:36 - okay or exclamation mark and let's go
62:39 - ahead and print greeting now or not
62:41 - print but let's just say greeting and we
62:44 - will say name is qazi and let's run this
62:47 - and you can see that it says hey qazi
62:49 - and I can even put a little Emoji here
62:52 - to make it more fun and you could see it
62:55 - says Hey Kazi now let's put exclamation
62:58 - mark at the end here that'll look nicer
63:00 - I think now what if we want to make not
63:03 - only the name Dynamic but also the
63:05 - greeting Dynamic meaning that we should
63:09 - be able to say the uh the person's name
63:11 - is qazi so greed Causey and greet them
63:14 - with a specific greeting
63:16 - so we can actually do that thing okay so
63:19 - it'll take in a greet and then it'll
63:22 - take in the name so now I can actually
63:24 - go ahead and give it two arguments okay
63:27 - and the first argument I'll give it is
63:29 - aloha and the second argument is the
63:32 - name so I'm giving this function
63:34 - greeting two arguments that's how we say
63:37 - it and then we want to make this dynamic
63:39 - as well so what should I replace this
63:42 - hay with so I get greet over here I'll
63:44 - give you five seconds to think about it
63:46 - five four three two one all right so
63:51 - we're gonna go ahead and change this
63:52 - with greet so now greeting is dynamic
63:56 - and the name is dynamic and let's go
63:58 - ahead and run this and we get Aloha qazi
64:01 - okay so this is an example of multiple
64:06 - arguments okay inside of a function this
64:09 - has one argument inside a function uh
64:14 - this here an example of no arguments so
64:18 - these are some simple examples of
64:22 - of functions okay and if we want to add
64:26 - some documentation to our function so
64:28 - they're more readable we can actually do
64:30 - that as well so I'll show you something
64:32 - it's called triple quotes inside of
64:34 - these triple quotes I can say greeting
64:38 - ticks and two arguments green and name
64:42 - and it greets the user and then I can
64:46 - actually even give an example of how to
64:48 - call this function so I can say grading
64:51 - and then I'll take in Aloha and then a
64:54 - name like this and then actually
64:56 - actually even show what that will output
64:58 - so I can show that it will actually
65:01 - output this string right here so that
65:05 - way if a user is about to use your
65:08 - function greeting they can look at it
65:10 - and they can go oh man I really
65:12 - understand what this code does it takes
65:14 - in two arguments greet a name and it
65:16 - creates the user this is how I would
65:18 - call it so this is a great example and
65:21 - this is what I'm expecting it will
65:22 - return turn so you don't always have to
65:25 - do this but documentation is an
65:26 - important and valuable skill that if you
65:28 - actually learn now you'll be way more
65:30 - advanced ahead of so many people because
65:32 - people shy away from it and run from it
65:34 - and if you just spend like three minutes
65:36 - or two minutes often times you could
65:39 - document most things very quickly and
65:41 - it'll help and save so much time and
65:44 - really help out other your fellow
65:47 - developers you know because you're going
65:48 - to get a job as a developer one day and
65:50 - so if you can write code that's very
65:52 - helpful like this your chances of
65:54 - getting a job will be so much higher
65:56 - because everybody wants a developer that
65:59 - is actually helpful to other people and
66:00 - isn't just some nerd that sits in a
66:02 - basement writes code and then when
66:03 - things break just doesn't communicate
66:05 - and nobody else knows how to handle that
66:07 - person's code because everybody hates
66:08 - that person so this will actually help
66:10 - you with that okay so our greeting
66:13 - function is looking good to me we can go
66:15 - ahead and comment this out for now now
66:18 - one other concept I want to show you is
66:20 - the concept of default arguments so I
66:24 - can say what if the user doesn't give a
66:26 - greeting what if that happens you know
66:29 - they don't put in anything for this so
66:31 - there is something you could do for
66:33 - default arguments it's a it's a pretty
66:35 - nice trick and I'll show you how we can
66:37 - do this so what we're going to do is the
66:40 - argument we know we're going to need a
66:42 - default argument for let's go ahead and
66:44 - put that at the end so I'm going to say
66:46 - comma and we'll do greet just like this
66:49 - okay so name comma greet and the
66:53 - greeting that we'll actually give here
66:54 - is Aloha let's say aloha by default if
66:58 - you don't put in anything for greet
67:00 - it'll say aloha by default so let's go
67:02 - ahead and give this a try I'm going to
67:04 - uncomment out this greeting and I'm
67:06 - going to hit command enter to run it and
67:08 - look at that I got back Aloha qazi
67:11 - because by default it assumed we had
67:13 - Aloha happening okay now if I went ahead
67:16 - and gave a specific greeting and I said
67:18 - hello and we ran this you'll see now it
67:22 - actually says hello Aussie so it's a
67:24 - very nice way of having default
67:26 - arguments like this because it makes
67:28 - your code a lot more user friendly
67:30 - because if a developer it you know
67:32 - forgets to put this or a user doesn't
67:34 - put a certain piece of information you
67:36 - can still let them go to the next page
67:37 - you know so an example of that would be
67:39 - if you made a fitness app and you asked
67:40 - the user for their body weights you know
67:43 - their body mass index their height Etc
67:45 - on a page but the user like didn't put
67:48 - in any of the information they should
67:50 - still be able to hit next and go to
67:52 - another page where maybe they can log
67:54 - their calories but if you didn't have
67:56 - these default arguments it would like
67:57 - force them to just stay on that page and
67:59 - just be like no you have to give me your
68:01 - body weight your body mass index your
68:03 - height and your gender all of it
68:05 - otherwise I can't let you go forward so
68:07 - default arguments are really really nice
68:11 - now one other really cool thing I want
68:13 - to show you is something called named
68:15 - arguments okay so for example if if I'm
68:19 - looking at this you know this gets
68:21 - pretty confusing because if I'm looking
68:22 - at this I don't know which place is for
68:25 - argument and I have no idea which place
68:28 - is for greeting like where what goes
68:32 - where I have no idea where does my where
68:34 - does my grading go and where does my
68:36 - name go right so is this the name and is
68:39 - this the greeting or is it the other way
68:41 - around so right now we're doing
68:43 - something called positional arguments so
68:46 - we know that since name is in the first
68:49 - position or the zeroth position I'm
68:51 - going to put my name in this earth
68:53 - position and since the greetings in the
68:55 - first position I'm gonna not put this
68:57 - but I'm gonna put a greeting like high
68:59 - okay so we know that but this is a
69:02 - concept known as positional arguments
69:04 - but what we actually care about are
69:07 - named arguments because that's a really
69:09 - nice way of doing it you don't always
69:10 - have to do this but this will make your
69:12 - life a lot easier in the future what I'm
69:14 - going to say instead is I'm going to do
69:16 - a greeting and I'm gonna say name is
69:19 - qazi comma great is high let's just say
69:25 - so now it's very nice because I can
69:27 - actually even change the order of this
69:29 - right so I can actually order it this
69:32 - way because it's greeting so now it
69:35 - doesn't really matter where I call it
69:37 - let's run this and I should see high
69:39 - qazi look at that so the order of these
69:41 - actually does not matter anymore because
69:44 - it's a named argument so I really like
69:47 - named Arguments for functions you don't
69:49 - always have to use them but it's very
69:51 - handy and then when you're calling this
69:53 - function and you're looking at it later
69:54 - and you haven't looked at your
69:55 - definition of a function in a long time
69:57 - it'll be very clear what the heck is
69:58 - happening for you in the future okay so
70:01 - for now we'll just keep things simple
70:02 - and we'll just call our functions using
70:04 - positional arguments all right so
70:07 - positional arguments okay and then we'll
70:10 - say name and then greet but I'm going to
70:13 - comment this out for now because I don't
70:15 - need this all right let's go ahead and
70:18 - now we'll create another function so
70:20 - with functions because there are such a
70:22 - life blood of coding there's pretty much
70:25 - no app that you'll write that won't have
70:28 - functions very unlikely unless you're
70:30 - writing some simple Python scripts if
70:33 - you master functions you're going to be
70:34 - a great coder so let's do a lot of
70:37 - practices with functions so let's go
70:39 - ahead and create a function it'll be
70:41 - called sum and it'll take in two
70:43 - arguments two numbers and what this
70:47 - function will do okay at a very simple
70:49 - level sum if I call it with like one and
70:53 - two it should return three okay so takes
70:56 - two integers returns there's some that's
71:01 - it if you want to take this
71:02 - documentation and you want to add it in
71:05 - the body you can do that as well and so
71:07 - now it makes it very clear what you're
71:11 - about to write as your code okay that's
71:14 - that's what I like about having some
71:15 - documentation like this what it'll look
71:17 - like so what I want to do is for this
71:20 - function I just want to go ahead and say
71:22 - return a plus b okay so if I'm taking in
71:25 - two numbers a a b then I just want to
71:27 - return their sum so let's go ahead here
71:31 - let's put this out here for now okay and
71:34 - let's just take a look at this the
71:35 - reason I'm showing it to you like this
71:36 - is because I want you to start getting
71:37 - used to seeing functions if you see this
71:40 - in there that might make it bloated it
71:42 - might confuse you for now but in future
71:44 - when you're writing your own functions I
71:46 - highly recommend you do the
71:47 - documentation within it like this so
71:50 - boom here we got our sum function and
71:53 - then when we return we just return a
71:55 - plus b so this is a function it returns
71:57 - these two numbers now let's go ahead and
71:59 - call our sum function and I'll say sum 1
72:01 - comma two here's what's going to happen
72:03 - watch what happens when I run it nothing
72:05 - got output to the console because this
72:08 - is a return and not a print so for this
72:10 - function and most functions you're going
72:12 - to return the statement because once you
72:15 - return it you could actually do
72:16 - something with it so for example I'll
72:18 - show you what I mean so I could print
72:20 - this if I want to and now I'll actually
72:22 - get a printed answer three but what's
72:25 - cool about return is I could actually
72:27 - create a variable called num and now the
72:29 - result of sum is stored inside of it and
72:31 - now I could go ahead and print num so I
72:34 - could use this value later that's
72:35 - returned so you could see num was
72:37 - printed out and is three however if I
72:40 - replace this with print you'll notice
72:42 - we'll have a problem here if I replace
72:45 - it with print it prints it out right but
72:49 - then num it stores the value none inside
72:53 - of that like there's nothing because
72:55 - when I call sum here
72:57 - says something with print and then
72:59 - nothing gets stored here so in other
73:00 - words it's broken and not useful outside
73:03 - of the function okay so that's why
73:05 - return is a good way to do it all right
73:09 - so we're going to go ahead and I'm just
73:10 - going to say print for now so this
73:12 - function is working now I want to show
73:14 - you something so what you could actually
73:15 - do is you could say from Main import
73:20 - this function sum that you just wrote so
73:23 - we can play with it in the Shell now
73:25 - since I'm not in the main file like you
73:27 - might be I'm in this file called
73:30 - quasi.py I'm going to go ahead and I'm
73:33 - going to replace main with cozy and I'm
73:36 - going to say quasi import sum so now I
73:40 - actually have access to the function sum
73:42 - inside of my command line which is
73:44 - really nice and now I can go ahead and
73:47 - use this so I can say sum 1 comma two
73:50 - and Watch What Happens boom I get back
73:53 - three let's try sum again and I'll say
73:55 - five comma 20 27 boom I get 32 so you
74:00 - could see this function sum works every
74:03 - single time and I like this interactive
74:06 - terminal because you could play with
74:08 - this right you could do a lot of things
74:09 - with it like for example what if I do
74:11 - sum of 5 comma 27 plus 10 well this will
74:15 - evaluate to 32 and then this will add a
74:17 - 10 to that and then these will get added
74:19 - together and boom you get 42. this
74:21 - allows you to play test some ideas and
74:24 - do everything very very quickly so
74:26 - that's why I like playing in the console
74:28 - there's a lot of playing we can do here
74:30 - and then here you kind of write your
74:32 - clean you know finished pieces of code
74:35 - you know and then because you wanna you
74:37 - you can run them once whereas on the
74:39 - console like you can just keep hitting
74:40 - enter keep running it and it's easier
74:42 - alright so there you go that's how we do
74:45 - our sum function now what I want to do
74:48 - is I'm going to comment this out and I
74:51 - want to take a step backwards and so
74:53 - this way we can get a little bit more
74:55 - practice I'm going to take a step
74:57 - backwards and I want to convert some of
75:00 - the previous stuff we had written and
75:03 - turn that into functions so for example
75:06 - this food calculator app that we had
75:08 - written earlier I'm going to copy this
75:10 - entire thing command C or control C on
75:13 - Windows and I'm gonna come over here I'm
75:16 - gonna paste it and my task is I need to
75:19 - convert this into functions all right so
75:24 - that's what I need to do so when I'm
75:25 - looking at this the first thing I want
75:28 - to do is what so let me ask you this
75:30 - whenever you're about to create a
75:31 - function what three letters do you write
75:34 - I'll give you five seconds to figure
75:35 - that out five four three two one yes you
75:39 - write the word def okay so we're going
75:42 - to say def Define this allows us to
75:44 - define a function now what's the name of
75:46 - this function going to be well what will
75:49 - this entire piece of code do it will
75:52 - calculate the food total so wouldn't
75:54 - that be a good name for it calculate
75:57 - food total perfect so we're done with
76:00 - the name now we need to know what are
76:03 - the inputs that this function takes I
76:06 - can actually see these inputs right over
76:07 - here it takes in one input right here
76:10 - and second input right here so these
76:12 - over here are going to be the input that
76:15 - it needs these two so see if you can try
76:17 - to make them the arguments for this
76:19 - function by yourself use this as a hint
76:23 - I'll give you three seconds three two
76:26 - one you could pause the video you could
76:28 - try this by yourself as well so you get
76:30 - some practice
76:31 - so food amount we're going to take in
76:34 - his argument and tip percentage we're
76:37 - going to take in as an argument so those
76:39 - are two things this function is going to
76:41 - take as an argument and then what we're
76:42 - going to do because those need to be
76:44 - given we can't just calculate that right
76:46 - there's no way so we need to know hey
76:49 - what the tip is at this restaurant or
76:51 - what the food total is we have to wait
76:52 - for our server to give us that now we
76:55 - need to calculate the tip the actual tip
76:57 - percentage and then we need to calculate
76:59 - the tip amount so once I have the tip
77:04 - percentage which is right here I can
77:07 - turn it into let's just call it a
77:08 - variable like tip percent okay so we
77:11 - take the tip and we divide it by 100 or
77:13 - we could even get rid of this because we
77:15 - know that this is our hip right this is
77:18 - this thing right here so if we get 20
77:22 - then this is going to be 0.2 which is
77:24 - going to reflect 20 so this is our tip
77:27 - percentage now we need to get our tip
77:30 - amount while tip amount is going to be
77:33 - food amount multiplied by the tip
77:35 - percentage so we take this and we
77:39 - multiply this okay you could put this in
77:41 - parentheses if you want and this will be
77:44 - tip amount and let's go ahead and just
77:48 - print tip amount for now and usually
77:50 - printing when you're creating a function
77:52 - is often used for debugging seeing where
77:55 - your code is at seeing if things are
77:57 - working as you expect them to or not so
77:59 - now we're just going to go ahead and
78:00 - call this function so I'm going to say
78:02 - calculate food total I'm going to give
78:04 - it a hundred dollars and a 10 tip and
78:06 - let's see if it calculates the tip
78:08 - amount correctly so the tip amount
78:10 - should be ten dollars let's go ahead and
78:13 - run this and we did get back ten dollars
78:15 - now the last thing we're missing is the
78:18 - total amount well that's going to be
78:21 - whatever the food amount is plus the tip
78:25 - amount that's what that is and since
78:27 - we're using the word amount everywhere
78:28 - we can just replace it also everywhere
78:30 - and this this case and just simplify our
78:33 - life and then the code will look simpler
78:35 - total is Food Plus tip okay it looks
78:39 - nicer and easier now we need to make
78:42 - sure that we actually return this
78:44 - because you see it'll tell you hey
78:45 - you're not using this okay so we're
78:47 - going to return this in a second but
78:49 - first let's go ahead and just print it
78:50 - out and let's see if we get back what
78:52 - we're expecting and you can see that I'm
78:55 - getting back total and it says 110 right
78:57 - there what I can do is I can just return
79:00 - total because that's all this function
79:02 - needs to do and we can delete these
79:05 - other lines of code I click that button
79:07 - over here because it will style the code
79:09 - and make it look pretty alright there we
79:11 - go let's run this and we're getting back
79:14 - nothing because we're just returning and
79:16 - we're not printing so when you return
79:19 - what happens is this will evaluate to
79:22 - that number so if I did 100 comma tenant
79:25 - this will give me back let's say a
79:27 - hundred and ten dollars is my total
79:28 - amount and then print will actually go
79:30 - ahead print it out and show it onto the
79:32 - screen so let's go ahead and give this a
79:35 - try and boom lo and behold you can see
79:37 - that I got back a hundred and ten so
79:39 - calculate food total is now working
79:42 - exactly like we expected okay so there
79:45 - we go we've taken that blob of code and
79:48 - turned it into a nice function and now
79:51 - if we you know commented out the nice
79:54 - thing is that our code will still be
79:56 - fine we just have to comment it out and
79:58 - then this entire block won't run anymore
80:00 - so we could just kind of ignore this
80:02 - block but it's nice to be able to
80:03 - calculate food tip like this now you can
80:06 - use named arguments because you're like
80:08 - hey which one is the tip and which one
80:09 - is the food it's kind of confusing right
80:11 - so what we could do is we could say food
80:13 - is you know 100 and then we could say
80:17 - tip percentage is 20 all right and now
80:22 - we could call it with the named argument
80:23 - and of course we'll have to print that
80:26 - result and you could see that I get back
80:28 - 120 and then I think we did something
80:31 - else with food if I'm not mistaken we
80:33 - made food look really nice so we could
80:36 - certainly do that here as well we could
80:38 - make food look really nice just copy
80:40 - that piece of code and if you want it to
80:42 - kind of have that like prettiness action
80:44 - going on which is not totally necessary
80:46 - in this case I'll uncomment this and
80:48 - then just make sure you indent
80:49 - everything so I'm going to hit delete
80:51 - and hit enter okay and sometimes this
80:54 - happens with python which is really
80:55 - annoying so delete delete bring it up to
80:58 - a new line delete bring it up to a new
81:00 - line delete delete hit enter delete
81:03 - enter delete enter delete enter and yeah
81:06 - this this I'm not gonna lie is a little
81:09 - bit annoying because it needs to be
81:11 - indented in a specific way and when it's
81:14 - not indented in that specific way it'll
81:17 - give you errors and you will be like
81:19 - what did I do I didn't do anything wrong
81:22 - they'll just be like nope you your
81:24 - mistake was just being born in this
81:26 - world all right now the error we're
81:28 - getting is it says food amount is not
81:30 - defined so that's because we called it
81:32 - food and we call it a tip rename it
81:35 - correctly and there we go food amount so
81:38 - it's printing out exactly like how we
81:41 - wanted it to now let's get a little bit
81:43 - more practice in with functions so I
81:46 - want you to give this a try yourself see
81:49 - if you could turn this weather thing
81:51 - into a function so I'll give you a hint
81:55 - so first let's comment this out and so
81:58 - we'll say Define and I guess we'll call
82:01 - this function weather to Emoji because
82:03 - you give it a weather and then it tells
82:05 - you what emoji that is represented okay
82:08 - so we're going to say weather to Emoji
82:10 - okay so this is what the function is
82:11 - going to be called I'll leave the body
82:13 - empty for now because that's what you're
82:15 - going to be writing and then for
82:17 - documentation we'll we'll say this okay
82:20 - we'll say whether to move OG will and
82:23 - they'll take in some arguments I'll
82:24 - leave this blank too but you have to
82:27 - kind of fill that part in and let's
82:29 - write it like pythonic like this so
82:32 - we'll say Emoji takes in one argument as
82:38 - a string okay so we know that whatever
82:41 - the user gives us is going to be a
82:43 - string and let's just say we're
82:45 - expecting expected uh values from user
82:49 - is just going to be like rain
82:52 - thunderstorm all right so these are the
82:55 - expected values and our expected inputs
82:58 - okay so they're going to be either of
83:00 - them and then it's going to be like this
83:02 - so if we call weather to Emoji function
83:06 - with let's say rain well we should
83:09 - actually get back is that umbrella
83:13 - okay if we call this function with not
83:17 - rain let's say thunderstorm we should
83:20 - get back cloud with thunderstorm just
83:23 - like this and then if we call this with
83:26 - the weather is sunny outside then it
83:29 - should just give us sunglasses and if
83:32 - you want to be super accurate this is it
83:34 - returns a string so this is like me
83:37 - being super accurate and you can see
83:41 - that this documentation is already
83:42 - probably very very helpful for you
83:44 - because you could see okay this is
83:46 - exactly how I'm going to be calling this
83:47 - function this is exactly what it should
83:49 - be returning okay I think I can
83:52 - understand that so you where I wrote
83:54 - pass you have to replace that with you
83:58 - know the body of the function which
84:00 - means you have to replace that with the
84:02 - correct code so that when I call whether
84:05 - to pass function and I give it an
84:07 - argument like rain it does indeed return
84:09 - this and when I give it the arm when I
84:11 - say thunderstorm it does return this so
84:13 - you have to figure that part out
84:15 - so I'm going to give you about five
84:17 - seconds here to pause and then try to do
84:19 - this on your own and then we'll try to
84:22 - do this together five four three two one
84:27 - all right let's do this together so if
84:31 - you got to this part very good and if
84:32 - you give it a try and you got it
84:34 - beautiful job if you didn't it's okay
84:36 - we're gonna do this together so now what
84:39 - I want to do here is I want to say what
84:43 - I had initially said right so I can I
84:44 - can I don't need to go through the
84:46 - entire logic again I could copy paste I
84:49 - could copy paste this
84:51 - and let's uncomment this and then let's
84:54 - just make sure that everything is
84:55 - indented properly so I'll I'll just
84:58 - bring it back up and hit enter so
85:00 - because there's something called Scopes
85:03 - which is really important to understand
85:04 - in programming so I'll just take these
85:06 - comments away for a second just so you
85:07 - could see it so this is a function so
85:10 - everything underneath this function will
85:12 - be indented showing that it's part of
85:15 - this function right over here then every
85:18 - time we have a if condition anything
85:21 - that's part of that if condition will be
85:24 - indented like this print statement to
85:27 - show that it's part of the if statement
85:29 - so this entire thing belongs to this
85:33 - weather Emoji function okay that's why
85:35 - it's indented okay this print is
85:37 - indented because part of this if this
85:39 - print is indented because part of this
85:41 - lsif but keep in mind else if is not
85:44 - inside of this if okay so keep that in
85:47 - mind it's very very important and
85:49 - neither is this else and now if I want
85:51 - to get outside of this function I have
85:53 - to make sure I unindent all the way out
85:56 - and then write something so you know I
85:58 - am outside right now but if I wrote
86:00 - something at this level I am still
86:04 - inside weather to Emoji function okay so
86:08 - indentation indentation makes a huge
86:12 - difference in Python all right so just
86:14 - remember that so actually let's let me
86:17 - go bring my comments back because those
86:18 - were actually quite helpful okay so
86:21 - there's my logic now for weather weather
86:24 - is actually going to be passed in
86:27 - automatically let me put this outside of
86:30 - here okay and let's do it like this just
86:33 - so when I'm going through the code with
86:34 - you guys it's not super confusing
86:37 - because the big that big blob like just
86:40 - makes it look too intimidating so the
86:42 - actual logic of the function here we're
86:45 - just going to put in weather so it's
86:46 - going to take in a weather that's the
86:48 - input and then it's gonna see if it's
86:49 - rain it's gonna do this if it's cloud
86:51 - it's going to do this if it's
86:52 - thunderstorms going to do this otherwise
86:54 - it's going to print sunny and Bob's your
86:56 - uncle
86:57 - all right I have to indent and undent
87:00 - all this stuff so I'll just do that real
87:02 - quick so you can see copy paste copying
87:04 - and pasting usually in Python it's not a
87:06 - good idea just try to write stuff from
87:09 - scratch and then you won't have these
87:10 - weird indentation problems because even
87:12 - a difference between a tab for example
87:15 - if I write a tab you see how a tab like
87:17 - is that versus four spaces or two or
87:22 - spaces so a tab looks like it's really
87:25 - just two spaces but it's not it's a
87:26 - whole different character and so if
87:28 - you're copying pasting copying and
87:30 - pasting code from somewhere where the
87:32 - writer of the code was using tabs and
87:35 - then but you were using spaces in all of
87:37 - your code then that will break and that
87:39 - that copy and paste will not work as
87:41 - well so what I recommend is like put the
87:43 - code next to so you can see it and then
87:45 - write it from scratch and then you'll be
87:47 - fine all right so whether the Emoji I
87:49 - think it's pretty much done if weather
87:52 - is rain whatever so let's go ahead and
87:54 - try calling it now so I'll say weather
87:57 - to 2 to emoji and I'm going to give it
88:01 - rained and let's see what happens so
88:03 - let's run this and boom look at that I
88:05 - got an umbrella let's go ahead and
88:08 - import this now and here so from qazi
88:11 - you should do from Main and I'll say
88:13 - import weather to Emoji so I'm going to
88:16 - import this function that I just made
88:18 - and I'll just say whether to Emoji I hit
88:20 - Tab and tab allows me to auto complete
88:22 - it and I'll say rain and then I'll hit
88:24 - up and go back and delete the inside of
88:27 - the parentheses and I'll say cloudy and
88:28 - I'll go up and I'll say thunder storm
88:32 - and you can see that it works every
88:33 - single time and if I went here and I
88:35 - said hailing it gives me sunny so every
88:37 - single time if it's not any of these
88:40 - three I'll get back Sunny so this code
88:42 - over here right Maps perfectly to this
88:46 - output right over here and if you
88:47 - actually look in our documentation well
88:50 - our documentation here looks very
88:52 - similar to what we're seeing out inside
88:55 - of the console okay so this is just
88:57 - multiple ways for you to understand and
88:59 - get back to you know that conclusion but
89:02 - I'm showing you a little bit more
89:03 - advanced stuff than some people might
89:05 - but I think it's helpful for you and
89:06 - it'll it'll really prepare you for the
89:09 - future so let's comment out whether to
89:11 - emoji and then let's keep moving forward
89:13 - now one other cool thing I kind of want
89:15 - to show you is uh it's a little bit more
89:18 - advanced but some of the stuff that
89:20 - we're documenting out here we could do
89:22 - something called type hinting where it
89:24 - allows you to essentially integrate
89:27 - documenting and coding at the same time
89:30 - I don't want you to be doing this yet
89:33 - but I just want to expose you to it so
89:35 - if you ever see it you're not confused
89:37 - by it and you know what it means and
89:39 - just know that it's there to help you
89:40 - and not to confuse you so for example we
89:43 - were saying you know we're we're writing
89:45 - all the stuff here and telling the user
89:47 - hey it takes in one argument as a string
89:49 - right but then the user is probably
89:50 - thinking well does this function return
89:52 - anything well then we'll have to write
89:53 - okay this function returns nothing or
89:55 - what we saw earlier turns none so so you
89:58 - know the user has to actually like read
90:00 - all this and try to understand this so
90:01 - we can actually make this simpler for
90:03 - the user so with this weather we know
90:05 - it's going to be a string so we can
90:07 - actually do colon Str and Str is a
90:10 - built-in if I go to the console and I
90:11 - write like some random variable it's
90:13 - going to say hey it's undefined but if I
90:15 - write Str it's going to actually say oh
90:16 - that's class strength and then there's
90:18 - another built-in right which is none
90:20 - which just is like hey this is none okay
90:23 - like nothing that's what that means so
90:25 - what I could do is not only could I tell
90:28 - the code that we're expecting a string
90:30 - so when you're reading this you're like
90:32 - ah I get it I'm expecting a string here
90:34 - for weather you could also do this and
90:37 - say none which if somebody was reading
90:39 - your code they would immediately know oh
90:41 - weather is a Str whether it's a string
90:44 - and this function actually returns none
90:47 - ah okay so um I shouldn't be expecting a
90:49 - return statement here so it's very nice
90:51 - to kind of bake in documentation into
90:54 - your code like this because it's just
90:56 - very helpful and this is a brand new new
90:58 - feature that was enabled after python
91:00 - 3.5 plus and you know so it's really
91:02 - nice because if you use typescript or
91:04 - any of those other types of languages
91:05 - they have they have this type of stuff
91:07 - there and what I like is like you could
91:09 - use it or you could not use it and your
91:11 - code would still work so for example if
91:12 - I run my code here and I run this I'm
91:15 - still going to go ahead and get my
91:16 - umbrella nothing really changed and you
91:18 - might be like why would I ever write
91:21 - more lines of code well same reason why
91:23 - you write more documentation or
91:25 - documentation in general is so your code
91:27 - is cleaner and easier to read and
91:29 - something for you to understand is 80 to
91:31 - 90 percent of your time as a developer
91:35 - will be used to read code okay about 80
91:39 - to 90 percent of your time only about
91:42 - say 10 or 20 percent of your time will
91:45 - actually be used right in code okay so
91:47 - for example why why do I mean that if
91:49 - you were building an app and you built
91:51 - your own app and it took you like six
91:53 - months or nine months or a year to make
91:54 - you're not every single day going to be
91:56 - coming back to that app and like writing
91:58 - so much more in code a lot of your time
92:00 - is going to be spent reading the code
92:02 - understanding what you've done and then
92:04 - maybe adding a new feature and then if
92:06 - you want to add a new feature you'll
92:07 - you'll need to go back and look at again
92:09 - what you've done and then see if you
92:11 - could add a new feature because adding a
92:13 - new feature wouldn't just be as simple
92:14 - as copy and pasting lines copying and
92:17 - pasting lines you'll have to understand
92:18 - all the work that you've done previously
92:21 - so the cognitive load of if you just
92:23 - make it messy and leave it jumbled and
92:26 - don't have any documentation or anything
92:27 - it's going to be a nightmare even for
92:29 - you to understand what you did and to
92:31 - catch up with everything so for now that
92:34 - you're a beginner you don't need to
92:35 - worry about any of this you can just be
92:36 - like screw docs screw type hinting I
92:39 - don't give a I'm trying to write a
92:40 - simple code fair I agree with you
92:42 - honestly to this date that's how I write
92:43 - a lot of my code but if you want to get
92:46 - hired and have higher chances of getting
92:48 - hired and write code it's very pleasant
92:51 - to understand and read because again
92:53 - most of your code and other developers
92:55 - on your team will be reading your code
92:57 - this is the way to go go and if you pick
92:58 - up these habits now it'll just it'll
93:00 - make you so awesome to work with for
93:02 - future so just a little note there just
93:04 - a little rant there on it I just thought
93:06 - I'll leave you with this okay so this is
93:08 - called type hinting so I'll leave a
93:10 - little comment here saying type hinting
93:12 - okay that's what that's that's what that
93:14 - is so let's keep on moving forward now
93:17 - let's go ahead and type in some of our
93:19 - other functions okay so for example we
93:21 - created some so why don't you try to
93:23 - type hint sum and if you have multiple
93:26 - arguments you can just repeat this
93:27 - process right here for the multiple
93:29 - arguments as well okay so give this a
93:31 - try and see if you could type in some
93:33 - I'll give you about five seconds five
93:35 - four three two one if you want to type
93:39 - in sum you can actually go ahead and say
93:43 - int it's a built-in so if I write int
93:45 - here it's a built in okay int and I'm
93:48 - expecting an integer here as well okay
93:49 - but in the docs I had integers so I'm
93:52 - I'm if I'm reading reading this code now
93:54 - I go okay I'm expecting it two integers
93:57 - to be coming through but then what are
93:58 - we returning well we're also actually
94:00 - returning a see if you could fill this
94:03 - out here what does this return once this
94:05 - get evaluated so if I had a one here and
94:07 - a 2 here this will become a three and
94:09 - I'll return to three three is what data
94:11 - type you're right if you got this okay
94:13 - this is I'm gonna be returning an INT so
94:17 - now when I'm reading this without even
94:19 - looking at anything else I just know
94:21 - okay I'm getting integers I'm returning
94:22 - an integer very simple but initially
94:24 - very confusing to look at and then when
94:26 - you get used to it then it's simple and
94:28 - then you're like oh actually this is
94:29 - super helpful it saves me a lot of time
94:31 - and effort like for example you know if
94:33 - you had food well what the heck is if I
94:36 - wanted to convert this into type hinting
94:38 - right what's Happening Here How can I
94:40 - convert this into taipant well I'm
94:42 - getting back I'm putting in a food but
94:44 - is food a like you know it's food am I
94:47 - expecting a string like chicken or am I
94:49 - expecting a food amount like a number
94:51 - well how would I know that it was an
94:53 - amount also can I get back an amount
94:55 - like 50 or what about 52.5 live so I can
94:58 - also get floats well float you know is
95:01 - like a super class of integer because
95:04 - floats contain integers right so I can
95:07 - actually go here and I can say float
95:08 - it's a built-in data type food is float
95:11 - and type uh tip percentage is it could
95:14 - also be a float okay but in this case we
95:16 - could just say integer okay we're
95:17 - expecting back to get back into your 15
95:19 - 20 not many people release it 25.5
95:23 - percent is what I want to tip and then
95:24 - what are we returning while we're
95:27 - returning a number which is you know
95:29 - could be a hundred and twenty dollars
95:31 - and 20 cents so it could be a float so I
95:34 - could actually just say float so now
95:36 - when I look at this function I just go
95:37 - okay I'm expecting some kind of number
95:39 - here some kind of number here and I'm
95:41 - returning some kind of number okay so
95:43 - some math stuff going on here all right
95:45 - so that's how I would type hint both of
95:47 - those now if I call sum and we run this
95:49 - I should still get some without any
95:51 - problems so it didn't really do quote
95:55 - unquote anything it just made your code
95:57 - a lot more read edible and it makes
95:58 - other developers not want to slap you to
96:00 - be honest so great so whether to Emoji
96:03 - is now good you've gotten some practice
96:06 - with type hinting named arguments
96:08 - default arguments calling functions
96:11 - turning your previous code into
96:13 - functions all of this is a these are
96:15 - actually very valuable skills and it's a
96:17 - lot to synthesize in a very short amount
96:19 - of time so I'm going through this but I
96:21 - expect that you're watching this over
96:23 - days and weeks so I hope that this can
96:25 - register in your brain now before we
96:27 - move forward I want to give you an
96:30 - exercise it's time for an exercise put
96:34 - some cheesy music or something here
96:36 - throw some cheese on the screen all
96:38 - right great so time for an exercise all
96:41 - right get ready get ready we're gonna
96:44 - try to keep this exercise as simple as
96:46 - humanly possible and we'll start off
96:48 - with something something basic it's not
96:51 - that basic so don't get excited it's
96:53 - actually a little tricky but um I I
96:56 - believe in you I believe venue I believe
96:58 - you could do this so I have this
97:00 - exercises folder right here you can go
97:01 - in here and do the exercise okay so I'll
97:05 - go into exercises and we'll go into this
97:08 - exercise here bigger guy this is going
97:10 - to be your first exercise all right so
97:12 - now I'm inside of bigger guy so this is
97:15 - how it works so I go here and you read
97:18 - The Prompt make sure you read everything
97:20 - that's there don't just not read because
97:22 - that's mean we spent so much time and
97:25 - effort making this for you making it
97:27 - easy here's the prompt write a function
97:29 - bigger guide that takes in two numbers
97:31 - and returns a bigger one make sure to
97:34 - return to use return and not print in
97:37 - your function you could write print in
97:39 - your function while you are let's say
97:42 - working on it but you know in future
97:45 - make sure to uh return it but I'm Sorry
97:49 - by that I mean that at the end once
97:51 - you're done make sure you return it okay
97:53 - like don't just leave all the prints
97:55 - there but don't return so like while
97:56 - you're debugging and working on it's
97:58 - pretty normal to use print at the end of
98:00 - it you should have a return majority of
98:02 - the times on all your functions one
98:04 - other important note that I want to
98:06 - leave you with is and this will come in
98:08 - handy later so I'll say important right
98:11 - here and it'll say Do not forget to
98:14 - import this into main.py alright so I'll
98:18 - talk about this in a second this is
98:20 - going to be a very important point
98:21 - because if you don't do this and I don't
98:23 - tell you about this you won't be able to
98:25 - run your bigger guy function and then
98:27 - you'll just be depressed alright so
98:30 - let's just talk about the function first
98:32 - real quick okay and what's happening
98:34 - here so given two numbers return the
98:36 - bigger one so I want to be able to call
98:37 - bigger guy just like this bigger guy
98:40 - takes in two arguments two comma three
98:42 - and it Returns the bigger one three okay
98:46 - so that's an example for you if I had
98:49 - obviously 10 then it will return 10
98:52 - right here okay it won't return the
98:55 - smaller Guy where it says pass is where
98:58 - you're going to write your solution
99:00 - where you're going to write the code
99:01 - okay I have written pass here because
99:04 - I'm not just going to give you the
99:06 - solution it's an exercise now if you
99:08 - want to actually call this function
99:10 - here's how you're going to do it you're
99:12 - going to go inside of your main.py and
99:15 - I'm going to show you how to import
99:16 - stuff because it's going to be important
99:17 - for me it says import quasi because
99:19 - because I'm still working on this file
99:21 - for you this line shouldn't even be
99:23 - there and it doesn't matter so I'm just
99:25 - going to comment this out for now
99:26 - because it's not necessary okay you
99:29 - could just if you feel comfortable you
99:30 - can even delete this but it's not going
99:31 - to be there most likely uh now we're
99:34 - going to say from exercises
99:39 - dot bigger guy so I'm gonna go dot
99:42 - bigger guy so by doing this I have so
99:46 - here imagine like we're we're on this
99:48 - walk and this journey together right so
99:50 - when I do exercises it takes me into
99:52 - this folder right here boom and it just
99:54 - opens it then we're gonna do the dot
99:56 - bigger guy it goes into this file and it
99:59 - opens it now inside of this file I have
100:02 - pretty much only one function and it's
100:05 - called bigger guy as well so I can
100:07 - actually say import bigger guy and
100:11 - that'll get me access to that function
100:13 - but since I'm so nice and I want to make
100:15 - life even simpler for you you can
100:18 - actually just say import exercises dot
100:21 - bigger guy and that's it okay yes this
100:24 - is going to remain yellow but leave it
100:26 - it's not important it's not important so
100:29 - let's go back into our bigger guy right
100:31 - here okay and if you want to run this
100:34 - let's do this okay so I'll just say
100:36 - print and I'll say banana Anna here and
100:40 - then I'll say print bigger guy and then
100:43 - give it two arguments so we'll just give
100:45 - it one and two for now and I'll run I
100:47 - get a banana printed out to the screen
100:50 - so without confusing you too much if you
100:54 - want this to run you'll need to have
100:57 - this imported in the main file if you
101:00 - don't have it imported in the main file
101:01 - and you run it you get back nothing NADA
101:05 - nobody's there nobody's home okay
101:08 - because what's happening is the only
101:10 - file your python is running right now is
101:13 - this main.py file as the only file
101:16 - that's being ran none of the other files
101:19 - are being ran so you have to import and
101:22 - then you can actually run that file okay
101:25 - so import allows you to do that here is
101:28 - another way you can run that file okay
101:30 - and this is the way you could run it on
101:32 - your local computer anywhere as well so
101:34 - say you want to run this file bigger guy
101:36 - and let's just say you forget this
101:38 - import method or you just don't like it
101:40 - I don't know whatever the reason you can
101:42 - run it from your shell okay so go to
101:46 - your shell you can hit enter right and
101:49 - and this it should tell you're in this
101:50 - folder whatever your folder is called
101:53 - CD into exercises okay so the command
101:55 - line stuff is valuable and so I'm I
101:58 - think it'd actually be cool if you
102:00 - learned this because if you're doing
102:01 - python you're gonna be doing something
102:03 - with the command line so CD into
102:05 - exercises and all this means is I'm I've
102:07 - changed directory and now I'm inside of
102:09 - this exercises folder
102:11 - and then simply do python bigger and
102:14 - then you could just hit tab it'll auto
102:16 - complete it okay and there we go so the
102:20 - banana was printed out to the screen it
102:22 - ran that file so those are the two
102:25 - different ways
102:27 - of running this file I think this is a
102:30 - much easier way because once you set it
102:33 - up this way you can just keep working on
102:35 - your code you just say print cookie and
102:38 - then just hit command enter and
102:40 - everything will run okay you're getting
102:42 - the cookie and you're getting the banana
102:44 - everything is working perfectly so in my
102:47 - opinion this is a much easier way now
102:49 - once you're sure that you have written
102:51 - this function and you've written it
102:53 - completely correctly and just to give
102:54 - you hints you're going to have some
102:56 - you're gonna have to do some if
102:59 - um else conditions here and to give you
103:01 - even further hint you're probably gonna
103:03 - have to do only one if and only one else
103:07 - and your logic is going to be you know
103:09 - basically like hey if this is greater
103:12 - than this one then return this one
103:14 - otherwise return the other one okay so
103:16 - I've kind of given you the logic now you
103:18 - just have to turn it into code and we'll
103:21 - code it together if you don't get it
103:22 - which is totally fine so that's kind of
103:25 - the logic right there and if you're sure
103:27 - that you did it right I have man I'm so
103:31 - nice I have also written tests for you
103:34 - which means my tests will run and test
103:38 - if your code is working or not and if
103:40 - it's broken it'll catch it and tell you
103:43 - so what you could do is you could go
103:44 - into the shell and once you're inside of
103:47 - the shell just make sure to go to the
103:48 - home directory so let's just say you
103:51 - were in exercises just do CD space dot
103:54 - dot that will take you out and back One
103:57 - Directory so now that you're in the home
104:00 - directory whatever of your project just
104:02 - go ahead and do PI test if you run Pi
104:05 - test it'll run and it'll tell you if
104:07 - your function is correct or not and here
104:10 - it's saying uh nope this function was
104:13 - not correct we ran the test it says hey
104:16 - we ran this a bigger guy one comma two
104:19 - and where it was supposed to return to
104:21 - it actually didn't it actually returned
104:25 - none and that doesn't seem right now I'm
104:31 - hiding the solution from you because I
104:33 - just solved the problem if you have done
104:35 - it correctly and you do PI test it
104:38 - should basically say green okay
104:43 - um and it should give you uh test all
104:46 - exercises okay and it should give you a
104:48 - like a green check mark for this now if
104:52 - you just do PI tests right on your
104:54 - computer you're going to get something
104:56 - ugly that's gonna have red red marks and
105:00 - stuff like that and I don't want you to
105:02 - have that because it's testing every
105:04 - single test that I've written inside of
105:06 - test all exercises so it's actually
105:09 - saying that you passed for the bigger
105:12 - guy one but you failed for some other
105:14 - ones right so one failed and it says one
105:19 - passed you can see the green here passed
105:21 - but what I want you to do is don't test
105:23 - the entire file in all the functions
105:25 - right so if I actually look in the test
105:27 - file I want you to just test the bigger
105:29 - guy function so I've written these tests
105:31 - you don't have to worry about them but
105:33 - I'm just checking if you know if I call
105:36 - it with one and two does it return two
105:37 - if I call it 10 and 20 it should return
105:39 - 20. so I've written these tests don't
105:42 - touch anything in the test file okay so
105:44 - just get out of this test file I'm just
105:46 - showing this to you so you're not like
105:47 - scared what this is yeah what's going on
105:49 - here but I'm also testing other
105:51 - functions in there so if you're doing Pi
105:53 - test it'll test this guy and it'll test
105:56 - every other exercise you've done as well
105:57 - so we don't want to do that we want to
106:00 - test only your uh bigger guide bigger
106:04 - guy okay so let's go back and here's
106:08 - what we're going to do I'm going to
106:09 - clear this okay and then we're simply
106:12 - going to go ahead and say I'm going to
106:13 - say Pi test do Dash K and I'm just going
106:16 - to say test bigger guy that's it so now
106:20 - for bigger guy I did pass successfully
106:23 - for the other now if you want to test
106:25 - other functions you obviously just give
106:26 - the names of whatever the other
106:28 - functions are and make sure you don't
106:30 - change function names and things so go
106:32 - ahead and give this a try I really hope
106:35 - that you get it I think you will and I'm
106:39 - just going to set it back up to how you
106:41 - should get it okay so it's just going to
106:43 - be like this
106:44 - is going to be pass boom okay and then
106:48 - yeah that's it so replace this pass with
106:51 - the correct code run this test it out
106:55 - and yeah and if it's successful then it
106:58 - should pass essentially all of the tests
107:00 - and then you should be good to go with
107:02 - that said good luck I'm rooting for you
107:05 - all right welcome back so I hope you
107:08 - gave it a shot and made tremendous
107:11 - amount of progress I really hope you
107:12 - were able to actually fully solve it but
107:15 - no worries uh if you didn't let's do it
107:19 - together and even if you did hey maybe
107:20 - you'll get to learn something
107:22 - so
107:23 - here's the situation right I have to
107:25 - return one of whichever one is the
107:27 - bigger one well
107:29 - I'm gonna check and I'm gonna say hey is
107:31 - a greater than b
107:33 - okay so I'm going to do that check first
107:35 - so let's actually go ahead into our
107:36 - console let's just test something so
107:38 - I'll set a num A5 and B I'll set it to
107:42 - 10. and I'll just say hey is a greater
107:45 - than b and I get false
107:47 - okay so I'm like okay so far so good I
107:50 - like using my console as I'm writing my
107:52 - code because very interactive I can see
107:54 - what's happening and then come back and
107:55 - add it to my code
107:57 - okay and now I can actually even write
107:59 - here if a is greater than b
108:02 - then you know just give me back a just
108:06 - like print a whatever so if a is greater
108:10 - than b let's see give me a
108:13 - else
108:15 - give me b
108:16 - so let's see what this does I ran this
108:19 - line this code and if you actually see I
108:22 - got back 10 which is actually exactly
108:24 - what I'm supposed to get right in that
108:26 - case so I'm going to say if it's a is
108:28 - greater than b return a else
108:31 - return B okay so basically what I'm
108:35 - saying is you know just do do this
108:37 - little chakaruski over here and if it's
108:40 - if this number is bigger then return it
108:42 - otherwise if the other number is bigger
108:44 - then return that yeah that's it so let's
108:47 - return run this and we we can try
108:50 - running this function and see if it
108:52 - gives us what we wanted to give us so
108:54 - I'll say bigger guy
108:55 - and I'll call this with one comma two
108:59 - let's run this and I get back to 2 which
109:03 - is completely correct let's go five it
109:06 - should choose five now so it's looking
109:08 - correct I can also import it as a
109:10 - console if I want I can say from
109:12 - exercises dot bigger guy import bigger
109:17 - guy and then I can say bigger guy give
109:21 - it two comma four so I'm just showing
109:22 - you multiple ways you can access this
109:24 - function and play around with it and
109:26 - then I'm gonna go ahead in my uh test
109:29 - and I'll say test
109:31 - okay and um let's just leave a little
109:34 - note here and then we'll say
109:37 - to to test
109:40 - your code
109:42 - this is the command that you'll write Pi
109:44 - test
109:45 - Pi test k
109:48 - and then
109:50 - you know bigger
109:52 - guy whatever so I'll remove this yeah
109:56 - this is going to be the code that you
109:57 - write for this one right it's a pie test
109:59 - and then I'll say bigger guy
110:01 - shell okay there we go so now it's very
110:04 - clear what's happening
110:06 - all right let's run this
110:08 - and boom there you go it says all tests
110:10 - have actually been passed all right
110:13 - there you go so if you got this
110:14 - congratulations if you didn't all good
110:17 - they're going to be plenty of more
110:18 - exercises so don't lose hope and let's
110:20 - keep going all right welcome back you're
110:24 - doing great so far all right so now
110:27 - let's get out of this function okay
110:29 - hopefully you got this one correct let's
110:32 - go back into your main but I'm gonna go
110:35 - into my Kazi because that's where I'm
110:36 - writing all my code but you should be
110:38 - writing it in your main okay so just
110:40 - ignore cozy so let's go over here now I
110:45 - want to introduce you to our friend
110:47 - Lambda okay it's a great friend you're
110:50 - gonna love him or love her she's awesome
110:53 - but in order to learn about Lambda
110:56 - you know we need to just get the
110:58 - technical definition out of the way and
111:00 - it is basically allows you to create an
111:03 - anonymous function uh boring boring
111:06 - boring definition but it's a lot more
111:08 - fun in real life so let's just use it
111:11 - without doing too much talking here's an
111:13 - example so remember when we had our sum
111:15 - function right so it was a comma B and
111:18 - then we said return a plus b well with
111:21 - Lambda we can actually make it a lot
111:23 - cooler for example I could say sum and I
111:27 - could say Lambda okay and I can say a
111:31 - comma B and I can say a plus b so this
111:35 - is let's just call this sum two so
111:39 - basically over here this is a this is a
111:42 - whole function okay how do I know
111:45 - because I can actually use it I could
111:47 - say print sum to and let's give it one
111:50 - comma two and it's telling us what the
111:52 - inputs are it's an anonymous function
111:54 - right here all right so I'm going to hit
111:56 - run and right when I hit run boom look
111:59 - at that I get back three now I could
112:02 - change this to let's say five comma ten
112:05 - let's run this and I get back 15. so you
112:09 - can see that this is a really nice way
112:12 - of writing the same piece of code and it
112:16 - just puts it in one line and honestly I
112:19 - really like looking at it like this and
112:21 - in functional programming if you're
112:23 - doing JavaScript or whatever you come
112:24 - from that ecosystem yeah a lot of
112:27 - functional programming will look like
112:28 - this okay JavaScript has its error
112:30 - functions but a lot of those Concepts
112:33 - came from like Python and functional
112:35 - programming languages like this
112:36 - synonymous functions are really nice now
112:38 - you could use you could create this
112:40 - function without a name and use it or
112:43 - you could do it here so either way will
112:46 - work but yeah that's the definition now
112:48 - I want to introduce you to this concept
112:50 - of implicit return so notice that you
112:54 - actually didn't even have to say return
112:56 - here here because in Lambda functions
112:59 - you can only have one expression instead
113:03 - of multiple expressions and that's
113:04 - expression expression it thinks you're
113:07 - returning okay so when I run it you get
113:09 - back 15 and I don't even need a return
113:11 - statement so that's nice because it
113:13 - looks cleaner now how does Lambda work
113:15 - so Lambda you say Lambda and then you
113:19 - put ARG one you put Arc two however many
113:23 - arcs you have right whatever and then
113:25 - colon argone plus R2 or whatever like
113:29 - however you want to use them this is
113:30 - where the arguments go and then after
113:32 - the colon is where your expression goes
113:34 - okay so we just say expression all right
113:36 - so you know if I want to make my greet
113:38 - function I can say take greed comma name
113:42 - and then just go high I can go great
113:46 - cozy now my grid function has turned
113:49 - into a Lambda and I can run this okay so
113:53 - my bad name so now let's do print
113:57 - and we'll call this great and now I'll
114:00 - say great and we'll say aloha and I will
114:04 - say qazi and let's run this and boom we
114:08 - got that okay so you can see it it works
114:11 - it's easy to read and everything is just
114:14 - in one line now there will be more we'll
114:16 - talk about later about lambdas but for
114:18 - now I just wanted you to be intro to
114:20 - them and not be scared of them because
114:22 - you'll see them a lot so you know become
114:25 - friends with Lambda that's a good idea
114:27 - and also I wanted you to get familiar
114:29 - with the concept of implicit returns
114:31 - right they're returning here you're
114:33 - returning here
114:34 - um implicit returns now another thing I
114:37 - want to intro you to is called testing
114:40 - so testing your code how do you test
114:43 - your code you might have heard of
114:45 - something called unit test or whatever
114:46 - we're not going to get too deep into it
114:48 - but I'm just going to show you how to
114:49 - write basic basic basic basic basic
114:52 - tests for example we've already defined
114:54 - our sum function right so for example if
114:56 - I do print let's comment out both of
114:58 - these lines here so let's say I write my
115:00 - function sum 1 comma 2 I should get back
115:03 - 3 and it should print it out over there
115:05 - it does beautiful how do I test this so
115:08 - how I test this is I can actually go
115:10 - ahead and say assert that sum of 1 and 2
115:13 - is equal to what can you guess I mean
115:16 - it's pretty obvious right sum of 1 and 2
115:18 - should return what three right so I will
115:22 - write the statement assert that sum of
115:24 - one comma two is equal to 3. so when I
115:27 - run this and if I don't get any errors
115:28 - that means everything worked and our our
115:31 - code works great now imagine you went to
115:33 - your sum function so let's see if we can
115:35 - find our sum function let's say we want
115:37 - your sum function and you did something
115:39 - that may be broken maybe you like
115:41 - instead hit a minus here and maybe you
115:43 - did that by mistake and then you just
115:45 - like moved along if you didn't have this
115:46 - a search statement you would run your
115:48 - code and it would seem like everything
115:49 - else is fine but that sum function might
115:51 - be causing so much so many errors in
115:53 - your app but watch this if I run this
115:55 - now boom it just immediately catches and
115:59 - it says Hey assertion error assert
116:01 - someone comma two equals three and
116:03 - that's not the case here okay and I can
116:06 - even leave a little helpful message and
116:07 - it's like someone comma 2 does not
116:10 - return three like it should and I I can
116:14 - put a little X here or whatever and you
116:16 - run this and I could see hey sum 1 comma
116:19 - two does not return three like it should
116:20 - so now there's like a more helpful error
116:22 - message and you can and assert allows
116:25 - you to do that so what I like to do
116:26 - sometimes when I'm coding is I'll just
116:28 - have a bunch of assert statements like
116:29 - some you know and and I want a really
116:32 - rigorously test this like does it work
116:34 - on negative numbers like negative 20
116:36 - comma negative uh 20. so negative 20
116:40 - plus positive 20 should give me back
116:42 - zero so I want to assert that this is
116:44 - zero okay so let's go back to our sum
116:46 - function let's fix it so I'll say a plus
116:49 - b okay let's run it again and now you
116:52 - can see that all tests pass okay so I
116:55 - can say print some function in all tests
116:58 - passed and I I'm just doing this one for
117:02 - just show you don't have to ever like do
117:05 - that okay but I'm just doing this so we
117:07 - could see it cleanly okay some functions
117:09 - all of the tests pass because if it
117:11 - broke at any of these points it would
117:13 - just stop running right there it
117:15 - wouldn't go any further that's what
117:16 - assert does now what I would probably do
117:20 - you know as a next step is I would not
117:22 - just leave this code outside by itself
117:24 - but I would put it inside of a function
117:26 - so I'd say test sum so that'd be like
117:28 - hey test my sum function and all it
117:31 - would do is it would just have these
117:32 - assertions so I'm gonna delete delete
117:34 - hit enter delete delete hit enter and
117:37 - maybe a couple of more assertions like
117:39 - make sure 20 plus 20 is 40 make sure you
117:44 - know 560 plus 780 is 560 plus 780 is
117:52 - thirteen one three four zero okay so
117:55 - yeah just make sure sure that those
117:58 - match so now I need to and I'll put this
118:02 - print statement inside of that function
118:04 - as well okay now if we don't call that
118:06 - function obviously when I run my code
118:08 - nothing will happen because I'm not
118:09 - calling it so I'll just say test sum and
118:13 - we'll run this
118:14 - and boom look at that it says all test
118:16 - pass in this case we have four tests
118:18 - I'll just say four or four and then
118:20 - we'll run this and we'll say hey all of
118:22 - the four tests passed so sometimes
118:24 - that's actually a really good way for
118:26 - you to actually write your code because
118:28 - okay you know what what your functions
118:31 - should return right so for example let's
118:33 - say we want to write a test for
118:35 - calculate food total before we even
118:38 - really write the code for it so I'll say
118:40 - test calculate food total and I'll do
118:44 - this and I'll just hit assert calculate
118:46 - uh when I call that function calculate
118:49 - food total yeah and isn't that what I
118:53 - called it oh okay I see I called it like
118:55 - this uh camel case so I'll just say
118:58 - calculate food total and this is really
119:01 - helpful because documentation just
119:03 - showed up from our code so the first
119:05 - argument is food so I'll just say hey
119:08 - the food amount is a float right it's
119:11 - telling us which is very helpful and it
119:13 - says the second argument human is tip
119:15 - percentage and that's an integer so
119:17 - that's also very helpful so I know okay
119:19 - 20 so if I have a hundred dollars and I
119:22 - have twenty percent tip the total amount
119:24 - should actually return 122
119:28 - um 120 okay so that's what it should
119:30 - return so let's go ahead and test
119:32 - calculate food total and I'll call this
119:35 - and let's run it and let's see if we get
119:37 - an error we did not get any error let's
119:39 - say if we said 125 boom now we get an
119:43 - assertion error so that's what's nice
119:45 - because you could write these tests and
119:48 - it gives you a very clear idea of how
119:50 - your function is going to look if there
119:51 - are any edge cases you'll be able to
119:53 - catch them right here for example what
119:55 - if we had a decimal percentages that
119:58 - people were giving it like would that
120:00 - still work and what would happen if they
120:01 - were giving this would that still work
120:03 - and what would what would the result of
120:05 - that be so you could test that you know
120:07 - you could test what if people give me
120:09 - you know a negative number because for
120:11 - your apps when you're making them for
120:12 - users you'll have to also write these
120:14 - tests right imagine somebody who's using
120:16 - Instagram right now well the developers
120:18 - have to test what if the user like hits
120:20 - the back button on certain case or like
120:22 - tries to delete somebody else's comment
120:24 - are they allowed to do that can somebody
120:27 - you know create a new comment are they
120:29 - allowed to do that is that working
120:31 - because what if all of a sudden they
120:32 - added a new feature but then that broke
120:34 - the ability to create comments they want
120:37 - to be able to catch that right away
120:39 - without you know with waiting for a
120:41 - really long time to find that out so
120:43 - they have all these test cases and then
120:45 - as soon as that function breaks or you
120:47 - do something where it doesn't work these
120:49 - test cases will actually catch it let's
120:51 - go ahead and do test calculate food
120:53 - total and so like imagine I went to my
120:56 - test calculate food total and I was like
120:57 - I'm just gonna like change around a
120:59 - couple of things and I'll try uh just
121:02 - doing divide divide by 100 I'm sure it
121:05 - won't make a difference let's go ahead
121:06 - and boom We like caught that there's an
121:08 - error right away that it doesn't work
121:10 - it's saying assertion error right it
121:13 - caught it right away
121:14 - so let's go ahead get rid of this let's
121:17 - run it and now boom you can see there
121:20 - are no assertion errors anymore and our
121:23 - problem is solved okay so this assert
121:25 - thing I really like using it it's very
121:28 - simple to use I love how simple python
121:30 - makes it so you know get in the habit of
121:33 - also testing your own code and this is a
121:36 - very light and easy way to do it and
121:38 - then later on if you ever want to write
121:40 - unit tests I have an example of unit
121:42 - tests here for you and I'm I've written
121:45 - some unit tests in here okay so uh
121:47 - that's that's the way to do it so far
121:49 - you're doing great let's keep on going
121:52 - all right now let's go forward and we're
121:55 - going to talk about probably one of my
121:56 - most favorite things that makes
121:58 - programming honestly programming and it
122:01 - is arrays okay a raise which in Python
122:06 - we actually call lists okay so if you
122:09 - hear arrays they're the same thing as
122:11 - lists okay so lists are one of my
122:14 - favorite thing things in just
122:15 - programming lists allow you to do a lot
122:17 - of stuff but let's just start off with
122:19 - simple things so let me ask you this
122:21 - question right so far if you want to
122:22 - hold multiple items in one variable how
122:25 - are you going to do that so let's say I
122:26 - want to give you like you know I want to
122:28 - say hold 10 numbers in one variable how
122:31 - are you going to do that you're you're
122:32 - not right because if you say x is equal
122:34 - to or you say numbers is equal to how
122:37 - are you going to hold 10 numbers because
122:39 - if you do 10 comma 10 well that won't
122:42 - work that won't do what you wanted to do
122:44 - you could try 10 10 10 10 but that also
122:48 - won't work because that's an error it's
122:49 - like okay what the heck is even that if
122:51 - you try to put them all together well
122:52 - that's just one big number that's not 10
122:55 - different numbers lists are amazing for
122:57 - that now where are lists used well if
122:59 - you've ever been to Netflix here's an
123:02 - example of an of a list here the list of
123:05 - users and for every user show the user
123:07 - so this is an example of a list and
123:10 - where it gets used if I go inside here
123:14 - all of this this is a list okay list of
123:17 - movies so it's the first movie this is
123:19 - the second movie third movie fourth
123:21 - movie fifth movie and multiple things
123:23 - are being stored without lists this
123:24 - would not be possible lists are erased
123:27 - it would not be possible
123:28 - I'm gonna create an array or a list of
123:31 - fruits and in this list I'm gonna have
123:34 - different fruits I'll have a cookie I
123:36 - mean that's not really a fruit I'll have
123:39 - an apple I'll have a pear I'll have a
123:44 - ice cream that's not a fruit what other
123:47 - fruits are there blueberry there we go
123:50 - I'll have a banana so I got a bunch of
123:54 - fruits here and yeah my my pie flakes is
123:58 - freaking out pie flakes is just really
123:59 - really just saying hey like it usually
124:01 - tells you about styling but it's
124:03 - freaking out here because I think it's
124:05 - like I don't understand this blueberry
124:07 - and this stuff is
124:09 - okay now I can print fruits so let's go
124:12 - ahead and run this okay it actually
124:14 - caught it correctly it said hey I don't
124:16 - know what this blueberries thing is so
124:18 - let's change the blueberries to an
124:21 - orange let's give this a try and let's
124:23 - see if it knows yes it looks like it
124:25 - knows you you don't have to use these
124:27 - emojis I just like to use these emojis
124:28 - because I'm sure you're bored with all
124:30 - the other boring programming tutorials
124:32 - and so this would make your life a
124:34 - little bit easier it's something more
124:35 - fun to look at than just numbers so here
124:38 - are my fruits that I have now here's the
124:40 - cool thing I'm going to show you a
124:42 - couple of things with lists so lists
124:44 - have different type of methods that you
124:46 - can use and if you ever hear me saying
124:48 - word like methods versus functions
124:50 - here's really what that means anything
124:52 - that I do like this if I do print or
124:56 - whatever that is a function okay this is
124:59 - an example of a function but anything I
125:01 - do that requires me to do a DOT so with
125:04 - with the list I'll probably show you
125:06 - like list dot uh list dot append
125:09 - if you ever do this dot a pen thing so
125:12 - append would be a method whereas print
125:15 - would be a function so just some
125:17 - terminology stuff that you know could be
125:19 - helpful for you so let's go ahead and
125:22 - print fruits and you know of course when
125:25 - I when I print fruits it shows me the
125:27 - fruits right over there and now I'll
125:29 - show you some methods that you could
125:31 - have so for example what if I wanted to
125:33 - add more fruits like let's say I want to
125:36 - add another orange well what I can
125:38 - actually do is I can say fruit dot
125:40 - append and I can append another orange
125:43 - and then let's go ahead and print fruits
125:45 - again so Watch What Happens look at the
125:48 - first array right this is before adding
125:51 - the orange and then look at the second
125:52 - array this was after adding the orange
125:55 - and now you can see that I've added that
125:57 - orange okay and it's a pen because
125:58 - you're adding to the end that's why it's
126:02 - a pent and there you go I got myself
126:04 - another orange and so you try a pending
126:08 - a strawberry and see if you could do
126:10 - that and if you can't if you don't have
126:12 - emojis just use the word strawberry so
126:14 - give that a try I'll give you five
126:15 - seconds five four three two one all
126:20 - right let's do it together so I'm gonna
126:21 - go ahead and I'm gonna say fruit start
126:23 - append and I'll put a strawberry here
126:25 - and then we'll print this out again
126:28 - let's run this and now I should see yes
126:32 - without this it's four items originally
126:34 - then I added the orange and then I added
126:38 - the strawberry and you can see all of
126:41 - them are actually added correctly how
126:44 - they're supposed to be added there you
126:46 - go that's your buzzword of the day a pen
126:50 - now let's look at indexing what if I
126:53 - want to get the zeroth item right there
126:56 - and maybe needing I want to get this
126:58 - apple what if I want to get that orange
127:00 - how will I get that orange out of that
127:02 - area so I can do print fruits right that
127:04 - I could do and I'll comment out uh some
127:07 - of these fruits right here actually
127:09 - let's leave it uncommented for now just
127:11 - like okay I can print out fruits but how
127:14 - do I get that specific fruit out of
127:16 - there well what I could actually do is
127:18 - something called indexing so if I show
127:21 - you a raise arrays have indices okay so
127:25 - the zeroth item is going to have the
127:28 - indices of zero meaning this apple here
127:31 - is going to have the indices of zero
127:34 - then the second item is going to have
127:36 - one because in programming numbers
127:38 - usually start from zero okay and then
127:41 - one instead of one and two so in this
127:44 - case we have the pair so one is going to
127:47 - be the pair then it is Orange right
127:50 - there so let's go ahead and give that a
127:53 - try now so I'm going to go ahead and do
127:55 - fruits of zero and let's run this and
127:59 - look at that I got my Apple okay I'll go
128:02 - ahead and comment out all this other
128:03 - stuff for now and let's look I got my
128:06 - Apple okay let's go ahead and see how we
128:10 - get our pair and you can see I got my
128:13 - pair let's go ahead and try fruits of
128:16 - two and I got my orange okay so I think
128:18 - you're getting the idea right now why
128:20 - don't you go ahead and try to get that
128:21 - banana I'll give you five seconds five
128:24 - four three two one all right so I hope
128:28 - that you figured out how to get the
128:30 - banana but it'll be very simple right
128:32 - we're just gonna do fruits of three and
128:35 - if I run this I should get back that
128:37 - banana right over there okay so so far
128:41 - so good I'm able to index it and get
128:44 - back things now here's a cool way to get
128:48 - the last item so it's like how do you
128:50 - get how to always get the last item in
128:54 - an array that might be a great question
128:56 - for you to think about okay maybe that's
128:58 - a problem you could try to solve
129:00 - one nice way we could always get the
129:04 - last item of an array is we could go
129:06 - backwards so python allows us to
129:09 - actually index backwards as well which I
129:11 - love because JavaScript and those things
129:13 - don't have that so it's like when you're
129:15 - working with lists my God it's annoying
129:17 - to not be able to go backwards so here's
129:20 - how we can do it instead of saying
129:21 - fruits of three I could actually go
129:23 - fruits of negative one and fruits of
129:26 - negative one you'll notice actually
129:28 - gives me this banana right over there
129:31 - and this means that even if I change the
129:34 - size of it meaning I keep appending
129:36 - let's say I keep appending fruits here
129:38 - okay and then let's comment out all
129:40 - these other ones so I'm changing the
129:42 - size of it and I'm appending like an
129:44 - orange and a strawberry so it needs to
129:46 - give me dynamically the strawberry let's
129:48 - see if it could do that I'll run this
129:50 - and boom look at that it actually gave
129:52 - me back a strawberry so it doesn't
129:54 - matter how many things I'm adding or not
129:56 - adding right it will figure out in its
130:00 - own way so comment this out now comment
130:02 - it out now let's say I add a cookie here
130:05 - and when I run this fruits of negative
130:07 - one is still going to get me to cook you
130:09 - okay so even though the size of this
130:10 - keeps changing this starts from right to
130:15 - left whereas this starts from left to
130:17 - right okay so right to left so negative
130:19 - one okay in other words this will be
130:22 - negative one and like I'll zoom in so
130:24 - you can see it better that'll be
130:26 - negative one that'll be negative two
130:28 - that'll be negative three okay but if
130:30 - you if you're going this is if you're
130:32 - going right to left
130:35 - okay but if you're going left to right
130:37 - then this will be zero and this will be
130:40 - one okay and then this will be two this
130:43 - will be three and this will be four and
130:45 - I think you get the idea okay so in my
130:48 - opinion it's much nicer in or uh in
130:52 - Python and way easier to be able to get
130:54 - like the last item of an array and the
130:57 - first item of an array so that's how uh
131:00 - this method append works and that's how
131:03 - uh indexing works and you can actually
131:05 - like pull values out of an array now the
131:10 - other thing I want to show you when it
131:11 - comes to arrays is something called
131:13 - slicing so this is a very valuable thing
131:16 - to learn so I'll say so it says slicing
131:19 - when you have slicing in an array that
131:22 - means what if I want a chunk of this
131:25 - array from here to here or what if I
131:27 - want just these three elements from an
131:30 - array so how do I slice this array
131:34 - earlier I gave give you an example of
131:36 - Netflix right if we go back to Netflix
131:39 - say all of these movies every single one
131:42 - is in some big giant array but I just
131:46 - want to slice and give you in this in
131:49 - this list right I just want to slice and
131:51 - give you every trending now movie so
131:54 - maybe I'll go through that let's say
131:56 - like every single movies in this giant
131:58 - list every single movie well I might
132:01 - want to slice it and just get you the
132:04 - trending movies
132:06 - or I might just want to slice it from
132:08 - here to here and get you you know
132:11 - award-winning shows or what or yeah
132:14 - right so for example boom boom like if I
132:18 - don't want to get you everything so
132:20 - that's worth slicing can come in and
132:23 - actually help us all right so if I go
132:25 - here and I go fruits of zero through two
132:30 - let's see what happens so I'll go ahead
132:33 - and print this and then let's comment
132:35 - this out and let's run this okay and you
132:37 - could see that I got two fruits so I
132:40 - went from zero to two now it goes up two
132:44 - but not until okay so it's like the
132:48 - first one you know first argue first one
132:51 - is inclusive and the second number uh is
132:55 - exclusive second exclusive so kind of
132:59 - annoying I understand but it stops right
133:01 - before two meaning that if you did zero
133:03 - through two what it would really get you
133:05 - is 0 and 1. okay so that's what it's
133:09 - going to get used to two now if I did
133:12 - zero three zero through three it'll get
133:14 - me this now go ahead and get me all the
133:18 - fruits but not including the cookie
133:21 - because that's not a fruit so get me
133:22 - from here to here what are you gonna how
133:24 - are you gonna do this so print that out
133:25 - right here give that a try so five four
133:30 - three two one so how we would do that it
133:34 - would be very simple I'll just say zero
133:36 - through four and let's run this and that
133:40 - gets me all the way up until there
133:42 - except for the cookie all right now
133:44 - another thing that's very valuable is I
133:47 - want to always know at any given time
133:49 - what's the length of my array so that's
133:51 - something you very commonly have to find
133:54 - out whenever you're working with a raise
133:57 - so in Python there's something called
133:59 - Len and when I call it you can see it's
134:02 - a built-in function that comes with
134:03 - python and so say I have this this
134:06 - fruits array so I'll just copy this and
134:08 - I'll say fruits is equal to that okay so
134:10 - I'm doing it in the console just so it's
134:12 - easier for you to follow along and you
134:14 - could interactively do that too and now
134:17 - I could actually go ahead and say Len of
134:20 - fruits like this so watch what happens
134:23 - when I run this it's going to go ahead
134:25 - and tell me that the length of this
134:27 - array is four okay so length is a very
134:31 - important function it will allow you to
134:34 - you know always get the full length of
134:37 - the array so if I asked you hey create a
134:40 - function that can like you know always
134:42 - get from the start all the way to the
134:45 - second last item so basically regardless
134:48 - of the size of the array it gets from
134:51 - the start to the second last but then
134:53 - doesn't get the last one right how would
134:55 - you do that well you'll need to actually
134:57 - know the length of the array so then
134:59 - what you could say is hey go from zero
135:01 - to the length of the array minus one
135:05 - okay so you could go hey go from zero
135:08 - right here
135:09 - right there to the length of the array
135:12 - minus one
135:14 - okay so in other words I could say print
135:17 - fruits from zero to land of fruits
135:22 - minus one because this is going to be 4
135:25 - minus one is going to be
135:27 - three let's go ahead and give that a try
135:30 - and there you go that worked it didn't
135:33 - get me the cookie so if I comment these
135:36 - out as well
135:37 - and I run this you can see it works it
135:40 - doesn't get me to cookie so it goes from
135:42 - the start all the way to the second last
135:44 - at the end so slicing is a very valuable
135:47 - thing and what's really cool about
135:49 - slicing is you could also slice strings
135:53 - as well so if I have a string like this
135:55 - even though we're not talking about
135:56 - strings but slicing is like an array
135:58 - method or a list method it could still
136:01 - be valuable for this so if I have a
136:04 - string like hi my name is
136:08 - cozy okay I can
136:11 - slice this and go zero to ten and if I
136:16 - run this
136:17 - it'll get me the first 10 characters
136:19 - right hi my name is whatever if I go 20
136:23 - it will get me the did I nail it like no
136:26 - I didn't okay good it's freaking out so
136:30 - if you go above the maximum amount it'll
136:32 - just max out so you could go zero
136:34 - through eighteen that'll give you the
136:35 - whole thing so you could slice this too
136:37 - what if I wanted this last character
136:40 - right there where it says I what if I
136:43 - wanted that
136:44 - well I could just go and go ahead and go
136:47 - negative one here now one other thing I
136:49 - want to show you with the raise that's
136:51 - very nice is how you can actually
136:53 - reverse it in a really easy way
136:55 - so I go here and this is something also
136:59 - new as well so if I go ahead and print
137:02 - uh fruits right and let's go ahead and
137:05 - comment this out and comment this out so
137:07 - if I go ahead and print out fruits and I
137:09 - go give me zero through let's say a five
137:12 - and I run this it'll get me every single
137:15 - fruit right and obviously this is part
137:18 - of the fruit too apparently cookie is a
137:20 - fruit I bet you didn't know that
137:22 - so if it does that
137:25 - um I can I can also reverse it so I'll
137:27 - show you something cool so there's also
137:29 - a step so this says
137:32 - the first zero right so if I was to make
137:36 - this out so I have this I have I have
137:38 - this right and I have zero
137:42 - excuse my bad handwriting colon five
137:46 - whoops colon one
137:49 - so one when I have this
137:51 - right this means
137:54 - from
137:55 - okay let's go make that bigger this over
137:59 - here means two
138:02 - let's make that bigger too
138:04 - okay and then this over here
138:07 - means step
138:10 - so step by just like step by one by one
138:13 - character which is the default okay so
138:17 - if I run this now you should just get
138:19 - fruits this regular array but what if I
138:22 - wanted to skip and get you every other
138:24 - fruit meaning I wanted to get you apple
138:26 - and I want to get you an orange and the
138:28 - cookie but nothing in between well I
138:30 - could actually step by two and I could
138:33 - do that okay and I could get boom like
138:36 - I'm so you see how I'm like skipping
138:38 - over every single two now what I can
138:41 - also do is I can go backwards as well so
138:44 - I can this allows me to step forward and
138:47 - if I go negative one this allows me to
138:49 - step backwards so if I run this now
138:53 - um I'll I'll I can't have this be zero
138:56 - colon five okay because the from and two
138:59 - are reversed
139:00 - so the trick here is if you don't
139:04 - specify this at all and you don't
139:07 - specify this at all you just do colon
139:09 - colon you can actually do colon colon
139:11 - negative one and this will actually
139:13 - reverse reverse the array and you could
139:17 - actually reverse strings like this as
139:19 - well with that same technique so if I
139:21 - change that to negative one here
139:24 - it'll go backwards instead of you know
139:28 - if I change that to positive one that'll
139:30 - go forwards
139:31 - okay so arrays our lists have a lot of
139:34 - tricky methods and you know and
139:36 - functions you can call on it and you
139:39 - know the slicing business but it's very
139:42 - valuable for you to learn because it's
139:43 - going to be super super helpful as we
139:45 - start to get to the later projects
139:47 - because you're going to need all of this
139:48 - stuff you know when we're doing bigger
139:50 - projects or if we're building a game or
139:52 - anything like that now some other stuff
139:54 - that's actually helpful for you to know
139:56 - as well with lists is that list could
139:59 - hold different types of data types so
140:01 - for example I could have numbers and
140:04 - strings in here so I could say hi and I
140:07 - could have a float like 8.5 I could have
140:10 - integers hell I could have other arrays
140:13 - inside of it or other lists inside of it
140:15 - like another list of numbers so I could
140:17 - have all kinds of stuff inside of a list
140:21 - lists are cool with it lists don't have
140:24 - any problem with that so you can see
140:26 - that's the output right when you run it
140:28 - you should get this see I was able to
140:30 - reverse that list as well so yeah you
140:33 - can I'm just used to saying array my bad
140:35 - list so yeah you can always you list can
140:39 - hold any type of data type I think
140:41 - that's a helpful thing for you to know
140:43 - and then there are a lot of other
140:44 - methods that lists have we won't go into
140:47 - all of them today but I left you with
140:51 - some of them like an append method right
140:54 - and just kind of different functionality
140:56 - you could do with it you could call Len
140:57 - on it and get the length of the list you
141:00 - could call you know you could slice it
141:03 - so I wanted to just give you certain
141:05 - pieces that would be valuable so you can
141:08 - see right here right there's tons of
141:10 - different methods append is one of the
141:13 - ones I showed you there's insert which
141:15 - allows you to insert an item into the
141:19 - list anywhere there's clear which will
141:21 - clear all the items in a list there is
141:24 - count the count items and things of that
141:27 - nature you have removed so you can
141:30 - remove items from a list sort allows you
141:33 - to sort the list reverse allows you to
141:36 - reverse the list yeah pop will allow you
141:39 - to basically remove the last element of
141:42 - the list and then return a new list
141:44 - which is pretty interesting it has
141:47 - really nice use cases and then of course
141:49 - index as well so if you put a cookie
141:52 - it'll tell you what the index of that
141:54 - cookie is or the you know banana what's
141:57 - the index where is that specifically
141:59 - located so there's a ton of different
142:02 - methods I just wanted to show you a few
142:05 - of them and with that said we're gonna
142:07 - move on and we're gonna start learning
142:09 - about something really fun called
142:11 - dictionaries and python let's get to it
142:14 - all right now let's move on and talk
142:17 - about dictionaries so I will comment
142:20 - this out dictionary is a very powerful
142:22 - concept inside of python let's start
142:25 - with visual examples and now make our
142:27 - life a lot easier
142:30 - all right so say we have this person
142:31 - here which is me hi I'm qazi and we have
142:35 - this person and the person name is qazi
142:39 - and person's shirt is black right this
142:43 - is the shirt that we're wearing so in
142:45 - Python so we're going to represent this
142:47 - with a dictionary so if you just look at
142:49 - it by example you'll kind of get it very
142:51 - quickly so first thing I'm going to do
142:53 - is I'm just going to say person and then
142:56 - whenever you're creating a dictionary
142:57 - you're gonna create these curly braces
143:00 - okay all right and they have something
143:02 - we call key value pairs so for example
143:07 - if we're looking at this guy right over
143:09 - here
143:10 - this part right here would be what we
143:14 - call a key and then this part right over
143:18 - here is what we would call a value okay
143:23 - so that's what that means key values
143:24 - it's like if I try to get that person's
143:27 - shirt I get the value black back okay
143:30 - and if I try to get this person's name I
143:33 - get the value cozy back let's go and
143:36 - leave that there so you could see it and
143:38 - now we're going to go ahead and we're
143:39 - gonna say okay so it's basically in a
143:41 - key value format so the first key we
143:44 - have
143:45 - in this case
143:47 - is our name so I'm going to say name and
143:51 - let's put it in quotes like this
143:53 - and then the value is cozy okay so
143:57 - that's key this is key number one so
144:00 - this right here
144:02 - now already matches that okay so I can
144:06 - go ahead and say person and I can say
144:09 - person show me the person's name and we
144:12 - can print this and now I'll run this and
144:15 - you can see in the console I just got
144:17 - back cozy how did I just get back cozy
144:20 - by doing this okay so whenever you do
144:22 - this you call your dictionary and then
144:25 - you give it which key you're looking for
144:27 - and in this case we're looking for this
144:29 - name key then it's going to spit back
144:31 - out the value now if you want to add
144:34 - another key to this another key value
144:37 - pair so basically if we want to add the
144:39 - information about the shirt we just put
144:40 - a comma here and then now we can say
144:43 - shirt is black and now why don't you go
144:47 - ahead and print out the shirt and it's
144:50 - going to be in the same format right
144:52 - over here okay exactly the same you're
144:54 - just going to replace this here instead
144:56 - of name you're going to put in something
144:58 - else and then run it and see if you can
145:01 - get this color black back so I'll give
145:04 - you five seconds five four three two one
145:09 - so go ahead and pause it and try it and
145:12 - if you've already done it great job and
145:14 - let's do it together if you if you
145:15 - didn't get it no worries we'll just do
145:17 - this together right now I'm gonna say
145:19 - person and I'm just gonna go ahead and
145:21 - say shirt and this right here should
145:25 - spit back out black okay so let's go
145:28 - ahead and run that so you can see cozy
145:30 - and then we get the shirt color back
145:32 - black so both of this is working now
145:35 - what I want you to do is add another key
145:38 - value pair see if you can add another
145:40 - key that says laptop is an apple okay so
145:44 - this is your task right now so it should
145:46 - be the laptop is Apple okay so Apple
145:51 - should be the value and laptop should be
145:54 - the key so give that a shot and see if
145:56 - you can add another key value pair in
145:57 - here I'll give you five seconds to pause
145:59 - five four three two one one all right
146:04 - so let's go ahead and give that a try
146:07 - now so I'm gonna go ahead and say comma
146:11 - and I'm just going to say laptop is
146:15 - an apple and now we can go ahead and
146:18 - print that out as well I can say laptop
146:21 - is an apple okay boom there we go now
146:24 - normally when people are writing
146:26 - dictionaries most of the times how they
146:28 - make it look and if you're coming from
146:29 - another language this is an object or a
146:32 - map so if you're coming from Java or
146:34 - JavaScript you know it's called an
146:36 - object there just like lists are called
146:39 - arrays so this is how it'll normally
146:41 - look because sometimes if you're making
146:43 - it run really long it can look confusing
146:45 - so how we like to do it is like this
146:49 - each key value pair represented on its
146:53 - own line and then open close like this
146:56 - so it's very stylistic and it looks good
146:58 - so styling your code is a thing in
147:01 - coding and if you can make your code
147:04 - look nicer then that's great okay so
147:07 - people are going to love you for and
147:09 - other developers are going to love you
147:10 - for it so like reading this you know
147:12 - wouldn't you agree that this is reading
147:14 - this is much easier like okay key value
147:16 - key value key value then reading this
147:20 - right that that looks much more
147:23 - confusing
147:24 - so that's why we like to do it like this
147:25 - and this should still run if I run it I
147:28 - still get all my all of my stuff here is
147:31 - getting printed out so there you go now
147:34 - what we can do is we can create a
147:36 - function that you know that takes this
147:40 - information and then maybe just gives
147:42 - you a little greeting okay so like this
147:45 - is like our Advanced greeting thing okay
147:48 - or just maybe introduces who this person
147:51 - is so let's let's create this function
147:53 - and I'm going to say Define and we will
147:56 - call this introducer and what the
147:59 - introducer will do is let's say we just
148:02 - put this person into our introducer and
148:05 - then it's going to go ahead and say hi
148:07 - my name is blank my shirt I am wearing a
148:14 - black shirt oh not black but like a
148:18 - blank shirt and
148:20 - the laptop I use to code
148:24 - is n blank okay so we'll put some emojis
148:27 - to make it fun so this is going to be
148:29 - the high part
148:31 - it's going to be the shirt part
148:34 - and this is going to be
148:37 - there we go so now if I run introducer
148:41 - and I say print introducer oops I get an
148:45 - error and this person is not defined
148:47 - introducer oh yeah I got a call
148:49 - introducer like this my bad okay and
148:52 - then also let's comment all of this out
148:53 - because that's what's complaining
148:55 - because we just took the definition of
148:56 - person away from there and you could see
148:59 - okay and we don't need uh the print
149:02 - statement there for now you can see it
149:04 - says hi my name is blank I'm wearing a
149:07 - blank shirt and the laptop I use to code
149:10 - is n blank okay is a if you're you know
149:15 - isn't Microsoft or is an apple all right
149:18 - and so now instead of these blanks we're
149:22 - going to actually put in these specific
149:24 - values so the way to do that is put a f
149:26 - here so this enables string formatting
149:28 - and then I'm going to basically say here
149:30 - name and here we can go ahead and say
149:35 - shirt and then here we can go ahead and
149:38 - say laptop but this won't work right why
149:43 - will this not work because we don't have
149:45 - access to actual name and shirt and
149:47 - laptop variables if I run this I'm going
149:49 - to get an error well we do have access
149:51 - is person so remember we gotta actually
149:53 - call it like this so replace this name
149:57 - here with this so give that a try and
149:59 - see if you can actually make that happen
150:00 - I'll give you five seconds here to give
150:03 - it a try or pause the video five four
150:05 - three two one
150:07 - okay now let's do it together I'm going
150:10 - to say person and then we'll say name
150:12 - just like that and then we're going to
150:14 - say person and we'll say shirt just like
150:17 - that and then here we'll say person and
150:20 - then we'll say laptop just like that now
150:23 - let's run it okay what's the error that
150:25 - we're having here it's complaining about
150:28 - invalid syntax so let's see okay so the
150:31 - problem that it's actually having is if
150:34 - you look here it says Hey person is not
150:36 - defined so the problem that we're having
150:38 - facing here is we haven't put this print
150:42 - inside of our introducer function so
150:44 - that's where I'm having an error so
150:45 - let's go back and hit enter and enter
150:48 - and now it's actually inside of this
150:51 - introducer okay so it's indented right
150:53 - here so now let's go ahead and run
150:55 - introducer all right so this syntax
150:58 - error is basically complaining because
150:59 - we have single quotes here but then like
151:03 - also single quotes here so what's
151:06 - actually happening is that this single
151:08 - quote is looking for another single
151:09 - quote to end so when it sees this it
151:12 - goes oh that's the string and so it
151:15 - thinks this is it because it's looking
151:17 - for the last one and then it wants to
151:19 - end it here so what we need to do is
151:22 - leave either this as single quotes and
151:24 - then double quote all of these or do it
151:28 - the other way meaning make this double
151:32 - quote and then leave everything else
151:34 - single quote and that would solve the
151:35 - problem so let's go ahead and just make
151:38 - these double quotes because that's much
151:39 - easier to do I'll make this double quote
151:42 - right here and run this and there we go
151:44 - I see hi my name is qazi I'm wearing a
151:47 - black shirt and the laptop I used to
151:50 - code is an apple okay there we go so our
151:52 - introducer function now works uh pretty
151:57 - correctly now we can even go further and
152:00 - add this person's
152:01 - you know let's add let's add assets so
152:05 - let's say that qazi is you know has
152:08 - about a hundred dollars in his bank
152:09 - account okay so assets and then for debt
152:12 - we'll say let's say Kazi has fifty
152:14 - dollars worth of debt and then what we
152:16 - want to do is
152:18 - so now we have assets and debt so that's
152:20 - that's cool we added that but what if I
152:23 - wanted to add something that could
152:25 - actually automatically calculate kazi's
152:27 - net worth so if I did net worth now
152:31 - there's no way to actually set assets
152:33 - minus debt here because these when we're
152:37 - creating this these aren't defined yet
152:39 - so if I run this this wouldn't do any
152:40 - it'll be like wait I don't understand
152:41 - what assets or what debt is so here we
152:45 - want to create a function
152:47 - that can call so essentially like
152:49 - imagine I had a function right imagine
152:52 - at a function you know we'll just we'll
152:54 - call it uh net worth and then I did
152:59 - and I said hey grab the this person
153:02 - object
153:04 - okay or this person dictionary
153:07 - and then basically do
153:09 - grab their assets and then subtract that
153:13 - by their debt okay and then return this
153:17 - that's the so like if we want to create
153:19 - this well there's something really cool
153:21 - that you could do inside of dictionaries
153:23 - as well you could actually create
153:24 - functions inside of dictionaries so in
153:27 - other words you're kind of creating a
153:30 - method because you're gonna have to use
153:31 - a DOT something but yeah so it's just
153:35 - kind of it's a really cool hacky thing
153:37 - that you know it's a little bit Advanced
153:40 - so I I don't imagine you're going to be
153:41 - using this right away but in the future
153:44 - this is something you could use so I
153:45 - would I would say just have this up your
153:47 - sleeve Right In Your Arsenal so check
153:50 - this out right this is pretty cool so
153:51 - what I can say is I can actually create
153:53 - a function here now I can't create a
153:55 - function like this because whenever
153:57 - you're doing def you have to Define you
153:59 - have to create that function on its own
154:00 - line it can't be it can't already have
154:03 - stuff behind it and then you could do
154:04 - def it won't work so remember how we can
154:07 - create inline functions our friend it
154:10 - starts with an L see if you could
154:12 - remember that yes that's right our
154:14 - friend Lambda this is where our friend
154:15 - Lambda comes in so I'm going to create a
154:17 - function on the Fly here an anonymous
154:19 - function we don't need to give it a name
154:21 - because I mean I guess in this case in
154:23 - case the name would be net worth and
154:26 - what I want to do here is I want to say
154:28 - essentially this and I don't even need
154:31 - to write a return because remember lamb
154:33 - does have an implicit return so net
154:36 - worth is a function that does this so
154:43 - now I can actually say and let's
154:46 - continue this right and my net worth is
154:50 - and here's how I have to call this
154:52 - function okay so this is an interesting
154:54 - part so I'm just going to show you
154:56 - separately here first so if I want to
154:57 - call that function this one right here I
155:00 - gotta say person net worth and that'll
155:04 - get me access to the function but
155:05 - anytime I have to call a function
155:07 - remember I got an open close parentheses
155:09 - after that and that will actually call
155:12 - this guy right over here so I'm gonna
155:15 - just cut this because I know I'm gonna
155:17 - need this and my net worth is and here
155:21 - we're going to go ahead and pop that in
155:23 - and then we're going to run our
155:25 - introducer function so let's run this
155:27 - and there we go it says hi my name is
155:30 - qazi I'm wearing a black shirt and the
155:32 - laptop I used to code is an apple and my
155:34 - net worth is 50. and then if you want to
155:37 - make it look prettier put it you could
155:39 - put a dollar sign here you could say USD
155:41 - here or whatever your currency is of
155:44 - currency of choice and then you could
155:46 - put you know a money bag emoji here
155:50 - right and now when I run this boom I
155:54 - could also put all of this on a new line
155:56 - so every single thing starts on a new
155:58 - line right boom boom new line new line
156:00 - and now it reads like this
156:03 - it looks a little bit cleaner so it goes
156:07 - let's run this it goes right hi my name
156:09 - is qazi I'm wearing a black shirt and
156:11 - the laptop is the code is an apple and
156:13 - my net worth is fifty dollars
156:15 - okay that's just to make it look
156:17 - slightly pretty well there's a lot of
156:19 - stuff you could do with dictionaries
156:20 - including you could put functions in
156:23 - there as values uh you could have you
156:25 - know you could have fruits in here so
156:28 - you know or maybe I could say favorite
156:30 - fruits
156:32 - right and I can actually go ahead and
156:34 - put all my favorite fruits so let's say
156:36 - I love I don't really love apples but
156:39 - that's fine I do like bananas so let's
156:41 - actually put an orange here and so you
156:43 - can see that it could even hold an array
156:46 - right as long as you call a favorite
156:48 - fruits so I'll go ahead and say
156:52 - my favorite favorite fruits are
156:56 - and then I'm gonna go ahead and say
156:57 - person
156:59 - and then we're gonna put
157:01 - favorite fruits okay let's run this okay
157:05 - invalid syntax so let's just fix
157:07 - whatever error we got
157:10 - so it's saying we're having ah because
157:12 - we probably didn't put a comma here
157:14 - right comma here and then let's run this
157:17 - and there we go hi my name is qazi I'm
157:20 - Moringa black shirt the laptop I use to
157:23 - code is an apple my net worth is 50 USD
157:26 - my favorite fruits are the following
157:29 - yeah there's many different ways to do
157:31 - this these are some of the ways that I
157:34 - like to use my dictionaries you know you
157:36 - could you could hold so much information
157:37 - in here and like for example a phone
157:40 - number would be a great thing to put in
157:42 - here so for example a what's your phone
157:46 - right so whenever you think of a CRM
157:49 - think about your iPhone all right so you
157:52 - have your iPhone right and now this
157:54 - iPhone that you have stores all kinds of
157:57 - information so it's like you have a
158:00 - contact by the name of qazi and then
158:02 - you'll have their phone number
158:05 - and then you'll have their you know
158:07 - maybe their address you know their their
158:10 - first name their last name and uh yeah
158:13 - all of that information that's actually
158:15 - being stored on the back and it's
158:18 - actually being stored as a dictionary
158:19 - all of that okay because hey here's a
158:24 - here's the thing here's what's actually
158:26 - being stored in it and dictionaries are
158:28 - perfect for that because what you do
158:31 - right is you don't necessarily no con no
158:35 - my phone number or most people's phone
158:37 - numbers on your phone but if you
158:39 - actually just type in quasi it gives you
158:42 - that entire object okay that has all the
158:45 - information like kazi's phone number
158:48 - kazi's address gives you all of that so
158:50 - think of it like it's a key value pair
158:52 - so you search for qazi and boom you get
158:55 - all the things you need so that's why
158:58 - it's very valuable and it's it's very
159:00 - helpful and you know you could think of
159:02 - Google search like that too where you
159:05 - search a thing and then Google shows you
159:08 - some results so this here is an example
159:11 - of a key value pair so I just typed in
159:13 - Marathon right I'm getting all of these
159:15 - Keys essentially and so imagine the
159:20 - search term is a key okay so search term
159:24 - is our key in this case and then all the
159:28 - results that we get back
159:30 - think of that as the value so think of
159:33 - that as a big giant array that we get
159:36 - back we have Marathon Staffing that's
159:39 - the key and then the value is this array
159:42 - of like results so it's like it'll show
159:44 - us you know website one website to
159:48 - website
159:50 - three website four
159:52 - Etc you get the idea right so those are
159:56 - already stored inside of Google's
159:59 - database and it's literally like a key
160:02 - value pair so now I've actually click
160:03 - Staffing Marathon Staffing and I'm going
160:06 - to get all these results
160:08 - right here
160:09 - and it's telling me okay this is these
160:12 - are all the websites that I get so key
160:14 - value pairs are
160:16 - pretty much everywhere and everything
160:18 - that you do you know and like you could
160:20 - store a phone number and phone numbers
160:22 - are generally stored as a string so I
160:25 - could say one two three three four five
160:27 - six right there we go so there we go
160:31 - right so put a comma here and now you
160:34 - could get this person's phone number as
160:36 - well okay so this is a good introduction
160:40 - to an object or a dictionary a few
160:45 - important things for you to know as in
160:47 - the differences between let's say lists
160:51 - and Python and dictionaries is when
160:53 - you're trying to get an item out of a
160:55 - list you use this index so you go hey
160:58 - get me the fruit from position zero
161:00 - right here we go
161:03 - and we get this item so let's say I want
161:05 - to get this item right here I'm going to
161:07 - go ahead and get this item with this
161:09 - index and the index here is zero right
161:11 - so
161:13 - zero one two three Etc that's how that
161:18 - those are the names of those right
161:20 - that's how I get access to them and
161:22 - there's actually something really nice
161:23 - you could do with dictionaries it's
161:24 - called um dot value so I'll give you an
161:27 - example so I'll say print person dot
161:30 - value so there's some like methods as
161:33 - well that dictionaries have they're
161:34 - really nice so if I do this I'll get
161:36 - access to all of the values let me
161:39 - comment out that function that just
161:42 - makes it look a little confusing so I'm
161:44 - going to comment out the function for a
161:46 - second and I will remove the net worth
161:49 - call from here for just a second you
161:50 - don't need to follow along with that and
161:53 - here I have my values right these are
161:56 - all my addict values which is I have uh
161:59 - you know cozy black apple boom boom so
162:03 - these are all the values likewise I can
162:05 - also get all of the keys so this is
162:07 - another important method to remember
162:09 - about dictionaries so all my keys are
162:12 - like name shirt laptop phone number
162:14 - assets that favorite fruits so I'm
162:16 - looking at the values here and if I was
162:19 - just to look at the values so let's go
162:21 - ahead and
162:23 - print it out and I'm just going to call
162:25 - list on it so it literally looks like a
162:27 - list like a pure good old list right
162:30 - right there and if we looked at this
162:33 - well the value of cozy in a list would
162:36 - be zero but in a dictionary or sorry not
162:39 - the value but like the index or the
162:42 - location of this isn't like zero in this
162:45 - case it would be name and if I do name
162:48 - I'll get access to it here in order to
162:50 - get access to this I will put in color
162:53 - instead of one so in a in a list you
162:57 - would do zero and you would do one in an
163:01 - object in a dictionary you don't do that
163:03 - you just put their keys so that's kind
163:07 - of the nicer part about it now some
163:10 - other things that are that are not going
163:12 - to be crazy vital to you right now but
163:14 - some information that is useful for you
163:16 - to know about dictionaries versus lists
163:18 - is lit lists are ordered okay so they
163:22 - fall follow a specific order
163:24 - dictionaries are not ordered starting in
163:28 - Python 3.8 plus anything that's 3.8 and
163:32 - moving forward dictionaries are ordered
163:36 - and it is a built-in thing that comes
163:39 - into uh python most other language
163:42 - languages objects are never ordered and
163:45 - uh the in dictionaries in Python used to
163:47 - not be ordered but it is so cool I'm
163:49 - like actually nerding out over and I'm
163:51 - so excited there are definitely ordered
163:54 - now so I can give you like a quick
163:56 - example so let's just make things and
163:59 - we'll say health points of this fighter
164:02 - or whatever is you know 100 and maybe
164:05 - the name of this user is uh quasi so I
164:09 - can Define oh let me put uh quotes
164:11 - around this all right I have I have
164:14 - things here okay now what I can do is I
164:17 - could go things and I could actually
164:18 - just reverse it so I could I could call
164:21 - reversed on this
164:23 - and let's go ahead and call list here
164:26 - and do this and when I call it you could
164:29 - see that name and health are now
164:31 - reversed the order of insertion was held
164:33 - first and named second right and now
164:36 - when it reverse this it just gives me
164:38 - this okay if I do list things it goes
164:42 - Health common name so yeah I mean this
164:46 - is so cool the order is kept and why I
164:49 - really like this is like when you get to
164:51 - the more advanced Parts later on and and
164:53 - you know when we're coding you're going
164:55 - to get to these parts where you know if
164:57 - we have to sort data we'll usually have
165:01 - to take it out of a dictionary put it
165:02 - into an array and then like do some
165:04 - jiggery pokery with it because arrays
165:06 - are the only things that keep order or
165:07 - lists are the only things that keep
165:08 - order but like man this is so nice so
165:11 - it's going to make your life a lot
165:12 - smoother
165:13 - yeah dictionaries are now honestly
165:16 - probably one of my most favorite things
165:17 - I want to use them even more so it's
165:19 - like you get the benefits of a list plus
165:21 - a dictionary so I'm excited
165:25 - um as you can tell so yeah huge update
165:27 - and uh thought you guys should know that
165:29 - yeah this is massive
165:32 - and then one other thing before we go on
165:34 - to the next data types for you to learn
165:36 - inside of python lists and dictionaries
165:40 - lists and dictionaries are mutable so
165:43 - these are mutable and mutable just means
165:47 - changeable okay so you could change it
165:50 - you could change the values you could
165:51 - delete the values you could update the
165:54 - value so that's another thing that I I
165:57 - think is going to be actually important
165:58 - to show you is in a dictionary how to
166:01 - update the value of a certain key value
166:04 - pair because I've shown you how to get a
166:08 - key value right how to get the shirt or
166:10 - how to get certain things but I'm now
166:13 - going to show you I'm just going to put
166:14 - the net worth back here real quick boom
166:17 - there you go let's just run it let's
166:19 - make sure our net worth is coming out
166:20 - fine oh yeah and let's comment this yep
166:24 - and then let's uncomment this sound for
166:26 - now so I showed you right but now I have
166:29 - to show you how to assign an update
166:32 - values so let's say that we Define
166:36 - qazi's shirt as black here but maybe
166:38 - today is a new day and cause he decided
166:41 - to change his shirt thank God no more
166:44 - smelly cozy we're gonna go ahead and say
166:46 - shirt and I'm gonna go ahead and change
166:49 - the shirt color to Blue okay if I
166:53 - actually do that okay or maybe let's
166:56 - make it orange so there's every letter
166:58 - is different not because blue is B and L
167:00 - and it could look similar so let's go
167:02 - ahead and send my shirt color I change
167:04 - it to Orange so let's run this and now
167:06 - you could see here that it says kanji's
167:09 - wearing an orange shirt even though we
167:11 - started it off as a black shirt so using
167:14 - that you could update a user's you know
167:16 - their laptop you can update their phone
167:19 - number you could update their assets you
167:21 - could update their favorite fruits
167:24 - Etc so now I want you to go ahead and
167:26 - give this a try try changing let's say
167:30 - the assets to a thousand dollars a
167:33 - thousand essentially okay so give that a
167:35 - try right underneath here it'll be very
167:37 - similar to this but the key you'll have
167:39 - is assets and then you'll choose a value
167:42 - of one thousand so I'll give you five
167:44 - seconds here five four three two one
167:48 - let's do it together and I'm gonna grab
167:51 - assets and I will change assets to one
167:54 - thousand okay let's run this and you can
167:58 - see my net worth is now nine hundred and
168:01 - fifty dollars right because a thousand
168:03 - dollars minus fifty dollars should get
168:06 - you nine hundred and fifty dollars
168:08 - so in terms of dictionaries I think this
168:10 - is good now let's move on to other data
168:13 - types all right so now let's go ahead
168:14 - comment out introducer so when you run
168:17 - your code you should see nothing
168:19 - essentially okay and let's go down here
168:22 - and we'll talk about tuples okay that's
168:25 - another data type inside of python and
168:29 - they're just like anything you put in
168:31 - these parents okay so for example a
168:34 - tuple just looks like parents I'll I'll
168:36 - put it right next to it so you could see
168:38 - for example if I had numbers and I said
168:42 - one comma two okay now this is a tuple I
168:45 - can print it out print numbers okay so
168:49 - let's run this and boom and now I can
168:52 - also print out their data type so I
168:54 - could say print type numbers okay just
168:57 - like that now I could see that it's it's
169:00 - type Tuple class is Tuple now one thing
169:02 - I can't do is tuples are immutable
169:06 - meaning you cannot change change their
169:10 - data at all so I can still get access so
169:14 - I could go numbers of zero and they'll
169:17 - still get me that should get me one so
169:19 - there we go so I got the first item from
169:22 - that Tuple right so I can I can index it
169:24 - but I can't actually go I can't go
169:27 - numbers of zero to ten like this is
169:30 - something you could actually do in a
169:32 - list we are not going to be able to
169:33 - change it so let's try running this and
169:35 - we get an error and the error basically
169:37 - says Tuple object does not support item
169:42 - assignment all that means is you can't
169:45 - update items inside of tuples okay now
169:49 - tuples are used in Python quite often
169:53 - and they usually represent things that
169:55 - you can't change and so you'll
169:57 - oftentimes see these array of tuples of
170:01 - maybe like key value Pairs and that just
170:03 - represents hey these are two things that
170:05 - you can't and should not change anyway
170:08 - so this is helpful when you're dealing
170:10 - with data that needs to be secure and
170:12 - data that throughout your app when
170:15 - you're building you shouldn't really
170:16 - change honestly as far as tuples are
170:19 - concerned that's all kind of you what
170:21 - you really need to know there are some
170:22 - other stuff we could do with it later
170:24 - but let's not go too much more into
170:26 - detail on tuples let's move on to the
170:29 - next data set that is one of my
170:31 - favorites and it exists in Python let's
170:33 - go
170:33 - all right now let's move on to one of my
170:36 - favorite data types sets they are
170:40 - awesome so I'm going to put that right
170:44 - over here
170:46 - and these are very very powerful I mean
170:49 - you learned sets you're gonna be a
170:52 - pretty awesome human being okay so let's
170:54 - go ahead and comment out all of this
170:57 - stuff don't need uh need it anymore so
171:00 - I'm gonna make a comment I'm gonna learn
171:03 - about sets okay
171:05 - what's nice about this is what if I told
171:07 - you hey
171:10 - there are two
171:12 - um they're two you know let's say
171:15 - databases okay database one and it has
171:19 - certain users emails
171:21 - okay or certain numbers so I'll just say
171:24 - one two
171:25 - three four
171:27 - and then there's this other one let's
171:29 - actually make it a little bit more fun
171:31 - this is too dry so let's say
171:33 - uh there's a database of programming
171:36 - languages okay or we have some data of
171:38 - programming languages
171:41 - we'll call this one
171:43 - and we'll say this is two
171:46 - okay and then we're gonna go ahead and
171:49 - say
171:51 - that instead of these numbers over here
171:54 - right we have programming languages so
171:56 - we have Ruby and python
171:59 - and JavaScript
172:02 - so maybe this is like
172:05 - right and then here we have Ruby
172:09 - and
172:11 - let's say
172:13 - somebody really likes
172:15 - um SQL
172:17 - and then there's a Java and then
172:20 - JavaScript okay now let me ask you this
172:23 - what if I wanted to create a variable
172:25 - called programming
172:27 - languages
172:29 - unique okay or just programming
172:31 - languages right and that should only be
172:34 - uh the unique languages okay so unique
172:38 - languages
172:40 - how can I pull the unique languages out
172:42 - of it can you do that can you I mean you
172:44 - could give it a try but it's going to be
172:46 - really difficult for you to be able to
172:48 - do this because right now
172:50 - you don't really have the tools for this
172:53 - right
172:54 - so how could you do this
172:56 - how could you merge these two arrays so
173:00 - that all the duplicates are removed so
173:02 - they're no duplicates right
173:04 - AKA no duplicates
173:07 - normally yeah that's a process it's not
173:10 - that easy and then you gotta write some
173:11 - piece of code that can do it but I will
173:14 - introduce you to something called sets
173:17 - Okay and sets are awesome because they
173:21 - are Made for This their notation is
173:23 - Curly braces okay kind of like a
173:25 - dictionary
173:27 - and they are used
173:30 - for
173:32 - unique elements
173:35 - getting unique elements we're getting
173:37 - unique stuff okay if that looks you know
173:41 - stuff is less intimidating than uh
173:43 - elements
173:45 - so I could actually throw all of these
173:48 - into a set
173:50 - and it will know what to do with it
173:52 - okay now first thing we're going to do
173:54 - is I'm going to show you how to
173:55 - concatenate two arrays okay just so you
173:57 - can see kind of how that works so
174:00 - let's call this list one and let's call
174:03 - this list two okay so there's certain
174:06 - things uh special keywords so special
174:08 - keywords hmm and they are
174:13 - special keywords are like you know lists
174:15 - is a special keyword length
174:18 - Max Min these are like built-in
174:21 - functions and methods that Java that
174:24 - python gives you
174:25 - that um that have special meaning so
174:28 - when you're creating variable names try
174:30 - not to like call it list because I'll
174:33 - overwrite this list that python comes
174:35 - with okay and uh set is another one
174:39 -  is another one so there's like a
174:41 - bunch of special ones and so try not to
174:44 - use them most of the times okay so
174:45 - that's why I'm just going to say list
174:46 - one list two and then we're going to say
174:48 - list one plus list two
174:52 - and if you actually do this python is so
174:55 - awesome they'll actually take both of
174:58 - these
174:59 - and they'll concatenate them together
175:01 - okay let's add them together and let's
175:04 - go ahead and print programming
175:06 - languages
175:08 - and I'll hit enter and you could see
175:11 - that I have a concatenated list with you
175:17 - know Ruby python JavaScript
175:20 - Ruby SQL Java JavaScript right but this
175:24 - is still not uniques so now I'll show
175:27 - you how set works okay
175:30 - so set works like this
175:33 - um you you take let's just let's just
175:36 - call set and it's like most raw form
175:39 - right so and I said two comma
175:42 - let's just say this and we'll um we'll
175:45 - do
175:46 - we'll just print it out
175:48 - so if I print this out and I'll comment
175:51 - this out for now if I print this out
175:52 - you'll notice that I get one comma two
175:56 - right but if I actually do one comma two
175:58 - comma two and I call this
176:01 - notice that I don't get the other two
176:05 - right and so like the duplicates are not
176:08 - there at all
176:10 - another thing you should know or is that
176:13 - sets are not subscriptable which means
176:16 - that I can't get the zeroth element of a
176:19 - set okay if I do that it will give me an
176:22 - error it says set object is not
176:24 - subscriptable
176:25 - okay so you can't like index or find
176:28 - things because it doesn't store them
176:30 - with an index or a key value pair
176:34 - okay
176:35 - so there's no get the index of zero get
176:38 - the index of one it's either in the set
176:40 - or it's not in the set okay so we could
176:43 - do things like that so for example let's
176:45 - say I have uh I'll just call this things
176:47 - okay and I'll make this a little bit
176:50 - bigger and zoom in here so you can see
176:52 - better
176:53 - so let's I have things right and I have
176:55 - one comma two comma two if I do things
176:58 - it'll only show me one comma two now
177:00 - I'll say two in things it'll give me
177:03 - back true yes it is so in Python you
177:05 - have these special things called in
177:07 - which is a special keyword and it allows
177:10 - you to ask a question is the thing
177:12 - you're looking for inside of what you're
177:14 - where you're looking so it's two in
177:16 - things yes it is but it's three in
177:18 - things well no it's not so I get back
177:20 - false this is very helpful to know if
177:23 - something exists or not and sets are the
177:25 - best data structure one of the best data
177:27 - structures to look through
177:29 - um really really quickly
177:32 - okay so
177:35 - um so it just will not hold any of those
177:37 - values right now let's go back to sets
177:40 - and let's look at what happens if I do
177:44 - the following so let's look here and I'm
177:46 - going to go ahead and say I have a set
177:48 - but I'm going to call it on an error I'm
177:50 - going to call it on an array
177:52 - okay so let's give this a try now you'll
177:56 - see this does not work and it actually
177:58 - gives an error so in this situation
178:01 - it'll be helpful to actually call or
178:03 - Constructor and our function set so
178:06 - let's go ahead and do set
178:08 - and do it like this okay and boom it has
178:11 - turned that array into a set
178:14 - okay now let's go ahead and give it an
178:17 - array with duplicate items like this
178:19 - and call this function and you'll notice
178:21 - that it's giving me one comma two back
178:25 - which means that it automatically
178:27 - removed all of the duplicates so
178:29 - remember how would list one plus list
178:31 - two we're already getting back
178:34 - our list of programming languages right
178:37 - like if I run this and I copy this first
178:41 - line all right so just make sure you
178:42 - copy that entire list right and then I'm
178:46 - going to say
178:47 - uh things let's just call it things and
178:50 - I'm going to paste it okay so now if I
178:53 - do things I should see this array with
178:57 - or this list with duplicate iTunes right
179:00 - all these duplicate items JavaScript
179:02 - JavaScript Ruby Ruby but
179:06 - what what can I do to make them all
179:09 - unique you know this you know all the
179:11 - pieces of the puzzle already okay so
179:14 - give it a try see if you could try this
179:16 - okay I'll give you five seconds here to
179:17 - give this a try on your own five four
179:19 - three two one
179:22 - and here we go I'm going to call my
179:24 - function set on this right and then I'm
179:28 - just going to pass it things and let's
179:29 - see what happens boom look at that how
179:32 - freaking beautiful right so that's all I
179:36 - need to do there I already know I'm
179:38 - concatenating that's what I need to do
179:40 - right over here right because I already
179:42 - or sorry this line right there because I
179:45 - already know I'm concatenating these two
179:47 - because once you concatenate these two
179:49 - you get that big array right there and
179:53 - on that array we just call this function
179:55 - set right here so we're going to do that
179:58 - we'll just take this we'll wrap this
180:00 - entire thing in and we'll call the set
180:03 - function on it and once you do that you
180:05 - get back this beautiful right over here
180:10 - set that has unique values so let's go
180:14 - ahead and call set on this okay and I'm
180:17 - going to run it okay and uh let's
180:20 - comment this out and run this boom look
180:23 - at that
180:24 - so nice right python SQL Java JavaScript
180:28 - Ruby I'm getting back all of the
180:31 - programming languages
180:32 - uh that I wanted right all of this okay
180:36 - so
180:37 - but all the unique stuff right because
180:41 - we don't want to duplicate so imagine
180:43 - you were Google and you wanted to have
180:47 - unique search queries so think about it
180:49 - like this let's go to google.com and I'm
180:52 - just going to type in how to now how
180:56 - many people do you think have asked this
180:58 - question how to restart iPhone how to
181:00 - lose weight fast don't you think it's
181:02 - probably millions of people that have
181:04 - typed this search in how to lose weight
181:06 - fast or at least thousands well how come
181:10 - I am only seeing this one time does that
181:13 - mean only one person ever has searched
181:16 - that you already know the answer is not
181:19 - true for that right the answer is
181:21 - millions or thousands of people have
181:23 - searched for it so if that's the case
181:25 - why am I only seeing it once Google is
181:27 - doing something very similar to a set
181:30 - and it's going it's taking all of the
181:33 - users queries right it's making this
181:36 - giant list of every single query ever
181:39 - right and then there's probably
181:41 - duplicates that exist here so lose
181:43 - weight fast okay another person typing
181:45 - in lose weight fast and that gets stored
181:48 - in that array another person types and
181:50 - lose weight fast that gets stored in the
181:52 - array however Google then goes and goes
181:55 - I'm gonna call me a set on this bad boy
181:57 - right and then once it does that well
182:00 - then you just get one query that says
182:02 - lose
182:03 - wait
182:06 - fast that's it
182:08 - okay instead of
182:10 - all these other like million queries
182:13 - right so if we if if Google finds
182:16 - duplicates it it reduces them and it
182:19 - probably uses something like set okay
182:21 - they probably use something different
182:22 - but you get the idea okay I'm just
182:24 - trying to make this easy for you to
182:25 - understand all right don't shoot me if
182:28 - I'm not completely 100
182:29 - 000 accurate on some of these things
182:31 - some of it is for entertainment okay
182:33 - would you rather be bored you'd rather
182:35 - be entertained but kind of like it okay
182:37 - kind of like this it works so there you
182:39 - go you're understanding Google Now you
182:41 - can pretty much ready to create Google
182:42 - so you can see why I like sets so much
182:46 - any time you
182:49 - um and let me emphasize the T when I say
182:51 - that set
182:53 - okay it sounds like something else if I
182:55 - don't say the T in there so I like sets
182:59 - a lot and their ability to give you
183:03 - unique data is
183:05 - unparalleled it's beautiful you can't do
183:07 - that that will list that easily you
183:09 - can't do that with anything else that
183:10 - easily so I like them so anytime you
183:13 - want have to you don't care about an or
183:15 - uh you don't care they are ordered but
183:18 - anytime you don't care about you know
183:20 - getting specific indices from here and
183:22 - you just want to check
183:24 - boom just pop it into a set right and uh
183:27 - if you just want a list of unique items
183:29 - and now I can actually even see this so
183:31 - I don't have things defined here that's
183:33 - fine so I could actually even do you
183:36 - know on sets I can ask hey
183:39 - um is SQL in programming languages and
183:42 - what do you think is going to say do you
183:43 - think it's gonna say true or false I'll
183:45 - give you three seconds for that three
183:46 - two one let's see what you said I hope
183:49 - you said true because yes it is inside
183:52 - uh but what about the programming
183:54 - language go is that inside so what do
183:57 - you think I'm gonna get back for that
183:58 - true you can just be true or false three
184:01 - two one I'm gonna get a false in this
184:04 - case because go is not inside of
184:07 - programming languages but SQL is right
184:12 - so this is going to be true and this is
184:16 - going to be false okay with the capital
184:19 - F right there so there you go there you
184:22 - have sets there are really cool okay and
184:26 - I hope you enjoyed them and with that
184:28 - said let's keep on rocking and rolling
184:31 - now let's just go ahead and do one
184:34 - little exercise with sets before we move
184:36 - on to newer things I'm gonna go ahead
184:38 - and I will comment out all of this and
184:41 - we will create a new function and uh
184:44 - okay and so this way you can keep
184:46 - practicing functions as well okay so I'm
184:49 - going to create a function and it's job
184:51 - let me actually write its documentation
184:53 - first and then you see if you could try
184:56 - to do this okay so I want to be able to
184:58 - call this function like this I want to
185:01 - call this function unique
185:03 - and unique should take in an array and
185:05 - so if I give it an array like this
185:07 - okay or let's say I give it an array
185:09 - like this Ruby Ruby excuse that sound
185:13 - that is my focus app telling me hey
185:16 - you're done but I'm not done I gotta
185:18 - keep going Ruby Ruby and python
185:22 - okay so when I call Unique on this I
185:26 - should get back what I should get back
185:29 - is Ruby and python okay and you know
185:35 - what let's return it as a list
185:37 - okay so I'll just show you like if I
185:39 - have a set here and it's like one comma
185:41 - two one two I can call list on this and
185:44 - lists will convert it back into a list
185:47 - okay so let's just say we we want to
185:49 - call Unique on a list and get the unique
185:52 - elements back
185:54 - um and yeah so that's how it should work
185:56 - okay and the function should be called
185:58 - unique so
186:00 - um you know create a function unique
186:04 - that takes in a list
186:09 - okay
186:10 - and
186:11 - returns only unique items
186:15 - okay so that's that's what it does in
186:17 - English
186:19 - and then this is how you would write it
186:21 - this is how you would write it and call
186:23 - it and this is what it would return okay
186:25 - so I hope that this is giving you enough
186:28 - to write your own function so I would
186:30 - say take five seconds to pause this
186:32 - video and then go ahead and try this on
186:34 - your own so five four three two one all
186:39 - right let's do this together if you
186:42 - haven't done it yourself yet
186:45 - so the first thing I'm going to say is
186:46 - I'm going to define a function okay and
186:49 - this is going to be called unique
186:51 - and then unique will take in you know
186:55 - let's say we'll just say languages
186:59 - and what we'll do
187:02 - is we'll return
187:05 - by just calling set on those languages
187:09 - okay and let's just give this a try
187:11 - right now so I'm going to go ahead and
187:12 - print and I'm going to say unique
187:15 - and then we'll give unique our languages
187:17 - so let's actually call it just like this
187:20 - I'll copy this exact line and I will
187:23 - paste it
187:27 - okay so we're calling unique with Ruby
187:29 - Ruby python
187:32 - and then
187:34 - let's see what it says so let's run it
187:37 - and it does say that we're getting back
187:39 - Ruby and python so it does make it
187:41 - unique right that's perfect however it's
187:44 - giving me back a set and not a list you
187:46 - see those curly braces at the end there
187:49 - that represents that it's a set okay and
187:52 - if it makes sense it doesn't have key
187:54 - value pairs if it had key value pairs
187:55 - that would be a dictionary but this is a
187:57 - set
187:58 - now I want to call list on that okay so
188:02 - this returns this here this part that
188:06 - I'm highlighting
188:07 - that returns this guy
188:11 - and then if you wrap this guy and you
188:14 - call set on this
188:17 - or sorry list on this
188:19 - like that
188:21 - then that will actually convert this
188:24 - into a list uh into a list okay with
188:28 - with the items in there
188:30 - okay hopefully that makes sense so
188:32 - that's why I wrapped it with the list
188:33 - let's run this and you can see I get
188:35 - Ruby comma python there we go now what
188:40 - if we wanted to take it even further
188:42 - what if we wanted to use Lambda and uh
188:46 - convert it into or actually on honestly
188:49 - for this you don't even you could use
188:51 - Lambda or you could just make it a
188:53 - one-liner like this okay but if I wanted
188:56 - to use Lambda how could I do it with
188:57 - Lambda well see if you could convert
189:00 - this function into a Lambda function
189:03 - okay so unique into Lambda give that a
189:05 - try I'll give you five seconds five four
189:08 - three two one all right let's do it
189:10 - together so I'm gonna do some callbacks
189:12 - and then that way we're practicing the
189:14 - other stuff we learned too right we're
189:15 - not just forgetting about it
189:17 - so I'm gonna say unique
189:20 - is equal to and we'll say Lambda okay
189:23 - and it takes in languages so we'll just
189:25 - say it takes in a list
189:29 - okay or languages and uh let's set
189:33 - languages just like that I there's an
189:35 - implicit return in here okay so now I'll
189:39 - comment this out and we'll run this and
189:42 - you can see I'm still getting back the
189:44 - correct result even though I commented
189:46 - this line completely out
189:49 - it's working okay so there's both ways
189:51 - of writing it for this function honestly
189:54 - I'd probably prefer to write it like
189:56 - this because there's no real reason to
189:58 - use Lambda here okay
190:00 - um it's kind of just slightly
190:03 - you know over a kill in this case
190:06 - but uh yeah so you can use that right
190:09 - there and you should be good and you
190:10 - could just call Unique anywhere you want
190:12 - and you'll be good okay so I'm gonna go
190:14 - ahead and comment this out and we'll
190:16 - move forward all right now let's talk
190:20 - about one of the most fun things with
190:23 - programming and this is also without
190:25 - this programming really wouldn't be
190:27 - programming okay so I had to do my due
190:29 - diligence and show you all the data
190:31 - types that exist in Python because
190:32 - that's pretty important but this is my
190:35 - most favorite thing let's talk about it
190:37 - and we got Loops okay Loop D doopy dupes
190:42 - bam all right these are loop-dee-doops
190:46 - that there are very very helpful in
190:48 - programming okay so I'm gonna
190:50 - talk about them now now
190:53 - if you have an array
190:56 - like the fruits one that we created long
190:59 - time ago
191:00 - long time ago
191:03 - copy and comment it out because I don't
191:05 - need it up there
191:07 - and I'll put it here okay and I don't
191:10 - need all these other different data
191:11 - types because that's just hella
191:12 - confusing
191:13 - now what if I asked you hey can you
191:16 - print out each of these
191:19 - and just show me them there one by one
191:22 - okay so for example what does that mean
191:23 - so it's like
191:24 - hey print out fruits of zero I want you
191:27 - to print out all of them okay so that
191:29 - should be on its own line then get me
191:32 - the second one okay
191:35 - and then give me so yeah go ahead do
191:37 - this and do it manually so make this
191:41 - array make this list put whatever you
191:43 - want and it doesn't need to be fruits as
191:44 - long as the string it should be fine and
191:46 - then just like print every single one of
191:48 - them out okay so right now we're not
191:51 - using a loop this is the old school way
191:53 - of doing it manual way of doing it and
191:54 - look at how much fun you have
191:56 - to hear three go here four go here one
192:03 - two three four five I actually don't
192:05 - need more than that one two three four
192:07 - five there we go let's run this and you
192:10 - can see all of the items are being
192:12 - printed
192:13 - right
192:15 - what if I told you hey also make sure
192:17 - that they have like a
192:19 - uh you know it says
192:22 - fruit and then it like shows it so for
192:25 - example it says fruit
192:27 - like this
192:30 - all right and then it shows uh it shows
192:34 - that okay I don't need a space here I
192:36 - can just run this
192:37 - so what if I said like make sure that
192:39 - every single one of them says fruit
192:40 - before it well go ahead do this manually
192:43 - right now okay go ahead and do this
192:45 - manually right now so put that here put
192:48 - that here put that here put that here
192:50 - okay now let's run it
192:52 - and now you got it's saying fruit for
192:54 - every single one of them okay now what
192:57 - if I also told you print its position
192:59 - out as well and let's do that manually
193:02 - so we're going to go ahead and say if uh
193:04 - you know what's that thing's index so
193:06 - I'm going to say 0 here
193:08 - when I say one here I'm going to say 2
193:11 - here I'm going to say 3 here and four
193:15 - here right and then when we run this we
193:18 - can see fruit we could see all the
193:19 - fruits and then we could see
193:21 - their index okay so you could see that
193:25 - this is this was a tedious process
193:28 - not too fun and if this list keeps
193:31 - getting bigger and bigger oh man can you
193:34 - imagine the amount of manual work we're
193:36 - gonna have to do is gone I'll be insane
193:40 - okay it's gonna be off to charts it's
193:42 - gonna be off the GBS so if we don't want
193:46 - to do all that manual work there is a
193:49 - solution
193:51 - thank you Lord and the solution is
193:54 - writing Loops so I'll show you how to
193:56 - write a for loop I can say four
194:01 - fruit in Fritz
194:04 - print
194:05 - fruit and I'm gonna go ahead grab all of
194:09 - these lines and comment them out and run
194:11 - this
194:12 - and you can see I just got back all my
194:15 - fruits
194:17 - so that was so much easier and all by
194:19 - saying for fruit in fruits that's it
194:22 - just this here okay so
194:27 - what does this mean for fruit and fruits
194:29 - well what's actually happening is this
194:31 - fruit right here
194:33 - this is one arbitrary item and this is
194:37 - the actual list okay so this refers to
194:40 - this list over here
194:44 - and this is an arbitrary variable we
194:46 - could call it whatever we want I could
194:47 - call this X and print X and if I run
194:51 - this this will still work okay as long
194:54 - as these guys match up right that's
194:57 - what's important and so I'm basically
194:59 - saying hey grab this fruits array
195:02 - and then for each item in there give
195:05 - each item a name so we'll just give this
195:07 - item a name fruit and the first time
195:10 - it's looping through so how a for Loop
195:13 - works is
195:15 - it goes through
195:17 - give it a variable name of fruit
195:20 - okay so it goes through and the first
195:22 - time I'll pick the apple and then it'll
195:25 - go ahead and then it'll go ahead and
195:29 - then it'll go ahead and print that fruit
195:32 - out so we'll go ahead and go okay uh
195:35 - it's apple and then it'll pop Apple up
195:38 - onto the screen
195:39 - then it's going to go
195:41 - a second time and what's going to happen
195:44 - is this will become fruit right over
195:47 - here
195:48 - okay I'm going to make this a little bit
195:49 - bigger so it's easier for you to see
195:51 - this will become fruit and then it will
195:54 - go here
195:57 - and it will print it out okay then
196:01 - what's going to happen the next time is
196:03 - it's going to Loop through and the
196:06 - orange will become the new fruit
196:08 - right and
196:11 - let's get rid of this guy right here
196:15 - okay
196:16 - and then it will go ahead and make
196:18 - orange the new fruit and then orange
196:20 - will get printed out to the screen then
196:22 - it will go ahead the next time it'll
196:25 - Loop through
196:26 - it'll make banana the new fruit
196:31 - okay and this will become the fruit and
196:34 - it will print out banana and then last
196:36 - but not least it's gonna go ahead and do
196:39 - that one more time it's going to make
196:40 - this the variable fruit and then it's
196:43 - going to go ahead and print that out
196:47 - okay
196:48 - and after it does this
196:51 - is going to go ahead
196:54 - and just stop the loop because it's
196:56 - going to realize
196:58 - I cannot go any further
197:01 - so it's time for me to end the loop and
197:03 - then I will end it
197:05 - okay and then this guy over here is done
197:08 - so on and the code level what's
197:10 - happening is these two lines will just
197:12 - keep running it'll it'll go down here
197:13 - it'll be like run this then come back up
197:15 - then it'll come back here and run this
197:18 - then it'll come back up again and it'll
197:20 - come down here and run this again then
197:22 - it'll come back up then it'll come back
197:23 - down here and run this again
197:26 - until there are no more items left and
197:30 - the the loop is completely done okay so
197:32 - that is how looping works and anytime
197:35 - you start to see code like this it just
197:37 - means somebody doesn't know how to write
197:38 - a for Loop because a lot of repetitive
197:40 - stuff you could automate it and make
197:44 - your life really easy now what if I did
197:46 - ask you the same thing and make sure it
197:48 - says the word fruit
197:50 - before each of these fruits well you
197:54 - could just do that in one line right now
197:55 - you could just go ahead and say see if
197:57 - you can even try it yourself
198:00 - you could go ahead and just say fruit
198:03 - and just like this
198:06 - okay and run it and boom look at that it
198:09 - just put fruit with every single one
198:12 - because that's what you asked it to do
198:15 - right so if we went through this
198:17 - iteration again
198:20 - you know and kind of like what the
198:22 - process happened but the first time this
198:24 - was the variable fruit
198:27 - right and
198:30 - it it said hey this is fruit
198:34 - and so imagine you have that Apple here
198:37 - right so imagine you have that Apple
198:39 - here and it says print the word fruit
198:42 - and then the actual Apple emoji and show
198:46 - it on on the screen and then it says go
198:48 - ahead and do that then it says go ahead
198:51 - and do that again then it says go ahead
198:52 - do that again and it says go ahead and
198:54 - do that again do that again and then
198:57 - you're done
198:59 - okay so it goes ahead and just like
199:01 - keeps looping through that okay so all
199:04 - of those lines we got it into one now
199:06 - what if I actually also wanted to say
199:09 - the index
199:11 - so I wanted to say that this is the
199:13 - zeroth index and this is on the first
199:15 - index and so on and so forth just like
199:17 - how we did earlier how could we do that
199:19 - so check this out there's something
199:21 - really cool that we could do in Python
199:23 - so I'm going to copy this list here and
199:26 - I'm going to put this here so you could
199:28 - you could see this uh better and we
199:30 - could interact with this better so let's
199:32 - go ahead and uh zoom in here right there
199:36 - okay so now check this out
199:40 - I could call fruits obviously right you
199:42 - already know that but I could actually
199:44 - call this function enumerate and I can
199:47 - call this function on fruits and watch
199:49 - what it does let's actually wrap it
199:53 - inside of lists so you can actually see
199:55 - it
199:56 - and watch what it does it actually gives
199:59 - you
200:01 - a list of tuples remember we talked
200:04 - about tuples and lists of tuples it
200:06 - gives you a list of tuples
200:07 - and it says
200:09 - that and the list of tuples basically
200:12 - says the first item this is item number
200:14 - one so remember in list you could also
200:16 - have different types of datas right you
200:18 - could have Tuple as a data type inside
200:20 - of a list as well so this is my first
200:22 - item and the first item says hey uh
200:26 - position of zero and it's an apple okay
200:28 - so I have a tuple zero comma Apple
200:31 - uh string Apple okay and the second
200:33 - Tuple says position is one so one comma
200:37 - pair
200:38 - two comma orange three comma banana four
200:42 - comma so all we're doing here is we're
200:44 - just getting the position of all of
200:45 - these
200:46 - okay and we're putting them in pairs the
200:49 - position of all of these right and we're
200:50 - putting them in like these pairs and
200:52 - Tuple is a perfect data structure to use
200:55 - here because you don't want a user to go
200:57 - here and be able to update the position
200:59 - of the um of the Apple because apple is
201:03 - always going to remain in zero okay and
201:06 - the pair is going to remind in one so
201:07 - you want it to be not updatable so this
201:10 - is a list of tuples
201:12 - and usually for storing pairs of
201:14 - information like it's really good so
201:16 - enumerate gives me this so with the
201:18 - numerate I have access to when now I can
201:21 - Loop through and I have access to my
201:24 - emojis
201:25 - apple and my my fruits but I also have
201:28 - access to their positions
201:30 - okay so watch this I can go over here
201:34 - and call this enumerate function and I
201:38 - know that'll give it'll be giving me
201:40 - this type of uh you know pair pairs so
201:43 - it's like zero comma the fruit one comma
201:45 - fruit so since I know uh let's actually
201:48 - just run this and let's see what we get
201:50 - so if I run this you could see I'm
201:51 - getting back fruit and I'm getting back
201:53 - the position and the actual fruit name
201:56 - right
201:57 - the actual fruit itself so zero comma
202:00 - Apple One comma pair two comma orange
202:02 - Etc now since I know this is a tuple so
202:05 - let's go ahead and create a tuple just
202:07 - so you could see visualize this as well
202:09 - and I'll say apple since I know it's a
202:11 - tuple I can index a tuple right if I do
202:15 - thing of zero I'll get back the zero
202:18 - that zero and if I do thing of one I'll
202:21 - get back the Apple so if I want to get
202:24 - the Apple here I just do think fruit of
202:26 - one right so if I run this you could see
202:30 - I'm getting all the fruits okay so in
202:32 - other words this right here just means
202:35 - fruits
202:37 - okay now if I go okay so uh my bad so
202:42 - let's just write that that right there
202:44 - is fruits
202:47 - okay and now next one I'll say fruit of
202:51 - zebra okay and run this and now you can
202:54 - see I'm getting back all my indexes
202:58 - right my indices so this right over here
203:01 - right is the index
203:05 - this over here is the fruit itself so
203:08 - this is a fruit and this is the index
203:09 - now wouldn't it be a lot cleaner If
203:13 - instead of writing fruit of one and
203:16 - fruit of zero
203:17 - we could just write the actual word
203:20 - you know fruit here
203:23 - and then we could actually write just
203:25 - index here like that would look so much
203:27 - cleaner
203:28 - you know so it's like
203:29 - it's easy to read that code well
203:33 - there is a way we could do that so
203:36 - there's something called unpacking okay
203:39 - so I'll give you an example so let's say
203:41 - I have
203:42 - a zero here so let's let's go again
203:45 - and say I have a 0 here and I have a
203:49 - apple here
203:52 - okay
203:53 - now
203:54 - if I set this to one variable then when
203:58 - I obviously call that one variable like
204:00 - thing it'll just refer to that Tuple so
204:03 - for example if I do thing it'll refer to
204:04 - that Tuple however
204:06 - if I do two variables here so since that
204:10 - a thing I actually say index and then I
204:13 - say fruit now if I print index it'll
204:16 - give me zero and if I print fruit it'll
204:18 - give me this Apple so this is uh this is
204:21 - called the Tuple unpacking okay so it's
204:24 - a little bit of more advanced concept
204:25 - but hey you should just learn it right
204:28 - Tuple
204:29 - unpacking okay and then there's like all
204:32 - other you can unpack an array like that
204:34 - list like this too you can unpack other
204:35 - stuff but all that means it's
204:38 - complicated but sounds complicated but
204:40 - we're just saying hey we just like to
204:42 - store these in separate variables like
204:44 - index and fruit So then whenever you
204:45 - refer to index and fruit it'll be this
204:47 - and then that Tuple just evaporated in
204:50 - this case is just gone like the actual
204:52 - parentheses and the Tuple object right
204:54 - it's gone
204:56 - so I could do that here since I know
204:59 - that I'm going to be getting back this
205:01 - structure right here
205:03 - I could just rename it because this is
205:05 - what I'm going to be getting here let me
205:07 - just rename it I can say hey
205:09 - get me
205:12 - index comma fruit
205:16 - okay and now if I for example print out
205:19 - the index
205:21 - you could see I just get back the
205:23 - indices and if I print fruit you can see
205:26 - I get back the fruits
205:29 - okay so I'm just going to go ahead and
205:31 - say
205:33 - a fruit comma index all right there we
205:36 - go so this solution right over here you
205:40 - can see is much much much cleaner right
205:42 - and it um it gets us what we want but
205:45 - it's just overall a much cleaner way of
205:47 - looping through this and getting
205:48 - everything that we want so you won't all
205:50 - of us have to use enumerate but if in
205:53 - any situation you need access to your
205:54 - index index enumerate is going to be the
205:57 - way to go but the more most common way
206:00 - you're going to write the loop is just
206:01 - going to be for fruit and fruits print
206:04 - fruit this is going to be the most
206:06 - common way you're going to be doing
206:07 - things with it okay and you're not
206:09 - always just going to be printing you're
206:10 - obviously going to be doing stuff with
206:12 - it right you're going to be uh returning
206:15 - thing you're going to be uh not
206:16 - returning it's not a function but if you
206:18 - had a function you'd return it
206:20 - you can keep adding items to that array
206:24 - with the for Loop so there's a lot that
206:26 - you could do with it but this is a very
206:28 - basic example of you know a loop now
206:32 - let's say I wanted to add 10 more apples
206:35 - to this fruits array how could I do that
206:38 - well what's the default way we would do
206:40 - that it would do fruits dot append so
206:43 - let's do it let's go ahead and try this
206:45 - in the console right now so the normal
206:48 - way to do it would be let's say I have
206:51 - I'm going to copy my fruits list over
206:54 - and paste it and I will say fruits dot
206:58 - append and let's say I add another apple
207:00 - and let's print out fruits again and you
207:03 - could see that another Apple was added
207:04 - well what if I want to add another Apple
207:06 - well then I just do that line again I'm
207:08 - pressing up up on my keyboard to get
207:10 - back my most recently input commands so
207:13 - if you press up on your keyboard I'll
207:15 - hit enter
207:16 - and then I'll get fruits right we'll go
207:19 - fruits append print it out
207:22 - and you could see that with that
207:24 - technique I have successfully added a
207:27 - lot of apples so to order to add 10
207:30 - apples
207:31 - I would have to keep appending many many
207:34 - many many many times I'll need to append
207:36 - it 10 times obviously right let's go
207:39 - ahead and do that manually now right so
207:42 - how am I going to do that I'm going to
207:43 - say fruits.apent and I'm going to say
207:45 - apple
207:47 - right and then I have to do this 10
207:50 - times so let's go ahead and do it one
207:51 - more time I think that's 10 so let's go
207:53 - one two three four five six seven eight
207:57 - nine ten okay that's one extra now I can
208:02 - go ahead and do print fruits
208:04 - okay I can go ahead and print fruits and
208:06 - when I run this you can see that I have
208:09 - 10 apples
208:11 - added here to this list so that was a
208:15 - kind of an annoying way to add this many
208:19 - um apples to this list so how could we
208:21 - add them using a loop well there's a
208:25 - really cool way we could do this I'm
208:27 - going to show you something called range
208:29 - so range if I do range of 50
208:32 - okay and let's do range of 10. and if
208:35 - you just run it you won't really see
208:37 - anything it'll just arrange like that
208:38 - but if I convert it to a list you can
208:42 - see that it just created a list on the
208:44 - Fly for me that goes from 0 through 10
208:47 - okay but not including 10 just up to 10.
208:50 - so that's what range does
208:52 - so this is a really nice way so for
208:55 - example if you had a list
208:57 - so I let's say I said for I in
209:02 - right and I said print I this Loop will
209:05 - run how many times let me ask you that
209:07 - question how many times will this Loop
209:09 - run
209:10 - Loops will always run the same amount of
209:13 - times as there are items in the array
209:16 - that you're running it on or the list
209:17 - that you're running it on okay or
209:18 - whatever you're running it on so in this
209:20 - case there are one two three four five
209:23 - items so this Loop will run five times
209:26 - if there were six items it would run six
209:28 - times if there were seven items it would
209:30 - run seven times you get the idea right
209:33 - and um and I will just be the number in
209:37 - this case so I will be one the first
209:39 - time I will be two the second time I
209:41 - will be three you could also just call
209:42 - this number so it's not like stupid
209:45 - looking variable so if I run that it
209:48 - should print out one two three four five
209:50 - and I'll comment out a bunch of the
209:52 - other stuff so
209:53 - it's like less confusing let's run this
209:55 - so I see one two three four five here
209:59 - okay now what if I want now another way
210:04 - to say this here
210:07 - all this is doing is saying hey run this
210:10 - thing five times that's what this is
210:12 - saying okay run this piece of code five
210:14 - times so the nicer way to do this is I
210:17 - can just say Range Five
210:19 - so this will also run five times okay
210:22 - you can see that one two three four five
210:25 - right ran five times
210:28 - now
210:30 - what I want to do
210:32 - and I don't even really need access to
210:34 - this variable so I could just call it a
210:36 - underscore and I can just say haha now
210:39 - print out haha five times because I I'm
210:42 - just skipping underscores basically I'm
210:44 - just saying uh hey I'm not really using
210:47 - that variable so I'm just I'm not even
210:50 - gonna really store it in something I'm
210:51 - just going to store an underscore most
210:53 - programmers know that if you see
210:55 - underscore you're not gonna like you're
210:57 - not gonna like print underscore you're
210:59 - not gonna call it you usually just
211:00 - ignore it and so because I don't really
211:03 - need access to the elements that are
211:05 - inside of this list
211:07 - so I can I'm just printing haha five
211:09 - times so this let me this piece of code
211:11 - right here is saying do this five times
211:14 - that's all this is saying
211:16 - okay this being whatever I'm writing
211:19 - here it's going to repeat that five
211:20 - times Well if you have this piece of
211:23 - knowledge how could you add 10 pieces of
211:26 - fruits here okay
211:30 - add 10
211:32 - uh apples to the fruits list how could I
211:37 - do that how could I add it to the fruits
211:39 - list
211:41 - see if you could do this yourself and
211:42 - you should be able to do this yourself
211:43 - because you have all the pieces here to
211:45 - do it okay you need this line you'll
211:48 - need some of these lines right so try to
211:50 - add it yourself I'll give you about five
211:51 - seconds five four three two one
211:55 - hopefully you took that time to pause
211:56 - the video and try it yourself pause it
211:58 - now if you need it and uh we'll do this
212:01 - together now
212:02 - so I'm gonna go ahead now I'm gonna say
212:05 - four
212:07 - don't need access to this and range
212:10 - 10 fruits dot append Apple
212:15 - and I'm gonna get rid of all of these
212:17 - here
212:18 - and if you wanna see it in action you
212:21 - could even print out the fruits array 10
212:23 - times so you could see it so let's run
212:25 - this and you could see the array let me
212:28 - let me comment the hahasa and you could
212:31 - see the array getting bigger and bigger
212:33 - each time because it's adding an apple
212:35 - to it right adding an apple to it right
212:39 - here
212:40 - right here right another apple right
212:43 - here another apple right here another
212:45 - apple right here another one right there
212:47 - another one right there there and then
212:49 - you get this okay
212:51 - so if I now remove this print from the
212:54 - loop because I don't want to print it
212:56 - every single time I just want to print
212:58 - it once the loop is done so I'm going to
212:59 - put it outside of the loop and I'm just
213:01 - going to say print fruits and let's run
213:03 - this now and you can see
213:07 - it added
213:09 - you know
213:11 - 10 apples at the end here
213:15 - okay so that's how for loops work okay
213:19 - that's that's how they work hopefully
213:22 - that was a good intro for you into for
213:23 - Loops there's a there's gonna be a lot
213:25 - more let's comment out everything
213:26 - there's gonna be a lot more that we're
213:28 - gonna talk about when it comes to for
213:30 - Loops because they're pretty much going
213:33 - to be used everywhere okay so there's a
213:36 - lot to cover with them there's gonna be
213:38 - a ton of exercises we're gonna do with
213:39 - lists and Loops Etc we're going to do
213:42 - them soon enough uh first I want to
213:44 - introduce you to another type of loop as
213:47 - well which you won't really use that
213:49 - much but it's good to be aware of it so
213:53 - when you see it you know what it does
213:54 - and there will be times you might
213:56 - actually need it okay so with that said
213:57 - let's go ahead and learn while loops
214:02 - all right now let's talk about my
214:04 - friends while loops
214:09 - there we go all right while Loops are
214:13 - fun but they can be very crazy and they
214:16 - can be very dangerous meaning you can
214:18 - very easily write an infinite Loop
214:22 - um and so yeah you don't want to do that
214:24 - okay so watch out for this I'm going to
214:27 - say that as the first thing because you
214:29 - are going to write a loop that'll never
214:31 - end what I like about for Loops is they
214:33 - automatically end and you don't have to
214:35 - have an end condition that's nice this
214:38 - not so nice all right
214:41 - so I'll show you an example of a while
214:43 - loop okay so let's just go ahead and say
214:46 - here we have uh Kazi and let's say we
214:49 - have Kazi and he's currently sitting
214:53 - okay that's what cause he's doing he's
214:55 - chilling and he's sitting all right now
214:58 - I'll say while qazi is not so that's
215:02 - another cool thing so it's like
215:06 - um
215:06 - so that's how we would kind of say it in
215:08 - English right Kazi is not so we'll say
215:11 - uh is qazi standing and we'll do a check
215:15 - and it should say true and we'll says
215:17 - qazi
215:19 - sitting
215:22 - okay
215:23 - um and sorry I'm I did not mean to just
215:26 - have meant to put two equal signs but
215:27 - that's fine let's just say cause these
215:28 - settings let's say Kazi is sitting let's
215:30 - just redefine it and I'll say I'll check
215:33 - is Causey sitting it should give me a
215:35 - true and I'll say is qazi uh standing
215:39 - and it should give me a false because we
215:41 - have defined cause you to be sitting so
215:44 - now I can write a while loop very easily
215:46 - I could say while cozy
215:49 - okay is not so there's also not okay
215:53 - this is a very important operator
215:55 - okay so for example I can say quasi is
215:59 - standing that'll give me false right but
216:02 - if I say cos is not standing that should
216:04 - give me a true just like that okay so
216:08 - I'll say while quasi
216:10 - is not
216:13 - standing
216:16 - we will say and when you hit enter and
216:19 - it shows the three dots like that I'm in
216:21 - the console right now by the way okay so
216:22 - just writing the console I'll give one
216:25 - space here
216:26 - okay or we give two spaces that's fine
216:28 - as long as you indent some amount and
216:31 - I'll say print
216:33 - get your fat butt up
216:41 - okay let's there
216:44 - now I'm not going to hit enter yet but
216:46 - this is a while loop and it'll
216:48 - automatically start running so it's like
216:50 - while kazi's not standing print get your
216:52 - fat butt up and you'll notice that right
216:54 - now cause he's not standing right and so
216:57 - there's never a condition where qazi
216:59 - will be standing
217:01 - that means this Loop will keep running
217:05 - for ever AKA infinite Loop and now I'll
217:09 - hit enter and I'll hit enter again and
217:12 - watch this it just keeps on keeping on
217:15 - right it just keeps on running over and
217:18 - over and over and over and over again I
217:20 - mean this has ran thousands of times to
217:23 - stop this hold control and then press C
217:25 - on Windows probably hold something and
217:29 - press C control probably or option uh
217:32 - not you guys don't have option uh
217:34 - something alt okay just look it up and
217:38 - that should kill your command line so if
217:40 - we were to write that in our program our
217:42 - program we just keep looping just like
217:44 - this infinitely and that's not what we
217:46 - want we don't want to create an infinite
217:49 - Loop okay
217:51 - let me just see the status of qazi and
217:53 - it says cause he's sitting so what I'll
217:55 - do instead is I'll say
217:58 - maybe after 10 times it's printed out we
218:02 - can say causes then standing after 10
218:05 - times okay so in order to do that okay
218:08 - I'll need to teach you how to create a
218:10 - breaking break condition to end a while
218:13 - loop
218:15 - okay so let's set a counter
218:19 - and we will say the counter is zero
218:22 - okay and then when that counter Hits 10
218:25 - we will break out of our Loop so let's
218:28 - try this I'll say while
218:30 - counter is less than 10. and we'll say
218:34 - put a space here and we'll say print
218:37 - counter okay and then what we're gonna
218:40 - do in the second line here before
218:43 - hitting enter one more time is we're
218:45 - going to go ahead and we're gonna
218:46 - increment counter so I'm going to say
218:48 - counter is equal to whatever counter
218:50 - previously was plus one so I have
218:54 - defined counter here as zero
218:58 - so this is incrementing it by one so
219:01 - we're taking this definition of counter
219:03 - at zero and then I'm redefining counter
219:07 - here to be whatever it previously was
219:11 - plus one so if you follow the logic of
219:14 - this Loop what's happening is the first
219:16 - time I Loop through this it says while
219:18 - counter is less than 10. so I go while
219:22 - zero is less than 10 that statement
219:25 - evaluates to True since that evaluates
219:28 - to true because it needs a conditional
219:31 - one set of values to true it runs the
219:33 - entire while loop block so it prints out
219:36 - zero so then it spits out boom you get
219:39 - zero here and then it redefines counter
219:42 - to be whatever it previously was plus
219:44 - one which means the new definition of
219:46 - counter
219:47 - is gonna be one okay then the loop runs
219:50 - the second time and it goes
219:52 - while
219:54 - one is less than ten okay so the second
219:57 - time it runs it goes one is less than
220:00 - 10. okay that's what it checks so let me
220:02 - actually write this
220:03 - together so while one is less than 10
220:06 - this evaluates to a true
220:10 - okay and then it runs again
220:12 - what the heck happened there
220:16 - okay this evaluates to a true
220:20 - all right and then it prints out one and
220:24 - then it sets the counter to whatever it
220:28 - previously was in this case it was
220:30 - previously one
220:31 - uh and then one plus one
220:34 - is going to be 2. okay now counter is
220:38 - set to two
220:40 - okay and then this so the second time we
220:42 - Loop through this is two the third time
220:45 - we Loop through it's three the fourth
220:46 - time fifth times six times seven times
220:48 - eight times ninth time and then when we
220:51 - go the tenth time through the loop what
220:54 - actually happens
220:56 - is
220:58 - this statement over here is not true
221:01 - anymore
221:02 - it goes while 10 is less than 10. let me
221:05 - ask you a question is 10 less than 10
221:08 - no 10 is not less than 10. so that
221:12 - statement becomes false and when stat
221:14 - becomes false everything underneath it
221:17 - does not run so it does not run the
221:20 - block of code and it finally comes to a
221:22 - stop
221:23 - so let's try this and I'll hit enter
221:27 - and you could see it ran from zero
221:29 - through nine
221:30 - and then boom went through nine right
221:35 - so that's how a while loop works now I'm
221:39 - gonna
221:40 - zoom out of here
221:42 - okay and then we're gonna go ahead and
221:44 - write this down into our
221:48 - uh into here okay so now I'm going to
221:51 - say
221:52 - cozy let's set him to sitting
221:55 - okay and um
221:58 - while cozy
222:01 - is not standing we will tell we'll keep
222:05 - telling him
222:06 - get your fat butt up
222:12 - and then another loop another loop we
222:14 - wrote was this counter one
222:16 - and then we said while counter
222:20 - is less than 10 so this will run 10
222:23 - times but not because of that but
222:25 - because we're in an increment counter
222:27 - counter equals counter plus one now
222:30 - another way to write it which is very
222:32 - common is we'll see counter plus equals
222:34 - one
222:36 - okay that's the same way of writing that
222:39 - statement and then here's another
222:40 - writing that same statement we can say
222:42 - counter plus plus
222:44 - they're both the same statement and I
222:46 - can prove to you in the command line
222:48 - over here
222:50 - let's say we have count we set it to
222:53 - zero if I do count plus plus count plus
222:57 - plus oh actually never mind I take that
222:59 - back python does not have that so let's
223:01 - try count equals zero and let's go count
223:04 - plus equals one and now let's go count
223:06 - boom we get back one okay so ignore that
223:10 - I said that that was wrong
223:11 - okay and count because in JavaScript
223:14 - which I've been using a lot of lately
223:15 - right that has plus plus and other
223:18 - languages like Java itself has it and
223:21 - I'm sure C plus plus and other languages
223:23 - probably have it too so count plus
223:25 - equals one will increment it by one and
223:28 - so will count equals count plus one
223:31 - and now I'm gonna go count it's two now
223:34 - okay let's go count plus equals one
223:36 - let's print count we get back three and
223:39 - you get the idea so that's how you can
223:40 - increment it so we're going to go ahead
223:42 - and increment it like this
223:44 - counter Plus
223:46 - equal one okay and then print counter
223:50 - and uh I'm gonna comment this line out
223:53 - so it doesn't put me in in an infinite
223:55 - Loop I'll comment all of that out and
223:57 - let's run this
223:59 - okay and you could see I get
224:03 - zero one two three four five six seven
224:05 - eight nine
224:06 - okay I get all the way up to nine
224:09 - so that's how while while loops work and
224:12 - that's how you have to end them so make
224:14 - sure you always have a statement that
224:16 - allows you to break them majority of the
224:18 - times though you won't really need to
224:20 - use while loops and I tend to avoid them
224:22 - as much as I can because it makes code
224:24 - look not as clean uh not pretty there
224:28 - are some times you need to use them like
224:30 - if we're creating a game and that game
224:32 - just needs to be running infinitely long
224:34 - meaning the user should be able to play
224:36 - it the entire time yeah that you'll
224:38 - probably have to put in a while loop so
224:40 - there's certain situations where a while
224:42 - loop does make sense but most situations
224:46 - like this one I would just do with a for
224:48 - Loop it'd be much easier to do this with
224:50 - the for Loop okay but this pattern here
224:53 - will be important like setting a
224:55 - variable outside of the loop and then
224:56 - incrementing it through the loop
224:58 - uh that pattern is important so don't
225:01 - forget that and don't make this mistake
225:02 - of putting the counter inside of the
225:04 - loop because you keep setting it to zero
225:06 - over and over and over again so just max
225:09 - it'll increment to two is one because
225:11 - you'll increment it to one then you'll
225:13 - come down and you'll set it back to zero
225:15 - then it'll do zero plus one and you'll
225:17 - get one go against zero one so you wanna
225:20 - put the initial one outside of the loop
225:23 - outside the scope of the loop and then
225:26 - you just keep incrementing that one
225:28 - you want to repeat the amount of times
225:31 - you're incrementing it by one you don't
225:32 - want to repeat the amount of times
225:33 - you're setting it to zero you only want
225:35 - to set it to zero once okay that's
225:37 - basically what I'm trying to say
225:39 - all right so there you go those are
225:42 - that's an intro to while loops with that
225:44 - said I'm gonna go ahead and comment this
225:46 - out and we'll move on to doing some
225:48 - interesting fun exercises
225:51 - so let's go ahead and do that now
225:54 - all right let's do some practice
225:57 - exercises with everything that we've
225:59 - learned so let's just start with lists
226:02 - okay so what if I have numbers
226:06 - okay and I want to double these numbers
226:10 - so basically what if I want you to write
226:13 - something
226:14 - that when I call it let's say I call it
226:16 - double and I give it this array here
226:21 - okay it returns Back to Me 2 4 6.
226:27 - eight and ten
226:30 - okay so if I call that it should double
226:33 - everything up and spit that back out to
226:36 - me
226:37 - how could I do that how could I create
226:39 - something that does that well let's go
226:41 - ahead and let's create uh a function and
226:44 - we'll call it double
226:46 - okay
226:47 - and let's say it takes in some argument
226:50 - numbers okay I'll remove this numbers
226:52 - here for now because you should
226:54 - immediately know that this is a function
226:56 - right and this is a function call and
226:59 - it's taking in an array okay or a list
227:03 - rather
227:04 - so I could give it a list type so let's
227:07 - actually see is it list or is it list
227:09 - yeah it lists with a lower case is going
227:11 - to be fine so I could do add type
227:14 - hinting in here as well and I could say
227:16 - that it returns a list
227:18 - okay so double is the numbers takes in a
227:20 - list Returns the list
227:22 - you don't need to add in the type
227:24 - hinting but let's just practice
227:26 - everything that we've learned so far
227:27 - okay it's not going to really change the
227:30 - code in any way if you remove this
227:34 - it's it's not right the code is going to
227:36 - remain the same but I like to just leave
227:38 - this here for now
227:39 - okay and now in order to double this
227:42 - list of numbers that we're getting
227:44 - well how can we do that so what I want
227:46 - you to do is try see if you could give
227:49 - this a try and do this yourself you have
227:53 - most of the puzzle pieces to be able to
227:55 - do this yourself it would be a little
227:57 - challenging to do it said we had
227:58 - difficulty of six or seven right now
228:00 - because there'll be a lot that you'd
228:02 - have to figure out okay
228:05 - but take about five seconds right now to
228:07 - pause the video five four three two one
228:10 - all right great let's do this together
228:12 - so the first thing I'm gonna do is I'm
228:14 - gonna create a
228:16 - um an empty array here that's gonna
228:19 - that's gonna store all of my values okay
228:22 - and now the pattern I'm going to use is
228:24 - I'm going to keep appending to this list
228:26 - okay so I'm going to make this list here
228:28 - and I'm going to keep appending to this
228:30 - list right here so let's write our Loop
228:32 - and I will say
228:34 - for numbers
228:36 - for number and numbers for now let's
228:40 - just say print number
228:42 - okay if I run my code nothing should
228:45 - come out right nothing should work here
228:46 - hope make sure everything that you've
228:48 - written so far is commented out
228:51 - and now I'll call this function double
228:53 - and we'll give it an array so I'll say
228:56 - one two three
228:58 - and we'll give it a list one two three
229:00 - and you could see it's printing them out
229:02 - so I'm calling the function and the
229:04 - function is working as expected great
229:07 - okay this function I'm happy that this
229:10 - function is working as I want it to work
229:14 - now what I want to do is I wanna
229:17 - append it to this array so let's try
229:20 - that so I'm going to say result
229:22 - dot append and I'll just keep adding
229:25 - those numbers so let's go ahead and do
229:26 - print result
229:29 - and the result remember I'm printing it
229:31 - outside of the loop if I put it inside
229:34 - of the loop it'll print it out every
229:36 - single time right it's a pending so one
229:40 - the first time
229:41 - okay so if I do this and I run this the
229:44 - first time you'll see was one then it
229:46 - was one comma two then one two three
229:48 - okay if I put it in the most accurate
229:51 - place I would be right here and you
229:52 - could see it starts off as empty then it
229:55 - goes to one and it goes to one comma two
229:58 - right and then we will print the final
230:01 - one
230:02 - so let's run this
230:04 - you can see it starts off empty then
230:06 - prints out then appends one to that
230:08 - array then it appends a two to data rate
230:12 - then it depends a three to that list
230:14 - right so again I'm going to be using
230:16 - arrays interchangeably right because
230:18 - I've used a lot of JavaScript so lists
230:21 - whenever I say array just think list
230:23 - okay so I have this result list and I
230:25 - just keep appending to that list again
230:27 - and again well if I want to double the
230:30 - numbers at this point it's very simple I
230:32 - just append
230:34 - double that number
230:36 - okay and so let's do this you should see
230:39 - this so like first iteration I go
230:41 - through
230:42 - is empty then the first iteration I go
230:45 - through I append this
230:47 - okay I appended two then the next
230:49 - iteration I go through I append A4 and
230:52 - then I append a six and every single
230:54 - time it just keeps doubling
230:57 - okay now what I want to do at the end is
231:00 - I don't need it to say print
231:03 - and here I just needed to say return so
231:06 - I can say return
231:09 - result
231:10 - okay return result and now if I run this
231:13 - you'll see nothing so we will have to do
231:16 - print
231:18 - and now we will see the final result
231:21 - it's two four six okay so now it's
231:24 - working
231:26 - so this is how
231:27 - you can uh double
231:30 - a list okay if I've given you a list you
231:33 - can double it this is a very common
231:35 - pattern so remember this pattern and
231:36 - like practice it and write this code and
231:39 - write it again from scratch but this is
231:40 - how it works you have a result
231:42 - you you create a empty array then you
231:45 - keep appending to that array and then
231:47 - you you keep a pen you create an empty
231:51 - list you keep appending to that list and
231:54 - then you return that list okay that's
231:56 - how that works so
231:59 - very common pattern okay and let me
232:03 - actually even write it down very common
232:04 - pattern
232:06 - create empty list
232:10 - Loop through
232:12 - and append to that list return
232:18 - that list okay this is a very common
232:23 - um pattern I don't know if it has a name
232:25 - or not but this is but this is a common
232:28 - pattern so just remember that this is
232:31 - something that you do okay so just take
232:33 - note of it memorize it this you're gonna
232:35 - be doing a lot of this in your code okay
232:38 - so it's like if you wanna you know if I
232:41 - go back to Netflix and we have a list of
232:43 - movies here we have a list of movies
232:46 - right so maybe I have a list that's
232:48 - called trending now
232:51 - trending now list right and the start
232:54 - that list is empty trending now and then
232:56 - I keep looping through and I keep
232:58 - putting items
232:59 - inside of that so I keep looping through
233:03 - just like for a movie like if I go to
233:05 - Netflix here right the loop that's
233:07 - written here and the trending now is
233:09 - pretty much like very simple it's it's
233:11 - basically for movie
233:14 - in
233:17 - trending movies
233:19 - and then it'd be like
233:21 - print or output somehow movie
233:26 - okay and then it like shows you each of
233:28 - those movies it just Loops through and
233:30 - makes puts this here Loops through puts
233:33 - this here Loops through put this here
233:34 - Loop screw puts this here so that's
233:37 - effectively what's happening inside of
233:38 - that Loop oops well we're already
233:41 - shooting the Python tutorial but thank
233:42 - you for the reminder appreciate it so
233:44 - yeah you want to Loop through and you
233:46 - keep uh pending and that's what's even
233:50 - on Netflix did they make a list they
233:52 - keep appending through to that list then
233:54 - they append all the trending now movies
233:57 - and then they put it in the list and
234:00 - then show it okay so that's yeah long
234:05 - um explanation of this but I think I
234:07 - just want to drill that point home in in
234:09 - multiple different ways now there are a
234:11 - lot of other cool things that lists
234:13 - allow us to do too for example before
234:16 - there were there's a method there's some
234:19 - methods that we have that we could call
234:21 - on strings okay and uh lists can help us
234:26 - with that so I'll give you an example
234:27 - let's create a new function so I'm going
234:29 - to comment out this print call right
234:31 - here
234:32 - and we'll create a new function and I'll
234:35 - call this function I'll just write the
234:37 - documentation for it real quick and
234:39 - it'll be count Words count Words okay
234:42 - this is this is how I'm going to call
234:43 - the function and this function I'm going
234:46 - to give it a string like
234:48 - hi my name is qazi okay or let's remove
234:53 - any kind of special characters for now
234:55 - and so I'll just say hi my name is qazi
234:56 - and when I call this function what it
235:00 - should return to me is it should say one
235:04 - two three four five so there's five
235:07 - words should return a five so
235:10 - count Words function should count Words
235:14 - should count
235:17 - um
235:17 - if given a string should count and
235:21 - return number of words okay so that's
235:25 - the function count Words that's what it
235:27 - should do so I know it takes in a string
235:29 - and then it returns a number
235:31 - so if I want to create this here's what
235:34 - I'm going to do I'm going to create a
235:35 - function we'll call it count Words it
235:38 - will take in
235:39 - some input from the user so we'll say
235:42 - you know phrase from the user
235:45 - and based on that phrase that phrase
235:48 - will be a string so I can just put that
235:49 - in the documentation so phrase is going
235:51 - to be a
235:52 - string
235:55 - okay
235:56 - uh just a little note so you could
235:59 - create a type hint here if you want you
236:01 - could go it'll be a
236:03 - phrase will be a string and then we
236:05 - return an integer okay so you could do
236:09 - that but I'm going to remove this one
236:11 - okay so I'm just going to keep it like a
236:13 - basic one right now all right and let's
236:15 - go ahead and just print out the phrase
236:17 - for now let's call this function and
236:18 - I'll say print
236:20 - I don't need to say print here I'll just
236:22 - say count Words and I'll say hi my name
236:25 - is qazi and let's run this and you
236:29 - should just see hi my name is Kazi here
236:31 - for now
236:33 - right there right so that's good that's
236:36 - that's really good for now the next
236:37 - thing I want to do is I want to find out
236:42 - well how long how how many words are
236:47 - here how do I find that out so check
236:49 - this out there's something really cool
236:51 - that we could do with strings so I'm
236:53 - going to zoom in here so you could see
236:55 - better
236:55 - and
236:57 - there's something awesome that we could
236:59 - actually do with strings okay and what I
237:01 - could do with strings is I could go hi
237:03 - my name
237:04 - and you could call this method it's
237:06 - called dot split
237:09 - okay and if I do a DOT split on a string
237:12 - it will actually
237:15 - split that string
237:18 - based on
237:20 - um empty spaces so wherever it sees
237:22 - empty spaces it just removes them and
237:25 - and then it turns the rest of it into a
237:27 - list like that okay for example imagine
237:31 - I had high my name
237:35 - is
237:36 - okay or imagine I have a CSV file like
237:39 - an Excel file maybe if you've ever seen
237:41 - one like that and it says age comma
237:43 - gender comma height comma sex
237:48 - right if I if I have this well and I and
237:51 - I have it as a long string if I want to
237:55 - get a gender height sex I want to get
237:57 - all those headers and attributes and
237:58 - store it in a list I can if I call Dot
238:01 - split here well that won't work because
238:03 - it's still putting the commas in here
238:05 - and it's just giving me back one string
238:08 - that's not what I want so what I could
238:10 - do is I could split it by commas I could
238:13 - tell it splitted by commas once I do
238:15 - once I do that it actually
238:18 - removes the columns from the string so
238:21 - then I have a gender height sex and as
238:24 - four separate attributes so it's four
238:28 - separate properties right and that's
238:29 - what I that's more of what I want so
238:31 - split is a really cool method and when
238:35 - you call it on a string that has spaces
238:37 - what you're doing is you're basically
238:40 - saying
238:41 - splitted by empty spaces just like this
238:43 - when I run this this will work now
238:46 - notice that
238:48 - this line over here dot split and then
238:51 - dot split with empty spaces
238:54 - Returns the same result interesting
238:57 - right they're returning the same result
238:59 - right here because by default if you
239:01 - actually don't pass anything into this
239:03 - dot split method on a string by default
239:07 - it will it will put this I'll assume
239:10 - you're you're asking for an empty string
239:11 - Okay so
239:14 - we know that we could call the function
239:16 - Len
239:17 - to find out the length of our list
239:23 - right so if I can actually take these
239:26 - words and I can split them well then I
239:28 - can actually find out the length of my
239:31 - string right or that phrase that I
239:34 - passed it so zoom out here so see if you
239:39 - could actually see if you could give
239:41 - that a try
239:42 - all right and see if you could make this
239:44 - function work I think at this point you
239:46 - have enough information to be able to
239:48 - put this together if not that's all good
239:50 - too so I'll give you five seconds to
239:51 - pause five four three two one time all
239:58 - right let's go ahead and do this
239:59 - together if you were able to do it great
240:01 - if you're not that's okay too we'll now
240:03 - do this together
240:05 - so here's what I want to do I'm gonna
240:08 - take my phrase and I'm gonna split it
240:10 - okay and then let's just print uh let's
240:14 - print
240:15 - [Music]
240:16 - um
240:17 - this out and I'll remove this here so
240:19 - let's run this
240:20 - and when I give it High see
240:23 - this line over here it's saying hi my
240:26 - name is uh
240:27 - cozy
240:29 - right and boom it's showing me all this
240:31 - stuff there and everything is split boom
240:35 - hi my name is cozy so I already know
240:37 - well then what can I do actually well I
240:40 - can actually call the function Len on
240:43 - that so for example phrase.split
240:47 - gives me that and then what I'll do
240:51 - essentially is I'll just call the
240:53 - function I'll wrap this and I'll just
240:55 - call the function Len on it that's what
240:57 - I'm doing here
240:58 - so I'm just taking this
241:00 - right boom because that's where that's
241:02 - going
241:04 - right there and then I'm calling the
241:06 - function Len on it so it'll just give me
241:09 - the length of that
241:10 - okay
241:11 - so let's go ahead and run this and there
241:15 - we go count Words is five so count Words
241:19 - now I can remove this return uh this
241:22 - print and write return right there and I
241:25 - could actually turn it into a one line
241:27 - solution so let's go ahead and print
241:30 - and you can see count Words is a very
241:33 - simple one-liner solution and
241:37 - um
241:37 - yeah I can I can type in anything here
241:40 - cookies
241:43 - cream
241:47 - cream soda
241:50 - legendary
241:52 - okay so if I keep giving it words it
241:55 - keeps counting it and accurately so
241:58 - that's
241:59 - that's how
242:02 - count Words works if you were able to
242:05 - get it great if not that's all right and
242:08 - uh hopefully that gave you some more
242:10 - exercises with like and and methods that
242:13 - you could actually use with lists now I
242:15 - want to show you something very very
242:17 - very helpful to help you visualize for
242:20 - Loops or any type of Loops in general
242:22 - and this is a debugger that's actually
242:24 - built into replit and this is fantastic
242:27 - this is a fantastic debugger okay so
242:29 - debugging is a very useful skill and
242:32 - it'll help you a lot so what I'm going
242:33 - to do is um go ahead and uncomment this
242:36 - line out where we were printing double
242:38 - okay and let's comment
242:42 - let's comment this out as well okay
242:46 - and what I'll do is I'll put a break
242:48 - point here so if you see this blue thing
242:51 - that I just added right next to it you
242:53 - can do that by clicking here and
242:56 - unclicking here okay so just click right
242:58 - there and then get that blue point to
243:00 - show up okay so once you do that I'm
243:03 - going to go ahead and click this that's
243:06 - the debugger
243:08 - get that icon right there so let's go
243:11 - ahead and click the debugger and now you
243:13 - could see that it's currently saying uh
243:17 - let me make this
243:19 - let me do this so maybe the debugger
243:21 - looks a little bit bigger
243:23 - okay so there we go so it tells you the
243:25 - breaking point is on line 395. right
243:29 - it's this right here because that's
243:31 - where we're actually calling this double
243:33 - function from so it's a good idea to put
243:35 - the breaking point there
243:37 - now if I hit run on this it runs from
243:40 - right here
243:42 - okay
243:43 - and then there's already a couple of
243:45 - things here so it knows about special
243:47 - variables and it knows about function
243:49 - variables so special variables don't
243:51 - touch them that just ignore them they
243:54 - come with python so ignore this
243:57 - function variables you can pretty much
243:59 - ignore that too but all this is saying
244:01 - is hey since you defined all of these
244:03 - functions and we didn't comment them out
244:05 - right we have a ton of functions defined
244:08 - but just not commented out so if I keep
244:10 - going up
244:11 - you'll see introducer and all kinds of
244:14 - functions at the top that are that are
244:16 - defined and just not commented out right
244:18 - so let's go back down
244:20 - so that's what it's noticing so ignore
244:22 - that too for now okay ignore that too
244:24 - now hit this next step right over here
244:28 - Next Step
244:30 - so the first line of the code what it's
244:34 - saying is we are given numbers and
244:37 - numbers are one two three because the
244:39 - user passed it in so it already knows
244:41 - that this numbers over here is one two
244:44 - three at the moment okay that's all it
244:46 - knows because it's on that line right
244:48 - now now let's run another line so it's
244:51 - on this result line now now when I run
244:54 - the result line notice that it now knows
244:57 - a result is a variable that's
244:59 - instantiated as an empty empty list now
245:03 - it's telling me that it's going to run
245:04 - this line over here so let's hit next on
245:07 - this next step
245:08 - and now it says hey I know what numbers
245:12 - is and I know what result is already but
245:14 - now I know that number is an integer and
245:17 - it's one right it even knows their data
245:19 - types lists lists and integer so it goes
245:22 - hey I know what number is at this point
245:23 - because the first at the first Loop
245:26 - number is going to be a one then hit
245:29 - next again
245:30 - okay and now it can tell you hey I just
245:34 - ran this line over here
245:36 - and this is what happened result is a
245:38 - list now that list is not empty anymore
245:40 - it has two inside of it okay great I'm
245:43 - going to run line 390 again that's why
245:45 - it's grayed out right so let's run line
245:48 - 390 again
245:49 - boom and it says Hey number is now two
245:54 - run it again
245:55 - and it goes boom I just added four to
245:59 - the result
246:00 - okay
246:02 - let's run it one more time
246:04 - it goes hey I know that number is three
246:08 - so number is 3 here so it's going to be
246:10 - basically doing 3 multiplied by two and
246:14 - it's going to take six and append it to
246:16 - result and so after this line This
246:19 - result over here should have a six so
246:22 - let's give that a try and boom you can
246:25 - see that we have that six right there
246:28 - okay let's run it again and now it's
246:31 - going to that line return result finally
246:34 - so let's go ahead and run it again
246:36 - right it did that and then now it's
246:38 - going to the print line
246:40 - and it just printed out
246:43 - okay so that was a full step-by-step
246:46 - line by line exactly everything that
246:49 - happened
246:51 - and uh yeah so debugger can be very
246:54 - helpful
246:55 - uh in order for you to like find out
246:57 - what your code is doing okay so I I
247:00 - would highly recommend any part
247:02 - specialty loops and then to turn it off
247:04 - just hit this stop okay so you can turn
247:07 - it off but for visualizing Loops very
247:11 - very very helpful okay very helpful
247:14 - all right now we'll do some more
247:16 - practice still with lists because this
247:19 - is going to be key okay so we're going
247:20 - to just keep sharpening this sword now
247:23 - let's say that I have
247:25 - um okay so let's say this right if I
247:29 - call a function
247:31 - uh and we'll call it some list
247:35 - okay if I call this function and I give
247:36 - it one two three it should return back
247:39 - to me is six so what's happening here
247:42 - I'm summing up this entire list
247:45 - okay create a function that can
247:50 - that given
247:52 - a list of numbers
247:54 - it can return their sum so we're going
247:58 - to go ahead and create this function
248:01 - how do we do that how would we do
248:03 - something along those lines
248:05 - so think about this there was a pattern
248:09 - there's a couple of patterns we've used
248:11 - in the past so I would say that if you
248:13 - give this a try right now it'd be of a
248:15 - difficulty seven out of a ten and you
248:18 - could do this because you have all the
248:20 - tools available so what I'm going to
248:22 - tell you is that it's gonna use this
248:25 - counter pattern that we had created
248:27 - earlier it's going to use similar to
248:30 - this pattern right here
248:31 - okay where we did Count plus equals one
248:34 - but instead of count plus equals one
248:36 - you're going to do plus equals something
248:37 - else
248:38 - so you could give that a try I'll give
248:40 - you five seconds it'd be challenging and
248:42 - then we'll do this together five four
248:44 - three two one okay let's go ahead and do
248:48 - this together now
248:50 - so
248:52 - obviously I Know This Much the function
248:55 - is going to be called some list and it's
248:57 - going to take in some numbers
249:00 - okay now I know that that's going to be
249:03 - a list data type
249:05 - and I can further type hinted to say
249:07 - list of integers
249:09 - okay so again we don't need to do this
249:12 - and I know it'll return an integer okay
249:15 - this much I know about this function so
249:17 - I can get rid of it for now just so I
249:19 - can keep this simple
249:21 - all right so some list is going to take
249:24 - it numbers and it's going to sum up all
249:26 - of the numbers and then return them so
249:27 - the first thing I'm going to do is I'm
249:30 - going to
249:31 - uh say
249:33 - count and I'm going to set it to zero
249:36 - then what I'll do is I'll Loop through
249:38 - these numbers okay so I'll say for
249:40 - number in numbers
249:43 - and let's actually comment this out for
249:45 - now and let's actually try this manually
249:47 - first I think that'll really help you so
249:50 - let's try how would we do this manually
249:51 - if I gave you numbers and they were
249:55 - one two three and four how would you do
249:58 - this manually well you'd first go
250:01 - through
250:02 - and you would do you know numbers
250:06 - uh uh you would create
250:10 - you know account and you set it to zero
250:13 - and then you'd basically go through and
250:15 - you say okay I'm going to take counts
250:17 - and I'm gonna plus equals it by numbers
250:21 - of zero okay so that by doing that I'm
250:24 - incrementing count by that right so for
250:27 - example let's go ahead and put it in the
250:30 - console here so we could visualize this
250:32 - better so I'm going to set count to zero
250:35 - and I'll set numbers to this okay now
250:38 - I'll increment it by the first element
250:41 - in that array I'll increment count
250:44 - and let's go ahead and see count so
250:46 - count is now one now I'll increment
250:48 - count by the second element in the right
250:52 - which is the two now count should be
250:54 - three then I'll increment count by the
250:58 - third element in the array which is the
251:00 - three
251:01 - show the count should be six and then
251:04 - I'll increment it by the fourth element
251:06 - in the list
251:07 - and then let's go ahead count and you
251:09 - could see count says 10. okay that's the
251:12 - pattern that I would have so in effect
251:15 - I'll be writing this
251:19 - and this
251:21 - and this
251:23 - multiple times copying pasting doing it
251:25 - by hand and then
251:27 - I'll print out my my account and that
251:31 - will be the the sum right
251:33 - okay so let's do it in a loop now so
251:36 - we'll set for number in numbers
251:40 - and we'll say count and we'll just
251:42 - increment it by the number and then at
251:45 - the end we'll just say return count okay
251:48 - now let's go ahead and give this a try
251:51 - so I'm going to go ahead and say print
251:54 - some list
251:56 - and we'll give it one two three
252:00 - and let's see what happens
252:02 - boom there you go that worked Let's uh
252:06 - comment out any other print statements
252:08 - we have let's comment this out right
252:10 - here let's run it again you can see
252:12 - we're getting back six now what if I put
252:15 - a 4 in there as well comma 4 that should
252:17 - get me to a 10.
252:19 - and yep I see a six and I see a 10. so
252:23 - my sum function is working correctly my
252:27 - sum list function so let's go here so
252:29 - that was yet another practice for you to
252:32 - do okay and we're gonna do
252:34 - you know I would say let's at least do
252:36 - one more practice okay so this is good
252:39 - practice for us
252:41 - but loops and
252:43 - loops and lists combined there's so much
252:48 - you could do with coding with that so
252:49 - that's why you want to keep drilling
252:51 - those practice skills and getting better
252:53 - at it okay now I'm going to comment out
252:55 - both of these
252:56 - and now what we'll do is we'll say We'll
253:00 - create a find Max okay and find Max if
253:04 - you try to do it yourself that would be
253:05 - a challenge of 9 or 10 difficulty
253:07 - because you don't necessarily have full
253:10 - on you kind of have the tools to do this
253:12 - but it's it's but it's a difficult one
253:14 - if you want to do it by yourself it'll
253:16 - be a pretty difficult one okay so we
253:20 - want to make this one fine Max that
253:22 - finds a Max from a list so for example
253:24 - if I give it a list of one two three
253:26 - four it finds this so let's go ahead and
253:28 - create
253:29 - comments for this I'm going to say find
253:31 - Max okay
253:34 - and then I will give it one five
253:38 - ten three if I do that it should return
253:42 - 10 that's what find Max should do okay
253:45 - well how are we how on Earth are we
253:48 - going to make a function that can go
253:51 - ahead and do this so if you want to give
253:52 - it a try pause the video now give it a
253:54 - try and otherwise let's keep going okay
253:58 - so I'm going to go ahead and create a
253:59 - function it's going to obviously be
254:00 - called find Max okay find Max and then
254:04 - it's going to take in
254:07 - you know a list of integers and I don't
254:11 - need to type hints okay but I'll just go
254:13 - here it's going to take in a list of
254:15 - numbers you could add in type hinting
254:17 - after you're done writing your entire
254:19 - function that way it doesn't take up
254:21 - cognitive load mentally from you but it
254:24 - makes your code more readable when
254:26 - looking at it later it's going to take
254:28 - in numbers and it's going to find the
254:31 - max well how I want to do this is I want
254:35 - to set the current Max
254:37 - okay
254:39 - and I'll set the current Max to the
254:43 - first item inside of that list okay so
254:47 - if I was to do this by hand
254:49 - I'd probably have current Max
254:52 - and I'll set that set that to the first
254:54 - element in that list right so if you
254:56 - gave me a list and you said hey Kazi
254:59 - you know
255:01 - here are the numbers and you said there
255:04 - are 1 5 10 comma three just like that
255:07 - well I would probably set the current
255:08 - Max to 1.
255:11 - okay or in other words
255:13 - I would set it to numbers of zero
255:16 - okay the first element of that list
255:19 - and then what I would do is I would go
255:23 - because we're assuming this is a really
255:25 - large list right because if it was a
255:27 - really really large list you couldn't
255:29 - just you wouldn't just be able to
255:31 - eyeball it is what I'm saying Okay so
255:34 - let's say this was like a really large
255:35 - list and there was like some some Max
255:38 - number in there you wouldn't just be
255:40 - able to eyeball it'd be too hard okay so
255:43 - I'm gonna command Z this and make this
255:44 - back to the small list that it was
255:47 - right because that's usually the real
255:49 - data you're working with real data is
255:51 - like massive right here we're just using
255:53 - some dummy variables dummy lists making
255:55 - them small so we can conceptually
255:57 - understand what's happening
255:59 - okay so I would have this and I'll set
256:02 - the current Max to this then what I
256:04 - would do is I would just go through each
256:07 - of these items and I would compare this
256:10 - and this
256:12 - and if I found out that this item was
256:16 - greater than this item this number right
256:19 - here
256:20 - I would replace current Max with this
256:24 - new current Max
256:25 - and then I would compare
256:27 - right then you would compare
256:30 - this and this
256:32 - and if this was greater than the current
256:34 - Max
256:37 - uh then I would set this to the current
256:39 - Max and then I would compare this
256:41 - against the current Max and if this was
256:43 - greater than the current Max and it set
256:45 - at the great current Max otherwise I
256:47 - would just Skip and ignore and keep
256:49 - moving okay that's the pattern so
256:52 - basically I would check you know uh
256:56 - through the through the loop I would say
256:57 - hey
256:58 - is oh let's just start with that so I'll
257:01 - say is
257:03 - um and I'm just writing this in English
257:05 - for now one greater than current Max and
257:08 - then it would say the answer is
257:11 - no
257:12 - so then I just continue moving and I
257:14 - would say is in the second Loop I'd say
257:16 - is 5 greater than current Max what I'm
257:19 - writing here is called pseudocode it's
257:20 - helpful to write code in English like
257:23 - this because you can before you end up
257:25 - writing actual code you can just
257:27 - visualize what the heck is happening and
257:29 - then you could syntactically turn it
257:31 - into actual code and it's an easy way of
257:32 - doing it it's five greater than current
257:34 - Max the answer is yes since the answer
257:37 - is yes I'll say current Max is now equal
257:40 - to five okay then I'll go through again
257:43 - I'll say current Max
257:45 - then I'll say is 10 greater than current
257:48 - Max
257:50 - and since the answer is yes I will say
257:52 - current Max is equal to 10. okay
257:55 - here we'll just say
257:57 - go to next number
258:00 - okay that's what's happening here so if
258:01 - it's no go to next number
258:03 - and then I'll go is three the last item
258:07 - in the loop greater than current max if
258:11 - that's that's a no okay well then just
258:16 - um and the loop because we know we're at
258:19 - the last number and it will
258:21 - automatically end the loop so that's
258:23 - really the algorithm that we would write
258:25 - now I'm going to go ahead and comment
258:28 - all of this out so the pseudo code is
258:30 - there and we can use the pseudo code to
258:32 - create our real code okay all right so
258:36 - let's go boom
258:38 - and I will say
258:41 - for number and numbers
258:44 - if number greater than current Max well
258:49 - then set the current Max to the number
258:53 - to whatever number is
258:55 - and that's really it I don't really need
258:57 - to do anything else and then once we're
258:59 - done with the loop just return current
259:02 - Max
259:04 - okay and um yeah let's give it a try
259:08 - because that's essentially the logic so
259:11 - let's go ahead and say find Max and I'll
259:14 - give it one two three ten Seventeen four
259:19 - six five six let's run this
259:24 - and look at that it found the current
259:27 - Max so damn damn fast right now if I
259:32 - copy this
259:33 - and I just paste it a couple of times
259:36 - and we make we put a current Max like
259:39 - here of 19. let's see if we could find
259:42 - it
259:42 - it found it instantly right it found it
259:45 - really really fast okay now I'll make it
259:48 - smaller there we go and boom yeah it
259:50 - works every single time so that's how
259:53 - you would write it okay so again you saw
259:55 - that we had to work with lists here we
259:58 - had to do loops we have to do if else
260:00 - conditions so we had a for loop with the
260:02 - if else condition so that's probably
260:04 - something new you know that you might
260:07 - not have seen before so the the reason
260:09 - why you want to set it to the first
260:12 - element and you don't want to set
260:13 - current Max to be zero or something like
260:15 - that is if you did set it to zero and I
260:18 - tricked you and I just gave you like all
260:20 - negative numbers your when I run find
260:23 - Max you're going to return back a zero
260:25 - but like there is no zero in this list
260:29 - right so
260:32 - you want to set it as the first element
260:34 - of that list so you so instead I should
260:37 - have gone back like
260:39 - you know negative one because that's the
260:41 - biggest number out of all of these other
260:43 - numbers here so that's why numbers of
260:45 - zero is the way to do this okay so
260:48 - hopefully that gave you some solid
260:51 - practice with using lists all right so
260:54 - now since we did a little bit of
260:56 - practice with lists let's do some
260:58 - practice with dictionaries okay so
261:01 - dictionary practice
261:07 - um and just again just a friendly
261:08 - reminder you should be coding the entire
261:11 - time in maine.py since I'm Kazi I'm
261:14 - coding in here and at any time if you
261:16 - need notes or everything you're probably
261:18 - writing or will write is all in here
261:21 - okay everything that I'm writing will be
261:24 - made available to you in quasi.py so you
261:26 - could just go there and get access to
261:28 - all of this code okay just in case you
261:30 - couldn't follow along or anything for
261:32 - that reason okay so with dictionary
261:36 - um with dictionary practice what we're
261:37 - going to do is we're going to create a
261:39 - function
261:41 - and we'll call this word frequency and
261:45 - what this will do is it will take in a
261:48 - string so let's say I say
261:54 - I love Batman
261:58 - because
262:00 - I am Batman
262:04 - so weird string weird phrase to say so
262:07 - I'll take in a phrase which will be of
262:09 - type string
262:10 - and you'll notice
262:13 - that it is repeating certain words uh
262:16 - certain words a few times so let's go
262:18 - here and which this should return is a
262:22 - is a dictionary and that dictionary
262:24 - should basically say
262:27 - the word I should be the key okay I
262:31 - and it should say since it I happens
262:34 - twice it should say two times
262:37 - and then since love happens only one
262:40 - time it should say love is one since
262:45 - Batman happened twice it should go
262:49 - Batman two
262:51 - and then I is already done so if we
262:54 - ignore that and then m
262:57 - happens once okay so if you call word
263:00 - frequency on this I love Batman because
263:03 - I am Batman
263:04 - this is what it should actually return
263:06 - so what this is doing is it's telling
263:08 - you the frequency of uh whatever it is
263:11 - you're doing okay so let's go ahead and
263:13 - create this function so we're going to
263:15 - say Define word frequency
263:18 - frequency
263:20 - and it'll take in a phrase
263:23 - okay and then it'll give us this guy
263:27 - over here now the first thing I notice
263:29 - when I do this is I imagine usually with
263:33 - the string by itself there's not really
263:36 - much you could do with it so I would
263:38 - want to turn this into a list that's
263:40 - probably the first thing I'm thinking
263:42 - okay so let's go ahead and do that so
263:45 - I'll do phrase
263:46 - and it's all of these words are
263:49 - separated by a space right so I can
263:52 - actually just do phrase
263:54 - phrase dot split by empty space or just
263:58 - remove this and by default it's actually
264:01 - putting that
264:04 - and let's go ahead and print this
264:07 - all right and we'll call this function
264:09 - now word frequency
264:12 - frequency and the phrase will give it is
264:15 - this I love Batman because I am Batman
264:18 - so let's give it that okay and let's run
264:21 - our code and comment everything else out
264:23 - in the meantime
264:24 - Okay so
264:26 - yeah you see it turned it into a array
264:29 - or a list right and we have these inside
264:32 - of the list now this is where a
264:34 - dictionary is going to be really helpful
264:35 - to keep track of all of this because
264:36 - dictionary can have only unique keys so
264:41 - if I appears twice in a dictionary it'll
264:44 - only appear once
264:46 - so what I want to do is here's how I
264:49 - would do it if I kind of did it manually
264:51 - okay so I'd kind of create a dictionary
264:53 - I'd create an empty dictionary
264:55 - okay so I'll just say result or
264:57 - something like that and then I would
264:59 - Loop through this list over here okay
265:02 - which is which has all the words in it
265:05 - and I'd say something along the lines of
265:09 - like okay if I get I
265:13 - um the first question I'll ask is is I
265:17 - in result okay I'll look inside of this
265:20 - dictionary and see if if it's already
265:22 - there
265:23 - if I is not
265:27 - end result because they'll say no in the
265:30 - start then what we'll do is I'll say
265:32 - okay
265:33 - set
265:34 - create
265:36 - a new key value pair
265:43 - okay and we'll say set the key value to
265:48 - I
265:51 - and sorry set the key
265:54 - to I
265:55 - and the value to zero okay so basically
266:00 - in other words I'm gonna do this I
266:04 - and I'll say zero because it didn't
266:06 - exist
266:07 - so this is
266:08 - this is just Loop Number One
266:12 - okay Loop one
266:14 - then we'll Loop through uh the second
266:16 - time right we'll go again we'll go to
266:19 - the second iteration of the for Loop and
266:21 - we'll be on this word love because we'll
266:23 - do something like forward in words you
266:26 - know or for word and phrase or whatever
266:29 - this whatever we're going to call this
266:30 - list over here so for word and words
266:32 - let's just say the first time word is
266:34 - going to be I the second time the word
266:36 - is going to be love so I'm going to say
266:37 - is love
266:40 - in result the answer is no well then
266:44 - we're just going to follow the same
266:45 - logic
266:48 - and we'll say set the key to I and value
266:51 - to zero okay and I'll remove this and
266:53 - because it's the same thing so like set
266:55 - the key to I and value 2 or in this case
266:58 - we'll set the key to love and value to
267:01 - zero because this is
267:02 - and I apologize the value should be one
267:05 - because this represents that it's been
267:07 - found one time so there we go one so
267:09 - it's like hey I've this is this I has
267:12 - been found one time so I'll set it to
267:13 - one not zero
267:15 - then we'll loop again
267:17 - so I'll copy paste this format
267:20 - and we'll loop again the third time and
267:23 - we'll find the word Batman is Batman and
267:25 - the result the answer is no since the
267:27 - answer is no we'll set that to one this
267:29 - is the third Loop then we'll Loop
267:32 - through the fourth time
267:35 - and we'll find the word because and
267:38 - since this is a no we'll set the key to
267:41 - and value to one let's Loop through
267:44 - again and now we get to kind of the
267:46 - interesting part and we get to the I is
267:49 - I in result the answer is yes and so now
267:52 - we won't set a new key because the key
267:55 - is already there we'll say increment
267:59 - the value of
268:03 - of
268:04 - result of
268:07 - um
268:08 - I
268:10 - buy one
268:12 - okay so we'll increment the result
268:15 - increment the value of that key
268:19 - okay or in in English I'll say of
268:23 - this key of the I key by 1.
268:27 - okay then we'll Loop through it again
268:31 - we'll what will we find now you help me
268:33 - with this okay what will we find what's
268:35 - the next word I love Batman because I
268:38 - and what's the word we're going to use
268:40 - here
268:41 - am right so this is going to be m
268:44 - then
268:45 - is m in this result dictionary yes or no
268:50 - it's not
268:51 - um and by the way I wasn't updating this
268:53 - dictionary but this dictionary would be
268:55 - getting updated the entire time right so
268:57 - so result to one and then we'll set
269:01 - um
269:02 - Batman to one as well right after this
269:05 - and then four would do
269:08 - we'll say because
269:10 - whoops
269:12 - we'll say
269:14 - because and it's because I don't want
269:16 - this running uh along the entire line I
269:20 - will do this so you could see key value
269:22 - pairs on every single line
269:24 - so I said because we'll set that to one
269:27 - and then it'll bring us to
269:30 - I again and we'll say I because I
269:34 - and now we'll increment the value of
269:36 - this I to 2 instead of actually adding a
269:39 - new key
269:41 - okay and then we'll say am and am is
269:45 - that in the result uh dictionary yes or
269:48 - no no right it's not so it's we're going
269:51 - to say no we're going to increment the
269:53 - value of uh we're not going to increment
269:56 - the value we're going to set the key
270:00 - to uh
270:03 - to M and value to 1.
270:08 - okay so we're going to go ahead in here
270:09 - we're going to say key I'm sorry not key
270:12 - but M and we'll say one
270:16 - okay and then the last Loop that we're
270:18 - gonna do is going to be the increment
270:21 - Loops I'll copy this Loop seven
270:24 - and is Batman and result the answer is
270:28 - yes increment the value of Batman Key by
270:31 - one so since we're going to do that we
270:34 - won't add a new key we'll go to the
270:37 - existing Batman and we'll increment it
270:39 - and we'll put it as two okay so that's
270:41 - how we would do it manually if we were
270:44 - doing this all right now let's go ahead
270:46 - and turn all of this into code so first
270:49 - up I'm going to comment this entire
270:51 - thing out
270:53 - and then we're going to go ahead and
270:54 - write the code so I'm going to say
270:56 - Define and I think I have my
271:00 - function already here so I'll actually
271:03 - just
271:06 - okay let's uh let's write up top let's
271:08 - write up top because Bunch everything is
271:10 - already there so let's write our
271:12 - function here
271:13 - okay we're going to follow that same
271:15 - logic so in the start I'm going to
271:17 - create an empty dictionary
271:20 - okay it's just going to be empty there's
271:21 - going to be nothing in there right now
271:24 - um and if you create empty squigglies
271:25 - you might think this is a set but no
271:27 - this is going to be a dictionary and you
271:30 - can check it here you can say type of
271:32 - empty squigglies and you will see these
271:36 - curly braces or squigglys or whatever
271:38 - you want to call it class is dictionary
271:40 - so it assumes it's a dictionary instead
271:42 - of an empty set okay and that's what we
271:44 - want we want a dictionary
271:46 - okay so
271:48 - um result is this for now then I'm going
271:52 - to Loop through
271:53 - okay we'll say
271:56 - this split is just words right because I
271:59 - get back a list of all the words and
272:01 - I'll say for word and words
272:04 - if word in result if the word is already
272:07 - in result
272:09 - in that case what I want you to do is
272:12 - incremented by one okay or in other
272:15 - words if we follow our logic I'll say if
272:18 - the word is not in result then I want
272:21 - you to set the key okay so how we're
272:23 - going to set the key and I'm going to
272:24 - say result
272:26 - and we'll create a new key and the key
272:29 - will be titled that specific word and
272:31 - also set the key to one
272:34 - otherwise else if it is inside a result
272:38 - if it is found well then we'll just
272:40 - increment result
272:43 - um buy one
272:45 - okay and then at the end let's go ahead
272:48 - and return result okay
272:51 - and uh let's go ahead and run this
272:56 - and of course we forgot to call Print
272:58 - here that's why it didn't show so let's
273:00 - go ahead and print and run this
273:04 - all right there we go we're getting back
273:07 - exactly this right over here you can see
273:10 - I is two loves one Batman is two because
273:15 - oh my bad should have said because
273:20 - one
273:23 - right because
273:25 - is one and then m is one right there
273:28 - okay so this works perfectly so
273:32 - hopefully this was not too overwhelming
273:35 - or too confusing
273:37 - because we're just building on top of
273:39 - you know essentially every single
273:42 - step that we had previously done now if
273:45 - we want to make the input uh Dynamic for
273:48 - the user we could go ahead and say
273:52 - word frequency and then let's say that
273:56 - it takes an input from a user please
273:58 - enter your phrase
274:01 - okay now if I run this and I comment
274:04 - this out it's going to ask me right here
274:07 - please enter your phrase and let's go
274:09 - ahead and practice this so I'll
274:14 - I'll go ahead and enter my phrase here
274:16 - and I'll say I like to eat cookies
274:21 - boom I like to eat cookies right let's
274:23 - run let's run it again let's say cookies
274:26 - cookies cookies cookies
274:30 - I am a bookie bookie bookie bookie let's
274:34 - run that hit enter and cookies it
274:37 - happened three times
274:39 - um cookies with a comma happen one time
274:41 - right because we haven't we haven't
274:43 - taught it yet how to care about special
274:45 - characters like a comma so that is fine
274:48 - because cookies comma is as far as I'm
274:50 - concerned it's a brand new word
274:53 - I am
274:55 - a
274:56 - right bookie right bookie showed up four
274:59 - times so very nice very nice it works
275:03 - perfectly so you can make it Dynamic by
275:06 - asking it the input
275:09 - um from the user okay so that's uh
275:12 - that's it for now in terms of practicing
275:15 - with dictionaries now we're going to go
275:18 - ahead and move on to some really big boy
275:20 - and big girl stuff which is going to be
275:22 - higher order functions and then after
275:25 - that we're going to step it up a notch
275:27 - and it's gonna be awesome okay I'm not
275:29 - even gonna tell you it's gonna be a
275:30 - secret you're gonna be in for a surprise
275:31 - so with that said I'm really excited
275:33 - can't wait to start talking to you about
275:35 - this stuff
275:36 - all right I hope you're ready to talk
275:39 - about higher order functions this is
275:41 - scary scary stuff but don't worry it's
275:44 - not that scary actually we'll walk
275:45 - through it together okay
275:48 - um so cool let's go ahead and comment
275:50 - out every single line so when you run
275:52 - your code
275:54 - it should be empty nothing should be uh
275:57 - printing out okay now
276:00 - I'm going to talk about this higher
276:02 - order functions okay big big words but
276:05 - what what are we really Gonna Learn here
276:08 - and what we're gonna talk about I'm just
276:10 - gonna show you two for now map and
276:12 - filter okay because those are really the
276:14 - only two ones you'll kind of need
276:17 - um and then after that I'll show you
276:19 - something and you won't even need this
276:20 - anymore okay but this is gonna be the
276:21 - building block for the next thing that
276:24 - we're gonna do so let's just start off
276:25 - with this
276:26 - so remember that function that we wrote
276:28 - that doubled things so we wrote this
276:30 - function
276:32 - and uh you could double right you call
276:35 - Double on one two three
276:37 - and you would get back
276:39 - one sorry two four six well here's a
276:44 - nicer way of doing it we can actually
276:46 - use the map method okay and whenever you
276:51 - run this map function what's nice about
276:54 - this map function is at the end it will
276:56 - always return a brand new array now if I
277:01 - want to use map to make this happen over
277:03 - here
277:05 - I need to give map a function okay and
277:08 - what map does is map goes and gets this
277:11 - guy and gets this guy and gets this guy
277:14 - and it has the power to get this guy and
277:16 - do something with him get this guy do
277:19 - something with him get get this guy and
277:20 - do something with him and this is
277:21 - something you would normally write a for
277:23 - Loop for and loop through and do all the
277:25 - stuff map you can kind of do it in one
277:27 - line
277:29 - and I want to call map right and I want
277:33 - to be able to call it and map is a
277:36 - function and it takes in another
277:38 - function as an input so you're going to
277:41 - put another function in here okay so for
277:45 - example I'll put let's say I get I
277:49 - create a function you know our function
277:51 - double
277:52 - uh does what it goes through if I look
277:56 - at it
277:59 - uh it goes through and it doubles the
278:01 - numbers okay so let's go and create a
278:05 - function here so you could see it and
278:06 - I'll just say double number so this
278:09 - function is going to be a lot simpler
278:10 - it's going to expect some kind of number
278:12 - and it will return
278:14 - that number multiplied by two okay
278:17 - that's it so I'm gonna go ahead and give
278:21 - the double number function to map so
278:24 - it's taking in a function okay so I'm
278:26 - not giving a function call like this
278:29 - I am literally giving it the definition
278:31 - of that function okay
278:34 - for example if I did from qazi you can
278:37 - do from import from Main import blah
278:40 - blah or you could just do import double
278:42 - number so I'll do from causing import
278:45 - double number okay so I had some errors
278:49 - in my thing so I just refreshed
278:51 - everything and uh yeah now if you if I
278:54 - run it from quasi like for some reason
278:56 - sometimes I'll give an error so just
278:58 - like run I guess double number first if
279:01 - you're getting an error where it's not
279:02 - recognizing what it is so just like run
279:04 - it like this first and once you run it
279:06 - like this now try doing from cozy in
279:10 - your case from Main from qazi
279:14 - import double number okay if you're in
279:17 - Maine you could probably also just do
279:18 - import double number that should work
279:20 - too and now if I do double number and I
279:23 - call something call um call it with two
279:25 - I get back four so like I can see that
279:28 - double number function works as expected
279:31 - so what I want to do is I want to apply
279:34 - this double number function on
279:37 - everything on this one here on this two
279:40 - here and on this three here okay in
279:44 - place update these in place and then
279:47 - return like a new array so basically I'm
279:49 - not going to be changing the actual list
279:51 - that the user gave me but I'm going to
279:53 - be making the copy of that list
279:56 - and then you know essentially changing
279:58 - that you could think of it like that
279:59 - okay so that way the actual data that
280:02 - the user gave doesn't doesn't get lost
280:04 - okay so I'm going to say map double
280:06 - number give it that and then also now it
280:09 - needs an array so I'll give it an array
280:11 - of one two
280:13 - three okay
280:16 - now if I tried to print this you're
280:18 - gonna see that I'm going to get
280:19 - something a little weird it says Hey map
280:22 - object at blah blah blah blah bloop okay
280:25 - so it's an iterable object and in order
280:30 - to show it and have it reveal itself in
280:32 - other words we're gonna have to call
280:34 - list on it so list will turn it into a
280:36 - list and you can see boom that worked
280:39 - we've doubled everything right two four
280:42 - six
280:43 - so we gave it a function and we gave it
280:46 - a list okay so we just said hey we gave
280:48 - it a double number
280:49 - function and we gave it a list and said
280:51 - do that to this list and now we could
280:53 - essentially write that entire thing in
280:55 - one line
280:56 - and if I actually if we go and look at
280:59 - our double number right
281:02 - and I'm going to put it underneath this
281:04 - and I'll just comment everything out
281:07 - honestly this over here looks a lot more
281:10 - complicated than this over here because
281:12 - it's one line okay so if we were to turn
281:16 - double this into a function so if I said
281:18 - define
281:20 - you know um and we call this yeah you
281:23 - don't even need to turn it into a
281:25 - function right that's the whole point
281:26 - because you could just write it in one
281:28 - line it wouldn't really make sense to
281:29 - even honestly make it into a function
281:32 - you should just call map right there
281:34 - call whatever you need to do and do it
281:36 - right there now
281:38 - here's another reason why I like it you
281:40 - can create this double number function
281:42 - on the fly without even creating this
281:44 - function here so in other words I can
281:47 - actually do this
281:49 - okay I can say instead of this I can
281:52 - actually make a function on the Fly and
281:55 - I can say Lambda
281:56 - numb
281:57 - and just take that num and multiply it
282:00 - by two so return that so this is now the
282:03 - same exact thing as this
282:07 - okay we're taking in an input num number
282:11 - and then we're taking num number and
282:14 - multiplying it by two just like that
282:16 - multiplying it by two right that's it
282:19 - and now if I actually run this you'll
282:22 - see I'll get two lists of two four six
282:24 - one from this and one from this okay so
282:27 - I can actually look I don't even need to
282:30 - use this anymore and I'll comment this
282:32 - out and there you go this is a nice
282:35 - little one-liner that we just did
282:38 - on the Fly okay well what if I wanted to
282:42 - make a function that squared everything
282:46 - what if I wanted to make it so instead
282:48 - of it going doubling 246 we squared it
282:52 - so you know 1 squared 1 squared is going
282:55 - to be one two squared is going to be 4 3
283:00 - squared okay is going to be 9 right so I
283:03 - should get back one four and nine how do
283:06 - I do that
283:07 - well that's very simple we go here and
283:10 - we just replace this with a square we're
283:12 - just going to square that result that
283:14 - number okay so we're going to go through
283:16 - I'm going to Loop through get one I'm
283:18 - going to square it
283:20 - I'm gonna go get two okay map is already
283:24 - writing the loop for you that's a nice
283:26 - part that's why you you're not the one
283:28 - writing the loop map is already doing
283:30 - that for you whenever you see map you're
283:32 - essentially mapping through the entire
283:34 - list okay
283:35 - then I'll go through two and square two
283:37 - and then I'll go through three and
283:40 - square three and then I'll just get one
283:43 - four nine in place of whatever is there
283:45 - right now okay like that
283:49 - let's run it and you can see I got 149
283:53 - Okay so
283:55 - let's go ahead higher order functions
283:58 - right this is the example of map very
284:01 - nice very very useful okay now I'm going
284:05 - to show you another one that is very
284:07 - useful and we call this one
284:09 - this is filter okay
284:12 - filter is another beautiful one which
284:15 - you can use very commonly so for example
284:17 - let's say I have a list of numbers
284:21 - so I have a list of numbers and I have
284:23 - one two three four five six
284:25 - seven eight nine ten
284:28 - eleven twelfth okay now let's say I only
284:32 - want to get the even numbers watch how
284:35 - easy that is to write it I can actually
284:37 - say map
284:38 - and I write my Lambda here and I say I'm
284:42 - going to take in a number
284:44 - okay and then for and I'm going to say
284:46 - oh not sorry not map we're going to
284:48 - write filter okay I'm gonna filter
284:51 - and filter where the number does not
284:54 - equal
284:56 - um
284:57 - or or we'll do this so how do you get
284:59 - let's let's just show you the logic here
285:02 - first so I'm going to send numbers one
285:04 - two three four five six okay
285:08 - and let's say I want to get all the even
285:10 - numbers from this numbers list right
285:13 - here well how I'll do that I'll zoom in
285:16 - so you can see actually let's
285:18 - a get away from there
285:20 - okay so how do you check something is an
285:23 - odd number how to check for an odd or
285:26 - sorry even number let's check for an
285:28 - even number all right what I'll do is
285:31 - I'll say two
285:33 - modulo 2 should have a remainder of zero
285:36 - so if I take the number two and I
285:38 - divided by the number two it should have
285:40 - a module of zero yes
285:41 - okay let's take four and do modulo two
285:44 - and check what I get back
285:47 - let's take six and do modulo two meaning
285:50 - like all these numbers divided by two
285:51 - have no remainder so every even number
285:54 - every even number divided by two has no
286:00 - remainder is basically what we're saying
286:02 - that's
286:04 - um that's a definition of an even number
286:06 - okay that's that's an even number
286:09 - now an odd number will be you know like
286:14 - five so let's say I try five modular two
286:17 - equal zero and it'll say false
286:19 - okay so here let's say I want only the
286:22 - even numbers well I'll just pass in this
286:24 - this condition so to this filter I'm
286:28 - just going to say grab the number and
286:29 - just make sure that the modulo 2 is 0 if
286:32 - this is true then pop it into the new
286:34 - list filter also returns a list filter
286:37 - is a function and it returns list
286:40 - okay and a new list
286:43 - so I'm going to apply this and I'm gonna
286:45 - give it my numbers
286:48 - okay let me zoom out here so you can see
286:50 - everything filter I'm going to give it
286:52 - my numbers list
286:54 - right here
286:56 - okay and then in order to show this I
287:00 - obviously have to wrap it and list and
287:02 - in order to show that onto the console I
287:04 - need to print it
287:06 - okay so let's go ahead and print this
287:08 - and look at that
287:11 - wow right like we were able to create
287:13 - this filter so easily if you had to
287:15 - manually do it that would take a lot of
287:16 - work and you could try to do it manually
287:18 - write your own Loop and all of that but
287:21 - yeah filter
287:22 - already automatically starts looping so
287:24 - whenever I'm doing filter I'm thinking
287:26 - I'm already looping in my mind I know
287:27 - I'm looping through every single item
287:30 - right but then the condition is like
287:32 - only put the thing in the new list
287:36 - if it matches this condition right over
287:39 - here so I go through here and I say his
287:41 - number divisible by two nope okay we
287:43 - throw that throw it away then we go to
287:46 - this and we say hey is this divisible by
287:48 - two yes it is so we throw it in the
287:51 - final result list then we go to three
287:53 - and we go nope four check five and six
287:58 - check seven and eight check nine and ten
288:01 - check right check and then we just keep
288:04 - dropping those and that's how
288:06 - we're getting all those guys in our list
288:11 - so that's how that works and you know
288:13 - the basically the code here is a nice
288:16 - one liner I'm super zoomed in right but
288:18 - if I'm on my computer and I'm just
288:21 - zoomed out I'm just zoomed in so you can
288:22 - see better right but on my computer this
288:24 - is how I see it so it's like that's a
288:27 - smooth one-liner with plenty of more
288:30 - space to write
288:32 - right so that's how you will filter
288:35 - so that's enough for an introduction of
288:40 - higher order functions
288:42 - and now I'll show you something that's
288:45 - going to be even better and it's like
288:48 - the most epic thing
288:50 - um and that is called
288:53 - list comprehensions they're much easier
288:56 - to write than all this filter and
288:59 - um you know all this map stuff much much
289:02 - much easier and they will pretty much
289:05 - replace their powers and and give you
289:08 - new brand new powers okay and and you
289:10 - can write you can replace the
289:12 - functionality of map and filter with
289:14 - them and they're just much easier to
289:16 - write and smoother so let's go ahead and
289:18 - learn about list comprehensions now
289:21 - all right my friends now I want to talk
289:24 - to you about list comprehensions and how
289:27 - they work okay so I'm gonna go ahead
289:30 - grab that same list here numbers okay
289:33 - one two three four five and watch how
289:35 - cool it is and how I can do it with a
289:38 - list comprehension so I can say
289:43 - um let's say I want to use this filter
289:45 - one right over here right
289:46 - I first thing I have to do when I'm
289:48 - doing a list comprehension is I have to
289:50 - make a list just like this okay so make
289:52 - a list
289:53 - and then I will say number for number in
289:58 - numbers
289:59 - okay
290:02 - um and then I'll write my if statement
290:04 - if number is divisible by two okay and
290:09 - let's go ahead and just print this
290:12 - and boom look at that that is already
290:15 - working okay it's giving me the all the
290:18 - even numbers and now I'll kind of
290:19 - explain what I've done so this is a
290:23 - regular for Loop four number and numbers
290:25 - this part you know already okay
290:28 - oh and then I say
290:31 - only get me the number
290:34 - if the number is divisible by 2.
290:38 - and then it asks how should I build the
290:40 - list that I returned to you
290:43 - um just give me number okay for each of
290:45 - those numbers just give it back to me so
290:47 - for example this filter would only allow
290:50 - two okay just give me two back great
290:52 - this filter would only allow four in the
290:55 - next Loop okay just give me back number
290:57 - and so it just keeps appending it boom
290:59 - boom boom all right keep sharing a new
291:00 - list out of that and then we return it
291:02 - now what if I wanted to double all these
291:04 - numbers I just do this
291:07 - and that doubles every number
291:09 - okay oh that is doubling actually all
291:12 - the even numbers so okay let me give you
291:14 - an example okay so this is the
291:16 - uh I'll write a comment filter and give
291:19 - me only
291:21 - even numbers
291:24 - okay
291:25 - and then here I'm gonna go ahead and
291:28 - remove this statement here
291:30 - okay and I'll say
291:34 - for number and numbers here's what I
291:36 - want you to do with the number
291:38 - number multiplied by two for number and
291:41 - numbers okay so this basically means
291:43 - Loop through the numbers list
291:46 - call that
291:49 - variable you know whichever variable
291:51 - you're iterating over number and then
291:54 - the new list how I want you to make it
291:55 - is a makeup make it up of these elements
291:58 - number multiplied by two so if I print
292:00 - this out you'll see it has doubled uh
292:03 - all of those numbers right there
292:06 - okay and honestly in my mind this looks
292:09 - way easier than writing map and filter
292:11 - and then wrapping it in a list and
292:13 - Lambda and all kinds of crazy stuff this
292:16 - just looks like you're writing a for
292:17 - Loop right that's the power of list
292:19 - comprehension so that was filtering
292:22 - and then this is you just essentially
292:24 - did a map map double numbers
292:28 - okay
292:29 - so this is an example of a map this is
292:32 - example of a filter and um yeah that's
292:35 - why I didn't spend too much time
292:36 - teaching you these because you'll kind
292:38 - of never have to use those again okay
292:40 - map and filter because list
292:42 - comprehensions are Kink and you can just
292:44 - use them for everything what if I wanted
292:46 - to get odd numbers to give that a try
292:48 - okay so get odd numbers
292:51 - give that a try here I'll give you five
292:53 - seconds five four five seconds to pause
292:56 - okay now five seconds to solve it so
292:59 - take five seconds to pause and solve it
293:01 - five four three two one all right let's
293:06 - go ahead and do this together and I
293:08 - would just simply say okay I'll let me
293:10 - make an array first so if I first make
293:13 - my array or list and then I'm gonna say
293:16 - four
293:17 - number and numbers because that's my
293:19 - Loop so let me just write that get that
293:21 - out of the way okay so this is my Loop
293:22 - right here
293:24 - and then what do I want to do I want to
293:26 - get only odd numbers okay so only get
293:29 - the number if number
293:33 - modula 2 does not equal zero so if it's
293:36 - like if uh if basically there is a
293:40 - remainder in other words okay
293:43 - and I'm going to say once you get that
293:45 - number then all I want you to do is just
293:48 - give me that number back I don't want
293:50 - you to double that number I don't want
293:51 - you to Triple that number and just give
293:53 - me that number back and let's print this
293:55 - okay
293:58 - okay and let's go ahead and comment out
294:01 - all of this so we can see very clearly
294:03 - where our result is there we go one
294:04 - three five seven nine eleven so
294:07 - I got back all of my odd numbers here
294:10 - now if I told you uh
294:14 - you know
294:16 - give me all of the odd numbers cubed
294:20 - okay so that's like crazy I wouldn't ask
294:22 - you to do that that's crazy but you
294:25 - would just do this
294:26 - and that will give you all the odd
294:29 - numbers cubed so this will get you all
294:31 - the odd numbers this is going to cube
294:33 - all of them and then that there you go
294:36 - okay so really really crazy fancy stuff
294:39 - that you could do with this and not just
294:42 - this right again if I take you to the
294:43 - Netflix example it's like if I have you
294:46 - know this giant list I want to just
294:47 - filter out where the name is cozy so
294:50 - it'll just filter that out or if I have
294:52 - like every single movie data and I only
294:54 - want like comedies I could filter this
294:57 - out this entire database out and I could
295:00 - filter where there's only like the the
295:03 - title is comedy or they have comedy in
295:05 - their attribute and it can filter that
295:06 - out
295:07 - so there are very real world
295:09 - applications of where you could use this
295:12 - right you could filter out obviously
295:14 - with strings as well you could filter it
295:16 - out filter for anything floats whatever
295:19 - is in your list you could do it so list
295:22 - comprehensions are absolutely amazing
295:23 - and python you could also do 2D you know
295:27 - array two-dimensional list
295:29 - comprehensions too uh which we won't get
295:32 - into because two-dimensional lists are
295:35 - kind of a little bit more advanced than
295:37 - we need to get right now because we're
295:38 - just trying to Learn Python right now
295:40 - right and and master the basics so there
295:44 - you go uh I hope you enjoyed learning
295:46 - about list comprehensions as much as I
295:48 - enjoy teaching it they are so freaking
295:50 - badass they're so cool and they're very
295:52 - very easy to write right this is an
295:54 - example of doubling the numbers and it
295:56 - was so easy to do
295:58 - so I enjoyed them I hope you enjoyed
296:00 - them
296:01 - um as well and um last thing I want to
296:05 - leave you with is just there's a couple
296:07 - of special keywords that I think you
296:10 - should just learn how to use and I won't
296:12 - take too much time on this but I do want
296:14 - to just share them with you so I'll do
296:16 - this here I'll just zoom in here a
296:19 - little bit so you can see very clearly
296:21 - let's go ahead and delete all of this
296:23 - and so for example
296:25 - python comes with something called sum
296:27 - so if I actually do sum one two three it
296:30 - can automatically just sum it up for you
296:32 - so you don't actually have to write a
296:34 - function that sums okay so that's one
296:37 - really nice one there's obviously Len
296:40 - which you're already aware of okay and
296:42 - then there's also Max so you don't have
296:45 - to write your own Max function it can
296:47 - Max can do that for you 10
296:50 - five seven
296:53 - and boom there you go you get back ten
296:55 - so you could see Max automatically will
296:59 - always pick out the max number there's
297:01 - also Min which is often times also very
297:03 - helpful so I'll say 50 uh negative 7
297:08 - 337. let's run it minimum the smallest
297:11 - number is negative seven and boom you
297:14 - can see that I get back negative seven
297:15 - Okay so
297:18 - very nice these are some built-in
297:21 - functions some lend Max Min okay I'll
297:25 - just put them here for you and I'll
297:27 - comment these out so you have access to
297:30 - them
297:31 - and uh it doesn't know what that is I'll
297:34 - just
297:35 - remove it
297:39 - okay I'll just put these three so if
297:41 - you're looking at it later it just looks
297:44 - like nice little notes for you that I've
297:46 - left
297:48 - Okay so
297:51 - special built
297:54 - in functions with python okay there we
297:57 - go awesome so list comprehensions plus
298:00 - some special built-in functions plus a
298:03 - little kiss for you your beautiful face
298:05 - and with that said let's just keep
298:07 - rocking and rolling
298:09 - what's up guys welcome back so I've
298:13 - added a couple of nice things for you
298:14 - let me go ahead and show you so go ahead
298:18 - back to your um course and right over
298:22 - here you're going to see markdown so
298:24 - click on markdown and in your markdown
298:27 - you're going to see all of this nice
298:28 - stuff that I've added for you it's gonna
298:30 - say welcome to the best Python tutorial
298:32 - in the world by clever programmer and
298:35 - here I'll list out exercises projects
298:38 - and any future projects that we'll be
298:41 - creating we'll go here okay and the
298:42 - Order of this might change by the time
298:44 - you are watching this tutorial because
298:46 - we're constantly making changes making
298:49 - improvements seeing like where you might
298:51 - fall into a trap or what we're
298:53 - constantly changing this so for example
298:54 - here's a list of apps that you're going
298:57 - to have so this is going to show you hey
298:58 - here the apps okay now here's an example
299:01 - uh so for example this counter app that
299:03 - you're going to build it's going to be a
299:04 - really nice app they're going to build
299:06 - with flask now if I actually scroll down
299:08 - over here it's going to tell you hey
299:11 - before you start uh this project make
299:14 - sure you've mastered the following pure
299:16 - python Concepts and it will tell you hey
299:18 - it's okay if you don't know web
299:19 - development Concepts we'll learn these
299:21 - together so for this counter app we're
299:23 - going to be covering the following
299:24 - concepts web development and pure python
299:26 - related Concepts so web development for
299:28 - this project is going to have these
299:30 - three concepts in there routing get
299:31 - request database you don't need to know
299:33 - these These are okay these are new we're
299:36 - going to learn it together so you don't
299:38 - have to know those however before you
299:40 - enter this project you will need to know
299:42 - these Concepts dictionaries named
299:45 - arguments incrementing decrementing and
299:47 - functions now if you have made it to
299:49 - this part of the course you know all of
299:52 - these already if you didn't skip any
299:53 - sections you have been familiarized with
299:55 - dictionaries you have learned named
299:57 - arguments which is where you call a
299:58 - function and any given arguments a sum
300:01 - you can say a equals one and b equals
300:03 - two okay so those are like named
300:05 - arguments you have learned increment in
300:07 - decrementing which is no num plus equals
300:10 - one or you know or like a cookie hello
300:14 - uh plus equals one so it's like
300:16 - incrementing uh uh a key in a dictionary
300:19 - right so you have learned those Concepts
300:22 - you have learned functions and how to
300:25 - call functions so all pure python
300:26 - concepts are good which means that you
300:28 - are eligible to go ahead onto this
300:31 - project now another thing you're going
300:33 - to see in this project is going to see
300:34 - project live demo and solution all right
300:37 - so you're going to see these three
300:38 - things the project means this is the
300:41 - exercise project where you're going to
300:43 - write your code this isn't going to be
300:45 - the complete project so this is going to
300:46 - be like you coding this kind of from
300:48 - scratch okay so that's going to be that
300:50 - uh the live demo is going to be
300:52 - obviously the demo of the app working so
300:55 - for example if I hit this plus button
300:57 - right here you can see my calendar app
300:59 - is incrementing right and when I hit
301:01 - this
301:02 - um when I hit this minus button here you
301:04 - can see my app decrements right so how
301:07 - do we do that how do we create an app
301:08 - like that with python so you're going to
301:10 - create that and this app is deployed
301:12 - onto the internet which is super nice
301:15 - about Rebel right replit allows you to
301:17 - deploy apps with a click of a button
301:19 - which means you will be good to you'll
301:21 - be able to show all of these python
301:23 - projects you make to everybody else and
301:25 - then there's going to be a solution
301:26 - section right there's going to be a
301:27 - solution section and this section is
301:29 - going to have the link to the full
301:31 - solution all the code which I don't I
301:35 - recommend that you go to the solution
301:37 - once you feel like you can't make
301:39 - progress on the project and in this
301:41 - course we're gonna go through the
301:43 - project together all right we're going
301:44 - to cover every single thing we're going
301:46 - to walk through it step by step together
301:48 - so you should have no problem completing
301:50 - this project portion but if for any
301:52 - reason you're stuck you always have the
301:54 - solution file you can just go to that
301:55 - the next app you're going to be making
301:57 - in this course or one of the apps also
301:59 - you're going to be making is this random
302:00 - dog generator right this will have what
302:03 - the app is what concepts you'll need to
302:05 - learn right I now have some additional
302:07 - notes for you as well like you know know
302:10 - hey this is how dictionaries work so you
302:12 - can scroll down and see those and so
302:14 - this is just a snapshot from what we
302:16 - have done already and so it's like okay
302:17 - if you create dictionaries and you call
302:19 - the function boom this is what it will
302:20 - do or if you want to remember hey how
302:23 - conditionals work here's like a little
302:24 - cheat sheet for how if then statements
302:26 - work and you can come and always check
302:28 - this or you know if you forget for Loops
302:30 - you can always see these examples that
302:31 - I've like written out in a very clear
302:33 - way because I know in notes here it's
302:36 - not always so clear where the examples
302:37 - are but here they're very clear here's
302:39 - Loops here's working examples of Loops
302:42 - right and then how do you find frequency
302:45 - of words in a phrase boom some more
302:47 - examples right so this will constantly
302:49 - be evolving and more notes more
302:51 - exercises more projects are going to be
302:52 - going there but yeah I just wanted to
302:54 - kind of give you the lay of the land I
302:56 - hope that this makes sense and I hope
303:00 - that this is helpful for you
303:02 - all right with that said what we're
303:04 - gonna be doing is working on our first
303:07 - python project I'm so excited to do this
303:10 - with you so let's go ahead and do this
303:12 - one together
303:13 - now we have this app that we're going to
303:16 - be building together the counter app and
303:18 - it looks gorgeous and it's going to
303:21 - cover quite a bit of python Concepts and
303:24 - we're gonna do this slowly and one step
303:27 - at a time so it's not overwhelming and
303:28 - I've tried my best to make it as easy
303:30 - and simple to understand for you as
303:32 - possible so what you're going to go
303:33 - ahead and do is click this project link
303:35 - over here because we don't want to see
303:37 - the live demo right now and we don't
303:38 - want to see the solution right now so
303:40 - let's go ahead choose a project so once
303:43 - you click this project it's going to
303:45 - bring you to this page over here okay
303:48 - and then all you're going to want to do
303:50 - is hit Fork Rebel so you hit Fork Ripple
303:53 - and then if you haven't you obviously
303:55 - have an account I'm on Incognito but
303:57 - you're just gonna go to that Rebel okay
303:58 - because uh once you Fork it it'll allow
304:01 - you to edit code so you must hit Fork
304:03 - very important okay so go ahead Fork
304:05 - that ruffle CP counter app okay and then
304:08 - you could call it whatever you want you
304:10 - could change it okay so there you go now
304:12 - in here we're going to be coding now
304:14 - here's how this app is going to work so
304:16 - once you go here and if you hit run or
304:18 - whatever this is what your app should be
304:21 - showing you home page right there okay
304:24 - so that's what it's showing you and
304:27 - before I do anything else with this app
304:31 - I'll just walk you through what's inside
304:33 - and what's happening in this app okay so
304:35 - so you're not overwhelmed now there's
304:38 - only one file you need to worry about
304:40 - okay there's no other files that you
304:42 - need to worry about right now so that's
304:44 - the only file right there that you have
304:46 - to worry about it's the first thing I
304:48 - want you to notice the second thing I
304:50 - want you to notice is here
304:53 - okay we only have eight lines of code
304:55 - and I know there's some stuff that you
304:58 - have not seen in that's in here before
305:01 - and we'll walk through that one step at
305:03 - a time okay so let's just walk through
305:05 - line by line okay the first two lines
305:10 - I don't want you to worry too much about
305:12 - but they are just importing stuff to
305:14 - help you out so you've seen me use a
305:18 - little bit of importing in Python not
305:20 - too much of it but all we're doing here
305:23 - is we're just asking some other files
305:25 - for help that's why we're doing import
305:27 - okay so there's a counter app that I've
305:30 - created for you which I have hidden from
305:32 - you right now okay and that has some
305:34 - helpful functions that you'll need to
305:36 - complete this project so your home page
305:38 - app
305:40 - show and DB and I'll show you those
305:42 - later okay but these are these are there
305:44 - to help you that's what's happening in
305:46 - those lines so you can pretty much
305:48 - ignore these for now let's go to line
305:50 - eight okay what's happening in line
305:52 - eight over here this line is simply
305:55 - running the app all right and it's
305:57 - running the app on Port 81 or whatever
305:59 - which honestly even all these details
306:01 - you can ignore I don't even pay
306:03 - attention to this I just see this it
306:04 - runs my app if you remove this line your
306:06 - app doesn't run okay so it's simple as
306:08 - that this is to help you
306:11 - this is to run the app so that's it so
306:14 - far now it brings us to kind of the
306:16 - interesting part of our code which is
306:18 - this part over here
306:20 - okay so the thing you've probably never
306:22 - seen before is this guy right there okay
306:25 - what's this at sign and app.rout all
306:29 - this is saying
306:30 - okay I'll I'll open this in a new page
306:32 - so you should probably do that too
306:35 - all this is saying is that when I hit my
306:38 - home page meaning I don't have a path
306:40 - here or about or anything like that in
306:43 - my URL when I hit my home page
306:47 - do the following run this function home
306:51 - okay so for example I could also say
306:54 - only when I hit the banana page
306:57 - uh give me a banana like this okay now
307:02 - make sure you stop and start your app
307:04 - again so you'll have to do this pretty
307:06 - often you'll have to stop your server
307:07 - and run it again because if you don't
307:09 - it's not going to show the new changes
307:10 - now if you go to your app and you
307:13 - refresh it's going to give you an error
307:16 - and you could just go slash banana and
307:20 - if I go slash banana now you can see
307:22 - that it's actually giving me back a
307:24 - banana right
307:26 - so that's how this works this is just
307:28 - saying where this is happening so we're
307:30 - just going to leave it on slash our home
307:31 - page and now on our home page we'll say
307:34 - give us a banana so I'm going to hit
307:36 - command enter you could also do that too
307:38 - that can help restart your app if you do
307:40 - command enter
307:42 - and there we go I can see my banana is
307:44 - now on the home page so without going
307:47 - too deep into it I just want you to
307:49 - understand what it does at a simple
307:51 - level it's just saying yeah on the home
307:53 - page buddy show me this banana that's
307:55 - all okay now this function name here you
307:59 - could call it whatever you want it
308:00 - doesn't really matter I could literally
308:02 - call it this right and if I start my
308:05 - code it'll still
308:07 - um it'll still give me that banana okay
308:09 - so this function name is not that
308:11 - important it's just important that it
308:13 - has a function name or at least that
308:14 - there is a function okay that's what's
308:17 - important so that's what's important
308:19 - okay the function name itself is not
308:21 - that important here so I'm just choosing
308:22 - it to call home because
308:24 - it's like
308:25 - when you go to the home page this slash
308:28 - route
308:29 - run my home function that's all
308:32 - okay now there's this other part that's
308:35 - happening which is doing
308:37 - uh which is doing this uh which is
308:40 - showing this banana part over here now
308:42 - this is HTML so we are returning HTML
308:46 - here or we're writing HTML here uh which
308:49 - means that if you have not seen HTML
308:51 - don't worry we'll do a whole video
308:53 - talking about a lot about HTML and what
308:56 - it does and everything like that okay
308:59 - um because if we're doing some projects
309:01 - with web development with python you'll
309:03 - have to know HTML and honestly let's be
309:05 - honest like regardless of any type of
309:07 - development you're doing especially in
309:09 - 2022 or after 2022 in some Modern year
309:12 - 2023 2024 whenever you're watching this
309:14 - come on like you have to know the web an
309:16 - HTML regardless of what you're doing if
309:18 - you want to become a data scientist
309:19 - python engineer it doesn't matter
309:22 - so for example I can write H2 which is a
309:26 - heading tag and I can say hello and and
309:28 - close the tag with the slash right and
309:31 - if I run this
309:33 - you're going to get this like big sized
309:35 - hello if I say H1 I'm going to get an
309:38 - even bigger size hello right so back to
309:40 - my point of what I was saying with
309:42 - python and with python and essentially
309:45 - web development like
309:47 - you have to know it whether you're
309:49 - trying to become a data scientist uh you
309:51 - know a a web developer a data analyst
309:56 - whatever you're trying to do with python
309:59 - you're going to be dealing with the web
310:01 - either you're going to be scraping the
310:02 - web pulling information from the Web
310:04 - building an app that's on the web
310:05 - interfacing with an app all of that is
310:08 - gonna there's gonna be something there
310:09 - okay so it's better if you learn it
310:12 - um and we're just going to learn some
310:13 - basics of it right now I'm going to show
310:15 - you very bare minimum but most important
310:17 - is like you're getting some HTML here
310:18 - okay so that's what's happening here now
310:21 - what I've done is I've created a nice
310:24 - little function for you that allows you
310:27 - to kind of show a much nicer looking
310:29 - page because right now if you look at
310:30 - this page it's pretty ugly right but we
310:33 - can also style this page and do things
310:35 - within this page to make it look better
310:37 - so for example I could even style it in
310:40 - here and I could say style and I'll put
310:43 - double quotes here since I have single
310:45 - quotes out here and for my style I'll
310:48 - zoom in a little bit here so you could
310:50 - see better I'll say background Dash
310:54 - color colon and I'll say let's say red
310:57 - okay and I'll hit command enter and
311:00 - Watch What Happens it'll restart the
311:01 - server and you'll get all of red stuff
311:05 - here okay so if we did a lot of styling
311:08 - and a lot of HTML stuff here we could
311:10 - make a nice looking page so I'm gonna
311:12 - help skip you a step and I'm going to
311:14 - take you a step forward really fast what
311:17 - I've done is I've created this nice
311:19 - function called show and the show
311:22 - function basically shows you whatever
311:24 - you give it so I could you know again
311:27 - give it some ugly looking HTML like this
311:30 - and if I restart my server
311:34 - um hopefully it's going to show you some
311:35 - kind of stuff so we're going to call our
311:38 - nice helper that we created show
311:41 - and inside of this show it takes two
311:44 - things but we can also sometimes leave
311:47 - it blank so right now what I'll just do
311:48 - is I'll give it home page okay so this
311:51 - is a home page that we created and so
311:53 - I'm gonna give it that that home nice
311:56 - looking home page and let's see if it
311:58 - can show that nice looking home page
312:00 - onto the screen so I'm going to go ahead
312:03 - and restart and hit command enter on
312:05 - this and let's see what happens boom
312:08 - there you go all right so just like that
312:11 - right our app is already up and kind of
312:14 - running and if you drag it down it'll
312:16 - kind of normalize it but if you want to
312:18 - see it in the best view possible just
312:20 - open up a new tab here so you could see
312:22 - it kind of in the best view now if you
312:25 - hit any of these buttons like for
312:27 - example plus the app will break and if
312:30 - you hit minus the app will break
312:33 - so what we want to do is we want to
312:36 - connect this plus button and this minus
312:40 - button so that they actually speak with
312:44 - something okay because right now there's
312:46 - nobody to speak to and I hit plus you'll
312:48 - notice it takes me to the slash
312:50 - increment page
312:52 - but our code doesn't know what to do
312:54 - with the slash increment page right like
312:57 - if I zoom in over here
313:00 - right it says slash increment paths our
313:03 - code knows what to do at this path when
313:06 - we go to the home page with the the
313:08 - slash or whatever it knows what to do
313:10 - but when we go when I hit plus sign and
313:14 - I go to this increment page
313:16 - our page has no idea how to react what
313:19 - to do it doesn't know
313:21 - so think about this
313:24 - if in order to handle what happens at
313:28 - the Home Route we need to do a slash
313:31 - like this this means root right the home
313:33 - page
313:35 - if I want to handle the increment path
313:38 - aka the slash increment path right so
313:42 - let's let's let me put some notes here
313:44 - so if this guy over here is root
313:49 - this is our like rude or our home page
313:54 - right then
313:58 - if we want to go to our increment path
314:01 - wouldn't that be just increment
314:06 - right so if that would just be increment
314:09 - then we need to create another route
314:12 - what we have on line seven that handles
314:15 - that so what I want you to do right now
314:17 - is just write one line of code for me
314:19 - please that should be pretty much this
314:21 - much in length okay
314:23 - and it should be very very similar to
314:25 - this line
314:27 - but it should basically handle what uh
314:30 - handle what happens or at least uh
314:34 - mention what happens when we go to that
314:37 - route okay so it should be very similar
314:39 - to this and see if you can write that
314:40 - I'll give you about five seconds okay if
314:42 - you don't that's okay this will give you
314:44 - five four three two one all right let's
314:48 - do it together
314:49 - so all I'm going to say is I'm going to
314:50 - say app.route slash increment so now I
314:54 - know that I'm I'm going to be handling
314:57 - my slash increment route
315:00 - and all I need to do it to be to be
315:02 - technical in Python these things with
315:04 - the at sign are called decorators
315:06 - they're a little bit of magic so that's
315:08 - why we're not going to go too deep into
315:09 - them but in this case it allows us to
315:12 - handle what happens as at this route now
315:15 - right underneath it what we need to do
315:17 - is write a function so here's what I
315:19 - want you to do before I even do this
315:21 - because this is just a python part so I
315:24 - want you to write listen to me very
315:26 - carefully so you can turn this into code
315:28 - write a function called increment that
315:32 - Returns the word increment that's all I
315:35 - want you to do
315:37 - let's write a word increment that
315:39 - returns
315:41 - a string increment that's it so take
315:43 - five seconds try to do that this is pure
315:45 - python this is no web development right
315:47 - now okay five four three two one so I
315:51 - hope you took that time to pause and
315:52 - give this a try let's do it together now
315:54 - so I'm gonna go ahead and do increments
315:59 - okay and I will say return increment
316:04 - okay so that's it that's all I'm doing
316:07 - here now let's go back to let's restart
316:12 - the server always make sure to restart
316:14 - the server it's very important it's a
316:16 - gotcha you're going to fall for a lot so
316:17 - don't fall for it hit command enter so
316:20 - your server restarts and go here and by
316:22 - the way if you see all this red stuff at
316:24 - the bottom here right behind me they're
316:26 - not errors it's just flask sending you
316:29 - red messages to scare you I have no idea
316:31 - why I wish they did it but yeah so okay
316:34 - now let's go back to our app let's first
316:38 - go to our home page
316:41 - okay now we're on our homepage now when
316:43 - you click this plus button it's going to
316:45 - route you to the slash increment page so
316:49 - let's go ahead and click this
316:54 - bullets man we're handling what happens
316:56 - at the increment page Isn't that cool
316:59 - that is awesome we're already handling
317:02 - what happens at the increment pitch okay
317:06 - um and and we could we could put
317:07 - whatever we want here right we could put
317:09 - a plus button we could put increment
317:10 - word whatever we want so all good we're
317:14 - handling what happens now
317:16 - what we need to do when somebody clicks
317:19 - increment is we need to update a number
317:23 - okay so for example if you click
317:25 - increment then a function should run
317:27 - that actually increments a number
317:31 - right that's what should happen that's
317:33 - why the user clicked the plus button so
317:35 - that big giant number could go up by one
317:38 - that's the only reason they did it right
317:40 - so we need to add that functionality
317:43 - okay so we need to have imagine there's
317:46 - some number okay so imagine we just had
317:48 - a variable number which we don't right
317:50 - now imagine we had a variable number we
317:52 - would do plus equals one
317:54 - or Imagine This
317:57 - uh imagine we had this imagine we had
318:01 - some fake magical database and we said
318:04 - database equals
318:08 - okay and it was a it was a dictionary
318:10 - like this
318:12 - and it said number and the number was
318:15 - Zero okay now let me ask you a question
318:18 - how would you get access to this value
318:20 - right over here zero how could we get
318:23 - this and increment this number by one
318:26 - how could we do that so if you remember
318:29 - from your previous lessons with python
318:31 - if you're going through the full python
318:33 - course
318:35 - is how do you access a key inside of a
318:38 - dictionary think about that how do we do
318:40 - that how do we access a key and or a
318:43 - value inside of a dictionary
318:44 - well it's a dictionary right so the
318:47 - first thing I'm going to do is I'm just
318:48 - going to say database
318:51 - and grab the number
318:53 - okay and then what I could just do is I
318:57 - could say you know let's just first
318:59 - print it out and let's just make sure
319:00 - that we we have access to this now
319:03 - anything that I print is gonna come in
319:05 - here to the console so I'm going to make
319:07 - myself a little bit smaller so you can
319:09 - see this console right over here okay so
319:11 - I'm going to make this a little bit
319:12 - bigger and we're going to run this app
319:14 - again and then all I'm going to do is
319:16 - I'm going to hit this plus button and
319:18 - then once I hit it you're gonna see what
319:20 - it's going to say at the bottom here and
319:21 - you can see it actually saying print
319:23 - zero
319:25 - okay
319:27 - now here's the cool thing our show
319:30 - function is really really smart so what
319:33 - we could do to our show function is we
319:35 - could also give it
319:37 - um
319:38 - it it also like if we look at our show
319:40 - function definition right show function
319:42 - definition or let's say we call our show
319:44 - function here
319:46 - okay I don't know why it's not popping
319:49 - up the documentation
319:51 - our show function what it does is it
319:52 - takes in a page and the second thing it
319:56 - takes in is a number okay so it's a page
319:58 - and number
319:59 - so for page I want to give it the home
320:01 - page so that's what we have done
320:03 - essentially here okay
320:06 - and for the number if you don't give it
320:09 - a number it's going to assume that you
320:11 - want a zero but before we even do that
320:13 - let's just do this first so when they
320:15 - click the page we don't want them to
320:18 - come to this ugly looking page we still
320:20 - want them to come to the main page right
320:22 - because if we go to the actual solution
320:24 - file
320:25 - which is this one right over here
320:30 - you can come back to the course and you
320:32 - can hit solution right if we come back
320:34 - to the solution file right here
320:38 - and we go ahead and look at the app here
320:43 - okay so not the solution file sorry I
320:46 - meant to say if we look at the the demo
320:48 - of the app live demo if I hit plus it
320:52 - goes plus but it brings me back to the
320:54 - same home page right so the page has not
320:57 - changed so what that basically means in
321:00 - my mind is
321:02 - make sure the page is the same like
321:05 - we're not changing the page at all
321:06 - actually so bring me back to the same
321:08 - page right so let's just give that a try
321:11 - let's say that so now when we hit the
321:13 - plus button it should bring us back to
321:15 - the same page and we should still see
321:17 - print coming up here which means that
321:19 - when I when I hit this button it's still
321:22 - running this function which is a great
321:24 - sign so let's hit the plus button or
321:26 - sorry let's restart our server
321:30 - and let's hit the plus button and watch
321:32 - what happened I'm still on this home
321:34 - page
321:36 - yet it's still printing that database
321:38 - number zero so that's a very very good
321:41 - sign right that's that's effectively
321:44 - what we want that's exactly what we want
321:47 - so now what we want to do is the show
321:50 - page takes two things it's very very
321:52 - smart
321:53 - so show input show takes in this
321:57 - function show takes in which page you
322:00 - want to show
322:01 - and it also takes in a number as a
322:03 - second argument
322:05 - so it can show this page and if you give
322:07 - it number it knows how to update this
322:10 - number based on the number you give it
322:11 - that's the cool thing about this
322:12 - function show
322:14 - so say that I give it a number like 57.
322:20 - okay let's restart our app so I'll hit
322:23 - command enter and let's see what happens
322:27 - okay let's hit something plus and you
322:30 - could see that it's showing 57. right
322:33 - why did it show 57 right now because I
322:36 - told it when I hit increment show
322:39 - exactly 57 so every time I hit increment
322:41 - it'll show that okay we still haven't
322:43 - done anything with decrement so if you
322:44 - hit it obviously it's going to do this
322:46 - because we haven't handled that routing
322:47 - yet so we'll do that next
322:49 - so what I want to do is I clearly can't
322:52 - hard code 57 here right that's not a
322:55 - great solution but what I could tell it
322:57 - to do is I could say hey
323:01 - um
323:02 - what I'm gonna say
323:04 - is
323:06 - the number is
323:08 - this database one example so what we
323:12 - want to do is we want to take this
323:13 - database number and we want to increment
323:16 - it how can we increment a database
323:18 - number by one do you remember that from
323:22 - any of the lessons that we've done
323:24 - can you think about how to do that I'll
323:25 - give you five seconds five four three
323:29 - two one so you could have used these
323:31 - five seconds to pause the video
323:32 - but if you're not if you can't think
323:34 - about it to increment a number we just
323:37 - do plus equals one
323:39 - so when I do plus equals one that will
323:41 - increment this number here so let's just
323:43 - go ahead and verify that what we're
323:45 - saying is true so let's print out our
323:48 - database here
323:49 - okay and um when I hit let's do command
323:53 - enter so it's it runs our app again and
323:56 - then I'm just going to hit the plus
323:57 - button and when I do you can see every
323:59 - time I hit the plus button you could see
324:01 - that the database number is going up so
324:03 - it's five and six and there's a problem
324:05 - with when you're trying to do this
324:07 - within replica sometimes within this
324:09 - iframe uh it will refresh twice so just
324:13 - go and open it up in a new tab hit uh
324:15 - start or you hit refresh and then hit
324:18 - the plus button hit the plus button and
324:21 - actually let's just restart the app okay
324:23 - go back to the home page now hit the
324:25 - plus button edit again oh wait
324:29 - um
324:29 - yeah so you could see the database is
324:32 - now at 10 and now it's at 11. so you
324:34 - could see that it just keeps going up
324:35 - and up and up and up and up and up
324:38 - so what we want to do then is we don't
324:41 - want to give this a hard-coded 57 right
324:45 - if we don't want to give it a hard coded
324:46 - 57 what do we want to give it can you
324:49 - think about that
324:50 - so see if you could think about what
324:52 - goes in there
324:53 - and I'll give you a hint it has to do
324:55 - with the database okay that's what we
324:57 - want to give our function and remember
324:59 - these are named arguments right number
325:01 - equals page equals these are named
325:03 - arguments not positional arguments to
325:05 - take about five seconds five four three
325:08 - two one all right so let's do this
325:10 - together what goes in here is the
325:14 - database number
325:16 - okay that's the number that we want to
325:18 - put in there so now let's go ahead and
325:21 - reload this app
325:25 - and uh let's go to a new browser and
325:27 - let's hit uh refresh let's hit plus plus
325:31 - plus plus
325:33 - wow look at that right every single time
325:37 - it just keeps incrementing I mean isn't
325:40 - that beautiful every single time wow
325:44 - what happens when I refresh the app goes
325:47 - up goes up because I keep going to that
325:49 - increment path right what happens if I
325:52 - go back
325:53 - to the home
325:55 - ah it goes back to zero now what happens
325:58 - if I hit plus it goes back to 23.
326:01 - interesting so why is that going to zero
326:03 - that's interesting
326:05 - so what we want to do here is since
326:07 - we're we have this database number
326:10 - it's it we're giving it to our increment
326:13 - but let me ask you this
326:14 - shouldn't our home route have access to
326:17 - that too because right now the problem
326:19 - is when we go to the Home Route
326:22 - if you look at our definition of Home
326:24 - Route
326:25 - home has no idea about the number
326:27 - because we're not passing any number
326:29 - into here so it has no information show
326:31 - has no information about that so when
326:32 - show has no information about that what
326:34 - show likes to do is show the number zero
326:38 - so let me ask you this how could we pass
326:40 - show this number over here
326:42 - I'll give you a hint it's with pretty
326:45 - much the exact same line of code but in
326:47 - here
326:48 - okay so think about that take about four
326:51 - seconds to pause the video and give that
326:52 - a try Yourself four three two one let's
326:57 - go ahead and do this now so I'm gonna
326:59 - give it the same number I'm gonna say
327:01 - database
327:03 - number
327:04 - so this is a not a real database right
327:07 - it's a fake database that we just
327:08 - created kind of on the Fly
327:10 - so let's restart our server let's hit
327:12 - command enter let's go right over here
327:15 - let's refresh this one and I'll hit Plus
327:19 - and I'll hit plus and I'll hit plus and
327:22 - I'll hit plus so that's very good but
327:24 - let's go back to our home route so I'm
327:26 - just going to go back to our home route
327:28 - and our home routes that's four isn't
327:30 - that great I'll hit five six seven eight
327:35 - that is beautiful right that is awesome
327:39 - I can keep going keep going keep going
327:41 - keep going
327:44 - there's only one problem
327:48 - it stores the data when I'm refreshing
327:51 - so that's not a problem it's very good
327:52 - if I go back to the home page it still
327:54 - remembers that I'm at number 16. that's
327:57 - very very good
327:59 - but
328:01 - if I restart the server
328:05 - and we go back to the app
328:08 - and we go back to the home page guess
328:10 - what it starts at zero
328:12 - well what if we wanted to make a counter
328:15 - that remembers forever so meaning if you
328:19 - hit it 20 times and then tomorrow your
328:22 - grandma used your app and hit it 20
328:24 - times and then the day after that your
328:26 - paw your daddy
328:28 - use your app and hit this counter 40
328:30 - times to count his steps every second he
328:33 - walked
328:34 - it should be at like a 60 or 80 or 100
328:37 - it should remember all of that and it
328:39 - should never ever forget
328:42 - right how cool would that be if your app
328:44 - has data
328:46 - that it can record even when you kill
328:48 - the server and start it again and it
328:50 - remembers it forever so
328:52 - you know because this app is already
328:54 - online right you could link this to
328:56 - people already
328:58 - but it would be much cooler if it could
329:00 - remember forever so like how are many
329:01 - people use this app let's just say you
329:04 - show it to like 10 or 20 of your friends
329:05 - they keep hitting plus plus plus and you
329:08 - see the counter is at like three
329:09 - thousand or five thousand right because
329:10 - it clicked it so many times so that
329:12 - would be cool and then every time you
329:13 - come back to the app from any browser
329:16 - anywhere at any time it'll still
329:18 - remember so for that what we actually
329:20 - need to do is we need to use a real
329:23 - database and I'll show you how easy it
329:25 - is to use a real database
329:28 - remember when we were using this fake
329:30 - database right over here and we said it
329:33 - has something called number and the
329:34 - number is set to zero
329:36 - well let me tell you something that DB
329:39 - the word that I have over there for you
329:41 - this DB right over here
329:44 - that's literally this guys it's
329:46 - literally this exact dictionary so like
329:49 - imagine you just change this word from
329:50 - database to DB and you can use it the
329:53 - exact same way
329:55 - the only thing is that this DB that I'm
329:58 - giving you is replits database which
330:01 - means it's persistent which means that
330:04 - regardless of when you use this app
330:06 - it'll forever have permanently stored
330:08 - that data kind of like a memory card
330:09 - when you played video games and it saved
330:11 - data forever so that's all you need to
330:15 - know which means that you can really get
330:18 - you can comment down this line
330:22 - and I'll just change it to DB don't run
330:24 - this line because that'd be terrible
330:25 - that'll break your app
330:27 - but just know that DB
330:30 - looks literally like this okay I'll put
330:33 - a Emoji so even if you commented this
330:36 - line out you won't mess it up
330:38 - right so just know that DB looks just
330:42 - like this
330:43 - so then in order to increment the DB
330:45 - number
330:46 - it's that easy
330:49 - you just change that word with DB
330:54 - and you change this with DB
330:57 - and you change this with DB and DB and
331:00 - that's it you're done like DB is
331:02 - literally that so there's not much to do
331:03 - except for just change everywhere with
331:05 - this database with DB and now you're
331:07 - using a real database that's permanent
331:10 - so let's restart our app now
331:14 - and let's go to our uh let's refresh
331:18 - right plus plus plus so we're at six
331:23 - right now now I'm going to kill the
331:25 - server and start it again and you can
331:27 - see that you're getting some database
331:29 - here right because I'm printing the DB
331:31 - so I could also print the DB number as
331:34 - well and I could restart the server so
331:36 - now I'm going to restart the server
331:39 - and look at that it started at six
331:41 - when I hit Plus
331:43 - right you could see that it's at eight
331:45 - and this number is coming directly from
331:47 - DB now
331:50 - if I go to the this app right here and
331:52 - we refresh this should be at a nine it's
331:55 - keeping track of all of it right all of
331:57 - it plus plus plus I can restart the app
332:00 - again
332:01 - I can go back to this page and we can go
332:05 - to the home page now
332:07 - and you could see it's still in 11 right
332:11 - 12. that information never went away so
332:14 - just like that
332:16 - you have a full on database my friend
332:20 - just like that
332:22 - and really all the lines of code that
332:25 - you wrote to make that happen were very
332:27 - very little right we wrote this one
332:30 - two three four five five lines of code
332:33 - and you have a nice looking home page
332:36 - which you know obviously looks nice once
332:38 - you uh you know open this app or just
332:40 - stretch it out so you could see it kind
332:42 - of like through the whole screen right
332:44 - so once you could see it through the
332:45 - whole screen it looks great and boom you
332:47 - hit plus and you get what you want right
332:49 - so in the iframe if you do it on Rebel
332:51 - it'll be a little bit funny like this
332:53 - but if you do it here it should be fine
332:55 - and it should only go up by one every
332:57 - single time you hit it but now here's
333:00 - the problem when I hit minus it goes to
333:03 - this decrement route slash decrement
333:07 - right that route and it just doesn't
333:09 - know what to do the requested URL was
333:12 - not found in the server if you enter the
333:14 - URL please check your spelling and try
333:16 - again and it doesn't know what to do it
333:19 - doesn't know what to do
333:20 - so now I'm gonna give you one bigger
333:24 - exercise and this exercise is going to
333:27 - be for you to figure out how to make the
333:28 - decrement path work from start to finish
333:31 - so we're not going to do baby step it
333:33 - but you're going to be writing about
333:35 - four lines of code they're going to look
333:38 - very similar to this with just a few
333:41 - changes where it might say increments
333:44 - there might be another word you might be
333:46 - using there so pay attention to details
333:48 - don't just copy paste like one of my
333:50 - friends was trying to do you're gonna
333:52 - change a few letters at least okay
333:56 - uh otherwise going to be similar where
333:59 - you increment the number and decrement
334:01 - think about what you need to be doing or
334:02 - you're going to increment the number
334:04 - when somebody hits minus no you're going
334:07 - to decrement the numbers your decrement
334:09 - function will do that okay and then this
334:12 - line of code I'll already give you a
334:14 - hint this will look very similar or
334:15 - pretty much it'll be you know it's a
334:18 - high chance it'll be the exact same okay
334:20 - so take about five seconds to pause and
334:23 - try the try making when you click this
334:25 - button things work and then make sure to
334:29 - restart the server with command enter or
334:32 - control enter if you're on Windows or
334:34 - just by or just by stopping and starting
334:36 - again to have the new changes take
334:38 - effect and then go to this other browser
334:41 - and run your app and hit the minus
334:43 - button run your app like go on back to
334:46 - the home page and then hit the minus
334:48 - button
334:49 - right and then see what happens okay so
334:52 - I'll give you about five seconds to
334:53 - pause and try adding the decrement
334:56 - functionality all by yourself so five
334:58 - four three two one all right welcome
335:03 - back let's go ahead and let's add the
335:06 - decrement functionality together so it's
335:08 - gonna be very similar right so I'm gonna
335:10 - do app.route
335:11 - and I'm going to say decrement this will
335:14 - handle what happens at this path we've
335:16 - gone through this right
335:18 - and then I'm going to go ahead and call
335:20 - my function decrement okay again these
335:22 - function names don't matter but I'm
335:24 - going to call it decrement here because
335:26 - that's clean and it makes sense
335:28 - and I'm gonna get the number from our
335:31 - database and I'm going to decrement it
335:33 - so I'm going to say minus equals one you
335:35 - could also do
335:36 - multiply equals one and minus equal 1 is
335:39 - the same thing as basically saying
335:43 - it's same thing as saying this okay but
335:45 - it's just easier to write it so I'm
335:47 - going to say minus equals 1 here
335:49 - so I'm decrementing it by one
335:52 - and then I'm just going to go return
335:54 - show so we're going to show
335:57 - the
335:59 - home page and then for number
336:03 - I'm gonna show
336:05 - the database number okay that's that's
336:08 - the number I'm going to send to my show
336:09 - function
336:12 - okay so I think that that should be it
336:14 - let's give this a try now so I'm gonna
336:16 - restart the server with command enter
336:21 - the server is restarting let's go back
336:23 - to our main app right over here if I
336:25 - decrement this should go down by one so
336:27 - let's try it
336:28 - hey let's go if I hit Plus
336:33 - beautiful right it goes up by one we hit
336:37 - minus it goes down by one right every
336:40 - single time
336:41 - so there it is
336:43 - just like that your very first app is
336:47 - done
336:48 - and if you want to show it off to
336:50 - everybody just take that URL make sure
336:53 - you take the home page URL right here
336:55 - and just send it to anybody you want
336:58 - right now and they can use it now this
337:01 - app is not mobile friendly so it might
337:02 - not look good on their mobile device
337:04 - but it is web friendly so as long as
337:07 - they're on the website on their computer
337:09 - desktop friendly so if you they're on a
337:11 - desktop it'll look great and it'll work
337:13 - great so look at that
337:15 - you did this with just a few lines of
337:17 - code Isn't that cool you did your very
337:20 - first project with python I mean this is
337:22 - mind-blowing
337:24 - I'm so excited for you that you got this
337:27 - done
337:29 - I'm just I'm excited I'm pumped you got
337:32 - this done congratulations uh this was
337:34 - wonderful and uh with that said let's
337:38 - keep on going and let's build some more
337:40 - amazing stuff
337:42 - all right what is up now we build this
337:45 - amazing app that is great but how did we
337:47 - build it and how did we build it so
337:49 - easily so there's a lot of mystery
337:51 - around this app for example what is this
337:53 - home page thing that's happening and
337:55 - what's up with the show function that
337:57 - just magically does everything in
338:00 - reality things aren't going to be this
338:01 - easy for you right now the truth is that
338:04 - there's a lot of stuff that I'm hiding
338:06 - from you and I've done a lot of the hard
338:08 - work for you and so when you're writing
338:10 - the code you only have to write a few
338:11 - lines of code and then everything works
338:12 - so we're going to unpack and demystify
338:15 - this app into its component parts and
338:17 - see the real truth about how this is
338:20 - actually made
338:22 - and you're gonna build it with me from
338:24 - scratch and we're just going to unpack
338:25 - one thing at a time until we're fully
338:27 - unpacked where there's really no
338:29 - abstraction that I'm offering you just
338:31 - have a fully built app with python now
338:35 - let's start off with the simple things
338:36 - first the framework we're going to be
338:38 - using to build this app is called flask
338:40 - flask is a web development framework
338:42 - very popular with python and allows you
338:45 - to build apps really easily when you
338:47 - think of flask you could think of it
338:48 - kind of like node.js and JavaScript now
338:50 - if you're a beginner none of that might
338:52 - make any sense to you and that's fine as
338:53 - far as you're concerned when you want to
338:55 - do stuff on the web with python you use
338:57 - flask as simple as that there are other
338:59 - Frameworks like Django Etc we're gonna
339:01 - keep it with flask because flak flask is
339:04 - the simplest and easiest one to
339:05 - understand and when you get more
339:07 - advanced I think you could go on to
339:08 - Django or something else but flask is
339:10 - very popular lots of apps are built on
339:12 - it so let's go back to our app right
339:13 - over here okay now we have a bunch of uh
339:18 - things that that we don't really fully
339:20 - understand like what is this counter app
339:23 - file what's this home page what is this
339:25 - app what does this show what is this
339:27 - database thing okay so let's deconstruct
339:30 - kind of one thing at a time with our app
339:32 - now
339:33 - the one thing I want to deconstruct
339:35 - First is let's go ahead and start by
339:39 - deconstructing
339:40 - um deconstructing this show function
339:44 - okay so what the heck is show and how is
339:47 - it working now in reality you won't have
339:50 - a flask a function called show okay what
339:53 - you will have is a function called
339:56 - render template string so let's go ahead
339:59 - and play with that real quick so I'm
340:00 - going to say from flask import
340:05 - render template string
340:09 - okay so that's what you're going to have
340:12 - now on this home page I'm going to go
340:15 - ahead and comment out this line just so
340:17 - it's there so you can see it in
340:18 - comparison but we won't be using it now
340:20 - if I run my app
340:22 - let's just say return
340:24 - hello
340:26 - and when I run my app you'll see that it
340:29 - won't look very great you should only
340:31 - see Hello right over here okay now let's
340:35 - start from there so I see that hello
340:38 - how do I write something so it looks a
340:41 - little bit nicer so we can use obviously
340:44 - we can just write regular HTML here but
340:47 - what we want to do here is we can also
340:49 - use render template string so I can
340:54 - do this render template string and I can
340:57 - go H2 and I can say hello and end H2
341:02 - okay and now what it's going to do is
341:04 - going to go ahead and show you that
341:06 - hello but since we're using HTML so
341:09 - it'll look bigger and kind of bolder
341:13 - now since we're using HTML
341:17 - and we're going to be using a lot of
341:19 - HTML let me go ahead and just kind of
341:21 - introduce you to HTML okay with python
341:25 - um you know or with anything really in
341:26 - general it's like hey how does how does
341:29 - web development work what is this HTML
341:31 - CSS stuff if you've never been
341:32 - introduced to it before it might be a
341:34 - little bit confusing but let's just go
341:36 - ahead and do this together so I'm going
341:39 - to go ahead and from flask instead of
341:41 - importing render template string but I'm
341:44 - actually going to import is from flask
341:46 - import render template okay just render
341:49 - template just that
341:51 - right or actually you know what let's
341:53 - leave it as render template string let's
341:55 - leave it as that and I'm just going to
341:57 - go ahead and create a variable we'll
341:59 - just call it HTML for now and I'll put
342:01 - three
342:03 - um
342:04 - quotes like this so this will think of
342:06 - this as like our HTML file okay what we
342:08 - would make and HTML files usually have a
342:12 - certain structure but I will just say
342:14 - okay we have a H2 and that says hello
342:17 - end it and and whatever I wrote here in
342:19 - this HTML I'm gonna just go ahead and
342:21 - pass it to my render template string so
342:23 - I should see essentially the same thing
342:24 - so let's remove this and let's give it
342:26 - our HTML you could call this a variable
342:28 - whatever you want we could call this
342:31 - um my I could call this my home page
342:33 - okay so it's different than this home
342:35 - page that we're being passed I'm gonna
342:36 - say my home page right there and let's
342:38 - just copy and let's paste this
342:41 - okay let's run this now so if we give
342:43 - this my home page okay we're getting an
342:45 - error so let's do that and let's see if
342:48 - that still gives us an error it doesn't
342:49 - and that works okay so you can see my
342:53 - home page is being rendered out
342:55 - now what else can I do with in HTML well
342:58 - I could have an input box if I wanted
343:00 - and the input could be you know type
343:04 - uh type text
343:08 - so now if I run this
343:10 - I can see that I'll have an input type
343:13 - right over here but type text
343:16 - okay I could also have a button if I
343:19 - wanted so I could do input
343:21 - and I could say type is submit
343:24 - there's multiple different ways of doing
343:26 - buttons and make sure you close this tag
343:27 - with the self-closing tag like that
343:30 - let's run this
343:33 - okay and now you can see I have uh input
343:36 - thing that I could actually type in and
343:38 - then I have also the submit button
343:40 - showing up okay in this input I could
343:43 - actually have have a placeholder that
343:45 - says let's say username let's run this
343:47 - make sure you do command enter that'll
343:49 - restart your server
343:51 - and there you go now it says placeholder
343:53 - is username right over here
343:55 - okay or clever
343:59 - clever cozy whatever right I want it to
344:01 - be
344:02 - so we can write H2 elements we could
344:04 - also write H1 elements in our H1 is even
344:08 - bigger so you could go H1 or if you want
344:11 - to go all the way you know hello
344:13 - say welcome back
344:16 - and then you could go all the way down
344:17 - to H6 it's the smallest
344:21 - and I could do this
344:23 - and let's run this
344:25 - okay and H6 again is going to be the
344:27 - smallest you can see I have that this
344:30 - that and then I can also make input
344:33 - Fields right and HTML is very nice and I
344:35 - could have things like P tags so I could
344:37 - have a P tag and the P tag could say
344:41 - hi my name is qazi
344:45 - okay PTAC boom
344:47 - and we run that
344:50 - okay let's restart our server so let's
344:52 - do command enter
344:55 - and there you go P tag is showing so P
344:58 - tag is a paragraph tag so if you want to
345:01 - write like a paragraph or like a text
345:03 - you normally will wrap it in P tags if
345:06 - you want to have inputs where the user
345:09 - can type in or do something then you'll
345:11 - call them inputs okay kind of like this
345:14 - H6 is heading six so that's the smallest
345:17 - heading and H1 is the biggest heading so
345:19 - you could do all kinds of stuff like
345:21 - that
345:22 - now what I could do is what if I wanted
345:25 - to wrap all of this and color it red how
345:29 - could I do that well
345:32 - I could uh let's start off with how
345:34 - could I wrap one thing and give it a
345:36 - color of red so let's just say welcome
345:37 - back if I want to give it a color of red
345:39 - well what I can do is I can create a div
345:41 - and divs are these like these boxes that
345:45 - you're creating around things and I can
345:46 - wrap this H2 in this diff okay in this
345:49 - div right here so you can see I have
345:53 - uh let me zoom in a little bit more okay
345:57 - all right there we go so you could see I
345:59 - have this H2 and I've wrapped it in this
346:03 - div okay so in other words all I've done
346:06 - in my mind is I've created this empty
346:07 - box around this
346:09 - and now I can control that box and I can
346:11 - style that box and I can do whatever I
346:13 - want okay so that's all I've done that's
346:15 - all what a div is doing
346:17 - now what I can do is I can do something
346:19 - called so there's something called CSS
346:21 - okay so here you're learning a little
346:23 - bit of HTML
346:25 - and then there's CSS so CSS is the
346:28 - styling of a page okay so HTML just
346:30 - gives its structure so it just shows the
346:32 - page
346:33 - but CSS is how the page is actually you
346:36 - know it gets styled all right to explain
346:39 - to you what styling is and how it works
346:40 - say I go to Netflix you could go to
346:42 - youtube.com or really anywhere and say
346:45 - that I
346:46 - I right click here can we turn this off
346:49 - okay so say I right click here and we
346:52 - hit inspect element okay now inside of
346:56 - inspect element
346:57 - say I go to the uh to the Head okay and
347:02 - usually in the head of a HTML page okay
347:04 - so this is usually how HTML page is
347:06 - structured and you can even highlight
347:08 - things on the HTML page so I could like
347:10 - go here
347:12 - and you know we could see like all right
347:14 - this is like a HTML div you could see it
347:16 - says div and then it has an image inside
347:18 - of it and has a number next to it Etc
347:21 - but let's go ahead and I'll unselect
347:24 - this okay and I'll go all the way to the
347:26 - top and so you'll see like HTML we have
347:29 - HTML although at the top and at the
347:31 - bottom so that's usually how a HTML page
347:33 - is structured and then it'll have head
347:35 - it'll have body body is usually where
347:38 - you put all of your content okay so
347:40 - that's where like binge-worthy TV shows
347:43 - and all of this will go okay head is
347:46 - where often times people put styling
347:48 - okay this actually always where you put
347:51 - your style file or you link your style
347:53 - file so let's go ahead and remove the
347:55 - style file and Watch What Happens so
347:57 - I'll go here and I'll basically what I'm
348:00 - trying to do here is I'm trying to find
348:02 - anything that says style sheet so you
348:04 - see where it says Rel style sheet it's
348:07 - usually a style sheet I'm going to click
348:08 - it and I'm just going to delete it and
348:10 - then click another one delete it click
348:12 - another style sheet and delete it
348:14 - so once I've deleted all the styling on
348:17 - here now there's essentially no more
348:20 - styling left so look at this this is
348:22 - actually how Netflix would look if you
348:24 - didn't have any styling this is what it
348:26 - would look like
348:27 - okay and you tell me if this looks good
348:33 - it doesn't look very good right this is
348:35 - how
348:36 - this is how everything would be looking
348:38 - on Netflix this is Netflix
348:41 - okay hard to believe right
348:44 - very hard to believe
348:46 - now and then you can see that like list
348:48 - over here it looks so hideous right all
348:51 - of it just looks terrible
348:53 - so if I hit inspect right in our in our
348:56 - head is where we removed it from
348:58 - and if we refresh this page now
349:02 - you'll see that the styling will come
349:04 - back the style file is linked and now
349:06 - boom all the styling is there okay so
349:08 - that's just a little bit of how HTML and
349:11 - styling Works in real life
349:13 - so here's how I can add styling here now
349:16 - in our app I'll zoom out here so inside
349:18 - of our app
349:20 - I'm gonna go ahead and say this div that
349:23 - we created here right this block right
349:25 - here that we created I want to give it a
349:27 - color red so I can actually say
349:29 - background Dash color
349:31 - okay and let's put some uh we're gonna
349:34 - put quotes around it
349:36 - and we're gonna say style equals I'm
349:40 - gonna say this and I'll give it a color
349:42 - of red let's say and then end quotes and
349:45 - put a semicolon here
349:47 - okay let's go ahead and restart our
349:50 - server now let's see if anything happens
349:53 - okay we don't have any changes yet ah so
349:56 - this quote should not be here actually
349:58 - so let's remove that quote from there
350:00 - let's do it right here okay so we
350:02 - basically want to say style is an
350:04 - attribute and the style that we're
350:07 - giving this is a background color of red
350:10 - so now let's hit command enter and run
350:12 - this and now you can actually see that
350:14 - that div is red okay so here's what I
350:17 - want you to do I want you to make this
350:20 - entire thing red so do that as an
350:22 - exercise okay real quick and basically
350:24 - what you're doing is you're going to be
350:26 - wrapping the entire thing in one box so
350:29 - a hint for you is you should only write
350:31 - one line of
350:34 - essentially two lines of code and you
350:36 - should only create one new div and your
350:39 - div should wrap everything all of the
350:43 - content inside of that div
350:45 - and then all I want you to do is simply
350:47 - just go ahead and say color red okay
350:51 - background color red and once you do
350:53 - that that should be good to go okay so
350:55 - I'll give you five seconds to pause and
350:56 - try it on your own five four three two
351:00 - one all right let's go ahead and do it
351:03 - together now so since I want to put
351:06 - everything inside of a div I'm just
351:08 - going to wrap the whole thing inside of
351:10 - a div okay and I don't need to indent it
351:13 - but I just like to indent it so
351:14 - everything can look cleaner so I'll just
351:16 - go ahead and indent that all right so
351:18 - there we go
351:19 - and the CSS part just so you're confused
351:22 - the CSS part is this part any part that
351:26 - has styling that's CSS this is literally
351:29 - that's the CSS part and then the HTML
351:31 - part is like the entire thing is the
351:33 - HTML Port okay
351:36 - all right so you know think of HTML as
351:40 - like the skeleton or the body that you
351:43 - have and then think of CSS as the
351:46 - clothing or the Fashion on that body so
351:49 - the shirt that I'm wearing is CSS okay
351:51 - but like my body and my actual skin
351:54 - that's more like HTML that's a skeleton
351:56 - the structure that holds me up
352:00 - okay now that I've put everything inside
352:01 - of that div
352:03 - I can just go ahead and say style I'll
352:06 - say background Dash color
352:08 - red
352:12 - okay let's run this
352:15 - and you can see the entire thing is red
352:17 - now okay so that's just to kind of give
352:19 - you an example of how things are working
352:21 - under the hood and how you would create
352:23 - your own HTML
352:26 - now I'm going to remove this annoying
352:28 - looking red and we're going to move on
352:30 - to the next part of our application
352:32 - let's remove the Reds here okay let's
352:35 - remove all of this I'll remove this
352:37 - entire div and remove this entire div
352:39 - and we'll hit command enter so we
352:41 - restart the server okay and let's remove
352:44 - that div there too
352:47 - we don't need that anymore
352:51 - okay let's hit command enter here and so
352:54 - just so we can have everything clean and
352:57 - nice okay just like this
352:58 - now if I go to our final version of the
353:01 - app which is this right here
353:04 - you will see that I have two buttons
353:06 - okay so these are two buttons just like
353:09 - this button that we created the only
353:11 - difference between this button and this
353:13 - button is that their styling is
353:15 - different but they're still both buttons
353:18 - that's it alright so this just has a
353:20 - different styling and I'll even show you
353:23 - a little bit of how you can add styling
353:25 - but in this course we're not going to go
353:26 - too much into styling okay that's not my
353:28 - goal my goal is to keep you focused on
353:30 - the python aspects of the course
353:33 - all right so that's what's happening
353:35 - there okay so they're they're both of
353:37 - them are buttons so this page will have
353:38 - two buttons but watch what happens when
353:40 - I click a button right so if I click a
353:42 - button you'll notice that the URL at the
353:44 - top will change and say slash decrement
353:48 - slash decrement so I'm going to click it
353:50 - and Watch What Happens boom look at that
353:52 - so how is that happening how is that
353:54 - saying slash decrement over there and
353:57 - how come when I click the plus button it
353:59 - takes me to slash increment okay well
354:03 - let's go ahead and see that so
354:05 - what I can do is I can take let's say an
354:09 - input so like I'm going to remove
354:11 - um let's say I make a new button okay
354:14 - and I'm going to remove both of these
354:16 - for a second and to make a new button
354:18 - I'll say form
354:20 - okay and we'll close form and inside of
354:23 - this form I'm going to put an input
354:27 - and it'll be a self-closing tag and we
354:29 - will say and self-closing tag just means
354:31 - when you open a tag in HTML you have to
354:35 - close it like this so if you open an H1
354:37 - you have to close the H1 okay H2 you
354:39 - close H2 if you put a div you close the
354:42 - div same thing with form if you open the
354:44 - form you got to close the form now in
354:46 - this input I'm going to go ahead and
354:49 - just put a button and so I'm going to
354:50 - say type submit
354:53 - okay and um yeah we'll just leave it as
354:58 - as uh as that okay we'll leave it as
355:00 - that
355:01 - now the only problem with this type of
355:03 - button
355:05 - when you put submit is that you can't
355:07 - really change the text so instead what
355:10 - I'd like to do is I'd like to just say
355:14 - uh button and say let's say
355:17 - um strawberry
355:20 - okay and we'll close this button and now
355:23 - when I run this so let's restart the
355:25 - server I'll hit command enter you can
355:26 - also stop and start again now I should
355:29 - just see the button strawberry okay and
355:32 - also open this in a new tab because
355:33 - you'll need to open a new tab in order
355:36 - to see the URLs changing okay so keep
355:39 - this open in a new tab
355:41 - and what I like to do is I like to open
355:43 - this up kind of one third of the
355:45 - two-thirds of the way and then I like to
355:47 - take the app that I'm trying to see and
355:49 - set it one third of the way so that way
355:52 - on the left hand side I could see code
355:54 - and on the right hand side I could see
355:55 - my app
355:58 - all right so now I have this button but
356:00 - when I click that button
356:01 - if I go all the way to the end my URL
356:04 - doesn't change yet so how will I get my
356:06 - URL to change so what I want to do here
356:09 - is I want to say
356:11 - action and for the action of this I want
356:15 - to give it
356:17 - a path so I'll just say strawberry
356:20 - okay so when you click the strawberry
356:22 - button it'll actually take you
356:25 - to the strawberry page
356:28 - all right so now let's go ahead and try
356:31 - I'm going to full screen this so you can
356:32 - see this I'm going to hit strawberry and
356:34 - Watch What Happens
356:36 - okay actually let's refresh our server
356:38 - so I'm going to hit command enter
356:42 - okay and then let's go ahead and give it
356:44 - a try
356:46 - we'll refresh here
356:47 - and I'm going to hit strawberry and look
356:50 - at that it took me to the page called
356:52 - strawberry
356:54 - right so now so this is us working on
356:57 - our front end right now okay we
356:58 - connected our back end earlier but now
357:00 - we're actually building out our front
357:01 - end the client side of the app and we're
357:05 - we're making it work so if I click
357:06 - strawberry that's very good if it's
357:09 - taking them into the strawberry page now
357:11 - let's go ahead and I want you to try
357:14 - making a button on the home page okay so
357:16 - go back to the home page of the app and
357:19 - the button that I want you to make
357:20 - should be called banana okay so when I
357:23 - click banana it should take me to a URL
357:25 - route called banana so I want you to
357:27 - give that a try right now I'll give you
357:29 - five seconds five four three two one
357:35 - time okay
357:38 - so uh if you've paused the video and
357:41 - give it a try good job if you haven't
357:42 - that's okay we'll do this together now
357:43 - so I'm going to create a form
357:45 - all right
357:47 - and we'll end the form the action of
357:50 - this form will be banana and
357:54 - the button will be banana just like this
357:57 - okay
357:58 - so this will give you a button and this
358:01 - form action thing is what does the thing
358:04 - that does the magic of like when you
358:05 - click it it actually takes you to that
358:07 - page okay the action is doing that so
358:10 - let's keep going here I'll do command
358:12 - enter and we'll restart this app here so
358:14 - just make sure you come here and you
358:16 - refresh
358:17 - okay once you start now you should see
358:19 - strawberry and banana and I'll full
358:20 - screen this so you can see URLs changing
358:23 - so I'll click strawberry first and you
358:26 - saw it change now I'll hit back
358:28 - and I'll click banana now and you can
358:31 - see they're actually going to the banana
358:33 - route
358:34 - now that's very good now let me ask you
358:38 - this since we're doing that that's
358:40 - awesome how do we actually get
358:43 - uh you know so if we go back to our
358:46 - completed app so let's take this app and
358:49 - let's put that over here if I go to my
358:50 - completed app
358:51 - right this part is very good like if I
358:55 - hit this minus sign it changes the URL
358:57 - if I hit this plus sign it changes the
358:59 - URL but these buttons are also connected
359:02 - to code remember so for example
359:05 - when I click this minus sign it actually
359:07 - runs this function over here
359:11 - so how do I connect my strawberry and
359:14 - banana in a way so
359:17 - this um like a like a strawberry
359:20 - function runs or a banana function runs
359:22 - when it's clicked okay maybe maybe uh
359:26 - when you go to this page instead of it
359:28 - saying not found it shows a if I click
359:31 - strawberry instead of doing that it
359:33 - actually shows me a strawberry emoji and
359:35 - when I go to the banana page it shows me
359:37 - the banana Emoji how could we do that
359:39 - so I'll tell you this you actually have
359:42 - all the information you need to be able
359:44 - to complete this this will be a
359:45 - difficulty of like six or seven you need
359:48 - to just recall and put things back
359:50 - together
359:52 - kind of like how we did for increment
359:53 - and decrement because you already have
359:55 - the pages routing you so it's very
359:57 - similar to the exercise we've already
359:59 - done so I'll give you about five seconds
360:01 - to pause give it a real try and then
360:03 - come back and let's do it together five
360:05 - four three two one time all right if you
360:11 - give it a try and you got it good job if
360:14 - you didn't that's all right we'll do it
360:16 - together
360:17 - so I have these two forms right and and
360:22 - I have these routes so when I think the
360:24 - route in my mind I'm already thinking I
360:27 - gotta make that route so I can just do
360:28 - app.route
360:30 - and I can go ahead and do strawberry
360:33 - and the function that I do is going to
360:36 - be called strawberry
360:39 - okay and what this function will do is
360:42 - I'll just have it return
360:44 - strawberry that's it it's literally all
360:47 - I'll have it do okay let's hit command
360:49 - enter
360:50 - and then let's click strawberry and look
360:53 - at that that easy so
360:57 - you have the front end part you've made
361:00 - this button that's your front end part
361:02 - you did okay and this is your back end
361:04 - part
361:06 - okay where your front end makes a
361:09 - request to the slash strawberry page
361:11 - that shoots it over here
361:15 - then this piece of code runs on your
361:17 - back end or server side it gets this on
361:21 - the server's side and then it returns
361:23 - that
361:25 - okay
361:26 - it returns that back out to your front
361:29 - end to your HTML
361:31 - okay so that's like a it's a
361:33 - relationship there's like you're going
361:34 - from client to server side to client
361:36 - side okay I know it sounds complicated
361:38 - right now but over a long period of time
361:41 - these terms will start to make sense
361:43 - okay but you're going from front end to
361:45 - back at the front end okay so this HTML
361:47 - part right over here is the front end
361:48 - part in other words whenever I say front
361:51 - end it's the stuff you can see and touch
361:52 - so this button over here right when it
361:55 - shows up that's something you can see in
361:57 - touch so that's front end
361:59 - this year you can't see and touch this
362:00 - is happening on the back end but then
362:02 - when it shows it back up here and you
362:04 - can see and touch it again it's you know
362:06 - that it's showing it on the front end
362:08 - okay so usually things you can see are
362:10 - easy way to sit that's front end things
362:12 - you can't see AKA you storing data in a
362:15 - database that is more of the back end so
362:18 - we've already done this now I want you
362:20 - to go ahead try and adding the banana
362:23 - route so that when I click the banana
362:25 - button it actually shows me the banana
362:27 - Emoji so I'll give you about five
362:29 - seconds to pause and give that a try
362:30 - five four three two one all right let's
362:36 - do it together now
362:38 - so I'm going to go ahead
362:40 - and I'm going to go ahead and say
362:42 - app.route
362:43 - and we're going to do banana
362:45 - that alone is already going to run this
362:47 - piece of code here that I'm about to
362:49 - write
362:50 - and I'm just going to go ahead and say
362:52 - return banana okay if you don't have
362:53 - emojis go get emojis make sure you're
362:55 - putting it in a string okay putting
362:58 - those quotes around that it's important
362:59 - and uh if you don't have a mode you just
363:02 - use the word strawberry or banana that's
363:03 - fine
363:04 - okay now let's restart the server hit
363:07 - command enter and then hit banana and
363:09 - there we go now we are seeing a banana
363:13 - output it to the screen when I click
363:15 - that button
363:16 - so just like that with that much ease
363:19 - here's what you've done
363:21 - okay
363:22 - this
363:23 - form button here
363:25 - is what's showing
363:28 - this guy
363:29 - okay specifically this form action here
363:32 - is what's updating the URL once you
363:35 - click
363:37 - all right and then
363:39 - this guy over here is rendering what
363:41 - happens on the next page once you click
363:43 - it so once you click it
363:48 - right this is the guy
363:51 - that's showing all of this
363:55 - so that is how
363:57 - all of this is Magic is actually working
364:00 - okay so those are the buttons that you
364:02 - didn't have to create that we
364:03 - essentially helped create for you now
364:06 - how will you convert this from
364:08 - strawberry and banana into increment and
364:11 - decrement well think about it right
364:14 - you will still have a form and an action
364:16 - and you still have two buttons so let's
364:18 - say that I get rid of all of this stuff
364:20 - over here right I don't need that and
364:22 - let's say I get rid of all of this stuff
364:24 - over here let's restart this let's
364:26 - refresh this if I go to the completed
364:28 - app there are two buttons that's it
364:31 - those are the only two buttons we
364:33 - actually need right here
364:35 - right now let's go back to our app we
364:38 - got two buttons so that is good now
364:40 - let's look at what those buttons are
364:42 - called This is called minus sign this is
364:44 - plus sign those are the titles of that
364:46 - button right or the names or whatever so
364:49 - simply we're going to change the
364:50 - strawberry with a minus sign and this
364:52 - banana what will we change that with you
364:54 - go ahead and do that part I'll give you
364:56 - three seconds you could do this in three
364:57 - seconds three two one
365:00 - we're gonna give it the plus sign okay
365:03 - so now we have two buns let's hit
365:05 - command enter so it refreshes let's
365:07 - refresh our page and let's see what
365:09 - happens great so now we have two buttons
365:11 - here that's very very very very very
365:13 - very very very good now we need a number
365:15 - at the top we need a big huge number
365:18 - just like this at the top so here's what
365:21 - we're gonna do I'm just gonna go ahead
365:23 - and let's say
365:25 - uh for now I'm just going to do H1 and
365:28 - I'll just say 23 okay and we'll we'll
365:32 - end this H1
365:35 - okay
365:37 - and then let's run this
365:42 - okay let's refresh this and there we go
365:44 - we got 23 and we got a minus and a plus
365:47 - now when I click this minus I go to the
365:49 - strawberry page when I click the plus I
365:51 - go to the banana page right but that's
365:53 - not what I want to happen what I want to
365:55 - happen is I want this increment function
365:59 - to run and I want this decrement
366:01 - function to run once I hit this minus
366:04 - sign and this plus sign
366:06 - so if I want those things to happen well
366:09 - I can actually just change the names to
366:11 - increment and decrement right because
366:12 - this button is decrement so I can
366:15 - actually change instead of strawberry or
366:17 - whatever I could just say decrement
366:19 - right there and instead of banana right
366:22 - here I could say increment right here
366:24 - now what's happening is it's actually
366:26 - going to run those functions at the
366:28 - bottom okay but I'm going to remove all
366:31 - of these show commands
366:33 - okay we don't need those commands for
366:35 - now and let's say we even remove this
366:36 - render template string command and home
366:39 - I'm just going to say hey render my home
366:42 - page that's it
366:44 - so all of these I'm just going to have
366:46 - them return my home page for now that's
366:48 - it so if we run our app
366:50 - hit command enter and let's run our app
366:52 - and let's refresh here we should still
366:54 - see the same exact app right now okay so
366:56 - nothing should have really changed that
366:58 - much
366:58 - now when I hit the minus sign I want to
367:02 - detect that I've hit the minus sign so
367:04 - we can add a print statement or we can
367:07 - have it say return so for now let's just
367:09 - have it say return and we will say
367:11 - um
367:12 - you know we we land on the increment
367:15 - page increment page and here we will
367:19 - land on the decrement
367:21 - page okay so I'm going to hit command
367:24 - enter let's hit minus sign and you can
367:27 - see I entered the decrement page and if
367:30 - I hit plus I enter the increment stage
367:33 - so this is a really good sign so far
367:35 - because it means our buttons are
367:37 - connected which means even this is
367:39 - happening this DB number command is
367:41 - happening so whatever number is stored
367:43 - in our database is actually going up
367:46 - so I don't need this strawberry and
367:48 - banana route anymore I can actually get
367:50 - rid of them those are there just to help
367:51 - you kind of understand what we were
367:53 - doing okay now the next thing is I need
367:57 - this number to be dynamic because right
367:58 - now this number is not a dynamic number
368:01 - it's a
368:03 - um hard-coded number but that's not what
368:05 - I want I want this number to come from
368:07 - the database
368:08 - now this is the HTML part which means
368:10 - this is the static part okay so usually
368:12 - any HTML CSS code is static which means
368:14 - HTML does not have it's not a
368:17 - programming language it doesn't have the
368:19 - capability to like calculate stuff and
368:22 - do stuff it can just show what already
368:25 - is meaning that
368:27 - HTML can automatically go from 23 to 24.
368:30 - okay it's static it can't change so what
368:34 - we need to do is
368:36 - use Python to get the updated number
368:38 - pass that number back to HTML and then
368:41 - HTML can show it in the front okay
368:44 - that's kind of how the relationship
368:46 - between HTML and CSS and and python
368:50 - works here
368:51 - so how do we give it a number well if I
368:54 - do just return my home page or return
368:57 - increment we can't pass it any data okay
369:01 - so how do we do this in that case well
369:05 - how let's just start with the my home
369:07 - page how do I give Dynamic data to my
369:10 - home page so it can actually render that
369:12 - out over here here's what I can do
369:15 - I need to actually call my render
369:17 - template string function that I had
369:19 - imported from flask earlier okay so I'm
369:21 - going to go ahead copy this render
369:23 - template string
369:25 - and I'm going to paste that over here
369:28 - render template string
369:29 - okay and render template string is a
369:33 - function that takes in the path so we'll
369:35 - give it home page or our my home page
369:37 - this this one that we just created over
369:40 - here we'll give it that as a path and
369:43 - then it takes in like what are the
369:44 - arguments that you actually want to send
369:46 - it okay which means like
369:49 - uh you could send it a whole bunch of
369:51 - information and it will have access to
369:55 - it on in the HTML side okay so for
369:58 - example I could actually say
370:00 - here's a cookie okay and I can actually
370:03 - give it a cookie now
370:05 - I can change this cookie variable right
370:07 - over here
370:08 - my HTML will have access to it okay but
370:12 - in flask there's something called ginger
370:14 - templating
370:16 - j-i-n-j-a and that allows you to write
370:18 - like python flask code inside of HTML so
370:22 - it can basically allow you to make HTML
370:25 - Dynamic so here's what I mean instead of
370:27 - just 23
370:29 - I could actually change this with the
370:31 - word cookie
370:33 - and now whatever is the value of cookie
370:35 - that I'm storing here it'll actually
370:37 - pass it right there
370:40 - okay so let's go ahead
370:43 - and uh hit command enter and let's
370:46 - refresh and let's see if we get a cookie
370:48 - at the top there we go you could see
370:51 - that we're actually getting back a
370:53 - cookie at the top so we we're giving our
370:56 - page access to some data and it's able
370:59 - to retrieve it so I could pass it
371:02 - multiple pieces of information for
371:03 - example I could give it a cookie
371:05 - variable I could also give it a
371:09 - um age variable and let's say age it
371:11 - says 28.
371:13 - and now we have access to the edge so I
371:15 - can go ahead and say
371:17 - age is and I can see the age variable
371:21 - right there okay so now if we restart
371:23 - this server and hit Refresh on our app
371:26 - you could see age is 28 it's whatever I
371:29 - passed in here
371:30 - it's passing it in boom right there
371:34 - right so let's go ahead and delete the H
371:36 - because we don't need that and for
371:38 - cookie we don't really need the cookie
371:39 - right well we actually need access to is
371:41 - the number and the number we can get
371:44 - from our database so I could actually
371:46 - say DB
371:47 - number okay now let's go ahead and
371:50 - refresh so I'm giving it access to
371:52 - number and make sure that this is the
371:54 - number that we want to pop in here so
371:56 - replace this variable cookie with this
371:58 - number so go ahead and do that now give
372:00 - you three seconds to do that three two
372:03 - one time let's do it together boom I'm
372:06 - just going to change this number hit
372:08 - command enter and simply refresh
372:12 - now it's going to have the number here
372:14 - uh that's in our database okay now if I
372:19 - hit uh since we've connected I believe
372:22 - let's see whatever we connected
372:24 - so we have increment working except when
372:27 - you click increment watch what's going
372:29 - to happen it's just going to take you to
372:30 - this page
372:31 - that's going to say increment but when I
372:33 - come back
372:35 - right nothing now if I refresh you'll
372:37 - see it says one so if I actually go here
372:39 - it'll take us to the page increment when
372:41 - I go back and refresh the home page
372:43 - it'll say too so incrementing is
372:45 - happening we're incrementing the
372:47 - database except we're going to a
372:51 - different a completely different page
372:54 - okay and later we're going to
372:55 - deconstruct what databases as well what
372:57 - is this database thing it will
373:00 - deconstruct that as well leave it as a
373:01 - note here for now
373:03 - so here
373:06 - if you notice
373:08 - in our finished app when I hit minus it
373:10 - renders me back to the home page it
373:12 - doesn't take me to a newly designed page
373:15 - so we should still be using this exact
373:18 - page that we've created here and we
373:19 - should just reuse it okay so this page
373:21 - here we should just reuse that page so
373:24 - I'm going to go here and return I'm
373:26 - going to say my home page okay and we're
373:29 - going to say render template string so
373:32 - you can see render template string
373:34 - allows us to pass arguments to our back
373:36 - end
373:40 - okay boom and render template string my
373:44 - home page and then the argument I'm
373:45 - going to give it is also number
373:48 - DB number
373:50 - so now increment page is going to look
373:53 - exactly like our home page and this
373:55 - number is going to be updated
373:57 - dynamically because it's literally going
373:59 - to just run this pop in the dynamic
374:01 - number and then output that number okay
374:03 - so if I full screen this app let's go
374:06 - ahead and actually hit command enter so
374:08 - we restart our server let's go ahead
374:10 - here and let me hit plus sign
374:12 - whoops getting an error let's refresh
374:15 - first let's hit plus sign now
374:18 - okay what's happening here let's go
374:20 - ahead and check
374:23 - uh
374:24 - okay let's go ahead and make sure we're
374:26 - going to the right page so we are going
374:27 - to the increment page
374:29 - so let's see what the error is I'll open
374:31 - this up so I could see what the error is
374:33 - it says my home page is not defined okay
374:35 - got it so it's uh it's my home
374:38 - underscore page okay like this so I just
374:41 - had a misspelling and you can use you
374:44 - know just debug your code and you'll be
374:46 - able to find your errors let's go ahead
374:48 - to our home page now
374:51 - and now let's hit plus and watch what
374:52 - happens you can see that I got routed to
374:55 - increment and boom it changed to six now
374:58 - hit let's hit plus again boom it changed
375:00 - to seven plus again boom it changed to
375:02 - eight nine
375:04 - I clicked it twice it's eleven so that
375:07 - is working completely okay so now I've
375:10 - changed my
375:12 - this function over here pretty much to
375:14 - not be using the baby guardrail code
375:16 - that I had for you right the show
375:18 - function you're writing your own actual
375:21 - factual flash code to make this work so
375:24 - very very good now what I want you to do
375:26 - is make decrement work so we've made
375:28 - increment work from scratch try to make
375:31 - decrement work by yourself I'll give you
375:32 - five seconds to pause and give it a try
375:34 - yourself five four three two one time
375:39 - all right so let's make this work if you
375:43 - have good job
375:45 - if you haven't let's do it together so
375:47 - I'm still going to be decrementing the
375:49 - database number
375:50 - and here I'm going to pretty much just
375:52 - do the same thing because I'm returning
375:54 - the home page and giving it the number
375:57 - that was just updated so now decrement
375:59 - should be done okay so let's hit command
376:01 - enter so we restart the server let's
376:04 - refresh here just to be just to be clear
376:07 - and if I hit minus right you could see
376:10 - that it took me to the decrement page
376:11 - and you could see decremented this
376:13 - number let's hit minus again minus minus
376:16 - minus let's hit plus plus
376:20 - and it's working perfectly okay now
376:23 - let's go ahead and destructure we still
376:25 - need to so we have pretty much
376:26 - destructured and deconstructed all of
376:28 - this code into real flash code we're
376:30 - very close
376:32 - uh we just need a couple of more things
376:34 - and then we should be good now
376:38 - uh so this show function you won't need
376:40 - it anymore you could actually delete it
376:42 - in this home page function that I gave
376:44 - you you won't really need it you could
376:45 - delete it okay now what we need here
376:50 - right is
376:51 - um we need to understand what this
376:53 - database thing is so here's the cool
376:55 - thing replit comes in with something
376:58 - called a database
377:00 - it's very nice and they make it very
377:02 - easy to use so if you want to use it
377:03 - here's instructions just click it and
377:05 - you'll if you click this insert over
377:07 - here it'll even insert this code for you
377:09 - so I'll hit insert that's it so once you
377:12 - import this database you can just use it
377:14 - just like how we were using it and we
377:16 - would just say DB and then we just use
377:18 - the DB and that was it so now you don't
377:20 - even need access to this DB that I was
377:22 - giving you for my counter app because
377:24 - you now know how to get it you can just
377:25 - replit import DB so we're done with the
377:29 - understanding of the database okay
377:33 - and we're just going to write one line
377:35 - of code which will account for what
377:37 - happens if you're running this app for
377:38 - the first time if you're running this
377:40 - app for the first time and you never had
377:41 - a database if you try to Index this
377:45 - number thing and this key was never
377:46 - created you're going to get an error
377:48 - okay so for example
377:51 - if I'm in Python and I'll go into shell
377:53 - and I'll type in Python okay and uh
377:58 - let's say that I create a variable
378:00 - called thing okay thing or or a database
378:03 - okay and it's a empty dictionary let's
378:06 - just say if I try to go ahead and grab a
378:09 - number from there watch what's gonna
378:10 - happen I'm going to get in there it's
378:11 - going to say what the heck there is no
378:13 - key there's no key so what I want to
378:16 - basically say is I want to say hey if
378:17 - number key is not in my database
378:22 - well then I just want to go ahead and
378:25 - create that key so I'm going to go ahead
378:26 - and say
378:28 - uh database number
378:31 - and I want to just set that equal to
378:34 - zero because that's where the default
378:36 - number should start from
378:38 - okay so I'll do that and now if we look
378:40 - at the database you can see it actually
378:42 - just created this so now if I try to
378:45 - index it
378:47 - or if I try to increment it it won't
378:50 - have a problem it'll just allow me to
378:52 - do that without throwing an error right
378:55 - you can see it's incrementing and I can
378:56 - keep incrementing it
378:58 - right and now I print it out it says
379:00 - number is three because I incremented it
379:02 - twice
379:03 - so on and so forth so this line of code
379:05 - here we're just going to write that
379:07 - right here so I'm going to say if
379:09 - number
379:10 - not in DB
379:14 - then
379:15 - DB number just create a new key
379:18 - and set it to zero
379:20 - okay so this is like useful for
379:22 - initializing the database if it's not
379:24 - been initialized yet okay so we're done
379:26 - with so now you're completely done with
379:29 - understanding the database and how it
379:30 - works and if you actually command enter
379:32 - and run this app from scratch let's
379:34 - refresh
379:36 - it will everything will work so if you
379:38 - hit plus it'll work if you hit minus it
379:40 - should be working
379:41 - okay very very very very very very good
379:44 - great
379:46 - so we're done with that part when it
379:48 - comes to understanding the database you
379:52 - know we're done okay now what's what's
379:55 - left what's well what are some of the
379:57 - other things that you have to kind of
379:59 - understand or you have to know so the
380:01 - next thing I would say is
380:04 - this app thing where's this app dot run
380:07 - coming from how are you doing app.rout
380:09 - whatever this is a flask app that you
380:11 - actually initialize at the very start of
380:14 - your app so whenever you have a flask
380:16 - app here's what we need to do from flask
380:18 - we need to actually import flask this is
380:21 - a very important step of any flask app
380:23 - that you ever have
380:25 - most of the flask apps that you create
380:27 - will kind of come with this default code
380:30 - written in okay the next thing that we
380:32 - need to do is we need to Define what app
380:34 - is an app is just flask and name okay
380:37 - and this you honestly will never have to
380:39 - remember or memorize you will always
380:41 - just look it up how to initialize a
380:42 - flash Gap and this is how you'll have to
380:44 - initialize it okay so this right there
380:47 - just initializes a flask app and uh
380:50 - creates it for you and then in the
380:51 - future anytime you do app.something
380:54 - app.run for example it runs this flask
380:58 - app that you created okay so this is
381:00 - like something you can memorize or just
381:02 - look at it and copy it next time you
381:04 - don't really have to try to understand
381:05 - it too much that's just how you run a
381:07 - flask app so now
381:09 - we don't even need access to this app
381:12 - thing that we were getting from counter
381:14 - app and as a matter of fact we don't
381:15 - need access to counter app at all we can
381:17 - get rid of this whole darn thing and be
381:20 - left with this and now this is
381:22 - completely all of your own code with no
381:25 - help code from me right now okay so
381:28 - let's go ahead and hit command enter and
381:30 - let's run this again so I'll refresh
381:33 - okay and now if you hit minus it'll work
381:36 - minus right if you hit plus plus plus
381:42 - there we go
381:44 - okay everything is working now the only
381:47 - thing that's not looking very good in
381:49 - this app obviously is the styling The
381:52 - Styling looks kind of terrible so let me
381:54 - show you how you can get the styling as
381:56 - well okay and let me show you really the
381:58 - Santa is not real type of situation here
382:00 - so I've hidden a lot of things from you
382:02 - if you actually click here and you
382:04 - actually click show hidden files
382:06 - Okay click here and the three claps
382:09 - collect collapsible dots right there
382:12 - and hit show hidden files you'll see
382:14 - there's a bunch of hidden files so I
382:16 - don't want you to worry about this file
382:17 - config and I don't want you to worry
382:20 - about this file vent okay the only files
382:23 - I I have the solution for you right here
382:25 - and I have the raw solution for you
382:27 - right here okay so this is the solution
382:29 - with the guardrails the baby guard rails
382:31 - and this is the actual factual truth the
382:34 - raw raw raw code that you would have to
382:36 - write if you coded this app up from
382:38 - scratch okay
382:39 - so those are they're available for you
382:42 - if you want to see them now what's
382:43 - interesting is I want to show you this
382:44 - static app where there's a CSS file and
382:48 - here we've written already a bunch of
382:50 - CSS for you which is the styling for the
382:52 - app so you don't have to do really
382:54 - anything
382:56 - um you just have to import the style
382:58 - file and then your app will actually
383:00 - look really good
383:02 - so let's go to our main.py file okay and
383:05 - at the top right here I'm actually just
383:08 - going to go ahead and import this okay
383:09 - and how I'm going to import this is I'm
383:11 - going to go ahead and say link
383:14 - and we're going to say Rel
383:16 - stylesheet
383:19 - okay and we're going to say href
383:23 - and I'm going to give it the path of
383:25 - this file right here okay so the path of
383:27 - this file right here is actually dot
383:30 - slash
383:31 - static because I need to go to the
383:34 - static folder and then inside of the
383:35 - static folder it's right there so I can
383:37 - say static slash counter underscore
383:40 - styles.css
383:42 - close it out
383:43 - and then that's it you can end the tag
383:46 - or you could just leave it like this
383:47 - either way it works it's a self-closing
383:49 - tag so that should be good and that will
383:52 - link your styling okay
383:54 - so let's go ahead
383:56 - and let's run this and let's see if it
383:59 - actually makes a difference so let's hit
384:01 - start
384:02 - wow look at that right it's already
384:05 - looking so much better so if I oh full
384:08 - screen it look at that the no the minus
384:10 - sign here is looking good right the plus
384:13 - sign here is looking great that is
384:15 - awesome this is already styled
384:20 - um now if you want to put these buttons
384:23 - so they're in a row
384:25 - and not in a column like this all you
384:28 - have to do just wrap it in a div okay
384:31 - so let's go ahead and take these forms
384:34 - and wrap both of these in a div I'll
384:36 - give you five seconds to try it on your
384:37 - own five four three two one let's do it
384:42 - together now I'm just gonna go ahead and
384:44 - say div here and I'll set div here
384:48 - and just indent this so it looks nicer
384:50 - okay I hope I select it all and I just
384:52 - hit tab or shift and tab to bring it
384:55 - back
384:56 - and let's go ahead and refresh and now
385:00 - your minus and plus signs should be
385:01 - above just like this they're looking
385:04 - juicy now right they look great
385:07 - awesome
385:08 - and the last thing we need to do is make
385:10 - sure that our 12 right looks like that
385:13 - 18 right because it has a yellow circle
385:15 - around it and so the secret for that is
385:18 - if you go to our styling
385:20 - and I'll kind of explain some of the
385:21 - styling to you here as well I'll open
385:23 - this in a new tab
385:26 - okay so some of the styling that you're
385:29 - seeing
385:30 - so if we look at this here
385:34 - right I can I can change things inside
385:36 - of my styling app as well that'll
385:38 - obviously change uh how my styling looks
385:40 - but for example let's take a look at our
385:43 - forms right or our buttons so this is
385:46 - the styling that's showing that so it's
385:48 - like for example it says Hey make the
385:50 - background color this so you can see the
385:52 - little gray outlines make the color of
385:55 - it this or transform 1.1 so when I hover
385:58 - over it you see how it becomes a little
385:59 - bit bigger
386:00 - right like a little bit bigger right
386:02 - there right there right that's happening
386:05 - because of transform and the transition
386:07 - is making it happen over a period of 0.2
386:10 - seconds it happens pretty fast so that's
386:13 - what it's doing and you can see it says
386:15 - button colon hover so on Hover do these
386:18 - okay and then the styling that we want
386:21 - for our number is going to be in our
386:24 - span tag so instead of putting our tag
386:27 - inside of an H1 if we want to put the
386:30 - big circle we want to wrap hours in a
386:33 - span tag instead so let's go ahead and
386:35 - put this in a span tag actually like
386:37 - this
386:38 - and let's go ahead and end it in a span
386:40 - tag like this and let's go ahead and
386:42 - refresh our app
386:44 - okay or sorry let's hit command enter
386:46 - first so we can restart our server
386:48 - so it serves our new static file and
386:51 - there we go okay our app is looking and
386:55 - doing exactly what our finished version
386:57 - of the app was doing all right so I hope
387:00 - that that deconstructed and demystified
387:03 - a lot of what we did just do let's just
387:05 - do a quick recap of everything that
387:07 - we've done right
387:09 - we have a flask file
387:11 - uh flask app and we need access to our
387:15 - template string
387:17 - we got our database okay we initialized
387:20 - our app right here and we initialize our
387:21 - database right there we created what our
387:24 - home page should look like and that's
387:25 - div my bad
387:28 - okay we created our home page and what
387:31 - that should look like
387:32 - and then to our render template string
387:34 - we gave our home page and then the
387:37 - database number
387:39 - and we did the same thing for all of our
387:41 - paths we created an increment path and a
387:44 - decrement path so if you click the minus
387:45 - button you come here and if you're the
387:47 - plus button you come over here
387:49 - okay
387:52 - um
387:53 - and then here we're obviously just
387:55 - running the app okay so that's all we
387:57 - did and we got the entire thing
388:00 - uh pretty much up and running okay now
388:03 - the last thing I want to do is for
388:05 - organization purposes normally you will
388:07 - not write I mean after this app you will
388:10 - never write your HTML here okay that is
388:13 - a good way to do it when you're a
388:15 - beginner and you're just starting out
388:16 - but what we want to do is we want to
388:18 - have our own HTML file so let's go ahead
388:21 - here and I'm going to also hide hidden
388:23 - files because you don't really need to
388:25 - see all those files it's not necessary
388:26 - we'll create a new folder and we'll call
388:28 - it templates
388:30 - inside of templates I'll add a new file
388:32 - it'll be called index.html so this will
388:34 - be our HTML file okay and we're going to
388:39 - take all of our HTML code and we're
388:41 - actually going to just put it in here
388:44 - okay now we don't need my home page
388:47 - anymore so we actually don't even need
388:51 - to use this home my home page that we
388:53 - created here okay
388:55 - and what we're going to do
388:57 - is
389:00 - instead of render template string we're
389:02 - actually going to import render template
389:05 - from flask just render template just
389:07 - like that
389:08 - okay and then let's scroll down
389:11 - so we're going to replace all of this
389:13 - with rendered template
389:14 - render template render template
389:18 - okay and then instead of my home page
389:21 - I'm actually just going to give it the
389:23 - index.html file just like that
389:27 - so now it's just rendering this file
389:29 - it's very important you put in the
389:30 - templates folder if you don't it won't
389:31 - be able to find it okay because it looks
389:33 - inside of a folder called templates this
389:35 - function right here render template and
389:37 - there you go it's going to just go ahead
389:39 - and use that file right over there
389:42 - okay let's copy this let's paste it okay
389:46 - so we're done and you can essentially
389:48 - comment this out now you don't need this
389:50 - I'm I'm just going to go ahead and take
389:53 - this
389:54 - put it below I don't really need that
389:56 - anymore okay I don't need this statement
389:58 - in there anymore I don't need the show
390:00 - function right there anymore right
390:04 - um there we go
390:08 - okay now let's go ahead and run this app
390:11 - and see if it does what it's supposed to
390:13 - do or if it crashes let's refresh
390:16 - and looks like it's the same right boom
390:18 - beautiful plus minus minus right it's
390:23 - working perfectly so that means that
390:26 - we're pulling all of our data from our
390:27 - index.html so now it's much more
390:29 - organized meaning that our our
390:32 - client-side logic and our on our backend
390:34 - logic is separated so here
390:37 - right we have all of our client side or
390:41 - front end
390:42 - logic
390:45 - all right and that's separated from all
390:47 - of our logic here which is essentially
390:50 - our like
390:53 - um
390:54 - let's say server side
390:56 - or back end logic okay so they're
390:59 - they're separated now which is really
391:01 - nice
391:03 - and uh yeah you preferably you don't
391:06 - want to have like you want to have each
391:07 - file right should have its own language
391:10 - specific code so for example a CSS file
391:12 - should have CSS code HTML file should
391:15 - have HTML code a
391:17 - Javascript file should have JavaScript
391:19 - code a python followership a python code
391:21 - before we had a python file and had a
391:23 - bunch of HTML coded and I think that's
391:25 - that's plenty confusing we don't need to
391:26 - do that
391:27 - right and CSS we don't want to go too
391:31 - much into CSS but
391:33 - uh how it works essentially is if I go
391:36 - here
391:38 - and I show you for example the span tag
391:41 - if you want to style the span tag you
391:43 - call the span tag right here in your CSS
391:46 - file and you just give it styling if you
391:48 - change anything here you'll see your
391:50 - spam tag change and I encourage you to
391:52 - try to change things and see if you can
391:53 - break things and then bring them back by
391:55 - just undoing right and see what happens
392:00 - um you know you could change your div
392:01 - style it you could change your button
392:03 - styling you could change the font size
392:05 - on the button right you can make the
392:06 - font bigger or smaller you could make
392:08 - the button with a bigger bit with bigger
392:12 - smaller height bigger smaller you can
392:14 - see what changes that makes and if you
392:16 - want to get access to counter underscore
392:17 - Styles file then make sure you hit show
392:19 - hidden files so you can show you all of
392:21 - the hidden files that I'll just keep
392:22 - hidden for now
392:24 - okay so hopefully you had fun with that
392:27 - project that hopefully deconstructed a
392:29 - lot of the mystery for you with flask
392:31 - and python you should now have your very
392:34 - own fully functioning python app from
392:37 - the ground up if you want to see any
392:39 - types of solutions you can click raw
392:41 - solution and this will show you the
392:42 - solution that we came up with right now
392:44 - versus the guardrail solution that you
392:47 - should have came up with earlier uh
392:50 - it'll show you the the helper file that
392:52 - I wrote for you it will show you
392:55 - the Styles file that that we have for
392:57 - you so I'll show you everything okay so
392:59 - hopefully that was helpful I hope that
393:01 - you enjoyed it and things made sense
393:03 - hopefully you weren't too confused and
393:06 - with that said I love your face and I'll
393:08 - see you in the next project now we're
393:11 - gonna build the YouTube app with python
393:13 - and flask this is going to be awesome
393:16 - it's gonna we're gonna have apis we're
393:18 - gonna pull the data from YouTube and
393:20 - we're gonna render it out and we're
393:22 - gonna build it in a really cool way
393:23 - where it's almost going to look like
393:24 - react code because we're going to use
393:26 - components and something called macros
393:28 - inside of flask which is a really nice
393:29 - feature we're going to show you how to
393:31 - use templates template filters inside of
393:34 - flask and it's going to be completely
393:36 - beginner friendly okay so don't worry so
393:38 - if you're watching it as a clip on
393:39 - YouTube the link is in the description
393:40 - below if you're watching it as part of
393:42 - this big python course that I'm doing
393:44 - right now well then you'll have the link
393:47 - kind of available to you right over here
393:48 - so I'm gonna go uh into this right here
393:51 - and so on the right hand side if you're
393:53 - in the python course you should see this
393:55 - big markdown file Okay click on that and
393:59 - it'll walk you through this project okay
394:01 - so this is a project we're going to do
394:03 - right now it's going to be the YouTube
394:04 - app and it this will walk you through
394:07 - what are the concepts that are covered
394:08 - here okay you don't need to worry about
394:11 - list of dictionaries we'll cover that
394:12 - inside of this but you should know these
394:14 - over here okay this is what the project
394:16 - is going to look like and here are the
394:18 - three links available for you projects a
394:21 - live demo solution let's take a look at
394:22 - live demo of this app so this is what it
394:26 - looks like uh this is what this app
394:28 - looks like now you could have you could
394:31 - be pulling data from Mr beasts video or
394:34 - you can be pulling data from my videos
394:38 - what that's crazy that was so quick or
394:40 - you could be pulling data from Peter
394:42 - McKinnon's videos
394:44 - and just like that we're pulling data
394:46 - from Peter McKinnon's video so you could
394:47 - see this app works it's fast you could
394:50 - be doing this all with python and guess
394:54 - what it's actually responsive so if I go
394:57 - ahead and change the size of it you can
394:59 - see
395:00 - boom it's becoming smaller you see that
395:03 - right there right so this is fully
395:05 - responsive and all of this is going to
395:08 - be happening with python so I hope
395:09 - you're excited for this project it's
395:11 - going to be a really really fun project
395:12 - with that said let's just get right into
395:15 - it so I want you to go here and click
395:17 - project okay this is a solution if you
395:20 - ever need to look at it don't look at it
395:21 - right now you know look at it at the end
395:24 - but let's click project okay or again
395:26 - it's going to be in the link in the
395:28 - description below if you're watching it
395:29 - as a clip
395:30 - this is a page you should come to and
395:33 - your flask app right here should already
395:36 - be running now if you come to this page
395:38 - most likely it's going to ask you to
395:40 - Fork this so you're going to come to a
395:42 - page that might look like this just go
395:44 - ahead and Fork it not a problem right
395:47 - there okay then you can actually make
395:48 - changes and do whatever you want with it
395:49 - and just make an account if you don't
395:51 - have one okay forget and then you call
395:53 - it whatever you want so I'm gonna go
395:55 - ahead I'm gonna Fork this as well and
395:57 - since I'm your instructor I'm just going
396:00 - to call it instructor okay you could you
396:01 - could leave it as exercise or put your
396:04 - name plus exercise and then just do it
396:06 - okay
396:08 - so there we go and now we should have
396:10 - like a fresh fresh fresh file and when I
396:13 - hit command enter I should see this
396:16 - hello world or um or home page uh pop-up
396:20 - okay it's going to pop up soon let's
396:22 - give it some time
396:25 - there we go so now we have our home page
396:27 - coming up over here and we know that our
396:30 - flask app is up and running okay it's
396:32 - it's up and running like this is live
396:35 - live live live live which is so cool so
396:37 - freaking cool I remember when I used to
396:39 - use flask or do stuff with programming
396:42 - and I was a beginner I would just try to
396:44 - install it on my computer and it
396:45 - wouldn't work and I'd be like how do you
396:47 - install flask and then when I would try
396:49 - to install that it'd be like you need to
396:51 - install pip manager and then I could
396:52 - such a process and like now you're just
396:55 - getting this app up and running
396:57 - um this is awesome and like you guys
396:58 - should thank replit because they make
397:00 - your life so freaking easy okay
397:02 - now inside of here here's what I want
397:04 - you to notice there's only a couple of
397:05 - lines of code a bunch of it is not
397:07 - really that important these are just
397:09 - channels right here that you'll need
397:11 - access to okay so it's like five six
397:12 - lines that don't even need to really
397:14 - worry about but I put this here because
397:16 - for this YouTube build you're going to
397:18 - need access to a couple of Channel IDs I
397:20 - didn't want you to have to go to
397:20 - youtube.com go to my channel find out
397:22 - how to get my user ID or Channel ID so I
397:25 - just gave you IDs for Mr Beast MKBHD and
397:28 - Peter McKinnon uh right here okay so
397:31 - that's one second this is just a average
397:34 - flask app which you know this is just a
397:37 - boilerplate code that comes with flask
397:38 - right when you start it and we're saying
397:40 - on the home page like when you route to
397:43 - this slash right that's the home page
397:44 - just right now print this out right this
397:47 - takes in HTML so if I change this to H2
397:49 - right here and I change that to H2 this
397:52 - will turn into a heading tag and it'll
397:56 - become like that and then this line here
397:57 - is just running our app so if you remove
397:59 - this line your app won't run okay so
398:00 - that's that's it that's it for all of
398:03 - these lines of code we're done
398:04 - understanding that next up is our static
398:07 - folder this I don't need you to touch at
398:10 - all do not touch this at all I'm just
398:12 - leaving this here for you but this is
398:14 - where your styling is going to be for
398:15 - this app so in order to make it look
398:17 - beautiful kind of like this a final
398:20 - version of the app right you're going to
398:23 - need access to that styling and since I
398:25 - don't want you to waste a lot of time
398:26 - doing The Styling we have essentially
398:28 - done The Styling for you so as long as
398:30 - you provide the HTML structure of the
398:32 - page correctly and name the classes and
398:34 - divs correctly which I'll show you how
398:36 - you can do that you should be good to go
398:38 - alright so CSS don't worry about this
398:41 - you can pretty much ignore this don't
398:43 - delete it but you can ignore this okay
398:45 - so you are just starting from here and
398:47 - now you understand every line of code in
398:49 - here like this is not that important I
398:51 - understand this is a boilerplate code
398:53 - that comes with flask that's really it
398:55 - okay so a few lines of code and we're
398:57 - getting started hopefully from a point
398:59 - where you and I both are
399:02 - at a pretty similar understanding of
399:04 - what's going on here okay now let's
399:05 - build on top of this now what I want to
399:07 - do is I want to pull in data from
399:09 - YouTube that's the first thing I want to
399:10 - do so the first thing that comes to my
399:12 - mind is let's go to rapidapi.com okay
399:14 - and they're going to make your life
399:16 - really easy in terms of pulling data and
399:18 - it's free sign up here and we're going
399:21 - to go to YouTube okay and uh go YouTube
399:23 - and instead of having to like sign up
399:26 - with YouTube and try to pull data from
399:28 - there it's going to be harder rapid API
399:30 - makes your life a lot easier okay so you
399:32 - it's if just take my word for it if you
399:35 - haven't done too many apis and it'll
399:36 - even generate code for you okay so this
399:38 - is going to be the really nice part so
399:40 - watch this I'm going to zoom in here a
399:41 - little bit so you could see but if I
399:43 - want to make a request it's going to
399:45 - give me all the code that I need okay so
399:48 - for example let's look at what I want so
399:50 - let's look on this left hand side oh
399:52 - first of all if you are new you're gonna
399:54 - need to go inside of pricing and you're
399:55 - going to need to subscribe to the zero
399:58 - dollars per month it doesn't even ask
399:59 - you for your credit card so just go
400:01 - ahead And subscribe for it and then
400:04 - click come back to end points okay and
400:07 - points is where you need to be now
400:08 - inside of your endpoints this is the API
400:10 - that tells you with the YouTube data API
400:12 - you can add various YouTube features to
400:13 - your app use the API for search videos
400:15 - playlists channels and more more what
400:18 - we're going to be doing is we're not
400:20 - going to be using their search API
400:22 - though you could okay
400:24 - but we're going to be using their
400:26 - Channel and Channel videos okay so for
400:29 - example what this should do is if you
400:31 - give it a channel ID
400:33 - like this type of ID right here it
400:36 - should spit back out videos for you for
400:38 - that channel so for example if we go
400:40 - back to our app and I grab the idea of
400:43 - qazi right here we go back and we go
400:45 - here and we paste it watch what's gonna
400:48 - happen this ID right here is going to
400:51 - change dynamically okay so watch I'm
400:53 - going to paste keep your eyes there
400:54 - paste right and that ID just changed
400:57 - because it took it from here and plugged
400:58 - it into there
401:00 - okay great now this is node.js code
401:03 - that's not what we want we want python
401:05 - code so let's hover down and let's go on
401:08 - request I'm going to hide myself here so
401:10 - hover down here Python and choose
401:13 - request okay that's what we want so now
401:16 - this is the code from the request
401:19 - library that should be showing you okay
401:20 - now we're going to go ahead and click
401:22 - test endpoint so we'll see what type of
401:25 - if we send this request here
401:27 - let's see what type of data we get back
401:30 - so I'm going to hit test endpoint and
401:32 - boom there we go so here's the data
401:34 - structure okay and this is something
401:36 - important to understand I know we didn't
401:37 - work with this type of data structure
401:39 - too much before
401:40 - so it might be a little confusing but
401:42 - it's at the end of the day it's a
401:44 - dictionary okay this is a dictionary and
401:46 - it has only two items inside of it
401:49 - um you're gonna get scared when you look
401:51 - at these items because they're pretty
401:52 - crazy items but just understand the
401:55 - underlying data structure is something
401:56 - you already know this is a dictionary
401:58 - with two items okay it starts right here
402:03 - and it closes right here has two keys
402:06 - only that's it it has the contents key
402:08 - and the cursor next key we don't need
402:11 - access to the cursor next key the only
402:13 - key we need access is contents okay now
402:15 - inside of
402:17 - um let's go click inside of content so
402:19 - I'm going to click inside of contents it
402:21 - tells me that there there's 30 items
402:23 - which tells me as content is a key and
402:26 - is a value it's storing a list and that
402:28 - list has 30 items and my gut feeling
402:31 - before I even look at it is that it's
402:33 - probably videos that's what it's
402:35 - actually storing as items okay so let's
402:37 - click here and that's what we see 30
402:39 - items and every single one of them is a
402:42 - video okay and each item is actually a
402:45 - dictionary so this is a complicated data
402:48 - structure right but it's basically a
402:50 - dictionary so it looks like that like
402:52 - the squigglys
402:53 - let me go make it here okay so this is
402:56 - what the data structure looks like right
402:57 - now okay I'll make it right there
403:00 - so you have a dictionary okay inside of
403:04 - the dictionary you have what
403:07 - you have two items you have two keys you
403:10 - got
403:12 - um Let me let me manually write this for
403:14 - now okay so like this
403:18 - okay we'll just call this dictionary
403:20 - data that's like the topmost one and it
403:23 - has content as a key
403:26 - and that has a list right and then it
403:30 - has
403:31 - another one which is cursor next so I'll
403:33 - just say cursor next and I'll just say
403:36 - blah okay so we're not going to be
403:38 - worrying about cursor next now inside of
403:40 - content it has videos and so each video
403:43 - is a key value pair okay it's like this
403:46 - so these are empty dictionaries now each
403:48 - video If we go inside
403:51 - uh each dictionary has two keys inside
403:54 - of that so it has a key type and as a
403:56 - key video so let's write that out so we
403:58 - have type and it says video and then the
404:01 - other thing other key it has is called
404:03 - video
404:03 - [Music]
404:05 - Okay so
404:06 - let me show it to you like this
404:09 - okay all right
404:11 - boom okay
404:13 - and what does video have well video is a
404:17 - key value pair and as a key you have
404:20 - video and as a value of that key we have
404:22 - a dictionary with nine items in there
404:25 - okay so let's go ahead and take a look
404:28 - at it video and this is a dictionary
404:31 - here
404:32 - and this has a bunch of items in here so
404:35 - it has a
404:37 - is live now is fall so meaning like this
404:40 - video is currently not live so this is
404:43 - false
404:44 - and if we take a look at other stuff
404:46 - let's see publish text if we look at
404:49 - that
404:50 - so
404:52 - published time
404:55 - text
404:56 - right if we look at that it says null it
404:59 - has uh it has not been published yet so
405:02 - it's a video I scheduled but it hasn't
405:04 - been published yet by the time you're
405:06 - watching it'll probably be published so
405:09 - this here would be a none okay if you
405:11 - see a null in Python that's a nun most
405:13 - likely okay the next thing it has are
405:16 - stats
405:18 - so stats once we understand this data
405:21 - structure the rest of like making of the
405:22 - app is not going to be that hard but
405:24 - this is like vital vital vital that we
405:27 - understand this data structure because
405:28 - if you understand this and we can
405:29 - manipulate it already then our life is
405:31 - going to be really easy we'll just plug
405:33 - in the request into our app play out the
405:35 - data structure and we're ready to go
405:37 - okay
405:38 - so it has stats
405:41 - okay so stats has one item and just one
405:45 - key of views so stats
405:48 - key uh and then as and then stats is
405:51 - like a dictionary okay and then inside
405:53 - of there is you have views
405:55 - views and uh this video has one view so
405:59 - far okay but we'll just write let's say
406:01 - 23 000 views
406:04 - okay great and then we have thumbnails
406:08 - okay that's another data structure we'll
406:11 - have in here
406:12 - so let's go ahead and write that
406:14 - thumbnails
406:19 - thumbnails
406:21 - okay and thumbnails is a list
406:25 - and it has four keys inside of it okay
406:28 - but we'll just make
406:30 - two keys that's enough
406:32 - so when I was going through these what
406:35 - usually they are is they're they're just
406:38 - all
406:39 - um
406:40 - they're all thumbnails so it's a URL of
406:42 - the thumbnail and then it tells you the
406:43 - height and the width of the thumbnail
406:46 - so what I realized is the zeroth one is
406:49 - the lowest quality thumbnail and then
406:51 - the third one is the highest quality
406:53 - thumbnail okay this last one is the
406:56 - highest quality thumbnail
406:57 - but not every single
406:59 - um video has four thumbnails some have
407:02 - like one and some have four
407:05 - okay so I'm just gonna say this video
407:08 - has like let's say two thumbnails and
407:09 - let's just take a look at what the
407:10 - thumbnails look like so I'm I just care
407:12 - about the URL you're not gonna need to
407:15 - worry about the height or the width so
407:17 - I'm just gonna put the URL here so I'm
407:18 - just going to say URL
407:20 - and blah blah.com okay put another URL
407:24 - here I will say link.com
407:28 - okay
407:31 - there
407:33 - you can put a comma here
407:36 - okay so if you think about this right
407:39 - this looks complicated but what's
407:41 - Happening Here I have data
407:43 - data has how many keys let me ask you
407:45 - this and let's just practice this right
407:47 - now okay data has how many keys data is
407:51 - a dictionary right and data has how many
407:53 - keys
407:55 - I'll give you a hint it's between one or
407:58 - two that's the answer either one or two
407:59 - how many keys does it have
408:01 - if you guessed one close but may you
408:04 - might have forgotten about the second
408:06 - one so it has one key okay content
408:10 - and it has a second key cursor neck so
408:13 - it only has two keys okay great now
408:17 - um
408:18 - inside in in these two keys the only key
408:20 - we care about is content so we're gonna
408:22 - go ahead into content now now inside of
408:25 - content you're going to have about 10 20
408:28 - 30 items because it's going to get you
408:31 - like the last 30 videos of the channel
408:32 - okay
408:34 - so if I get back my last 30 videos each
408:37 - video is going to be what data type
408:39 - each video is going to be represented
408:41 - either as a list or dictionary which one
408:42 - do you think okay take about five
408:44 - seconds to answer that five four three
408:47 - two one each data type is actually going
408:50 - to be a dictionary
408:52 - okay so it's the dictionary actually
408:54 - starts from here
408:56 - right starts from here and ends right
408:58 - there all right now you can have other
409:00 - movies there for sure so like if we
409:03 - could have other videos there uh let's
409:05 - just put one more video so we could have
409:07 - like a more accurate
409:10 - um way to view this so let's look at
409:12 - another video so this is like build
409:13 - modern portfolio with next.js and we can
409:16 - see time text is 10 days ago so let's
409:18 - put that there which time taxes 10 days
409:21 - ago is live now is false stats are this
409:26 - is how many views it has
409:28 - we'll leave this like this okay so now
409:30 - we know that this has how many so the
409:33 - content has how many videos inside of it
409:35 - can you tell me right now
409:37 - okay I'll give you five seconds five
409:39 - four three two one content is a list
409:42 - with only two items okay you could even
409:46 - call Len on this now you have a third
409:48 - item but it's empty so I could delete
409:50 - that item but I'm just leaving this for
409:52 - now so technically yeah you have three
409:54 - items but like two actual videos right
409:57 - the other one is like completely empty
409:59 - so that's what it is if I if I close
410:02 - this right you could see all of the
410:05 - items okay let me even let me remove
410:07 - that too so you can just see content
410:09 - right now has only two items so let's
410:11 - just
410:12 - let's play with this right now let's
410:14 - just prove that this is true so let's go
410:16 - ahead data and let's go ahead and check
410:19 - the type of our data okay I know this is
410:22 - like kind of boring stuff it's like why
410:24 - are we worrying about data structures or
410:26 - whatever but trust me like you're gonna
410:29 - these Keys Should Be Strings okay so
410:32 - that's what the error is right now
410:34 - let's run this so yeah right now I know
410:37 - that it's going to be like annoying or
410:38 - it's going to not make sense and it's
410:39 - like why are we worrying about this
410:41 - nerdy stuff right now where's the app
410:42 - called that you're showing us I promise
410:44 - you if you learned this the lists and
410:46 - dictionaries and these data structures
410:48 - underlying you're going to become so
410:50 - damn good because everything every API
410:54 - requests everything you try to do on the
410:55 - web is going to come to you as a list of
410:57 - dictionaries okay lists of dictionaries
410:59 - is literally going to be everything
411:00 - knowing how to move through it Traverse
411:02 - through it get the data again in and out
411:05 - that's going to be a game changer for us
411:07 - if you get good at this you're gonna
411:08 - smoke everybody else okay trust me on
411:10 - that
411:11 - um it's getting confused what some of
411:13 - these are so I call them as variables
411:15 - because I'm used to JavaScript so let's
411:17 - just go ahead and put quotes around
411:19 - these
411:21 - um so we we tell it like hey this is the
411:23 - key all keys should have these quotes So
411:26 - URL should have a quote around two we're
411:29 - gonna need to do that for other and
411:31 - let's put quotes around these quotes
411:33 - around this quotes here quotes here
411:37 - and we should be good okay let's go
411:41 - ahead and run this
411:43 - all right let's see what we get in our
411:45 - console so we print data right so it's
411:48 - proving to us that that is a dictionary
411:51 - right now what we want to do is we want
411:54 - to get
411:56 - uh content
411:58 - okay inside of our data we want to get
412:00 - content so let's see if we can get
412:02 - content and you can see on the bottom
412:05 - here we're actually getting that content
412:07 - right that content is actually popping
412:09 - up right over here
412:11 - uh it's giving us all of the data that
412:14 - that we're looking for so for example if
412:16 - I move this up
412:18 - make myself a little bit bigger here if
412:20 - I move this up you could see uh I can
412:22 - see the type I can see video
412:24 - I can see it has another key called
412:27 - video and then that video has all of the
412:29 - data that I need right so when I'm
412:32 - getting content let's say all right now
412:34 - whenever I get these lists of dictionary
412:36 - stuff and all of this and I'm printing
412:38 - it out usually being able to see it in a
412:42 - nice way is actually a game changer when
412:44 - you see it like this it's usually very
412:46 - confusing it's like what the heck are
412:47 - you looking at how many items are there
412:49 - it's kind of hard to like visually
412:51 - understand what is happening so what I
412:53 - recommend is you use something called P
412:55 - print
412:56 - okay and um and it's something you'll
412:59 - need to install so but don't worry repl
413:01 - I believe will install it for you
413:03 - automatically and we're just going to go
413:05 - ahead and uh give this pretty printer
413:09 - indent of two
413:12 - okay and all it does is gonna print it
413:15 - but it's gonna make it pretty so it's
413:16 - just going to make it so it's like more
413:18 - this this here is more readable okay
413:21 - like for example if I take this and I go
413:23 - to like Json format or something online
413:26 - and I pop this in
413:29 - um and I process this it's going to make
413:31 - it prettier for you okay so like you
413:33 - you'll be able to go and you'll be able
413:34 - to actually like look at your data
413:36 - and you'll be able to like hit minus
413:39 - plus plus and you can actually see like
413:42 - what the heck is happening okay so
413:44 - that's kind of why I like some Json
413:46 - formatters
413:47 - but let's just use uh pretty print for
413:50 - now and see if that can actually do the
413:52 - job for us so I'm gonna go ahead and say
413:56 - so we can just do
413:58 - uh p p dot P print okay like that
414:04 - so instead of a regular print we're
414:06 - gonna use like a more pretty print and
414:09 - we hope it does the job for us let's
414:11 - reduce the indents to one and let's see
414:14 - what happens
414:15 - okay
414:16 - all right there we go so that is still
414:19 - looking a little wonky right but
414:23 - it does look a bit better
414:25 - so I can I can kind of like see it more
414:28 - now right uh so this right here I can
414:31 - see
414:33 - uh is my first video right here
414:36 - and this right here I can see is my
414:39 - second video
414:40 - okay now
414:43 - um let's see how we're gonna get uh
414:45 - deeper into the nesting of this right so
414:47 - for example if I have content well if I
414:50 - want to get this value over here video
414:52 - how will I get access to that
414:54 - if I'm inside of content and I want to
414:57 - get access to the first video let's
415:00 - think about that if I want to get access
415:01 - to the first video
415:03 - how do I get access to that so here's
415:05 - how I want you to think about it right
415:07 - usually when you look at this this is
415:08 - going to overwhelm you and kind of
415:10 - complicate things
415:11 - now it's looking complicated but if you
415:13 - think about it at the end of the day
415:14 - right if I go into contents here or even
415:18 - like our contents right here these are
415:21 - just two items so if I want to get the
415:24 - first item in a list remember you
415:26 - remember how to do that right remember
415:27 - we had fruits and we had a fruit right
415:30 - here how do you get this guy it's going
415:32 - to be simple okay I hope you got this so
415:34 - let's go ahead print and we're going to
415:35 - say data content of zero so this is
415:38 - going to right here and I'm going to
415:39 - comment this out right now this right
415:41 - here right if I look
415:43 - it's giving me the first it's giving me
415:46 - the first item right in this case this
415:50 - is the first video and it's giving me
415:53 - that right there okay well then how do I
415:55 - get further inside because there are two
415:58 - keys inside of um inside of this right
416:00 - so if I go in here you could see inside
416:02 - of content and even the zeroth items
416:05 - when I get the first video so this right
416:07 - here is vid one video right inside of
416:09 - here I have two keys key number one and
416:11 - key number two I don't need access to
416:13 - key number one right I don't need access
416:15 - to key type so how will we get access to
416:18 - the video and the value of the video I
416:20 - want access to like all the data of this
416:23 - key video how do I do that can you guess
416:25 - so see what you are going to put here so
416:28 - you can get access to all of this okay
416:30 - so take five seconds if you don't get
416:31 - this that's okay we'll get this together
416:33 - take five seconds so try it yourself or
416:35 - pause the video five four three two one
416:39 - all right let's do this together so now
416:42 - at this point I know I'm already getting
416:45 - this dictionary right here if I want to
416:47 - get access to this video well that's as
416:49 - simple as just doing video okay if I now
416:52 - hit enter I'm not going to get this type
416:54 - key thing anymore and I'm just going to
416:56 - get that dictionary AKA this part right
417:00 - here okay that's the part that I want
417:02 - that's the meaty juicy part that has all
417:05 - my data now that I have access to that
417:07 - video well what do I need access to now
417:09 - well I'll need access to if I look at
417:12 - our finished app
417:13 - I will need access to published time
417:16 - text for sure
417:18 - I'll need access to the title of the
417:20 - video so that's important so let's go
417:22 - ahead
417:23 - and grab a video
417:26 - and copy the title here right title
417:31 - so let's come down here and let's
417:33 - actually add that in so I'll go ahead
417:35 - and dictionaries type order doesn't
417:37 - really matter
417:40 - and we'll just say build
417:42 - [Music]
417:44 - whatever right I'm just copy pasting
417:46 - this you don't you don't necessarily
417:47 - need to have this exact title if you
417:49 - have any other title make sure to put
417:50 - the comma there so I'll put a title here
417:52 - and then we'll also put a title for this
417:55 - video and we'll say title is
417:58 - uh
417:59 - uh let's say I'll grab just like some
418:01 - other random videos title because this
418:03 - data does not need to be like accurate
418:05 - right it doesn't matter
418:07 - and we'll just grab that title okay
418:10 - bring it in
418:11 - and I'll post it paste it right over
418:14 - here
418:17 - okay there we go cool so I have two
418:19 - videos and they both have titles now
418:21 - okay so let's go ahead
418:23 - and grab the first video's title well
418:25 - now since I have access to video
418:28 - right inside of video these are all the
418:31 - keys I have access to is live now
418:32 - publish time text stats title so in
418:35 - order to get access to title what will I
418:37 - need to do you give that a try okay
418:39 - you're gonna add something here and
418:41 - what's the key you're going to add here
418:42 - to get the title I'll give you five
418:44 - seconds five four three two one let's do
418:48 - it together I'm going to go ahead and
418:50 - say title okay title will get me access
418:52 - to that ah I probably made that mistake
418:54 - again of not putting quotes around
418:57 - um
418:58 - everything so let's just double check
419:00 - what I did here
419:03 - title app I forgot to put a comma here
419:06 - comma
419:08 - okay there we go
419:12 - all right and let's go ahead and run
419:14 - this so I should see this title right
419:16 - here build medium with next.js and there
419:18 - you go you can see that build medium
419:21 - with next.js
419:23 - right so this is the first video and
419:27 - once I guess once I get the first video
419:28 - I can get that first videos all kinds of
419:31 - information about it right so for
419:33 - example I could say first video and save
419:36 - it in a variable and remove this title
419:38 - part from it so this is actually going
419:40 - to get me access to the first video so
419:42 - let's go ahead and print
419:43 - first video and let's run this and then
419:46 - if I want to get the data
419:50 - um
419:51 - let's remove that parenthesis so I'm
419:53 - getting access to the first video now if
419:54 - I want to get the data from the first
419:56 - video well I could actually just do
419:57 - print first video title right if I want
420:01 - to get the publish time text I can go
420:04 - published time text and if I want to get
420:08 - let's say
420:11 - thumbnails I can go ahead and grab them
420:15 - just like this oh oops oops thumbnails
420:19 - okay and now I should get all of that
420:21 - data about the first video so you can
420:23 - see I'm getting the let's let's comment
420:26 - out that first line because I really
420:28 - just want this
420:29 - okay so there we go title is that
420:32 - right publish time text is basically
420:34 - like oh this video is not really
420:36 - published right so that's why it says
420:37 - None
420:40 - um and then thumbnails it gives me uh a
420:44 - list of thumbnails so in this case we
420:45 - just have these dummy URLs showing up
420:47 - right those are the those are the
420:49 - quote-unquote thumbnails okay so that's
420:54 - the data structure that's
420:57 - we are looking for okay that's the data
420:59 - structure that we're gonna once we
421:01 - retrieve it we're gonna be able to do
421:03 - stuff with it now
421:06 - I think that we're able to understand
421:07 - what's happening here right and then as
421:10 - it gets more complicated understanding
421:12 - this underlying data structure will be
421:14 - super valuable for you and now what
421:16 - we're going to go ahead and now we're
421:18 - going to actually start pulling the data
421:19 - dynamically into our app so we can go
421:22 - ahead and make that request that we were
421:24 - making on rapid API except let's go
421:27 - ahead and do that in our app so let's go
421:29 - ahead and copy all of this
421:32 - okay and let's go inside of our app and
421:36 - I'm just gonna go here I'm gonna paste
421:38 - it okay I'll take import request and
421:40 - I'll put it all the way at the top so
421:42 - request is a library and
421:45 - um you know a replit will install it for
421:47 - you if you try to run but you know you
421:49 - can always go to the package manager and
421:51 - install it if you don't have it for
421:52 - whatever reason
421:54 - cool and then
421:57 - yeah and then let's just go through what
421:59 - code it gave us right so this URL here
422:01 - is going to be the API endpoint that we
422:03 - need to hit which don't have to worry
422:05 - about too much but this is we're gonna
422:07 - be making our get request okay this
422:09 - query string right here is where we're
422:11 - going to be passing in our Channel
422:13 - information so for example remember I
422:15 - gave you channels earlier well let's go
422:18 - ahead take those channels and let's put
422:20 - them all the way at the top of the app
422:22 - so every part of our app has access to
422:25 - these channels and now we're making the
422:28 - query to the specific channel here we'll
422:30 - remove this
422:32 - I'll go here and I'm going to go ahead
422:34 - and remove that and instead I will write
422:36 - channels and I'll just write quasi okay
422:38 - so this is going to get you clever
422:39 - programmer or let's just go ahead and
422:42 - change this to clever programmer right
422:44 - clever programmer let's change this to
422:46 - clever programmer and there we go you're
422:49 - gonna see that
422:51 - and this is yeah and then delete these
422:54 - things you can just leave and ignore
422:55 - because rapid API gives these to us you
422:57 - can ignore these two these are important
422:59 - and required so you can't remove them
423:01 - but this is like API Keys some like
423:03 - tokens whatever like this is rapid API
423:06 - giving it to us so this is like
423:08 - important stuff right so just leave it
423:10 - there but you can kind of ignore it and
423:12 - then here it's actually making a request
423:14 - for you and then it's passing in the
423:16 - headers and all of the information
423:17 - that's necessary
423:18 - so it's making a get request it's
423:21 - passing in this URL as an endpoint and
423:25 - then for headers it's passing in this
423:27 - information which means like it's
423:28 - passing in the sensitive access tokens
423:31 - the password AKA
423:34 - um and then it's passing in any query
423:37 - parameters that we might have
423:40 - okay great so you know for query
423:44 - parameters is passing this it's passing
423:46 - in you know this is the channel that we
423:48 - need to hit okay and these are the
423:51 - languages that we need to head and
423:53 - that's a response that runs and then it
423:55 - will go ahead and get that response for
423:57 - you so let's comment out all of our
423:59 - other stuff that we were printing out
424:01 - actually we don't have any other print
424:03 - statements right there let's comment out
424:05 - all of this here for now
424:07 - and let's go ahead and run this once we
424:10 - run this we should see response.txt show
424:13 - up
424:15 - on our screen let's see
424:18 - there we go so where now you can see all
424:21 - of this data so this is about like 30
424:23 - videos that we're getting back from
424:25 - clever programmer okay and if you go
424:27 - really looking searching inside of it
424:30 - you could see it says build a to-do list
424:32 - app with solidity
424:35 - right there right so that tells you that
424:37 - um
424:38 - for getting back real data okay it just
424:40 - looks ugly and don't worry we'll we'll
424:43 - actually know what to do with it
424:45 - afterwards but it was important that you
424:47 - understood the overall structure before
424:50 - we went in okay and this will be called
424:52 - contents most of the time so I'll call
424:54 - it contents here too so in your notes
424:57 - it's easier because that's what they're
424:58 - calling it right contents
425:01 - if I go here and we see the response
425:03 - right you see contents and not content
425:08 - okay so for this response well now what
425:13 - I want to do is I want to actually put
425:15 - this inside of our home so whenever
425:17 - somebody refreshes the page we want to
425:19 - make this request every single time
425:22 - so I'm gonna go ahead
425:25 - and starting from this URL Point all the
425:29 - way to this I'm just gonna cut it
425:32 - okay and we're gonna go down here
425:36 - inside of our index function and I'm
425:38 - just going to paste it in there okay now
425:41 - I'll need to go back back and delete uh
425:43 - and enter okay so I can adjust my
425:46 - indentation because if your indentation
425:48 - is off your app will break which is
425:50 - annoying but just how python is
425:53 - all right and there we go so now I fix
425:57 - my indentation so all of this stuff
425:59 - should be underneath the index function
426:01 - so right when I hit the home page boom
426:04 - uh this request should run and get the
426:07 - data okay so let's give that a try let's
426:09 - just make sure everything is running so
426:10 - I hit command enter to restart the
426:12 - server and yes I'm getting back my data
426:15 - very good
426:16 - now instead of getting it back as a
426:19 - response dot text I want to actually get
426:21 - it back as a Json so I'm going to go
426:23 - ahead and I'm going to say data is equal
426:26 - to
426:28 - response.json okay that's the data
426:31 - and let's go ahead and print out the
426:34 - data okay and let's run this
426:39 - and you should see all of that data
426:41 - right over here
426:44 - okay so now we're getting it back as a
426:46 - Json and what I'm going to do is I'm
426:48 - going to import just sonify from flask
426:51 - and that allows us to just take a Json
426:53 - dump it out onto the screen and I'm
426:56 - gonna return and I'm going to say
426:58 - jsonify and I'm going to give it our
427:01 - data
427:04 - okay and we want to dump it out onto our
427:08 - home screen rather than our console so
427:10 - let's go ahead and hit enter and let's
427:12 - just see if we can do that right now
427:14 - so we want to dump all this data yes and
427:16 - we can this is huge success right now
427:19 - like huge right so if we go here
427:23 - we can see this data is being dumped and
427:26 - I have a
427:28 - I have an extension I forget what it's
427:30 - called but it's some kind of Json I
427:33 - think it's Json viewer that's the Chrome
427:35 - extension I have and it makes the jsons
427:37 - very nice for me so like for example I
427:40 - can play with the Json really nicely so
427:43 - here I can see I have this data and it
427:46 - has two keys contents and cursor next if
427:49 - I hit plus it opens up all of this stuff
427:52 - and I can hit minus minus minus and like
427:54 - every single video object
427:56 - uh video dictionary I can close it or I
427:59 - can like open it and then go through
428:01 - close its keys or open their keys Etc so
428:04 - it allows me to like basically go
428:06 - through and like understand the data
428:07 - structure really well so I would say
428:10 - it's pretty helpful you might just see
428:11 - if you don't have this extension you
428:13 - might just see like a straight up white
428:15 - ugly looking page that looks very
428:16 - similar to this so like if you don't
428:18 - have that extension uh this is the page
428:20 - you should expect to see but that's not
428:21 - very useful right
428:23 - okay great so that means we're getting
428:25 - the data and we're putting out the data
428:27 - now all we are really looking to do is
428:29 - like make it look pretty that's it we're
428:33 - like we're pretty much done doing a lot
428:35 - of the dynamic heavy lifting of this app
428:37 - that we needed to do okay now let's go
428:40 - ahead and do that so I'm gonna go say
428:41 - I'm gonna say contents okay and I'm
428:44 - going to
428:46 - get I'm gonna go inside of this data
428:49 - right here and I'm gonna pull out this
428:51 - key contents right because when I'm
428:53 - looking at this so that dictionary right
428:55 - there I'm calling that data okay so
428:58 - that's called Data now inside the data
429:01 - I'm going to index it and just pull the
429:04 - contents in here so that's why I'm going
429:06 - to index it and ask for it to give me
429:10 - the contents okay just like that so
429:14 - let's go here contents and let's go
429:16 - ahead and print contents now and see if
429:19 - it prints it out into the console yep
429:23 - it is
429:25 - um it's in the console all the contents
429:27 - right you guys I can see a lot of
429:29 - information about video video with
429:31 - thumbnails I'm seeing all kinds of stuff
429:33 - so that's a really good sign now what I
429:36 - want to do is I want to write a nice
429:38 - little
429:39 - um
429:40 - for Loop and what that for Loops job is
429:43 - this
429:44 - I want to create an array of all of
429:46 - these videos except I do not care about
429:49 - this
429:51 - key right here at all I don't care about
429:54 - this key right here so I want to ignore
429:56 - that key type and the second thing I
429:58 - want to ignore is I don't
430:01 - um the second thing I want to ignore is
430:02 - any video that's not been published so
430:04 - on my app I only wanted to show the
430:06 - videos that have been published anything
430:08 - that has not been published I don't want
430:11 - it to bother even showing me that
430:13 - because I don't care I don't care if
430:16 - it's not been published do not show it
430:18 - to me
430:19 - so let's go ahead and write a list
430:22 - comprehension that can actually do that
430:25 - for us so I'm going to go ahead and say
430:27 - videos and I'm going to say get me the
430:31 - video for video and contents
430:34 - okay so I'm gonna basically I'm looping
430:36 - through this contents
430:38 - and I'm going to say if the video
430:41 - and let's index the let's get the video
430:44 - key so we're making sure essentially
430:46 - that we're not getting this type thing
430:49 - we're specifically saying or return this
430:53 - okay so if that video
430:56 - um
430:57 - has a published time text okay so only
431:02 - get the video if it has published time
431:04 - text if it doesn't meaning if it has
431:06 - null it won't get it and here
431:09 - we are saying video All I'm gonna say
431:12 - here is just get me the
431:15 - video key so don't get me the type key
431:19 - at all okay so that's videos now let's
431:22 - go ahead and
431:23 - print out videos and let's see what we
431:25 - see
431:29 - okay and now let's uh let's see if we
431:32 - can get videos to be in this jsonify
431:35 - let's see if that works
431:38 - let's give it a try it does work so
431:40 - let's refresh
431:42 - so now we can see that yep so now we're
431:44 - just getting a new list
431:46 - right and that list just has videos in
431:48 - it straight up there's no dictionary
431:50 - called key there's no extra key uh keys
431:53 - in there there's just a dictionary with
431:56 - a video data inside of it and that's all
431:58 - that's all we're getting and this should
432:00 - be about like 20 or 30 videos right so
432:02 - boom right there are all the videos
432:04 - they're stored in a list called videos
432:07 - and if I open this up there's no key
432:10 - called
432:11 - if we look at all the keys you know
432:14 - there's no key called uh
432:17 - type and now we just have all the useful
432:20 - keys that we need like badges is live
432:21 - now length seconds blah blah and every
432:24 - single thing that publish time text was
432:26 - null is now been filtered out
432:29 - okay that's the nice thing about this
432:31 - this is saying only get me the ones that
432:33 - have published time text that's it so if
432:36 - it has a publish time text get it back
432:38 - to me okay and out of those just do this
432:42 - okay so we're we're mapping and
432:44 - filtering here which is very nice and
432:46 - python allows you to do that with list
432:48 - comprehensions which are very handy
432:51 - okay so we're getting our videos now
432:55 - what we need to do is we need to render
432:58 - our template and we need to send this
433:00 - data back to our index.html and start
433:03 - playing with this data there okay so I'm
433:05 - going to go ahead and I'm gonna say
433:07 - render template and I'm going to say
433:09 - render index.html and I'm going to pass
433:12 - it these videos okay so I'm going to
433:14 - take these videos and I'm going to pass
433:16 - it and give it this value videos so in
433:19 - the in the front end in our HTML file
433:21 - we'll have a variable called videos that
433:23 - we could then use okay now this render
433:25 - template make sure that we import it
433:27 - from flask so I'm going to go ahead and
433:29 - import it because we'll need access to
433:31 - that
433:32 - okay and then what we're going to do is
433:35 - create a new folder called templates and
433:37 - inside of templates we're going to
433:39 - create index.html and in here let's just
433:42 - go ahead and say H2
433:43 - and let's say videos let's just make
433:46 - sure that this page is actually loading
433:47 - so I'll put this down here
433:50 - and our videos page is actually loading
433:52 - let's make sure that that page has
433:56 - access
433:58 - let's make sure that this page access
434:00 - has access to all of our videos so I'm
434:01 - going to go ahead and save videos just
434:03 - like this so let's see if it has access
434:05 - to our videos variable
434:07 - nice you could see it does okay now
434:11 - let's just give it one video okay so
434:14 - let's just get our first video here so
434:15 - I'm gonna say first video and I'm gonna
434:18 - go videos of zero and let's just give it
434:21 - one video and let's see how it deals
434:22 - with it okay so we're gonna say first
434:24 - video equals first video
434:28 - and we'll go ahead hit save command s
434:31 - and here I'm gonna go ahead I'm gonna
434:33 - say first video
434:34 - so we'll just get and I'll I'll delete
434:37 - this for now okay let's run this
434:42 - and uh that's it we're getting back just
434:45 - enough data for one video okay now what
434:49 - we're gonna do
434:51 - is um we're going to go ahead and just
434:54 - start really like
434:56 - pulling the data out that we need okay
434:58 - so for example uh let's go ahead and in
435:02 - this H2 I'll say first video
435:06 - and I'll say title and let's put these
435:09 - double squigglies here so it knows that
435:11 - this is like a python code and not just
435:14 - HTML so let's write that and let's see
435:17 - so boom I got my title of the video okay
435:20 - so that's very good let's go ahead and
435:23 - see if I can get the published
435:26 - uh time text let's try that
435:31 - okay and then after this let's go ahead
435:34 - and see if I can get the views of that
435:37 - video so if I go look I have stats and
435:41 - then stats has something called views so
435:43 - I can go stats and then I can go views
435:46 - just like this so let's see if I get my
435:49 - stats
435:51 - and you can see I'm getting my stats and
435:53 - then the next thing I will need is I
435:56 - will need a
435:58 - um I will need
436:00 - let's go look at our final app
436:03 - okay so I have views so here I want to
436:06 - say views after this
436:09 - okay views
436:10 - and then I want to say the channel name
436:14 - okay so we could we could hard code the
436:17 - channel name if it doesn't give that to
436:18 - us
436:19 - yeah it doesn't seem like it gives us
436:21 - the channel name in this case and the
436:24 - next big thing big obvious thing we need
436:26 - is this image we need to get these
436:28 - images from here okay so let's go ahead
436:30 - and grab the image as well so I'm going
436:33 - to go ahead I'm going to say
436:35 - image tag okay and for Source I'm going
436:40 - to write Dynamic python code here and
436:43 - we'll say first video okay and let's go
436:45 - ahead and just call it video instead of
436:47 - first video you'll see why the rest of
436:49 - our code will become a lot easier so
436:51 - let's go ahead call it video
436:54 - and video here okay so it's just one
436:57 - video
436:58 - and then let's go ahead to our templates
437:03 - okay and let's rename all of these and
437:07 - call them
437:11 - okay let's see if it allows us to
437:17 - play with this ignore that sound that's
437:20 - the sound to keep me productive I'm
437:23 - going to select all
437:24 - and I'm just going to change this to
437:26 - video and that's it okay
437:30 - all right now video now let's go look at
437:32 - this data structure so how do I get my
437:34 - thumbnail so I'm in my video then I will
437:37 - in uh I will get this thumbnails key so
437:40 - I'll go ahead and do thumbnails
437:44 - okay
437:45 - and let's put a double quote around here
437:48 - double quote okay so I get my thumbnails
437:51 - now then after I get inside of my
437:54 - thumbnails I need to get my zeroth
437:56 - element so I can get zero one two three
437:59 - four or zero
438:01 - this is zero this is one this is two and
438:04 - this is three
438:05 - okay so I could get any of those this
438:08 - would be the lowest quality and then
438:11 - this would be the highest quality
438:13 - okay but let's just start with the zero
438:15 - one so I'm going to go ahead and I'm
438:16 - gonna say zero and then I need to get
438:19 - the URL right so after zero I need to
438:21 - get the URL so I'm going to go ahead and
438:24 - say
438:26 - um
438:26 - URL
438:28 - okay so grab the video get its key
438:31 - thumbnails inside of that get the first
438:33 - thumbnail and then get the first
438:35 - thumbnails URL that's basically what I'm
438:37 - saying here and let's end our image tag
438:40 - here okay let's self close it let's run
438:43 - this let's see what happens
438:46 - and there we go we're actually getting
438:49 - that image back now right we're getting
438:52 - back the image
438:53 - and uh let's comment this line out so it
438:56 - doesn't run
438:57 - okay let's do this so now we just see
439:00 - all of this stuff so it's already
439:02 - looking pretty clean we're dynamically
439:04 - getting the data
439:05 - you know if we change this we already
439:08 - know this app is dynamic and I could
439:10 - prove it to you by if we go here
439:13 - and you replace cozy here right because
439:16 - we're giving it in if we go to query
439:18 - string we're giving it in from channels
439:21 - clever programmer but you could also
439:23 - give it Mr Beast
439:24 - Mr Beast right here so just give it Mr
439:27 - Beast uh inside of channels and you'll
439:31 - notice that it'll pull a Mr Beast video
439:33 - and show that there we go all right holy
439:36 - crap that's a lot of views right
439:38 - so you could see and it was one day ago
439:41 - so you can see this app is already
439:43 - Dynamic it's pulling the data it's doing
439:45 - the things that it's supposed to do and
439:48 - uh those are really the four pieces of
439:50 - information that we need if we if we're
439:51 - looking at this right we need the image
439:53 - we need the title of the video we need
439:56 - the streamed how many days ago how many
439:58 - views and then the clever programmer
440:00 - part and the logo is hard coded okay so
440:03 - that will remain the same so now at this
440:06 - point we have to make this card here
440:08 - look really nice so let's create a card
440:12 - and make the card look uh look nice okay
440:17 - let's go ahead and do that now so I'm
440:19 - gonna go ahead and cut all of this for
440:22 - now or just comment it out and leave it
440:24 - let's let's select all of this and let's
440:26 - comment this okay and let's go here and
440:29 - let's just make a card so I'm going to
440:31 - go ahead div there's going to be some
440:32 - HTML stuff here that we're gonna do
440:34 - don't worry about it too much but the
440:36 - only thing I want you to worry about
440:37 - here is just make sure you're really
440:39 - following along and writing all of these
440:40 - lines lines and especially you're naming
440:43 - your divs the same and your classes what
440:46 - I'm naming them here so let's say we
440:49 - have our class card okay inside of that
440:53 - we're going to have a
440:56 - let's start it backwards so then it's
440:58 - easier for you to see okay so let's take
441:00 - our image and let's work backwards so
441:02 - I'll take our image I'll uncomment this
441:05 - uh okay that's annoying
441:09 - would not take this and paste it here
441:11 - okay so let's take this image for
441:13 - example let's run our app so basically
441:15 - right now it should be just showing you
441:18 - that image right there okay and
441:20 - something to keep in mind if I change
441:22 - that to a three the quality of that
441:23 - image is going to become higher so I
441:25 - want you to keep this in mind for
441:28 - future because we're gonna we're gonna
441:30 - be doing something with this we're gonna
441:31 - write a piece of code that's going to
441:33 - dynamically always choose the highest
441:35 - quality available
441:37 - all right so now that we have this image
441:42 - um what we want to do is we want to put
441:44 - it in a thumbnail container okay so
441:47 - let's go ahead here and this is where
441:49 - this magical style file that we've
441:51 - created for you is going to start coming
441:53 - in real handy so do me a favor and at
441:55 - the top just link this file okay so at
441:58 - the top I want you to just say uh link
442:02 - and we're going to say a style sheet not
442:07 - ref I meant Rel okay we're going to say
442:09 - Rel style sheet and then for href I'm
442:12 - gonna go ahead and say static slash
442:14 - styles.css okay and we can just close
442:17 - this self-closing tag all right now
442:19 - let's run this okay so you shouldn't see
442:22 - too many changes yet except there is
442:24 - already some changes coming up so if I
442:26 - go to this app right now you can see
442:28 - that
442:30 - things are already kind of centered
442:32 - right and our image is already in in the
442:36 - center there and and the background is
442:37 - dark okay so that already happened from
442:40 - just bringing the style file so that's a
442:42 - very good sign now what I want to do is
442:44 - make our card so we're going to finish
442:46 - making our card so in here I'm gonna go
442:49 - ahead and say class and we'll set
442:51 - thumbnail container and let's take this
442:54 - div and wrap it here so let's wrap that
442:57 - image inside of this thumbnail container
442:59 - and let's run this okay now it's
443:02 - starting to look already better now
443:04 - we're going to create a card so I'm
443:07 - going to say class card and that's going
443:09 - to wrap everything okay so everything
443:11 - about this card that we're making here
443:14 - I'm I'm selecting everything and hitting
443:16 - tab everything that we're making about
443:18 - this card here is going to go inside of
443:21 - these card divs okay so for example
443:25 - everything is going to go inside of this
443:26 - card diff from this point on okay so
443:28 - let's run this
443:30 - okay so now here's what you should see
443:33 - you should see a card
443:35 - and there's like already some some stuff
443:38 - in the back right your image is already
443:40 - going in the middle so that's good okay
443:42 - next up what we're gonna do
443:45 - is let's go ahead and give this image a
443:48 - class now so we're going to give it a
443:50 - class here so image source is going to
443:52 - remain that but class is going to be
443:54 - thumbnail
443:56 - okay there we go so now this image
443:58 - should be looking a lot better okay
444:01 - and then next up what we'll do is I'll
444:05 - I'll just give it three right now so it
444:07 - looks good and then in the future when
444:09 - we run into that error because some of
444:10 - the images don't have a three
444:13 - uh they only have low quality available
444:15 - and I'll show you what we can do all
444:16 - right so boom there we go thumbnail
444:18 - container is good now let's create an
444:20 - info container where we're going to
444:22 - store information about you know the
444:24 - title uh of the video the the channel
444:29 - name how many views how many days ago it
444:31 - was published Etc okay so let's go ahead
444:33 - and do that
444:35 - div and then let's go and we're gonna
444:37 - say class and we're gonna go info
444:39 - container on this and inside of this
444:41 - info container we're going to put all
444:43 - the stuff that we want to put okay so
444:45 - div
444:45 - I'm going to create another div here
444:48 - and we're going to call this
444:51 - Channel
444:54 - logo container really make sure you're
444:57 - not making spelling uh errors here
444:59 - because what needs to happen right now
445:00 - is your your code that you're writing
445:03 - needs to match up with the CSS file so
445:06 - for example
445:08 - let's say you're making this card
445:10 - component right and I go here your class
445:13 - here that says card needs to match up
445:15 - with what it says in the styles.css as
445:19 - the class for card because if they don't
445:22 - match up all the styling for the card
445:24 - you're going to lose it so for example
445:25 - let's just say You misspelled card
445:27 - and you must you you wrote card with two
445:29 - D's
445:30 - well that ain't gonna work buddy because
445:33 - if I run restart the server and run this
445:36 - apparently that's working okay I don't
445:39 - know what to tell you there that's not
445:40 - supposed to happen
445:42 - why is that happening
445:44 - um okay if you keep doing that at some
445:46 - point you're gonna get into trouble okay
445:48 - if you keep misspelling all of this
445:49 - stuff here
445:51 - right let's just give this a try let's
445:53 - restart this it's probably my style
445:55 - sheet is not refreshing or something
445:57 - that's what's happening right now okay
445:58 - but just trust me if you mess with this
446:01 - you're going to get into a lot of
446:02 - trouble so don't do that just make sure
446:04 - that you're staying consistent with all
446:06 - your uh just don't make typos okay you
446:09 - should be good let's go back to our file
446:12 - so thumbnail container okay or info
446:14 - container sorry and then Channel logo
446:16 - container and then inside of this
446:17 - Channel logo I'm gonna just go ahead and
446:19 - drop this logo and
446:22 - um you can copy it or you can paste your
446:24 - own logo so here's the logo that I'm
446:27 - using this is a this is the clever
446:29 - programmer logo and the classes Channel
446:31 - logo okay that's all I did here I just
446:33 - popped this image in okay inside of this
446:36 - Channel logo container so let's run this
446:38 - now and we should see a logo be logo is
446:42 - popping up okay very good
446:45 - so we're we're good with our info
446:47 - container now we still need more stuff
446:50 - in our info container we're good with
446:52 - our Channel logo container but we need
446:54 - more stuff in our info container
446:56 - here what I want to do is I want to have
446:58 - another div and a class and we're going
447:01 - to say info
447:02 - and let's end this div and within this
447:05 - info
447:07 - I want to go ahead and create a P tag
447:09 - and I'm going to go ahead and say I'm
447:11 - going to say video
447:14 - title
447:16 - just like that and let's see if that
447:18 - shows up so let's hit command enter and
447:20 - restart the server I'm going to make
447:22 - myself a little bit smaller so you can
447:24 - see
447:25 - there you go you could see that it says
447:27 - should I start a Hindi coding Channel
447:29 - next up we're going to go ahead and
447:31 - create a span tag and I'm going to say
447:34 - clever programmer and we'll do a line
447:36 - break after this let's go ahead and do
447:39 - this
447:43 - okay there we go
447:45 - now that's being popped in correctly
447:48 - okay
447:50 - and then what we could do is
447:53 - pass in another span tag
447:57 - and this span tag will have the stats of
448:00 - the video so I'm going to go ahead and
448:02 - say views on this
448:05 - okay and we'll we'll write the word
448:08 - views after this so let's run this and
448:10 - let's just see what we get so this
448:12 - should be the actual data and then this
448:15 - should be the word views showing up
448:17 - right there okay very good make this a
448:19 - little bit bigger
448:20 - okay and then I'll put this uh dot here
448:24 - it's option eight on Mac on Windows I'm
448:28 - not sure what it is if you don't have
448:29 - this dot copy it from online look for
448:32 - DOT something if you can't get it or
448:34 - don't want to get it then just don't and
448:36 - put a period there or a dash that should
448:39 - be fine too
448:41 - okay and then the next thing we're going
448:42 - to put here is the time text okay so I'm
448:45 - going to go ahead and save video
448:47 - uh published time text okay let's hit
448:51 - command enter so it restarts our server
448:53 - or control enter if you're on Windows
448:55 - and there we go it says streamed five
448:58 - days ago so if I go to this app and I
449:00 - refresh I can see all of this data
449:02 - popping up here which is a great sign
449:04 - the only concern I have right now
449:06 - obviously is we only have one app one
449:09 - card and we don't have lots of other
449:12 - cards okay so that's that's a concern
449:16 - but it's not that big of a concern now
449:18 - here's what we're gonna do I'm going to
449:20 - refactor some of this code and and make
449:23 - it make it pretty nice actually
449:25 - okay so this card component here we can
449:29 - make it its own component I'm gonna get
449:31 - rid of all of this here okay
449:33 - and we can use it like a component how
449:35 - we do in react if you have now if you
449:37 - don't have experiences around it's
449:38 - totally fine but all we're gonna All I'm
449:41 - gonna say is I'm gonna make it just nice
449:43 - and organized and easy to use okay so
449:46 - let's go ahead and do that
449:47 - so I'll show you how to create something
449:50 - called macros it's really really nice uh
449:53 - to create macros okay so I'm going to
449:55 - create a new file
449:57 - and we'll call this components
450:00 - dot HTML
450:02 - and I'll paste this code in here I'll
450:04 - delete the style sheet link okay at the
450:08 - top I'm we're going to go ahead and put
450:11 - this percent sign so only one squiggly
450:13 - and then a percent sign okay not two
450:14 - squigglies this time and I'm going to go
450:17 - ahead and say macro
450:18 - card
450:20 - okay and it's going to take in a video
450:21 - as a function so literally this is like
450:24 - I'm writing a function here okay
450:27 - and then you're going to put a minus
450:29 - sign and then a percent sign okay
450:32 - it's weird I know but just trust me just
450:35 - do that your life is going to be great
450:38 - okay and then at the bottom we're gonna
450:40 - go ahead and say end macro okay but make
450:43 - sure you put a minus sign here I'm going
450:44 - to say n macro and a percent sign and
450:46 - done so our macro is done here
450:49 - now in our index.html look at how clean
450:52 - this is going to become remove
450:53 - everything
450:54 - okay and simply what you could do is now
450:58 - you never have to look at this component
450:59 - again since you've made it already once
451:02 - you don't have to worry about it and
451:04 - what we could do
451:06 - here is a
451:08 - we can actually do this
451:11 - go all the way to the top and we can say
451:14 - from
451:16 - from
451:17 - components
451:19 - dot HTML
451:22 - import
451:24 - card okay so now we can import card okay
451:28 - let's run this app and just watch what's
451:30 - gonna happen so if I run this app really
451:32 - like nothing should be showing up like
451:34 - no card or anything should be showing up
451:35 - okay
451:36 - because we're not rendering this card
451:38 - component right now it's our index HTML
451:41 - that's the main file components is not
451:43 - running right now now if I want to show
451:45 - the card component all I actually have
451:47 - to do is I have to just go ahead and say
451:49 - card
451:50 - and pass it the video that I have that's
451:53 - it now once I passed the video
451:56 - card component once you pass it the
451:58 - video it already automatically knows
452:01 - what to do once you pass it the video it
452:03 - goes here it sees videos as a function
452:05 - it then takes this video goes here grabs
452:08 - all of this
452:10 - it uses a variable video here so it
452:12 - literally works like a function inside
452:14 - of python which is freaking epic it's so
452:17 - cool right so there you go you have a
452:20 - card and now what we want to do is we
452:23 - have lots of videos right we have 30
452:25 - videos not just one video so we want to
452:27 - write a loop that can help us access all
452:30 - of those videos and just iterate through
452:32 - them so we are already sending back this
452:35 - videos list okay so and we only send
452:38 - this video video back uh for dummy data
452:42 - and like playing around and seeing if we
452:44 - could make a component now that we're
452:45 - done we could pass our entire list of
452:48 - videos and then just Loop through and
452:51 - make a card for all of them
452:53 - okay so let's go back and I can just go
452:56 - ahead and write a for Loop so I can say
452:57 - four video
452:59 - in videos
453:02 - and pass it to our card and then just
453:04 - end for Loop just like that and if you
453:08 - run this this is going to be kind of
453:09 - crazy but I think literally the entire
453:11 - app will work let's see
453:14 - so let's see hopefully we don't get a
453:16 - crash okay we got a crash it says the
453:19 - there's a video that does not have an
453:21 - element three if you could see that
453:23 - three right there okay so that was the
453:25 - error I had warned you about so let's
453:27 - just put replace that with zero look go
453:30 - back to your components.html replace
453:31 - that with the zero and hit command enter
453:33 - and run this again okay and let's
453:35 - refresh this page boom there we go we
453:40 - just got everything right like
453:42 - everything is showing up this is insane
453:46 - um
453:47 - there's just one thing that we have to
453:49 - fix with styling like you see this is if
453:52 - we look at this in the final solution
453:53 - there's a gap right here right between
453:56 - each card but if you look here there's
453:58 - no Gap it's just like one big thing so
454:01 - all we want to do to fix that is in our
454:04 - index.html we need to just create a div
454:07 - and we need to give it an ID of home and
454:10 - we need to put the whole thing inside of
454:12 - that
454:14 - okay and run this and that should fix
454:16 - our problem
454:18 - okay and let's go back here and let's
454:20 - refresh and look at this it's done it's
454:23 - showing up right if I make it smaller
454:25 - right it shows up one by one so it's
454:28 - fully responsive as well all right
454:32 - um that is so nice and then one last
454:35 - thing that I want to do is here it says
454:36 - 40 998 views if you go to the final
454:39 - version it says 41k views 13k views 44.5
454:43 - K views so that's how YouTube is
454:46 - actually YouTube it says either K or M
454:49 - for million
454:51 - so what we're going to do is we're going
454:52 - to use this Library called numerize
454:55 - it's really nice and here's how it works
454:58 - so I'm going to go ahead and open up our
455:00 - command line here and let's go and pop
455:04 - this bad boy open make it make it huge
455:07 - so you could see it gonna go right there
455:09 - I'll move this here we're going to say
455:11 - python okay and so just in the Shell
455:13 - just run Python and um
455:17 - from numerize dot numerize import
455:21 - numerize okay and if I call numerize on
455:25 - a number like 23 000 watch what it's
455:28 - going to do it's going to turn into 23k
455:29 - if I call it on a bigger number it'll
455:32 - turn into 230 million and turn it as a
455:35 - string okay so numerizes really nice if
455:38 - you don't have numerize you could
455:39 - probably just do if you for whatever
455:41 - reason you don't have your pip install
455:42 - numerize or you could install it from
455:45 - this package manager right here click
455:47 - that and just type in numerize and
455:50 - install it okay but if you Fork this the
455:53 - right way you should already have access
455:54 - to all of this
455:56 - okay so numerize a super nice Library so
455:59 - we're just going to use numerize for
456:01 - what we're trying to do so I'm gonna
456:03 - zoom out here okay and we're gonna go
456:06 - and say from numerize dot numerize this
456:09 - only annoying thing about this but
456:11 - that's fine import numerize okay so
456:14 - we're going to go ahead and do this and
456:16 - I'll show you something really cool in
456:19 - flask you can create these filters and
456:21 - they're awesome if you have experience
456:24 - developing with react ever
456:26 - man with flask you could create these uh
456:28 - template filters which is essentially
456:30 - like you're creating something inside of
456:31 - your context API or Redux and your
456:33 - entire app has access to it it's awesome
456:35 - but if I'm going to keep it at a simpler
456:37 - level and you're a beginner watching
456:39 - this for newbie it just all it means is
456:41 - awesome and it's very easy it'll make
456:43 - your life simple okay that's all you
456:45 - need to know about this
456:47 - all right so let's go ahead and create a
456:51 - um not this but we're going to set
456:52 - template filter
456:54 - okay and then this template oh don't put
456:57 - a colon there
456:58 - so inside of this template filter here's
457:01 - what we're going to say
457:02 - we're going to go ahead and say
457:05 - Define and I'll just call it numberize
457:08 - okay this is going to be our function
457:10 - it's going to take in a number of views
457:11 - so you're going to pass it views it's
457:13 - going to be a function we're going to
457:14 - make
457:15 - and it's going to return it's going to
457:17 - just call numerize on it and it's going
457:19 - to pass in views and we're going to say
457:21 - comma 1. How many decimals do we want
457:23 - okay that's it that's what this filter
457:27 - number is that we created is going to do
457:29 - it's just gonna
457:31 - depend on this numerize thing okay
457:34 - so uh once we once we do this
457:38 - you get here's what we can do now
457:41 - okay now that we've created this filter
457:42 - here's what we can do so we can go back
457:45 - to our templates and let's go to
457:47 - index.html or let's go to our card
457:50 - component rather
457:52 - so I'll open a new tab here let's go to
457:54 - our card component and here I'm pulling
457:57 - views and what we could actually do
458:00 - is
458:02 - I can actually just pass this guy
458:05 - numberize like that like a filter
458:08 - okay and once I actually pass this
458:12 - markup filter it's going to take this
458:14 - number of views here
458:15 - and call this numberized function on it
458:18 - and do what needs to be done so let's
458:20 - hit command enter and watch it in action
458:24 - there we go 41k views how freaking sick
458:28 - is that that is awesome right 41k views
458:32 - 13k views
458:34 - 44.5 K views
458:37 - 15.7 K view so it rounds it to one
458:39 - decimal 170.1 K views I mean it's it's
458:44 - gorgeous right it's uh
458:47 - it's it's doing what it needs to be
458:49 - doing I mean it's awesome
458:51 - so in terms of number eyes we're good
458:54 - now we just need to create one more
458:56 - filter and all this filter needs to do
458:58 - is grab the third image if it's
459:01 - available and if it's not available just
459:04 - grab the xeroth image okay grab the
459:06 - highest quality image if it's possible
459:08 - okay so we're going to go ahead create
459:09 - another filter
459:11 - and this is super cool I'm in love with
459:14 - the flask templates they're so cool so I
459:17 - can go ahead and say template filter
459:20 - and I can say to find highest quality
459:24 - image and it'll take in images because
459:27 - we're going to give it a list of
459:28 - thumbnails
459:30 - and what this will do is it'll return
459:35 - the uh is going to return images of
459:38 - three
459:40 - okay uh and and the URL of that
459:44 - if the length of images is greater than
459:48 - or equal to four so meaning if I have a
459:50 - thumbnail let's go here right if I have
459:52 - uh
459:54 - if I have thumbnails and that has a
459:57 - length of 4 or greater then just get me
459:59 - the highest quality one but if it
460:01 - doesn't have a length of four meaning it
460:02 - has a length of 1 well that clearly
460:04 - means that it doesn't have this and
460:05 - doesn't have this and it doesn't have
460:07 - this just grab me the zeroth one so if
460:09 - it doesn't have a length of four or
460:10 - greater just grabbing the lowest quality
460:12 - one because if you try to get this one
460:14 - it's going to error out because it's
460:15 - going to say it doesn't exist right
460:17 - so
460:18 - that's what it's going to do so we're
460:20 - just going to check for length and if
460:21 - length of 4 or greater then just grab
460:24 - the fourth one and if it's not length of
460:27 - four then just or if it's less than
460:29 - length of four just grab the zeroth one
460:31 - that's it okay so grab the highest
460:35 - quality what you want if the length is
460:36 - greater than or equal to four
460:38 - else
460:40 - grab the lowest quality one
460:44 - let's go ahead to our components and
460:46 - here I'm going to remove this okay I'm
460:50 - just going to give it remember this
460:51 - function takes in a list of thumbnails
460:53 - okay so let's go ahead and even maybe
460:55 - rename it to thumbnails thumb
460:59 - you know it takes a list of thumbnails
461:03 - and so this is a list of thumbnails so
461:06 - pass that to that function we'll call it
461:08 - highest
461:09 - quality
461:11 - images
461:12 - okay and now if you see keep looking at
461:15 - this image and if I run this app you're
461:17 - going to see that the image quality is
461:18 - going to become much better
461:21 - we have an error
461:24 - no template highest quality images ah
461:27 - yeah because we called it highest
461:28 - quality thumbnails now so thumbnails so
461:32 - let's do this
461:34 - let's see if this works
461:38 - and we still have an error it says
461:39 - highest quality no filter name house
461:41 - quality thumbnail so let's see what's
461:43 - happening let's go to main.py
461:47 - um
461:49 - oh yeah highest quality image singular
461:51 - is what it's called highest quality
461:53 - image because the function gets us only
461:55 - one image so that makes sense why would
461:57 - we call that
461:59 - there we go that image is looking way
462:02 - better now right it's looking way way
462:04 - better now if you want to check this app
462:07 - out and see if it's working everywhere
462:10 - let's go ahead and um let's go ahead and
462:13 - test it out right let's go and replace
462:15 - where it says clever programmer with Mr
462:17 - Beast okay so let's go to channels so
462:19 - let's go ahead and just say
462:22 - active Channel
462:24 - okay and uh
462:26 - let's pass in active channel here okay
462:29 - so we don't have to keep going all the
462:31 - way down here to pass this active
462:33 - Channel and here I'm just going to say
462:34 - channels
462:36 - um and let's give it
462:40 - uh Mr Beast
462:42 - okay so let's go ahead and make the
462:44 - active Channel Mr Beast and let's see if
462:46 - that works oh
462:49 - boom there we go and if I make it bigger
462:52 - boom that is nice right right there look
462:56 - at that if I go ahead and change the
462:58 - active channel to MKBHD let's see if
463:01 - that works let's hit command enter
463:04 - and let's wait for it
463:06 - there we go right
463:09 - MKBHD is showing up and working with
463:12 - this python app that we made let's go
463:14 - ahead and change it to Peter McKinnon
463:15 - let's give that a try
463:18 - and we could see Peter McKinnon is
463:20 - showing up right if you want to make
463:22 - this even more realistic see if you can
463:24 - add in uh put in Peter McKinnon's logo
463:27 - here manually pass that to the back end
463:29 - render that out on the HTML and do the
463:32 - same thing for the name and see if you
463:33 - could do that I bet you could actually
463:35 - at this point all right so this app is
463:38 - super Dynamic right when I go when I
463:41 - scroll it it's a responsive mobile
463:43 - responsive
463:45 - this app is fully functional it's
463:47 - deployed online already and this is a
463:50 - phenomenal python project to show
463:52 - somebody and especially if you're a
463:53 - beginner and you you're made this or at
463:56 - least you understood some of this right
463:58 - as you were doing this this is
463:59 - phenomenal now do I expect you to
464:01 - understand everything here and expect
464:02 - you to be able to come up with this
464:04 - yourself hell no okay or
464:07 - figure out all this HTML stuff or how it
464:10 - connects to styling no do I expect your
464:12 - brain to be hurting right now absolutely
464:14 - like I don't expect that you should be
464:16 - able to get this okay because you're new
464:19 - okay right now is not the time where I
464:22 - expect that you should be able to
464:23 - understand all of this
464:25 - your brain is probably hurting this is
464:27 - probably a lot to grasp you might even
464:29 - be thinking man maybe I'm not cut out
464:30 - for this or I should quit or something
464:32 - along those lines I know those feelings
464:35 - because I've been there all I want to
464:37 - tell you is programming and the start
464:39 - for a while it feels overwhelming then
464:42 - when those Concepts become clear and you
464:44 - keep building on them it becomes simpler
464:46 - and simpler and a lot less overwhelming
464:48 - because you learn how to see things for
464:49 - what they are and just iteratively do
464:52 - one thing at a time okay it's kind of
464:54 - like learning how to ride a bike there's
464:56 - so many steps if you really think about
464:58 - it
465:00 - or driving a car but once you get used
465:03 - to it it's so easy and it's all
465:05 - automatic okay so I hope you enjoyed it
465:08 - and had a lot of fun I had a lot of fun
465:11 - making this for you and building this
465:13 - project and uh with that said I love
465:16 - your beautiful face and I'm gonna see
465:17 - you soon in the next project great job
465:20 - look at this it's so sick ah all right
465:24 - I'll see you soon peace
465:26 - I just picked a number between 1 and
465:28 - 100. can you guess which one it was I'll
465:31 - wait I'll give you three seconds no no
465:33 - really take a guess three two one
465:36 - wrong the number I chose was 73. all
465:40 - right now let's build this game with
465:42 - python we're going to use Python to
465:45 - build this guess the number game okay
465:46 - and you'll be able to have users guess
465:50 - what your number was and then you'll be
465:52 - able to select if they were right or
465:54 - wrong in this case the one that we're
465:55 - building is you get to play with an AI
465:57 - the AI picks the number aka the computer
466:00 - picks a number and then you get to crack
466:03 - that code like a detective and we're
466:06 - gonna build this game with python using
466:08 - flask and there's going to be JavaScript
466:10 - and HTML and styling and all that stuff
466:12 - but the good part is the way that I've
466:14 - built it for you you're not gonna need
466:16 - to worry about a lot of the HTML and the
466:18 - CSS part you're just going to focus on
466:20 - building the game now what's covered in
466:22 - this is you're gonna need to have a
466:24 - database to be able to do this so I'm
466:26 - going to show you how to set that up
466:27 - even if you're a complete beginner
466:29 - you're going to need to be able to input
466:31 - and the user can type in what your
466:33 - actual guess is and then once you hit
466:35 - check me it will actually actually tell
466:37 - you if that guess is Right meaning it's
466:40 - correct right the green one will come up
466:42 - or if it's too low or if it's too high
466:45 - right so then yellow and red those
466:47 - things will pop up and let the users
466:49 - know and then you'll be able to restart
466:50 - the app as well and then you know get
466:53 - back to it so there's a bunch of
466:55 - functionality that this app will have
466:58 - and let's just go ahead and demo this
467:01 - right now so here we go I'm going to
467:04 - pick a number computer has already
467:06 - guessed the number okay and it says good
467:08 - luck cracking it so I'm going to go
467:10 - ahead and pick 50 and I'll hit check me
467:12 - and it says it's too low I'm going to go
467:15 - ahead and pick 75 it says it's too high
467:18 - let's go ahead and pick 65 because we
467:22 - want to pick a number lower okay it's a
467:25 - 65 is too high as well okay let's go
467:27 - ahead and go 58 in between 60 and 50.
467:30 - okay let's go 54 and between 50 and 50.
467:34 - oh wait actually we gotta go higher so
467:36 - it's in between 65 and 58 which probably
467:39 - means it's around 63. it says that's too
467:43 - high so it's in between these two now I
467:45 - imagine so I'll go pick 60.
467:49 - too low so 60 it's either 61 or 62.
467:53 - there we go and it says that 61 is
467:57 - correct right so we have solved the
468:00 - problem
468:01 - we've cracked the code and if we wanted
468:03 - to play again we just hit restart and we
468:06 - get going again all right so this is the
468:09 - demo of the app very simple game but
468:13 - what I would say is that there's a lot
468:14 - of Concepts that we cover here in flask
468:17 - you're going to learn routing you're
468:18 - going to learn how to deal with
468:19 - databases all that stuff right so with
468:21 - that said let's go ahead and get started
468:23 - now if you're watching this as a clip on
468:26 - YouTube the link will be in the
468:27 - description below for the project go
468:29 - ahead and Fork that uh click that Ripple
468:32 - it and then you're going to click Fork
468:34 - that'll give you access to this entire
468:35 - project and everything in between if you
468:38 - are watching this inside of this epic
468:41 - python course great if you're watching
468:43 - this here well you'll have access to all
468:46 - of this inside of that mega mega mega
468:48 - Python course and obviously if you want
468:51 - to take a part of that mega Python
468:52 - course and you're not a part of it
468:53 - already just scroll down below and one
468:56 - of the links will be there to enroll in
468:57 - it and it's all all of these resources
468:59 - everything is free okay
469:01 - so you're going to scroll down and
469:04 - you're gonna find the guess the number
469:05 - project you're going to keep scrolling
469:07 - in the python Mega course and just
469:10 - scroll down to guess the number project
469:13 - okay this might be higher or lower for
469:16 - you just depends on the time that you're
469:17 - watching this and if we decide to make
469:18 - any changes and this is the project and
469:21 - here are all of the links for it that
469:23 - are there for you so you got project
469:25 - live demo and solution so click live
469:27 - demo if you want to see the live demo
469:30 - click solution if you want to see the
469:32 - actual solution so I don't recommend you
469:34 - click this right now click this probably
469:36 - at the you know and not something you
469:40 - want to be working on looking at right
469:41 - now the project is the one where you're
469:43 - going to do this as an exercise and try
469:45 - to solve this yourself
469:48 - okay so those are the things that are
469:51 - available to you so I'm going to go
469:53 - ahead and I'm going to click this
469:54 - project link so we can get started
469:56 - working on this
469:58 - okay and then I have my solution open up
470:01 - here just so I can always see what it
470:03 - looks like so you can have your live
470:04 - demo open up the whole time so you can
470:06 - kind of always have a point of reference
470:09 - to see which which you're going to be
470:10 - referencing right and uh let's go ahead
470:13 - go ahead here
470:16 - and if you hit command enter right now
470:18 - it should just start this app for you
470:21 - right here so if I open this up this is
470:23 - not the solution file this is your
470:25 - exercise file okay
470:27 - and if you're clicking this it would ask
470:30 - you to do a fork so I'm gonna do that
470:32 - fork with you okay I'm just gonna call
470:34 - this instructor
470:36 - okay let's go ahead and Fork so if it
470:39 - brought you to a page asking you to Fork
470:41 - just go ahead and Fork the project that
470:43 - way you can code in it right and you
470:46 - won't have to be blocked by anything
470:49 - and then let's go ahead and hit command
470:52 - enter to run this server and run this
470:55 - app and again what's nice about replit
470:57 - is you already have these static files
471:00 - and templates available to you which
471:03 - essentially means that when this app
471:05 - runs you won't have to spend you know
471:09 - really any time on
471:13 - on getting it set up right like all of
471:16 - the styling and everything is going to
471:17 - be there for you so there we go I just
471:19 - had to restart the server again and now
471:22 - my app is open so I'm going to open this
471:24 - one up
471:26 - okay and now this is the version that
471:29 - we're currently working on okay so like
471:32 - you'll see if I write in stuff there's
471:34 - no functionality like if we type in
471:35 - numbers here there's no functionality if
471:38 - I hit check me it says it's broken
471:42 - um nothing happens if I hit restart it
471:44 - tells me it's not found it's broken so
471:46 - all that means is we need to just work
471:49 - on it and and make it functional
471:51 - okay so when I'm thinking about making
471:55 - this functional here are the first
471:57 - things that I'm thinking about right the
471:59 - first things that are actually really
472:00 - important to me is
472:02 - one I want every single button to be
472:05 - connected okay and that's really easy to
472:07 - do so I just I in my mind already I'm
472:09 - thinking okay I need to create a
472:12 - uh route for this button and we'll just
472:16 - create the route of it to be at home
472:17 - page so that should be fine and then I'm
472:19 - also thinking I need to create a route
472:21 - for this restart button or reset button
472:24 - so I I'm just going to go ahead and
472:26 - Route it to reset
472:28 - okay how do I know these things well if
472:30 - I actually click check me
472:33 - um or let's put in some information and
472:35 - hit check me you'll see the URL didn't
472:37 - change so that's on the home URL so I
472:40 - already know that piece of information
472:41 - and then when I click restart it takes
472:44 - me to slash reset all right so if I look
472:48 - really zoom in there you'll see it says
472:50 - reset
472:51 - right so now if I go back
472:54 - that's how I know where each button is
472:56 - being routed to so in my mind the
472:58 - routing problem is already solved what
473:01 - I'd urge you to do is see if you can
473:04 - create the routes and then just like
473:07 - print that the button check me was
473:10 - clicked for this one
473:12 - and uh for this one also print that the
473:15 - restart button was clicked okay so see
473:17 - if you can create those routes in the
473:18 - function so then when I hit check me it
473:20 - doesn't actually
473:22 - um it it basically shows me you know hey
473:25 - print checkout I don't care where you
473:28 - show it whether it's on the screen or in
473:29 - the console it doesn't matter as long as
473:31 - I see it somewhere when those buttons
473:33 - are clicked so you should have that much
473:35 - information and you should be able to do
473:37 - that part so I'll give you five seconds
473:38 - to pause and give it a try five four
473:41 - three two one all right let's go ahead
473:45 - and let's do it together now
473:47 - so since I know I need to make these
473:50 - routes well in my mind but I'm going to
473:52 - go ahead and do let's lower this here a
473:55 - little bit so we can see this I'm just
473:57 - going to go ahead get to working on
473:58 - those routes I'm going to say app.rout
474:00 - and first route is already made so I
474:03 - actually don't even need to do anything
474:04 - okay first shot is made so I'm going to
474:06 - go ahead and make a second route here
474:08 - and the second route is just basically
474:10 - going to go ahead and say
474:13 - reset and I'll Define reset and we'll
474:17 - just say print reset or in this case we
474:21 - could even just do return reset page
474:24 - okay so it's going to take us to a new
474:27 - page reset page and then here I could
474:29 - print you clicked me
474:32 - you clicked check me
474:35 - button okay so if I were to go ahead and
474:39 - try this let's hit this button check me
474:42 - and let's see what happens so let's go
474:44 - ahead and give it a two let's hit check
474:45 - me
474:46 - okay let's restart the server so don't
474:48 - forget that hit command enter to restart
474:51 - and you can actually see it says you
474:54 - clicked me check button and let's click
474:56 - it again
474:57 - you clicked check me button let's type
475:00 - in hit check me you clicked check me
475:02 - button right and if you don't type in
475:03 - anything and you do this it'll stop you
475:05 - because it's just doing validation it's
475:07 - making sure that you're putting in the
475:09 - right information I'm just going to make
475:10 - the font size a little bit bigger for
475:12 - you guys right there all right so you
475:14 - can see the you you the check means
475:18 - showing up
475:19 - correctly and then let's go ahead and do
475:22 - the reset page one so if I hit restart
475:25 - now
475:26 - it takes me to this page that says reset
475:28 - page okay so all this means is I made
475:31 - sure that all the buttons have something
475:34 - right like all the buttons actually do
475:36 - something they're not just broken so all
475:38 - my routes are working
475:41 - okay now the next thing that I need to
475:44 - do wait this probably just needs to
475:46 - refresh refresh let's try 23 let's hit
475:49 - check me
475:51 - okay so now the problem that we're
475:53 - having and the reason why we're getting
475:55 - this error is because we're making a
475:58 - post request and a post request is not
476:00 - allowed by default how I know this is if
476:03 - I if we go to our templates and we go to
476:05 - our index.html okay so this is where all
476:08 - of your HTML for this app is coming from
476:12 - so for example you know here's your nav
476:14 - bar
476:16 - right um
476:18 - the AI has picked a number that's all
476:20 - coming through this HTML file and then
476:23 - for example if you're if you're like hey
476:25 - how is the styling happening that's all
476:27 - already done for you in styles.css as
476:29 - well okay that's all happening right
476:31 - here
476:32 - so uh but you don't need to worry about
476:34 - too much of how this HTML stuff is
476:37 - happening because I want to stay focused
476:38 - on the python parts
476:40 - so
476:42 - what's happening here right let's go
476:44 - look at this form this is the only like
476:46 - real interesting thing we need to see so
476:48 - I have this form here okay and this form
476:52 - has a method of Slash
476:55 - okay and then I have another form here
476:56 - for the reset so this form here as by
477:00 - default has a method of get so anytime
477:02 - you don't specify anything you have a
477:04 - get request that you're sending but this
477:06 - one over here is doing a post request
477:09 - okay why are we doing a post request
477:11 - because the user wants to send over some
477:13 - data so the user is typing the stuff in
477:15 - and then the user is like clicking one
477:18 - of these buttons and then use users
477:20 - trying to send some data okay
477:22 - so that's that's effectively what's
477:26 - happening
477:27 - and so if we're getting a post request
477:29 - well then on our back end we actually
477:31 - need to look for that post request okay
477:35 - and retrieve the data from there so what
477:37 - I want to do is
477:39 - um for first before I even do that I
477:41 - want to detect and I want to allow that
477:43 - method so I'm going to say methods
477:46 - and we're going to say we want we'll
477:48 - allow
477:48 - get and we will allow post by default
477:51 - get is allowed meaning if you don't
477:54 - meaning if you don't put any of this
477:57 - it's the same as if you had put this
478:00 - okay these two are equivalent statements
478:03 - so by default it's allowed
478:06 - so we're going to go ahead and add in a
478:08 - post request so it's allowed now now if
478:12 - I run this we'll hit command enter and
478:14 - we'll go here and refresh
478:17 - okay and then I'll type in 23 and hit
478:19 - check me you see it brought us back to
478:21 - this exact page and we didn't run into
478:24 - any errors right it just brought us back
478:27 - to this page and there were no errors it
478:29 - didn't say method not allowed because
478:30 - now
478:32 - post post requests are indeed allowed if
478:36 - that makes sense okay
478:38 - [Music]
478:39 - great so
478:41 - it seems like we're good on that side
478:44 - all right so now next up what we want to
478:46 - do is we want to actually grab the value
478:50 - that the user is inputting in here okay
478:53 - so how we're going to do that is in this
478:56 - way so I can go ahead and say
479:01 - request okay
479:03 - and we can do request.form and I can
479:07 - actually say that
479:10 - let's go to our index.html and I'll open
479:15 - this in a new tab
479:17 - okay so in our index.html you'll see
479:21 - that this input has a name number guess
479:23 - we'll need access to that specific name
479:26 - so let's go back to our main.py
479:29 - and I'm going to go ahead and say get me
479:33 - that number guess so that's it'll
479:35 - extract the value of whatever was inside
479:38 - and it'll put that here once you click
479:40 - this button check me okay and let's just
479:43 - try printing this and see if it does
479:45 - anything so I'll restart the server
479:48 - and let's see what happens so right now
479:51 - I actually got an error and the reason
479:53 - why I got this error that says bad
479:54 - request is because
479:57 - I did not
479:59 - run this like it's it's asking for a
480:03 - form that doesn't really exist right now
480:05 - okay so for example if I ran this
480:07 - without it let's see what happens
480:11 - our app runs
480:13 - okay and if you look at our form or form
480:16 - right now if I hide myself here
480:20 - right if we look at our form our form
480:23 - here is pretty much empty right so if I
480:26 - look at my form you can see
480:30 - empty okay now let's say I put 23
480:35 - okay and then we run you can see I have
480:39 - this form here and it says 23 inside of
480:41 - it now
480:42 - okay so if you think of a form it's
480:44 - really just a dictionary in Python and
480:47 - it has the key number and then that key
480:49 - has a value guess
480:51 - okay so it's it's really just a
480:52 - dictionary it doesn't look like a
480:54 - dictionary it kind of looks weird but it
480:56 - it that's all it is it's just a
480:58 - dictionary okay that's all you need to
481:00 - remember about this
481:02 - so
481:04 - um what I need to do is I only need to
481:07 - get
481:08 - the data when there is a number guess
481:10 - because if I restart the app in the
481:13 - start there is no number guess right
481:16 - there's no number that has been guessed
481:17 - at that point
481:19 - so we could do it in a few ways we could
481:22 - assign that number to be Zero from the
481:25 - start or the way that I really like to
481:27 - do it is we could do and check if the
481:29 - request method is post if it is a post
481:32 - request
481:33 - then we will extract the information
481:37 - from the form
481:39 - and we will extract this piece of
481:41 - information
481:43 - we'll say
481:45 - number
481:47 - guess
481:49 - okay and then we will move this you
481:52 - click me button inside of there as well
481:53 - because right now the problem like if we
481:55 - run this the problem with the you click
481:57 - you check me button is it will run on
482:00 - every page refresh so even if I just
482:03 - refresh here it runs if I refresh again
482:06 - it runs if I refresh again
482:09 - you click check me button runs
482:12 - so I don't want that to be
482:15 - being printed every single time right so
482:17 - I'm going to go ahead cut it and put
482:20 - that inside of this if statement so it
482:22 - only detects it and runs this once it is
482:25 - a post request so let's go ahead and hit
482:28 - command enter
482:30 - and now you'll see it doesn't say you
482:33 - click check me button anywhere and I can
482:35 - keep refreshing this page and again I'll
482:38 - refresh it and again I'll refresh it so
482:40 - you can see I refreshed it like multiple
482:42 - times but it didn't say you click check
482:44 - me button which is exactly what we want
482:47 - now say I put the number 23 here and I
482:50 - hit check me now it says you click check
482:53 - me button and it pulled a value out of
482:56 - the form and gave us 23. very good so
483:00 - now we can actually get access to guess
483:03 - this is the guess that the user is
483:05 - guessing Okay
483:08 - um and we can detect that the click
483:10 - happen so it's very good I don't need
483:11 - this print statement anymore and let's
483:14 - just go ahead and see what the type of
483:17 - guess is so if I run this here's one
483:21 - interesting thing you'll see even though
483:23 - we're putting in a number
483:24 - guess will actually be of type string
483:28 - because whenever we're taking it user
483:30 - input by default it's actually type
483:33 - string so what we want to do is we want
483:35 - to actually type use a special built-in
483:37 - function in Python and type cast this to
483:40 - an integer so we want to go ahead here
483:43 - and go ahead and do int
483:47 - um and we can actually put that here
483:48 - right there so now we know that if I
483:52 - print
483:53 - type
483:54 - yes and we run this it will be an
483:57 - integer because it will convert it into
483:59 - an integer so let's say 23 let's say
484:01 - check me
484:02 - okay and you can see it says class
484:04 - integer
484:05 - okay so now we have essentially forced
484:08 - it to become an integer okay so that's
484:10 - that's good so we're able to get the
484:14 - user input now what we're ready to do is
484:17 - we're actually just ready to write
484:18 - python logic because we're getting a
484:20 - number
484:21 - and at that point we know what to do
484:24 - right we know what to do so let's go
484:25 - ahead
484:27 - um and we at that point we just know we
484:29 - can write like regular looking python
484:31 - okay so let's go ahead and write a
484:33 - python function so I'll call this
484:35 - function define check number show
484:37 - message
484:38 - and here's what this function will do
484:41 - okay uh
484:43 - it will
484:46 - it will take in
484:50 - um the guess uh the computer number
484:55 - okay or let's just say the guess number
484:58 - the one that the human guess
485:00 - and
485:02 - the computer number so meaning this is a
485:05 - compute this is the number that the
485:07 - computer will pick automatically
485:09 - so I'll take in two different
485:13 - uh pieces of information okay it'll
485:15 - depend on those two arguments they'll
485:17 - have like two arguments in other words
485:19 - okay
485:20 - and it will either return instead of
485:24 - returning true or false here's what
485:25 - it'll do okay so imagine I called let's
485:27 - say I call this function check show
485:29 - number and I gave it some the value of
485:33 - let's say for the guest number I said
485:36 - the human guest
485:38 - five and the computer
485:41 - number guest
485:44 - uh
485:45 - 50.
485:47 - okay so if that was the case would this
485:51 - function check number should do is it
485:53 - should return the following message it
485:55 - should say
485:56 - you know so let me ask you this right is
485:58 - this number lower than the guess of the
486:00 - computer
486:02 - yes it is right so since it's lower
486:05 - because 5 is less than 50 right so this
486:08 - is slower it should print a message that
486:11 - says
486:12 - 5 is too low
486:16 - okay
486:17 - here is and it should be a string
486:21 - okay
486:22 - I'll put it in double quotes just to
486:25 - emphasize that it's a string
486:28 - okay uh if you guess 75 here but the
486:31 - computer number was 50 well then it
486:34 - should say what it should say 75 is too
486:38 - high
486:39 - right and what if you guessed
486:42 - 50.
486:43 - well then in that case it should say 70
486:46 - uh it should say 50 is correct
486:50 - so that's what this function needs to be
486:52 - able to do either says the guest number
486:56 - is too low or the guess number is too
486:57 - high or the guess number is correct
486:59 - that's the job of this entire function
487:01 - okay so see right now with this
487:04 - information okay one last piece of
487:06 - information you'll need is how to
487:08 - actually generate a random number from a
487:10 - computer okay so that's going to be
487:12 - something important but for now you
487:14 - could just hard code
487:15 - a computer number and you should be fine
487:18 - okay so before we even we'll make a note
487:21 - Generate random number we'll do that
487:25 - later but for now even if we don't do
487:26 - that you should be able to write this
487:28 - function and if I give that function you
487:30 - know 550 it should give me five is too
487:33 - low if I give it 75.50 it should say 75
487:35 - is too high if I give it 50 50 it says
487:38 - 50 is correct okay so take five seconds
487:41 - to pause the video and give that a try
487:42 - yourself five four three two one
487:48 - all right welcome back let's try to do
487:52 - this together now okay so I know that it
487:57 - takes in two parameters so I'm gonna two
487:59 - arguments I'm gonna go ahead and say
488:01 - computer
488:02 - uh or a second guest
488:06 - guess
488:08 - um
488:09 - guest number
488:11 - and then we'll say computer number so
488:13 - those are my arguments that I'll take
488:15 - okay and then the definition of function
488:18 - is going to be pretty simple it's going
488:20 - to say hey
488:22 - if guess number is greater or this case
488:26 - scenario let's do this first case
488:28 - scenario lower right if it's lower than
488:30 - computer number
488:33 - well then what I want to do is I want to
488:35 - return
488:37 - right and I want to go ahead and say
488:41 - return
488:43 - uh guest
488:45 - number
488:48 - and let's put that F outside the string
488:52 - guest number is too low
488:56 - okay
488:57 - and then what I want to do is I'll paste
489:00 - that and I'll say if the guest number is
489:01 - higher than the computer number then I
489:03 - want to say guess is too high and then l
489:07 - so we can we can make this an else if so
489:09 - let's do an L if
489:11 - okay and then else
489:14 - we could say it's correct because that's
489:18 - the only other choice left so we're
489:21 - going to go ahead and say
489:23 - guest number
489:26 - is correct okay just like that
489:30 - so those are the functions that we you
489:32 - know this is essentially what check
489:34 - number show message should do right it
489:36 - should check the number
489:38 - see if it's correct or not and then it
489:39 - should show and return this message you
489:43 - know one of these messages right here
489:44 - now let's try this function in our
489:46 - command line so I'm going to pop that up
489:48 - right here
489:50 - and go like this like that and let's go
489:54 - ahead and do it so from
489:56 - main import check number
490:00 - let's see if it allows us to do it
490:04 - check number show message
490:08 - okay wow that was interesting it didn't
490:10 - allow us to do it so I'll restart the
490:12 - server and let's try it again
490:16 - let's try it one more time restart the
490:19 - server python
490:22 - from Main import
490:24 - interesting
490:28 - does that want me to kill this server
490:31 - I don't think so right
490:35 - now that's fine it's just saying it's in
490:37 - use so let's do it the regular way let's
490:40 - just go ahead and go
490:42 - and try print
490:44 - and we'll do check number show message
490:48 - here and we will say
490:51 - check number show message and I will
490:56 - give it the guests of five and the
490:59 - computer guess will be 50. okay so this
491:01 - will be like the first example that we
491:04 - have here
491:05 - all right let's go ahead and run this
491:09 - and let's see what happens
491:13 - and you can see that the function ran
491:15 - and now it says 5 is too low
491:19 - okay let's go ahead and give it
491:24 - 75 and the computers is 50.
491:27 - let's go ahead and hit command enter so
491:30 - we run our app again so it runs that it
491:31 - says 75 is too high
491:33 - and then let's go ahead and try 50 50
491:36 - should be correct
491:38 - and you can see it says 50 is correct
491:42 - so now we know that our function is
491:45 - working perfectly
491:47 - that is exactly what we're looking for
491:51 - right and now all we want to do is make
491:54 - sure that when we call this check number
491:55 - we already have the information of what
491:58 - the user typed in so let's call this
492:00 - function right over here now okay so I'm
492:02 - going to go ahead and say
492:05 - check number show message
492:09 - okay check number
492:12 - or it's really
492:15 - um
492:16 - check number message because it doesn't
492:18 - show we have to show but it's check
492:21 - number message so that's fine so we're
492:23 - going to call this function check number
492:24 - show message and we'll give it our guess
492:27 - and we also need to give it our computer
492:30 - guess so let's just comment this out for
492:31 - a second right now if in if we're in
492:34 - Python and I'm going to go ahead and
492:36 - just type in Python right here how do
492:39 - you create a random number well you got
492:42 - to do you gotta get
492:44 - uh random choice and what I like to do
492:48 - is
492:49 - let's say I have an array of five items
492:52 - if I call this function choice on that
492:55 - let's call this function let's put
492:56 - parentheses at the start let's put
492:58 - parentheses on the end make sure you're
493:00 - in Shell if you want to run python here
493:02 - and now every single time I call Choice
493:05 - right you could see that it's picking a
493:07 - random number
493:09 - and it's doing that by itself it's
493:10 - picking a random number between one and
493:12 - five
493:13 - so that's how it works but now I need to
493:16 - give it a big list of a hundred because
493:19 - I need to pick up between 1 and 100 all
493:22 - right so I need to give it a list that
493:24 - starts from one and goes all the way to
493:27 - 100 like I need to give it a list like
493:29 - that so I'm not going to manually create
493:31 - a massive list I don't also want to
493:34 - write a for Loop so in Python there's
493:36 - something really nice it's called range
493:37 - and what range really does is if you
493:40 - give range let's say we give range 2 and
493:42 - we call the function list on it it'll
493:44 - create a list with two numbers if I give
493:48 - range 5 it'll create a list with five
493:51 - numbers if I give lists uh if I give
493:53 - range 10 I'll create a list with 10
493:56 - numbers okay and here's another nice
493:59 - thing about range you could give it a
494:00 - start and a stop so in other words I
494:03 - could say start at one because I don't
494:05 - want to start at zero because we don't
494:07 - want to pick a number zero we want to
494:09 - pick between 1 and 100 so we're not not
494:13 - going to pick a zero for this game okay
494:15 - so we're gonna go ahead here and it ends
494:19 - here but usually in coding it's up to
494:22 - but not including so it's inclusive of
494:24 - the first number but exclusive with the
494:26 - second I don't know why they do that
494:27 - they shouldn't do that it's stupid
494:30 - um but whatever that is the case so this
494:33 - basically means you get a list from 1 to
494:34 - 100 okay so there we go you have this
494:37 - list from one to one hundred so how we
494:40 - could do this is if we want to create a
494:42 - random number okay or we want to make
494:44 - something like computer number
494:47 - we could just go ahead and called uh
494:49 - called choice
494:51 - on Range
494:53 - one comma 101
494:56 - right and now if we print out computer
494:58 - number and hit enter right it will
495:01 - it will do that so if I just keep
495:02 - running this right here choice between
495:05 - that every time I call this it will get
495:08 - me a random number right because that's
495:10 - effectively what's happening under under
495:12 - the hood
495:13 - okay so this piece of code will get me a
495:17 - random number so I'm going to copy this
495:19 - go back to our code
495:21 - and we're gonna go and create computer
495:24 - numbers here so I'll say computer number
495:28 - and we'll set choice and from random
495:32 - import Choice okay because we want uh
495:37 - the choice to be coming from
495:40 - uh we want to import it okay so we can
495:42 - have access to it
495:44 - all right so now that I have access to
495:47 - the computer number and I have access to
495:49 - the user number right so this is a
495:51 - computer number here's the user number
495:53 - now I need to call my check number show
495:56 - number message function and pop both of
495:59 - these in there okay so we're going to go
496:01 - ahead and say guess
496:04 - and then we're going to put in the
496:06 - computer number right here okay so we're
496:08 - going to call check show number with the
496:09 - guess and then the computer number and
496:12 - um since it returns information we want
496:15 - to do something with that right so this
496:17 - is going to be our
496:19 - message and let's go ahead and try to
496:22 - print that message
496:24 - out so I'll say print message
496:28 - so we should be able to see stuff
496:30 - happening inside
496:32 - uh here okay so let's go ahead and put
496:35 - in 50. so like right now the computer
496:38 - has picked the number and to show that
496:40 - to you is like we can we can write a
496:43 - statement here a computer
496:45 - picked and uh we'll just put computer
496:49 - number in here okay and the future we'll
496:52 - remove this because we don't want to be
496:53 - able to see the computer's number
496:57 - okay so let's go ahead and pick 50 now
496:59 - or let's go ahead and run the server hit
497:02 - command enter otherwise your changes
497:04 - won't show up and if I go to the console
497:07 - here
497:08 - we look
497:09 - uh okay so it says computer has picked
497:13 - and let's stop our function from running
497:15 - from here so I'll I'll do this let's hit
497:17 - command enter one more time okay so you
497:20 - could see it says computer pick 97. now
497:22 - obviously if I pick 97 message will say
497:26 - it's correct so let's pick 50 First and
497:28 - let's hit check me
497:30 - right it says 50 is too low great let's
497:33 - pick
497:34 - um 75 okay it says 75 is too low let's
497:38 - pick
497:39 - uh 90. let's say check me it says 90 is
497:43 - too low as well let's go ahead 95 it
497:48 - says 95 is too low and let's go ahead
497:50 - and pick 97 and now it says 97 is
497:54 - correct so there you go
497:56 - okay so that was one easy way for us to
498:00 - get the computer number and then
498:03 - um our routes and everybody kind of have
498:05 - has access to that computer number
498:07 - everywhere else okay so uh that's that's
498:11 - one way we could do it and then run this
498:13 - function Okay computer Choice and then
498:15 - boom we just keep guessing now what we
498:18 - want to do is we want to make sure that
498:20 - this guess that we did
498:22 - is showing up so we want to be able to
498:25 - see a history of guesses as well so for
498:27 - example if I type in 50 here
498:29 - right I see a history of guesses
498:32 - that'll show oh actually this is the r
498:34 - version so let's go ahead to the
498:36 - solution version and in here if I go 50
498:39 - and we hit check me you'll see it says
498:42 - 50 is too high let's go ahead and do 75
498:44 - it says 75 is too high let's go ahead 25
498:47 - 25 is too low
498:50 - right so this history of guesses we want
498:53 - to go ahead and make that now okay so
498:57 - how do we do that well think about it
499:00 - like this every time the user types in
499:02 - something we essentially have access to
499:04 - it right so we need to just append
499:07 - whatever the user adds to that list so
499:09 - imagine we had an empty list like this
499:11 - of uh let's call it guesses
499:15 - if we had an empty list of guesses well
499:17 - what hap what would happen in that case
499:22 - what would happen is every single time
499:24 - the user makes a guess well we just pop
499:26 - in that guess right here right so
499:28 - couldn't we just do that so let's go
499:29 - ahead and do
499:30 - just that so I'm going to go ahead and
499:31 - say guess it's not append
499:33 - and we'll just pop in that guess and
499:36 - every single time we pop that in we just
499:39 - print out the guesses list okay so let's
499:43 - go ahead and take a look at this now so
499:46 - I'm gonna
499:47 - run this let's hit command enter now
499:50 - we're getting to the really interesting
499:52 - parts of the app so let's say check me
499:53 - now you can see that there's a list with
499:55 - 23 in it let's go ahead and put 24. now
499:58 - you can see a list that has 23 and 24.
500:01 - let's go ahead and do 100 check me and
500:05 - now you can see it says 100
500:08 - right
500:10 - um so we could see that now what we want
500:12 - to do is we want to pass it not just the
500:16 - guess but we want to pass at the actual
500:19 - message so we want to pass it
500:22 - um you know we want to pass it not just
500:26 - 23 but we wanted to pass we wanted to
500:28 - have the information if it's too high as
500:30 - well okay so how could we instead of
500:34 - appending the guess number we could just
500:35 - append the guest message in that case so
500:38 - let's go ahead and move it here and
500:40 - we'll say guess dot a pen message okay
500:43 - instead of just appending guesses
500:47 - so now if we run this
500:52 - okay let's go ahead and do 23
500:55 - let's go ahead and do 25
500:57 - let's go ahead and do
501:00 - oh we need to show this too so we need
501:02 - to do print guesses because we're not
501:03 - showing this let's rerun our server by
501:05 - hitting command enter or stopping and
501:08 - starting our server right there let's go
501:10 - ahead and do 23. let's go ahead and do
501:12 - 50. let's go ahead do 75 and now you can
501:16 - see this list that is becoming longer
501:19 - and longer and it says 23 is too high 50
501:21 - is too high 75 is too high now let's go
501:24 - ahead and do
501:25 - um
501:27 - 15. let's go ahead and do 10
501:30 - and it makes sense right because what
501:32 - did the computer guess
501:36 - um
501:37 - I don't see what the computer guessed
501:40 - computer picked four so let's go ahead
501:42 - and pick four and now you can see it
501:44 - says correct and you could see in our
501:47 - history we also have correct
501:50 - okay so it seems like we're able to
501:53 - actually get the number of guesses now
501:55 - what we want to do is we want to pass
501:57 - the guesses that we're getting and we
502:00 - want to pass this information
502:02 - back to our
502:05 - we want to pass this information back to
502:07 - our front end okay back to our front end
502:10 - meaning like we want to actually show
502:12 - this information show up here so there's
502:14 - just going to be a little bit of kind of
502:16 - like front end part we're going to do
502:17 - but it's still not HTML related it's
502:19 - still python related okay so what we
502:22 - want to do here is in render a template
502:24 - we need to give it the guesses
502:28 - okay so I'm going to say guesses is
502:30 - equal to guesses okay so now our front
502:33 - end our index.html will have access to
502:35 - this variable called guesses okay so
502:38 - let's go ahead here
502:40 - um and look and if you keep scrolling
502:42 - down you'll see this div here and it'll
502:44 - have this comment inside of it that says
502:46 - insert guesses here so that's already
502:48 - telling us where to do this exactly okay
502:50 - so I'm gonna now basically just say
502:54 - let's say I do double squiggly and I
502:57 - just say guesses okay let's restart our
502:59 - server let's hit command enter
503:01 - and let's go ahead and do 23
503:03 - and you could see that that 23 is too
503:06 - low is actually showing up on our screen
503:09 - right let's go ahead um let's open it up
503:11 - here as well so we could see it more
503:13 - clearly
503:14 - see uh we'll say 26 check me
503:18 - a hundred check me so it's actually
503:21 - already showing up and and looking
503:24 - pretty good actually you know like not
503:27 - looking the best but it's showing up
503:29 - because we're passing a list back so
503:32 - it's literally just spitting out that
503:33 - list right now so what we want to do is
503:36 - we want to Loop through that list so
503:38 - what I could say is I could say hey turn
503:40 - this into a for Loop okay so put only
503:42 - once quickly with percent signs opening
503:45 - and closing it and we're going to say
503:46 - four guests in guesses
503:49 - I just want you to give me the guess
503:52 - okay and then we'll close this out with
503:54 - N4
503:56 - so it ends the for Loop let's hit enter
503:58 - and run and check this so if I hit
504:01 - um
504:02 - now let's go to our app
504:05 - 100 is too high 50 check 50 is too low
504:10 - 30 check so now you can see it's
504:13 - actually showing up as
504:15 - you know as one big giant string so
504:19 - let's see if we could do something
504:20 - further if we want to make this even
504:22 - better well we could can't we just put
504:25 - it in P tags would be my question is
504:27 - that possible could we do this
504:29 - so let's give that a try and let's see
504:32 - if putting it in P tags will get it to
504:35 - do
504:35 - [Music]
504:36 - um we'll get it to do what we want it to
504:39 - do all right so after adding the P tags
504:41 - if I refresh this app here you could see
504:45 - that now it just breaks it up into new
504:48 - lines okay so you could wrap this inside
504:51 - of P tags just like this and now every
504:54 - single time you type it in it should
504:55 - break it up into different lines now
504:57 - watch this this div if we actually give
505:00 - it a class because we've created The
505:02 - Styling for you so if you actually go to
505:03 - static
505:05 - um
505:06 - the Styles and I scroll all the way down
505:09 - to
505:10 - red green and yellow we've created The
505:14 - Styling for you where if you actually
505:16 - give it the class of guess and then you
505:19 - give it a class of red green or yellow
505:21 - it will automatically highlight it the
505:24 - right way so I'll just show you what
505:25 - that means let's go to our HTML and
505:28 - let's just go and say guess red like
505:31 - this so if I give it a guess red like
505:33 - this okay watch what's going to happen
505:36 - here
505:37 - uh let's go ahead and say let's restart
505:40 - the server so we hit command enter right
505:42 - now and you could see if I give a 35 you
505:45 - could see it's in Red so let's run this
505:47 - again okay 50
505:49 - okay 100
505:52 - all right now with our styling we don't
505:55 - need these P tags even actually we can
505:57 - get rid of these uh P tags so let's
506:00 - get rid of them
506:02 - okay and what we're going to do is we're
506:05 - going to wrap just our guess inside of
506:08 - the div
506:09 - okay so let's go ahead and do that now
506:12 - let's just add
506:13 - this inside of the div and then we'll do
506:16 - the loop outside of this
506:18 - and then we'll have a div here
506:21 - uh class guesses container so hopefully
506:24 - by the time you're watching this this
506:25 - should already be kind of there for you
506:28 - and you shouldn't have to do it yourself
506:30 - but right now we we do have to do it
506:33 - ourselves that's fine let's just go
506:35 - ahead here and paste this
506:37 - okay and then boom
506:40 - oops let's go ahead
506:43 - like that
506:45 - okay just like that
506:47 - cool
506:49 - so I have a div here that guesses
506:52 - container and then inside of that I'm
506:55 - doing my Loop okay and then every single
506:58 - time I loop I create a new div with the
507:00 - guess
507:01 - in between so this is really what it's
507:03 - looking like all right
507:05 - um and then yeah that's that should be
507:08 - good now let's go ahead and let's go
507:11 - ahead and hit enter and then we're gonna
507:13 - go and style this so let's go to our app
507:16 - now let's refresh and let's take a look
507:18 - and see if it got any better and boom it
507:20 - got way better right let's hit 50 50 is
507:23 - too high 80 and even when you hit enter
507:26 - it automatically Works 100 100 is too
507:29 - high so now let's go back no matter what
507:32 - number you give it it's going to sit too
507:33 - high for example even if you give it
507:35 - zero or you give it like negative 55
507:37 - it's always going to say too high so
507:40 - that is also not the experience that we
507:43 - want we need it to have different things
507:46 - um
507:47 - I'm sorry it's not going to say too high
507:49 - that's not what I meant to say it's
507:50 - going to color it red is what I meant to
507:52 - say Red's going to keep coloring
507:53 - everything red because we have
507:54 - hard-coded red here so instead of hard
507:57 - coding right here we want to add some
507:58 - logic here so that's a really cool part
508:01 - and what I want to say is if the guess
508:03 - is too high then I want to go ahead and
508:06 - get a red if the guess is low then I
508:09 - want to go ahead and get something else
508:11 - so we can go ahead and write
508:14 - um a conditional here okay inside of
508:17 - this string and I can actually say if hi
508:21 - the word hi is in guess
508:23 - uh let's put a double quotes around this
508:27 - double quotes like this we can say if
508:29 - high in gas if that is true then I want
508:33 - to say red okay so let's see if this
508:36 - works so basically what it will do is if
508:39 - it's ever true it'll evaluate it to true
508:41 - and it'll just say red
508:42 - it'll like replace this whole thing and
508:45 - it'll just say red like that
508:47 - um and then we need to obviously end our
508:49 - if so let's go ahead and say end if and
508:53 - let's close it
508:54 - okay let's run this and uh let's hit
508:57 - command enter to run this okay I'll say
509:00 - 23.
509:01 - so since it's too low you can see it's
509:03 - not styled but let's pick 100 and it's
509:05 - too high and now you can see that it's
509:07 - actually red so this is working
509:09 - correctly it is correctly detecting if
509:12 - the word hi is in your guess based on
509:15 - that I'll conditionally render it just
509:17 - make sure that you have a lowercase high
509:19 - in your function uh this function over
509:23 - here so you have a lowercase High and a
509:26 - lowercase low or lowercase okay
509:28 - otherwise
509:29 - it won't really work
509:33 - um so if is if that's in guests then
509:35 - you're good red now we're just going to
509:37 - add these conditionals multiple times so
509:39 - there's a first if then we're gonna go
509:42 - ahead and write another else if so this
509:44 - is the second one is going to be an else
509:46 - if
509:47 - low in guess
509:50 - then it's going to render out yellow
509:53 - okay and then last but not least we're
509:56 - gonna go ahead and say green if none of
509:59 - those conditions are true and so I can
510:02 - actually just write green right here
510:05 - okay
510:06 - so if I said guess yellow or gas green
510:09 - or guess red it'll style it accordingly
510:11 - so now let's restart our server
510:15 - uh we're getting an error because we're
510:17 - not ending our ifs correctly so let's
510:20 - take
510:21 - uh let's take this here and we can put
510:25 - that outside
510:27 - just like this and then let's wrap one
510:30 - more else if so we can actually say else
510:32 - if we can say correct
510:35 - and gas then give a screen
510:38 - otherwise and if so there we go now
510:41 - let's go ahead and hit
510:43 - wait what's the error happening now so
510:46 - if highs and guess
510:49 - um I don't need to end if here because
510:51 - I'm ending prematurely so let's stop
510:53 - that from happening
510:55 - okay so if high is in guess then give me
510:57 - a red if low is in gas then yellow else
511:00 - if correct is in guessed in green
511:01 - otherwise just end if so let's hit
511:04 - command enter restart the server Let's
511:06 - Go 23 let's go 100 so now this is yellow
511:11 - this is red perfect let's find the
511:13 - correct number
511:15 - 75 is too high let's go 60 is too high
511:21 - let's go 55 it's too high let's go 40.
511:26 - it's too low let's go 50.
511:30 - it's too low let's go 53. scroll down
511:34 - and it says 53 is correct okay but now
511:37 - there's another annoying thing so that's
511:39 - really good styling is working perfectly
511:41 - but there's another annoying thing
511:42 - that's kind of annoying me right now I
511:43 - have to keep scrolling down from my most
511:45 - recent guess and that's a that's a bad
511:49 - experience right because I think what
511:50 - should be actually happening is I should
511:52 - have did not do that like I should just
511:54 - automatically pop up so like if I go to
511:57 - the solution version and I type in a
511:58 - guess like 55 or let's say 100 let's go
512:02 - 100 and I run this you could see that
512:05 - that pops up at the top so that's what I
512:08 - want to be happening I want it I want
512:09 - all of my guesses to pop up to the top
512:12 - well how we can do that is keep in mind
512:15 - that this is a list here this over here
512:18 - is a list so let's say I take this list
512:21 - and let's just open up python for a
512:22 - second and I'll go
512:27 - um actually let's just zoom in like a
512:29 - hell a lot so you could just see this
512:31 - like super clearly
512:32 - because I know it's super annoying to
512:34 - like constantly have to look at this in
512:36 - like such a tiny screen
512:38 - I'll just move this here for now
512:40 - okay so I'll paste that list and we'll
512:42 - just say messages or guesses
512:45 - and I'll pay sellers right so I have
512:47 - guesses here now this is the order that
512:50 - it's in but I want to see this one first
512:53 - all I got to do is I gotta just reverse
512:55 - the order of this list if I do reversed
512:59 - guesses that alone reverses the guesses
513:02 - now you can't see it because it puts it
513:05 - in this reverse list iterator object so
513:08 - you can still Loop through it but you
513:10 - can't see it okay if you want to see it
513:12 - you can just wrap it in a list so it'll
513:14 - convert it back to a regular list object
513:16 - okay so make sure when you do this
513:18 - listing make sure to put right close all
513:21 - of the parentheses and you could see
513:23 - that it has reversed its order which is
513:25 - amazing that's exactly what we're
513:27 - looking for so if you want to do that
513:29 - well then all you got to do is if you
513:32 - wanna so you could you could do this
513:33 - right like if if I did it like this now
513:36 - this will give you this list object but
513:38 - if you're looping through this it's not
513:40 - a problem so for example let's say four
513:43 - guess in reversed guesses and I go ahead
513:46 - and I say print guess
513:49 - you could see it Loops through it no
513:51 - problem and then it returns you this
513:53 - result so let's go back to our app and
513:56 - now what I want to do here is I want to
513:59 - return our guesses but I don't want to
514:02 - just return regular guesses what do I
514:04 - want to do to them what order do I want
514:06 - them in that's right I want them as
514:08 - reversed guesses
514:10 - okay I want to reverse them so let's go
514:12 - ahead and do reversed guesses
514:15 - that's what we're going to be sending
514:17 - back to our front end okay so once our
514:19 - front end gets these as reversed it
514:22 - automatically is just going to Loop
514:23 - through and it'll be good okay so we're
514:24 - just sending it reverse from here so
514:27 - let's go ahead and restart and give this
514:31 - a try
514:32 - so I'm going to say
514:35 - 50. so oh geez 50 is correct wow guessed
514:40 - it right on the first try huh 75 is too
514:42 - high
514:43 - let's go 90
514:45 - that's so rare there was a one out of a
514:47 - hundred chance for me to get that that
514:49 - is so rare I got that on camera that is
514:53 - insane
514:55 - um
514:56 - yes such a low chance man jeez
514:59 - so 0.0
515:02 - one percent right
515:05 - one divided by 100 yeah 0.01
515:08 - [Music]
515:10 - um I mean one percent chance why am I
515:12 - being such an idiot the one percent
515:13 - chance it's a one out of 100. anyways
515:16 - 95 is too high all of my most recent
515:21 - numbers are showing up at the top
515:24 - okay 34 is too low so that's exactly
515:27 - what I was looking for right I wanted
515:28 - them to show up at the top so this
515:30 - reverse trick does exactly that now the
515:33 - last thing I want to do is reset so when
515:35 - I hit restart well it shouldn't actually
515:37 - bring me to a different page it should
515:39 - still bring me to the same exact page so
515:42 - let's attempt that first okay so if I
515:46 - hit restart
515:48 - let's not give it guesses right now
515:50 - let's just do it like this
515:52 - and let's say I go here restart my
515:54 - server and I type in a few guesses like
515:57 - check me and then I hit restart
516:01 - boom right it just restarts
516:04 - and then
516:06 - we get going again okay 50
516:10 - check me
516:11 - right however the problem that's
516:13 - happening is like for some reason all of
516:15 - my guesses are coming back so let's say
516:17 - like I guessed about multiple stuff
516:19 - right so I guess 30 50 35 but now when I
516:22 - hit restart it goes away invisible for a
516:25 - second but then when I hit this again
516:26 - all of my guesses come back that's not
516:28 - what I want that's that's pretty weird I
516:31 - want it to truly restart and I wanted to
516:33 - truly like guess a new number for the
516:36 - computer so one thing I know for a fact
516:37 - is I need to re-guess the computer
516:40 - number so we're gonna go here and we're
516:42 - going to say computer number
516:45 - um is now like re like changed basically
516:50 - okay so now the computer number is
516:51 - picked again once the reset happens the
516:54 - other thing that I want to do
516:56 - is I need to set guesses to empty again
516:59 - okay so guesses will be an empty list
517:01 - again
517:02 - and then I call this
517:06 - function okay
517:08 - and if you ever wonder why do we never
517:10 - pass computer number to our front end is
517:12 - because we never want to show it it's
517:13 - only for our back end to know not our
517:16 - front end okay so our python app needs
517:18 - to know about it but our HTML JavaScript
517:20 - CSS like all the stuff you're seeing
517:22 - visually here doesn't because we don't
517:24 - want to reveal what the computer Choice
517:25 - was so this will reset it effectively
517:29 - and then we'll just send that list back
517:31 - and now we don't even need to really
517:33 - reverse this because it's an empty list
517:34 - right so why does it matter if you
517:37 - reverse this or not
517:39 - and now let's hit restart our server and
517:42 - let's give this a try so I will say 35
517:44 - hit check me it shows up I hit 90.
517:47 - hopefully it'll be red it'll show up and
517:49 - now let's hit restart
517:52 - and now everything is gone let's hit 50.
517:56 - let's see if it's computer picked a new
517:58 - number okay let's hit 50 again
518:01 - check me
518:03 - ah interesting it brings it all back it
518:07 - brings all of it back so let's go
518:10 - let's see if it's a problem that we're
518:12 - only having on replit like AKA iframe
518:15 - problem let's take a look at our version
518:18 - of the app or deployed version of the
518:21 - app here our instructor flask guess the
518:23 - number right and what's super cool is
518:24 - this app is deployed so you could
518:26 - actually just link it to anybody and
518:27 - even if they are Incognito or wherever
518:29 - they could just open and start playing
518:31 - with your python app so that is a really
518:33 - really cool thing that I do want to give
518:35 - a huge shout out to for ruplet because
518:37 - that is that is awesome like not you not
518:41 - even worrying about deployment and
518:42 - things already being deployed that is
518:44 - crazy so let's go ahead and hit 50 here
518:47 - and also check me and I'll hit 90 and
518:49 - we'll say check me and then I'm gonna
518:51 - hit restart
518:53 - okay and now everything is empty let's
518:55 - go ahead and hit 50 again okay and it
518:58 - brings it all back so now this is a
519:00 - problem that we gotta solve because
519:02 - that's really annoying why is that
519:03 - happening so the way that we can
519:06 - actually overcome this weird problem
519:08 - we're having the way to overcome this is
519:11 - you know really what's Happening Here is
519:14 - I have these local variables like
519:17 - computer number and guesses and computer
519:19 - number of guesses and these variables
519:20 - are getting confused and lost in here
519:22 - because the same stuff that this has
519:24 - access to this route Index this stuff
519:28 - reset route doesn't have access to that
519:30 - and so then that information is getting
519:33 - Lost in Translation okay between these
519:36 - two routes so what I want to do is I
519:37 - kind of want to create like a global
519:39 - variable that everybody has access to
519:41 - AKA like a database variable that
519:43 - everybody has access to so let's do it
519:45 - that way okay
519:48 - so what we're going to say is we're
519:49 - going to say from replit import
519:52 - DB okay
519:54 - and then I'm just going to initialize
519:55 - certain keys so for example one key I'm
519:58 - going to need is guesses
520:00 - and then the second key I'm going to
520:02 - need is computer number so I'm going to
520:04 - store that inside of our database so our
520:08 - app knows about it the entire time okay
520:10 - if you're thinking about a database it's
520:11 - really just this
520:13 - like I'm gonna have guesses and it's
520:15 - going to be stored as your like stored
520:18 - as a list okay there's gonna be a list
520:20 - of moves so or list of guesses so seven
520:23 - is too high for example
520:25 - okay and then you know let's say
520:29 - five is correct
520:31 - okay
520:34 - um
520:35 - so let's go ahead here this is just to
520:37 - show you what this will look like and
520:40 - then we'll have another key and that key
520:42 - will be computer number and that'll just
520:43 - be whatever the computer I guess is
520:45 - right so this will just be like
520:47 - 57 whatever the computer has guessed
520:49 - here okay so that's what the DB will
520:53 - look like it'll just be a dictionary
520:55 - with like some data in it okay that's
520:57 - all I want you to understand about it
520:59 - but this is a database we're getting
521:01 - from replit and it works out of the box
521:03 - really easy to use okay so we're gonna
521:05 - have two keys in that database one is
521:07 - going to be guesses one is going to be
521:08 - computer numbers we're going to
521:09 - initialize it and I'm going to say
521:10 - because if I try to append to guess this
521:13 - but guess this doesn't exist as a key
521:15 - inside of this dictionary like if I try
521:16 - to pen to guesses but let's say guesses
521:18 - doesn't exist
521:19 - and I do DB bracket guesses dot append
521:23 - it's going to give an error it's going
521:25 - to say hey that key does not exist so
521:27 - what we need to do
521:29 - is
521:31 - um
521:32 - I'll just initialize all of this I'll
521:34 - save guesses
521:36 - not in
521:38 - DB so it'll check if this key exists in
521:41 - the database if it doesn't then I want
521:44 - you to initialize that key so we're
521:46 - going to say guesses
521:48 - equals this okay and then we're gonna do
521:52 - do the same thing for computer number if
521:54 - that doesn't exist then we're just going
521:56 - to say computer
521:58 - uh DB computer number is equal to
522:04 - uh this random choice
522:07 - so yeah so it's like whenever the game
522:10 - starts or it's initialized it should
522:12 - just be a random choice that the
522:14 - computer picks
522:15 - and that's what should be inside of the
522:17 - database
522:19 - and problem is solved okay so I'll
522:21 - remove this I'll remove this DB stuff
522:23 - here because that's what it is and then
522:25 - I'll remove our guesses and I'll remove
522:29 - our computer number this statement over
522:31 - here because we don't need access to any
522:33 - of these anymore
522:35 - okay what I do need access to is
522:37 - computer this database variable here
522:40 - okay so now when we call this function
522:43 - message I need to give it the computer
522:45 - number from the database
522:47 - okay and now when we need to append I
522:50 - I'm not I can't just append to guesses
522:52 - because that doesn't exist anymore I
522:54 - need to append to DB guesses okay
522:59 - so there we go and now when we need to
523:01 - clear stuff out I just go directly to
523:04 - the database okay and I say hey clear
523:08 - out the number of guesses
523:10 - and also I go directly to the database
523:13 - and say hey reset and pick another
523:15 - computer number okay
523:17 - and then
523:18 - in my backend for databases right here
523:22 - I give not guesses but DB guesses and
523:26 - same thing here I give DB guesses for my
523:28 - guesses okay so that is really it
523:34 - that's really it so let's go ahead and
523:37 - hit command enter and try to run this
523:40 - now so I will open it up here
523:43 - uh let's go ahead to this route and hit
523:46 - enter
523:48 - okay and I'll put in 50 check me
523:51 - uh okay let's see what error we're
523:53 - getting and now the error we're getting
523:55 - is it says print guesses we don't have
523:57 - guesses anymore so let's remove those
523:59 - okay we do not have guesses anymore
524:02 - uh
524:04 - you could put uh instead of that you
524:06 - could do DB guesses for print
524:09 - and you could do DB computer number
524:12 - for message okay let's go ahead and run
524:15 - this let's go back to our app hit
524:17 - continue
524:19 - all right there we go let's go ahead hit
524:21 - restart it's gone let's now type in 75
524:24 - and you can see none of the old data
524:27 - came back right 50 run this 25.
524:32 - 30 is too low 45 it's too low 60.
524:38 - is too high okay 55.
524:42 - 50
524:44 - 53.
524:47 - come on
524:49 - yeah let's go baby all right so we got
524:53 - 52 is correct so it is working correctly
524:55 - it's pulling from the database and
524:57 - what's great that it's pulling from the
524:59 - database means I could even restart the
525:01 - app
525:02 - so let's say I like restarted the app
525:05 - everything is still Gucci all my data is
525:07 - still there and I could kill the server
525:09 - and start it again so I could stop and
525:11 - start
525:12 - and when this app would refresh it would
525:15 - refresh with all of that data so like
525:18 - if somebody has a game session that
525:20 - they're playing uh that will stay there
525:23 - even after you hit refresh or whatever
525:24 - they won't just lose it simply because
525:26 - they refresh their page or something so
525:28 - or you restarted the server so that's a
525:30 - really cool part about having a database
525:32 - because it's pulling all the data from a
525:34 - store database
525:36 - okay and with that said I mean unless I
525:40 - am mistaken your app is pretty much
525:43 - your app is honestly done this has every
525:47 - feature every functionality you could
525:49 - restart you could uh guess the number
525:53 - and check if it's correct or not right
525:55 - and then this returns our function check
525:57 - number show message will return one of
525:59 - these statements
526:00 - we get that as a message we're reversing
526:03 - it so it's coming in the right order we
526:05 - have all the styling in place for it so
526:07 - yeah with that said there you go that is
526:10 - fully your app you can share with your
526:12 - friends your family could show off hey
526:14 - look what I made with python you know
526:16 - and especially if you're a newbie or
526:18 - getting started I mean I'm really proud
526:20 - of you for being able to get to this
526:22 - part and get it done even if you just
526:25 - copy pasted everything that I did or
526:27 - even if you looked at the solution file
526:28 - or even if you're using the solution
526:30 - file okay the main thing is you're
526:32 - trying and you're here and the start all
526:34 - of this stuff is really hard I know
526:37 - but I promise it gets easier over time
526:39 - okay so I don't expect that you would
526:42 - have figured this out yourself or done
526:44 - it yourself but I do expect is like you
526:46 - at least gave it a try and that's all
526:48 - that matters okay with that said I love
526:50 - your beautiful face great job on making
526:52 - guess the number and and I'll see you in
526:56 - the next video
526:58 - Rock Paper Scissors Shoot maybe I got
527:01 - you who knows welcome in this video
527:04 - we're gonna be building rock paper
527:06 - scissors with python and using a web
527:09 - development framework called flask now
527:12 - I've abstracted away essentially all the
527:15 - stuff that you need to know about web
527:16 - development so you really don't need to
527:18 - know any web development at all the way
527:20 - that I've designed this app for you is
527:21 - you're pretty much only going to need to
527:23 - worry about writing python code okay uh
527:26 - if you're watching this on YouTube and
527:29 - you want to follow along and build this
527:30 - app out with us the link isn't going to
527:33 - be in the description below if you're
527:35 - watching this as part of this big course
527:37 - that we have done
527:39 - um I'll show you exactly where you can
527:41 - go ahead and get the link but first
527:42 - things first I'm going to go ahead and
527:45 - demo this app so you can see exactly
527:47 - what it is that you're going to be
527:49 - building so let's go over to it and I
527:52 - will share my screen with you now all
527:54 - right so this is the app that you're
527:55 - building now I'm gonna choose which one
527:58 - I want and I chose Rock and you saw that
528:01 - it said human picked Rock and the
528:03 - computer picked paper and paper beats
528:06 - Rock so I'm now at negative one and it
528:08 - says you lose okay let's go ahead and
528:10 - pick scissors this time damn damn I lost
528:13 - again beating you what the cheese okay
528:16 - there we go now to draw I'll pick
528:18 - scissors again it really likes rock huh
528:21 - let's wow right when I pick paper it
528:23 - picks scissors this computer is too
528:25 - smart
528:27 - okay so I'm just getting destroyed here
528:29 - okay what's crazy is that this is
528:31 - totally random so I should be probably
528:32 - at some point winning but you get the
528:34 - point now I can also hit end and it'll
528:38 - end the game and watch this it's
528:39 - actually really cool when I actually
528:40 - refresh
528:42 - right the data doesn't go away the data
528:44 - is still there so how the heck am I
528:45 - doing that with python well guess what
528:46 - this app also has a database so you're
528:49 - going to be mastering databases you're
528:51 - going to be learning about routing how
528:52 - that works you're going to be learning
528:53 - arguments you're gonna be learning about
528:55 - so much and like so much python stuff as
528:57 - well
528:58 - so just hang in there it's going to be a
528:59 - fun project all right and then if I hit
529:02 - this end
529:03 - it completely clears up and starts all
529:06 - over again boom boom boom okay all with
529:11 - pure python all right with that said if
529:13 - you're excited I'm gonna walk you
529:14 - through it so if you're going through
529:16 - the course the clever programmer python
529:19 - course okay and if you're watching this
529:22 - and you're like I have no idea what the
529:23 - heck you're talking about I'm doing an
529:25 - amazing python course which is you know
529:27 - 8 10 12 hours long it's a pretty long
529:29 - course and
529:31 - um if you want to become a part of this
529:32 - course the link is in the description
529:34 - below you could just join it completely
529:36 - free no charge for anything
529:38 - um and uh yeah it'll give you access to
529:40 - all of this material the entire course
529:42 - all the exercise of projects we do and
529:44 - you'll have access to this okay so here
529:47 - we go so we're gonna find this project
529:49 - this rock paper scissors project right
529:51 - over here and then inside of this
529:53 - project
529:54 - uh you're gonna see that that project
529:56 - has links so we have a project link I'm
529:58 - going to click that and open it I have a
530:00 - demo link and then I have a solution
530:02 - link but I will not open the solution
530:04 - link okay I'll only open these two uh
530:08 - the solution link we're gonna leave it
530:10 - not click it because that's the solution
530:13 - I don't want you to see the solution
530:14 - right now okay I want you to work on the
530:17 - app so click the live demo and let's go
530:20 - ahead and check it out so here's the
530:21 - live demo of the app right we've already
530:23 - checked that out so that's all good we
530:25 - can close it now actually I like to
530:27 - leave the live demo running so let's
530:29 - just leave that open for now and then
530:31 - the next thing I want to see is the
530:32 - actual project so let's go here and now
530:36 - what I'm going to do is I'm going to
530:38 - walk you through an explanation of this
530:40 - entire project because this project is
530:42 - going to be different than the ones
530:43 - we've done before this or the ones we'll
530:45 - even do after this you are going to be
530:48 - doing a lot of this because I think you
530:49 - are ready but it's designed for you in a
530:51 - way where you can do everything step by
530:52 - step however for all of that to happen I
530:55 - need to explain to you how it works
530:56 - because if you tried this on your own
530:57 - right now it won't really make sense and
531:00 - you'll get lost or frustrated I don't
531:01 - want that to happen I want to make sure
531:03 - that you have a great experience and you
531:04 - actually build it let's talk about first
531:06 - things that you don't need okay so these
531:08 - over here static template stuff you
531:11 - don't need to worry about it pretty much
531:12 - at all we've hidden these complexities
531:15 - from you completely in this project so
531:18 - you really don't even have to look at it
531:20 - I was planning to hide these files
531:22 - folders but I think at least you should
531:24 - know that they're there okay in the
531:26 - static is the styling of your app which
531:28 - you don't need to worry about okay it
531:29 - makes it look beautiful and color
531:31 - powerful and all of that and then in
531:33 - templates is your template structure so
531:36 - it's like where does the div go where
531:37 - does a head go Etc okay so this here is
531:41 - all your front end meaning right now if
531:43 - you open this app and you hit run at the
531:46 - top right uh first thing we're actually
531:47 - going to do is when you open this
531:49 - exercise it's going to ask you to Fork
531:51 - so make sure to go ahead and hit fork
531:54 - and I'll just call this uh instructor
531:56 - okay so make sure to go ahead and Fork
531:59 - because otherwise you can't write code
532:00 - obviously unless you Forks you probably
532:02 - forked it
532:04 - um okay so there we go so static and if
532:07 - I run this app right now okay it should
532:09 - show me this over here and nothing
532:12 - should happen so like let's say I open
532:13 - this
532:14 - okay and I'm going to zoom in here so
532:16 - you could see a little bit better
532:18 - if I click nothing will happen click
532:21 - click click click meaning none of these
532:24 - buttons are connected to anything so
532:26 - you'll see routes changing at the top
532:27 - you see it says end you'll see it says
532:30 - play Choice equals Rock you'll see it
532:33 - says Choice equals paper you'll see it
532:35 - says Choice equals scissors
532:38 - so all of this information there's
532:40 - something happening but these buttons
532:43 - aren't connected to anything yet meaning
532:45 - there are no functions that we have that
532:47 - are firing off yet because that's the
532:48 - functionality that you're going to build
532:50 - okay okay so here now let's walk through
532:56 - the rest okay so I don't need to worry
532:57 - about this I the only one file I need to
532:59 - worry about is this main.py that is it
533:02 - okay now let's zoom into that main.py
533:05 - and turn our attention to that at the
533:07 - top you'll see some imports that you're
533:09 - gonna need to do not touch these These
533:12 - are perfectly imported for you
533:14 - um you will need to add any other
533:16 - Imports and you won't need to remove
533:17 - anything so you can just leave this
533:19 - untouched uh like some of the code here
533:22 - pretty much all the code that's written
533:23 - for you you can you should leave that
533:25 - untouched because you're going to need
533:27 - access to that
533:28 - all of this here is I'm just creating
533:30 - database
533:33 - database information for you that's why
533:35 - the app even when you refresh right it
533:37 - still has the data because we're using a
533:38 - database here and we're using the replit
533:40 - database so game start
533:42 - player score choices results those are
533:45 - initialized in the start as like
533:47 - false right because when the game starts
533:49 - it hasn't started yet it won't start
533:52 - until you hit play that's when the game
533:54 - will actually start alright so
533:57 - yep basically here all of this stuff
533:59 - database information that we're going to
534:02 - need and it's going to change so choices
534:04 - is going to be you know what choice the
534:08 - human picked and what choice the
534:10 - computer picked and computer will be
534:11 - picking a choice at random
534:13 - player's score will be well what's the
534:17 - current score of the player meaning if
534:20 - this player has let's say two points
534:22 - or the score is two the score is two
534:25 - then that basically means that the net
534:28 - result of the student uh of the player
534:31 - is like two plus two okay uh if you lose
534:36 - player score goes down by one if you win
534:38 - player score goes up by one right so you
534:41 - get either plus one
534:43 - or -1 based on winning or losing and if
534:46 - it's a draw player gets zero so that's
534:48 - what's going to be going in there that's
534:49 - all going to happen later okay all of
534:51 - this stuff you're going to touch later
534:52 - now let me go to the functions that you
534:55 - should work on first and then you're
534:57 - gonna work on other things next okay so
535:00 - I'm gonna close this index one
535:02 - and I'm going to close this play one
535:04 - okay and you're going to see this
535:07 - function called get computer Choice okay
535:10 - and so you're going to see functions
535:11 - like these so if I go ahead and close
535:13 - out all of these functions here this
535:15 - game is made up of
535:17 - um one index you don't really have to do
535:20 - too much there okay but one function
535:21 - play
535:23 - which is going to be your main logic
535:24 - that's going to go in there it's made up
535:26 - of computer Choice function two three
535:30 - four okay and then there's end game so I
535:33 - would say like about five functions that
535:34 - you'll need to make now let's start with
535:37 - an example of a function so let's say we
535:39 - want you to make this computer Choice
535:40 - function okay you don't need to change
535:43 - what you write in here the arguments are
535:46 - already given to you in this case there
535:48 - are none none that it takes there's
535:50 - documentation here for you so it tells
535:52 - you hey get computer Choice randomly
535:54 - selects between rock paper and scissors
535:56 - and returns that string for example if
536:00 - you call this function git computer
536:01 - Choice it will return Rock
536:03 - if you call it again it will probably
536:06 - return scissor okay so every single time
536:08 - it returns something different and it's
536:11 - a string and so now you have to actually
536:14 - based on this information you have to
536:16 - write this function get computer Choice
536:18 - okay and the hint that I'll give you is
536:22 - you'll be using
536:23 - choice that you got from random so
536:27 - remember when you did from random import
536:29 - choice so you'll be using Choice okay
536:32 - and if you want to like play around with
536:35 - python and see if you could get this
536:36 - function working which you could always
536:38 - do is you can just pop open the shell
536:40 - you could type in Python and then here
536:43 - let's zoom in a couple of more times you
536:45 - could see like super clearly so you
536:47 - could type in Python here and um
536:50 - then you could play with randoms you
536:52 - could say from random import Choice and
536:54 - then you could see how Choice works so
536:56 - choice you could give it an array and
536:59 - then you could see okay every time I
537:01 - give it this it picks a run number
537:03 - randomly okay great well what if I gave
537:06 - it strings like hello
537:08 - [Music]
537:09 - ah that works let's see if that works
537:12 - yeah eventually at some point it'll get
537:14 - the string hello okay great what if I
537:17 - gave it uh Rock here okay and I kept
537:21 - running this
537:22 - wow it gives me rock so then you could
537:25 - actually take this and see if you could
537:27 - convert this uh into into code for your
537:32 - app so you could go here and then you
537:33 - could actually say okay
537:35 - I know how to use Choice and then this
537:37 - time instead of giving choices of one
537:39 - two three I'll give a choice of rock
537:41 - paper scissors okay so get computer
537:43 - choice you should be able to do this and
537:45 - then at the end make sure you return so
537:48 - you should return
537:49 - Choice and then whatever is the array
537:52 - that you're going to give it okay so I'm
537:54 - gonna put in one two three but you're
537:55 - probably gonna put in something else
537:57 - right like rock paper scissors or
537:59 - something and then that would be
538:01 - essentially this computer Choice
538:03 - function would be done now if you want
538:07 - to test that your function is done
538:09 - here's what I want you to do if you want
538:10 - to actually test that you have written
538:13 - your function correctly you can go ahead
538:14 - and do print get computer choice
538:19 - and then pass in actually this won't
538:23 - take in any uh anything so it's like get
538:25 - computer underscore Choice like this
538:28 - okay and call the function just like
538:31 - that and it should return either rock or
538:34 - it should return scissor and it should
538:36 - do that as a string so if your function
538:38 - can do that then you know your function
538:40 - works so you could test it out a couple
538:41 - of times by hitting
538:43 - stop and start or command enter to
538:46 - restart your server and then you can
538:48 - actually also look here
538:50 - in the command line
538:52 - and it'll tell you it'll print out the
538:55 - result in the command in the console
538:58 - okay so that's how you would test it
539:01 - now you have another function here
539:02 - called calculate result and this will
539:06 - compare Player move and computer move
539:08 - and return the score accordingly so
539:10 - meaning here's a situation where a human
539:13 - would win
539:14 - if you call this function calculate
539:16 - result and you give it Rock and scissors
539:19 - it should return one why because player
539:23 - choice is the first positional argument
539:24 - and computer choice is second so if I
539:27 - give the player Rock and I give the
539:29 - computer scissors well who would win in
539:31 - that case
539:32 - the player right because rock beats
539:34 - scissor so then you get one point for
539:36 - that so human wins here's another
539:37 - condition second condition which is
539:39 - human loses well you flip that scissors
539:43 - and rock and the computer wins aka the
539:45 - human loses okay and then the human
539:48 - draws so you calculate result if you do
539:50 - rock rock you get zero so you understand
539:52 - now right how this function would work
539:54 - it'll take in this it'll compare them
539:56 - against each other and it'll give you a
539:58 - zero negative one or one and it'll
539:59 - return a number okay it'll return an
540:02 - integer so your job is to go into this
540:06 - function calculate result and your job
540:08 - is to basically fill out the body of the
540:10 - function now I've given you a lot of
540:13 - hints to make your life easy so for
540:15 - example here I tell you create a
540:17 - variable called score and set its value
540:18 - To None well you could go and do this
540:21 - then you'll need to write another line
540:24 - and maybe even multiple lines here it's
540:26 - like hey uh what are all the situations
540:29 - where a human draws well all this
540:32 - situations where a human draws are
540:35 - probably whenever
540:37 - the player choice and the computer
540:40 - choice is equal to themselves so
540:42 - basically it's like if player choice
540:46 - is the same as the computer Choice well
540:49 - then in that case what am I returning
540:51 - here I might be returning something
540:53 - right a 10 a 20. so you're gonna write
540:57 - this line of code I'm not giving you the
540:58 - right answer here right but you're going
541:00 - to return either a negative one a zero
541:02 - or a positive one so you have to figure
541:04 - that out but that's how you would write
541:05 - that first if statement they'll catch
541:08 - essentially all drawn situations all
541:11 - drawn situations are where it's the same
541:14 - then you're going to chain that with
541:16 - elseifs of all of the situation where
541:19 - the humans human wins so it'll be where
541:22 - you know if a human picked um
541:25 - Rock and the computer picked scissors if
541:27 - the human picked
541:29 - paper and the computer picked Rock if
541:32 - the computer picked so you literally
541:33 - write out all the situations where the
541:35 - human would win and then you would write
541:36 - that in Python code right and then you
541:38 - would write down your else statement at
541:40 - the end which would be you know what
541:43 - happens if the human loses in that case
541:45 - set the thing to negative one and if you
541:47 - do this part correctly you could just
541:49 - simply do an else here you don't even
541:51 - have to really write any if else if uh
541:54 - type of conditions here okay
541:57 - so that is what is happening with this
542:00 - function so make sure that that's
542:01 - working correctly in order to test it
542:03 - call it on these terms and see if you
542:05 - get the same results that I'm getting
542:07 - here one negative one zero okay so give
542:10 - that a try so that'll be calculate
542:13 - result
542:14 - then the next function you're going to
542:17 - need to build after calculate result is
542:22 - um the next function that you're going
542:24 - to need to build
542:25 - okay let's go ahead and do this is going
542:28 - to be the get result function
542:30 - and what this should do is it should
542:33 - take in a string
542:35 - with the value of U when or you lose
542:39 - okay or it's a draw based on the score
542:43 - for example
542:45 - if I give it a 1 it should say you win
542:47 - if I give it a negative one it should
542:49 - say you lose and if I give it a zero it
542:52 - should say it's a draw
542:54 - so the logic for get result will be very
542:57 - similar to the logic for uh you know
543:01 - doing one of these previous functions
543:03 - like the calculate result one so that's
543:06 - going to be pretty similar so you should
543:08 - be
543:10 - you should be good to go there okay it's
543:12 - going to be very similar type of way
543:14 - you're going to do it you can have a
543:16 - score and then you know if that score is
543:19 - a one something should happen and if
543:21 - it's a zero something should happen if
543:23 - it's a negative one something should
543:25 - happen okay
543:27 - so that's what's happening with the get
543:28 - result it takes in a score and then it
543:30 - returns something okay to test it call
543:34 - get result on one you should get back
543:36 - you win call get result on negative one
543:38 - you should get back you lose call get
543:40 - result on zero you should get back it's
543:42 - a draw and then uh one of the last ones
543:46 - we're gonna do
543:47 - is end game and in here
543:50 - what you're going to need to do is what
543:53 - endgame does is resets every value in
543:56 - the database to its initial value okay
543:59 - so you're gonna go ahead and reset all
544:03 - of the database values that you have
544:05 - here so game start player score choices
544:07 - result you're gonna set them back to
544:10 - their initial States because well we're
544:12 - ending the game right end this slash end
544:15 - would run when you hit this button here
544:17 - so that's what we want to do here
544:20 - okay and then we want to pass that
544:22 - information to our front end so make
544:24 - sure that this all of this information
544:26 - here
544:27 - right now just hard code it to be false
544:29 - and zero and empty strings but you're
544:31 - going to need to pass in your own
544:34 - um your current state of the game from
544:36 - the database so for example it'll look
544:37 - more like DB game start for example and
544:42 - you're gonna basically do that for every
544:44 - single one player score will come from
544:45 - database choices will come from database
544:47 - result will come from database so it'll
544:48 - just put the database variables there
544:51 - that you're passing to the front end and
544:54 - then that should be good because then
544:55 - your front end needs that information
544:56 - and based on that information it goes
544:59 - and does things and keep the variable
545:01 - names the same here because if you
545:03 - change player score variable name or
545:04 - Choice as a result your front end will
545:06 - break because your front end is
545:08 - depending and it's attempting to look
545:11 - for those specific terms okay so for
545:13 - example it's looking for game start
545:15 - player underscores player underscore
545:18 - score
545:18 - uh choices result so it's looking for
545:23 - that specific piece of information okay
545:25 - so that's end
545:27 - um end is fairly straightforward and
545:30 - then we have the function play okay so
545:33 - this is going to be the entire logic of
545:35 - the game this will be the most difficult
545:37 - one to write for you but what this will
545:39 - do is it will change the game so in the
545:41 - start you'll have these notes okay so
545:43 - read all of these notes and try to do
545:45 - them yourself I won't explain every
545:48 - single line of these notes but basically
545:50 - you know it'll ask you to do things and
545:52 - then you just gotta try to do those
545:54 - things okay so for example this
545:56 - request.orgs thing might throw you off
545:58 - but how what we do here is if I'm
546:02 - playing this game if I want to retrieve
546:05 - that the player picked scissors or let's
546:06 - say the player picks Rock and I want to
546:08 - retrieve that from the URL I can in
546:10 - Python I could just do requests Dot orgs
546:14 - and I can say rock or sorry I could say
546:16 - choice so basically what I'm doing is
546:18 - I'm putting in that keyword argument
546:20 - right there of choice and it's going to
546:23 - actually return and spit that value back
546:25 - out to me so tell me that the player
546:27 - pick Rock for example
546:30 - okay so that's how you could do this and
546:34 - you could get back the player choice by
546:36 - doing request.org so I'm giving you that
546:37 - hint already on how to do it
546:39 - okay then you're going to generate a
546:42 - choice based on the computer you'll
546:43 - calculate the score of the players
546:45 - you'll update the result choices and
546:46 - player score in the database and then
546:48 - you'll send all of that data here and so
546:52 - all of these are going to be pulled from
546:55 - the actual database so all of this here
546:58 - will be coming in from the database okay
547:02 - so there you go it's a really big
547:04 - project I want to just make sure that I
547:07 - thoroughly walked you through it and
547:08 - covered every single detail that I could
547:11 - about it I'm gonna try to leave you to
547:13 - it take hours days however long you need
547:17 - to do this and then we'll get back
547:19 - together and go through it don't look at
547:21 - the solution until you have worked
547:24 - pretty hard
547:25 - okay this is the exercise I would say
547:27 - don't look at the solution until you've
547:29 - worked pretty hard and give it a really
547:31 - really strong try Okay
547:33 - um yeah and but don't be discouraged if
547:35 - you don't get this I don't expect you to
547:36 - get this right it's a massive project
547:38 - for you to do right now would be really
547:39 - difficult but it will push you and I
547:42 - want to just push you I'm hoping that
547:44 - you get the calculate result uh get
547:46 - computer Choice I'm hoping that you get
547:49 - those right okay you get you get some of
547:51 - these functions right two or three
547:52 - functions you get right even if you
547:54 - don't get the flask specific functions
547:56 - right or whatever right I'm happy if you
547:58 - do that so that would be a good place to
548:01 - start give this a try and then once you
548:04 - give it a solid solid try remember
548:06 - there's always a solution file that you
548:08 - could cross reference if you're
548:09 - completely stuck you could cross
548:11 - reference the solution file or which is
548:13 - right here behind my face
548:16 - um or just wait till pretty soon you and
548:19 - I are going to go through the solution
548:20 - together and we're going to build it out
548:22 - step by step okay so good luck enjoy go
548:25 - cry crush this click the link below
548:27 - right hit the replit fork it so you
548:30 - could work on it so do that right now
548:32 - and with that said I'll see you in a
548:34 - second and good freaking luck
548:38 - all right welcome back now we're gonna
548:40 - go through the rock paper scissors
548:42 - solution together I hope you gave it a
548:44 - try and you got close I know you might
548:47 - have spent hours you maybe might have
548:49 - even spent days
548:51 - um I just want to have you pat yourself
548:52 - on the back because that is powerful if
548:55 - you didn't get it that is okay that is
548:57 - totally what I expect you are a newbie
549:00 - in coding you're not supposed to get
549:02 - this but all I'm trying to do is
549:04 - challenge you and trying to get you to
549:06 - see the beauty of coding and trying to
549:08 - understand it bit by bit but also feel
549:10 - that pain and frustration that comes
549:12 - sometimes now let's go and do it
549:15 - together step by step and um yeah let's
549:18 - see if it makes sense okay I just want
549:20 - you to have fun that's your goal right
549:22 - now so let's go to our app and let's go
549:23 - through the solution I'm just gonna try
549:25 - to go through a little bit at a faster
549:27 - pace
549:28 - because I'm sure you've already taken a
549:30 - lot of time with it right already so
549:33 - let's go to
549:36 - um let's start with the simplest
549:37 - function first get computer choice this
549:39 - is very easy I'm gonna go ahead and say
549:41 - return and I'll call Choice which I'm
549:44 - importing from random right there okay
549:46 - and then I can simply just go ahead and
549:49 - say choice and give it a rock paper
549:55 - scissors
549:57 - okay
549:59 - um and I know that I need to uppercase
550:02 - it title case it like this because even
550:04 - in these documentations right here it
550:06 - tells me that it should say rock like
550:07 - that scissor like that so that's already
550:09 - telling me how I need to get this right
550:12 - this will basically get the computer
550:14 - Choice okay that's how we're going to
550:16 - get the computer Choice okay now I'm
550:18 - going to work on another function so if
550:20 - I want to test this function I'll just
550:21 - probably call and do this get computer
550:24 - choice
550:26 - and let's just run this and see if it
550:29 - I'll restart my server and let's see if
550:31 - it works
550:32 - get computer choice you can see it says
550:34 - Rock
550:35 - so that's a really great sign let's run
550:37 - it again
550:38 - and you can see it says scissors so
550:43 - literally it set it in the same exact
550:46 - order that it says here
550:48 - right so I know and scissors let's make
550:51 - it plural my bad
550:52 - okay
550:53 - so I know that it's it's
550:56 - you know
550:57 - um
550:58 - I know it's working okay I know my
551:00 - function computer choices work because
551:02 - I'll remove that print statement so
551:04 - we're good with computer Choice that's
551:05 - uh
551:07 - right that's a correct
551:09 - correct one now the next one I got is
551:12 - calculate result so I'll just follow the
551:14 - comments and everything that's there
551:15 - without even really going crazy so I'll
551:18 - set the score to none and then all
551:21 - situations where a human draws well this
551:23 - is if human uh if player choice right I
551:26 - have this argument this has two
551:28 - arguments so I know that if player
551:31 - choice is the same as the computer
551:33 - choice
551:35 - well then we're just going to set the
551:38 - score to zero
551:40 - okay so this is like a drawn situation
551:43 - all situations where a human wins so now
551:45 - we'll chain all of this with else ifs
551:47 - because it even tells you to chain him
551:49 - with else if so I'll say else if player
551:52 - choice
551:54 - uh equals equals Rock
551:57 - okay so the player can win with three
552:01 - different ones right so here what are
552:03 - the three wins that a player could have
552:04 - well the player could win with rock the
552:07 - player could win with paper and the
552:08 - player could win with scissors those
552:10 - were the only three times where the
552:12 - player could win so these will take care
552:15 - of all the situations and rock can only
552:18 - beat one opponent and paper could only
552:20 - beat one opponent scissors could only
552:22 - beat one opponent opponent meaning
552:24 - scissors can only beat
552:26 - paper paper can only beat rock rock can
552:31 - only beat scissors
552:33 - so I know that I'm just gonna have one
552:37 - uh line of code is essentially gonna
552:39 - take care of this and another one that's
552:41 - going to take care of this another so it
552:42 - should be like three else ifs
552:44 - essentially so if player choice is Rock
552:47 - and and
552:49 - um or actually I can say and like this
552:51 - and computer choice
552:54 - is what computer choice would have to be
552:56 - losing choice
552:59 - we're gonna go ahead and say return or
553:02 - score is equal to one so this isn't a
553:04 - situational human wins I'm going to copy
553:08 - paste this here okay now it's the second
553:10 - choice if player choice is paper and
553:13 - computer choice
553:15 - is Rock
553:18 - player wins okay what's the third
553:21 - situation where the cleric will win
553:24 - if the player chooses scissors and the
553:27 - computer picks paper right so now we
553:29 - officially have all the situations where
553:32 - the player would win so we're done with
553:35 - this part now it's a little ding right
553:37 - there okay and now we have else
553:39 - otherwise human loses so I could just
553:41 - say else score is negative one this is
553:45 - the only other case lost if we've
553:47 - accounted for all the drawing situations
553:49 - and we have accounted for all the
553:51 - winning situations the only other
553:52 - situation that's left is
553:55 - um
553:56 - if the human loses right that's the only
554:00 - situation left and at the end we're just
554:02 - going to return score so this function
554:05 - now is complete now you should go ahead
554:08 - and test it obviously and write print
554:10 - statements to test it I won't because
554:12 - I'm very very sure that it's good okay
554:15 - but you should give it a try and I'm
554:17 - also doing this so we can keep the pace
554:19 - of it uh smoother
554:22 - all right now we gotta work on another
554:24 - function called get result well how does
554:26 - this work so get result returns a string
554:28 - with the value of you win you lose or
554:31 - it's a draw based on the score
554:33 - okay so if I call get result on one I
554:35 - get you when if I call it on negative
554:37 - one I get you lose otherwise I'll draw
554:39 - okay that should be simple enough right
554:41 - I could say
554:44 - um if score is equal to one
554:48 - return
554:48 - [Music]
554:49 - you win
554:52 - right
554:54 - elsif score is equal to
554:58 - zero or negative one
555:01 - return you
555:04 - lose
555:06 - and else
555:09 - okay else
555:11 - returned
555:15 - it's
555:16 - uh and let's put double quotes here it's
555:19 - a draw
555:20 - the reason why I'm putting double quotes
555:22 - is if we use single quotes
555:24 - it would be confused because it would
555:27 - think that the string starts here and it
555:30 - ends here
555:32 - but that's not what's happening right we
555:34 - have a string starting here and ending
555:36 - here so putting double quotes So then it
555:37 - knows that this is an apostrophe
555:39 - and not a string ending
555:44 - okay so that's it for my get results so
555:48 - I'm done with my get result okay that's
555:50 - good now my end game
555:52 - well what I need to do is I need to
555:54 - reset all the variables right that's
555:56 - what it told me so I'm going to go ahead
555:58 - and do just that so I'm going to say
556:00 - DB game start I'm going to set it to
556:04 - false
556:06 - okay
556:07 - um DB player
556:10 - score I'm going to set it to zero DB
556:15 - choices I'm going to set that to empty
556:20 - string and DB result I'm going to set
556:24 - that to an empty string as well
556:27 - okay and then I need to pass all of
556:30 - those to my front end okay so this is
556:33 - the part that I've told you is going to
556:35 - be a little bit tricky so boom right
556:37 - there
556:38 - boom right there we're only passing only
556:43 - database stuff to the front end
556:47 - okay that goes there
556:50 - cool so now our end game function so
556:52 - whenever we hit end game our end game
556:54 - function will run right and then all of
556:56 - this will happen and then it'll send
556:58 - that over and once I send it over
556:59 - index.html will render all of that out
557:02 - on the screen okay so now our end game
557:04 - is done and then all we have left at
557:07 - this point is really
557:10 - um really just a few ones so this one
557:12 - needs all the database information so
557:14 - this one is very very easy just like the
557:16 - last one let's just finish this there
557:18 - isn't even really any code you need to
557:20 - write here like any extra code we're
557:22 - just sending
557:24 - the database variables here to index
557:26 - which is our home page so let's just get
557:28 - index done
557:30 - okay the result and then we'll set it to
557:33 - this okay and then the last one that I I
557:36 - really got to do is
557:38 - I want to be able to change the state of
557:41 - game um I need to change the state of
557:43 - game start in the database to true so
557:45 - for example once you hit play well now
557:47 - the game has begun so game start will
557:50 - change from false and it'll now become
557:52 - true so we're gonna go here and I'll say
557:56 - I'm just gonna yep perfect that's great
557:59 - I'm good here I'll do game start and
558:03 - I'll set that to True okay so I'm good
558:05 - with that now the next thing I need to
558:07 - do is get the human Choice from URL
558:09 - arguments and save humans in a choice in
558:12 - a variable
558:14 - okay so we're gonna call it
558:18 - um
558:19 - we're gonna just say player choice and
558:22 - we're gonna set it to this because that
558:25 - is getting us the player choice
558:28 - uh from the URL okay so that's what's
558:32 - happening there player choice
558:35 - and next up what I want to do here is I
558:39 - want to generate a choice based on
558:41 - behalf of the computer and then save it
558:43 - in a variable so here I'm going to be
558:45 - leveraging the functions that I've
558:47 - created earlier so I'm going to say
558:48 - computer choice is equal to get computer
558:53 - choice so now I'm leveraging this
558:56 - function that I created earlier then
558:58 - we're going to calculate score of the
558:59 - player versus computer choice
559:01 - so now I can do uh get the score from
559:05 - the database
559:06 - so I can say result and I can set it to
559:09 - the database so now I can do get result
559:11 - and then I can give it the score okay
559:15 - and if we want to get the score let's
559:16 - actually get the score first so let's
559:18 - let's calculate the score first so we're
559:20 - going to go ahead and say score
559:22 - and I'll say calculate result
559:26 - and we'll give it a player choice and
559:28 - computer choice because now
559:31 - we have the player choice
559:33 - and we have the computer choice right so
559:35 - this is coming from the URL you know
559:38 - with whatever the user is clicking
559:40 - um and then this computer choice is
559:42 - being uh we're getting this randomly
559:45 - okay and then we give this for calculate
559:48 - results function so if I go to our
559:50 - calculator result function it knows what
559:52 - to do and then it Returns the score so
559:55 - it either returns a negative one a
559:57 - positive one
559:58 - or whatever right so if I go to our
560:02 - thing
560:03 - I know that this is either going to be a
560:05 - negative one or a zero or a one
560:08 - okay so that's what the score is doing
560:11 - then what I'm going to do once I get
560:13 - that score is I'm going to increment the
560:16 - result in my database by plus equals
560:19 - um or sorry actually I want to set the
560:21 - result in my database to whatever
560:24 - the result was of the most recent game
560:27 - okay so score and I'll get result and
560:30 - get result either says you win you lose
560:32 - or you draw
560:34 - or as a draw
560:35 - okay so that's what writes out for
560:38 - example in the solution version that's
560:41 - the function that's gonna do it's the
560:43 - draw it's a draw part or it's a win part
560:45 - or whatever
560:46 - that's how we're figuring that out and
560:48 - then score is the function how we're uh
560:52 - score in the database is how we're
560:53 - keeping track of this two and three and
560:55 - then it turns to four Etc so let's go
560:57 - back here to our app and then I'm going
561:00 - to get the uh set the choices key
561:05 - to a string and this is going to be a
561:08 - string that's going to say
561:10 - it's going to be a string formatting
561:12 - here and we're just going to go ahead
561:14 - and say player choice
561:20 - and we can make a human Emoji here
561:25 - man
561:30 - person
561:32 - okay so this will represent a human
561:34 - Choice and then I'll put this bot here
561:38 - robot
561:40 - and we'll this will represent the
561:42 - computer Choice okay and then we'll go
561:45 - player score we'll increment the
561:48 - player's score
561:50 - by the score that we just got for the
561:52 - game so if the human lost or if the
561:54 - player lost it'll decrement it by one if
561:57 - the player if it was a draw it'll just
562:00 - add zero which won't do anything and
562:02 - then if the player one then it'll be a
562:05 - plus one it'll increment it by plus one
562:07 - now I need to give the database values
562:09 - to our back end so we've done this
562:11 - before a few times so I'm just going to
562:12 - take
562:13 - this and put that uh for the result
562:18 - we're gonna give our front end choices
562:20 - so we're gonna put that right here we're
562:22 - gonna give our front and player score
562:26 - and we're going to give it game start so
562:30 - let's go ahead copy this right there and
562:33 - we're going to give it game start
562:35 - okay there we go and now at this point
562:39 - we should be pretty good actually the
562:44 - whole game should essentially be working
562:46 - so let's go ahead and hit command enter
562:48 - on this
562:49 - and I'm just going to open it up in a
562:50 - new tab and let's check it out boom look
562:54 - at that
562:56 - right paper versus rock you win let's go
562:59 - hit this
563:01 - scissors versus rock you lose right that
563:04 - was a one of the situations that we had
563:07 - Rock versus paper you lose huh
563:10 - interesting paper versus Rock so we pick
563:14 - paper computer pick Rock so that means
563:16 - we win and you can see that it's
563:18 - incrementing that uh result as well so
563:21 - if I keep winning it'll keep going up to
563:23 - a plus score or a zero score if I keep
563:25 - losing it'll keep decrementing down to a
563:28 - negative score and now watch what
563:29 - happens when I hit end boom everything
563:32 - is gone
563:33 - even if I refresh it's gone
563:36 - right not there so we are using a
563:40 - database and we're getting all of this
563:41 - to work
563:43 - right so there you go
563:45 - uh did not mean to put that there
563:48 - and get it out of here there we go there
563:51 - we go got it okay so there you go that
563:55 - is rock paper and scissors
563:58 - you went ahead and built it yourself now
564:01 - you even have a URL it's deployed online
564:03 - already so you could share this with
564:05 - your friends family anybody that you
564:07 - want
564:09 - um but overall I just really hope that
564:11 - you had a ton of fun building this you
564:13 - had a great time and don't be so hard on
564:15 - yourself if some of the stuff you didn't
564:17 - get or feel like it's kind of going over
564:19 - your head
564:21 - you know go through the rest of the
564:22 - course if you're not part of this course
564:24 - make sure you sign up for it below so
564:27 - you can
564:28 - you know be able to go through the
564:30 - entire course
564:31 - um because if you go through the whole
564:32 - course it'll make a lot more sense and
564:34 - if you just jump to this project here
564:36 - because that'll be a lot trickier right
564:40 - with that said I hope you enjoyed it
564:42 - this was a great project I had a lot of
564:44 - fun building it with you I hope the
564:46 - explanation and then the solution type
564:49 - of method worked well I spent a lot of
564:52 - time with my team building each you know
564:54 - exercise function in a way that's just
564:56 - awesome
564:58 - um but yeah I hope that worked for you I
565:00 - hope you enjoyed it with that said I
565:02 - love your beautiful face and uh I'm
565:04 - gonna see you soon let's keep going
565:09 - time to build another app with python
565:11 - and flask this one is going to be called
565:14 - a random dog generator because Isn't it
565:17 - nice when you click a button and you get
565:18 - a picture of a nice puppy that's what
565:20 - this is about and this app will have a
565:23 - lot of functionality for example this
565:24 - will have a database this will have the
565:26 - ability to track the users and the
565:29 - sessions and um yeah it'll have a
565:31 - leaderboard for who generated the most
565:33 - dogs
565:34 - and we'll do this in very few simple
565:37 - lines of code and so it's gonna be a lot
565:39 - of fun building it let's go ahead and
565:40 - demo this app so I can actually enter my
565:43 - name here so let's say I go qazi
565:45 - and I go login slash sign up it'll bring
565:48 - me to this page over here right this is
565:50 - the home page now it's telling me that
565:52 - my username is qazi it's uh it's telling
565:55 - me that this is my first login that's
565:57 - ever seen and it's also telling me that
566:00 - these are the total amount of dogs that
566:02 - were generated the entire you know
566:04 - website wide all users combined and then
566:08 - it tells me here
566:10 - who the users of this app are so we have
566:12 - these three users right here Kamikaze
566:15 - David test those are the three users of
566:17 - this app so far okay and then these are
566:20 - the dogs that were generated all right
566:22 - now if I go ahead and I hit refresh
566:26 - okay let's go ahead to this page and
566:28 - let's go ahead and hit get random dog
566:36 - there we go you can see that now I just
566:40 - got a brand new dog right here let's hit
566:42 - another another time get random dog boom
566:45 - I just got another dog and you can see
566:46 - this total number goes up and it's also
566:49 - tracking dogs that you have generated so
566:52 - it actually can keep track of every
566:54 - single user and all the dogs that
566:56 - they've generated so when you log in
566:57 - it'll keep track of your dogs but when
566:59 - you log out and you log into somebody
567:02 - else then it'll keep a track of that
567:03 - user's dogs
567:05 - right so I can keep clicking and you can
567:07 - see that I'm in the leaderboards right
567:09 - here now if I go ahead and I do more
567:11 - than nine I'll actually pass
567:13 - test okay so let's keep going
567:16 - let's keep going I just generated eight
567:18 - dogs let's go ahead and generate nine
567:20 - dogs
567:22 - and ten and Watch What Happens
567:24 - boom right when I did 10 you can
567:26 - actually see that I pass test and now
567:30 - I'm here all right so that leaderboard
567:32 - works perfectly you can detect my number
567:34 - of logins now let's say I log out
567:37 - right and then let's go ahead and I go
567:39 - quasi and I log back in it remembers
567:41 - that I've generated 10 dogs let's say I
567:43 - log out and I log in as a new user so
567:45 - let's just say I'll say
567:47 - um John
567:49 - let's enter and say you have generated
567:52 - zero dogs and number of logins is one
567:54 - now if I hit get random dog right the
567:57 - dog is generated and I can see it on the
567:59 - screen so a lot of concepts are covered
568:02 - here like for example being able to keep
568:04 - track of the session of the user meaning
568:06 - when I refresh it still knows that I'm
568:09 - John so the app is still running a
568:11 - database all of this information is
568:14 - actually stored in a database forever
568:16 - right so it says 45 when I refresh it
568:19 - will still say or if I generate a new
568:22 - dog obviously it'll go up to 46 so you
568:24 - could see
568:25 - how this app is working right like every
568:30 - single time I click this I get a brand
568:32 - new dog we have this little nice little
568:34 - spinning effect if you hover over it and
568:37 - all of this data over here from the
568:38 - leaderboards this of course is coming
568:40 - from a database as well where we're
568:41 - keeping track of all of the users and
568:44 - then it's showing that so you'll learn a
568:46 - database as well in here okay great now
568:50 - if you're watching this clip on YouTube
568:52 - you can just click the link in
568:54 - description below it'll take you to the
568:56 - exercise page of the app for the
568:59 - repository and you'll be able to use it
569:02 - if you're part of this python course
569:03 - that we're going through the mega Python
569:05 - course we'll link that below as well
569:08 - uh then just simply go down to where so
569:13 - in the python course right the best
569:14 - Python tutorial in the world if you keep
569:16 - scrolling down you'll see all the
569:17 - projects you'll see this counter project
569:19 - if you scroll down you'll see this
569:21 - YouTube app project that we've built and
569:23 - you'll see this random dog generator so
569:26 - you could go down here to random dog
569:28 - generator and there will be Three Links
569:30 - available for you one will be a project
569:32 - link so this is the link where you'll
569:34 - actually click and build your
569:35 - application
569:37 - uh the second link will be the live demo
569:40 - of the app and the third link will be
569:42 - the solution file so this only look at
569:44 - it if you really really really really
569:46 - really need to and you're stuck but this
569:48 - is like the solution so don't look at it
569:50 - right now okay but you could look at the
569:52 - live demo that should just get you to
569:54 - this page and you should be able to hit
569:56 - get random dog or if it doesn't see that
569:58 - you're a user in session you could just
570:01 - create a new user and keep clicking get
570:03 - random dog and it'll keep generating
570:04 - random docs for you right so it has apis
570:06 - as well because we're using an API to
570:08 - get these dogs all right so I want you
570:11 - to go ahead and click project okay and
570:13 - now that you've clicked project it
570:15 - should bring you to this page and if
570:17 - you're hitting it from your computer it
570:19 - might actually bring you to this page
570:20 - that asks you to fork okay then once it
570:23 - brings you to this page just go ahead
570:25 - and click four okay go ahead and click
570:27 - Fork like this and it'll ask you to
570:29 - create an account create an account it's
570:31 - all free all right so uh nothing really
570:35 - to lose there and then just Forks can
570:37 - build off of it and since we're not
570:39 - building it from scratch we're giving
570:41 - you a couple of components and things
570:42 - that you'll need like HTML and whatever
570:44 - you know it'll be wiser for you to Fork
570:47 - this will make your life a lot easier
570:49 - all right so I'm gonna go ahead and Fork
570:51 - this with you as well so I'm going to go
570:53 - ahead and Fork this and you can call it
570:55 - whatever you want I'll call my Fork
570:57 - instructor because well I'm your
570:59 - instructor okay so that's what I'm going
571:02 - to be calling it that way feel free to
571:04 - call it whatever you want right as long
571:05 - as you can find it easily and and do
571:09 - whatever you need to do okay so here we
571:11 - go all right now that you've forked
571:13 - everything and renamed everything once I
571:15 - run it you should see this page over
571:18 - here okay this guy right here so this
571:21 - basically means your app is you know
571:23 - running it's not fully built yet right
571:26 - so for example you have this front end
571:28 - but let's say I log in hit login and
571:32 - sign up it doesn't work if I hit get
571:34 - random dog it does not get me a new dog
571:36 - if I hit you know let's say I hit log
571:39 - out it won't log me out right and this
571:43 - data over here right now is dummy data
571:45 - meaning it's not dynamically changing or
571:48 - anything like that it's just hard coded
571:49 - in here okay so right now in the current
571:52 - state this app is broken okay but all
571:55 - the front end is there why is the front
571:57 - end there is so you don't have to spend
571:59 - because it's a python course and we want
572:01 - to keep the concepts focused to Python
572:04 - and flask and we don't want to focus the
572:07 - concepts on web development necessarily
572:09 - so let's go ahead to
572:13 - um yeah we want to just keep the
572:14 - concepts Focus to like python web
572:16 - development and flask web development
572:18 - not necessarily HTML and CSS and The
572:21 - Styling part okay
572:22 - so great so this is where we're at now
572:25 - if we want to connect these buttons
572:28 - right like a get random dog button so it
572:31 - actually gets a random dog
572:33 - well what we need to do if you remember
572:35 - is what
572:37 - and some of these things if you want to
572:39 - give them a try you should actually
572:40 - pause the video and give those things a
572:42 - try because that's how you will learn if
572:45 - you just keep watching me doing all of
572:47 - this it's gonna be not like the most
572:50 - helpful way for you to learn okay so I
572:52 - urge you to keep pausing the video at
572:55 - times and giving things a try now some
572:57 - things are new Concepts but like
572:59 - connecting this get random dog Button uh
573:03 - to a path where when you click it
573:06 - right once you click it it takes you to
573:09 - just get dog route is as simple as
573:11 - creating a route inside a flask and so
573:14 - you've seen us do that with python
573:16 - multiple times at this point so I want
573:18 - you to give that a try on your own okay
573:19 - I'll give you five seconds to pause the
573:21 - video five four three two one all right
573:26 - now the URL now I'll we'll do it
573:28 - together if you if you didn't pause it
573:29 - or whatever or if you've tried it great
573:31 - so let's go ahead and do this together
573:33 - so the URL said get dog so I'm just
573:36 - going to go ahead and I'm gonna create
573:37 - get dog and dog function and I'm just
573:41 - gonna say uh let's go ahead and say
573:44 - uh return
573:47 - dog page okay just just let's just do
573:50 - that for now let's go ahead and hit
573:52 - command enter I'll go hit refresh here
573:56 - okay and then we'll hit get random dog
574:01 - okay and there you go you can go ahead
574:04 - and see that the dog page is now showing
574:08 - up okay so like that part is connected
574:11 - now what I want to happen is I don't
574:14 - necessarily want a entirely new page to
574:18 - come up
574:19 - um
574:20 - what I want to happen when I hit this
574:22 - get random dog is this same page to
574:26 - render okay the same page to render just
574:29 - with new data though this time
574:31 - so let's just walk through some of the
574:34 - other pieces of code that we have in
574:36 - here just so you can fully understand
574:37 - what we have so this is a basic flask
574:39 - app so far okay and we're rendering
574:43 - index.html okay so index.html is right
574:47 - here
574:49 - and this is already all created for you
574:52 - okay so this is the HTML and the CSS
574:55 - part that you don't really have to do
574:57 - okay this is all created for you now if
575:00 - I go back here and this components is
575:03 - also created for you as well it's a card
575:05 - component that we created so you don't
575:07 - have to create this and then the styling
575:09 - is all done so that's that's the stuff
575:12 - that's all already there
575:14 - okay now let's go back
575:17 - and inside of here we're we're getting
575:20 - the dog
575:21 - but now what we need to do is still
575:24 - return the same page okay so what I'm
575:26 - going to say instead is I'm just going
575:28 - to say render template
575:31 - and I'm just going to pass in this guy
575:34 - right here I'm going to say index.html
575:37 - okay and all we need is information
575:39 - about a dog so let's just say we had a
575:42 - dog
575:43 - uh image
575:46 - okay let's let's just say we had a dog
575:48 - image and this image was let's just go
575:51 - to Google and let's get a dog image
575:55 - okay so there we
575:58 - that looks like a really cute dog
576:01 - all right we're going to go ahead and
576:03 - copy image address and I'm just going to
576:06 - paste that image address in there okay
576:07 - so this is a dog image
576:10 - now to my front end I can send this
576:14 - information okay so I can go ahead and I
576:16 - can say
576:17 - dog image
576:19 - it's equal to dog image
576:22 - okay now what this means is I am sending
576:25 - this information so it's available
576:26 - inside of my index.html
576:30 - okay that's what I'm doing here and this
576:32 - variable here that I'm creating we will
576:34 - have access to it in the index.html okay
576:38 - so in my index.html what I could do
576:42 - is this is where the dog image it's
576:44 - already telling me that this is where
576:46 - the dog image is supposed to go okay so
576:49 - this is where I'm going to go ahead and
576:50 - put my dog image I'm going to create an
576:52 - image tag
576:54 - and these notes are telling me exactly
576:55 - how to create it
576:57 - and I'm going to say
577:00 - my source in this case
577:02 - is the dog image
577:06 - okay so I'll put double quotes
577:08 - this and I'll say dog image just like
577:11 - that
577:12 - and we'll give it a width of 200 and
577:16 - we'll give it a height of 200 as well
577:22 - okay and then let's give that a try
577:26 - let's go back
577:29 - okay so let's give all of this a try so
577:31 - I'll hit command enter and we'll go here
577:33 - I'll refresh and right now I don't see
577:36 - anything dog related right but let's hit
577:39 - get random dog and let's see what
577:41 - happens and right when I click get
577:43 - random dog
577:44 - our dog shows up
577:46 - okay and this stock shows up and that
577:49 - dog we already have like ready-made you
577:51 - know ready to go and that dog shows up
577:52 - right away
577:54 - so
577:55 - uh so far so good right like so far so
577:59 - good when I run this get random dog when
578:01 - I when I click it initially right it
578:03 - shows me the dog right away so that
578:05 - means our app is working I can restart
578:07 - the server obviously we can go back to
578:09 - our app and we refresh and we're seeing
578:12 - the dog because I'm already on that
578:13 - route get dog but let's say I go back to
578:15 - the home page and you see I see no dog
578:17 - but right when I click get random dog it
578:20 - shows up okay now this styling and where
578:22 - the spinning and everything is coming
578:23 - from we've already created a CSS styling
578:26 - for you where when you add an image we
578:29 - make
578:30 - um we make stuff happen to that image
578:32 - okay so we'll make it so that image will
578:35 - either spin or look a certain way or fit
578:38 - a certain way Etc so all of that is done
578:40 - right dog hover uh that's what's doing
578:43 - that hover effect
578:45 - okay but I don't want you to worry about
578:47 - the what's inside of that Styles file
578:49 - okay so we're putting this in this div
578:51 - with the dog
578:53 - okay
578:54 - so now my dog image is showing up let's
578:58 - go back here but what I need to do is I
579:03 - need to now actually get the dog data
579:07 - okay so let's go ahead and dog image API
579:09 - so let's find dog image API there is
579:12 - dog.ceo
579:15 - and what this does is this will get you
579:18 - a random dog every single time you click
579:21 - it okay so if you hit fetch over here
579:24 - zoom in more
579:25 - okay and the URL is there if you need to
579:27 - go to a dog.ceo dog API
579:31 - okay and if you hit fetch it will just
579:35 - get a random dog for you
579:37 - okay and it will return it to you in in
579:40 - Python this would be a dictionary that
579:43 - has two keys message and status and then
579:46 - those keys have these values so the key
579:49 - we care about the most is the key called
579:51 - message and that's really the URL I
579:54 - don't know why it calls message it
579:56 - should be called the URL okay and every
579:58 - time I run this it creates a new URL
580:02 - and then it shows that image right and
580:04 - that's the image that we need okay
580:05 - that's the image we need access to so
580:07 - I'm going to go ahead and I will copy
580:10 - this that's what we need okay and we're
580:13 - gonna make a request so if you remember
580:15 - we're gonna go ahead and do import
580:17 - requests
580:19 - which is a library
580:21 - and we're going to go ahead and do
580:23 - request.get we'll put this dog image in
580:26 - there we'll say response
580:29 - is equal to that and then I'll say data
580:32 - is equal to response.json and then let's
580:35 - go ahead and print
580:39 - um print that data over here
580:41 - so I'm going to go ahead and rerun this
580:44 - and let's see if we get any errors or
580:46 - what happens
580:50 - and did I get any data
580:53 - okay I didn't get any data yet but maybe
580:55 - once I click the get random dog I might
580:59 - actually get what I'm looking for so
581:00 - here's what I'm going to do I'm going to
581:01 - make this like this and I'm going to
581:03 - take our app and I'm gonna put it like
581:06 - one thirds here and I'm gonna make our
581:08 - coding editor two-thirds so I can just
581:10 - see this here the whole time now let's
581:13 - go ahead and let's see what happens when
581:16 - I hit
581:17 - get random dogs I'll make myself a
581:20 - little bit smaller here and let's watch
581:22 - what happens I'll hit get random dog
581:25 - and right when I hit that
581:28 - you'll notice that I actually got a
581:30 - bunch of data back
581:32 - and I can actually see I got this URL
581:35 - I got the message dictionary and then it
581:38 - tells me here's the URL for the dog and
581:40 - if I command click it it'll open in a
581:42 - new tab and I can actually even see the
581:44 - image of the dog okay so that means that
581:47 - that's clearly working
581:49 - so now all we need to do to get that out
581:53 - is we need to just say
581:55 - data
581:57 - and we need to get the data message and
582:00 - that will just get us the URL without
582:03 - necessarily getting us the entire
582:05 - dictionary okay so let's hit command
582:07 - enter always make sure to restart your
582:09 - server otherwise your changes won't show
582:11 - up okay and in this app on the right
582:14 - hand side I'm going to go ahead and hit
582:15 - get random dog
582:20 - just like that
582:22 - okay and you could see I got back just
582:26 - the URL right here just the URL okay all
582:30 - right now that I'm getting the URL I
582:32 - know that I can just send that image
582:34 - back to my backend and I'll just print
582:37 - it out so let's go ahead and remove this
582:40 - I will say
582:42 - uh this is the dog image and boom it's
582:46 - that's already plugged in so we're
582:48 - giving it the dog image okay and we
582:49 - don't need this dog image variable here
582:51 - anymore the hard-coded one
582:54 - and uh that's essentially it so we're
582:57 - giving the dog image to our front end
582:59 - our front end already knows how to
583:00 - render it right over here okay so let's
583:03 - go ahead and command enter command enter
583:05 - will restart our server you could always
583:08 - also stop and start again so either way
583:11 - should work and now I'll hit get random
583:13 - dog and there we go we just got a random
583:16 - dog let's click it again I got another
583:18 - dog let's click it again I got another
583:20 - dog beautiful now
583:24 - that is working perfectly but what isn't
583:27 - working perfectly is I need to find out
583:30 - a total dogs generated so every single
583:33 - time a user clicks any user clicks I
583:36 - don't care who any single time a request
583:40 - is made by clicking this get random dog
583:42 - a get request is made to our get dog
583:45 - route or get dog function I need to
583:48 - store that in a database and say hey
583:50 - somebody requested a dog which means a
583:52 - new dog image was generated
583:55 - so if I want to do that I need to
583:58 - actually have a number in my database
584:00 - and I need to increment that number in
584:02 - my database so you should actually give
584:04 - that a try see if you could pause the
584:07 - video here and you could get the number
584:09 - from the database okay or you could
584:12 - create the database with replit and try
584:16 - to right and just so you have a hint
584:18 - from replit import DB okay so that
584:23 - should get you the entire database and
584:25 - then the database all it is is it's just
584:28 - a empty dictionary so to use it is very
584:30 - very easy okay that's what DB is it's
584:33 - empty dictionary when when it starts and
584:35 - to use it is very easy if you want to
584:37 - create a new key you could just say
584:38 - total
584:40 - dogs
584:41 - generated or whatever right then
584:45 - um
584:46 - that will just be the key okay total
584:48 - dogs generated and you could set it
584:50 - equal to one and now set it to one or
584:53 - you could increment it by one so see if
584:56 - you could do total dogs generated and
585:00 - make it so in the get doc function it
585:01 - increments it by one
585:03 - make it so you pass that information to
585:06 - your front end and make it so that your
585:07 - front end actually shows that
585:09 - information out here if I go to our
585:14 - index.html file
585:17 - you can already see you have this card
585:19 - Emoji with total dogs all you have to do
585:22 - is pass it data okay where it says zero
585:26 - you need to just pass it a number so
585:27 - what you're going to do once you have
585:29 - your number is you could just do
585:30 - something like
585:32 - you know dogs generated something like
585:34 - that and once you do that everything
585:36 - will already automatically be handled
585:39 - for you okay because this card component
585:43 - knows what to do it just needs three
585:45 - pieces of information and once you give
585:47 - it to it it'll make a card for you
585:50 - okay
585:51 - great so let's go back to here I want
585:56 - you to take five seconds to pause the
585:58 - video and then we'll do this together
586:00 - five four three two one all right let's
586:05 - go ahead and do it together now okay I
586:08 - hope you gave it a try and hopefully you
586:10 - made some progress
586:12 - and even if you didn't get it don't
586:13 - worry because this is you know this is
586:15 - going to be a tricky task and we'll do
586:16 - this together
586:18 - all right so from replit I'm already
586:20 - getting access to my database and so now
586:22 - what I want to do is I want to go here
586:26 - and um just increment my database by one
586:30 - so increment
586:34 - okay so I want to say total dogs
586:37 - generated by
586:41 - one okay but here's the here's the
586:45 - tricky thing right it's possible
586:48 - that total dogs generated might not be
586:52 - um
586:53 - might not be uh created yet as a key so
586:58 - if I'm incrementing a key that has not
587:00 - been created I'm going to get an error
587:01 - so a simple hack I like to do which we
587:04 - did in our last app as well is is uh I
587:07 - will just say if
587:09 - dot total dogs generated not in DB
587:16 - then simply go ahead and set that key
587:19 - total dogs generated
587:23 - to be zero okay so now that we
587:25 - initialize it so we will initialize it
587:27 - but anytime our app runs if
587:30 - this key has not already been created
587:33 - okay
587:34 - once we do that
587:37 - we can increment it by one so that's not
587:40 - a problem and we'll just send that
587:42 - information back okay so we'll go ahead
587:44 - and say
587:48 - uh dogs generated equals
587:52 - DB total dogs generated okay so now
587:56 - we're using the information from the
587:58 - database and storing it in a variable
588:00 - called dogs generated
588:03 - okay or we we could say
588:05 - total dogs generated as well
588:09 - okay
588:11 - um yeah this is fine dogs generate is
588:13 - fine that way it's not too long and
588:14 - doesn't run across multiple lines so
588:16 - it's easier this way okay so I think
588:19 - we're good on this now let's go to our
588:22 - let's go to our front end now so I'll go
588:25 - to our index.html
588:28 - and inside of our index.html let's go
588:31 - ahead and add it so here where it says
588:34 - total dogs I'm just going to go ahead
588:36 - and change that with
588:38 - total
588:40 - dogs generated
588:42 - and let's see if that works
588:46 - let's go ahead and hit refresh
588:49 - okay we got an error
588:52 - let's see if we can put this in quotes
588:54 - and if we will still get an error if we
588:56 - put it in quotes let's try it
588:58 - oh I have to close this out
589:04 - let's give this a try let's refresh our
589:06 - app
589:09 - all right so this is not what we want
589:11 - right it says it it literally says the
589:15 - the ginger templating so that's not what
589:17 - we want so we're gonna remove that ah
589:20 - actually since this is already python
589:23 - because it's in these two squigglies
589:25 - it's Ginger is what they call it but
589:27 - it's flask calls it I could actually
589:29 - just write the variable name here and I
589:31 - can just say total dogs generated
589:33 - because I have access to that already
589:36 - so let's go here and let's refresh
589:40 - okay great
589:44 - um
589:45 - let's see why it's not showing it
589:48 - is it giving us an error so let's just
589:51 - dissect this one at a time so I'm going
589:53 - to go back to our main.py and let's go
589:56 - ahead and hit print and we'll see total
589:59 - dogs generated and let's see what it
590:01 - tells us for total dogs generated
590:05 - um
590:06 - [Music]
590:08 - seems like it's not actually giving us
590:11 - oh yes okay okay okay okay okay okay so
590:15 - the problem that's happening is we need
590:17 - to go to this path get a random dog
590:19 - that's why this will only run when we go
590:22 - ahead and say get random
590:25 - uh dog okay when we click that button
590:28 - click this button right here
590:30 - so let's go ahead and click that button
590:32 - get random dog
590:34 - okay
590:35 - and
590:37 - interesting it still says total dog to
590:39 - zero let's hit it again
590:42 - set it again all right and let's see
590:44 - what our ah dogs generated so let's go
590:48 - back to our index.html and we're gonna
590:50 - call this dogs generated here okay so we
590:52 - were also giving it the wrong variable
590:54 - name so that's what also caused the
590:56 - problem so let's run this now and let's
590:57 - hit get random dog okay and now we can
591:00 - see that total of seven dogs are showing
591:02 - up and then eight dogs and nine dogs and
591:06 - ten dogs but watch what happens when I
591:09 - go to our home page it says nothing is
591:11 - showing up right so what we want to do
591:13 - is in our home page we want to also pass
591:17 - this information okay so what I'm gonna
591:19 - do is let's go here
591:22 - and think about how you can pass dogs
591:26 - generated to also your home page okay so
591:30 - I'll give you five seconds to try and
591:32 - figure that out you should be able to
591:34 - figure that out and it's it should be
591:36 - pretty easy okay
591:37 - so I'll give you five seconds to pause
591:39 - and try it yourself five four three two
591:42 - one all right let's do it together now
591:46 - so it's very simple I'm just going to
591:48 - copy this line because I already have
591:49 - access to the database and I'm just
591:52 - going to do the same thing docs
591:54 - generated is these total dogs generated
591:57 - and let's run this now when I hit
591:58 - refresh it'll show this even on our home
592:01 - page as you can see the URL is the home
592:03 - pages URL okay great so that problem is
592:07 - now solved when I say get random dog
592:09 - every single time and I'll increment
592:11 - this by one
592:12 - and that's already working that is so
592:15 - cool okay now what we need to do is
592:20 - we okay we're Gucci with this right but
592:22 - now our problem is different our problem
592:24 - is this how come when I go to the home
592:26 - page
592:28 - it doesn't show me a dog
592:30 - why is the link broken well because if
592:32 - you look at the home page we're not
592:34 - passing any information about the dog
592:36 - image so when we go here and it's saying
592:40 - uh where did we put the dog image
592:42 - let's see
592:44 - yeah we put the dog image right over
592:46 - here right
592:48 - well this variable dog image is actually
592:50 - not defined so when it's not defined it
592:53 - has no idea what to show so it just
592:54 - doesn't show anything so what we're
592:57 - going to do is
592:59 - how about this whenever we get
593:04 - how about this right so whenever on the
593:07 - client side so our client side
593:10 - somebody makes a request to get the dog
593:12 - so we give them a image of a dog okay
593:15 - this is a dog my drawing is terrible
593:18 - then what we could do is we could
593:19 - actually store that inside of our
593:22 - database
593:25 - okay
593:26 - store that inside of our database
593:29 - and we could store that last dog
593:32 - right the most recent dock that they
593:34 - clicked
593:35 - and then since this is in our database
593:37 - now our back end our server side
593:43 - will have access to this okay
593:49 - it will have access to this if you don't
593:51 - have it stored in the database then
593:54 - there's no way that our server side will
593:56 - actually have access to it because it's
593:58 - not stored anywhere it's just gone that
594:00 - image is just gone so that's the
594:02 - solution that I suggest we use okay it's
594:05 - going to be a simple one
594:07 - and so what we can say here is
594:11 - we'll go ahead and create a new key
594:14 - inside of our dictionary and we'll say
594:15 - last image okay or we can call it last
594:19 - dog
594:20 - and that will be
594:22 - this dog image right here okay that's
594:25 - going to be the last
594:27 - or the most recent dog that we got
594:30 - okay
594:31 - and uh
594:34 - yeah and so that's then since it's in
594:36 - our database Now everywhere inside of
594:38 - our app will have access to it okay and
594:40 - we're just going to write that line for
594:42 - that one too so we're just going to say
594:44 - hey if
594:45 - oh
594:46 - uh last dog
594:49 - last dog is not in the database then I
594:52 - want you to just create it but uh give
594:55 - it an empty string okay so just set it
594:58 - to
594:59 - set it to nothing like no dog so that's
595:01 - what we're gonna do
595:03 - and then let's go ahead and pass this
595:06 - so let's go here and I'm gonna say last
595:10 - dog
595:12 - okay or we can just say dog image is
595:14 - equal to database
595:16 - last dog
595:18 - okay
595:19 - so that's the last dog that the user got
595:22 - right so let's run this now and let's
595:25 - take a look at our app I'll refresh this
595:27 - so now our home page will get the last
595:29 - doc from our database since we didn't
595:31 - have a dog in our database yet you can
595:34 - see that it's empty but let's say I now
595:36 - do get random dog
595:38 - that's the dog that it is stored in our
595:40 - database now watch what happens when I
595:42 - go to the Home Route and we run this
595:45 - we're now still going to see a picture
595:48 - of that dog because that was the last
595:49 - dog that the user got got stored in our
595:52 - database and then we're just outputting
595:53 - it
595:55 - okay so now we're done with the
595:57 - functionality of uh you know
596:01 - being able to ask for a dog and then
596:04 - being able to show the dog on on either
596:07 - to get dog route or the home page route
596:12 - let's also just add a little bit of
596:14 - Border radius to the dog so he looks
596:16 - nicer so again we're not going to be
596:17 - doing too much CSS but this is pretty
596:19 - much
596:21 - um all we're going to tune this is
596:22 - really simple okay so let's go ahead
596:24 - here I'm going to say
596:26 - style and we'll add a little border
596:29 - radius here so I'll just say border
596:31 - radius and we'll give it a 10 percent
596:33 - that should be good
596:36 - and let's refresh here and let's see
596:38 - what it looks like
596:39 - there we go so we got the Border radius
596:42 - so the image looks just a lot cleaner
596:44 - right just to we didn't even have to add
596:46 - too much border radius just that alone
596:47 - should be good all right so at this
596:50 - point of the app all of the global data
596:54 - parts of this app are now completed
596:55 - meaning uh the total dogs is like this
596:59 - global data part of the app that's
597:00 - completed and being able to get this dog
597:03 - on when you click get random dog that
597:06 - part is completed so like the surface
597:09 - level functionality you know or the
597:11 - global app functionality is completed
597:12 - but the entire main functionality of
597:16 - this app actually lies in
597:21 - user-specific information okay so this
597:25 - part is not completed yet that part is
597:27 - not completed yet this part is not
597:28 - completed yet being able to sign up with
597:31 - the new user has not completed yet being
597:33 - able to log out is not completed yet and
597:35 - then showing those specific users and
597:37 - everything is not completed yet right so
597:39 - there's a bunch of functionality that we
597:41 - need to add and all of that
597:43 - functionality is user specific okay it's
597:47 - user authenticated in other words so
597:49 - it's like if that user is not
597:50 - authenticated
597:52 - uh this stuff will not work okay
597:56 - so let's go ahead and add uh stuff in
597:59 - about the user so I'll show you
598:01 - something you can actually uh first of
598:03 - all actually let's do this let's make it
598:05 - so when somebody types in their username
598:08 - and hits login we actually get access to
598:12 - that data okay so let me go ahead here
598:15 - and let's type in a name so I'll just
598:18 - say Kamikaze or I'll say Kazi right and
598:20 - we'll hit login here
598:23 - you can see it says method not allowed
598:26 - and this method is not allowed for the
598:28 - requested URL now let me show you
598:30 - something here because this is going to
598:32 - be an important thing to understand so
598:34 - if I go ahead and I hit inspect and I go
598:37 - into Network okay and make sure that
598:39 - you've chosen all in this case
598:42 - and let's go ahead and hit click a
598:45 - certain page okay so let's close this
598:47 - for a second and I'll hit get random dog
598:50 - all right now let's go ahead
598:53 - and hit inspect
598:56 - and go to network and
598:59 - um just go ahead and do get random dog
599:01 - again or just refresh the page while
599:03 - you're on this URL that says get dog
599:06 - and you can see we're actually making a
599:10 - uh we're actually making a request get
599:12 - dog okay so you could see right over
599:15 - here it says get dog and let me see if I
599:18 - can actually make this a little bit
599:20 - bigger so you could see it
599:26 - okay
599:27 - there we go
599:31 - um and you have
599:33 - you could see that we may get dog and
599:35 - you can see the request method here is a
599:37 - get request method status 200 is means
599:40 - everything is good it's clear it's
599:42 - working
599:43 - and made that request this was the
599:46 - request URL
599:48 - and then it knows as a result of that
599:50 - request there was also a response okay
599:52 - you click this response right here I'll
599:55 - show you like what happened as a result
599:57 - and it popped in that image
599:59 - right
600:01 - and that's what happened this is
600:04 - obviously what the page would look like
600:05 - if it didn't have any styling
600:07 - okay so you could see that that's the
600:10 - that's the response we're getting
600:12 - okay now if I go ahead into this
600:15 - username
600:17 - um and the next one Watch What Happens
600:19 - okay so this is this is how a get
600:21 - request looks like okay we're doing a
600:23 - get request on this now when we're
600:26 - sending data through a form like here if
600:29 - I'm writing cozy and I'm trying to send
600:31 - the data through a form this will not
600:33 - happen from a get request get request is
600:36 - only so you can retrieve information but
600:38 - if you want to send information then you
600:41 - use something called a post request
600:44 - okay so this will get info okay this
600:48 - will
600:49 - send
600:51 - info
600:52 - okay so what what do I mean when I hit
600:55 - get random dog I want to get a dog so I
600:59 - make a get request
601:01 - but when I want to set when I want to
601:04 - sign up a new user I'm getting the data
601:06 - from the user the user is sending that
601:09 - data so that's going to be a post
601:11 - request to our back end okay and watch
601:14 - this
601:15 - when I go ahead and click um login sign
601:20 - up it's going to take me to this page it
601:22 - says method not allowed okay now let's
601:25 - go ahead and hit inspect
601:27 - and let's go to network again
601:30 - okay and let's refresh this exact same
601:32 - page and you will see I get this 405
601:35 - error
601:36 - right here and this will be all red so
601:38 - let's click this and it's saying hey the
601:41 - request method was a post the status
601:43 - code with a 405 meaning like not found
601:45 - or error basically okay so 405 this is
601:49 - so it's a method not a loud error that's
601:52 - usually what that means I believe and it
601:55 - happened at this URL okay
601:58 - so now we need to think about
602:00 - well you know what the heck happened and
602:05 - you know how how do we uh stop this from
602:07 - happening now you might be asking the
602:10 - question well how come one button
602:14 - get random dog sends a get request
602:19 - but clicking the login sign up button
602:21 - sends a post request how come they are
602:25 - sending different requests like how come
602:27 - this is get
602:29 - and then this uh this button right here
602:32 - is post how's that happening well the
602:36 - answer lies in the HTML part of the code
602:39 - so if I look here and we find this login
602:42 - button so I'm going to hit uh get random
602:45 - dog so this button here
602:48 - right we're passing the action slash get
602:52 - dog by default
602:55 - the method that's being used whenever
602:57 - this is a situation
602:59 - uh is that it's a
603:03 - it's a get request so here this is a get
603:07 - request that's happening okay that's the
603:09 - default Behavior
603:11 - over here where we're saying login slash
603:14 - sign up right over here if you actually
603:16 - look at the form the action is route to
603:19 - the home page but the method is actually
603:22 - post
603:24 - okay so the method is a post request
603:26 - that's what's triggering it so in other
603:29 - words I could actually take this here
603:31 - and say method is equal to
603:34 - get and it wouldn't really change
603:36 - anything because by default if you don't
603:39 - write this this line is already there
603:41 - okay so having this or this is the same
603:45 - exact thing
603:47 - but I'll just leave it there so it's you
603:50 - know you could cross compare it
603:51 - so here we have in this login form we
603:56 - have the username placeholder thingy and
603:59 - then we have the button so you could
604:01 - actually click that button and then you
604:03 - know since it's a post request it has
604:05 - the ability to send the data over to our
604:07 - server now here's how we retrieve this
604:09 - data so when we go here to our main.py
604:13 - let's go here to our app route now
604:17 - that method it said is not allowed right
604:19 - so we want to do is we can send in
604:20 - methods
604:22 - and we want to say you we should allow
604:23 - the get method and this route will
604:25 - actually allow the post method now let's
604:28 - run this app and let's click login and
604:31 - sign up and let's just see what happens
604:32 - and what's the error it gives us
604:35 - so when I did that watch what happened
604:37 - it didn't give us an error this time
604:41 - right let's click it again log in and
604:43 - sign up no error
604:45 - so what did it do well it detect it said
604:48 - that this method is loud and then it
604:50 - just went ahead and rendered the home
604:51 - page okay but since we have a post
604:54 - request happening we want specific
604:56 - things to happen we want to be able to
604:57 - retrieve the data that the user just
604:59 - gave us
605:00 - so what I can actually do is I can say
605:03 - if
605:06 - request and request this is global uh
605:09 - variable that all of the flask app has
605:12 - access to and so if you run it inside of
605:14 - a
605:16 - like a route here and you do requests
605:19 - you'll get access to things like what
605:21 - the user passed in as you know query
605:23 - parameters or what the user passed in
605:25 - through a form you can access all of
605:27 - that and so we can also detect methods
605:30 - so if request method is equal to post
605:32 - then I want to say print
605:37 - you clicked the login slash sign up
605:41 - button okay
605:44 - so let's just go ahead and try that so
605:46 - I'll command enter so our server
605:48 - restarts and takes changes I will open
605:51 - this up so I can see everything being
605:53 - printed out and then we'll run this ah
605:56 - request is not defined so we want to do
605:58 - is we want to grab requests from flask
606:00 - so let's go ahead and grab request okay
606:02 - let's hit command enter
606:04 - restart our server here
606:07 - okay let's go back and now we shouldn't
606:10 - have any errors coming up
606:13 - now if I hit log in and sign up you
606:16 - could see if I click it you could see
606:19 - over here it said you click the login
606:21 - sign up button
606:23 - right over there
606:24 - okay you click the login sign up button
606:27 - okay
606:28 - so that means I'm detecting The Click
606:31 - happening now I need to actually get the
606:33 - user form so I can actually say print
606:35 - request dot form and we can ask it for
606:39 - the username okay and we're going to say
606:42 - user underscore name now where is this
606:45 - username thing coming from this has to
606:47 - do with our front end so if we go here
606:48 - we said that this input is going to have
606:51 - the name of user underscore name so if
606:53 - we want to pull the value out of this we
606:56 - need to make sure that in our back end
606:58 - we also say user underscore name just
607:01 - like this okay so now let's go ahead and
607:04 - open this up and we'll run this hit
607:08 - command enter to run it and then we'll
607:10 - type in a user here
607:14 - okay so let's go ahead and say quasi and
607:17 - I'll say log in and sign up and you
607:19 - could see that it's pulling the data
607:21 - from The Forum now so we can actually
607:23 - now get input from the users right that
607:27 - is awesome so now I can see it can say
607:30 - okay you click the sign up button and it
607:32 - says cozy over here
607:35 - okay so this is a really good sign it
607:38 - means we have made a ton of progress all
607:41 - right now that we're getting the user
607:43 - what we could do is we could actually
607:45 - store that session so I'm gonna go here
607:47 - I'm just going to comma session I'm
607:49 - going to import uh also get access to
607:53 - each session inside of flask and
607:55 - sessions are kind of like cookies to
607:58 - store data about the user okay and now
608:02 - in the session I can just go ahead and
608:04 - say session
608:06 - user okay or username whatever you want
608:09 - to say and I'm gonna go ahead and do
608:12 - this say username is equal to
608:15 - whatever the user puts in the form okay
608:18 - so if the user makes a post request and
608:20 - submits this form
608:22 - whatever user the name they put in that
608:25 - becomes your username and then restore
608:27 - that inside of our session
608:30 - okay so that becomes a username we store
608:31 - that inside of the session Okay now
608:33 - what's cool about session is
608:36 - our app has Global access to this
608:39 - session thing which means that I can
608:42 - actually go to our index.html here and
608:45 - just call session without even needing
608:47 - to pass session through
608:50 - um through my template okay so let's go
608:53 - to index.html
608:54 - and here where I was passing the word
608:57 - cozy instead I'm just going to go ahead
609:00 - and say session user just like that
609:05 - okay so let's go back
609:08 - and let's re-run this app so I'm going
609:10 - to hit command enter
609:12 - okay so we restart the server and let's
609:14 - go ahead and try saying my name is David
609:17 - and let's see if this changes over here
609:19 - so I'll say David
609:21 - okay we got an error ah so whenever
609:23 - we're setting sessions we need a secret
609:25 - key okay our app will need a secret key
609:29 - so we'll just go ahead and set it up if
609:32 - you're getting this app you should
609:33 - already have the secret key set up for
609:36 - you and some other variables in there
609:38 - but I'm going to be writing this from
609:40 - scratch so you could just understand
609:41 - better what's going on
609:43 - so basically here I'm gonna go ahead and
609:46 - set my secret key okay so I'm gonna say
609:48 - app
609:49 - dot secret key and I'm going to say very
609:53 - bad secret key
609:56 - okay if you want to use actual secret
609:58 - Keys what I recommend is Rebel it has
610:01 - something called environment variables
610:02 - so you could store a secret key there
610:05 - and then you could retrieve it from here
610:08 - okay and they have docs too if you want
610:11 - to go see how to use sensitive
610:13 - information
610:14 - and they have OS dot Environ
610:17 - right and then you can actually type in
610:20 - whatever password you wrote
610:22 - so that would be a pretty good way to
610:24 - keep it secret and as a matter of fact
610:26 - we could actually even do that right
610:27 - here so I could say OS dot Environ
610:31 - okay and if we look at the docs the docs
610:35 - tell us to
610:37 - do this right the docs tell us call this
610:40 - function
610:42 - and then uh or not sorry to call this
610:44 - function it's a dictionary so index it
610:46 - and then I'm just going to say
610:49 - flask key okay I'll say flask Secret
610:56 - key
610:57 - I guess we'll say that and then here I'm
611:00 - just going to put
611:01 - very
611:03 - bad secret key
611:08 - okay that's it and I'll add this as a
611:11 - new Secret
611:13 - flask secret key
611:15 - now
611:17 - if you're gonna store a secret key do it
611:19 - like that that'll store it safely that
611:21 - way anybody viewing your code will not
611:23 - actually know what your secret key is so
611:25 - you could actually keep it hidden
611:26 - rapplet makes this very very easy for
611:28 - you
611:29 - but yeah right now we're just doing
611:31 - dummy data stuff so that's why we don't
611:33 - need to have put like a actual you know
611:36 - 64-bit or you know 256 bit Shaw hash
611:41 - cryptographic secret key we could just
611:43 - put a pretty bad key
611:45 - and we'll be fine all right and then
611:48 - what I want to do is I'm going to do
611:50 - app.config
611:52 - and I want to say session so since
611:55 - replit has an iframe that they're using
611:57 - here sometimes cookies don't work
611:59 - properly so if we go ahead and do
612:01 - session cookie same site that'll solve
612:04 - that problem okay
612:06 - none and then we're going to go ahead
612:08 - here and I'm going to say I have a
612:10 - cookie config so this session
612:14 - cookie secure and we'll say true okay
612:18 - and that's done this these lines are not
612:20 - even really necessary this is just so in
612:22 - the replit iframe if you're running your
612:24 - app it works the main thing was just
612:26 - setting the secret key here okay without
612:27 - this you can't have sessions
612:30 - so let's hit command enter let's refresh
612:33 - our app and let's see what happens
612:37 - okay I think we got an error let's see
612:40 - what's the error we got so it says OS is
612:43 - not defined so let's go ahead and Define
612:44 - that and at the top here we can just go
612:47 - ahead and import OS just like that
612:50 - okay so let's run this
612:52 - and let's see what the error is now okay
612:55 - now it says app is not defined okay no
612:58 - problem so we're going to go ahead here
613:00 - and put that as one of the first lines
613:02 - of the code
613:04 - okay and now we shouldn't be having
613:07 - errors great let's go ahead and refresh
613:10 - this
613:12 - there we go you could see it says David
613:14 - okay now let's go ahead and change it to
613:17 - Cozy and if I hit login sign up you can
613:20 - see it says cozy and let's go ahead and
613:22 - say ninja
613:23 - and I'll hit enter and now you see Ninja
613:26 - here okay and there's something deeper
613:29 - that's happening okay so for example if
613:31 - I refresh let's say I go ahead to this
613:34 - link and I just refresh right
613:37 - if I do that the name is still there if
613:40 - I hit get random dog the name is
613:42 - actually still there what the hell is
613:44 - happening how are we making this happen
613:47 - the secret lies in what's what happens
613:49 - if you hit inspect and you go to
613:52 - application here okay and inside of
613:55 - application you'll see we have session
613:58 - storage and we have cookies okay so
614:02 - let's go ahead into our
614:05 - session into our cookies here
614:07 - okay
614:08 - and inside of our cookies we can see
614:11 - that we have this session
614:13 - okay this session is storing all of the
614:17 - value okay this inside of this session
614:20 - is where we're storing our user and
614:23 - everything so as long as you have access
614:24 - to that session right there you'll have
614:27 - access to everything that that session
614:30 - sees okay so if you store a key in there
614:32 - you'll have access to that session and
614:34 - let's see the expiry date over here okay
614:38 - it's kind of like cookies
614:41 - okay uh the expire it pretty much never
614:44 - expires okay it runs for a really long
614:46 - time so that means even if you refresh
614:49 - you'll you should still see this as long
614:51 - as your session is up okay and I believe
614:54 - until you close out your Chrome browser
614:57 - or something like that or your Safari or
614:58 - whatever you're using and you come back
614:59 - so that's what it's where it's stored
615:01 - it's stored in like a local storage
615:03 - cookies uh inside of your browser and
615:07 - that's how it actually stays there even
615:10 - after some time
615:11 - okay so that's why we used
615:15 - um
615:15 - that's why we use sessions there all
615:18 - right now that the user is signing in
615:21 - and I'm able to retrieve that user's
615:24 - information what I'd actually like to do
615:26 - is store that user inside of my database
615:28 - and that way we could have a big
615:31 - database uh with you know so just
615:34 - imagine a giant dictionary with
615:37 - um every single user that's ever signed
615:39 - in
615:40 - okay and information about them so
615:43 - essentially how I would want my users to
615:46 - look like is Imagine This I imagine I
615:48 - had users
615:50 - and they would be it would be a list of
615:53 - dictionaries so like this
615:57 - okay and then each of those users would
616:00 - have some information about them so for
616:02 - example I'll have their username
616:06 - uh they would have you know so let's say
616:09 - qazi they would have logins
616:13 - okay so that let's say that would be you
616:16 - know One login or whatever and then they
616:19 - would have
616:22 - they would have dogs generated okay so
616:25 - like the dogs that they generated and
616:27 - that might be you know five or whatever
616:30 - and we would have each dictionary here
616:33 - would represent the user so let's say
616:35 - David has like four logins right
616:39 - then we have another user and their name
616:41 - is Kevin and they have like 12 logins
616:46 - and then their dogs generated is like 27
616:49 - or something right so this is how I want
616:52 - my users to look like
616:54 - and then I want to be able to Loop
616:56 - through the users and get you know get a
616:59 - user update a user change their record
617:01 - delete them whatever I want to do right
617:03 - so that's how I would want to do it I
617:06 - would want to have a list of users just
617:09 - like this and each dictionary
617:10 - representing a user now what I would
617:12 - want to do is I'm going to store this
617:14 - inside of a database okay I don't want
617:17 - to just store this in a dictionary
617:19 - because while that is nice
617:22 - um after I refresh all that information
617:24 - is just going to vanish and so I don't
617:27 - really want all my information to just
617:30 - vanish right that's not fun
617:32 - so let's go ahead and use a database so
617:35 - what I will say is in my database I'll
617:37 - create a collection called users
617:40 - okay
617:41 - and users will have
617:45 - um
617:46 - have some data okay and we want to add
617:50 - if we want to add a new user well how we
617:53 - would add a new user is we would
617:55 - actually go to our users
617:57 - okay and we will append
617:59 - a new user and when we append we'll need
618:02 - to essentially append a dictionary just
618:04 - like this okay so remember since this is
618:08 - a list I can call Dot append on it and
618:12 - so when I call an append I can add a
618:14 - user to it okay so if you're having
618:15 - trouble visualizing some of this don't
618:17 - worry
618:19 - let's open up our shell and let's just
618:22 - write some python code here so you can
618:24 - see what we're talking about okay so I
618:27 - will go
618:28 - like this and let's zoom in a little bit
618:30 - so you could see clearer
618:34 - okay
618:35 - so let's go ahead
618:37 - all right let's go ahead and say
618:41 - um
618:42 - let me zoom in more so it's even easier
618:44 - to read
618:49 - just like that okay now let's say I have
618:53 - a database okay and I'll make it an
618:56 - empty dictionary just like this now
618:58 - inside I did inside of that database I
619:00 - want to have a list of users so
619:01 - initially I'm just going to create it
619:03 - and we'll set it to this so now when I
619:05 - do DB you should see DB has users and
619:08 - it's empty so it's an empty collection
619:10 - right now
619:11 - now if I want to have access
619:14 - um you know users I want to add a user I
619:17 - could just go DB dot append
619:19 - right and then I can DB users if I do
619:24 - this it should give me back that empty
619:26 - list now if I want to append to that
619:28 - list I could just go a DOT append just
619:30 - like this and I can give it a user to a
619:33 - pen so I'll just give username
619:35 - qazi
619:38 - and then logins
619:40 - two and then we will say
619:45 - uh
619:47 - dogs generated I will say seven
619:54 - all right there we go now when I do DB
619:56 - users
619:57 - I will see that I have that user quasi
620:00 - in there okay now if I want to get
620:02 - information about the user I could go DB
620:05 - users and I could say
620:07 - you get me the zeroth user okay if we
620:10 - have multiple users get me the zeroth
620:12 - user so let's try adding more users so I
620:16 - will say I will also add David
620:18 - you can just hit up up on your keyboard
620:21 - and it should bring this up and I'll
620:23 - also add Kevin
620:26 - okay now when we do DB users Watch What
620:29 - Happens I get all of this data right
620:31 - here
620:33 - okay
620:34 - uh let me zoom out here and zoom
620:39 - here now as you can see better
620:42 - there we go okay
620:45 - so now that's what DB users returns to
620:49 - me right it's a list of users so if I
620:51 - call type on DB
620:54 - DB users you can see that it's a list so
620:57 - since it's a list I could even I could
620:59 - Loop through it I could also index it so
621:02 - I could go DB users and if I ask for the
621:05 - xeroth guy well that'll get most likely
621:08 - cozy
621:13 - now if I did DB users and I said zero
621:18 - you can see it's giving me Kevin okay if
621:22 - I go ahead and do one your your zero
621:24 - might be different than mine because my
621:26 - computer crashed and I had to redo this
621:28 - again so that was fun
621:29 - okay but uh yeah so but idea is that it
621:33 - should be giving you some users okay
621:35 - I'll do user three I ended up creating
621:37 - more users
621:39 - okay I I have like four total users
621:41 - right and so it'll it'll show you those
621:44 - users now if I want to grab a specific
621:46 - user and update one of their properties
621:48 - well what I could do is I could go ahead
621:50 - and do username
621:52 - and set that equal to
621:55 - uh
621:58 - let's just say a fire emoji
622:01 - okay so now if I print out DB users you
622:05 - could see that there's a user with the
622:06 - username of fire emoji
622:09 - uh just put quotes around if you if you
622:11 - do use an emoji make sure to put quotes
622:13 - around it but you could see that now we
622:16 - got a guy with the fire Emoji so that
622:18 - name has been changed okay so this is
622:20 - how it interface with it
622:22 - uh this is how I would you know add to
622:26 - it this is how I would uh update data
622:29 - inside of it
622:30 - Etc so keep these notes available for
622:34 - yourself because this information is
622:36 - going to be really valuable helpful and
622:38 - important
622:40 - um
622:41 - when we're creating our database
622:44 - okay all right now when we're creating
622:48 - our users we need to create that inside
622:51 - of our database
622:52 - okay so I'm going to go ahead and say DB
622:55 - users and when it's not initialized I
622:58 - need to just go ahead and initialize it
623:00 - so I'm just going to go ahead said if
623:01 - users not in DB
623:03 - then just go ahead and say DB users and
623:06 - set it to an empty list just like this
623:08 - okay so this is going to be the default
623:10 - state that we're going to have for this
623:14 - and then here I'm going to go ahead and
623:16 - say
623:17 - let's go down here so once the user
623:20 - signs in we're going to go ahead and say
623:22 - DB users and I'm simply going to append
623:25 - so we're going to append and we're going
623:27 - to append that user
623:29 - okay so when I think about that user
623:32 - well that user at this point is going to
623:35 - be you know their username
623:37 - is going to be
623:39 - uh the username they gave us because
623:41 - that's already stored here
623:45 - um and then
623:47 - we're gonna go ahead and check there
623:51 - logins and we're gonna so since it's a
623:53 - new user right so this is for a new
623:57 - new user okay we're going to set their
624:00 - logins to one
624:02 - and we will also
624:08 - set their dogs generated to
624:13 - zero because right now they haven't
624:15 - really generated any dogs they just
624:17 - signed up they haven't like hit get
624:19 - random dogs yet right that's all they
624:21 - have done so we're going to set that to
624:23 - zero and so in our users database now
624:26 - that user should be there
624:30 - okay but you're gonna see that we're
624:32 - gonna run into a problem pretty quick
624:33 - with this so let's go ahead and do
624:35 - command enter and I'm also going to open
624:38 - up our shell
624:40 - and inside of our Shell let's just clear
624:43 - all of this out I'll write python I'll
624:46 - hit delete at the top and I'll type in
624:48 - Python so you can see this okay and now
624:50 - let's go ahead and
624:52 - do from replit import DB so we get
624:55 - access to our database in this
624:57 - environment
624:59 - okay and if I show you the DB right now
625:01 - there shouldn't be much inside of it
625:04 - okay like let's go ahead and do DB dot
625:07 - keys so we can see all the keys that are
625:09 - there so right now there's only uh
625:12 - there's a last dot key there's a total
625:14 - dogs generated key and users key so
625:16 - let's go ahead and take a look at users
625:18 - okay and so far we don't really have
625:22 - um any users yet okay inside of our
625:25 - database and that's what we wanted
625:28 - now let's go ahead and
625:31 - create a new user so I'll say Kevin and
625:34 - I'll hit log in and sign up okay now
625:36 - this should be updated to Kevin here
625:38 - let's go ahead and run that line again
625:40 - and you can actually see that Kevin was
625:42 - added to the database that is very good
625:45 - so look at that we're already being able
625:48 - to add users to our database that is
625:50 - exciting
625:52 - let's go ahead and add cozy and let's
625:54 - see what happens I'll hit log in sign up
625:56 - let's go hit up and enter and now you
625:58 - can see we have two users so this is an
626:01 - observed list kind of ignore some of
626:03 - this Parts observe dick but all it is
626:06 - the list and this is a dictionary okay
626:08 - and then here in this dictionary here in
626:11 - this list here there's two items so
626:14 - let's see if we can um
626:17 - call length on this or maybe it doesn't
626:20 - allow us to call length let's see yep so
626:22 - we can see that there's two users in
626:24 - here okay and I can also just go ahead
626:27 - and do users of zero and it'll give me
626:29 - the first user which is Kevin and if I
626:32 - do a one it'll give me the second user
626:33 - which is qazi
626:35 - and yeah so I could see both of the
626:37 - users are there with all of their
626:38 - information logins is set to one doc
626:41 - generated is set to zero so that's good
626:43 - so far but here's the problem what
626:45 - happens if I sign up with Kazi again
626:47 - okay and this is case sensitive so let's
626:51 - say I sign up with Kazi again let's hit
626:53 - sign up
626:54 - and let's go and print out our database
626:57 - and you can see we got three users now
627:01 - what
627:02 - we got three users so what there's two
627:04 - causes you know our goal was to
627:07 - make sure that everybody has a unique
627:09 - username so if you sign in with the same
627:13 - username right in our in our final
627:15 - working app if you sign in
627:18 - with the same exact username
627:20 - so let's go ahead and do qazi here it
627:23 - will be a login
627:25 - okay
627:26 - and if you sign up with and it won't
627:28 - reset all your data it'll keep it at 11
627:30 - 52 all of that but if you sign in with a
627:34 - new username
627:35 - and you hit log in
627:39 - um you could see that it resets your
627:41 - data right login One log dogs you
627:44 - generated is one as well
627:45 - okay so let's go ahead
627:48 - leave this signed in okay and let's go
627:51 - back to our app that we were building
627:52 - Okay so
627:54 - huh why when I do quasi this is
627:58 - happening so what we want to do is we
628:00 - want to make sure that that doesn't
628:01 - happen so how do we do that well we need
628:04 - to actually I'm going to remove this
628:06 - because you don't need that anymore
628:08 - what I need to do is actually need to
628:09 - make sure of the following
628:13 - okay
628:15 - when a new user when a user signs up or
628:20 - logs in so basically when the user hits
628:23 - when user clicks this button right so
628:26 - when
628:28 - user clicks login sign up here's what
628:31 - needs to happen
628:33 - check if that user already exists
628:37 - okay that's step one
628:40 - and then two if that user already uh if
628:44 - and okay so let's say that that user
628:47 - exists okay so I'll put it under here
628:49 - if that user already exists then what we
628:53 - want to do is
628:55 - we're going to
628:57 - select that existing user okay
629:03 - we're not going to append anything we're
629:05 - just going to pull that user out of our
629:08 - list of users okay
629:10 - select this is from our list of users
629:15 - otherwise
629:20 - um if it's a new user if it is a new
629:24 - if the user does not exist already AKA
629:31 - new user so if it's a new user
629:34 - well then I want you to go ahead and
629:37 - append create and append
629:41 - that user
629:44 - to the database
629:47 - okay so this is really the logic that
629:50 - we're actually trying to do so we can't
629:52 - just like mindlessly put a new user
629:55 - without checking if that user already
629:58 - exists so what I want to go ahead and do
630:00 - is I want to check if user already
630:03 - exists okay so how do I check well
630:08 - look at this let's go ahead to our
630:10 - python rubble and here if I do DB users
630:13 - I get all these users here right so if I
630:15 - want to check for a specific user in
630:17 - here I can actually use filtering which
630:20 - is very powerful so let's say I'm
630:22 - looking for a user
630:25 - um
630:25 - you know let's say I'm looking for qazi
630:28 - okay what I could say is I could say
630:33 - get me the user for user in
630:38 - DB users okay so Loop through so this is
630:42 - the for Loops it's like Loop through
630:44 - every users and users
630:46 - okay
630:47 - and
630:49 - what I want you to do is only get them
630:52 - to me if users username
630:54 - [Music]
630:56 - is equal to
630:59 - cozy
631:02 - okay it's exactly equal to cos if that's
631:04 - the case then get that user for me so
631:07 - what it's going to do is going to filter
631:08 - this entire list and get me where the
631:10 - name is qazi so let's run this and now
631:13 - when I show this it's giving me two
631:16 - people but both of them have the name
631:18 - Causey in there so it's filtering it out
631:20 - okay
631:21 - in a normal list
631:23 - we would not have this other qazi in
631:26 - there the second quasi that we have we
631:28 - would not have then in a different
631:30 - database okay let's try this same thing
631:32 - for Kevin now so you should give this a
631:34 - try okay see if you could get Kevin
631:38 - here okay give that a try I'll give you
631:41 - five seconds to pause and try it five
631:43 - four three two one okay so we're just
631:48 - gonna go ahead and say
631:51 - so this is saying Loop through for the
631:55 - user and users if the user has Kevin
631:57 - inside of it then just give me that user
632:00 - object okay or give me that User
632:02 - Dictionary so let's go ahead and do this
632:04 - let's try to type in Kevin and you can
632:06 - see that list is being filtered out and
632:08 - we're only getting Kevin back so that's
632:10 - how we can actually check for a
632:14 - user
632:16 - okay so I'm gonna go ahead and pretty
632:19 - much copy paste that code
632:21 - okay and what we're going to do here is
632:26 - instead of a hard-coded Kevin here
632:29 - we're gonna put with the user we're
632:31 - gonna check for what the user just typed
632:32 - in as their username okay so that
632:35 - variable is already called username so
632:37 - we're going to take that variable and
632:39 - put that there instead of Kevin instead
632:40 - of hard coded Kevin so I'm going to say
632:43 - username
632:45 - just like that
632:47 - okay
632:49 - so
632:50 - um
632:51 - what will happen if it doesn't exist
632:53 - let's also go ahead and see that so
632:55 - let's look for a name that doesn't exist
632:57 - so I'm going to go
632:59 - and remove this and then just say Lance
633:02 - because Lance I know does not exist
633:06 - okay oh there's an indentation problem
633:09 - if somebody doesn't exist it's going to
633:11 - give you an empty list and if you call
633:12 - Bool on an empty list it's going to give
633:14 - you false okay so if a list is empty by
633:17 - default it's false and if a list has
633:20 - something in it
633:22 - like haha or something it's going to be
633:25 - true this is going to be helpful for our
633:27 - if then statement that we write here
633:29 - okay so we're going to say if
633:34 - uh the user exists that's what this is
633:36 - saying if the user exists
633:38 - then I want you to say
633:42 - for now I'll just say user already
633:45 - exists okay if not then I want you to go
633:51 - ahead and append the user
633:53 - okay
633:54 - and I'll say print
633:57 - uh new user
634:00 - okay and we'll put ta-da here
634:04 - and we'll put an exclamation mark here
634:06 - so it's easier to see it in our print
634:07 - statements let's hit command enter so
634:10 - these changes do take place
634:13 - okay and in our app
634:16 - here I'm going to
634:20 - say quasi and let's hit login slash sign
634:23 - up
634:24 - and you could see it says
634:26 - user already exists it's telling me
634:29 - right there
634:31 - okay let's go ahead and now type in
634:33 - Lance
634:35 - okay
634:37 - and it says you click the blah blah
634:40 - button new user and now you can see
634:42 - Lance is showing up here and now watch
634:44 - what happens if I hit Lance again and I
634:46 - do log in and sign up so now it's
634:48 - detecting it as a login there we go
634:50 - rather than a sign up okay so now it
634:53 - says user already exists it already
634:55 - knows that that's Lance Okay so
635:00 - um so yeah we're able to actually detect
635:03 - if the user exists now what happens if
635:05 - the user already exists well we don't
635:08 - really need to do much we just need to
635:10 - update their logins that's really it
635:12 - right so if a user who's already signed
635:16 - up logs in again and if we look at our
635:18 - main app we just need to increase
635:20 - increment their number of logins
635:24 - so how could we do that
635:26 - well
635:27 - we can go grab that user right so that's
635:30 - that user right here okay so let's go
635:33 - ahead and say
635:36 - so I can actually say user is equal to
635:39 - that
635:40 - and remove that colon from there and I
635:42 - can say if
635:43 - user
635:46 - so this will grab the user it'll either
635:48 - return an empty list or it will return a
635:52 - list with that user okay so we're going
635:55 - to say if user print user already exists
635:59 - and will actually print out
636:03 - information about the user by doing user
636:06 - of zero
636:09 - okay and then what we want to do is we
636:11 - want to grab that user's logins and we
636:15 - want to increment them by one
636:17 - okay so let's go ahead and
636:21 - paste the print statement after the
636:23 - login so we can see the new updated
636:25 - login so let's go ahead and hit command
636:28 - enter here
636:29 - and we'll open up this and we will
636:34 - now go ahead and type in Lance and I'll
636:37 - hit log in and sign up okay we got an
636:39 - error it says list indices must be
636:42 - integers or slices not string
636:46 - so let's see ah yes so we want to go
636:49 - ahead and say user
636:55 - uh
636:57 - user of zero right so the user that we
637:00 - found that specific user's logins
637:04 - we want to increment that by one
637:11 - okay so let's go ahead and give that a
637:13 - try
637:17 - so let's go ahead and open this up I
637:20 - will say Lance here and we will hit
637:22 - login
637:25 - okay and it says user already exists
637:29 - okay let's go ahead and type in Lance
637:32 - again
637:36 - all right
637:37 - so let's see what's happening here is it
637:40 - printing that out print
637:42 - user of zero yes it is and so you could
637:45 - see
637:48 - it's saying user already exists and then
637:50 - it prints out the users you could see
637:52 - the user initially was at two logins and
637:55 - then we print them out again and there
637:57 - are three logins and then there are four
637:58 - logins
638:00 - right so that means that the number of
638:02 - logins is incrementing correctly
638:09 - now to make our lives easier so we don't
638:12 - keep having to say user of zero what we
638:13 - could say is we could say user is the
638:16 - following user is
638:21 - um so we're going to redefine user here
638:23 - and I'm going to say it's user of zero
638:28 - if
638:29 - user exists if we found somebody and if
638:33 - not then we're just going to say user is
638:36 - none okay so it's either the first guy
638:38 - in the list that we get back here after
638:40 - we filter the list or if it's empty then
638:43 - we just return none so this user is
638:47 - either going to be
638:49 - uh
638:51 - a user like this with a username and
638:53 - blah blah blah blah blah blah blah okay
638:56 - so it's either going to be a dictionary
638:57 - or none
638:59 - okay like that
639:02 - so we can remove the zero here now and I
639:06 - can remove this zero here now too
639:08 - because I'm deconstructing the user from
639:11 - that list
639:12 - okay
639:14 - and let's run this
639:17 - and I will go ahead and
639:23 - say Lance here and we will hit login and
639:25 - sign up you can see it says user already
639:27 - exists logins five and it's working
639:30 - correctly
639:32 - okay great so there we go a lot of that
639:36 - functionality that we wanted to add is
639:38 - now you know pretty much completed
639:41 - it check if a user it checks if a user
639:44 - already exists
639:45 - if they do exist then it goes ahead and
639:50 - um
639:52 - and increments them right if they don't
639:55 - exist then it goes ahead and appends
639:58 - them
639:59 - okay so now what we could do is we could
640:01 - turn this into a nice little function so
640:04 - we don't always have to come to home and
640:06 - see this big giant definition which can
640:08 - look intimidating and honestly sometimes
640:11 - confusing
640:13 - so we could actually say Define
640:17 - create
640:19 - or update
640:22 - user okay
640:25 - and I'm going to Define this function
640:26 - all the way at the bottom so not here
640:28 - okay so let's go ahead all the way at
640:30 - the bottom here
640:31 - and I'm going to create a new function
640:32 - and it's going to just be called
640:35 - and this is going to be a regular
640:36 - function so it's not going to be a
640:37 - routing or anything like that
640:39 - we'll say create or update user I'll
640:43 - take in user
640:45 - and then the definition of this function
640:48 - it'll do this okay I'll copy that and
640:51 - I'll paste that in here
640:53 - okay and um
640:55 - indentation problems will happen so just
640:57 - go ahead
640:58 - backspace delete everything I'm doing
641:02 - yeah just backspace everything correctly
641:07 - okay backspace delete and then this else
641:10 - is going to be on this same level right
641:13 - there
641:14 - okay
641:16 - so I'm actually holding command and then
641:18 - I'm hitting delete on my Mac you could
641:21 - probably hold Ctrl and hit backspace or
641:23 - something on your windows and then
641:25 - hitting delete one more time to come
641:27 - here and then hit enter command delete
641:29 - delete enter
641:32 - command delete delete enter command
641:34 - delete delete enter command delete
641:35 - delete enter command delete delete enter
641:37 - there we go
641:40 - okay
641:42 - um so there you go okay so now we've
641:45 - created this function Creator update
641:47 - user
641:48 - and it will take in a username so we're
641:52 - going to go ahead and say user
641:54 - underscore name okay so this function if
641:57 - you just give it a username it will
641:59 - automatically know how to find that user
642:03 - and then once it finds that user it will
642:05 - either update their logins or it will
642:10 - create the new user inside of the
642:12 - database
642:13 - so that's what this function does create
642:15 - or update user
642:18 - so we're going to replace all of this
642:21 - code right here
642:22 - and delete it so now our functions
642:25 - everything should look very similar and
642:27 - we're just going to say create or update
642:29 - and give it the username and never have
642:31 - to worry about the logic anymore because
642:33 - the logic is already done okay so once
642:36 - the new user signs up
642:38 - then we create or update that user in
642:40 - our database
642:42 - that's it
642:43 - okay so let's go ahead and check
642:47 - if this is working correctly so I'm
642:49 - going to open up my python here
642:52 - let's go to shout let's run this and
642:55 - let's see if we're getting any errors or
642:56 - anything like that okay I'm not getting
642:57 - any errors let's go to our shell
643:00 - okay I will delete this right here and
643:03 - then we'll just say from ruplet import
643:05 - DB so I can take a look and then let's
643:08 - go ahead and create a new guy called
643:10 - cookie and we'll hit this
643:12 - and now I'll do DB users
643:15 - and um let's see if we find Cookie yep I
643:18 - see cookie with logins of one okay let's
643:21 - have cookie log in again and I'll do DB
643:24 - users and we could see cookie logins too
643:28 - okay so no problems there that worked
643:30 - perfectly so being able to create a new
643:32 - user works and updating an existing user
643:36 - works because you notice it didn't
643:37 - create another cookie it kept the same
643:40 - cookie guy and just incremented right so
643:43 - for example if I update Lance if I log
643:45 - in Lance Lance should update and not get
643:48 - created so if I do Lance login now when
643:52 - I run this
643:54 - you'll see Lance logins of six okay but
643:57 - if I do pants a new person and we do
644:00 - login and I do DB users you will see
644:03 - that pants here has a login of one so
644:06 - it's a new user that was created
644:09 - so the ability to create a new user is
644:13 - now working perfectly okay Creator
644:16 - update user and now that that
644:18 - functionality is working and we have
644:20 - that user inside of our database now we
644:23 - can actually start passing that user
644:25 - around that information we could
644:27 - actually pass it around
644:29 - and do stuff with it right so for
644:31 - example name I don't need to worry about
644:33 - because name I'm pulling straight up
644:35 - from the session but what I do need to
644:38 - pull from the session okay is not just
644:41 - the user but I need to pull more
644:43 - information about the user like their
644:46 - number of dogs okay or
644:50 - um the number of logins okay or the dogs
644:53 - that they've generated Etc
644:55 - so what I'm going to need access to is
644:57 - I'm going to need access to that
644:58 - specific User Dictionary okay that user
645:01 - object that stores all the information
645:02 - about them like their username docs
645:04 - generated Etc so this function here
645:07 - Creator update user I'm going to have it
645:09 - return something so I'm going to say
645:10 - return and I'm going to have it return
645:12 - the user okay so the user is either
645:15 - going to be the first guy or it's going
645:17 - to be none okay so I'm going to always
645:19 - get some type of user okay now what I
645:23 - can do is over here I can actually go
645:26 - user is equal to that because I know
645:28 - that this function is going to do its
645:30 - thing but then at the end of the day
645:32 - it's going to return a dictionary okay
645:36 - uh or it's going to return none for the
645:38 - user and that user I can pass it to my
645:42 - database or sorry my front end so I
645:44 - could pass that user to my front end and
645:47 - now my front end will have access to
645:49 - that user's information in terms of the
645:51 - dogs that that user has generated or
645:53 - that logins that that user has generated
645:55 - okay now the last thing that I want to
645:58 - do well let's actually make logins work
646:00 - first so let's go ahead and go here I'm
646:04 - going to go inside of my templates and
646:07 - we'll go to index.html and since I have
646:10 - access to that user what I can do where
646:12 - I have the number of logins I can
646:14 - actually just go ahead and give this one
646:16 - a try because you can actually figure
646:18 - out what to write here okay how will I
646:21 - get access to users logins so see if you
646:25 - could make this work all right I'll give
646:26 - you five seconds to pause to try it
646:28 - yourself five four three two one all
646:33 - right hopefully you'll give it a try and
646:35 - figure it out
646:37 - um I'm gonna go ahead and say
646:40 - user and logins okay since I already
646:44 - have access to that user
646:47 - so let's go back to our main.py I'll
646:49 - open it in a new tab here
646:52 - see if I could reverse this cool
646:54 - okay and then let's go ahead and hit
646:57 - command enter
646:59 - okay and now let's see if it shows us
647:02 - number of logins so I'm going to go
647:04 - ahead and do Lance
647:06 - and let's hit login look at that it's
647:09 - saying seven let's log in again let's
647:12 - run it
647:14 - run eight Wow Let's Do It Again login
647:19 - nine right now new person one
647:24 - you could see new person one doesn't
647:27 - have any logins because this is a brand
647:30 - new
647:31 - uh user okay it's a brand new user it
647:35 - doesn't have any logins right now okay
647:36 - so number of logins right now is zero
647:38 - and we don't even have to write zero
647:41 - okay
647:42 - so for logins we can actually do that
647:44 - same trick as well if we do want it to
647:46 - say zero you could probably just go
647:49 - ahead and say logins is
647:51 - user
647:53 - uh
647:54 - logins okay uh if user logins exists
647:59 - else is zero
648:02 - so this basically what we'll do what it
648:04 - will do is if the user has logins then
648:09 - it'll show the login and if the user
648:12 - doesn't have logins if this statement is
648:13 - false meaning that it they have zero
648:15 - logins it'll be false okay that's the
648:18 - cool part about python there's something
648:20 - called truthiness of a statement so 0
648:22 - will evaluate to a false
648:25 - then it will just give zero okay so if I
648:28 - do this and we can also always go back
648:30 - here and just say
648:33 - um
648:34 - logins okay so I could run this
648:37 - and then let's refresh
648:45 - and there we go number of logins right
648:48 - now let's say I whoops that's not ours
648:51 - this is our app
648:53 - okay so let's go ahead and now refresh
648:59 - okay so this person has so let's create
649:01 - a new user I'll just say two
649:06 - uh okay
649:09 - so not not user login or not user logins
649:14 - check let's just check if the user
649:16 - exists okay so give me the logins if the
649:18 - user exists otherwise l0 that's better
649:21 - that's a better statement okay let's run
649:24 - this again
649:27 - okay
649:28 - and let's look at it okay let's create a
649:31 - new user I'll say three let's run
649:34 - okay and now you can see my username is
649:36 - three and my logins are zero so that's
649:38 - actually working correctly now or let's
649:40 - say
649:41 - uh Michael okay let's hit enter and you
649:44 - can see I'm Michael but my logins are
649:46 - zero okay so that takes care of that you
649:49 - know number or zero problem
649:52 - okay we could even create a template
649:54 - filter and then that could be you know a
649:57 - thing that gives us whether it's a
649:59 - number or zero okay we could do it that
650:01 - way
650:02 - uh we could certainly do it that way as
650:04 - well
650:05 - okay actually it should say zero without
650:08 - us doing any of this hacky stuff
650:12 - um the problem is I believe happening
650:14 - that we're not returning our user here
650:17 - after we create the new user so we
650:20 - shouldn't be returning none that's not
650:22 - right uh we should be returning a user
650:25 - so for example if a user exists
650:27 - well then we know that we can just send
650:30 - that user right that's easy because
650:32 - that'll already exists but if the user
650:34 - doesn't exist
650:35 - we want to create the new user
650:39 - right and then we need to set that as
650:41 - the new user so we can actually go ahead
650:43 - and say
650:47 - okay I don't I don't even need this
650:50 - uh here right now the statement here
650:54 - okay or
650:56 - yeah I do so we'll leave this user
650:58 - statement here that's fine and now we'll
651:00 - just redefine the user and we'll say
651:02 - user is equal to
651:05 - okay and then we'll find that user again
651:08 - in the database using the same exact
651:10 - trick right here okay so we'll find the
651:13 - user
651:14 - so we'll say user is equal to
651:16 - [Music]
651:17 - username but we'll find that specific
651:20 - user inside of the database
651:24 - okay after we create that user now we
651:28 - can find them right because we couldn't
651:29 - find them earlier so find the user if
651:33 - they exist obviously just increment
651:34 - their login but find the user if they
651:36 - don't exist append them then find them
651:40 - again from the database so we can
651:42 - actually have that specific user
651:44 - dictionary that we need access to
651:48 - okay
651:49 - and that's going to be the that's going
651:53 - to be the user okay and then we can just
651:55 - get the actual user right here
651:59 - um and then we can actually return that
652:01 - user okay or we can just run that same
652:04 - line again but in this case we know for
652:07 - a fact that since we just created that
652:09 - user looking up somebody with that
652:11 - specific username will return to
652:13 - somebody and we'll get the first item in
652:15 - that list by doing the zero right there
652:18 - and then we can just go ahead and say
652:21 - return user okay so now that problem
652:24 - will actually be solved so let's go back
652:26 - to index.html we can go ahead back to
652:30 - saying user logins
652:32 - okay let's restart the server by doing
652:35 - command enter control enter okay and
652:38 - let's create a new person and we will
652:40 - say Angela
652:43 - and let's run
652:45 - okay and there we go we shouldn't ever
652:47 - see Zero logins either by the way we
652:49 - should actually see One login because
652:51 - when she created a new sign up that is
652:54 - considered a login right so it should
652:56 - start her with one and then if I do
652:58 - Angela again it should put her at two
653:01 - Etc Okay so
653:03 - that part is now good now the next thing
653:07 - we want to do is you want to do some
653:08 - conditional rendering meaning if a user
653:10 - is not signed in AKA when the user is on
653:14 - this page
653:15 - you notice that I'm not seeing
653:18 - any of the other stuff right I'm not
653:20 - seeing the table I'm not seeing get
653:21 - random dog I'm not saying log out I'm
653:24 - not seeing a leaderboard I just see this
653:26 - enter your name
653:28 - okay that's all I'm seeing
653:31 - so but then once I log in successfully
653:35 - then I am seeing this entire page okay
653:38 - but then I'm not seeing this input here
653:41 - anymore
653:42 - okay so we want to make sure that we
653:45 - have that same functionality as well
653:46 - that technique is called conditional
653:49 - rendering meaning only render if this
653:53 - statement is true or else show this
653:56 - other thing
653:57 - so what we want to do here is let's
654:00 - think about what are the things that we
654:01 - need to hide if the user is logged in
654:04 - well if the user is logged in we need to
654:07 - hide a
654:09 - we need to hide all of this right there
654:14 - okay
654:16 - so
654:18 - what we're going to do
654:20 - is find that part so this is the form
654:23 - and this is where it says enter names
654:25 - all of this stuff here we need to hide
654:27 - once the user is logged in okay so I'm
654:29 - going to go ahead and say if
654:31 - session
654:34 - um
654:35 - if the session does not have a user okay
654:39 - meaning if there's no user logged in
654:44 - then show this
654:46 - otherwise don't show this so let's give
654:48 - this a try so if I'm logged in with
654:50 - Angela it should not show anymore once I
654:53 - restart the server fingers crossed let's
654:55 - see
654:57 - let's refresh obviously because we
654:59 - didn't do that
655:01 - okay and we can just go ahead and do
655:04 - this
655:06 - okay so now we have a different problem
655:08 - it says the variable user referenced
655:12 - before an assignment
655:17 - okay and to debug errors don't freak out
655:20 - let's just go ahead and see how to debug
655:22 - okay because that's another thing you'll
655:23 - need to learn so we can actually click
655:25 - right here user
655:27 - and it's telling me that it's something
655:29 - is happening on this line here so I'll
655:31 - go ahead and click this so it'll expand
655:33 - and it's saying the error is happening
655:35 - right here on line 43 and home you're
655:38 - referring to user but the user has not
655:40 - been actually defined
655:45 - okay so let's see what the problem is
655:49 - okay it says local variable user
655:51 - reference before assignment
655:53 - so to me when I'm looking at this that
655:55 - doesn't look to be true because I'm
655:57 - clearly assigning user here and then
656:00 - referencing it here
656:03 - but
656:04 - let's see if it says a different story
656:07 - when we go look at the code
656:11 - so let's go to our
656:16 - let's see if it's referring to anything
656:18 - here
656:19 - 's a reference before assignment
656:23 - let's go back up to our home
656:29 - ah
656:30 - so this user is only getting registered
656:35 - when it's a post request meaning when it
656:39 - is uh when we're submitting a form if
656:42 - you're just going to that page normally
656:45 - right the there's going to be no user
656:48 - when you're going to that page
656:52 - let's say uh you know by just refreshing
656:55 - and uh not doing a post request so what
656:58 - happens in that case so what we're going
657:00 - to say here is otherwise the user is
657:03 - just none okay so for example else
657:06 - uh we will say user is none okay so we
657:10 - don't have a user so that's what we're
657:12 - going to do for the user okay let's go
657:16 - ahead and hit enter now we shouldn't
657:19 - have an error happening anymore
657:21 - let's hit command enter as well here so
657:23 - we restart our server
657:25 - let's go here and refresh and let's see
657:29 - what happens what will happen hopefully
657:32 - it will do what we want it to do here we
657:35 - go we're seeing Angela we are logged in
657:38 - and notice that we're not seeing
657:43 - that form up there that used to say
657:47 - login username blah blah blah right now
657:51 - let's go ahead and set up our log out
657:52 - functionality so we're going to set up a
657:55 - route for logout
657:57 - so this should be pretty easy at this
658:00 - point because you know the pattern
658:02 - already right slash log out so we know
658:05 - that we're going to create a slash
658:06 - logout route and then we're going to
658:07 - write python code that corresponds to it
658:10 - so I'm going to say
658:11 - app.rout put at sign here and we're
658:14 - going to say log out and then we'll
658:17 - create our function log out
658:19 - and what that will do is set the session
658:22 - of the user to none
658:26 - okay that basically means that the user
658:30 - is logged out
658:32 - okay that's all we're going to do with
658:34 - this it's going to set the username to
658:37 - none basically okay that's all we're
658:38 - doing here and then
658:41 - we will just render our template okay
658:44 - render
658:46 - and now I can just basically go ahead
658:48 - and return
658:50 - um all of this stuff here so I can just
658:52 - put this return statement and I can say
658:54 - return render template index.html set
658:58 - the dog image well we won't have a dog
659:00 - image here in this case because we're
659:03 - sending you back essentially to a page
659:05 - that doesn't even really need it what
659:07 - we're going to have is dogs generated
659:10 - for log out and that's essentially it so
659:13 - let's go ahead and hit enter command
659:14 - enter to restart the server
659:17 - and now when I hit log out it will log
659:20 - me out and you won't see Angela here
659:22 - anymore so let's hit log out cool okay
659:25 - now we're getting a different error
659:27 - which is user is undefined okay and that
659:32 - error is happening where let's go ahead
659:34 - and take a look
659:36 - let's click it and it's saying that the
659:39 - error is happening right here where
659:42 - we're calling user
659:44 - logins it's like where the heck is user
659:47 - even coming from right so now we just
659:49 - need to figure that part out because if
659:51 - we're passing in none here
659:53 - right for the user then we should
659:56 - essentially have no user to pull login
659:58 - information from
660:00 - so here's the way we want to solve it we
660:02 - could actually solve this with
660:03 - conditional rendering
660:05 - all of this stuff here like all of these
660:08 - cards
660:09 - right and these buttons container if we
660:12 - get random dog or this button it says
660:14 - log out or this leaderboard all of this
660:17 - I don't even need to I don't I only need
660:20 - it to show up if the user is logged in I
660:22 - don't need it to show up anytime else so
660:24 - it's going to solve that problem here so
660:26 - we're going to say if
660:27 - session user meaning if the user is
660:30 - logged in
660:31 - then show all this stuff otherwise don't
660:33 - even bother showing this so I'm just
660:35 - going to finish wrapping this entire
660:37 - thing
660:41 - okay and uh
660:43 - so where did we start wrapping it right
660:45 - here wrapper let's see where that
660:47 - wrapper finishes finishes right here so
660:50 - we're going to go ahead and say end
660:53 - if
660:55 - there we go okay let's hit command enter
660:58 - so we restart our server and let's go to
661:01 - our app and let's go home page
661:04 - okay and you can see we're here and if I
661:06 - log out you can see that it brings me to
661:09 - this page it's just rendering only these
661:12 - components here
661:14 - but when I log in so let's say Angela
661:16 - and I hit enter boom Angela right there
661:19 - number of logins right there get random
661:21 - dog
661:22 - okay now we're getting a different error
661:25 - for user okay so now we're getting when
661:28 - I hit get random dog
661:31 - uh we're getting an error with the user
661:33 - so let's see what the problem is so
661:35 - let's go back because we know that we're
661:37 - logged in for sure
661:39 - so what's there here we're not actually
661:41 - grabbing the user and uh we're not
661:45 - uh basically when somebody clicks get
661:49 - dog we need to get our current logged in
661:52 - user right and then we need to pass that
661:56 - current logged in user uh here we should
662:00 - be able to actually pull that
662:02 - information from our session as well so
662:04 - we should be able to go user
662:07 - and then say session
662:09 - user if there's a user logged in that
662:13 - session could have access to it but
662:14 - let's go ahead ah but the problem with
662:17 - session is that we only have
662:21 - um
662:24 - yeah we we only have the username we
662:28 - don't necessarily have the login so
662:29 - let's actually just grab the user from
662:31 - the database so let's do this
662:33 - there's this piece of code that keeps
662:35 - repeating itself okay this guy right
662:37 - over here it repeats itself here and
662:39 - then it kind of repeats itself here it's
662:42 - kind of annoying so let's go ahead
662:45 - and refactor this because we're going to
662:47 - need to find
662:48 - here we're going to need to find that
662:50 - user that's logged in so we're gonna
662:52 - have to essentially repeat this code for
662:54 - the third time so let's not repeat that
662:57 - many times okay there's a principle
662:58 - called the dry principle and it stands
663:01 - for do not repeat
663:04 - do not repeat yourself okay in
663:07 - programming so we don't want to keep
663:09 - repeating ourselves
663:10 - okay so let's create a new function and
663:12 - this function will call it get user
663:16 - get user from
663:18 - database
663:20 - and this will take in a username
663:24 - okay and it will return that user now
663:27 - all it will do is this
663:30 - okay
663:31 - and what I'm going to say is I'm going
663:33 - to say this is the user and here we can
663:35 - just return return this okay so either
663:38 - return the user otherwise return none
663:43 - so now in order to get the user what I
663:47 - could actually do here is for the user I
663:49 - can actually just say hey
663:52 - get the user from the database based on
663:54 - the username
663:56 - so I can refactor that part of the code
663:59 - and then I can get rid of this don't
664:01 - need that
664:02 - and then here we need to repeat that
664:05 - same thing so just copy this
664:07 - paste it here because we need to repeat
664:09 - that process again so find the user in
664:12 - the start find the user if you create a
664:15 - new user and return that user so this
664:18 - function we've already needed to use it
664:19 - twice so it was already very helpful
664:21 - creating that and it simplifies our
664:23 - logic a lot
664:25 - okay and uh great now
664:29 - I'm gonna go up here and reuse this
664:32 - function here and I'm gonna say
664:35 - user is get
664:37 - user from database okay
664:40 - and then we're going to give it the
664:41 - username and the username here we could
664:44 - actually get that
664:45 - from the session if we want
664:50 - okay so we can definitely get that from
664:53 - the session so we need to actually check
664:55 - if the session actually exists okay so
664:59 - let's go up here
665:00 - and I'm going to check
665:04 - um you know we could put it at the top
665:07 - or the bottom I could even put it here
665:08 - so I could say if session
665:10 - okay so if there is an existing session
665:12 - with the user
665:14 - then what I want you to do is get that
665:17 - user from the database so get user from
665:19 - database based on the uh username
665:24 - so I'm going to pass in the username
665:25 - right here and then I also want you to
665:28 - get the dogs generated for that user so
665:30 - I'm going to go ahead and say user
665:33 - uh dogs generated
665:37 - and I'm going to say
665:40 - and there's a nice little trick that we
665:42 - could do so for example imagine if we
665:44 - did this right dogs generated and I did
665:46 - increment the dogs generated by plus
665:49 - equals one right that's what I would
665:51 - like to do but the problem is that
665:54 - there might be a case well actually in
665:57 - this case every user will have this docs
666:00 - generated I don't think we even need to
666:01 - worry about that I think we could just
666:03 - leave this with with dogs generator plus
666:05 - equals one and I think that should be
666:07 - fine okay and then once we do that we
666:11 - can actually so we're going to update
666:12 - that user's docs generated by plus one
666:14 - because obviously they just hit get dog
666:16 - and then we can actually pass that user
666:19 - back so I could say user user okay let's
666:23 - run this now
666:24 - and let's go here let's refresh our app
666:29 - and hopefully we won't have errors now
666:31 - okay so right now we have Angela and it
666:35 - says dogs generated or zero let's hit
666:37 - get random dog
666:39 - okay get random dog get random dog okay
666:42 - so we know that this button is working
666:44 - we know that it's getting us random dogs
666:46 - we know that the number of dogs is
666:48 - increasing we know that the user Angela
666:50 - is logged in but the dogs you generated
666:52 - is not changing why is that happening if
666:55 - I go here
666:57 - right why is that happening well the
666:59 - reason why dog generator is not showing
667:01 - up is because we haven't connected it
667:03 - yet to our front end so let's go to our
667:07 - index.html and here we've hard-coded
667:10 - zero so all we need to do here is I need
667:13 - to say user dogs generated
667:16 - just like that let's hit command enter
667:18 - let's come back here let's refresh
667:21 - okay and now when we actually do
667:25 - get random dog you could see that that
667:28 - is updating right get random dog
667:31 - boom there we go right all of it is
667:34 - updating now
667:36 - so if you're Angela you can refresh and
667:39 - come back and it'll still say nine dogs
667:41 - generated right if you log out and you
667:45 - log in as heavy
667:48 - it'll say that this is your first login
667:50 - ever and then you have zero deduction
667:52 - right it's all remember you if I log out
667:55 - and log back in as Angela you'll see
667:58 - that it remembers that too it's a 10
668:00 - dogs generated number of logins four so
668:02 - it's showing each user their very own
668:04 - authenticated information which is very
668:08 - powerful right in in all of the apps
668:11 - that you see with Instagram or whatever
668:12 - you're only seeing your own data you're
668:15 - not seeing somebody else's posts you're
668:17 - not able to control somebody else's post
668:19 - you're not able to log somebody else out
668:21 - you can only log yourself out so even
668:23 - though we didn't have email and
668:25 - passwords this is still a very good
668:27 - mechanism
668:29 - to be able to see where you're at and
668:32 - what's actually happening
668:35 - now the only real functionality we have
668:37 - left is creating a leaderboard so we can
668:39 - actually see all these users and then we
668:42 - can actually like increment all these
668:44 - users right and
668:47 - um yeah so all the users we created like
668:49 - for example right now just showing dummy
668:51 - users so we want to be able to show
668:54 - all of our users and then we want to be
668:57 - able to show them in the right way so
668:59 - first of all
669:00 - let's just try to show all of our users
669:03 - okay so how will I do that well my
669:06 - database has access to all the users
669:09 - already okay let's go here let's go take
669:12 - a look at our table
669:13 - okay and right now what it has is it's
669:17 - uh all the data here is hard coded okay
669:21 - so first let's go ahead and just study
669:24 - the structure of this table here so we
669:26 - have a table class leaderboard it has
669:29 - these are the headers all right so for
669:31 - example
669:32 - if I look at this it says uh name right
669:36 - that is right there so I can change that
669:38 - dogs generated right there okay and that
669:42 - star just represents that this is the
669:45 - column we will be sorting this by okay
669:48 - so our headers are fine we can leave our
669:50 - headers as they are what we do need to
669:52 - change is hard-coded data so you could
669:54 - see
669:56 - I have uh this is two here okay so this
669:59 - is the index
670:00 - okay so for example I can put a trophy
670:03 - here like this
670:05 - right and then hit um
670:08 - we can hit command enter so it serves
670:10 - this page correctly and refresh
670:14 - right and then you will see that it says
670:17 - one trophy next to me okay so
670:21 - uh this is where our trophy or index
670:24 - will go okay so this is going to be the
670:26 - position this over here will be the this
670:30 - over here will be the username right it
670:32 - says that right there username then this
670:34 - guy underneath it will be the number of
670:36 - dogs generated okay so dogs generated
670:38 - will go here and then this will be the
670:40 - number of logins okay at the bottom or
670:42 - the last one
670:44 - and then I'm just hard coding all of
670:46 - these other rows so I can actually just
670:48 - remove
670:50 - all of these other rows okay because all
670:54 - we need to do at this point is we need
670:56 - to write a for Loop that just goes ahead
670:59 - and makes all of these rows for us okay
671:03 - so for example if I go here
671:06 - we're going to repeat this process right
671:08 - we're going to repeat this process the
671:10 - process of creating a new row adding the
671:13 - data in there creating a new row adding
671:16 - the data in there creating a new row
671:18 - adding the data in there so whenever you
671:19 - have things that are repeating like this
671:21 - I like to think to myself
671:25 - all right maybe we can use a for Loop
671:27 - here okay so I'm going to remove all of
671:28 - these rows here let's go ahead and
671:31 - refresh this uh page okay
671:35 - and I'm just going to go like that just
671:37 - go to the home page directly
671:39 - and we should only see one person here
671:41 - right now okay number of logins name
671:44 - blah blah blah okay we should only see
671:46 - cause you right now but this is still
671:48 - because the Quasi is hard-coded now we
671:51 - have access to the user so I can
671:52 - actually write a for Loop here I can say
671:54 - four
671:55 - user in DB
671:58 - users
672:00 - okay
672:02 - I can go ahead and list out each of the
672:05 - users right so for user and users here
672:08 - where it says username I can go ahead
672:10 - and say
672:12 - user
672:13 - username and since this is going to be
672:17 - python code I want to make sure I put
672:20 - that
672:21 - oh sorry username does not go there
672:23 - username goes underneath it
672:26 - okay username goes there
672:28 - so we'll just we'll just say zero here
672:31 - and then
672:33 - where it says 12 number of docs
672:35 - generated we're going to go ahead and
672:36 - say user dogs generated just like that
672:40 - close it
672:42 - and then number of logins will be user
672:47 - and then we can say logins
672:52 - just like that
672:55 - okay and so let's go ahead and make sure
673:00 - that we wrap this entire row inside of a
673:03 - loop so let's go ahead and end the loop
673:05 - now so I'll say end four and we'll put a
673:08 - percent sign and don't forget to put a
673:09 - percent sign at the top here as well so
673:11 - this should have a percent at the start
673:12 - percent at the end percent at the store
673:14 - percent at the end let's hit command
673:16 - enter and let's see if this is going to
673:18 - show all of our users let's refresh
673:22 - okay so we're it's saying DB is not
673:25 - defined that's fine because it's we just
673:27 - call it users so let's just say users
673:29 - here okay because that's how we pass the
673:31 - database if you look
673:33 - in our main.py
673:35 - uh wherever we're passing users which is
673:39 - where we're passing users uh we're
673:41 - actually not passing users anywhere
673:43 - interesting so let's go ahead and pass
673:44 - all of the users so we're going to say
673:46 - users and I'm going to say DB users
673:51 - put a comma here
673:52 - and then we can pass in users here as
673:54 - well so I can say users and I can say
673:58 - DB users just like this okay let's run
674:02 - this app
674:05 - right we just need it on two of our
674:07 - views let's go ahead and refresh
674:10 - now we won't have that what what's there
674:12 - this time
674:14 - okay let's see invalid syntax okay I
674:17 - probably forgot to just put a comma
674:19 - that's probably it
674:22 - comma
674:25 - yep let's put a comma here
674:29 - okay let's refresh
674:33 - and there we go right we're getting all
674:36 - of the users with their number of dogs
674:38 - generated
674:40 - right and um yeah so there we go number
674:43 - of dogs generated is 10.
674:46 - and name Michael we have Angela Angela's
674:49 - 10 dog generated now we need to make it
674:51 - so
674:53 - uh now we need to make it
674:55 - so that when we have 10 dogs generated
674:59 - Angela should be number one so we
675:00 - actually need to sort this okay so we're
675:03 - going to go ahead and create this
675:04 - function there's going to be a bunch of
675:05 - stuff that you've probably not seen
675:07 - before in this one so just kind of hang
675:09 - tight and you know once you get used to
675:12 - seeing stuff like this you'll understand
675:14 - okay you'll understand the pattern of
675:16 - this okay I don't want you to freak out
675:18 - over this so we're going to create this
675:20 - function called get leaderboard okay
675:23 - it's going to take in users and what
675:26 - this will do
675:29 - okay is
675:31 - um and I'll show you an example
675:33 - okay so this is going to be example of
675:35 - how sorted works I'll just put this
675:37 - example here okay and how it works is
675:40 - you call this function sorted and let's
675:43 - say we give it a list of companies and
675:45 - lists of companies is a list of really
675:48 - dictionaries each dictionary
675:49 - representing a company and if I tell it
675:53 - uh hey
675:54 - go ahead and sort it by its Revenue so
675:58 - let's say the dictionary has you know uh
676:02 - it's a list of companies there's
676:04 - something that has revenues let's just
676:06 - say Revenue here okay so if I make a
676:08 - data structure here we have companies
676:10 - let's just say and
676:13 - um
676:14 - we have company one company two right so
676:17 - company one is basically you know has a
676:20 - revenue of
676:22 - hundred dollars and the name of this
676:25 - company is let's say Facebook
676:27 - FB and then we have another company who
676:30 - has a revenue of
676:32 - say two hundred dollars and then the
676:35 - name of this company is Google okay so
676:40 - if I ran this line of code what that
676:42 - would do is it would
676:46 - take this list here
676:48 - right and it would sort it based on
676:51 - Revenue so the best highest revenue will
676:54 - come first because we're saying reverse
676:55 - is true so it'll give it to you in a
676:57 - descending order which means it'll put
676:58 - highest revenue first okay and we're
677:01 - telling it to filter by this key called
677:04 - Revenue right there okay so filter by
677:06 - that key instead of filtering by the
677:08 - name because you could also sort it
677:10 - alphabetically if you did it by the name
677:11 - so we'll do it by Revenue so it sorts it
677:14 - numerically okay based on the revenue
677:16 - number
677:17 - and yeah and they'll return to us the
677:20 - companies okay and we could we could
677:21 - even play around with this in the
677:25 - uh let's open up this Shell let's go
677:29 - ahead and clear everything
677:32 - okay I'll go here and we'll say python
677:35 - I'll zoom in a bit so you can see better
677:39 - so let's go ahead and write companies
677:41 - right and then I'm going to go ahead and
677:43 - say sorted
677:45 - and we'll do sorted right let's run this
677:48 - and you can see it says hey this is what
677:52 - the revenue is and it sorts so if I had
677:54 - a hundred or a thousand or ten thousand
677:56 - or one million companies it would do it
677:58 - in a matter of a second and it'll sort
678:00 - them all okay so it's a very powerful
678:03 - thing we could do
678:04 - all right so there we go that's the
678:06 - power of sorted that's how we use it so
678:08 - since we already have access to all of
678:10 - our users what we can say is we can say
678:13 - leaderboard okay and we can call sorted
678:16 - we can give it a new list so let's say
678:19 - we're going to create a list of users
678:20 - okay and these users are basically we're
678:24 - going to create a new list
678:27 - okay let me show you this in the rebel
678:30 - first because this part is slightly
678:32 - confusing
678:34 - so let me go here and um
678:38 - let me show it here first okay
678:40 - so let me delete all of this
678:43 - okay now I'm going to type in um from
678:46 - replit import DB now let's go ahead and
678:49 - do DB users
678:51 - okay now what I want to do is sort the
678:54 - users by docs generated so imagine if I
678:56 - did that same thing so let's say I said
679:00 - um where was that line of code that we
679:02 - had right so it is sorted command so I'm
679:05 - going to say sorted
679:07 - and for the list I'll give it DB users
679:10 - and for the key I'm going to give it
679:13 - Lambda and I'm going to say user is user
679:16 - sorted by dogs underscore generated
679:19 - and then reverse is equal to true and
679:22 - I'll run this and boom there we go you
679:25 - can see that it just sorted that based
679:28 - on Doc generated so I have the highest
679:30 - dogs generated showing up and then I
679:33 - have the lower docs generator showing up
679:34 - after
679:36 - so that's really it looks like that
679:38 - essentially works so let's go ahead and
679:42 - basically write that line of code here
679:45 - okay so I can actually go I can even go
679:47 - here and just copy what we wrote Because
679:49 - that's effectively what we're going to
679:51 - need okay and uh that's what our
679:55 - function leaderboard is going to do I'm
679:57 - just going to do we can set a return
680:00 - to sorted leaderboard okay that's it
680:04 - and we can remove everything else so now
680:07 - this function is a nice little one-liner
680:10 - which
680:12 - it goes and grabs all the users
680:16 - sorts them by docs generated and the
680:18 - highest ones are at the top
680:22 - okay
680:23 - so now that we're done with that let's
680:26 - see if this leaderboard thing actually
680:28 - works and if it does you know we can
680:31 - actually just send these users to our
680:34 - back end and our backend will be able to
680:36 - deal with it okay so let's go ahead and
680:39 - try that so now instead of
680:43 - giving my let's say my home page
680:47 - instead of giving it just regular users
680:49 - will give it sorted users so I'll go
680:52 - ahead and say
680:53 - I'll call the function get leaderboard
680:56 - and I'll give it users like this
681:01 - okay and I'll take this copy this and
681:04 - I'll do the same thing for when you hit
681:06 - the get dog route
681:07 - okay and let's run this
681:10 - okay and let's refresh our page and
681:13 - let's see if it actually sorts it the
681:14 - way that we want and there we go we're
681:18 - seeing Angela we're seeing dog generated
681:20 - now let's see if we can try to compete
681:22 - with Angela so let's become Kevin I'll
681:24 - log out
681:26 - we'll go ahead and log in as Kevin
681:28 - let's hit get random dog
681:31 - let's again random dog and you could see
681:33 - that we're starting to actually compete
681:34 - with Angela right I'll hit it four times
681:36 - here
681:38 - and I'll hit it three more times
681:41 - okay let's hit it again
681:44 - and let's hit it and there we go Kevin
681:46 - is already in the lead let's run it
681:48 - again
681:49 - there we go right Kevin is now in the
681:52 - lead okay when somebody has two of the
681:55 - same numbers then they'll just sort it
681:56 - randomly okay it'll just pick flip a
681:59 - coin between the two so there we go
682:01 - Kevin is now number one
682:03 - but there's only one thing that is
682:06 - missing right now okay there's only one
682:09 - thing that is missing right now and
682:11 - that is this place okay so how come for
682:14 - the place we have
682:16 - uh zeros for everything why is that we
682:19 - need to be able to get a number so I
682:21 - want to have first one here and I want
682:23 - to have two here and three here and four
682:25 - here Etc so here's a trick that we can
682:28 - do
682:30 - I can Loop through something so for
682:33 - example let's say let me show you here
682:36 - first okay so let me show you here first
682:38 - let's go to Shell
682:39 - and DB users right
682:43 - and I can let me write a regular Loop so
682:45 - for user in DB users
682:49 - and I can say print user okay so that's
682:53 - great that it's getting me the user but
682:55 - what if I also wanted the index well
682:57 - remember I showed you this trick a lot a
683:00 - while earlier and it's called enumerate
683:01 - so I could actually do for user in
683:03 - enumerate
683:06 - DB users
683:10 - and now when I call this I can go ahead
683:13 - and say let's actually do this
683:17 - uh let's run this again so I just did a
683:19 - control C to kill it and start it again
683:23 - so let's go ahead and say index comma
683:25 - user and enumerate user
683:28 - and now I'll go ahead and say print the
683:31 - index and the user and run it and now
683:33 - you can see I'm getting the index here
683:35 - with the 0 1 2 3 4 5 6 7 8 9 10 11 right
683:39 - and then I'm getting the users on this
683:41 - right hand side so I'm getting the index
683:43 - and the use for index and the user index
683:45 - of the user
683:46 - so enumerate allows me to Loop through
683:49 - and get the position of each of the
683:51 - indices so then in that case that's
683:53 - going to be a very easy thing because I
683:55 - can actually just call enumerate here
683:57 - enumerate
683:59 - and wrap this leaderboard and enumerate
684:02 - and do the same thing here enumerate
684:07 - right wrap this in that
684:10 - and on our front end I can say for user
684:16 - for for index comma user and users I can
684:19 - go ahead and say
684:21 - index plus one because we don't want to
684:25 - start it from zero we want to start from
684:27 - one
684:28 - so let's go ahead and hit command enter
684:30 - and let's refresh
684:34 - and let's see if it gives us what we're
684:36 - looking for
684:38 - there we go
684:40 - there we go
684:45 - so now you could see Kevin is position
684:48 - number one now for Kevin we want to give
684:51 - him a trophy but everybody else we don't
684:54 - want to give them a trophy okay so we
684:56 - could do this in a few ways we could
684:58 - write an if else statement right inside
685:00 - of here or we can create a template
685:03 - filter I kind of like creating
685:05 - filter sometimes okay
685:08 - so we could say
685:10 - we could create a new filter so let's go
685:12 - ahead and do
685:13 - app.template filter
685:16 - and I'm going to say this function will
685:20 - be
685:23 - um
685:28 - trophy
685:32 - so trophy for first place okay and what
685:36 - this function is going to do is it's
685:39 - going to take in a number
685:42 - okay and uh basically we're gonna say
685:44 - return
685:47 - and I'm going to put a trophy
685:50 - and the number one as well
685:53 - if
685:54 - number
685:56 - or it's actually going to be taking in
685:58 - an index
686:00 - okay index so put one if index equals
686:04 - equals zero
686:09 - okay
686:10 - and let me think if this is going to
686:13 - mess anything up this actually might
686:16 - mess
686:17 - mess it up
686:22 - hmm
686:26 - this might mess it up but let's give it
686:27 - a try first so let's go ahead one if
686:29 - index is zero
686:31 - else
686:33 - index plus one
686:38 - okay so we could
686:40 - we could do that all right now we'll
686:42 - have access to Trophy first place pretty
686:46 - much at any point
686:48 - um no actually I think this should work
686:50 - I think this should be fine so let's go
686:52 - ahead back here
686:54 - and let's go ahead and say index and go
686:57 - ahead trophy
686:58 - first place so pass an index as the
687:01 - argument for this function trophy first
687:03 - place
687:05 - and that will either print out the
687:08 - position or give you the trophy
687:11 - okay
687:13 - so let's go ahead and run this
687:17 - and let's see if that works
687:19 - there we go that filter worked real nice
687:23 - okay so we could actually even call it
687:28 - um trophy or position right it either
687:31 - gives you the trophy or the position so
687:38 - trophy or
687:41 - position
687:42 - okay we could call it that and fix the
687:46 - naming here let's go ahead here and
687:48 - refresh and now you can see that Kevin
687:51 - is in the lead okay and if I I can
687:55 - obviously log out as Kevin I can go
687:58 - ahead back in as Angela
688:00 - and I can keep hitting get random dog
688:03 - multiple times
688:05 - okay let's go ahead if you click too
688:07 - fast you'll break it okay so don't click
688:10 - so fast
688:13 - all right let's see what the error is
688:16 - right now
688:19 - let's restart the server
688:21 - okay so I'll hit command enter here
688:24 - and let's go right there and let's go to
688:26 - the home page
688:28 - okay it looks like it's coming back up
688:31 - perfect there we go okay Angela is at
688:33 - 11.
688:34 - we can get random dog get random dog
688:39 - get random dog and Angela can soon take
688:42 - over and as soon as she takes over
688:43 - you'll see that she gets the trophy
688:46 - okay so let's go take over
688:48 - boom she took over she got the trophy
688:50 - she moved up in the spot right dog
688:52 - generated became 17 for her and so you
688:55 - could see that this is working correctly
688:57 - okay the next thing I want to do is
688:59 - obviously I want to remove any
689:00 - duplicates that I have because once I
689:03 - remove them then in the future anytime
689:04 - anybody's using our database it will not
689:07 - allow you to create duplicates so let's
689:09 - just go ahead and remove if we want to
689:12 - get our app in like perfect condition
689:13 - let's just go ahead and um
689:17 - we could remove
689:19 - [Music]
689:21 - okay let's go ahead and get rid of that
689:23 - we can essentially remove
689:26 - our database okay so our our users at
689:30 - least so I can just say DB users and
689:33 - let's set it let's actually do it from
689:35 - here I think it's safe it's a better
689:37 - choice
689:38 - so let's go ahead and make sure you do
689:40 - from replit import DB and then we're
689:44 - just going to go ahead and say users is
689:46 - equal to a empty list
689:50 - okay so as soon as you do that if I go
689:52 - here and I refresh this app would either
689:54 - break right because there's there's uh
689:57 - now we don't have any users at all so
690:00 - let's go ahead and see DB users
690:02 - we have no users at all okay so that's
690:06 - gonna be a problem so this is basically
690:09 - the very first time somebody's using
690:12 - your app and let's see where we got the
690:15 - error from and it's saying total uh
690:18 - total dogs generated plus equals one and
690:21 - it's trying to increment the dogs on
690:22 - somebody okay so let's go ahead to
690:24 - enroute to the home page
690:26 - and now I'm on the home page okay and
690:30 - because we have sessions
690:32 - um on right that's why it's saying
690:34 - Angela but in terms of users it has no
690:37 - existing users data that's why you're
690:39 - not seeing any user specific data this
690:41 - is coming from sessions okay so this
690:44 - here is completely empty
690:47 - well now we can actually start creating
690:49 - users and we won't be able to create any
690:51 - duplicates so now if I create Angela
690:54 - hit enter hit get random dog you can see
690:57 - Angela is now in the database at the
690:59 - bottom right you can see her numbers
691:00 - incrementing every single time I
691:02 - generate a dog for Angela let's log out
691:05 - let's log in as Angela again let's just
691:07 - make sure her number of login increases
691:09 - and you can see it does okay let's log
691:12 - out let's go ahead and come in as Kevin
691:14 - and you should see that number of logins
691:17 - should be one let's hit get random dog
691:19 - get random dog
691:21 - let's see if Kevin can overtake Angela
691:26 - let's run it a few more times
691:31 - all right and there we go Okay Kevin has
691:34 - officially overtaken Angela we have a
691:37 - total of 66 dogs created so if you want
691:40 - you could you could have reset this as
691:43 - well if you wanted to okay but there you
691:46 - go
691:46 - uh you have 66 dogs generated in this
691:49 - app you have two users that everybody
691:51 - could see here in the leaderboards you
691:53 - can log in and log out you can generate
691:55 - a random dog use an API request you're
691:58 - sorting this table by the leaderboard
692:01 - and so you learn how to sort so there's
692:03 - so much here right there's sessions
692:04 - there's databases there's server side
692:07 - routing there is front end stuff that
692:10 - you're dealing with here I mean you just
692:12 - accomplished so darn much
692:15 - and if you got to this part honestly I'm
692:18 - really really proud of you even if you
692:20 - didn't and you just made progress and
692:21 - you got closer to it hell I'm still
692:24 - super proud of you I mean this is
692:26 - absolutely amazing and incredible that
692:28 - you made it this far and again if you
692:30 - ever get stuck you know just go ahead
692:32 - and hit that solution file
692:35 - and the solution file will have
692:37 - everything for you because if you're
692:38 - watching it as a clip the solution file
692:40 - might might be in the comments below but
692:42 - if you're watching it as part of that
692:43 - python course then just you know you you
692:46 - still have the solution file inside of
692:49 - your you know python course right over
692:51 - here you can just always go to this uh
692:55 - you know read me just hit markdown and
692:58 - here you have all of the apps and
693:00 - everything that you're going to be
693:01 - building and you can see okay for random
693:04 - dog generator here's the project here's
693:06 - the live demo and here's a solution and
693:08 - if you want access to this course again
693:10 - it's completely free the link is in the
693:12 - description below you can get access to
693:14 - this mega mega mega Python course that
693:17 - has everything there for you plus some
693:19 - awesome awesome projects so
693:21 - you can always pull the solution file
693:23 - from there anyways super proud of you
693:26 - great work with that said let's keep on
693:28 - rocking and rolling
693:32 - that was crazy we built so many projects
693:35 - together we did so much coding together
693:38 - you learn so freaking much you're less
693:41 - than one percent of the people if you've
693:43 - made it this far because not a lot of
693:45 - people will ever make it this far so
693:48 - thank you so much for getting all the
693:51 - way to here I really appreciate your
693:54 - beautiful face this is not the end my
693:56 - friend this is just the beginning okay
693:58 - and I hope that I could play a tiny
694:01 - little part in your journey of becoming
694:04 - a developer I know you're gonna go on to
694:06 - become a phenomenal developer and that
694:09 - just makes me proud and that makes me so
694:10 - happy just knowing where you're gonna be
694:12 - at the end of the day with that said I
694:15 - love your beautiful face I hope you
694:17 - enjoyed this journey together it was
694:18 - kind of like a Harry Potter mixed with
694:21 - Lord of the Rings mixed with some
694:22 - Wizardry because man that was freaking
694:25 - awesome with that said I love your
694:27 - beautiful face this is Kazi and as
694:30 - always I'll see you in the next video
694:33 - [Music]

Cleaned transcript:

welcome to the best Python tutorial in the world they'll take you from a complete beginner to not so bad this tutorial will cover so many things you're going to be building amazing projects all with python as a beginner so you're going to be building an app with like a counter app we're gonna go ahead and build guess the number game a YouTube app that's gonna queer YouTube get the data back show it on the screen rock paper scissors who doesn't like rock paper scissors and we're also going to be building a random dog generator app which is going to be awesome you'll be able to click on the dogs generate the dogs it'll remember you logging in it'll remember you logging out there'll be a leaderboard of who generated the most dogs I mean oh my gosh all this with python while all of that is fun first we need to get our fundamentals so the first thing this course is going to start with is clear cut beautiful amazing fundamentals okay mastering basic concepts starting from variables to going to conditionals going to Loops for Loops diction lists you name it list comprehensions all of that stuff we're going to cover if you've never coded before a day in your life you're absolutely in the right place if you're even intermediate I promise there's going to be things in here that I'm going to show you they're going to blow your mind ways to refactor your code or List comprehensions Lambda functions all the stuff is available for you if you're Advanced there might be still some tidbits that are there that you'll be able to pick up with that said hey if you don't know me I'm rafikaze the CEO and founder of clever programmer I've helped teach millions of people how to code and now my goal is to help you learn how to code and become a software developer alright now if you want to follow along with me into this course you're gonna need to scroll down below and click the link in the description join.replet.com CP Dash python open that up and Fork this repository if you don't Fork you won't be able to write any of your code or do anything with this okay and the reason why I'm having you use this Rebel is so you don't have to install python you can just get it up and running without having to do anything everything will be here like the images and the assets you'll need your project links for your exercises all the notes will be here for you so everything that you need to be able to get access to you'll have it in here without doing anything and then once you're done it'll bring you to a page like this in this main.py file is where you're going to write all of your code and I mean all of it everything goes in here okay this quasi.py file that's here this is all the code I will be writing in the video and you'll be following along with me and so you can go at any time to this quasi.py here and you'll get access to and be able to see all the code that I've written so that way if you're worried about missing notes or anything don't be because everything is already there and so you're not going to miss anything this readme you should be seeing this over here in the if you select markdown at the top here okay and this is pretty important and this will have all of your Prime projects here available for you these projects you won't be jumping into them now but you'll be jumping into them once you master certain Concepts that shows you that you're going to be building this app right here and it tells you hey these are the concepts pure python Concepts that are going to be covered so make sure before you get to this project you master all of these Concepts that I have listed out here okay and then it tells you hey don't worry about the web development Concepts you won't need to know these uh before you can start building this all of these applications you build will be already online and deployed which means that you could just send it off to anybody anywhere and they can play with these projects that you build any project that you go to will have this project link where you can write your code it'll have this demo link where you can go ahead and demo your apps and then it'll have a solution link as well so you could click and view the solution and all the notes we're going to take throughout this will be made available to you here as well in this markdown if you ever want to go to it again just hit markdown and then just scroll down and so like if I'm talking about dictionaries those will be listed out here conditionals Etc with that said we're going to start from complete complete complete beginner stuff okay so don't stress Don't Worry Don't let this file overwhelm you this is more to just give you a road map and what's happening we're gonna start from baby steps I'm Gonna Hold Your Hand every single step of the way and it's gonna be a lot of fun with that said I hope you're excited before we get into the video do me a huge favor smash that like button turn it blue turn it white I don't care what color you're turning make sure it's filled and it has color and you've smashed it that's the most important part and as a way to thank you here's a picture of a baby a koala bear and a banana spinning all of it at the same time oh too much all good I don't care I'm here to help you learn how to code and if we have to do some things like criminal activities like have fun once in a while for God's sakes we will freaking do that with that said let's go ahead get started and start coding this bad boy up right now now before we start foreign it up here's what I want you to do we have turned this course into a bitesized Drip by drip netflixlike bingeworthy course content and in a course portal it is completely free the only idea behind it is that you the student will have a great experience going through it if you want to be a part of that the link is in the description below click that link it'll take you to a page where you can pop in your email and it will give you access to this exact python course it's going to be the same material as is on YouTube and everything's gonna be all nicely in one place so I recommend you go ahead click that button below and sign up for it again it's completely free enjoy just giving extra resources so you can be a better developer before we started diving deep into coding and starting to write every single line of code you've chosen python let's just talk about why and what your career as a software developer or just a person learning python could look like why doesn't matter so I think let's get the context around python first and then we'll get to the coding part if you want to get to the coding part right away and you don't care you just want me to stop yapping and shut up you can just skip this part time stamps are below you could skim and do whatever you want it's a free country with that said I'm gonna kind of go into why should you choose python I think python is one of the best ways to start learning how to code I started about 10 years ago coding and my first language of choice was Python and the opportunities you get by becoming a python developer are absolutely insane because first of all it's one of the most popular programming languages and there are insane number of job openings with python you could look on indeed.com or really any other online platform so the popularity of the language is also huge if you look on stack Overflow it's one of the top most wanted and learned programming languages in the world and when it comes to people's salaries people are making sixty thousand seventy thousand hundred thousand dollars a year plus now what type of jobs do people do lot of people with python do data analysts type of job data science type of job I mean of course there are a lot of web developers with python too because you can learn different Frameworks okay like flask or Django Etc and you could do web development as well so there's a lot that you could do with python and your career could look great whether you want to learn it as an entrepreneur or a student in high school or you're just trying to get through college man or just watching these videos so you could pass your exams I mean either any of those options is totally fine now the way I structure this course you have a little bit of insight going into it is I've designed it as a practical stepbystep guide where I hand hold you and we learn together but then we do exercises together and then we do big projects together and the whole idea is how can you learn in a practical way so tomorrow you could take this knowledge and go get a job okay now you won't get a job right after taking this course but if you synthesize this material and then add a lot of supplementary material and spend some time this will set you on a path to being able to get a job as a software developer freelance with it have a fulltime job or maybe you want to have your own business or start a SAS whatever your case may be but my goal in this course just to give you a taste of python and build amazing projects you can understand and just fall in love with that said let's just get into it boom all right welcome to the ultimate Python tutorial now how I'm going to teach you is almost like we're walking step by step and learning side by side together kind of like how I did with my JavaScript tutorial if you watched that earlier so let's just get started okay like we're buddies and we're doing this and learning this together so the first thing that I want to tell you about is something called comments and comments are basically anything that's ignored by the computer so anything that we write with a hashtag computer will just ignore that line the next thing we're going to talk about are variables how do variables work in Python well if I actually do print hello world okay first let's just start off with this and I hit run on the right hand side over here you're gonna see a hello world so this allows us to print out whatever we're doing into here for example if you did not say print and you just said hello world like this it wouldn't actually show anything to the console so we want to put it in print and then put quotes like this around it now what the heck are variables and how do they work well let's say I want to print my name Rafe Kazi now every time I want to print my name maybe I want to print it again well I'll have to write print I'll have to write rough it cozy and then do this again and then do this again using this ton of work but what if I just created a variable that said name and set that to rafikaze and make sure you put these single quotes or double quotes either should be fine and what if I did this and then I said print name and now if I command enter or click run there it's going to print out my name okay on the right hand side and now if I change the name I only have to change it in one place not on every single line let's change the name to clever programmer and now I'll run this and there you go you could see that that name is being printed out because of line 9 right this is referring to that variable over there if I have another variable like age is 25 I can now also say print age and when we run this you'll see that it actually says the age right over there now here are a couple of things you can and can't do with variables that you should just know about so for example I can't name a variable starting with the number three name equals quasi and now if I try to print three name and run this I'm going to get an error okay and it says hey what tech is going on invalid syntax that means you wrote something that's not right so when we're naming variables make sure that they start with a letter most of the times and then you should be good to go now other things I could do is I could say full underscore name and now we can do print full name and let's run this and now it reads out our full name underscores are allowed in Python whenever you're writing multiple words you separate it out with underscores this is snake casing okay so you keep everything usually lower and then you separate things by underscores and kind of one of the last things I'm going to touch on for now with variables is you could have two variables being saved in one go so I could say with comma height is equal to 400 by 500. what this does is it actually sets the value of 400 inside of width and then it saves a value of 500 inside of height and now to prove that out we can go ahead and say print with and if I go ahead here and say print height and when I run this you're going to see that we get a 400 over here 500 over there that's how naming multiple variables in one go Works outside of this we're good with variables so we're going to keep going okay now let's talk about what could we do with this stuff what is something that we could actually do with python well there's something called input that I actually really like and what input does is when you have input it's going to ask you to put in something right here as the user so we can make our names a little bit more Dynamic now and make the name dependent on the user or whatever the user wants the name to be let's say we create a variable called your name and then inside of this variable your name we'll say input lease enter your name so your name is going to store the value that the user types in okay it's going to ask for the input and it's going to give this as a prompt so watch what happens when I run it on the right hand side here you'll see please enter your name so I'll actually say let's say I will say Andrew let's hit enter now it was stored Andrew ended up being stored inside of your name but we need to show that so how do we show that what have you learned so far where you can actually go ahead and show that to me so print and what would you print okay take three seconds right now three two one you would print your underscore name right if you want to show it out on the screen so let's run this now and I will say cozy and boom look at that it says qazi and if we want to make a little greeting thing that can greet greet us we can we can say a high plus your name so like just like this hi plus your name so let's give that a try and we'll say qazi okay now it says hi Kazi look at that that is beautiful if you don't want some of these lines to run that are the previously there like that and that just comment it out or what you could do is highlight it and hold command and press slash I'm pressing this button right here this slash or hold Ctrl and press slash if you're on Windows let's go see if we can do other things like can I give two inputs and then we can sum them up so let's try it so let's say num one is equal to input enter a number okay and then we'll copy that and say num2 Okay so this will give us two numbers and then it'll print out those two numbers so let's try this so we'll say num one comma num two let's run this and we'll say 10 and we'll say 20. okay so 10 and 20 got printed out that means we were able to take that value from the user and then show it out onto the screen now what I want to do is something a little bit more interesting so I want to add these two numbers together that the user is giving me well if I want to add them together wouldn't that be really simple can't I just do num1 plus num2 right because that's what the user is giving me and so I should just add them together and if let's say the user gave me 10 plus 20 this will become 10 and this will become 20 and well 10 plus 20 well that is a 30 and so that should print out 30 onto the screen right well let's take a look at what happened so I'll run this and then I'll give 10 and 20 and what should it return if I add 10 to 20 what do you get 30 right let's hit run and look at that I instead get 10 20. what is happening here so when you add two things together two strings together it adds them up and mumbles and jumbles them so this is a good point to talk about strings versus numbers so there are different data types inside of python on and there's there's a bunch of data types so you have strings as a data type numbers is a data type numbers is not a really data type but integer is you know float these are what we just refer to as numbers and then there's other data types like lists and python there are dictionaries but some of this stuff is a little bit more advanced like lists dictionaries we'll talk about these later for now what I want to just talk about is I want to talk about the num difference between strings and numbers I'm just going to write some examples of strings hello is a string cookie anything within these single quotes or really double quotes is a string you're telling the computer literally this it literally this and literally that so when I add them together if I ever added this together the computer would give me back hello cookie as one string so what's happening right now is we're storing a number our numbers as a string data type so it's saying taking a string of one string of two string of 10 rather and string of 20 and is returning a string of 10 20 because it's just combining them because that's what it knows what to do with strings so when you input a number it doesn't think of it as a number it actually stores this as a as a string so what we want python to do is we want to tell python hey convert that into an integer okay a number in other words that I could actually use and when you add numbers together to actually add up rather than just get concatenated and squished together so what I want to do here is this num one that I get I want to call the function int on it so I'll store it as an integer or let me just show you something simpler even in the console so let's say I have five and you can see it has quotes around it this is a string but if I call this function called int and I pass 5 to it okay as a string it will Typecast it and turn it into five so that's actually what happens so what we want to do here is store for the input that we get from the user as an integer so I can take this entire thing and wrap it inside of int or I can call Int right here either way should work now let's run this and we'll do 10 20 and you can see that it actually added it up to a 30 because it said hey turn it into an integer the number one which is 10 turn the second number into an integer which is 20 integer 10 plus integer 20 that gets you a 30 and then that gets output to the screen does that make sense okay great now let's end this section off by making a little baby app you know every every single thing we do I like to actually make it step by step like a project or some kind of app that we make even if it's like a baby or a really really small app so let's do it so what we want to do is we want to make a tip calculator app in this case Okay so this is going to be something that's very simple what we're going to do is let's comment out this stuff right here here so I'll commented out you know I can comment down basically uh everything up until now that's fine so in my tip calculator app what I want to do is uh let's say that I went to a restaurant to eat some food and let's say the food was a hundred dollars well if that food was a hundred dollars and I want to give a 20 tip you know the question would be how much am I paying in total if you're quick at math you'll realize this is 120 dollars right because this is actually the food amount like 100 and this is the tip amount twenty percent tip okay and then 20 of 100 is twenty dollars you might know that in your head but how do we actually do that in calculation so let's go ahead and make this right so let's set a food amount to be a hundred dollars let's represent a tip percentage to be you know let's say 20 percent and and then we could divide this by 100 or or just make it 0.2 because this represents 20 as well so we could you know since it's a percentage let's go ahead and just do 0.2 or 20 divided by 100 okay and these are some math operators which we'll talk about more later but if I just go ahead and show you in the console here if I take 100 and I divide it by 20 I get 5. if I take 20 divided by 100 okay I got 0.2 this is like division what we learn in like second or third grade all right and now math operators well there's uh some interesting ones two inside of python so for example I could actually go ahead and say hundred two division signs and 20 well you'll be like well this doesn't really look that much difference but watch this if I do 20 and I do two division signs and I do 100 I get zero that's interesting so what this basically does is it says hey don't give me anything that has any kind of remainder like just give me things like divided you know if something divides completely then show it to me otherwise I don't care I don't need a floating or a decimal point as a division let's say I take 135 divided by 2 it gives me back a 67. okay whereas if I did it the regular way I would get a 67.5 so this will actually divide and then round it down okay so when I round that down I get 67 so you'll get whole numbers this is sometimes like actually helpful because if you want to just quickly round down the thing and you don't want to do like all kinds of stuff and Typecast a thing and make it all this this simple way okay so in terms of math operators we'll talk more about these later as well but some simple math operators that we have are like the plus sign you have the minus sign you have the division sign multiplication so you can multiply things right you have exponents so if you do 2 to the power of 2 you'll get 4 and if you do 2 to the power of 4 you'll get 16 right so a regular exponents you have uh divide and get a whole number this one and then you know kind of the last one that I'll just leave you with for now is is a modulo so this just gives you what the remainder is so 20 modulo four there's no remainder so you get zero but 20 modulo 3 you get a remainder right because 20 if you divide it by three you will go up to 18 but then you can't go beyond 18 and then you'll have remainder of two so I'll leave the modulo here as well okay so these are some of the math operators that's like good for you to kind of know and we're just going to be using the division and maybe the multiplication one when we're doing our tip percentage okay and with tip percentage Yeah we do care about the float number so that's why we're just going to use a single division sign we don't need it to be a whole number we need it to be a actual number that it's like you know it could be afloat because we are expecting a 0.2 so anything that's a decimal like this right if I go 0.2 it's a float number if I go one or two or three these are all integers okay and this is a float float is just another way of saying decimal numbers in uh encoding most of the time so whenever you float think some number that's a zero point something so this is representing 0.2 right so I have my amount this is 20 as a tip okay and then what's the tip amount so tip amount in this case would be a hundred multiplied by that so if I have a hundred multiplied by 0.2 that's a twenty dollar tip so that's the actual tip of mail so it's food amount times tip percentage and that's my tip amount we got the tip amount right which is food amount multiplied by the percentage so let's just go ahead and print out the tip Mount and let's just see if it's um if it's what we expect it to be so I'm going to hit command enter and run this it's saying percentage aha so it's tip underscore percentage right not just percentage and that's what the error is telling me so errors are your friends don't freak out just read them and usually when you're reading errors you don't have to read like the top part that much you can read this part but I'll also kind of make you familiar with errors okay we're not going to go crazy into like reading errors but in a simple way like if we're looking at this error here it says Hey percentage is not defined so that was simple because we never had a variable called percentage we had tip underscore percentage so that makes sense so name error right and then the next thing it says is Trace back it says the error is in main.py which makes sense because this file is called main.py and it tells you that the error is happening on Line 39 this is Line 39 and it tells you that it's happening specifically somewhere here okay so it really really makes your life simple once you can kind of read it and not freak out so much about it and let's keep going so let me run this here and let's see and it calculates a tip amount correctly so look tip amount is twenty dollars well now my question to you is how are you going to get the total okay we have the you know total if I had to put total so first of all you should try and see if you can get the total here so you can just pause the video and give that a try I'll give you five seconds five four three two one so what is total total is really just two things right it's food amount plus tip amount that's what a total is right it's how much did you pay for the food and how much was the tip so in order to turn this and translate it into code all we say is we say total is equal to food amount plus tip amount and now let's print out total and let's take a look and over here we have 120 okay 120 dollars okay now we're seeing 120 and that's cool right but what we would really like is if the 120 looked like uh you know 120 dollars instead of 120 just some number so I want to put a dollar sign here so there's a few ways we could do this okay so one way I could do is I could put a dollar sign here and then I could say plus and this is called string concatenation and it's giving us an error so let's see what the error is so error says error can only concatenate string to string so it's basically saying this total here is of type float because it's a decimal right it's 120.0 so that means this is a decimal which means that this is a float in coding terms okay so it's basically saying hey you're trying to combine a string this string over here with a float Tomatoes Tomatoes tomatoes and oranges you know what can't compare oranges and apples together what's going on here what we could do is we could turn this into a string the total into a string so I could just call Str and wrap it in this function Str you'll learn more about functions later but for now all you need to know is if I take a number like a 100 and I call STR on it you'll see they'll put these quotes around it which means that it successfully has turned it from an integer type to a string type likewise if I take a hundred like this and I call string on that it will also turn it into a string type as a float okay so this will work so let's try this and there we go that looks a lot better right a hundred and twenty dollars boom we're getting our answer and it looks clean okay so that's that's kind of how we want to do this when I said we're gonna make a baby app well let's make it interactive and then we will actually be done with this little project and then we'll keep moving on so right now it's hard we've hardcoded data food amount is 100. the tip percentage is also hard coded but what if you were at a restaurant and you actually took this file and you tried to run it and you tried to get it to help you well it won't really help you with any tip calculation or or really how much the total total bill is because it's just running it for a hundred dollars and twenty percent tip what if in reality you were sitting at a restaurant right now and maybe your food cost twenty four dollars and maybe your tip was 10 what you will have to come to your app and then change the hardcoded numbers that's not how users are going to use this right it's going to be very frustrating experience if you do that so we're going to change this to an input so we're going to say enter food amount okay and we're going to say dollars and then here I'm not going to change this 100 but I'm gonna change this part okay so we're going to make this a dynamic part we're going to say enter your tip percentage so the user is going to put in their tip percentage and let's say the user says 20 we'll just put a 20 here and then 20 divided by 100 will give you a 20 tip or 0.2 all right and uh the next thing that we want to do is remember this is going to be given to us as what data type I'll give you five seconds five four three two one food amount is going to be stored as a string but what do we want it to be stored as because if we start as a string it's not going to do the right things that we wanted to do right you're you're going to try to add a string to a string and you're going to do 10 plus 20 and you're gonna get 10 20 instead of 30. so how do we force this to become in integer okay or a number so for example the user is gonna put in some number like hey the food costs fifty dollars so it'll be a string and then what we want to do is turn it from a string data type because it's a string data type two an actual 50 either an integer or a float let's go ahead I think would float and the reason is because the user could say it's fifty dollars and fifty cents right so that's why I think a float would actually be a better representative of this and so we will say float and wrap this whole thing in float and then we'll wrap this here and Float but not the whole thing just this part right here so now boom and let's run this so let's say the food amount is a hundred dollars and let's say our tip percentage is 20 and we get a hundred and twenty dollars boom oh look at that that is working the only thing I don't like about this right now is a percentage and the 20 look too close to each other so I'm gonna put a colon here I'm gonna put a space here and I'm gonna put a percent sign percent sign here to represent that we're asking for a percentage let's run this again food amount I will say it's fifty dollars tip percentage let's say it's 20 and let's give this a try and boom look at that it tells us that is sixty dollars total that we owe uh now if we wanted to make it prettier I'll show you a little sneak peek into something called string formatting and there's something really cool in Python so what if I wanted to let the user know which one is the tip and which one is the total and which one is the tip percentage and all of that all here in a nice interface that shows everything up front Okay so for example let's do that right so it should say total is 60 60 or whatever right it should say tip amount is let's say twenty dollars or whatever so if you want to do that type of string formatting let's do it like this so I'm going to say print and I'm going to say f and then we're just going to go ahead and write out what we're looking for so I'm going to say tip amount and I'll put a colon and then I'll put these curly braces means I can now write python code inside of this so the python code all right is tip amount now when I run this and let's say tip amount tip percentage is 10 so 10 percent of ten dollars tip amount is one and now let's go ahead and put a dollar sign here so it actually looks like one dollar a hundred to percentage is ten you can see tip amount is ten dollars beautiful now let's go ahead and copy paste this again and instead of tip amount now what I want to say is I want to say food amount okay and we could put that above this and let's go ahead and say food amount and let's run this and let's see what we get so we'll say food amount is a hundred dollars tip percentage is 10 so you can see food amount is ten dollars tip amount is ten dollars or a hundred dollars and ten dollars okay and then the left for the last one let's do the same thing except I'm gonna say total amount and what are you gonna say in here we're gonna replace this with the five four three two one we're gonna replace this with the total okay now let's run this a hundred dollars and ten percent boom look at that and we don't need this final line anymore and if you want to make it like a little bit cooler whatever you could add emojis if you if you can download an emoji app I have rocket on Mac and that's really easy I just press colon and then I press right and then it allows me to do this it'll look you can make this look really nice so let's put total amount food amount can be it chicken food so let's run this now 110 and we can see the total amount is a hundred and ten dollars and it looks you know a little pretty now if we want to make this look even nicer we can actually go ahead and just add these at the top and then we could take this and add this at the bottom now if I run this we get a hundred ten percent tip and you can see food amount is hundred dollars to of amount is ten dollars and total amount is a hundred and ten dollars maybe I wanna add a new line in between total amount and tip amount so what you could do is you could print and go backslash n this encoding means a new line so it's going to just put a new line over here uh tip amount let's just put a scale for tip I guess so at least everything has an emoji and a little cleaner food amount is a hundred dollars to percentage is ten percent there we go food amount tip amount and then the overall total amount that looks very clean if we want to add some new lines here as well if you want to add multiple new lines we could do this so let's run this again there we go we're getting our food percentage and total amount so this string formatting stuff is very very useful it's really helpful and it can make your thing look pretty but more importantly it is very easy to write because you're just writing out everything you want to write and then right when you want to write python code you just put it in curly braces and you're good to go okay it's as simple as that so there you go we have made our first little app with Pythons if you got to hear congratulations you're doing great with that said we're gonna keep going and we're gonna keep learning I love your beautiful face I'll see you in a second all right now the next thing is going to be a pretty important thing let's talk about Boolean okay this is another data type it's called Boolean this is very very important it basically anytime you hear if then else all that logic which is really programming at its heart because most things that you write with programming pretty much almost always have some kind of if then statements going on okay very important this is the heart of Boolean so like for example let's just talk about the real life where are where do we use this well let me ask you this if you have zero dollars in your bank account can you take out a thousand dollars you can't why not the reason why you can't take out your money is literally there's a piece of code that says if withdrawal amount is greater than and the balance don't allow withdrawal there's a there's like a code line written there okay that literally says that okay so it reads like English too and in Python it'll probably look like something like this okay it'd be like if the withdrawal amount is greater than the balance don't allow withdrawal or we might just say return or just like don't do anything but if it's not then allow withdrawal okay so let's say we go here else I can say allow withdrawal so I hope that this conversationally just makes sense to you like if I'm just chatting with you like a buddy right or we're at a bar and I'm just explaining to see like this I hope it makes sense before we get formal and I start trying to explain to you in like at a very specific level that's what that means hey the withdrawal amount is greater than the balance don't allow it otherwise allow it okay so that's a simple example of where it happens well there's probably a lot of other places it happens as well like if the user hits accelerator accelerate the car if the use user hits break break the car imagine if you did if the if you hit accelerator and it break your car or if you hit the brake in an accelerated your car that would be catastrophic there'd be so many accidents and there would be like so many debts right and why would that happen that would happen because somebody wrote somebody just programmed it incorrectly so that's why this if else stuff is very awesome and it's also very important because it's at the heart of what we do as programmers so let's make like a little baby app so we'll make like a baby weather app and um let's comment out this entire thing with with the tip calculator we don't really need to worry about that right now so for example if I run my code I should see nothing right now it should be empty and basically what this should be say is hey what's the weather like so I'll give you a premise for this app it should tell you what to have if it's raining outside it should tell you you know grab an umbrella otherwise grab your sunglasses so that's pretty much what the app should do it should be a very simple one and that's what I should say Okay so let's say we have weather here and the weather will say is rain okay so if it's rain then it should say grounded umbrella so here's how we're gonna write our if statement so we're going to say if weather is rain if this is true print umbrella else otherwise print sunglasses okay I'll use emojis if you don't have emojis feel free to just write this stuff out and let's go ahead and print this and let me ask you a question before we even run this and before you ask me why are we putting two equal signs and what is this colon about and what's happening here if you just followed along with me and you just did what I did and you hit enter here and you just wrote this and your indentation and the whole thing looks exactly like mine and you hit print or run what do you think is going to print with your gut feeling before we even run this for the first time do you think it's going to say rain or do you think it's gonna say sunglasses it's checking for of the weather is rain and we have set the weather to rain so what would be your guess I'll give you five seconds five four three two one okay it would be the umbrella you see that right there now why are we getting now why are we getting an umbrella so let's break it down at a further level and let's talk about Boolean which we didn't talk about yet so booleans are very simple they're either true or false that's the data type that's all it contains it's either true or false so a Boolean can either be true or false that's it those are the only two values it could have so for example if I said hey it's five greater than 10 and we'll also talk about comparison operators I'll just make a little note of it comparison operators and notice that I got back false okay because 5 is not greater than ten what if I said 5 is equal to 5. it says true now the reason why we put two equals lines two equal signs is a comparison operator because if you did one equal sign that is an assignment operator so if I did five equals five it's going to give an error it says you can't assign the value 5 to a literal to a five you can assign five to you can say a equals five you could do that but you can't do five equals five that doesn't make sense but you could check if 5 is the same as five you can compare these two values and I will tell you if they are the same or they are not in this case they are so I'm going to say true is 10 the same as 5. what do you think is going to say it's going to say false okay it's 5 less than 25 yes it is it's 5 less than or equal to 25 yes it is so let's write some of these comparison operators so we have less than or equal less than we have greater than we have less than or equal to we have greater than or equal to so these are all the different assign operators that we have inside of python so now going back to this over here what's Happening Here is if I say if true so if you have an if statement where you have a true and we've just hard coded it to be true you will always get back the if statement value not the else value okay so if I make this a true right there watch what's going to happen when I run this I'm going to get back an umbrella but if I make this it falls what do you think I'm gonna get do you think I'm still going to get back an umbrella or do you think I'm gonna get back sunglasses very good if you said sunglasses let's run this and I get back sunglasses because if this is false the code says do not run this line of code run the else line of code when I say if weather is rain what I'm really saying is if this variable here has the value rain in it check if that is the case if that's the case take this whole thing and then it'll turn it to True okay so literally it plugs in rain here and then it goes is rain equal equal to rain and then it goes yes it is true and since that evaluates are true it ends up running this line of code now watch what happens if I said Sunny what do you think is going to happen do you think it's going to print out this umbrella right over here or do you think is going to print out the sunglasses I'll give you five seconds five four three two one let's run it and boom look at that I got my sunglasses so that's how that works now in order to make this kind of an interactive app let's instead of hardcoded weather data let's take input from the user so at this point you should know how to do this and you should be able to do this part okay so I'll give you five seconds pause the video and do it on your own five four three two one all right let's do it together if you got it great if you did it that's okay we'll do it together no problem so I'm gonna go ahead and I'm gonna say input because that's how I take user data I don't need to Typecast it to anything because it's already a string so input is fine so I'm going to say input and I'm going to say how is the weather question mark all right and we're going to just do put a space there let's go there how is the weather and I will say it is sunny and I will get back this Emoji right here and let's run it again and now it'll say rain and it'll give me back the rain Emoji right there okay so that tells me that my app is working it can already take in user data and figure out what to do with it it can ask the user the weather and once the user tells it how the weather is it can print out rain or umbrella so what I'd recommend is you play around with this okay and try this so let's chain this up a little bit more so let's take this if else condition a little bit farther okay so now let's do something interesting right so we're gonna go ahead and say else if so we're going to add elseif whether is cloudy then you know uh where a hat or something I don't know why you would wear a hat but maybe a hoodie so do we have a hoodie or a jacket we don't have a jacket let's just put clouds okay just print out a cloud that's it that's perfect else give me these sunglasses so now watch what happens when I run this if I say rain it'll give me the umbrella if I run this again if I choose cloudy it's actually going to give me the cloud if it's neither of those so if it's neither of those I'll just say ha or I'll say thunderstorm it'll give me sunglasses so I'll give you a little challenge right now add another else if condition and you could chain as many else of conditions as you want and one thing I need to tell you about python is this if statement how you write it you put this colon you hit enter this indentation in Python is important if you don't have this indentation this code will break it will not work so python uses white space and it's really important as a part of it to make sure that you indent things correctly if your code ever breaks is most likely all you'll have to do is go back and hit enter like this and you should be good so go ahead write another else if condition which should account for thunderstorm so if it's thunderstorming it should print out a thunder icon or something so see if you could try that so I'll give you five seconds to pause it and give it a try five four three two one all right let's go ahead and do this together so the last thing that I'm going to say here is else if weather and we're going to say it's thunderstorm okay and then then we'll say print and let's see if there's thunderstorm there is not let's say lightning okay there we go we'll say lightning with rain and thunderstorm okay so there we go and now let's run it we'll say whether it's thunderstorm and boom we're getting this icon right here so we could chain these and we could make this multiple so let's do for example another exercise what if I wanna check out my you know grades so I'm gonna go ahead comment this out and I'm going to check out my grade so you know or score so let's say I got a score of in this case I'll give you some notes so let's say anything you know anything that's 90 anything that's not greater than a 90 this will be considered an A anything greater than an 80 will be considered a b anything greater than a 70 will be considered a c anything greater than a 60 will be considered a d and then anything less than 60 will be considered an F so anything less than 60 will be an F so see if you could try this right now and create a if else if chained that could represent this okay so if I give you a score that's above a 90 it should say an a it print an a if I give you a score of between 80 and 90 should be a b uh C Etc so see if you could give that a try I'll give you five seconds to pause the video and then you should give this a full try on your own five four three two one all right I hope you pause it and you try to give it a try but regardless of what however it went let's go ahead and do this together so I'm going to create a score so we'll just start with some kind of score we're going to say if score is greater than 90 print a right and then we're going to say else if score is greater than 80 print B okay and actually let me give you a better parameter because if it's 80 that's also a b okay so I want if the score is 80 it's also a b this would only account for 81 something higher than an 80. so what we're going to do is score is greater than or equal to 80 greater than or equal to 90 greater than or equal to greater than or equal to okay and then this is actually less than 69 so this is fine because we want you know 59.9 to be an f and then I'm going to say else if score is so we're going to to say greater than or equal to and we can say else if score is less than 60 print F let's run this and you can see that it says I got an F now let's change the score to be an 80. let's run this you could see it gave me a b and then let's change this over here to be in 90 and boom you can see I got an A now what if it was a 95 let's run this and it's still an a what if it was an 87 let's run this and you could see that I got a B okay so with that logic you know we can fill the rest of it out if you weren't able to do it now you should definitely be able to do it so let's go ahead and we're going to say else if score is greater than or equal to 70 I'm going to say print C and then we're going to say else if score is greater than or equal to 60 let's say print D and then what we could also also say is we could say else so I can actually remove all of this and I can be pretty clever here and say print F because that's the only other case left because we have a case that's higher than 90 and then we have all the way down to a case that's greater than 60. so the only time an else would happen is if it was something less than 60. that's the only time right because otherwise it would be caught by this guy right here okay because that would mean it's higher than 90. so anything less than a 60 is an F so we could just be clean and write it like this now let's go ahead and try a few different numbers so 87 and I got a B let's try 93 what do I get a 103 maybe I I scored so well I got above 100 for this yeah so that's pretty good let's go ahead and try you know 67 and that's a d that's very good let's try maybe 53 53 what what do I get here boom and I got an F okay so not good I failed the class okay this was my score in math every math class that was my score so this is not too far from the truth anyway so I hope you got some good practice with how if else if else conditions work and what Boolean really means because everything here at the end of the day is very simple this is either the word true or it's either the word either the type false okay and this is a very specific data type true or false and how I can prove to you that these are data types this is Boolean data type so for example if I uh call type on the number five it'll tell me that is of class integer if I call type on 5.2 it will tell me that it's of type float if I call it on type on hello it'll tell me it's a string so see if you can call type on false and what do you get and false is like this with a capital f okay so give that a try five four three two one what did you discover right let's look at it false and it's of class Bool and if I go type true it's of class Bool so booleans those are the only two Boolean values that exist true or false and now you know if we want to take it even further we can actually chain values together as well okay so for example let's say we wanted to either have we wanted to show either a passing grade or a failing grade okay so if we wanted to just do that and we didn't have this A B C D minus stuff okay or a b c d uh F stuff we just had you passed and so if you pass it just said P okay or maybe just pass and if you failed it just said failed that's it so how could I do that well I wanted to be where if you got you know within this range let's just say this is a passing range and anything less than that just doesn't work so I could actually say that I could say if score and let's say I set the score here 80 for now if if score is greater than or equal to 60 and to make this example even better let's say you have pass failing and then you have like super pass meaning the the student got let's say uh you know superpass is when they get greater than a hundred okay so they just really crushed it let's say I start with the passing grade condition so the passing grade condition I'll say if the score is greater than or equal to 60 and score is less than a hundred if it's or less than or equal to a hundred because we're defining superpass to be something that's greater than 100 okay so 101 would be like you pass Super past it so we could actually even say this we can actually write multiple booleans here so for example I could say true and false and I get false so when you write with the Boolean gate logic or Boolean logic both of these statements have to be true whenever you have an and both statements have to be true or all statements have to be true in order for you to get a true so true and true and in other words like 5 is greater than six okay five five uh let's say 10 is greater than five and ten is greater than six since both of these statements are true you're going to get back true but if you said 10 is greater than 5 and 10 is less than 6 since this statement is a false here this whole thing is going to evaluate to false and not work which means that the only way that the code is going to run is if it's if the score is in between these numbers if it's greater than 100 or it's less than a 60 it will break and it won't work and we're just going to go ahead here and say passing grade so let's go ahead and run this and you can see that I'm getting passing grade now another cool thing and kind of important thing I want to show you in Python is there's another way to write it which is really nice and it's called pythonic okay so very pythonic way of writing it it just means you're writing very clean code that is pretty language specific can't really write in JavaScript and also this code is very stylistic in Python okay it's a nice way of writing it so I'll give you an example so there's multiple ways of writing the same statement another way to write it is you could say if score so since we're really saying score in between these two numbers there's a nicer way to write it you could actually say and this looks nicer and reads nicer in my opinion and you don't need to write a bunch of and statements and you could say print pass and grade and to prove that it's working I'll comment out this part and run you'll still see that it says passing grade okay I'll run it again just so you can see it and I'll choose 59 as a score and it won't say anything and then I'll choose 103 and it won't say anything it's detecting that it's out of that range and right when I put it in that range it will show up and say passing grade this is really cool this allows you to capture in between array change okay and this is the same thing as writing this guy over here same exact thing so you could chain your booleans with an and statement and then the last thing I want to show you is you could also change your booleans with an or statement like this okay so you if you have a true or false you're going to get back a true so an or statement only one of them has to be true so for example it's like hey what time did you eat today well I either ate at 3 P.M or I ate at 10 pm I'm not technically wrong okay I am telling you the truth one of them is correct so here it's giving me a true so if I have 3 is greater than 5 or 5 is less than three okay or we can say five is greater than three it's going to give me a true because here 5 is greater than 3. so since this is true and this is false it's going to Value to true so all that confusion aside okay I can also write ORS so I can say if score is less than 60 or score is greater than 100 I can say you either failed or you passed or you super passed okay so now let's choose the score and make the score 103 and let's see what it says it says you either failed or you super pass yep and if I choose 59 you either failed or you super passed that's correct and if I choose a 63 it'll it'll do this passing grade okay so you can see that this or statement works and it catches two things it's catching two you know it's caching below the boundary and then above the boundary so this or is super helpful too and I just want you to be aware of that or statement that it that it exists okay so this is a range there's an or way of doing this okay and then there's an and way of doing this I hope this was like not too confusing but I wanted to show you all these things because as we start to build up and add more layers of complexity it's really going to help you because these tools are going to come in handy and then you'll be able to write more pythonic code so this here I'm sorry if I didn't explain this correctly but this here is a very pythonic way of writing it this over here is like a regular way of writing it this is how somebody who's maybe coming from another programming language would write it somebody who's been in the python ecosystem knows that they can write it like this and this looks way way cleaner just these are the three examples that you should look at and these will be helpful so if you want to take note of this you know this is available for you the whole time this will be available to you the entire time and on the left hand side I have quasi.py right that's the file I am going to be coding in okay quasi.py just to be very clear main.py is the file you're going to be coding in and if you don't want any of my lines to run just go ahead and comment this out by the time you're watching this this might be they're commented out or deleted already so I wouldn't worry about it too much but my file is quasi.py okay you're going to write in main.py and follow along there so there you go just wanted to give you a little crash course on if else conditions because I think this will be valuable for you with that said let's keep on rocking and rolling all right you are doing great so far now what we're gonna do is we're just gonna comment out everything else that we don't need so make sure it's commented out and if at any time you look over here and you see things changed don't worry because I'm gonna keep adding things and adding more exercises and projects for you guys inside of this course all you need to worry about is keep coding inside of main okay main.py and since I'm cozy I'm just going to be coding in kazi.py so at any time you can go into cosita py you should have all the notes and everything because that's where I'm going to be doing all of my work now with that said let's keep rocking and rolling let's work on understanding and learning how functions work inside of python so in order to define a function I will do something along the lines of death okay d e f which is Define a function and then say I'm gonna call it say my name like this and first we'll just call this function and then we'll see what happens okay and this is just going to say hi rafae qazi it doesn't need to even say hi I'll just be like this now if I run this piece of code you'll notice that nothing actually happened why am I not actually seeing anything in this case now the reason why I'm not seeing anything is it's just like I defining a variable and if you don't call that variable it doesn't really do anything so for example say I said name is Rafi qazi well now I need to call that variable right if I need to do this so let's just say here name is John how would I call this here if I run this it doesn't actually output John to the screen if I want to call it I do print name and when I run this it will actually say John but the difference between a function is when you call it it's very similar to a variable but when you call a function you have to put these open close parentheses in front of it okay so it's very similar to a variable name except you got to do this and once you do this it runs everything that's inside of here so I'm going to hit run and you can see it says say my name okay we're going to get rid of this John thing here now what if I wanted it to say more names okay so let's say John and then let's go here and let's say Cara and let's say here and say sam and if I run this it'll run all of those lines of code but if I comment this part out right here it will say nothing so whenever I uncomment this this entire chunk of code is going to run that's the cool thing about a function it'll allows us to run big chunks of code at one time now I'm going to show you something else so what I want to do here is I want to make another function and this one will be more Dynamic so we'll call it say my name two okay so we're going to make our function a little bit Dynamic so it's going to basically take in a user input I'm going to say print rafikaze okay and let's just call our function print say my name to and then make sure we call it open close parens and I don't have to actually say print here because I'm already printing from the function itself so there we go I got Rafa quasi in this case what I want to actually say is I want this part to be dynamic so I want this to be name dynamically but it says this is not defined so what I'm going to do is this function is going to take in an argument and that argument is going to be name so it's going to take in a name and whatever name the user gives it print is going to put that name right here and then call the print function and then it's going to print it out onto the screen all right so I'm going to go ahead and say say my name and I will say Cosi and let's run it and boom you're going to get cozy I can say Rafe and boom it's going to run it so you can see how uh it can run your full name like that now we're gonna step it up a notch so I'm gonna comment this out because I don't need to run this function right now so we're going to comment this out I'm going to make a greeting function and this will take in your name okay so we can do some string formatting here so I'm going to say hey and then we'll say name okay or exclamation mark and let's go ahead and print greeting now or not print but let's just say greeting and we will say name is qazi and let's run this and you can see that it says hey qazi and I can even put a little Emoji here to make it more fun and you could see it says Hey Kazi now let's put exclamation mark at the end here that'll look nicer I think now what if we want to make not only the name Dynamic but also the greeting Dynamic meaning that we should be able to say the uh the person's name is qazi so greed Causey and greet them with a specific greeting so we can actually do that thing okay so it'll take in a greet and then it'll take in the name so now I can actually go ahead and give it two arguments okay and the first argument I'll give it is aloha and the second argument is the name so I'm giving this function greeting two arguments that's how we say it and then we want to make this dynamic as well so what should I replace this hay with so I get greet over here I'll give you five seconds to think about it five four three two one all right so we're gonna go ahead and change this with greet so now greeting is dynamic and the name is dynamic and let's go ahead and run this and we get Aloha qazi okay so this is an example of multiple arguments okay inside of a function this has one argument inside a function uh this here an example of no arguments so these are some simple examples of of functions okay and if we want to add some documentation to our function so they're more readable we can actually do that as well so I'll show you something it's called triple quotes inside of these triple quotes I can say greeting ticks and two arguments green and name and it greets the user and then I can actually even give an example of how to call this function so I can say grading and then I'll take in Aloha and then a name like this and then actually actually even show what that will output so I can show that it will actually output this string right here so that way if a user is about to use your function greeting they can look at it and they can go oh man I really understand what this code does it takes in two arguments greet a name and it creates the user this is how I would call it so this is a great example and this is what I'm expecting it will return turn so you don't always have to do this but documentation is an important and valuable skill that if you actually learn now you'll be way more advanced ahead of so many people because people shy away from it and run from it and if you just spend like three minutes or two minutes often times you could document most things very quickly and it'll help and save so much time and really help out other your fellow developers you know because you're going to get a job as a developer one day and so if you can write code that's very helpful like this your chances of getting a job will be so much higher because everybody wants a developer that is actually helpful to other people and isn't just some nerd that sits in a basement writes code and then when things break just doesn't communicate and nobody else knows how to handle that person's code because everybody hates that person so this will actually help you with that okay so our greeting function is looking good to me we can go ahead and comment this out for now now one other concept I want to show you is the concept of default arguments so I can say what if the user doesn't give a greeting what if that happens you know they don't put in anything for this so there is something you could do for default arguments it's a it's a pretty nice trick and I'll show you how we can do this so what we're going to do is the argument we know we're going to need a default argument for let's go ahead and put that at the end so I'm going to say comma and we'll do greet just like this okay so name comma greet and the greeting that we'll actually give here is Aloha let's say aloha by default if you don't put in anything for greet it'll say aloha by default so let's go ahead and give this a try I'm going to uncomment out this greeting and I'm going to hit command enter to run it and look at that I got back Aloha qazi because by default it assumed we had Aloha happening okay now if I went ahead and gave a specific greeting and I said hello and we ran this you'll see now it actually says hello Aussie so it's a very nice way of having default arguments like this because it makes your code a lot more user friendly because if a developer it you know forgets to put this or a user doesn't put a certain piece of information you can still let them go to the next page you know so an example of that would be if you made a fitness app and you asked the user for their body weights you know their body mass index their height Etc on a page but the user like didn't put in any of the information they should still be able to hit next and go to another page where maybe they can log their calories but if you didn't have these default arguments it would like force them to just stay on that page and just be like no you have to give me your body weight your body mass index your height and your gender all of it otherwise I can't let you go forward so default arguments are really really nice now one other really cool thing I want to show you is something called named arguments okay so for example if if I'm looking at this you know this gets pretty confusing because if I'm looking at this I don't know which place is for argument and I have no idea which place is for greeting like where what goes where I have no idea where does my where does my grading go and where does my name go right so is this the name and is this the greeting or is it the other way around so right now we're doing something called positional arguments so we know that since name is in the first position or the zeroth position I'm going to put my name in this earth position and since the greetings in the first position I'm gonna not put this but I'm gonna put a greeting like high okay so we know that but this is a concept known as positional arguments but what we actually care about are named arguments because that's a really nice way of doing it you don't always have to do this but this will make your life a lot easier in the future what I'm going to say instead is I'm going to do a greeting and I'm gonna say name is qazi comma great is high let's just say so now it's very nice because I can actually even change the order of this right so I can actually order it this way because it's greeting so now it doesn't really matter where I call it let's run this and I should see high qazi look at that so the order of these actually does not matter anymore because it's a named argument so I really like named Arguments for functions you don't always have to use them but it's very handy and then when you're calling this function and you're looking at it later and you haven't looked at your definition of a function in a long time it'll be very clear what the heck is happening for you in the future okay so for now we'll just keep things simple and we'll just call our functions using positional arguments all right so positional arguments okay and then we'll say name and then greet but I'm going to comment this out for now because I don't need this all right let's go ahead and now we'll create another function so with functions because there are such a life blood of coding there's pretty much no app that you'll write that won't have functions very unlikely unless you're writing some simple Python scripts if you master functions you're going to be a great coder so let's do a lot of practices with functions so let's go ahead and create a function it'll be called sum and it'll take in two arguments two numbers and what this function will do okay at a very simple level sum if I call it with like one and two it should return three okay so takes two integers returns there's some that's it if you want to take this documentation and you want to add it in the body you can do that as well and so now it makes it very clear what you're about to write as your code okay that's that's what I like about having some documentation like this what it'll look like so what I want to do is for this function I just want to go ahead and say return a plus b okay so if I'm taking in two numbers a a b then I just want to return their sum so let's go ahead here let's put this out here for now okay and let's just take a look at this the reason I'm showing it to you like this is because I want you to start getting used to seeing functions if you see this in there that might make it bloated it might confuse you for now but in future when you're writing your own functions I highly recommend you do the documentation within it like this so boom here we got our sum function and then when we return we just return a plus b so this is a function it returns these two numbers now let's go ahead and call our sum function and I'll say sum 1 comma two here's what's going to happen watch what happens when I run it nothing got output to the console because this is a return and not a print so for this function and most functions you're going to return the statement because once you return it you could actually do something with it so for example I'll show you what I mean so I could print this if I want to and now I'll actually get a printed answer three but what's cool about return is I could actually create a variable called num and now the result of sum is stored inside of it and now I could go ahead and print num so I could use this value later that's returned so you could see num was printed out and is three however if I replace this with print you'll notice we'll have a problem here if I replace it with print it prints it out right but then num it stores the value none inside of that like there's nothing because when I call sum here says something with print and then nothing gets stored here so in other words it's broken and not useful outside of the function okay so that's why return is a good way to do it all right so we're going to go ahead and I'm just going to say print for now so this function is working now I want to show you something so what you could actually do is you could say from Main import this function sum that you just wrote so we can play with it in the Shell now since I'm not in the main file like you might be I'm in this file called quasi.py I'm going to go ahead and I'm going to replace main with cozy and I'm going to say quasi import sum so now I actually have access to the function sum inside of my command line which is really nice and now I can go ahead and use this so I can say sum 1 comma two and Watch What Happens boom I get back three let's try sum again and I'll say five comma 20 27 boom I get 32 so you could see this function sum works every single time and I like this interactive terminal because you could play with this right you could do a lot of things with it like for example what if I do sum of 5 comma 27 plus 10 well this will evaluate to 32 and then this will add a 10 to that and then these will get added together and boom you get 42. this allows you to play test some ideas and do everything very very quickly so that's why I like playing in the console there's a lot of playing we can do here and then here you kind of write your clean you know finished pieces of code you know and then because you wanna you you can run them once whereas on the console like you can just keep hitting enter keep running it and it's easier alright so there you go that's how we do our sum function now what I want to do is I'm going to comment this out and I want to take a step backwards and so this way we can get a little bit more practice I'm going to take a step backwards and I want to convert some of the previous stuff we had written and turn that into functions so for example this food calculator app that we had written earlier I'm going to copy this entire thing command C or control C on Windows and I'm gonna come over here I'm gonna paste it and my task is I need to convert this into functions all right so that's what I need to do so when I'm looking at this the first thing I want to do is what so let me ask you this whenever you're about to create a function what three letters do you write I'll give you five seconds to figure that out five four three two one yes you write the word def okay so we're going to say def Define this allows us to define a function now what's the name of this function going to be well what will this entire piece of code do it will calculate the food total so wouldn't that be a good name for it calculate food total perfect so we're done with the name now we need to know what are the inputs that this function takes I can actually see these inputs right over here it takes in one input right here and second input right here so these over here are going to be the input that it needs these two so see if you can try to make them the arguments for this function by yourself use this as a hint I'll give you three seconds three two one you could pause the video you could try this by yourself as well so you get some practice so food amount we're going to take in his argument and tip percentage we're going to take in as an argument so those are two things this function is going to take as an argument and then what we're going to do because those need to be given we can't just calculate that right there's no way so we need to know hey what the tip is at this restaurant or what the food total is we have to wait for our server to give us that now we need to calculate the tip the actual tip percentage and then we need to calculate the tip amount so once I have the tip percentage which is right here I can turn it into let's just call it a variable like tip percent okay so we take the tip and we divide it by 100 or we could even get rid of this because we know that this is our hip right this is this thing right here so if we get 20 then this is going to be 0.2 which is going to reflect 20 so this is our tip percentage now we need to get our tip amount while tip amount is going to be food amount multiplied by the tip percentage so we take this and we multiply this okay you could put this in parentheses if you want and this will be tip amount and let's go ahead and just print tip amount for now and usually printing when you're creating a function is often used for debugging seeing where your code is at seeing if things are working as you expect them to or not so now we're just going to go ahead and call this function so I'm going to say calculate food total I'm going to give it a hundred dollars and a 10 tip and let's see if it calculates the tip amount correctly so the tip amount should be ten dollars let's go ahead and run this and we did get back ten dollars now the last thing we're missing is the total amount well that's going to be whatever the food amount is plus the tip amount that's what that is and since we're using the word amount everywhere we can just replace it also everywhere and this this case and just simplify our life and then the code will look simpler total is Food Plus tip okay it looks nicer and easier now we need to make sure that we actually return this because you see it'll tell you hey you're not using this okay so we're going to return this in a second but first let's go ahead and just print it out and let's see if we get back what we're expecting and you can see that I'm getting back total and it says 110 right there what I can do is I can just return total because that's all this function needs to do and we can delete these other lines of code I click that button over here because it will style the code and make it look pretty alright there we go let's run this and we're getting back nothing because we're just returning and we're not printing so when you return what happens is this will evaluate to that number so if I did 100 comma tenant this will give me back let's say a hundred and ten dollars is my total amount and then print will actually go ahead print it out and show it onto the screen so let's go ahead and give this a try and boom lo and behold you can see that I got back a hundred and ten so calculate food total is now working exactly like we expected okay so there we go we've taken that blob of code and turned it into a nice function and now if we you know commented out the nice thing is that our code will still be fine we just have to comment it out and then this entire block won't run anymore so we could just kind of ignore this block but it's nice to be able to calculate food tip like this now you can use named arguments because you're like hey which one is the tip and which one is the food it's kind of confusing right so what we could do is we could say food is you know 100 and then we could say tip percentage is 20 all right and now we could call it with the named argument and of course we'll have to print that result and you could see that I get back 120 and then I think we did something else with food if I'm not mistaken we made food look really nice so we could certainly do that here as well we could make food look really nice just copy that piece of code and if you want it to kind of have that like prettiness action going on which is not totally necessary in this case I'll uncomment this and then just make sure you indent everything so I'm going to hit delete and hit enter okay and sometimes this happens with python which is really annoying so delete delete bring it up to a new line delete bring it up to a new line delete delete hit enter delete enter delete enter delete enter and yeah this this I'm not gonna lie is a little bit annoying because it needs to be indented in a specific way and when it's not indented in that specific way it'll give you errors and you will be like what did I do I didn't do anything wrong they'll just be like nope you your mistake was just being born in this world all right now the error we're getting is it says food amount is not defined so that's because we called it food and we call it a tip rename it correctly and there we go food amount so it's printing out exactly like how we wanted it to now let's get a little bit more practice in with functions so I want you to give this a try yourself see if you could turn this weather thing into a function so I'll give you a hint so first let's comment this out and so we'll say Define and I guess we'll call this function weather to Emoji because you give it a weather and then it tells you what emoji that is represented okay so we're going to say weather to Emoji okay so this is what the function is going to be called I'll leave the body empty for now because that's what you're going to be writing and then for documentation we'll we'll say this okay we'll say whether to move OG will and they'll take in some arguments I'll leave this blank too but you have to kind of fill that part in and let's write it like pythonic like this so we'll say Emoji takes in one argument as a string okay so we know that whatever the user gives us is going to be a string and let's just say we're expecting expected uh values from user is just going to be like rain thunderstorm all right so these are the expected values and our expected inputs okay so they're going to be either of them and then it's going to be like this so if we call weather to Emoji function with let's say rain well we should actually get back is that umbrella okay if we call this function with not rain let's say thunderstorm we should get back cloud with thunderstorm just like this and then if we call this with the weather is sunny outside then it should just give us sunglasses and if you want to be super accurate this is it returns a string so this is like me being super accurate and you can see that this documentation is already probably very very helpful for you because you could see okay this is exactly how I'm going to be calling this function this is exactly what it should be returning okay I think I can understand that so you where I wrote pass you have to replace that with you know the body of the function which means you have to replace that with the correct code so that when I call whether to pass function and I give it an argument like rain it does indeed return this and when I give it the arm when I say thunderstorm it does return this so you have to figure that part out so I'm going to give you about five seconds here to pause and then try to do this on your own and then we'll try to do this together five four three two one all right let's do this together so if you got to this part very good and if you give it a try and you got it beautiful job if you didn't it's okay we're gonna do this together so now what I want to do here is I want to say what I had initially said right so I can I can I don't need to go through the entire logic again I could copy paste I could copy paste this and let's uncomment this and then let's just make sure that everything is indented properly so I'll I'll just bring it back up and hit enter so because there's something called Scopes which is really important to understand in programming so I'll just take these comments away for a second just so you could see it so this is a function so everything underneath this function will be indented showing that it's part of this function right over here then every time we have a if condition anything that's part of that if condition will be indented like this print statement to show that it's part of the if statement so this entire thing belongs to this weather Emoji function okay that's why it's indented okay this print is indented because part of this if this print is indented because part of this lsif but keep in mind else if is not inside of this if okay so keep that in mind it's very very important and neither is this else and now if I want to get outside of this function I have to make sure I unindent all the way out and then write something so you know I am outside right now but if I wrote something at this level I am still inside weather to Emoji function okay so indentation indentation makes a huge difference in Python all right so just remember that so actually let's let me go bring my comments back because those were actually quite helpful okay so there's my logic now for weather weather is actually going to be passed in automatically let me put this outside of here okay and let's do it like this just so when I'm going through the code with you guys it's not super confusing because the big that big blob like just makes it look too intimidating so the actual logic of the function here we're just going to put in weather so it's going to take in a weather that's the input and then it's gonna see if it's rain it's gonna do this if it's cloud it's going to do this if it's thunderstorms going to do this otherwise it's going to print sunny and Bob's your uncle all right I have to indent and undent all this stuff so I'll just do that real quick so you can see copy paste copying and pasting usually in Python it's not a good idea just try to write stuff from scratch and then you won't have these weird indentation problems because even a difference between a tab for example if I write a tab you see how a tab like is that versus four spaces or two or spaces so a tab looks like it's really just two spaces but it's not it's a whole different character and so if you're copying pasting copying and pasting code from somewhere where the writer of the code was using tabs and then but you were using spaces in all of your code then that will break and that that copy and paste will not work as well so what I recommend is like put the code next to so you can see it and then write it from scratch and then you'll be fine all right so whether the Emoji I think it's pretty much done if weather is rain whatever so let's go ahead and try calling it now so I'll say weather to 2 to emoji and I'm going to give it rained and let's see what happens so let's run this and boom look at that I got an umbrella let's go ahead and import this now and here so from qazi you should do from Main and I'll say import weather to Emoji so I'm going to import this function that I just made and I'll just say whether to Emoji I hit Tab and tab allows me to auto complete it and I'll say rain and then I'll hit up and go back and delete the inside of the parentheses and I'll say cloudy and I'll go up and I'll say thunder storm and you can see that it works every single time and if I went here and I said hailing it gives me sunny so every single time if it's not any of these three I'll get back Sunny so this code over here right Maps perfectly to this output right over here and if you actually look in our documentation well our documentation here looks very similar to what we're seeing out inside of the console okay so this is just multiple ways for you to understand and get back to you know that conclusion but I'm showing you a little bit more advanced stuff than some people might but I think it's helpful for you and it'll it'll really prepare you for the future so let's comment out whether to emoji and then let's keep moving forward now one other cool thing I kind of want to show you is uh it's a little bit more advanced but some of the stuff that we're documenting out here we could do something called type hinting where it allows you to essentially integrate documenting and coding at the same time I don't want you to be doing this yet but I just want to expose you to it so if you ever see it you're not confused by it and you know what it means and just know that it's there to help you and not to confuse you so for example we were saying you know we're we're writing all the stuff here and telling the user hey it takes in one argument as a string right but then the user is probably thinking well does this function return anything well then we'll have to write okay this function returns nothing or what we saw earlier turns none so so you know the user has to actually like read all this and try to understand this so we can actually make this simpler for the user so with this weather we know it's going to be a string so we can actually do colon Str and Str is a builtin if I go to the console and I write like some random variable it's going to say hey it's undefined but if I write Str it's going to actually say oh that's class strength and then there's another builtin right which is none which just is like hey this is none okay like nothing that's what that means so what I could do is not only could I tell the code that we're expecting a string so when you're reading this you're like ah I get it I'm expecting a string here for weather you could also do this and say none which if somebody was reading your code they would immediately know oh weather is a Str whether it's a string and this function actually returns none ah okay so um I shouldn't be expecting a return statement here so it's very nice to kind of bake in documentation into your code like this because it's just very helpful and this is a brand new new feature that was enabled after python 3.5 plus and you know so it's really nice because if you use typescript or any of those other types of languages they have they have this type of stuff there and what I like is like you could use it or you could not use it and your code would still work so for example if I run my code here and I run this I'm still going to go ahead and get my umbrella nothing really changed and you might be like why would I ever write more lines of code well same reason why you write more documentation or documentation in general is so your code is cleaner and easier to read and something for you to understand is 80 to 90 percent of your time as a developer will be used to read code okay about 80 to 90 percent of your time only about say 10 or 20 percent of your time will actually be used right in code okay so for example why why do I mean that if you were building an app and you built your own app and it took you like six months or nine months or a year to make you're not every single day going to be coming back to that app and like writing so much more in code a lot of your time is going to be spent reading the code understanding what you've done and then maybe adding a new feature and then if you want to add a new feature you'll you'll need to go back and look at again what you've done and then see if you could add a new feature because adding a new feature wouldn't just be as simple as copy and pasting lines copying and pasting lines you'll have to understand all the work that you've done previously so the cognitive load of if you just make it messy and leave it jumbled and don't have any documentation or anything it's going to be a nightmare even for you to understand what you did and to catch up with everything so for now that you're a beginner you don't need to worry about any of this you can just be like screw docs screw type hinting I don't give a I'm trying to write a simple code fair I agree with you honestly to this date that's how I write a lot of my code but if you want to get hired and have higher chances of getting hired and write code it's very pleasant to understand and read because again most of your code and other developers on your team will be reading your code this is the way to go go and if you pick up these habits now it'll just it'll make you so awesome to work with for future so just a little note there just a little rant there on it I just thought I'll leave you with this okay so this is called type hinting so I'll leave a little comment here saying type hinting okay that's what that's that's what that is so let's keep on moving forward now let's go ahead and type in some of our other functions okay so for example we created some so why don't you try to type hint sum and if you have multiple arguments you can just repeat this process right here for the multiple arguments as well okay so give this a try and see if you could type in some I'll give you about five seconds five four three two one if you want to type in sum you can actually go ahead and say int it's a builtin so if I write int here it's a built in okay int and I'm expecting an integer here as well okay but in the docs I had integers so I'm I'm if I'm reading reading this code now I go okay I'm expecting it two integers to be coming through but then what are we returning well we're also actually returning a see if you could fill this out here what does this return once this get evaluated so if I had a one here and a 2 here this will become a three and I'll return to three three is what data type you're right if you got this okay this is I'm gonna be returning an INT so now when I'm reading this without even looking at anything else I just know okay I'm getting integers I'm returning an integer very simple but initially very confusing to look at and then when you get used to it then it's simple and then you're like oh actually this is super helpful it saves me a lot of time and effort like for example you know if you had food well what the heck is if I wanted to convert this into type hinting right what's Happening Here How can I convert this into taipant well I'm getting back I'm putting in a food but is food a like you know it's food am I expecting a string like chicken or am I expecting a food amount like a number well how would I know that it was an amount also can I get back an amount like 50 or what about 52.5 live so I can also get floats well float you know is like a super class of integer because floats contain integers right so I can actually go here and I can say float it's a builtin data type food is float and type uh tip percentage is it could also be a float okay but in this case we could just say integer okay we're expecting back to get back into your 15 20 not many people release it 25.5 percent is what I want to tip and then what are we returning while we're returning a number which is you know could be a hundred and twenty dollars and 20 cents so it could be a float so I could actually just say float so now when I look at this function I just go okay I'm expecting some kind of number here some kind of number here and I'm returning some kind of number okay so some math stuff going on here all right so that's how I would type hint both of those now if I call sum and we run this I should still get some without any problems so it didn't really do quote unquote anything it just made your code a lot more read edible and it makes other developers not want to slap you to be honest so great so whether to Emoji is now good you've gotten some practice with type hinting named arguments default arguments calling functions turning your previous code into functions all of this is a these are actually very valuable skills and it's a lot to synthesize in a very short amount of time so I'm going through this but I expect that you're watching this over days and weeks so I hope that this can register in your brain now before we move forward I want to give you an exercise it's time for an exercise put some cheesy music or something here throw some cheese on the screen all right great so time for an exercise all right get ready get ready we're gonna try to keep this exercise as simple as humanly possible and we'll start off with something something basic it's not that basic so don't get excited it's actually a little tricky but um I I believe in you I believe venue I believe you could do this so I have this exercises folder right here you can go in here and do the exercise okay so I'll go into exercises and we'll go into this exercise here bigger guy this is going to be your first exercise all right so now I'm inside of bigger guy so this is how it works so I go here and you read The Prompt make sure you read everything that's there don't just not read because that's mean we spent so much time and effort making this for you making it easy here's the prompt write a function bigger guide that takes in two numbers and returns a bigger one make sure to return to use return and not print in your function you could write print in your function while you are let's say working on it but you know in future make sure to uh return it but I'm Sorry by that I mean that at the end once you're done make sure you return it okay like don't just leave all the prints there but don't return so like while you're debugging and working on it's pretty normal to use print at the end of it you should have a return majority of the times on all your functions one other important note that I want to leave you with is and this will come in handy later so I'll say important right here and it'll say Do not forget to import this into main.py alright so I'll talk about this in a second this is going to be a very important point because if you don't do this and I don't tell you about this you won't be able to run your bigger guy function and then you'll just be depressed alright so let's just talk about the function first real quick okay and what's happening here so given two numbers return the bigger one so I want to be able to call bigger guy just like this bigger guy takes in two arguments two comma three and it Returns the bigger one three okay so that's an example for you if I had obviously 10 then it will return 10 right here okay it won't return the smaller Guy where it says pass is where you're going to write your solution where you're going to write the code okay I have written pass here because I'm not just going to give you the solution it's an exercise now if you want to actually call this function here's how you're going to do it you're going to go inside of your main.py and I'm going to show you how to import stuff because it's going to be important for me it says import quasi because because I'm still working on this file for you this line shouldn't even be there and it doesn't matter so I'm just going to comment this out for now because it's not necessary okay you could just if you feel comfortable you can even delete this but it's not going to be there most likely uh now we're going to say from exercises dot bigger guy so I'm gonna go dot bigger guy so by doing this I have so here imagine like we're we're on this walk and this journey together right so when I do exercises it takes me into this folder right here boom and it just opens it then we're gonna do the dot bigger guy it goes into this file and it opens it now inside of this file I have pretty much only one function and it's called bigger guy as well so I can actually say import bigger guy and that'll get me access to that function but since I'm so nice and I want to make life even simpler for you you can actually just say import exercises dot bigger guy and that's it okay yes this is going to remain yellow but leave it it's not important it's not important so let's go back into our bigger guy right here okay and if you want to run this let's do this okay so I'll just say print and I'll say banana Anna here and then I'll say print bigger guy and then give it two arguments so we'll just give it one and two for now and I'll run I get a banana printed out to the screen so without confusing you too much if you want this to run you'll need to have this imported in the main file if you don't have it imported in the main file and you run it you get back nothing NADA nobody's there nobody's home okay because what's happening is the only file your python is running right now is this main.py file as the only file that's being ran none of the other files are being ran so you have to import and then you can actually run that file okay so import allows you to do that here is another way you can run that file okay and this is the way you could run it on your local computer anywhere as well so say you want to run this file bigger guy and let's just say you forget this import method or you just don't like it I don't know whatever the reason you can run it from your shell okay so go to your shell you can hit enter right and and this it should tell you're in this folder whatever your folder is called CD into exercises okay so the command line stuff is valuable and so I'm I think it'd actually be cool if you learned this because if you're doing python you're gonna be doing something with the command line so CD into exercises and all this means is I'm I've changed directory and now I'm inside of this exercises folder and then simply do python bigger and then you could just hit tab it'll auto complete it okay and there we go so the banana was printed out to the screen it ran that file so those are the two different ways of running this file I think this is a much easier way because once you set it up this way you can just keep working on your code you just say print cookie and then just hit command enter and everything will run okay you're getting the cookie and you're getting the banana everything is working perfectly so in my opinion this is a much easier way now once you're sure that you have written this function and you've written it completely correctly and just to give you hints you're going to have some you're gonna have to do some if um else conditions here and to give you even further hint you're probably gonna have to do only one if and only one else and your logic is going to be you know basically like hey if this is greater than this one then return this one otherwise return the other one okay so I've kind of given you the logic now you just have to turn it into code and we'll code it together if you don't get it which is totally fine so that's kind of the logic right there and if you're sure that you did it right I have man I'm so nice I have also written tests for you which means my tests will run and test if your code is working or not and if it's broken it'll catch it and tell you so what you could do is you could go into the shell and once you're inside of the shell just make sure to go to the home directory so let's just say you were in exercises just do CD space dot dot that will take you out and back One Directory so now that you're in the home directory whatever of your project just go ahead and do PI test if you run Pi test it'll run and it'll tell you if your function is correct or not and here it's saying uh nope this function was not correct we ran the test it says hey we ran this a bigger guy one comma two and where it was supposed to return to it actually didn't it actually returned none and that doesn't seem right now I'm hiding the solution from you because I just solved the problem if you have done it correctly and you do PI test it should basically say green okay um and it should give you uh test all exercises okay and it should give you a like a green check mark for this now if you just do PI tests right on your computer you're going to get something ugly that's gonna have red red marks and stuff like that and I don't want you to have that because it's testing every single test that I've written inside of test all exercises so it's actually saying that you passed for the bigger guy one but you failed for some other ones right so one failed and it says one passed you can see the green here passed but what I want you to do is don't test the entire file in all the functions right so if I actually look in the test file I want you to just test the bigger guy function so I've written these tests you don't have to worry about them but I'm just checking if you know if I call it with one and two does it return two if I call it 10 and 20 it should return 20. so I've written these tests don't touch anything in the test file okay so just get out of this test file I'm just showing this to you so you're not like scared what this is yeah what's going on here but I'm also testing other functions in there so if you're doing Pi test it'll test this guy and it'll test every other exercise you've done as well so we don't want to do that we want to test only your uh bigger guide bigger guy okay so let's go back and here's what we're going to do I'm going to clear this okay and then we're simply going to go ahead and say I'm going to say Pi test do Dash K and I'm just going to say test bigger guy that's it so now for bigger guy I did pass successfully for the other now if you want to test other functions you obviously just give the names of whatever the other functions are and make sure you don't change function names and things so go ahead and give this a try I really hope that you get it I think you will and I'm just going to set it back up to how you should get it okay so it's just going to be like this is going to be pass boom okay and then yeah that's it so replace this pass with the correct code run this test it out and yeah and if it's successful then it should pass essentially all of the tests and then you should be good to go with that said good luck I'm rooting for you all right welcome back so I hope you gave it a shot and made tremendous amount of progress I really hope you were able to actually fully solve it but no worries uh if you didn't let's do it together and even if you did hey maybe you'll get to learn something so here's the situation right I have to return one of whichever one is the bigger one well I'm gonna check and I'm gonna say hey is a greater than b okay so I'm going to do that check first so let's actually go ahead into our console let's just test something so I'll set a num A5 and B I'll set it to 10. and I'll just say hey is a greater than b and I get false okay so I'm like okay so far so good I like using my console as I'm writing my code because very interactive I can see what's happening and then come back and add it to my code okay and now I can actually even write here if a is greater than b then you know just give me back a just like print a whatever so if a is greater than b let's see give me a else give me b so let's see what this does I ran this line this code and if you actually see I got back 10 which is actually exactly what I'm supposed to get right in that case so I'm going to say if it's a is greater than b return a else return B okay so basically what I'm saying is you know just do do this little chakaruski over here and if it's if this number is bigger then return it otherwise if the other number is bigger then return that yeah that's it so let's return run this and we we can try running this function and see if it gives us what we wanted to give us so I'll say bigger guy and I'll call this with one comma two let's run this and I get back to 2 which is completely correct let's go five it should choose five now so it's looking correct I can also import it as a console if I want I can say from exercises dot bigger guy import bigger guy and then I can say bigger guy give it two comma four so I'm just showing you multiple ways you can access this function and play around with it and then I'm gonna go ahead in my uh test and I'll say test okay and um let's just leave a little note here and then we'll say to to test your code this is the command that you'll write Pi test Pi test k and then you know bigger guy whatever so I'll remove this yeah this is going to be the code that you write for this one right it's a pie test and then I'll say bigger guy shell okay there we go so now it's very clear what's happening all right let's run this and boom there you go it says all tests have actually been passed all right there you go so if you got this congratulations if you didn't all good they're going to be plenty of more exercises so don't lose hope and let's keep going all right welcome back you're doing great so far all right so now let's get out of this function okay hopefully you got this one correct let's go back into your main but I'm gonna go into my Kazi because that's where I'm writing all my code but you should be writing it in your main okay so just ignore cozy so let's go over here now I want to introduce you to our friend Lambda okay it's a great friend you're gonna love him or love her she's awesome but in order to learn about Lambda you know we need to just get the technical definition out of the way and it is basically allows you to create an anonymous function uh boring boring boring definition but it's a lot more fun in real life so let's just use it without doing too much talking here's an example so remember when we had our sum function right so it was a comma B and then we said return a plus b well with Lambda we can actually make it a lot cooler for example I could say sum and I could say Lambda okay and I can say a comma B and I can say a plus b so this is let's just call this sum two so basically over here this is a this is a whole function okay how do I know because I can actually use it I could say print sum to and let's give it one comma two and it's telling us what the inputs are it's an anonymous function right here all right so I'm going to hit run and right when I hit run boom look at that I get back three now I could change this to let's say five comma ten let's run this and I get back 15. so you can see that this is a really nice way of writing the same piece of code and it just puts it in one line and honestly I really like looking at it like this and in functional programming if you're doing JavaScript or whatever you come from that ecosystem yeah a lot of functional programming will look like this okay JavaScript has its error functions but a lot of those Concepts came from like Python and functional programming languages like this synonymous functions are really nice now you could use you could create this function without a name and use it or you could do it here so either way will work but yeah that's the definition now I want to introduce you to this concept of implicit return so notice that you actually didn't even have to say return here here because in Lambda functions you can only have one expression instead of multiple expressions and that's expression expression it thinks you're returning okay so when I run it you get back 15 and I don't even need a return statement so that's nice because it looks cleaner now how does Lambda work so Lambda you say Lambda and then you put ARG one you put Arc two however many arcs you have right whatever and then colon argone plus R2 or whatever like however you want to use them this is where the arguments go and then after the colon is where your expression goes okay so we just say expression all right so you know if I want to make my greet function I can say take greed comma name and then just go high I can go great cozy now my grid function has turned into a Lambda and I can run this okay so my bad name so now let's do print and we'll call this great and now I'll say great and we'll say aloha and I will say qazi and let's run this and boom we got that okay so you can see it it works it's easy to read and everything is just in one line now there will be more we'll talk about later about lambdas but for now I just wanted you to be intro to them and not be scared of them because you'll see them a lot so you know become friends with Lambda that's a good idea and also I wanted you to get familiar with the concept of implicit returns right they're returning here you're returning here um implicit returns now another thing I want to intro you to is called testing so testing your code how do you test your code you might have heard of something called unit test or whatever we're not going to get too deep into it but I'm just going to show you how to write basic basic basic basic basic tests for example we've already defined our sum function right so for example if I do print let's comment out both of these lines here so let's say I write my function sum 1 comma 2 I should get back 3 and it should print it out over there it does beautiful how do I test this so how I test this is I can actually go ahead and say assert that sum of 1 and 2 is equal to what can you guess I mean it's pretty obvious right sum of 1 and 2 should return what three right so I will write the statement assert that sum of one comma two is equal to 3. so when I run this and if I don't get any errors that means everything worked and our our code works great now imagine you went to your sum function so let's see if we can find our sum function let's say we want your sum function and you did something that may be broken maybe you like instead hit a minus here and maybe you did that by mistake and then you just like moved along if you didn't have this a search statement you would run your code and it would seem like everything else is fine but that sum function might be causing so much so many errors in your app but watch this if I run this now boom it just immediately catches and it says Hey assertion error assert someone comma two equals three and that's not the case here okay and I can even leave a little helpful message and it's like someone comma 2 does not return three like it should and I I can put a little X here or whatever and you run this and I could see hey sum 1 comma two does not return three like it should so now there's like a more helpful error message and you can and assert allows you to do that so what I like to do sometimes when I'm coding is I'll just have a bunch of assert statements like some you know and and I want a really rigorously test this like does it work on negative numbers like negative 20 comma negative uh 20. so negative 20 plus positive 20 should give me back zero so I want to assert that this is zero okay so let's go back to our sum function let's fix it so I'll say a plus b okay let's run it again and now you can see that all tests pass okay so I can say print some function in all tests passed and I I'm just doing this one for just show you don't have to ever like do that okay but I'm just doing this so we could see it cleanly okay some functions all of the tests pass because if it broke at any of these points it would just stop running right there it wouldn't go any further that's what assert does now what I would probably do you know as a next step is I would not just leave this code outside by itself but I would put it inside of a function so I'd say test sum so that'd be like hey test my sum function and all it would do is it would just have these assertions so I'm gonna delete delete hit enter delete delete hit enter and maybe a couple of more assertions like make sure 20 plus 20 is 40 make sure you know 560 plus 780 is 560 plus 780 is thirteen one three four zero okay so yeah just make sure sure that those match so now I need to and I'll put this print statement inside of that function as well okay now if we don't call that function obviously when I run my code nothing will happen because I'm not calling it so I'll just say test sum and we'll run this and boom look at that it says all test pass in this case we have four tests I'll just say four or four and then we'll run this and we'll say hey all of the four tests passed so sometimes that's actually a really good way for you to actually write your code because okay you know what what your functions should return right so for example let's say we want to write a test for calculate food total before we even really write the code for it so I'll say test calculate food total and I'll do this and I'll just hit assert calculate uh when I call that function calculate food total yeah and isn't that what I called it oh okay I see I called it like this uh camel case so I'll just say calculate food total and this is really helpful because documentation just showed up from our code so the first argument is food so I'll just say hey the food amount is a float right it's telling us which is very helpful and it says the second argument human is tip percentage and that's an integer so that's also very helpful so I know okay 20 so if I have a hundred dollars and I have twenty percent tip the total amount should actually return 122 um 120 okay so that's what it should return so let's go ahead and test calculate food total and I'll call this and let's run it and let's see if we get an error we did not get any error let's say if we said 125 boom now we get an assertion error so that's what's nice because you could write these tests and it gives you a very clear idea of how your function is going to look if there are any edge cases you'll be able to catch them right here for example what if we had a decimal percentages that people were giving it like would that still work and what would happen if they were giving this would that still work and what would what would the result of that be so you could test that you know you could test what if people give me you know a negative number because for your apps when you're making them for users you'll have to also write these tests right imagine somebody who's using Instagram right now well the developers have to test what if the user like hits the back button on certain case or like tries to delete somebody else's comment are they allowed to do that can somebody you know create a new comment are they allowed to do that is that working because what if all of a sudden they added a new feature but then that broke the ability to create comments they want to be able to catch that right away without you know with waiting for a really long time to find that out so they have all these test cases and then as soon as that function breaks or you do something where it doesn't work these test cases will actually catch it let's go ahead and do test calculate food total and so like imagine I went to my test calculate food total and I was like I'm just gonna like change around a couple of things and I'll try uh just doing divide divide by 100 I'm sure it won't make a difference let's go ahead and boom We like caught that there's an error right away that it doesn't work it's saying assertion error right it caught it right away so let's go ahead get rid of this let's run it and now boom you can see there are no assertion errors anymore and our problem is solved okay so this assert thing I really like using it it's very simple to use I love how simple python makes it so you know get in the habit of also testing your own code and this is a very light and easy way to do it and then later on if you ever want to write unit tests I have an example of unit tests here for you and I'm I've written some unit tests in here okay so uh that's that's the way to do it so far you're doing great let's keep on going all right now let's go forward and we're going to talk about probably one of my most favorite things that makes programming honestly programming and it is arrays okay a raise which in Python we actually call lists okay so if you hear arrays they're the same thing as lists okay so lists are one of my favorite thing things in just programming lists allow you to do a lot of stuff but let's just start off with simple things so let me ask you this question right so far if you want to hold multiple items in one variable how are you going to do that so let's say I want to give you like you know I want to say hold 10 numbers in one variable how are you going to do that you're you're not right because if you say x is equal to or you say numbers is equal to how are you going to hold 10 numbers because if you do 10 comma 10 well that won't work that won't do what you wanted to do you could try 10 10 10 10 but that also won't work because that's an error it's like okay what the heck is even that if you try to put them all together well that's just one big number that's not 10 different numbers lists are amazing for that now where are lists used well if you've ever been to Netflix here's an example of an of a list here the list of users and for every user show the user so this is an example of a list and where it gets used if I go inside here all of this this is a list okay list of movies so it's the first movie this is the second movie third movie fourth movie fifth movie and multiple things are being stored without lists this would not be possible lists are erased it would not be possible I'm gonna create an array or a list of fruits and in this list I'm gonna have different fruits I'll have a cookie I mean that's not really a fruit I'll have an apple I'll have a pear I'll have a ice cream that's not a fruit what other fruits are there blueberry there we go I'll have a banana so I got a bunch of fruits here and yeah my my pie flakes is freaking out pie flakes is just really really just saying hey like it usually tells you about styling but it's freaking out here because I think it's like I don't understand this blueberry and this stuff is okay now I can print fruits so let's go ahead and run this okay it actually caught it correctly it said hey I don't know what this blueberries thing is so let's change the blueberries to an orange let's give this a try and let's see if it knows yes it looks like it knows you you don't have to use these emojis I just like to use these emojis because I'm sure you're bored with all the other boring programming tutorials and so this would make your life a little bit easier it's something more fun to look at than just numbers so here are my fruits that I have now here's the cool thing I'm going to show you a couple of things with lists so lists have different type of methods that you can use and if you ever hear me saying word like methods versus functions here's really what that means anything that I do like this if I do print or whatever that is a function okay this is an example of a function but anything I do that requires me to do a DOT so with with the list I'll probably show you like list dot uh list dot append if you ever do this dot a pen thing so append would be a method whereas print would be a function so just some terminology stuff that you know could be helpful for you so let's go ahead and print fruits and you know of course when I when I print fruits it shows me the fruits right over there and now I'll show you some methods that you could have so for example what if I wanted to add more fruits like let's say I want to add another orange well what I can actually do is I can say fruit dot append and I can append another orange and then let's go ahead and print fruits again so Watch What Happens look at the first array right this is before adding the orange and then look at the second array this was after adding the orange and now you can see that I've added that orange okay and it's a pen because you're adding to the end that's why it's a pent and there you go I got myself another orange and so you try a pending a strawberry and see if you could do that and if you can't if you don't have emojis just use the word strawberry so give that a try I'll give you five seconds five four three two one all right let's do it together so I'm gonna go ahead and I'm gonna say fruit start append and I'll put a strawberry here and then we'll print this out again let's run this and now I should see yes without this it's four items originally then I added the orange and then I added the strawberry and you can see all of them are actually added correctly how they're supposed to be added there you go that's your buzzword of the day a pen now let's look at indexing what if I want to get the zeroth item right there and maybe needing I want to get this apple what if I want to get that orange how will I get that orange out of that area so I can do print fruits right that I could do and I'll comment out uh some of these fruits right here actually let's leave it uncommented for now just like okay I can print out fruits but how do I get that specific fruit out of there well what I could actually do is something called indexing so if I show you a raise arrays have indices okay so the zeroth item is going to have the indices of zero meaning this apple here is going to have the indices of zero then the second item is going to have one because in programming numbers usually start from zero okay and then one instead of one and two so in this case we have the pair so one is going to be the pair then it is Orange right there so let's go ahead and give that a try now so I'm going to go ahead and do fruits of zero and let's run this and look at that I got my Apple okay I'll go ahead and comment out all this other stuff for now and let's look I got my Apple okay let's go ahead and see how we get our pair and you can see I got my pair let's go ahead and try fruits of two and I got my orange okay so I think you're getting the idea right now why don't you go ahead and try to get that banana I'll give you five seconds five four three two one all right so I hope that you figured out how to get the banana but it'll be very simple right we're just gonna do fruits of three and if I run this I should get back that banana right over there okay so so far so good I'm able to index it and get back things now here's a cool way to get the last item so it's like how do you get how to always get the last item in an array that might be a great question for you to think about okay maybe that's a problem you could try to solve one nice way we could always get the last item of an array is we could go backwards so python allows us to actually index backwards as well which I love because JavaScript and those things don't have that so it's like when you're working with lists my God it's annoying to not be able to go backwards so here's how we can do it instead of saying fruits of three I could actually go fruits of negative one and fruits of negative one you'll notice actually gives me this banana right over there and this means that even if I change the size of it meaning I keep appending let's say I keep appending fruits here okay and then let's comment out all these other ones so I'm changing the size of it and I'm appending like an orange and a strawberry so it needs to give me dynamically the strawberry let's see if it could do that I'll run this and boom look at that it actually gave me back a strawberry so it doesn't matter how many things I'm adding or not adding right it will figure out in its own way so comment this out now comment it out now let's say I add a cookie here and when I run this fruits of negative one is still going to get me to cook you okay so even though the size of this keeps changing this starts from right to left whereas this starts from left to right okay so right to left so negative one okay in other words this will be negative one and like I'll zoom in so you can see it better that'll be negative one that'll be negative two that'll be negative three okay but if you if you're going this is if you're going right to left okay but if you're going left to right then this will be zero and this will be one okay and then this will be two this will be three and this will be four and I think you get the idea okay so in my opinion it's much nicer in or uh in Python and way easier to be able to get like the last item of an array and the first item of an array so that's how uh this method append works and that's how uh indexing works and you can actually like pull values out of an array now the other thing I want to show you when it comes to arrays is something called slicing so this is a very valuable thing to learn so I'll say so it says slicing when you have slicing in an array that means what if I want a chunk of this array from here to here or what if I want just these three elements from an array so how do I slice this array earlier I gave give you an example of Netflix right if we go back to Netflix say all of these movies every single one is in some big giant array but I just want to slice and give you in this in this list right I just want to slice and give you every trending now movie so maybe I'll go through that let's say like every single movies in this giant list every single movie well I might want to slice it and just get you the trending movies or I might just want to slice it from here to here and get you you know awardwinning shows or what or yeah right so for example boom boom like if I don't want to get you everything so that's worth slicing can come in and actually help us all right so if I go here and I go fruits of zero through two let's see what happens so I'll go ahead and print this and then let's comment this out and let's run this okay and you could see that I got two fruits so I went from zero to two now it goes up two but not until okay so it's like the first one you know first argue first one is inclusive and the second number uh is exclusive second exclusive so kind of annoying I understand but it stops right before two meaning that if you did zero through two what it would really get you is 0 and 1. okay so that's what it's going to get used to two now if I did zero three zero through three it'll get me this now go ahead and get me all the fruits but not including the cookie because that's not a fruit so get me from here to here what are you gonna how are you gonna do this so print that out right here give that a try so five four three two one so how we would do that it would be very simple I'll just say zero through four and let's run this and that gets me all the way up until there except for the cookie all right now another thing that's very valuable is I want to always know at any given time what's the length of my array so that's something you very commonly have to find out whenever you're working with a raise so in Python there's something called Len and when I call it you can see it's a builtin function that comes with python and so say I have this this fruits array so I'll just copy this and I'll say fruits is equal to that okay so I'm doing it in the console just so it's easier for you to follow along and you could interactively do that too and now I could actually go ahead and say Len of fruits like this so watch what happens when I run this it's going to go ahead and tell me that the length of this array is four okay so length is a very important function it will allow you to you know always get the full length of the array so if I asked you hey create a function that can like you know always get from the start all the way to the second last item so basically regardless of the size of the array it gets from the start to the second last but then doesn't get the last one right how would you do that well you'll need to actually know the length of the array so then what you could say is hey go from zero to the length of the array minus one okay so you could go hey go from zero right here right there to the length of the array minus one okay so in other words I could say print fruits from zero to land of fruits minus one because this is going to be 4 minus one is going to be three let's go ahead and give that a try and there you go that worked it didn't get me the cookie so if I comment these out as well and I run this you can see it works it doesn't get me to cookie so it goes from the start all the way to the second last at the end so slicing is a very valuable thing and what's really cool about slicing is you could also slice strings as well so if I have a string like this even though we're not talking about strings but slicing is like an array method or a list method it could still be valuable for this so if I have a string like hi my name is cozy okay I can slice this and go zero to ten and if I run this it'll get me the first 10 characters right hi my name is whatever if I go 20 it will get me the did I nail it like no I didn't okay good it's freaking out so if you go above the maximum amount it'll just max out so you could go zero through eighteen that'll give you the whole thing so you could slice this too what if I wanted this last character right there where it says I what if I wanted that well I could just go and go ahead and go negative one here now one other thing I want to show you with the raise that's very nice is how you can actually reverse it in a really easy way so I go here and this is something also new as well so if I go ahead and print uh fruits right and let's go ahead and comment this out and comment this out so if I go ahead and print out fruits and I go give me zero through let's say a five and I run this it'll get me every single fruit right and obviously this is part of the fruit too apparently cookie is a fruit I bet you didn't know that so if it does that um I can I can also reverse it so I'll show you something cool so there's also a step so this says the first zero right so if I was to make this out so I have this I have I have this right and I have zero excuse my bad handwriting colon five whoops colon one so one when I have this right this means from okay let's go make that bigger this over here means two let's make that bigger too okay and then this over here means step so step by just like step by one by one character which is the default okay so if I run this now you should just get fruits this regular array but what if I wanted to skip and get you every other fruit meaning I wanted to get you apple and I want to get you an orange and the cookie but nothing in between well I could actually step by two and I could do that okay and I could get boom like I'm so you see how I'm like skipping over every single two now what I can also do is I can go backwards as well so I can this allows me to step forward and if I go negative one this allows me to step backwards so if I run this now um I'll I'll I can't have this be zero colon five okay because the from and two are reversed so the trick here is if you don't specify this at all and you don't specify this at all you just do colon colon you can actually do colon colon negative one and this will actually reverse reverse the array and you could actually reverse strings like this as well with that same technique so if I change that to negative one here it'll go backwards instead of you know if I change that to positive one that'll go forwards okay so arrays our lists have a lot of tricky methods and you know and functions you can call on it and you know the slicing business but it's very valuable for you to learn because it's going to be super super helpful as we start to get to the later projects because you're going to need all of this stuff you know when we're doing bigger projects or if we're building a game or anything like that now some other stuff that's actually helpful for you to know as well with lists is that list could hold different types of data types so for example I could have numbers and strings in here so I could say hi and I could have a float like 8.5 I could have integers hell I could have other arrays inside of it or other lists inside of it like another list of numbers so I could have all kinds of stuff inside of a list lists are cool with it lists don't have any problem with that so you can see that's the output right when you run it you should get this see I was able to reverse that list as well so yeah you can I'm just used to saying array my bad list so yeah you can always you list can hold any type of data type I think that's a helpful thing for you to know and then there are a lot of other methods that lists have we won't go into all of them today but I left you with some of them like an append method right and just kind of different functionality you could do with it you could call Len on it and get the length of the list you could call you know you could slice it so I wanted to just give you certain pieces that would be valuable so you can see right here right there's tons of different methods append is one of the ones I showed you there's insert which allows you to insert an item into the list anywhere there's clear which will clear all the items in a list there is count the count items and things of that nature you have removed so you can remove items from a list sort allows you to sort the list reverse allows you to reverse the list yeah pop will allow you to basically remove the last element of the list and then return a new list which is pretty interesting it has really nice use cases and then of course index as well so if you put a cookie it'll tell you what the index of that cookie is or the you know banana what's the index where is that specifically located so there's a ton of different methods I just wanted to show you a few of them and with that said we're gonna move on and we're gonna start learning about something really fun called dictionaries and python let's get to it all right now let's move on and talk about dictionaries so I will comment this out dictionary is a very powerful concept inside of python let's start with visual examples and now make our life a lot easier all right so say we have this person here which is me hi I'm qazi and we have this person and the person name is qazi and person's shirt is black right this is the shirt that we're wearing so in Python so we're going to represent this with a dictionary so if you just look at it by example you'll kind of get it very quickly so first thing I'm going to do is I'm just going to say person and then whenever you're creating a dictionary you're gonna create these curly braces okay all right and they have something we call key value pairs so for example if we're looking at this guy right over here this part right here would be what we call a key and then this part right over here is what we would call a value okay so that's what that means key values it's like if I try to get that person's shirt I get the value black back okay and if I try to get this person's name I get the value cozy back let's go and leave that there so you could see it and now we're going to go ahead and we're gonna say okay so it's basically in a key value format so the first key we have in this case is our name so I'm going to say name and let's put it in quotes like this and then the value is cozy okay so that's key this is key number one so this right here now already matches that okay so I can go ahead and say person and I can say person show me the person's name and we can print this and now I'll run this and you can see in the console I just got back cozy how did I just get back cozy by doing this okay so whenever you do this you call your dictionary and then you give it which key you're looking for and in this case we're looking for this name key then it's going to spit back out the value now if you want to add another key to this another key value pair so basically if we want to add the information about the shirt we just put a comma here and then now we can say shirt is black and now why don't you go ahead and print out the shirt and it's going to be in the same format right over here okay exactly the same you're just going to replace this here instead of name you're going to put in something else and then run it and see if you can get this color black back so I'll give you five seconds five four three two one so go ahead and pause it and try it and if you've already done it great job and let's do it together if you if you didn't get it no worries we'll just do this together right now I'm gonna say person and I'm just gonna go ahead and say shirt and this right here should spit back out black okay so let's go ahead and run that so you can see cozy and then we get the shirt color back black so both of this is working now what I want you to do is add another key value pair see if you can add another key that says laptop is an apple okay so this is your task right now so it should be the laptop is Apple okay so Apple should be the value and laptop should be the key so give that a shot and see if you can add another key value pair in here I'll give you five seconds to pause five four three two one one all right so let's go ahead and give that a try now so I'm gonna go ahead and say comma and I'm just going to say laptop is an apple and now we can go ahead and print that out as well I can say laptop is an apple okay boom there we go now normally when people are writing dictionaries most of the times how they make it look and if you're coming from another language this is an object or a map so if you're coming from Java or JavaScript you know it's called an object there just like lists are called arrays so this is how it'll normally look because sometimes if you're making it run really long it can look confusing so how we like to do it is like this each key value pair represented on its own line and then open close like this so it's very stylistic and it looks good so styling your code is a thing in coding and if you can make your code look nicer then that's great okay so people are going to love you for and other developers are going to love you for it so like reading this you know wouldn't you agree that this is reading this is much easier like okay key value key value key value then reading this right that that looks much more confusing so that's why we like to do it like this and this should still run if I run it I still get all my all of my stuff here is getting printed out so there you go now what we can do is we can create a function that you know that takes this information and then maybe just gives you a little greeting okay so like this is like our Advanced greeting thing okay or just maybe introduces who this person is so let's let's create this function and I'm going to say Define and we will call this introducer and what the introducer will do is let's say we just put this person into our introducer and then it's going to go ahead and say hi my name is blank my shirt I am wearing a black shirt oh not black but like a blank shirt and the laptop I use to code is n blank okay so we'll put some emojis to make it fun so this is going to be the high part it's going to be the shirt part and this is going to be there we go so now if I run introducer and I say print introducer oops I get an error and this person is not defined introducer oh yeah I got a call introducer like this my bad okay and then also let's comment all of this out because that's what's complaining because we just took the definition of person away from there and you could see okay and we don't need uh the print statement there for now you can see it says hi my name is blank I'm wearing a blank shirt and the laptop I use to code is n blank okay is a if you're you know isn't Microsoft or is an apple all right and so now instead of these blanks we're going to actually put in these specific values so the way to do that is put a f here so this enables string formatting and then I'm going to basically say here name and here we can go ahead and say shirt and then here we can go ahead and say laptop but this won't work right why will this not work because we don't have access to actual name and shirt and laptop variables if I run this I'm going to get an error well we do have access is person so remember we gotta actually call it like this so replace this name here with this so give that a try and see if you can actually make that happen I'll give you five seconds here to give it a try or pause the video five four three two one okay now let's do it together I'm going to say person and then we'll say name just like that and then we're going to say person and we'll say shirt just like that and then here we'll say person and then we'll say laptop just like that now let's run it okay what's the error that we're having here it's complaining about invalid syntax so let's see okay so the problem that it's actually having is if you look here it says Hey person is not defined so the problem that we're having facing here is we haven't put this print inside of our introducer function so that's where I'm having an error so let's go back and hit enter and enter and now it's actually inside of this introducer okay so it's indented right here so now let's go ahead and run introducer all right so this syntax error is basically complaining because we have single quotes here but then like also single quotes here so what's actually happening is that this single quote is looking for another single quote to end so when it sees this it goes oh that's the string and so it thinks this is it because it's looking for the last one and then it wants to end it here so what we need to do is leave either this as single quotes and then double quote all of these or do it the other way meaning make this double quote and then leave everything else single quote and that would solve the problem so let's go ahead and just make these double quotes because that's much easier to do I'll make this double quote right here and run this and there we go I see hi my name is qazi I'm wearing a black shirt and the laptop I used to code is an apple okay there we go so our introducer function now works uh pretty correctly now we can even go further and add this person's you know let's add let's add assets so let's say that qazi is you know has about a hundred dollars in his bank account okay so assets and then for debt we'll say let's say Kazi has fifty dollars worth of debt and then what we want to do is so now we have assets and debt so that's that's cool we added that but what if I wanted to add something that could actually automatically calculate kazi's net worth so if I did net worth now there's no way to actually set assets minus debt here because these when we're creating this these aren't defined yet so if I run this this wouldn't do any it'll be like wait I don't understand what assets or what debt is so here we want to create a function that can call so essentially like imagine I had a function right imagine at a function you know we'll just we'll call it uh net worth and then I did and I said hey grab the this person object okay or this person dictionary and then basically do grab their assets and then subtract that by their debt okay and then return this that's the so like if we want to create this well there's something really cool that you could do inside of dictionaries as well you could actually create functions inside of dictionaries so in other words you're kind of creating a method because you're gonna have to use a DOT something but yeah so it's just kind of it's a really cool hacky thing that you know it's a little bit Advanced so I I don't imagine you're going to be using this right away but in the future this is something you could use so I would I would say just have this up your sleeve Right In Your Arsenal so check this out right this is pretty cool so what I can say is I can actually create a function here now I can't create a function like this because whenever you're doing def you have to Define you have to create that function on its own line it can't be it can't already have stuff behind it and then you could do def it won't work so remember how we can create inline functions our friend it starts with an L see if you could remember that yes that's right our friend Lambda this is where our friend Lambda comes in so I'm going to create a function on the Fly here an anonymous function we don't need to give it a name because I mean I guess in this case in case the name would be net worth and what I want to do here is I want to say essentially this and I don't even need to write a return because remember lamb does have an implicit return so net worth is a function that does this so now I can actually say and let's continue this right and my net worth is and here's how I have to call this function okay so this is an interesting part so I'm just going to show you separately here first so if I want to call that function this one right here I gotta say person net worth and that'll get me access to the function but anytime I have to call a function remember I got an open close parentheses after that and that will actually call this guy right over here so I'm gonna just cut this because I know I'm gonna need this and my net worth is and here we're going to go ahead and pop that in and then we're going to run our introducer function so let's run this and there we go it says hi my name is qazi I'm wearing a black shirt and the laptop I used to code is an apple and my net worth is 50. and then if you want to make it look prettier put it you could put a dollar sign here you could say USD here or whatever your currency is of currency of choice and then you could put you know a money bag emoji here right and now when I run this boom I could also put all of this on a new line so every single thing starts on a new line right boom boom new line new line and now it reads like this it looks a little bit cleaner so it goes let's run this it goes right hi my name is qazi I'm wearing a black shirt and the laptop is the code is an apple and my net worth is fifty dollars okay that's just to make it look slightly pretty well there's a lot of stuff you could do with dictionaries including you could put functions in there as values uh you could have you know you could have fruits in here so you know or maybe I could say favorite fruits right and I can actually go ahead and put all my favorite fruits so let's say I love I don't really love apples but that's fine I do like bananas so let's actually put an orange here and so you can see that it could even hold an array right as long as you call a favorite fruits so I'll go ahead and say my favorite favorite fruits are and then I'm gonna go ahead and say person and then we're gonna put favorite fruits okay let's run this okay invalid syntax so let's just fix whatever error we got so it's saying we're having ah because we probably didn't put a comma here right comma here and then let's run this and there we go hi my name is qazi I'm Moringa black shirt the laptop I use to code is an apple my net worth is 50 USD my favorite fruits are the following yeah there's many different ways to do this these are some of the ways that I like to use my dictionaries you know you could you could hold so much information in here and like for example a phone number would be a great thing to put in here so for example a what's your phone right so whenever you think of a CRM think about your iPhone all right so you have your iPhone right and now this iPhone that you have stores all kinds of information so it's like you have a contact by the name of qazi and then you'll have their phone number and then you'll have their you know maybe their address you know their their first name their last name and uh yeah all of that information that's actually being stored on the back and it's actually being stored as a dictionary all of that okay because hey here's a here's the thing here's what's actually being stored in it and dictionaries are perfect for that because what you do right is you don't necessarily no con no my phone number or most people's phone numbers on your phone but if you actually just type in quasi it gives you that entire object okay that has all the information like kazi's phone number kazi's address gives you all of that so think of it like it's a key value pair so you search for qazi and boom you get all the things you need so that's why it's very valuable and it's it's very helpful and you know you could think of Google search like that too where you search a thing and then Google shows you some results so this here is an example of a key value pair so I just typed in Marathon right I'm getting all of these Keys essentially and so imagine the search term is a key okay so search term is our key in this case and then all the results that we get back think of that as the value so think of that as a big giant array that we get back we have Marathon Staffing that's the key and then the value is this array of like results so it's like it'll show us you know website one website to website three website four Etc you get the idea right so those are already stored inside of Google's database and it's literally like a key value pair so now I've actually click Staffing Marathon Staffing and I'm going to get all these results right here and it's telling me okay this is these are all the websites that I get so key value pairs are pretty much everywhere and everything that you do you know and like you could store a phone number and phone numbers are generally stored as a string so I could say one two three three four five six right there we go so there we go right so put a comma here and now you could get this person's phone number as well okay so this is a good introduction to an object or a dictionary a few important things for you to know as in the differences between let's say lists and Python and dictionaries is when you're trying to get an item out of a list you use this index so you go hey get me the fruit from position zero right here we go and we get this item so let's say I want to get this item right here I'm going to go ahead and get this item with this index and the index here is zero right so zero one two three Etc that's how that those are the names of those right that's how I get access to them and there's actually something really nice you could do with dictionaries it's called um dot value so I'll give you an example so I'll say print person dot value so there's some like methods as well that dictionaries have they're really nice so if I do this I'll get access to all of the values let me comment out that function that just makes it look a little confusing so I'm going to comment out the function for a second and I will remove the net worth call from here for just a second you don't need to follow along with that and here I have my values right these are all my addict values which is I have uh you know cozy black apple boom boom so these are all the values likewise I can also get all of the keys so this is another important method to remember about dictionaries so all my keys are like name shirt laptop phone number assets that favorite fruits so I'm looking at the values here and if I was just to look at the values so let's go ahead and print it out and I'm just going to call list on it so it literally looks like a list like a pure good old list right right there and if we looked at this well the value of cozy in a list would be zero but in a dictionary or sorry not the value but like the index or the location of this isn't like zero in this case it would be name and if I do name I'll get access to it here in order to get access to this I will put in color instead of one so in a in a list you would do zero and you would do one in an object in a dictionary you don't do that you just put their keys so that's kind of the nicer part about it now some other things that are that are not going to be crazy vital to you right now but some information that is useful for you to know about dictionaries versus lists is lit lists are ordered okay so they fall follow a specific order dictionaries are not ordered starting in Python 3.8 plus anything that's 3.8 and moving forward dictionaries are ordered and it is a builtin thing that comes into uh python most other language languages objects are never ordered and uh the in dictionaries in Python used to not be ordered but it is so cool I'm like actually nerding out over and I'm so excited there are definitely ordered now so I can give you like a quick example so let's just make things and we'll say health points of this fighter or whatever is you know 100 and maybe the name of this user is uh quasi so I can Define oh let me put uh quotes around this all right I have I have things here okay now what I can do is I could go things and I could actually just reverse it so I could I could call reversed on this and let's go ahead and call list here and do this and when I call it you could see that name and health are now reversed the order of insertion was held first and named second right and now when it reverse this it just gives me this okay if I do list things it goes Health common name so yeah I mean this is so cool the order is kept and why I really like this is like when you get to the more advanced Parts later on and and you know when we're coding you're going to get to these parts where you know if we have to sort data we'll usually have to take it out of a dictionary put it into an array and then like do some jiggery pokery with it because arrays are the only things that keep order or lists are the only things that keep order but like man this is so nice so it's going to make your life a lot smoother yeah dictionaries are now honestly probably one of my most favorite things I want to use them even more so it's like you get the benefits of a list plus a dictionary so I'm excited um as you can tell so yeah huge update and uh thought you guys should know that yeah this is massive and then one other thing before we go on to the next data types for you to learn inside of python lists and dictionaries lists and dictionaries are mutable so these are mutable and mutable just means changeable okay so you could change it you could change the values you could delete the values you could update the value so that's another thing that I I think is going to be actually important to show you is in a dictionary how to update the value of a certain key value pair because I've shown you how to get a key value right how to get the shirt or how to get certain things but I'm now going to show you I'm just going to put the net worth back here real quick boom there you go let's just run it let's make sure our net worth is coming out fine oh yeah and let's comment this yep and then let's uncomment this sound for now so I showed you right but now I have to show you how to assign an update values so let's say that we Define qazi's shirt as black here but maybe today is a new day and cause he decided to change his shirt thank God no more smelly cozy we're gonna go ahead and say shirt and I'm gonna go ahead and change the shirt color to Blue okay if I actually do that okay or maybe let's make it orange so there's every letter is different not because blue is B and L and it could look similar so let's go ahead and send my shirt color I change it to Orange so let's run this and now you could see here that it says kanji's wearing an orange shirt even though we started it off as a black shirt so using that you could update a user's you know their laptop you can update their phone number you could update their assets you could update their favorite fruits Etc so now I want you to go ahead and give this a try try changing let's say the assets to a thousand dollars a thousand essentially okay so give that a try right underneath here it'll be very similar to this but the key you'll have is assets and then you'll choose a value of one thousand so I'll give you five seconds here five four three two one let's do it together and I'm gonna grab assets and I will change assets to one thousand okay let's run this and you can see my net worth is now nine hundred and fifty dollars right because a thousand dollars minus fifty dollars should get you nine hundred and fifty dollars so in terms of dictionaries I think this is good now let's move on to other data types all right so now let's go ahead comment out introducer so when you run your code you should see nothing essentially okay and let's go down here and we'll talk about tuples okay that's another data type inside of python and they're just like anything you put in these parents okay so for example a tuple just looks like parents I'll I'll put it right next to it so you could see for example if I had numbers and I said one comma two okay now this is a tuple I can print it out print numbers okay so let's run this and boom and now I can also print out their data type so I could say print type numbers okay just like that now I could see that it's it's type Tuple class is Tuple now one thing I can't do is tuples are immutable meaning you cannot change change their data at all so I can still get access so I could go numbers of zero and they'll still get me that should get me one so there we go so I got the first item from that Tuple right so I can I can index it but I can't actually go I can't go numbers of zero to ten like this is something you could actually do in a list we are not going to be able to change it so let's try running this and we get an error and the error basically says Tuple object does not support item assignment all that means is you can't update items inside of tuples okay now tuples are used in Python quite often and they usually represent things that you can't change and so you'll oftentimes see these array of tuples of maybe like key value Pairs and that just represents hey these are two things that you can't and should not change anyway so this is helpful when you're dealing with data that needs to be secure and data that throughout your app when you're building you shouldn't really change honestly as far as tuples are concerned that's all kind of you what you really need to know there are some other stuff we could do with it later but let's not go too much more into detail on tuples let's move on to the next data set that is one of my favorites and it exists in Python let's go all right now let's move on to one of my favorite data types sets they are awesome so I'm going to put that right over here and these are very very powerful I mean you learned sets you're gonna be a pretty awesome human being okay so let's go ahead and comment out all of this stuff don't need uh need it anymore so I'm gonna make a comment I'm gonna learn about sets okay what's nice about this is what if I told you hey there are two um they're two you know let's say databases okay database one and it has certain users emails okay or certain numbers so I'll just say one two three four and then there's this other one let's actually make it a little bit more fun this is too dry so let's say uh there's a database of programming languages okay or we have some data of programming languages we'll call this one and we'll say this is two okay and then we're gonna go ahead and say that instead of these numbers over here right we have programming languages so we have Ruby and python and JavaScript so maybe this is like right and then here we have Ruby and let's say somebody really likes um SQL and then there's a Java and then JavaScript okay now let me ask you this what if I wanted to create a variable called programming languages unique okay or just programming languages right and that should only be uh the unique languages okay so unique languages how can I pull the unique languages out of it can you do that can you I mean you could give it a try but it's going to be really difficult for you to be able to do this because right now you don't really have the tools for this right so how could you do this how could you merge these two arrays so that all the duplicates are removed so they're no duplicates right AKA no duplicates normally yeah that's a process it's not that easy and then you gotta write some piece of code that can do it but I will introduce you to something called sets Okay and sets are awesome because they are Made for This their notation is Curly braces okay kind of like a dictionary and they are used for unique elements getting unique elements we're getting unique stuff okay if that looks you know stuff is less intimidating than uh elements so I could actually throw all of these into a set and it will know what to do with it okay now first thing we're going to do is I'm going to show you how to concatenate two arrays okay just so you can see kind of how that works so let's call this list one and let's call this list two okay so there's certain things uh special keywords so special keywords hmm and they are special keywords are like you know lists is a special keyword length Max Min these are like builtin functions and methods that Java that python gives you that um that have special meaning so when you're creating variable names try not to like call it list because I'll overwrite this list that python comes with okay and uh set is another one is another one so there's like a bunch of special ones and so try not to use them most of the times okay so that's why I'm just going to say list one list two and then we're going to say list one plus list two and if you actually do this python is so awesome they'll actually take both of these and they'll concatenate them together okay let's add them together and let's go ahead and print programming languages and I'll hit enter and you could see that I have a concatenated list with you know Ruby python JavaScript Ruby SQL Java JavaScript right but this is still not uniques so now I'll show you how set works okay so set works like this um you you take let's just let's just call set and it's like most raw form right so and I said two comma let's just say this and we'll um we'll do we'll just print it out so if I print this out and I'll comment this out for now if I print this out you'll notice that I get one comma two right but if I actually do one comma two comma two and I call this notice that I don't get the other two right and so like the duplicates are not there at all another thing you should know or is that sets are not subscriptable which means that I can't get the zeroth element of a set okay if I do that it will give me an error it says set object is not subscriptable okay so you can't like index or find things because it doesn't store them with an index or a key value pair okay so there's no get the index of zero get the index of one it's either in the set or it's not in the set okay so we could do things like that so for example let's say I have uh I'll just call this things okay and I'll make this a little bit bigger and zoom in here so you can see better so let's I have things right and I have one comma two comma two if I do things it'll only show me one comma two now I'll say two in things it'll give me back true yes it is so in Python you have these special things called in which is a special keyword and it allows you to ask a question is the thing you're looking for inside of what you're where you're looking so it's two in things yes it is but it's three in things well no it's not so I get back false this is very helpful to know if something exists or not and sets are the best data structure one of the best data structures to look through um really really quickly okay so um so it just will not hold any of those values right now let's go back to sets and let's look at what happens if I do the following so let's look here and I'm going to go ahead and say I have a set but I'm going to call it on an error I'm going to call it on an array okay so let's give this a try now you'll see this does not work and it actually gives an error so in this situation it'll be helpful to actually call or Constructor and our function set so let's go ahead and do set and do it like this okay and boom it has turned that array into a set okay now let's go ahead and give it an array with duplicate items like this and call this function and you'll notice that it's giving me one comma two back which means that it automatically removed all of the duplicates so remember how would list one plus list two we're already getting back our list of programming languages right like if I run this and I copy this first line all right so just make sure you copy that entire list right and then I'm going to say uh things let's just call it things and I'm going to paste it okay so now if I do things I should see this array with or this list with duplicate iTunes right all these duplicate items JavaScript JavaScript Ruby Ruby but what what can I do to make them all unique you know this you know all the pieces of the puzzle already okay so give it a try see if you could try this okay I'll give you five seconds here to give this a try on your own five four three two one and here we go I'm going to call my function set on this right and then I'm just going to pass it things and let's see what happens boom look at that how freaking beautiful right so that's all I need to do there I already know I'm concatenating that's what I need to do right over here right because I already or sorry this line right there because I already know I'm concatenating these two because once you concatenate these two you get that big array right there and on that array we just call this function set right here so we're going to do that we'll just take this we'll wrap this entire thing in and we'll call the set function on it and once you do that you get back this beautiful right over here set that has unique values so let's go ahead and call set on this okay and I'm going to run it okay and uh let's comment this out and run this boom look at that so nice right python SQL Java JavaScript Ruby I'm getting back all of the programming languages uh that I wanted right all of this okay so but all the unique stuff right because we don't want to duplicate so imagine you were Google and you wanted to have unique search queries so think about it like this let's go to google.com and I'm just going to type in how to now how many people do you think have asked this question how to restart iPhone how to lose weight fast don't you think it's probably millions of people that have typed this search in how to lose weight fast or at least thousands well how come I am only seeing this one time does that mean only one person ever has searched that you already know the answer is not true for that right the answer is millions or thousands of people have searched for it so if that's the case why am I only seeing it once Google is doing something very similar to a set and it's going it's taking all of the users queries right it's making this giant list of every single query ever right and then there's probably duplicates that exist here so lose weight fast okay another person typing in lose weight fast and that gets stored in that array another person types and lose weight fast that gets stored in the array however Google then goes and goes I'm gonna call me a set on this bad boy right and then once it does that well then you just get one query that says lose wait fast that's it okay instead of all these other like million queries right so if we if if Google finds duplicates it it reduces them and it probably uses something like set okay they probably use something different but you get the idea okay I'm just trying to make this easy for you to understand all right don't shoot me if I'm not completely 100 000 accurate on some of these things some of it is for entertainment okay would you rather be bored you'd rather be entertained but kind of like it okay kind of like this it works so there you go you're understanding Google Now you can pretty much ready to create Google so you can see why I like sets so much any time you um and let me emphasize the T when I say that set okay it sounds like something else if I don't say the T in there so I like sets a lot and their ability to give you unique data is unparalleled it's beautiful you can't do that that will list that easily you can't do that with anything else that easily so I like them so anytime you want have to you don't care about an or uh you don't care they are ordered but anytime you don't care about you know getting specific indices from here and you just want to check boom just pop it into a set right and uh if you just want a list of unique items and now I can actually even see this so I don't have things defined here that's fine so I could actually even do you know on sets I can ask hey um is SQL in programming languages and what do you think is going to say do you think it's gonna say true or false I'll give you three seconds for that three two one let's see what you said I hope you said true because yes it is inside uh but what about the programming language go is that inside so what do you think I'm gonna get back for that true you can just be true or false three two one I'm gonna get a false in this case because go is not inside of programming languages but SQL is right so this is going to be true and this is going to be false okay with the capital F right there so there you go there you have sets there are really cool okay and I hope you enjoyed them and with that said let's keep on rocking and rolling now let's just go ahead and do one little exercise with sets before we move on to newer things I'm gonna go ahead and I will comment out all of this and we will create a new function and uh okay and so this way you can keep practicing functions as well okay so I'm going to create a function and it's job let me actually write its documentation first and then you see if you could try to do this okay so I want to be able to call this function like this I want to call this function unique and unique should take in an array and so if I give it an array like this okay or let's say I give it an array like this Ruby Ruby excuse that sound that is my focus app telling me hey you're done but I'm not done I gotta keep going Ruby Ruby and python okay so when I call Unique on this I should get back what I should get back is Ruby and python okay and you know what let's return it as a list okay so I'll just show you like if I have a set here and it's like one comma two one two I can call list on this and lists will convert it back into a list okay so let's just say we we want to call Unique on a list and get the unique elements back um and yeah so that's how it should work okay and the function should be called unique so um you know create a function unique that takes in a list okay and returns only unique items okay so that's that's what it does in English and then this is how you would write it this is how you would write it and call it and this is what it would return okay so I hope that this is giving you enough to write your own function so I would say take five seconds to pause this video and then go ahead and try this on your own so five four three two one all right let's do this together if you haven't done it yourself yet so the first thing I'm going to say is I'm going to define a function okay and this is going to be called unique and then unique will take in you know let's say we'll just say languages and what we'll do is we'll return by just calling set on those languages okay and let's just give this a try right now so I'm going to go ahead and print and I'm going to say unique and then we'll give unique our languages so let's actually call it just like this I'll copy this exact line and I will paste it okay so we're calling unique with Ruby Ruby python and then let's see what it says so let's run it and it does say that we're getting back Ruby and python so it does make it unique right that's perfect however it's giving me back a set and not a list you see those curly braces at the end there that represents that it's a set okay and if it makes sense it doesn't have key value pairs if it had key value pairs that would be a dictionary but this is a set now I want to call list on that okay so this returns this here this part that I'm highlighting that returns this guy and then if you wrap this guy and you call set on this or sorry list on this like that then that will actually convert this into a list uh into a list okay with with the items in there okay hopefully that makes sense so that's why I wrapped it with the list let's run this and you can see I get Ruby comma python there we go now what if we wanted to take it even further what if we wanted to use Lambda and uh convert it into or actually on honestly for this you don't even you could use Lambda or you could just make it a oneliner like this okay but if I wanted to use Lambda how could I do it with Lambda well see if you could convert this function into a Lambda function okay so unique into Lambda give that a try I'll give you five seconds five four three two one all right let's do it together so I'm gonna do some callbacks and then that way we're practicing the other stuff we learned too right we're not just forgetting about it so I'm gonna say unique is equal to and we'll say Lambda okay and it takes in languages so we'll just say it takes in a list okay or languages and uh let's set languages just like that I there's an implicit return in here okay so now I'll comment this out and we'll run this and you can see I'm still getting back the correct result even though I commented this line completely out it's working okay so there's both ways of writing it for this function honestly I'd probably prefer to write it like this because there's no real reason to use Lambda here okay um it's kind of just slightly you know over a kill in this case but uh yeah so you can use that right there and you should be good and you could just call Unique anywhere you want and you'll be good okay so I'm gonna go ahead and comment this out and we'll move forward all right now let's talk about one of the most fun things with programming and this is also without this programming really wouldn't be programming okay so I had to do my due diligence and show you all the data types that exist in Python because that's pretty important but this is my most favorite thing let's talk about it and we got Loops okay Loop D doopy dupes bam all right these are loopdeedoops that there are very very helpful in programming okay so I'm gonna talk about them now now if you have an array like the fruits one that we created long time ago long time ago copy and comment it out because I don't need it up there and I'll put it here okay and I don't need all these other different data types because that's just hella confusing now what if I asked you hey can you print out each of these and just show me them there one by one okay so for example what does that mean so it's like hey print out fruits of zero I want you to print out all of them okay so that should be on its own line then get me the second one okay and then give me so yeah go ahead do this and do it manually so make this array make this list put whatever you want and it doesn't need to be fruits as long as the string it should be fine and then just like print every single one of them out okay so right now we're not using a loop this is the old school way of doing it manual way of doing it and look at how much fun you have to hear three go here four go here one two three four five I actually don't need more than that one two three four five there we go let's run this and you can see all of the items are being printed right what if I told you hey also make sure that they have like a uh you know it says fruit and then it like shows it so for example it says fruit like this all right and then it shows uh it shows that okay I don't need a space here I can just run this so what if I said like make sure that every single one of them says fruit before it well go ahead do this manually right now okay go ahead and do this manually right now so put that here put that here put that here put that here okay now let's run it and now you got it's saying fruit for every single one of them okay now what if I also told you print its position out as well and let's do that manually so we're going to go ahead and say if uh you know what's that thing's index so I'm going to say 0 here when I say one here I'm going to say 2 here I'm going to say 3 here and four here right and then when we run this we can see fruit we could see all the fruits and then we could see their index okay so you could see that this is this was a tedious process not too fun and if this list keeps getting bigger and bigger oh man can you imagine the amount of manual work we're gonna have to do is gone I'll be insane okay it's gonna be off to charts it's gonna be off the GBS so if we don't want to do all that manual work there is a solution thank you Lord and the solution is writing Loops so I'll show you how to write a for loop I can say four fruit in Fritz print fruit and I'm gonna go ahead grab all of these lines and comment them out and run this and you can see I just got back all my fruits so that was so much easier and all by saying for fruit in fruits that's it just this here okay so what does this mean for fruit and fruits well what's actually happening is this fruit right here this is one arbitrary item and this is the actual list okay so this refers to this list over here and this is an arbitrary variable we could call it whatever we want I could call this X and print X and if I run this this will still work okay as long as these guys match up right that's what's important and so I'm basically saying hey grab this fruits array and then for each item in there give each item a name so we'll just give this item a name fruit and the first time it's looping through so how a for Loop works is it goes through give it a variable name of fruit okay so it goes through and the first time I'll pick the apple and then it'll go ahead and then it'll go ahead and then it'll go ahead and print that fruit out so we'll go ahead and go okay uh it's apple and then it'll pop Apple up onto the screen then it's going to go a second time and what's going to happen is this will become fruit right over here okay I'm going to make this a little bit bigger so it's easier for you to see this will become fruit and then it will go here and it will print it out okay then what's going to happen the next time is it's going to Loop through and the orange will become the new fruit right and let's get rid of this guy right here okay and then it will go ahead and make orange the new fruit and then orange will get printed out to the screen then it will go ahead the next time it'll Loop through it'll make banana the new fruit okay and this will become the fruit and it will print out banana and then last but not least it's gonna go ahead and do that one more time it's going to make this the variable fruit and then it's going to go ahead and print that out okay and after it does this is going to go ahead and just stop the loop because it's going to realize I cannot go any further so it's time for me to end the loop and then I will end it okay and then this guy over here is done so on and the code level what's happening is these two lines will just keep running it'll it'll go down here it'll be like run this then come back up then it'll come back here and run this then it'll come back up again and it'll come down here and run this again then it'll come back up then it'll come back down here and run this again until there are no more items left and the the loop is completely done okay so that is how looping works and anytime you start to see code like this it just means somebody doesn't know how to write a for Loop because a lot of repetitive stuff you could automate it and make your life really easy now what if I did ask you the same thing and make sure it says the word fruit before each of these fruits well you could just do that in one line right now you could just go ahead and say see if you can even try it yourself you could go ahead and just say fruit and just like this okay and run it and boom look at that it just put fruit with every single one because that's what you asked it to do right so if we went through this iteration again you know and kind of like what the process happened but the first time this was the variable fruit right and it it said hey this is fruit and so imagine you have that Apple here right so imagine you have that Apple here and it says print the word fruit and then the actual Apple emoji and show it on on the screen and then it says go ahead and do that then it says go ahead and do that again then it says go ahead do that again and it says go ahead and do that again do that again and then you're done okay so it goes ahead and just like keeps looping through that okay so all of those lines we got it into one now what if I actually also wanted to say the index so I wanted to say that this is the zeroth index and this is on the first index and so on and so forth just like how we did earlier how could we do that so check this out there's something really cool that we could do in Python so I'm going to copy this list here and I'm going to put this here so you could you could see this uh better and we could interact with this better so let's go ahead and uh zoom in here right there okay so now check this out I could call fruits obviously right you already know that but I could actually call this function enumerate and I can call this function on fruits and watch what it does let's actually wrap it inside of lists so you can actually see it and watch what it does it actually gives you a list of tuples remember we talked about tuples and lists of tuples it gives you a list of tuples and it says that and the list of tuples basically says the first item this is item number one so remember in list you could also have different types of datas right you could have Tuple as a data type inside of a list as well so this is my first item and the first item says hey uh position of zero and it's an apple okay so I have a tuple zero comma Apple uh string Apple okay and the second Tuple says position is one so one comma pair two comma orange three comma banana four comma so all we're doing here is we're just getting the position of all of these okay and we're putting them in pairs the position of all of these right and we're putting them in like these pairs and Tuple is a perfect data structure to use here because you don't want a user to go here and be able to update the position of the um of the Apple because apple is always going to remain in zero okay and the pair is going to remind in one so you want it to be not updatable so this is a list of tuples and usually for storing pairs of information like it's really good so enumerate gives me this so with the numerate I have access to when now I can Loop through and I have access to my emojis apple and my my fruits but I also have access to their positions okay so watch this I can go over here and call this enumerate function and I know that'll give it'll be giving me this type of uh you know pair pairs so it's like zero comma the fruit one comma fruit so since I know uh let's actually just run this and let's see what we get so if I run this you could see I'm getting back fruit and I'm getting back the position and the actual fruit name right the actual fruit itself so zero comma Apple One comma pair two comma orange Etc now since I know this is a tuple so let's go ahead and create a tuple just so you could see visualize this as well and I'll say apple since I know it's a tuple I can index a tuple right if I do thing of zero I'll get back the zero that zero and if I do thing of one I'll get back the Apple so if I want to get the Apple here I just do think fruit of one right so if I run this you could see I'm getting all the fruits okay so in other words this right here just means fruits okay now if I go okay so uh my bad so let's just write that that right there is fruits okay and now next one I'll say fruit of zebra okay and run this and now you can see I'm getting back all my indexes right my indices so this right over here right is the index this over here is the fruit itself so this is a fruit and this is the index now wouldn't it be a lot cleaner If instead of writing fruit of one and fruit of zero we could just write the actual word you know fruit here and then we could actually write just index here like that would look so much cleaner you know so it's like it's easy to read that code well there is a way we could do that so there's something called unpacking okay so I'll give you an example so let's say I have a zero here so let's let's go again and say I have a 0 here and I have a apple here okay now if I set this to one variable then when I obviously call that one variable like thing it'll just refer to that Tuple so for example if I do thing it'll refer to that Tuple however if I do two variables here so since that a thing I actually say index and then I say fruit now if I print index it'll give me zero and if I print fruit it'll give me this Apple so this is uh this is called the Tuple unpacking okay so it's a little bit of more advanced concept but hey you should just learn it right Tuple unpacking okay and then there's like all other you can unpack an array like that list like this too you can unpack other stuff but all that means it's complicated but sounds complicated but we're just saying hey we just like to store these in separate variables like index and fruit So then whenever you refer to index and fruit it'll be this and then that Tuple just evaporated in this case is just gone like the actual parentheses and the Tuple object right it's gone so I could do that here since I know that I'm going to be getting back this structure right here I could just rename it because this is what I'm going to be getting here let me just rename it I can say hey get me index comma fruit okay and now if I for example print out the index you could see I just get back the indices and if I print fruit you can see I get back the fruits okay so I'm just going to go ahead and say a fruit comma index all right there we go so this solution right over here you can see is much much much cleaner right and it um it gets us what we want but it's just overall a much cleaner way of looping through this and getting everything that we want so you won't all of us have to use enumerate but if in any situation you need access to your index index enumerate is going to be the way to go but the more most common way you're going to write the loop is just going to be for fruit and fruits print fruit this is going to be the most common way you're going to be doing things with it okay and you're not always just going to be printing you're obviously going to be doing stuff with it right you're going to be uh returning thing you're going to be uh not returning it's not a function but if you had a function you'd return it you can keep adding items to that array with the for Loop so there's a lot that you could do with it but this is a very basic example of you know a loop now let's say I wanted to add 10 more apples to this fruits array how could I do that well what's the default way we would do that it would do fruits dot append so let's do it let's go ahead and try this in the console right now so the normal way to do it would be let's say I have I'm going to copy my fruits list over and paste it and I will say fruits dot append and let's say I add another apple and let's print out fruits again and you could see that another Apple was added well what if I want to add another Apple well then I just do that line again I'm pressing up up on my keyboard to get back my most recently input commands so if you press up on your keyboard I'll hit enter and then I'll get fruits right we'll go fruits append print it out and you could see that with that technique I have successfully added a lot of apples so to order to add 10 apples I would have to keep appending many many many many many times I'll need to append it 10 times obviously right let's go ahead and do that manually now right so how am I going to do that I'm going to say fruits.apent and I'm going to say apple right and then I have to do this 10 times so let's go ahead and do it one more time I think that's 10 so let's go one two three four five six seven eight nine ten okay that's one extra now I can go ahead and do print fruits okay I can go ahead and print fruits and when I run this you can see that I have 10 apples added here to this list so that was a kind of an annoying way to add this many um apples to this list so how could we add them using a loop well there's a really cool way we could do this I'm going to show you something called range so range if I do range of 50 okay and let's do range of 10. and if you just run it you won't really see anything it'll just arrange like that but if I convert it to a list you can see that it just created a list on the Fly for me that goes from 0 through 10 okay but not including 10 just up to 10. so that's what range does so this is a really nice way so for example if you had a list so I let's say I said for I in right and I said print I this Loop will run how many times let me ask you that question how many times will this Loop run Loops will always run the same amount of times as there are items in the array that you're running it on or the list that you're running it on okay or whatever you're running it on so in this case there are one two three four five items so this Loop will run five times if there were six items it would run six times if there were seven items it would run seven times you get the idea right and um and I will just be the number in this case so I will be one the first time I will be two the second time I will be three you could also just call this number so it's not like stupid looking variable so if I run that it should print out one two three four five and I'll comment out a bunch of the other stuff so it's like less confusing let's run this so I see one two three four five here okay now what if I want now another way to say this here all this is doing is saying hey run this thing five times that's what this is saying okay run this piece of code five times so the nicer way to do this is I can just say Range Five so this will also run five times okay you can see that one two three four five right ran five times now what I want to do and I don't even really need access to this variable so I could just call it a underscore and I can just say haha now print out haha five times because I I'm just skipping underscores basically I'm just saying uh hey I'm not really using that variable so I'm just I'm not even gonna really store it in something I'm just going to store an underscore most programmers know that if you see underscore you're not gonna like you're not gonna like print underscore you're not gonna call it you usually just ignore it and so because I don't really need access to the elements that are inside of this list so I can I'm just printing haha five times so this let me this piece of code right here is saying do this five times that's all this is saying okay this being whatever I'm writing here it's going to repeat that five times Well if you have this piece of knowledge how could you add 10 pieces of fruits here okay add 10 uh apples to the fruits list how could I do that how could I add it to the fruits list see if you could do this yourself and you should be able to do this yourself because you have all the pieces here to do it okay you need this line you'll need some of these lines right so try to add it yourself I'll give you about five seconds five four three two one hopefully you took that time to pause the video and try it yourself pause it now if you need it and uh we'll do this together now so I'm gonna go ahead now I'm gonna say four don't need access to this and range 10 fruits dot append Apple and I'm gonna get rid of all of these here and if you wanna see it in action you could even print out the fruits array 10 times so you could see it so let's run this and you could see the array let me let me comment the hahasa and you could see the array getting bigger and bigger each time because it's adding an apple to it right adding an apple to it right here right here right another apple right here another apple right here another apple right here another one right there another one right there there and then you get this okay so if I now remove this print from the loop because I don't want to print it every single time I just want to print it once the loop is done so I'm going to put it outside of the loop and I'm just going to say print fruits and let's run this now and you can see it added you know 10 apples at the end here okay so that's how for loops work okay that's that's how they work hopefully that was a good intro for you into for Loops there's a there's gonna be a lot more let's comment out everything there's gonna be a lot more that we're gonna talk about when it comes to for Loops because they're pretty much going to be used everywhere okay so there's a lot to cover with them there's gonna be a ton of exercises we're gonna do with lists and Loops Etc we're going to do them soon enough uh first I want to introduce you to another type of loop as well which you won't really use that much but it's good to be aware of it so when you see it you know what it does and there will be times you might actually need it okay so with that said let's go ahead and learn while loops all right now let's talk about my friends while loops there we go all right while Loops are fun but they can be very crazy and they can be very dangerous meaning you can very easily write an infinite Loop um and so yeah you don't want to do that okay so watch out for this I'm going to say that as the first thing because you are going to write a loop that'll never end what I like about for Loops is they automatically end and you don't have to have an end condition that's nice this not so nice all right so I'll show you an example of a while loop okay so let's just go ahead and say here we have uh Kazi and let's say we have Kazi and he's currently sitting okay that's what cause he's doing he's chilling and he's sitting all right now I'll say while qazi is not so that's another cool thing so it's like um so that's how we would kind of say it in English right Kazi is not so we'll say uh is qazi standing and we'll do a check and it should say true and we'll says qazi sitting okay um and sorry I'm I did not mean to just have meant to put two equal signs but that's fine let's just say cause these settings let's say Kazi is sitting let's just redefine it and I'll say I'll check is Causey sitting it should give me a true and I'll say is qazi uh standing and it should give me a false because we have defined cause you to be sitting so now I can write a while loop very easily I could say while cozy okay is not so there's also not okay this is a very important operator okay so for example I can say quasi is standing that'll give me false right but if I say cos is not standing that should give me a true just like that okay so I'll say while quasi is not standing we will say and when you hit enter and it shows the three dots like that I'm in the console right now by the way okay so just writing the console I'll give one space here okay or we give two spaces that's fine as long as you indent some amount and I'll say print get your fat butt up okay let's there now I'm not going to hit enter yet but this is a while loop and it'll automatically start running so it's like while kazi's not standing print get your fat butt up and you'll notice that right now cause he's not standing right and so there's never a condition where qazi will be standing that means this Loop will keep running for ever AKA infinite Loop and now I'll hit enter and I'll hit enter again and watch this it just keeps on keeping on right it just keeps on running over and over and over and over and over again I mean this has ran thousands of times to stop this hold control and then press C on Windows probably hold something and press C control probably or option uh not you guys don't have option uh something alt okay just look it up and that should kill your command line so if we were to write that in our program our program we just keep looping just like this infinitely and that's not what we want we don't want to create an infinite Loop okay let me just see the status of qazi and it says cause he's sitting so what I'll do instead is I'll say maybe after 10 times it's printed out we can say causes then standing after 10 times okay so in order to do that okay I'll need to teach you how to create a breaking break condition to end a while loop okay so let's set a counter and we will say the counter is zero okay and then when that counter Hits 10 we will break out of our Loop so let's try this I'll say while counter is less than 10. and we'll say put a space here and we'll say print counter okay and then what we're gonna do in the second line here before hitting enter one more time is we're going to go ahead and we're gonna increment counter so I'm going to say counter is equal to whatever counter previously was plus one so I have defined counter here as zero so this is incrementing it by one so we're taking this definition of counter at zero and then I'm redefining counter here to be whatever it previously was plus one so if you follow the logic of this Loop what's happening is the first time I Loop through this it says while counter is less than 10. so I go while zero is less than 10 that statement evaluates to True since that evaluates to true because it needs a conditional one set of values to true it runs the entire while loop block so it prints out zero so then it spits out boom you get zero here and then it redefines counter to be whatever it previously was plus one which means the new definition of counter is gonna be one okay then the loop runs the second time and it goes while one is less than ten okay so the second time it runs it goes one is less than 10. okay that's what it checks so let me actually write this together so while one is less than 10 this evaluates to a true okay and then it runs again what the heck happened there okay this evaluates to a true all right and then it prints out one and then it sets the counter to whatever it previously was in this case it was previously one uh and then one plus one is going to be 2. okay now counter is set to two okay and then this so the second time we Loop through this is two the third time we Loop through it's three the fourth time fifth times six times seven times eight times ninth time and then when we go the tenth time through the loop what actually happens is this statement over here is not true anymore it goes while 10 is less than 10. let me ask you a question is 10 less than 10 no 10 is not less than 10. so that statement becomes false and when stat becomes false everything underneath it does not run so it does not run the block of code and it finally comes to a stop so let's try this and I'll hit enter and you could see it ran from zero through nine and then boom went through nine right so that's how a while loop works now I'm gonna zoom out of here okay and then we're gonna go ahead and write this down into our uh into here okay so now I'm going to say cozy let's set him to sitting okay and um while cozy is not standing we will tell we'll keep telling him get your fat butt up and then another loop another loop we wrote was this counter one and then we said while counter is less than 10 so this will run 10 times but not because of that but because we're in an increment counter counter equals counter plus one now another way to write it which is very common is we'll see counter plus equals one okay that's the same way of writing that statement and then here's another writing that same statement we can say counter plus plus they're both the same statement and I can prove to you in the command line over here let's say we have count we set it to zero if I do count plus plus count plus plus oh actually never mind I take that back python does not have that so let's try count equals zero and let's go count plus equals one and now let's go count boom we get back one okay so ignore that I said that that was wrong okay and count because in JavaScript which I've been using a lot of lately right that has plus plus and other languages like Java itself has it and I'm sure C plus plus and other languages probably have it too so count plus equals one will increment it by one and so will count equals count plus one and now I'm gonna go count it's two now okay let's go count plus equals one let's print count we get back three and you get the idea so that's how you can increment it so we're going to go ahead and increment it like this counter Plus equal one okay and then print counter and uh I'm gonna comment this line out so it doesn't put me in in an infinite Loop I'll comment all of that out and let's run this okay and you could see I get zero one two three four five six seven eight nine okay I get all the way up to nine so that's how while while loops work and that's how you have to end them so make sure you always have a statement that allows you to break them majority of the times though you won't really need to use while loops and I tend to avoid them as much as I can because it makes code look not as clean uh not pretty there are some times you need to use them like if we're creating a game and that game just needs to be running infinitely long meaning the user should be able to play it the entire time yeah that you'll probably have to put in a while loop so there's certain situations where a while loop does make sense but most situations like this one I would just do with a for Loop it'd be much easier to do this with the for Loop okay but this pattern here will be important like setting a variable outside of the loop and then incrementing it through the loop uh that pattern is important so don't forget that and don't make this mistake of putting the counter inside of the loop because you keep setting it to zero over and over and over again so just max it'll increment to two is one because you'll increment it to one then you'll come down and you'll set it back to zero then it'll do zero plus one and you'll get one go against zero one so you wanna put the initial one outside of the loop outside the scope of the loop and then you just keep incrementing that one you want to repeat the amount of times you're incrementing it by one you don't want to repeat the amount of times you're setting it to zero you only want to set it to zero once okay that's basically what I'm trying to say all right so there you go those are that's an intro to while loops with that said I'm gonna go ahead and comment this out and we'll move on to doing some interesting fun exercises so let's go ahead and do that now all right let's do some practice exercises with everything that we've learned so let's just start with lists okay so what if I have numbers okay and I want to double these numbers so basically what if I want you to write something that when I call it let's say I call it double and I give it this array here okay it returns Back to Me 2 4 6. eight and ten okay so if I call that it should double everything up and spit that back out to me how could I do that how could I create something that does that well let's go ahead and let's create uh a function and we'll call it double okay and let's say it takes in some argument numbers okay I'll remove this numbers here for now because you should immediately know that this is a function right and this is a function call and it's taking in an array okay or a list rather so I could give it a list type so let's actually see is it list or is it list yeah it lists with a lower case is going to be fine so I could do add type hinting in here as well and I could say that it returns a list okay so double is the numbers takes in a list Returns the list you don't need to add in the type hinting but let's just practice everything that we've learned so far okay it's not going to really change the code in any way if you remove this it's it's not right the code is going to remain the same but I like to just leave this here for now okay and now in order to double this list of numbers that we're getting well how can we do that so what I want you to do is try see if you could give this a try and do this yourself you have most of the puzzle pieces to be able to do this yourself it would be a little challenging to do it said we had difficulty of six or seven right now because there'll be a lot that you'd have to figure out okay but take about five seconds right now to pause the video five four three two one all right great let's do this together so the first thing I'm gonna do is I'm gonna create a um an empty array here that's gonna that's gonna store all of my values okay and now the pattern I'm going to use is I'm going to keep appending to this list okay so I'm going to make this list here and I'm going to keep appending to this list right here so let's write our Loop and I will say for numbers for number and numbers for now let's just say print number okay if I run my code nothing should come out right nothing should work here hope make sure everything that you've written so far is commented out and now I'll call this function double and we'll give it an array so I'll say one two three and we'll give it a list one two three and you could see it's printing them out so I'm calling the function and the function is working as expected great okay this function I'm happy that this function is working as I want it to work now what I want to do is I wanna append it to this array so let's try that so I'm going to say result dot append and I'll just keep adding those numbers so let's go ahead and do print result and the result remember I'm printing it outside of the loop if I put it inside of the loop it'll print it out every single time right it's a pending so one the first time okay so if I do this and I run this the first time you'll see was one then it was one comma two then one two three okay if I put it in the most accurate place I would be right here and you could see it starts off as empty then it goes to one and it goes to one comma two right and then we will print the final one so let's run this you can see it starts off empty then prints out then appends one to that array then it appends a two to data rate then it depends a three to that list right so again I'm going to be using arrays interchangeably right because I've used a lot of JavaScript so lists whenever I say array just think list okay so I have this result list and I just keep appending to that list again and again well if I want to double the numbers at this point it's very simple I just append double that number okay and so let's do this you should see this so like first iteration I go through is empty then the first iteration I go through I append this okay I appended two then the next iteration I go through I append A4 and then I append a six and every single time it just keeps doubling okay now what I want to do at the end is I don't need it to say print and here I just needed to say return so I can say return result okay return result and now if I run this you'll see nothing so we will have to do print and now we will see the final result it's two four six okay so now it's working so this is how you can uh double a list okay if I've given you a list you can double it this is a very common pattern so remember this pattern and like practice it and write this code and write it again from scratch but this is how it works you have a result you you create a empty array then you keep appending to that array and then you you keep a pen you create an empty list you keep appending to that list and then you return that list okay that's how that works so very common pattern okay and let me actually even write it down very common pattern create empty list Loop through and append to that list return that list okay this is a very common um pattern I don't know if it has a name or not but this is but this is a common pattern so just remember that this is something that you do okay so just take note of it memorize it this you're gonna be doing a lot of this in your code okay so it's like if you wanna you know if I go back to Netflix and we have a list of movies here we have a list of movies right so maybe I have a list that's called trending now trending now list right and the start that list is empty trending now and then I keep looping through and I keep putting items inside of that so I keep looping through just like for a movie like if I go to Netflix here right the loop that's written here and the trending now is pretty much like very simple it's it's basically for movie in trending movies and then it'd be like print or output somehow movie okay and then it like shows you each of those movies it just Loops through and makes puts this here Loops through puts this here Loops through put this here Loop screw puts this here so that's effectively what's happening inside of that Loop oops well we're already shooting the Python tutorial but thank you for the reminder appreciate it so yeah you want to Loop through and you keep uh pending and that's what's even on Netflix did they make a list they keep appending through to that list then they append all the trending now movies and then they put it in the list and then show it okay so that's yeah long um explanation of this but I think I just want to drill that point home in in multiple different ways now there are a lot of other cool things that lists allow us to do too for example before there were there's a method there's some methods that we have that we could call on strings okay and uh lists can help us with that so I'll give you an example let's create a new function so I'm going to comment out this print call right here and we'll create a new function and I'll call this function I'll just write the documentation for it real quick and it'll be count Words count Words okay this is this is how I'm going to call the function and this function I'm going to give it a string like hi my name is qazi okay or let's remove any kind of special characters for now and so I'll just say hi my name is qazi and when I call this function what it should return to me is it should say one two three four five so there's five words should return a five so count Words function should count Words should count um if given a string should count and return number of words okay so that's the function count Words that's what it should do so I know it takes in a string and then it returns a number so if I want to create this here's what I'm going to do I'm going to create a function we'll call it count Words it will take in some input from the user so we'll say you know phrase from the user and based on that phrase that phrase will be a string so I can just put that in the documentation so phrase is going to be a string okay uh just a little note so you could create a type hint here if you want you could go it'll be a phrase will be a string and then we return an integer okay so you could do that but I'm going to remove this one okay so I'm just going to keep it like a basic one right now all right and let's go ahead and just print out the phrase for now let's call this function and I'll say print I don't need to say print here I'll just say count Words and I'll say hi my name is qazi and let's run this and you should just see hi my name is Kazi here for now right there right so that's good that's that's really good for now the next thing I want to do is I want to find out well how long how how many words are here how do I find that out so check this out there's something really cool that we could do with strings so I'm going to zoom in here so you could see better and there's something awesome that we could actually do with strings okay and what I could do with strings is I could go hi my name and you could call this method it's called dot split okay and if I do a DOT split on a string it will actually split that string based on um empty spaces so wherever it sees empty spaces it just removes them and and then it turns the rest of it into a list like that okay for example imagine I had high my name is okay or imagine I have a CSV file like an Excel file maybe if you've ever seen one like that and it says age comma gender comma height comma sex right if I if I have this well and I and I have it as a long string if I want to get a gender height sex I want to get all those headers and attributes and store it in a list I can if I call Dot split here well that won't work because it's still putting the commas in here and it's just giving me back one string that's not what I want so what I could do is I could split it by commas I could tell it splitted by commas once I do once I do that it actually removes the columns from the string so then I have a gender height sex and as four separate attributes so it's four separate properties right and that's what I that's more of what I want so split is a really cool method and when you call it on a string that has spaces what you're doing is you're basically saying splitted by empty spaces just like this when I run this this will work now notice that this line over here dot split and then dot split with empty spaces Returns the same result interesting right they're returning the same result right here because by default if you actually don't pass anything into this dot split method on a string by default it will it will put this I'll assume you're you're asking for an empty string Okay so we know that we could call the function Len to find out the length of our list right so if I can actually take these words and I can split them well then I can actually find out the length of my string right or that phrase that I passed it so zoom out here so see if you could actually see if you could give that a try all right and see if you could make this function work I think at this point you have enough information to be able to put this together if not that's all good too so I'll give you five seconds to pause five four three two one time all right let's go ahead and do this together if you were able to do it great if you're not that's okay too we'll now do this together so here's what I want to do I'm gonna take my phrase and I'm gonna split it okay and then let's just print uh let's print um this out and I'll remove this here so let's run this and when I give it High see this line over here it's saying hi my name is uh cozy right and boom it's showing me all this stuff there and everything is split boom hi my name is cozy so I already know well then what can I do actually well I can actually call the function Len on that so for example phrase.split gives me that and then what I'll do essentially is I'll just call the function I'll wrap this and I'll just call the function Len on it that's what I'm doing here so I'm just taking this right boom because that's where that's going right there and then I'm calling the function Len on it so it'll just give me the length of that okay so let's go ahead and run this and there we go count Words is five so count Words now I can remove this return uh this print and write return right there and I could actually turn it into a one line solution so let's go ahead and print and you can see count Words is a very simple oneliner solution and um yeah I can I can type in anything here cookies cream cream soda legendary okay so if I keep giving it words it keeps counting it and accurately so that's that's how count Words works if you were able to get it great if not that's all right and uh hopefully that gave you some more exercises with like and and methods that you could actually use with lists now I want to show you something very very very helpful to help you visualize for Loops or any type of Loops in general and this is a debugger that's actually built into replit and this is fantastic this is a fantastic debugger okay so debugging is a very useful skill and it'll help you a lot so what I'm going to do is um go ahead and uncomment this line out where we were printing double okay and let's comment let's comment this out as well okay and what I'll do is I'll put a break point here so if you see this blue thing that I just added right next to it you can do that by clicking here and unclicking here okay so just click right there and then get that blue point to show up okay so once you do that I'm going to go ahead and click this that's the debugger get that icon right there so let's go ahead and click the debugger and now you could see that it's currently saying uh let me make this let me do this so maybe the debugger looks a little bit bigger okay so there we go so it tells you the breaking point is on line 395. right it's this right here because that's where we're actually calling this double function from so it's a good idea to put the breaking point there now if I hit run on this it runs from right here okay and then there's already a couple of things here so it knows about special variables and it knows about function variables so special variables don't touch them that just ignore them they come with python so ignore this function variables you can pretty much ignore that too but all this is saying is hey since you defined all of these functions and we didn't comment them out right we have a ton of functions defined but just not commented out so if I keep going up you'll see introducer and all kinds of functions at the top that are that are defined and just not commented out right so let's go back down so that's what it's noticing so ignore that too for now okay ignore that too now hit this next step right over here Next Step so the first line of the code what it's saying is we are given numbers and numbers are one two three because the user passed it in so it already knows that this numbers over here is one two three at the moment okay that's all it knows because it's on that line right now now let's run another line so it's on this result line now now when I run the result line notice that it now knows a result is a variable that's instantiated as an empty empty list now it's telling me that it's going to run this line over here so let's hit next on this next step and now it says hey I know what numbers is and I know what result is already but now I know that number is an integer and it's one right it even knows their data types lists lists and integer so it goes hey I know what number is at this point because the first at the first Loop number is going to be a one then hit next again okay and now it can tell you hey I just ran this line over here and this is what happened result is a list now that list is not empty anymore it has two inside of it okay great I'm going to run line 390 again that's why it's grayed out right so let's run line 390 again boom and it says Hey number is now two run it again and it goes boom I just added four to the result okay let's run it one more time it goes hey I know that number is three so number is 3 here so it's going to be basically doing 3 multiplied by two and it's going to take six and append it to result and so after this line This result over here should have a six so let's give that a try and boom you can see that we have that six right there okay let's run it again and now it's going to that line return result finally so let's go ahead and run it again right it did that and then now it's going to the print line and it just printed out okay so that was a full stepbystep line by line exactly everything that happened and uh yeah so debugger can be very helpful uh in order for you to like find out what your code is doing okay so I I would highly recommend any part specialty loops and then to turn it off just hit this stop okay so you can turn it off but for visualizing Loops very very very helpful okay very helpful all right now we'll do some more practice still with lists because this is going to be key okay so we're going to just keep sharpening this sword now let's say that I have um okay so let's say this right if I call a function uh and we'll call it some list okay if I call this function and I give it one two three it should return back to me is six so what's happening here I'm summing up this entire list okay create a function that can that given a list of numbers it can return their sum so we're going to go ahead and create this function how do we do that how would we do something along those lines so think about this there was a pattern there's a couple of patterns we've used in the past so I would say that if you give this a try right now it'd be of a difficulty seven out of a ten and you could do this because you have all the tools available so what I'm going to tell you is that it's gonna use this counter pattern that we had created earlier it's going to use similar to this pattern right here okay where we did Count plus equals one but instead of count plus equals one you're going to do plus equals something else so you could give that a try I'll give you five seconds it'd be challenging and then we'll do this together five four three two one okay let's go ahead and do this together now so obviously I Know This Much the function is going to be called some list and it's going to take in some numbers okay now I know that that's going to be a list data type and I can further type hinted to say list of integers okay so again we don't need to do this and I know it'll return an integer okay this much I know about this function so I can get rid of it for now just so I can keep this simple all right so some list is going to take it numbers and it's going to sum up all of the numbers and then return them so the first thing I'm going to do is I'm going to uh say count and I'm going to set it to zero then what I'll do is I'll Loop through these numbers okay so I'll say for number in numbers and let's actually comment this out for now and let's actually try this manually first I think that'll really help you so let's try how would we do this manually if I gave you numbers and they were one two three and four how would you do this manually well you'd first go through and you would do you know numbers uh uh you would create you know account and you set it to zero and then you'd basically go through and you say okay I'm going to take counts and I'm gonna plus equals it by numbers of zero okay so that by doing that I'm incrementing count by that right so for example let's go ahead and put it in the console here so we could visualize this better so I'm going to set count to zero and I'll set numbers to this okay now I'll increment it by the first element in that array I'll increment count and let's go ahead and see count so count is now one now I'll increment count by the second element in the right which is the two now count should be three then I'll increment count by the third element in the array which is the three show the count should be six and then I'll increment it by the fourth element in the list and then let's go ahead count and you could see count says 10. okay that's the pattern that I would have so in effect I'll be writing this and this and this multiple times copying pasting doing it by hand and then I'll print out my my account and that will be the the sum right okay so let's do it in a loop now so we'll set for number in numbers and we'll say count and we'll just increment it by the number and then at the end we'll just say return count okay now let's go ahead and give this a try so I'm going to go ahead and say print some list and we'll give it one two three and let's see what happens boom there you go that worked Let's uh comment out any other print statements we have let's comment this out right here let's run it again you can see we're getting back six now what if I put a 4 in there as well comma 4 that should get me to a 10. and yep I see a six and I see a 10. so my sum function is working correctly my sum list function so let's go here so that was yet another practice for you to do okay and we're gonna do you know I would say let's at least do one more practice okay so this is good practice for us but loops and loops and lists combined there's so much you could do with coding with that so that's why you want to keep drilling those practice skills and getting better at it okay now I'm going to comment out both of these and now what we'll do is we'll say We'll create a find Max okay and find Max if you try to do it yourself that would be a challenge of 9 or 10 difficulty because you don't necessarily have full on you kind of have the tools to do this but it's it's but it's a difficult one if you want to do it by yourself it'll be a pretty difficult one okay so we want to make this one fine Max that finds a Max from a list so for example if I give it a list of one two three four it finds this so let's go ahead and create comments for this I'm going to say find Max okay and then I will give it one five ten three if I do that it should return 10 that's what find Max should do okay well how are we how on Earth are we going to make a function that can go ahead and do this so if you want to give it a try pause the video now give it a try and otherwise let's keep going okay so I'm going to go ahead and create a function it's going to obviously be called find Max okay find Max and then it's going to take in you know a list of integers and I don't need to type hints okay but I'll just go here it's going to take in a list of numbers you could add in type hinting after you're done writing your entire function that way it doesn't take up cognitive load mentally from you but it makes your code more readable when looking at it later it's going to take in numbers and it's going to find the max well how I want to do this is I want to set the current Max okay and I'll set the current Max to the first item inside of that list okay so if I was to do this by hand I'd probably have current Max and I'll set that set that to the first element in that list right so if you gave me a list and you said hey Kazi you know here are the numbers and you said there are 1 5 10 comma three just like that well I would probably set the current Max to 1. okay or in other words I would set it to numbers of zero okay the first element of that list and then what I would do is I would go because we're assuming this is a really large list right because if it was a really really large list you couldn't just you wouldn't just be able to eyeball it is what I'm saying Okay so let's say this was like a really large list and there was like some some Max number in there you wouldn't just be able to eyeball it'd be too hard okay so I'm gonna command Z this and make this back to the small list that it was right because that's usually the real data you're working with real data is like massive right here we're just using some dummy variables dummy lists making them small so we can conceptually understand what's happening okay so I would have this and I'll set the current Max to this then what I would do is I would just go through each of these items and I would compare this and this and if I found out that this item was greater than this item this number right here I would replace current Max with this new current Max and then I would compare right then you would compare this and this and if this was greater than the current Max uh then I would set this to the current Max and then I would compare this against the current Max and if this was greater than the current Max and it set at the great current Max otherwise I would just Skip and ignore and keep moving okay that's the pattern so basically I would check you know uh through the through the loop I would say hey is oh let's just start with that so I'll say is um and I'm just writing this in English for now one greater than current Max and then it would say the answer is no so then I just continue moving and I would say is in the second Loop I'd say is 5 greater than current Max what I'm writing here is called pseudocode it's helpful to write code in English like this because you can before you end up writing actual code you can just visualize what the heck is happening and then you could syntactically turn it into actual code and it's an easy way of doing it it's five greater than current Max the answer is yes since the answer is yes I'll say current Max is now equal to five okay then I'll go through again I'll say current Max then I'll say is 10 greater than current Max and since the answer is yes I will say current Max is equal to 10. okay here we'll just say go to next number okay that's what's happening here so if it's no go to next number and then I'll go is three the last item in the loop greater than current max if that's that's a no okay well then just um and the loop because we know we're at the last number and it will automatically end the loop so that's really the algorithm that we would write now I'm going to go ahead and comment all of this out so the pseudo code is there and we can use the pseudo code to create our real code okay all right so let's go boom and I will say for number and numbers if number greater than current Max well then set the current Max to the number to whatever number is and that's really it I don't really need to do anything else and then once we're done with the loop just return current Max okay and um yeah let's give it a try because that's essentially the logic so let's go ahead and say find Max and I'll give it one two three ten Seventeen four six five six let's run this and look at that it found the current Max so damn damn fast right now if I copy this and I just paste it a couple of times and we make we put a current Max like here of 19. let's see if we could find it it found it instantly right it found it really really fast okay now I'll make it smaller there we go and boom yeah it works every single time so that's how you would write it okay so again you saw that we had to work with lists here we had to do loops we have to do if else conditions so we had a for loop with the if else condition so that's probably something new you know that you might not have seen before so the the reason why you want to set it to the first element and you don't want to set current Max to be zero or something like that is if you did set it to zero and I tricked you and I just gave you like all negative numbers your when I run find Max you're going to return back a zero but like there is no zero in this list right so you want to set it as the first element of that list so you so instead I should have gone back like you know negative one because that's the biggest number out of all of these other numbers here so that's why numbers of zero is the way to do this okay so hopefully that gave you some solid practice with using lists all right so now since we did a little bit of practice with lists let's do some practice with dictionaries okay so dictionary practice um and just again just a friendly reminder you should be coding the entire time in maine.py since I'm Kazi I'm coding in here and at any time if you need notes or everything you're probably writing or will write is all in here okay everything that I'm writing will be made available to you in quasi.py so you could just go there and get access to all of this code okay just in case you couldn't follow along or anything for that reason okay so with dictionary um with dictionary practice what we're going to do is we're going to create a function and we'll call this word frequency and what this will do is it will take in a string so let's say I say I love Batman because I am Batman so weird string weird phrase to say so I'll take in a phrase which will be of type string and you'll notice that it is repeating certain words uh certain words a few times so let's go here and which this should return is a is a dictionary and that dictionary should basically say the word I should be the key okay I and it should say since it I happens twice it should say two times and then since love happens only one time it should say love is one since Batman happened twice it should go Batman two and then I is already done so if we ignore that and then m happens once okay so if you call word frequency on this I love Batman because I am Batman this is what it should actually return so what this is doing is it's telling you the frequency of uh whatever it is you're doing okay so let's go ahead and create this function so we're going to say Define word frequency frequency and it'll take in a phrase okay and then it'll give us this guy over here now the first thing I notice when I do this is I imagine usually with the string by itself there's not really much you could do with it so I would want to turn this into a list that's probably the first thing I'm thinking okay so let's go ahead and do that so I'll do phrase and it's all of these words are separated by a space right so I can actually just do phrase phrase dot split by empty space or just remove this and by default it's actually putting that and let's go ahead and print this all right and we'll call this function now word frequency frequency and the phrase will give it is this I love Batman because I am Batman so let's give it that okay and let's run our code and comment everything else out in the meantime Okay so yeah you see it turned it into a array or a list right and we have these inside of the list now this is where a dictionary is going to be really helpful to keep track of all of this because dictionary can have only unique keys so if I appears twice in a dictionary it'll only appear once so what I want to do is here's how I would do it if I kind of did it manually okay so I'd kind of create a dictionary I'd create an empty dictionary okay so I'll just say result or something like that and then I would Loop through this list over here okay which is which has all the words in it and I'd say something along the lines of like okay if I get I um the first question I'll ask is is I in result okay I'll look inside of this dictionary and see if if it's already there if I is not end result because they'll say no in the start then what we'll do is I'll say okay set create a new key value pair okay and we'll say set the key value to I and sorry set the key to I and the value to zero okay so basically in other words I'm gonna do this I and I'll say zero because it didn't exist so this is this is just Loop Number One okay Loop one then we'll Loop through uh the second time right we'll go again we'll go to the second iteration of the for Loop and we'll be on this word love because we'll do something like forward in words you know or for word and phrase or whatever this whatever we're going to call this list over here so for word and words let's just say the first time word is going to be I the second time the word is going to be love so I'm going to say is love in result the answer is no well then we're just going to follow the same logic and we'll say set the key to I and value to zero okay and I'll remove this and because it's the same thing so like set the key to I and value 2 or in this case we'll set the key to love and value to zero because this is and I apologize the value should be one because this represents that it's been found one time so there we go one so it's like hey I've this is this I has been found one time so I'll set it to one not zero then we'll loop again so I'll copy paste this format and we'll loop again the third time and we'll find the word Batman is Batman and the result the answer is no since the answer is no we'll set that to one this is the third Loop then we'll Loop through the fourth time and we'll find the word because and since this is a no we'll set the key to and value to one let's Loop through again and now we get to kind of the interesting part and we get to the I is I in result the answer is yes and so now we won't set a new key because the key is already there we'll say increment the value of of result of um I buy one okay so we'll increment the result increment the value of that key okay or in in English I'll say of this key of the I key by 1. okay then we'll Loop through it again we'll what will we find now you help me with this okay what will we find what's the next word I love Batman because I and what's the word we're going to use here am right so this is going to be m then is m in this result dictionary yes or no it's not um and by the way I wasn't updating this dictionary but this dictionary would be getting updated the entire time right so so result to one and then we'll set um Batman to one as well right after this and then four would do we'll say because whoops we'll say because and it's because I don't want this running uh along the entire line I will do this so you could see key value pairs on every single line so I said because we'll set that to one and then it'll bring us to I again and we'll say I because I and now we'll increment the value of this I to 2 instead of actually adding a new key okay and then we'll say am and am is that in the result uh dictionary yes or no no right it's not so it's we're going to say no we're going to increment the value of uh we're not going to increment the value we're going to set the key to uh to M and value to 1. okay so we're going to go ahead in here we're going to say key I'm sorry not key but M and we'll say one okay and then the last Loop that we're gonna do is going to be the increment Loops I'll copy this Loop seven and is Batman and result the answer is yes increment the value of Batman Key by one so since we're going to do that we won't add a new key we'll go to the existing Batman and we'll increment it and we'll put it as two okay so that's how we would do it manually if we were doing this all right now let's go ahead and turn all of this into code so first up I'm going to comment this entire thing out and then we're going to go ahead and write the code so I'm going to say Define and I think I have my function already here so I'll actually just okay let's uh let's write up top let's write up top because Bunch everything is already there so let's write our function here okay we're going to follow that same logic so in the start I'm going to create an empty dictionary okay it's just going to be empty there's going to be nothing in there right now um and if you create empty squigglies you might think this is a set but no this is going to be a dictionary and you can check it here you can say type of empty squigglies and you will see these curly braces or squigglys or whatever you want to call it class is dictionary so it assumes it's a dictionary instead of an empty set okay and that's what we want we want a dictionary okay so um result is this for now then I'm going to Loop through okay we'll say this split is just words right because I get back a list of all the words and I'll say for word and words if word in result if the word is already in result in that case what I want you to do is incremented by one okay or in other words if we follow our logic I'll say if the word is not in result then I want you to set the key okay so how we're going to set the key and I'm going to say result and we'll create a new key and the key will be titled that specific word and also set the key to one otherwise else if it is inside a result if it is found well then we'll just increment result um buy one okay and then at the end let's go ahead and return result okay and uh let's go ahead and run this and of course we forgot to call Print here that's why it didn't show so let's go ahead and print and run this all right there we go we're getting back exactly this right over here you can see I is two loves one Batman is two because oh my bad should have said because one right because is one and then m is one right there okay so this works perfectly so hopefully this was not too overwhelming or too confusing because we're just building on top of you know essentially every single step that we had previously done now if we want to make the input uh Dynamic for the user we could go ahead and say word frequency and then let's say that it takes an input from a user please enter your phrase okay now if I run this and I comment this out it's going to ask me right here please enter your phrase and let's go ahead and practice this so I'll I'll go ahead and enter my phrase here and I'll say I like to eat cookies boom I like to eat cookies right let's run let's run it again let's say cookies cookies cookies cookies I am a bookie bookie bookie bookie let's run that hit enter and cookies it happened three times um cookies with a comma happen one time right because we haven't we haven't taught it yet how to care about special characters like a comma so that is fine because cookies comma is as far as I'm concerned it's a brand new word I am a right bookie right bookie showed up four times so very nice very nice it works perfectly so you can make it Dynamic by asking it the input um from the user okay so that's uh that's it for now in terms of practicing with dictionaries now we're going to go ahead and move on to some really big boy and big girl stuff which is going to be higher order functions and then after that we're going to step it up a notch and it's gonna be awesome okay I'm not even gonna tell you it's gonna be a secret you're gonna be in for a surprise so with that said I'm really excited can't wait to start talking to you about this stuff all right I hope you're ready to talk about higher order functions this is scary scary stuff but don't worry it's not that scary actually we'll walk through it together okay um so cool let's go ahead and comment out every single line so when you run your code it should be empty nothing should be uh printing out okay now I'm going to talk about this higher order functions okay big big words but what what are we really Gonna Learn here and what we're gonna talk about I'm just gonna show you two for now map and filter okay because those are really the only two ones you'll kind of need um and then after that I'll show you something and you won't even need this anymore okay but this is gonna be the building block for the next thing that we're gonna do so let's just start off with this so remember that function that we wrote that doubled things so we wrote this function and uh you could double right you call Double on one two three and you would get back one sorry two four six well here's a nicer way of doing it we can actually use the map method okay and whenever you run this map function what's nice about this map function is at the end it will always return a brand new array now if I want to use map to make this happen over here I need to give map a function okay and what map does is map goes and gets this guy and gets this guy and gets this guy and it has the power to get this guy and do something with him get this guy do something with him get get this guy and do something with him and this is something you would normally write a for Loop for and loop through and do all the stuff map you can kind of do it in one line and I want to call map right and I want to be able to call it and map is a function and it takes in another function as an input so you're going to put another function in here okay so for example I'll put let's say I get I create a function you know our function double uh does what it goes through if I look at it uh it goes through and it doubles the numbers okay so let's go and create a function here so you could see it and I'll just say double number so this function is going to be a lot simpler it's going to expect some kind of number and it will return that number multiplied by two okay that's it so I'm gonna go ahead and give the double number function to map so it's taking in a function okay so I'm not giving a function call like this I am literally giving it the definition of that function okay for example if I did from qazi you can do from import from Main import blah blah or you could just do import double number so I'll do from causing import double number okay so I had some errors in my thing so I just refreshed everything and uh yeah now if you if I run it from quasi like for some reason sometimes I'll give an error so just like run I guess double number first if you're getting an error where it's not recognizing what it is so just like run it like this first and once you run it like this now try doing from cozy in your case from Main from qazi import double number okay if you're in Maine you could probably also just do import double number that should work too and now if I do double number and I call something call um call it with two I get back four so like I can see that double number function works as expected so what I want to do is I want to apply this double number function on everything on this one here on this two here and on this three here okay in place update these in place and then return like a new array so basically I'm not going to be changing the actual list that the user gave me but I'm going to be making the copy of that list and then you know essentially changing that you could think of it like that okay so that way the actual data that the user gave doesn't doesn't get lost okay so I'm going to say map double number give it that and then also now it needs an array so I'll give it an array of one two three okay now if I tried to print this you're gonna see that I'm going to get something a little weird it says Hey map object at blah blah blah blah bloop okay so it's an iterable object and in order to show it and have it reveal itself in other words we're gonna have to call list on it so list will turn it into a list and you can see boom that worked we've doubled everything right two four six so we gave it a function and we gave it a list okay so we just said hey we gave it a double number function and we gave it a list and said do that to this list and now we could essentially write that entire thing in one line and if I actually if we go and look at our double number right and I'm going to put it underneath this and I'll just comment everything out honestly this over here looks a lot more complicated than this over here because it's one line okay so if we were to turn double this into a function so if I said define you know um and we call this yeah you don't even need to turn it into a function right that's the whole point because you could just write it in one line it wouldn't really make sense to even honestly make it into a function you should just call map right there call whatever you need to do and do it right there now here's another reason why I like it you can create this double number function on the fly without even creating this function here so in other words I can actually do this okay I can say instead of this I can actually make a function on the Fly and I can say Lambda numb and just take that num and multiply it by two so return that so this is now the same exact thing as this okay we're taking in an input num number and then we're taking num number and multiplying it by two just like that multiplying it by two right that's it and now if I actually run this you'll see I'll get two lists of two four six one from this and one from this okay so I can actually look I don't even need to use this anymore and I'll comment this out and there you go this is a nice little oneliner that we just did on the Fly okay well what if I wanted to make a function that squared everything what if I wanted to make it so instead of it going doubling 246 we squared it so you know 1 squared 1 squared is going to be one two squared is going to be 4 3 squared okay is going to be 9 right so I should get back one four and nine how do I do that well that's very simple we go here and we just replace this with a square we're just going to square that result that number okay so we're going to go through I'm going to Loop through get one I'm going to square it I'm gonna go get two okay map is already writing the loop for you that's a nice part that's why you you're not the one writing the loop map is already doing that for you whenever you see map you're essentially mapping through the entire list okay then I'll go through two and square two and then I'll go through three and square three and then I'll just get one four nine in place of whatever is there right now okay like that let's run it and you can see I got 149 Okay so let's go ahead higher order functions right this is the example of map very nice very very useful okay now I'm going to show you another one that is very useful and we call this one this is filter okay filter is another beautiful one which you can use very commonly so for example let's say I have a list of numbers so I have a list of numbers and I have one two three four five six seven eight nine ten eleven twelfth okay now let's say I only want to get the even numbers watch how easy that is to write it I can actually say map and I write my Lambda here and I say I'm going to take in a number okay and then for and I'm going to say oh not sorry not map we're going to write filter okay I'm gonna filter and filter where the number does not equal um or or we'll do this so how do you get let's let's just show you the logic here first so I'm going to send numbers one two three four five six okay and let's say I want to get all the even numbers from this numbers list right here well how I'll do that I'll zoom in so you can see actually let's a get away from there okay so how do you check something is an odd number how to check for an odd or sorry even number let's check for an even number all right what I'll do is I'll say two modulo 2 should have a remainder of zero so if I take the number two and I divided by the number two it should have a module of zero yes okay let's take four and do modulo two and check what I get back let's take six and do modulo two meaning like all these numbers divided by two have no remainder so every even number every even number divided by two has no remainder is basically what we're saying that's um that's a definition of an even number okay that's that's an even number now an odd number will be you know like five so let's say I try five modular two equal zero and it'll say false okay so here let's say I want only the even numbers well I'll just pass in this this condition so to this filter I'm just going to say grab the number and just make sure that the modulo 2 is 0 if this is true then pop it into the new list filter also returns a list filter is a function and it returns list okay and a new list so I'm going to apply this and I'm gonna give it my numbers okay let me zoom out here so you can see everything filter I'm going to give it my numbers list right here okay and then in order to show this I obviously have to wrap it and list and in order to show that onto the console I need to print it okay so let's go ahead and print this and look at that wow right like we were able to create this filter so easily if you had to manually do it that would take a lot of work and you could try to do it manually write your own Loop and all of that but yeah filter already automatically starts looping so whenever I'm doing filter I'm thinking I'm already looping in my mind I know I'm looping through every single item right but then the condition is like only put the thing in the new list if it matches this condition right over here so I go through here and I say his number divisible by two nope okay we throw that throw it away then we go to this and we say hey is this divisible by two yes it is so we throw it in the final result list then we go to three and we go nope four check five and six check seven and eight check nine and ten check right check and then we just keep dropping those and that's how we're getting all those guys in our list so that's how that works and you know the basically the code here is a nice one liner I'm super zoomed in right but if I'm on my computer and I'm just zoomed out I'm just zoomed in so you can see better right but on my computer this is how I see it so it's like that's a smooth oneliner with plenty of more space to write right so that's how you will filter so that's enough for an introduction of higher order functions and now I'll show you something that's going to be even better and it's like the most epic thing um and that is called list comprehensions they're much easier to write than all this filter and um you know all this map stuff much much much easier and they will pretty much replace their powers and and give you new brand new powers okay and and you can write you can replace the functionality of map and filter with them and they're just much easier to write and smoother so let's go ahead and learn about list comprehensions now all right my friends now I want to talk to you about list comprehensions and how they work okay so I'm gonna go ahead grab that same list here numbers okay one two three four five and watch how cool it is and how I can do it with a list comprehension so I can say um let's say I want to use this filter one right over here right I first thing I have to do when I'm doing a list comprehension is I have to make a list just like this okay so make a list and then I will say number for number in numbers okay um and then I'll write my if statement if number is divisible by two okay and let's go ahead and just print this and boom look at that that is already working okay it's giving me the all the even numbers and now I'll kind of explain what I've done so this is a regular for Loop four number and numbers this part you know already okay oh and then I say only get me the number if the number is divisible by 2. and then it asks how should I build the list that I returned to you um just give me number okay for each of those numbers just give it back to me so for example this filter would only allow two okay just give me two back great this filter would only allow four in the next Loop okay just give me back number and so it just keeps appending it boom boom boom all right keep sharing a new list out of that and then we return it now what if I wanted to double all these numbers I just do this and that doubles every number okay oh that is doubling actually all the even numbers so okay let me give you an example okay so this is the uh I'll write a comment filter and give me only even numbers okay and then here I'm gonna go ahead and remove this statement here okay and I'll say for number and numbers here's what I want you to do with the number number multiplied by two for number and numbers okay so this basically means Loop through the numbers list call that variable you know whichever variable you're iterating over number and then the new list how I want you to make it is a makeup make it up of these elements number multiplied by two so if I print this out you'll see it has doubled uh all of those numbers right there okay and honestly in my mind this looks way easier than writing map and filter and then wrapping it in a list and Lambda and all kinds of crazy stuff this just looks like you're writing a for Loop right that's the power of list comprehension so that was filtering and then this is you just essentially did a map map double numbers okay so this is an example of a map this is example of a filter and um yeah that's why I didn't spend too much time teaching you these because you'll kind of never have to use those again okay map and filter because list comprehensions are Kink and you can just use them for everything what if I wanted to get odd numbers to give that a try okay so get odd numbers give that a try here I'll give you five seconds five four five seconds to pause okay now five seconds to solve it so take five seconds to pause and solve it five four three two one all right let's go ahead and do this together and I would just simply say okay I'll let me make an array first so if I first make my array or list and then I'm gonna say four number and numbers because that's my Loop so let me just write that get that out of the way okay so this is my Loop right here and then what do I want to do I want to get only odd numbers okay so only get the number if number modula 2 does not equal zero so if it's like if uh if basically there is a remainder in other words okay and I'm going to say once you get that number then all I want you to do is just give me that number back I don't want you to double that number I don't want you to Triple that number and just give me that number back and let's print this okay okay and let's go ahead and comment out all of this so we can see very clearly where our result is there we go one three five seven nine eleven so I got back all of my odd numbers here now if I told you uh you know give me all of the odd numbers cubed okay so that's like crazy I wouldn't ask you to do that that's crazy but you would just do this and that will give you all the odd numbers cubed so this will get you all the odd numbers this is going to cube all of them and then that there you go okay so really really crazy fancy stuff that you could do with this and not just this right again if I take you to the Netflix example it's like if I have you know this giant list I want to just filter out where the name is cozy so it'll just filter that out or if I have like every single movie data and I only want like comedies I could filter this out this entire database out and I could filter where there's only like the the title is comedy or they have comedy in their attribute and it can filter that out so there are very real world applications of where you could use this right you could filter out obviously with strings as well you could filter it out filter for anything floats whatever is in your list you could do it so list comprehensions are absolutely amazing and python you could also do 2D you know array twodimensional list comprehensions too uh which we won't get into because twodimensional lists are kind of a little bit more advanced than we need to get right now because we're just trying to Learn Python right now right and and master the basics so there you go uh I hope you enjoyed learning about list comprehensions as much as I enjoy teaching it they are so freaking badass they're so cool and they're very very easy to write right this is an example of doubling the numbers and it was so easy to do so I enjoyed them I hope you enjoyed them um as well and um last thing I want to leave you with is just there's a couple of special keywords that I think you should just learn how to use and I won't take too much time on this but I do want to just share them with you so I'll do this here I'll just zoom in here a little bit so you can see very clearly let's go ahead and delete all of this and so for example python comes with something called sum so if I actually do sum one two three it can automatically just sum it up for you so you don't actually have to write a function that sums okay so that's one really nice one there's obviously Len which you're already aware of okay and then there's also Max so you don't have to write your own Max function it can Max can do that for you 10 five seven and boom there you go you get back ten so you could see Max automatically will always pick out the max number there's also Min which is often times also very helpful so I'll say 50 uh negative 7 337. let's run it minimum the smallest number is negative seven and boom you can see that I get back negative seven Okay so very nice these are some builtin functions some lend Max Min okay I'll just put them here for you and I'll comment these out so you have access to them and uh it doesn't know what that is I'll just remove it okay I'll just put these three so if you're looking at it later it just looks like nice little notes for you that I've left Okay so special built in functions with python okay there we go awesome so list comprehensions plus some special builtin functions plus a little kiss for you your beautiful face and with that said let's just keep rocking and rolling what's up guys welcome back so I've added a couple of nice things for you let me go ahead and show you so go ahead back to your um course and right over here you're going to see markdown so click on markdown and in your markdown you're going to see all of this nice stuff that I've added for you it's gonna say welcome to the best Python tutorial in the world by clever programmer and here I'll list out exercises projects and any future projects that we'll be creating we'll go here okay and the Order of this might change by the time you are watching this tutorial because we're constantly making changes making improvements seeing like where you might fall into a trap or what we're constantly changing this so for example here's a list of apps that you're going to have so this is going to show you hey here the apps okay now here's an example uh so for example this counter app that you're going to build it's going to be a really nice app they're going to build with flask now if I actually scroll down over here it's going to tell you hey before you start uh this project make sure you've mastered the following pure python Concepts and it will tell you hey it's okay if you don't know web development Concepts we'll learn these together so for this counter app we're going to be covering the following concepts web development and pure python related Concepts so web development for this project is going to have these three concepts in there routing get request database you don't need to know these These are okay these are new we're going to learn it together so you don't have to know those however before you enter this project you will need to know these Concepts dictionaries named arguments incrementing decrementing and functions now if you have made it to this part of the course you know all of these already if you didn't skip any sections you have been familiarized with dictionaries you have learned named arguments which is where you call a function and any given arguments a sum you can say a equals one and b equals two okay so those are like named arguments you have learned increment in decrementing which is no num plus equals one or you know or like a cookie hello uh plus equals one so it's like incrementing uh uh a key in a dictionary right so you have learned those Concepts you have learned functions and how to call functions so all pure python concepts are good which means that you are eligible to go ahead onto this project now another thing you're going to see in this project is going to see project live demo and solution all right so you're going to see these three things the project means this is the exercise project where you're going to write your code this isn't going to be the complete project so this is going to be like you coding this kind of from scratch okay so that's going to be that uh the live demo is going to be obviously the demo of the app working so for example if I hit this plus button right here you can see my calendar app is incrementing right and when I hit this um when I hit this minus button here you can see my app decrements right so how do we do that how do we create an app like that with python so you're going to create that and this app is deployed onto the internet which is super nice about Rebel right replit allows you to deploy apps with a click of a button which means you will be good to you'll be able to show all of these python projects you make to everybody else and then there's going to be a solution section right there's going to be a solution section and this section is going to have the link to the full solution all the code which I don't I recommend that you go to the solution once you feel like you can't make progress on the project and in this course we're gonna go through the project together all right we're going to cover every single thing we're going to walk through it step by step together so you should have no problem completing this project portion but if for any reason you're stuck you always have the solution file you can just go to that the next app you're going to be making in this course or one of the apps also you're going to be making is this random dog generator right this will have what the app is what concepts you'll need to learn right I now have some additional notes for you as well like you know know hey this is how dictionaries work so you can scroll down and see those and so this is just a snapshot from what we have done already and so it's like okay if you create dictionaries and you call the function boom this is what it will do or if you want to remember hey how conditionals work here's like a little cheat sheet for how if then statements work and you can come and always check this or you know if you forget for Loops you can always see these examples that I've like written out in a very clear way because I know in notes here it's not always so clear where the examples are but here they're very clear here's Loops here's working examples of Loops right and then how do you find frequency of words in a phrase boom some more examples right so this will constantly be evolving and more notes more exercises more projects are going to be going there but yeah I just wanted to kind of give you the lay of the land I hope that this makes sense and I hope that this is helpful for you all right with that said what we're gonna be doing is working on our first python project I'm so excited to do this with you so let's go ahead and do this one together now we have this app that we're going to be building together the counter app and it looks gorgeous and it's going to cover quite a bit of python Concepts and we're gonna do this slowly and one step at a time so it's not overwhelming and I've tried my best to make it as easy and simple to understand for you as possible so what you're going to go ahead and do is click this project link over here because we don't want to see the live demo right now and we don't want to see the solution right now so let's go ahead choose a project so once you click this project it's going to bring you to this page over here okay and then all you're going to want to do is hit Fork Rebel so you hit Fork Ripple and then if you haven't you obviously have an account I'm on Incognito but you're just gonna go to that Rebel okay because uh once you Fork it it'll allow you to edit code so you must hit Fork very important okay so go ahead Fork that ruffle CP counter app okay and then you could call it whatever you want you could change it okay so there you go now in here we're going to be coding now here's how this app is going to work so once you go here and if you hit run or whatever this is what your app should be showing you home page right there okay so that's what it's showing you and before I do anything else with this app I'll just walk you through what's inside and what's happening in this app okay so so you're not overwhelmed now there's only one file you need to worry about okay there's no other files that you need to worry about right now so that's the only file right there that you have to worry about it's the first thing I want you to notice the second thing I want you to notice is here okay we only have eight lines of code and I know there's some stuff that you have not seen in that's in here before and we'll walk through that one step at a time okay so let's just walk through line by line okay the first two lines I don't want you to worry too much about but they are just importing stuff to help you out so you've seen me use a little bit of importing in Python not too much of it but all we're doing here is we're just asking some other files for help that's why we're doing import okay so there's a counter app that I've created for you which I have hidden from you right now okay and that has some helpful functions that you'll need to complete this project so your home page app show and DB and I'll show you those later okay but these are these are there to help you that's what's happening in those lines so you can pretty much ignore these for now let's go to line eight okay what's happening in line eight over here this line is simply running the app all right and it's running the app on Port 81 or whatever which honestly even all these details you can ignore I don't even pay attention to this I just see this it runs my app if you remove this line your app doesn't run okay so it's simple as that this is to help you this is to run the app so that's it so far now it brings us to kind of the interesting part of our code which is this part over here okay so the thing you've probably never seen before is this guy right there okay what's this at sign and app.rout all this is saying okay I'll I'll open this in a new page so you should probably do that too all this is saying is that when I hit my home page meaning I don't have a path here or about or anything like that in my URL when I hit my home page do the following run this function home okay so for example I could also say only when I hit the banana page uh give me a banana like this okay now make sure you stop and start your app again so you'll have to do this pretty often you'll have to stop your server and run it again because if you don't it's not going to show the new changes now if you go to your app and you refresh it's going to give you an error and you could just go slash banana and if I go slash banana now you can see that it's actually giving me back a banana right so that's how this works this is just saying where this is happening so we're just going to leave it on slash our home page and now on our home page we'll say give us a banana so I'm going to hit command enter you could also do that too that can help restart your app if you do command enter and there we go I can see my banana is now on the home page so without going too deep into it I just want you to understand what it does at a simple level it's just saying yeah on the home page buddy show me this banana that's all okay now this function name here you could call it whatever you want it doesn't really matter I could literally call it this right and if I start my code it'll still um it'll still give me that banana okay so this function name is not that important it's just important that it has a function name or at least that there is a function okay that's what's important so that's what's important okay the function name itself is not that important here so I'm just choosing it to call home because it's like when you go to the home page this slash route run my home function that's all okay now there's this other part that's happening which is doing uh which is doing this uh which is showing this banana part over here now this is HTML so we are returning HTML here or we're writing HTML here uh which means that if you have not seen HTML don't worry we'll do a whole video talking about a lot about HTML and what it does and everything like that okay um because if we're doing some projects with web development with python you'll have to know HTML and honestly let's be honest like regardless of any type of development you're doing especially in 2022 or after 2022 in some Modern year 2023 2024 whenever you're watching this come on like you have to know the web an HTML regardless of what you're doing if you want to become a data scientist python engineer it doesn't matter so for example I can write H2 which is a heading tag and I can say hello and and close the tag with the slash right and if I run this you're going to get this like big sized hello if I say H1 I'm going to get an even bigger size hello right so back to my point of what I was saying with python and with python and essentially web development like you have to know it whether you're trying to become a data scientist uh you know a a web developer a data analyst whatever you're trying to do with python you're going to be dealing with the web either you're going to be scraping the web pulling information from the Web building an app that's on the web interfacing with an app all of that is gonna there's gonna be something there okay so it's better if you learn it um and we're just going to learn some basics of it right now I'm going to show you very bare minimum but most important is like you're getting some HTML here okay so that's what's happening here now what I've done is I've created a nice little function for you that allows you to kind of show a much nicer looking page because right now if you look at this page it's pretty ugly right but we can also style this page and do things within this page to make it look better so for example I could even style it in here and I could say style and I'll put double quotes here since I have single quotes out here and for my style I'll zoom in a little bit here so you could see better I'll say background Dash color colon and I'll say let's say red okay and I'll hit command enter and Watch What Happens it'll restart the server and you'll get all of red stuff here okay so if we did a lot of styling and a lot of HTML stuff here we could make a nice looking page so I'm gonna help skip you a step and I'm going to take you a step forward really fast what I've done is I've created this nice function called show and the show function basically shows you whatever you give it so I could you know again give it some ugly looking HTML like this and if I restart my server um hopefully it's going to show you some kind of stuff so we're going to call our nice helper that we created show and inside of this show it takes two things but we can also sometimes leave it blank so right now what I'll just do is I'll give it home page okay so this is a home page that we created and so I'm gonna give it that that home nice looking home page and let's see if it can show that nice looking home page onto the screen so I'm going to go ahead and restart and hit command enter on this and let's see what happens boom there you go all right so just like that right our app is already up and kind of running and if you drag it down it'll kind of normalize it but if you want to see it in the best view possible just open up a new tab here so you could see it kind of in the best view now if you hit any of these buttons like for example plus the app will break and if you hit minus the app will break so what we want to do is we want to connect this plus button and this minus button so that they actually speak with something okay because right now there's nobody to speak to and I hit plus you'll notice it takes me to the slash increment page but our code doesn't know what to do with the slash increment page right like if I zoom in over here right it says slash increment paths our code knows what to do at this path when we go to the home page with the the slash or whatever it knows what to do but when we go when I hit plus sign and I go to this increment page our page has no idea how to react what to do it doesn't know so think about this if in order to handle what happens at the Home Route we need to do a slash like this this means root right the home page if I want to handle the increment path aka the slash increment path right so let's let's let me put some notes here so if this guy over here is root this is our like rude or our home page right then if we want to go to our increment path wouldn't that be just increment right so if that would just be increment then we need to create another route what we have on line seven that handles that so what I want you to do right now is just write one line of code for me please that should be pretty much this much in length okay and it should be very very similar to this line but it should basically handle what uh handle what happens or at least uh mention what happens when we go to that route okay so it should be very similar to this and see if you can write that I'll give you about five seconds okay if you don't that's okay this will give you five four three two one all right let's do it together so all I'm going to say is I'm going to say app.route slash increment so now I know that I'm I'm going to be handling my slash increment route and all I need to do it to be to be technical in Python these things with the at sign are called decorators they're a little bit of magic so that's why we're not going to go too deep into them but in this case it allows us to handle what happens as at this route now right underneath it what we need to do is write a function so here's what I want you to do before I even do this because this is just a python part so I want you to write listen to me very carefully so you can turn this into code write a function called increment that Returns the word increment that's all I want you to do let's write a word increment that returns a string increment that's it so take five seconds try to do that this is pure python this is no web development right now okay five four three two one so I hope you took that time to pause and give this a try let's do it together now so I'm gonna go ahead and do increments okay and I will say return increment okay so that's it that's all I'm doing here now let's go back to let's restart the server always make sure to restart the server it's very important it's a gotcha you're going to fall for a lot so don't fall for it hit command enter so your server restarts and go here and by the way if you see all this red stuff at the bottom here right behind me they're not errors it's just flask sending you red messages to scare you I have no idea why I wish they did it but yeah so okay now let's go back to our app let's first go to our home page okay now we're on our homepage now when you click this plus button it's going to route you to the slash increment page so let's go ahead and click this bullets man we're handling what happens at the increment page Isn't that cool that is awesome we're already handling what happens at the increment pitch okay um and and we could we could put whatever we want here right we could put a plus button we could put increment word whatever we want so all good we're handling what happens now what we need to do when somebody clicks increment is we need to update a number okay so for example if you click increment then a function should run that actually increments a number right that's what should happen that's why the user clicked the plus button so that big giant number could go up by one that's the only reason they did it right so we need to add that functionality okay so we need to have imagine there's some number okay so imagine we just had a variable number which we don't right now imagine we had a variable number we would do plus equals one or Imagine This uh imagine we had this imagine we had some fake magical database and we said database equals okay and it was a it was a dictionary like this and it said number and the number was Zero okay now let me ask you a question how would you get access to this value right over here zero how could we get this and increment this number by one how could we do that so if you remember from your previous lessons with python if you're going through the full python course is how do you access a key inside of a dictionary think about that how do we do that how do we access a key and or a value inside of a dictionary well it's a dictionary right so the first thing I'm going to do is I'm just going to say database and grab the number okay and then what I could just do is I could say you know let's just first print it out and let's just make sure that we we have access to this now anything that I print is gonna come in here to the console so I'm going to make myself a little bit smaller so you can see this console right over here okay so I'm going to make this a little bit bigger and we're going to run this app again and then all I'm going to do is I'm going to hit this plus button and then once I hit it you're gonna see what it's going to say at the bottom here and you can see it actually saying print zero okay now here's the cool thing our show function is really really smart so what we could do to our show function is we could also give it um it it also like if we look at our show function definition right show function definition or let's say we call our show function here okay I don't know why it's not popping up the documentation our show function what it does is it takes in a page and the second thing it takes in is a number okay so it's a page and number so for page I want to give it the home page so that's what we have done essentially here okay and for the number if you don't give it a number it's going to assume that you want a zero but before we even do that let's just do this first so when they click the page we don't want them to come to this ugly looking page we still want them to come to the main page right because if we go to the actual solution file which is this one right over here you can come back to the course and you can hit solution right if we come back to the solution file right here and we go ahead and look at the app here okay so not the solution file sorry I meant to say if we look at the the demo of the app live demo if I hit plus it goes plus but it brings me back to the same home page right so the page has not changed so what that basically means in my mind is make sure the page is the same like we're not changing the page at all actually so bring me back to the same page right so let's just give that a try let's say that so now when we hit the plus button it should bring us back to the same page and we should still see print coming up here which means that when I when I hit this button it's still running this function which is a great sign so let's hit the plus button or sorry let's restart our server and let's hit the plus button and watch what happened I'm still on this home page yet it's still printing that database number zero so that's a very very good sign right that's that's effectively what we want that's exactly what we want so now what we want to do is the show page takes two things it's very very smart so show input show takes in this function show takes in which page you want to show and it also takes in a number as a second argument so it can show this page and if you give it number it knows how to update this number based on the number you give it that's the cool thing about this function show so say that I give it a number like 57. okay let's restart our app so I'll hit command enter and let's see what happens okay let's hit something plus and you could see that it's showing 57. right why did it show 57 right now because I told it when I hit increment show exactly 57 so every time I hit increment it'll show that okay we still haven't done anything with decrement so if you hit it obviously it's going to do this because we haven't handled that routing yet so we'll do that next so what I want to do is I clearly can't hard code 57 here right that's not a great solution but what I could tell it to do is I could say hey um what I'm gonna say is the number is this database one example so what we want to do is we want to take this database number and we want to increment it how can we increment a database number by one do you remember that from any of the lessons that we've done can you think about how to do that I'll give you five seconds five four three two one so you could have used these five seconds to pause the video but if you're not if you can't think about it to increment a number we just do plus equals one so when I do plus equals one that will increment this number here so let's just go ahead and verify that what we're saying is true so let's print out our database here okay and um when I hit let's do command enter so it's it runs our app again and then I'm just going to hit the plus button and when I do you can see every time I hit the plus button you could see that the database number is going up so it's five and six and there's a problem with when you're trying to do this within replica sometimes within this iframe uh it will refresh twice so just go and open it up in a new tab hit uh start or you hit refresh and then hit the plus button hit the plus button and actually let's just restart the app okay go back to the home page now hit the plus button edit again oh wait um yeah so you could see the database is now at 10 and now it's at 11. so you could see that it just keeps going up and up and up and up and up and up so what we want to do then is we don't want to give this a hardcoded 57 right if we don't want to give it a hard coded 57 what do we want to give it can you think about that so see if you could think about what goes in there and I'll give you a hint it has to do with the database okay that's what we want to give our function and remember these are named arguments right number equals page equals these are named arguments not positional arguments to take about five seconds five four three two one all right so let's do this together what goes in here is the database number okay that's the number that we want to put in there so now let's go ahead and reload this app and uh let's go to a new browser and let's hit uh refresh let's hit plus plus plus plus wow look at that right every single time it just keeps incrementing I mean isn't that beautiful every single time wow what happens when I refresh the app goes up goes up because I keep going to that increment path right what happens if I go back to the home ah it goes back to zero now what happens if I hit plus it goes back to 23. interesting so why is that going to zero that's interesting so what we want to do here is since we're we have this database number it's it we're giving it to our increment but let me ask you this shouldn't our home route have access to that too because right now the problem is when we go to the Home Route if you look at our definition of Home Route home has no idea about the number because we're not passing any number into here so it has no information show has no information about that so when show has no information about that what show likes to do is show the number zero so let me ask you this how could we pass show this number over here I'll give you a hint it's with pretty much the exact same line of code but in here okay so think about that take about four seconds to pause the video and give that a try Yourself four three two one let's go ahead and do this now so I'm gonna give it the same number I'm gonna say database number so this is a not a real database right it's a fake database that we just created kind of on the Fly so let's restart our server let's hit command enter let's go right over here let's refresh this one and I'll hit Plus and I'll hit plus and I'll hit plus and I'll hit plus so that's very good but let's go back to our home route so I'm just going to go back to our home route and our home routes that's four isn't that great I'll hit five six seven eight that is beautiful right that is awesome I can keep going keep going keep going keep going there's only one problem it stores the data when I'm refreshing so that's not a problem it's very good if I go back to the home page it still remembers that I'm at number 16. that's very very good but if I restart the server and we go back to the app and we go back to the home page guess what it starts at zero well what if we wanted to make a counter that remembers forever so meaning if you hit it 20 times and then tomorrow your grandma used your app and hit it 20 times and then the day after that your paw your daddy use your app and hit this counter 40 times to count his steps every second he walked it should be at like a 60 or 80 or 100 it should remember all of that and it should never ever forget right how cool would that be if your app has data that it can record even when you kill the server and start it again and it remembers it forever so you know because this app is already online right you could link this to people already but it would be much cooler if it could remember forever so like how are many people use this app let's just say you show it to like 10 or 20 of your friends they keep hitting plus plus plus and you see the counter is at like three thousand or five thousand right because it clicked it so many times so that would be cool and then every time you come back to the app from any browser anywhere at any time it'll still remember so for that what we actually need to do is we need to use a real database and I'll show you how easy it is to use a real database remember when we were using this fake database right over here and we said it has something called number and the number is set to zero well let me tell you something that DB the word that I have over there for you this DB right over here that's literally this guys it's literally this exact dictionary so like imagine you just change this word from database to DB and you can use it the exact same way the only thing is that this DB that I'm giving you is replits database which means it's persistent which means that regardless of when you use this app it'll forever have permanently stored that data kind of like a memory card when you played video games and it saved data forever so that's all you need to know which means that you can really get you can comment down this line and I'll just change it to DB don't run this line because that'd be terrible that'll break your app but just know that DB looks literally like this okay I'll put a Emoji so even if you commented this line out you won't mess it up right so just know that DB looks just like this so then in order to increment the DB number it's that easy you just change that word with DB and you change this with DB and you change this with DB and DB and that's it you're done like DB is literally that so there's not much to do except for just change everywhere with this database with DB and now you're using a real database that's permanent so let's restart our app now and let's go to our uh let's refresh right plus plus plus so we're at six right now now I'm going to kill the server and start it again and you can see that you're getting some database here right because I'm printing the DB so I could also print the DB number as well and I could restart the server so now I'm going to restart the server and look at that it started at six when I hit Plus right you could see that it's at eight and this number is coming directly from DB now if I go to the this app right here and we refresh this should be at a nine it's keeping track of all of it right all of it plus plus plus I can restart the app again I can go back to this page and we can go to the home page now and you could see it's still in 11 right 12. that information never went away so just like that you have a full on database my friend just like that and really all the lines of code that you wrote to make that happen were very very little right we wrote this one two three four five five lines of code and you have a nice looking home page which you know obviously looks nice once you uh you know open this app or just stretch it out so you could see it kind of like through the whole screen right so once you could see it through the whole screen it looks great and boom you hit plus and you get what you want right so in the iframe if you do it on Rebel it'll be a little bit funny like this but if you do it here it should be fine and it should only go up by one every single time you hit it but now here's the problem when I hit minus it goes to this decrement route slash decrement right that route and it just doesn't know what to do the requested URL was not found in the server if you enter the URL please check your spelling and try again and it doesn't know what to do it doesn't know what to do so now I'm gonna give you one bigger exercise and this exercise is going to be for you to figure out how to make the decrement path work from start to finish so we're not going to do baby step it but you're going to be writing about four lines of code they're going to look very similar to this with just a few changes where it might say increments there might be another word you might be using there so pay attention to details don't just copy paste like one of my friends was trying to do you're gonna change a few letters at least okay uh otherwise going to be similar where you increment the number and decrement think about what you need to be doing or you're going to increment the number when somebody hits minus no you're going to decrement the numbers your decrement function will do that okay and then this line of code I'll already give you a hint this will look very similar or pretty much it'll be you know it's a high chance it'll be the exact same okay so take about five seconds to pause and try the try making when you click this button things work and then make sure to restart the server with command enter or control enter if you're on Windows or just by or just by stopping and starting again to have the new changes take effect and then go to this other browser and run your app and hit the minus button run your app like go on back to the home page and then hit the minus button right and then see what happens okay so I'll give you about five seconds to pause and try adding the decrement functionality all by yourself so five four three two one all right welcome back let's go ahead and let's add the decrement functionality together so it's gonna be very similar right so I'm gonna do app.route and I'm going to say decrement this will handle what happens at this path we've gone through this right and then I'm going to go ahead and call my function decrement okay again these function names don't matter but I'm going to call it decrement here because that's clean and it makes sense and I'm gonna get the number from our database and I'm going to decrement it so I'm going to say minus equals one you could also do multiply equals one and minus equal 1 is the same thing as basically saying it's same thing as saying this okay but it's just easier to write it so I'm going to say minus equals 1 here so I'm decrementing it by one and then I'm just going to go return show so we're going to show the home page and then for number I'm gonna show the database number okay that's that's the number I'm going to send to my show function okay so I think that that should be it let's give this a try now so I'm gonna restart the server with command enter the server is restarting let's go back to our main app right over here if I decrement this should go down by one so let's try it hey let's go if I hit Plus beautiful right it goes up by one we hit minus it goes down by one right every single time so there it is just like that your very first app is done and if you want to show it off to everybody just take that URL make sure you take the home page URL right here and just send it to anybody you want right now and they can use it now this app is not mobile friendly so it might not look good on their mobile device but it is web friendly so as long as they're on the website on their computer desktop friendly so if you they're on a desktop it'll look great and it'll work great so look at that you did this with just a few lines of code Isn't that cool you did your very first project with python I mean this is mindblowing I'm so excited for you that you got this done I'm just I'm excited I'm pumped you got this done congratulations uh this was wonderful and uh with that said let's keep on going and let's build some more amazing stuff all right what is up now we build this amazing app that is great but how did we build it and how did we build it so easily so there's a lot of mystery around this app for example what is this home page thing that's happening and what's up with the show function that just magically does everything in reality things aren't going to be this easy for you right now the truth is that there's a lot of stuff that I'm hiding from you and I've done a lot of the hard work for you and so when you're writing the code you only have to write a few lines of code and then everything works so we're going to unpack and demystify this app into its component parts and see the real truth about how this is actually made and you're gonna build it with me from scratch and we're just going to unpack one thing at a time until we're fully unpacked where there's really no abstraction that I'm offering you just have a fully built app with python now let's start off with the simple things first the framework we're going to be using to build this app is called flask flask is a web development framework very popular with python and allows you to build apps really easily when you think of flask you could think of it kind of like node.js and JavaScript now if you're a beginner none of that might make any sense to you and that's fine as far as you're concerned when you want to do stuff on the web with python you use flask as simple as that there are other Frameworks like Django Etc we're gonna keep it with flask because flak flask is the simplest and easiest one to understand and when you get more advanced I think you could go on to Django or something else but flask is very popular lots of apps are built on it so let's go back to our app right over here okay now we have a bunch of uh things that that we don't really fully understand like what is this counter app file what's this home page what is this app what does this show what is this database thing okay so let's deconstruct kind of one thing at a time with our app now the one thing I want to deconstruct First is let's go ahead and start by deconstructing um deconstructing this show function okay so what the heck is show and how is it working now in reality you won't have a flask a function called show okay what you will have is a function called render template string so let's go ahead and play with that real quick so I'm going to say from flask import render template string okay so that's what you're going to have now on this home page I'm going to go ahead and comment out this line just so it's there so you can see it in comparison but we won't be using it now if I run my app let's just say return hello and when I run my app you'll see that it won't look very great you should only see Hello right over here okay now let's start from there so I see that hello how do I write something so it looks a little bit nicer so we can use obviously we can just write regular HTML here but what we want to do here is we can also use render template string so I can do this render template string and I can go H2 and I can say hello and end H2 okay and now what it's going to do is going to go ahead and show you that hello but since we're using HTML so it'll look bigger and kind of bolder now since we're using HTML and we're going to be using a lot of HTML let me go ahead and just kind of introduce you to HTML okay with python um you know or with anything really in general it's like hey how does how does web development work what is this HTML CSS stuff if you've never been introduced to it before it might be a little bit confusing but let's just go ahead and do this together so I'm going to go ahead and from flask instead of importing render template string but I'm actually going to import is from flask import render template okay just render template just that right or actually you know what let's leave it as render template string let's leave it as that and I'm just going to go ahead and create a variable we'll just call it HTML for now and I'll put three um quotes like this so this will think of this as like our HTML file okay what we would make and HTML files usually have a certain structure but I will just say okay we have a H2 and that says hello end it and and whatever I wrote here in this HTML I'm gonna just go ahead and pass it to my render template string so I should see essentially the same thing so let's remove this and let's give it our HTML you could call this a variable whatever you want we could call this um my I could call this my home page okay so it's different than this home page that we're being passed I'm gonna say my home page right there and let's just copy and let's paste this okay let's run this now so if we give this my home page okay we're getting an error so let's do that and let's see if that still gives us an error it doesn't and that works okay so you can see my home page is being rendered out now what else can I do with in HTML well I could have an input box if I wanted and the input could be you know type uh type text so now if I run this I can see that I'll have an input type right over here but type text okay I could also have a button if I wanted so I could do input and I could say type is submit there's multiple different ways of doing buttons and make sure you close this tag with the selfclosing tag like that let's run this okay and now you can see I have uh input thing that I could actually type in and then I have also the submit button showing up okay in this input I could actually have have a placeholder that says let's say username let's run this make sure you do command enter that'll restart your server and there you go now it says placeholder is username right over here okay or clever clever cozy whatever right I want it to be so we can write H2 elements we could also write H1 elements in our H1 is even bigger so you could go H1 or if you want to go all the way you know hello say welcome back and then you could go all the way down to H6 it's the smallest and I could do this and let's run this okay and H6 again is going to be the smallest you can see I have that this that and then I can also make input Fields right and HTML is very nice and I could have things like P tags so I could have a P tag and the P tag could say hi my name is qazi okay PTAC boom and we run that okay let's restart our server so let's do command enter and there you go P tag is showing so P tag is a paragraph tag so if you want to write like a paragraph or like a text you normally will wrap it in P tags if you want to have inputs where the user can type in or do something then you'll call them inputs okay kind of like this H6 is heading six so that's the smallest heading and H1 is the biggest heading so you could do all kinds of stuff like that now what I could do is what if I wanted to wrap all of this and color it red how could I do that well I could uh let's start off with how could I wrap one thing and give it a color of red so let's just say welcome back if I want to give it a color of red well what I can do is I can create a div and divs are these like these boxes that you're creating around things and I can wrap this H2 in this diff okay in this div right here so you can see I have uh let me zoom in a little bit more okay all right there we go so you could see I have this H2 and I've wrapped it in this div okay so in other words all I've done in my mind is I've created this empty box around this and now I can control that box and I can style that box and I can do whatever I want okay so that's all I've done that's all what a div is doing now what I can do is I can do something called so there's something called CSS okay so here you're learning a little bit of HTML and then there's CSS so CSS is the styling of a page okay so HTML just gives its structure so it just shows the page but CSS is how the page is actually you know it gets styled all right to explain to you what styling is and how it works say I go to Netflix you could go to youtube.com or really anywhere and say that I I right click here can we turn this off okay so say I right click here and we hit inspect element okay now inside of inspect element say I go to the uh to the Head okay and usually in the head of a HTML page okay so this is usually how HTML page is structured and you can even highlight things on the HTML page so I could like go here and you know we could see like all right this is like a HTML div you could see it says div and then it has an image inside of it and has a number next to it Etc but let's go ahead and I'll unselect this okay and I'll go all the way to the top and so you'll see like HTML we have HTML although at the top and at the bottom so that's usually how a HTML page is structured and then it'll have head it'll have body body is usually where you put all of your content okay so that's where like bingeworthy TV shows and all of this will go okay head is where often times people put styling okay this actually always where you put your style file or you link your style file so let's go ahead and remove the style file and Watch What Happens so I'll go here and I'll basically what I'm trying to do here is I'm trying to find anything that says style sheet so you see where it says Rel style sheet it's usually a style sheet I'm going to click it and I'm just going to delete it and then click another one delete it click another style sheet and delete it so once I've deleted all the styling on here now there's essentially no more styling left so look at this this is actually how Netflix would look if you didn't have any styling this is what it would look like okay and you tell me if this looks good it doesn't look very good right this is how this is how everything would be looking on Netflix this is Netflix okay hard to believe right very hard to believe now and then you can see that like list over here it looks so hideous right all of it just looks terrible so if I hit inspect right in our in our head is where we removed it from and if we refresh this page now you'll see that the styling will come back the style file is linked and now boom all the styling is there okay so that's just a little bit of how HTML and styling Works in real life so here's how I can add styling here now in our app I'll zoom out here so inside of our app I'm gonna go ahead and say this div that we created here right this block right here that we created I want to give it a color red so I can actually say background Dash color okay and let's put some uh we're gonna put quotes around it and we're gonna say style equals I'm gonna say this and I'll give it a color of red let's say and then end quotes and put a semicolon here okay let's go ahead and restart our server now let's see if anything happens okay we don't have any changes yet ah so this quote should not be here actually so let's remove that quote from there let's do it right here okay so we basically want to say style is an attribute and the style that we're giving this is a background color of red so now let's hit command enter and run this and now you can actually see that that div is red okay so here's what I want you to do I want you to make this entire thing red so do that as an exercise okay real quick and basically what you're doing is you're going to be wrapping the entire thing in one box so a hint for you is you should only write one line of essentially two lines of code and you should only create one new div and your div should wrap everything all of the content inside of that div and then all I want you to do is simply just go ahead and say color red okay background color red and once you do that that should be good to go okay so I'll give you five seconds to pause and try it on your own five four three two one all right let's go ahead and do it together now so since I want to put everything inside of a div I'm just going to wrap the whole thing inside of a div okay and I don't need to indent it but I just like to indent it so everything can look cleaner so I'll just go ahead and indent that all right so there we go and the CSS part just so you're confused the CSS part is this part any part that has styling that's CSS this is literally that's the CSS part and then the HTML part is like the entire thing is the HTML Port okay all right so you know think of HTML as like the skeleton or the body that you have and then think of CSS as the clothing or the Fashion on that body so the shirt that I'm wearing is CSS okay but like my body and my actual skin that's more like HTML that's a skeleton the structure that holds me up okay now that I've put everything inside of that div I can just go ahead and say style I'll say background Dash color red okay let's run this and you can see the entire thing is red now okay so that's just to kind of give you an example of how things are working under the hood and how you would create your own HTML now I'm going to remove this annoying looking red and we're going to move on to the next part of our application let's remove the Reds here okay let's remove all of this I'll remove this entire div and remove this entire div and we'll hit command enter so we restart the server okay and let's remove that div there too we don't need that anymore okay let's hit command enter here and so just so we can have everything clean and nice okay just like this now if I go to our final version of the app which is this right here you will see that I have two buttons okay so these are two buttons just like this button that we created the only difference between this button and this button is that their styling is different but they're still both buttons that's it alright so this just has a different styling and I'll even show you a little bit of how you can add styling but in this course we're not going to go too much into styling okay that's not my goal my goal is to keep you focused on the python aspects of the course all right so that's what's happening there okay so they're they're both of them are buttons so this page will have two buttons but watch what happens when I click a button right so if I click a button you'll notice that the URL at the top will change and say slash decrement slash decrement so I'm going to click it and Watch What Happens boom look at that so how is that happening how is that saying slash decrement over there and how come when I click the plus button it takes me to slash increment okay well let's go ahead and see that so what I can do is I can take let's say an input so like I'm going to remove um let's say I make a new button okay and I'm going to remove both of these for a second and to make a new button I'll say form okay and we'll close form and inside of this form I'm going to put an input and it'll be a selfclosing tag and we will say and selfclosing tag just means when you open a tag in HTML you have to close it like this so if you open an H1 you have to close the H1 okay H2 you close H2 if you put a div you close the div same thing with form if you open the form you got to close the form now in this input I'm going to go ahead and just put a button and so I'm going to say type submit okay and um yeah we'll just leave it as as uh as that okay we'll leave it as that now the only problem with this type of button when you put submit is that you can't really change the text so instead what I'd like to do is I'd like to just say uh button and say let's say um strawberry okay and we'll close this button and now when I run this so let's restart the server I'll hit command enter you can also stop and start again now I should just see the button strawberry okay and also open this in a new tab because you'll need to open a new tab in order to see the URLs changing okay so keep this open in a new tab and what I like to do is I like to open this up kind of one third of the twothirds of the way and then I like to take the app that I'm trying to see and set it one third of the way so that way on the left hand side I could see code and on the right hand side I could see my app all right so now I have this button but when I click that button if I go all the way to the end my URL doesn't change yet so how will I get my URL to change so what I want to do here is I want to say action and for the action of this I want to give it a path so I'll just say strawberry okay so when you click the strawberry button it'll actually take you to the strawberry page all right so now let's go ahead and try I'm going to full screen this so you can see this I'm going to hit strawberry and Watch What Happens okay actually let's refresh our server so I'm going to hit command enter okay and then let's go ahead and give it a try we'll refresh here and I'm going to hit strawberry and look at that it took me to the page called strawberry right so now so this is us working on our front end right now okay we connected our back end earlier but now we're actually building out our front end the client side of the app and we're we're making it work so if I click strawberry that's very good if it's taking them into the strawberry page now let's go ahead and I want you to try making a button on the home page okay so go back to the home page of the app and the button that I want you to make should be called banana okay so when I click banana it should take me to a URL route called banana so I want you to give that a try right now I'll give you five seconds five four three two one time okay so uh if you've paused the video and give it a try good job if you haven't that's okay we'll do this together now so I'm going to create a form all right and we'll end the form the action of this form will be banana and the button will be banana just like this okay so this will give you a button and this form action thing is what does the thing that does the magic of like when you click it it actually takes you to that page okay the action is doing that so let's keep going here I'll do command enter and we'll restart this app here so just make sure you come here and you refresh okay once you start now you should see strawberry and banana and I'll full screen this so you can see URLs changing so I'll click strawberry first and you saw it change now I'll hit back and I'll click banana now and you can see they're actually going to the banana route now that's very good now let me ask you this since we're doing that that's awesome how do we actually get uh you know so if we go back to our completed app so let's take this app and let's put that over here if I go to my completed app right this part is very good like if I hit this minus sign it changes the URL if I hit this plus sign it changes the URL but these buttons are also connected to code remember so for example when I click this minus sign it actually runs this function over here so how do I connect my strawberry and banana in a way so this um like a like a strawberry function runs or a banana function runs when it's clicked okay maybe maybe uh when you go to this page instead of it saying not found it shows a if I click strawberry instead of doing that it actually shows me a strawberry emoji and when I go to the banana page it shows me the banana Emoji how could we do that so I'll tell you this you actually have all the information you need to be able to complete this this will be a difficulty of like six or seven you need to just recall and put things back together kind of like how we did for increment and decrement because you already have the pages routing you so it's very similar to the exercise we've already done so I'll give you about five seconds to pause give it a real try and then come back and let's do it together five four three two one time all right if you give it a try and you got it good job if you didn't that's all right we'll do it together so I have these two forms right and and I have these routes so when I think the route in my mind I'm already thinking I gotta make that route so I can just do app.route and I can go ahead and do strawberry and the function that I do is going to be called strawberry okay and what this function will do is I'll just have it return strawberry that's it it's literally all I'll have it do okay let's hit command enter and then let's click strawberry and look at that that easy so you have the front end part you've made this button that's your front end part you did okay and this is your back end part okay where your front end makes a request to the slash strawberry page that shoots it over here then this piece of code runs on your back end or server side it gets this on the server's side and then it returns that okay it returns that back out to your front end to your HTML okay so that's like a it's a relationship there's like you're going from client to server side to client side okay I know it sounds complicated right now but over a long period of time these terms will start to make sense okay but you're going from front end to back at the front end okay so this HTML part right over here is the front end part in other words whenever I say front end it's the stuff you can see and touch so this button over here right when it shows up that's something you can see in touch so that's front end this year you can't see and touch this is happening on the back end but then when it shows it back up here and you can see and touch it again it's you know that it's showing it on the front end okay so usually things you can see are easy way to sit that's front end things you can't see AKA you storing data in a database that is more of the back end so we've already done this now I want you to go ahead try and adding the banana route so that when I click the banana button it actually shows me the banana Emoji so I'll give you about five seconds to pause and give that a try five four three two one all right let's do it together now so I'm going to go ahead and I'm going to go ahead and say app.route and we're going to do banana that alone is already going to run this piece of code here that I'm about to write and I'm just going to go ahead and say return banana okay if you don't have emojis go get emojis make sure you're putting it in a string okay putting those quotes around that it's important and uh if you don't have a mode you just use the word strawberry or banana that's fine okay now let's restart the server hit command enter and then hit banana and there we go now we are seeing a banana output it to the screen when I click that button so just like that with that much ease here's what you've done okay this form button here is what's showing this guy okay specifically this form action here is what's updating the URL once you click all right and then this guy over here is rendering what happens on the next page once you click it so once you click it right this is the guy that's showing all of this so that is how all of this is Magic is actually working okay so those are the buttons that you didn't have to create that we essentially helped create for you now how will you convert this from strawberry and banana into increment and decrement well think about it right you will still have a form and an action and you still have two buttons so let's say that I get rid of all of this stuff over here right I don't need that and let's say I get rid of all of this stuff over here let's restart this let's refresh this if I go to the completed app there are two buttons that's it those are the only two buttons we actually need right here right now let's go back to our app we got two buttons so that is good now let's look at what those buttons are called This is called minus sign this is plus sign those are the titles of that button right or the names or whatever so simply we're going to change the strawberry with a minus sign and this banana what will we change that with you go ahead and do that part I'll give you three seconds you could do this in three seconds three two one we're gonna give it the plus sign okay so now we have two buns let's hit command enter so it refreshes let's refresh our page and let's see what happens great so now we have two buttons here that's very very very very very very very very good now we need a number at the top we need a big huge number just like this at the top so here's what we're gonna do I'm just gonna go ahead and let's say uh for now I'm just going to do H1 and I'll just say 23 okay and we'll we'll end this H1 okay and then let's run this okay let's refresh this and there we go we got 23 and we got a minus and a plus now when I click this minus I go to the strawberry page when I click the plus I go to the banana page right but that's not what I want to happen what I want to happen is I want this increment function to run and I want this decrement function to run once I hit this minus sign and this plus sign so if I want those things to happen well I can actually just change the names to increment and decrement right because this button is decrement so I can actually change instead of strawberry or whatever I could just say decrement right there and instead of banana right here I could say increment right here now what's happening is it's actually going to run those functions at the bottom okay but I'm going to remove all of these show commands okay we don't need those commands for now and let's say we even remove this render template string command and home I'm just going to say hey render my home page that's it so all of these I'm just going to have them return my home page for now that's it so if we run our app hit command enter and let's run our app and let's refresh here we should still see the same exact app right now okay so nothing should have really changed that much now when I hit the minus sign I want to detect that I've hit the minus sign so we can add a print statement or we can have it say return so for now let's just have it say return and we will say um you know we we land on the increment page increment page and here we will land on the decrement page okay so I'm going to hit command enter let's hit minus sign and you can see I entered the decrement page and if I hit plus I enter the increment stage so this is a really good sign so far because it means our buttons are connected which means even this is happening this DB number command is happening so whatever number is stored in our database is actually going up so I don't need this strawberry and banana route anymore I can actually get rid of them those are there just to help you kind of understand what we were doing okay now the next thing is I need this number to be dynamic because right now this number is not a dynamic number it's a um hardcoded number but that's not what I want I want this number to come from the database now this is the HTML part which means this is the static part okay so usually any HTML CSS code is static which means HTML does not have it's not a programming language it doesn't have the capability to like calculate stuff and do stuff it can just show what already is meaning that HTML can automatically go from 23 to 24. okay it's static it can't change so what we need to do is use Python to get the updated number pass that number back to HTML and then HTML can show it in the front okay that's kind of how the relationship between HTML and CSS and and python works here so how do we give it a number well if I do just return my home page or return increment we can't pass it any data okay so how do we do this in that case well how let's just start with the my home page how do I give Dynamic data to my home page so it can actually render that out over here here's what I can do I need to actually call my render template string function that I had imported from flask earlier okay so I'm going to go ahead copy this render template string and I'm going to paste that over here render template string okay and render template string is a function that takes in the path so we'll give it home page or our my home page this this one that we just created over here we'll give it that as a path and then it takes in like what are the arguments that you actually want to send it okay which means like uh you could send it a whole bunch of information and it will have access to it on in the HTML side okay so for example I could actually say here's a cookie okay and I can actually give it a cookie now I can change this cookie variable right over here my HTML will have access to it okay but in flask there's something called ginger templating jinja and that allows you to write like python flask code inside of HTML so it can basically allow you to make HTML Dynamic so here's what I mean instead of just 23 I could actually change this with the word cookie and now whatever is the value of cookie that I'm storing here it'll actually pass it right there okay so let's go ahead and uh hit command enter and let's refresh and let's see if we get a cookie at the top there we go you could see that we're actually getting back a cookie at the top so we we're giving our page access to some data and it's able to retrieve it so I could pass it multiple pieces of information for example I could give it a cookie variable I could also give it a um age variable and let's say age it says 28. and now we have access to the edge so I can go ahead and say age is and I can see the age variable right there okay so now if we restart this server and hit Refresh on our app you could see age is 28 it's whatever I passed in here it's passing it in boom right there right so let's go ahead and delete the H because we don't need that and for cookie we don't really need the cookie right well we actually need access to is the number and the number we can get from our database so I could actually say DB number okay now let's go ahead and refresh so I'm giving it access to number and make sure that this is the number that we want to pop in here so replace this variable cookie with this number so go ahead and do that now give you three seconds to do that three two one time let's do it together boom I'm just going to change this number hit command enter and simply refresh now it's going to have the number here uh that's in our database okay now if I hit uh since we've connected I believe let's see whatever we connected so we have increment working except when you click increment watch what's going to happen it's just going to take you to this page that's going to say increment but when I come back right nothing now if I refresh you'll see it says one so if I actually go here it'll take us to the page increment when I go back and refresh the home page it'll say too so incrementing is happening we're incrementing the database except we're going to a different a completely different page okay and later we're going to deconstruct what databases as well what is this database thing it will deconstruct that as well leave it as a note here for now so here if you notice in our finished app when I hit minus it renders me back to the home page it doesn't take me to a newly designed page so we should still be using this exact page that we've created here and we should just reuse it okay so this page here we should just reuse that page so I'm going to go here and return I'm going to say my home page okay and we're going to say render template string so you can see render template string allows us to pass arguments to our back end okay boom and render template string my home page and then the argument I'm going to give it is also number DB number so now increment page is going to look exactly like our home page and this number is going to be updated dynamically because it's literally going to just run this pop in the dynamic number and then output that number okay so if I full screen this app let's go ahead and actually hit command enter so we restart our server let's go ahead here and let me hit plus sign whoops getting an error let's refresh first let's hit plus sign now okay what's happening here let's go ahead and check uh okay let's go ahead and make sure we're going to the right page so we are going to the increment page so let's see what the error is I'll open this up so I could see what the error is it says my home page is not defined okay got it so it's uh it's my home underscore page okay like this so I just had a misspelling and you can use you know just debug your code and you'll be able to find your errors let's go ahead to our home page now and now let's hit plus and watch what happens you can see that I got routed to increment and boom it changed to six now hit let's hit plus again boom it changed to seven plus again boom it changed to eight nine I clicked it twice it's eleven so that is working completely okay so now I've changed my this function over here pretty much to not be using the baby guardrail code that I had for you right the show function you're writing your own actual factual flash code to make this work so very very good now what I want you to do is make decrement work so we've made increment work from scratch try to make decrement work by yourself I'll give you five seconds to pause and give it a try yourself five four three two one time all right so let's make this work if you have good job if you haven't let's do it together so I'm still going to be decrementing the database number and here I'm going to pretty much just do the same thing because I'm returning the home page and giving it the number that was just updated so now decrement should be done okay so let's hit command enter so we restart the server let's refresh here just to be just to be clear and if I hit minus right you could see that it took me to the decrement page and you could see decremented this number let's hit minus again minus minus minus let's hit plus plus and it's working perfectly okay now let's go ahead and destructure we still need to so we have pretty much destructured and deconstructed all of this code into real flash code we're very close uh we just need a couple of more things and then we should be good now uh so this show function you won't need it anymore you could actually delete it in this home page function that I gave you you won't really need it you could delete it okay now what we need here right is um we need to understand what this database thing is so here's the cool thing replit comes in with something called a database it's very nice and they make it very easy to use so if you want to use it here's instructions just click it and you'll if you click this insert over here it'll even insert this code for you so I'll hit insert that's it so once you import this database you can just use it just like how we were using it and we would just say DB and then we just use the DB and that was it so now you don't even need access to this DB that I was giving you for my counter app because you now know how to get it you can just replit import DB so we're done with the understanding of the database okay and we're just going to write one line of code which will account for what happens if you're running this app for the first time if you're running this app for the first time and you never had a database if you try to Index this number thing and this key was never created you're going to get an error okay so for example if I'm in Python and I'll go into shell and I'll type in Python okay and uh let's say that I create a variable called thing okay thing or or a database okay and it's a empty dictionary let's just say if I try to go ahead and grab a number from there watch what's gonna happen I'm going to get in there it's going to say what the heck there is no key there's no key so what I want to basically say is I want to say hey if number key is not in my database well then I just want to go ahead and create that key so I'm going to go ahead and say uh database number and I want to just set that equal to zero because that's where the default number should start from okay so I'll do that and now if we look at the database you can see it actually just created this so now if I try to index it or if I try to increment it it won't have a problem it'll just allow me to do that without throwing an error right you can see it's incrementing and I can keep incrementing it right and now I print it out it says number is three because I incremented it twice so on and so forth so this line of code here we're just going to write that right here so I'm going to say if number not in DB then DB number just create a new key and set it to zero okay so this is like useful for initializing the database if it's not been initialized yet okay so we're done with so now you're completely done with understanding the database and how it works and if you actually command enter and run this app from scratch let's refresh it will everything will work so if you hit plus it'll work if you hit minus it should be working okay very very very very very very good great so we're done with that part when it comes to understanding the database you know we're done okay now what's what's left what's well what are some of the other things that you have to kind of understand or you have to know so the next thing I would say is this app thing where's this app dot run coming from how are you doing app.rout whatever this is a flask app that you actually initialize at the very start of your app so whenever you have a flask app here's what we need to do from flask we need to actually import flask this is a very important step of any flask app that you ever have most of the flask apps that you create will kind of come with this default code written in okay the next thing that we need to do is we need to Define what app is an app is just flask and name okay and this you honestly will never have to remember or memorize you will always just look it up how to initialize a flash Gap and this is how you'll have to initialize it okay so this right there just initializes a flask app and uh creates it for you and then in the future anytime you do app.something app.run for example it runs this flask app that you created okay so this is like something you can memorize or just look at it and copy it next time you don't really have to try to understand it too much that's just how you run a flask app so now we don't even need access to this app thing that we were getting from counter app and as a matter of fact we don't need access to counter app at all we can get rid of this whole darn thing and be left with this and now this is completely all of your own code with no help code from me right now okay so let's go ahead and hit command enter and let's run this again so I'll refresh okay and now if you hit minus it'll work minus right if you hit plus plus plus there we go okay everything is working now the only thing that's not looking very good in this app obviously is the styling The Styling looks kind of terrible so let me show you how you can get the styling as well okay and let me show you really the Santa is not real type of situation here so I've hidden a lot of things from you if you actually click here and you actually click show hidden files Okay click here and the three claps collect collapsible dots right there and hit show hidden files you'll see there's a bunch of hidden files so I don't want you to worry about this file config and I don't want you to worry about this file vent okay the only files I I have the solution for you right here and I have the raw solution for you right here okay so this is the solution with the guardrails the baby guard rails and this is the actual factual truth the raw raw raw code that you would have to write if you coded this app up from scratch okay so those are they're available for you if you want to see them now what's interesting is I want to show you this static app where there's a CSS file and here we've written already a bunch of CSS for you which is the styling for the app so you don't have to do really anything um you just have to import the style file and then your app will actually look really good so let's go to our main.py file okay and at the top right here I'm actually just going to go ahead and import this okay and how I'm going to import this is I'm going to go ahead and say link and we're going to say Rel stylesheet okay and we're going to say href and I'm going to give it the path of this file right here okay so the path of this file right here is actually dot slash static because I need to go to the static folder and then inside of the static folder it's right there so I can say static slash counter underscore styles.css close it out and then that's it you can end the tag or you could just leave it like this either way it works it's a selfclosing tag so that should be good and that will link your styling okay so let's go ahead and let's run this and let's see if it actually makes a difference so let's hit start wow look at that right it's already looking so much better so if I oh full screen it look at that the no the minus sign here is looking good right the plus sign here is looking great that is awesome this is already styled um now if you want to put these buttons so they're in a row and not in a column like this all you have to do just wrap it in a div okay so let's go ahead and take these forms and wrap both of these in a div I'll give you five seconds to try it on your own five four three two one let's do it together now I'm just gonna go ahead and say div here and I'll set div here and just indent this so it looks nicer okay I hope I select it all and I just hit tab or shift and tab to bring it back and let's go ahead and refresh and now your minus and plus signs should be above just like this they're looking juicy now right they look great awesome and the last thing we need to do is make sure that our 12 right looks like that 18 right because it has a yellow circle around it and so the secret for that is if you go to our styling and I'll kind of explain some of the styling to you here as well I'll open this in a new tab okay so some of the styling that you're seeing so if we look at this here right I can I can change things inside of my styling app as well that'll obviously change uh how my styling looks but for example let's take a look at our forms right or our buttons so this is the styling that's showing that so it's like for example it says Hey make the background color this so you can see the little gray outlines make the color of it this or transform 1.1 so when I hover over it you see how it becomes a little bit bigger right like a little bit bigger right there right there right that's happening because of transform and the transition is making it happen over a period of 0.2 seconds it happens pretty fast so that's what it's doing and you can see it says button colon hover so on Hover do these okay and then the styling that we want for our number is going to be in our span tag so instead of putting our tag inside of an H1 if we want to put the big circle we want to wrap hours in a span tag instead so let's go ahead and put this in a span tag actually like this and let's go ahead and end it in a span tag like this and let's go ahead and refresh our app okay or sorry let's hit command enter first so we can restart our server so it serves our new static file and there we go okay our app is looking and doing exactly what our finished version of the app was doing all right so I hope that that deconstructed and demystified a lot of what we did just do let's just do a quick recap of everything that we've done right we have a flask file uh flask app and we need access to our template string we got our database okay we initialized our app right here and we initialize our database right there we created what our home page should look like and that's div my bad okay we created our home page and what that should look like and then to our render template string we gave our home page and then the database number and we did the same thing for all of our paths we created an increment path and a decrement path so if you click the minus button you come here and if you're the plus button you come over here okay um and then here we're obviously just running the app okay so that's all we did and we got the entire thing uh pretty much up and running okay now the last thing I want to do is for organization purposes normally you will not write I mean after this app you will never write your HTML here okay that is a good way to do it when you're a beginner and you're just starting out but what we want to do is we want to have our own HTML file so let's go ahead here and I'm going to also hide hidden files because you don't really need to see all those files it's not necessary we'll create a new folder and we'll call it templates inside of templates I'll add a new file it'll be called index.html so this will be our HTML file okay and we're going to take all of our HTML code and we're actually going to just put it in here okay now we don't need my home page anymore so we actually don't even need to use this home my home page that we created here okay and what we're going to do is instead of render template string we're actually going to import render template from flask just render template just like that okay and then let's scroll down so we're going to replace all of this with rendered template render template render template okay and then instead of my home page I'm actually just going to give it the index.html file just like that so now it's just rendering this file it's very important you put in the templates folder if you don't it won't be able to find it okay because it looks inside of a folder called templates this function right here render template and there you go it's going to just go ahead and use that file right over there okay let's copy this let's paste it okay so we're done and you can essentially comment this out now you don't need this I'm I'm just going to go ahead and take this put it below I don't really need that anymore okay I don't need this statement in there anymore I don't need the show function right there anymore right um there we go okay now let's go ahead and run this app and see if it does what it's supposed to do or if it crashes let's refresh and looks like it's the same right boom beautiful plus minus minus right it's working perfectly so that means that we're pulling all of our data from our index.html so now it's much more organized meaning that our our clientside logic and our on our backend logic is separated so here right we have all of our client side or front end logic all right and that's separated from all of our logic here which is essentially our like um let's say server side or back end logic okay so they're they're separated now which is really nice and uh yeah you preferably you don't want to have like you want to have each file right should have its own language specific code so for example a CSS file should have CSS code HTML file should have HTML code a Javascript file should have JavaScript code a python followership a python code before we had a python file and had a bunch of HTML coded and I think that's that's plenty confusing we don't need to do that right and CSS we don't want to go too much into CSS but uh how it works essentially is if I go here and I show you for example the span tag if you want to style the span tag you call the span tag right here in your CSS file and you just give it styling if you change anything here you'll see your spam tag change and I encourage you to try to change things and see if you can break things and then bring them back by just undoing right and see what happens um you know you could change your div style it you could change your button styling you could change the font size on the button right you can make the font bigger or smaller you could make the button with a bigger bit with bigger smaller height bigger smaller you can see what changes that makes and if you want to get access to counter underscore Styles file then make sure you hit show hidden files so you can show you all of the hidden files that I'll just keep hidden for now okay so hopefully you had fun with that project that hopefully deconstructed a lot of the mystery for you with flask and python you should now have your very own fully functioning python app from the ground up if you want to see any types of solutions you can click raw solution and this will show you the solution that we came up with right now versus the guardrail solution that you should have came up with earlier uh it'll show you the the helper file that I wrote for you it will show you the Styles file that that we have for you so I'll show you everything okay so hopefully that was helpful I hope that you enjoyed it and things made sense hopefully you weren't too confused and with that said I love your face and I'll see you in the next project now we're gonna build the YouTube app with python and flask this is going to be awesome it's gonna we're gonna have apis we're gonna pull the data from YouTube and we're gonna render it out and we're gonna build it in a really cool way where it's almost going to look like react code because we're going to use components and something called macros inside of flask which is a really nice feature we're going to show you how to use templates template filters inside of flask and it's going to be completely beginner friendly okay so don't worry so if you're watching it as a clip on YouTube the link is in the description below if you're watching it as part of this big python course that I'm doing right now well then you'll have the link kind of available to you right over here so I'm gonna go uh into this right here and so on the right hand side if you're in the python course you should see this big markdown file Okay click on that and it'll walk you through this project okay so this is a project we're going to do right now it's going to be the YouTube app and it this will walk you through what are the concepts that are covered here okay you don't need to worry about list of dictionaries we'll cover that inside of this but you should know these over here okay this is what the project is going to look like and here are the three links available for you projects a live demo solution let's take a look at live demo of this app so this is what it looks like uh this is what this app looks like now you could have you could be pulling data from Mr beasts video or you can be pulling data from my videos what that's crazy that was so quick or you could be pulling data from Peter McKinnon's videos and just like that we're pulling data from Peter McKinnon's video so you could see this app works it's fast you could be doing this all with python and guess what it's actually responsive so if I go ahead and change the size of it you can see boom it's becoming smaller you see that right there right so this is fully responsive and all of this is going to be happening with python so I hope you're excited for this project it's going to be a really really fun project with that said let's just get right into it so I want you to go here and click project okay this is a solution if you ever need to look at it don't look at it right now you know look at it at the end but let's click project okay or again it's going to be in the link in the description below if you're watching it as a clip this is a page you should come to and your flask app right here should already be running now if you come to this page most likely it's going to ask you to Fork this so you're going to come to a page that might look like this just go ahead and Fork it not a problem right there okay then you can actually make changes and do whatever you want with it and just make an account if you don't have one okay forget and then you call it whatever you want so I'm gonna go ahead I'm gonna Fork this as well and since I'm your instructor I'm just going to call it instructor okay you could you could leave it as exercise or put your name plus exercise and then just do it okay so there we go and now we should have like a fresh fresh fresh file and when I hit command enter I should see this hello world or um or home page uh popup okay it's going to pop up soon let's give it some time there we go so now we have our home page coming up over here and we know that our flask app is up and running okay it's it's up and running like this is live live live live live which is so cool so freaking cool I remember when I used to use flask or do stuff with programming and I was a beginner I would just try to install it on my computer and it wouldn't work and I'd be like how do you install flask and then when I would try to install that it'd be like you need to install pip manager and then I could such a process and like now you're just getting this app up and running um this is awesome and like you guys should thank replit because they make your life so freaking easy okay now inside of here here's what I want you to notice there's only a couple of lines of code a bunch of it is not really that important these are just channels right here that you'll need access to okay so it's like five six lines that don't even need to really worry about but I put this here because for this YouTube build you're going to need access to a couple of Channel IDs I didn't want you to have to go to youtube.com go to my channel find out how to get my user ID or Channel ID so I just gave you IDs for Mr Beast MKBHD and Peter McKinnon uh right here okay so that's one second this is just a average flask app which you know this is just a boilerplate code that comes with flask right when you start it and we're saying on the home page like when you route to this slash right that's the home page just right now print this out right this takes in HTML so if I change this to H2 right here and I change that to H2 this will turn into a heading tag and it'll become like that and then this line here is just running our app so if you remove this line your app won't run okay so that's that's it that's it for all of these lines of code we're done understanding that next up is our static folder this I don't need you to touch at all do not touch this at all I'm just leaving this here for you but this is where your styling is going to be for this app so in order to make it look beautiful kind of like this a final version of the app right you're going to need access to that styling and since I don't want you to waste a lot of time doing The Styling we have essentially done The Styling for you so as long as you provide the HTML structure of the page correctly and name the classes and divs correctly which I'll show you how you can do that you should be good to go alright so CSS don't worry about this you can pretty much ignore this don't delete it but you can ignore this okay so you are just starting from here and now you understand every line of code in here like this is not that important I understand this is a boilerplate code that comes with flask that's really it okay so a few lines of code and we're getting started hopefully from a point where you and I both are at a pretty similar understanding of what's going on here okay now let's build on top of this now what I want to do is I want to pull in data from YouTube that's the first thing I want to do so the first thing that comes to my mind is let's go to rapidapi.com okay and they're going to make your life really easy in terms of pulling data and it's free sign up here and we're going to go to YouTube okay and uh go YouTube and instead of having to like sign up with YouTube and try to pull data from there it's going to be harder rapid API makes your life a lot easier okay so you it's if just take my word for it if you haven't done too many apis and it'll even generate code for you okay so this is going to be the really nice part so watch this I'm going to zoom in here a little bit so you could see but if I want to make a request it's going to give me all the code that I need okay so for example let's look at what I want so let's look on this left hand side oh first of all if you are new you're gonna need to go inside of pricing and you're going to need to subscribe to the zero dollars per month it doesn't even ask you for your credit card so just go ahead And subscribe for it and then click come back to end points okay and points is where you need to be now inside of your endpoints this is the API that tells you with the YouTube data API you can add various YouTube features to your app use the API for search videos playlists channels and more more what we're going to be doing is we're not going to be using their search API though you could okay but we're going to be using their Channel and Channel videos okay so for example what this should do is if you give it a channel ID like this type of ID right here it should spit back out videos for you for that channel so for example if we go back to our app and I grab the idea of qazi right here we go back and we go here and we paste it watch what's gonna happen this ID right here is going to change dynamically okay so watch I'm going to paste keep your eyes there paste right and that ID just changed because it took it from here and plugged it into there okay great now this is node.js code that's not what we want we want python code so let's hover down and let's go on request I'm going to hide myself here so hover down here Python and choose request okay that's what we want so now this is the code from the request library that should be showing you okay now we're going to go ahead and click test endpoint so we'll see what type of if we send this request here let's see what type of data we get back so I'm going to hit test endpoint and boom there we go so here's the data structure okay and this is something important to understand I know we didn't work with this type of data structure too much before so it might be a little confusing but it's at the end of the day it's a dictionary okay this is a dictionary and it has only two items inside of it um you're gonna get scared when you look at these items because they're pretty crazy items but just understand the underlying data structure is something you already know this is a dictionary with two items okay it starts right here and it closes right here has two keys only that's it it has the contents key and the cursor next key we don't need access to the cursor next key the only key we need access is contents okay now inside of um let's go click inside of content so I'm going to click inside of contents it tells me that there there's 30 items which tells me as content is a key and is a value it's storing a list and that list has 30 items and my gut feeling before I even look at it is that it's probably videos that's what it's actually storing as items okay so let's click here and that's what we see 30 items and every single one of them is a video okay and each item is actually a dictionary so this is a complicated data structure right but it's basically a dictionary so it looks like that like the squigglys let me go make it here okay so this is what the data structure looks like right now okay I'll make it right there so you have a dictionary okay inside of the dictionary you have what you have two items you have two keys you got um Let me let me manually write this for now okay so like this okay we'll just call this dictionary data that's like the topmost one and it has content as a key and that has a list right and then it has another one which is cursor next so I'll just say cursor next and I'll just say blah okay so we're not going to be worrying about cursor next now inside of content it has videos and so each video is a key value pair okay it's like this so these are empty dictionaries now each video If we go inside uh each dictionary has two keys inside of that so it has a key type and as a key video so let's write that out so we have type and it says video and then the other thing other key it has is called video Okay so let me show it to you like this okay all right boom okay and what does video have well video is a key value pair and as a key you have video and as a value of that key we have a dictionary with nine items in there okay so let's go ahead and take a look at it video and this is a dictionary here and this has a bunch of items in here so it has a is live now is fall so meaning like this video is currently not live so this is false and if we take a look at other stuff let's see publish text if we look at that so published time text right if we look at that it says null it has uh it has not been published yet so it's a video I scheduled but it hasn't been published yet by the time you're watching it'll probably be published so this here would be a none okay if you see a null in Python that's a nun most likely okay the next thing it has are stats so stats once we understand this data structure the rest of like making of the app is not going to be that hard but this is like vital vital vital that we understand this data structure because if you understand this and we can manipulate it already then our life is going to be really easy we'll just plug in the request into our app play out the data structure and we're ready to go okay so it has stats okay so stats has one item and just one key of views so stats key uh and then as and then stats is like a dictionary okay and then inside of there is you have views views and uh this video has one view so far okay but we'll just write let's say 23 000 views okay great and then we have thumbnails okay that's another data structure we'll have in here so let's go ahead and write that thumbnails thumbnails okay and thumbnails is a list and it has four keys inside of it okay but we'll just make two keys that's enough so when I was going through these what usually they are is they're they're just all um they're all thumbnails so it's a URL of the thumbnail and then it tells you the height and the width of the thumbnail so what I realized is the zeroth one is the lowest quality thumbnail and then the third one is the highest quality thumbnail okay this last one is the highest quality thumbnail but not every single um video has four thumbnails some have like one and some have four okay so I'm just gonna say this video has like let's say two thumbnails and let's just take a look at what the thumbnails look like so I'm I just care about the URL you're not gonna need to worry about the height or the width so I'm just gonna put the URL here so I'm just going to say URL and blah blah.com okay put another URL here I will say link.com okay there you can put a comma here okay so if you think about this right this looks complicated but what's Happening Here I have data data has how many keys let me ask you this and let's just practice this right now okay data has how many keys data is a dictionary right and data has how many keys I'll give you a hint it's between one or two that's the answer either one or two how many keys does it have if you guessed one close but may you might have forgotten about the second one so it has one key okay content and it has a second key cursor neck so it only has two keys okay great now um inside in in these two keys the only key we care about is content so we're gonna go ahead into content now now inside of content you're going to have about 10 20 30 items because it's going to get you like the last 30 videos of the channel okay so if I get back my last 30 videos each video is going to be what data type each video is going to be represented either as a list or dictionary which one do you think okay take about five seconds to answer that five four three two one each data type is actually going to be a dictionary okay so it's the dictionary actually starts from here right starts from here and ends right there all right now you can have other movies there for sure so like if we could have other videos there uh let's just put one more video so we could have like a more accurate um way to view this so let's look at another video so this is like build modern portfolio with next.js and we can see time text is 10 days ago so let's put that there which time taxes 10 days ago is live now is false stats are this is how many views it has we'll leave this like this okay so now we know that this has how many so the content has how many videos inside of it can you tell me right now okay I'll give you five seconds five four three two one content is a list with only two items okay you could even call Len on this now you have a third item but it's empty so I could delete that item but I'm just leaving this for now so technically yeah you have three items but like two actual videos right the other one is like completely empty so that's what it is if I if I close this right you could see all of the items okay let me even let me remove that too so you can just see content right now has only two items so let's just let's play with this right now let's just prove that this is true so let's go ahead data and let's go ahead and check the type of our data okay I know this is like kind of boring stuff it's like why are we worrying about data structures or whatever but trust me like you're gonna these Keys Should Be Strings okay so that's what the error is right now let's run this so yeah right now I know that it's going to be like annoying or it's going to not make sense and it's like why are we worrying about this nerdy stuff right now where's the app called that you're showing us I promise you if you learned this the lists and dictionaries and these data structures underlying you're going to become so damn good because everything every API requests everything you try to do on the web is going to come to you as a list of dictionaries okay lists of dictionaries is literally going to be everything knowing how to move through it Traverse through it get the data again in and out that's going to be a game changer for us if you get good at this you're gonna smoke everybody else okay trust me on that um it's getting confused what some of these are so I call them as variables because I'm used to JavaScript so let's just go ahead and put quotes around these um so we we tell it like hey this is the key all keys should have these quotes So URL should have a quote around two we're gonna need to do that for other and let's put quotes around these quotes around this quotes here quotes here and we should be good okay let's go ahead and run this all right let's see what we get in our console so we print data right so it's proving to us that that is a dictionary right now what we want to do is we want to get uh content okay inside of our data we want to get content so let's see if we can get content and you can see on the bottom here we're actually getting that content right that content is actually popping up right over here uh it's giving us all of the data that that we're looking for so for example if I move this up make myself a little bit bigger here if I move this up you could see uh I can see the type I can see video I can see it has another key called video and then that video has all of the data that I need right so when I'm getting content let's say all right now whenever I get these lists of dictionary stuff and all of this and I'm printing it out usually being able to see it in a nice way is actually a game changer when you see it like this it's usually very confusing it's like what the heck are you looking at how many items are there it's kind of hard to like visually understand what is happening so what I recommend is you use something called P print okay and um and it's something you'll need to install so but don't worry repl I believe will install it for you automatically and we're just going to go ahead and uh give this pretty printer indent of two okay and all it does is gonna print it but it's gonna make it pretty so it's just going to make it so it's like more this this here is more readable okay like for example if I take this and I go to like Json format or something online and I pop this in um and I process this it's going to make it prettier for you okay so like you you'll be able to go and you'll be able to actually like look at your data and you'll be able to like hit minus plus plus and you can actually see like what the heck is happening okay so that's kind of why I like some Json formatters but let's just use uh pretty print for now and see if that can actually do the job for us so I'm gonna go ahead and say so we can just do uh p p dot P print okay like that so instead of a regular print we're gonna use like a more pretty print and we hope it does the job for us let's reduce the indents to one and let's see what happens okay all right there we go so that is still looking a little wonky right but it does look a bit better so I can I can kind of like see it more now right uh so this right here I can see uh is my first video right here and this right here I can see is my second video okay now um let's see how we're gonna get uh deeper into the nesting of this right so for example if I have content well if I want to get this value over here video how will I get access to that if I'm inside of content and I want to get access to the first video let's think about that if I want to get access to the first video how do I get access to that so here's how I want you to think about it right usually when you look at this this is going to overwhelm you and kind of complicate things now it's looking complicated but if you think about it at the end of the day right if I go into contents here or even like our contents right here these are just two items so if I want to get the first item in a list remember you remember how to do that right remember we had fruits and we had a fruit right here how do you get this guy it's going to be simple okay I hope you got this so let's go ahead print and we're going to say data content of zero so this is going to right here and I'm going to comment this out right now this right here right if I look it's giving me the first it's giving me the first item right in this case this is the first video and it's giving me that right there okay well then how do I get further inside because there are two keys inside of um inside of this right so if I go in here you could see inside of content and even the zeroth items when I get the first video so this right here is vid one video right inside of here I have two keys key number one and key number two I don't need access to key number one right I don't need access to key type so how will we get access to the video and the value of the video I want access to like all the data of this key video how do I do that can you guess so see what you are going to put here so you can get access to all of this okay so take five seconds if you don't get this that's okay we'll get this together take five seconds so try it yourself or pause the video five four three two one all right let's do this together so now at this point I know I'm already getting this dictionary right here if I want to get access to this video well that's as simple as just doing video okay if I now hit enter I'm not going to get this type key thing anymore and I'm just going to get that dictionary AKA this part right here okay that's the part that I want that's the meaty juicy part that has all my data now that I have access to that video well what do I need access to now well I'll need access to if I look at our finished app I will need access to published time text for sure I'll need access to the title of the video so that's important so let's go ahead and grab a video and copy the title here right title so let's come down here and let's actually add that in so I'll go ahead and dictionaries type order doesn't really matter and we'll just say build whatever right I'm just copy pasting this you don't you don't necessarily need to have this exact title if you have any other title make sure to put the comma there so I'll put a title here and then we'll also put a title for this video and we'll say title is uh uh let's say I'll grab just like some other random videos title because this data does not need to be like accurate right it doesn't matter and we'll just grab that title okay bring it in and I'll post it paste it right over here okay there we go cool so I have two videos and they both have titles now okay so let's go ahead and grab the first video's title well now since I have access to video right inside of video these are all the keys I have access to is live now publish time text stats title so in order to get access to title what will I need to do you give that a try okay you're gonna add something here and what's the key you're going to add here to get the title I'll give you five seconds five four three two one let's do it together I'm going to go ahead and say title okay title will get me access to that ah I probably made that mistake again of not putting quotes around um everything so let's just double check what I did here title app I forgot to put a comma here comma okay there we go all right and let's go ahead and run this so I should see this title right here build medium with next.js and there you go you can see that build medium with next.js right so this is the first video and once I guess once I get the first video I can get that first videos all kinds of information about it right so for example I could say first video and save it in a variable and remove this title part from it so this is actually going to get me access to the first video so let's go ahead and print first video and let's run this and then if I want to get the data um let's remove that parenthesis so I'm getting access to the first video now if I want to get the data from the first video well I could actually just do print first video title right if I want to get the publish time text I can go published time text and if I want to get let's say thumbnails I can go ahead and grab them just like this oh oops oops thumbnails okay and now I should get all of that data about the first video so you can see I'm getting the let's let's comment out that first line because I really just want this okay so there we go title is that right publish time text is basically like oh this video is not really published right so that's why it says None um and then thumbnails it gives me uh a list of thumbnails so in this case we just have these dummy URLs showing up right those are the those are the quoteunquote thumbnails okay so that's the data structure that's we are looking for okay that's the data structure that we're gonna once we retrieve it we're gonna be able to do stuff with it now I think that we're able to understand what's happening here right and then as it gets more complicated understanding this underlying data structure will be super valuable for you and now what we're going to go ahead and now we're going to actually start pulling the data dynamically into our app so we can go ahead and make that request that we were making on rapid API except let's go ahead and do that in our app so let's go ahead and copy all of this okay and let's go inside of our app and I'm just gonna go here I'm gonna paste it okay I'll take import request and I'll put it all the way at the top so request is a library and um you know a replit will install it for you if you try to run but you know you can always go to the package manager and install it if you don't have it for whatever reason cool and then yeah and then let's just go through what code it gave us right so this URL here is going to be the API endpoint that we need to hit which don't have to worry about too much but this is we're gonna be making our get request okay this query string right here is where we're going to be passing in our Channel information so for example remember I gave you channels earlier well let's go ahead take those channels and let's put them all the way at the top of the app so every part of our app has access to these channels and now we're making the query to the specific channel here we'll remove this I'll go here and I'm going to go ahead and remove that and instead I will write channels and I'll just write quasi okay so this is going to get you clever programmer or let's just go ahead and change this to clever programmer right clever programmer let's change this to clever programmer and there we go you're gonna see that and this is yeah and then delete these things you can just leave and ignore because rapid API gives these to us you can ignore these two these are important and required so you can't remove them but this is like API Keys some like tokens whatever like this is rapid API giving it to us so this is like important stuff right so just leave it there but you can kind of ignore it and then here it's actually making a request for you and then it's passing in the headers and all of the information that's necessary so it's making a get request it's passing in this URL as an endpoint and then for headers it's passing in this information which means like it's passing in the sensitive access tokens the password AKA um and then it's passing in any query parameters that we might have okay great so you know for query parameters is passing this it's passing in you know this is the channel that we need to hit okay and these are the languages that we need to head and that's a response that runs and then it will go ahead and get that response for you so let's comment out all of our other stuff that we were printing out actually we don't have any other print statements right there let's comment out all of this here for now and let's go ahead and run this once we run this we should see response.txt show up on our screen let's see there we go so where now you can see all of this data so this is about like 30 videos that we're getting back from clever programmer okay and if you go really looking searching inside of it you could see it says build a todo list app with solidity right there right so that tells you that um for getting back real data okay it just looks ugly and don't worry we'll we'll actually know what to do with it afterwards but it was important that you understood the overall structure before we went in okay and this will be called contents most of the time so I'll call it contents here too so in your notes it's easier because that's what they're calling it right contents if I go here and we see the response right you see contents and not content okay so for this response well now what I want to do is I want to actually put this inside of our home so whenever somebody refreshes the page we want to make this request every single time so I'm gonna go ahead and starting from this URL Point all the way to this I'm just gonna cut it okay and we're gonna go down here inside of our index function and I'm just going to paste it in there okay now I'll need to go back back and delete uh and enter okay so I can adjust my indentation because if your indentation is off your app will break which is annoying but just how python is all right and there we go so now I fix my indentation so all of this stuff should be underneath the index function so right when I hit the home page boom uh this request should run and get the data okay so let's give that a try let's just make sure everything is running so I hit command enter to restart the server and yes I'm getting back my data very good now instead of getting it back as a response dot text I want to actually get it back as a Json so I'm going to go ahead and I'm going to say data is equal to response.json okay that's the data and let's go ahead and print out the data okay and let's run this and you should see all of that data right over here okay so now we're getting it back as a Json and what I'm going to do is I'm going to import just sonify from flask and that allows us to just take a Json dump it out onto the screen and I'm gonna return and I'm going to say jsonify and I'm going to give it our data okay and we want to dump it out onto our home screen rather than our console so let's go ahead and hit enter and let's just see if we can do that right now so we want to dump all this data yes and we can this is huge success right now like huge right so if we go here we can see this data is being dumped and I have a I have an extension I forget what it's called but it's some kind of Json I think it's Json viewer that's the Chrome extension I have and it makes the jsons very nice for me so like for example I can play with the Json really nicely so here I can see I have this data and it has two keys contents and cursor next if I hit plus it opens up all of this stuff and I can hit minus minus minus and like every single video object uh video dictionary I can close it or I can like open it and then go through close its keys or open their keys Etc so it allows me to like basically go through and like understand the data structure really well so I would say it's pretty helpful you might just see if you don't have this extension you might just see like a straight up white ugly looking page that looks very similar to this so like if you don't have that extension uh this is the page you should expect to see but that's not very useful right okay great so that means we're getting the data and we're putting out the data now all we are really looking to do is like make it look pretty that's it we're like we're pretty much done doing a lot of the dynamic heavy lifting of this app that we needed to do okay now let's go ahead and do that so I'm gonna go say I'm gonna say contents okay and I'm going to get I'm gonna go inside of this data right here and I'm gonna pull out this key contents right because when I'm looking at this so that dictionary right there I'm calling that data okay so that's called Data now inside the data I'm going to index it and just pull the contents in here so that's why I'm going to index it and ask for it to give me the contents okay just like that so let's go here contents and let's go ahead and print contents now and see if it prints it out into the console yep it is um it's in the console all the contents right you guys I can see a lot of information about video video with thumbnails I'm seeing all kinds of stuff so that's a really good sign now what I want to do is I want to write a nice little um for Loop and what that for Loops job is this I want to create an array of all of these videos except I do not care about this key right here at all I don't care about this key right here so I want to ignore that key type and the second thing I want to ignore is I don't um the second thing I want to ignore is any video that's not been published so on my app I only wanted to show the videos that have been published anything that has not been published I don't want it to bother even showing me that because I don't care I don't care if it's not been published do not show it to me so let's go ahead and write a list comprehension that can actually do that for us so I'm going to go ahead and say videos and I'm going to say get me the video for video and contents okay so I'm gonna basically I'm looping through this contents and I'm going to say if the video and let's index the let's get the video key so we're making sure essentially that we're not getting this type thing we're specifically saying or return this okay so if that video um has a published time text okay so only get the video if it has published time text if it doesn't meaning if it has null it won't get it and here we are saying video All I'm gonna say here is just get me the video key so don't get me the type key at all okay so that's videos now let's go ahead and print out videos and let's see what we see okay and now let's uh let's see if we can get videos to be in this jsonify let's see if that works let's give it a try it does work so let's refresh so now we can see that yep so now we're just getting a new list right and that list just has videos in it straight up there's no dictionary called key there's no extra key uh keys in there there's just a dictionary with a video data inside of it and that's all that's all we're getting and this should be about like 20 or 30 videos right so boom right there are all the videos they're stored in a list called videos and if I open this up there's no key called if we look at all the keys you know there's no key called uh type and now we just have all the useful keys that we need like badges is live now length seconds blah blah and every single thing that publish time text was null is now been filtered out okay that's the nice thing about this this is saying only get me the ones that have published time text that's it so if it has a publish time text get it back to me okay and out of those just do this okay so we're we're mapping and filtering here which is very nice and python allows you to do that with list comprehensions which are very handy okay so we're getting our videos now what we need to do is we need to render our template and we need to send this data back to our index.html and start playing with this data there okay so I'm going to go ahead and I'm gonna say render template and I'm going to say render index.html and I'm going to pass it these videos okay so I'm going to take these videos and I'm going to pass it and give it this value videos so in the in the front end in our HTML file we'll have a variable called videos that we could then use okay now this render template make sure that we import it from flask so I'm going to go ahead and import it because we'll need access to that okay and then what we're going to do is create a new folder called templates and inside of templates we're going to create index.html and in here let's just go ahead and say H2 and let's say videos let's just make sure that this page is actually loading so I'll put this down here and our videos page is actually loading let's make sure that that page has access let's make sure that this page access has access to all of our videos so I'm going to go ahead and save videos just like this so let's see if it has access to our videos variable nice you could see it does okay now let's just give it one video okay so let's just get our first video here so I'm gonna say first video and I'm gonna go videos of zero and let's just give it one video and let's see how it deals with it okay so we're gonna say first video equals first video and we'll go ahead hit save command s and here I'm gonna go ahead I'm gonna say first video so we'll just get and I'll I'll delete this for now okay let's run this and uh that's it we're getting back just enough data for one video okay now what we're gonna do is um we're going to go ahead and just start really like pulling the data out that we need okay so for example uh let's go ahead and in this H2 I'll say first video and I'll say title and let's put these double squigglies here so it knows that this is like a python code and not just HTML so let's write that and let's see so boom I got my title of the video okay so that's very good let's go ahead and see if I can get the published uh time text let's try that okay and then after this let's go ahead and see if I can get the views of that video so if I go look I have stats and then stats has something called views so I can go stats and then I can go views just like this so let's see if I get my stats and you can see I'm getting my stats and then the next thing I will need is I will need a um I will need let's go look at our final app okay so I have views so here I want to say views after this okay views and then I want to say the channel name okay so we could we could hard code the channel name if it doesn't give that to us yeah it doesn't seem like it gives us the channel name in this case and the next big thing big obvious thing we need is this image we need to get these images from here okay so let's go ahead and grab the image as well so I'm going to go ahead I'm going to say image tag okay and for Source I'm going to write Dynamic python code here and we'll say first video okay and let's go ahead and just call it video instead of first video you'll see why the rest of our code will become a lot easier so let's go ahead call it video and video here okay so it's just one video and then let's go ahead to our templates okay and let's rename all of these and call them okay let's see if it allows us to play with this ignore that sound that's the sound to keep me productive I'm going to select all and I'm just going to change this to video and that's it okay all right now video now let's go look at this data structure so how do I get my thumbnail so I'm in my video then I will in uh I will get this thumbnails key so I'll go ahead and do thumbnails okay and let's put a double quote around here double quote okay so I get my thumbnails now then after I get inside of my thumbnails I need to get my zeroth element so I can get zero one two three four or zero this is zero this is one this is two and this is three okay so I could get any of those this would be the lowest quality and then this would be the highest quality okay but let's just start with the zero one so I'm going to go ahead and I'm gonna say zero and then I need to get the URL right so after zero I need to get the URL so I'm going to go ahead and say um URL okay so grab the video get its key thumbnails inside of that get the first thumbnail and then get the first thumbnails URL that's basically what I'm saying here and let's end our image tag here okay let's self close it let's run this let's see what happens and there we go we're actually getting that image back now right we're getting back the image and uh let's comment this line out so it doesn't run okay let's do this so now we just see all of this stuff so it's already looking pretty clean we're dynamically getting the data you know if we change this we already know this app is dynamic and I could prove it to you by if we go here and you replace cozy here right because we're giving it in if we go to query string we're giving it in from channels clever programmer but you could also give it Mr Beast Mr Beast right here so just give it Mr Beast uh inside of channels and you'll notice that it'll pull a Mr Beast video and show that there we go all right holy crap that's a lot of views right so you could see and it was one day ago so you can see this app is already Dynamic it's pulling the data it's doing the things that it's supposed to do and uh those are really the four pieces of information that we need if we if we're looking at this right we need the image we need the title of the video we need the streamed how many days ago how many views and then the clever programmer part and the logo is hard coded okay so that will remain the same so now at this point we have to make this card here look really nice so let's create a card and make the card look uh look nice okay let's go ahead and do that now so I'm gonna go ahead and cut all of this for now or just comment it out and leave it let's let's select all of this and let's comment this okay and let's go here and let's just make a card so I'm going to go ahead div there's going to be some HTML stuff here that we're gonna do don't worry about it too much but the only thing I want you to worry about here is just make sure you're really following along and writing all of these lines lines and especially you're naming your divs the same and your classes what I'm naming them here so let's say we have our class card okay inside of that we're going to have a let's start it backwards so then it's easier for you to see okay so let's take our image and let's work backwards so I'll take our image I'll uncomment this uh okay that's annoying would not take this and paste it here okay so let's take this image for example let's run our app so basically right now it should be just showing you that image right there okay and something to keep in mind if I change that to a three the quality of that image is going to become higher so I want you to keep this in mind for future because we're gonna we're gonna be doing something with this we're gonna write a piece of code that's going to dynamically always choose the highest quality available all right so now that we have this image um what we want to do is we want to put it in a thumbnail container okay so let's go ahead here and this is where this magical style file that we've created for you is going to start coming in real handy so do me a favor and at the top just link this file okay so at the top I want you to just say uh link and we're going to say a style sheet not ref I meant Rel okay we're going to say Rel style sheet and then for href I'm gonna go ahead and say static slash styles.css okay and we can just close this selfclosing tag all right now let's run this okay so you shouldn't see too many changes yet except there is already some changes coming up so if I go to this app right now you can see that things are already kind of centered right and our image is already in in the center there and and the background is dark okay so that already happened from just bringing the style file so that's a very good sign now what I want to do is make our card so we're going to finish making our card so in here I'm gonna go ahead and say class and we'll set thumbnail container and let's take this div and wrap it here so let's wrap that image inside of this thumbnail container and let's run this okay now it's starting to look already better now we're going to create a card so I'm going to say class card and that's going to wrap everything okay so everything about this card that we're making here I'm I'm selecting everything and hitting tab everything that we're making about this card here is going to go inside of these card divs okay so for example everything is going to go inside of this card diff from this point on okay so let's run this okay so now here's what you should see you should see a card and there's like already some some stuff in the back right your image is already going in the middle so that's good okay next up what we're gonna do is let's go ahead and give this image a class now so we're going to give it a class here so image source is going to remain that but class is going to be thumbnail okay there we go so now this image should be looking a lot better okay and then next up what we'll do is I'll I'll just give it three right now so it looks good and then in the future when we run into that error because some of the images don't have a three uh they only have low quality available and I'll show you what we can do all right so boom there we go thumbnail container is good now let's create an info container where we're going to store information about you know the title uh of the video the the channel name how many views how many days ago it was published Etc okay so let's go ahead and do that div and then let's go and we're gonna say class and we're gonna go info container on this and inside of this info container we're going to put all the stuff that we want to put okay so div I'm going to create another div here and we're going to call this Channel logo container really make sure you're not making spelling uh errors here because what needs to happen right now is your your code that you're writing needs to match up with the CSS file so for example let's say you're making this card component right and I go here your class here that says card needs to match up with what it says in the styles.css as the class for card because if they don't match up all the styling for the card you're going to lose it so for example let's just say You misspelled card and you must you you wrote card with two D's well that ain't gonna work buddy because if I run restart the server and run this apparently that's working okay I don't know what to tell you there that's not supposed to happen why is that happening um okay if you keep doing that at some point you're gonna get into trouble okay if you keep misspelling all of this stuff here right let's just give this a try let's restart this it's probably my style sheet is not refreshing or something that's what's happening right now okay but just trust me if you mess with this you're going to get into a lot of trouble so don't do that just make sure that you're staying consistent with all your uh just don't make typos okay you should be good let's go back to our file so thumbnail container okay or info container sorry and then Channel logo container and then inside of this Channel logo I'm gonna just go ahead and drop this logo and um you can copy it or you can paste your own logo so here's the logo that I'm using this is a this is the clever programmer logo and the classes Channel logo okay that's all I did here I just popped this image in okay inside of this Channel logo container so let's run this now and we should see a logo be logo is popping up okay very good so we're we're good with our info container now we still need more stuff in our info container we're good with our Channel logo container but we need more stuff in our info container here what I want to do is I want to have another div and a class and we're going to say info and let's end this div and within this info I want to go ahead and create a P tag and I'm going to go ahead and say I'm going to say video title just like that and let's see if that shows up so let's hit command enter and restart the server I'm going to make myself a little bit smaller so you can see there you go you could see that it says should I start a Hindi coding Channel next up we're going to go ahead and create a span tag and I'm going to say clever programmer and we'll do a line break after this let's go ahead and do this okay there we go now that's being popped in correctly okay and then what we could do is pass in another span tag and this span tag will have the stats of the video so I'm going to go ahead and say views on this okay and we'll we'll write the word views after this so let's run this and let's just see what we get so this should be the actual data and then this should be the word views showing up right there okay very good make this a little bit bigger okay and then I'll put this uh dot here it's option eight on Mac on Windows I'm not sure what it is if you don't have this dot copy it from online look for DOT something if you can't get it or don't want to get it then just don't and put a period there or a dash that should be fine too okay and then the next thing we're going to put here is the time text okay so I'm going to go ahead and save video uh published time text okay let's hit command enter so it restarts our server or control enter if you're on Windows and there we go it says streamed five days ago so if I go to this app and I refresh I can see all of this data popping up here which is a great sign the only concern I have right now obviously is we only have one app one card and we don't have lots of other cards okay so that's that's a concern but it's not that big of a concern now here's what we're gonna do I'm going to refactor some of this code and and make it make it pretty nice actually okay so this card component here we can make it its own component I'm gonna get rid of all of this here okay and we can use it like a component how we do in react if you have now if you don't have experiences around it's totally fine but all we're gonna All I'm gonna say is I'm gonna make it just nice and organized and easy to use okay so let's go ahead and do that so I'll show you how to create something called macros it's really really nice uh to create macros okay so I'm going to create a new file and we'll call this components dot HTML and I'll paste this code in here I'll delete the style sheet link okay at the top I'm we're going to go ahead and put this percent sign so only one squiggly and then a percent sign okay not two squigglies this time and I'm going to go ahead and say macro card okay and it's going to take in a video as a function so literally this is like I'm writing a function here okay and then you're going to put a minus sign and then a percent sign okay it's weird I know but just trust me just do that your life is going to be great okay and then at the bottom we're gonna go ahead and say end macro okay but make sure you put a minus sign here I'm going to say n macro and a percent sign and done so our macro is done here now in our index.html look at how clean this is going to become remove everything okay and simply what you could do is now you never have to look at this component again since you've made it already once you don't have to worry about it and what we could do here is a we can actually do this go all the way to the top and we can say from from components dot HTML import card okay so now we can import card okay let's run this app and just watch what's gonna happen so if I run this app really like nothing should be showing up like no card or anything should be showing up okay because we're not rendering this card component right now it's our index HTML that's the main file components is not running right now now if I want to show the card component all I actually have to do is I have to just go ahead and say card and pass it the video that I have that's it now once I passed the video card component once you pass it the video it already automatically knows what to do once you pass it the video it goes here it sees videos as a function it then takes this video goes here grabs all of this it uses a variable video here so it literally works like a function inside of python which is freaking epic it's so cool right so there you go you have a card and now what we want to do is we have lots of videos right we have 30 videos not just one video so we want to write a loop that can help us access all of those videos and just iterate through them so we are already sending back this videos list okay so and we only send this video video back uh for dummy data and like playing around and seeing if we could make a component now that we're done we could pass our entire list of videos and then just Loop through and make a card for all of them okay so let's go back and I can just go ahead and write a for Loop so I can say four video in videos and pass it to our card and then just end for Loop just like that and if you run this this is going to be kind of crazy but I think literally the entire app will work let's see so let's see hopefully we don't get a crash okay we got a crash it says the there's a video that does not have an element three if you could see that three right there okay so that was the error I had warned you about so let's just put replace that with zero look go back to your components.html replace that with the zero and hit command enter and run this again okay and let's refresh this page boom there we go we just got everything right like everything is showing up this is insane um there's just one thing that we have to fix with styling like you see this is if we look at this in the final solution there's a gap right here right between each card but if you look here there's no Gap it's just like one big thing so all we want to do to fix that is in our index.html we need to just create a div and we need to give it an ID of home and we need to put the whole thing inside of that okay and run this and that should fix our problem okay and let's go back here and let's refresh and look at this it's done it's showing up right if I make it smaller right it shows up one by one so it's fully responsive as well all right um that is so nice and then one last thing that I want to do is here it says 40 998 views if you go to the final version it says 41k views 13k views 44.5 K views so that's how YouTube is actually YouTube it says either K or M for million so what we're going to do is we're going to use this Library called numerize it's really nice and here's how it works so I'm going to go ahead and open up our command line here and let's go and pop this bad boy open make it make it huge so you could see it gonna go right there I'll move this here we're going to say python okay and so just in the Shell just run Python and um from numerize dot numerize import numerize okay and if I call numerize on a number like 23 000 watch what it's going to do it's going to turn into 23k if I call it on a bigger number it'll turn into 230 million and turn it as a string okay so numerizes really nice if you don't have numerize you could probably just do if you for whatever reason you don't have your pip install numerize or you could install it from this package manager right here click that and just type in numerize and install it okay but if you Fork this the right way you should already have access to all of this okay so numerize a super nice Library so we're just going to use numerize for what we're trying to do so I'm gonna zoom out here okay and we're gonna go and say from numerize dot numerize this only annoying thing about this but that's fine import numerize okay so we're going to go ahead and do this and I'll show you something really cool in flask you can create these filters and they're awesome if you have experience developing with react ever man with flask you could create these uh template filters which is essentially like you're creating something inside of your context API or Redux and your entire app has access to it it's awesome but if I'm going to keep it at a simpler level and you're a beginner watching this for newbie it just all it means is awesome and it's very easy it'll make your life simple okay that's all you need to know about this all right so let's go ahead and create a um not this but we're going to set template filter okay and then this template oh don't put a colon there so inside of this template filter here's what we're going to say we're going to go ahead and say Define and I'll just call it numberize okay this is going to be our function it's going to take in a number of views so you're going to pass it views it's going to be a function we're going to make and it's going to return it's going to just call numerize on it and it's going to pass in views and we're going to say comma 1. How many decimals do we want okay that's it that's what this filter number is that we created is going to do it's just gonna depend on this numerize thing okay so uh once we once we do this you get here's what we can do now okay now that we've created this filter here's what we can do so we can go back to our templates and let's go to index.html or let's go to our card component rather so I'll open a new tab here let's go to our card component and here I'm pulling views and what we could actually do is I can actually just pass this guy numberize like that like a filter okay and once I actually pass this markup filter it's going to take this number of views here and call this numberized function on it and do what needs to be done so let's hit command enter and watch it in action there we go 41k views how freaking sick is that that is awesome right 41k views 13k views 44.5 K views 15.7 K view so it rounds it to one decimal 170.1 K views I mean it's it's gorgeous right it's uh it's it's doing what it needs to be doing I mean it's awesome so in terms of number eyes we're good now we just need to create one more filter and all this filter needs to do is grab the third image if it's available and if it's not available just grab the xeroth image okay grab the highest quality image if it's possible okay so we're going to go ahead create another filter and this is super cool I'm in love with the flask templates they're so cool so I can go ahead and say template filter and I can say to find highest quality image and it'll take in images because we're going to give it a list of thumbnails and what this will do is it'll return the uh is going to return images of three okay uh and and the URL of that if the length of images is greater than or equal to four so meaning if I have a thumbnail let's go here right if I have uh if I have thumbnails and that has a length of 4 or greater then just get me the highest quality one but if it doesn't have a length of four meaning it has a length of 1 well that clearly means that it doesn't have this and doesn't have this and it doesn't have this just grab me the zeroth one so if it doesn't have a length of four or greater just grabbing the lowest quality one because if you try to get this one it's going to error out because it's going to say it doesn't exist right so that's what it's going to do so we're just going to check for length and if length of 4 or greater then just grab the fourth one and if it's not length of four then just or if it's less than length of four just grab the zeroth one that's it okay so grab the highest quality what you want if the length is greater than or equal to four else grab the lowest quality one let's go ahead to our components and here I'm going to remove this okay I'm just going to give it remember this function takes in a list of thumbnails okay so let's go ahead and even maybe rename it to thumbnails thumb you know it takes a list of thumbnails and so this is a list of thumbnails so pass that to that function we'll call it highest quality images okay and now if you see keep looking at this image and if I run this app you're going to see that the image quality is going to become much better we have an error no template highest quality images ah yeah because we called it highest quality thumbnails now so thumbnails so let's do this let's see if this works and we still have an error it says highest quality no filter name house quality thumbnail so let's see what's happening let's go to main.py um oh yeah highest quality image singular is what it's called highest quality image because the function gets us only one image so that makes sense why would we call that there we go that image is looking way better now right it's looking way way better now if you want to check this app out and see if it's working everywhere let's go ahead and um let's go ahead and test it out right let's go and replace where it says clever programmer with Mr Beast okay so let's go to channels so let's go ahead and just say active Channel okay and uh let's pass in active channel here okay so we don't have to keep going all the way down here to pass this active Channel and here I'm just going to say channels um and let's give it uh Mr Beast okay so let's go ahead and make the active Channel Mr Beast and let's see if that works oh boom there we go and if I make it bigger boom that is nice right right there look at that if I go ahead and change the active channel to MKBHD let's see if that works let's hit command enter and let's wait for it there we go right MKBHD is showing up and working with this python app that we made let's go ahead and change it to Peter McKinnon let's give that a try and we could see Peter McKinnon is showing up right if you want to make this even more realistic see if you can add in uh put in Peter McKinnon's logo here manually pass that to the back end render that out on the HTML and do the same thing for the name and see if you could do that I bet you could actually at this point all right so this app is super Dynamic right when I go when I scroll it it's a responsive mobile responsive this app is fully functional it's deployed online already and this is a phenomenal python project to show somebody and especially if you're a beginner and you you're made this or at least you understood some of this right as you were doing this this is phenomenal now do I expect you to understand everything here and expect you to be able to come up with this yourself hell no okay or figure out all this HTML stuff or how it connects to styling no do I expect your brain to be hurting right now absolutely like I don't expect that you should be able to get this okay because you're new okay right now is not the time where I expect that you should be able to understand all of this your brain is probably hurting this is probably a lot to grasp you might even be thinking man maybe I'm not cut out for this or I should quit or something along those lines I know those feelings because I've been there all I want to tell you is programming and the start for a while it feels overwhelming then when those Concepts become clear and you keep building on them it becomes simpler and simpler and a lot less overwhelming because you learn how to see things for what they are and just iteratively do one thing at a time okay it's kind of like learning how to ride a bike there's so many steps if you really think about it or driving a car but once you get used to it it's so easy and it's all automatic okay so I hope you enjoyed it and had a lot of fun I had a lot of fun making this for you and building this project and uh with that said I love your beautiful face and I'm gonna see you soon in the next project great job look at this it's so sick ah all right I'll see you soon peace I just picked a number between 1 and 100. can you guess which one it was I'll wait I'll give you three seconds no no really take a guess three two one wrong the number I chose was 73. all right now let's build this game with python we're going to use Python to build this guess the number game okay and you'll be able to have users guess what your number was and then you'll be able to select if they were right or wrong in this case the one that we're building is you get to play with an AI the AI picks the number aka the computer picks a number and then you get to crack that code like a detective and we're gonna build this game with python using flask and there's going to be JavaScript and HTML and styling and all that stuff but the good part is the way that I've built it for you you're not gonna need to worry about a lot of the HTML and the CSS part you're just going to focus on building the game now what's covered in this is you're gonna need to have a database to be able to do this so I'm going to show you how to set that up even if you're a complete beginner you're going to need to be able to input and the user can type in what your actual guess is and then once you hit check me it will actually actually tell you if that guess is Right meaning it's correct right the green one will come up or if it's too low or if it's too high right so then yellow and red those things will pop up and let the users know and then you'll be able to restart the app as well and then you know get back to it so there's a bunch of functionality that this app will have and let's just go ahead and demo this right now so here we go I'm going to pick a number computer has already guessed the number okay and it says good luck cracking it so I'm going to go ahead and pick 50 and I'll hit check me and it says it's too low I'm going to go ahead and pick 75 it says it's too high let's go ahead and pick 65 because we want to pick a number lower okay it's a 65 is too high as well okay let's go ahead and go 58 in between 60 and 50. okay let's go 54 and between 50 and 50. oh wait actually we gotta go higher so it's in between 65 and 58 which probably means it's around 63. it says that's too high so it's in between these two now I imagine so I'll go pick 60. too low so 60 it's either 61 or 62. there we go and it says that 61 is correct right so we have solved the problem we've cracked the code and if we wanted to play again we just hit restart and we get going again all right so this is the demo of the app very simple game but what I would say is that there's a lot of Concepts that we cover here in flask you're going to learn routing you're going to learn how to deal with databases all that stuff right so with that said let's go ahead and get started now if you're watching this as a clip on YouTube the link will be in the description below for the project go ahead and Fork that uh click that Ripple it and then you're going to click Fork that'll give you access to this entire project and everything in between if you are watching this inside of this epic python course great if you're watching this here well you'll have access to all of this inside of that mega mega mega Python course and obviously if you want to take a part of that mega Python course and you're not a part of it already just scroll down below and one of the links will be there to enroll in it and it's all all of these resources everything is free okay so you're going to scroll down and you're gonna find the guess the number project you're going to keep scrolling in the python Mega course and just scroll down to guess the number project okay this might be higher or lower for you just depends on the time that you're watching this and if we decide to make any changes and this is the project and here are all of the links for it that are there for you so you got project live demo and solution so click live demo if you want to see the live demo click solution if you want to see the actual solution so I don't recommend you click this right now click this probably at the you know and not something you want to be working on looking at right now the project is the one where you're going to do this as an exercise and try to solve this yourself okay so those are the things that are available to you so I'm going to go ahead and I'm going to click this project link so we can get started working on this okay and then I have my solution open up here just so I can always see what it looks like so you can have your live demo open up the whole time so you can kind of always have a point of reference to see which which you're going to be referencing right and uh let's go ahead go ahead here and if you hit command enter right now it should just start this app for you right here so if I open this up this is not the solution file this is your exercise file okay and if you're clicking this it would ask you to do a fork so I'm gonna do that fork with you okay I'm just gonna call this instructor okay let's go ahead and Fork so if it brought you to a page asking you to Fork just go ahead and Fork the project that way you can code in it right and you won't have to be blocked by anything and then let's go ahead and hit command enter to run this server and run this app and again what's nice about replit is you already have these static files and templates available to you which essentially means that when this app runs you won't have to spend you know really any time on on getting it set up right like all of the styling and everything is going to be there for you so there we go I just had to restart the server again and now my app is open so I'm going to open this one up okay and now this is the version that we're currently working on okay so like you'll see if I write in stuff there's no functionality like if we type in numbers here there's no functionality if I hit check me it says it's broken um nothing happens if I hit restart it tells me it's not found it's broken so all that means is we need to just work on it and and make it functional okay so when I'm thinking about making this functional here are the first things that I'm thinking about right the first things that are actually really important to me is one I want every single button to be connected okay and that's really easy to do so I just I in my mind already I'm thinking okay I need to create a uh route for this button and we'll just create the route of it to be at home page so that should be fine and then I'm also thinking I need to create a route for this restart button or reset button so I I'm just going to go ahead and Route it to reset okay how do I know these things well if I actually click check me um or let's put in some information and hit check me you'll see the URL didn't change so that's on the home URL so I already know that piece of information and then when I click restart it takes me to slash reset all right so if I look really zoom in there you'll see it says reset right so now if I go back that's how I know where each button is being routed to so in my mind the routing problem is already solved what I'd urge you to do is see if you can create the routes and then just like print that the button check me was clicked for this one and uh for this one also print that the restart button was clicked okay so see if you can create those routes in the function so then when I hit check me it doesn't actually um it it basically shows me you know hey print checkout I don't care where you show it whether it's on the screen or in the console it doesn't matter as long as I see it somewhere when those buttons are clicked so you should have that much information and you should be able to do that part so I'll give you five seconds to pause and give it a try five four three two one all right let's go ahead and let's do it together now so since I know I need to make these routes well in my mind but I'm going to go ahead and do let's lower this here a little bit so we can see this I'm just going to go ahead get to working on those routes I'm going to say app.rout and first route is already made so I actually don't even need to do anything okay first shot is made so I'm going to go ahead and make a second route here and the second route is just basically going to go ahead and say reset and I'll Define reset and we'll just say print reset or in this case we could even just do return reset page okay so it's going to take us to a new page reset page and then here I could print you clicked me you clicked check me button okay so if I were to go ahead and try this let's hit this button check me and let's see what happens so let's go ahead and give it a two let's hit check me okay let's restart the server so don't forget that hit command enter to restart and you can actually see it says you clicked me check button and let's click it again you clicked check me button let's type in hit check me you clicked check me button right and if you don't type in anything and you do this it'll stop you because it's just doing validation it's making sure that you're putting in the right information I'm just going to make the font size a little bit bigger for you guys right there all right so you can see the you you the check means showing up correctly and then let's go ahead and do the reset page one so if I hit restart now it takes me to this page that says reset page okay so all this means is I made sure that all the buttons have something right like all the buttons actually do something they're not just broken so all my routes are working okay now the next thing that I need to do wait this probably just needs to refresh refresh let's try 23 let's hit check me okay so now the problem that we're having and the reason why we're getting this error is because we're making a post request and a post request is not allowed by default how I know this is if I if we go to our templates and we go to our index.html okay so this is where all of your HTML for this app is coming from so for example you know here's your nav bar right um the AI has picked a number that's all coming through this HTML file and then for example if you're if you're like hey how is the styling happening that's all already done for you in styles.css as well okay that's all happening right here so uh but you don't need to worry about too much of how this HTML stuff is happening because I want to stay focused on the python parts so what's happening here right let's go look at this form this is the only like real interesting thing we need to see so I have this form here okay and this form has a method of Slash okay and then I have another form here for the reset so this form here as by default has a method of get so anytime you don't specify anything you have a get request that you're sending but this one over here is doing a post request okay why are we doing a post request because the user wants to send over some data so the user is typing the stuff in and then the user is like clicking one of these buttons and then use users trying to send some data okay so that's that's effectively what's happening and so if we're getting a post request well then on our back end we actually need to look for that post request okay and retrieve the data from there so what I want to do is um for first before I even do that I want to detect and I want to allow that method so I'm going to say methods and we're going to say we want we'll allow get and we will allow post by default get is allowed meaning if you don't meaning if you don't put any of this it's the same as if you had put this okay these two are equivalent statements so by default it's allowed so we're going to go ahead and add in a post request so it's allowed now now if I run this we'll hit command enter and we'll go here and refresh okay and then I'll type in 23 and hit check me you see it brought us back to this exact page and we didn't run into any errors right it just brought us back to this page and there were no errors it didn't say method not allowed because now post post requests are indeed allowed if that makes sense okay great so it seems like we're good on that side all right so now next up what we want to do is we want to actually grab the value that the user is inputting in here okay so how we're going to do that is in this way so I can go ahead and say request okay and we can do request.form and I can actually say that let's go to our index.html and I'll open this in a new tab okay so in our index.html you'll see that this input has a name number guess we'll need access to that specific name so let's go back to our main.py and I'm going to go ahead and say get me that number guess so that's it'll extract the value of whatever was inside and it'll put that here once you click this button check me okay and let's just try printing this and see if it does anything so I'll restart the server and let's see what happens so right now I actually got an error and the reason why I got this error that says bad request is because I did not run this like it's it's asking for a form that doesn't really exist right now okay so for example if I ran this without it let's see what happens our app runs okay and if you look at our form or form right now if I hide myself here right if we look at our form our form here is pretty much empty right so if I look at my form you can see empty okay now let's say I put 23 okay and then we run you can see I have this form here and it says 23 inside of it now okay so if you think of a form it's really just a dictionary in Python and it has the key number and then that key has a value guess okay so it's it's really just a dictionary it doesn't look like a dictionary it kind of looks weird but it it that's all it is it's just a dictionary okay that's all you need to remember about this so um what I need to do is I only need to get the data when there is a number guess because if I restart the app in the start there is no number guess right there's no number that has been guessed at that point so we could do it in a few ways we could assign that number to be Zero from the start or the way that I really like to do it is we could do and check if the request method is post if it is a post request then we will extract the information from the form and we will extract this piece of information we'll say number guess okay and then we will move this you click me button inside of there as well because right now the problem like if we run this the problem with the you click you check me button is it will run on every page refresh so even if I just refresh here it runs if I refresh again it runs if I refresh again you click check me button runs so I don't want that to be being printed every single time right so I'm going to go ahead cut it and put that inside of this if statement so it only detects it and runs this once it is a post request so let's go ahead and hit command enter and now you'll see it doesn't say you click check me button anywhere and I can keep refreshing this page and again I'll refresh it and again I'll refresh it so you can see I refreshed it like multiple times but it didn't say you click check me button which is exactly what we want now say I put the number 23 here and I hit check me now it says you click check me button and it pulled a value out of the form and gave us 23. very good so now we can actually get access to guess this is the guess that the user is guessing Okay um and we can detect that the click happen so it's very good I don't need this print statement anymore and let's just go ahead and see what the type of guess is so if I run this here's one interesting thing you'll see even though we're putting in a number guess will actually be of type string because whenever we're taking it user input by default it's actually type string so what we want to do is we want to actually type use a special builtin function in Python and type cast this to an integer so we want to go ahead here and go ahead and do int um and we can actually put that here right there so now we know that if I print type yes and we run this it will be an integer because it will convert it into an integer so let's say 23 let's say check me okay and you can see it says class integer okay so now we have essentially forced it to become an integer okay so that's that's good so we're able to get the user input now what we're ready to do is we're actually just ready to write python logic because we're getting a number and at that point we know what to do right we know what to do so let's go ahead um and we at that point we just know we can write like regular looking python okay so let's go ahead and write a python function so I'll call this function define check number show message and here's what this function will do okay uh it will it will take in um the guess uh the computer number okay or let's just say the guess number the one that the human guess and the computer number so meaning this is a compute this is the number that the computer will pick automatically so I'll take in two different uh pieces of information okay it'll depend on those two arguments they'll have like two arguments in other words okay and it will either return instead of returning true or false here's what it'll do okay so imagine I called let's say I call this function check show number and I gave it some the value of let's say for the guest number I said the human guest five and the computer number guest uh 50. okay so if that was the case would this function check number should do is it should return the following message it should say you know so let me ask you this right is this number lower than the guess of the computer yes it is right so since it's lower because 5 is less than 50 right so this is slower it should print a message that says 5 is too low okay here is and it should be a string okay I'll put it in double quotes just to emphasize that it's a string okay uh if you guess 75 here but the computer number was 50 well then it should say what it should say 75 is too high right and what if you guessed 50. well then in that case it should say 70 uh it should say 50 is correct so that's what this function needs to be able to do either says the guest number is too low or the guess number is too high or the guess number is correct that's the job of this entire function okay so see right now with this information okay one last piece of information you'll need is how to actually generate a random number from a computer okay so that's going to be something important but for now you could just hard code a computer number and you should be fine okay so before we even we'll make a note Generate random number we'll do that later but for now even if we don't do that you should be able to write this function and if I give that function you know 550 it should give me five is too low if I give it 75.50 it should say 75 is too high if I give it 50 50 it says 50 is correct okay so take five seconds to pause the video and give that a try yourself five four three two one all right welcome back let's try to do this together now okay so I know that it takes in two parameters so I'm gonna two arguments I'm gonna go ahead and say computer uh or a second guest guess um guest number and then we'll say computer number so those are my arguments that I'll take okay and then the definition of function is going to be pretty simple it's going to say hey if guess number is greater or this case scenario let's do this first case scenario lower right if it's lower than computer number well then what I want to do is I want to return right and I want to go ahead and say return uh guest number and let's put that F outside the string guest number is too low okay and then what I want to do is I'll paste that and I'll say if the guest number is higher than the computer number then I want to say guess is too high and then l so we can we can make this an else if so let's do an L if okay and then else we could say it's correct because that's the only other choice left so we're going to go ahead and say guest number is correct okay just like that so those are the functions that we you know this is essentially what check number show message should do right it should check the number see if it's correct or not and then it should show and return this message you know one of these messages right here now let's try this function in our command line so I'm going to pop that up right here and go like this like that and let's go ahead and do it so from main import check number let's see if it allows us to do it check number show message okay wow that was interesting it didn't allow us to do it so I'll restart the server and let's try it again let's try it one more time restart the server python from Main import interesting does that want me to kill this server I don't think so right now that's fine it's just saying it's in use so let's do it the regular way let's just go ahead and go and try print and we'll do check number show message here and we will say check number show message and I will give it the guests of five and the computer guess will be 50. okay so this will be like the first example that we have here all right let's go ahead and run this and let's see what happens and you can see that the function ran and now it says 5 is too low okay let's go ahead and give it 75 and the computers is 50. let's go ahead and hit command enter so we run our app again so it runs that it says 75 is too high and then let's go ahead and try 50 50 should be correct and you can see it says 50 is correct so now we know that our function is working perfectly that is exactly what we're looking for right and now all we want to do is make sure that when we call this check number we already have the information of what the user typed in so let's call this function right over here now okay so I'm going to go ahead and say check number show message okay check number or it's really um check number message because it doesn't show we have to show but it's check number message so that's fine so we're going to call this function check number show message and we'll give it our guess and we also need to give it our computer guess so let's just comment this out for a second right now if in if we're in Python and I'm going to go ahead and just type in Python right here how do you create a random number well you got to do you gotta get uh random choice and what I like to do is let's say I have an array of five items if I call this function choice on that let's call this function let's put parentheses at the start let's put parentheses on the end make sure you're in Shell if you want to run python here and now every single time I call Choice right you could see that it's picking a random number and it's doing that by itself it's picking a random number between one and five so that's how it works but now I need to give it a big list of a hundred because I need to pick up between 1 and 100 all right so I need to give it a list that starts from one and goes all the way to 100 like I need to give it a list like that so I'm not going to manually create a massive list I don't also want to write a for Loop so in Python there's something really nice it's called range and what range really does is if you give range let's say we give range 2 and we call the function list on it it'll create a list with two numbers if I give range 5 it'll create a list with five numbers if I give lists uh if I give range 10 I'll create a list with 10 numbers okay and here's another nice thing about range you could give it a start and a stop so in other words I could say start at one because I don't want to start at zero because we don't want to pick a number zero we want to pick between 1 and 100 so we're not not going to pick a zero for this game okay so we're gonna go ahead here and it ends here but usually in coding it's up to but not including so it's inclusive of the first number but exclusive with the second I don't know why they do that they shouldn't do that it's stupid um but whatever that is the case so this basically means you get a list from 1 to 100 okay so there we go you have this list from one to one hundred so how we could do this is if we want to create a random number okay or we want to make something like computer number we could just go ahead and called uh called choice on Range one comma 101 right and now if we print out computer number and hit enter right it will it will do that so if I just keep running this right here choice between that every time I call this it will get me a random number right because that's effectively what's happening under under the hood okay so this piece of code will get me a random number so I'm going to copy this go back to our code and we're gonna go and create computer numbers here so I'll say computer number and we'll set choice and from random import Choice okay because we want uh the choice to be coming from uh we want to import it okay so we can have access to it all right so now that I have access to the computer number and I have access to the user number right so this is a computer number here's the user number now I need to call my check number show number message function and pop both of these in there okay so we're going to go ahead and say guess and then we're going to put in the computer number right here okay so we're going to call check show number with the guess and then the computer number and um since it returns information we want to do something with that right so this is going to be our message and let's go ahead and try to print that message out so I'll say print message so we should be able to see stuff happening inside uh here okay so let's go ahead and put in 50. so like right now the computer has picked the number and to show that to you is like we can we can write a statement here a computer picked and uh we'll just put computer number in here okay and the future we'll remove this because we don't want to be able to see the computer's number okay so let's go ahead and pick 50 now or let's go ahead and run the server hit command enter otherwise your changes won't show up and if I go to the console here we look uh okay so it says computer has picked and let's stop our function from running from here so I'll I'll do this let's hit command enter one more time okay so you could see it says computer pick 97. now obviously if I pick 97 message will say it's correct so let's pick 50 First and let's hit check me right it says 50 is too low great let's pick um 75 okay it says 75 is too low let's pick uh 90. let's say check me it says 90 is too low as well let's go ahead 95 it says 95 is too low and let's go ahead and pick 97 and now it says 97 is correct so there you go okay so that was one easy way for us to get the computer number and then um our routes and everybody kind of have has access to that computer number everywhere else okay so uh that's that's one way we could do it and then run this function Okay computer Choice and then boom we just keep guessing now what we want to do is we want to make sure that this guess that we did is showing up so we want to be able to see a history of guesses as well so for example if I type in 50 here right I see a history of guesses that'll show oh actually this is the r version so let's go ahead to the solution version and in here if I go 50 and we hit check me you'll see it says 50 is too high let's go ahead and do 75 it says 75 is too high let's go ahead 25 25 is too low right so this history of guesses we want to go ahead and make that now okay so how do we do that well think about it like this every time the user types in something we essentially have access to it right so we need to just append whatever the user adds to that list so imagine we had an empty list like this of uh let's call it guesses if we had an empty list of guesses well what hap what would happen in that case what would happen is every single time the user makes a guess well we just pop in that guess right here right so couldn't we just do that so let's go ahead and do just that so I'm going to go ahead and say guess it's not append and we'll just pop in that guess and every single time we pop that in we just print out the guesses list okay so let's go ahead and take a look at this now so I'm gonna run this let's hit command enter now we're getting to the really interesting parts of the app so let's say check me now you can see that there's a list with 23 in it let's go ahead and put 24. now you can see a list that has 23 and 24. let's go ahead and do 100 check me and now you can see it says 100 right um so we could see that now what we want to do is we want to pass it not just the guess but we want to pass at the actual message so we want to pass it um you know we want to pass it not just 23 but we wanted to pass we wanted to have the information if it's too high as well okay so how could we instead of appending the guess number we could just append the guest message in that case so let's go ahead and move it here and we'll say guess dot a pen message okay instead of just appending guesses so now if we run this okay let's go ahead and do 23 let's go ahead and do 25 let's go ahead and do oh we need to show this too so we need to do print guesses because we're not showing this let's rerun our server by hitting command enter or stopping and starting our server right there let's go ahead and do 23. let's go ahead and do 50. let's go ahead do 75 and now you can see this list that is becoming longer and longer and it says 23 is too high 50 is too high 75 is too high now let's go ahead and do um 15. let's go ahead and do 10 and it makes sense right because what did the computer guess um I don't see what the computer guessed computer picked four so let's go ahead and pick four and now you can see it says correct and you could see in our history we also have correct okay so it seems like we're able to actually get the number of guesses now what we want to do is we want to pass the guesses that we're getting and we want to pass this information back to our we want to pass this information back to our front end okay back to our front end meaning like we want to actually show this information show up here so there's just going to be a little bit of kind of like front end part we're going to do but it's still not HTML related it's still python related okay so what we want to do here is in render a template we need to give it the guesses okay so I'm going to say guesses is equal to guesses okay so now our front end our index.html will have access to this variable called guesses okay so let's go ahead here um and look and if you keep scrolling down you'll see this div here and it'll have this comment inside of it that says insert guesses here so that's already telling us where to do this exactly okay so I'm gonna now basically just say let's say I do double squiggly and I just say guesses okay let's restart our server let's hit command enter and let's go ahead and do 23 and you could see that that 23 is too low is actually showing up on our screen right let's go ahead um let's open it up here as well so we could see it more clearly see uh we'll say 26 check me a hundred check me so it's actually already showing up and and looking pretty good actually you know like not looking the best but it's showing up because we're passing a list back so it's literally just spitting out that list right now so what we want to do is we want to Loop through that list so what I could say is I could say hey turn this into a for Loop okay so put only once quickly with percent signs opening and closing it and we're going to say four guests in guesses I just want you to give me the guess okay and then we'll close this out with N4 so it ends the for Loop let's hit enter and run and check this so if I hit um now let's go to our app 100 is too high 50 check 50 is too low 30 check so now you can see it's actually showing up as you know as one big giant string so let's see if we could do something further if we want to make this even better well we could can't we just put it in P tags would be my question is that possible could we do this so let's give that a try and let's see if putting it in P tags will get it to do um we'll get it to do what we want it to do all right so after adding the P tags if I refresh this app here you could see that now it just breaks it up into new lines okay so you could wrap this inside of P tags just like this and now every single time you type it in it should break it up into different lines now watch this this div if we actually give it a class because we've created The Styling for you so if you actually go to static um the Styles and I scroll all the way down to red green and yellow we've created The Styling for you where if you actually give it the class of guess and then you give it a class of red green or yellow it will automatically highlight it the right way so I'll just show you what that means let's go to our HTML and let's just go and say guess red like this so if I give it a guess red like this okay watch what's going to happen here uh let's go ahead and say let's restart the server so we hit command enter right now and you could see if I give a 35 you could see it's in Red so let's run this again okay 50 okay 100 all right now with our styling we don't need these P tags even actually we can get rid of these uh P tags so let's get rid of them okay and what we're going to do is we're going to wrap just our guess inside of the div okay so let's go ahead and do that now let's just add this inside of the div and then we'll do the loop outside of this and then we'll have a div here uh class guesses container so hopefully by the time you're watching this this should already be kind of there for you and you shouldn't have to do it yourself but right now we we do have to do it ourselves that's fine let's just go ahead here and paste this okay and then boom oops let's go ahead like that okay just like that cool so I have a div here that guesses container and then inside of that I'm doing my Loop okay and then every single time I loop I create a new div with the guess in between so this is really what it's looking like all right um and then yeah that's that should be good now let's go ahead and let's go ahead and hit enter and then we're gonna go and style this so let's go to our app now let's refresh and let's take a look and see if it got any better and boom it got way better right let's hit 50 50 is too high 80 and even when you hit enter it automatically Works 100 100 is too high so now let's go back no matter what number you give it it's going to sit too high for example even if you give it zero or you give it like negative 55 it's always going to say too high so that is also not the experience that we want we need it to have different things um I'm sorry it's not going to say too high that's not what I meant to say it's going to color it red is what I meant to say Red's going to keep coloring everything red because we have hardcoded red here so instead of hard coding right here we want to add some logic here so that's a really cool part and what I want to say is if the guess is too high then I want to go ahead and get a red if the guess is low then I want to go ahead and get something else so we can go ahead and write um a conditional here okay inside of this string and I can actually say if hi the word hi is in guess uh let's put a double quotes around this double quotes like this we can say if high in gas if that is true then I want to say red okay so let's see if this works so basically what it will do is if it's ever true it'll evaluate it to true and it'll just say red it'll like replace this whole thing and it'll just say red like that um and then we need to obviously end our if so let's go ahead and say end if and let's close it okay let's run this and uh let's hit command enter to run this okay I'll say 23. so since it's too low you can see it's not styled but let's pick 100 and it's too high and now you can see that it's actually red so this is working correctly it is correctly detecting if the word hi is in your guess based on that I'll conditionally render it just make sure that you have a lowercase high in your function uh this function over here so you have a lowercase High and a lowercase low or lowercase okay otherwise it won't really work um so if is if that's in guests then you're good red now we're just going to add these conditionals multiple times so there's a first if then we're gonna go ahead and write another else if so this is the second one is going to be an else if low in guess then it's going to render out yellow okay and then last but not least we're gonna go ahead and say green if none of those conditions are true and so I can actually just write green right here okay so if I said guess yellow or gas green or guess red it'll style it accordingly so now let's restart our server uh we're getting an error because we're not ending our ifs correctly so let's take uh let's take this here and we can put that outside just like this and then let's wrap one more else if so we can actually say else if we can say correct and gas then give a screen otherwise and if so there we go now let's go ahead and hit wait what's the error happening now so if highs and guess um I don't need to end if here because I'm ending prematurely so let's stop that from happening okay so if high is in guess then give me a red if low is in gas then yellow else if correct is in guessed in green otherwise just end if so let's hit command enter restart the server Let's Go 23 let's go 100 so now this is yellow this is red perfect let's find the correct number 75 is too high let's go 60 is too high let's go 55 it's too high let's go 40. it's too low let's go 50. it's too low let's go 53. scroll down and it says 53 is correct okay but now there's another annoying thing so that's really good styling is working perfectly but there's another annoying thing that's kind of annoying me right now I have to keep scrolling down from my most recent guess and that's a that's a bad experience right because I think what should be actually happening is I should have did not do that like I should just automatically pop up so like if I go to the solution version and I type in a guess like 55 or let's say 100 let's go 100 and I run this you could see that that pops up at the top so that's what I want to be happening I want it I want all of my guesses to pop up to the top well how we can do that is keep in mind that this is a list here this over here is a list so let's say I take this list and let's just open up python for a second and I'll go um actually let's just zoom in like a hell a lot so you could just see this like super clearly because I know it's super annoying to like constantly have to look at this in like such a tiny screen I'll just move this here for now okay so I'll paste that list and we'll just say messages or guesses and I'll pay sellers right so I have guesses here now this is the order that it's in but I want to see this one first all I got to do is I gotta just reverse the order of this list if I do reversed guesses that alone reverses the guesses now you can't see it because it puts it in this reverse list iterator object so you can still Loop through it but you can't see it okay if you want to see it you can just wrap it in a list so it'll convert it back to a regular list object okay so make sure when you do this listing make sure to put right close all of the parentheses and you could see that it has reversed its order which is amazing that's exactly what we're looking for so if you want to do that well then all you got to do is if you wanna so you could you could do this right like if if I did it like this now this will give you this list object but if you're looping through this it's not a problem so for example let's say four guess in reversed guesses and I go ahead and I say print guess you could see it Loops through it no problem and then it returns you this result so let's go back to our app and now what I want to do here is I want to return our guesses but I don't want to just return regular guesses what do I want to do to them what order do I want them in that's right I want them as reversed guesses okay I want to reverse them so let's go ahead and do reversed guesses that's what we're going to be sending back to our front end okay so once our front end gets these as reversed it automatically is just going to Loop through and it'll be good okay so we're just sending it reverse from here so let's go ahead and restart and give this a try so I'm going to say 50. so oh geez 50 is correct wow guessed it right on the first try huh 75 is too high let's go 90 that's so rare there was a one out of a hundred chance for me to get that that is so rare I got that on camera that is insane um yes such a low chance man jeez so 0.0 one percent right one divided by 100 yeah 0.01 um I mean one percent chance why am I being such an idiot the one percent chance it's a one out of 100. anyways 95 is too high all of my most recent numbers are showing up at the top okay 34 is too low so that's exactly what I was looking for right I wanted them to show up at the top so this reverse trick does exactly that now the last thing I want to do is reset so when I hit restart well it shouldn't actually bring me to a different page it should still bring me to the same exact page so let's attempt that first okay so if I hit restart let's not give it guesses right now let's just do it like this and let's say I go here restart my server and I type in a few guesses like check me and then I hit restart boom right it just restarts and then we get going again okay 50 check me right however the problem that's happening is like for some reason all of my guesses are coming back so let's say like I guessed about multiple stuff right so I guess 30 50 35 but now when I hit restart it goes away invisible for a second but then when I hit this again all of my guesses come back that's not what I want that's that's pretty weird I want it to truly restart and I wanted to truly like guess a new number for the computer so one thing I know for a fact is I need to reguess the computer number so we're gonna go here and we're going to say computer number um is now like re like changed basically okay so now the computer number is picked again once the reset happens the other thing that I want to do is I need to set guesses to empty again okay so guesses will be an empty list again and then I call this function okay and if you ever wonder why do we never pass computer number to our front end is because we never want to show it it's only for our back end to know not our front end okay so our python app needs to know about it but our HTML JavaScript CSS like all the stuff you're seeing visually here doesn't because we don't want to reveal what the computer Choice was so this will reset it effectively and then we'll just send that list back and now we don't even need to really reverse this because it's an empty list right so why does it matter if you reverse this or not and now let's hit restart our server and let's give this a try so I will say 35 hit check me it shows up I hit 90. hopefully it'll be red it'll show up and now let's hit restart and now everything is gone let's hit 50. let's see if it's computer picked a new number okay let's hit 50 again check me ah interesting it brings it all back it brings all of it back so let's go let's see if it's a problem that we're only having on replit like AKA iframe problem let's take a look at our version of the app or deployed version of the app here our instructor flask guess the number right and what's super cool is this app is deployed so you could actually just link it to anybody and even if they are Incognito or wherever they could just open and start playing with your python app so that is a really really cool thing that I do want to give a huge shout out to for ruplet because that is that is awesome like not you not even worrying about deployment and things already being deployed that is crazy so let's go ahead and hit 50 here and also check me and I'll hit 90 and we'll say check me and then I'm gonna hit restart okay and now everything is empty let's go ahead and hit 50 again okay and it brings it all back so now this is a problem that we gotta solve because that's really annoying why is that happening so the way that we can actually overcome this weird problem we're having the way to overcome this is you know really what's Happening Here is I have these local variables like computer number and guesses and computer number of guesses and these variables are getting confused and lost in here because the same stuff that this has access to this route Index this stuff reset route doesn't have access to that and so then that information is getting Lost in Translation okay between these two routes so what I want to do is I kind of want to create like a global variable that everybody has access to AKA like a database variable that everybody has access to so let's do it that way okay so what we're going to say is we're going to say from replit import DB okay and then I'm just going to initialize certain keys so for example one key I'm going to need is guesses and then the second key I'm going to need is computer number so I'm going to store that inside of our database so our app knows about it the entire time okay if you're thinking about a database it's really just this like I'm gonna have guesses and it's going to be stored as your like stored as a list okay there's gonna be a list of moves so or list of guesses so seven is too high for example okay and then you know let's say five is correct okay um so let's go ahead here this is just to show you what this will look like and then we'll have another key and that key will be computer number and that'll just be whatever the computer I guess is right so this will just be like 57 whatever the computer has guessed here okay so that's what the DB will look like it'll just be a dictionary with like some data in it okay that's all I want you to understand about it but this is a database we're getting from replit and it works out of the box really easy to use okay so we're gonna have two keys in that database one is going to be guesses one is going to be computer numbers we're going to initialize it and I'm going to say because if I try to append to guess this but guess this doesn't exist as a key inside of this dictionary like if I try to pen to guesses but let's say guesses doesn't exist and I do DB bracket guesses dot append it's going to give an error it's going to say hey that key does not exist so what we need to do is um I'll just initialize all of this I'll save guesses not in DB so it'll check if this key exists in the database if it doesn't then I want you to initialize that key so we're going to say guesses equals this okay and then we're gonna do do the same thing for computer number if that doesn't exist then we're just going to say computer uh DB computer number is equal to uh this random choice so yeah so it's like whenever the game starts or it's initialized it should just be a random choice that the computer picks and that's what should be inside of the database and problem is solved okay so I'll remove this I'll remove this DB stuff here because that's what it is and then I'll remove our guesses and I'll remove our computer number this statement over here because we don't need access to any of these anymore okay what I do need access to is computer this database variable here okay so now when we call this function message I need to give it the computer number from the database okay and now when we need to append I I'm not I can't just append to guesses because that doesn't exist anymore I need to append to DB guesses okay so there we go and now when we need to clear stuff out I just go directly to the database okay and I say hey clear out the number of guesses and also I go directly to the database and say hey reset and pick another computer number okay and then in my backend for databases right here I give not guesses but DB guesses and same thing here I give DB guesses for my guesses okay so that is really it that's really it so let's go ahead and hit command enter and try to run this now so I will open it up here uh let's go ahead to this route and hit enter okay and I'll put in 50 check me uh okay let's see what error we're getting and now the error we're getting is it says print guesses we don't have guesses anymore so let's remove those okay we do not have guesses anymore uh you could put uh instead of that you could do DB guesses for print and you could do DB computer number for message okay let's go ahead and run this let's go back to our app hit continue all right there we go let's go ahead hit restart it's gone let's now type in 75 and you can see none of the old data came back right 50 run this 25. 30 is too low 45 it's too low 60. is too high okay 55. 50 53. come on yeah let's go baby all right so we got 52 is correct so it is working correctly it's pulling from the database and what's great that it's pulling from the database means I could even restart the app so let's say I like restarted the app everything is still Gucci all my data is still there and I could kill the server and start it again so I could stop and start and when this app would refresh it would refresh with all of that data so like if somebody has a game session that they're playing uh that will stay there even after you hit refresh or whatever they won't just lose it simply because they refresh their page or something so or you restarted the server so that's a really cool part about having a database because it's pulling all the data from a store database okay and with that said I mean unless I am mistaken your app is pretty much your app is honestly done this has every feature every functionality you could restart you could uh guess the number and check if it's correct or not right and then this returns our function check number show message will return one of these statements we get that as a message we're reversing it so it's coming in the right order we have all the styling in place for it so yeah with that said there you go that is fully your app you can share with your friends your family could show off hey look what I made with python you know and especially if you're a newbie or getting started I mean I'm really proud of you for being able to get to this part and get it done even if you just copy pasted everything that I did or even if you looked at the solution file or even if you're using the solution file okay the main thing is you're trying and you're here and the start all of this stuff is really hard I know but I promise it gets easier over time okay so I don't expect that you would have figured this out yourself or done it yourself but I do expect is like you at least gave it a try and that's all that matters okay with that said I love your beautiful face great job on making guess the number and and I'll see you in the next video Rock Paper Scissors Shoot maybe I got you who knows welcome in this video we're gonna be building rock paper scissors with python and using a web development framework called flask now I've abstracted away essentially all the stuff that you need to know about web development so you really don't need to know any web development at all the way that I've designed this app for you is you're pretty much only going to need to worry about writing python code okay uh if you're watching this on YouTube and you want to follow along and build this app out with us the link isn't going to be in the description below if you're watching this as part of this big course that we have done um I'll show you exactly where you can go ahead and get the link but first things first I'm going to go ahead and demo this app so you can see exactly what it is that you're going to be building so let's go over to it and I will share my screen with you now all right so this is the app that you're building now I'm gonna choose which one I want and I chose Rock and you saw that it said human picked Rock and the computer picked paper and paper beats Rock so I'm now at negative one and it says you lose okay let's go ahead and pick scissors this time damn damn I lost again beating you what the cheese okay there we go now to draw I'll pick scissors again it really likes rock huh let's wow right when I pick paper it picks scissors this computer is too smart okay so I'm just getting destroyed here okay what's crazy is that this is totally random so I should be probably at some point winning but you get the point now I can also hit end and it'll end the game and watch this it's actually really cool when I actually refresh right the data doesn't go away the data is still there so how the heck am I doing that with python well guess what this app also has a database so you're going to be mastering databases you're going to be learning about routing how that works you're going to be learning arguments you're gonna be learning about so much and like so much python stuff as well so just hang in there it's going to be a fun project all right and then if I hit this end it completely clears up and starts all over again boom boom boom okay all with pure python all right with that said if you're excited I'm gonna walk you through it so if you're going through the course the clever programmer python course okay and if you're watching this and you're like I have no idea what the heck you're talking about I'm doing an amazing python course which is you know 8 10 12 hours long it's a pretty long course and um if you want to become a part of this course the link is in the description below you could just join it completely free no charge for anything um and uh yeah it'll give you access to all of this material the entire course all the exercise of projects we do and you'll have access to this okay so here we go so we're gonna find this project this rock paper scissors project right over here and then inside of this project uh you're gonna see that that project has links so we have a project link I'm going to click that and open it I have a demo link and then I have a solution link but I will not open the solution link okay I'll only open these two uh the solution link we're gonna leave it not click it because that's the solution I don't want you to see the solution right now okay I want you to work on the app so click the live demo and let's go ahead and check it out so here's the live demo of the app right we've already checked that out so that's all good we can close it now actually I like to leave the live demo running so let's just leave that open for now and then the next thing I want to see is the actual project so let's go here and now what I'm going to do is I'm going to walk you through an explanation of this entire project because this project is going to be different than the ones we've done before this or the ones we'll even do after this you are going to be doing a lot of this because I think you are ready but it's designed for you in a way where you can do everything step by step however for all of that to happen I need to explain to you how it works because if you tried this on your own right now it won't really make sense and you'll get lost or frustrated I don't want that to happen I want to make sure that you have a great experience and you actually build it let's talk about first things that you don't need okay so these over here static template stuff you don't need to worry about it pretty much at all we've hidden these complexities from you completely in this project so you really don't even have to look at it I was planning to hide these files folders but I think at least you should know that they're there okay in the static is the styling of your app which you don't need to worry about okay it makes it look beautiful and color powerful and all of that and then in templates is your template structure so it's like where does the div go where does a head go Etc okay so this here is all your front end meaning right now if you open this app and you hit run at the top right uh first thing we're actually going to do is when you open this exercise it's going to ask you to Fork so make sure to go ahead and hit fork and I'll just call this uh instructor okay so make sure to go ahead and Fork because otherwise you can't write code obviously unless you Forks you probably forked it um okay so there we go so static and if I run this app right now okay it should show me this over here and nothing should happen so like let's say I open this okay and I'm going to zoom in here so you could see a little bit better if I click nothing will happen click click click click meaning none of these buttons are connected to anything so you'll see routes changing at the top you see it says end you'll see it says play Choice equals Rock you'll see it says Choice equals paper you'll see it says Choice equals scissors so all of this information there's something happening but these buttons aren't connected to anything yet meaning there are no functions that we have that are firing off yet because that's the functionality that you're going to build okay okay so here now let's walk through the rest okay so I don't need to worry about this I the only one file I need to worry about is this main.py that is it okay now let's zoom into that main.py and turn our attention to that at the top you'll see some imports that you're gonna need to do not touch these These are perfectly imported for you um you will need to add any other Imports and you won't need to remove anything so you can just leave this untouched uh like some of the code here pretty much all the code that's written for you you can you should leave that untouched because you're going to need access to that all of this here is I'm just creating database database information for you that's why the app even when you refresh right it still has the data because we're using a database here and we're using the replit database so game start player score choices results those are initialized in the start as like false right because when the game starts it hasn't started yet it won't start until you hit play that's when the game will actually start alright so yep basically here all of this stuff database information that we're going to need and it's going to change so choices is going to be you know what choice the human picked and what choice the computer picked and computer will be picking a choice at random player's score will be well what's the current score of the player meaning if this player has let's say two points or the score is two the score is two then that basically means that the net result of the student uh of the player is like two plus two okay uh if you lose player score goes down by one if you win player score goes up by one right so you get either plus one or 1 based on winning or losing and if it's a draw player gets zero so that's what's going to be going in there that's all going to happen later okay all of this stuff you're going to touch later now let me go to the functions that you should work on first and then you're gonna work on other things next okay so I'm gonna close this index one and I'm going to close this play one okay and you're going to see this function called get computer Choice okay and so you're going to see functions like these so if I go ahead and close out all of these functions here this game is made up of um one index you don't really have to do too much there okay but one function play which is going to be your main logic that's going to go in there it's made up of computer Choice function two three four okay and then there's end game so I would say like about five functions that you'll need to make now let's start with an example of a function so let's say we want you to make this computer Choice function okay you don't need to change what you write in here the arguments are already given to you in this case there are none none that it takes there's documentation here for you so it tells you hey get computer Choice randomly selects between rock paper and scissors and returns that string for example if you call this function git computer Choice it will return Rock if you call it again it will probably return scissor okay so every single time it returns something different and it's a string and so now you have to actually based on this information you have to write this function get computer Choice okay and the hint that I'll give you is you'll be using choice that you got from random so remember when you did from random import choice so you'll be using Choice okay and if you want to like play around with python and see if you could get this function working which you could always do is you can just pop open the shell you could type in Python and then here let's zoom in a couple of more times you could see like super clearly so you could type in Python here and um then you could play with randoms you could say from random import Choice and then you could see how Choice works so choice you could give it an array and then you could see okay every time I give it this it picks a run number randomly okay great well what if I gave it strings like hello ah that works let's see if that works yeah eventually at some point it'll get the string hello okay great what if I gave it uh Rock here okay and I kept running this wow it gives me rock so then you could actually take this and see if you could convert this uh into into code for your app so you could go here and then you could actually say okay I know how to use Choice and then this time instead of giving choices of one two three I'll give a choice of rock paper scissors okay so get computer choice you should be able to do this and then at the end make sure you return so you should return Choice and then whatever is the array that you're going to give it okay so I'm gonna put in one two three but you're probably gonna put in something else right like rock paper scissors or something and then that would be essentially this computer Choice function would be done now if you want to test that your function is done here's what I want you to do if you want to actually test that you have written your function correctly you can go ahead and do print get computer choice and then pass in actually this won't take in any uh anything so it's like get computer underscore Choice like this okay and call the function just like that and it should return either rock or it should return scissor and it should do that as a string so if your function can do that then you know your function works so you could test it out a couple of times by hitting stop and start or command enter to restart your server and then you can actually also look here in the command line and it'll tell you it'll print out the result in the command in the console okay so that's how you would test it now you have another function here called calculate result and this will compare Player move and computer move and return the score accordingly so meaning here's a situation where a human would win if you call this function calculate result and you give it Rock and scissors it should return one why because player choice is the first positional argument and computer choice is second so if I give the player Rock and I give the computer scissors well who would win in that case the player right because rock beats scissor so then you get one point for that so human wins here's another condition second condition which is human loses well you flip that scissors and rock and the computer wins aka the human loses okay and then the human draws so you calculate result if you do rock rock you get zero so you understand now right how this function would work it'll take in this it'll compare them against each other and it'll give you a zero negative one or one and it'll return a number okay it'll return an integer so your job is to go into this function calculate result and your job is to basically fill out the body of the function now I've given you a lot of hints to make your life easy so for example here I tell you create a variable called score and set its value To None well you could go and do this then you'll need to write another line and maybe even multiple lines here it's like hey uh what are all the situations where a human draws well all this situations where a human draws are probably whenever the player choice and the computer choice is equal to themselves so basically it's like if player choice is the same as the computer Choice well then in that case what am I returning here I might be returning something right a 10 a 20. so you're gonna write this line of code I'm not giving you the right answer here right but you're going to return either a negative one a zero or a positive one so you have to figure that out but that's how you would write that first if statement they'll catch essentially all drawn situations all drawn situations are where it's the same then you're going to chain that with elseifs of all of the situation where the humans human wins so it'll be where you know if a human picked um Rock and the computer picked scissors if the human picked paper and the computer picked Rock if the computer picked so you literally write out all the situations where the human would win and then you would write that in Python code right and then you would write down your else statement at the end which would be you know what happens if the human loses in that case set the thing to negative one and if you do this part correctly you could just simply do an else here you don't even have to really write any if else if uh type of conditions here okay so that is what is happening with this function so make sure that that's working correctly in order to test it call it on these terms and see if you get the same results that I'm getting here one negative one zero okay so give that a try so that'll be calculate result then the next function you're going to need to build after calculate result is um the next function that you're going to need to build okay let's go ahead and do this is going to be the get result function and what this should do is it should take in a string with the value of U when or you lose okay or it's a draw based on the score for example if I give it a 1 it should say you win if I give it a negative one it should say you lose and if I give it a zero it should say it's a draw so the logic for get result will be very similar to the logic for uh you know doing one of these previous functions like the calculate result one so that's going to be pretty similar so you should be you should be good to go there okay it's going to be very similar type of way you're going to do it you can have a score and then you know if that score is a one something should happen and if it's a zero something should happen if it's a negative one something should happen okay so that's what's happening with the get result it takes in a score and then it returns something okay to test it call get result on one you should get back you win call get result on negative one you should get back you lose call get result on zero you should get back it's a draw and then uh one of the last ones we're gonna do is end game and in here what you're going to need to do is what endgame does is resets every value in the database to its initial value okay so you're gonna go ahead and reset all of the database values that you have here so game start player score choices result you're gonna set them back to their initial States because well we're ending the game right end this slash end would run when you hit this button here so that's what we want to do here okay and then we want to pass that information to our front end so make sure that this all of this information here right now just hard code it to be false and zero and empty strings but you're going to need to pass in your own um your current state of the game from the database so for example it'll look more like DB game start for example and you're gonna basically do that for every single one player score will come from database choices will come from database result will come from database so it'll just put the database variables there that you're passing to the front end and then that should be good because then your front end needs that information and based on that information it goes and does things and keep the variable names the same here because if you change player score variable name or Choice as a result your front end will break because your front end is depending and it's attempting to look for those specific terms okay so for example it's looking for game start player underscores player underscore score uh choices result so it's looking for that specific piece of information okay so that's end um end is fairly straightforward and then we have the function play okay so this is going to be the entire logic of the game this will be the most difficult one to write for you but what this will do is it will change the game so in the start you'll have these notes okay so read all of these notes and try to do them yourself I won't explain every single line of these notes but basically you know it'll ask you to do things and then you just gotta try to do those things okay so for example this request.orgs thing might throw you off but how what we do here is if I'm playing this game if I want to retrieve that the player picked scissors or let's say the player picks Rock and I want to retrieve that from the URL I can in Python I could just do requests Dot orgs and I can say rock or sorry I could say choice so basically what I'm doing is I'm putting in that keyword argument right there of choice and it's going to actually return and spit that value back out to me so tell me that the player pick Rock for example okay so that's how you could do this and you could get back the player choice by doing request.org so I'm giving you that hint already on how to do it okay then you're going to generate a choice based on the computer you'll calculate the score of the players you'll update the result choices and player score in the database and then you'll send all of that data here and so all of these are going to be pulled from the actual database so all of this here will be coming in from the database okay so there you go it's a really big project I want to just make sure that I thoroughly walked you through it and covered every single detail that I could about it I'm gonna try to leave you to it take hours days however long you need to do this and then we'll get back together and go through it don't look at the solution until you have worked pretty hard okay this is the exercise I would say don't look at the solution until you've worked pretty hard and give it a really really strong try Okay um yeah and but don't be discouraged if you don't get this I don't expect you to get this right it's a massive project for you to do right now would be really difficult but it will push you and I want to just push you I'm hoping that you get the calculate result uh get computer Choice I'm hoping that you get those right okay you get you get some of these functions right two or three functions you get right even if you don't get the flask specific functions right or whatever right I'm happy if you do that so that would be a good place to start give this a try and then once you give it a solid solid try remember there's always a solution file that you could cross reference if you're completely stuck you could cross reference the solution file or which is right here behind my face um or just wait till pretty soon you and I are going to go through the solution together and we're going to build it out step by step okay so good luck enjoy go cry crush this click the link below right hit the replit fork it so you could work on it so do that right now and with that said I'll see you in a second and good freaking luck all right welcome back now we're gonna go through the rock paper scissors solution together I hope you gave it a try and you got close I know you might have spent hours you maybe might have even spent days um I just want to have you pat yourself on the back because that is powerful if you didn't get it that is okay that is totally what I expect you are a newbie in coding you're not supposed to get this but all I'm trying to do is challenge you and trying to get you to see the beauty of coding and trying to understand it bit by bit but also feel that pain and frustration that comes sometimes now let's go and do it together step by step and um yeah let's see if it makes sense okay I just want you to have fun that's your goal right now so let's go to our app and let's go through the solution I'm just gonna try to go through a little bit at a faster pace because I'm sure you've already taken a lot of time with it right already so let's go to um let's start with the simplest function first get computer choice this is very easy I'm gonna go ahead and say return and I'll call Choice which I'm importing from random right there okay and then I can simply just go ahead and say choice and give it a rock paper scissors okay um and I know that I need to uppercase it title case it like this because even in these documentations right here it tells me that it should say rock like that scissor like that so that's already telling me how I need to get this right this will basically get the computer Choice okay that's how we're going to get the computer Choice okay now I'm going to work on another function so if I want to test this function I'll just probably call and do this get computer choice and let's just run this and see if it I'll restart my server and let's see if it works get computer choice you can see it says Rock so that's a really great sign let's run it again and you can see it says scissors so literally it set it in the same exact order that it says here right so I know and scissors let's make it plural my bad okay so I know that it's it's you know um I know it's working okay I know my function computer choices work because I'll remove that print statement so we're good with computer Choice that's uh right that's a correct correct one now the next one I got is calculate result so I'll just follow the comments and everything that's there without even really going crazy so I'll set the score to none and then all situations where a human draws well this is if human uh if player choice right I have this argument this has two arguments so I know that if player choice is the same as the computer choice well then we're just going to set the score to zero okay so this is like a drawn situation all situations where a human wins so now we'll chain all of this with else ifs because it even tells you to chain him with else if so I'll say else if player choice uh equals equals Rock okay so the player can win with three different ones right so here what are the three wins that a player could have well the player could win with rock the player could win with paper and the player could win with scissors those were the only three times where the player could win so these will take care of all the situations and rock can only beat one opponent and paper could only beat one opponent scissors could only beat one opponent opponent meaning scissors can only beat paper paper can only beat rock rock can only beat scissors so I know that I'm just gonna have one uh line of code is essentially gonna take care of this and another one that's going to take care of this another so it should be like three else ifs essentially so if player choice is Rock and and um or actually I can say and like this and computer choice is what computer choice would have to be losing choice we're gonna go ahead and say return or score is equal to one so this isn't a situational human wins I'm going to copy paste this here okay now it's the second choice if player choice is paper and computer choice is Rock player wins okay what's the third situation where the cleric will win if the player chooses scissors and the computer picks paper right so now we officially have all the situations where the player would win so we're done with this part now it's a little ding right there okay and now we have else otherwise human loses so I could just say else score is negative one this is the only other case lost if we've accounted for all the drawing situations and we have accounted for all the winning situations the only other situation that's left is um if the human loses right that's the only situation left and at the end we're just going to return score so this function now is complete now you should go ahead and test it obviously and write print statements to test it I won't because I'm very very sure that it's good okay but you should give it a try and I'm also doing this so we can keep the pace of it uh smoother all right now we gotta work on another function called get result well how does this work so get result returns a string with the value of you win you lose or it's a draw based on the score okay so if I call get result on one I get you when if I call it on negative one I get you lose otherwise I'll draw okay that should be simple enough right I could say um if score is equal to one return you win right elsif score is equal to zero or negative one return you lose and else okay else returned it's uh and let's put double quotes here it's a draw the reason why I'm putting double quotes is if we use single quotes it would be confused because it would think that the string starts here and it ends here but that's not what's happening right we have a string starting here and ending here so putting double quotes So then it knows that this is an apostrophe and not a string ending okay so that's it for my get results so I'm done with my get result okay that's good now my end game well what I need to do is I need to reset all the variables right that's what it told me so I'm going to go ahead and do just that so I'm going to say DB game start I'm going to set it to false okay um DB player score I'm going to set it to zero DB choices I'm going to set that to empty string and DB result I'm going to set that to an empty string as well okay and then I need to pass all of those to my front end okay so this is the part that I've told you is going to be a little bit tricky so boom right there boom right there we're only passing only database stuff to the front end okay that goes there cool so now our end game function so whenever we hit end game our end game function will run right and then all of this will happen and then it'll send that over and once I send it over index.html will render all of that out on the screen okay so now our end game is done and then all we have left at this point is really um really just a few ones so this one needs all the database information so this one is very very easy just like the last one let's just finish this there isn't even really any code you need to write here like any extra code we're just sending the database variables here to index which is our home page so let's just get index done okay the result and then we'll set it to this okay and then the last one that I I really got to do is I want to be able to change the state of game um I need to change the state of game start in the database to true so for example once you hit play well now the game has begun so game start will change from false and it'll now become true so we're gonna go here and I'll say I'm just gonna yep perfect that's great I'm good here I'll do game start and I'll set that to True okay so I'm good with that now the next thing I need to do is get the human Choice from URL arguments and save humans in a choice in a variable okay so we're gonna call it um we're gonna just say player choice and we're gonna set it to this because that is getting us the player choice uh from the URL okay so that's what's happening there player choice and next up what I want to do here is I want to generate a choice based on behalf of the computer and then save it in a variable so here I'm going to be leveraging the functions that I've created earlier so I'm going to say computer choice is equal to get computer choice so now I'm leveraging this function that I created earlier then we're going to calculate score of the player versus computer choice so now I can do uh get the score from the database so I can say result and I can set it to the database so now I can do get result and then I can give it the score okay and if we want to get the score let's actually get the score first so let's let's calculate the score first so we're going to go ahead and say score and I'll say calculate result and we'll give it a player choice and computer choice because now we have the player choice and we have the computer choice right so this is coming from the URL you know with whatever the user is clicking um and then this computer choice is being uh we're getting this randomly okay and then we give this for calculate results function so if I go to our calculator result function it knows what to do and then it Returns the score so it either returns a negative one a positive one or whatever right so if I go to our thing I know that this is either going to be a negative one or a zero or a one okay so that's what the score is doing then what I'm going to do once I get that score is I'm going to increment the result in my database by plus equals um or sorry actually I want to set the result in my database to whatever the result was of the most recent game okay so score and I'll get result and get result either says you win you lose or you draw or as a draw okay so that's what writes out for example in the solution version that's the function that's gonna do it's the draw it's a draw part or it's a win part or whatever that's how we're figuring that out and then score is the function how we're uh score in the database is how we're keeping track of this two and three and then it turns to four Etc so let's go back here to our app and then I'm going to get the uh set the choices key to a string and this is going to be a string that's going to say it's going to be a string formatting here and we're just going to go ahead and say player choice and we can make a human Emoji here man person okay so this will represent a human Choice and then I'll put this bot here robot and we'll this will represent the computer Choice okay and then we'll go player score we'll increment the player's score by the score that we just got for the game so if the human lost or if the player lost it'll decrement it by one if the player if it was a draw it'll just add zero which won't do anything and then if the player one then it'll be a plus one it'll increment it by plus one now I need to give the database values to our back end so we've done this before a few times so I'm just going to take this and put that uh for the result we're gonna give our front end choices so we're gonna put that right here we're gonna give our front and player score and we're going to give it game start so let's go ahead copy this right there and we're going to give it game start okay there we go and now at this point we should be pretty good actually the whole game should essentially be working so let's go ahead and hit command enter on this and I'm just going to open it up in a new tab and let's check it out boom look at that right paper versus rock you win let's go hit this scissors versus rock you lose right that was a one of the situations that we had Rock versus paper you lose huh interesting paper versus Rock so we pick paper computer pick Rock so that means we win and you can see that it's incrementing that uh result as well so if I keep winning it'll keep going up to a plus score or a zero score if I keep losing it'll keep decrementing down to a negative score and now watch what happens when I hit end boom everything is gone even if I refresh it's gone right not there so we are using a database and we're getting all of this to work right so there you go uh did not mean to put that there and get it out of here there we go there we go got it okay so there you go that is rock paper and scissors you went ahead and built it yourself now you even have a URL it's deployed online already so you could share this with your friends family anybody that you want um but overall I just really hope that you had a ton of fun building this you had a great time and don't be so hard on yourself if some of the stuff you didn't get or feel like it's kind of going over your head you know go through the rest of the course if you're not part of this course make sure you sign up for it below so you can you know be able to go through the entire course um because if you go through the whole course it'll make a lot more sense and if you just jump to this project here because that'll be a lot trickier right with that said I hope you enjoyed it this was a great project I had a lot of fun building it with you I hope the explanation and then the solution type of method worked well I spent a lot of time with my team building each you know exercise function in a way that's just awesome um but yeah I hope that worked for you I hope you enjoyed it with that said I love your beautiful face and uh I'm gonna see you soon let's keep going time to build another app with python and flask this one is going to be called a random dog generator because Isn't it nice when you click a button and you get a picture of a nice puppy that's what this is about and this app will have a lot of functionality for example this will have a database this will have the ability to track the users and the sessions and um yeah it'll have a leaderboard for who generated the most dogs and we'll do this in very few simple lines of code and so it's gonna be a lot of fun building it let's go ahead and demo this app so I can actually enter my name here so let's say I go qazi and I go login slash sign up it'll bring me to this page over here right this is the home page now it's telling me that my username is qazi it's uh it's telling me that this is my first login that's ever seen and it's also telling me that these are the total amount of dogs that were generated the entire you know website wide all users combined and then it tells me here who the users of this app are so we have these three users right here Kamikaze David test those are the three users of this app so far okay and then these are the dogs that were generated all right now if I go ahead and I hit refresh okay let's go ahead to this page and let's go ahead and hit get random dog there we go you can see that now I just got a brand new dog right here let's hit another another time get random dog boom I just got another dog and you can see this total number goes up and it's also tracking dogs that you have generated so it actually can keep track of every single user and all the dogs that they've generated so when you log in it'll keep track of your dogs but when you log out and you log into somebody else then it'll keep a track of that user's dogs right so I can keep clicking and you can see that I'm in the leaderboards right here now if I go ahead and I do more than nine I'll actually pass test okay so let's keep going let's keep going I just generated eight dogs let's go ahead and generate nine dogs and ten and Watch What Happens boom right when I did 10 you can actually see that I pass test and now I'm here all right so that leaderboard works perfectly you can detect my number of logins now let's say I log out right and then let's go ahead and I go quasi and I log back in it remembers that I've generated 10 dogs let's say I log out and I log in as a new user so let's just say I'll say um John let's enter and say you have generated zero dogs and number of logins is one now if I hit get random dog right the dog is generated and I can see it on the screen so a lot of concepts are covered here like for example being able to keep track of the session of the user meaning when I refresh it still knows that I'm John so the app is still running a database all of this information is actually stored in a database forever right so it says 45 when I refresh it will still say or if I generate a new dog obviously it'll go up to 46 so you could see how this app is working right like every single time I click this I get a brand new dog we have this little nice little spinning effect if you hover over it and all of this data over here from the leaderboards this of course is coming from a database as well where we're keeping track of all of the users and then it's showing that so you'll learn a database as well in here okay great now if you're watching this clip on YouTube you can just click the link in description below it'll take you to the exercise page of the app for the repository and you'll be able to use it if you're part of this python course that we're going through the mega Python course we'll link that below as well uh then just simply go down to where so in the python course right the best Python tutorial in the world if you keep scrolling down you'll see all the projects you'll see this counter project if you scroll down you'll see this YouTube app project that we've built and you'll see this random dog generator so you could go down here to random dog generator and there will be Three Links available for you one will be a project link so this is the link where you'll actually click and build your application uh the second link will be the live demo of the app and the third link will be the solution file so this only look at it if you really really really really really need to and you're stuck but this is like the solution so don't look at it right now okay but you could look at the live demo that should just get you to this page and you should be able to hit get random dog or if it doesn't see that you're a user in session you could just create a new user and keep clicking get random dog and it'll keep generating random docs for you right so it has apis as well because we're using an API to get these dogs all right so I want you to go ahead and click project okay and now that you've clicked project it should bring you to this page and if you're hitting it from your computer it might actually bring you to this page that asks you to fork okay then once it brings you to this page just go ahead and click four okay go ahead and click Fork like this and it'll ask you to create an account create an account it's all free all right so uh nothing really to lose there and then just Forks can build off of it and since we're not building it from scratch we're giving you a couple of components and things that you'll need like HTML and whatever you know it'll be wiser for you to Fork this will make your life a lot easier all right so I'm gonna go ahead and Fork this with you as well so I'm going to go ahead and Fork this and you can call it whatever you want I'll call my Fork instructor because well I'm your instructor okay so that's what I'm going to be calling it that way feel free to call it whatever you want right as long as you can find it easily and and do whatever you need to do okay so here we go all right now that you've forked everything and renamed everything once I run it you should see this page over here okay this guy right here so this basically means your app is you know running it's not fully built yet right so for example you have this front end but let's say I log in hit login and sign up it doesn't work if I hit get random dog it does not get me a new dog if I hit you know let's say I hit log out it won't log me out right and this data over here right now is dummy data meaning it's not dynamically changing or anything like that it's just hard coded in here okay so right now in the current state this app is broken okay but all the front end is there why is the front end there is so you don't have to spend because it's a python course and we want to keep the concepts focused to Python and flask and we don't want to focus the concepts on web development necessarily so let's go ahead to um yeah we want to just keep the concepts Focus to like python web development and flask web development not necessarily HTML and CSS and The Styling part okay so great so this is where we're at now if we want to connect these buttons right like a get random dog button so it actually gets a random dog well what we need to do if you remember is what and some of these things if you want to give them a try you should actually pause the video and give those things a try because that's how you will learn if you just keep watching me doing all of this it's gonna be not like the most helpful way for you to learn okay so I urge you to keep pausing the video at times and giving things a try now some things are new Concepts but like connecting this get random dog Button uh to a path where when you click it right once you click it it takes you to just get dog route is as simple as creating a route inside a flask and so you've seen us do that with python multiple times at this point so I want you to give that a try on your own okay I'll give you five seconds to pause the video five four three two one all right now the URL now I'll we'll do it together if you if you didn't pause it or whatever or if you've tried it great so let's go ahead and do this together so the URL said get dog so I'm just going to go ahead and I'm gonna create get dog and dog function and I'm just gonna say uh let's go ahead and say uh return dog page okay just just let's just do that for now let's go ahead and hit command enter I'll go hit refresh here okay and then we'll hit get random dog okay and there you go you can go ahead and see that the dog page is now showing up okay so like that part is connected now what I want to happen is I don't necessarily want a entirely new page to come up um what I want to happen when I hit this get random dog is this same page to render okay the same page to render just with new data though this time so let's just walk through some of the other pieces of code that we have in here just so you can fully understand what we have so this is a basic flask app so far okay and we're rendering index.html okay so index.html is right here and this is already all created for you okay so this is the HTML and the CSS part that you don't really have to do okay this is all created for you now if I go back here and this components is also created for you as well it's a card component that we created so you don't have to create this and then the styling is all done so that's that's the stuff that's all already there okay now let's go back and inside of here we're we're getting the dog but now what we need to do is still return the same page okay so what I'm going to say instead is I'm just going to say render template and I'm just going to pass in this guy right here I'm going to say index.html okay and all we need is information about a dog so let's just say we had a dog uh image okay let's let's just say we had a dog image and this image was let's just go to Google and let's get a dog image okay so there we that looks like a really cute dog all right we're going to go ahead and copy image address and I'm just going to paste that image address in there okay so this is a dog image now to my front end I can send this information okay so I can go ahead and I can say dog image it's equal to dog image okay now what this means is I am sending this information so it's available inside of my index.html okay that's what I'm doing here and this variable here that I'm creating we will have access to it in the index.html okay so in my index.html what I could do is this is where the dog image it's already telling me that this is where the dog image is supposed to go okay so this is where I'm going to go ahead and put my dog image I'm going to create an image tag and these notes are telling me exactly how to create it and I'm going to say my source in this case is the dog image okay so I'll put double quotes this and I'll say dog image just like that and we'll give it a width of 200 and we'll give it a height of 200 as well okay and then let's give that a try let's go back okay so let's give all of this a try so I'll hit command enter and we'll go here I'll refresh and right now I don't see anything dog related right but let's hit get random dog and let's see what happens and right when I click get random dog our dog shows up okay and this stock shows up and that dog we already have like readymade you know ready to go and that dog shows up right away so uh so far so good right like so far so good when I run this get random dog when I when I click it initially right it shows me the dog right away so that means our app is working I can restart the server obviously we can go back to our app and we refresh and we're seeing the dog because I'm already on that route get dog but let's say I go back to the home page and you see I see no dog but right when I click get random dog it shows up okay now this styling and where the spinning and everything is coming from we've already created a CSS styling for you where when you add an image we make um we make stuff happen to that image okay so we'll make it so that image will either spin or look a certain way or fit a certain way Etc so all of that is done right dog hover uh that's what's doing that hover effect okay but I don't want you to worry about the what's inside of that Styles file okay so we're putting this in this div with the dog okay so now my dog image is showing up let's go back here but what I need to do is I need to now actually get the dog data okay so let's go ahead and dog image API so let's find dog image API there is dog.ceo and what this does is this will get you a random dog every single time you click it okay so if you hit fetch over here zoom in more okay and the URL is there if you need to go to a dog.ceo dog API okay and if you hit fetch it will just get a random dog for you okay and it will return it to you in in Python this would be a dictionary that has two keys message and status and then those keys have these values so the key we care about the most is the key called message and that's really the URL I don't know why it calls message it should be called the URL okay and every time I run this it creates a new URL and then it shows that image right and that's the image that we need okay that's the image we need access to so I'm going to go ahead and I will copy this that's what we need okay and we're gonna make a request so if you remember we're gonna go ahead and do import requests which is a library and we're going to go ahead and do request.get we'll put this dog image in there we'll say response is equal to that and then I'll say data is equal to response.json and then let's go ahead and print um print that data over here so I'm going to go ahead and rerun this and let's see if we get any errors or what happens and did I get any data okay I didn't get any data yet but maybe once I click the get random dog I might actually get what I'm looking for so here's what I'm going to do I'm going to make this like this and I'm going to take our app and I'm gonna put it like one thirds here and I'm gonna make our coding editor twothirds so I can just see this here the whole time now let's go ahead and let's see what happens when I hit get random dogs I'll make myself a little bit smaller here and let's watch what happens I'll hit get random dog and right when I hit that you'll notice that I actually got a bunch of data back and I can actually see I got this URL I got the message dictionary and then it tells me here's the URL for the dog and if I command click it it'll open in a new tab and I can actually even see the image of the dog okay so that means that that's clearly working so now all we need to do to get that out is we need to just say data and we need to get the data message and that will just get us the URL without necessarily getting us the entire dictionary okay so let's hit command enter always make sure to restart your server otherwise your changes won't show up okay and in this app on the right hand side I'm going to go ahead and hit get random dog just like that okay and you could see I got back just the URL right here just the URL okay all right now that I'm getting the URL I know that I can just send that image back to my backend and I'll just print it out so let's go ahead and remove this I will say uh this is the dog image and boom it's that's already plugged in so we're giving it the dog image okay and we don't need this dog image variable here anymore the hardcoded one and uh that's essentially it so we're giving the dog image to our front end our front end already knows how to render it right over here okay so let's go ahead and command enter command enter will restart our server you could always also stop and start again so either way should work and now I'll hit get random dog and there we go we just got a random dog let's click it again I got another dog let's click it again I got another dog beautiful now that is working perfectly but what isn't working perfectly is I need to find out a total dogs generated so every single time a user clicks any user clicks I don't care who any single time a request is made by clicking this get random dog a get request is made to our get dog route or get dog function I need to store that in a database and say hey somebody requested a dog which means a new dog image was generated so if I want to do that I need to actually have a number in my database and I need to increment that number in my database so you should actually give that a try see if you could pause the video here and you could get the number from the database okay or you could create the database with replit and try to right and just so you have a hint from replit import DB okay so that should get you the entire database and then the database all it is is it's just a empty dictionary so to use it is very very easy okay that's what DB is it's empty dictionary when when it starts and to use it is very easy if you want to create a new key you could just say total dogs generated or whatever right then um that will just be the key okay total dogs generated and you could set it equal to one and now set it to one or you could increment it by one so see if you could do total dogs generated and make it so in the get doc function it increments it by one make it so you pass that information to your front end and make it so that your front end actually shows that information out here if I go to our index.html file you can already see you have this card Emoji with total dogs all you have to do is pass it data okay where it says zero you need to just pass it a number so what you're going to do once you have your number is you could just do something like you know dogs generated something like that and once you do that everything will already automatically be handled for you okay because this card component knows what to do it just needs three pieces of information and once you give it to it it'll make a card for you okay great so let's go back to here I want you to take five seconds to pause the video and then we'll do this together five four three two one all right let's go ahead and do it together now okay I hope you gave it a try and hopefully you made some progress and even if you didn't get it don't worry because this is you know this is going to be a tricky task and we'll do this together all right so from replit I'm already getting access to my database and so now what I want to do is I want to go here and um just increment my database by one so increment okay so I want to say total dogs generated by one okay but here's the here's the tricky thing right it's possible that total dogs generated might not be um might not be uh created yet as a key so if I'm incrementing a key that has not been created I'm going to get an error so a simple hack I like to do which we did in our last app as well is is uh I will just say if dot total dogs generated not in DB then simply go ahead and set that key total dogs generated to be zero okay so now that we initialize it so we will initialize it but anytime our app runs if this key has not already been created okay once we do that we can increment it by one so that's not a problem and we'll just send that information back okay so we'll go ahead and say uh dogs generated equals DB total dogs generated okay so now we're using the information from the database and storing it in a variable called dogs generated okay or we we could say total dogs generated as well okay um yeah this is fine dogs generate is fine that way it's not too long and doesn't run across multiple lines so it's easier this way okay so I think we're good on this now let's go to our let's go to our front end now so I'll go to our index.html and inside of our index.html let's go ahead and add it so here where it says total dogs I'm just going to go ahead and change that with total dogs generated and let's see if that works let's go ahead and hit refresh okay we got an error let's see if we can put this in quotes and if we will still get an error if we put it in quotes let's try it oh I have to close this out let's give this a try let's refresh our app all right so this is not what we want right it says it it literally says the the ginger templating so that's not what we want so we're gonna remove that ah actually since this is already python because it's in these two squigglies it's Ginger is what they call it but it's flask calls it I could actually just write the variable name here and I can just say total dogs generated because I have access to that already so let's go here and let's refresh okay great um let's see why it's not showing it is it giving us an error so let's just dissect this one at a time so I'm going to go back to our main.py and let's go ahead and hit print and we'll see total dogs generated and let's see what it tells us for total dogs generated um seems like it's not actually giving us oh yes okay okay okay okay okay okay so the problem that's happening is we need to go to this path get a random dog that's why this will only run when we go ahead and say get random uh dog okay when we click that button click this button right here so let's go ahead and click that button get random dog okay and interesting it still says total dog to zero let's hit it again set it again all right and let's see what our ah dogs generated so let's go back to our index.html and we're gonna call this dogs generated here okay so we were also giving it the wrong variable name so that's what also caused the problem so let's run this now and let's hit get random dog okay and now we can see that total of seven dogs are showing up and then eight dogs and nine dogs and ten dogs but watch what happens when I go to our home page it says nothing is showing up right so what we want to do is in our home page we want to also pass this information okay so what I'm gonna do is let's go here and think about how you can pass dogs generated to also your home page okay so I'll give you five seconds to try and figure that out you should be able to figure that out and it's it should be pretty easy okay so I'll give you five seconds to pause and try it yourself five four three two one all right let's do it together now so it's very simple I'm just going to copy this line because I already have access to the database and I'm just going to do the same thing docs generated is these total dogs generated and let's run this now when I hit refresh it'll show this even on our home page as you can see the URL is the home pages URL okay great so that problem is now solved when I say get random dog every single time and I'll increment this by one and that's already working that is so cool okay now what we need to do is we okay we're Gucci with this right but now our problem is different our problem is this how come when I go to the home page it doesn't show me a dog why is the link broken well because if you look at the home page we're not passing any information about the dog image so when we go here and it's saying uh where did we put the dog image let's see yeah we put the dog image right over here right well this variable dog image is actually not defined so when it's not defined it has no idea what to show so it just doesn't show anything so what we're going to do is how about this whenever we get how about this right so whenever on the client side so our client side somebody makes a request to get the dog so we give them a image of a dog okay this is a dog my drawing is terrible then what we could do is we could actually store that inside of our database okay store that inside of our database and we could store that last dog right the most recent dock that they clicked and then since this is in our database now our back end our server side will have access to this okay it will have access to this if you don't have it stored in the database then there's no way that our server side will actually have access to it because it's not stored anywhere it's just gone that image is just gone so that's the solution that I suggest we use okay it's going to be a simple one and so what we can say here is we'll go ahead and create a new key inside of our dictionary and we'll say last image okay or we can call it last dog and that will be this dog image right here okay that's going to be the last or the most recent dog that we got okay and uh yeah and so that's then since it's in our database Now everywhere inside of our app will have access to it okay and we're just going to write that line for that one too so we're just going to say hey if oh uh last dog last dog is not in the database then I want you to just create it but uh give it an empty string okay so just set it to set it to nothing like no dog so that's what we're gonna do and then let's go ahead and pass this so let's go here and I'm gonna say last dog okay or we can just say dog image is equal to database last dog okay so that's the last dog that the user got right so let's run this now and let's take a look at our app I'll refresh this so now our home page will get the last doc from our database since we didn't have a dog in our database yet you can see that it's empty but let's say I now do get random dog that's the dog that it is stored in our database now watch what happens when I go to the Home Route and we run this we're now still going to see a picture of that dog because that was the last dog that the user got got stored in our database and then we're just outputting it okay so now we're done with the functionality of uh you know being able to ask for a dog and then being able to show the dog on on either to get dog route or the home page route let's also just add a little bit of Border radius to the dog so he looks nicer so again we're not going to be doing too much CSS but this is pretty much um all we're going to tune this is really simple okay so let's go ahead here I'm going to say style and we'll add a little border radius here so I'll just say border radius and we'll give it a 10 percent that should be good and let's refresh here and let's see what it looks like there we go so we got the Border radius so the image looks just a lot cleaner right just to we didn't even have to add too much border radius just that alone should be good all right so at this point of the app all of the global data parts of this app are now completed meaning uh the total dogs is like this global data part of the app that's completed and being able to get this dog on when you click get random dog that part is completed so like the surface level functionality you know or the global app functionality is completed but the entire main functionality of this app actually lies in userspecific information okay so this part is not completed yet that part is not completed yet this part is not completed yet being able to sign up with the new user has not completed yet being able to log out is not completed yet and then showing those specific users and everything is not completed yet right so there's a bunch of functionality that we need to add and all of that functionality is user specific okay it's user authenticated in other words so it's like if that user is not authenticated uh this stuff will not work okay so let's go ahead and add uh stuff in about the user so I'll show you something you can actually uh first of all actually let's do this let's make it so when somebody types in their username and hits login we actually get access to that data okay so let me go ahead here and let's type in a name so I'll just say Kamikaze or I'll say Kazi right and we'll hit login here you can see it says method not allowed and this method is not allowed for the requested URL now let me show you something here because this is going to be an important thing to understand so if I go ahead and I hit inspect and I go into Network okay and make sure that you've chosen all in this case and let's go ahead and hit click a certain page okay so let's close this for a second and I'll hit get random dog all right now let's go ahead and hit inspect and go to network and um just go ahead and do get random dog again or just refresh the page while you're on this URL that says get dog and you can see we're actually making a uh we're actually making a request get dog okay so you could see right over here it says get dog and let me see if I can actually make this a little bit bigger so you could see it okay there we go um and you have you could see that we may get dog and you can see the request method here is a get request method status 200 is means everything is good it's clear it's working and made that request this was the request URL and then it knows as a result of that request there was also a response okay you click this response right here I'll show you like what happened as a result and it popped in that image right and that's what happened this is obviously what the page would look like if it didn't have any styling okay so you could see that that's the that's the response we're getting okay now if I go ahead into this username um and the next one Watch What Happens okay so this is this is how a get request looks like okay we're doing a get request on this now when we're sending data through a form like here if I'm writing cozy and I'm trying to send the data through a form this will not happen from a get request get request is only so you can retrieve information but if you want to send information then you use something called a post request okay so this will get info okay this will send info okay so what what do I mean when I hit get random dog I want to get a dog so I make a get request but when I want to set when I want to sign up a new user I'm getting the data from the user the user is sending that data so that's going to be a post request to our back end okay and watch this when I go ahead and click um login sign up it's going to take me to this page it says method not allowed okay now let's go ahead and hit inspect and let's go to network again okay and let's refresh this exact same page and you will see I get this 405 error right here and this will be all red so let's click this and it's saying hey the request method was a post the status code with a 405 meaning like not found or error basically okay so 405 this is so it's a method not a loud error that's usually what that means I believe and it happened at this URL okay so now we need to think about well you know what the heck happened and you know how how do we uh stop this from happening now you might be asking the question well how come one button get random dog sends a get request but clicking the login sign up button sends a post request how come they are sending different requests like how come this is get and then this uh this button right here is post how's that happening well the answer lies in the HTML part of the code so if I look here and we find this login button so I'm going to hit uh get random dog so this button here right we're passing the action slash get dog by default the method that's being used whenever this is a situation uh is that it's a it's a get request so here this is a get request that's happening okay that's the default Behavior over here where we're saying login slash sign up right over here if you actually look at the form the action is route to the home page but the method is actually post okay so the method is a post request that's what's triggering it so in other words I could actually take this here and say method is equal to get and it wouldn't really change anything because by default if you don't write this this line is already there okay so having this or this is the same exact thing but I'll just leave it there so it's you know you could cross compare it so here we have in this login form we have the username placeholder thingy and then we have the button so you could actually click that button and then you know since it's a post request it has the ability to send the data over to our server now here's how we retrieve this data so when we go here to our main.py let's go here to our app route now that method it said is not allowed right so we want to do is we can send in methods and we want to say you we should allow the get method and this route will actually allow the post method now let's run this app and let's click login and sign up and let's just see what happens and what's the error it gives us so when I did that watch what happened it didn't give us an error this time right let's click it again log in and sign up no error so what did it do well it detect it said that this method is loud and then it just went ahead and rendered the home page okay but since we have a post request happening we want specific things to happen we want to be able to retrieve the data that the user just gave us so what I can actually do is I can say if request and request this is global uh variable that all of the flask app has access to and so if you run it inside of a like a route here and you do requests you'll get access to things like what the user passed in as you know query parameters or what the user passed in through a form you can access all of that and so we can also detect methods so if request method is equal to post then I want to say print you clicked the login slash sign up button okay so let's just go ahead and try that so I'll command enter so our server restarts and takes changes I will open this up so I can see everything being printed out and then we'll run this ah request is not defined so we want to do is we want to grab requests from flask so let's go ahead and grab request okay let's hit command enter restart our server here okay let's go back and now we shouldn't have any errors coming up now if I hit log in and sign up you could see if I click it you could see over here it said you click the login sign up button right over there okay you click the login sign up button okay so that means I'm detecting The Click happening now I need to actually get the user form so I can actually say print request dot form and we can ask it for the username okay and we're going to say user underscore name now where is this username thing coming from this has to do with our front end so if we go here we said that this input is going to have the name of user underscore name so if we want to pull the value out of this we need to make sure that in our back end we also say user underscore name just like this okay so now let's go ahead and open this up and we'll run this hit command enter to run it and then we'll type in a user here okay so let's go ahead and say quasi and I'll say log in and sign up and you could see that it's pulling the data from The Forum now so we can actually now get input from the users right that is awesome so now I can see it can say okay you click the sign up button and it says cozy over here okay so this is a really good sign it means we have made a ton of progress all right now that we're getting the user what we could do is we could actually store that session so I'm gonna go here I'm just going to comma session I'm going to import uh also get access to each session inside of flask and sessions are kind of like cookies to store data about the user okay and now in the session I can just go ahead and say session user okay or username whatever you want to say and I'm gonna go ahead and do this say username is equal to whatever the user puts in the form okay so if the user makes a post request and submits this form whatever user the name they put in that becomes your username and then restore that inside of our session okay so that becomes a username we store that inside of the session Okay now what's cool about session is our app has Global access to this session thing which means that I can actually go to our index.html here and just call session without even needing to pass session through um through my template okay so let's go to index.html and here where I was passing the word cozy instead I'm just going to go ahead and say session user just like that okay so let's go back and let's rerun this app so I'm going to hit command enter okay so we restart the server and let's go ahead and try saying my name is David and let's see if this changes over here so I'll say David okay we got an error ah so whenever we're setting sessions we need a secret key okay our app will need a secret key so we'll just go ahead and set it up if you're getting this app you should already have the secret key set up for you and some other variables in there but I'm going to be writing this from scratch so you could just understand better what's going on so basically here I'm gonna go ahead and set my secret key okay so I'm gonna say app dot secret key and I'm going to say very bad secret key okay if you want to use actual secret Keys what I recommend is Rebel it has something called environment variables so you could store a secret key there and then you could retrieve it from here okay and they have docs too if you want to go see how to use sensitive information and they have OS dot Environ right and then you can actually type in whatever password you wrote so that would be a pretty good way to keep it secret and as a matter of fact we could actually even do that right here so I could say OS dot Environ okay and if we look at the docs the docs tell us to do this right the docs tell us call this function and then uh or not sorry to call this function it's a dictionary so index it and then I'm just going to say flask key okay I'll say flask Secret key I guess we'll say that and then here I'm just going to put very bad secret key okay that's it and I'll add this as a new Secret flask secret key now if you're gonna store a secret key do it like that that'll store it safely that way anybody viewing your code will not actually know what your secret key is so you could actually keep it hidden rapplet makes this very very easy for you but yeah right now we're just doing dummy data stuff so that's why we don't need to have put like a actual you know 64bit or you know 256 bit Shaw hash cryptographic secret key we could just put a pretty bad key and we'll be fine all right and then what I want to do is I'm going to do app.config and I want to say session so since replit has an iframe that they're using here sometimes cookies don't work properly so if we go ahead and do session cookie same site that'll solve that problem okay none and then we're going to go ahead here and I'm going to say I have a cookie config so this session cookie secure and we'll say true okay and that's done this these lines are not even really necessary this is just so in the replit iframe if you're running your app it works the main thing was just setting the secret key here okay without this you can't have sessions so let's hit command enter let's refresh our app and let's see what happens okay I think we got an error let's see what's the error we got so it says OS is not defined so let's go ahead and Define that and at the top here we can just go ahead and import OS just like that okay so let's run this and let's see what the error is now okay now it says app is not defined okay no problem so we're going to go ahead here and put that as one of the first lines of the code okay and now we shouldn't be having errors great let's go ahead and refresh this there we go you could see it says David okay now let's go ahead and change it to Cozy and if I hit login sign up you can see it says cozy and let's go ahead and say ninja and I'll hit enter and now you see Ninja here okay and there's something deeper that's happening okay so for example if I refresh let's say I go ahead to this link and I just refresh right if I do that the name is still there if I hit get random dog the name is actually still there what the hell is happening how are we making this happen the secret lies in what's what happens if you hit inspect and you go to application here okay and inside of application you'll see we have session storage and we have cookies okay so let's go ahead into our session into our cookies here okay and inside of our cookies we can see that we have this session okay this session is storing all of the value okay this inside of this session is where we're storing our user and everything so as long as you have access to that session right there you'll have access to everything that that session sees okay so if you store a key in there you'll have access to that session and let's see the expiry date over here okay it's kind of like cookies okay uh the expire it pretty much never expires okay it runs for a really long time so that means even if you refresh you'll you should still see this as long as your session is up okay and I believe until you close out your Chrome browser or something like that or your Safari or whatever you're using and you come back so that's what it's where it's stored it's stored in like a local storage cookies uh inside of your browser and that's how it actually stays there even after some time okay so that's why we used um that's why we use sessions there all right now that the user is signing in and I'm able to retrieve that user's information what I'd actually like to do is store that user inside of my database and that way we could have a big database uh with you know so just imagine a giant dictionary with um every single user that's ever signed in okay and information about them so essentially how I would want my users to look like is Imagine This I imagine I had users and they would be it would be a list of dictionaries so like this okay and then each of those users would have some information about them so for example I'll have their username uh they would have you know so let's say qazi they would have logins okay so that let's say that would be you know One login or whatever and then they would have they would have dogs generated okay so like the dogs that they generated and that might be you know five or whatever and we would have each dictionary here would represent the user so let's say David has like four logins right then we have another user and their name is Kevin and they have like 12 logins and then their dogs generated is like 27 or something right so this is how I want my users to look like and then I want to be able to Loop through the users and get you know get a user update a user change their record delete them whatever I want to do right so that's how I would want to do it I would want to have a list of users just like this and each dictionary representing a user now what I would want to do is I'm going to store this inside of a database okay I don't want to just store this in a dictionary because while that is nice um after I refresh all that information is just going to vanish and so I don't really want all my information to just vanish right that's not fun so let's go ahead and use a database so what I will say is in my database I'll create a collection called users okay and users will have um have some data okay and we want to add if we want to add a new user well how we would add a new user is we would actually go to our users okay and we will append a new user and when we append we'll need to essentially append a dictionary just like this okay so remember since this is a list I can call Dot append on it and so when I call an append I can add a user to it okay so if you're having trouble visualizing some of this don't worry let's open up our shell and let's just write some python code here so you can see what we're talking about okay so I will go like this and let's zoom in a little bit so you could see clearer okay so let's go ahead all right let's go ahead and say um let me zoom in more so it's even easier to read just like that okay now let's say I have a database okay and I'll make it an empty dictionary just like this now inside I did inside of that database I want to have a list of users so initially I'm just going to create it and we'll set it to this so now when I do DB you should see DB has users and it's empty so it's an empty collection right now now if I want to have access um you know users I want to add a user I could just go DB dot append right and then I can DB users if I do this it should give me back that empty list now if I want to append to that list I could just go a DOT append just like this and I can give it a user to a pen so I'll just give username qazi and then logins two and then we will say uh dogs generated I will say seven all right there we go now when I do DB users I will see that I have that user quasi in there okay now if I want to get information about the user I could go DB users and I could say you get me the zeroth user okay if we have multiple users get me the zeroth user so let's try adding more users so I will say I will also add David you can just hit up up on your keyboard and it should bring this up and I'll also add Kevin okay now when we do DB users Watch What Happens I get all of this data right here okay uh let me zoom out here and zoom here now as you can see better there we go okay so now that's what DB users returns to me right it's a list of users so if I call type on DB DB users you can see that it's a list so since it's a list I could even I could Loop through it I could also index it so I could go DB users and if I ask for the xeroth guy well that'll get most likely cozy now if I did DB users and I said zero you can see it's giving me Kevin okay if I go ahead and do one your your zero might be different than mine because my computer crashed and I had to redo this again so that was fun okay but uh yeah so but idea is that it should be giving you some users okay I'll do user three I ended up creating more users okay I I have like four total users right and so it'll it'll show you those users now if I want to grab a specific user and update one of their properties well what I could do is I could go ahead and do username and set that equal to uh let's just say a fire emoji okay so now if I print out DB users you could see that there's a user with the username of fire emoji uh just put quotes around if you if you do use an emoji make sure to put quotes around it but you could see that now we got a guy with the fire Emoji so that name has been changed okay so this is how it interface with it uh this is how I would you know add to it this is how I would uh update data inside of it Etc so keep these notes available for yourself because this information is going to be really valuable helpful and important um when we're creating our database okay all right now when we're creating our users we need to create that inside of our database okay so I'm going to go ahead and say DB users and when it's not initialized I need to just go ahead and initialize it so I'm just going to go ahead said if users not in DB then just go ahead and say DB users and set it to an empty list just like this okay so this is going to be the default state that we're going to have for this and then here I'm going to go ahead and say let's go down here so once the user signs in we're going to go ahead and say DB users and I'm simply going to append so we're going to append and we're going to append that user okay so when I think about that user well that user at this point is going to be you know their username is going to be uh the username they gave us because that's already stored here um and then we're gonna go ahead and check there logins and we're gonna so since it's a new user right so this is for a new new user okay we're going to set their logins to one and we will also set their dogs generated to zero because right now they haven't really generated any dogs they just signed up they haven't like hit get random dogs yet right that's all they have done so we're going to set that to zero and so in our users database now that user should be there okay but you're gonna see that we're gonna run into a problem pretty quick with this so let's go ahead and do command enter and I'm also going to open up our shell and inside of our Shell let's just clear all of this out I'll write python I'll hit delete at the top and I'll type in Python so you can see this okay and now let's go ahead and do from replit import DB so we get access to our database in this environment okay and if I show you the DB right now there shouldn't be much inside of it okay like let's go ahead and do DB dot keys so we can see all the keys that are there so right now there's only uh there's a last dot key there's a total dogs generated key and users key so let's go ahead and take a look at users okay and so far we don't really have um any users yet okay inside of our database and that's what we wanted now let's go ahead and create a new user so I'll say Kevin and I'll hit log in and sign up okay now this should be updated to Kevin here let's go ahead and run that line again and you can actually see that Kevin was added to the database that is very good so look at that we're already being able to add users to our database that is exciting let's go ahead and add cozy and let's see what happens I'll hit log in sign up let's go hit up and enter and now you can see we have two users so this is an observed list kind of ignore some of this Parts observe dick but all it is the list and this is a dictionary okay and then here in this dictionary here in this list here there's two items so let's see if we can um call length on this or maybe it doesn't allow us to call length let's see yep so we can see that there's two users in here okay and I can also just go ahead and do users of zero and it'll give me the first user which is Kevin and if I do a one it'll give me the second user which is qazi and yeah so I could see both of the users are there with all of their information logins is set to one doc generated is set to zero so that's good so far but here's the problem what happens if I sign up with Kazi again okay and this is case sensitive so let's say I sign up with Kazi again let's hit sign up and let's go and print out our database and you can see we got three users now what we got three users so what there's two causes you know our goal was to make sure that everybody has a unique username so if you sign in with the same username right in our in our final working app if you sign in with the same exact username so let's go ahead and do qazi here it will be a login okay and if you sign up with and it won't reset all your data it'll keep it at 11 52 all of that but if you sign in with a new username and you hit log in um you could see that it resets your data right login One log dogs you generated is one as well okay so let's go ahead leave this signed in okay and let's go back to our app that we were building Okay so huh why when I do quasi this is happening so what we want to do is we want to make sure that that doesn't happen so how do we do that well we need to actually I'm going to remove this because you don't need that anymore what I need to do is actually need to make sure of the following okay when a new user when a user signs up or logs in so basically when the user hits when user clicks this button right so when user clicks login sign up here's what needs to happen check if that user already exists okay that's step one and then two if that user already uh if and okay so let's say that that user exists okay so I'll put it under here if that user already exists then what we want to do is we're going to select that existing user okay we're not going to append anything we're just going to pull that user out of our list of users okay select this is from our list of users otherwise um if it's a new user if it is a new if the user does not exist already AKA new user so if it's a new user well then I want you to go ahead and append create and append that user to the database okay so this is really the logic that we're actually trying to do so we can't just like mindlessly put a new user without checking if that user already exists so what I want to go ahead and do is I want to check if user already exists okay so how do I check well look at this let's go ahead to our python rubble and here if I do DB users I get all these users here right so if I want to check for a specific user in here I can actually use filtering which is very powerful so let's say I'm looking for a user um you know let's say I'm looking for qazi okay what I could say is I could say get me the user for user in DB users okay so Loop through so this is the for Loops it's like Loop through every users and users okay and what I want you to do is only get them to me if users username is equal to cozy okay it's exactly equal to cos if that's the case then get that user for me so what it's going to do is going to filter this entire list and get me where the name is qazi so let's run this and now when I show this it's giving me two people but both of them have the name Causey in there so it's filtering it out okay in a normal list we would not have this other qazi in there the second quasi that we have we would not have then in a different database okay let's try this same thing for Kevin now so you should give this a try okay see if you could get Kevin here okay give that a try I'll give you five seconds to pause and try it five four three two one okay so we're just gonna go ahead and say so this is saying Loop through for the user and users if the user has Kevin inside of it then just give me that user object okay or give me that User Dictionary so let's go ahead and do this let's try to type in Kevin and you can see that list is being filtered out and we're only getting Kevin back so that's how we can actually check for a user okay so I'm gonna go ahead and pretty much copy paste that code okay and what we're going to do here is instead of a hardcoded Kevin here we're gonna put with the user we're gonna check for what the user just typed in as their username okay so that variable is already called username so we're going to take that variable and put that there instead of Kevin instead of hard coded Kevin so I'm going to say username just like that okay so um what will happen if it doesn't exist let's also go ahead and see that so let's look for a name that doesn't exist so I'm going to go and remove this and then just say Lance because Lance I know does not exist okay oh there's an indentation problem if somebody doesn't exist it's going to give you an empty list and if you call Bool on an empty list it's going to give you false okay so if a list is empty by default it's false and if a list has something in it like haha or something it's going to be true this is going to be helpful for our if then statement that we write here okay so we're going to say if uh the user exists that's what this is saying if the user exists then I want you to say for now I'll just say user already exists okay if not then I want you to go ahead and append the user okay and I'll say print uh new user okay and we'll put tada here and we'll put an exclamation mark here so it's easier to see it in our print statements let's hit command enter so these changes do take place okay and in our app here I'm going to say quasi and let's hit login slash sign up and you could see it says user already exists it's telling me right there okay let's go ahead and now type in Lance okay and it says you click the blah blah button new user and now you can see Lance is showing up here and now watch what happens if I hit Lance again and I do log in and sign up so now it's detecting it as a login there we go rather than a sign up okay so now it says user already exists it already knows that that's Lance Okay so um so yeah we're able to actually detect if the user exists now what happens if the user already exists well we don't really need to do much we just need to update their logins that's really it right so if a user who's already signed up logs in again and if we look at our main app we just need to increase increment their number of logins so how could we do that well we can go grab that user right so that's that user right here okay so let's go ahead and say so I can actually say user is equal to that and remove that colon from there and I can say if user so this will grab the user it'll either return an empty list or it will return a list with that user okay so we're going to say if user print user already exists and will actually print out information about the user by doing user of zero okay and then what we want to do is we want to grab that user's logins and we want to increment them by one okay so let's go ahead and paste the print statement after the login so we can see the new updated login so let's go ahead and hit command enter here and we'll open up this and we will now go ahead and type in Lance and I'll hit log in and sign up okay we got an error it says list indices must be integers or slices not string so let's see ah yes so we want to go ahead and say user uh user of zero right so the user that we found that specific user's logins we want to increment that by one okay so let's go ahead and give that a try so let's go ahead and open this up I will say Lance here and we will hit login okay and it says user already exists okay let's go ahead and type in Lance again all right so let's see what's happening here is it printing that out print user of zero yes it is and so you could see it's saying user already exists and then it prints out the users you could see the user initially was at two logins and then we print them out again and there are three logins and then there are four logins right so that means that the number of logins is incrementing correctly now to make our lives easier so we don't keep having to say user of zero what we could say is we could say user is the following user is um so we're going to redefine user here and I'm going to say it's user of zero if user exists if we found somebody and if not then we're just going to say user is none okay so it's either the first guy in the list that we get back here after we filter the list or if it's empty then we just return none so this user is either going to be uh a user like this with a username and blah blah blah blah blah blah blah okay so it's either going to be a dictionary or none okay like that so we can remove the zero here now and I can remove this zero here now too because I'm deconstructing the user from that list okay and let's run this and I will go ahead and say Lance here and we will hit login and sign up you can see it says user already exists logins five and it's working correctly okay great so there we go a lot of that functionality that we wanted to add is now you know pretty much completed it check if a user it checks if a user already exists if they do exist then it goes ahead and um and increments them right if they don't exist then it goes ahead and appends them okay so now what we could do is we could turn this into a nice little function so we don't always have to come to home and see this big giant definition which can look intimidating and honestly sometimes confusing so we could actually say Define create or update user okay and I'm going to Define this function all the way at the bottom so not here okay so let's go ahead all the way at the bottom here and I'm going to create a new function and it's going to just be called and this is going to be a regular function so it's not going to be a routing or anything like that we'll say create or update user I'll take in user and then the definition of this function it'll do this okay I'll copy that and I'll paste that in here okay and um indentation problems will happen so just go ahead backspace delete everything I'm doing yeah just backspace everything correctly okay backspace delete and then this else is going to be on this same level right there okay so I'm actually holding command and then I'm hitting delete on my Mac you could probably hold Ctrl and hit backspace or something on your windows and then hitting delete one more time to come here and then hit enter command delete delete enter command delete delete enter command delete delete enter command delete delete enter command delete delete enter there we go okay um so there you go okay so now we've created this function Creator update user and it will take in a username so we're going to go ahead and say user underscore name okay so this function if you just give it a username it will automatically know how to find that user and then once it finds that user it will either update their logins or it will create the new user inside of the database so that's what this function does create or update user so we're going to replace all of this code right here and delete it so now our functions everything should look very similar and we're just going to say create or update and give it the username and never have to worry about the logic anymore because the logic is already done okay so once the new user signs up then we create or update that user in our database that's it okay so let's go ahead and check if this is working correctly so I'm going to open up my python here let's go to shout let's run this and let's see if we're getting any errors or anything like that okay I'm not getting any errors let's go to our shell okay I will delete this right here and then we'll just say from ruplet import DB so I can take a look and then let's go ahead and create a new guy called cookie and we'll hit this and now I'll do DB users and um let's see if we find Cookie yep I see cookie with logins of one okay let's have cookie log in again and I'll do DB users and we could see cookie logins too okay so no problems there that worked perfectly so being able to create a new user works and updating an existing user works because you notice it didn't create another cookie it kept the same cookie guy and just incremented right so for example if I update Lance if I log in Lance Lance should update and not get created so if I do Lance login now when I run this you'll see Lance logins of six okay but if I do pants a new person and we do login and I do DB users you will see that pants here has a login of one so it's a new user that was created so the ability to create a new user is now working perfectly okay Creator update user and now that that functionality is working and we have that user inside of our database now we can actually start passing that user around that information we could actually pass it around and do stuff with it right so for example name I don't need to worry about because name I'm pulling straight up from the session but what I do need to pull from the session okay is not just the user but I need to pull more information about the user like their number of dogs okay or um the number of logins okay or the dogs that they've generated Etc so what I'm going to need access to is I'm going to need access to that specific User Dictionary okay that user object that stores all the information about them like their username docs generated Etc so this function here Creator update user I'm going to have it return something so I'm going to say return and I'm going to have it return the user okay so the user is either going to be the first guy or it's going to be none okay so I'm going to always get some type of user okay now what I can do is over here I can actually go user is equal to that because I know that this function is going to do its thing but then at the end of the day it's going to return a dictionary okay uh or it's going to return none for the user and that user I can pass it to my database or sorry my front end so I could pass that user to my front end and now my front end will have access to that user's information in terms of the dogs that that user has generated or that logins that that user has generated okay now the last thing that I want to do well let's actually make logins work first so let's go ahead and go here I'm going to go inside of my templates and we'll go to index.html and since I have access to that user what I can do where I have the number of logins I can actually just go ahead and give this one a try because you can actually figure out what to write here okay how will I get access to users logins so see if you could make this work all right I'll give you five seconds to pause to try it yourself five four three two one all right hopefully you'll give it a try and figure it out um I'm gonna go ahead and say user and logins okay since I already have access to that user so let's go back to our main.py I'll open it in a new tab here see if I could reverse this cool okay and then let's go ahead and hit command enter okay and now let's see if it shows us number of logins so I'm going to go ahead and do Lance and let's hit login look at that it's saying seven let's log in again let's run it run eight Wow Let's Do It Again login nine right now new person one you could see new person one doesn't have any logins because this is a brand new uh user okay it's a brand new user it doesn't have any logins right now okay so number of logins right now is zero and we don't even have to write zero okay so for logins we can actually do that same trick as well if we do want it to say zero you could probably just go ahead and say logins is user uh logins okay uh if user logins exists else is zero so this basically what we'll do what it will do is if the user has logins then it'll show the login and if the user doesn't have logins if this statement is false meaning that it they have zero logins it'll be false okay that's the cool part about python there's something called truthiness of a statement so 0 will evaluate to a false then it will just give zero okay so if I do this and we can also always go back here and just say um logins okay so I could run this and then let's refresh and there we go number of logins right now let's say I whoops that's not ours this is our app okay so let's go ahead and now refresh okay so this person has so let's create a new user I'll just say two uh okay so not not user login or not user logins check let's just check if the user exists okay so give me the logins if the user exists otherwise l0 that's better that's a better statement okay let's run this again okay and let's look at it okay let's create a new user I'll say three let's run okay and now you can see my username is three and my logins are zero so that's actually working correctly now or let's say uh Michael okay let's hit enter and you can see I'm Michael but my logins are zero okay so that takes care of that you know number or zero problem okay we could even create a template filter and then that could be you know a thing that gives us whether it's a number or zero okay we could do it that way uh we could certainly do it that way as well okay actually it should say zero without us doing any of this hacky stuff um the problem is I believe happening that we're not returning our user here after we create the new user so we shouldn't be returning none that's not right uh we should be returning a user so for example if a user exists well then we know that we can just send that user right that's easy because that'll already exists but if the user doesn't exist we want to create the new user right and then we need to set that as the new user so we can actually go ahead and say okay I don't I don't even need this uh here right now the statement here okay or yeah I do so we'll leave this user statement here that's fine and now we'll just redefine the user and we'll say user is equal to okay and then we'll find that user again in the database using the same exact trick right here okay so we'll find the user so we'll say user is equal to username but we'll find that specific user inside of the database okay after we create that user now we can find them right because we couldn't find them earlier so find the user if they exist obviously just increment their login but find the user if they don't exist append them then find them again from the database so we can actually have that specific user dictionary that we need access to okay and that's going to be the that's going to be the user okay and then we can just get the actual user right here um and then we can actually return that user okay or we can just run that same line again but in this case we know for a fact that since we just created that user looking up somebody with that specific username will return to somebody and we'll get the first item in that list by doing the zero right there and then we can just go ahead and say return user okay so now that problem will actually be solved so let's go back to index.html we can go ahead back to saying user logins okay let's restart the server by doing command enter control enter okay and let's create a new person and we will say Angela and let's run okay and there we go we shouldn't ever see Zero logins either by the way we should actually see One login because when she created a new sign up that is considered a login right so it should start her with one and then if I do Angela again it should put her at two Etc Okay so that part is now good now the next thing we want to do is you want to do some conditional rendering meaning if a user is not signed in AKA when the user is on this page you notice that I'm not seeing any of the other stuff right I'm not seeing the table I'm not seeing get random dog I'm not saying log out I'm not seeing a leaderboard I just see this enter your name okay that's all I'm seeing so but then once I log in successfully then I am seeing this entire page okay but then I'm not seeing this input here anymore okay so we want to make sure that we have that same functionality as well that technique is called conditional rendering meaning only render if this statement is true or else show this other thing so what we want to do here is let's think about what are the things that we need to hide if the user is logged in well if the user is logged in we need to hide a we need to hide all of this right there okay so what we're going to do is find that part so this is the form and this is where it says enter names all of this stuff here we need to hide once the user is logged in okay so I'm going to go ahead and say if session um if the session does not have a user okay meaning if there's no user logged in then show this otherwise don't show this so let's give this a try so if I'm logged in with Angela it should not show anymore once I restart the server fingers crossed let's see let's refresh obviously because we didn't do that okay and we can just go ahead and do this okay so now we have a different problem it says the variable user referenced before an assignment okay and to debug errors don't freak out let's just go ahead and see how to debug okay because that's another thing you'll need to learn so we can actually click right here user and it's telling me that it's something is happening on this line here so I'll go ahead and click this so it'll expand and it's saying the error is happening right here on line 43 and home you're referring to user but the user has not been actually defined okay so let's see what the problem is okay it says local variable user reference before assignment so to me when I'm looking at this that doesn't look to be true because I'm clearly assigning user here and then referencing it here but let's see if it says a different story when we go look at the code so let's go to our let's see if it's referring to anything here 's a reference before assignment let's go back up to our home ah so this user is only getting registered when it's a post request meaning when it is uh when we're submitting a form if you're just going to that page normally right the there's going to be no user when you're going to that page let's say uh you know by just refreshing and uh not doing a post request so what happens in that case so what we're going to say here is otherwise the user is just none okay so for example else uh we will say user is none okay so we don't have a user so that's what we're going to do for the user okay let's go ahead and hit enter now we shouldn't have an error happening anymore let's hit command enter as well here so we restart our server let's go here and refresh and let's see what happens what will happen hopefully it will do what we want it to do here we go we're seeing Angela we are logged in and notice that we're not seeing that form up there that used to say login username blah blah blah right now let's go ahead and set up our log out functionality so we're going to set up a route for logout so this should be pretty easy at this point because you know the pattern already right slash log out so we know that we're going to create a slash logout route and then we're going to write python code that corresponds to it so I'm going to say app.rout put at sign here and we're going to say log out and then we'll create our function log out and what that will do is set the session of the user to none okay that basically means that the user is logged out okay that's all we're going to do with this it's going to set the username to none basically okay that's all we're doing here and then we will just render our template okay render and now I can just basically go ahead and return um all of this stuff here so I can just put this return statement and I can say return render template index.html set the dog image well we won't have a dog image here in this case because we're sending you back essentially to a page that doesn't even really need it what we're going to have is dogs generated for log out and that's essentially it so let's go ahead and hit enter command enter to restart the server and now when I hit log out it will log me out and you won't see Angela here anymore so let's hit log out cool okay now we're getting a different error which is user is undefined okay and that error is happening where let's go ahead and take a look let's click it and it's saying that the error is happening right here where we're calling user logins it's like where the heck is user even coming from right so now we just need to figure that part out because if we're passing in none here right for the user then we should essentially have no user to pull login information from so here's the way we want to solve it we could actually solve this with conditional rendering all of this stuff here like all of these cards right and these buttons container if we get random dog or this button it says log out or this leaderboard all of this I don't even need to I don't I only need it to show up if the user is logged in I don't need it to show up anytime else so it's going to solve that problem here so we're going to say if session user meaning if the user is logged in then show all this stuff otherwise don't even bother showing this so I'm just going to finish wrapping this entire thing okay and uh so where did we start wrapping it right here wrapper let's see where that wrapper finishes finishes right here so we're going to go ahead and say end if there we go okay let's hit command enter so we restart our server and let's go to our app and let's go home page okay and you can see we're here and if I log out you can see that it brings me to this page it's just rendering only these components here but when I log in so let's say Angela and I hit enter boom Angela right there number of logins right there get random dog okay now we're getting a different error for user okay so now we're getting when I hit get random dog uh we're getting an error with the user so let's see what the problem is so let's go back because we know that we're logged in for sure so what's there here we're not actually grabbing the user and uh we're not uh basically when somebody clicks get dog we need to get our current logged in user right and then we need to pass that current logged in user uh here we should be able to actually pull that information from our session as well so we should be able to go user and then say session user if there's a user logged in that session could have access to it but let's go ahead ah but the problem with session is that we only have um yeah we we only have the username we don't necessarily have the login so let's actually just grab the user from the database so let's do this there's this piece of code that keeps repeating itself okay this guy right over here it repeats itself here and then it kind of repeats itself here it's kind of annoying so let's go ahead and refactor this because we're going to need to find here we're going to need to find that user that's logged in so we're gonna have to essentially repeat this code for the third time so let's not repeat that many times okay there's a principle called the dry principle and it stands for do not repeat do not repeat yourself okay in programming so we don't want to keep repeating ourselves okay so let's create a new function and this function will call it get user get user from database and this will take in a username okay and it will return that user now all it will do is this okay and what I'm going to say is I'm going to say this is the user and here we can just return return this okay so either return the user otherwise return none so now in order to get the user what I could actually do here is for the user I can actually just say hey get the user from the database based on the username so I can refactor that part of the code and then I can get rid of this don't need that and then here we need to repeat that same thing so just copy this paste it here because we need to repeat that process again so find the user in the start find the user if you create a new user and return that user so this function we've already needed to use it twice so it was already very helpful creating that and it simplifies our logic a lot okay and uh great now I'm gonna go up here and reuse this function here and I'm gonna say user is get user from database okay and then we're going to give it the username and the username here we could actually get that from the session if we want okay so we can definitely get that from the session so we need to actually check if the session actually exists okay so let's go up here and I'm going to check um you know we could put it at the top or the bottom I could even put it here so I could say if session okay so if there is an existing session with the user then what I want you to do is get that user from the database so get user from database based on the uh username so I'm going to pass in the username right here and then I also want you to get the dogs generated for that user so I'm going to go ahead and say user uh dogs generated and I'm going to say and there's a nice little trick that we could do so for example imagine if we did this right dogs generated and I did increment the dogs generated by plus equals one right that's what I would like to do but the problem is that there might be a case well actually in this case every user will have this docs generated I don't think we even need to worry about that I think we could just leave this with with dogs generator plus equals one and I think that should be fine okay and then once we do that we can actually so we're going to update that user's docs generated by plus one because obviously they just hit get dog and then we can actually pass that user back so I could say user user okay let's run this now and let's go here let's refresh our app and hopefully we won't have errors now okay so right now we have Angela and it says dogs generated or zero let's hit get random dog okay get random dog get random dog okay so we know that this button is working we know that it's getting us random dogs we know that the number of dogs is increasing we know that the user Angela is logged in but the dogs you generated is not changing why is that happening if I go here right why is that happening well the reason why dog generator is not showing up is because we haven't connected it yet to our front end so let's go to our index.html and here we've hardcoded zero so all we need to do here is I need to say user dogs generated just like that let's hit command enter let's come back here let's refresh okay and now when we actually do get random dog you could see that that is updating right get random dog boom there we go right all of it is updating now so if you're Angela you can refresh and come back and it'll still say nine dogs generated right if you log out and you log in as heavy it'll say that this is your first login ever and then you have zero deduction right it's all remember you if I log out and log back in as Angela you'll see that it remembers that too it's a 10 dogs generated number of logins four so it's showing each user their very own authenticated information which is very powerful right in in all of the apps that you see with Instagram or whatever you're only seeing your own data you're not seeing somebody else's posts you're not able to control somebody else's post you're not able to log somebody else out you can only log yourself out so even though we didn't have email and passwords this is still a very good mechanism to be able to see where you're at and what's actually happening now the only real functionality we have left is creating a leaderboard so we can actually see all these users and then we can actually like increment all these users right and um yeah so all the users we created like for example right now just showing dummy users so we want to be able to show all of our users and then we want to be able to show them in the right way so first of all let's just try to show all of our users okay so how will I do that well my database has access to all the users already okay let's go here let's go take a look at our table okay and right now what it has is it's uh all the data here is hard coded okay so first let's go ahead and just study the structure of this table here so we have a table class leaderboard it has these are the headers all right so for example if I look at this it says uh name right that is right there so I can change that dogs generated right there okay and that star just represents that this is the column we will be sorting this by okay so our headers are fine we can leave our headers as they are what we do need to change is hardcoded data so you could see I have uh this is two here okay so this is the index okay so for example I can put a trophy here like this right and then hit um we can hit command enter so it serves this page correctly and refresh right and then you will see that it says one trophy next to me okay so uh this is where our trophy or index will go okay so this is going to be the position this over here will be the this over here will be the username right it says that right there username then this guy underneath it will be the number of dogs generated okay so dogs generated will go here and then this will be the number of logins okay at the bottom or the last one and then I'm just hard coding all of these other rows so I can actually just remove all of these other rows okay because all we need to do at this point is we need to write a for Loop that just goes ahead and makes all of these rows for us okay so for example if I go here we're going to repeat this process right we're going to repeat this process the process of creating a new row adding the data in there creating a new row adding the data in there creating a new row adding the data in there so whenever you have things that are repeating like this I like to think to myself all right maybe we can use a for Loop here okay so I'm going to remove all of these rows here let's go ahead and refresh this uh page okay and I'm just going to go like that just go to the home page directly and we should only see one person here right now okay number of logins name blah blah blah okay we should only see cause you right now but this is still because the Quasi is hardcoded now we have access to the user so I can actually write a for Loop here I can say four user in DB users okay I can go ahead and list out each of the users right so for user and users here where it says username I can go ahead and say user username and since this is going to be python code I want to make sure I put that oh sorry username does not go there username goes underneath it okay username goes there so we'll just we'll just say zero here and then where it says 12 number of docs generated we're going to go ahead and say user dogs generated just like that close it and then number of logins will be user and then we can say logins just like that okay and so let's go ahead and make sure that we wrap this entire row inside of a loop so let's go ahead and end the loop now so I'll say end four and we'll put a percent sign and don't forget to put a percent sign at the top here as well so this should have a percent at the start percent at the end percent at the store percent at the end let's hit command enter and let's see if this is going to show all of our users let's refresh okay so we're it's saying DB is not defined that's fine because it's we just call it users so let's just say users here okay because that's how we pass the database if you look in our main.py uh wherever we're passing users which is where we're passing users uh we're actually not passing users anywhere interesting so let's go ahead and pass all of the users so we're going to say users and I'm going to say DB users put a comma here and then we can pass in users here as well so I can say users and I can say DB users just like this okay let's run this app right we just need it on two of our views let's go ahead and refresh now we won't have that what what's there this time okay let's see invalid syntax okay I probably forgot to just put a comma that's probably it comma yep let's put a comma here okay let's refresh and there we go right we're getting all of the users with their number of dogs generated right and um yeah so there we go number of dogs generated is 10. and name Michael we have Angela Angela's 10 dog generated now we need to make it so uh now we need to make it so that when we have 10 dogs generated Angela should be number one so we actually need to sort this okay so we're going to go ahead and create this function there's going to be a bunch of stuff that you've probably not seen before in this one so just kind of hang tight and you know once you get used to seeing stuff like this you'll understand okay you'll understand the pattern of this okay I don't want you to freak out over this so we're going to create this function called get leaderboard okay it's going to take in users and what this will do okay is um and I'll show you an example okay so this is going to be example of how sorted works I'll just put this example here okay and how it works is you call this function sorted and let's say we give it a list of companies and lists of companies is a list of really dictionaries each dictionary representing a company and if I tell it uh hey go ahead and sort it by its Revenue so let's say the dictionary has you know uh it's a list of companies there's something that has revenues let's just say Revenue here okay so if I make a data structure here we have companies let's just say and um we have company one company two right so company one is basically you know has a revenue of hundred dollars and the name of this company is let's say Facebook FB and then we have another company who has a revenue of say two hundred dollars and then the name of this company is Google okay so if I ran this line of code what that would do is it would take this list here right and it would sort it based on Revenue so the best highest revenue will come first because we're saying reverse is true so it'll give it to you in a descending order which means it'll put highest revenue first okay and we're telling it to filter by this key called Revenue right there okay so filter by that key instead of filtering by the name because you could also sort it alphabetically if you did it by the name so we'll do it by Revenue so it sorts it numerically okay based on the revenue number and yeah and they'll return to us the companies okay and we could we could even play around with this in the uh let's open up this Shell let's go ahead and clear everything okay I'll go here and we'll say python I'll zoom in a bit so you can see better so let's go ahead and write companies right and then I'm going to go ahead and say sorted and we'll do sorted right let's run this and you can see it says hey this is what the revenue is and it sorts so if I had a hundred or a thousand or ten thousand or one million companies it would do it in a matter of a second and it'll sort them all okay so it's a very powerful thing we could do all right so there we go that's the power of sorted that's how we use it so since we already have access to all of our users what we can say is we can say leaderboard okay and we can call sorted we can give it a new list so let's say we're going to create a list of users okay and these users are basically we're going to create a new list okay let me show you this in the rebel first because this part is slightly confusing so let me go here and um let me show it here first okay so let me delete all of this okay now I'm going to type in um from replit import DB now let's go ahead and do DB users okay now what I want to do is sort the users by docs generated so imagine if I did that same thing so let's say I said um where was that line of code that we had right so it is sorted command so I'm going to say sorted and for the list I'll give it DB users and for the key I'm going to give it Lambda and I'm going to say user is user sorted by dogs underscore generated and then reverse is equal to true and I'll run this and boom there we go you can see that it just sorted that based on Doc generated so I have the highest dogs generated showing up and then I have the lower docs generator showing up after so that's really it looks like that essentially works so let's go ahead and basically write that line of code here okay so I can actually go I can even go here and just copy what we wrote Because that's effectively what we're going to need okay and uh that's what our function leaderboard is going to do I'm just going to do we can set a return to sorted leaderboard okay that's it and we can remove everything else so now this function is a nice little oneliner which it goes and grabs all the users sorts them by docs generated and the highest ones are at the top okay so now that we're done with that let's see if this leaderboard thing actually works and if it does you know we can actually just send these users to our back end and our backend will be able to deal with it okay so let's go ahead and try that so now instead of giving my let's say my home page instead of giving it just regular users will give it sorted users so I'll go ahead and say I'll call the function get leaderboard and I'll give it users like this okay and I'll take this copy this and I'll do the same thing for when you hit the get dog route okay and let's run this okay and let's refresh our page and let's see if it actually sorts it the way that we want and there we go we're seeing Angela we're seeing dog generated now let's see if we can try to compete with Angela so let's become Kevin I'll log out we'll go ahead and log in as Kevin let's hit get random dog let's again random dog and you could see that we're starting to actually compete with Angela right I'll hit it four times here and I'll hit it three more times okay let's hit it again and let's hit it and there we go Kevin is already in the lead let's run it again there we go right Kevin is now in the lead okay when somebody has two of the same numbers then they'll just sort it randomly okay it'll just pick flip a coin between the two so there we go Kevin is now number one but there's only one thing that is missing right now okay there's only one thing that is missing right now and that is this place okay so how come for the place we have uh zeros for everything why is that we need to be able to get a number so I want to have first one here and I want to have two here and three here and four here Etc so here's a trick that we can do I can Loop through something so for example let's say let me show you here first okay so let me show you here first let's go to Shell and DB users right and I can let me write a regular Loop so for user in DB users and I can say print user okay so that's great that it's getting me the user but what if I also wanted the index well remember I showed you this trick a lot a while earlier and it's called enumerate so I could actually do for user in enumerate DB users and now when I call this I can go ahead and say let's actually do this uh let's run this again so I just did a control C to kill it and start it again so let's go ahead and say index comma user and enumerate user and now I'll go ahead and say print the index and the user and run it and now you can see I'm getting the index here with the 0 1 2 3 4 5 6 7 8 9 10 11 right and then I'm getting the users on this right hand side so I'm getting the index and the use for index and the user index of the user so enumerate allows me to Loop through and get the position of each of the indices so then in that case that's going to be a very easy thing because I can actually just call enumerate here enumerate and wrap this leaderboard and enumerate and do the same thing here enumerate right wrap this in that and on our front end I can say for user for for index comma user and users I can go ahead and say index plus one because we don't want to start it from zero we want to start from one so let's go ahead and hit command enter and let's refresh and let's see if it gives us what we're looking for there we go there we go so now you could see Kevin is position number one now for Kevin we want to give him a trophy but everybody else we don't want to give them a trophy okay so we could do this in a few ways we could write an if else statement right inside of here or we can create a template filter I kind of like creating filter sometimes okay so we could say we could create a new filter so let's go ahead and do app.template filter and I'm going to say this function will be um trophy so trophy for first place okay and what this function is going to do is it's going to take in a number okay and uh basically we're gonna say return and I'm going to put a trophy and the number one as well if number or it's actually going to be taking in an index okay index so put one if index equals equals zero okay and let me think if this is going to mess anything up this actually might mess mess it up hmm this might mess it up but let's give it a try first so let's go ahead one if index is zero else index plus one okay so we could we could do that all right now we'll have access to Trophy first place pretty much at any point um no actually I think this should work I think this should be fine so let's go ahead back here and let's go ahead and say index and go ahead trophy first place so pass an index as the argument for this function trophy first place and that will either print out the position or give you the trophy okay so let's go ahead and run this and let's see if that works there we go that filter worked real nice okay so we could actually even call it um trophy or position right it either gives you the trophy or the position so trophy or position okay we could call it that and fix the naming here let's go ahead here and refresh and now you can see that Kevin is in the lead okay and if I I can obviously log out as Kevin I can go ahead back in as Angela and I can keep hitting get random dog multiple times okay let's go ahead if you click too fast you'll break it okay so don't click so fast all right let's see what the error is right now let's restart the server okay so I'll hit command enter here and let's go right there and let's go to the home page okay it looks like it's coming back up perfect there we go okay Angela is at 11. we can get random dog get random dog get random dog and Angela can soon take over and as soon as she takes over you'll see that she gets the trophy okay so let's go take over boom she took over she got the trophy she moved up in the spot right dog generated became 17 for her and so you could see that this is working correctly okay the next thing I want to do is obviously I want to remove any duplicates that I have because once I remove them then in the future anytime anybody's using our database it will not allow you to create duplicates so let's just go ahead and remove if we want to get our app in like perfect condition let's just go ahead and um we could remove okay let's go ahead and get rid of that we can essentially remove our database okay so our our users at least so I can just say DB users and let's set it let's actually do it from here I think it's safe it's a better choice so let's go ahead and make sure you do from replit import DB and then we're just going to go ahead and say users is equal to a empty list okay so as soon as you do that if I go here and I refresh this app would either break right because there's there's uh now we don't have any users at all so let's go ahead and see DB users we have no users at all okay so that's gonna be a problem so this is basically the very first time somebody's using your app and let's see where we got the error from and it's saying total uh total dogs generated plus equals one and it's trying to increment the dogs on somebody okay so let's go ahead to enroute to the home page and now I'm on the home page okay and because we have sessions um on right that's why it's saying Angela but in terms of users it has no existing users data that's why you're not seeing any user specific data this is coming from sessions okay so this here is completely empty well now we can actually start creating users and we won't be able to create any duplicates so now if I create Angela hit enter hit get random dog you can see Angela is now in the database at the bottom right you can see her numbers incrementing every single time I generate a dog for Angela let's log out let's log in as Angela again let's just make sure her number of login increases and you can see it does okay let's log out let's go ahead and come in as Kevin and you should see that number of logins should be one let's hit get random dog get random dog let's see if Kevin can overtake Angela let's run it a few more times all right and there we go Okay Kevin has officially overtaken Angela we have a total of 66 dogs created so if you want you could you could have reset this as well if you wanted to okay but there you go uh you have 66 dogs generated in this app you have two users that everybody could see here in the leaderboards you can log in and log out you can generate a random dog use an API request you're sorting this table by the leaderboard and so you learn how to sort so there's so much here right there's sessions there's databases there's server side routing there is front end stuff that you're dealing with here I mean you just accomplished so darn much and if you got to this part honestly I'm really really proud of you even if you didn't and you just made progress and you got closer to it hell I'm still super proud of you I mean this is absolutely amazing and incredible that you made it this far and again if you ever get stuck you know just go ahead and hit that solution file and the solution file will have everything for you because if you're watching it as a clip the solution file might might be in the comments below but if you're watching it as part of that python course then just you know you you still have the solution file inside of your you know python course right over here you can just always go to this uh you know read me just hit markdown and here you have all of the apps and everything that you're going to be building and you can see okay for random dog generator here's the project here's the live demo and here's a solution and if you want access to this course again it's completely free the link is in the description below you can get access to this mega mega mega Python course that has everything there for you plus some awesome awesome projects so you can always pull the solution file from there anyways super proud of you great work with that said let's keep on rocking and rolling that was crazy we built so many projects together we did so much coding together you learn so freaking much you're less than one percent of the people if you've made it this far because not a lot of people will ever make it this far so thank you so much for getting all the way to here I really appreciate your beautiful face this is not the end my friend this is just the beginning okay and I hope that I could play a tiny little part in your journey of becoming a developer I know you're gonna go on to become a phenomenal developer and that just makes me proud and that makes me so happy just knowing where you're gonna be at the end of the day with that said I love your beautiful face I hope you enjoyed this journey together it was kind of like a Harry Potter mixed with Lord of the Rings mixed with some Wizardry because man that was freaking awesome with that said I love your beautiful face this is Kazi and as always I'll see you in the next video
