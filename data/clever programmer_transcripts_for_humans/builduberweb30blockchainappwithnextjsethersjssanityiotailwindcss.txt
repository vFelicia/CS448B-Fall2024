With timestamps:

00:00 - we got uber for you today but with
00:01 - blockchain so we thought how about you
00:03 - pay a need and you log in with metamask
00:05 - wouldn't that be cool
00:08 - that's what you're gonna get so let's
00:10 - just go right into the app and not waste
00:12 - a lot of time i go into the app i can
00:13 - log in with metamask boom i'm already
00:15 - authenticated you can see at the top
00:17 - right i'm able to get in let's go to our
00:19 - database and our back and restoring our
00:21 - users rides and trips as you can see and
00:23 - every time you log in it actually
00:25 - creates an account for you with your
00:27 - wallet address attached so let's say my
00:29 - name was bobby adams i could change it
00:31 - to whatever i want even clever
00:32 - programmer
00:34 - i can hit publish once my sanity backend
00:36 - updates when i go back to my database
00:38 - we're good to go you can see my name is
00:40 - now says clever at the top you know
00:42 - short for clever programmer so it just
00:43 - shows the first name there i wanna ride
00:45 - i wanna go somewhere don't you so i'm
00:47 - gonna type in santa monica to let's go
00:50 - to sofie stadium now as soon as i'm done
00:52 - typing that look at that in real time
00:54 - santa monica shows up so far stadium
00:56 - shows up and mapbox automatically draws
00:58 - that out and that happens without
01:00 - refreshing thank you nexus on the left
01:02 - hand side you see all the rides are
01:04 - there uberx uberxl black where are all
01:07 - those images and all those drive and
01:09 - those names coming from actually coming
01:11 - from our sanity database where all of
01:13 - this is stored now you're looking at the
01:14 - price that's interesting the price is in
01:16 - eth where's the price coming from price
01:18 - is actually being calculated fancy
01:20 - algorithm that we'll show you in the
01:21 - rest of this video that basically makes
01:23 - a realistic price that you pay but in
01:26 - eth that'd be cool right you order your
01:28 - right pay with eth boom you're good to
01:30 - go so let's go ahead and check it out
01:31 - now so i'll pick black we'll hit confirm
01:34 - our meta mask pops up to authenticate
01:36 - that transaction we go ahead and we hit
01:38 - confirm to accept the gas fee hit
01:40 - confirm again and boom that transaction
01:42 - goes through and now in order to verify
01:44 - you can verify that the transaction is
01:46 - being sent so i look at my meta mask and
01:48 - it says the transaction is pending i can
01:50 - actually view it on the block explorer
01:52 - hence etherscan i can actually go inside
01:56 - of my sanity database and see that i've
01:59 - actually done this drive this is the
02:01 - trip so on the left hand side we're
02:03 - under trips so it was a trip to sofie
02:05 - stadium you can see place they've
02:07 - dropped off in that ride the pickup the
02:09 - trip type what was the trip price what
02:11 - was the trip timestamp and you can even
02:13 - see who the passenger was which in this
02:14 - case was none other very own clever
02:17 - programmer and we go back and boom look
02:19 - at that the transaction is successfully
02:22 - completed so the status now says success
02:24 - beautiful so this is going to be a fun
02:27 - project that's simpler than some of the
02:29 - other ones we've we've built but gonna
02:31 - have a little bit of an easier
02:32 - understanding you have an awesome
02:33 - project that you'll be able to put on
02:35 - your portfolio and it's just gonna be
02:37 - fun so i hope you're excited and if
02:39 - you're ready to crush it make sure to go
02:41 - ahead and smash that like button turn it
02:43 - white turn it blue i don't know i'll
02:45 - show you a picture of a potato today
02:46 - that's kind of what i'm feeling here's
02:48 - here's a potato hopefully you liked it
02:49 - so it was a gift for you smashing the
02:51 - like button oh by the way your
02:53 - instructor today is going to be lance
02:55 - last video actually let me see did we
02:56 - get over a thousand likes because his
02:58 - job depended on whether it was gonna get
02:59 - over a thousand likes or not and if he
03:01 - gets under a thousand likes lance is
03:03 - fired that's what i've told you guys
03:04 - before oh just barely 1.4k lance is
03:08 - going to be your instructor the
03:09 - world-class instructors runs our
03:10 - front-end mastery coding bootcamp rushes
03:12 - it at that people love them hopefully
03:14 - you'll love them if this video gets a
03:16 - thousand like or more lance gets to keep
03:18 - his job so do it for lance smash that
03:20 - like button i love your beautiful face
03:22 - let's go and let's start coding this up
03:24 - right away what is up everybody welcome
03:26 - back to another video lance here again
03:28 - and i'll be walking you guys through the
03:30 - uber clone today so let's go ahead and
03:32 - get started so the first thing i want
03:33 - you guys to do is create a folder and
03:35 - let's call it uber clone blockchain just
03:38 - like this from there let's go into that
03:40 - folder and we'll be creating our next j
03:42 - app within here so to do that go into
03:44 - the folder and write npx create next app
03:47 - at latest space dot the dot here after
03:50 - the latest is important because what it
03:52 - will do is take all the starter next js
03:54 - files and put it into our uber clone
03:57 - blockchain folder awesome once that's
03:59 - done if you open up vs code now and open
04:01 - up the folder you should see all these
04:03 - files all the starter nexus files just
04:06 - like this as you can see okay after that
04:08 - i'm gonna go i'm gonna go ahead and set
04:10 - up for sell so to set up results it's
04:12 - very simple all i have to do is go into
04:13 - the command line and type in burst cell
04:15 - it's going to ask you to set up and
04:16 - deploy go ahead and say y for yes and
04:19 - for scope put your account for us i'll
04:21 - do clever programmer and we don't have
04:23 - an existing project yet so go ahead and
04:25 - say and for no it'll then ask you what's
04:27 - your project's name give it the same
04:28 - name as the name of the folder another
04:30 - important part here is in which
04:31 - directory is your code located it's
04:33 - going to be at the root of the folder
04:35 - and to showcase that just put dot
04:36 - forward slash like this awesome last
04:39 - thing here it's going to ask you want to
04:40 - override the settings we can go ahead
04:42 - and say end for no cool so if you hop
04:44 - over to vercell and log in and take a
04:46 - look at your projects here you should
04:49 - see the new project result project that
04:51 - we created so for me it's right here and
04:53 - it says just now because i just made it
04:54 - so if it looks just like mine you're
04:56 - good to go so i'm gonna let this build
04:58 - and i'll cut right back to when it's
04:59 - done awesome so now that's done i'm
05:01 - gonna go ahead and type in versailles
05:03 - dev right the reason why i'm saying
05:04 - versailles dev instead of yarn dev is
05:06 - because with first cell dev i'm gonna be
05:08 - using the local versailles builder to
05:10 - run my code because i won't need to
05:12 - configure any env files because reset
05:14 - will actually take care of it another
05:16 - reason to use versaille dev over yarn
05:17 - dev is because it's going to be easier
05:19 - to catch bugs that yarn dev doesn't if
05:21 - you didn't know the team that made
05:23 - vircelle is the same team that made an
05:24 - xjs so brazil supports a lot of the
05:26 - features that next has already awesome
05:29 - so again paracel dev in the terminal and
05:31 - it should say the server started at
05:32 - local host 3000 so go ahead and copy
05:34 - that link put it into your browser and
05:36 - you should see our starter next js app
05:39 - awesome next let's go ahead and set up
05:41 - tailwind if you didn't know tailwind is
05:43 - a collection of css utility classes that
05:45 - we use to quickly build consistent
05:47 - good-looking css so to set up tailwind
05:50 - with an xjs there's a couple of
05:51 - different steps we have so if you're
05:53 - ever lost at any point go ahead and hop
05:54 - over to tailwindcss.com
05:57 - slash docs slash guides slash next js
06:00 - all right in that webpage you'll go and
06:02 - find a bunch of steps to set it up so if
06:04 - you follow me what i'm gonna do is say
06:06 - yarn add dash capital d tailwind css
06:10 - post css auto prefixer and that's it
06:12 - we're gonna install all three of these
06:14 - packages with yarn the next thing we're
06:15 - gonna have to do is actually initialize
06:17 - tailwind css so after that's done go
06:20 - ahead and write npx tailwind css init p
06:23 - what's this going to do is initialize
06:25 - tailwind by setting up a
06:26 - tailwind.config.js
06:29 - if you take a look in your vs code you
06:30 - should see that same config.js file
06:32 - right go ahead and click it and we need
06:34 - to configure our template paths so what
06:37 - you need to do is just copy what i have
06:39 - here right in the content we're gonna
06:41 - put the value of dot forward slash pages
06:44 - and dot four slash components just like
06:46 - i have here cool next we need to set up
06:48 - the next we need to set up the tailwind
06:50 - directives to our css to do that you're
06:52 - going to copy all the things i have here
06:54 - and hop over to your styles folder clear
06:56 - out all the starter code and paste these
06:59 - three adds right here so add tailwind
07:01 - components tailwind utilities cool once
07:03 - everything is done installing we can go
07:04 - ahead and set up our app again by saying
07:06 - brazil dev and get started with tailwind
07:09 - go ahead and hop over to index.js as you
07:11 - can see i have hello next.js here and
07:12 - you can see it on the browser but to get
07:14 - started with tailwind let's give this a
07:16 - class name on line six and we can
07:18 - actually say bg dash
07:20 - red-600 right all we did was write a
07:22 - class name but if you look at our
07:24 - browser there's the background red at
07:26 - this color if you're familiar with tail
07:27 - one is similar in the sense that all you
07:29 - have to do is type in the class name
07:31 - what kind of css class you want so
07:33 - there's predefined utility classes that
07:35 - you can write such as this to set up and
07:37 - style your css fast and easy so let's
07:40 - move on to the next thing i'm going to
07:41 - go ahead and clear out the class name
07:42 - and we should be good to go all right if
07:44 - you saw earlier i was able to use
07:46 - tailwind to define a class name with
07:48 - what css i want one thing to note is as
07:50 - our project scales the class name is
07:52 - going to get really verbose or insanely
07:54 - long so one way to alleviate that is
07:56 - that we can actually make a style object
07:59 - at the top of our index here and in the
08:01 - style object we can give keys or give it
08:03 - an actual class name with all the css we
08:06 - want as the value so over here i'm going
08:07 - to write con style equals and object
08:10 - right wrapper as the key and as the
08:11 - value we can write something like this
08:14 - here we can find the height and the
08:16 - width like so and also put flexbox there
08:19 - you go nice and simple okay so now that
08:20 - we define that object come down to line
08:23 - six and let's make that div that we need
08:25 - so this div will have the class name the
08:28 - style object dot wrapper so if we put
08:30 - that there i'll actually grab that value
08:32 - of the wrapper and it'll have all the
08:34 - styling that we need so that means our
08:35 - wrapper will have the height and width
08:37 - 100
08:38 - and flexbox properties and the flex
08:40 - property of column all right another
08:42 - thing i'm gonna do is set up a couple of
08:44 - dibs for our whole app all right we
08:46 - won't have the css for this yet but i'm
08:47 - gonna go ahead and set it up so so in
08:49 - the style wrapper this is where our nav
08:51 - bar will go in next i want to make a div
08:53 - called style.main this is where our map
08:55 - for uber will go and then a sibling to
08:57 - that main div is going to be style dot
09:01 - ride request container okay within that
09:04 - div we're gonna make another div called
09:05 - style dot ride request right here is
09:07 - where we're going to be able to type in
09:09 - a location and also confirm so like i
09:11 - said earlier we don't have the css for
09:13 - this just yet as you can see but i like
09:15 - to set it up so i know what to do later
09:17 - like to set it up now so i have an idea
09:18 - of how my project is going to look later
09:20 - so if you notice in line 8 this is where
09:22 - i'm going to have a nav bar so i'm going
09:24 - to go start working on that now so one
09:26 - of the first things you have to do is
09:27 - actually create that component so in
09:29 - your components folder type in navbar.js
09:32 - right and i'm going to set it up by
09:33 - doing rafce and if you want to have
09:36 - these code snippets like i do go ahead
09:38 - and type in your extensions es7 react
09:40 - redux code snippets and you'll be able
09:42 - to type in rafc just like i am so
09:45 - instantly make function based components
09:47 - like me okay cool so we made our
09:49 - navbar.js
09:50 - go ahead and like so we need to write
09:52 - import navbar from dot forward slash
09:55 - slash components slash navbar and bam
09:58 - you can see it on our app let's go so
09:59 - hop back over to your navbar.js and
10:02 - let's get started on creating our navbar
10:03 - and if you notice we don't need to
10:04 - import react onto this component because
10:06 - ever since react 16 it's kind of like
10:08 - implicit all right so your navbar
10:10 - component should look just like this and
10:12 - we should be good to go and get started
10:13 - all right so i'm going to give this a
10:14 - class name of
10:16 - style.wrapper and of course we don't
10:18 - have a style object yet so i'm just
10:19 - going to set it up and we're going to
10:20 - say wrapper all right i'm going to give
10:21 - it this height and this width and this
10:23 - background color if you're confused at
10:25 - all of what the hell i'm writing there's
10:26 - a tailwind css cheat sheet that you can
10:28 - use to refer to understand what exactly
10:30 - am i writing to translate it to css but
10:32 - yeah so i'm going to set the background
10:33 - to black the text white set up flexbox
10:36 - to justify it around and say items
10:38 - center right and the pixel length at 60
10:40 - and say fixed z-20 awesome cool so if
10:44 - you save you should see this nice little
10:46 - black bar which represents our nav bar
10:48 - and at any point i move too fast go
10:50 - ahead and pause the video so you can
10:51 - catch up cool so once that's wrapper is
10:53 - done let's go ahead and set up the rest
10:54 - of our dibs before i get styling so
10:56 - inside wrapper let's make a div and call
10:58 - it style dot left menu following that
11:00 - inside left menu let's make a div called
11:02 - style.logo and for the logo we'll just
11:04 - say uber awesome right after the logo
11:07 - div let's make three divs like so and
11:09 - let's put all the navbar elements which
11:10 - is gonna be ride drive and more all
11:12 - right and three all three of these div
11:14 - should have the same class name so i'll
11:15 - select all three and i'll say class name
11:17 - curly bracket style dot menu item cool
11:20 - and don't worry if you see all these
11:22 - items like a column we're gonna go ahead
11:23 - and style that later okay you come over
11:25 - to if you make a space between line 13
11:28 - and 14 like so let's add another div and
11:30 - call this one style dot right menu okay
11:33 - and in that menu this is where we're
11:35 - gonna write another menu item called
11:37 - help like so right and this after help
11:39 - the next menu item is gonna be where the
11:41 - user's name goes so i'll just put my
11:43 - name lance after that make another div
11:45 - call it style dot user image container
11:47 - and this is where your beautiful profile
11:49 - picture is all right so i'm gonna look
11:50 - up a user avatar and this one looks good
11:53 - so let me use this save that image and
11:55 - let me make a folder for these images
11:57 - i'll call it temp put my beautiful
11:59 - picture of me inside this folder and
12:01 - i'll call it
12:02 - avatar.jpg.jpg all right and to use this
12:04 - image i'll have to do say import image
12:06 - from next slash image right this is how
12:09 - we use images with next but now let's
12:11 - actually import the actual image itself
12:13 - so we're gonna say import avatar from
12:15 - the file path which is gonna be just
12:17 - like this okay so to insert the image
12:19 - let's type that with the source avatar
12:21 - and there we go beautiful we're done
12:23 - guys just getting up we're done but now
12:25 - let's actually just finish this up so
12:26 - let's go on to the next part let's make
12:28 - another div on line 23 and what i'm
12:30 - going to do is add a static wallet
12:33 - address had a static number like so
12:35 - which is going to represent our static
12:36 - wallet dress for now but eventually it's
12:38 - going to take up my wallet address when
12:40 - i log in with meta mask okay so now that
12:42 - all the divs are set up we can go ahead
12:45 - and start putting styling to them so
12:47 - let's get rid of this ugly column right
12:49 - by saying left menu flex gap three look
12:52 - at that it's a column now let's make the
12:53 - logo bigger by putting this and i'm
12:56 - gonna start moving a little bit quicker
12:57 - here guys because if i spent time
12:59 - explaining every single css this video
13:00 - is gonna be like six eight hours long
13:02 - which would be pretty cool for one of
13:04 - the videos but for now if you need to
13:06 - feel free to pause the video to see the
13:08 - css that i'm putting in so i'm going to
13:09 - put this for the logo and for the menu
13:11 - items i want the text size to be a
13:13 - little different than the logo make sure
13:14 - it's white font's medium let's add a
13:16 - nice cursive point to it and of course
13:18 - center it like so okay let's do the same
13:20 - for the right menu and also center those
13:22 - items okay our user image container
13:23 - needs a little bit of styling so let's
13:25 - say mr.2 let me give our image a class
13:28 - name of user image so we can actually
13:30 - start installing the image itself give
13:32 - it this css right here okay hit save and
13:34 - that should look a lot better go ahead
13:36 - and also put in the login button right
13:38 - and i don't have the login button set up
13:40 - yet but i'm going to add the css right
13:42 - now so login button should look like
13:43 - this and the login text should have this
13:45 - css as well so then next i'm going to be
13:47 - setting up a variable called current
13:48 - account and this is going to hold the
13:50 - user that logs in with meta mask because
13:52 - later on the video i'll be
13:54 - authenticating the user through metamask
13:56 - all right so i'll be logging in real
13:57 - quick and i'm going to copy my wallet
13:59 - address and if i paste that into the
14:01 - string here that's going to represent
14:03 - the current account that's logged in
14:04 - right and to make it so what we can do
14:06 - now is replace the random set of numbers
14:09 - i have here and actually put i'm just
14:11 - going to format a little bit by using
14:12 - slice like so there you go all right so
14:15 - now we have a beautiful navbar with all
14:17 - the menu item and my current static
14:19 - wallet address we're going to make this
14:20 - more dynamic later so keep that in mind
14:22 - over in lan 38 i'm going to set up some
14:24 - conditional rendering what this line of
14:25 - code is saying is basically if there is
14:27 - a current account take that current
14:28 - account and format it and take that
14:30 - slice so you can format it like so if
14:32 - there is no current account that means
14:33 - the user is not logged in so we can set
14:34 - up conditional rendering that dave is
14:36 - going to say please log in awesome so as
14:38 - you can see if i remove the current
14:40 - account it says to log in let's give it
14:41 - some styling by giving it the
14:42 - classnamestyle.log
14:44 - so that it look a lot nicer awesome next
14:46 - in your terminal i'm going to go ahead
14:48 - and add some react icons you want to use
14:51 - this icons for our project so we're
14:52 - going to need to install react icon so
14:54 - hop over to your terminal and type in
14:56 - yarn add react dash icons okay all right
14:58 - now that react icons is installed let's
15:01 - actually use it by going over to the top
15:03 - here and writing import bs person from
15:06 - react icons slash bs all right now that
15:08 - we import it we can actually just place
15:09 - it into our code so let's just write
15:11 - that in line 46 like so bs person self
15:14 - closing and look at that there's that
15:15 - little default avatar image right next
15:18 - to the login just like this okay so then
15:20 - i'm going to bring back the current
15:21 - account and this is what it should look
15:22 - like if i am logged in awesome so that's
15:24 - the navbar let's go ahead and move on
15:26 - cool so once the navbar is done one
15:27 - thing i like to do is stay organized is
15:28 - to break down my code into small pieces
15:30 - and basically make a to-do list of what
15:32 - i want to do right so i'm going to do
15:34 - that using notion and notion is awesome
15:36 - because it lets me visualize my to-do
15:39 - list kind of like a kanban board if you
15:40 - ever have if you guys ever use that
15:42 - before so if you look i have this nice
15:43 - three columns that says to do in
15:46 - progress and done right and every single
15:48 - time i finish one of these to do i'm
15:50 - gonna update the status of it so you're
15:52 - gonna see me hopping back and forth
15:53 - between notion every time i finish to do
15:56 - right i recommend you guys use notion
15:57 - especially if you work in a team where
15:59 - you can divide up your task and
16:01 - everybody on the team has an idea what
16:02 - needs to be done so if you look in my
16:04 - done column actually you can see that i
16:06 - already have up code and connect for
16:08 - cell done and if you look in the in
16:09 - progress we have build navbar well we
16:11 - just finished build navbar so i'm gonna
16:13 - happily move this to done and there we
16:15 - go beautiful so the next things i want
16:17 - to work on is to build the location
16:18 - selector and to add the static card list
16:21 - and that seems to be good for now so i'm
16:23 - gonna hop over to vs code and start
16:25 - working on those things so now that's
16:27 - done i'm gonna work on adding the map
16:29 - component to my project so to start off
16:32 - head into your components folder and
16:33 - let's create the map.js component i'm
16:36 - going to write mapjs i'll put my code
16:38 - snippet here and there you go it's all
16:39 - set up and now let's just insert that
16:41 - component here that i marked out so in
16:43 - line 12 i'm going to insert my map
16:45 - component and of course we also have to
16:47 - import it just like this awesome there
16:49 - you go so now that's imported let's go
16:50 - ahead and set this up one thing to note
16:52 - is that we're going to be using map box
16:54 - for our map component so to start using
16:56 - mapbox we have to go back into the
16:58 - terminal and say yarn add mapbox geo as
17:01 - that's downloading go ahead and hop over
17:04 - to mapbox.com and now i'm going to be
17:06 - walking you guys through on how to use
17:07 - mapbox so the first step is to actually
17:09 - sign up and make an account and i
17:11 - already have an account so i'm just go
17:12 - ahead and log in so if you go into the
17:14 - account page of mapbox you should see
17:17 - this screen here from here take a note
17:19 - on what you see there's a default public
17:21 - token and there's a button here that
17:22 - says create a token so i'm just going to
17:24 - copy this and save it what you want to
17:26 - do now is go over to versel remember how
17:28 - i said versailles actually sets up the
17:30 - env files for you so if you hop over to
17:32 - your project on versailles there should
17:33 - be a section called environment
17:35 - variables okay so in environment
17:37 - variables paste the copied code into the
17:40 - value section so it should look like
17:42 - this and name it map box that underscore
17:45 - access underscore token cool after that
17:47 - it's all set up added the environment
17:49 - variable and then once that's done reset
17:51 - your terminal so that their env file is
17:54 - set up cool while that's going on i'm
17:56 - going to use mapbox you need to import
17:58 - mapbox gl from mapbox geo so i'm going
18:01 - to set up our style object here and i'm
18:03 - going to use this wrapper and style it
18:05 - like so and within the map component
18:07 - itself i'm going to give this div after
18:09 - the return the class name of
18:11 - style.wrapper now i'm going to set up my
18:13 - use effect here what i want this use
18:15 - effect to do basically create the map
18:17 - box when this component renders so let's
18:19 - import use effect from react and the
18:21 - side effect that we want to perform let
18:23 - me just clean this code up here for the
18:24 - use effect inside this use effect i'm
18:26 - going to write const map equals new
18:29 - mapbox gl.map all right i'm creating a
18:32 - new instance of my map and within here
18:35 - i'm going to set up a couple properties
18:37 - set up a couple properties so for the
18:39 - style i'm going to paste the map box i
18:41 - created on my account and for the center
18:44 - this is where you can put the
18:44 - coordinates where you want to center
18:46 - your map on so i'm going to put this as
18:48 - my coordinates and you can also set up
18:50 - the zoom how close how zoomed in do you
18:52 - want that center to be or the map itself
18:55 - so i'm going to say three and oh looks
18:57 - looks like it says i need the i need a
18:59 - container and that must be a string or
19:01 - an element so i think i know what this
19:03 - issue is i'm gonna make a container key
19:05 - and give it the same as this id here
19:08 - just like this i'm going to say map and
19:10 - then now the next now the error says
19:11 - that i need the api access token so
19:14 - let's go ahead and bring that over so
19:15 - i'm going to write mapbox gl.access
19:17 - token equals our access token so to get
19:20 - the access token
19:22 - process.emb.mapbox token like how we
19:24 - have it set up let me see if this works
19:26 - looks like i'm still getting the error
19:28 - let me just kind of log it to see what
19:30 - we get so it's getting undefined so it's
19:32 - not recognizing it just yet oh i know
19:34 - why i need to put dot next underscore
19:36 - public before the map box access token
19:39 - and i gotta fix that up in my first cell
19:41 - project as well so keep it the same name
19:43 - right next public that's important so
19:45 - that we can get the access token and one
19:48 - more thing i forgot to do is click on
19:49 - create access token and insert your
19:51 - deployed link down below here in this
19:53 - url so that you can restrict the access
19:55 - of this token to this specific url that
19:58 - we have so that other people can't use
19:59 - your token that's the whole reason why
20:01 - we put everything in emv files because
20:03 - it's best practice not to share your api
20:05 - keys your tokens or anything like that
20:07 - so by putting it here you ensure that no
20:09 - one else can use it so i already have
20:11 - mine set up so it should be good to go
20:13 - and i'm still seeing an error because i
20:14 - have to start my terminal good so i'm
20:16 - going to save for cell dev and this
20:17 - should work let's go it's beautiful it
20:20 - looks beautiful we just need to make
20:22 - that container and increase the size a
20:24 - little bit so i'm gonna go work on that
20:26 - now so what i'm gonna do is hop back
20:28 - over to my index.js and i have those
20:30 - divs set up in my map but since my index
20:32 - is the parent of that it's still going
20:33 - to inherit that style because if you
20:35 - look in line 15 my map component is
20:37 - still there all the component is it just
20:38 - hosts your ui element so i can actually
20:41 - define the styles still here so i'm
20:42 - going to write out the main that i have
20:43 - on line 13 the styling for that just
20:46 - like this then the map container which
20:48 - is going to be living inside the map
20:49 - component and the ride request container
20:51 - and of course the ride request which
20:53 - will have the styling like this so if i
20:54 - hit save there we go now we're talking
20:56 - like this looks a lot better and with
20:58 - that there's the map component so now
20:59 - that i set up the map component let's go
21:01 - remember to go back to our notion and
21:03 - add that to the done nice so the next
21:05 - thing i want to do let's work on
21:06 - building the location selector if you
21:08 - guys are familiar at all with the uber
21:09 - app there should be this white box where
21:11 - it can where it prompts you where do you
21:13 - want to be picked up from and then where
21:15 - do you want to go so i'm going to be
21:16 - working on this section i'm going to be
21:18 - working on the location selector form so
21:20 - hopping back to the vs code if you look
21:22 - in your index you can see in line 21 i
21:24 - marked out where i want that location
21:26 - selector to go right it's wrapped in
21:27 - this nice ride request which is wrapped
21:29 - in ride request container so following
21:31 - the pattern of what i'm what i've done
21:33 - before i'm going to make a location
21:34 - selector component and set it up using
21:36 - my code snippet and once that's done i'm
21:38 - going to set up my use date because i'm
21:40 - going to be using this later coming down
21:41 - to line 4 i'm going to add the class
21:43 - name style.wrapper and then at the top
21:46 - on line 3 i'm going to just make the
21:47 - style object with the wrapper and this
21:49 - is the css that i want for it so wrapper
21:51 - awesome so i'm just going to tap the
21:52 - style object with the wrapper and the
21:54 - css value that i want for it and within
21:56 - the style wrapper div i'm going to call
21:58 - this the search header style dot search
22:01 - header after that let's set up our use
22:03 - state and i'm going to say const in
22:05 - focus set in focus and set initialize
22:08 - our use state with the key of from right
22:10 - the idea here i'm gonna set up the state
22:12 - for from and then it's gonna switch to
22:14 - two right which will then in turn switch
22:16 - the focus between the two headers the
22:18 - two inputs once that's done let's go
22:20 - ahead and import location selector to
22:23 - our index just like so so i imported it
22:25 - and then i placed it in line 22. and in
22:28 - my location selector i'm going to set up
22:30 - some conditional rendering that if my in
22:32 - focus state is equal to from i want the
22:35 - text where can we pick you up to appear
22:37 - if my in focus isn't from or let's say
22:39 - two it should show where to or where are
22:42 - we going and that's gonna switch
22:43 - depending on which input i have selected
22:46 - which will make sense in a bit and then
22:47 - now in our index i'm also just gonna add
22:49 - this property so that we can actually
22:51 - put the container and see it by bringing
22:54 - the z index up so now we should see this
22:55 - white container with the text where can
22:57 - we pick you up because our use date is
23:00 - set to from awesome so in my style
23:02 - object i'm going to set up search header
23:03 - and i'm going to set up input boxes so
23:06 - input boxes is going to be the class
23:08 - that i took hold the two input boxes
23:11 - right one's going to be the location
23:12 - where i'm getting picked up from and the
23:14 - other input box is going to be where am
23:16 - i going to so the next line in my style
23:19 - object is the actual input box and
23:20 - here's the css for that and of course if
23:23 - you remember the uber app if you click
23:25 - on the box there's gonna be like this
23:26 - black border around it that indicates
23:28 - that's the box that is focused all right
23:31 - and then i'm gonna style the actual
23:32 - input itself as well as setting up this
23:34 - property called vertical line
23:36 - referencing the app again there's just
23:38 - going to be this little circle that has
23:39 - a line going which points to another svg
23:42 - right and all that is in line with the
23:44 - text boxes cool and then if i change the
23:46 - use state to 2 you should see where to
23:48 - pop up and depending on which one is
23:50 - focused that use state should be
23:52 - changing as right so i have an extra
23:54 - focus input box here so i'm just going
23:55 - to delete that what i want to do now is
23:57 - to set up the rest of the div so i'm
24:00 - going to make another div here in line
24:01 - 21 and this will be where my input boxes
24:04 - did will go and if you remember inside
24:06 - this input box there should be like this
24:08 - tiny circle that has a vertical line
24:11 - that goes down which connects it to
24:12 - another svg so in line 22 i'm going to
24:15 - put another div inside the input boxes
24:17 - right and if you look at the class name
24:19 - in line 23 i'm gonna put a template
24:21 - literal here all right because what i
24:23 - want to do is if the focus is from i
24:26 - want to focus and add that black around
24:29 - the input box to indicate that this is
24:31 - the box that i'm typing in or focused on
24:33 - so what i'm saying in line 24 is if the
24:36 - in focus state is from the focus input
24:38 - box will be the style d and if not this
24:41 - wouldn't have that focus input box
24:43 - styling and then next on line 27 let me
24:45 - put the svg container inside so if i
24:48 - want to get that small circle i'm just
24:50 - going to copy this right here all right
24:52 - feel free to pause the video so you can
24:54 - also get this svg and i'm going to paste
24:56 - it inside my svg container and if i save
24:58 - there it is there is my little circle
25:01 - which is inside the focused input box
25:04 - makes sense awesome so obviously there's
25:06 - two input boxes that we need here so i'm
25:08 - going to set up another input so inside
25:10 - this input box there has to be an actual
25:13 - input so i'm going to place that in here
25:15 - i'm going to call this style.input with
25:17 - the placeholder enter pickup location
25:20 - from there in line 16 i'm going to set
25:22 - up another state called pickup and set
25:24 - pickup and i'm initialize it to blank
25:26 - next state that i need to keep track of
25:28 - is the drop off location i want to save
25:30 - that in a state as well so i'm going to
25:32 - write cons drop off set drop off and set
25:35 - use state to an empty string cool so
25:38 - within that input in line 39 i also want
25:40 - to add the value and inside here i'm
25:42 - gonna set it equal to pickup and on
25:44 - change we're gonna update our pickup
25:46 - state with whatever value i typed in so
25:48 - if i were to type in santa monica the
25:50 - state pickup will have santa monica as
25:53 - the string because of this on change
25:55 - keeping track of it and the next thing
25:57 - i'm going to set up is the on focus
25:58 - because if this is clicked or if this is
26:00 - focused if this is the box that is
26:02 - focused we need to make sure that the
26:03 - state is set to from because what that's
26:05 - going to do is put in that border around
26:08 - this box like i mentioned before and
26:10 - like i said i want that nice vertical
26:11 - line so if i paste it right here it
26:13 - looks like that and this should connect
26:15 - us to the next input box so all to do is
26:18 - pretty much copy and paste the rest of
26:20 - that over the only difference though is
26:22 - in line 50 the in focus should be set
26:24 - equal to two and it's focused right then
26:27 - that box should be focused all right
26:29 - next i'm just going to write out the svg
26:32 - container in line 50. and inside this
26:34 - container it should have a different one
26:36 - this one's going to be a tiny square
26:38 - right so this square is going to be what
26:39 - connects that small circle svg with the
26:42 - vertical line to the svg square all
26:44 - right so it looks like this it's looking
26:46 - good guys so let's add our input box
26:48 - with the placeholder and of course the
26:50 - rest where the value is going to equal
26:51 - our drop-off state and the on change to
26:54 - update our drop-off to whatever i typed
26:56 - in and of course the on focus so that if
26:58 - it's focused right we switch the state
27:01 - so look at this if i click where can we
27:03 - pick you up where to where let's go this
27:05 - is looking super clean right i'm so
27:07 - excited awesome so i'm feeling really
27:08 - good about that it is looking beautiful
27:11 - guys so what i'm gonna do now is let's
27:13 - take a look at my inputs being passed so
27:16 - i'm gonna contour log our pickup and
27:18 - drop off state variables and i'm going
27:20 - to make sure it's easy to see so if i
27:23 - were to type in these input boxes you
27:25 - should see that console up so i want to
27:26 - type in union city all right you can see
27:28 - it in my console down below it's right
27:30 - there and for the drop-off i'll say
27:31 - empire state building all right so now
27:33 - we can eventually take those states and
27:36 - start passing it through for our map box
27:39 - i'm getting excited i hope you guys are
27:41 - excited too if you're still watching put
27:43 - a like in the description below now that
27:45 - the location selector is done let's
27:47 - let's go hop over to notion and mark the
27:49 - build location selector as done and
27:51 - let's go ahead and add build confirm to
27:54 - in progress so in this section i'm going
27:56 - to be working on that card when you once
27:58 - you put in your information what should
28:00 - pop up is the list of car options like
28:02 - uber x uber excel over black anything of
28:06 - that sort so to set that up let's go
28:07 - ahead and make a confirm component and
28:10 - if you remember the layout i have in my
28:11 - index it's going to go here in line 24.
28:13 - so i'm going to import that confirm
28:15 - component in my index and then let's hop
28:17 - back over to confirm and let's set it up
28:19 - i'm going to quickly set up my style
28:20 - object at the top and let's make our
28:22 - first div the first step i'm going to
28:24 - make is the wrapper so i'm going to say
28:26 - class name equals style dot wrapper from
28:29 - there i want to make the container
28:30 - that's going to hold all types of rides
28:32 - so i'm going to make a div and call it
28:34 - style selector container in the next
28:36 - line i want to make another div for the
28:39 - container of the button so i'm going to
28:41 - say style confirm button like so and
28:44 - inside that div i'm going to say confirm
28:45 - uberx from now and of course since this
28:47 - is a button let's add an on click to
28:49 - that when i click we should run the
28:51 - store trip details function so i'm going
28:53 - to set that function up to the top at
28:55 - line 4 and for now let's make it a async
28:57 - function which will make sense in a bit
28:59 - coming back to the style object at the
29:00 - top i'm going to add the selector
29:02 - container css i'm going to style the
29:04 - selector container and then let's go
29:06 - ahead and style the confirm button
29:08 - container and so that our button can
29:10 - show up let's style the confirm button
29:12 - itself so there we go there's the
29:13 - confirm button there's a nice outline of
29:15 - the confirm button so now the confirm
29:17 - button's done i'm happy to put this in
29:18 - the done section wow we're moving fast
29:20 - guys so the next thing is to add the
29:23 - static car list so i have it marked out
29:26 - here in line 13 where it says ride
29:27 - selector let's go ahead and make the
29:29 - component for that i'm going to call
29:30 - this ride selector js and let's import
29:33 - that same component in our confirm js
29:35 - all right there we go and now we can see
29:36 - it in our browser to your right and the
29:38 - idea with the right selector is it
29:40 - should hold the whole car list like i
29:43 - was saying before it should hold uber x
29:44 - excel black and so forth so i'm going to
29:47 - set up our usual wrapper at the top set
29:49 - up our style object again and then
29:51 - within this div i'll be making another
29:53 - div and i'm gonna call this one style
29:54 - dot title in this title i'm gonna put
29:57 - this text here choose a ride or swipe up
29:59 - for more from there we should make a div
30:01 - for the car list in line seven and i'm
30:03 - gonna hard code the list of cars in an
30:05 - object in line three and that way i'm
30:07 - gonna do it is i'm gonna make an array
30:09 - of objects one cool thing about notion
30:10 - is that i can actually store all the
30:12 - assets in here so if you go hop back
30:14 - over to my notion here are all the
30:15 - assets of the different cars that we can
30:18 - select from the list so what i'm gonna
30:20 - do is add these cards each of these
30:22 - cards into my assets folder in my next
30:25 - app so i want to create an assets folder
30:27 - and put all of these into my next app
30:30 - and don't forget the eth logo and the
30:32 - uber logo awesome so now our assets
30:33 - folder with all the rides is here all
30:36 - right and once that's done let's import
30:37 - all the assets we just set up so import
30:39 - uberx mover black mover black suv uber
30:42 - select uber excel and going back to my
30:45 - array of objects here each object is
30:47 - supposed to represent each car on this
30:49 - list so in this first object i'm going
30:51 - to apply all the properties of it so the
30:53 - name over x the image is going to be the
30:56 - uberx image and depending on what car
30:58 - option you select it's going to have a
31:00 - different price multiplier so this is
31:02 - the price multiplier for the uber x and
31:05 - let me go set up the rest of the objects
31:07 - now awesome so there you go so now all
31:08 - the objects are set up let's go ahead
31:10 - and map through the car list and real
31:12 - quickly i'm just going to change the key
31:14 - to this to service yep i'm just going to
31:15 - update line 39 to class name and within
31:18 - my car list this is where i'm going to
31:19 - map through the object and for every car
31:23 - i want to create the necessary jsx to
31:26 - display it so i'm going to set up my map
31:27 - function here and for every car i'm
31:29 - going to set up this div called
31:30 - style.car which will contain the image
31:33 - of the corresponding icon of the current
31:36 - car in the iteration and that image will
31:37 - have the class name of car image with
31:40 - this height and width and if i press
31:41 - save now there it is you can actually
31:42 - see all the assets there on the on my
31:44 - browser let's go so let's now add the
31:47 - card details so that's going to go along
31:49 - with each image so i'm going to make a
31:50 - div in line 51 called style.car details
31:53 - and within this div let's make another
31:55 - div called style.service where we can
31:57 - insert the car service that's describing
32:00 - so if i put car.service in curly
32:02 - brackets here in line 52 we should see
32:04 - the uber black uber x and all the others
32:07 - on my app we're gonna do the same thing
32:09 - with the time so i'm gonna make a diff
32:10 - called style that time they're all gonna
32:12 - save five minutes away for now and for
32:13 - the price remember we're making this
32:15 - we're gonna be paying these cars with
32:17 - ethereum so in the div called
32:18 - style.price i'm gonna be setting up a
32:20 - variable at the top in line 38 with the
32:22 - divide that by 10 to the power of five
32:25 - and then multiply that with our car
32:27 - price multiplier set that to five
32:29 - decimals and there we have our price in
32:32 - ethereum so again let's also add a nice
32:35 - ethereum logo in there with the image
32:37 - component from next and let's not forget
32:39 - to import that eth logo that i also have
32:42 - in my asset so there it is this is
32:43 - looking sick imagine paying ethereum
32:46 - with uber just to clean this up a bit
32:48 - let's add more to our style object so in
32:50 - here i'm going to make the title and add
32:52 - the css i'm going to add my flexbox
32:54 - properties to car list with overflow
32:56 - scroll and in the car div itself set up
32:59 - the item center and a nice border set up
33:01 - the selected car css and of course the
33:04 - car image and the car details and lastly
33:07 - is the service make that the font medium
33:09 - time the price container and the price
33:12 - and with that all the divs are styled
33:13 - and it's looking amazing and it all has
33:16 - the prices calculated with each based on
33:19 - the car multiplier this is a lot going
33:22 - into this app so be sure to like the
33:24 - video if you made it this far and i'll
33:26 - happily add static cart list to done all
33:29 - right we are making great progress guys
33:32 - so let's add set up sanity to our in
33:35 - progress now that's done and while we're
33:37 - here let's also make that cardless
33:38 - dynamic and let's also add the get
33:41 - location coordinates to our to-do list
33:43 - and if you look we're actually almost
33:44 - done isn't that exciting so let's keep
33:45 - on going and here we go sanity is going
33:48 - to be our database and we're going to be
33:49 - setting it up by creating a studio
33:51 - folder in our terminal inside of our
33:53 - next app and just to mention if you go
33:55 - to sanity.io cleverprogrammer you can
33:58 - get a free boosted plan from us all you
34:00 - have to do is follow these instructions
34:02 - right here to get started you're going
34:04 - to have to npm install the sanity client
34:06 - and when you're initializing sanity type
34:08 - in this code sanity
34:10 - coupon clever programmer right it's
34:12 - gonna include a lot more to the free
34:14 - plan that sanity already gives to you so
34:16 - go ahead and make good use of it awesome
34:18 - take that command and paste it into my
34:20 - terminal and there you go for the
34:21 - project name let's just keep it the same
34:23 - uber clone blockchain all right and then
34:25 - it's going to ask use the default
34:26 - dataset configuration i'm going to say
34:28 - yes all right and we want a clean
34:30 - project with no schema cool so you
34:32 - should see a studio folder inside your
34:34 - project hop over to the schema folder
34:36 - and go into schema.js here you're going
34:39 - to find out this is where we're going to
34:40 - basically concat all of the schema files
34:42 - that we create so let's go ahead and
34:43 - clean it up you can remove all these
34:45 - comments and awesome the next thing we
34:46 - have to do is let's think about what
34:48 - kind of schema files that we should be
34:50 - creating so the first one i'm going to
34:51 - create in my schema folder is the user
34:54 - schema.js in that file i'm going to
34:56 - create an object called user schema and
34:59 - it's going to have these keys and values
35:02 - this is us letting sandy know what kinds
35:04 - of documents that we want to keep track
35:06 - of so for us we want a user schema
35:09 - because this is supposed to represent
35:10 - any of the users that log in so when you
35:13 - think about what are important
35:14 - properties of a user that would include
35:16 - these over here that i'm writing out
35:18 - which would be their name their wallet
35:19 - addressed because eventually i want to
35:21 - set this up with meta mask as well as a
35:23 - profile image so that they can put a
35:25 - nice picture and what we're going to do
35:26 - each time we create a schema file we
35:28 - need to import that schema like so
35:29 - import user schema from dot forward
35:31 - slash user schema and then take that and
35:34 - place it in line eight inside this dot
35:37 - concat we're gonna be putting all the
35:38 - schema files we create inside here so
35:40 - let's create another one let's call it
35:42 - ride schema this file is supposed to
35:43 - represent the types of ride services we
35:46 - have remember we set up the static car
35:48 - list like uberx uber black uber black
35:50 - suv this is where we're actually going
35:52 - to pull from sanity the types of rides
35:54 - so the properties that we need to keep
35:55 - track of is going to be ordered by id
35:58 - and the only reason i'm going to use
35:59 - that is so that i can give it a custom
36:01 - order when i call it from sanity alright
36:03 - we also need to give a title and each
36:06 - type is going to have its own price
36:07 - multiplier as you guys saw so we're
36:09 - going to also store that in this
36:11 - document and lastly we can't forget
36:13 - about the icon that goes with it to
36:15 - signify what ride type it is cool so
36:18 - let's go back to our schema.js and add
36:20 - that file into the dot concat awesome
36:22 - next i want to include another file here
36:24 - called trip schema okay and the fields
36:27 - that are going to be important for this
36:28 - document is going to be the right where
36:30 - are they getting dropped off to the
36:31 - pickup where they're getting picked up
36:32 - from and the type of ride that they
36:35 - selected not only that we also need to
36:37 - figure out and store what the price was
36:40 - a ride timestamp would be cool as well
36:42 - as who the passenger is so with the
36:44 - passengers we need to keep a reference
36:46 - of the user that took this ride right
36:48 - it's going to be different if a
36:49 - different user took the ride okay cool
36:51 - hopping back into schema i'm going to
36:53 - import that file as well into line 10.
36:56 - cool another thing that we should
36:57 - probably do is go into your terminal hop
36:59 - into the studio folder and type in
37:02 - sanity start once you do that we can hop
37:04 - over to localhost 3333
37:07 - desk which will automatically go for us
37:09 - the cool thing about sanity is we can
37:10 - actually update our database from here
37:13 - with this really nice ui right so if i
37:15 - click on users rides chips we have
37:17 - nothing yet but if i were to go to chips
37:19 - and click this pencil here you can see
37:21 - all the fields that i set up in that
37:23 - schema file alright so if i wanted to
37:24 - actually add a document i could do it
37:26 - from here on localhost which is awesome
37:28 - okay so hopping back into the terminal
37:30 - i'm going to actually deploy our project
37:32 - to sanity by saying sanity deploy and
37:35 - for the host name i'll just say uber
37:36 - blockchain let's go successfully
37:38 - deployed which means i can actually hop
37:40 - over to sanity their website with that
37:42 - link anyone else who's a collaborator in
37:44 - that project will also be able to see
37:47 - this all right now the studio is
37:48 - deployed to sanity itself but i'm just
37:50 - going to be editing on localhost for now
37:52 - cool so after you guys do all of that
37:54 - our sanity database is now set up cool
37:57 - so now that our database is set up we
37:59 - only have these more these two items to
38:01 - do left let's go ahead and make the car
38:03 - list more dynamic what we're going to do
38:05 - to do that is we're going to start
38:06 - making using grok to query our database
38:09 - for the rides right so going into our
38:12 - studio i'm actually going to populate
38:14 - our rides with the assets that we have
38:17 - set up i'm going to take all the pngs
38:19 - and basically create a document to
38:20 - represent a ride type i want to take the
38:22 - time to create a document for each ride
38:24 - type now so i'm going to give this an
38:26 - order by d1 the title uberx and this is
38:28 - the price multiplier along with the icon
38:30 - that goes with it so i'm going to be
38:31 - doing the same thing for the rest of the
38:33 - ride types once i finished up creating
38:35 - those documents i'm going to go ahead
38:36 - and go inside the api folder of our app
38:38 - and we can go ahead and delete the
38:40 - hello.js instead we're going to create a
38:42 - folder called db as well as another
38:44 - folder called map and inside the db
38:47 - folder i'm going to make a
38:49 - getridetypes.js
38:51 - in this file this is where i'm going to
38:53 - be querying for those ride types okay
38:55 - and in order to query the ride types i'm
38:58 - going to go back into sanity and log in
39:00 - click on my project and we're gonna need
39:01 - a couple things from here one of the
39:03 - first things is to see this project id
39:05 - we need to copy that and add that to our
39:07 - env variables and we could do that using
39:09 - versailles okay after you copy the
39:11 - project id go back to sanity and go
39:13 - underneath the api tab we're also going
39:15 - to need the token right and i'm just
39:17 - going to give it the name client
39:18 - generate and copy that token and go
39:20 - ahead and add that as an environment
39:22 - variable as well to brazil there we go
39:24 - we have sani token underscore project
39:26 - underscore id awesome so i'm also going
39:28 - to create a lib folder and within that
39:30 - i'm going to write sanity.js file what i
39:33 - want to do here is essentially set up my
39:35 - sanity client so to do that i actually
39:37 - have to go back into my terminal and in
39:39 - my main project folder path i'm going to
39:41 - add do yarn add hat sanity slash client
39:45 - make sure you download this inside
39:47 - you're out of the studio folder and
39:48 - inside your project folder in the path
39:50 - then you can add this command okay so we
39:52 - could do in the sanity.js file just say
39:54 - import sanity client from at sanity
39:57 - client like so and let's create our
39:59 - client variable and set it equal to
40:01 - sanity client parentheses put in these
40:04 - curly brackets and create this object so
40:07 - the project id is going to be the same
40:09 - as we set it up but we can actually call
40:11 - the process that env here so i'm going
40:13 - to say process that env dot sanity
40:15 - project id cool and then for data set
40:17 - i'll do production api version v1 and
40:20 - for the token we can also call in our
40:22 - env and say process dot env dot sanity
40:25 - token okay and then for ucdn i'm going
40:28 - to say false there you go we set up the
40:29 - sanity client so now that's set up let's
40:31 - import that same client in our
40:34 - getridetypes.js like so and here we can
40:36 - actually set up what we're querying for
40:39 - the cool thing if you go back to the
40:40 - localhost 3333 and type in slash vision
40:43 - what we can do is actually test out what
40:45 - we're creating we can actually make a
40:47 - request to query through here so what
40:49 - i'm going to do is try to figure out how
40:50 - to get the rides that i want and once
40:52 - you do that you can get the list of
40:53 - rides add these curly brackets here and
40:55 - then we can kind of filter our query or
40:57 - make it more specific right so the only
40:59 - things i really want from this is the
41:01 - service the icon url and the order by id
41:05 - and a cool thing we could do is actually
41:06 - just order each of these by its id right
41:09 - so if i run this i can actually see that
41:11 - this is what i get back which is exactly
41:13 - what i wanted so this is a really
41:14 - awesome tool by sanity which we can
41:16 - actually just copy this query and paste
41:18 - it into this variable that i have set up
41:20 - inside my getridetypes.js cool so now
41:23 - that we know what we're querying for i'm
41:24 - going to create a ride types function
41:27 - and let's make this asynchronous okay so
41:29 - within that function setup will try
41:30 - catch and if at any point there's in our
41:32 - catch we're going to send that error
41:34 - message okay and in our try block i want
41:37 - to make sure that we save sanity
41:39 - response in a variable and set it so
41:40 - that we await the fetch request for our
41:43 - query and if that's successful i want to
41:46 - send the status message that it was a
41:48 - success awesome okay cool now that our
41:50 - query is set up we can go ahead and
41:51 - actually remove the static card list
41:53 - that we set up earlier so if you go over
41:55 - to ride selector go over to the car list
41:58 - variable that we set up you can just
41:59 - highlight all this and delete it because
42:00 - now we can actually just pull the car
42:02 - list straight from sanity so i'm going
42:04 - to do instead of having the car list is
42:06 - i'm going to set up this use effect that
42:08 - will make that call to the database okay
42:10 - so i'm going to error car list is not
42:12 - defined i'm gonna go ahead and set up a
42:14 - use effect now and here it says carlos
42:15 - is not defined so what i'll do next is
42:17 - actually just create a use effect here
42:19 - in line 27 and what i want to do is set
42:21 - up an asynchronous function it's going
42:23 - to fetch the api route that we set up to
42:25 - get the ride types okay and i'm going to
42:26 - store that in a variable called data and
42:29 - i want to make sure we turn that
42:30 - response into json okay what i want to
42:32 - do next is actually we're going to need
42:34 - to use the use state hook from react
42:36 - let's set that up at the top here in
42:37 - line 22 const car list and set car list
42:40 - we can initialize the use state to an
42:42 - empty array and from there i want to do
42:45 - set car list in line 30 and set it to
42:48 - data dot data right because i want to go
42:50 - get my variable and then the data within
42:52 - that variable like so which data.data
42:55 - should be what i queried for which is
42:57 - the car list okay and it seems like
42:59 - we're still getting errors okay what
43:00 - i'll do now is what i think will fix it
43:02 - is go do export default get ride types
43:04 - because i can't forget to export this
43:06 - function okay ah i see the issue now it
43:09 - says res is not defined and that's
43:10 - probably because i forgot to put res as
43:12 - a parameter as well so i'm gonna do rec
43:14 - comma res and it should work just fine
43:17 - hey there's our query let's go okay so i
43:19 - can take out this console log and i
43:21 - think i saw another error yes so it says
43:23 - invalid source prop for the images
43:25 - because cdn sandy is not configured
43:28 - configured under images i see okay so we
43:30 - need to do is just go ahead into your
43:32 - next.config.js
43:34 - and if you have this issue guys set up
43:36 - an images key which has the value of an
43:39 - object and in that object you need to
43:41 - put in domains that we can allow this to
43:43 - use which is the
43:44 - cdn.sanity.io so now we should be
43:46 - allowed to use that and if i hit save
43:48 - for cell dev again to run my project
43:50 - once more fingers crossed hey there it
43:52 - is let's go awesome after that the car
43:55 - list is dynamic let's go we are able to
43:59 - pull the ride types straight from sanity
44:01 - our own database and this is looking
44:04 - amazing so let's go ahead and put that
44:05 - to do item to done let's work on the
44:07 - next thing all right guys so the only
44:08 - thing left in our in progress section is
44:11 - to get the location coordinates what
44:13 - does that mean well i want to be able to
44:15 - type in the location i want to be picked
44:17 - up from and where i want to be dropped
44:19 - off and i should see that reflected on
44:22 - my map box right so to get that started
44:24 - let's go ahead and create another file
44:26 - and let's call this file get location
44:28 - coordinates okay within that file i'm
44:31 - going to create a function let's create
44:32 - a function called get location
44:34 - coordinates it's going to be
44:35 - asynchronous and of course we'd have to
44:37 - export this function in that function in
44:39 - line 2 let's set up our map box url by
44:41 - making that a variable and setting it
44:43 - equal to the url that we're going to use
44:45 - we're going to make this url dynamic so
44:47 - what we're going to do is this we don't
44:48 - have this yet but i'm going to set up i
44:50 - want to call on mapbox places api url we
44:54 - don't have an environment variable for
44:55 - that yet but that's the url where we can
44:57 - actually make this api call right now to
45:00 - set up the endpoint let's do a forward
45:01 - slash let's do rec.body.
45:04 - right put that in a template literal
45:06 - like so and let's do dot json question
45:08 - mark access token and that's going to
45:10 - equal help.enb mapbox access token right
45:14 - so like i said we should probably set up
45:16 - that variable so hop on back to versus
45:18 - your versailles project and in the name
45:20 - i'm going to give it the same name that
45:21 - i have the mapbox places api url awesome
45:24 - as the value put it put the url inside
45:26 - the value add and there we go awesome so
45:29 - now this is actually going to work all
45:30 - right what this url is going to do it's
45:32 - essentially going to use their api make
45:34 - a request for the location that we pass
45:37 - in for mapbox awesome so i hope that
45:39 - makes sense what i want to do next is
45:40 - set up this try catch block in line four
45:42 - and let's set up our api call in the try
45:45 - block by saying kant's response is going
45:47 - to equal and let's fetch that response
45:50 - and don't forget to set up an away here
45:51 - the next thing you want to wait for is
45:53 - let's set up a variable called const
45:54 - data and set that equal to dot
45:56 - response.json so essentially let's turn
45:58 - our response to json is that successful
46:01 - the response we get back is 200 so let's
46:03 - send a message that says it was success
46:05 - and set property to this and of course
46:07 - if anything goes wrong at all let's set
46:09 - up our catch which will send us an error
46:12 - message essentially beautiful okay so
46:14 - the next thing i'm going to do is i'm
46:15 - going to create a folder and i'm going
46:17 - to call this context we're going to do
46:18 - now is set up our context using react
46:21 - contacts if you didn't know react
46:23 - context is used for state management
46:25 - essentially it will take our state and
46:26 - make it global so that we can access it
46:29 - anywhere in our app so in order to do
46:31 - that we have to set up that context so
46:33 - from here let's create another file and
46:34 - i'm going to call it uber context
46:37 - awesome so if we're going to use reacts
46:39 - contacts api let's import create context
46:42 - from react in our ubercontext.js and
46:45 - then in line three i want to say export
46:46 - const over context equals create context
46:49 - let's see let's actually use that
46:50 - function we have so i'm essentially
46:52 - creating a context for uber okay line
46:54 - five i'm gonna do export cons uber
46:56 - provider equals right notice how it's
46:58 - going to take in children equals and i'm
46:59 - going to return here i'm going to say
47:01 - i'm going to return the
47:03 - ubercontext.provider for now we're going
47:04 - to set this value equal to empty but
47:07 - whatever i pass into this value is going
47:09 - to be what i'm going to have access to
47:10 - globally so keep that in mind so in
47:12 - between the ubercontext.provider put in
47:15 - the children that we pass in and then
47:16 - we're going to need some other react
47:18 - hooks here so i'm going to import use
47:20 - state and use effect and at the top of
47:22 - our uber provider i'm going to set up a
47:24 - couple of state variables bam there we
47:26 - go so here are my state variables i'm
47:28 - going to need to keep track of the
47:29 - pickup state the drop-off state pick up
47:31 - coordinates and the drop-off coordinates
47:33 - awesome so i'm going to set up this use
47:34 - effect next and here i'm going to set up
47:36 - this async and then he in the use effect
47:38 - i'm going to set up the async function
47:40 - like so an anonymous async function in
47:43 - that i'm going to do an await
47:44 - promise.all so i'm actually going to
47:46 - create a promise so on line 5 i'm going
47:48 - to say create location coordinate
47:51 - promise which is going to take in the
47:52 - location name and the location type so
47:55 - let's create that promise by returning
47:57 - the new instance of the promise object
47:59 - in javascript this is what we use to
48:01 - create a promise okay and then of course
48:03 - inside the argument of the promise
48:05 - object i'm gonna i'm gonna put in an
48:06 - asynchronous function which is gonna
48:08 - have resolve or reject and within that
48:10 - anonymous function i'm gonna make an
48:12 - await and it's gonna essentially fetch
48:15 - essentially gonna fetch for the location
48:17 - coordinates and i'm gonna set that equal
48:19 - to the response the next thing i'm gonna
48:20 - do is set up next i'll write a couple
48:22 - headers here the method will be post in
48:24 - the headers i'm gonna put content type
48:26 - it's gonna equal this and the body make
48:28 - sure to json.stringify and have this
48:30 - inside of the scope all right and then
48:32 - line 17 i'm going to write const data
48:35 - equals await
48:36 - response.json awesome so in line 19 i'm
48:39 - just going to write an if statement that
48:41 - says if our message was a success it's
48:43 - going to lead to a switch statement
48:44 - that's going to say if the location type
48:46 - is pickup set the pickup coordinates to
48:48 - that data and then break another
48:50 - scenario would be if the case is if the
48:52 - location type is drop off then we're
48:54 - going to update our drop-off coordinate
48:56 - state with the data okay and of course
48:58 - that would mean it's a result else if
49:00 - the data.message was not a success then
49:03 - the promise was rejected okay then what
49:05 - i want to do next is in the go back to
49:08 - the use effect and put if pick up and
49:10 - drop off exist right make sure all the
49:12 - promises are resolved we're going to
49:14 - wait for all the promises and the
49:16 - promises that i'm going to be waiting
49:17 - for is to be resolved is going to be the
49:19 - pickup promise and the drop off promise
49:21 - essentially okay and in the dependency
49:23 - module 956 let's put in the pick up and
49:26 - drop off okay and let me highlight all
49:28 - of these lines this actually should be
49:29 - within the scope of the uber provider
49:32 - here in line 12 12. cool amazing guys so
49:35 - we set up the contacts as well as
49:36 - getting the location coordinates let's
49:38 - move on okay cool if i hit save though i
49:41 - want to notice an error in my console
49:43 - you're going to see a message that says
49:44 - something along the lines warning each
49:46 - child in a list should have a unique key
49:48 - prop if you ever see that that means
49:50 - whenever you're mapping through
49:51 - something it should also have a unique
49:53 - key prop that you pass down right so we
49:55 - can actually solve this issue by either
49:57 - giving it a direct key right for each
49:59 - one or in your map function it takes in
50:02 - a second argument which we can name
50:03 - anything i call it index mostly because
50:05 - depending on how many items they're on
50:07 - there are that index will go from zero
50:09 - one to an increment onwards so what we
50:11 - could do is actually use that parameter
50:13 - and in our key and set that equal to the
50:16 - index all right now if i save this boom
50:18 - no more warning we're good to go and
50:19 - with that our context is set up as well
50:22 - cool so we can go ahead and move get
50:24 - location coordinates to done on our
50:26 - notion board and we can also just put
50:27 - create context to done as well and that
50:30 - means we're actually more than halfway
50:31 - done to this project so congratulations
50:33 - if you made it this far let's keep on
50:35 - crushing it what i'm gonna do now is
50:36 - move a couple to do's to the in progress
50:39 - section again which will be place pins
50:40 - on the map right we need to put pins on
50:42 - where i want to go and where i want to
50:44 - be picked up from as well as we need to
50:45 - be able to log in through metamask and
50:48 - lastly save trip to sandy so those are
50:49 - the three things i'm going to be
50:50 - tackling next once that's updated let's
50:53 - get back to the code the next feature i
50:55 - want to work on is the functionality
50:57 - where i'm going to be able to enter my
50:59 - pickup location and where i'm going and
51:01 - there should be two pins that showcase
51:03 - where that is so essentially add markers
51:05 - using mapbox so to get that done let's
51:07 - hop over to our map.js okay and let's
51:10 - import all the contacts that we need so
51:13 - to do that we're going to say import use
51:15 - context from react and we're also going
51:17 - to import our uber contacts from our
51:19 - contacts folder just like that cool and
51:22 - if i save this we're gonna see this
51:23 - error that's because i just forgot that
51:24 - we need to go to our underscoreapp.js
51:28 - file and do you see this main component
51:29 - here line six we need to wrap that
51:31 - component with our uber provider so
51:34 - import uberprovider from context and
51:36 - let's wrap this in there so i'm going to
51:38 - do is type in uberprovider in between
51:40 - you can put that component back in there
51:42 - cool so now it's done we now can do some
51:44 - state management within our app so if
51:46 - you remember if you go back to your
51:47 - ubercontext.js everything inside this
51:50 - value equals here is all the variables
51:52 - that i want to be able to access
51:54 - globally that makes sense to you i'm
51:56 - going to go add all of those variables
51:57 - now as you can see this is the list
51:59 - pickup set pickup the coordinates all of
52:01 - that stuff all those wonderful things so
52:03 - awesome but now to actually use those
52:05 - variables let's set up a destructured
52:07 - object so let's destructure our used
52:09 - context we can say const curly brackets
52:12 - pick up coordinates drop off coordinates
52:14 - equals our use context and then you can
52:16 - pass an uber context within that cool so
52:19 - now i have access to those variables i
52:20 - can implement it into my map so what i'm
52:22 - going to do is add a function here
52:23 - called add to map right so with this
52:25 - function i'm going to add those markers
52:27 - like i mentioned so within that function
52:28 - it's going to take two parameters map
52:30 - and coordinates and within that function
52:32 - itself let's make a variable marker one
52:35 - and let's assign the new mapbox marker
52:38 - with these coordinates so what i mean by
52:40 - that is we're going to write mapbox
52:42 - gl.marker parentheses as you can see and
52:45 - just do dot set longitude and latitude
52:47 - to the coordinates that i'm going to
52:48 - pass in and then just put in this add to
52:50 - map to just stick that pin based on
52:52 - those coordinates that we pass in cool
52:54 - all right so now that function is done
52:56 - hop over to line 22 and i'm just going
52:57 - to have a bunch of if statements here
52:59 - that if we have pickup coordinates call
53:02 - the add to map function and then line 26
53:04 - if we have drop-off coordinates if that
53:06 - exists add that to the map function okay
53:09 - and then another if statement that i
53:10 - want to add is if pickup coordinates and
53:13 - drop off coordinates exist you want to
53:14 - add this little function here just say
53:17 - map that fit bounce and then pass in
53:19 - those coordinates okay and if you
53:21 - remember how we have the pickup and drop
53:23 - off state set up we're just manually
53:26 - changing it when i click we want to
53:27 - involve our contacts here so we can take
53:29 - that state out now pick up and drop off
53:31 - state we can take that pickup and drop
53:33 - off state now and let's incorporate our
53:36 - context api here so i'm going to say
53:38 - import use context and import uber
53:40 - context again but this time in my
53:42 - location selector.js so after you remove
53:44 - the pickup and drop off states we don't
53:46 - need that so let's involve our context
53:48 - so i'm just going to paste in our use
53:50 - context here and destructure it and get
53:52 - the variables that i need so i'm going
53:54 - to need pickup setup drop off and set
53:56 - drop off and you can set that equal to
53:58 - use context and just pass in uber
54:00 - contacts and of course if you want to
54:01 - actually do this we need to import use
54:03 - context hook from react and uber
54:06 - contacts from our contacts folder okay
54:08 - let's type in santa monica and let's
54:10 - type in i don't know sophie stadium got
54:13 - error add to map is not a function okay
54:15 - let me just take a look saying add to
54:16 - map is not a function oh i know it's
54:19 - because let's put all those if
54:20 - statements inside this use effect there
54:22 - you go so try this again santa monica
54:24 - and go to sophie stadium open look at
54:27 - that we got an internal server area i
54:28 - got internal server error because cannot
54:31 - read property of zero oh i see one thing
54:34 - that you have to make sure when you're
54:35 - doing the mapbox url that your env files
54:38 - are the same name so what i'm going to
54:39 - do here is actually update the end of
54:41 - this url to now say process that env
54:44 - next public that's how i have it saved
54:47 - all right so i'm going to type in santa
54:48 - monica and let's type in sophie stadium
54:50 - as well sophie stadium and bam let's go
54:54 - those are the coordinates of those
54:56 - places awesome so that error looks like
54:58 - i had to update my url with the correct
55:02 - env name which was next public access
55:04 - token so once that's all good and done
55:07 - we should be able to see the coordinates
55:08 - of what i typed in okay so i'm just
55:09 - going to log the pickup coordinates and
55:11 - drop off coordinates inside my map.js
55:13 - just to see if i'm getting the same
55:15 - thing here so again santa monica and
55:18 - sophie stadium okay let me just check
55:19 - inspect element and go over to my
55:21 - console let's see let's see it all right
55:24 - and the other array let's go so we're
55:26 - actually getting coordinates back which
55:27 - is a really good sign there you go so
55:29 - now anytime pickup coordinates and drop
55:31 - off coordinates exist then i'm going to
55:33 - be able to fit the bounds here so i'm
55:34 - going to put that in the dependency
55:36 - module of my use effect in line 37 and
55:38 - now let's see it in action awesome look
55:40 - at that there's the two pins so if you
55:42 - don't see anything right here there you
55:44 - go now it's zoomed in and now you can
55:45 - see the two pins okay let me try to see
55:47 - if i can get the padding up more so that
55:49 - we can see a nice line let's just set
55:51 - the pattern to 400 and i think it's fine
55:53 - awesome so let's put place pins on map
55:55 - and our notion to done in this section
55:57 - i'm going to be showing you guys how to
55:59 - authenticate a user using metamask all
56:01 - right so to do that let's hop over into
56:03 - our contacts reason being is because we
56:06 - want to be able to check if the user is
56:08 - logged in anywhere in my app head over
56:10 - to ubercontext.js
56:12 - and i'm going to paste this code in here
56:14 - so i'm going to make a variable called
56:16 - let metamask in line 13 we're going to
56:18 - have if statement checking if the window
56:20 - is undefined metamask is going to equal
56:22 - window ethereum and the important part
56:24 - here is line 17. we're going to have a
56:25 - function called check if wallet is
56:27 - connected and it's going to be
56:29 - asynchronous of course and in line 18 if
56:31 - the window.ethereum does not exist or is
56:34 - not there we just want to return that
56:36 - basically means if you are not logged in
56:38 - don't do anything okay from there i want
56:40 - to set up this try catch block and in
56:42 - the catch if there is any sort of error
56:44 - we're going to console.log here in the
56:45 - try block though i want to make sure i
56:47 - set up a variable called address array
56:49 - just like so and i'm going to set this
56:50 - equal to to an await
56:52 - window.ethereum.request
56:54 - essentially make a request for an
56:56 - account and in line 24 if the address
56:59 - array that length is greater than zero
57:01 - or there is a valid wallet address this
57:03 - is where we want to set the current
57:05 - account so let's actually make that and
57:07 - keep track of it using state so in line
57:09 - 10 i'm going to say kant's current
57:10 - account and set current account equals
57:12 - use date and you're going to place that
57:14 - in line 26 set current account to the
57:16 - address array bracket 0. okay and
57:19 - underneath i'm going to have this
57:20 - function here request to create a user
57:22 - on sanity and pass in the address array
57:25 - bracket 0 as well and obviously we don't
57:27 - have that function yet but what i want
57:29 - to do with that function make a request
57:31 - to our database to create a user
57:33 - document if it doesn't already exist so
57:36 - let's actually set up that function
57:37 - let's make a request by setting up this
57:39 - function so in line 80 i'm going to say
57:41 - const request to create user insanity
57:43 - equals asynchronous and the parameter is
57:46 - going to be the address that i pass in
57:47 - and of course if we're not logged in or
57:49 - if there's no window.ethereum just
57:51 - return okay set up another try catch
57:53 - block and in the catch block do another
57:55 - usual error console log the error
57:57 - awesome and i want to stop there for now
57:58 - because what i need to do is actually
57:59 - create a file so under my api folder
58:03 - under db let's make a create user.js
58:07 - this is where we're going to make a
58:07 - request to our backend to create the
58:09 - user so let's import the client at the
58:11 - very top here so import curly bracket
58:13 - client from our lib sanity folder and
58:16 - then here in the variable i want to put
58:18 - const create user insanity this is
58:20 - actually the function of us creating
58:21 - that user document which we set up with
58:23 - our schema okay so it's going to equal
58:25 - async rec response and of course we have
58:28 - to export it at the bottom and within
58:29 - that function let's set up the try catch
58:31 - okay and then the catch we're just going
58:33 - to send a status of error with the error
58:36 - message and in the try block like i said
58:38 - this is where we create the user
58:39 - document into our database so in the
58:41 - trial block let's write constant
58:43 - user.equals the object right so within
58:45 - that object think about the properties
58:47 - that this user document should have so
58:49 - the type should be users of course the
58:51 - id is actually going to be the wallet
58:53 - address so we can say
58:55 - rec.body.userwallet address the name
58:56 - will be
58:57 - rec.body.name and the wall address would
59:00 - actually be the user wallet address as
59:02 - well okay after we set up that object in
59:04 - line 12 let's set up the await
59:06 - client.create if not exist user doc the
59:09 - cool thing about sanity is that document
59:11 - doesn't exist sanity will create it
59:13 - already it'll already check for us if it
59:15 - exists or not with this method and of
59:16 - course pass in the user doc and that's
59:18 - just something really cool that sandy
59:20 - does and of course if that is successful
59:22 - send a status of 200 message saying it
59:25 - was success awesome so now that we were
59:27 - able to create user insanity function we
59:29 - can hop back over to our uber contacts
59:32 - and in line 83 in that try block we can
59:34 - make the fetch request there so doom do
59:37 - await fetch and the api route that we
59:40 - just set up to create a user and if you
59:42 - think about it what kind of request is
59:43 - this are we trying to get data or we're
59:45 - trying to post data we're trying to post
59:47 - data so for the method i'll say post
59:49 - because it's going to post a new user to
59:51 - our db and if everything i just said was
59:53 - just new information to you leave a
59:54 - comment down below letting me know if
59:56 - you want me to go fully in depth on apis
59:58 - and how to colony awesome let's get back
60:00 - to the video like i said before we're
60:02 - going to create this is going to be a
60:03 - post so in the headers i'm going to put
60:05 - this as my headers and in the body just
60:07 - say json and pass in the values we want
60:10 - to give to that user document which is
60:11 - going to be user wallet address is going
60:13 - to have the value of the address that i
60:15 - pass in the name for now i'll put blank
60:17 - but one thing we can actually do is hop
60:19 - into your terminal and let's do yarn
60:21 - fake at faker dash js slash faker if
60:24 - you're unfamiliar with faker.js it's
60:26 - basically a javascript library that can
60:27 - generate fake data for you so in our
60:29 - case i want to use faker.js to get a
60:31 - fake name so it will randomly generate a
60:33 - fake name for me and in order to use
60:35 - that i'm going to have to go import at
60:37 - the top of uber context and in order to
60:39 - use faker.js you have to import faker
60:42 - from at faker js faker and now we can
60:44 - use it coming back down to line 91 so
60:47 - instead of an empty string we can
60:48 - actually just say faker.name.findname
60:50 - this will randomly generate a fake name
60:54 - when i create the user next on line 19
60:56 - of the ubercontext.js
60:58 - let's set up a use effect that will
61:00 - check if the wallet is connected like i
61:02 - said we want to be constantly checking
61:04 - if the wallet is connected otherwise you
61:05 - shouldn't be able to use these features
61:07 - and the trips that you set up should be
61:09 - associated with who's ever locked in
61:10 - okay so in the use effect i'll put check
61:12 - if wallet is and now let's actually make
61:13 - a function to connect the wallet so line
61:16 - 39 i want to say cons connect wallet
61:18 - equals async and the anonymous function
61:20 - again you're going to see that it's the
61:22 - same kind of deal and the inside this
61:24 - function in the if statement i'm going
61:25 - to say if there's no window die ethereum
61:27 - just return which i usually try catch
61:29 - block console logging in error and in
61:31 - the try block we're going to set up the
61:33 - variable again for the address array and
61:36 - a weight window.ethereum.request because
61:38 - we want to request a metamask account
61:40 - and if there is a valid account right
61:42 - with this if statement if
61:44 - addressarray.length is greater than zero
61:46 - then we're going to set the current
61:48 - account to the address array as well as
61:50 - make a request to create the user on
61:52 - sanity if there is one and again pass
61:54 - the address array and don't forget once
61:56 - we create those functions i also want to
61:58 - pass that down here to my provider so
62:00 - that i have access to them anywhere in
62:01 - my app so i'm going to one line 30 and
62:04 - let's pass in connect wallet and current
62:06 - account okay now i'm going to my
62:08 - navbar.js because if you remember way
62:11 - back in the beginning of this video i
62:12 - set up a static variable holding the
62:14 - current account over here in line 17. we
62:17 - don't need that anymore because we
62:18 - actually created all the functionality
62:20 - for us to log in already so let's remove
62:22 - the static data and at the top i'm going
62:25 - to import all of my contacts and let's
62:27 - bring in those variables that i created
62:29 - so i'm going to import use context from
62:30 - react and import uber context from my
62:33 - contacts folder and inside the function
62:36 - component of navbar in line 20 i will
62:38 - set up the contacts and destructure it
62:40 - by saying khan's current account and
62:42 - comma connect wallet equals use context
62:44 - and pass in uber context okay cool and i
62:48 - hit save and you can notice that it
62:50 - still looks the same but that's because
62:52 - for me i'm already logged in right so
62:55 - i'm just going to copy my wallet address
62:57 - for now because i'm actually logged in
62:58 - so that's why it still looks the same
63:00 - let's go ahead and check on my sanity
63:02 - and click on users there we go it
63:04 - generated a new user right so when i'm
63:06 - logged in it create a user apparently my
63:08 - name is going to be kim for today's
63:10 - build cool again go into your sanity and
63:12 - your localhost 3333 you can actually
63:14 - click on the user document that was
63:16 - created for me kim so if i click on it
63:17 - you can see the fields are now updated
63:20 - with the information i passed in it
63:21 - generated that fake name for name and it
63:24 - passed in my wallet address which is
63:25 - correct that's it and of course what we
63:27 - set up is working when there is a
63:29 - current account it's going to format
63:32 - that long wallet address using the
63:34 - current account that's left so that
63:35 - looks really nice on my front end but
63:37 - that's what it looks like if i logged in
63:38 - currently we don't have any feature to
63:40 - actually log us in so coming down to 145
63:43 - let's add on click and use that global
63:46 - state that i passed in which is to on
63:49 - click i want to be able to pass in the
63:51 - connect wallet function and that makes
63:52 - sense if i click the login button i
63:54 - should be allowed to connect to my
63:55 - wallet just like that another thing that
63:57 - we need to do is when i log in i should
63:59 - actually pull the user that's connected
64:02 - from my database all right so if i log
64:05 - in my name is kim right from sanity i
64:07 - should able be able to pull kim's
64:09 - information if i already have a user
64:11 - okay so in back into my ubercontext.js
64:14 - 119 i'm going to make a function to
64:16 - request to get current user info all
64:18 - this is always going to be asynchronous
64:20 - pass in the wallet address because i
64:22 - want to use the wallet address and query
64:24 - that with my database to see what user
64:26 - has the wallet address that i pass in
64:28 - and that's what i want to set to the
64:30 - current user within that function set up
64:32 - the try catch again and we're going to
64:34 - catch any errors by console logging it
64:36 - and in the try block i'm going to say
64:38 - cons response equals and await for the
64:40 - fetch call of getting the user info and
64:43 - pass in the wallet address so like i
64:45 - said i'm going to get the user info with
64:48 - the wallet address that i pass in so
64:50 - again if it already exists we're going
64:52 - to get that information so up at the top
64:54 - in line 12 let's set up a state for the
64:56 - current user and if we get a response
65:00 - let's set the current user to data
65:02 - dot data and if you notice we actually
65:04 - don't have that api route set up so in
65:07 - my db folder let's create the get user
65:10 - info.js and you can guess what we're
65:11 - going to do next we're going to import
65:13 - the client again so importing the client
65:14 - in line three creating the asynchronous
65:16 - function for get user info pass in rec
65:19 - and res so just like before when we get
65:21 - the ride types i'm going to set up a
65:22 - variable called query and pass in how
65:25 - i'm going to query for the user info so
65:27 - i'm just going to paste it take a look
65:29 - at what i typed in all this means is i'm
65:31 - going to ask for a user with the wall
65:33 - address of the wild address that i
65:35 - passed in and what i want from that user
65:37 - is the name the while address again and
65:39 - the profile picture if there is one so
65:41 - i'm going to start all of that in a
65:43 - sanity response variable down here at
65:45 - line 12 and set it equal to an await of
65:47 - the client fetching the query that i
65:49 - passed and if that's successful send the
65:51 - status up to and if it's not send the
65:53 - status of 500. okay so i just created
65:55 - that in my context all right so in line
65:58 - 24 i'm going to add another user effect
66:00 - here to check that if there is no
66:01 - current account let's just return but if
66:04 - there is let's make a request to get
66:05 - that current user's info so i'm gonna
66:07 - set that up in a use effect so that it
66:09 - can run when it loads and the dependency
66:11 - module in line 27 pass in current
66:13 - account of course because you only want
66:15 - the use effect when the current account
66:17 - state is updated or changed okay and
66:19 - let's pass in current user into our
66:21 - provider and in our navbar.js let's add
66:24 - current user and destructure it from our
66:26 - contacts in line 20. okay and if you
66:28 - remember in line 31 this is where i
66:30 - passed in my name but let's pass in the
66:33 - current user let's make it more dynamic
66:35 - so on line 31 let me add the curly
66:37 - brackets and paste
66:39 - currentuser.name.split so i don't need
66:41 - to get every single part of that name so
66:44 - i'm going to use split here in line 33
66:46 - and i'm getting cannot read property of
66:47 - name of undefined so let me just console
66:49 - our current user real quick and take a
66:51 - look at that is a big part programming
66:53 - let me go take a look cannot read
66:55 - property name undefined and i'm also
66:57 - getting a 500 internal server error okay
67:00 - next thing i want to try is going into
67:02 - get user info i think the reason is
67:04 - because the sanity response i want to
67:06 - get back the first user so inline 18 in
67:09 - my get user info where it says the data
67:11 - key and the response that send i need to
67:13 - do sanity response bracket zero let's
67:16 - see if that works save hey there it is
67:18 - there's kim awesome now that's done we
67:20 - actually completed two things with our
67:22 - notion we completed create a new user on
67:25 - login as well as we're able to add
67:27 - metamask login so mark those as done
67:29 - let's go bring over calculate price now
67:32 - and we should be good to go awesome so
67:33 - now let's work on saving trip to sanity
67:36 - alright if you remember we create a
67:37 - schema that's going to save all the
67:39 - trips that we take so in order to save
67:41 - trip to save our trip to sanity let's go
67:43 - to the confirm js and if you look in
67:45 - line 22 we have a function set up called
67:48 - store trip details at the moment it
67:50 - doesn't do anything if you look so let's
67:52 - go ahead and get that done so like
67:54 - before we're going to need to make a
67:56 - trip document and pass in all the
67:58 - information we want to pass into story
68:00 - trip details are two things the pickup
68:03 - location and the drop off location okay
68:05 - so coming back to the function in line
68:07 - 11 in the parameters put pick up and
68:09 - drop off make it asynchronous put in a
68:11 - try catch block again console lock the
68:14 - area and in the try block we're going to
68:16 - make an await for a fetch call at this
68:19 - api route for save trips and again don't
68:22 - have that set up just yet and we'll do
68:23 - it much later but think about this with
68:26 - this api call are you making a get
68:27 - request or a post request if i'm saving
68:29 - a trip to my database it should be post
68:32 - so for method i'll put post and for the
68:34 - headers i'll put this content type
68:36 - application slash json cool and of
68:38 - course for the body of that i want to
68:40 - make sure that i pass up the key pickup
68:42 - location as the pickup that i passed in
68:44 - in the drop-off location to be the
68:46 - drop-off state that i pass it okay and
68:48 - if you remember there's a reference to
68:50 - the user that took that trip if i put
68:52 - this in my input santa monica to sophie
68:54 - stadium that shouldn't go to kazi's
68:56 - account that should go to the users
68:58 - that's logged in our case it's kim cool
69:00 - so make sure that's set up for the body
69:02 - key now let's import all the contacts
69:04 - that we want to use for this app and
69:06 - let's destructure all the variables from
69:08 - our used contacts in line 13. so i want
69:10 - to get the const current account pick up
69:12 - and drop off from use contacts don't
69:15 - forget to pass in uber context and we
69:16 - should be good to go so now now we're
69:18 - able to actually pass those in those
69:20 - values because they are exist in this
69:23 - component okay so heading over to our db
69:25 - folder create that file now and call it
69:28 - save trips.js at the top of that file
69:30 - import the client and create the
69:32 - function save trips make it asynchronous
69:34 - with the parameters of rec and res the
69:36 - user will try catch block again and if
69:38 - you notice a lot of the same things you
69:40 - do when you're setting up routes with
69:42 - the apis to sanity with the cloud
69:44 - functions for sanity it's going to be a
69:45 - lot of the same thing so in the catch i
69:47 - want to send a message of 500 server
69:50 - error we need to be able to create the
69:52 - trip document that we're going to post
69:54 - to sanity so i'm going to set up
69:56 - constrip doc equals object what kind of
69:58 - document is this so you're going to say
69:59 - underscore type is the trips the id is
70:02 - going to be the wallet address plus the
70:05 - date we're going to use the date object
70:07 - to put in the date of when the trip
70:09 - happened in the pickup we just get the
70:11 - pickup location and the drop-off
70:12 - location that's passed in next i'm going
70:14 - to actually put in the ride timestamp
70:16 - and format the date so that it looks
70:18 - nice when i post it the next key that i
70:20 - want to put to this trip document is the
70:22 - passenger key which actually has the
70:24 - value of an object again and it's going
70:26 - to have underscore key as the first key
70:28 - which will have a little string here
70:30 - that says the passenger with the wall
70:32 - address as well as the date which i will
70:34 - format once again next is here you want
70:37 - to put reference as the key and what
70:39 - we're referencing is the user that's
70:41 - logged in so i'll say
70:42 - rec.body.userwallet address and what
70:44 - type the type of this is going to be
70:46 - reference essentially what that means is
70:48 - whatever chip that i take it should
70:50 - reference the user that took okay
70:52 - another thing that i want to pass in is
70:54 - the price of that trip as well as the
70:57 - selected ride to b the value of whatever
71:00 - the selected ride was and if you notice
71:02 - actually don't have the price and
71:04 - selected ride property set up so from my
71:06 - use contacts let's add price and
71:08 - selected ride on line 13. and my uber
71:11 - contacts.js let's create those two
71:13 - states for selected ride and price and
71:15 - pass it down into value so when i'm
71:17 - actually destructing them it can have
71:19 - access to it cool set up now okay now
71:22 - time to update our save trips document
71:24 - so go to savechips.js you can also add
71:27 - the price and ride category so for the
71:29 - price i'm just going to do up with parts
71:31 - float and pass in the price and for
71:33 - right category i'm just going to write
71:35 - record.body.selectedride.service
71:38 - and then going into the ride selector in
71:40 - this use effect let's actually set the
71:42 - selected right to be data.data bracket
71:45 - zero okay and then coming down to line
71:47 - 43 of the red selector i'm just gonna
71:49 - paste this in i'm gonna paste this in
71:51 - this is gonna change the class name of
71:52 - that div with this ternary operator
71:54 - saying that if there is a selected ride
71:57 - that service equals the car that service
71:59 - then the style is going to be that
72:01 - selected car if not it's just going to
72:03 - be the regular style.car all right so if
72:05 - i save this selected right is not
72:07 - defined cannot read properties of
72:08 - undefined reading service all right so i
72:10 - think what i'm going to do now is go to
72:12 - the context or uber for the set selected
72:14 - i'm going to pass in an empty array and
72:16 - of course can't forget to pass set
72:19 - selected ride into my value of the
72:21 - provider and don't forget in that values
72:23 - pass in set price as well and of course
72:25 - in line 22 i don't want to put this in a
72:28 - new state i want to set this up i'm
72:29 - going to set up a use context here okay
72:31 - and don't forget to import use contacts
72:33 - and import our uber context so that we
72:35 - can pass it in and in ride selector i'm
72:38 - going to try putting using state to put
72:40 - my car list and set car list here
72:42 - instead i'll put use state and import it
72:45 - up instead of passing it through context
72:47 - and i hit save any errors let's go it
72:49 - works so what i could do now once this
72:51 - loads you can see that if i click on any
72:53 - of these cars it will have the styling
72:55 - of selected car and that's what that
72:57 - ternary operator was for before nice
73:00 - okay and then in my save trips can't
73:02 - forget to add in line 22 in my save
73:04 - chips.js client. let's use the method to
73:07 - create the document if it doesn't exist
73:09 - and then send that status message i
73:11 - click on uber black i hit confirm let's
73:13 - see what happens let's go we got a trip
73:15 - it's untitled the trip prices there's
73:17 - the there is the trip type the time
73:19 - stamp and of course we didn't enter a
73:21 - drop off or pick up so that's not going
73:23 - to show up that should be blank so now
73:25 - i'm going to try to enter a pickup and
73:27 - drop off location so again i'll use the
73:29 - same example santa monica sophie stadium
73:31 - there you go see the pins santa monica
73:33 - and sophie stadium there are the pins
73:35 - click on black suv confirm let's see if
73:38 - that's there awesome so we're able to
73:40 - save the trip to sanity there might be
73:42 - little bugs here and there but we'll
73:44 - work on that cool so it looks like we're
73:45 - able to save trips now so let's go ahead
73:47 - and mark that as done in our notion and
73:49 - looks like next is let's calculate the
73:51 - price if you look at our notion we only
73:53 - have two more things left all i have
73:55 - left is to calculate the price and then
73:57 - actually charge the user with that
73:59 - pricing because at this point we're
74:00 - actually able if i reset my sanity here
74:02 - we're actually able to see the save the
74:04 - trips and the price and the reference to
74:06 - the user which is amazing right and when
74:08 - i talk about calculating the price if
74:10 - you look at the list of rides what you
74:12 - see here in ethereum is actually just
74:14 - the price multiplier itself what uber
74:16 - needs to do is calculate the base price
74:19 - first so what i mean by brace price is
74:21 - this the base price is essentially the
74:23 - length of the trip in seconds right and
74:24 - we can figure out with the map box api
74:26 - adjusted the traffic at a given time
74:28 - obviously what we'll do is we'll call
74:29 - the api that will get us the length of
74:31 - the trip in seconds based on the current
74:33 - traffic then we're going to divide that
74:34 - by 10 to the power of 5 just to get a
74:37 - realistic price of the calculation when
74:40 - we send it back in ethereum this is not
74:42 - exactly what uber uses or the formula
74:44 - but what we get back is something along
74:46 - the lines of a realistic price that we
74:47 - get so essentially that's the formula so
74:49 - let's get coding so let's dive right in
74:51 - to the pricing okay so what i'm going to
74:52 - do is within my map folder we actually
74:55 - need to get the duration or the distance
74:58 - in seconds of the trip like i mentioned
74:59 - before so in your map folder create a
75:01 - get duration.js
75:03 - set up an asynchronous function like
75:05 - this and we're going to make another api
75:07 - call to calculate that so make a
75:09 - variable called mapbox url set it equal
75:12 - to this string so right we want to make
75:15 - use of our env variables here so
75:17 - process.env map box directions api url
75:21 - we're gonna get the pickup location the
75:23 - pickup coordinates the drop off
75:24 - coordinates pass in the token and after
75:27 - that we make a try catch response and
75:29 - then let's set that equal to an await
75:31 - where we make fetch request to the
75:33 - mapbox url that i set up once that's
75:36 - resolved set that variable to data and
75:38 - we're going to make another await
75:40 - turning that response to json if that's
75:42 - successful send the stack of success and
75:44 - of course in our cache it will catch any
75:46 - errors sending a status of 500 meaning
75:48 - internal server error so let's set up
75:51 - some more contacts going back to
75:52 - ubercontext.js in line 15. i'm going to
75:55 - set up my use and create a state
75:57 - variable called base price and set base
76:00 - price just like that okay within here in
76:02 - line 32 we need to set up another use
76:04 - effect in a dependency module i'll put
76:06 - up if the pickup and coordinates drop
76:08 - off coordinates change that's the only
76:10 - time i want this used effect to run and
76:11 - if there is no pickup coordinates or
76:13 - there's no drop off coordinates just
76:15 - return otherwise i'm going to set up
76:17 - this asynchronous function and make an
76:19 - await fetch call to get the duration
76:22 - right and from there i want to post the
76:24 - pickup coordinates and the drop off
76:26 - coordinates and send that over to my get
76:29 - ride types api that i set up alright so
76:31 - i can take out going back to write
76:33 - selector i can take out that base price
76:35 - that i had set up i'll actually just
76:37 - pull that from my contacts which means
76:39 - don't forget to set it up in the value
76:41 - to add all those variables that we need
76:42 - so add to my uber context provider in
76:45 - the value and in the
76:46 - confirm.js file let's go into our
76:49 - confirm.js and in line 47 where it says
76:52 - confirm here and selected write that
76:54 - service we also want or to write or
76:56 - uberx because we want either order to
76:58 - show up if one doesn't exist the other
77:00 - one will pop up and so now what we could
77:02 - do is coming down to line 47 is add some
77:05 - curly brackets here and make sure that
77:07 - all of those variables exist so we can
77:09 - say pick up coordinates and drop off
77:11 - coordinates and ride selector hitting
77:13 - save now it says uberx is not defined
77:15 - because it thinks it's a variable just
77:16 - put that into a string and that should
77:18 - be fine so i'm just going to type in
77:19 - santa monica sophie stadium let's see if
77:22 - it's going to calculate the price let it
77:23 - load for a second awesome okay cool so
77:25 - once the map box settled we can look
77:27 - over by the price and it actually says
77:28 - na right so at some point it's not
77:30 - actually sending back a number so let's
77:32 - go check this out at ride selector let's
77:33 - console.log what we're getting back as
77:35 - the base price okay let me just check
77:36 - out this error data only absolute urls
77:39 - are supported so what that tells me is
77:40 - to go into get duration and let's just
77:43 - console log the mapbox url just in case
77:45 - okay i'm just going to reset my terminal
77:47 - by running the cell by clearing it and
77:49 - then running versus dev again i'm going
77:51 - to type in the type in santa monica and
77:53 - sophie stadium see what comes up i'm
77:55 - going to hit enter right so our pins are
77:57 - working and if you look there is the
77:59 - price i'll hit confirm let's take a look
78:01 - hey there we go that's the trip price
78:03 - let's go so not only we are able to
78:06 - calculate the price now we're still also
78:08 - able to save that as our trip with the
78:10 - new price this is looking amazing so far
78:14 - okay with that we can move calculate
78:16 - pricing to done and there we go we have
78:18 - one thing left if you guys made it to
78:20 - this video and you're at this part in
78:22 - the code you are crushing it so with the
78:25 - last step we need to do is just charge
78:26 - this user and let's deploy the whole
78:29 - thing to versailles are you guys so
78:30 - excited i'm excited let's keep on coding
78:33 - we need to charge this user with the
78:34 - price that we calculated meaning we're
78:36 - going to send a request to charge them
78:38 - to mask so let's hop over to our uber
78:40 - context and let's add that metamask
78:42 - variable in there that i set up
78:44 - previously okay going into confirm.js
78:46 - let's add that metamask variable in our
78:49 - uber context in line 13 so that we can
78:52 - call it in our js and go over to your
78:54 - store trip details within the trap the
78:57 - try block in line 40. let's make an
78:59 - await here and do metamask.request we
79:02 - can send that transaction over alright
79:05 - so the method is eth underscore send
79:07 - transaction with the params being from
79:10 - and the value of that being current
79:11 - account and then for two we can send it
79:13 - to process.enb next public uber address
79:16 - so you guys should know what that means
79:18 - at this point essentially we're using
79:20 - the next public uber address as the
79:22 - wallet where you're going to send money
79:24 - to so think of this as us sending money
79:26 - to uber if you guys want to send me a
79:27 - theory go for it this is my wallet
79:29 - address okay but yes i can switch
79:31 - between these two wallets so to prove
79:32 - the payment and of course we don't have
79:34 - that environment variable set up so
79:36 - let's set it up in versailles so going
79:38 - into resell and under the environment
79:40 - variables tab with the name make sure
79:41 - it's the same we learned from our
79:43 - mistakes let's type in next public user
79:45 - address paste in the wallet address that
79:47 - you want to send money to what you
79:49 - consider as uber and let's add that in
79:52 - so now we're actually able to use that
79:53 - so essentially what i did is i am going
79:56 - to send money based on the price that is
79:59 - calculated and we're going to send it
80:00 - over to uber quote unquote so of course
80:03 - whenever you make a new environment
80:04 - variable to versailles let's reset our
80:06 - terminal and type in vercell dev again
80:08 - to run the project and of course we have
80:10 - to make this gas property here and type
80:12 - this in and for the value paste this in
80:14 - and pass in price okay so just to clear
80:16 - my terminal let's also make sure to yarn
80:19 - and ethers because we're going to need
80:20 - that in order to let this run that's why
80:22 - you see this error can't resolve ethers
80:24 - let's import so if we once we do yarn at
80:27 - ethers go ahead and import ethers in
80:29 - your confirm.js rerun your terminal
80:31 - again and i'm just going to refresh my
80:33 - page and there you go no more ethers
80:34 - area very nice so i'm going to just try
80:36 - this out again i want to type in santa
80:38 - monica let's actually go to marina del
80:40 - rey there you go and that's the pricing
80:43 - looks good so let's confirm that ride
80:45 - let's hop over so what should happen
80:47 - when we confirm the ride is that we
80:48 - should be able to send our transaction
80:50 - to that uber account and there we go
80:52 - look at that we're gonna get a
80:53 - notification saying that this account is
80:55 - going to the price that i calculated to
80:57 - the uber wallet that i set up and if you
80:59 - look at the details you can actually
81:02 - view this on ether scan to verify that
81:03 - this was an actual transaction that you
81:05 - guys made on the rinkeby testnet and
81:08 - since it's actually sending it to that
81:09 - test net it's going to take a couple
81:10 - minutes to update the blockchain and
81:12 - voila success awesome all right so we
81:15 - were able to send money to the uber
81:18 - account amazing so let's go we finished
81:21 - everything in our notion and the last
81:22 - thing we need to do is make sure we
81:24 - deploy to versailles so again i'm going
81:26 - to write recell here to upload what we
81:29 - have to my versailles project are you
81:31 - guys ready to deploy let's do it okay so
81:33 - once you do that you should see that
81:34 - it's building we can watch that over
81:36 - here in the overview and we see the most
81:38 - beautiful line at the bottom there done
81:41 - and if you click on this link you should
81:42 - see the actual code live in this
81:45 - deployable link so you can send this to
81:47 - your friends your mom this is amazing so
81:50 - be sure to add this to your portfolio
81:52 - and if you thought this tutorial was
81:53 - amazing feel free to drop a like down
81:54 - below and if you haven't already watch
81:56 - our previous tutorial on twitter i'll
81:59 - see you guys in the next video peace

Cleaned transcript:

we got uber for you today but with blockchain so we thought how about you pay a need and you log in with metamask wouldn't that be cool that's what you're gonna get so let's just go right into the app and not waste a lot of time i go into the app i can log in with metamask boom i'm already authenticated you can see at the top right i'm able to get in let's go to our database and our back and restoring our users rides and trips as you can see and every time you log in it actually creates an account for you with your wallet address attached so let's say my name was bobby adams i could change it to whatever i want even clever programmer i can hit publish once my sanity backend updates when i go back to my database we're good to go you can see my name is now says clever at the top you know short for clever programmer so it just shows the first name there i wanna ride i wanna go somewhere don't you so i'm gonna type in santa monica to let's go to sofie stadium now as soon as i'm done typing that look at that in real time santa monica shows up so far stadium shows up and mapbox automatically draws that out and that happens without refreshing thank you nexus on the left hand side you see all the rides are there uberx uberxl black where are all those images and all those drive and those names coming from actually coming from our sanity database where all of this is stored now you're looking at the price that's interesting the price is in eth where's the price coming from price is actually being calculated fancy algorithm that we'll show you in the rest of this video that basically makes a realistic price that you pay but in eth that'd be cool right you order your right pay with eth boom you're good to go so let's go ahead and check it out now so i'll pick black we'll hit confirm our meta mask pops up to authenticate that transaction we go ahead and we hit confirm to accept the gas fee hit confirm again and boom that transaction goes through and now in order to verify you can verify that the transaction is being sent so i look at my meta mask and it says the transaction is pending i can actually view it on the block explorer hence etherscan i can actually go inside of my sanity database and see that i've actually done this drive this is the trip so on the left hand side we're under trips so it was a trip to sofie stadium you can see place they've dropped off in that ride the pickup the trip type what was the trip price what was the trip timestamp and you can even see who the passenger was which in this case was none other very own clever programmer and we go back and boom look at that the transaction is successfully completed so the status now says success beautiful so this is going to be a fun project that's simpler than some of the other ones we've we've built but gonna have a little bit of an easier understanding you have an awesome project that you'll be able to put on your portfolio and it's just gonna be fun so i hope you're excited and if you're ready to crush it make sure to go ahead and smash that like button turn it white turn it blue i don't know i'll show you a picture of a potato today that's kind of what i'm feeling here's here's a potato hopefully you liked it so it was a gift for you smashing the like button oh by the way your instructor today is going to be lance last video actually let me see did we get over a thousand likes because his job depended on whether it was gonna get over a thousand likes or not and if he gets under a thousand likes lance is fired that's what i've told you guys before oh just barely 1.4k lance is going to be your instructor the worldclass instructors runs our frontend mastery coding bootcamp rushes it at that people love them hopefully you'll love them if this video gets a thousand like or more lance gets to keep his job so do it for lance smash that like button i love your beautiful face let's go and let's start coding this up right away what is up everybody welcome back to another video lance here again and i'll be walking you guys through the uber clone today so let's go ahead and get started so the first thing i want you guys to do is create a folder and let's call it uber clone blockchain just like this from there let's go into that folder and we'll be creating our next j app within here so to do that go into the folder and write npx create next app at latest space dot the dot here after the latest is important because what it will do is take all the starter next js files and put it into our uber clone blockchain folder awesome once that's done if you open up vs code now and open up the folder you should see all these files all the starter nexus files just like this as you can see okay after that i'm gonna go i'm gonna go ahead and set up for sell so to set up results it's very simple all i have to do is go into the command line and type in burst cell it's going to ask you to set up and deploy go ahead and say y for yes and for scope put your account for us i'll do clever programmer and we don't have an existing project yet so go ahead and say and for no it'll then ask you what's your project's name give it the same name as the name of the folder another important part here is in which directory is your code located it's going to be at the root of the folder and to showcase that just put dot forward slash like this awesome last thing here it's going to ask you want to override the settings we can go ahead and say end for no cool so if you hop over to vercell and log in and take a look at your projects here you should see the new project result project that we created so for me it's right here and it says just now because i just made it so if it looks just like mine you're good to go so i'm gonna let this build and i'll cut right back to when it's done awesome so now that's done i'm gonna go ahead and type in versailles dev right the reason why i'm saying versailles dev instead of yarn dev is because with first cell dev i'm gonna be using the local versailles builder to run my code because i won't need to configure any env files because reset will actually take care of it another reason to use versaille dev over yarn dev is because it's going to be easier to catch bugs that yarn dev doesn't if you didn't know the team that made vircelle is the same team that made an xjs so brazil supports a lot of the features that next has already awesome so again paracel dev in the terminal and it should say the server started at local host 3000 so go ahead and copy that link put it into your browser and you should see our starter next js app awesome next let's go ahead and set up tailwind if you didn't know tailwind is a collection of css utility classes that we use to quickly build consistent goodlooking css so to set up tailwind with an xjs there's a couple of different steps we have so if you're ever lost at any point go ahead and hop over to tailwindcss.com slash docs slash guides slash next js all right in that webpage you'll go and find a bunch of steps to set it up so if you follow me what i'm gonna do is say yarn add dash capital d tailwind css post css auto prefixer and that's it we're gonna install all three of these packages with yarn the next thing we're gonna have to do is actually initialize tailwind css so after that's done go ahead and write npx tailwind css init p what's this going to do is initialize tailwind by setting up a tailwind.config.js if you take a look in your vs code you should see that same config.js file right go ahead and click it and we need to configure our template paths so what you need to do is just copy what i have here right in the content we're gonna put the value of dot forward slash pages and dot four slash components just like i have here cool next we need to set up the next we need to set up the tailwind directives to our css to do that you're going to copy all the things i have here and hop over to your styles folder clear out all the starter code and paste these three adds right here so add tailwind components tailwind utilities cool once everything is done installing we can go ahead and set up our app again by saying brazil dev and get started with tailwind go ahead and hop over to index.js as you can see i have hello next.js here and you can see it on the browser but to get started with tailwind let's give this a class name on line six and we can actually say bg dash red600 right all we did was write a class name but if you look at our browser there's the background red at this color if you're familiar with tail one is similar in the sense that all you have to do is type in the class name what kind of css class you want so there's predefined utility classes that you can write such as this to set up and style your css fast and easy so let's move on to the next thing i'm going to go ahead and clear out the class name and we should be good to go all right if you saw earlier i was able to use tailwind to define a class name with what css i want one thing to note is as our project scales the class name is going to get really verbose or insanely long so one way to alleviate that is that we can actually make a style object at the top of our index here and in the style object we can give keys or give it an actual class name with all the css we want as the value so over here i'm going to write con style equals and object right wrapper as the key and as the value we can write something like this here we can find the height and the width like so and also put flexbox there you go nice and simple okay so now that we define that object come down to line six and let's make that div that we need so this div will have the class name the style object dot wrapper so if we put that there i'll actually grab that value of the wrapper and it'll have all the styling that we need so that means our wrapper will have the height and width 100 and flexbox properties and the flex property of column all right another thing i'm gonna do is set up a couple of dibs for our whole app all right we won't have the css for this yet but i'm gonna go ahead and set it up so so in the style wrapper this is where our nav bar will go in next i want to make a div called style.main this is where our map for uber will go and then a sibling to that main div is going to be style dot ride request container okay within that div we're gonna make another div called style dot ride request right here is where we're going to be able to type in a location and also confirm so like i said earlier we don't have the css for this just yet as you can see but i like to set it up so i know what to do later like to set it up now so i have an idea of how my project is going to look later so if you notice in line 8 this is where i'm going to have a nav bar so i'm going to go start working on that now so one of the first things you have to do is actually create that component so in your components folder type in navbar.js right and i'm going to set it up by doing rafce and if you want to have these code snippets like i do go ahead and type in your extensions es7 react redux code snippets and you'll be able to type in rafc just like i am so instantly make function based components like me okay cool so we made our navbar.js go ahead and like so we need to write import navbar from dot forward slash slash components slash navbar and bam you can see it on our app let's go so hop back over to your navbar.js and let's get started on creating our navbar and if you notice we don't need to import react onto this component because ever since react 16 it's kind of like implicit all right so your navbar component should look just like this and we should be good to go and get started all right so i'm going to give this a class name of style.wrapper and of course we don't have a style object yet so i'm just going to set it up and we're going to say wrapper all right i'm going to give it this height and this width and this background color if you're confused at all of what the hell i'm writing there's a tailwind css cheat sheet that you can use to refer to understand what exactly am i writing to translate it to css but yeah so i'm going to set the background to black the text white set up flexbox to justify it around and say items center right and the pixel length at 60 and say fixed z20 awesome cool so if you save you should see this nice little black bar which represents our nav bar and at any point i move too fast go ahead and pause the video so you can catch up cool so once that's wrapper is done let's go ahead and set up the rest of our dibs before i get styling so inside wrapper let's make a div and call it style dot left menu following that inside left menu let's make a div called style.logo and for the logo we'll just say uber awesome right after the logo div let's make three divs like so and let's put all the navbar elements which is gonna be ride drive and more all right and three all three of these div should have the same class name so i'll select all three and i'll say class name curly bracket style dot menu item cool and don't worry if you see all these items like a column we're gonna go ahead and style that later okay you come over to if you make a space between line 13 and 14 like so let's add another div and call this one style dot right menu okay and in that menu this is where we're gonna write another menu item called help like so right and this after help the next menu item is gonna be where the user's name goes so i'll just put my name lance after that make another div call it style dot user image container and this is where your beautiful profile picture is all right so i'm gonna look up a user avatar and this one looks good so let me use this save that image and let me make a folder for these images i'll call it temp put my beautiful picture of me inside this folder and i'll call it avatar.jpg.jpg all right and to use this image i'll have to do say import image from next slash image right this is how we use images with next but now let's actually import the actual image itself so we're gonna say import avatar from the file path which is gonna be just like this okay so to insert the image let's type that with the source avatar and there we go beautiful we're done guys just getting up we're done but now let's actually just finish this up so let's go on to the next part let's make another div on line 23 and what i'm going to do is add a static wallet address had a static number like so which is going to represent our static wallet dress for now but eventually it's going to take up my wallet address when i log in with meta mask okay so now that all the divs are set up we can go ahead and start putting styling to them so let's get rid of this ugly column right by saying left menu flex gap three look at that it's a column now let's make the logo bigger by putting this and i'm gonna start moving a little bit quicker here guys because if i spent time explaining every single css this video is gonna be like six eight hours long which would be pretty cool for one of the videos but for now if you need to feel free to pause the video to see the css that i'm putting in so i'm going to put this for the logo and for the menu items i want the text size to be a little different than the logo make sure it's white font's medium let's add a nice cursive point to it and of course center it like so okay let's do the same for the right menu and also center those items okay our user image container needs a little bit of styling so let's say mr.2 let me give our image a class name of user image so we can actually start installing the image itself give it this css right here okay hit save and that should look a lot better go ahead and also put in the login button right and i don't have the login button set up yet but i'm going to add the css right now so login button should look like this and the login text should have this css as well so then next i'm going to be setting up a variable called current account and this is going to hold the user that logs in with meta mask because later on the video i'll be authenticating the user through metamask all right so i'll be logging in real quick and i'm going to copy my wallet address and if i paste that into the string here that's going to represent the current account that's logged in right and to make it so what we can do now is replace the random set of numbers i have here and actually put i'm just going to format a little bit by using slice like so there you go all right so now we have a beautiful navbar with all the menu item and my current static wallet address we're going to make this more dynamic later so keep that in mind over in lan 38 i'm going to set up some conditional rendering what this line of code is saying is basically if there is a current account take that current account and format it and take that slice so you can format it like so if there is no current account that means the user is not logged in so we can set up conditional rendering that dave is going to say please log in awesome so as you can see if i remove the current account it says to log in let's give it some styling by giving it the classnamestyle.log so that it look a lot nicer awesome next in your terminal i'm going to go ahead and add some react icons you want to use this icons for our project so we're going to need to install react icon so hop over to your terminal and type in yarn add react dash icons okay all right now that react icons is installed let's actually use it by going over to the top here and writing import bs person from react icons slash bs all right now that we import it we can actually just place it into our code so let's just write that in line 46 like so bs person self closing and look at that there's that little default avatar image right next to the login just like this okay so then i'm going to bring back the current account and this is what it should look like if i am logged in awesome so that's the navbar let's go ahead and move on cool so once the navbar is done one thing i like to do is stay organized is to break down my code into small pieces and basically make a todo list of what i want to do right so i'm going to do that using notion and notion is awesome because it lets me visualize my todo list kind of like a kanban board if you ever have if you guys ever use that before so if you look i have this nice three columns that says to do in progress and done right and every single time i finish one of these to do i'm gonna update the status of it so you're gonna see me hopping back and forth between notion every time i finish to do right i recommend you guys use notion especially if you work in a team where you can divide up your task and everybody on the team has an idea what needs to be done so if you look in my done column actually you can see that i already have up code and connect for cell done and if you look in the in progress we have build navbar well we just finished build navbar so i'm gonna happily move this to done and there we go beautiful so the next things i want to work on is to build the location selector and to add the static card list and that seems to be good for now so i'm gonna hop over to vs code and start working on those things so now that's done i'm gonna work on adding the map component to my project so to start off head into your components folder and let's create the map.js component i'm going to write mapjs i'll put my code snippet here and there you go it's all set up and now let's just insert that component here that i marked out so in line 12 i'm going to insert my map component and of course we also have to import it just like this awesome there you go so now that's imported let's go ahead and set this up one thing to note is that we're going to be using map box for our map component so to start using mapbox we have to go back into the terminal and say yarn add mapbox geo as that's downloading go ahead and hop over to mapbox.com and now i'm going to be walking you guys through on how to use mapbox so the first step is to actually sign up and make an account and i already have an account so i'm just go ahead and log in so if you go into the account page of mapbox you should see this screen here from here take a note on what you see there's a default public token and there's a button here that says create a token so i'm just going to copy this and save it what you want to do now is go over to versel remember how i said versailles actually sets up the env files for you so if you hop over to your project on versailles there should be a section called environment variables okay so in environment variables paste the copied code into the value section so it should look like this and name it map box that underscore access underscore token cool after that it's all set up added the environment variable and then once that's done reset your terminal so that their env file is set up cool while that's going on i'm going to use mapbox you need to import mapbox gl from mapbox geo so i'm going to set up our style object here and i'm going to use this wrapper and style it like so and within the map component itself i'm going to give this div after the return the class name of style.wrapper now i'm going to set up my use effect here what i want this use effect to do basically create the map box when this component renders so let's import use effect from react and the side effect that we want to perform let me just clean this code up here for the use effect inside this use effect i'm going to write const map equals new mapbox gl.map all right i'm creating a new instance of my map and within here i'm going to set up a couple properties set up a couple properties so for the style i'm going to paste the map box i created on my account and for the center this is where you can put the coordinates where you want to center your map on so i'm going to put this as my coordinates and you can also set up the zoom how close how zoomed in do you want that center to be or the map itself so i'm going to say three and oh looks looks like it says i need the i need a container and that must be a string or an element so i think i know what this issue is i'm gonna make a container key and give it the same as this id here just like this i'm going to say map and then now the next now the error says that i need the api access token so let's go ahead and bring that over so i'm going to write mapbox gl.access token equals our access token so to get the access token process.emb.mapbox token like how we have it set up let me see if this works looks like i'm still getting the error let me just kind of log it to see what we get so it's getting undefined so it's not recognizing it just yet oh i know why i need to put dot next underscore public before the map box access token and i gotta fix that up in my first cell project as well so keep it the same name right next public that's important so that we can get the access token and one more thing i forgot to do is click on create access token and insert your deployed link down below here in this url so that you can restrict the access of this token to this specific url that we have so that other people can't use your token that's the whole reason why we put everything in emv files because it's best practice not to share your api keys your tokens or anything like that so by putting it here you ensure that no one else can use it so i already have mine set up so it should be good to go and i'm still seeing an error because i have to start my terminal good so i'm going to save for cell dev and this should work let's go it's beautiful it looks beautiful we just need to make that container and increase the size a little bit so i'm gonna go work on that now so what i'm gonna do is hop back over to my index.js and i have those divs set up in my map but since my index is the parent of that it's still going to inherit that style because if you look in line 15 my map component is still there all the component is it just hosts your ui element so i can actually define the styles still here so i'm going to write out the main that i have on line 13 the styling for that just like this then the map container which is going to be living inside the map component and the ride request container and of course the ride request which will have the styling like this so if i hit save there we go now we're talking like this looks a lot better and with that there's the map component so now that i set up the map component let's go remember to go back to our notion and add that to the done nice so the next thing i want to do let's work on building the location selector if you guys are familiar at all with the uber app there should be this white box where it can where it prompts you where do you want to be picked up from and then where do you want to go so i'm going to be working on this section i'm going to be working on the location selector form so hopping back to the vs code if you look in your index you can see in line 21 i marked out where i want that location selector to go right it's wrapped in this nice ride request which is wrapped in ride request container so following the pattern of what i'm what i've done before i'm going to make a location selector component and set it up using my code snippet and once that's done i'm going to set up my use date because i'm going to be using this later coming down to line 4 i'm going to add the class name style.wrapper and then at the top on line 3 i'm going to just make the style object with the wrapper and this is the css that i want for it so wrapper awesome so i'm just going to tap the style object with the wrapper and the css value that i want for it and within the style wrapper div i'm going to call this the search header style dot search header after that let's set up our use state and i'm going to say const in focus set in focus and set initialize our use state with the key of from right the idea here i'm gonna set up the state for from and then it's gonna switch to two right which will then in turn switch the focus between the two headers the two inputs once that's done let's go ahead and import location selector to our index just like so so i imported it and then i placed it in line 22. and in my location selector i'm going to set up some conditional rendering that if my in focus state is equal to from i want the text where can we pick you up to appear if my in focus isn't from or let's say two it should show where to or where are we going and that's gonna switch depending on which input i have selected which will make sense in a bit and then now in our index i'm also just gonna add this property so that we can actually put the container and see it by bringing the z index up so now we should see this white container with the text where can we pick you up because our use date is set to from awesome so in my style object i'm going to set up search header and i'm going to set up input boxes so input boxes is going to be the class that i took hold the two input boxes right one's going to be the location where i'm getting picked up from and the other input box is going to be where am i going to so the next line in my style object is the actual input box and here's the css for that and of course if you remember the uber app if you click on the box there's gonna be like this black border around it that indicates that's the box that is focused all right and then i'm gonna style the actual input itself as well as setting up this property called vertical line referencing the app again there's just going to be this little circle that has a line going which points to another svg right and all that is in line with the text boxes cool and then if i change the use state to 2 you should see where to pop up and depending on which one is focused that use state should be changing as right so i have an extra focus input box here so i'm just going to delete that what i want to do now is to set up the rest of the div so i'm going to make another div here in line 21 and this will be where my input boxes did will go and if you remember inside this input box there should be like this tiny circle that has a vertical line that goes down which connects it to another svg so in line 22 i'm going to put another div inside the input boxes right and if you look at the class name in line 23 i'm gonna put a template literal here all right because what i want to do is if the focus is from i want to focus and add that black around the input box to indicate that this is the box that i'm typing in or focused on so what i'm saying in line 24 is if the in focus state is from the focus input box will be the style d and if not this wouldn't have that focus input box styling and then next on line 27 let me put the svg container inside so if i want to get that small circle i'm just going to copy this right here all right feel free to pause the video so you can also get this svg and i'm going to paste it inside my svg container and if i save there it is there is my little circle which is inside the focused input box makes sense awesome so obviously there's two input boxes that we need here so i'm going to set up another input so inside this input box there has to be an actual input so i'm going to place that in here i'm going to call this style.input with the placeholder enter pickup location from there in line 16 i'm going to set up another state called pickup and set pickup and i'm initialize it to blank next state that i need to keep track of is the drop off location i want to save that in a state as well so i'm going to write cons drop off set drop off and set use state to an empty string cool so within that input in line 39 i also want to add the value and inside here i'm gonna set it equal to pickup and on change we're gonna update our pickup state with whatever value i typed in so if i were to type in santa monica the state pickup will have santa monica as the string because of this on change keeping track of it and the next thing i'm going to set up is the on focus because if this is clicked or if this is focused if this is the box that is focused we need to make sure that the state is set to from because what that's going to do is put in that border around this box like i mentioned before and like i said i want that nice vertical line so if i paste it right here it looks like that and this should connect us to the next input box so all to do is pretty much copy and paste the rest of that over the only difference though is in line 50 the in focus should be set equal to two and it's focused right then that box should be focused all right next i'm just going to write out the svg container in line 50. and inside this container it should have a different one this one's going to be a tiny square right so this square is going to be what connects that small circle svg with the vertical line to the svg square all right so it looks like this it's looking good guys so let's add our input box with the placeholder and of course the rest where the value is going to equal our dropoff state and the on change to update our dropoff to whatever i typed in and of course the on focus so that if it's focused right we switch the state so look at this if i click where can we pick you up where to where let's go this is looking super clean right i'm so excited awesome so i'm feeling really good about that it is looking beautiful guys so what i'm gonna do now is let's take a look at my inputs being passed so i'm gonna contour log our pickup and drop off state variables and i'm going to make sure it's easy to see so if i were to type in these input boxes you should see that console up so i want to type in union city all right you can see it in my console down below it's right there and for the dropoff i'll say empire state building all right so now we can eventually take those states and start passing it through for our map box i'm getting excited i hope you guys are excited too if you're still watching put a like in the description below now that the location selector is done let's let's go hop over to notion and mark the build location selector as done and let's go ahead and add build confirm to in progress so in this section i'm going to be working on that card when you once you put in your information what should pop up is the list of car options like uber x uber excel over black anything of that sort so to set that up let's go ahead and make a confirm component and if you remember the layout i have in my index it's going to go here in line 24. so i'm going to import that confirm component in my index and then let's hop back over to confirm and let's set it up i'm going to quickly set up my style object at the top and let's make our first div the first step i'm going to make is the wrapper so i'm going to say class name equals style dot wrapper from there i want to make the container that's going to hold all types of rides so i'm going to make a div and call it style selector container in the next line i want to make another div for the container of the button so i'm going to say style confirm button like so and inside that div i'm going to say confirm uberx from now and of course since this is a button let's add an on click to that when i click we should run the store trip details function so i'm going to set that function up to the top at line 4 and for now let's make it a async function which will make sense in a bit coming back to the style object at the top i'm going to add the selector container css i'm going to style the selector container and then let's go ahead and style the confirm button container and so that our button can show up let's style the confirm button itself so there we go there's the confirm button there's a nice outline of the confirm button so now the confirm button's done i'm happy to put this in the done section wow we're moving fast guys so the next thing is to add the static car list so i have it marked out here in line 13 where it says ride selector let's go ahead and make the component for that i'm going to call this ride selector js and let's import that same component in our confirm js all right there we go and now we can see it in our browser to your right and the idea with the right selector is it should hold the whole car list like i was saying before it should hold uber x excel black and so forth so i'm going to set up our usual wrapper at the top set up our style object again and then within this div i'll be making another div and i'm gonna call this one style dot title in this title i'm gonna put this text here choose a ride or swipe up for more from there we should make a div for the car list in line seven and i'm gonna hard code the list of cars in an object in line three and that way i'm gonna do it is i'm gonna make an array of objects one cool thing about notion is that i can actually store all the assets in here so if you go hop back over to my notion here are all the assets of the different cars that we can select from the list so what i'm gonna do is add these cards each of these cards into my assets folder in my next app so i want to create an assets folder and put all of these into my next app and don't forget the eth logo and the uber logo awesome so now our assets folder with all the rides is here all right and once that's done let's import all the assets we just set up so import uberx mover black mover black suv uber select uber excel and going back to my array of objects here each object is supposed to represent each car on this list so in this first object i'm going to apply all the properties of it so the name over x the image is going to be the uberx image and depending on what car option you select it's going to have a different price multiplier so this is the price multiplier for the uber x and let me go set up the rest of the objects now awesome so there you go so now all the objects are set up let's go ahead and map through the car list and real quickly i'm just going to change the key to this to service yep i'm just going to update line 39 to class name and within my car list this is where i'm going to map through the object and for every car i want to create the necessary jsx to display it so i'm going to set up my map function here and for every car i'm going to set up this div called style.car which will contain the image of the corresponding icon of the current car in the iteration and that image will have the class name of car image with this height and width and if i press save now there it is you can actually see all the assets there on the on my browser let's go so let's now add the card details so that's going to go along with each image so i'm going to make a div in line 51 called style.car details and within this div let's make another div called style.service where we can insert the car service that's describing so if i put car.service in curly brackets here in line 52 we should see the uber black uber x and all the others on my app we're gonna do the same thing with the time so i'm gonna make a diff called style that time they're all gonna save five minutes away for now and for the price remember we're making this we're gonna be paying these cars with ethereum so in the div called style.price i'm gonna be setting up a variable at the top in line 38 with the divide that by 10 to the power of five and then multiply that with our car price multiplier set that to five decimals and there we have our price in ethereum so again let's also add a nice ethereum logo in there with the image component from next and let's not forget to import that eth logo that i also have in my asset so there it is this is looking sick imagine paying ethereum with uber just to clean this up a bit let's add more to our style object so in here i'm going to make the title and add the css i'm going to add my flexbox properties to car list with overflow scroll and in the car div itself set up the item center and a nice border set up the selected car css and of course the car image and the car details and lastly is the service make that the font medium time the price container and the price and with that all the divs are styled and it's looking amazing and it all has the prices calculated with each based on the car multiplier this is a lot going into this app so be sure to like the video if you made it this far and i'll happily add static cart list to done all right we are making great progress guys so let's add set up sanity to our in progress now that's done and while we're here let's also make that cardless dynamic and let's also add the get location coordinates to our todo list and if you look we're actually almost done isn't that exciting so let's keep on going and here we go sanity is going to be our database and we're going to be setting it up by creating a studio folder in our terminal inside of our next app and just to mention if you go to sanity.io cleverprogrammer you can get a free boosted plan from us all you have to do is follow these instructions right here to get started you're going to have to npm install the sanity client and when you're initializing sanity type in this code sanity coupon clever programmer right it's gonna include a lot more to the free plan that sanity already gives to you so go ahead and make good use of it awesome take that command and paste it into my terminal and there you go for the project name let's just keep it the same uber clone blockchain all right and then it's going to ask use the default dataset configuration i'm going to say yes all right and we want a clean project with no schema cool so you should see a studio folder inside your project hop over to the schema folder and go into schema.js here you're going to find out this is where we're going to basically concat all of the schema files that we create so let's go ahead and clean it up you can remove all these comments and awesome the next thing we have to do is let's think about what kind of schema files that we should be creating so the first one i'm going to create in my schema folder is the user schema.js in that file i'm going to create an object called user schema and it's going to have these keys and values this is us letting sandy know what kinds of documents that we want to keep track of so for us we want a user schema because this is supposed to represent any of the users that log in so when you think about what are important properties of a user that would include these over here that i'm writing out which would be their name their wallet addressed because eventually i want to set this up with meta mask as well as a profile image so that they can put a nice picture and what we're going to do each time we create a schema file we need to import that schema like so import user schema from dot forward slash user schema and then take that and place it in line eight inside this dot concat we're gonna be putting all the schema files we create inside here so let's create another one let's call it ride schema this file is supposed to represent the types of ride services we have remember we set up the static car list like uberx uber black uber black suv this is where we're actually going to pull from sanity the types of rides so the properties that we need to keep track of is going to be ordered by id and the only reason i'm going to use that is so that i can give it a custom order when i call it from sanity alright we also need to give a title and each type is going to have its own price multiplier as you guys saw so we're going to also store that in this document and lastly we can't forget about the icon that goes with it to signify what ride type it is cool so let's go back to our schema.js and add that file into the dot concat awesome next i want to include another file here called trip schema okay and the fields that are going to be important for this document is going to be the right where are they getting dropped off to the pickup where they're getting picked up from and the type of ride that they selected not only that we also need to figure out and store what the price was a ride timestamp would be cool as well as who the passenger is so with the passengers we need to keep a reference of the user that took this ride right it's going to be different if a different user took the ride okay cool hopping back into schema i'm going to import that file as well into line 10. cool another thing that we should probably do is go into your terminal hop into the studio folder and type in sanity start once you do that we can hop over to localhost 3333 desk which will automatically go for us the cool thing about sanity is we can actually update our database from here with this really nice ui right so if i click on users rides chips we have nothing yet but if i were to go to chips and click this pencil here you can see all the fields that i set up in that schema file alright so if i wanted to actually add a document i could do it from here on localhost which is awesome okay so hopping back into the terminal i'm going to actually deploy our project to sanity by saying sanity deploy and for the host name i'll just say uber blockchain let's go successfully deployed which means i can actually hop over to sanity their website with that link anyone else who's a collaborator in that project will also be able to see this all right now the studio is deployed to sanity itself but i'm just going to be editing on localhost for now cool so after you guys do all of that our sanity database is now set up cool so now that our database is set up we only have these more these two items to do left let's go ahead and make the car list more dynamic what we're going to do to do that is we're going to start making using grok to query our database for the rides right so going into our studio i'm actually going to populate our rides with the assets that we have set up i'm going to take all the pngs and basically create a document to represent a ride type i want to take the time to create a document for each ride type now so i'm going to give this an order by d1 the title uberx and this is the price multiplier along with the icon that goes with it so i'm going to be doing the same thing for the rest of the ride types once i finished up creating those documents i'm going to go ahead and go inside the api folder of our app and we can go ahead and delete the hello.js instead we're going to create a folder called db as well as another folder called map and inside the db folder i'm going to make a getridetypes.js in this file this is where i'm going to be querying for those ride types okay and in order to query the ride types i'm going to go back into sanity and log in click on my project and we're gonna need a couple things from here one of the first things is to see this project id we need to copy that and add that to our env variables and we could do that using versailles okay after you copy the project id go back to sanity and go underneath the api tab we're also going to need the token right and i'm just going to give it the name client generate and copy that token and go ahead and add that as an environment variable as well to brazil there we go we have sani token underscore project underscore id awesome so i'm also going to create a lib folder and within that i'm going to write sanity.js file what i want to do here is essentially set up my sanity client so to do that i actually have to go back into my terminal and in my main project folder path i'm going to add do yarn add hat sanity slash client make sure you download this inside you're out of the studio folder and inside your project folder in the path then you can add this command okay so we could do in the sanity.js file just say import sanity client from at sanity client like so and let's create our client variable and set it equal to sanity client parentheses put in these curly brackets and create this object so the project id is going to be the same as we set it up but we can actually call the process that env here so i'm going to say process that env dot sanity project id cool and then for data set i'll do production api version v1 and for the token we can also call in our env and say process dot env dot sanity token okay and then for ucdn i'm going to say false there you go we set up the sanity client so now that's set up let's import that same client in our getridetypes.js like so and here we can actually set up what we're querying for the cool thing if you go back to the localhost 3333 and type in slash vision what we can do is actually test out what we're creating we can actually make a request to query through here so what i'm going to do is try to figure out how to get the rides that i want and once you do that you can get the list of rides add these curly brackets here and then we can kind of filter our query or make it more specific right so the only things i really want from this is the service the icon url and the order by id and a cool thing we could do is actually just order each of these by its id right so if i run this i can actually see that this is what i get back which is exactly what i wanted so this is a really awesome tool by sanity which we can actually just copy this query and paste it into this variable that i have set up inside my getridetypes.js cool so now that we know what we're querying for i'm going to create a ride types function and let's make this asynchronous okay so within that function setup will try catch and if at any point there's in our catch we're going to send that error message okay and in our try block i want to make sure that we save sanity response in a variable and set it so that we await the fetch request for our query and if that's successful i want to send the status message that it was a success awesome okay cool now that our query is set up we can go ahead and actually remove the static card list that we set up earlier so if you go over to ride selector go over to the car list variable that we set up you can just highlight all this and delete it because now we can actually just pull the car list straight from sanity so i'm going to do instead of having the car list is i'm going to set up this use effect that will make that call to the database okay so i'm going to error car list is not defined i'm gonna go ahead and set up a use effect now and here it says carlos is not defined so what i'll do next is actually just create a use effect here in line 27 and what i want to do is set up an asynchronous function it's going to fetch the api route that we set up to get the ride types okay and i'm going to store that in a variable called data and i want to make sure we turn that response into json okay what i want to do next is actually we're going to need to use the use state hook from react let's set that up at the top here in line 22 const car list and set car list we can initialize the use state to an empty array and from there i want to do set car list in line 30 and set it to data dot data right because i want to go get my variable and then the data within that variable like so which data.data should be what i queried for which is the car list okay and it seems like we're still getting errors okay what i'll do now is what i think will fix it is go do export default get ride types because i can't forget to export this function okay ah i see the issue now it says res is not defined and that's probably because i forgot to put res as a parameter as well so i'm gonna do rec comma res and it should work just fine hey there's our query let's go okay so i can take out this console log and i think i saw another error yes so it says invalid source prop for the images because cdn sandy is not configured configured under images i see okay so we need to do is just go ahead into your next.config.js and if you have this issue guys set up an images key which has the value of an object and in that object you need to put in domains that we can allow this to use which is the cdn.sanity.io so now we should be allowed to use that and if i hit save for cell dev again to run my project once more fingers crossed hey there it is let's go awesome after that the car list is dynamic let's go we are able to pull the ride types straight from sanity our own database and this is looking amazing so let's go ahead and put that to do item to done let's work on the next thing all right guys so the only thing left in our in progress section is to get the location coordinates what does that mean well i want to be able to type in the location i want to be picked up from and where i want to be dropped off and i should see that reflected on my map box right so to get that started let's go ahead and create another file and let's call this file get location coordinates okay within that file i'm going to create a function let's create a function called get location coordinates it's going to be asynchronous and of course we'd have to export this function in that function in line 2 let's set up our map box url by making that a variable and setting it equal to the url that we're going to use we're going to make this url dynamic so what we're going to do is this we don't have this yet but i'm going to set up i want to call on mapbox places api url we don't have an environment variable for that yet but that's the url where we can actually make this api call right now to set up the endpoint let's do a forward slash let's do rec.body. right put that in a template literal like so and let's do dot json question mark access token and that's going to equal help.enb mapbox access token right so like i said we should probably set up that variable so hop on back to versus your versailles project and in the name i'm going to give it the same name that i have the mapbox places api url awesome as the value put it put the url inside the value add and there we go awesome so now this is actually going to work all right what this url is going to do it's essentially going to use their api make a request for the location that we pass in for mapbox awesome so i hope that makes sense what i want to do next is set up this try catch block in line four and let's set up our api call in the try block by saying kant's response is going to equal and let's fetch that response and don't forget to set up an away here the next thing you want to wait for is let's set up a variable called const data and set that equal to dot response.json so essentially let's turn our response to json is that successful the response we get back is 200 so let's send a message that says it was success and set property to this and of course if anything goes wrong at all let's set up our catch which will send us an error message essentially beautiful okay so the next thing i'm going to do is i'm going to create a folder and i'm going to call this context we're going to do now is set up our context using react contacts if you didn't know react context is used for state management essentially it will take our state and make it global so that we can access it anywhere in our app so in order to do that we have to set up that context so from here let's create another file and i'm going to call it uber context awesome so if we're going to use reacts contacts api let's import create context from react in our ubercontext.js and then in line three i want to say export const over context equals create context let's see let's actually use that function we have so i'm essentially creating a context for uber okay line five i'm gonna do export cons uber provider equals right notice how it's going to take in children equals and i'm going to return here i'm going to say i'm going to return the ubercontext.provider for now we're going to set this value equal to empty but whatever i pass into this value is going to be what i'm going to have access to globally so keep that in mind so in between the ubercontext.provider put in the children that we pass in and then we're going to need some other react hooks here so i'm going to import use state and use effect and at the top of our uber provider i'm going to set up a couple of state variables bam there we go so here are my state variables i'm going to need to keep track of the pickup state the dropoff state pick up coordinates and the dropoff coordinates awesome so i'm going to set up this use effect next and here i'm going to set up this async and then he in the use effect i'm going to set up the async function like so an anonymous async function in that i'm going to do an await promise.all so i'm actually going to create a promise so on line 5 i'm going to say create location coordinate promise which is going to take in the location name and the location type so let's create that promise by returning the new instance of the promise object in javascript this is what we use to create a promise okay and then of course inside the argument of the promise object i'm gonna i'm gonna put in an asynchronous function which is gonna have resolve or reject and within that anonymous function i'm gonna make an await and it's gonna essentially fetch essentially gonna fetch for the location coordinates and i'm gonna set that equal to the response the next thing i'm gonna do is set up next i'll write a couple headers here the method will be post in the headers i'm gonna put content type it's gonna equal this and the body make sure to json.stringify and have this inside of the scope all right and then line 17 i'm going to write const data equals await response.json awesome so in line 19 i'm just going to write an if statement that says if our message was a success it's going to lead to a switch statement that's going to say if the location type is pickup set the pickup coordinates to that data and then break another scenario would be if the case is if the location type is drop off then we're going to update our dropoff coordinate state with the data okay and of course that would mean it's a result else if the data.message was not a success then the promise was rejected okay then what i want to do next is in the go back to the use effect and put if pick up and drop off exist right make sure all the promises are resolved we're going to wait for all the promises and the promises that i'm going to be waiting for is to be resolved is going to be the pickup promise and the drop off promise essentially okay and in the dependency module 956 let's put in the pick up and drop off okay and let me highlight all of these lines this actually should be within the scope of the uber provider here in line 12 12. cool amazing guys so we set up the contacts as well as getting the location coordinates let's move on okay cool if i hit save though i want to notice an error in my console you're going to see a message that says something along the lines warning each child in a list should have a unique key prop if you ever see that that means whenever you're mapping through something it should also have a unique key prop that you pass down right so we can actually solve this issue by either giving it a direct key right for each one or in your map function it takes in a second argument which we can name anything i call it index mostly because depending on how many items they're on there are that index will go from zero one to an increment onwards so what we could do is actually use that parameter and in our key and set that equal to the index all right now if i save this boom no more warning we're good to go and with that our context is set up as well cool so we can go ahead and move get location coordinates to done on our notion board and we can also just put create context to done as well and that means we're actually more than halfway done to this project so congratulations if you made it this far let's keep on crushing it what i'm gonna do now is move a couple to do's to the in progress section again which will be place pins on the map right we need to put pins on where i want to go and where i want to be picked up from as well as we need to be able to log in through metamask and lastly save trip to sandy so those are the three things i'm going to be tackling next once that's updated let's get back to the code the next feature i want to work on is the functionality where i'm going to be able to enter my pickup location and where i'm going and there should be two pins that showcase where that is so essentially add markers using mapbox so to get that done let's hop over to our map.js okay and let's import all the contacts that we need so to do that we're going to say import use context from react and we're also going to import our uber contacts from our contacts folder just like that cool and if i save this we're gonna see this error that's because i just forgot that we need to go to our underscoreapp.js file and do you see this main component here line six we need to wrap that component with our uber provider so import uberprovider from context and let's wrap this in there so i'm going to do is type in uberprovider in between you can put that component back in there cool so now it's done we now can do some state management within our app so if you remember if you go back to your ubercontext.js everything inside this value equals here is all the variables that i want to be able to access globally that makes sense to you i'm going to go add all of those variables now as you can see this is the list pickup set pickup the coordinates all of that stuff all those wonderful things so awesome but now to actually use those variables let's set up a destructured object so let's destructure our used context we can say const curly brackets pick up coordinates drop off coordinates equals our use context and then you can pass an uber context within that cool so now i have access to those variables i can implement it into my map so what i'm going to do is add a function here called add to map right so with this function i'm going to add those markers like i mentioned so within that function it's going to take two parameters map and coordinates and within that function itself let's make a variable marker one and let's assign the new mapbox marker with these coordinates so what i mean by that is we're going to write mapbox gl.marker parentheses as you can see and just do dot set longitude and latitude to the coordinates that i'm going to pass in and then just put in this add to map to just stick that pin based on those coordinates that we pass in cool all right so now that function is done hop over to line 22 and i'm just going to have a bunch of if statements here that if we have pickup coordinates call the add to map function and then line 26 if we have dropoff coordinates if that exists add that to the map function okay and then another if statement that i want to add is if pickup coordinates and drop off coordinates exist you want to add this little function here just say map that fit bounce and then pass in those coordinates okay and if you remember how we have the pickup and drop off state set up we're just manually changing it when i click we want to involve our contacts here so we can take that state out now pick up and drop off state we can take that pickup and drop off state now and let's incorporate our context api here so i'm going to say import use context and import uber context again but this time in my location selector.js so after you remove the pickup and drop off states we don't need that so let's involve our context so i'm just going to paste in our use context here and destructure it and get the variables that i need so i'm going to need pickup setup drop off and set drop off and you can set that equal to use context and just pass in uber contacts and of course if you want to actually do this we need to import use context hook from react and uber contacts from our contacts folder okay let's type in santa monica and let's type in i don't know sophie stadium got error add to map is not a function okay let me just take a look saying add to map is not a function oh i know it's because let's put all those if statements inside this use effect there you go so try this again santa monica and go to sophie stadium open look at that we got an internal server area i got internal server error because cannot read property of zero oh i see one thing that you have to make sure when you're doing the mapbox url that your env files are the same name so what i'm going to do here is actually update the end of this url to now say process that env next public that's how i have it saved all right so i'm going to type in santa monica and let's type in sophie stadium as well sophie stadium and bam let's go those are the coordinates of those places awesome so that error looks like i had to update my url with the correct env name which was next public access token so once that's all good and done we should be able to see the coordinates of what i typed in okay so i'm just going to log the pickup coordinates and drop off coordinates inside my map.js just to see if i'm getting the same thing here so again santa monica and sophie stadium okay let me just check inspect element and go over to my console let's see let's see it all right and the other array let's go so we're actually getting coordinates back which is a really good sign there you go so now anytime pickup coordinates and drop off coordinates exist then i'm going to be able to fit the bounds here so i'm going to put that in the dependency module of my use effect in line 37 and now let's see it in action awesome look at that there's the two pins so if you don't see anything right here there you go now it's zoomed in and now you can see the two pins okay let me try to see if i can get the padding up more so that we can see a nice line let's just set the pattern to 400 and i think it's fine awesome so let's put place pins on map and our notion to done in this section i'm going to be showing you guys how to authenticate a user using metamask all right so to do that let's hop over into our contacts reason being is because we want to be able to check if the user is logged in anywhere in my app head over to ubercontext.js and i'm going to paste this code in here so i'm going to make a variable called let metamask in line 13 we're going to have if statement checking if the window is undefined metamask is going to equal window ethereum and the important part here is line 17. we're going to have a function called check if wallet is connected and it's going to be asynchronous of course and in line 18 if the window.ethereum does not exist or is not there we just want to return that basically means if you are not logged in don't do anything okay from there i want to set up this try catch block and in the catch if there is any sort of error we're going to console.log here in the try block though i want to make sure i set up a variable called address array just like so and i'm going to set this equal to to an await window.ethereum.request essentially make a request for an account and in line 24 if the address array that length is greater than zero or there is a valid wallet address this is where we want to set the current account so let's actually make that and keep track of it using state so in line 10 i'm going to say kant's current account and set current account equals use date and you're going to place that in line 26 set current account to the address array bracket 0. okay and underneath i'm going to have this function here request to create a user on sanity and pass in the address array bracket 0 as well and obviously we don't have that function yet but what i want to do with that function make a request to our database to create a user document if it doesn't already exist so let's actually set up that function let's make a request by setting up this function so in line 80 i'm going to say const request to create user insanity equals asynchronous and the parameter is going to be the address that i pass in and of course if we're not logged in or if there's no window.ethereum just return okay set up another try catch block and in the catch block do another usual error console log the error awesome and i want to stop there for now because what i need to do is actually create a file so under my api folder under db let's make a create user.js this is where we're going to make a request to our backend to create the user so let's import the client at the very top here so import curly bracket client from our lib sanity folder and then here in the variable i want to put const create user insanity this is actually the function of us creating that user document which we set up with our schema okay so it's going to equal async rec response and of course we have to export it at the bottom and within that function let's set up the try catch okay and then the catch we're just going to send a status of error with the error message and in the try block like i said this is where we create the user document into our database so in the trial block let's write constant user.equals the object right so within that object think about the properties that this user document should have so the type should be users of course the id is actually going to be the wallet address so we can say rec.body.userwallet address the name will be rec.body.name and the wall address would actually be the user wallet address as well okay after we set up that object in line 12 let's set up the await client.create if not exist user doc the cool thing about sanity is that document doesn't exist sanity will create it already it'll already check for us if it exists or not with this method and of course pass in the user doc and that's just something really cool that sandy does and of course if that is successful send a status of 200 message saying it was success awesome so now that we were able to create user insanity function we can hop back over to our uber contacts and in line 83 in that try block we can make the fetch request there so doom do await fetch and the api route that we just set up to create a user and if you think about it what kind of request is this are we trying to get data or we're trying to post data we're trying to post data so for the method i'll say post because it's going to post a new user to our db and if everything i just said was just new information to you leave a comment down below letting me know if you want me to go fully in depth on apis and how to colony awesome let's get back to the video like i said before we're going to create this is going to be a post so in the headers i'm going to put this as my headers and in the body just say json and pass in the values we want to give to that user document which is going to be user wallet address is going to have the value of the address that i pass in the name for now i'll put blank but one thing we can actually do is hop into your terminal and let's do yarn fake at faker dash js slash faker if you're unfamiliar with faker.js it's basically a javascript library that can generate fake data for you so in our case i want to use faker.js to get a fake name so it will randomly generate a fake name for me and in order to use that i'm going to have to go import at the top of uber context and in order to use faker.js you have to import faker from at faker js faker and now we can use it coming back down to line 91 so instead of an empty string we can actually just say faker.name.findname this will randomly generate a fake name when i create the user next on line 19 of the ubercontext.js let's set up a use effect that will check if the wallet is connected like i said we want to be constantly checking if the wallet is connected otherwise you shouldn't be able to use these features and the trips that you set up should be associated with who's ever locked in okay so in the use effect i'll put check if wallet is and now let's actually make a function to connect the wallet so line 39 i want to say cons connect wallet equals async and the anonymous function again you're going to see that it's the same kind of deal and the inside this function in the if statement i'm going to say if there's no window die ethereum just return which i usually try catch block console logging in error and in the try block we're going to set up the variable again for the address array and a weight window.ethereum.request because we want to request a metamask account and if there is a valid account right with this if statement if addressarray.length is greater than zero then we're going to set the current account to the address array as well as make a request to create the user on sanity if there is one and again pass the address array and don't forget once we create those functions i also want to pass that down here to my provider so that i have access to them anywhere in my app so i'm going to one line 30 and let's pass in connect wallet and current account okay now i'm going to my navbar.js because if you remember way back in the beginning of this video i set up a static variable holding the current account over here in line 17. we don't need that anymore because we actually created all the functionality for us to log in already so let's remove the static data and at the top i'm going to import all of my contacts and let's bring in those variables that i created so i'm going to import use context from react and import uber context from my contacts folder and inside the function component of navbar in line 20 i will set up the contacts and destructure it by saying khan's current account and comma connect wallet equals use context and pass in uber context okay cool and i hit save and you can notice that it still looks the same but that's because for me i'm already logged in right so i'm just going to copy my wallet address for now because i'm actually logged in so that's why it still looks the same let's go ahead and check on my sanity and click on users there we go it generated a new user right so when i'm logged in it create a user apparently my name is going to be kim for today's build cool again go into your sanity and your localhost 3333 you can actually click on the user document that was created for me kim so if i click on it you can see the fields are now updated with the information i passed in it generated that fake name for name and it passed in my wallet address which is correct that's it and of course what we set up is working when there is a current account it's going to format that long wallet address using the current account that's left so that looks really nice on my front end but that's what it looks like if i logged in currently we don't have any feature to actually log us in so coming down to 145 let's add on click and use that global state that i passed in which is to on click i want to be able to pass in the connect wallet function and that makes sense if i click the login button i should be allowed to connect to my wallet just like that another thing that we need to do is when i log in i should actually pull the user that's connected from my database all right so if i log in my name is kim right from sanity i should able be able to pull kim's information if i already have a user okay so in back into my ubercontext.js 119 i'm going to make a function to request to get current user info all this is always going to be asynchronous pass in the wallet address because i want to use the wallet address and query that with my database to see what user has the wallet address that i pass in and that's what i want to set to the current user within that function set up the try catch again and we're going to catch any errors by console logging it and in the try block i'm going to say cons response equals and await for the fetch call of getting the user info and pass in the wallet address so like i said i'm going to get the user info with the wallet address that i pass in so again if it already exists we're going to get that information so up at the top in line 12 let's set up a state for the current user and if we get a response let's set the current user to data dot data and if you notice we actually don't have that api route set up so in my db folder let's create the get user info.js and you can guess what we're going to do next we're going to import the client again so importing the client in line three creating the asynchronous function for get user info pass in rec and res so just like before when we get the ride types i'm going to set up a variable called query and pass in how i'm going to query for the user info so i'm just going to paste it take a look at what i typed in all this means is i'm going to ask for a user with the wall address of the wild address that i passed in and what i want from that user is the name the while address again and the profile picture if there is one so i'm going to start all of that in a sanity response variable down here at line 12 and set it equal to an await of the client fetching the query that i passed and if that's successful send the status up to and if it's not send the status of 500. okay so i just created that in my context all right so in line 24 i'm going to add another user effect here to check that if there is no current account let's just return but if there is let's make a request to get that current user's info so i'm gonna set that up in a use effect so that it can run when it loads and the dependency module in line 27 pass in current account of course because you only want the use effect when the current account state is updated or changed okay and let's pass in current user into our provider and in our navbar.js let's add current user and destructure it from our contacts in line 20. okay and if you remember in line 31 this is where i passed in my name but let's pass in the current user let's make it more dynamic so on line 31 let me add the curly brackets and paste currentuser.name.split so i don't need to get every single part of that name so i'm going to use split here in line 33 and i'm getting cannot read property of name of undefined so let me just console our current user real quick and take a look at that is a big part programming let me go take a look cannot read property name undefined and i'm also getting a 500 internal server error okay next thing i want to try is going into get user info i think the reason is because the sanity response i want to get back the first user so inline 18 in my get user info where it says the data key and the response that send i need to do sanity response bracket zero let's see if that works save hey there it is there's kim awesome now that's done we actually completed two things with our notion we completed create a new user on login as well as we're able to add metamask login so mark those as done let's go bring over calculate price now and we should be good to go awesome so now let's work on saving trip to sanity alright if you remember we create a schema that's going to save all the trips that we take so in order to save trip to save our trip to sanity let's go to the confirm js and if you look in line 22 we have a function set up called store trip details at the moment it doesn't do anything if you look so let's go ahead and get that done so like before we're going to need to make a trip document and pass in all the information we want to pass into story trip details are two things the pickup location and the drop off location okay so coming back to the function in line 11 in the parameters put pick up and drop off make it asynchronous put in a try catch block again console lock the area and in the try block we're going to make an await for a fetch call at this api route for save trips and again don't have that set up just yet and we'll do it much later but think about this with this api call are you making a get request or a post request if i'm saving a trip to my database it should be post so for method i'll put post and for the headers i'll put this content type application slash json cool and of course for the body of that i want to make sure that i pass up the key pickup location as the pickup that i passed in in the dropoff location to be the dropoff state that i pass it okay and if you remember there's a reference to the user that took that trip if i put this in my input santa monica to sophie stadium that shouldn't go to kazi's account that should go to the users that's logged in our case it's kim cool so make sure that's set up for the body key now let's import all the contacts that we want to use for this app and let's destructure all the variables from our used contacts in line 13. so i want to get the const current account pick up and drop off from use contacts don't forget to pass in uber context and we should be good to go so now now we're able to actually pass those in those values because they are exist in this component okay so heading over to our db folder create that file now and call it save trips.js at the top of that file import the client and create the function save trips make it asynchronous with the parameters of rec and res the user will try catch block again and if you notice a lot of the same things you do when you're setting up routes with the apis to sanity with the cloud functions for sanity it's going to be a lot of the same thing so in the catch i want to send a message of 500 server error we need to be able to create the trip document that we're going to post to sanity so i'm going to set up constrip doc equals object what kind of document is this so you're going to say underscore type is the trips the id is going to be the wallet address plus the date we're going to use the date object to put in the date of when the trip happened in the pickup we just get the pickup location and the dropoff location that's passed in next i'm going to actually put in the ride timestamp and format the date so that it looks nice when i post it the next key that i want to put to this trip document is the passenger key which actually has the value of an object again and it's going to have underscore key as the first key which will have a little string here that says the passenger with the wall address as well as the date which i will format once again next is here you want to put reference as the key and what we're referencing is the user that's logged in so i'll say rec.body.userwallet address and what type the type of this is going to be reference essentially what that means is whatever chip that i take it should reference the user that took okay another thing that i want to pass in is the price of that trip as well as the selected ride to b the value of whatever the selected ride was and if you notice actually don't have the price and selected ride property set up so from my use contacts let's add price and selected ride on line 13. and my uber contacts.js let's create those two states for selected ride and price and pass it down into value so when i'm actually destructing them it can have access to it cool set up now okay now time to update our save trips document so go to savechips.js you can also add the price and ride category so for the price i'm just going to do up with parts float and pass in the price and for right category i'm just going to write record.body.selectedride.service and then going into the ride selector in this use effect let's actually set the selected right to be data.data bracket zero okay and then coming down to line 43 of the red selector i'm just gonna paste this in i'm gonna paste this in this is gonna change the class name of that div with this ternary operator saying that if there is a selected ride that service equals the car that service then the style is going to be that selected car if not it's just going to be the regular style.car all right so if i save this selected right is not defined cannot read properties of undefined reading service all right so i think what i'm going to do now is go to the context or uber for the set selected i'm going to pass in an empty array and of course can't forget to pass set selected ride into my value of the provider and don't forget in that values pass in set price as well and of course in line 22 i don't want to put this in a new state i want to set this up i'm going to set up a use context here okay and don't forget to import use contacts and import our uber context so that we can pass it in and in ride selector i'm going to try putting using state to put my car list and set car list here instead i'll put use state and import it up instead of passing it through context and i hit save any errors let's go it works so what i could do now once this loads you can see that if i click on any of these cars it will have the styling of selected car and that's what that ternary operator was for before nice okay and then in my save trips can't forget to add in line 22 in my save chips.js client. let's use the method to create the document if it doesn't exist and then send that status message i click on uber black i hit confirm let's see what happens let's go we got a trip it's untitled the trip prices there's the there is the trip type the time stamp and of course we didn't enter a drop off or pick up so that's not going to show up that should be blank so now i'm going to try to enter a pickup and drop off location so again i'll use the same example santa monica sophie stadium there you go see the pins santa monica and sophie stadium there are the pins click on black suv confirm let's see if that's there awesome so we're able to save the trip to sanity there might be little bugs here and there but we'll work on that cool so it looks like we're able to save trips now so let's go ahead and mark that as done in our notion and looks like next is let's calculate the price if you look at our notion we only have two more things left all i have left is to calculate the price and then actually charge the user with that pricing because at this point we're actually able if i reset my sanity here we're actually able to see the save the trips and the price and the reference to the user which is amazing right and when i talk about calculating the price if you look at the list of rides what you see here in ethereum is actually just the price multiplier itself what uber needs to do is calculate the base price first so what i mean by brace price is this the base price is essentially the length of the trip in seconds right and we can figure out with the map box api adjusted the traffic at a given time obviously what we'll do is we'll call the api that will get us the length of the trip in seconds based on the current traffic then we're going to divide that by 10 to the power of 5 just to get a realistic price of the calculation when we send it back in ethereum this is not exactly what uber uses or the formula but what we get back is something along the lines of a realistic price that we get so essentially that's the formula so let's get coding so let's dive right in to the pricing okay so what i'm going to do is within my map folder we actually need to get the duration or the distance in seconds of the trip like i mentioned before so in your map folder create a get duration.js set up an asynchronous function like this and we're going to make another api call to calculate that so make a variable called mapbox url set it equal to this string so right we want to make use of our env variables here so process.env map box directions api url we're gonna get the pickup location the pickup coordinates the drop off coordinates pass in the token and after that we make a try catch response and then let's set that equal to an await where we make fetch request to the mapbox url that i set up once that's resolved set that variable to data and we're going to make another await turning that response to json if that's successful send the stack of success and of course in our cache it will catch any errors sending a status of 500 meaning internal server error so let's set up some more contacts going back to ubercontext.js in line 15. i'm going to set up my use and create a state variable called base price and set base price just like that okay within here in line 32 we need to set up another use effect in a dependency module i'll put up if the pickup and coordinates drop off coordinates change that's the only time i want this used effect to run and if there is no pickup coordinates or there's no drop off coordinates just return otherwise i'm going to set up this asynchronous function and make an await fetch call to get the duration right and from there i want to post the pickup coordinates and the drop off coordinates and send that over to my get ride types api that i set up alright so i can take out going back to write selector i can take out that base price that i had set up i'll actually just pull that from my contacts which means don't forget to set it up in the value to add all those variables that we need so add to my uber context provider in the value and in the confirm.js file let's go into our confirm.js and in line 47 where it says confirm here and selected write that service we also want or to write or uberx because we want either order to show up if one doesn't exist the other one will pop up and so now what we could do is coming down to line 47 is add some curly brackets here and make sure that all of those variables exist so we can say pick up coordinates and drop off coordinates and ride selector hitting save now it says uberx is not defined because it thinks it's a variable just put that into a string and that should be fine so i'm just going to type in santa monica sophie stadium let's see if it's going to calculate the price let it load for a second awesome okay cool so once the map box settled we can look over by the price and it actually says na right so at some point it's not actually sending back a number so let's go check this out at ride selector let's console.log what we're getting back as the base price okay let me just check out this error data only absolute urls are supported so what that tells me is to go into get duration and let's just console log the mapbox url just in case okay i'm just going to reset my terminal by running the cell by clearing it and then running versus dev again i'm going to type in the type in santa monica and sophie stadium see what comes up i'm going to hit enter right so our pins are working and if you look there is the price i'll hit confirm let's take a look hey there we go that's the trip price let's go so not only we are able to calculate the price now we're still also able to save that as our trip with the new price this is looking amazing so far okay with that we can move calculate pricing to done and there we go we have one thing left if you guys made it to this video and you're at this part in the code you are crushing it so with the last step we need to do is just charge this user and let's deploy the whole thing to versailles are you guys so excited i'm excited let's keep on coding we need to charge this user with the price that we calculated meaning we're going to send a request to charge them to mask so let's hop over to our uber context and let's add that metamask variable in there that i set up previously okay going into confirm.js let's add that metamask variable in our uber context in line 13 so that we can call it in our js and go over to your store trip details within the trap the try block in line 40. let's make an await here and do metamask.request we can send that transaction over alright so the method is eth underscore send transaction with the params being from and the value of that being current account and then for two we can send it to process.enb next public uber address so you guys should know what that means at this point essentially we're using the next public uber address as the wallet where you're going to send money to so think of this as us sending money to uber if you guys want to send me a theory go for it this is my wallet address okay but yes i can switch between these two wallets so to prove the payment and of course we don't have that environment variable set up so let's set it up in versailles so going into resell and under the environment variables tab with the name make sure it's the same we learned from our mistakes let's type in next public user address paste in the wallet address that you want to send money to what you consider as uber and let's add that in so now we're actually able to use that so essentially what i did is i am going to send money based on the price that is calculated and we're going to send it over to uber quote unquote so of course whenever you make a new environment variable to versailles let's reset our terminal and type in vercell dev again to run the project and of course we have to make this gas property here and type this in and for the value paste this in and pass in price okay so just to clear my terminal let's also make sure to yarn and ethers because we're going to need that in order to let this run that's why you see this error can't resolve ethers let's import so if we once we do yarn at ethers go ahead and import ethers in your confirm.js rerun your terminal again and i'm just going to refresh my page and there you go no more ethers area very nice so i'm going to just try this out again i want to type in santa monica let's actually go to marina del rey there you go and that's the pricing looks good so let's confirm that ride let's hop over so what should happen when we confirm the ride is that we should be able to send our transaction to that uber account and there we go look at that we're gonna get a notification saying that this account is going to the price that i calculated to the uber wallet that i set up and if you look at the details you can actually view this on ether scan to verify that this was an actual transaction that you guys made on the rinkeby testnet and since it's actually sending it to that test net it's going to take a couple minutes to update the blockchain and voila success awesome all right so we were able to send money to the uber account amazing so let's go we finished everything in our notion and the last thing we need to do is make sure we deploy to versailles so again i'm going to write recell here to upload what we have to my versailles project are you guys ready to deploy let's do it okay so once you do that you should see that it's building we can watch that over here in the overview and we see the most beautiful line at the bottom there done and if you click on this link you should see the actual code live in this deployable link so you can send this to your friends your mom this is amazing so be sure to add this to your portfolio and if you thought this tutorial was amazing feel free to drop a like down below and if you haven't already watch our previous tutorial on twitter i'll see you guys in the next video peace
