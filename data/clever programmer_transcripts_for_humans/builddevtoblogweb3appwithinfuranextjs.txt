With timestamps:

00:00 - in this video you're going to be
00:01 - building the dev.2 web 3.0 Tab and
00:04 - you're going to be using infuro to
00:06 - connect this app to the ethereum
00:07 - blockchain we're going to be using
00:08 - solidity to write our smart contract
00:10 - that we'll be deploying to the
00:12 - blockchain you're going to be able to
00:13 - create and upload new posts which others
00:15 - will be able to read and also give a
00:16 - thumbs up on so this is your reminder to
00:18 - give a thumbs up to this video And
00:19 - subscribe to our channel so with that
00:21 - said let's just jump straight into a
00:23 - building all right so step number one
00:25 - will be just going into your preferred
00:29 - location to me that's that's what it's
00:31 - going to be and then just typing in MPX
00:33 - clever programmer without typos
00:36 - preferably because that's our custom
00:38 - built CLI tool now you just pop in your
00:42 - email address and name right there and
00:46 - then you want to go for solidity blog
00:49 - now once you selected that it's going to
00:52 - be the perfect time to smash that like
00:53 - button because it's going to take a
00:55 - little bit of time to set up your
00:57 - project now once this project once this
00:59 - goes through You're Gonna Know it
01:01 - because it will open up vs code for you
01:03 - so let's wait for that cool nice
01:07 - so this one is good just double check
01:09 - before we get started that you have all
01:11 - the node modules ready both in the app
01:13 - folder
01:14 - wrong tool and like outside there I know
01:19 - why I showed the other way around but
01:20 - you get the point and then once
01:22 - someone's as good or if you don't you
01:24 - just go ahead and npm install then and
01:27 - you're good to go so once that's done
01:29 - you just want to open up your terminal
01:31 - and then type in your Dev that'll start
01:34 - this local server which if you copy
01:37 - and pop it in your Chrome
01:39 - basically this is what you get and
01:42 - congratulations you have set up your app
01:45 - all right all right so step two is going
01:48 - to obviously creating the contrast so
01:50 - let's actually go ahead and create them
01:53 - so what I just did is press command J
01:55 - and these terminal window popped up and
01:58 - you can just create like a new one right
01:59 - there so what you can do is type in
02:01 - truffle and if you don't have the
02:03 - Truffle CLI installed no worries just go
02:07 - Google for truffle CLI install and it
02:12 - will pop up how to do it that's it go
02:15 - ahead click that guy and then here are
02:17 - the detailed thingies and how you do it
02:20 - all right so what you want to do is type
02:23 - in I'll just actually moving forward
02:25 - I'll just assume you have these things
02:27 - ready and whenever something new pops up
02:29 - I'll just explain how to install but
02:31 - I'll move forward like if you had it so
02:33 - pause it right now install and then we
02:35 - can go ahead so what you want to type in
02:37 - is truffle
02:39 - create tracked and then you want to
02:42 - create a blog Factory and you want to
02:45 - add the factory after it I'll explain it
02:47 - a little bit why and then just hit the
02:49 - up arrow and then change this to post
02:52 - now if you recognize it there's a new
02:55 - folder right there and two files with
02:58 - the exact same names that we just typed
02:59 - in so there is our Factory and there is
03:03 - our post these are like super basic
03:05 - stuff like super basic contracts but
03:08 - it's a contract so that's what we came
03:11 - for
03:12 - now what you want to do
03:13 - is I should first understand why it is
03:16 - the way it is and why did we just make
03:18 - these Factor so here's how we're gonna
03:20 - work
03:21 - we will have a factory
03:24 - that will basically produce all the our
03:27 - all the other posts so what does that
03:30 - mean we will only deploy this Factory
03:33 - contract and all the posts that we will
03:36 - later like when we build the app each of
03:40 - those posts will be a separate contract
03:42 - meaning
03:43 - each post will have its own 0x something
03:47 - nada
03:48 - address
03:49 - and so all the trades and all the
03:52 - details will be stored in the contract
03:54 - on the blockchain and this is just a
03:56 - super efficient way
03:58 - this is just a super efficient way to
04:00 - keep track of everything you want to
04:01 - keep track of so what's going to happen
04:03 - we'll deploy this guy and then in this
04:06 - one we'll have a create blog post
04:08 - function which we'll go ahead
04:11 - and create ours create a post for us and
04:15 - then create another post
04:17 - That was supposed to be a p and another
04:20 - post
04:21 - that's why it's called a factory does it
04:24 - make sense if not just rewind it real
04:26 - quick and obviously I'll explain again
04:29 - duh
04:30 - all right so that's the concept behind
04:33 - it let's go ahead and make it happen
04:36 - so initially what you want to do is I
04:39 - really like when it's like split view
04:41 - and I'm just gonna zoom in for you so
04:44 - you can see it better
04:46 - all right that should be good
04:47 - so what you want to do the very first is
04:50 - just make sure the solidity version is 0
04:52 - 8 16 in both files and then for now
04:56 - we're just gonna work in the post
04:58 - file for a little bit so what you want
05:01 - to do is we'll Define a couple variables
05:04 - in here obviously each post will have a
05:07 - and that's going to be an address in
05:09 - this case because we're happy
05:12 - is going to be a public address it's
05:14 - going to be called author and then we're
05:15 - going to have a string which is going to
05:18 - be public again it's going to be post
05:21 - title
05:22 - next up we're going to have a un256
05:25 - without the nine it's going to be like
05:29 - count because you want to count how many
05:31 - people liked or both right then a tag
05:35 - basically it's going to be like a
05:37 - hashtag if you go to the repo link Down
05:40 - Below in the description scroll down
05:41 - there's a screenshot and you'll be able
05:43 - to see where the tag is that's what's
05:45 - going to be stored in there next up a
05:48 - timestamp actually there's going to be a
05:50 - Content too but I wanted to put in a
05:53 - timestamp time stamp just like that yeah
05:56 - whatever also don't worry about all
05:59 - these errors sometimes we're going to
06:00 - address them sometimes we're not it's
06:02 - because I have a bunch of extra
06:04 - extensions that are checking for like
06:06 - code cleanness and all that stuff which
06:09 - obviously freaks out because there's an
06:12 - empty Constructor for no apparent reason
06:14 - now the only thing I don't get is why
06:16 - doesn't it freak out here I don't know
06:19 - anyways so next up what's what we're
06:21 - going to do is create the construct
06:23 - structure so what we're going to do is
06:26 - we'll have a function that'll call this
06:29 - Constructor guy over here
06:31 - and so for that we've got to set this
06:33 - boy up
06:33 - we're gonna pass in a couple things so
06:35 - we're we'll pass in a string and just
06:38 - get used to it like sometimes when
06:41 - you're dealing with strings you got to
06:42 - type this memory thing in but not with
06:45 - addresses so that's just a weird
06:47 - solidity thing so we'll go with string
06:49 - memory and it will be a underscore title
06:52 - and this underscore is just so it
06:55 - indicates that it is a internal variable
06:58 - that is not going to be used outside
07:00 - this construct Constructor at all so
07:03 - it's only for internal use now next up
07:06 - we're going to have the address for the
07:08 - author and then we're going to have a
07:11 - tag
07:12 - and we're gonna have it for the
07:13 - timestamp and we're going to have it for
07:15 - the content now once we got all this
07:19 - notice how we like skipped on light
07:22 - count that's because we're just going to
07:25 - like hard code it in the next section
07:26 - because we're literally just catching
07:28 - whatever the factor is going to pass in
07:31 - this is going to be caught here and then
07:33 - we're gonna do stuff with it here
07:35 - so we just kept on it this is going to
07:37 - be recorded not a big deal actually I'll
07:39 - move it down there really not a big deal
07:42 - so what you want to do is for each thing
07:47 - so we got a post title like just set the
07:50 - corresponding
07:52 - item it like makes sense post title you
07:54 - want to the title thing author and then
07:58 - obviously light count is going to be
08:00 - zero and you'll know no likes
08:02 - no big deal
08:03 - so once we're good with that's basically
08:06 - how we're gonna uh if you want the
08:08 - contract to be known yeah whatever all
08:11 - right so before we set up the factory
08:13 - time for a coffee break with that done
08:16 - I'm gonna go ahead and start setting up
08:18 - our Factory
08:19 - now in the factory there is no need for
08:22 - any kind of Constructor we're not
08:23 - constructing anything in fact the
08:25 - factory is going to be the Constructor
08:27 - folder post
08:28 - you get the point completely ignore that
08:31 - that was some weird stuff by co-pilot
08:33 - sometimes it's weird sometimes useful
08:35 - but in this case it was weird so what
08:38 - you want to do is create a so what you
08:41 - want to do before creating anything is
08:43 - you've got to import the post
08:46 - so import pose.sol so that's good now
08:50 - that will basically import
08:53 - everything from here it's not like
08:54 - JavaScript where you have to like
08:56 - specifically One By One Import yeah just
08:59 - import the file you're good so you have
09:02 - access to everything now so we're going
09:05 - to create a new instance of this guy so
09:07 - the hence the capital post
09:10 - like that and this is going to be an
09:13 - array of posts that's how you're doing
09:15 - in solidity now this guy's going to be
09:17 - public and we're going to call it
09:19 - uploaded posts
09:22 - so far
09:23 - should be easy next up we're going to
09:26 - create two functions they're going to be
09:27 - function number one create blog
09:30 - post
09:32 - and then we're just going to leave it at
09:33 - that for now don't even worry about it
09:35 - we're going to fix action we can add
09:37 - public to it so it like goes away yeah
09:40 - perfect and then there's going to be a
09:42 - second function which is going to be
09:44 - function get
09:46 - uploaded posts bam
09:49 - and I think this is the easier one
09:52 - so before we do anything with the
09:54 - created blog post we're just gonna
09:57 - go ahead and return this you can try by
09:59 - yourself just pause it if you want to
10:02 - but if with that said I'm just gonna
10:04 - continue now so what you want to do is
10:10 - in solidity you gotta have this view
10:12 - keyword in here because you're returning
10:15 - something so it's like the read access
10:17 - and then you've got to Define what
10:19 - you're going to return it's returns
10:21 - because this post return or this
10:23 - function returns and so like third
10:25 - person whoa this is gonna return a post
10:29 - array from the memory
10:31 - all right so that's good we're going to
10:33 - return the post array all right now the
10:35 - only post Ray that we got is literally
10:38 - uploaded posts so we're just going to
10:40 - return that on Bob's your uncle
10:43 - now
10:44 - creating a post is a little more tricky
10:47 - so here there's going to be a couple of
10:49 - props that we're going to need to pass
10:51 - in it's going to be there's going to be
10:53 - a string again string memory whatever
10:56 - post type is going to be
10:59 - string memory
11:01 - I'm just gonna be tag there's gonna be
11:04 - timestamp
11:05 - like that and there's going to be
11:07 - content
11:09 - just so now
11:11 - here what you what we'll do
11:14 - is yeah exactly that so what's going to
11:17 - happen is we're going to create a new
11:19 - instance of post
11:22 - again this guy
11:24 - so here's gonna be the new instance
11:26 - let's just name it new post and it's
11:28 - going to be eight new it's going to be a
11:30 - new post
11:32 - we defined all this in a specific order
11:36 - so we're going to follow that in here
11:39 - all right so what's going to be is we're
11:43 - gonna have to
11:44 - send in post title we're gonna have to
11:46 - end in an address that's going to be the
11:50 - person
11:51 - who's the author which in this case is
11:53 - going to be we're going to say message
11:55 - yeah message that's sender which
11:58 - literally all that means is when you're
12:01 - using this app and then you click a
12:03 - button and your meta mask pops open yeah
12:05 - that address that like your metamask
12:07 - address or whoever is the user next up
12:10 - pass in tag
12:11 - person time stamp and passing content
12:15 - that's it
12:17 - so once you created that guy
12:19 - figure out what's going on here missing
12:21 - one thing oh might as well close yeah so
12:24 - it is horror for me it always requires
12:27 - these semicolons anyways and what you
12:29 - want to do is yeah now that we created
12:32 - this array technically or now we created
12:36 - this instance of the new post
12:38 - might as well push it in the uploaded
12:40 - poster and that's how we're gonna store
12:43 - it just like that so upload a post push
12:46 - new post very JavaScript D I don't think
12:49 - it needs any explanation so that's
12:51 - basically step one of the contract now
12:55 - what you want to do is come into
12:57 - extensions and type in remix because
12:59 - that makes it infinitely easy to test
13:01 - out all of the contracts that you have
13:04 - to write and whatnot this is the cop
13:06 - this is extension to get it's from remix
13:08 - project 27 yeah just look for it you'll
13:11 - find it once you installed it it doesn't
13:13 - need any kind of setup though once you
13:14 - know this is the icon that you that will
13:16 - pop up here so just look for that and
13:20 - before you do anything just like this is
13:23 - your solidity version you have to make
13:26 - sure that the compiler you're using and
13:28 - version of solidity you're writing in
13:30 - matches so before you do anything
13:33 - side compiler version right there and
13:35 - select point 16. so now
13:38 - that is done and actually you can
13:39 - confirm that it says that so now that
13:42 - it's done you want to click run and
13:44 - deploy and hit activate now what this is
13:47 - doing it's pulling up a previous
13:50 - instance of mine but I'm just going to
13:52 - go ahead and
13:54 - disconnect so this is how you will see
13:57 - it it might be completely empty or not
13:59 - but if it is we're gonna figure out what
14:03 - to put there so you want to open up a
14:05 - safari window and go to trufflesweet.com
14:08 - ganache
14:10 - and by the way you could use a you could
14:14 - use a test net link given by inferior or
14:17 - you could use it as a link given by
14:19 - infuria but this time you don't want to
14:22 - because that needs like additional setup
14:24 - and this is for a testing purposes only
14:26 - we're going to use inferior for the
14:28 - deployment you want to download this guy
14:30 - this will download a download file once
14:32 - you've installed it this is how it's
14:34 - going to look like
14:35 - actually let me restart it once you
14:38 - installed ganache this is how it's going
14:40 - to look like when you start it and you
14:42 - can literally hit quick start and it
14:45 - will pull up something like this you
14:47 - will not see my instance because it's my
14:50 - instance but there you go here's your
14:53 - everything gives you a bunch of eat now
14:57 - this link is coming from right here copy
15:01 - this guy put it in Click connect you're
15:04 - good and it should say something like
15:06 - network is local or a custom Network and
15:10 - we you won't see any of that stuff so
15:12 - I'm removing that this is how you will
15:14 - see it now what you want to do is Select
15:16 - like literally old block Factory file
15:19 - because that's where we're gonna be
15:21 - doing things so initially what you want
15:22 - to do is like the Blackberry hit compile
15:25 - wait for it to go through and I open
15:28 - this output thing up right here so you
15:29 - can see it so it has issues
15:32 - so there's issues with the concert so
15:34 - that means it's this file okay so maybe
15:36 - let's remove public let's see if that
15:38 - helps I'm just going to remove
15:40 - everything
15:41 - see if that fixed it and apparently it
15:44 - did so we're good there and once you hit
15:48 - compile it's going to create this
15:50 - artifacts folder now this is where the
15:52 - ABI goes you don't have to worry about
15:55 - it just yet we're going to be using it
15:56 - in the lid so once that's done just hit
15:59 - deploy now it deployed one instance of
16:03 - my block Factory I wish you want to just
16:05 - put in some dummy data as a title tag
16:07 - timestamp and content and yeah I know
16:12 - it's not timestamp but we also just made
16:14 - it a string and it's also only for
16:16 - testing purposes so it doesn't really
16:18 - matter hit transact and that should
16:21 - technically go through
16:23 - and so you will see a bunch of addresses
16:25 - and gas used and whatever
16:28 - don't even worry about it at all now
16:30 - what you want to need what you need to
16:31 - do now is call this get uploaded posts
16:34 - well this will do is literally just
16:37 - return to this why is that important
16:39 - because here we created an address we
16:43 - created a new post instance so what that
16:46 - does is it narrates an address to us
16:48 - rather than address for us where we will
16:50 - deploy that specific post that's what I
16:53 - was talking about when I had that stupid
16:55 - drawing so click that
16:58 - so click that and scroll down and here's
17:02 - your array that is your address that you
17:06 - want to copy now copy that address and
17:09 - paste it in here so what this will do is
17:12 - this is that you specify which address
17:14 - you want to deploy your post at so we
17:18 - got a compile post so let's do that real
17:21 - quick
17:22 - that's good and then select post and
17:26 - copy these exact things
17:29 - in here so you want to do title skip
17:32 - address for a little bit let's put in
17:34 - tag time and now content
17:38 - now for address you want to put in this
17:41 - address like basically your address
17:44 - which you can actually copy by coming
17:46 - here
17:47 - I think yeah it's the same address so
17:50 - just like double click that and then put
17:52 - that there so ganache helps with that
17:54 - too you can't just copy it from here
17:57 - and now you will do is it is don't press
18:00 - that nah what you want to do is press at
18:04 - this so specify this was specifically
18:07 - push or deploy this contract to that
18:10 - address that was generated for us let's
18:12 - do that
18:13 - and these two addresses shouldn't match
18:15 - so 0x07 E2 that's exactly what we
18:19 - started here and here is our address or
18:22 - here's our post
18:23 - so what you can do is I'm just going to
18:25 - clean the output again and click author
18:29 - and you should literally get back the
18:32 - like your address that you put it you
18:33 - just put it in there content light count
18:36 - it should be zero there you go that's
18:38 - all we did for now and this is your
18:41 - first function if you get back all this
18:44 - data that you put in here you can test
18:47 - out all of them if you get back the
18:49 - exact same data you're good to go you're
18:52 - good to continue if not there's likely
18:54 - some sort of mistake in either this or
18:57 - this file you definitely want to go
18:59 - through it and debug it before
19:01 - continuing
19:02 - all right now now moving forward I'm
19:04 - going to be
19:05 - speeding up a little bit and close this
19:08 - run deploy thingy for now
19:10 - also hide that and by the way our factor
19:14 - is essentially done that's literally all
19:16 - we have to do for the factory so I'm
19:20 - just going to close that too because
19:21 - we're not going to need it anymore now
19:23 - you want to save a couple more things up
19:26 - here in the post
19:27 - so I want to definitely create a struct
19:31 - a struct is
19:33 - you should think of a struct oh just so
19:36 - first of all you want to create a struct
19:38 - now a struct is basically just a thing
19:42 - of it as an array and here like it's
19:45 - going to be strongly typed so we're
19:47 - gonna add in an address it's going to
19:49 - have an address which is going to be
19:51 - create and we're going to have uint256
19:56 - is like count
19:57 - and we're gonna have a bull which is
20:00 - gonna be is a light there's gonna be all
20:02 - kinds of type of stuff and we're gonna
20:05 - create a mapping which is basically just
20:06 - a double
20:08 - it's gonna be an address
20:09 - to Bull
20:11 - likes that's pretty much how this truck
20:13 - is going to be built up now next up we
20:17 - want to create a separate mapping
20:19 - which is going to be an address I'm
20:22 - going to map the address to a Bool again
20:26 - and it's going to be a public one
20:28 - as we'll call it did once you call it
20:31 - and pass in an address is going to
20:33 - basically tell you whether that address
20:35 - like the post or not pretty simple and
20:38 - one more is we're going to create a
20:41 - actually we should do this up here
20:43 - we're going to create an array out of
20:45 - these likers oh Shrugged I said you
20:49 - should think of it as an array you
20:51 - should think of it as an object instead
20:53 - it's an object okay shocked object is
20:55 - the array that was a mess up my mind so
20:58 - like hers you've written an array of
21:01 - objects and this is going to be a public
21:04 - thingy and just create a likers or
21:08 - actually we can just call it likes
21:11 - hooray now once that's good
21:13 - no one's as good you remember how we had
21:16 - to actually let me just pull it up again
21:18 - remember how you had to call every
21:21 - single detail one by one that's not
21:23 - really efficient so what we want to do
21:25 - is just create one function that will
21:28 - literally send back all the data so
21:31 - we're just going to call it function got
21:33 - post details
21:35 - and so create that post it's going to be
21:37 - a public View and it will returns it
21:42 - will return an address
21:44 - it will return a string from the memory
21:48 - every single time we'll create return
21:51 - another string from the memory wait what
21:54 - am I typing might as well explain it so
21:56 - address is going to be the author this
21:59 - string member basically you want to
22:01 - return all these in some sort of an
22:04 - order but in the return Clause you want
22:06 - to make sure that this order the data
22:08 - type order matches on how you want to
22:11 - return it so I'm just going to copy this
22:12 - down just so I have a reference and
22:16 - paste it here
22:17 - and so I can refer back to it so once
22:21 - again an address for the author a string
22:24 - for the title another string for tag
22:26 - basically four strings from the memory
22:29 - so we already got two three and four
22:34 - and you want to return a un265. now this
22:38 - looks a little weird so I'm just going
22:40 - to format it a little bit and so here we
22:43 - go now
22:45 - you want to now next up all we will do
22:49 - is literally just return and then go
22:52 - author post title tag timestamp content
22:55 - light count
22:56 - and you're basically good once again
22:58 - double you want to double check that
23:00 - author is addressed like the data
23:03 - structure here like all the data types
23:06 - the order of the data types here matches
23:08 - the data types of these variables and if
23:11 - that's true you're technically good with
23:14 - this specific with this function now I'm
23:18 - not going to test out one function every
23:21 - single time so I'm just going to create
23:23 - the new function which is going to be
23:26 - like post and that'll take in nothing
23:29 - and it will be a public post what the
23:33 -  man it'll be a public one and we're
23:37 - just gonna do like a
23:39 - we're just gonna make like do like a
23:41 - guard Clause up here so we'll be will
23:43 - require that the did the mapping up here
23:48 - this guy and we're gonna pass in the
23:50 - message sender address so what we're
23:52 - going to do is did like and message dot
23:55 - sender
23:56 - equals false and if that if this is true
23:59 - meaning the person no so if this is true
24:02 - we just let the function to run but if
24:05 - this is false meaning they did like
24:09 - message sender is true meaning the
24:10 - personality right like that this is
24:12 - going to be the error though about right
24:15 - basically you all already liked this
24:21 - post that's it and just close that once
24:24 - again this required what does it do
24:25 - require means that it is guarding
24:29 - everything that comes after
24:31 - so we require that the person who tries
24:34 - to leave specific post didn't like it
24:36 - before this is our requirement if that's
24:38 - not set up yeah if that requirement and
24:41 - if that requirement is not mad we're
24:43 - going to pass back this exact error
24:46 - message if that's if that requirement
24:48 - checks out we're good to move forward so
24:51 - might as well immediately immediately
24:54 - just set that to true they can't like it
24:56 - ever again and we're going to increase
24:59 - the like count by one and we're going to
25:02 - put uh there's those likers addresses
25:05 - and then we also want to create an array
25:09 - out of all the addresses wait what the
25:12 -  and you also want to keep track of
25:14 - everybody who liked the post so what you
25:17 - want to do is like ours addresses
25:21 - actually
25:22 - ah you want to keep track of all the
25:24 - addresses that like the post so you want
25:27 - to scroll up and create an array of
25:30 - addresses which we will call likers
25:33 - addresses likers addresses
25:36 - and we're good and so we come down here
25:40 - and then just push the message sender in
25:42 - there so we'll use in the front end
25:44 - don't worry about it for now
25:46 - it's basically it now
25:49 - let's go ahead and deploy all these
25:51 - contracts again
25:52 - so we don't have to redeploy the block
25:55 - Factory that's good to go
25:57 - however I'm going to remove that and all
25:59 - the history here so I'm just going to
26:01 - create like another
26:03 - post instance we're going to have title
26:06 - two tag two time two
26:10 - and content to hit transact and get back
26:16 - the result now if you look at it we
26:19 - already have two addresses here so you
26:21 - want to grab the second one because
26:23 - otherwise
26:25 - you're gonna deploy redeploy the first
26:27 - one which is obviously not good so paste
26:29 - that here
26:30 - and put the details there so go title
26:32 - two
26:33 - and go here copy this guy paste it tag
26:39 - two
26:39 - time to and content to
26:43 - hit add address
26:45 - and you should be good to go
26:47 - whoa so this happened because it didn't
26:50 - compile the post again so let's try that
26:52 - let's try doing that because that would
26:54 - be a good idea and I'm going to remove
26:56 - this deployment so this is your reminder
26:58 - before you deploy a new post
27:01 - you want to compile it
27:03 - so you saw this in real time going bad
27:05 - so we're gonna try it again
27:08 - the only thing that's gonna change is
27:10 - I'm going to rename title to title 23.
27:13 - call this guy again and now I'm gonna
27:16 - pick the third address
27:18 - paste it there and title
27:21 - 23
27:23 - tag we need the address
27:26 - that's not even that address this is the
27:28 - address
27:29 - oh and also friendly reminder like don't
27:31 - ever hit command eh
27:33 - on remix because it does this weird
27:36 - stuff and then you have to just restart
27:38 - it so interesting things we're early
27:40 - this is blockchain
27:43 - technically you should still have that
27:45 - address okay so you gotta repaste
27:48 - everything title two three and then the
27:52 - address
27:53 - this address
27:54 - paste it tag to
27:57 - time 2 and content to
28:01 - hit add address
28:03 - and now there we go like now that I'm a
28:06 - bunch of more stuff here so we'll so now
28:09 - you got all the author content yada yada
28:11 - but now you have this get pose details
28:14 - so call let's call that wow
28:17 - so that and that's interesting so I
28:20 - think what happened is I have the wrong
28:23 - like I deployed it to the wrong address
28:25 - let's try this again we're gonna create
28:29 - a new Factory item title Four tag four
28:34 - time four and content four hit transact
28:39 - call it get the very last one
28:43 - paste it right here
28:45 - four
28:46 - and hit at address
28:48 - and we should be good now right get
28:52 - posted what the so now that we're
28:55 - done with all the functions we're based
28:57 - we're technically done oh so we're
29:00 - technically done with all the functions
29:02 - and basically all our contract is ready
29:04 - to go
29:05 - so now what we're going to do is we're
29:07 - just going to go ahead and test it out
29:10 - so
29:12 - before we even get into it let's hit
29:14 - connect there let's just move everything
29:17 - from all kinds of History because you
29:20 - have to recompile all your accounts and
29:24 - you have to redeploy them all so just
29:26 - remove everything all the one's not
29:27 - going to work not even the compilation
29:30 - so let's get right there
29:32 - so I'm going to click go back to the
29:34 - block Factory file and select that
29:36 - compile the guy let's see if that goes
29:39 - through
29:39 - okay that should be good we got oh here
29:42 - we got the metadata whatever so
29:45 - we can just close that actually I'm even
29:48 - going to turn on my Do Not Disturb mode
29:51 - okay so my factor is my new Factory is
29:55 - compiled which by the way it didn't
29:56 - really change but because it's like
29:58 - interacting with the post itself it does
30:02 - change so you definitely make sure you
30:05 - you recompile it so now go ahead deploy
30:09 - that guy and I'm just going to let's
30:12 - make it actually bigger so it like jumps
30:15 - together like that and what should we
30:17 - call it this is a title we're gonna have
30:21 - a tag again it doesn't really matter
30:23 - it's only for testing purposes so hit
30:26 - transact
30:28 - all the gas used perfect now let's call
30:30 - that so that's your address that you
30:33 - want to deploy the post at so now what
30:35 - you will do is go back to your like
30:37 - select the post in a compiler compile
30:39 - that
30:40 - just wait for it wait for it okay we're
30:43 - good this will show up once it's good to
30:45 - go and you can literally copy all this
30:49 - stuff so this is a reminder don't ever
30:51 - press command a in this Explorer thingy
30:54 - I don't know if I said that before but I
30:57 - always mess it up and
30:59 - what happens so yeah I'm just going to
31:01 - type everything in here
31:03 - like that I think it's still visible
31:06 - because I can see it and just hit add
31:09 - address down here
31:11 - like you'll probably see it actually let
31:13 - me just restart
31:15 - all right to post
31:17 - let's compile that guy okay title
31:20 - yeah lost that okay that's fine
31:23 - I got that on copy so we're gonna come
31:26 - in copy this address paste it
31:29 - protect put time
31:32 - content in there
31:33 - and before I mess it up copy this
31:37 - address put it right there
31:39 - and that'll be the address where we're
31:41 - going to deploy this fingers crossed is
31:43 - going to work bam hit add address and we
31:47 - should oh there you go we got it and if
31:50 - you remember last time we only had a
31:52 - couple things that we could call now we
31:53 - can like transact and do all kinds of
31:55 - stuff so the big difference here when
31:58 - you call it's like a get request for an
31:59 - API when you transact it's like a post
32:01 - request for an API so that's mainly what
32:05 - it is and that's how you like think
32:06 - about these things you're like all these
32:08 - basic stuff like still working get back
32:11 - the content whatever that doesn't really
32:13 - matter now what we came here for to get
32:16 - post details let's click that guy and
32:18 - look at that you literally get
32:20 - everything back in a
32:23 - strange object but you get it back so
32:26 - that's cool you can at least do
32:28 - something with it on the front end we'll
32:29 - get that through in later so now we're
32:32 - going to test out is literally the two
32:35 - functions that we just built so one of
32:37 - them was the get pose details with which
32:40 - we literally just tested out and the
32:43 - other one is the like pose so come here
32:45 - live post hit transact I'll clear that
32:48 - out so that should have probably gone
32:51 - through now
32:53 - let's go let's check on light count it
32:55 - should be one right and there you go now
32:58 - it says one if it doesn't rewind back
33:00 - figure out where any error is at once
33:03 - again I'll just show the entire so you
33:05 - can pause it and check it out so here's
33:08 - a slow scrolling that should be pretty
33:10 - much sufficient to find the error and
33:12 - pause the video take your time and if we
33:14 - get post details you see that fifth
33:17 - thingy that says one now before it says
33:21 - zero and if you ask me what that is it's
33:25 - literally the fifth thing that's being
33:27 - so what's the fifth thing that's being
33:29 - written author One post attitude tag
33:31 - timestamp yada that's a light count so
33:33 - that again works so it seems like we
33:37 - were able to like the post we were able
33:39 - to do all kinds of stuff with it with it
33:42 - now I guess it's time we connected our
33:46 - front end so I guess I'll see you there
33:49 - all right so with that let's go ahead
33:52 - and get started connecting our metamask
33:56 - so that is actually going to happen in
33:58 - our index.js file so
34:01 - we're gonna need here is a couple of
34:04 - things first off we're gonna have to
34:06 - import a bunch of things from Rainbow so
34:10 - we're gonna go ahead and import Ray in
34:12 - about Dash me
34:14 - yeah slash yeah slash rainbow kiss
34:19 - styles.css so there
34:22 - next up we're gonna go ahead and import
34:25 - get default wallet
34:27 - get default wallets and rainbow
34:32 - bow bow hit provider
34:35 - again from rainbow and by the way this
34:38 - already comes with the CLI tool so you
34:41 - don't have to install any of this then
34:43 - we're gonna go ahead and import chain
34:46 - config great
34:48 - configure a chain
34:50 - create client and lag me config
34:54 - config from wagme and then we're going
34:57 - to import two providers now
35:00 - one of them is B even fewer provider
35:04 - from
35:05 - wagme slash providers slash
35:09 - fira like that
35:11 - and then we're gonna import local gen
35:14 - RPC quieter
35:17 - like that I don't know if that's the
35:19 - yeah Jason RPC like that so this one is
35:22 - going to be
35:23 - important when we set up the local local
35:26 - contract connection so that's where it's
35:29 - gonna come in and I believe this says
35:32 - all we need for the metamask connection
35:34 - all right
35:36 - so what we're going to be doing now is
35:39 - right under actually we don't need to
35:41 - worry about this custom Styles we can
35:43 - just work above here
35:44 - so what I'm going to do is cause the
35:46 - chains and provider
35:49 - and we're going to destructure that and
35:51 - we're going to go configure chains let's
35:54 - close that so we don't have any error
35:56 - going on
35:57 - and we're going to configure chain dot
36:01 - Gurley like that and we're also going to
36:04 - configure chain.localhost
36:07 - so these are the ones that are going to
36:10 - be showing up like these are the chains
36:13 - this app is going to be compatible with
36:15 - so these aren't going to go into that
36:18 - array array and we're gonna go in
36:22 - and we're going to go ahead and go in
36:24 - and configure both so we're going to
36:26 - create a invert provider
36:28 - and here we're going to need an API key
36:32 - like that I'm just going to leave it a t
36:35 - for a little bit and we're going to set
36:37 - it up in one second now you also want to
36:41 - make sure that this has a priority of
36:43 - one meaning that no matter what inferior
36:48 - will take priority one if both the
36:50 - chains are available it's going to go
36:52 - with the early the girly chain meaning
36:55 - meaning we'll be using inferior mainly
36:58 - and if that's not sufficient for
37:00 - whatever we're trying to do then we're
37:03 - going to go on and use the other
37:06 - provider which we're going to be setting
37:09 - up in a little bit let's just take a
37:10 - look at what's happening here I think we
37:12 - don't need this object yeah and the
37:14 - other that we'll be creating is the Json
37:17 - RPC provider
37:19 - and that'll have
37:22 - a priority number two
37:24 - so it comes after inferior
37:27 - and we're gonna read an RPC it's gonna
37:30 - be a chain G p
37:33 - and this will be
37:36 - this same exact RPC server that gosh is
37:39 - giving to us
37:40 - paste that there
37:42 - and that should be pretty much set up so
37:45 - now our chains are configured so this
37:48 - application is going to be again
37:49 - compatible with the girly and the local
37:52 - local running chains and so these will
37:56 - be the providers for them you can by the
37:59 - way configure as many as you want yeah
38:01 - but there's no need for that for now all
38:05 - right so next up we're gonna do is
38:07 - create the connectors and that'll be
38:10 - just a get default wallet and we're
38:13 - going to pass in a couple things here
38:16 - we're just going to name it what is it
38:18 - DAV to blog app just like that
38:23 - and we're just gonna pass in the chains
38:25 - so this will be responsible like let's
38:28 - all come together in a second
38:30 - let's just finish it so next up we're
38:33 - going to create a wagme client
38:35 - and that'll be gonna have to configure
38:39 - it with create client
38:41 - we want to make sure that auto connect
38:43 - oops I'll connect is untrue we pass in
38:48 - all the connectors
38:50 - from here
38:51 - and we're going to pass in fighter
38:54 - which again comes from here
38:57 - all right so that that's pretty much all
39:00 - the prep code we're going to be using up
39:02 - here now it's time to come down here so
39:06 - we're going to be wrapping this whole
39:08 - entire application
39:09 - in two hooks
39:12 - so let's see what we've got we got lagme
39:15 - config and we're going to pass in client
39:17 - and the client will be the wagme client
39:21 - so this one that we just generated
39:23 - let's close that guy and next up we're
39:26 - gonna have a limbo kit provider
39:29 - and for that we're gonna pass in all the
39:31 - chains that we generated
39:34 - here so those
39:36 - so that should be pretty much almost
39:39 - good to go now copy that go all the way
39:42 - down wrap that first in there and then
39:45 - copy the wag Closing one and wrap that
39:50 - there and actually there's this Mt jsx
39:52 - fragment now we're not even needing it
39:55 - because these two wrap the entire app up
39:57 - so that should be so far so good
40:01 - now we're going to be doing next is
40:04 - there's a metamask the JS file
40:07 - there's guy we need to set this guy
40:09 - because the app itself if you refresh
40:12 - this happens there so now we set up all
40:15 - the back and for both connection now we
40:18 - actually have to set up the front end
40:19 - for it so this is what we see here and
40:23 - there is literally two things that we
40:24 - need to import here one of them is the
40:28 - Styles file so let's just go get that
40:30 - from here we can just paste it right
40:33 - there and the other one is going to be
40:35 - connect button
40:37 - which comes from the same rainbow kit
40:40 - and instead of this div we're just going
40:43 - to be rendering out this connect button
40:45 - that should technically be enough let's
40:49 - see what do we got yeah that's perfect
40:52 - I'm just going to hit that wow yeah it
40:55 - takes a little time when you initially
40:57 - open it up and before like prior your
41:01 - meta mask was connecting to ganache so
41:03 - just wait for it a little bit and you
41:05 - should be good or you can just go with
41:07 - the different
41:08 - Network
41:10 - unlock it and we should be good to go
41:13 - okay you know whatever switch Network
41:16 - that's completely fine
41:18 - so thanks we have all these networks
41:22 - here we gotta for that
41:23 - in a little bit that's interesting so
41:26 - there's a couple of weird things going
41:28 - on here let's address this one first
41:31 - which I don't really get why it's
41:33 - happening but okay so after refreshing
41:36 - okay it still shows all these up
41:39 - that should be interesting
41:41 - okay so right now when you select that
41:44 - it actually shows all these items that
41:47 - not really sure why it's happening but I
41:50 - have a hunch this has something to do
41:51 - with it so that API key is not valid so
41:55 - on what I'm gonna do
41:57 - is go go to inferior and once again you
42:01 - can use the link Down Below in the
42:03 - description so just use that and then
42:06 - come in here into blog app let's see
42:09 - manage key and girly that should be my
42:13 - key will be blurred out
42:15 - and you want to create a file called
42:17 - env.local
42:19 - so once you create that you just type in
42:21 - inferior
42:22 - API key
42:25 - just paste that key that you have and up
42:29 - here you want to come in and say process
42:32 - dot EnV that oops inferior API
42:39 - ah inferior API key like that
42:43 - so let's let's restart this app let's
42:47 - see if that helped well that didn't help
42:49 - just yet oh so let's see if that helped
42:53 - let's restart this app and it should
42:56 - probably solve it let's see
42:59 - okay I didn't
43:01 - ah okay so you see how we are exporting
43:06 - chains out of here
43:08 - and I'm just importing chain that'll be
43:11 - the issue let's see there you go now we
43:15 - have the two chains that we actually
43:18 - wanted to work with and because we're
43:20 - going to be using the local version of
43:23 - the contract for now we're going to be
43:26 - going with that it's a little faster
43:27 - than any kind of test nut so we're just
43:31 - gonna go with that all right let's see
43:34 - what we got next up so we got the not a
43:37 - mask wallet connection so good job if
43:39 - you made it this far and now we're gonna
43:41 - go ahead and do something else
43:44 - and now we're gonna go ahead and connect
43:46 - the
43:47 - the contract with our front end so I'll
43:50 - see you there
43:52 - all right it is time we actually go
43:54 - ahead and connect our contract with our
43:56 - front end so let's get started let's do
43:58 - that okay oh actually all right so what
44:02 - should we what we're gonna do is we are
44:05 - going to create a context file first of
44:09 - all so how does that even get started
44:13 - all right okay so to get started with
44:17 - the contacts you will need a new folder
44:19 - called context in the app folder and we
44:23 - apparently already have it
44:25 - all right so to get started with the
44:28 - context we're going to be doing is just
44:30 - go ahead and create a context folder
44:33 - inside your app folder inside there
44:35 - you're just going to go ahead and create
44:36 - a context.js file now
44:39 - once that is done you're going to import
44:42 - a couple of things first of all create
44:44 - context and
44:46 - use context because we're going to use
44:49 - it immediately right in here and
44:52 - actually while we're at it let's go
44:54 - ahead and import use State and use
44:59 - effect because we're going to be using
45:01 - these anyways so might as well just get
45:03 - started importing them and we're going
45:06 - to be creating the instances so in the
45:10 - utils folder inside of instances wow
45:13 - what is this red arrow anyways so we
45:16 - should technically already have
45:19 - we should already have the this file set
45:21 - up and we should already we already
45:23 - pasted this this address right here so
45:26 - yeah so it should be no worries about
45:28 - this one oh
45:30 - so you should already have access to
45:32 - this file and I believe we already put
45:35 - the address right here so that should be
45:37 - good to go
45:38 - so what we're going to be doing next is
45:40 - we're going to be importing the blog and
45:43 - the factor instance which we are
45:44 - exporting from right there so let's do
45:47 - blog instance
45:50 - and Factory
45:52 - instance up from there fuels contracts
45:57 - instant oh damn utils and instances
46:04 - all right so that should be good now and
46:07 - the other thing which we already
46:08 - installed with the LI is going to be
46:11 - web3 this is web3.js so we're going to
46:14 - be using that and now let's go ahead and
46:17 - create a app context right now so once
46:22 - we created that that should be good and
46:25 - we'll also need to be creating a
46:27 - provider
46:28 - so app proflider there's a lot of
46:31 - boilerplate code with the when it comes
46:33 - to contacts API so just get the pattern
46:37 - in and you should technically be able to
46:40 - remember it pretty easily afterwards or
46:42 - you can just go back to a previous
46:45 - what is happening here why is it being
46:47 - removed yeah there you go so if you have
46:51 - a context file from the past you can
46:52 - literally just copy these codes like the
46:56 - birthday code there's just pattern
46:58 - recognition once you once you do it like
47:00 - once or twice you will get it in
47:02 - all right and then we're going to be
47:04 - returning up context dot provider
47:09 - and
47:10 - we're going to be we're going to be
47:13 - passing in the children right here
47:17 - just for good measure I will create a
47:19 - test file which will be
47:21 - literally just test and I like to my
47:25 - contacts like this let's just
47:27 - immediately pass it in there
47:28 - and the other thing that we'll be doing
47:31 - is we're just like straight away create
47:33 - a hook with it so we don't have that
47:35 - much code to deal with later on so what
47:38 - we're going to be doing is use context
47:39 - and we're just going to pass in app
47:42 - context
47:43 - that should basically be the most bare
47:46 - bone context API file that we're going
47:49 - to be using later on and like whenever
47:51 - you in the future but this will change
47:54 - yeah obviously that will change
47:55 - okay so let's go into app.js and we're
47:59 - going to be importing
48:01 - app fighter just and that's the thing
48:06 - that we're going to wrap our app so
48:09 - we're going to use the app provider and
48:10 - wrap it around our app that's basically
48:13 - what's happening here so that what that
48:15 - means is everything that is in here
48:17 - we'll have access to any everything
48:20 - in our app provider if we set up
48:22 - everything correctly so to test that out
48:24 - what I usually like to do is go into my
48:27 - index file
48:29 - and in here just go ahead and import use
48:33 - app context from the context file and
48:37 - scroll down
48:39 - and scroll down where you see the router
48:42 - and where the component itself starts
48:44 - and so what you want to do is just
48:46 - deconstruct test from user of context
48:50 - and straight away console log it and if
48:54 - if you will see test next to a fire
48:58 - Emoji like that wish it showed up though
49:00 - okay we're gonna have an alarm in that
49:02 - case
49:03 - so just go ahead hit inspect oh it'll
49:06 - open up on my other screen all right
49:08 - there you go so if you go ahead hit
49:11 - console there you go next to the alarm
49:13 - it says test so that means our context
49:16 - is working and it's ready to go now
49:18 - there's a couple more things that I want
49:21 - to get done before we just wrap we wrap
49:24 - up and call the contacts today because I
49:26 - really do we really want to set it up
49:28 - properly so let's remove tests because
49:30 - we don't need it so there's a couple
49:32 - more things that I want to get before we
49:35 - move on from the context so as you can
49:38 - see I removed all the tasks related
49:40 - stuff from the context as well
49:42 - so what you want to do is go ahead and
49:47 - just create we're going to initialize
49:49 - all the web 3D related stuff before we
49:52 - even move on so we don't have to worry
49:53 - about that later so what we'll do is
49:56 - we'll create a contract
49:58 - instance and inside contracts in a sense
50:01 - that's going to be you state and the
50:03 - initial value is going to be null
50:06 - then we're going to create a const web3
50:09 - instance same deal moving on
50:13 - and current wallet address
50:16 - same
50:18 - oops blog addresses because remember
50:22 - every single post has a separate address
50:25 - and we're going to create a post set
50:30 - post and this will store the post data
50:33 - so now that we're good here
50:36 - let's actually go ahead and Export hosts
50:39 - immediately and also while we're at it
50:42 - current wallet address as well
50:46 - okay so now that we exported these two
50:49 - we're gonna go ahead and actually change
50:52 - all kinds of rendering to this so we
50:55 - don't have these random stuff happening
50:58 - so what we're going to do is just get
51:01 - posts from use up context and then just
51:06 - change it and whenever we factual the
51:09 - posts that are deployed to using our
51:11 - Factory they're going to be
51:13 - automatically rendered out here so
51:15 - that's good actually I don't think we
51:17 - have to worry about the current address
51:19 - just yet but what we do need to worry
51:22 - about is we have to create the web3
51:26 - instance so how do we do that we go and
51:29 - say let ethereum
51:31 - and initially it's just gonna be null
51:33 - reason why it's not is sometimes
51:36 - metamask takes a little longer than what
51:39 - it's supposed to to be injected into the
51:43 - website so for now like we just
51:46 - initialize it as a null and then what
51:48 - we're doing what we're going to do is if
51:50 - type of window is undefined we're just
51:53 - going to or the type of the window is
51:56 - not undefined meaning there is code
51:57 - already and it's working and we're going
52:00 - to go and be like hey ethereum should be
52:02 - this part of the window
52:04 - what is window you ask Windows is
52:06 - literally all the code that is when you
52:09 - like inspect
52:10 - yeah all this
52:12 - actually the actually it's the page
52:15 - source to be exact like all that stuff
52:18 - like all this code that you see here
52:21 - that's all the window now in there
52:24 - there's a variable called ethereum and
52:26 - that's being injected because you have
52:28 - metamask installed and every single
52:30 - website that you with with it and every
52:33 - single website that you visit with
52:35 - metamask in your browser is going to
52:38 - have that code even if it is book even
52:40 - if it's Instagram whatever it is as long
52:42 - as you have metamaster it's going to be
52:43 - injected into your website there's
52:45 - something to be aware of now this is
52:48 - cool we just saved it here and now what
52:51 - you want to do is create a use effect
52:53 - down here
52:54 - remove all this junk
52:57 - and create a guard Clause just like how
53:00 - we did it just hide just like how we did
53:02 - it in the contract itself so what we're
53:05 - going to say is if ethereum doesn't
53:08 - exist or if it's like a falsy value
53:10 - because null has a falsy value if you
53:13 - put it into a Boolean it's going to
53:15 - return false so if that's the case then
53:18 - just return it don't even bother and
53:20 - because it's a dependence you want to
53:22 - pass it into the dependency array
53:26 - however if it exists what you want to do
53:28 - is we're going to create a
53:31 - self-executing or self-executing I don't
53:34 - really know how it's what's the official
53:36 - name
53:37 - okay so it's called self-executing
53:39 - apparently if stackover's little says so
53:42 - hell yeah
53:43 - so yeah apparently it's called
53:44 - self-executing function basically what
53:46 - we're going to be doing is we're just
53:48 - going to give it a name just so it's
53:49 - easier to understand if someone else
53:51 - were to hack a code that was just called
53:54 - create web 3 client
53:57 - and open close params and put async
54:01 - because it's going to be an async
54:03 - function and use effect is always
54:05 - synchronous you cannot make it a use
54:08 - effect async just create the function
54:10 - here and right after open close parens
54:13 - what this does is you don't even have to
54:16 - call this function it will just execute
54:19 - itself we'll get it done and you could
54:21 - always get away with it like this you
54:24 - can replace that with a semicolon but
54:26 - it's not as easy to read and it's just
54:28 - like a good description for other
54:30 - developers so it's better for
54:31 - collaboration purposes the more you know
54:34 - so what you want to do is say cons to
54:36 - web3 is going to be a new three
54:40 - and you want to pass in ethereum and
54:43 - straight after that set the web3
54:46 - instance to this guy however
54:49 - there is a time difference between State
54:52 - setting and the execution and state
54:55 - setting usually takes just a little bit
54:57 - longer so inside this function it is
55:00 - highly recommended that you only use the
55:03 - local variables and then later down the
55:05 - line like in other functions we're going
55:08 - to be using the state
55:10 - so what we're going to be doing is going
55:12 - to const accounts and await
55:16 - call web3 again this variable here and
55:20 - we're going to say if dot get account
55:23 - without typos preferably because that
55:26 - helps they say
55:28 - and now that we have the account we're
55:29 - going to go ahead and say Set current
55:32 - wallet address
55:33 - is going to be the first account because
55:36 - I don't know about you but personally I
55:39 - have a okay I only have two accounts but
55:42 - you get the point the first that is
55:44 - being connected and I could also connect
55:46 - this guy to this website so there you go
55:48 - now there's two connected and always the
55:51 - one that has a little check mark thingy
55:53 - always that's the one that's going to be
55:56 - showing up as the first so you want to
55:58 - get this address because that's the
55:59 - current address
56:00 - so that's why we do this and then moving
56:03 - on we're going to have contract
56:06 - and we're going to say oh wait and we're
56:08 - going to say Factory instance and we're
56:11 - just going to go ahead and pass in web3
56:13 - that's it and set contract interest
56:16 - instance and where'd you go and since
56:19 - this is the only contract that we're
56:21 - going to be interacting with there's no
56:23 - need for anything else to be saved so
56:27 - with that done
56:28 - we should be pretty much ready to go and
56:33 - start publishing posts okay moving on to
56:38 - your next thing which is going to be
56:40 - creating posts
56:42 - so
56:43 - jeez all right so what you want to do is
56:46 - go ahead and just create a function
56:49 - all right so how do we get started I'm
56:51 - gonna go ahead obviously create a
56:53 - function so we're going to say we're
56:55 - going to call it create blog post
56:59 - this will be an async function and we
57:02 - need a couple things in here so we need
57:03 - Title we need tag and we need a text or
57:08 - content or whatever I'm just gonna go
57:10 - with text because it's the con content
57:13 - tax basically all right so now
57:16 - guard claws because everything in
57:18 - blockchain can fail we're early so I'm
57:21 - just going to guard ours if there is no
57:23 - current wallet address there is no point
57:26 - in the entire thing because we need to
57:28 - send that in remember in the factory
57:31 - here require the message sender the
57:34 - message sender only exists if here we
57:36 - have a current wallet address otherwise
57:38 - the fact the contract will fail and
57:41 - we don't even want to get there like we
57:44 - just want to save our save ourselves a
57:46 - lot of headache you don't want to debug
57:48 - on the blockchain because it's way
57:50 - harder than it should be so just save
57:53 - everything and Barge yourself all right
57:56 - moving on you also want to have a try
57:59 - catch claw or like a try catch thing for
58:03 - you
58:04 - so you want to catch the error and then
58:07 - console.error
58:09 - message
58:10 - that's it that's going to be a catch
58:12 - that's basically all we want to see
58:15 - there now in the tries where things are
58:18 - going to get tricky that's where the
58:19 - magic is going to happen so
58:22 - you're gonna say oh wait and we'll have
58:25 - a contract instance
58:28 - and we're gonna call methods from the
58:30 - contract instance and we're going to be
58:33 - calling the create blog post method now
58:39 - if you remember
58:40 - this is literally how we call this
58:42 - function so how does I put it here we'll
58:44 - make life so much easier
58:47 - so create blog post
58:49 - and
58:51 - when it comes to
58:52 - transacting something so basically you
58:54 - want to push something onto the
58:56 - blockchain you've got to pay gas fees
58:58 - let's just tax how that's just how it
59:01 - works that's how the blockchain taxes
59:03 - you
59:03 - so to do that all you want to do is say
59:06 - send afterwards and in there you want to
59:09 - pass in an object not an object is going
59:12 - to have a from value which will be the
59:15 - wallet address that will have your
59:17 - minimum open and you will have to pay
59:19 - those gas fees almost at taxes jeez now
59:24 - create blog post it also requires a
59:27 - couple of things
59:28 - so we need the title we need the tag we
59:31 - need to timestamp and we need content
59:33 - and we also need to
59:34 - pass in the message sender but no we
59:37 - actually don't need to send it in
59:38 - because it won't know it okay so we
59:40 - gotta pass in a couple of things
59:42 - so to make it work
59:44 - okay so as you can see it is requiring a
59:47 - couple things so we need to pass in
59:48 - these one two three four things here so
59:51 - what do we have access to straight out
59:53 - the box we have title we have tag
59:57 - and we have
59:59 - something that's going to be the
60:01 - timestamp and I'm going to be sending
60:03 - text so those are the things that we
60:05 - have access to immediately now we gotta
60:08 - pass in the current timestamp in a
60:11 - string format so how do we do that
60:13 - everybody is probably familiar with data
60:15 - map date dot now but this is going to be
60:18 - in date time strings so we're just going
60:20 - to call a two string on it so now it's
60:23 - string there we go and so we have
60:27 - everything ready to go technically it
60:29 - should already work
60:31 - let's let's actually test it out so Luna
60:34 - has this out
60:36 - from the context so we have addressed we
60:39 - have access to it elsewhere then index
60:42 - and there is a file called create post
60:45 - modal now here what you want to do is
60:49 - import
60:50 - use app context and inside of the you
60:55 - and you want to get the crypto blog post
60:58 - function it's like you want to
61:00 - de-structure that function and you want
61:02 - to get that out from the context
61:05 - so we got this guy and this is actually
61:07 - a placeholder so we can just remove that
61:10 - line
61:10 - oh wait no okay all right so once you're
61:13 - in the modal file what you want to do is
61:15 - import the use app contacts if you need
61:19 - and then destructure create blog post
61:22 - out of it now you want this one to
61:25 - replace that there and you should
61:28 - technically be good to go right there
61:31 - so what that's going to do is where they
61:33 - have this handle submit function setup
61:36 - for your convenience and all you need to
61:39 - do is just
61:40 - all you need to do is destructure this
61:42 - file and then it's going to be called
61:44 - right there
61:46 - let's actually take it out I think so
61:48 - we're gonna do it I'm just going to own
61:50 - this inspector but put it on the other
61:53 - side and let's see the console so I have
61:56 - my metamask connected so that's cool and
61:59 - I'm going to hit create post I'm going
62:01 - to hit type in this is my first post
62:06 - first and hope you like this build so
62:11 - far actually if you do just press that
62:13 - like button right why not all right
62:16 - let's hit submit okay my meta mask is
62:19 - popping open that that's good that's a
62:21 - good sign can confirm it I'd confirm it
62:24 - and let's see what do we see on a mask
62:27 - it's a SAS correct interaction and it's
62:30 - supposed to be successful so we'll see
62:33 - it in a little bit
62:34 - if anything happened but right now this
62:38 - technically should have gone in and it
62:41 - should have gone ahead and created us a
62:43 - new post so
62:45 - might as well let's go ahead and render
62:47 - that out
62:48 - bad time to render out all the posts but
62:54 - it's time we're under out all the posts
62:55 - in it
62:57 - so because we already set up
63:00 - pose thingy I'm not even the right file
63:03 - this is the file
63:05 - because we already set up this post guy
63:07 - and we already exported it here and then
63:09 - in index we already imported and that's
63:12 - what we use
63:14 - here to render out all the posts should
63:17 - be good to go
63:18 - should be pretty we should be pretty
63:20 - good to go and um ready to fetch all the
63:23 - posts
63:24 - oh yeah isn't it
63:27 - all right and then mate let's go ahead
63:30 - and get started with the get post
63:34 - content function that's literally what
63:37 - we're gonna be doing now so call it
63:39 - caused guest post content
63:43 - like that
63:44 - oh okay all right might hope you're all
63:48 - right but as of right now we are ready
63:51 - to start rendering out all our posts and
63:53 - because we already set it up there's the
63:55 - state there's us exporting it I don't
63:58 - know why am I pointing at the screen
64:00 - only to see it don't see what I'm doing
64:02 - it whatever and here we already use that
64:06 - to render out the
64:08 - nothingness that's completely fine
64:10 - because now it's nothing but we're gonna
64:12 - get them back so let's revise real real
64:15 - quick what were these steps so once
64:19 - again what did we do
64:21 - we had to get an array of all the posts
64:25 - that we have for the posts that we
64:29 - created
64:31 - so stuff so basically there's a couple
64:34 - of steps that we have to make in order
64:36 - to get back each specific post one by
64:39 - one so what we got to do is I've got to
64:41 - call this function which is just going
64:43 - to return and array of addresses
64:46 - basically the post addresses and then
64:50 - each and every single address we get a
64:52 - Fetch and call the get post details
64:55 - function
64:56 - so let's actually do that
64:58 - basically these are the two steps that
64:59 - we're going to be doing
65:01 - all right
65:02 - so first of all we're going to be
65:04 - needing we're going to need to return
65:06 - all those blog addresses and put them
65:09 - right in here
65:10 - so how are you going to do that
65:13 - create a get post
65:17 - addresses function it's going to be
65:19 - async and we're going to pass in a
65:22 - contract and if we don't pass it in
65:25 - we're just going to go with the default
65:27 - contract instance that already exists
65:29 - nice
65:31 - so let's just put in a try catch just
65:34 - like that and then console dot error
65:38 - and then just pass in there and let's
65:39 - move on with getting stuff done here
65:42 - so what we're going to say is const
65:45 - addresses and we're going to call wait
65:47 - web no attract dot methods Dot and what
65:54 - was the name again it was get uploaded
65:57 - post so that's what we're going to be
65:59 - putting there and then we're just gonna
66:00 - put a call after because we gotta call
66:03 - it that's pretty much it and then we're
66:06 - just going to go ahead and set that to
66:08 - be the blog addresses
66:10 - so just for a good measure let's
66:13 - actually console log
66:15 - the blog addresses
66:18 - and let's see what do we
66:20 - change that's interesting it says zero
66:23 - there was some sorting um there was
66:26 - something going on oh
66:28 - obviously if you don't call the function
66:31 - like why would it even run so that makes
66:34 - sense I'm just gonna put the get upload
66:38 - actually we should put that right in
66:40 - here so get uploaded post post addresses
66:45 - like that in here
66:47 - and pass in the contract right there
66:51 - let's just do it like that like it's
66:53 - actually a colder real function so let's
66:54 - see what do we got if we do that
66:57 - all right okay there we go there's the
66:59 - pose that we just minted or uploaded or
67:04 - Factor It Whatever here's the post
67:07 - address that's the that's our address
67:09 - that we're going to be working with
67:10 - and moving on what we also want to do is
67:14 - create a specific post content getter
67:19 - fetcher function so what the how that's
67:21 - going to look like is we're going to say
67:22 - get post content we're going to say
67:26 - async and we gotta pass in
67:29 - and so we're gonna say get posts comment
67:33 - because we're gonna get all the post
67:35 - content
67:36 - immediately and we don't even need to
67:39 - pass in literally anything just leave it
67:41 - empty
67:42 - and there we go what we're gonna do
67:44 - though is create a separate use effect
67:48 - and
67:50 - every single time
67:52 - the blog addresses change
67:55 - we're going to be firing that get posts
67:59 - content off
68:01 - so that's pretty good that shoot fire it
68:04 - off so let's let's test that out we're
68:07 - just gonna cancel a object out yeah
68:09 - there you go it's got fired we're good
68:11 - to go
68:12 - all right so what are we gonna be
68:15 - actually doing here
68:16 - we're going to fetch every single post
68:18 - one by one
68:20 - so let's go ahead and say fetch to post
68:24 - or if I just post yeah and go away
68:27 - and it's going to be a promise promise
68:30 - all
68:31 - because there is going to be a bunch of
68:33 - promises in here
68:34 - so we're going to map through all the
68:36 - blog addresses all right so we're gonna
68:39 - grab one like each address one by one
68:42 - we're gonna be like post
68:44 - blog instance because we have access to
68:47 - the blog instance from here
68:49 - so what we're going to be doing we have
68:51 - the blog instance we're going to be
68:53 - passing in a web 3 instance and the
68:56 - address and we're going to create that
68:58 - that's going to be our post and then on
69:02 - the post we're going to return
69:05 - and return the actual like we're going
69:08 - to return the method call so it's going
69:11 - to be methods Dot and we're going to go
69:14 - to post.sol because I don't want to mess
69:16 - it up it's going to be get pose details
69:20 - paste that function and call
69:23 - that should be the thing that we return
69:24 - now let's see what do we got why is it
69:27 - not working maybe I need to close that
69:30 - brand and then maybe another one yeah
69:32 - that seems fine it looks way better now
69:36 - once we got the
69:38 - fetched posts because remember this is
69:41 - just gonna be a bunch of promises that
69:43 - are resolved it's going to be actually
69:45 - let me show you how it's going to look
69:47 - like
69:49 - they didn't even run ah there you go
69:51 - it's gonna be you in there and it's
69:53 - gonna be like weird looking now imagine
69:56 - this for actually let's create a second
69:57 - post so this is my second post second
70:02 - and
70:03 - yo let's just do it that way submit nice
70:08 - hit confirm and let's just refresh real
70:12 - quick
70:12 - let's see what the response is see there
70:15 - are like two U's and whatever what's
70:17 - going on it's not it's not going to be
70:19 - easy to interact with it like that so
70:21 - what I like to create at this point is
70:24 - I'm just going to say const formatted
70:27 - post
70:29 - one actually oh post I'm just gonna say
70:33 - fetched posts
70:35 - and for each individual post
70:38 - I will also get the index
70:41 - close that guy before we got all kinds
70:44 - of errors
70:45 - and
70:46 - actually we should do it like that so
70:49 - there is no need for the return keyword
70:51 - so index index
70:55 - and then one by one title actually
70:58 - let's see what do we got we got all ah
71:01 - try to copy this
71:02 - let's see if it works no that'll make
71:05 - our lives easier
71:06 - yeah let's put it yeah okay it gets the
71:10 - point across it's like
71:12 - yeah it's like Chrome's weird annotation
71:15 - but like it gets the point across
71:18 - each trade is going to be like that so
71:20 - I'm just gonna put extra
71:22 - stuff in here so this is basically the
71:25 - response that we are getting back so
71:27 - that's pretty cool so we already created
71:29 - a index and now what we're gonna do is
71:32 - we're gonna have the author first this
71:36 - is gonna be post.0 and we're gonna have
71:38 - a title
71:40 - which is going to be post one and then
71:43 - we're gonna have tag and then we're
71:45 - gonna have time thump it's going to be
71:48 - number three content number four and
71:52 - likes count
71:54 - or we can go likers likes woohoo likes
71:58 - is going to be number five
72:01 - so we're good there
72:03 - so we're good there I'm just going to
72:05 - delete this because it just clutters up
72:06 - the space and next up we're going to be
72:09 - doing is go ahead and say set post
72:12 - formatted post now the only issue
72:15 - so when we do this see the second post
72:17 - comes after my first post oh
72:20 - congratulations you literally just
72:22 - rendered all your posts if you to make a
72:26 - mistakes congrats on that I completely
72:28 - before I got that so I came here anyway
72:31 - second post comes after every single
72:33 - time that I'm going to create a new post
72:35 - it's going to come down here and that's
72:37 - not how any of the logs work so we can
72:40 - do also is just a real simple
72:42 - JavaScript trick and you just put in
72:44 - reverse and
72:46 - there you go this is this is more
72:48 - realistic and this is how it actually
72:51 - works and then now you see there's your
72:54 - tag there's your title
72:56 - I don't see the content for whatever
72:58 - reason but we'll figure out figure that
73:01 - one out in a second so that sounds I
73:04 - don't see the content just yet but
73:06 - that's gonna be something that we'll
73:07 - figure out and I think it's because I
73:10 - named this not the way I was supposed to
73:13 - so actually let's call it post text and
73:16 - there you go so yeah hope you enjoyed so
73:19 - far we're actually at the final stretch
73:21 - we just completed two tasks without
73:24 - noticing it so that's pretty good and
73:27 - now the only thing that we'll have to do
73:29 - is liking each individual post rendering
73:33 - that back out and we're ready to go
73:36 - all right Heidi last bit of this video
73:40 - get yourself a coffee because I won't
73:42 - get ready we're about to finish this bad
73:45 - boy up all right
73:47 - liking posts is what we're gonna be
73:49 - doing so yeah I guess let's just get
73:52 - started with that let's just check out a
73:54 - couple things uh post Sol so first of
73:58 - all we only send back like count no
74:00 - every single person who likes it so we
74:03 - want to send this guy back to you that
74:05 - means we'll have to redeploy this
74:07 - contract but that's fine easy easy and
74:11 - let's go what that means is add a comma
74:16 - dress
74:17 - array memory good it should be
74:21 - technically good because we want this
74:24 - one as well the reason why I just ran
74:26 - through that super fast I just added
74:28 - that the reason why we need it in the
74:30 - first place is every single person that
74:33 - liked the post has wallet address that
74:35 - is going to be stored in that array now
74:37 - when I have addressed it array so that
74:40 - we can check whether the person that is
74:43 - going to be actively using the app has
74:44 - like this specific post how do we check
74:47 - that how's that in and if that any of
74:50 - the user's current address exists in
74:53 - that array and we're just gonna turn
74:55 - this bad boy red something like that yes
74:59 - it's totally not how it's going to look
75:00 - like anyways so we're going to do that
75:03 - and one thing I'd like to always do is
75:06 - just get rid of all kinds of unnecessary
75:08 - console logging yeah there is one and
75:12 - then where's the other one there
75:14 - so there's no need for any of them like
75:18 - whatsoever and it also like keeps keeps
75:20 - my console cleaner so
75:22 - yeah so much nicer all right now what
75:26 - we're going to be doing though is we
75:28 - will have to go back to output
75:31 - and we'll have to actually look both of
75:36 - these from instances we're going to
75:38 - remove that guy
75:39 - and post this idea okay so let's build
75:43 - this contract let's see if everything
75:45 - passes and if it does we're good to go
75:48 - and we're good to deploy so let's see
75:52 - what we got everything is up to date is
75:54 - what it says I don't believe that
75:56 - because I literally just changed it I'll
75:58 - just remove this though just to be on
76:00 - the safe side
76:02 - and truffle compile actually that's
76:06 - that's legit I just realized
76:09 - the ABI doesn't really change unless you
76:13 - mess with the stuff you need to pass in
76:16 - or the name I believe the ABI actually
76:20 - shouldn't really be affected I'm a
76:23 - paranoid so I just prefer see but
76:26 - there's like changes in here so I'm not
76:28 - entirely sure
76:30 - how to new ABI is being generated or not
76:33 - but for good measure if you mess with
76:36 - the construct just update your API and
76:38 - there's no you won't have any kind of
76:41 - issues anyways let's deploy blog Factory
76:46 - to local
76:48 - and let's see what we get okay there's
76:52 - our contract address
76:54 - go to instances paste that bad boy and
76:57 - it should be empty all right what's good
77:00 - here
77:01 - okay so that was just like a leftover so
77:03 - let me just refresh it a couple times
77:04 - cool so it is a empty folder so that's
77:08 - good now in context we will actually get
77:13 - a an extra one more
77:17 - we'll get one more what we'll get one
77:21 - more trade here or like property or
77:24 - something and I'm just gonna call it
77:26 - likers almost like Lakers
77:30 - and let's actually just console like
77:32 - posts and that should be that should be
77:35 - just about enough
77:36 - to confirm that everything works okay so
77:39 - we get an empty post that's pretty good
77:42 - I also I want to make it like more
77:43 - dynamic
77:44 - so we know that we have this use effect
77:48 - that kicks the get post content whenever
77:51 - blog addresses change
77:53 - however there's nothing like it
77:56 - initially gets fetched but when I upload
77:59 - a new post it doesn't get kicked again
78:01 - so what I want to do is after after I'm
78:06 - done creating the new post here after
78:08 - the await I'll just put this guy in and
78:11 - that'll kick the Chain Reaction it's
78:13 - like once the oh once the new post
78:16 - address is being fetched and it's in the
78:19 - post addresses array this use effect
78:23 - will go ahead and kick this function and
78:27 - we'll have the new post come in
78:28 - immediately
78:30 - it's react is good okay all right so
78:33 - let's just double check what do we got
78:35 - here and I'm gonna go ahead and create a
78:38 - new post
78:39 - so this is my second first post hope it
78:44 - makes sense
78:45 - it's like 5 p.m binge on this tutorial
78:48 - for the entire day so I'm tired all
78:49 - right just leave it at that
78:51 - second first whatever smash
78:56 - that like button and
79:00 - subscribe
79:01 - have you done that I'll wait
79:04 - all right
79:05 - if you haven't done that like why
79:08 - come on submit
79:11 - confirm
79:13 - bam there you go okay let's see what do
79:16 - we got
79:17 - and like hers is an empty Ray so that's
79:20 - a good sign we got that guy back
79:23 - should be good there
79:25 - so we're good there and now what we want
79:27 - to do is when I hit this like button I
79:30 - want my metal mask pop open
79:32 - and Sentinel see how do we do that so in
79:36 - here we're just gonna say go ahead and
79:38 - say const like
79:40 - post
79:42 - and the one thing that we're gonna need
79:43 - this time is going to be a post index
79:47 - which we'll have access to it later like
79:49 - somewhere in the app we're gonna get to
79:51 - it in a second but that's going to be
79:53 - our input for this one and once again we
79:55 - just want to make sure we have the card
79:57 - Clause
79:58 - from here
80:02 - let's just put that there I want the
80:04 - wallet to to exist because again we are
80:07 - transacting and if the person decides to
80:09 - disconnect their wallet it's just gonna
80:11 - fail so let's not do that
80:13 - try catch nice
80:16 - console log
80:18 - a zoo console error error nice and
80:23 - it's literally a weight blog instance
80:27 - we're going to pass in web3 instance and
80:31 - the blog address says dot post index
80:36 - what this will do is it will grab out
80:39 - one address so we all know how this
80:41 - instance Builder that we have set up
80:44 - here is waiting for the for instance and
80:46 - the dress
80:47 - so that guy
80:49 - will need an address and so which
80:51 - address are we passing in the specific
80:53 - post that we are liking there's that now
80:56 - after that we're going to go ahead and
80:58 - say dot methods dot like post I believe
81:02 - let's just double check post as well and
81:07 - see yeah that's the function copy that
81:09 - guy
81:10 - come right back here and where was I oh
81:13 - right there add that function on top and
81:16 - because it is a it is a
81:19 - post-functionality would be if it was a
81:22 - back-end API but if because it's it
81:24 - would be like that so it's like the
81:25 - writing onto the contract all right so
81:28 - we need to send it not call it we don't
81:30 - read from the contract we write on that
81:32 - contract
81:33 - and so we just passed in from current
81:35 - wallet address so that should be pretty
81:39 - much good to go and now we're gonna do
81:42 - is say get post content because we need
81:44 - to refresh all the posts but remember
81:46 - the reason why we get all the post
81:48 - address is this here when we create a
81:51 - new one is because that's what changes
81:53 - but in this case the post addresses
81:55 - never don't change it's just one trait
81:58 - of the post itself changes and that's it
82:01 - so let's see if we need to do anything
82:03 - else
82:05 - yeah we should probably connect that
82:07 - like functionality to the button that
82:08 - would be a pretty good idea
82:09 - so let's come down here export that from
82:12 - there
82:13 - and let's go into post.js
82:17 - now in here there's going to be a couple
82:19 - of things that we're going to be doing
82:20 - so step one we're going to be importing
82:23 - use app contacts from there
82:26 - so that's helpful while we're at it
82:29 - let's go ahead and make sure we are
82:32 - exporting the current wallet address yes
82:33 - we do so that's cool because this is the
82:35 - time I don't know if you remember but I
82:37 - probably said it when we like initially
82:39 - initiated the context this is when we're
82:42 - going to be using current wall address
82:43 - this is when we're going to check it
82:44 - against the the likers right here so
82:49 - let's actually just do that real quick
82:50 - so what you want to do first and
82:53 - foremost is go and say call that wallet
82:55 - address and like post just grab those
82:58 - out from use app context
83:01 - and the initial value of this is not
83:04 - going to be false but it's going to be
83:06 - likers Dot
83:08 - includes and we're going to pass in
83:11 - current wallet address
83:13 - and once we once we hit the like button
83:17 - that should technically be connected to
83:20 - hey yeah so that's connected already to
83:23 - this icon which changes based on whether
83:26 - the post is like or not
83:28 - we have this handle click function right
83:30 - here and this guy what we want to do
83:32 - with that is I want to say wait because
83:36 - it's an async function
83:38 - and we'll say light post but we're going
83:40 - to pass in the index which we're getting
83:42 - right here so we have access to
83:44 - everything
83:45 - the only thing we got to do right now is
83:47 - just call the functions write the
83:49 - function that's it and while we're at it
83:52 - let's go ahead and update the set light
83:56 - thingy
83:57 - and we should be pretty much good to go
84:00 - let's see if that works so I'm going to
84:03 - tap that bad boy
84:04 - confirm
84:06 - there you go now this could have totally
84:09 - failed I don't know there's could it
84:12 - because remember I'm setting it here to
84:14 - true so that's refreshing let's see if
84:16 - it actually went through and it did so
84:19 - ladies and gentlemen
84:21 - that's that pretty much wraps up this
84:24 - dev.2 blog app that is using blockchain
84:29 - so one more thing I want to do and this
84:32 - is one thing it's just code cleaning and
84:34 - I'm not gonna let you go without that
84:36 - so yeah let's just get rid of that
84:38 - because nobody needs that
84:40 - so yeah that's pretty much it that's the
84:43 - blog app that wraps it up if you've gone
84:47 - this far congratulations you're doing
84:50 - great and I'll see you probably in the
84:53 - next one

Cleaned transcript:

in this video you're going to be building the dev.2 web 3.0 Tab and you're going to be using infuro to connect this app to the ethereum blockchain we're going to be using solidity to write our smart contract that we'll be deploying to the blockchain you're going to be able to create and upload new posts which others will be able to read and also give a thumbs up on so this is your reminder to give a thumbs up to this video And subscribe to our channel so with that said let's just jump straight into a building all right so step number one will be just going into your preferred location to me that's that's what it's going to be and then just typing in MPX clever programmer without typos preferably because that's our custom built CLI tool now you just pop in your email address and name right there and then you want to go for solidity blog now once you selected that it's going to be the perfect time to smash that like button because it's going to take a little bit of time to set up your project now once this project once this goes through You're Gonna Know it because it will open up vs code for you so let's wait for that cool nice so this one is good just double check before we get started that you have all the node modules ready both in the app folder wrong tool and like outside there I know why I showed the other way around but you get the point and then once someone's as good or if you don't you just go ahead and npm install then and you're good to go so once that's done you just want to open up your terminal and then type in your Dev that'll start this local server which if you copy and pop it in your Chrome basically this is what you get and congratulations you have set up your app all right all right so step two is going to obviously creating the contrast so let's actually go ahead and create them so what I just did is press command J and these terminal window popped up and you can just create like a new one right there so what you can do is type in truffle and if you don't have the Truffle CLI installed no worries just go Google for truffle CLI install and it will pop up how to do it that's it go ahead click that guy and then here are the detailed thingies and how you do it all right so what you want to do is type in I'll just actually moving forward I'll just assume you have these things ready and whenever something new pops up I'll just explain how to install but I'll move forward like if you had it so pause it right now install and then we can go ahead so what you want to type in is truffle create tracked and then you want to create a blog Factory and you want to add the factory after it I'll explain it a little bit why and then just hit the up arrow and then change this to post now if you recognize it there's a new folder right there and two files with the exact same names that we just typed in so there is our Factory and there is our post these are like super basic stuff like super basic contracts but it's a contract so that's what we came for now what you want to do is I should first understand why it is the way it is and why did we just make these Factor so here's how we're gonna work we will have a factory that will basically produce all the our all the other posts so what does that mean we will only deploy this Factory contract and all the posts that we will later like when we build the app each of those posts will be a separate contract meaning each post will have its own 0x something nada address and so all the trades and all the details will be stored in the contract on the blockchain and this is just a super efficient way this is just a super efficient way to keep track of everything you want to keep track of so what's going to happen we'll deploy this guy and then in this one we'll have a create blog post function which we'll go ahead and create ours create a post for us and then create another post That was supposed to be a p and another post that's why it's called a factory does it make sense if not just rewind it real quick and obviously I'll explain again duh all right so that's the concept behind it let's go ahead and make it happen so initially what you want to do is I really like when it's like split view and I'm just gonna zoom in for you so you can see it better all right that should be good so what you want to do the very first is just make sure the solidity version is 0 8 16 in both files and then for now we're just gonna work in the post file for a little bit so what you want to do is we'll Define a couple variables in here obviously each post will have a and that's going to be an address in this case because we're happy is going to be a public address it's going to be called author and then we're going to have a string which is going to be public again it's going to be post title next up we're going to have a un256 without the nine it's going to be like count because you want to count how many people liked or both right then a tag basically it's going to be like a hashtag if you go to the repo link Down Below in the description scroll down there's a screenshot and you'll be able to see where the tag is that's what's going to be stored in there next up a timestamp actually there's going to be a Content too but I wanted to put in a timestamp time stamp just like that yeah whatever also don't worry about all these errors sometimes we're going to address them sometimes we're not it's because I have a bunch of extra extensions that are checking for like code cleanness and all that stuff which obviously freaks out because there's an empty Constructor for no apparent reason now the only thing I don't get is why doesn't it freak out here I don't know anyways so next up what's what we're going to do is create the construct structure so what we're going to do is we'll have a function that'll call this Constructor guy over here and so for that we've got to set this boy up we're gonna pass in a couple things so we're we'll pass in a string and just get used to it like sometimes when you're dealing with strings you got to type this memory thing in but not with addresses so that's just a weird solidity thing so we'll go with string memory and it will be a underscore title and this underscore is just so it indicates that it is a internal variable that is not going to be used outside this construct Constructor at all so it's only for internal use now next up we're going to have the address for the author and then we're going to have a tag and we're gonna have it for the timestamp and we're going to have it for the content now once we got all this notice how we like skipped on light count that's because we're just going to like hard code it in the next section because we're literally just catching whatever the factor is going to pass in this is going to be caught here and then we're gonna do stuff with it here so we just kept on it this is going to be recorded not a big deal actually I'll move it down there really not a big deal so what you want to do is for each thing so we got a post title like just set the corresponding item it like makes sense post title you want to the title thing author and then obviously light count is going to be zero and you'll know no likes no big deal so once we're good with that's basically how we're gonna uh if you want the contract to be known yeah whatever all right so before we set up the factory time for a coffee break with that done I'm gonna go ahead and start setting up our Factory now in the factory there is no need for any kind of Constructor we're not constructing anything in fact the factory is going to be the Constructor folder post you get the point completely ignore that that was some weird stuff by copilot sometimes it's weird sometimes useful but in this case it was weird so what you want to do is create a so what you want to do before creating anything is you've got to import the post so import pose.sol so that's good now that will basically import everything from here it's not like JavaScript where you have to like specifically One By One Import yeah just import the file you're good so you have access to everything now so we're going to create a new instance of this guy so the hence the capital post like that and this is going to be an array of posts that's how you're doing in solidity now this guy's going to be public and we're going to call it uploaded posts so far should be easy next up we're going to create two functions they're going to be function number one create blog post and then we're just going to leave it at that for now don't even worry about it we're going to fix action we can add public to it so it like goes away yeah perfect and then there's going to be a second function which is going to be function get uploaded posts bam and I think this is the easier one so before we do anything with the created blog post we're just gonna go ahead and return this you can try by yourself just pause it if you want to but if with that said I'm just gonna continue now so what you want to do is in solidity you gotta have this view keyword in here because you're returning something so it's like the read access and then you've got to Define what you're going to return it's returns because this post return or this function returns and so like third person whoa this is gonna return a post array from the memory all right so that's good we're going to return the post array all right now the only post Ray that we got is literally uploaded posts so we're just going to return that on Bob's your uncle now creating a post is a little more tricky so here there's going to be a couple of props that we're going to need to pass in it's going to be there's going to be a string again string memory whatever post type is going to be string memory I'm just gonna be tag there's gonna be timestamp like that and there's going to be content just so now here what you what we'll do is yeah exactly that so what's going to happen is we're going to create a new instance of post again this guy so here's gonna be the new instance let's just name it new post and it's going to be eight new it's going to be a new post we defined all this in a specific order so we're going to follow that in here all right so what's going to be is we're gonna have to send in post title we're gonna have to end in an address that's going to be the person who's the author which in this case is going to be we're going to say message yeah message that's sender which literally all that means is when you're using this app and then you click a button and your meta mask pops open yeah that address that like your metamask address or whoever is the user next up pass in tag person time stamp and passing content that's it so once you created that guy figure out what's going on here missing one thing oh might as well close yeah so it is horror for me it always requires these semicolons anyways and what you want to do is yeah now that we created this array technically or now we created this instance of the new post might as well push it in the uploaded poster and that's how we're gonna store it just like that so upload a post push new post very JavaScript D I don't think it needs any explanation so that's basically step one of the contract now what you want to do is come into extensions and type in remix because that makes it infinitely easy to test out all of the contracts that you have to write and whatnot this is the cop this is extension to get it's from remix project 27 yeah just look for it you'll find it once you installed it it doesn't need any kind of setup though once you know this is the icon that you that will pop up here so just look for that and before you do anything just like this is your solidity version you have to make sure that the compiler you're using and version of solidity you're writing in matches so before you do anything side compiler version right there and select point 16. so now that is done and actually you can confirm that it says that so now that it's done you want to click run and deploy and hit activate now what this is doing it's pulling up a previous instance of mine but I'm just going to go ahead and disconnect so this is how you will see it it might be completely empty or not but if it is we're gonna figure out what to put there so you want to open up a safari window and go to trufflesweet.com ganache and by the way you could use a you could use a test net link given by inferior or you could use it as a link given by infuria but this time you don't want to because that needs like additional setup and this is for a testing purposes only we're going to use inferior for the deployment you want to download this guy this will download a download file once you've installed it this is how it's going to look like actually let me restart it once you installed ganache this is how it's going to look like when you start it and you can literally hit quick start and it will pull up something like this you will not see my instance because it's my instance but there you go here's your everything gives you a bunch of eat now this link is coming from right here copy this guy put it in Click connect you're good and it should say something like network is local or a custom Network and we you won't see any of that stuff so I'm removing that this is how you will see it now what you want to do is Select like literally old block Factory file because that's where we're gonna be doing things so initially what you want to do is like the Blackberry hit compile wait for it to go through and I open this output thing up right here so you can see it so it has issues so there's issues with the concert so that means it's this file okay so maybe let's remove public let's see if that helps I'm just going to remove everything see if that fixed it and apparently it did so we're good there and once you hit compile it's going to create this artifacts folder now this is where the ABI goes you don't have to worry about it just yet we're going to be using it in the lid so once that's done just hit deploy now it deployed one instance of my block Factory I wish you want to just put in some dummy data as a title tag timestamp and content and yeah I know it's not timestamp but we also just made it a string and it's also only for testing purposes so it doesn't really matter hit transact and that should technically go through and so you will see a bunch of addresses and gas used and whatever don't even worry about it at all now what you want to need what you need to do now is call this get uploaded posts well this will do is literally just return to this why is that important because here we created an address we created a new post instance so what that does is it narrates an address to us rather than address for us where we will deploy that specific post that's what I was talking about when I had that stupid drawing so click that so click that and scroll down and here's your array that is your address that you want to copy now copy that address and paste it in here so what this will do is this is that you specify which address you want to deploy your post at so we got a compile post so let's do that real quick that's good and then select post and copy these exact things in here so you want to do title skip address for a little bit let's put in tag time and now content now for address you want to put in this address like basically your address which you can actually copy by coming here I think yeah it's the same address so just like double click that and then put that there so ganache helps with that too you can't just copy it from here and now you will do is it is don't press that nah what you want to do is press at this so specify this was specifically push or deploy this contract to that address that was generated for us let's do that and these two addresses shouldn't match so 0x07 E2 that's exactly what we started here and here is our address or here's our post so what you can do is I'm just going to clean the output again and click author and you should literally get back the like your address that you put it you just put it in there content light count it should be zero there you go that's all we did for now and this is your first function if you get back all this data that you put in here you can test out all of them if you get back the exact same data you're good to go you're good to continue if not there's likely some sort of mistake in either this or this file you definitely want to go through it and debug it before continuing all right now now moving forward I'm going to be speeding up a little bit and close this run deploy thingy for now also hide that and by the way our factor is essentially done that's literally all we have to do for the factory so I'm just going to close that too because we're not going to need it anymore now you want to save a couple more things up here in the post so I want to definitely create a struct a struct is you should think of a struct oh just so first of all you want to create a struct now a struct is basically just a thing of it as an array and here like it's going to be strongly typed so we're gonna add in an address it's going to have an address which is going to be create and we're going to have uint256 is like count and we're gonna have a bull which is gonna be is a light there's gonna be all kinds of type of stuff and we're gonna create a mapping which is basically just a double it's gonna be an address to Bull likes that's pretty much how this truck is going to be built up now next up we want to create a separate mapping which is going to be an address I'm going to map the address to a Bool again and it's going to be a public one as we'll call it did once you call it and pass in an address is going to basically tell you whether that address like the post or not pretty simple and one more is we're going to create a actually we should do this up here we're going to create an array out of these likers oh Shrugged I said you should think of it as an array you should think of it as an object instead it's an object okay shocked object is the array that was a mess up my mind so like hers you've written an array of objects and this is going to be a public thingy and just create a likers or actually we can just call it likes hooray now once that's good no one's as good you remember how we had to actually let me just pull it up again remember how you had to call every single detail one by one that's not really efficient so what we want to do is just create one function that will literally send back all the data so we're just going to call it function got post details and so create that post it's going to be a public View and it will returns it will return an address it will return a string from the memory every single time we'll create return another string from the memory wait what am I typing might as well explain it so address is going to be the author this string member basically you want to return all these in some sort of an order but in the return Clause you want to make sure that this order the data type order matches on how you want to return it so I'm just going to copy this down just so I have a reference and paste it here and so I can refer back to it so once again an address for the author a string for the title another string for tag basically four strings from the memory so we already got two three and four and you want to return a un265. now this looks a little weird so I'm just going to format it a little bit and so here we go now you want to now next up all we will do is literally just return and then go author post title tag timestamp content light count and you're basically good once again double you want to double check that author is addressed like the data structure here like all the data types the order of the data types here matches the data types of these variables and if that's true you're technically good with this specific with this function now I'm not going to test out one function every single time so I'm just going to create the new function which is going to be like post and that'll take in nothing and it will be a public post what the man it'll be a public one and we're just gonna do like a we're just gonna make like do like a guard Clause up here so we'll be will require that the did the mapping up here this guy and we're gonna pass in the message sender address so what we're going to do is did like and message dot sender equals false and if that if this is true meaning the person no so if this is true we just let the function to run but if this is false meaning they did like message sender is true meaning the personality right like that this is going to be the error though about right basically you all already liked this post that's it and just close that once again this required what does it do require means that it is guarding everything that comes after so we require that the person who tries to leave specific post didn't like it before this is our requirement if that's not set up yeah if that requirement and if that requirement is not mad we're going to pass back this exact error message if that's if that requirement checks out we're good to move forward so might as well immediately immediately just set that to true they can't like it ever again and we're going to increase the like count by one and we're going to put uh there's those likers addresses and then we also want to create an array out of all the addresses wait what the and you also want to keep track of everybody who liked the post so what you want to do is like ours addresses actually ah you want to keep track of all the addresses that like the post so you want to scroll up and create an array of addresses which we will call likers addresses likers addresses and we're good and so we come down here and then just push the message sender in there so we'll use in the front end don't worry about it for now it's basically it now let's go ahead and deploy all these contracts again so we don't have to redeploy the block Factory that's good to go however I'm going to remove that and all the history here so I'm just going to create like another post instance we're going to have title two tag two time two and content to hit transact and get back the result now if you look at it we already have two addresses here so you want to grab the second one because otherwise you're gonna deploy redeploy the first one which is obviously not good so paste that here and put the details there so go title two and go here copy this guy paste it tag two time to and content to hit add address and you should be good to go whoa so this happened because it didn't compile the post again so let's try that let's try doing that because that would be a good idea and I'm going to remove this deployment so this is your reminder before you deploy a new post you want to compile it so you saw this in real time going bad so we're gonna try it again the only thing that's gonna change is I'm going to rename title to title 23. call this guy again and now I'm gonna pick the third address paste it there and title 23 tag we need the address that's not even that address this is the address oh and also friendly reminder like don't ever hit command eh on remix because it does this weird stuff and then you have to just restart it so interesting things we're early this is blockchain technically you should still have that address okay so you gotta repaste everything title two three and then the address this address paste it tag to time 2 and content to hit add address and now there we go like now that I'm a bunch of more stuff here so we'll so now you got all the author content yada yada but now you have this get pose details so call let's call that wow so that and that's interesting so I think what happened is I have the wrong like I deployed it to the wrong address let's try this again we're gonna create a new Factory item title Four tag four time four and content four hit transact call it get the very last one paste it right here four and hit at address and we should be good now right get posted what the so now that we're done with all the functions we're based we're technically done oh so we're technically done with all the functions and basically all our contract is ready to go so now what we're going to do is we're just going to go ahead and test it out so before we even get into it let's hit connect there let's just move everything from all kinds of History because you have to recompile all your accounts and you have to redeploy them all so just remove everything all the one's not going to work not even the compilation so let's get right there so I'm going to click go back to the block Factory file and select that compile the guy let's see if that goes through okay that should be good we got oh here we got the metadata whatever so we can just close that actually I'm even going to turn on my Do Not Disturb mode okay so my factor is my new Factory is compiled which by the way it didn't really change but because it's like interacting with the post itself it does change so you definitely make sure you you recompile it so now go ahead deploy that guy and I'm just going to let's make it actually bigger so it like jumps together like that and what should we call it this is a title we're gonna have a tag again it doesn't really matter it's only for testing purposes so hit transact all the gas used perfect now let's call that so that's your address that you want to deploy the post at so now what you will do is go back to your like select the post in a compiler compile that just wait for it wait for it okay we're good this will show up once it's good to go and you can literally copy all this stuff so this is a reminder don't ever press command a in this Explorer thingy I don't know if I said that before but I always mess it up and what happens so yeah I'm just going to type everything in here like that I think it's still visible because I can see it and just hit add address down here like you'll probably see it actually let me just restart all right to post let's compile that guy okay title yeah lost that okay that's fine I got that on copy so we're gonna come in copy this address paste it protect put time content in there and before I mess it up copy this address put it right there and that'll be the address where we're going to deploy this fingers crossed is going to work bam hit add address and we should oh there you go we got it and if you remember last time we only had a couple things that we could call now we can like transact and do all kinds of stuff so the big difference here when you call it's like a get request for an API when you transact it's like a post request for an API so that's mainly what it is and that's how you like think about these things you're like all these basic stuff like still working get back the content whatever that doesn't really matter now what we came here for to get post details let's click that guy and look at that you literally get everything back in a strange object but you get it back so that's cool you can at least do something with it on the front end we'll get that through in later so now we're going to test out is literally the two functions that we just built so one of them was the get pose details with which we literally just tested out and the other one is the like pose so come here live post hit transact I'll clear that out so that should have probably gone through now let's go let's check on light count it should be one right and there you go now it says one if it doesn't rewind back figure out where any error is at once again I'll just show the entire so you can pause it and check it out so here's a slow scrolling that should be pretty much sufficient to find the error and pause the video take your time and if we get post details you see that fifth thingy that says one now before it says zero and if you ask me what that is it's literally the fifth thing that's being so what's the fifth thing that's being written author One post attitude tag timestamp yada that's a light count so that again works so it seems like we were able to like the post we were able to do all kinds of stuff with it with it now I guess it's time we connected our front end so I guess I'll see you there all right so with that let's go ahead and get started connecting our metamask so that is actually going to happen in our index.js file so we're gonna need here is a couple of things first off we're gonna have to import a bunch of things from Rainbow so we're gonna go ahead and import Ray in about Dash me yeah slash yeah slash rainbow kiss styles.css so there next up we're gonna go ahead and import get default wallet get default wallets and rainbow bow bow hit provider again from rainbow and by the way this already comes with the CLI tool so you don't have to install any of this then we're gonna go ahead and import chain config great configure a chain create client and lag me config config from wagme and then we're going to import two providers now one of them is B even fewer provider from wagme slash providers slash fira like that and then we're gonna import local gen RPC quieter like that I don't know if that's the yeah Jason RPC like that so this one is going to be important when we set up the local local contract connection so that's where it's gonna come in and I believe this says all we need for the metamask connection all right so what we're going to be doing now is right under actually we don't need to worry about this custom Styles we can just work above here so what I'm going to do is cause the chains and provider and we're going to destructure that and we're going to go configure chains let's close that so we don't have any error going on and we're going to configure chain dot Gurley like that and we're also going to configure chain.localhost so these are the ones that are going to be showing up like these are the chains this app is going to be compatible with so these aren't going to go into that array array and we're gonna go in and we're going to go ahead and go in and configure both so we're going to create a invert provider and here we're going to need an API key like that I'm just going to leave it a t for a little bit and we're going to set it up in one second now you also want to make sure that this has a priority of one meaning that no matter what inferior will take priority one if both the chains are available it's going to go with the early the girly chain meaning meaning we'll be using inferior mainly and if that's not sufficient for whatever we're trying to do then we're going to go on and use the other provider which we're going to be setting up in a little bit let's just take a look at what's happening here I think we don't need this object yeah and the other that we'll be creating is the Json RPC provider and that'll have a priority number two so it comes after inferior and we're gonna read an RPC it's gonna be a chain G p and this will be this same exact RPC server that gosh is giving to us paste that there and that should be pretty much set up so now our chains are configured so this application is going to be again compatible with the girly and the local local running chains and so these will be the providers for them you can by the way configure as many as you want yeah but there's no need for that for now all right so next up we're gonna do is create the connectors and that'll be just a get default wallet and we're going to pass in a couple things here we're just going to name it what is it DAV to blog app just like that and we're just gonna pass in the chains so this will be responsible like let's all come together in a second let's just finish it so next up we're going to create a wagme client and that'll be gonna have to configure it with create client we want to make sure that auto connect oops I'll connect is untrue we pass in all the connectors from here and we're going to pass in fighter which again comes from here all right so that that's pretty much all the prep code we're going to be using up here now it's time to come down here so we're going to be wrapping this whole entire application in two hooks so let's see what we've got we got lagme config and we're going to pass in client and the client will be the wagme client so this one that we just generated let's close that guy and next up we're gonna have a limbo kit provider and for that we're gonna pass in all the chains that we generated here so those so that should be pretty much almost good to go now copy that go all the way down wrap that first in there and then copy the wag Closing one and wrap that there and actually there's this Mt jsx fragment now we're not even needing it because these two wrap the entire app up so that should be so far so good now we're going to be doing next is there's a metamask the JS file there's guy we need to set this guy because the app itself if you refresh this happens there so now we set up all the back and for both connection now we actually have to set up the front end for it so this is what we see here and there is literally two things that we need to import here one of them is the Styles file so let's just go get that from here we can just paste it right there and the other one is going to be connect button which comes from the same rainbow kit and instead of this div we're just going to be rendering out this connect button that should technically be enough let's see what do we got yeah that's perfect I'm just going to hit that wow yeah it takes a little time when you initially open it up and before like prior your meta mask was connecting to ganache so just wait for it a little bit and you should be good or you can just go with the different Network unlock it and we should be good to go okay you know whatever switch Network that's completely fine so thanks we have all these networks here we gotta for that in a little bit that's interesting so there's a couple of weird things going on here let's address this one first which I don't really get why it's happening but okay so after refreshing okay it still shows all these up that should be interesting okay so right now when you select that it actually shows all these items that not really sure why it's happening but I have a hunch this has something to do with it so that API key is not valid so on what I'm gonna do is go go to inferior and once again you can use the link Down Below in the description so just use that and then come in here into blog app let's see manage key and girly that should be my key will be blurred out and you want to create a file called env.local so once you create that you just type in inferior API key just paste that key that you have and up here you want to come in and say process dot EnV that oops inferior API ah inferior API key like that so let's let's restart this app let's see if that helped well that didn't help just yet oh so let's see if that helped let's restart this app and it should probably solve it let's see okay I didn't ah okay so you see how we are exporting chains out of here and I'm just importing chain that'll be the issue let's see there you go now we have the two chains that we actually wanted to work with and because we're going to be using the local version of the contract for now we're going to be going with that it's a little faster than any kind of test nut so we're just gonna go with that all right let's see what we got next up so we got the not a mask wallet connection so good job if you made it this far and now we're gonna go ahead and do something else and now we're gonna go ahead and connect the the contract with our front end so I'll see you there all right it is time we actually go ahead and connect our contract with our front end so let's get started let's do that okay oh actually all right so what should we what we're gonna do is we are going to create a context file first of all so how does that even get started all right okay so to get started with the contacts you will need a new folder called context in the app folder and we apparently already have it all right so to get started with the context we're going to be doing is just go ahead and create a context folder inside your app folder inside there you're just going to go ahead and create a context.js file now once that is done you're going to import a couple of things first of all create context and use context because we're going to use it immediately right in here and actually while we're at it let's go ahead and import use State and use effect because we're going to be using these anyways so might as well just get started importing them and we're going to be creating the instances so in the utils folder inside of instances wow what is this red arrow anyways so we should technically already have we should already have the this file set up and we should already we already pasted this this address right here so yeah so it should be no worries about this one oh so you should already have access to this file and I believe we already put the address right here so that should be good to go so what we're going to be doing next is we're going to be importing the blog and the factor instance which we are exporting from right there so let's do blog instance and Factory instance up from there fuels contracts instant oh damn utils and instances all right so that should be good now and the other thing which we already installed with the LI is going to be web3 this is web3.js so we're going to be using that and now let's go ahead and create a app context right now so once we created that that should be good and we'll also need to be creating a provider so app proflider there's a lot of boilerplate code with the when it comes to contacts API so just get the pattern in and you should technically be able to remember it pretty easily afterwards or you can just go back to a previous what is happening here why is it being removed yeah there you go so if you have a context file from the past you can literally just copy these codes like the birthday code there's just pattern recognition once you once you do it like once or twice you will get it in all right and then we're going to be returning up context dot provider and we're going to be we're going to be passing in the children right here just for good measure I will create a test file which will be literally just test and I like to my contacts like this let's just immediately pass it in there and the other thing that we'll be doing is we're just like straight away create a hook with it so we don't have that much code to deal with later on so what we're going to be doing is use context and we're just going to pass in app context that should basically be the most bare bone context API file that we're going to be using later on and like whenever you in the future but this will change yeah obviously that will change okay so let's go into app.js and we're going to be importing app fighter just and that's the thing that we're going to wrap our app so we're going to use the app provider and wrap it around our app that's basically what's happening here so that what that means is everything that is in here we'll have access to any everything in our app provider if we set up everything correctly so to test that out what I usually like to do is go into my index file and in here just go ahead and import use app context from the context file and scroll down and scroll down where you see the router and where the component itself starts and so what you want to do is just deconstruct test from user of context and straight away console log it and if if you will see test next to a fire Emoji like that wish it showed up though okay we're gonna have an alarm in that case so just go ahead hit inspect oh it'll open up on my other screen all right there you go so if you go ahead hit console there you go next to the alarm it says test so that means our context is working and it's ready to go now there's a couple more things that I want to get done before we just wrap we wrap up and call the contacts today because I really do we really want to set it up properly so let's remove tests because we don't need it so there's a couple more things that I want to get before we move on from the context so as you can see I removed all the tasks related stuff from the context as well so what you want to do is go ahead and just create we're going to initialize all the web 3D related stuff before we even move on so we don't have to worry about that later so what we'll do is we'll create a contract instance and inside contracts in a sense that's going to be you state and the initial value is going to be null then we're going to create a const web3 instance same deal moving on and current wallet address same oops blog addresses because remember every single post has a separate address and we're going to create a post set post and this will store the post data so now that we're good here let's actually go ahead and Export hosts immediately and also while we're at it current wallet address as well okay so now that we exported these two we're gonna go ahead and actually change all kinds of rendering to this so we don't have these random stuff happening so what we're going to do is just get posts from use up context and then just change it and whenever we factual the posts that are deployed to using our Factory they're going to be automatically rendered out here so that's good actually I don't think we have to worry about the current address just yet but what we do need to worry about is we have to create the web3 instance so how do we do that we go and say let ethereum and initially it's just gonna be null reason why it's not is sometimes metamask takes a little longer than what it's supposed to to be injected into the website so for now like we just initialize it as a null and then what we're doing what we're going to do is if type of window is undefined we're just going to or the type of the window is not undefined meaning there is code already and it's working and we're going to go and be like hey ethereum should be this part of the window what is window you ask Windows is literally all the code that is when you like inspect yeah all this actually the actually it's the page source to be exact like all that stuff like all this code that you see here that's all the window now in there there's a variable called ethereum and that's being injected because you have metamask installed and every single website that you with with it and every single website that you visit with metamask in your browser is going to have that code even if it is book even if it's Instagram whatever it is as long as you have metamaster it's going to be injected into your website there's something to be aware of now this is cool we just saved it here and now what you want to do is create a use effect down here remove all this junk and create a guard Clause just like how we did it just hide just like how we did it in the contract itself so what we're going to say is if ethereum doesn't exist or if it's like a falsy value because null has a falsy value if you put it into a Boolean it's going to return false so if that's the case then just return it don't even bother and because it's a dependence you want to pass it into the dependency array however if it exists what you want to do is we're going to create a selfexecuting or selfexecuting I don't really know how it's what's the official name okay so it's called selfexecuting apparently if stackover's little says so hell yeah so yeah apparently it's called selfexecuting function basically what we're going to be doing is we're just going to give it a name just so it's easier to understand if someone else were to hack a code that was just called create web 3 client and open close params and put async because it's going to be an async function and use effect is always synchronous you cannot make it a use effect async just create the function here and right after open close parens what this does is you don't even have to call this function it will just execute itself we'll get it done and you could always get away with it like this you can replace that with a semicolon but it's not as easy to read and it's just like a good description for other developers so it's better for collaboration purposes the more you know so what you want to do is say cons to web3 is going to be a new three and you want to pass in ethereum and straight after that set the web3 instance to this guy however there is a time difference between State setting and the execution and state setting usually takes just a little bit longer so inside this function it is highly recommended that you only use the local variables and then later down the line like in other functions we're going to be using the state so what we're going to be doing is going to const accounts and await call web3 again this variable here and we're going to say if dot get account without typos preferably because that helps they say and now that we have the account we're going to go ahead and say Set current wallet address is going to be the first account because I don't know about you but personally I have a okay I only have two accounts but you get the point the first that is being connected and I could also connect this guy to this website so there you go now there's two connected and always the one that has a little check mark thingy always that's the one that's going to be showing up as the first so you want to get this address because that's the current address so that's why we do this and then moving on we're going to have contract and we're going to say oh wait and we're going to say Factory instance and we're just going to go ahead and pass in web3 that's it and set contract interest instance and where'd you go and since this is the only contract that we're going to be interacting with there's no need for anything else to be saved so with that done we should be pretty much ready to go and start publishing posts okay moving on to your next thing which is going to be creating posts so jeez all right so what you want to do is go ahead and just create a function all right so how do we get started I'm gonna go ahead obviously create a function so we're going to say we're going to call it create blog post this will be an async function and we need a couple things in here so we need Title we need tag and we need a text or content or whatever I'm just gonna go with text because it's the con content tax basically all right so now guard claws because everything in blockchain can fail we're early so I'm just going to guard ours if there is no current wallet address there is no point in the entire thing because we need to send that in remember in the factory here require the message sender the message sender only exists if here we have a current wallet address otherwise the fact the contract will fail and we don't even want to get there like we just want to save our save ourselves a lot of headache you don't want to debug on the blockchain because it's way harder than it should be so just save everything and Barge yourself all right moving on you also want to have a try catch claw or like a try catch thing for you so you want to catch the error and then console.error message that's it that's going to be a catch that's basically all we want to see there now in the tries where things are going to get tricky that's where the magic is going to happen so you're gonna say oh wait and we'll have a contract instance and we're gonna call methods from the contract instance and we're going to be calling the create blog post method now if you remember this is literally how we call this function so how does I put it here we'll make life so much easier so create blog post and when it comes to transacting something so basically you want to push something onto the blockchain you've got to pay gas fees let's just tax how that's just how it works that's how the blockchain taxes you so to do that all you want to do is say send afterwards and in there you want to pass in an object not an object is going to have a from value which will be the wallet address that will have your minimum open and you will have to pay those gas fees almost at taxes jeez now create blog post it also requires a couple of things so we need the title we need the tag we need to timestamp and we need content and we also need to pass in the message sender but no we actually don't need to send it in because it won't know it okay so we gotta pass in a couple of things so to make it work okay so as you can see it is requiring a couple things so we need to pass in these one two three four things here so what do we have access to straight out the box we have title we have tag and we have something that's going to be the timestamp and I'm going to be sending text so those are the things that we have access to immediately now we gotta pass in the current timestamp in a string format so how do we do that everybody is probably familiar with data map date dot now but this is going to be in date time strings so we're just going to call a two string on it so now it's string there we go and so we have everything ready to go technically it should already work let's let's actually test it out so Luna has this out from the context so we have addressed we have access to it elsewhere then index and there is a file called create post modal now here what you want to do is import use app context and inside of the you and you want to get the crypto blog post function it's like you want to destructure that function and you want to get that out from the context so we got this guy and this is actually a placeholder so we can just remove that line oh wait no okay all right so once you're in the modal file what you want to do is import the use app contacts if you need and then destructure create blog post out of it now you want this one to replace that there and you should technically be good to go right there so what that's going to do is where they have this handle submit function setup for your convenience and all you need to do is just all you need to do is destructure this file and then it's going to be called right there let's actually take it out I think so we're gonna do it I'm just going to own this inspector but put it on the other side and let's see the console so I have my metamask connected so that's cool and I'm going to hit create post I'm going to hit type in this is my first post first and hope you like this build so far actually if you do just press that like button right why not all right let's hit submit okay my meta mask is popping open that that's good that's a good sign can confirm it I'd confirm it and let's see what do we see on a mask it's a SAS correct interaction and it's supposed to be successful so we'll see it in a little bit if anything happened but right now this technically should have gone in and it should have gone ahead and created us a new post so might as well let's go ahead and render that out bad time to render out all the posts but it's time we're under out all the posts in it so because we already set up pose thingy I'm not even the right file this is the file because we already set up this post guy and we already exported it here and then in index we already imported and that's what we use here to render out all the posts should be good to go should be pretty we should be pretty good to go and um ready to fetch all the posts oh yeah isn't it all right and then mate let's go ahead and get started with the get post content function that's literally what we're gonna be doing now so call it caused guest post content like that oh okay all right might hope you're all right but as of right now we are ready to start rendering out all our posts and because we already set it up there's the state there's us exporting it I don't know why am I pointing at the screen only to see it don't see what I'm doing it whatever and here we already use that to render out the nothingness that's completely fine because now it's nothing but we're gonna get them back so let's revise real real quick what were these steps so once again what did we do we had to get an array of all the posts that we have for the posts that we created so stuff so basically there's a couple of steps that we have to make in order to get back each specific post one by one so what we got to do is I've got to call this function which is just going to return and array of addresses basically the post addresses and then each and every single address we get a Fetch and call the get post details function so let's actually do that basically these are the two steps that we're going to be doing all right so first of all we're going to be needing we're going to need to return all those blog addresses and put them right in here so how are you going to do that create a get post addresses function it's going to be async and we're going to pass in a contract and if we don't pass it in we're just going to go with the default contract instance that already exists nice so let's just put in a try catch just like that and then console dot error and then just pass in there and let's move on with getting stuff done here so what we're going to say is const addresses and we're going to call wait web no attract dot methods Dot and what was the name again it was get uploaded post so that's what we're going to be putting there and then we're just gonna put a call after because we gotta call it that's pretty much it and then we're just going to go ahead and set that to be the blog addresses so just for a good measure let's actually console log the blog addresses and let's see what do we change that's interesting it says zero there was some sorting um there was something going on oh obviously if you don't call the function like why would it even run so that makes sense I'm just gonna put the get upload actually we should put that right in here so get uploaded post post addresses like that in here and pass in the contract right there let's just do it like that like it's actually a colder real function so let's see what do we got if we do that all right okay there we go there's the pose that we just minted or uploaded or Factor It Whatever here's the post address that's the that's our address that we're going to be working with and moving on what we also want to do is create a specific post content getter fetcher function so what the how that's going to look like is we're going to say get post content we're going to say async and we gotta pass in and so we're gonna say get posts comment because we're gonna get all the post content immediately and we don't even need to pass in literally anything just leave it empty and there we go what we're gonna do though is create a separate use effect and every single time the blog addresses change we're going to be firing that get posts content off so that's pretty good that shoot fire it off so let's let's test that out we're just gonna cancel a object out yeah there you go it's got fired we're good to go all right so what are we gonna be actually doing here we're going to fetch every single post one by one so let's go ahead and say fetch to post or if I just post yeah and go away and it's going to be a promise promise all because there is going to be a bunch of promises in here so we're going to map through all the blog addresses all right so we're gonna grab one like each address one by one we're gonna be like post blog instance because we have access to the blog instance from here so what we're going to be doing we have the blog instance we're going to be passing in a web 3 instance and the address and we're going to create that that's going to be our post and then on the post we're going to return and return the actual like we're going to return the method call so it's going to be methods Dot and we're going to go to post.sol because I don't want to mess it up it's going to be get pose details paste that function and call that should be the thing that we return now let's see what do we got why is it not working maybe I need to close that brand and then maybe another one yeah that seems fine it looks way better now once we got the fetched posts because remember this is just gonna be a bunch of promises that are resolved it's going to be actually let me show you how it's going to look like they didn't even run ah there you go it's gonna be you in there and it's gonna be like weird looking now imagine this for actually let's create a second post so this is my second post second and yo let's just do it that way submit nice hit confirm and let's just refresh real quick let's see what the response is see there are like two U's and whatever what's going on it's not it's not going to be easy to interact with it like that so what I like to create at this point is I'm just going to say const formatted post one actually oh post I'm just gonna say fetched posts and for each individual post I will also get the index close that guy before we got all kinds of errors and actually we should do it like that so there is no need for the return keyword so index index and then one by one title actually let's see what do we got we got all ah try to copy this let's see if it works no that'll make our lives easier yeah let's put it yeah okay it gets the point across it's like yeah it's like Chrome's weird annotation but like it gets the point across each trade is going to be like that so I'm just gonna put extra stuff in here so this is basically the response that we are getting back so that's pretty cool so we already created a index and now what we're gonna do is we're gonna have the author first this is gonna be post.0 and we're gonna have a title which is going to be post one and then we're gonna have tag and then we're gonna have time thump it's going to be number three content number four and likes count or we can go likers likes woohoo likes is going to be number five so we're good there so we're good there I'm just going to delete this because it just clutters up the space and next up we're going to be doing is go ahead and say set post formatted post now the only issue so when we do this see the second post comes after my first post oh congratulations you literally just rendered all your posts if you to make a mistakes congrats on that I completely before I got that so I came here anyway second post comes after every single time that I'm going to create a new post it's going to come down here and that's not how any of the logs work so we can do also is just a real simple JavaScript trick and you just put in reverse and there you go this is this is more realistic and this is how it actually works and then now you see there's your tag there's your title I don't see the content for whatever reason but we'll figure out figure that one out in a second so that sounds I don't see the content just yet but that's gonna be something that we'll figure out and I think it's because I named this not the way I was supposed to so actually let's call it post text and there you go so yeah hope you enjoyed so far we're actually at the final stretch we just completed two tasks without noticing it so that's pretty good and now the only thing that we'll have to do is liking each individual post rendering that back out and we're ready to go all right Heidi last bit of this video get yourself a coffee because I won't get ready we're about to finish this bad boy up all right liking posts is what we're gonna be doing so yeah I guess let's just get started with that let's just check out a couple things uh post Sol so first of all we only send back like count no every single person who likes it so we want to send this guy back to you that means we'll have to redeploy this contract but that's fine easy easy and let's go what that means is add a comma dress array memory good it should be technically good because we want this one as well the reason why I just ran through that super fast I just added that the reason why we need it in the first place is every single person that liked the post has wallet address that is going to be stored in that array now when I have addressed it array so that we can check whether the person that is going to be actively using the app has like this specific post how do we check that how's that in and if that any of the user's current address exists in that array and we're just gonna turn this bad boy red something like that yes it's totally not how it's going to look like anyways so we're going to do that and one thing I'd like to always do is just get rid of all kinds of unnecessary console logging yeah there is one and then where's the other one there so there's no need for any of them like whatsoever and it also like keeps keeps my console cleaner so yeah so much nicer all right now what we're going to be doing though is we will have to go back to output and we'll have to actually look both of these from instances we're going to remove that guy and post this idea okay so let's build this contract let's see if everything passes and if it does we're good to go and we're good to deploy so let's see what we got everything is up to date is what it says I don't believe that because I literally just changed it I'll just remove this though just to be on the safe side and truffle compile actually that's that's legit I just realized the ABI doesn't really change unless you mess with the stuff you need to pass in or the name I believe the ABI actually shouldn't really be affected I'm a paranoid so I just prefer see but there's like changes in here so I'm not entirely sure how to new ABI is being generated or not but for good measure if you mess with the construct just update your API and there's no you won't have any kind of issues anyways let's deploy blog Factory to local and let's see what we get okay there's our contract address go to instances paste that bad boy and it should be empty all right what's good here okay so that was just like a leftover so let me just refresh it a couple times cool so it is a empty folder so that's good now in context we will actually get a an extra one more we'll get one more what we'll get one more trade here or like property or something and I'm just gonna call it likers almost like Lakers and let's actually just console like posts and that should be that should be just about enough to confirm that everything works okay so we get an empty post that's pretty good I also I want to make it like more dynamic so we know that we have this use effect that kicks the get post content whenever blog addresses change however there's nothing like it initially gets fetched but when I upload a new post it doesn't get kicked again so what I want to do is after after I'm done creating the new post here after the await I'll just put this guy in and that'll kick the Chain Reaction it's like once the oh once the new post address is being fetched and it's in the post addresses array this use effect will go ahead and kick this function and we'll have the new post come in immediately it's react is good okay all right so let's just double check what do we got here and I'm gonna go ahead and create a new post so this is my second first post hope it makes sense it's like 5 p.m binge on this tutorial for the entire day so I'm tired all right just leave it at that second first whatever smash that like button and subscribe have you done that I'll wait all right if you haven't done that like why come on submit confirm bam there you go okay let's see what do we got and like hers is an empty Ray so that's a good sign we got that guy back should be good there so we're good there and now what we want to do is when I hit this like button I want my metal mask pop open and Sentinel see how do we do that so in here we're just gonna say go ahead and say const like post and the one thing that we're gonna need this time is going to be a post index which we'll have access to it later like somewhere in the app we're gonna get to it in a second but that's going to be our input for this one and once again we just want to make sure we have the card Clause from here let's just put that there I want the wallet to to exist because again we are transacting and if the person decides to disconnect their wallet it's just gonna fail so let's not do that try catch nice console log a zoo console error error nice and it's literally a weight blog instance we're going to pass in web3 instance and the blog address says dot post index what this will do is it will grab out one address so we all know how this instance Builder that we have set up here is waiting for the for instance and the dress so that guy will need an address and so which address are we passing in the specific post that we are liking there's that now after that we're going to go ahead and say dot methods dot like post I believe let's just double check post as well and see yeah that's the function copy that guy come right back here and where was I oh right there add that function on top and because it is a it is a postfunctionality would be if it was a backend API but if because it's it would be like that so it's like the writing onto the contract all right so we need to send it not call it we don't read from the contract we write on that contract and so we just passed in from current wallet address so that should be pretty much good to go and now we're gonna do is say get post content because we need to refresh all the posts but remember the reason why we get all the post address is this here when we create a new one is because that's what changes but in this case the post addresses never don't change it's just one trait of the post itself changes and that's it so let's see if we need to do anything else yeah we should probably connect that like functionality to the button that would be a pretty good idea so let's come down here export that from there and let's go into post.js now in here there's going to be a couple of things that we're going to be doing so step one we're going to be importing use app contacts from there so that's helpful while we're at it let's go ahead and make sure we are exporting the current wallet address yes we do so that's cool because this is the time I don't know if you remember but I probably said it when we like initially initiated the context this is when we're going to be using current wall address this is when we're going to check it against the the likers right here so let's actually just do that real quick so what you want to do first and foremost is go and say call that wallet address and like post just grab those out from use app context and the initial value of this is not going to be false but it's going to be likers Dot includes and we're going to pass in current wallet address and once we once we hit the like button that should technically be connected to hey yeah so that's connected already to this icon which changes based on whether the post is like or not we have this handle click function right here and this guy what we want to do with that is I want to say wait because it's an async function and we'll say light post but we're going to pass in the index which we're getting right here so we have access to everything the only thing we got to do right now is just call the functions write the function that's it and while we're at it let's go ahead and update the set light thingy and we should be pretty much good to go let's see if that works so I'm going to tap that bad boy confirm there you go now this could have totally failed I don't know there's could it because remember I'm setting it here to true so that's refreshing let's see if it actually went through and it did so ladies and gentlemen that's that pretty much wraps up this dev.2 blog app that is using blockchain so one more thing I want to do and this is one thing it's just code cleaning and I'm not gonna let you go without that so yeah let's just get rid of that because nobody needs that so yeah that's pretty much it that's the blog app that wraps it up if you've gone this far congratulations you're doing great and I'll see you probably in the next one
