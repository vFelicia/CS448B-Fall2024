With timestamps:

00:00 - I get this question a lot how do you
00:03 - pick the best coding projects to learn
00:05 - from I'm following these tutorials I
00:08 - want to pick a good coding project cause
00:10 - II what what is it that actually helps
00:14 - me the most
00:15 - what should I spend my time on well
00:18 - you're in a great place my friend
00:20 - because in this video we're gonna answer
00:21 - that so without any further ado let's
00:23 - jump right into it alright so you want
00:40 - to pick the best project your time is
00:42 - important if you work on the wrong
00:44 - project you might actually spend a lot
00:46 - of time working towards something you
00:48 - could actually never get done in the
00:50 - first place if you work on a project
00:52 - that's too easy
00:53 - now here's spent your time building
00:56 - something you completely already knew
00:58 - how to do and you did not learn any new
01:00 - skills and it won't even be good on your
01:02 - portfolio if you decide to put it there
01:04 - and in reality it'll actually be just a
01:08 - waste of your precious time we have many
01:12 - resources in the world we have money
01:14 - which is infinite we have energy which
01:16 - is actually infinite right I can put in
01:18 - boom as much energy as that one into
01:20 - this video but that energy does not go
01:22 - of it oh oh they away that energy is
01:26 - actually still here I have it and I
01:28 - can't go all in on the next video and I
01:31 - can go all in tomorrow but well we don't
01:34 - have infinite of my friend is time it's
01:36 - a limited resource and so your time is
01:39 - very important and if you're gonna work
01:41 - on a project that isn't gonna be the
01:44 - best for you and isn't gonna help you
01:45 - grow in your career in yourself learning
01:48 - then it's not worth your time so how do
01:51 - you pick the best coding project to
01:54 - learn from doesn't matter what
01:55 - programming language you're working in
01:56 - Python C Java I have a few answers for
02:01 - you okay and I'm gonna answer this not
02:03 - in a generic way just do whatever you
02:05 - feel like man like just practice just
02:07 - look online and you know feel it I'm
02:10 - gonna give you some tangible tack
02:13 - answers you can apply so one of the
02:16 - things I'll say is I'm gonna start off
02:17 - straight off the bat with the best way
02:19 - speak to somebody who's more experienced
02:22 - than you in coding okay
02:24 - knows a lot more about coding than you
02:27 - do okay somebody who might you might
02:30 - even look up to and ask them this
02:33 - question what project should I pick that
02:36 - will be quite possibly really
02:39 - challenging for me and at the same time
02:41 - still very doable here are some of the
02:44 - projects I've worked on here is my
02:47 - github okay if you have a github and
02:49 - please make a github show them what kind
02:51 - of things you've worked on and if they
02:54 - will invest a little bit of time with
02:55 - you they can see what your skill level
02:58 - is that what kind of concepts you're
03:00 - familiar with if this see that you can
03:02 - solve Fibonacci problems it'll be like
03:03 - okay this person is familiar a little
03:06 - bit with recursion if this see you've
03:07 - done like a tic-tac-toe problem
03:09 - recursively that can beat any computer
03:12 - now they're like okay this person is
03:13 - really comfortable with recursive
03:15 - problems so maybe the project that I'll
03:16 - give them I wouldn't shy so much away
03:19 - from recursion but if you have never
03:21 - done it then you don't want to start on
03:22 - a project that will require you to use a
03:24 - concept of recursion does that make
03:26 - sense so by asking that question you're
03:31 - having somebody who can look out for you
03:33 - like a mentor and give you very specific
03:35 - advice on the list of projects that
03:37 - would fit your current skill level this
03:40 - is very important because if you just
03:42 - google everything and copy/paste
03:43 - everything now you're just learning how
03:46 - to copy and paste but if it's too easy
03:48 - for you now you're wasting your time
03:50 - right so by somebody actually looking
03:53 - out for you and giving you a list of
03:55 - these that could be challenging for you
03:57 - but in your current skill level that
04:00 - will be incredibly valuable for you
04:01 - because a solid project shouldn't take
04:03 - you one day or two days to do a solid
04:06 - project should take you one to two weeks
04:09 - or more to do okay and when you work on
04:12 - a project that goes very deep the amount
04:16 - you'll learn increases exponentially
04:18 - okay so I'll say it like this if you're
04:21 - working on ten small projects right it's
04:24 - gonna be you're gonna learn one thing
04:25 - from one small project one thing
04:27 - from the second small project one thing
04:29 - from the third small project and after
04:31 - doing ten projects you'll learn ten new
04:33 - things but if you work on one project
04:35 - and you just go incredibly deep you're
04:39 - gonna learn one new thing or day one
04:41 - you're gonna learn one new thing day two
04:44 - one new thing day three and by the end
04:46 - of ten days in a weird way you actually
04:48 - wouldn't learn ten new things you will
04:51 - learn a hundred new things and so it
04:54 - goes the depth of knowledge is a lot
04:57 - more important than the width of
04:58 - knowledge when it comes to coding my
05:00 - friend please don't fall into the I'm
05:03 - just gonna do a hundred projects and now
05:04 - be impressive even to your employer
05:06 - that's actually not gonna be impressive
05:08 - okay the person who's gonna potentially
05:09 - recruit you hire you whatever that may
05:11 - be freelancing full-time doesn't matter
05:13 - but if you do one project that you've
05:17 - been working on for a really long time
05:18 - and you're just doing small steps but
05:20 - over a course of you know think about a
05:22 - few weeks a month a year a project will
05:24 - be ginormous and it'll be something
05:26 - you're proud of and you'll learn about
05:28 - how to maintain code how do you run a
05:30 - project for a very long time how do you
05:32 - deal with it in a way where when you
05:34 - come back to it you still understand it
05:36 - you're gonna learn about documentation
05:38 - you're gonna learn about how to make it
05:40 - your code readable you're gonna learn
05:43 - these things through yourself not
05:45 - through a textbook you're literally
05:46 - gonna learn this because you're gonna go
05:48 - to an experience where if you don't
05:49 - write readable code when you come back
05:51 - to your very own project a month later
05:52 - you're gonna be like what the hell am i
05:57 - working on right now you're gonna have
05:59 - no idea you're gonna be lost and you're
06:00 - either gonna have to destroy that
06:02 - project and start from new scratch a
06:04 - month's worth of work gone and that's
06:08 - gonna give you that painful lesson and
06:10 - then you're gonna be like I need to
06:11 - write readable code that's why this is
06:13 - important I need to document my coat I
06:15 - need to have a readme file when I post
06:18 - to github I need to have proper
06:21 - documentation I need to have testing for
06:23 - my codes just even looking at the test I
06:25 - can see what my code is doing okay and
06:28 - other people can see what it's doing and
06:31 - overall it's gonna put you in a position
06:33 - where you're gonna become a lot more
06:35 - employable than that next person who's
06:38 - doing ten free code camp projects and
06:40 - just like
06:41 - on their resume nothing wrong with free
06:43 - code camp and nothing wrong with using
06:45 - you know doing many projects but I would
06:48 - say avoid shallow work my friend work on
06:52 - deep projects and if you ask somebody
06:54 - specifically that would be great now if
06:56 - you don't have somebody you can ask in
06:58 - person you can pay for their time going
07:00 - to a service like code mentor hire a
07:02 - developer pay them fifty bucks or a
07:04 - hundred bucks for an hour of their time
07:06 - to listen to you and give you
07:08 - potentially a list of projects because
07:10 - you're gonna be working on this project
07:12 - for a few weeks maybe months right so
07:16 - what you don't want to do is pick
07:19 - something that is not worth pursuing
07:22 - okay and in if you're one week or two
07:27 - weeks or a few months of your time isn't
07:28 - even worth fifty or a hundred bucks to
07:30 - you let's say you actually just don't
07:32 - have that much money then what you can
07:34 - do is like post it online go to forums
07:36 - develop a relationship with some other
07:38 - developers there and ask this question
07:40 - and there will be people who will answer
07:42 - you okay and they can help you pick a
07:45 - solid list of projects you know because
07:47 - if you just look online you're going to
07:49 - get this generic list of projects once
07:50 - and I don't believe one size fits all
07:53 - when it comes to something like coding
07:54 - it needs to be very custom tailor-made
07:56 - to you to give you those best peak
07:59 - performance things okay
08:01 - and I believe Tony Robbins says this and
08:04 - he's like if you can't plan your life
08:06 - you can't plan your day so remember that
08:09 - until you can plan your life you can't
08:12 - plan your day and until you can plan out
08:15 - the project
08:16 - you can't plan out what you're gonna be
08:18 - coding on the next day that's my tip for
08:21 - you for the day
08:23 - this is Kazi thank you so much for
08:25 - watching as always my beautiful person
08:27 - sitting on the other side of the screen
08:28 - I care for you I really appreciate you
08:31 - thank you so much for being on this
08:33 - channel if you have any questions please
08:36 - comment below like the video if you
08:37 - liked it and if you didn't like it
08:39 - dislike it but I want you to be active
08:41 - okay I don't want you to be passive so
08:43 - that's it subscribe if you haven't
08:45 - already that's it for this video as
08:47 - always I love your faces off and I'll
08:48 - see you in the next video
08:52 - [Music]

Cleaned transcript:

I get this question a lot how do you pick the best coding projects to learn from I'm following these tutorials I want to pick a good coding project cause II what what is it that actually helps me the most what should I spend my time on well you're in a great place my friend because in this video we're gonna answer that so without any further ado let's jump right into it alright so you want to pick the best project your time is important if you work on the wrong project you might actually spend a lot of time working towards something you could actually never get done in the first place if you work on a project that's too easy now here's spent your time building something you completely already knew how to do and you did not learn any new skills and it won't even be good on your portfolio if you decide to put it there and in reality it'll actually be just a waste of your precious time we have many resources in the world we have money which is infinite we have energy which is actually infinite right I can put in boom as much energy as that one into this video but that energy does not go of it oh oh they away that energy is actually still here I have it and I can't go all in on the next video and I can go all in tomorrow but well we don't have infinite of my friend is time it's a limited resource and so your time is very important and if you're gonna work on a project that isn't gonna be the best for you and isn't gonna help you grow in your career in yourself learning then it's not worth your time so how do you pick the best coding project to learn from doesn't matter what programming language you're working in Python C Java I have a few answers for you okay and I'm gonna answer this not in a generic way just do whatever you feel like man like just practice just look online and you know feel it I'm gonna give you some tangible tack answers you can apply so one of the things I'll say is I'm gonna start off straight off the bat with the best way speak to somebody who's more experienced than you in coding okay knows a lot more about coding than you do okay somebody who might you might even look up to and ask them this question what project should I pick that will be quite possibly really challenging for me and at the same time still very doable here are some of the projects I've worked on here is my github okay if you have a github and please make a github show them what kind of things you've worked on and if they will invest a little bit of time with you they can see what your skill level is that what kind of concepts you're familiar with if this see that you can solve Fibonacci problems it'll be like okay this person is familiar a little bit with recursion if this see you've done like a tictactoe problem recursively that can beat any computer now they're like okay this person is really comfortable with recursive problems so maybe the project that I'll give them I wouldn't shy so much away from recursion but if you have never done it then you don't want to start on a project that will require you to use a concept of recursion does that make sense so by asking that question you're having somebody who can look out for you like a mentor and give you very specific advice on the list of projects that would fit your current skill level this is very important because if you just google everything and copy/paste everything now you're just learning how to copy and paste but if it's too easy for you now you're wasting your time right so by somebody actually looking out for you and giving you a list of these that could be challenging for you but in your current skill level that will be incredibly valuable for you because a solid project shouldn't take you one day or two days to do a solid project should take you one to two weeks or more to do okay and when you work on a project that goes very deep the amount you'll learn increases exponentially okay so I'll say it like this if you're working on ten small projects right it's gonna be you're gonna learn one thing from one small project one thing from the second small project one thing from the third small project and after doing ten projects you'll learn ten new things but if you work on one project and you just go incredibly deep you're gonna learn one new thing or day one you're gonna learn one new thing day two one new thing day three and by the end of ten days in a weird way you actually wouldn't learn ten new things you will learn a hundred new things and so it goes the depth of knowledge is a lot more important than the width of knowledge when it comes to coding my friend please don't fall into the I'm just gonna do a hundred projects and now be impressive even to your employer that's actually not gonna be impressive okay the person who's gonna potentially recruit you hire you whatever that may be freelancing fulltime doesn't matter but if you do one project that you've been working on for a really long time and you're just doing small steps but over a course of you know think about a few weeks a month a year a project will be ginormous and it'll be something you're proud of and you'll learn about how to maintain code how do you run a project for a very long time how do you deal with it in a way where when you come back to it you still understand it you're gonna learn about documentation you're gonna learn about how to make it your code readable you're gonna learn these things through yourself not through a textbook you're literally gonna learn this because you're gonna go to an experience where if you don't write readable code when you come back to your very own project a month later you're gonna be like what the hell am i working on right now you're gonna have no idea you're gonna be lost and you're either gonna have to destroy that project and start from new scratch a month's worth of work gone and that's gonna give you that painful lesson and then you're gonna be like I need to write readable code that's why this is important I need to document my coat I need to have a readme file when I post to github I need to have proper documentation I need to have testing for my codes just even looking at the test I can see what my code is doing okay and other people can see what it's doing and overall it's gonna put you in a position where you're gonna become a lot more employable than that next person who's doing ten free code camp projects and just like on their resume nothing wrong with free code camp and nothing wrong with using you know doing many projects but I would say avoid shallow work my friend work on deep projects and if you ask somebody specifically that would be great now if you don't have somebody you can ask in person you can pay for their time going to a service like code mentor hire a developer pay them fifty bucks or a hundred bucks for an hour of their time to listen to you and give you potentially a list of projects because you're gonna be working on this project for a few weeks maybe months right so what you don't want to do is pick something that is not worth pursuing okay and in if you're one week or two weeks or a few months of your time isn't even worth fifty or a hundred bucks to you let's say you actually just don't have that much money then what you can do is like post it online go to forums develop a relationship with some other developers there and ask this question and there will be people who will answer you okay and they can help you pick a solid list of projects you know because if you just look online you're going to get this generic list of projects once and I don't believe one size fits all when it comes to something like coding it needs to be very custom tailormade to you to give you those best peak performance things okay and I believe Tony Robbins says this and he's like if you can't plan your life you can't plan your day so remember that until you can plan your life you can't plan your day and until you can plan out the project you can't plan out what you're gonna be coding on the next day that's my tip for you for the day this is Kazi thank you so much for watching as always my beautiful person sitting on the other side of the screen I care for you I really appreciate you thank you so much for being on this channel if you have any questions please comment below like the video if you liked it and if you didn't like it dislike it but I want you to be active okay I don't want you to be passive so that's it subscribe if you haven't already that's it for this video as always I love your faces off and I'll see you in the next video
