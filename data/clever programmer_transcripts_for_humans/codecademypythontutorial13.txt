With timestamps:

00:00 - hey guys what is up this is kazy from
00:03 - clever program.com and we are on code
00:06 - academy part 13 all right so we're
00:10 - killing it we're doing a very good job
00:12 - we just finished Part 12 which had to do
00:15 - with classes and we started well it
00:18 - didn't actually have to do with classes
00:19 - yet but the stuff that we're working
00:22 - with starts to get a little object
00:24 - oriented okay even though we're not
00:27 - dealing with classes
00:28 - here this is It's kind of foreshadowing
00:31 - and building up to a bigger concept um
00:34 - of
00:36 - classes up until this point everybody
00:38 - who's made it good job
00:41 - because I know how hard it is right to
00:44 - keep up with all of this and to continue
00:46 - going each of these videos is long but
00:50 - it's also giving you those fundamentals
00:52 - that you do need right or even if you
00:54 - don't need it it's just good to practice
00:56 - it and hone those skills so let's check
00:59 - out out uh well we don't need to check
01:01 - out where we're at cuz we know exactly
01:02 - where we are right we are in student
01:04 - becomes a teacher which is roughly about
01:07 - 40% completion so let's get through it
01:11 - start next lesson and keep in mind don't
01:13 - just think of it like oh I got to get to
01:15 - 100% because there's some Concepts that
01:17 - they go over later like bitwise
01:19 - operators which you really don't do that
01:23 - much and mean you're programming to be
01:24 - honest I mean I never use them and they
01:27 - have sections like detailing those so
01:30 - most of the stuff you need is actually
01:32 - within what we're covering so you know
01:34 - don't worry about oh I really got to get
01:36 - to 100% otherwise it doesn't mean I
01:38 - completed
01:40 - it all right let's save and submit and
01:43 - continue I think the next one should be
01:47 - actually we're done with this so we can
01:49 - definitely just go on to the next one
01:50 - I'm just going to click part of the
01:55 - whole all right now let's calculate the
01:58 - class average Define a function called
02:01 - get class average that has one argument
02:04 - students you can expect students to be a
02:07 - list containing your three students
02:10 - first make an empty list called
02:13 - results for okay so let's start doing
02:15 - what they're saying okay and let's also
02:19 - understand what they're saying so you
02:21 - need to get the average for each student
02:23 - and then calculate the average of those
02:28 - averages so effectively what they're
02:30 - saying is
02:31 - hey get everybody's average right here
02:34 - we have get average for only Lloyd and
02:37 - we're passing it in one argument so what
02:39 - they want us to do is keep looping and
02:42 - get getting everybody's averages so get
02:45 - Lloyd's average then gets get maybe
02:48 - Alice's average and then maybe get
02:50 - Tyler's average so replace like this
02:52 - parameter with pretty much Tyler and
02:54 - once you get all those averages average
02:56 - the average what that really means is
02:58 - that let's say Tyler
03:00 - uh average uh comes out to be like a 85
03:04 - in class with all those homework quizzes
03:06 - tests and everything and then let's
03:09 - say uh Lloyd's uh average comes out to
03:13 - be uh 90 and then we have uh Alice's
03:18 - average come out to be you know um I
03:21 - don't know 73 okay then basically they
03:25 - just say that average of
03:28 - averages which is just we're taking in
03:31 - everybody's average right so Tyler's
03:33 - average is 85 at the top we have Lloyd's
03:35 - average and then we have Alice's average
03:39 - and essentially all we're doing is
03:41 - dividing by three right or the
03:45 - length right a better way to do it
03:48 - is we can you know we can create this
03:52 - and then we can say that um average of
03:56 - averages divided by Len of a average of
04:01 - averages right this is your final
04:05 - result and if I printed out that final
04:09 - result I'm spacing it out just for no
04:13 - particular reason
04:17 - here okay oops got to put the
04:21 - parentheses there and end it that was
04:23 - weird I just opened the parenthesis and
04:24 - never really ended
04:27 - it um what is a compl oh yeah the sum
04:30 - sorry we got to take the sum of all of
04:33 - those guys and then divide it by three
04:35 - right so 855 Plus 90 plus 73 divided by
04:39 - the number of elements in that list
04:40 - that's how you get an average and we get
04:42 - an average of
04:43 - 82.
04:45 - 66667 and if we want to just round it
04:49 - all up we can call Int on
04:52 - that and we get 82 we just round it
04:57 - down all right
05:00 - so now we know what we need to do and
05:02 - now let's start working on it so we're
05:05 - going to define a function get class
05:10 - average whoops and it takes in
05:13 - students as an argument so basically
05:16 - students it's going to be a list of the
05:18 - students that we give it so this
05:20 - function is expecting a list and the
05:22 - list might be
05:25 - like this that we pass to that function
05:28 - so then it can do do things inside of it
05:30 - okay cool so we're expecting it to take
05:34 - in
05:35 - students and then what does it do let's
05:38 - see we um okay it actually even says you
05:41 - can expect students to be a list
05:43 - containing three students that's good
05:46 - now let's go to step two first make an
05:49 - empty list called results so I'm going
05:52 - to do just
05:55 - that okay so why we're probably making
05:58 - it is cuz we're going to keep pending
06:00 - things to it right We're looping and
06:01 - then we'll keep adding things to the
06:03 - results so for example we might be
06:05 - looping through homeworks and all those
06:07 - and doing things right and we might Loop
06:09 - through our first item in the list which
06:11 - is Lloyd right we might get Lloyd or
06:14 - whoever right Alice Tyler and if We're
06:17 - looping through Lloyd then once it gets
06:19 - a results it appends an 85 and then it
06:22 - appends like a 70 right for Alice and
06:25 - then maybe it aens 95 ultimately so
06:28 - that's really why we're creating empty
06:29 - list cuz we don't know how many students
06:32 - we have we can have three students we
06:34 - can have 10 students so that's why we
06:35 - can't create a list with already their
06:37 - averages in there um we need to keep
06:40 - appending that way the list grows
06:43 - dynamically just in case there are more
06:46 - or less people than we
06:48 - expected first make an empty list SEC
06:51 - third okay so on three for each student
06:53 - item in the class
06:56 - list um so
06:58 - for
06:59 - student item in the class
07:03 - list where's the class
07:09 - list what list are they talking about
07:12 - for each student
07:21 - item okay I think they're referring to
07:24 - this as the class
07:27 - list right they don't really say class
07:30 - do do we say class anywhere in
07:34 - here class
07:36 - anywhere
07:38 - no okay so I'm assuming that the
07:41 - students they're calling it the class
07:43 - list
07:45 - so I'm going to say for student and
07:51 - students so I'm looping through each
07:53 - student so like if this was a list given
07:55 - to us right the first time the student
07:59 - student would be Lloyd and Lloyd is
08:01 - actually a dictionary right of all this
08:04 - stuff and then we'll Loop through that
08:06 - so all right for student and
08:10 - students calculate get average students
08:13 - so and then call with that result so I'm
08:17 - going to
08:19 - say um student average is equal to
08:24 - student I'm going to call the get
08:26 - average function that we defined
08:29 - right here right it's our own function
08:32 - that we're using get average of that
08:36 - student and then I'm going to append
08:40 - that to the results list so I'm going to
08:44 - say student
08:46 - average right and defining a variable
08:51 - here just to use it here I personally in
08:54 - my code would not do that so what I
08:55 - would do if I was coding this up is I
08:58 - would just simply put this call right in
09:06 - here like
09:08 - that
09:10 - okay um but I might I'll leave that up
09:14 - there for for you guys maybe it's more
09:16 - clear uh that way to read
09:20 - it
09:22 - okay then call results that a pend yep
09:26 - we did that finally return the result of
09:30 - calling average with results so I'm
09:33 - going to say return average of results
09:36 - and we defined our own function called
09:38 - average as
09:40 - well
09:42 - which um takes in a list and then just
09:45 - simply gets its average so very simple
09:52 - function
09:55 - okay this is fairly simple right now now
09:59 - I'm not going to go through the entire
10:01 - calculation of all of those uh you can
10:03 - see the previous video the end of the
10:06 - previous video goes through a pretty
10:08 - indepth calculation of
10:11 - this however I do want you to try to go
10:15 - through the calculation of this and
10:17 - maybe type it out before you run your
10:19 - code you know type it out and do
10:20 - whatever you have to do uh and and know
10:24 - step by step exactly what happens before
10:27 - you actually run your code but I will go
10:30 - kind of from a overview uh like a you
10:34 - know bird's eye view of this so let's
10:36 - say
10:38 - that I was to use this
10:40 - function get and I would do get class
10:45 - average and I passed it you know two
10:49 - students Lloyd and
10:52 - Alice what it would do is it would
10:56 - put it would replace students with that
11:00 - list then it would initialize that
11:03 - variable go boom results is equal to
11:06 - empty list and then it would go to this
11:09 - part and for students in and then
11:11 - students would turn into that list
11:13 - because that was the argument so
11:14 - everywhere it these students now it
11:16 - replaces it with the list that we passed
11:19 - it in
11:21 - 67 the first time We're looping through
11:23 - student will turn into
11:25 - Lloyd um now we're going to call get
11:29 - average on the student which is now
11:31 - Lloyd we'll callate average on Lloyd now
11:34 - Lloyd's average I'm not going to
11:35 - calculate it but based on his homework
11:38 - his quizzes and tests it will go into
11:41 - the get average function right Lloyd
11:43 - will get passed into
11:46 - that um function right here and it's it
11:51 - knows how to take its average and then
11:53 - return the weighted homework plus quizes
11:55 - plus
11:56 - tests okay so that's what's going to
12:00 - happen Lloyd and then let's say that
12:02 - this gets evaluated to some number which
12:04 - I don't know right now but let's say the
12:06 - student average was 78 so it'll actually
12:08 - get evaluated to a number like that
12:11 - now student average will be 78 and
12:15 - you'll get the first result
12:17 - 78 and then it'll Loop the next time and
12:21 - now instead of Lloyd you'll have Alice
12:25 - right and then it'll
12:27 - calculate
12:30 - okay let's try that again Alice here
12:32 - it'll calculate it'll pass in Alice to
12:34 - the
12:35 - student um to the get average function
12:38 - get average of Alice is going to get
12:40 - evaluated to something I don't know what
12:42 - it is maybe
12:43 - 87 and then Alice is smarter right 87
12:49 - and then we're going to replace this
12:51 - with an 87 and so ultimately we have 78
12:54 - and then we append an
12:56 - 87 then Loop is going to see that the
12:59 - list has ended and it will intelligently
13:01 - exit out of the loop so all these lines
13:05 - that kept running back and forth will
13:08 - now stop and line 65 will simply return
13:11 - the average of results so what it'll do
13:13 - is it'll pass
13:16 - in um where it's you know the definition
13:19 - results here which is 78 which is a list
13:23 - containing two numbers 78 and 87 now the
13:27 - average function gets called on this
13:29 - list so we're going to take these guys
13:31 - here going to go up to the average
13:33 - function pass in this list everywhere
13:37 - you see numbers you're going to get that
13:38 - list now 78 + 87 you get 165 so this
13:43 - whole thing is going to turn into 165
13:45 - this is going to turn into
13:55 - 165.540
13:57 - and and calling the length function on
14:01 - that gives us a
14:03 - 265.0 / 2 gives us an
14:11 - 82.5 and this whole thing now evaluates
14:15 - to
14:17 - 82.5 and lo and behold line 67 this
14:22 - translates to
14:24 - 82.5 and you have your final answer
14:26 - right there okay
14:31 - hopefully that makes
14:33 - sense okay
14:35 - good a lot of things we have to go
14:37 - through there but I want to go through
14:39 - step by step go through that painstaking
14:42 - process so you guys really
14:44 - understand uh I'm being overconfident I
14:46 - didn't even hit save and submit code so
14:48 - I could be totally wrong see that oh um
14:52 - no actually I had students there so I
14:53 - have to remove this
14:55 - call let's try it now now I was actually
15:01 - right what do you know how is everybody
15:04 - doing awesome you're doing great yeah
15:07 - that's that's a good question how is
15:09 - everybody doing how are you
15:12 - doing you know I I feel like I'm
15:15 - connecting with you right now that was a
15:17 - good question I should have asked that
15:18 - where are my manners I I hope you're
15:21 - doing really well I I hope that you feel
15:25 - wellfed and you're sitting here and
15:27 - you're kind of relaxed and now you want
15:29 - to focus on programming and get better
15:31 - and learn it and apply it in app
15:33 - development and mobile development and
15:35 - some whatever ideas you have maybe
15:37 - entertain people with creating rock
15:39 - paper scissors Tic Tac Toe with
15:41 - everything that we have learned you can
15:42 - certainly do those things and you can
15:44 - certainly create some really basic
15:47 - apps and uh and yeah cool okay so let's
15:52 - keep rolling with
15:54 - it step one finally print out the result
15:57 - of calling get class average with your
16:00 - students list your students should be
16:03 - this then print the result of that and
16:06 - we are done so now we're going to use
16:09 - what we just did so print out the result
16:12 - of calling get class average with your
16:17 - students which are Lloyd we're passing
16:20 - it in that list Alice and
16:23 - Tyler this is almost exactly what I was
16:26 - showing you guys and then print
16:30 - out the result of get
16:34 - letter grade for the class's average so
16:38 - what I'm going to do is get class
16:41 - average is going to
16:43 - be you
16:46 - know results so I'm going to store that
16:48 - in the variable results I will simply
16:52 - say print results here and now I'm going
16:55 - to say get letter grade of
16:57 - results so it's going to call the get
17:00 - letter grade on results so let's say
17:01 - that we got the average of all of those
17:04 - guys with all their homework quizzes
17:06 - test let's say the average came out to
17:08 - be something like this right and it's
17:11 - going to Simply Now take this list and
17:13 - pass it into get letter uh actually what
17:17 - is it going to do oh no I'm
17:20 - sorry we actually get back some number
17:24 - here right let's say the class average
17:26 - ended up being 86 because of their
17:28 - homeworks tests and everything all
17:30 - averaged and now it's going to Simply
17:32 - send in that number
17:35 - 86 uh to get letter grade and get letter
17:38 - is going to go like if scores greater
17:40 - than or equal to 90 nope it's going to
17:42 - go down to the second LF statement this
17:45 - is going to Valu a true and it's going
17:46 - to return B so something like that is
17:48 - going to happen uh so this whole thing
17:51 - is going to get translated to a letter
17:53 - right some letter we don't know what it
17:55 - is yet so let's give it a try let's see
17:58 - what happens one of the following is
18:01 - broken when we Tred to use it Alice
18:04 - Lloyd Tyler students get CL get letter
18:07 - one of the following is missing or
18:09 - broken we use
18:13 - it what is broken I don't get
18:17 - it we have Lloyd we have Alice we have
18:20 - Tyler all these definitions are correct
18:23 - otherwise it wouldn't let us go
18:26 - forward um
18:29 - finally print out the result of calling
18:33 - get class average with your students
18:34 - list your students should be
18:38 - that and I
18:54 - [Music]
18:57 - did one of the following is missing or
19:00 - broken when we try to use it Alice Lloyd
19:05 - Tyler or
19:14 - students oh where's my students
19:18 - list I feel like I should have a list
19:20 - called
19:23 - students I don't have it I think I have
19:25 - to I have to create it students I I
19:28 - don't did it get
19:32 - deleted so one of the following is
19:34 - missing right so they said one of the
19:36 - following is missing or broken and one
19:38 - of the things said that said was
19:39 - students and they said students should
19:41 - be Lloyd Alice and Tyler
19:46 - so
19:47 - okay yes python achievement student
19:51 - becomes the teacher we have completed
19:54 - this
19:55 - part we're done with this here's what
19:58 - I'm going to do since this was a nice
20:00 - little thing in its own let's finish
20:03 - this video and I will see you in the
20:06 - next part of code academy Python
20:09 - tutorial with clever programmer see you
20:12 - there

Cleaned transcript:

hey guys what is up this is kazy from clever program.com and we are on code academy part 13 all right so we're killing it we're doing a very good job we just finished Part 12 which had to do with classes and we started well it didn't actually have to do with classes yet but the stuff that we're working with starts to get a little object oriented okay even though we're not dealing with classes here this is It's kind of foreshadowing and building up to a bigger concept um of classes up until this point everybody who's made it good job because I know how hard it is right to keep up with all of this and to continue going each of these videos is long but it's also giving you those fundamentals that you do need right or even if you don't need it it's just good to practice it and hone those skills so let's check out out uh well we don't need to check out where we're at cuz we know exactly where we are right we are in student becomes a teacher which is roughly about 40% completion so let's get through it start next lesson and keep in mind don't just think of it like oh I got to get to 100% because there's some Concepts that they go over later like bitwise operators which you really don't do that much and mean you're programming to be honest I mean I never use them and they have sections like detailing those so most of the stuff you need is actually within what we're covering so you know don't worry about oh I really got to get to 100% otherwise it doesn't mean I completed it all right let's save and submit and continue I think the next one should be actually we're done with this so we can definitely just go on to the next one I'm just going to click part of the whole all right now let's calculate the class average Define a function called get class average that has one argument students you can expect students to be a list containing your three students first make an empty list called results for okay so let's start doing what they're saying okay and let's also understand what they're saying so you need to get the average for each student and then calculate the average of those averages so effectively what they're saying is hey get everybody's average right here we have get average for only Lloyd and we're passing it in one argument so what they want us to do is keep looping and get getting everybody's averages so get Lloyd's average then gets get maybe Alice's average and then maybe get Tyler's average so replace like this parameter with pretty much Tyler and once you get all those averages average the average what that really means is that let's say Tyler uh average uh comes out to be like a 85 in class with all those homework quizzes tests and everything and then let's say uh Lloyd's uh average comes out to be uh 90 and then we have uh Alice's average come out to be you know um I don't know 73 okay then basically they just say that average of averages which is just we're taking in everybody's average right so Tyler's average is 85 at the top we have Lloyd's average and then we have Alice's average and essentially all we're doing is dividing by three right or the length right a better way to do it is we can you know we can create this and then we can say that um average of averages divided by Len of a average of averages right this is your final result and if I printed out that final result I'm spacing it out just for no particular reason here okay oops got to put the parentheses there and end it that was weird I just opened the parenthesis and never really ended it um what is a compl oh yeah the sum sorry we got to take the sum of all of those guys and then divide it by three right so 855 Plus 90 plus 73 divided by the number of elements in that list that's how you get an average and we get an average of 82. 66667 and if we want to just round it all up we can call Int on that and we get 82 we just round it down all right so now we know what we need to do and now let's start working on it so we're going to define a function get class average whoops and it takes in students as an argument so basically students it's going to be a list of the students that we give it so this function is expecting a list and the list might be like this that we pass to that function so then it can do do things inside of it okay cool so we're expecting it to take in students and then what does it do let's see we um okay it actually even says you can expect students to be a list containing three students that's good now let's go to step two first make an empty list called results so I'm going to do just that okay so why we're probably making it is cuz we're going to keep pending things to it right We're looping and then we'll keep adding things to the results so for example we might be looping through homeworks and all those and doing things right and we might Loop through our first item in the list which is Lloyd right we might get Lloyd or whoever right Alice Tyler and if We're looping through Lloyd then once it gets a results it appends an 85 and then it appends like a 70 right for Alice and then maybe it aens 95 ultimately so that's really why we're creating empty list cuz we don't know how many students we have we can have three students we can have 10 students so that's why we can't create a list with already their averages in there um we need to keep appending that way the list grows dynamically just in case there are more or less people than we expected first make an empty list SEC third okay so on three for each student item in the class list um so for student item in the class list where's the class list what list are they talking about for each student item okay I think they're referring to this as the class list right they don't really say class do do we say class anywhere in here class anywhere no okay so I'm assuming that the students they're calling it the class list so I'm going to say for student and students so I'm looping through each student so like if this was a list given to us right the first time the student student would be Lloyd and Lloyd is actually a dictionary right of all this stuff and then we'll Loop through that so all right for student and students calculate get average students so and then call with that result so I'm going to say um student average is equal to student I'm going to call the get average function that we defined right here right it's our own function that we're using get average of that student and then I'm going to append that to the results list so I'm going to say student average right and defining a variable here just to use it here I personally in my code would not do that so what I would do if I was coding this up is I would just simply put this call right in here like that okay um but I might I'll leave that up there for for you guys maybe it's more clear uh that way to read it okay then call results that a pend yep we did that finally return the result of calling average with results so I'm going to say return average of results and we defined our own function called average as well which um takes in a list and then just simply gets its average so very simple function okay this is fairly simple right now now I'm not going to go through the entire calculation of all of those uh you can see the previous video the end of the previous video goes through a pretty indepth calculation of this however I do want you to try to go through the calculation of this and maybe type it out before you run your code you know type it out and do whatever you have to do uh and and know step by step exactly what happens before you actually run your code but I will go kind of from a overview uh like a you know bird's eye view of this so let's say that I was to use this function get and I would do get class average and I passed it you know two students Lloyd and Alice what it would do is it would put it would replace students with that list then it would initialize that variable go boom results is equal to empty list and then it would go to this part and for students in and then students would turn into that list because that was the argument so everywhere it these students now it replaces it with the list that we passed it in 67 the first time We're looping through student will turn into Lloyd um now we're going to call get average on the student which is now Lloyd we'll callate average on Lloyd now Lloyd's average I'm not going to calculate it but based on his homework his quizzes and tests it will go into the get average function right Lloyd will get passed into that um function right here and it's it knows how to take its average and then return the weighted homework plus quizes plus tests okay so that's what's going to happen Lloyd and then let's say that this gets evaluated to some number which I don't know right now but let's say the student average was 78 so it'll actually get evaluated to a number like that now student average will be 78 and you'll get the first result 78 and then it'll Loop the next time and now instead of Lloyd you'll have Alice right and then it'll calculate okay let's try that again Alice here it'll calculate it'll pass in Alice to the student um to the get average function get average of Alice is going to get evaluated to something I don't know what it is maybe 87 and then Alice is smarter right 87 and then we're going to replace this with an 87 and so ultimately we have 78 and then we append an 87 then Loop is going to see that the list has ended and it will intelligently exit out of the loop so all these lines that kept running back and forth will now stop and line 65 will simply return the average of results so what it'll do is it'll pass in um where it's you know the definition results here which is 78 which is a list containing two numbers 78 and 87 now the average function gets called on this list so we're going to take these guys here going to go up to the average function pass in this list everywhere you see numbers you're going to get that list now 78 + 87 you get 165 so this whole thing is going to turn into 165 this is going to turn into 165.540 and and calling the length function on that gives us a 265.0 / 2 gives us an 82.5 and this whole thing now evaluates to 82.5 and lo and behold line 67 this translates to 82.5 and you have your final answer right there okay hopefully that makes sense okay good a lot of things we have to go through there but I want to go through step by step go through that painstaking process so you guys really understand uh I'm being overconfident I didn't even hit save and submit code so I could be totally wrong see that oh um no actually I had students there so I have to remove this call let's try it now now I was actually right what do you know how is everybody doing awesome you're doing great yeah that's that's a good question how is everybody doing how are you doing you know I I feel like I'm connecting with you right now that was a good question I should have asked that where are my manners I I hope you're doing really well I I hope that you feel wellfed and you're sitting here and you're kind of relaxed and now you want to focus on programming and get better and learn it and apply it in app development and mobile development and some whatever ideas you have maybe entertain people with creating rock paper scissors Tic Tac Toe with everything that we have learned you can certainly do those things and you can certainly create some really basic apps and uh and yeah cool okay so let's keep rolling with it step one finally print out the result of calling get class average with your students list your students should be this then print the result of that and we are done so now we're going to use what we just did so print out the result of calling get class average with your students which are Lloyd we're passing it in that list Alice and Tyler this is almost exactly what I was showing you guys and then print out the result of get letter grade for the class's average so what I'm going to do is get class average is going to be you know results so I'm going to store that in the variable results I will simply say print results here and now I'm going to say get letter grade of results so it's going to call the get letter grade on results so let's say that we got the average of all of those guys with all their homework quizzes test let's say the average came out to be something like this right and it's going to Simply Now take this list and pass it into get letter uh actually what is it going to do oh no I'm sorry we actually get back some number here right let's say the class average ended up being 86 because of their homeworks tests and everything all averaged and now it's going to Simply send in that number 86 uh to get letter grade and get letter is going to go like if scores greater than or equal to 90 nope it's going to go down to the second LF statement this is going to Valu a true and it's going to return B so something like that is going to happen uh so this whole thing is going to get translated to a letter right some letter we don't know what it is yet so let's give it a try let's see what happens one of the following is broken when we Tred to use it Alice Lloyd Tyler students get CL get letter one of the following is missing or broken we use it what is broken I don't get it we have Lloyd we have Alice we have Tyler all these definitions are correct otherwise it wouldn't let us go forward um finally print out the result of calling get class average with your students list your students should be that and I did one of the following is missing or broken when we try to use it Alice Lloyd Tyler or students oh where's my students list I feel like I should have a list called students I don't have it I think I have to I have to create it students I I don't did it get deleted so one of the following is missing right so they said one of the following is missing or broken and one of the things said that said was students and they said students should be Lloyd Alice and Tyler so okay yes python achievement student becomes the teacher we have completed this part we're done with this here's what I'm going to do since this was a nice little thing in its own let's finish this video and I will see you in the next part of code academy Python tutorial with clever programmer see you there
