With timestamps:

00:00 - hey what's up you guys aaron from claire
00:02 - programmer here and today we're gonna be
00:04 - delving into dictionaries in Python so
00:06 - first off dictionaries are just another
00:08 - data structure in Python they are known
00:09 - as Maps or hashmaps if you're coming
00:11 - from another programming language and
00:13 - all pretty much they're really good for
00:14 - having super organized data they're
00:16 - basically mini databases also their
00:18 - fastest out you can index into them in
00:19 - constant time dictionaries are used like
00:21 - everywhere pretty much the contacts in
00:24 - your phone like if you have like bunch
00:25 - of phone numbers and email addresses
00:26 - associated with the main um that is how
00:28 - it's stored in the phone using a
00:30 - dictionary um if you have like a grocery
00:32 - list app on your phone or something
00:34 - that's like saying oh okay I need to buy
00:36 - 17 pancakes and four and a half who
00:37 - loops then a dictionary is probably how
00:40 - its implemented it's very good for
00:41 - basically storing data in a database
00:43 - because that's pretty much what it is
00:45 - what we'll be going over is how to
00:47 - create dictionaries like the syntax of
00:48 - them I'll do index into dictionaries how
00:50 - to add the dictionaries are what key
00:51 - value pairs are in an element of a
00:53 - dictionary and functions like get items
00:55 - keys values pop pop item and clear okay
00:59 - what those all do um and then we'll be
01:02 - going over a few examples and even how
01:04 - you could sort a dictionary so if any of
01:06 - that is what you're looking for then
01:07 - that's what I cover in this video let's
01:08 - get started
01:09 - [Music]
01:13 - so let's just create a dictionary
01:18 - dictionary so the way a dictionary works
01:21 - is instead of having elements that you
01:24 - can index into with numbers like in a
01:26 - list if you guys don't remember remember
01:29 - if you have a list then you would index
01:32 - it like this or something listed zero
01:33 - listed Wanless it to etc and instead of
01:36 - doing something like that in a
01:37 - dictionary you can actually specify what
01:39 - your your index names are so and these
01:43 - can be anything actually but usually
01:45 - there are strings let's just show you
01:47 - that so we could say let's say we have
01:51 - actually let let's do an example let's
01:53 - say we have a let's say we have some
01:55 - groceries okay you could put some things
02:02 - here so you could put bananas and
02:03 - strings and then have a colon here and
02:05 - then have a number okay so this is what
02:09 - a one element dictionary looks like
02:10 - there's a little thing here on the left
02:12 - of a colon
02:13 - usually a string and then a colon and
02:15 - then another value over here okay so
02:18 - that's one element in a dictionary two
02:21 - elements would look like this oranges
02:25 - three all right I think you guys
02:28 - understand by this point so this is the
02:29 - first element of the dictionary and this
02:31 - is the second element so now that you've
02:33 - seen what it looks like
02:34 - I'll explain so a dictionary is a way
02:38 - you can organize data in a more
02:41 - organized matter nothing that was a
02:44 - little redundant but pretty much you can
02:46 - you can say that these two things for
02:48 - each item in the dictionary these two
02:50 - things are associated so this on the
02:52 - left is actually called a key this on
02:54 - the right is I should call the value
02:55 - this is called a key value pair they
02:58 - have these in every ProLiant languages
02:59 - well you might know them as maps or hash
03:01 - maps and other programming languages but
03:02 - in Python they're called dictionaries
03:05 - same thing here this is a key and this
03:07 - is a value and these are a pair these
03:09 - will always be together so what's cool
03:11 - about dictionaries is that if you have a
03:13 - dictionary since and we do we have a
03:17 - dictionary called groceries instead of
03:19 - if I wanted to get the first element
03:20 - here bananas and five um I couldn't I
03:25 - can't just take in zero like this
03:26 - because that's not going to work all
03:28 - right what you actually to do is put in
03:31 - bananas so you see how we're indexing
03:34 - into this dictionary with the key okay
03:37 - we need the key that's why it's called a
03:39 - key you need the key to get the value so
03:42 - let's run this and see what happens or
03:46 - leave Chuck in a print statement first
03:48 - let's see what happens as you can see
03:51 - five popped up which is this five right
03:53 - here because we used bananas here too as
03:56 - the key then it gets its associated
03:58 - value which is five if we put in oranges
04:00 - here you can believe you know that three
04:02 - would pop up go try it yourself you
04:04 - don't believe me but yeah I'm pretty
04:05 - sure most of you can make that
04:07 - conclusion yourself it'll work the exact
04:09 - same way as this been honest in
04:11 - all right so that's how you that's how
04:14 - you index into a dictionary using using
04:17 - this notation here but you might be
04:20 - asking okay well in a list if I put in a
04:23 - number that's not in the in the list
04:25 - like about a list of length five and I
04:26 - put in an index of like 300 then you're
04:29 - gonna get an error same deal with same
04:32 - deal with dictionaries if you put in
04:33 - something like like a key that doesn't
04:36 - exist in dictionary then you will
04:38 - actually get a key air-sea a key air
04:40 - right here it says hello is not hello is
04:44 - not in the dictionary which makes sense
04:45 - so actually instead of using this um
04:48 - bracket notation here and kind of like
04:50 - indexing into lists but your indexing
04:52 - into each dictionary there's actually a
04:53 - method called dot yet which does the
04:56 - exact same thing but if the key is not
04:59 - found in the dictionary then it won't
05:02 - give you an error it'll just say none
05:04 - it'll just spit out a none type so you
05:05 - avoid this red text of doom and death
05:09 - and um everything worked fine so if I
05:11 - put in but now Ashley's put in oranges
05:13 - sure to show you now okay bananas here
05:15 - bananas just keep it simple and can sort
05:18 - keep it consistent if I run this you're
05:20 - gonna get five just like when we use
05:21 - brackets okay but if I put hello
05:25 - which isn't a key in the dictionary and
05:28 - I hit run then you just get none instead
05:29 - of the big error so that's a nice little
05:31 - method that you're given it just as a
05:32 - little safety check within this get
05:34 - method it probably does the bracketing
05:36 - itself into the dictionary but it says
05:37 - if it's not in the dictionary then
05:39 - return none rather than then giving us
05:41 - an error so that's a little that's a
05:42 - nice thing to use um just you can if you
05:45 - know it's in the dictionary you can just
05:46 - use the bracket notation but if you
05:48 - don't know then it's better to use get
05:49 - it's just safer okay so those are some
05:53 - basics of dictionaries or dictionaries
05:56 - are very very good for these kinds of
05:59 - things
05:59 - maybe another example we have is maybe
06:01 - we had a a contact list okay so if you
06:05 - had a contact or a contacts let's say
06:09 - you had a bunch of friends and they all
06:10 - had phone numbers okay how would you do
06:12 - that with a list
06:12 - how would you associate a phone number
06:14 - with friends I mean you could have like
06:17 - one list called names and then one list
06:19 - called phone numbers and then just have
06:20 - the corresponding elements all be each
06:23 - other but
06:24 - that's just kind of silly because it's
06:27 - like two separate lists and if one gets
06:28 - screwed up or there's mistaken one then
06:30 - they're not then the entire things next
06:32 - messed up like if one thing is good if
06:34 - like the first name got deleted and
06:35 - everything is gonna shift over and it's
06:37 - just a big mess so that's where
06:38 - dictionaries come into play okay you
06:41 - could have something like this and I'm
06:42 - just going to format it differently so
06:45 - that it's nice and I sort of look at
06:47 - let's just say you had Joe as a friend
06:49 - okay and his phone number was one two
06:52 - three four five six seven all right and
06:56 - then you had Jane and her phone number
07:01 - was nine eight seven six five four three
07:05 - okay so this here shows us um that Joe
07:11 - and this phone number are corresponding
07:13 - because this is the key and this is the
07:14 - value same with Jane so now we can
07:17 - actually just index into this using the
07:25 - name and we can get so if you wanted to
07:28 - get Joe's phone number we would just put
07:29 - in Joe into contacts and what's the
07:33 - issue here oh oh I forgot a comma yeah
07:36 - you need a comma to separate all of the
07:38 - dictionary values Oh what is happening
07:42 - here Oh silly me so the formatting was
07:51 - fine here okay
07:52 - but obviously I can't have these dashes
07:55 - in these numbers okay Python doesn't
07:57 - know what the heck this is it thinks
07:59 - it's nine eighty seven well actually no
08:01 - Python thinks it's nine eighty seven -
08:03 - 6543 and uh and python thinks that this
08:07 - is one 123 - 400 400 500 4567 what I
08:12 - actually need is just the phone number
08:15 - like that okay without the - that's
08:17 - stupid or we could even use strings okay
08:19 - we could actually do this why do we do
08:22 - this this makes more sense okay hit run
08:31 - there we go and this string gets given
08:34 - back to us when we get Joe and if you
08:35 - want to Jane you better believe it we
08:38 - get her phone number too okay so that's
08:40 - pretty cool right
08:42 - this allows us to structure data with
08:45 - any name any key we want and then put
08:48 - anything one over here the real the real
08:50 - power of dictionaries though is when we
08:52 - actually start putting a bunch of
08:53 - different things in here so let's this
08:54 - is a contacts list right they might have
08:56 - more than just a phone number so if they
08:58 - have more than just a phone number then
09:00 - why don't we use a list here right you
09:03 - could just use a list like this okay so
09:06 - you have a phone number here and then
09:08 - you have an email address so email
09:11 - address email address add website com
09:18 - it's going to be straight okay
09:19 - [Music]
09:22 - at website.com and same deal here we
09:26 - just put a list whatever em at web.com
09:36 - good enough some weird examples but you
09:39 - guys get the idea so you're able to now
09:43 - associate this key this name of Joe with
09:46 - all of these things in this list alright
09:48 - this is something that is very very
09:51 - powerful with dictionaries um you're
09:54 - able to basically structure the data in
09:56 - any way you want group it together in
09:57 - any way you want and of course this this
09:58 - list can be of any length you want so
10:01 - you can actually put as many contacts
10:04 - you could have a phone number you could
10:05 - have a email address you could have a
10:07 - LinkedIn account you could have a
10:07 - Facebook you'd have everything Instagram
10:10 - account snapchat etc it never ends so
10:12 - you're basically allowed infinite
10:14 - flexibility when it comes to defining
10:16 - what it means to have a contact of Joe
10:18 - do you have his home address his billing
10:20 - address everything okay um but what
10:26 - about this you could even make this
10:27 - better and actually make this a
10:30 - dictionary itself right so this is a
10:33 - dictionary and then you have Joe and
10:35 - then within this its value is actually a
10:38 - dictionary you see where I'm going with
10:40 - this right so you could actually have
10:42 - phone number or just put phone and then
10:46 - boom you have that there and email okay
10:51 - and now I have a dictionary of contacts
10:55 - with his name and then for each person
10:57 - there's a dictionary associated with
10:59 - that person that has all his contacts so
11:01 - his phone is this his email is this and
11:04 - so on and you can you can keep doing
11:06 - these nested dictionaries as much as you
11:07 - want so this verse is this you can see
11:12 - how this is a little bit more
11:13 - descriptive and um you can really see
11:16 - the power of dictionaries here because
11:17 - try representing all these ideas like
11:20 - Joe has a phone number of this and an
11:22 - email of this and Jane has a similar
11:24 - thing with only lists think about it how
11:27 - would you how would you coherently and
11:29 - in a smart and intelligent way represent
11:33 - that and with a list you just can't
11:35 - so dictionaries are good for that
11:37 - some other examples you could use or you
11:39 - could use dictionaries to do things like
11:42 - count the most common words in a
11:43 - sentence this is a little example that I
11:45 - learned when I was learning dictionaries
11:47 - myself many years ago in my first Python
11:50 - class at university but what if you had
11:54 - a dictionary called word count word
12:00 - counts okay and let's say you just
12:03 - wanted to count all the words in a
12:05 - string so or a sentence which is a
12:09 - string okay so let's just say I like the
12:15 - name Aaron because the name Aaron is the
12:22 - best all right so we can see this this
12:29 - sentence here and let's say we wanted to
12:32 - know actually let's get rid of to
12:34 - simplify this let's say we wanted to
12:38 - count all the words here okay and you
12:42 - want to count the the how many times
12:44 - each word occurs in this dictionary
12:49 - something you can do with dictionaries
12:50 - is you could actually either iterate
12:53 - through this entire string well actually
12:54 - you'd have to split this up into a list
12:56 - so that each word is its own element
12:57 - there's a method for that called string
13:00 - dot I believe string dot split and then
13:04 - you would get all these words in a list
13:05 - and then you can iterate through all
13:07 - them and then every time you see a word
13:09 - you add it to the dictionary and every
13:10 - time you see it again you can up the
13:12 - count so it would end up looking like
13:13 - this I'm not actually gonna code this
13:15 - out because of there yet there's a lot
13:17 - of code there well you guys can do that
13:18 - if you want but this is what the end
13:20 - result would actually look like
13:21 - um you would have I okay would be one
13:26 - you would have liked which would also be
13:30 - one all right and then you would have V
13:35 - which would be why is this double quotes
13:38 - you would have V and that would actually
13:41 - be three as you can see it pops up three
13:44 - times V here V there and feed them so
13:47 - this is the idea that I'm getting so
13:48 - you're able to go in and every time you
13:52 - see you're iterating through these every
13:54 - time you see a word and you see that
13:55 - it's in the dictionary and then you can
13:57 - just go into this dictionary by indexing
13:59 - like for thee when this word V whenever
14:01 - you see it you could uh you could have
14:03 - just gone like this word counts at V um
14:06 - and then you just add one to it so
14:09 - whatever numbers there you would just
14:11 - add one to it okay and you would have to
14:16 - actually do it this way so you would
14:19 - just say okay the new value of this
14:21 - thing here in the dictionary is whatever
14:24 - the old value was plus one okay and then
14:27 - you would every time you see the then
14:29 - you would took that it okay that's the
14:32 - idea so dictionaries are very useful for
14:34 - these kinds of things it keeps it very
14:35 - nice and organized you can see here is
14:37 - counting how many occurrences of each
14:38 - word there are imagine if you had an
14:40 - entire book you could actually go
14:41 - through this and then sort it by these
14:43 - these values to see which words were
14:45 - used the most in which have reduced
14:46 - least okay and sorting a dictionary that
14:49 - brings me to a different another thing I
14:52 - want to talk to you guys about is
14:55 - actually um some methods you can use in
14:57 - dictionaries so we have some
14:58 - dictionaries here but let's say you
15:01 - wanted to get all of the data within the
15:03 - dictionary back out so there's actually
15:05 - three methods here I am going to print
15:09 - them out here in a comment so you can
15:10 - see what to look like it's called
15:12 - dik-dik items okay dict dots keys and
15:19 - dict dot values alright so we have three
15:24 - methods here and I'm just gonna explain
15:25 - what they all do verbally and then I'll
15:26 - show you so here this dick is just
15:29 - saying you have a dictionary here so
15:30 - that would be word counts or contacts
15:31 - you would stick that word that is
15:32 - dictate and then if you call dot items
15:34 - on it what
15:35 - actually get is a list of tuples and
15:37 - each tuple is a key value pair alright
15:42 - you will call that items and you'll get
15:45 - a list of tuples and each tuple is a key
15:47 - value pair I said it twice so that you
15:49 - guys can let that sink in if you didn't
15:50 - get the first time on this one
15:53 - same deal but you will get a list of
15:55 - just the keys so you would get I like
15:57 - and V for this and if you called it
16:01 - values you would get a list of only the
16:02 - values 1 1 & 3 okay so this gets you a
16:05 - list of tuples of both this gets you a
16:08 - list of just the keys the the orange
16:10 - strings here and this would get you just
16:13 - the green values the the numbers or
16:15 - these could be lists or dictionaries
16:17 - themselves you know what I mean it can
16:18 - be whatever you want but these are the
16:20 - three methods let's just see what this
16:23 - looks like let's just do word counts
16:26 - okay so word counts dot items okay let's
16:33 - just print this and close this off print
16:38 - it and as you can see it says dick items
16:41 - and then you have this list in here of
16:43 - tuples this highlighted portion you have
16:46 - a list of a tuple so i is one like is
16:48 - one and V is three okay if you want to
16:51 - make this actually a list instead of a
16:52 - dict items thing i apparently if you
16:54 - call items you get a dict items addicted
16:56 - ohms object but i'm pretty sure you
16:58 - could actually just cast this to a list
17:02 - just like this hit run and bat yeah see
17:06 - you just get the list out so that's
17:07 - that's a very useful use case of casting
17:12 - i think i went over that in a video a
17:13 - few days ago or a few minutes ago if
17:16 - you're watching this if you're binge
17:17 - watching this and trying to learn Python
17:18 - for the first time or whatnot but yeah
17:21 - so you can actually cast that to a list
17:22 - to actually get the list out of it so
17:24 - that's that let's try the next one now
17:27 - so we have that we have keys same deals
17:34 - gonna happen if I delete this you're
17:35 - gonna get that dick two items object can
17:36 - so I'm just gonna leave this list cast
17:37 - in and just change this so instead of
17:39 - calling items we're gonna call keys and
17:41 - you guys can probably predict what we're
17:43 - gonna get you get all the keys I like
17:45 - and V alright and same deal with
17:49 - values I'm just gonna show you for
17:51 - completeness sake but I'm pretty sure
17:53 - you guys understand what's going to
17:54 - happen you're gonna get these numbers
17:55 - here 1 1 & 3 okay so that's three very
18:00 - common methods in Python for
18:05 - dictionaries but you also have a few
18:07 - more like what if you wanted to delete
18:10 - something from a dictionary okay if you
18:13 - wanted to delete something from a
18:14 - dictionary how would you do that well
18:16 - there's a there's a method for that as
18:17 - well so let's say we wanted to delete
18:20 - word counts equals oh what am i doing
18:26 - word counts dot pop okay so pop what it
18:32 - does that's a little bit of a weird a
18:34 - weird word choice in my opinion I'm used
18:37 - to it because I've been programming for
18:38 - a long time but when you pop something
18:40 - you are like you are taking one item
18:43 - from a group of things so a dictionary a
18:45 - tuple a list or whatever and then you're
18:46 - just popping one off so you pop usually
18:49 - the last one or the top one or whatever
18:50 - you pop off one element that's why it's
18:53 - called pop instead of remove or
18:54 - something but you can actually pop
18:57 - something out of a dictionary by calling
19:00 - it's key so this would actually
19:01 - completely get rid of this thing if I
19:03 - ran this or I am running this I just
19:05 - haven't run the code yo but this line of
19:07 - code will actually delete this from the
19:09 - dictionary and then this will only be in
19:11 - the word count dictionary following here
19:13 - likewise if I use like then it'll delete
19:15 - it'll delete like if I use E then it'll
19:19 - delete delete' V okay let's just try
19:23 - that so let's run this and then so
19:29 - printed before delete V and then print
19:32 - it after okay so I'm gonna print the
19:34 - dictionary you're gonna see the whole
19:35 - thing I'm gonna pop one of them off and
19:37 - then I'm going to print the dictionary
19:40 - again so as you can see v has
19:42 - disappeared because we popped it off
19:43 - alright so that's what pops up that's
19:45 - how you remove a remove something from a
19:51 - dictionary and one cool thing is it's
19:54 - called pop because this here is actually
19:56 - this I mean I mean this this little
19:59 - thing so if we actually printed this
20:02 - it's actually popping it's not just
20:03 - deleting it it's actually popping it off
20:05 - and retrieving it from the dictionary
20:06 - for us and then allowing us and then
20:10 - getting rid of it so let's say you had a
20:11 - bunch of contacts you'd be like okay
20:13 - retrieve and delete contact
20:14 - then you in this contacts dictionary you
20:17 - could like pop off one of the things it
20:20 - would delete it from the diction form
20:22 - the thing and then it retrieves it so
20:24 - that you can like display like oh this
20:25 - person was deleted blah blah blah blah
20:26 - or something like that so as you can see
20:29 - um it gets this value actually doesn't
20:32 - get the entire thing I guess ooh I guess
20:34 - when you pop it then it only returns the
20:36 - value not the key as well but yeah
20:39 - you're able to get the value of this key
20:43 - back from this entire expression here
20:46 - all right so that's pop now there's also
20:48 - a way you can just get rid of you can
20:51 - pop off a random one so instead of
20:53 - actually specifying which one you want
20:54 - with the key you can just call pop I
20:56 - don't like this
20:57 - so let's say word counts dot pop item
21:01 - and then um print word counts oops
21:07 - print word counts like that and let's do
21:10 - this twice boom boom so this is actually
21:13 - going to pop a random thing from this it
21:17 - was gonna it's either gonna pop this one
21:18 - or this one or this one it's just random
21:20 - I don't know how the computer determines
21:22 - that but it's just random so it's just
21:23 - if all you want to do is just get rid of
21:25 - one thing then you could do it that way
21:28 - or even like you could do you could run
21:31 - pop item three times and each time you
21:33 - go through it remember how you got
21:34 - number how we got this three back when
21:35 - we when we just used a regular pop
21:36 - method here using the key then we got
21:39 - forget back if you called pop item three
21:41 - times you would eventually get all these
21:42 - numbers in a random order but let's just
21:44 - say that's all you like you had to sum
21:45 - up all these things you could actually
21:47 - do it this way you could just pop item
21:49 - three times and then keep adding one to
21:51 - want um adding these numbers together so
21:53 - one plus one plus three you would
21:54 - eventually get five something like that
21:55 - I can't think of a good example right
21:57 - now but I'm sure that would be useful
21:59 - it's something I'm dictionaries are very
22:02 - robust and they can be applied to many
22:03 - different problems that's why they're so
22:05 - beautiful they're just so flexible and
22:08 - juicy and just sexy you know
22:11 - but if I keep running this um it doesn't
22:15 - appear to be random perhaps I'm wrong
22:17 - with that I swear it was supposed to be
22:19 - random hmm I don't know maybe I'm wrong
22:23 - I will double-check that one second guys
22:28 - all right I'm back you guys um so yeah I
22:31 - actually misunderstood when I was
22:33 - reading up on this method here refresh
22:34 - when I was reading this and refreshing
22:35 - it um it says it pops an arbitrary
22:38 - element not a random element and the
22:40 - distinction there is um pop item will
22:44 - well pop pop will pop what you the key
22:48 - you give it the exact element that you
22:49 - specify but pop item will just pop off
22:52 - the last one of the dictionary okay and
22:54 - since the last one could be anything you
22:55 - want it seems to be be consistent here
22:58 - every time because that's the way we
22:59 - created it here here this one this one
23:01 - and this one um but because yeah because
23:06 - it's in this order it's always gonna pop
23:08 - the last one but sometimes if you oh
23:11 - that's one thing I forgot to say yeah
23:12 - actually you can actually add to a
23:13 - dictionary to simply by let's go over
23:17 - that real quick because I'm gonna need
23:18 - that to continue so put this on hold
23:20 - here okay put this idea on hold and
23:21 - we're going to go print word counts how
23:26 - did I forget this
23:27 - and word counts you can actually this is
23:33 - how you would add to a dictionary you
23:35 - can actually specify let's say ciarán
23:38 - pops up twice in this word count right
23:40 - so let's put Aaron Aaron like that and
23:42 - then we know what pops up twice so let's
23:44 - just put two so what this will actually
23:46 - do is it'll create the key Aaron here
23:48 - and then create the value two and it'll
23:50 - actually pop up in this word counts
23:52 - dictionary so let's have two print
23:55 - statements here and get rid of these so
23:58 - we're not confused right so what what
24:01 - this is gonna do is it's gonna print
24:02 - this dictionary then it's gonna add this
24:03 - to the dictionary and then print it
24:04 - again so we can see it so let's do that
24:06 - and as you can see we have the
24:08 - dictionary here and then we added Aaron
24:10 - with the value of two to it so
24:13 - that's how it got added to the
24:14 - dictionary so that means whenever you're
24:18 - adding to a dictionary it doesn't always
24:21 - add in the same spot it might add to the
24:22 - end or somewhere else because the
24:24 - dictionary doesn't actually have an
24:25 - order unlike a list or a tuple I don't
24:28 - think I actually mentioned that earlier
24:29 - but yeah a dictionary doesn't have a
24:31 - order because because you can index in
24:35 - as a key okay and it doesn't matter
24:37 - where the key in the list is we never
24:39 - used that key it's always gonna be there
24:40 - so a dictionary is just kind of like a
24:41 - bag of things a bag of values that have
24:44 - like labels on them which is the keys
24:45 - and then you can just like hey just find
24:48 - this key and then it gives spits out the
24:49 - value for you so there's no specific
24:51 - order all right so that's that's how you
24:52 - add to a dictionary but now let me go
24:55 - back to pop items so I was saying
24:56 - earlier that pop item will pop in
24:58 - arbitrary one so it doesn't pop a random
25:00 - one it just pops I think the last one in
25:02 - the dictionary and then whatever happens
25:04 - to be the last one it pops that one and
25:06 - then you get something back so let's see
25:08 - what this gives us back I'm not actually
25:11 - sure if this gives us just the value or
25:13 - the key and the value
25:14 - so let's just try it all right so come
25:17 - with these out hit run and as you can
25:20 - see it actually gives us a tuple so you
25:22 - remember how pop only gave us three it
25:24 - only gave us the value three instead of
25:26 - this together but when you do pop item
25:28 - it actually um pops a arbitrary element
25:33 - in the or entry in the dictionary as a
25:35 - tuple so you get the key and the value
25:37 - which makes sense because when you're
25:38 - popping you're actually specifying the
25:39 - key so you're like okay I know I want
25:41 - this key and I'm gonna get that value
25:42 - associated with that key but when you
25:44 - pop item you need to keep it together
25:46 - okay and then you can of course just you
25:48 - can just index into this tuple at zero
25:50 - for the key and add one for the value if
25:53 - you wanted to so that's pop item all
25:55 - right
25:56 - let's just go like this dict clop item
26:00 - and continue on we don't need these
26:07 - either so that's how you
26:10 - I'll leave I'll leave this as a chunk
26:13 - together because that's kind of nice you
26:14 - have a dictionary and then you're adding
26:15 - to the dictionary here manually all
26:19 - right oh the last thing I wanted to go
26:26 - over was dicta dot clear so what this
26:31 - will do is it'll literally just wipe out
26:32 - the entire dictionary so that whatever
26:34 - your dictionary has your dictionary will
26:36 - just look like this an empty dictionary
26:38 - with absolutely nothing in it okay so if
26:41 - I called a word counts dot clear all
26:46 - right this is just gonna make word
26:48 - counts equal to nothing
26:51 - all right nothing absolutely nothing and
26:53 - that's good if you just want to delete
26:55 - it I mean not even delete it you're just
26:57 - clearing the dictionary I don't know why
26:58 - you would want to do that but it's there
27:00 - if you need it
27:00 - I'm sure it's useful in many cases
27:02 - because yeah how else would you go and
27:04 - delete you're not gonna pop it like 27
27:06 - times or whatever if your dictionary is
27:07 - really long or 27 entries long you're
27:11 - just gonna clear it instead of doing
27:13 - anything else or just override it with a
27:14 - new dictionary but yeah that's the last
27:16 - one I want to go over like I mentioned
27:19 - oh there's actually one last little
27:21 - thing I want to mention before I finish
27:24 - off this video but um like I said
27:28 - dictionaries are actually unordered so
27:32 - there's no specific order to them but
27:34 - there is a module in Python called
27:37 - ordered dictionary which actually keeps
27:40 - the order of a dictionary for you
27:42 - alright so I'm going to import that here
27:45 - so it's from collections collections is
27:49 - just a package I believe import ordered
27:54 - dates okay
27:57 - ordered dick just like that so what this
28:00 - line is saying from this collections
28:02 - package in Python so this is just
28:04 - something in Python it there's a bunch
28:05 - of things in here that allow you to
28:10 - do different things oh I'm not gonna
28:13 - explain this now if you don't understand
28:15 - this look it up on Google if you're
28:16 - interested look up the from and import
28:18 - but when you import something you're
28:20 - importing a new kind of data type here
28:22 - okay a special data type called ordered
28:23 - dict so what an ordered dict is it'll
28:25 - actually allow you to keep an order in a
28:27 - dictionary and the order that the
28:29 - dictionary has is the order that things
28:31 - are added to the dictionary the order
28:33 - date so if you add something to the
28:34 - order dict then that has the order that
28:36 - it will stay it it won't be a random
28:37 - order all the time I'm not sure why this
28:40 - was being not a random order it's
28:41 - supposed to be but it seems to be
28:43 - consistent maybe it's cuz it's so small
28:45 - but you cannot rely on a dictionary to
28:47 - be in the same order every time okay you
28:49 - cannot rely on a dictionary to be in the
28:52 - same order every time you have to index
28:54 - by key okay just be aware of that
28:58 - that's why pop item says oh I have this
29:01 - twice
29:01 - that's why pop item says it'll pop an
29:04 - arbitrary element because it'll just pop
29:06 - the last one pop item will just pop the
29:08 - last one which could be any random one
29:10 - or it could be consistent and this case
29:12 - it's been consistent but if it was
29:14 - random on a different computer I've seen
29:15 - it be random before just take my word
29:16 - for it then yeah then it'll be an
29:18 - arbitrary umm thing you get back from
29:20 - this method so that is order dict um
29:23 - useful probably for something I'm not
29:25 - sure I haven't actually really used it I
29:28 - usually use dictionaries for things like
29:30 - this but if you actually did want to
29:33 - sort a a dictionary I suppose you could
29:35 - use one of these things right you could
29:37 - get all these in a list and then sort
29:39 - the list and then put the list into an
29:41 - order dict so that the the dictionary
29:44 - stays in the order that you added things
29:46 - to it so you just keep appending to this
29:48 - order dict and that would be it I forget
29:52 - how to add to an order dict but yeah you
29:55 - could just call like okay word counts
29:59 - dot values or something values right and
30:04 - then we have to cast this to a list
30:07 - right so lists just like that so this
30:10 - will get us a list of all the values so
30:12 - this would be one one three and two
30:13 - remember because we added this to the
30:15 - dictionary this will get a list of
30:18 - length four with all those four numbers
30:20 - let me just show you hit run okay you
30:23 - get one one three two
30:24 - okay so we get a list there we can see
30:26 - that it's not an order so you could
30:27 - actually say okay uh you could use so
30:33 - you could use sorted um but I prefer a
30:36 - list dot sort so we're going to do list
30:38 - dot sort just like that okay and then
30:42 - click um oops what is going on
30:49 - dot values none oh maybe we do have to
30:55 - use sorted I think I got mixed up here
30:57 - yeah yeah cuz this sort sit in place so
31:01 - you could use sorted and just enclose
31:03 - the entire you can see that uh these
31:08 - periods popping up I don't want these
31:10 - just giving space for clarity sake as
31:14 - you can see so we're getting all the
31:16 - values from the dictionary here we're
31:18 - casting it to a list then we're sorting
31:20 - it we want this list to be sorted sorted
31:22 - and then we are gonna print that sorted
31:24 - list so remember before it was going in
31:27 - out of order one one three two now it's
31:29 - going to be in order as you can see it's
31:31 - one one two three pretty cool right and
31:33 - then also you could probably cast this
31:37 - to a dictionary alright so now that you
31:39 - have a sorted list cast it to a
31:41 - dictionary oops
31:43 - but now we can actually print this
31:46 - dictionary apparently you can't do that
31:49 - I mean you'd have to use the order dict
31:50 - somehow to keep it um in the way you'd
31:54 - have to look it up I'll leave that as an
31:56 - exercise for you but yeah look up how to
31:57 - use ordered dict to give it a list or
31:59 - something and then be able to preserve
32:02 - the order of these these um these things
32:06 - oh I think the error actually here was
32:08 - yeah we have a list of numbers when it's
32:09 - like how the heck do you cast a list of
32:11 - numbers to a dick
32:12 - that was the air those habit that was
32:13 - stupid on my part you would actually
32:15 - need to somehow preserve the keys as
32:17 - well so maybe you'd have to actually use
32:19 - items instead of
32:21 - keys or values and then sort by by
32:24 - something else but basically yeah that's
32:27 - pretty much all the basics of
32:29 - dictionaries in Python um there a lot of
32:31 - more things a lot more things you can do
32:32 - with them you can even do dictionary
32:34 - comprehensions or a list comprehensions
32:36 - you can actually you know what that is
32:38 - I'm not gonna go over that now but it's
32:40 - just something to note it's kind of cool
32:41 - you can actually construct dictionaries
32:43 - just like you would a list comprehension
32:45 - but it's the dictionary comprehension or
32:46 - a tuple comprehension you can do that
32:49 - with these things very very cool but uh
32:50 - that is it for this video you guys thank
32:53 - you for watching I don't know how long
32:54 - this took I feel like it was pretty dang
32:55 - long but I really want to go over
32:57 - dictionaries thoroughly because
32:58 - dictionaries are freaking awesome in
33:00 - Python you can do so much stuff with
33:02 - them um they're basically like mini
33:03 - classes yeah like you don't have to use
33:05 - object-oriented programming because you
33:06 - can just use dictionaries they get
33:08 - little jobs done but yeah um I'm
33:11 - discussing now I'm just gosh a gushing
33:12 - and gushing about the dictionaries so
33:15 - great anyways yeah thanks for watching
33:17 - you guys I'll see you next time have a
33:20 - great day
33:26 - [Music]
33:28 - you

Cleaned transcript:

hey what's up you guys aaron from claire programmer here and today we're gonna be delving into dictionaries in Python so first off dictionaries are just another data structure in Python they are known as Maps or hashmaps if you're coming from another programming language and all pretty much they're really good for having super organized data they're basically mini databases also their fastest out you can index into them in constant time dictionaries are used like everywhere pretty much the contacts in your phone like if you have like bunch of phone numbers and email addresses associated with the main um that is how it's stored in the phone using a dictionary um if you have like a grocery list app on your phone or something that's like saying oh okay I need to buy 17 pancakes and four and a half who loops then a dictionary is probably how its implemented it's very good for basically storing data in a database because that's pretty much what it is what we'll be going over is how to create dictionaries like the syntax of them I'll do index into dictionaries how to add the dictionaries are what key value pairs are in an element of a dictionary and functions like get items keys values pop pop item and clear okay what those all do um and then we'll be going over a few examples and even how you could sort a dictionary so if any of that is what you're looking for then that's what I cover in this video let's get started so let's just create a dictionary dictionary so the way a dictionary works is instead of having elements that you can index into with numbers like in a list if you guys don't remember remember if you have a list then you would index it like this or something listed zero listed Wanless it to etc and instead of doing something like that in a dictionary you can actually specify what your your index names are so and these can be anything actually but usually there are strings let's just show you that so we could say let's say we have actually let let's do an example let's say we have a let's say we have some groceries okay you could put some things here so you could put bananas and strings and then have a colon here and then have a number okay so this is what a one element dictionary looks like there's a little thing here on the left of a colon usually a string and then a colon and then another value over here okay so that's one element in a dictionary two elements would look like this oranges three all right I think you guys understand by this point so this is the first element of the dictionary and this is the second element so now that you've seen what it looks like I'll explain so a dictionary is a way you can organize data in a more organized matter nothing that was a little redundant but pretty much you can you can say that these two things for each item in the dictionary these two things are associated so this on the left is actually called a key this on the right is I should call the value this is called a key value pair they have these in every ProLiant languages well you might know them as maps or hash maps and other programming languages but in Python they're called dictionaries same thing here this is a key and this is a value and these are a pair these will always be together so what's cool about dictionaries is that if you have a dictionary since and we do we have a dictionary called groceries instead of if I wanted to get the first element here bananas and five um I couldn't I can't just take in zero like this because that's not going to work all right what you actually to do is put in bananas so you see how we're indexing into this dictionary with the key okay we need the key that's why it's called a key you need the key to get the value so let's run this and see what happens or leave Chuck in a print statement first let's see what happens as you can see five popped up which is this five right here because we used bananas here too as the key then it gets its associated value which is five if we put in oranges here you can believe you know that three would pop up go try it yourself you don't believe me but yeah I'm pretty sure most of you can make that conclusion yourself it'll work the exact same way as this been honest in all right so that's how you that's how you index into a dictionary using using this notation here but you might be asking okay well in a list if I put in a number that's not in the in the list like about a list of length five and I put in an index of like 300 then you're gonna get an error same deal with same deal with dictionaries if you put in something like like a key that doesn't exist in dictionary then you will actually get a key airsea a key air right here it says hello is not hello is not in the dictionary which makes sense so actually instead of using this um bracket notation here and kind of like indexing into lists but your indexing into each dictionary there's actually a method called dot yet which does the exact same thing but if the key is not found in the dictionary then it won't give you an error it'll just say none it'll just spit out a none type so you avoid this red text of doom and death and um everything worked fine so if I put in but now Ashley's put in oranges sure to show you now okay bananas here bananas just keep it simple and can sort keep it consistent if I run this you're gonna get five just like when we use brackets okay but if I put hello which isn't a key in the dictionary and I hit run then you just get none instead of the big error so that's a nice little method that you're given it just as a little safety check within this get method it probably does the bracketing itself into the dictionary but it says if it's not in the dictionary then return none rather than then giving us an error so that's a little that's a nice thing to use um just you can if you know it's in the dictionary you can just use the bracket notation but if you don't know then it's better to use get it's just safer okay so those are some basics of dictionaries or dictionaries are very very good for these kinds of things maybe another example we have is maybe we had a a contact list okay so if you had a contact or a contacts let's say you had a bunch of friends and they all had phone numbers okay how would you do that with a list how would you associate a phone number with friends I mean you could have like one list called names and then one list called phone numbers and then just have the corresponding elements all be each other but that's just kind of silly because it's like two separate lists and if one gets screwed up or there's mistaken one then they're not then the entire things next messed up like if one thing is good if like the first name got deleted and everything is gonna shift over and it's just a big mess so that's where dictionaries come into play okay you could have something like this and I'm just going to format it differently so that it's nice and I sort of look at let's just say you had Joe as a friend okay and his phone number was one two three four five six seven all right and then you had Jane and her phone number was nine eight seven six five four three okay so this here shows us um that Joe and this phone number are corresponding because this is the key and this is the value same with Jane so now we can actually just index into this using the name and we can get so if you wanted to get Joe's phone number we would just put in Joe into contacts and what's the issue here oh oh I forgot a comma yeah you need a comma to separate all of the dictionary values Oh what is happening here Oh silly me so the formatting was fine here okay but obviously I can't have these dashes in these numbers okay Python doesn't know what the heck this is it thinks it's nine eighty seven well actually no Python thinks it's nine eighty seven 6543 and uh and python thinks that this is one 123 400 400 500 4567 what I actually need is just the phone number like that okay without the that's stupid or we could even use strings okay we could actually do this why do we do this this makes more sense okay hit run there we go and this string gets given back to us when we get Joe and if you want to Jane you better believe it we get her phone number too okay so that's pretty cool right this allows us to structure data with any name any key we want and then put anything one over here the real the real power of dictionaries though is when we actually start putting a bunch of different things in here so let's this is a contacts list right they might have more than just a phone number so if they have more than just a phone number then why don't we use a list here right you could just use a list like this okay so you have a phone number here and then you have an email address so email address email address add website com it's going to be straight okay at website.com and same deal here we just put a list whatever em at web.com good enough some weird examples but you guys get the idea so you're able to now associate this key this name of Joe with all of these things in this list alright this is something that is very very powerful with dictionaries um you're able to basically structure the data in any way you want group it together in any way you want and of course this this list can be of any length you want so you can actually put as many contacts you could have a phone number you could have a email address you could have a LinkedIn account you could have a Facebook you'd have everything Instagram account snapchat etc it never ends so you're basically allowed infinite flexibility when it comes to defining what it means to have a contact of Joe do you have his home address his billing address everything okay um but what about this you could even make this better and actually make this a dictionary itself right so this is a dictionary and then you have Joe and then within this its value is actually a dictionary you see where I'm going with this right so you could actually have phone number or just put phone and then boom you have that there and email okay and now I have a dictionary of contacts with his name and then for each person there's a dictionary associated with that person that has all his contacts so his phone is this his email is this and so on and you can you can keep doing these nested dictionaries as much as you want so this verse is this you can see how this is a little bit more descriptive and um you can really see the power of dictionaries here because try representing all these ideas like Joe has a phone number of this and an email of this and Jane has a similar thing with only lists think about it how would you how would you coherently and in a smart and intelligent way represent that and with a list you just can't so dictionaries are good for that some other examples you could use or you could use dictionaries to do things like count the most common words in a sentence this is a little example that I learned when I was learning dictionaries myself many years ago in my first Python class at university but what if you had a dictionary called word count word counts okay and let's say you just wanted to count all the words in a string so or a sentence which is a string okay so let's just say I like the name Aaron because the name Aaron is the best all right so we can see this this sentence here and let's say we wanted to know actually let's get rid of to simplify this let's say we wanted to count all the words here okay and you want to count the the how many times each word occurs in this dictionary something you can do with dictionaries is you could actually either iterate through this entire string well actually you'd have to split this up into a list so that each word is its own element there's a method for that called string dot I believe string dot split and then you would get all these words in a list and then you can iterate through all them and then every time you see a word you add it to the dictionary and every time you see it again you can up the count so it would end up looking like this I'm not actually gonna code this out because of there yet there's a lot of code there well you guys can do that if you want but this is what the end result would actually look like um you would have I okay would be one you would have liked which would also be one all right and then you would have V which would be why is this double quotes you would have V and that would actually be three as you can see it pops up three times V here V there and feed them so this is the idea that I'm getting so you're able to go in and every time you see you're iterating through these every time you see a word and you see that it's in the dictionary and then you can just go into this dictionary by indexing like for thee when this word V whenever you see it you could uh you could have just gone like this word counts at V um and then you just add one to it so whatever numbers there you would just add one to it okay and you would have to actually do it this way so you would just say okay the new value of this thing here in the dictionary is whatever the old value was plus one okay and then you would every time you see the then you would took that it okay that's the idea so dictionaries are very useful for these kinds of things it keeps it very nice and organized you can see here is counting how many occurrences of each word there are imagine if you had an entire book you could actually go through this and then sort it by these these values to see which words were used the most in which have reduced least okay and sorting a dictionary that brings me to a different another thing I want to talk to you guys about is actually um some methods you can use in dictionaries so we have some dictionaries here but let's say you wanted to get all of the data within the dictionary back out so there's actually three methods here I am going to print them out here in a comment so you can see what to look like it's called dikdik items okay dict dots keys and dict dot values alright so we have three methods here and I'm just gonna explain what they all do verbally and then I'll show you so here this dick is just saying you have a dictionary here so that would be word counts or contacts you would stick that word that is dictate and then if you call dot items on it what actually get is a list of tuples and each tuple is a key value pair alright you will call that items and you'll get a list of tuples and each tuple is a key value pair I said it twice so that you guys can let that sink in if you didn't get the first time on this one same deal but you will get a list of just the keys so you would get I like and V for this and if you called it values you would get a list of only the values 1 1 & 3 okay so this gets you a list of tuples of both this gets you a list of just the keys the the orange strings here and this would get you just the green values the the numbers or these could be lists or dictionaries themselves you know what I mean it can be whatever you want but these are the three methods let's just see what this looks like let's just do word counts okay so word counts dot items okay let's just print this and close this off print it and as you can see it says dick items and then you have this list in here of tuples this highlighted portion you have a list of a tuple so i is one like is one and V is three okay if you want to make this actually a list instead of a dict items thing i apparently if you call items you get a dict items addicted ohms object but i'm pretty sure you could actually just cast this to a list just like this hit run and bat yeah see you just get the list out so that's that's a very useful use case of casting i think i went over that in a video a few days ago or a few minutes ago if you're watching this if you're binge watching this and trying to learn Python for the first time or whatnot but yeah so you can actually cast that to a list to actually get the list out of it so that's that let's try the next one now so we have that we have keys same deals gonna happen if I delete this you're gonna get that dick two items object can so I'm just gonna leave this list cast in and just change this so instead of calling items we're gonna call keys and you guys can probably predict what we're gonna get you get all the keys I like and V alright and same deal with values I'm just gonna show you for completeness sake but I'm pretty sure you guys understand what's going to happen you're gonna get these numbers here 1 1 & 3 okay so that's three very common methods in Python for dictionaries but you also have a few more like what if you wanted to delete something from a dictionary okay if you wanted to delete something from a dictionary how would you do that well there's a there's a method for that as well so let's say we wanted to delete word counts equals oh what am i doing word counts dot pop okay so pop what it does that's a little bit of a weird a weird word choice in my opinion I'm used to it because I've been programming for a long time but when you pop something you are like you are taking one item from a group of things so a dictionary a tuple a list or whatever and then you're just popping one off so you pop usually the last one or the top one or whatever you pop off one element that's why it's called pop instead of remove or something but you can actually pop something out of a dictionary by calling it's key so this would actually completely get rid of this thing if I ran this or I am running this I just haven't run the code yo but this line of code will actually delete this from the dictionary and then this will only be in the word count dictionary following here likewise if I use like then it'll delete it'll delete like if I use E then it'll delete delete' V okay let's just try that so let's run this and then so printed before delete V and then print it after okay so I'm gonna print the dictionary you're gonna see the whole thing I'm gonna pop one of them off and then I'm going to print the dictionary again so as you can see v has disappeared because we popped it off alright so that's what pops up that's how you remove a remove something from a dictionary and one cool thing is it's called pop because this here is actually this I mean I mean this this little thing so if we actually printed this it's actually popping it's not just deleting it it's actually popping it off and retrieving it from the dictionary for us and then allowing us and then getting rid of it so let's say you had a bunch of contacts you'd be like okay retrieve and delete contact then you in this contacts dictionary you could like pop off one of the things it would delete it from the diction form the thing and then it retrieves it so that you can like display like oh this person was deleted blah blah blah blah or something like that so as you can see um it gets this value actually doesn't get the entire thing I guess ooh I guess when you pop it then it only returns the value not the key as well but yeah you're able to get the value of this key back from this entire expression here all right so that's pop now there's also a way you can just get rid of you can pop off a random one so instead of actually specifying which one you want with the key you can just call pop I don't like this so let's say word counts dot pop item and then um print word counts oops print word counts like that and let's do this twice boom boom so this is actually going to pop a random thing from this it was gonna it's either gonna pop this one or this one or this one it's just random I don't know how the computer determines that but it's just random so it's just if all you want to do is just get rid of one thing then you could do it that way or even like you could do you could run pop item three times and each time you go through it remember how you got number how we got this three back when we when we just used a regular pop method here using the key then we got forget back if you called pop item three times you would eventually get all these numbers in a random order but let's just say that's all you like you had to sum up all these things you could actually do it this way you could just pop item three times and then keep adding one to want um adding these numbers together so one plus one plus three you would eventually get five something like that I can't think of a good example right now but I'm sure that would be useful it's something I'm dictionaries are very robust and they can be applied to many different problems that's why they're so beautiful they're just so flexible and juicy and just sexy you know but if I keep running this um it doesn't appear to be random perhaps I'm wrong with that I swear it was supposed to be random hmm I don't know maybe I'm wrong I will doublecheck that one second guys all right I'm back you guys um so yeah I actually misunderstood when I was reading up on this method here refresh when I was reading this and refreshing it um it says it pops an arbitrary element not a random element and the distinction there is um pop item will well pop pop will pop what you the key you give it the exact element that you specify but pop item will just pop off the last one of the dictionary okay and since the last one could be anything you want it seems to be be consistent here every time because that's the way we created it here here this one this one and this one um but because yeah because it's in this order it's always gonna pop the last one but sometimes if you oh that's one thing I forgot to say yeah actually you can actually add to a dictionary to simply by let's go over that real quick because I'm gonna need that to continue so put this on hold here okay put this idea on hold and we're going to go print word counts how did I forget this and word counts you can actually this is how you would add to a dictionary you can actually specify let's say ciarán pops up twice in this word count right so let's put Aaron Aaron like that and then we know what pops up twice so let's just put two so what this will actually do is it'll create the key Aaron here and then create the value two and it'll actually pop up in this word counts dictionary so let's have two print statements here and get rid of these so we're not confused right so what what this is gonna do is it's gonna print this dictionary then it's gonna add this to the dictionary and then print it again so we can see it so let's do that and as you can see we have the dictionary here and then we added Aaron with the value of two to it so that's how it got added to the dictionary so that means whenever you're adding to a dictionary it doesn't always add in the same spot it might add to the end or somewhere else because the dictionary doesn't actually have an order unlike a list or a tuple I don't think I actually mentioned that earlier but yeah a dictionary doesn't have a order because because you can index in as a key okay and it doesn't matter where the key in the list is we never used that key it's always gonna be there so a dictionary is just kind of like a bag of things a bag of values that have like labels on them which is the keys and then you can just like hey just find this key and then it gives spits out the value for you so there's no specific order all right so that's that's how you add to a dictionary but now let me go back to pop items so I was saying earlier that pop item will pop in arbitrary one so it doesn't pop a random one it just pops I think the last one in the dictionary and then whatever happens to be the last one it pops that one and then you get something back so let's see what this gives us back I'm not actually sure if this gives us just the value or the key and the value so let's just try it all right so come with these out hit run and as you can see it actually gives us a tuple so you remember how pop only gave us three it only gave us the value three instead of this together but when you do pop item it actually um pops a arbitrary element in the or entry in the dictionary as a tuple so you get the key and the value which makes sense because when you're popping you're actually specifying the key so you're like okay I know I want this key and I'm gonna get that value associated with that key but when you pop item you need to keep it together okay and then you can of course just you can just index into this tuple at zero for the key and add one for the value if you wanted to so that's pop item all right let's just go like this dict clop item and continue on we don't need these either so that's how you I'll leave I'll leave this as a chunk together because that's kind of nice you have a dictionary and then you're adding to the dictionary here manually all right oh the last thing I wanted to go over was dicta dot clear so what this will do is it'll literally just wipe out the entire dictionary so that whatever your dictionary has your dictionary will just look like this an empty dictionary with absolutely nothing in it okay so if I called a word counts dot clear all right this is just gonna make word counts equal to nothing all right nothing absolutely nothing and that's good if you just want to delete it I mean not even delete it you're just clearing the dictionary I don't know why you would want to do that but it's there if you need it I'm sure it's useful in many cases because yeah how else would you go and delete you're not gonna pop it like 27 times or whatever if your dictionary is really long or 27 entries long you're just gonna clear it instead of doing anything else or just override it with a new dictionary but yeah that's the last one I want to go over like I mentioned oh there's actually one last little thing I want to mention before I finish off this video but um like I said dictionaries are actually unordered so there's no specific order to them but there is a module in Python called ordered dictionary which actually keeps the order of a dictionary for you alright so I'm going to import that here so it's from collections collections is just a package I believe import ordered dates okay ordered dick just like that so what this line is saying from this collections package in Python so this is just something in Python it there's a bunch of things in here that allow you to do different things oh I'm not gonna explain this now if you don't understand this look it up on Google if you're interested look up the from and import but when you import something you're importing a new kind of data type here okay a special data type called ordered dict so what an ordered dict is it'll actually allow you to keep an order in a dictionary and the order that the dictionary has is the order that things are added to the dictionary the order date so if you add something to the order dict then that has the order that it will stay it it won't be a random order all the time I'm not sure why this was being not a random order it's supposed to be but it seems to be consistent maybe it's cuz it's so small but you cannot rely on a dictionary to be in the same order every time okay you cannot rely on a dictionary to be in the same order every time you have to index by key okay just be aware of that that's why pop item says oh I have this twice that's why pop item says it'll pop an arbitrary element because it'll just pop the last one pop item will just pop the last one which could be any random one or it could be consistent and this case it's been consistent but if it was random on a different computer I've seen it be random before just take my word for it then yeah then it'll be an arbitrary umm thing you get back from this method so that is order dict um useful probably for something I'm not sure I haven't actually really used it I usually use dictionaries for things like this but if you actually did want to sort a a dictionary I suppose you could use one of these things right you could get all these in a list and then sort the list and then put the list into an order dict so that the the dictionary stays in the order that you added things to it so you just keep appending to this order dict and that would be it I forget how to add to an order dict but yeah you could just call like okay word counts dot values or something values right and then we have to cast this to a list right so lists just like that so this will get us a list of all the values so this would be one one three and two remember because we added this to the dictionary this will get a list of length four with all those four numbers let me just show you hit run okay you get one one three two okay so we get a list there we can see that it's not an order so you could actually say okay uh you could use so you could use sorted um but I prefer a list dot sort so we're going to do list dot sort just like that okay and then click um oops what is going on dot values none oh maybe we do have to use sorted I think I got mixed up here yeah yeah cuz this sort sit in place so you could use sorted and just enclose the entire you can see that uh these periods popping up I don't want these just giving space for clarity sake as you can see so we're getting all the values from the dictionary here we're casting it to a list then we're sorting it we want this list to be sorted sorted and then we are gonna print that sorted list so remember before it was going in out of order one one three two now it's going to be in order as you can see it's one one two three pretty cool right and then also you could probably cast this to a dictionary alright so now that you have a sorted list cast it to a dictionary oops but now we can actually print this dictionary apparently you can't do that I mean you'd have to use the order dict somehow to keep it um in the way you'd have to look it up I'll leave that as an exercise for you but yeah look up how to use ordered dict to give it a list or something and then be able to preserve the order of these these um these things oh I think the error actually here was yeah we have a list of numbers when it's like how the heck do you cast a list of numbers to a dick that was the air those habit that was stupid on my part you would actually need to somehow preserve the keys as well so maybe you'd have to actually use items instead of keys or values and then sort by by something else but basically yeah that's pretty much all the basics of dictionaries in Python um there a lot of more things a lot more things you can do with them you can even do dictionary comprehensions or a list comprehensions you can actually you know what that is I'm not gonna go over that now but it's just something to note it's kind of cool you can actually construct dictionaries just like you would a list comprehension but it's the dictionary comprehension or a tuple comprehension you can do that with these things very very cool but uh that is it for this video you guys thank you for watching I don't know how long this took I feel like it was pretty dang long but I really want to go over dictionaries thoroughly because dictionaries are freaking awesome in Python you can do so much stuff with them um they're basically like mini classes yeah like you don't have to use objectoriented programming because you can just use dictionaries they get little jobs done but yeah um I'm discussing now I'm just gosh a gushing and gushing about the dictionaries so great anyways yeah thanks for watching you guys I'll see you next time have a great day you
