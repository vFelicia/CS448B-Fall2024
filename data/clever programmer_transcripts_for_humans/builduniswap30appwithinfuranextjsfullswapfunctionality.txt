With timestamps:

00:00 - in this video you're going to be
00:01 - building uni swapcom on the ethereum
00:03 - blockchain using infuria and xjs you
00:06 - will be able to convert your ethereum
00:07 - coins into custom erc20 tokens that
00:10 - we'll be building throughout this video
00:11 - that's uh let's get straight into the
00:13 - video alright ladies and gentlemen
00:15 - welcome back to another build today we
00:17 - are building unit swap as you could see
00:19 - in the title so while you're down there
00:21 - looking at the title go ahead click the
00:23 - first link right below that because
00:24 - that's going to take you to this very
00:26 - page where you're going to go ahead and
00:27 - sign up for inferior after hitting the
00:29 - sign in button you put in your name
00:31 - email you don't put in your name you
00:32 - just put in your email and then you put
00:34 - in a password and then you go ahead
00:36 - click sign up and then verify your email
00:39 - whatever answer those few questions it
00:42 - doesn't really matter it's just for
00:43 - analytics but like you can just select
00:45 - engineer and solo freelancer whatever
00:47 - applies to you and once you're good
00:50 - there you go ahead hit submit and then
00:52 - straight away You're gonna go ahead get
00:54 - started with a project now for Network
00:58 - you want to go ahead and select web3 API
01:00 - the reason is there's a bunch of chains
01:02 - that one particular thing supports and
01:05 - then for name you can put in like
01:07 - whatever I put here a production but
01:09 - like you can just put in even swap
01:10 - whatever once it's done hit submit and
01:13 - go ahead and that that's it that's it
01:15 - that's basically it
01:16 - you're done you're in
01:18 - you're good you're set now they're all
01:21 - your projects which is probably only one
01:23 - and if you already have an account just
01:25 - go ahead sign in and
01:26 - basically you could have skipped in this
01:29 - entire part
01:30 - that's sad let's go ahead and set up
01:32 - metamask
01:33 - okay next up you want to go to
01:35 - metamask.io slash download
01:38 - now once you're there you can just go
01:40 - ahead and click that big blue button
01:42 - that's going to take you to Chrome web
01:43 - store and by the way it does build is
01:45 - only going to be working on Chrome or
01:47 - whatever browser that supports metamask
01:50 - but which is suggests chroma hit add to
01:52 - Chrome
01:53 - go through that yeah advics engine
01:55 - whatever and then once it's done it's
01:58 - going to pop open a brand new website
02:00 - for you which is just like their
02:02 - configure page and if you already have
02:04 - metamask like once again you can just
02:06 - skip ahead a couple of minutes but if
02:08 - you're new click agree and obviously
02:12 - read that we all know that's important
02:15 - and everybody reads that privacy policy
02:18 - is the most important thing you will
02:20 - ever read in your life not legal advice
02:22 - now
02:24 - if you happen to have a new computer you
02:26 - can just import your previous wallet
02:28 - over there but if you are brand new you
02:30 - can just click create new pass in a add
02:32 - a password that is go that you will have
02:34 - to remember again read the terms of use
02:36 - and then create a new wallet now I
02:39 - highly suggest you go ahead and watch
02:40 - that video because that's going to
02:42 - explain to you in thorough details and
02:44 - how you can keep your the 12 phrase
02:47 - mnemonic safe but in short
02:50 - keep it safe because if someone steals
02:52 - it they will have full access to your
02:54 - wallet now quick tip you want to use
02:57 - separate wallets for development and for
03:00 - your own funds and then never share any
03:02 - kind of detail where your money is at
03:04 - and then only share details of wallets
03:07 - that you don't mind they get compromised
03:09 - now here's your security recovery phrase
03:12 - this is the absolute key if it gets lost
03:14 - you're done like for real without
03:16 - exaggeration so keep it a secret with
03:19 - that said though you wouldn't have to go
03:21 - ahead copy this whole thing hit next and
03:24 - then you will have to verify that you
03:25 - have that you can just copy paste it in
03:27 - there and you're good to go now once you
03:28 - hit confirm
03:30 - minimize basically takes that as your
03:33 - confirmation that you are aware of
03:36 - anything everything that I just said and
03:37 - all the terms of use and everything that
03:39 - they prompted you so once you hit all
03:41 - done you're good to go there is your
03:43 - meta mask now one more thing you want to
03:45 - do is because you only have access right
03:47 - now to the ethereum mainnet which
03:49 - obviously is a ton of money
03:51 - and you don't want to use that click
03:52 - that show hide right there scroll down
03:54 - all the way where you can see show test
03:57 - networks turn that thing on
03:59 - and then turn on show conversions on
04:01 - test networks that will basically show
04:03 - the dollar amount of every single
04:05 - ethereum in your wallet which is just a
04:07 - nice touch and then basically they're
04:09 - good now if you scroll back up and then
04:12 - click the selector there are all your
04:15 - test networks now in this build we're
04:17 - going to be using girly so you might as
04:19 - well go ahead and
04:20 - check that off or you might as well go
04:23 - ahead and select that said let's go
04:25 - ahead and get started coding now if
04:27 - you're familiar with us and you know
04:28 - that we have our own CLI tool that makes
04:31 - your life easier and you want to go
04:32 - ahead and to use that you want to type
04:34 - in npx clever program and if you don't
04:36 - have it it will have to install itself I
04:39 - also recommend you add a at latest at
04:42 - the end so that you get the latest
04:44 - version of it and it will get it or it
04:46 - will
04:47 - update itself but regardless just put in
04:50 - your email address and then put in your
04:52 - name and then at the time when we shot
04:54 - this wasn't the latest version but right
04:56 - now we are supporting type search so if
04:58 - you start typing unit swap you it will
05:02 - basically just narrow down the list and
05:03 - you can just hit return select that one
05:05 - so that's going to be something that
05:07 - that's going to help you so anyways it's
05:10 - gonna run a couple of scripts and we'll
05:12 - install the dependencies and everything
05:14 - for you to get started and then open up
05:17 - your vs code in that specific project so
05:19 - you can just sit back relax get over
05:20 - coffee whatever and as you can see on my
05:23 - screen that's what's happening there now
05:25 - I already opened this guy up that is the
05:28 - project that we're going to be building
05:29 - on top of and for you to spin it up I'm
05:32 - just going to zoom in a little bit just
05:33 - so you can see it better what you can do
05:35 - to spin this up is CD into uni swap Dash
05:37 - app CD as in change directory right away
05:40 - and then in there you just type in
05:42 - yarndev npm run Dev or something but I
05:45 - just recommend you use yarn anyways once
05:48 - it's good to go you open the uh you open
05:51 - your localhost up and there is your
05:53 - project that is your starter project
05:54 - that we're going to be building on top
05:56 - of and
05:58 - there you go
05:59 - let's go ahead and start setting things
06:01 - up
06:02 - now to make things extremely easy for
06:04 - you we recommend you use truffle
06:07 - extension in your vs code so you want to
06:09 - go ahead search for truffle for vs code
06:12 - install that guy and basically they have
06:14 - an integration with infuro which we're
06:16 - going to be using today so that's a
06:18 - pretty good one and once you're there
06:19 - open that little truffle icon on the
06:22 - left hand side
06:23 - you can go ahead click that I click
06:25 - create new network
06:27 - and that will
06:29 - and then select inferior service and
06:31 - then you can go ahead click sign up and
06:33 - that will just take you to infuria and
06:35 - once you connected the two
06:37 - Services it will prompt you to select
06:40 - the project name now you can either type
06:42 - it in there or sometimes it like shows
06:45 - it up oh because we actually create you
06:48 - can just create a brand new project so
06:50 - just type in uniswap and that's going to
06:52 - be the new name of the project however
06:54 - if you want to connect it to us to an
06:57 - already existing project you can just
06:58 - hit connect to network instead and then
07:01 - that will show you the drop down which
07:03 - will enable you to select your existing
07:05 - project now once you typed in we
07:07 - recommend you use public just go just
07:09 - for easiness just to make things easier
07:11 - and then there you go there is your
07:12 - project
07:14 - all right for this next step we
07:15 - recommend you start using we recommend
07:17 - you use remix that ethereum ethereum.org
07:21 - which is by the way an online IDE just
07:23 - to create smart contracts and I'm going
07:25 - to slow down a little bit because this
07:27 - is where things are getting a little
07:28 - Advanced and these are things that might
07:30 - be new to you now if you watch a couple
07:33 - of my other tutorials I might be using
07:36 - the vs code extension for this tutorial
07:38 - we're going to be using this so if you
07:40 - want to see a familiar familiar thing on
07:42 - your screen as you see on my screen you
07:45 - might as well use remix IDE in the
07:47 - browser now to generate a new workspace
07:50 - you can either leave it on the default
07:51 - or you can just generate a new one but
07:53 - to generate a new one you can click that
07:55 - little plus icon and then just name it
07:57 - the way you want to template doesn't
07:59 - matter and in your contracts what you
08:01 - can do is right click new file and then
08:04 - just name it uniswap.sol now in this
08:08 - file is where we're going to write most
08:10 - of our contracts so starting off spdx
08:13 - license identifier MIT that you just
08:15 - need it don't question it you just need
08:17 - it if you write MIT there that basically
08:20 - it's an open source license anyone can
08:22 - use it and you don't you're not liable
08:24 - for anything that happens whatever you
08:26 - write in there the more you know now you
08:30 - have to specify the version of solidity
08:33 - you are using I see so many people trip
08:35 - up on this you don't want to mess that
08:37 - up type in 0.8.16 that was the latest
08:40 - one when we shot this tutorial well you
08:43 - will need to import though is something
08:47 - oh something from open Zeppelin now they
08:49 - have template contracts and you're going
08:51 - to be importing the erc20 contract okay
08:54 - and this is basically going to and let's
08:56 - think of it as like a npm package but
08:59 - for solidity we're gonna have two
09:01 - contracts in this file
09:03 - if I'm correct first contract is going
09:05 - to be we're just going to name it custom
09:07 - token and it is going to be child of
09:10 - erc20 so it's going to inherit
09:12 - everything and we're going to have a
09:14 - Constructor in there now that
09:16 - Constructor is going to require two
09:18 - inputs one of them is going to be a name
09:20 - and one of them is going to be a symbol
09:23 - now these are both are going to be
09:25 - strings and then this is going to be
09:27 - you're going to obviously pass that into
09:29 - erc20 because that has a Constructor now
09:32 - erc20 has a underscore mint function
09:35 - built in it it comes with the import so
09:38 - you don't have to import it separately
09:40 - minting requires a few more things
09:42 - minting requires someone a wallet where
09:45 - it's going where all the tokens are
09:47 - going to be minted to and then an amount
09:50 - now what is happening here is we want to
09:53 - Mint a thousand a thousand of those
09:55 - tokens however and this is something
09:57 - that I'm going to say a bunch of times
09:59 - during this tutorial now I've said it
10:00 - many times in solidity the only currency
10:04 - that is accepted and the and the only
10:06 - currency that solidity works with is
10:08 - something called way now that is
10:11 - basically all your first contracts so
10:13 - congratulations you just wrote your
10:16 - first contract that will mean a bunch of
10:19 - erc20 custom tokens into your wallet now
10:24 - you can go ahead close that artifacts
10:26 - thingy if you have Auto compile enabled
10:28 - that just that's just gonna go crazy and
10:30 - it will keep compiling your contract and
10:32 - make sure everything is good to go so as
10:34 - long as that check mark on the left hand
10:36 - side is present you're good and with
10:39 - that said let's start typing up another
10:41 - contract which we will call uni Swap and
10:44 - that will handle all the conversions and
10:46 - everything now that will require another
10:48 - Constructor
10:49 - and inside the Constructor we're just
10:51 - gonna strike start straight away with a
10:54 - for Loop now custom coin that we're
10:56 - going to create in this case coin a coin
10:59 - B coin c we're gonna start from zero and
11:02 - go all the way to go all the ways to
11:04 - tokens dot length now what is tokens yes
11:07 - good question we're gonna figure it out
11:09 - in just a second don't worry about it
11:11 - there it is it is going to be an array
11:14 - of tokens but or it is going to be an
11:17 - array of strings it's basically just the
11:19 - names of every single it's not super
11:22 - creative but it guess there's not job
11:24 - done it like doesn't go all the way down
11:27 - to all the fanciness you can use this
11:29 - you can just rename it you can even call
11:31 - it Coca-Cola if you want to doesn't
11:33 - really matter
11:34 - we just wanted to go with this because
11:36 - it's simpler easier to follow especially
11:38 - if you're a beginner all right so we're
11:40 - going from zero and the max is going to
11:42 - be the length of that array you can put
11:46 - in five ten thousand two thousand three
11:48 - thousand what however many random coins
11:50 - you want to and then just like usual
11:52 - just like in JavaScript you will
11:54 - increment that I variable which is going
11:56 - to be the index now here
11:59 - you're gonna go ahead and create a new
12:01 - instance of custom token you don't have
12:04 - to import anything you don't have to do
12:05 - anything we're just going to create a
12:08 - new instance of it meaning it will
12:10 - invoke The Constructor so you where
12:12 - you're going to see that in action in
12:13 - just a little bit so as you can see we
12:16 - are passing in two items to the
12:19 - Constructor which is tokens I and tokens
12:22 - I it's literally the same thing and if
12:25 - you look back up to line seven on my
12:26 - screen I don't know how like which line
12:28 - is on your screen but on my screen it is
12:30 - line seven it requires two inputs so
12:33 - that's what we are putting in here
12:35 - meaning that the coin name and the coin
12:39 - symbol in this case is going to be the
12:42 - exact same again if you're Advanced you
12:45 - can do some tricks with it but I
12:47 - recommend you just stay with this for
12:48 - now it will get the job done perfectly
12:52 - we want to definitely save this new
12:54 - token that we just created like right
12:57 - now in a mapping and we're going to that
12:59 - up in just a little bit this mapping
13:01 - later on is going to enable you to fetch
13:04 - all these coins way easier than
13:07 - otherwise would be so let's go ahead and
13:09 - set up that mapping so for that we need
13:11 - to use the keyword mapping and it's
13:13 - going to be mapping a it's going to map
13:15 - a string to an erc20 token all right
13:20 - it's going to be public meaning anyone
13:22 - can use it so there's your mapping that
13:24 - we're going to use and then we will set
13:27 - up an eighth value
13:28 - and that's just once again to keep
13:31 - things simple this is a beginner
13:33 - tutorial we're keeping things simple
13:35 - simple if you haven't heard of solidity
13:37 - before you're in a good place
13:39 - so we're going to set up a eth unit eth
13:42 - value which is going to be a uint what
13:44 - is a u n it's a number and again I'm
13:47 - gonna
13:48 - I'm referring about I'm going to refer
13:50 - back to the statement that I made just
13:52 - like a minute ago
13:53 - everything is stored in way so we're
13:56 - going to convert eth unit to weight and
13:59 - if you save this website by the way
14:02 - eth-converter.com that is eat eat that
14:05 - is
14:06 - eth-converter.com that will be helpful
14:09 - for you later on so if you put in any
14:11 - kind of ether value in which case in
14:13 - this case it's going to be
14:15 - 0.000 that is
14:18 - 0.001 yeah I'm not gonna say any of the
14:22 - other numbers just copy that that's
14:23 - going to be your way value
14:26 - that we'll be saving there so that's
14:28 - going to be your base way value save it
14:31 - there it will be useful later on don't
14:33 - worry about it for now just do as is and
14:35 - then it will all come together now if
14:38 - you select that last option on the left
14:40 - hand side now we're going to go ahead
14:42 - and compile and deploy this contract
14:45 - that we just built now I also have Auto
14:47 - compiler enabled so it's automatically
14:50 - compiled but you will have an option to
14:52 - do so if you need to and then there is
14:55 - that big orange deploy button click that
14:59 - and down there on their deployed
15:01 - contracts it should show up and those
15:03 - are the two functions that are available
15:05 - right now and those are coming built in
15:07 - with erc20 and everything and the
15:10 - mapping that we created now
15:12 - little explanation here when you deploy
15:15 - a contract the Constructor runs
15:17 - immediately because in the Constructor
15:20 - we have the for Loop that will
15:22 - immediately deploy all three coins so
15:25 - you don't even have to worry about that
15:27 - and so what you can do is here fetch all
15:30 - the coins that were deployed so if you
15:32 - put in coin a which is just an of the
15:35 - first coin it will return the address of
15:38 - that coin and so that's what you but
15:41 - that's what we just implemented so
15:42 - mappings works like that you gotta pass
15:44 - in and a string and it will return an
15:47 - erc20 address
15:50 - so that's what you see there and then
15:51 - for tokens
15:53 - that is your that is the that is on my
15:56 - screen on in line 13 that is the array
15:59 - so you can fetch each and every single
16:02 - element like that and if you get these
16:05 - results on the left hand side after you
16:07 - deployed your contract congratulations
16:09 - time to move on all right now you have
16:13 - your custom tokens perfect each of them
16:15 - are deployed and minted thousand of each
16:18 - but
16:20 - how do you verify that you need a
16:22 - function that Returns the balance of
16:25 - each coin so I want to go ahead and get
16:28 - started creating a new function inside
16:30 - your second contract and it will call it
16:32 - get balance now this will have two
16:34 - inputs one is the token name and the
16:37 - second is an address what's happening
16:40 - you want to get a balance all right so
16:42 - you need the wallet address which holds
16:44 - potentially that token and that's going
16:48 - to be the address and then you want to
16:49 - get you want to pass in the token name
16:51 - so let's say I have a wallet which has a
16:54 - random address and I have coin B so in
16:58 - that case I will pass in coin b as the
17:01 - first argument and I will pass in my
17:03 - wallet address as the second argument
17:05 - and all I expect to see back is just a
17:08 - number of how many ether or or of how
17:12 - many coin B do I have in my wallet so
17:16 - it's going to be a public function which
17:18 - will return a uint as I said and all it
17:23 - will do is just go through the go to the
17:25 - mapping and then pass in the token name
17:27 - so far all it would do is just return
17:30 - and address however once you got that
17:32 - address you want to call a balance of
17:35 - function and this is something that is
17:37 - coming from erc20 so this is part of the
17:40 - standard and there you're gonna pass in
17:43 - the address so it's going to be my
17:44 - wallet address that's going to go in
17:46 - there so what it will do under the hood
17:48 - it will retrieve one the token address
17:52 - so we'll know that coinb has this and
17:55 - that address and we're gonna check that
17:57 - at that address my wallet address a lot
18:00 - of addresses I know so that that coin
18:02 - address my wallet address how much the
18:04 - balance of that it scrub that
18:07 - so this will return that my wallet that
18:12 - has the second address is that will
18:14 - return the balance of the first coin
18:17 - inside of my wallet
18:20 - so let's go ahead and deploy this new
18:22 - contract
18:23 - and actually you can see all the
18:25 - instances you feel free to like keep
18:28 - removing it but you can keep it that's
18:30 - fine too again the Constructor has run
18:32 - immediately so we're not going to check
18:34 - that but you can pass in coin a right
18:37 - there to check how much coin a in your
18:40 - wallet and then you want to pass in your
18:43 - very own wallet address now you can get
18:46 - that from there from the account because
18:49 - it is not actually connected to your
18:52 - Minimus yet it is remix ID's own
18:55 - built-in environment so it gives you a
18:57 - bunch of like test tools so once you
19:00 - pass that in and hit call I'm gonna
19:02 - pause this for here for a second and you
19:04 - should pause guess how much of the of
19:07 - that coin do I have in my wallet invalid
19:10 - address perfect that's not what you
19:13 - guessed am I right okay that's just
19:15 - because I have all those quotes there so
19:17 - let's just remove it it's an address
19:19 - it's a different data format I know it's
19:22 - annoying I can get around it I make
19:25 - mistakes all the time remove the quotes
19:27 - call it again
19:29 - so there you go past that pass the
19:31 - address in and call it and if you
19:33 - thought and if you guessed zero you're
19:36 - good and with that said let's keep
19:38 - moving all right let's just create a
19:40 - function that will return the coin name
19:42 - every time you pass in the coin name
19:45 - precise so you want to have a function
19:48 - that will return a string and it takes
19:50 - in a string and it will return it the
19:53 - coin's name from the mapping so there
19:57 - you have it
19:58 - you want to type in token instance map
20:01 - token name dot name function and there
20:04 - you go if you go ahead and redeploy the
20:07 - contract
20:08 - and then go ahead test this out
20:10 - and then type in coin a it will return
20:13 - coin a all right so let's build the
20:15 - function that will return the custom
20:18 - coins address so we can fetch a bunch of
20:20 - things with that
20:22 - just by passing in the name so let's do
20:24 - that all right so we're going to get
20:26 - started by just starting a new function
20:28 - we'll call it just get token address or
20:30 - whatever and it will have one input
20:33 - which will be a string and it's going to
20:35 - be token name and then it will return
20:38 - obviously an address and then all we're
20:41 - going to do is just call the address
20:43 - function
20:44 - on the token instance map and then pass
20:47 - in token name so literally we're going
20:49 - to use the mapping that we already have
20:51 - pass in the name and the little return
20:54 - the entire thing and we're just going to
20:56 - we're just going to need the address of
20:58 - that specific contract okay so let's go
21:02 - ahead and deploy that and let's see if
21:04 - that works so if I just type in coin a
21:07 - and then hit that there's my address
21:09 - that's uh working perfectly let's go
21:12 - ahead and get started swapping stuff
21:13 - because this is where like the real deal
21:15 - is going to get started all right now we
21:18 - are going to get started swapping eth to
21:21 - custom coins and this is where the real
21:24 - meaty stuff is happening so you can come
21:27 - back to this if something is unclear all
21:30 - right so let's just go ahead and create
21:31 - a new function it's going to be oh
21:35 - create a new function it's going to be
21:36 - actually a pretty simple one so we're
21:38 - going to call it just swap East to token
21:40 - and it will have one input it's going to
21:43 - be a string that's going to be the token
21:45 - name so basically what's going to happen
21:47 - is you're going to send X amount of eth
21:51 - to the contract and the token name and
21:54 - that's it and then the rest is going to
21:55 - be handled by the contract this is going
21:58 - to be a payable function because we'll
22:00 - need to send money all over the place
22:03 - and it will return a number of how much
22:06 - was actually converted we're going to
22:09 - need to have a couple of variables here
22:10 - we're going to be saving the input value
22:12 - then we're going to be saving the output
22:15 - value which is going to be input value
22:17 - slash each value and if you look up to
22:18 - my line 15 on top of the screen that's
22:21 - where my each value is at and then we're
22:23 - going to need to make it an 18 digit way
22:26 - thing remember that's that's a solidity
22:29 - thing and then we're gonna need we're
22:31 - going to need the requirement here we're
22:33 - gonna need to make sure that the
22:34 - transfer it actually happens all right
22:36 - so we're going to need to transfer from
22:39 - the coin that the user is firing we're
22:43 - going to need to pass a couple hour much
22:46 - we need to basically the output value
22:48 - amount we need to transfer it to the
22:50 - user's account all right so that's how
22:52 - we're calculating the whole thing and so
22:55 - there is and then we just return the
22:57 - output value which will just tell the
22:59 - user hey this is how much you actually
23:01 - got for your money and so there's the
23:04 - value that helps us once again convert
23:06 - between if and the custom token and
23:09 - you're going to decide which token you
23:11 - want to get and then you're just going
23:13 - to pass it turn it into way transfer it
23:16 - over and if that's good you're getting
23:18 - ready to go all right so let's go ahead
23:20 - and actually test this out so I'm going
23:22 - to deploy it and let's see what do we
23:23 - got
23:24 - because of the Constructor I already
23:26 - have access to a bunch of Ethan on all
23:28 - these tokens so those are already there
23:31 - so let's go ahead and use that swap eth
23:34 - token function
23:35 - and so I'm gonna need to type in coin a
23:39 - and put in a value of I don't know two
23:41 - if this is good and if let's see what
23:44 - happened so it says erc20 transfer
23:47 - amount exceeds balance so we're gonna
23:49 - need to increase that and that's because
23:51 - like initially we just started with a
23:53 - couple of coins let's just make it like
23:55 - 10 000 or something so there's like
23:58 - actual balance there all right deploy it
24:00 - again let's try it again passing coin a
24:03 - okay it seems like it worked and now
24:06 - we're just going to go ahead and check
24:08 - the balance now it has two inputs
24:10 - remember you're gonna put in coin a and
24:13 - then uh the wallet that you want to
24:15 - check it on so put in new wallet address
24:17 - and we should get back a pretty
24:20 - interesting number in way but it's going
24:22 - to be a one and a lot of zeros so let's
24:24 - see and there you go works perfectly
24:27 - Works beautifully now we're gonna need
24:31 - to do the swap the other direction
24:32 - you're gonna need to do it from Custom
24:34 - coin to eth as well so let's go ahead
24:37 - and do that now all right let's say you
24:40 - converted too much Ethan you want to
24:42 - convert some back I got you
24:45 - start by creating a new function and
24:48 - that and that will call swap token to
24:50 - eth which will obviously just like last
24:53 - time take in one string that is the
24:56 - token name but this time it will also
24:58 - take in a u-n which will be underscore
25:00 - amount and then this will return once
25:03 - again A U Win now
25:05 - we're going to get started with some
25:07 - quick math and stuff like that so create
25:10 - a new variable if it's going to be exact
25:12 - amount which is going to just convert it
25:15 - to way because well convert it to the 18
25:17 - 18 digit version the currency that
25:20 - you're passing in so that's always
25:21 - useful when you work with solidity and
25:24 - then you want to go ahead create a new
25:26 - variable which is going to be the ether
25:28 - Mount now it's going to be exact amount
25:31 - times The Ether value which is just the
25:34 - conversion value and then
25:36 - and we can get into business now we're
25:39 - going to need to make sure that the
25:41 - current address so meaning the current
25:43 - the contracts built in wallet has enough
25:45 - ease to bet enough ease to transfer over
25:48 - so you want to make sure that balance is
25:50 - greater than or equal to the amount that
25:52 - is that is required and if not just
25:55 - throw an error message and then after
25:58 - that you're going to go ahead and get
25:59 - started actually transferring that money
26:01 - so you want to make it make the message
26:03 - sender address payable and then transfer
26:06 - the required amount now after that
26:10 - you want to make sure at this point that
26:12 - the transfer was successful and then you
26:14 - want to and then last but not least
26:16 - return the amount that was to be that
26:18 - was transferred over now let's go ahead
26:21 - and test this out because there's a
26:23 - couple of things that we haven't
26:24 - discussed just yet but you're gonna find
26:27 - it out real soon so let's go and um do
26:30 - the same step so we're just gonna go
26:32 - ahead convert some teeth and then let's
26:35 - get the address
26:37 - so yeah there we go the ethuke token was
26:41 - successful however let's go ahead and
26:42 - start convert some of that back so yeah
26:46 - let's go with 12 coin A's let's uh let's
26:49 - transact and there you go there's some
26:51 - sort of error now don't worry about it
26:53 - it just says insufficient allowance on
26:55 - the second line at the very end that's
26:57 - something we haven't discussed yet but
26:59 - that's something that we're going to
27:00 - address right now so what you need to do
27:02 - is get the address of the coin
27:05 - like that and then we're gonna go ahead
27:08 - and interact with the coin contract
27:10 - itself as you can see on the screen
27:12 - because as of right now we're only
27:14 - interacting with the decks itself but we
27:17 - need to interact right now with the coin
27:18 - because we're gonna we're gonna need to
27:20 - increase the allowance so so put it put
27:23 - in your wallet address right there
27:26 - okay right there
27:28 - that's going to be your wallet address
27:29 - and now you're going to include increase
27:31 - the amount so that's what we need to
27:33 - specify now and just to make like things
27:36 - easy we're going to approve the entire
27:38 - balance of all the coordinates and then
27:40 - now it should go through so let's go
27:42 - ahead and actually hit transact and
27:46 - as you can see both of them both of the
27:50 - transactions went through and there you
27:52 - go the balance just changed by 12. you
27:55 - can see at the very end it says 88 and a
27:57 - lot of Nines in front of it so that
27:59 - means that our function worked perfectly
28:03 - in this case and just got it done so
28:07 - with that said let's go ahead and now
28:09 - enable the swapping between token custom
28:12 - token and custom token all right so far
28:15 - we have covered two of the three main
28:17 - swapping methods one just for quick
28:20 - refresh one was eth to custom token two
28:24 - was custom token eth now we're gonna
28:26 - need to cover the custom token to custom
28:29 - token so let's say you wanna you have a
28:32 - lot of coin A's but you want some coin
28:33 - B's and you don't want to spend e you
28:36 - just want to convert coin a to coin B
28:38 - that's what's coming up
28:40 - all right so we're gonna go ahead and
28:42 - start up with our trusty function and
28:44 - then it's going to be swap token to
28:46 - token or you can name it whatever but uh
28:48 - we're gonna need two strings as input so
28:50 - there's gonna be Source token name and
28:52 - there's gonna be destination token name
28:53 - and you also want to put in an amount
28:56 - which is going to be a a number now this
28:58 - is going to be once again a public one
28:59 - and we're gonna need to make sure that
29:02 - the source to connect we're going to
29:04 - need to make sure that we take out the
29:07 - amount yeah we take out the amount that
29:10 - is trying to be transferred from The
29:13 - Source wallet and we just store it in
29:15 - the contract and then we're going to
29:17 - transfer over from the central wallet to
29:21 - the user uh themselves so that's
29:23 - something uh liquidity to pull would be
29:26 - in a real life situation but this is
29:29 - going to be like a dumb down easier
29:31 - version of that so and now we're gonna
29:33 - just transfer over a bunch of token b or
29:36 - like destination tokens to the sender so
29:39 - once again lines first line is just
29:42 - taking out the source token from the
29:44 - user's wallet and then second is going
29:47 - to take take the equivalent amount in a
29:50 - different token and then put it back
29:52 - into the user's wallet and that's
29:55 - basically our function so let's go ahead
29:57 - and deploy it and we're going to go
29:59 - ahead and transfer swap some eth2 to
30:03 - coin a and then now we're going to need
30:06 - to increase the balance okay there you
30:08 - go we got the balance now we're going to
30:10 - need to increase the allowance so that's
30:12 - something that we're gonna do and just
30:14 - for simplistic approve for the entire
30:17 - balance let's go ahead and test out our
30:20 - function so coin a to coin B and let's
30:24 - say we just want to try pass over a
30:25 - tenth so what we need to see now is that
30:28 - when we check on coin B's balance in our
30:31 - wallet we're gonna we should see a ten
30:34 - and there you go ladies and gentlemen
30:36 - that is a perfect solution if you see
30:39 - that that's perfect and if not just go
30:42 - back rewind where you can just double
30:44 - check that the function is perfectly
30:47 - written or if you've made mistakes
30:49 - that's that let's go ahead and keep on
30:52 - going now this is just going to be like
30:54 - a quick complimentary function we're
30:56 - just going to go ahead and double check
30:58 - that how much eth is available on the
31:02 - contract so it is going to be an easy
31:04 - actually you should go ahead try it out
31:06 - by yourself there's no input nothing
31:08 - one liner I think so it's like a super
31:11 - easy function Try It Out by yourself
31:13 - pause it now and then if you were able
31:16 - to figure it out good if not it's
31:18 - completely fine too let's keep on going
31:20 - with the solution
31:21 - so it's going to return a uint and what
31:24 - we're going to return is address this
31:26 - dot balance that's it and that should in
31:29 - theory return how much eth is currently
31:32 - stored on our how much it is currently
31:36 - soared on our contracts wallet let's go
31:39 - ahead deploy the new contract and let's
31:42 - see what we've got
31:43 - it'll say zero so that's perfect and if
31:46 - you were to send some in there and
31:47 - convert then it's going to be updated
31:50 - but with that said let's keep on going
31:52 - all right so now we're gonna start using
31:55 - truffle extension inside of our vs code
31:57 - and what you want to do is just copy the
31:59 - entire contract that we just wrote put
32:01 - it on your clipboard command see it and
32:04 - because we're going to be copying it
32:05 - over so in our vs code what we're going
32:08 - to do is go ahead and create a new
32:11 - contracts folder and open up the CLI
32:14 - right there and you want to install
32:15 - truffle
32:17 - so it's going to be a global install if
32:18 - you haven't done that already now is the
32:20 - time and then you want to type in
32:21 - Truffle in it and that will spin up a
32:24 - new truffle project now inside the
32:26 - Truffle project you want to go ahead and
32:28 - type in truffle create contract unit
32:30 - Swap and that will create you a new
32:33 - contract file and that is where you want
32:35 - to go ahead and paste your contract so
32:38 - as you can see definitely you have to
32:41 - make sure that the solidity version is
32:44 - perfect and then just raise the entire
32:46 - contract and there you go now you might
32:49 - be seeing this red underscore under the
32:52 - on the open zaplin package and that's
32:54 - because it hasn't we haven't installed
32:56 - it yet so let's go ahead and fix that so
32:58 - it's your net and then paste at opens up
33:01 - and slash contact and once it's done you
33:04 - want to right click on your on your
33:06 - solidity file and then just hit build
33:08 - contracts now if you do not have Shuffle
33:11 - extension at this point
33:13 - go back in the video I explained it
33:16 - earlier how to install it and how to set
33:17 - it up I'm gonna I'm gonna do it again
33:20 - that is where they set up it so if
33:22 - you're skipping around it's gonna be
33:23 - like somewhere in the beginning so
33:25 - that's where you want to look for it all
33:27 - right let's go ahead and continue so you
33:30 - want to click that and then it's going
33:31 - to build and in the output you can check
33:34 - how that goes you want to see something
33:36 - like successful
33:38 - compiled successfully and then next up
33:42 - you want to hit deploy like right click
33:44 - and deploy and then select girly now we
33:47 - set this up as well and this is uh so
33:50 - don't worry about it just go back and
33:52 - check it out if you haven't done that
33:53 - already now it's asking for gas price
33:55 - leave it empty just hit return on it
33:57 - don't even worry about it and then I'm
34:00 - gonna either paste your mnemonic or if
34:01 - you've already set it up you can just
34:03 - use that configuration and then if
34:05 - you're pasting it it's going to do this
34:08 - and then once you're done
34:10 - it will go ahead and try the blade
34:12 - Howard it's not going to go through it's
34:14 - like you don't see any kind of address
34:16 - on my screen right now and that's
34:18 - because we missed out we completely
34:20 - forgot the migration as file that's
34:22 - something that like we hear a clever
34:24 - programmer every single time that is our
34:26 - signature that we try to deploy and then
34:28 - oh the migrations file so in the
34:31 - migrations folder you want to go ahead
34:32 - and create a new file which will be one
34:36 - underscore deploy and then we'll have to
34:39 - import the unit swap contract so it's
34:41 - going to be artifacts that require any
34:43 - unisplot and then just explore export
34:45 - the deployer and so then you're going to
34:48 - be good to go now try again hit deploy
34:51 - and this time it's gonna go through so
34:54 - let's speed through that real quick and
34:57 - as you can see there is my contract
34:58 - address so you want to go ahead copy
35:01 - that and then go into your unit swap app
35:03 - go into euros and then contracts.js
35:06 - close that output out and then just
35:09 - create a new variable Bowl which will be
35:11 - addressed and just save it there because
35:13 - that's going to be something that that's
35:15 - going to be the thing that we're going
35:17 - to be using now if you want to double
35:19 - check on ether scan
35:20 - currently.etherscan.io paste your
35:22 - address in you're going to see
35:24 - everything that just went through so if
35:26 - you're up to this point congratulations
35:29 - now we're going to go ahead and set up
35:31 - rainbow kit all right so you want to go
35:33 - into your app.js file and we're going to
35:35 - import a bunch of things so just hold on
35:38 - it's going to be Rainbow Dash me slash
35:40 - rainbow kid slash
35:42 - styles.css it's going to be giving us
35:44 - all the Styles and then you're going to
35:47 - copy you're going to import merge from
35:49 - low dash dot merge and then we're gonna
35:51 - this is gonna this is where it's gonna
35:54 - get started this is where it's gonna
35:56 - start to be mental so
35:58 - we're gonna need get default wallets
36:00 - we're gonna need rainbow kit provider
36:02 - we're going to need Dark theme and we're
36:04 - going to need midnight theme actually
36:06 - you can just choose between the two we
36:08 - sometimes just look at it I don't know I
36:10 - prefer Dark theme if you're interested
36:12 - but try out midnight that's like
36:14 - completely black and then the dark is
36:16 - like dark gray so the more you know all
36:20 - these are coming from rainbow kit now
36:22 - really a bunch of things from wag me I
36:25 - believe is what's coming up so let's
36:27 - chain configure chain create client and
36:29 - whack me config all this is coming from
36:32 - wag me and then we're going to import
36:34 - infuro Provider from wagme slash
36:37 - provider slash infuria and that is
36:40 - basically it now
36:42 - up until this point you need to import
36:45 - everything we're going to be using all
36:46 - of it so just pause here for a quick sec
36:49 - but we'll check you have everything and
36:51 - let's keep on going then now we're going
36:54 - to destructure chains and Provider from
36:57 - configure chains and we're going to have
37:00 - two arrays in here so
37:03 - in the first array we're just going to
37:04 - put in chain dot girly that means that
37:07 - this app is only going to be running on
37:09 - the girly chain nothing else is going to
37:11 - work here and then for that we're going
37:13 - to be using the infuria provider where
37:16 - we need to put in an API key now we have
37:20 - it somewhere if you haven't done that
37:21 - already just place it in an EMV file and
37:25 - then you can you don't need you're not
37:26 - you don't actually have to expose it to
37:29 - the browser that's a good thing about it
37:31 - you can just go with inferior API key
37:33 - you don't have to do next next public
37:35 - but as you can see that is how you get
37:38 - your API key so if you haven't done it
37:40 - already now is the time to do and so
37:42 - there you go
37:44 - all right next up we're going to be
37:46 - setting up the connectors for our OLED
37:50 - connection and that's that's going to be
37:52 - using get default wallets from wagme now
37:56 - we need to pass in app name that is
37:58 - going to be uni swap you can pass in
37:59 - whatever and then you're going to need
38:01 - to pass in Chains and then next up we're
38:04 - gonna have a wagme client that will use
38:07 - create client and we're gonna need to
38:09 - pass in a couple things here so we're
38:11 - gonna need to pass in autoconnect you
38:13 - can either set it to true or false I
38:15 - prefer to be truth true but for this
38:17 - build we just use false for whatever
38:19 - reason and then you want to pass in
38:21 - connectors and the provider and with
38:24 - that all the setup is ready
38:26 - and then one last thing to set up is
38:28 - going to be we're going to make sure
38:30 - we're going to create a my theme which
38:32 - will merge midnight theme and we're
38:36 - going to override a couple of colors
38:39 - so we're going to say we're going to
38:40 - have an accent color of that and this is
38:42 - like completely optional this is just
38:44 - elements so there you have it extended
38:47 - call Extended color foreground
38:50 - accent color and now we're going to wrap
38:53 - our app in between wagmeconfig and where
38:56 - we're going to need to pass in Wagner
38:58 - client is it's like context these are
39:00 - like contexts for our app to be able to
39:02 - access this and then we're going to
39:04 - import the or we're going to wrap the
39:07 - rainbow kit provider with the chains and
39:10 - the theme and then just and then just
39:12 - pass in and then just pass in the app
39:14 - and that is basically it now we're going
39:17 - to go ahead and actually render the
39:19 - connect button to our screen all right
39:22 - let's actually go ahead and render out
39:24 - that connect button and so this is going
39:26 - to be a quick one what you want to do is
39:28 - go into your header file inside your
39:31 - components folder and then go ahead and
39:33 - import connect button from rainbow kit
39:36 - just like that and then we already as
39:39 - you can see we have it commented out
39:41 - that's the place where you want to put
39:43 - it in as a component so that's literally
39:46 - all we do once that's there it's going
39:49 - to show up on the top right corner and
39:51 - now let's actually check it out so there
39:53 - you go literally pre-set up buy rainbow
39:56 - kit so you can already use it and once
39:58 - you hit I'm going to mask it's going to
40:00 - work perfectly so that's it
40:04 - all right let's go ahead and set up all
40:06 - the contract Builders so we're going to
40:09 - be importing a couple of things here so
40:11 - first of all we're gonna need ethers
40:13 - then we're going to need unit spot ABI
40:16 - from utils slash uniswap API yeah
40:20 - uniswap.json and then we're going to do
40:22 - the exact same for the custom token
40:24 - these are coming with the build all
40:27 - right
40:27 - now next up we're gonna we're gonna need
40:30 - two functions that will immediately
40:33 - straight away going to export so let's
40:35 - not waste any time on that at first
40:38 - we're gonna have a token contract that
40:40 - we're gonna export and that'll take in
40:43 - an address and then we're going to you
40:45 - we're going to generate a provider using
40:48 - ethers the providers.web 3 provider and
40:51 - that and using the window ethereum and
40:54 - what is window ethereum that's basically
40:56 - the code that is being injected by
40:59 - metamask now next up we're going to use
41:02 - that that we're just going to go ahead
41:03 - and destructure ethereum from that from
41:05 - window and if it actually exists meaning
41:08 - the user has installed metamask we're
41:11 - going to use that to generate first a
41:13 - science so we're gonna we're gonna say
41:15 - provider.getcenter
41:17 - and all these are going to be like this
41:20 - is gonna be this is a lot of like setup
41:22 - and prep and whatever but this is
41:24 - ultimately going to be like completely
41:27 - needed in order to be able to interact
41:29 - with the contract all right so we're
41:31 - gonna join the contract reader and it's
41:34 - going to use it's going to be new
41:36 - ethers.contract and passing dress
41:38 - contract ABI and the signer itself and
41:42 - then just return that bad boy and that's
41:44 - pretty much the first one now we're
41:46 - going to repeat this exact same process
41:48 - for for the unit swap contract itself so
41:52 - the decks so the first two lines are
41:54 - copy paste immediately if statement copy
41:57 - paste
41:58 - and the only two things that are going
42:01 - to change are going to be the the
42:03 - address because that's there's only one
42:06 - address in this scenario and that's
42:08 - going to be the Dax address and then
42:10 - which ABI are we actually are we passing
42:13 - it so in this case it's going to be the
42:14 - uni swap baby Island API and then we're
42:17 - just passing the same same signer that
42:19 - we created up above and then return the
42:22 - contract reader so that's pretty much it
42:25 - now we're going to set up a couple more
42:26 - helper functions and then actually put
42:29 - things into motion alright so these are
42:32 - going to be two functions that we're
42:34 - going to be setting up just so we can
42:36 - convert between eth or ether and way so
42:40 - we're going to import ethers from ethers
42:43 - and then we're gonna use that to set up
42:45 - two functions so there's we're going to
42:46 - have one function that will be two way
42:50 - and that will take in an amount and then
42:52 - that will take into decimals but default
42:55 - value is going to be 18 and then con
42:58 - we're just going to say cause two-way
43:02 - ether.utos.parse units and that's just
43:05 - something that like comes from ethers
43:07 - and I'm passing the amount and I'm
43:09 - passing decimals and then we're just
43:11 - going to return that now
43:14 - as a and then we're just going to return
43:15 - that as a string that is the first one
43:18 - and then the second one I'll let you try
43:20 - figure it out by yourself but it's going
43:22 - to be on the same analogy the only
43:24 - difference we're going to be passing in
43:26 - way here and then we're gonna need eth
43:28 - so I'm gonna go ahead and continue now
43:30 - so we're gonna say it's gonna be two eth
43:33 - and once again we're gonna pass in an
43:35 - amount decimals it's gonna be 18 usual
43:39 - utils.forement units and then we're
43:42 - gonna say we're gonna go to eat same
43:44 - we're gonna type the exact same thing
43:46 - all right that being said we are
43:49 - actually going to go ahead and start
43:51 - implementing the each coin functionality
43:54 - all right so let's actually let's like
43:58 - finally actually swap from E3 or custom
44:01 - tokens that we have worked so hard for
44:03 - all right so you want to go into your
44:05 - queries.js file and then import a couple
44:08 - of things so big number in ethers from
44:10 - ethers first of all and then you want to
44:12 - import contract and token contract from
44:14 - the from the contract file that we set
44:16 - up earlier so that's the like contract
44:18 - interaction interfaces functions I don't
44:21 - remember it though completely but that's
44:23 - what's basically going to allow you to
44:26 - actually interface with your contract
44:28 - and then next up
44:30 - we're going to import to eat and two-way
44:32 - so the other two helper functions that
44:35 - we just created and so here we're going
44:39 - to have the swap to eat function which
44:41 - will require a token name and amount and
44:43 - as I always say use try catch functions
44:46 - error console let the error out and then
44:48 - we're going to convert the amount to way
44:51 - because once again it's already only
44:53 - works with weight we're going to use the
44:56 - contract function that we set up earlier
44:58 - to generate a contract object for Unison
45:01 - for us and then we're going to use that
45:04 - to actually handle the transaction
45:06 - itself so we're going to say
45:09 - contractobject.swapes to token and pass
45:11 - in token name and TX which is the way
45:14 - amount of the eth amount the user passed
45:18 - in and then we're going to go ahead and
45:20 - generate a receipt by waiting for that
45:23 - data and then return it once it's done
45:26 - so that's basically it for that file now
45:29 - you want to go ahead and go over the
45:30 - swap component and scroll down to
45:32 - wherever you see functions for contract
45:34 - functionality here and then you want to
45:37 - put in create a new function that'll
45:40 - heavily rely on our setup for of the
45:43 - front end so we're going to create a
45:45 - perform swap function that's going to be
45:47 - an async function and we're gonna before
45:50 - we do anything set transactional pending
45:52 - true all right and then we're going to
45:55 - go ahead and generate a receipt we're
45:58 - going to go ahead and start create a new
45:59 - create a new variable that we're going
46:01 - to call receipt and then using
46:04 - everything that we set up earlier just
46:05 - type in the if Source token equals eth
46:08 - and destination token token doesn't
46:11 - equal either and you would just want to
46:13 - invoke and you want to wait for the swap
46:16 - if the token function and then put in
46:18 - destination token and input value and
46:21 - like I said this whole thing is heavily
46:25 - relying on the front and we already set
46:27 - up for your convenience
46:29 - now you definitely want to make sure
46:32 - that a function is actually getting
46:33 - called so we're gonna create a new
46:36 - function that we'll call handle swap
46:39 - it's actually on my screen in on line
46:41 - 73. there was a little bit of scrolling
46:43 - so I just wanted to help you out with
46:45 - that now
46:47 - here it's a little repetitive but we're
46:50 - just gonna double check that everything
46:52 - is good to go there and then call the
46:54 - function once the once everything is
46:57 - ready now my screen on line
47:00 - 140 where you're gonna pass in that
47:03 - function
47:04 - and what that basically does is that
47:08 - will fire up this function and whenever
47:10 - you hit the swap button which you
47:12 - currently cannot see because the wallet
47:14 - is not connected to the app but I'm
47:16 - going to show you just now let's go to
47:18 - this app put in a value there and then
47:21 - we're gonna need to select uh tokens
47:24 - that's going to be coin a and you're
47:26 - going to connect your wallet so that's
47:28 - something you gotta do and then it
47:30 - didn't turn blue so there is some sort
47:32 - of error going on here let's let's
47:34 - actually go ahead and figure that out
47:36 - now as you can see on line 16 we have
47:39 - imported use account from wagme and that
47:42 - basically I'm just going to help us
47:44 - that's just going to help us to check
47:46 - whether well that has been ink is
47:47 - connected or not so just update it on
47:50 - line 61 and you're just gonna
47:53 - restructure address from use account and
47:57 - that itself is going to take care of
47:59 - this whole things the wallet is
48:00 - connected and then there you go now
48:03 - there's your swap button and then
48:05 - confirm that transaction speed it up a
48:08 - little bit because that never hurt
48:10 - and there you go
48:13 - you can try it with another amount and
48:15 - it's going to work perfectly again so
48:19 - there it is that is your function now
48:22 - we're going to go ahead and fetch
48:24 - balances of each token render them out
48:27 - on the screen
48:28 - all right ladies and Gentlemen let's go
48:30 - ahead and fetch those balances that's
48:34 - going to be a little bit of a longer
48:35 - thing but yeah that's so that's where
48:37 - it's going to go now
48:39 - you want to go into your header file
48:40 - because everything is going to happen in
48:42 - our header and we're going to import a
48:44 - few things so start with use account
48:46 - from wagme and then we're going to
48:48 - import token balance from token balance
48:51 - and then we're gonna create a new use
48:54 - state which is going to be token balance
48:56 - and it's going to start out as a
48:58 - completely complete nothingness now
49:01 - you want to extract address from the
49:04 - structure address from use account
49:07 - and then we're just going to go ahead
49:09 - and kick things off with a use effect
49:11 - which we're gonna fire off every single
49:13 - time once the address changes that is
49:16 - important because if you connect a
49:18 - different wallet to the app you want to
49:21 - see the updated balances inside that
49:24 - wallet and not the previous one so this
49:26 - is super important now we're going to go
49:30 - ahead and uh our we're going to update
49:33 - the use date with a bunch of jsx code in
49:37 - there so we're going to use the token
49:39 - balance component and pass in coin a and
49:42 - then the wallet address
49:44 - so we're going to repeat this a couple
49:46 - of times
49:47 - so like we because we have three custom
49:50 - coins we're gonna either do this three
49:52 - times and by the way those
49:55 - um coin names are going to be strings so
49:57 - you want to make sure you have Queen ABC
50:00 - and then three times the wallet address
50:02 - as as in the address
50:05 - next up
50:07 - you want to have a an if statement and
50:09 - make sure that it and if the wallet any
50:12 - of the user haven't connected their
50:13 - bullets then you want to put you want to
50:16 - punch out a little bit of a notification
50:18 - for them so we're gonna go ahead and set
50:20 - that up right now so that's going to be
50:23 - a toast wallet and it's just going to be
50:26 - like a toast air and we're gonna be like
50:28 - yo connect your wallet or something like
50:30 - that it's going to be there for two
50:32 - seconds and that's basically how it's
50:35 - gonna look like you can see it on the
50:36 - right
50:37 - okay so we just connected our wallet and
50:40 - now you're gonna go ahead and we
50:42 - actually have to render those components
50:44 - out so render out just put the token
50:47 - balance component and render it out
50:50 - right there but throw some sort of error
50:53 - okay so let's actually go into that
50:56 - token balance component let's see what's
50:58 - going on in there
51:00 - so we're going to need to create a
51:01 - couple things we're going to need to
51:03 - have a balance use State and we're gonna
51:05 - need to have a copy icon used it so
51:09 - there's a few things that we need to
51:11 - specify here and that will just be a
51:14 - icon that we already imported for you so
51:16 - that's going to be clipboard icon
51:18 - and then we're gonna we're gonna have
51:21 - separate we're gonna have multiple
51:22 - States we're going to have a transaction
51:24 - pending and we're gonna have a not not
51:27 - pending and we're just gonna kick them
51:28 - off based on whatever uh whatever is
51:31 - suitable for the situation
51:33 - and then you also want to have a token
51:36 - address
51:37 - over there and by the way the balance is
51:39 - going to start out as an as like a dash
51:41 - string basically
51:43 - all right now we're gonna have two
51:46 - notifiers set up so that one is going to
51:48 - be an error and this is going to be like
51:51 - a toaster just like the one before but
51:54 - this time it's gonna go for six seconds
51:57 - and that's by the way in milliseconds so
51:59 - that's why it's six thousand and then
52:01 - we're gonna have a success message or
52:03 - like a success host where we're going to
52:06 - say transaction complete
52:10 - and
52:11 - I mean you can go ahead and set up a
52:14 - duration for that too honestly so go
52:17 - ahead create a new function which is
52:19 - going to be fetch token balance and
52:21 - that's going to be and then we're just
52:23 - gonna kick things off with invoking the
52:25 - get token balance function which we
52:27 - imported earlier which we're gonna set
52:30 - up in a little bit and you're going to
52:32 - need to pass in a name and wallet
52:34 - address for that and then we're going to
52:36 - also need to format the balance
52:38 - and then set that balance or set the
52:41 - formatted balance to the state itself
52:44 - out so there's going to be that's how
52:47 - it's going to look like in in a little
52:49 - bit that's the that's the component that
52:51 - we're going to make a and we're gonna
52:53 - have
52:54 - that we're gonna have to make we're
52:56 - gonna have to fill up with the good data
52:59 - all right so going to record is the JS
53:01 - file and we're gonna go ahead and set up
53:03 - get tokenbalance function and so we're
53:06 - gonna need to call the contract there so
53:09 - we're gonna need to set up the contact
53:10 - object and just like before use the get
53:13 - balance function from a method from the
53:16 - contract balance and then create a new
53:19 - variable and then return it and that
53:21 - should basically get it every single
53:23 - time and then you're gonna need another
53:25 - one which which is going to be get token
53:28 - address and once again just go ahead try
53:31 - it out by yourself like every single
53:33 - time we create a new function I want you
53:35 - to go ahead from now on because it's
53:36 - going to be a lot of repetition so try
53:39 - it out by yourself and see if it works
53:42 - and then just come back for the solution
53:44 - so try catch console log the error out
53:47 - and then we're gonna create the usual
53:49 - contract object and then the usual way
53:52 - just call on the get token address font
53:55 - method now everything that we just
53:58 - created we're going to go ahead and now
53:59 - import from from that file so get token
54:03 - address and get token balance
54:05 - and then we're also going to set up a
54:08 - new function which is going to be
54:09 - fetching which is going to use the get
54:12 - token address
54:13 - function that we just set up so it's
54:16 - going to be fetch token.s it's going to
54:17 - be an async function use that and then
54:20 - whatever that thing returns we're going
54:22 - to set it to the state and then we're
54:25 - going to go ahead set up a use effect
54:26 - that will run again and again whenever
54:29 - name and the wallet address changes
54:32 - and if both of them exist then we're
54:35 - gonna fetch the token balances and then
54:37 - we're also going to fetch the token
54:39 - addresses and if that even if they and
54:42 - if not either of them don't exist we're
54:44 - just gonna set everything back to their
54:46 - normal regular or like the initial value
54:49 - and then it says ethers doesn't exist so
54:52 - let's go ahead fix that import ethers
54:54 - from ethers and that should be good
54:57 - pretty much now
54:58 - if you scroll down on my screen it's
55:01 - line 40 but in your screen but on your
55:03 - page it might be something different so
55:05 - just check out where it's at
55:07 - we have a hardcodone balance there but
55:09 - we should go ahead and now fix that so
55:12 - let's see what happens there and there
55:15 - you go ladies and gentlemen as you can
55:16 - see our previous two swaps were
55:19 - successful because you can see the 30
55:21 - coin a and the 20 coin B transactions
55:25 - that would fit there so that's basically
55:27 - it now we're gonna go ahead and display
55:30 - a success toast whenever the transaction
55:34 - succeeds
55:36 - all right let's just go ahead and set it
55:38 - up so go back to your swap component and
55:41 - as you can see we already set everything
55:43 - up for Success so now we're just gonna
55:45 - invoke everything
55:47 - so go down to your go to your perform
55:50 - swap function we should have set the set
55:53 - transaction pending state to false once
55:56 - it's done and then if the transaction
55:59 - results in your receipt and that result
56:01 - and that receipt doesn't have a
56:04 - transaction hash property then you want
56:07 - to go ahead and notify errors I've hired
56:11 - that off and then pass in receipt
56:13 - so everybody knows what's happening else
56:16 - just notify success and that should
56:18 - basically be pretty successful so let's
56:21 - go ahead and test it out so let's do
56:24 - some transactions over there
56:26 - hit confirm and let's see what do we got
56:29 - let's see if it works let's speed that
56:31 - bad boy up and any moment now and there
56:35 - you go there is your host message and
56:39 - also as you can see on the right hand
56:41 - side once I connect my wallet coin c oh
56:45 - coinb now has 60 so
56:48 - the transaction definitely went through
56:51 - and now we have proven that it did go
56:54 - through
56:56 - all right let's go ahead and now set up
56:58 - the swapping from token or like from
57:01 - Custom erc20 token to eth so what we're
57:05 - going to be doing here is uh first of
57:07 - all close out everything we're not we
57:09 - don't need a bunch of things go into
57:10 - your queries the JS file and we're gonna
57:12 - set up two functions but let's start
57:14 - with the first one now
57:16 - so that's going to be
57:18 - swap token to eat now it's going to be
57:21 - an async function that takes in token
57:23 - name and amount and we're just going to
57:25 - do the usual try catch console log area
57:27 - create your contract object and then
57:30 - what we're going to do is use that
57:33 - contract object to swap token two if
57:36 - basically call that function of the
57:38 - contract so we're going to pass in the
57:40 - usual stuff to the way converted amount
57:43 - of the amount you want to convert and
57:46 - then the token name now
57:49 - it's going to be the same thing whenever
57:51 - the receipt shows up wait for it and
57:53 - then return the receipt now as you
57:55 - remember we're going to need to
57:57 - pre-approve the amount to be transferred
58:00 - so let's do that now it's going to be
58:01 - the second function so that's going to
58:02 - be increase allowance and so once again
58:06 - we're gonna have oh we're gonna pass in
58:09 - the token name and the amount and then
58:12 - we're gonna do the usual try catch
58:13 - console log the error and there's going
58:16 - to be a little bit of a trick here now
58:18 - so I want you to listen closely so we're
58:20 - going to Fat what we're going to do is
58:23 - we're going to determine the address of
58:26 - the uh specific coin that we're going to
58:29 - need and then we're going to use that
58:31 - address to generate a new contract
58:34 - object and we're going to use that to
58:36 - increase the allowance all right so
58:38 - there's going to be two contract objects
58:39 - here and both we're going to be
58:41 - interacting with two contracts in the
58:44 - same function so that's how let's
58:46 - continue so we're going to use the uni
58:48 - swap contract to get the address of the
58:52 - custom tokens we're going to pass in
58:53 - token name and then we're gonna go ahead
58:56 - and generate a token contract object
59:00 - using that address that we just
59:02 - generated so that we can increase the
59:04 - allowance and so we're going to do that
59:06 - right now so using that we're going to
59:09 - go ahead and say called approve
59:11 - and so what's happening now is the
59:14 - approved function Works in a way where
59:16 - you pass in who can who can interact
59:20 - with this or who can interact with this
59:22 - coin and how much are you allowing them
59:26 - to interact with this coin so we're
59:28 - going to need to pass in two things one
59:30 - of them is going to be the unit swap
59:32 - address and the other one is going to be
59:36 - the way amount of the amount or like the
59:40 - weight converted amount of the amount
59:42 - you want to convert
59:44 - and with that being said we're pretty
59:48 - much good to go here all right now let's
59:51 - actually connect this with our front end
59:53 - so we're gonna go into
59:56 - our swap component and then in the
59:59 - perform swap function there is that if
60:02 - statement so you're gonna add a else
60:04 - Clause after it so we're going to say
60:07 - else if if the source token is not if
60:10 - but the destination token is
60:13 - this is what we want to do so now we're
60:15 - going to generate the receipt based on
60:18 - that and we're going to call these swap
60:20 - token to eth function and now we're
60:23 - going to create the increase allowance
60:25 - function so let's go ahead and do that
60:27 - so transaction pending has to be true
60:30 - and then we're gonna use the function
60:33 - that we just built and then invoked it
60:35 - and invoking and then pass in Source
60:37 - token and input value and after that
60:40 - once it's good to go might as well turn
60:42 - off the loading screen and so inside of
60:46 - handle swap I'm going to turn on the
60:48 - loading screen again and then you want
60:51 - to check whether the wallet has some
60:54 - sort of allowance on the source token
60:56 - for the amount that you are trying to
60:59 - convert back to each oh there's a
61:01 - there's in there I'm gonna make it async
61:03 - okay that's fine and after that we're
61:06 - good with loading so let's actually move
61:09 - that and then if the result is valid and
61:13 - actually called the perform swap perform
61:15 - swap function and if if not if if the
61:19 - user doesn't have allowance now we get a
61:21 - call the handle increase handle
61:23 - insufficient allowance function and to
61:26 - do that what we're going to do like we
61:28 - we already set that up ahead of time now
61:31 - we're going to just switch out the swap
61:34 - button to a different button and so
61:36 - let's go ahead and do that that's on my
61:37 - screen that's line 162 and then there is
61:41 - a swap button text whether if it's your
61:43 - increase allowance or not and if it is
61:46 - then we're going to call the handle
61:48 - increase allowance function now let's go
61:50 - ahead and try it out let's see how this
61:52 - actually works so we're going to turn
61:54 - some we're going to use 20 coin A's and
61:57 - then swap back into eth and let's see
61:59 - what happens there's some interesting
62:01 - things going on around in the background
62:03 - so that's something so we apparently
62:05 - don't really have the has wallet
62:07 - allowance function but that's completely
62:10 - fine because we're gonna go ahead and
62:11 - build it now let's see what can we do
62:13 - here so we're going to pass an owner
62:15 - we're going to need the token name and
62:17 - the amount and we're going to use the
62:19 - usual try catch console log the error
62:22 - that's fine and then we're going to use
62:24 - the uniswap contract to generate our
62:27 - contract object
62:28 - and then we're going to have an address
62:31 - obviously once again we've got to fetch
62:33 - the token address to get everything and
62:36 - then using the using the token contracts
62:40 - we're going to double check the
62:42 - allowance so we're gonna we're literally
62:44 - just gonna fetch it so we're gonna pass
62:46 - an owner and we're gonna pass that as in
62:49 - the uni swap address and then we're
62:52 - going to convert it into a like a
62:55 - regular human number so we're gonna say
62:57 - that's a bunch of things going on there
63:00 - so basically what's happening is we're
63:02 - gonna get the way amount and then
63:05 - generate a big number from it and then
63:08 - we're going to use that to generate a
63:11 - string that we'll be able to work with
63:13 - later on so just go ahead copy that and
63:16 - then let's feel free to spend some time
63:18 - understanding what is happening there
63:19 - and then now we're gonna go ahead and
63:22 - return the result and also export the
63:25 - function because we need to use it in
63:28 - our swap component so let's go ahead and
63:31 - try it out again so if we click swap it
63:35 - says Ops insufficient allowance we're
63:37 - going to need to increase it so we're
63:40 - going to go ahead click that okay
63:41 - there's some interesting things
63:42 - happening here again so it says API that
63:45 - map is not a function we might have made
63:47 - a mistake earlier on yeah there it is so
63:50 - you want to double check that every
63:53 - single time when you are generating a
63:55 - contract contract reader you say you
63:58 - import the Json and then dot ABI and
64:02 - that's what you're trying to interface
64:04 - with because there's a bunch of stuff
64:05 - that you don't need so let's go ahead
64:08 - test this out again so refresh real
64:10 - quick connect your wallet and
64:13 - to say 30 okay insufficient allowance
64:15 - we've seen that and there you go give
64:18 - access
64:19 - let's wait for it to go through speed it
64:22 - up if we need to and then fresh real
64:25 - quick connect Google it again and then
64:28 - now it says Swap and if you click it
64:31 - you're gonna approve the transaction
64:33 - itself not the allowance so we should be
64:37 - pretty much good to go soon
64:39 - so let's see how that goes perfect it
64:41 - says transaction completed so
64:43 - technically we should be good let's just
64:46 - refresh real quick so connect that
64:48 - and now you see that the values have
64:52 - been updated so that's basically it now
64:55 - we're just going to implement tokens
64:57 - token and we're good to go all right so
64:59 - to make this work we're gonna need to go
65:01 - into our queries.js file and it's going
65:03 - to be super simple it's going to be
65:04 - super fast so just create a new function
65:07 - swap token to token as in Source token
65:10 - and destination token and amount and the
65:12 - usual try catch console log the error
65:14 - because that's usually helpful to see
65:17 - what went wrong and now you're going to
65:20 - generate the contract object as usual
65:22 - you can once again try it by yourself
65:25 - but if it doesn't if you're not that
65:28 - experienced that's fine too which is
65:29 - going to be basically the response of
65:31 - the swept function
65:33 - and then just pass in everything that we
65:35 - got obviously make sure you convert the
65:38 - amount to weight and next up
65:41 - you want to go ahead generate the
65:43 - receipt and return it now if you don't
65:46 - export the function it's not going to
65:47 - work elsewhere so go back to your swap
65:49 - component after you've done that
65:52 - and of uh perform swaps next statement
65:55 - you want to have an else clause which
65:57 - has no other conditions basically it
66:00 - just in the first two we made sure that
66:04 - everything is accounted for so now this
66:06 - is the only option to do or the only
66:08 - option to have and now what you want to
66:11 - do is generate the local receipt for
66:13 - that or update the receipt update the
66:16 - receipt variable for that and then call
66:18 - the swap token the token function from
66:21 - the file that we just from the queries
66:23 - file pass in everything that function is
66:26 - go ahead and
66:28 - see what do we need so everything should
66:30 - be ready to go pretty much so let's see
66:34 - what we got let's turn 30 coin A's and
66:37 - just swap them over to coin B let's see
66:40 - if that works so let's hit Swap and okay
66:43 - we gotta increase the allowance that's
66:45 - perfect that's fine okay hit confirm
66:47 - let's see if it works and we can just
66:51 - speed it up see if it's to go and after
66:55 - after that's done we can actually go at
66:58 - now that we have the allowance we can
67:00 - now actually go ahead and do the swap
67:03 - and once you confirm the transaction it
67:07 - should go through pretty fast
67:09 - transaction completed
67:11 - and there you go there you have it your
67:14 - coin a and coin B is updated so ladies
67:17 - and gentlemen that is it it is a fully
67:20 - functional unit swap Decks that is able
67:24 - to convert between random erc20 tokens
67:27 - use them you can literally actually
67:29 - factually use this and you can transfer
67:33 - your eth into custom coins and your
67:36 - custom coins back to eth and then custom
67:38 - coins between custom coins and then all
67:40 - that kind of stuff so you can have
67:43 - basically your own trading bot I'm not
67:46 - saying you should be doing that but with
67:48 - a little enhancement you can automate
67:51 - that stuff so there you go that's that's
67:54 - pretty much it and I hope you got some
67:56 - value out of this tutorial and with that
67:58 - said I'll see you in the next one

Cleaned transcript:

in this video you're going to be building uni swapcom on the ethereum blockchain using infuria and xjs you will be able to convert your ethereum coins into custom erc20 tokens that we'll be building throughout this video that's uh let's get straight into the video alright ladies and gentlemen welcome back to another build today we are building unit swap as you could see in the title so while you're down there looking at the title go ahead click the first link right below that because that's going to take you to this very page where you're going to go ahead and sign up for inferior after hitting the sign in button you put in your name email you don't put in your name you just put in your email and then you put in a password and then you go ahead click sign up and then verify your email whatever answer those few questions it doesn't really matter it's just for analytics but like you can just select engineer and solo freelancer whatever applies to you and once you're good there you go ahead hit submit and then straight away You're gonna go ahead get started with a project now for Network you want to go ahead and select web3 API the reason is there's a bunch of chains that one particular thing supports and then for name you can put in like whatever I put here a production but like you can just put in even swap whatever once it's done hit submit and go ahead and that that's it that's it that's basically it you're done you're in you're good you're set now they're all your projects which is probably only one and if you already have an account just go ahead sign in and basically you could have skipped in this entire part that's sad let's go ahead and set up metamask okay next up you want to go to metamask.io slash download now once you're there you can just go ahead and click that big blue button that's going to take you to Chrome web store and by the way it does build is only going to be working on Chrome or whatever browser that supports metamask but which is suggests chroma hit add to Chrome go through that yeah advics engine whatever and then once it's done it's going to pop open a brand new website for you which is just like their configure page and if you already have metamask like once again you can just skip ahead a couple of minutes but if you're new click agree and obviously read that we all know that's important and everybody reads that privacy policy is the most important thing you will ever read in your life not legal advice now if you happen to have a new computer you can just import your previous wallet over there but if you are brand new you can just click create new pass in a add a password that is go that you will have to remember again read the terms of use and then create a new wallet now I highly suggest you go ahead and watch that video because that's going to explain to you in thorough details and how you can keep your the 12 phrase mnemonic safe but in short keep it safe because if someone steals it they will have full access to your wallet now quick tip you want to use separate wallets for development and for your own funds and then never share any kind of detail where your money is at and then only share details of wallets that you don't mind they get compromised now here's your security recovery phrase this is the absolute key if it gets lost you're done like for real without exaggeration so keep it a secret with that said though you wouldn't have to go ahead copy this whole thing hit next and then you will have to verify that you have that you can just copy paste it in there and you're good to go now once you hit confirm minimize basically takes that as your confirmation that you are aware of anything everything that I just said and all the terms of use and everything that they prompted you so once you hit all done you're good to go there is your meta mask now one more thing you want to do is because you only have access right now to the ethereum mainnet which obviously is a ton of money and you don't want to use that click that show hide right there scroll down all the way where you can see show test networks turn that thing on and then turn on show conversions on test networks that will basically show the dollar amount of every single ethereum in your wallet which is just a nice touch and then basically they're good now if you scroll back up and then click the selector there are all your test networks now in this build we're going to be using girly so you might as well go ahead and check that off or you might as well go ahead and select that said let's go ahead and get started coding now if you're familiar with us and you know that we have our own CLI tool that makes your life easier and you want to go ahead and to use that you want to type in npx clever program and if you don't have it it will have to install itself I also recommend you add a at latest at the end so that you get the latest version of it and it will get it or it will update itself but regardless just put in your email address and then put in your name and then at the time when we shot this wasn't the latest version but right now we are supporting type search so if you start typing unit swap you it will basically just narrow down the list and you can just hit return select that one so that's going to be something that that's going to help you so anyways it's gonna run a couple of scripts and we'll install the dependencies and everything for you to get started and then open up your vs code in that specific project so you can just sit back relax get over coffee whatever and as you can see on my screen that's what's happening there now I already opened this guy up that is the project that we're going to be building on top of and for you to spin it up I'm just going to zoom in a little bit just so you can see it better what you can do to spin this up is CD into uni swap Dash app CD as in change directory right away and then in there you just type in yarndev npm run Dev or something but I just recommend you use yarn anyways once it's good to go you open the uh you open your localhost up and there is your project that is your starter project that we're going to be building on top of and there you go let's go ahead and start setting things up now to make things extremely easy for you we recommend you use truffle extension in your vs code so you want to go ahead search for truffle for vs code install that guy and basically they have an integration with infuro which we're going to be using today so that's a pretty good one and once you're there open that little truffle icon on the left hand side you can go ahead click that I click create new network and that will and then select inferior service and then you can go ahead click sign up and that will just take you to infuria and once you connected the two Services it will prompt you to select the project name now you can either type it in there or sometimes it like shows it up oh because we actually create you can just create a brand new project so just type in uniswap and that's going to be the new name of the project however if you want to connect it to us to an already existing project you can just hit connect to network instead and then that will show you the drop down which will enable you to select your existing project now once you typed in we recommend you use public just go just for easiness just to make things easier and then there you go there is your project all right for this next step we recommend you start using we recommend you use remix that ethereum ethereum.org which is by the way an online IDE just to create smart contracts and I'm going to slow down a little bit because this is where things are getting a little Advanced and these are things that might be new to you now if you watch a couple of my other tutorials I might be using the vs code extension for this tutorial we're going to be using this so if you want to see a familiar familiar thing on your screen as you see on my screen you might as well use remix IDE in the browser now to generate a new workspace you can either leave it on the default or you can just generate a new one but to generate a new one you can click that little plus icon and then just name it the way you want to template doesn't matter and in your contracts what you can do is right click new file and then just name it uniswap.sol now in this file is where we're going to write most of our contracts so starting off spdx license identifier MIT that you just need it don't question it you just need it if you write MIT there that basically it's an open source license anyone can use it and you don't you're not liable for anything that happens whatever you write in there the more you know now you have to specify the version of solidity you are using I see so many people trip up on this you don't want to mess that up type in 0.8.16 that was the latest one when we shot this tutorial well you will need to import though is something oh something from open Zeppelin now they have template contracts and you're going to be importing the erc20 contract okay and this is basically going to and let's think of it as like a npm package but for solidity we're gonna have two contracts in this file if I'm correct first contract is going to be we're just going to name it custom token and it is going to be child of erc20 so it's going to inherit everything and we're going to have a Constructor in there now that Constructor is going to require two inputs one of them is going to be a name and one of them is going to be a symbol now these are both are going to be strings and then this is going to be you're going to obviously pass that into erc20 because that has a Constructor now erc20 has a underscore mint function built in it it comes with the import so you don't have to import it separately minting requires a few more things minting requires someone a wallet where it's going where all the tokens are going to be minted to and then an amount now what is happening here is we want to Mint a thousand a thousand of those tokens however and this is something that I'm going to say a bunch of times during this tutorial now I've said it many times in solidity the only currency that is accepted and the and the only currency that solidity works with is something called way now that is basically all your first contracts so congratulations you just wrote your first contract that will mean a bunch of erc20 custom tokens into your wallet now you can go ahead close that artifacts thingy if you have Auto compile enabled that just that's just gonna go crazy and it will keep compiling your contract and make sure everything is good to go so as long as that check mark on the left hand side is present you're good and with that said let's start typing up another contract which we will call uni Swap and that will handle all the conversions and everything now that will require another Constructor and inside the Constructor we're just gonna strike start straight away with a for Loop now custom coin that we're going to create in this case coin a coin B coin c we're gonna start from zero and go all the way to go all the ways to tokens dot length now what is tokens yes good question we're gonna figure it out in just a second don't worry about it there it is it is going to be an array of tokens but or it is going to be an array of strings it's basically just the names of every single it's not super creative but it guess there's not job done it like doesn't go all the way down to all the fanciness you can use this you can just rename it you can even call it CocaCola if you want to doesn't really matter we just wanted to go with this because it's simpler easier to follow especially if you're a beginner all right so we're going from zero and the max is going to be the length of that array you can put in five ten thousand two thousand three thousand what however many random coins you want to and then just like usual just like in JavaScript you will increment that I variable which is going to be the index now here you're gonna go ahead and create a new instance of custom token you don't have to import anything you don't have to do anything we're just going to create a new instance of it meaning it will invoke The Constructor so you where you're going to see that in action in just a little bit so as you can see we are passing in two items to the Constructor which is tokens I and tokens I it's literally the same thing and if you look back up to line seven on my screen I don't know how like which line is on your screen but on my screen it is line seven it requires two inputs so that's what we are putting in here meaning that the coin name and the coin symbol in this case is going to be the exact same again if you're Advanced you can do some tricks with it but I recommend you just stay with this for now it will get the job done perfectly we want to definitely save this new token that we just created like right now in a mapping and we're going to that up in just a little bit this mapping later on is going to enable you to fetch all these coins way easier than otherwise would be so let's go ahead and set up that mapping so for that we need to use the keyword mapping and it's going to be mapping a it's going to map a string to an erc20 token all right it's going to be public meaning anyone can use it so there's your mapping that we're going to use and then we will set up an eighth value and that's just once again to keep things simple this is a beginner tutorial we're keeping things simple simple if you haven't heard of solidity before you're in a good place so we're going to set up a eth unit eth value which is going to be a uint what is a u n it's a number and again I'm gonna I'm referring about I'm going to refer back to the statement that I made just like a minute ago everything is stored in way so we're going to convert eth unit to weight and if you save this website by the way ethconverter.com that is eat eat that is ethconverter.com that will be helpful for you later on so if you put in any kind of ether value in which case in this case it's going to be 0.000 that is 0.001 yeah I'm not gonna say any of the other numbers just copy that that's going to be your way value that we'll be saving there so that's going to be your base way value save it there it will be useful later on don't worry about it for now just do as is and then it will all come together now if you select that last option on the left hand side now we're going to go ahead and compile and deploy this contract that we just built now I also have Auto compiler enabled so it's automatically compiled but you will have an option to do so if you need to and then there is that big orange deploy button click that and down there on their deployed contracts it should show up and those are the two functions that are available right now and those are coming built in with erc20 and everything and the mapping that we created now little explanation here when you deploy a contract the Constructor runs immediately because in the Constructor we have the for Loop that will immediately deploy all three coins so you don't even have to worry about that and so what you can do is here fetch all the coins that were deployed so if you put in coin a which is just an of the first coin it will return the address of that coin and so that's what you but that's what we just implemented so mappings works like that you gotta pass in and a string and it will return an erc20 address so that's what you see there and then for tokens that is your that is the that is on my screen on in line 13 that is the array so you can fetch each and every single element like that and if you get these results on the left hand side after you deployed your contract congratulations time to move on all right now you have your custom tokens perfect each of them are deployed and minted thousand of each but how do you verify that you need a function that Returns the balance of each coin so I want to go ahead and get started creating a new function inside your second contract and it will call it get balance now this will have two inputs one is the token name and the second is an address what's happening you want to get a balance all right so you need the wallet address which holds potentially that token and that's going to be the address and then you want to get you want to pass in the token name so let's say I have a wallet which has a random address and I have coin B so in that case I will pass in coin b as the first argument and I will pass in my wallet address as the second argument and all I expect to see back is just a number of how many ether or or of how many coin B do I have in my wallet so it's going to be a public function which will return a uint as I said and all it will do is just go through the go to the mapping and then pass in the token name so far all it would do is just return and address however once you got that address you want to call a balance of function and this is something that is coming from erc20 so this is part of the standard and there you're gonna pass in the address so it's going to be my wallet address that's going to go in there so what it will do under the hood it will retrieve one the token address so we'll know that coinb has this and that address and we're gonna check that at that address my wallet address a lot of addresses I know so that that coin address my wallet address how much the balance of that it scrub that so this will return that my wallet that has the second address is that will return the balance of the first coin inside of my wallet so let's go ahead and deploy this new contract and actually you can see all the instances you feel free to like keep removing it but you can keep it that's fine too again the Constructor has run immediately so we're not going to check that but you can pass in coin a right there to check how much coin a in your wallet and then you want to pass in your very own wallet address now you can get that from there from the account because it is not actually connected to your Minimus yet it is remix ID's own builtin environment so it gives you a bunch of like test tools so once you pass that in and hit call I'm gonna pause this for here for a second and you should pause guess how much of the of that coin do I have in my wallet invalid address perfect that's not what you guessed am I right okay that's just because I have all those quotes there so let's just remove it it's an address it's a different data format I know it's annoying I can get around it I make mistakes all the time remove the quotes call it again so there you go past that pass the address in and call it and if you thought and if you guessed zero you're good and with that said let's keep moving all right let's just create a function that will return the coin name every time you pass in the coin name precise so you want to have a function that will return a string and it takes in a string and it will return it the coin's name from the mapping so there you have it you want to type in token instance map token name dot name function and there you go if you go ahead and redeploy the contract and then go ahead test this out and then type in coin a it will return coin a all right so let's build the function that will return the custom coins address so we can fetch a bunch of things with that just by passing in the name so let's do that all right so we're going to get started by just starting a new function we'll call it just get token address or whatever and it will have one input which will be a string and it's going to be token name and then it will return obviously an address and then all we're going to do is just call the address function on the token instance map and then pass in token name so literally we're going to use the mapping that we already have pass in the name and the little return the entire thing and we're just going to we're just going to need the address of that specific contract okay so let's go ahead and deploy that and let's see if that works so if I just type in coin a and then hit that there's my address that's uh working perfectly let's go ahead and get started swapping stuff because this is where like the real deal is going to get started all right now we are going to get started swapping eth to custom coins and this is where the real meaty stuff is happening so you can come back to this if something is unclear all right so let's just go ahead and create a new function it's going to be oh create a new function it's going to be actually a pretty simple one so we're going to call it just swap East to token and it will have one input it's going to be a string that's going to be the token name so basically what's going to happen is you're going to send X amount of eth to the contract and the token name and that's it and then the rest is going to be handled by the contract this is going to be a payable function because we'll need to send money all over the place and it will return a number of how much was actually converted we're going to need to have a couple of variables here we're going to be saving the input value then we're going to be saving the output value which is going to be input value slash each value and if you look up to my line 15 on top of the screen that's where my each value is at and then we're going to need to make it an 18 digit way thing remember that's that's a solidity thing and then we're gonna need we're going to need the requirement here we're gonna need to make sure that the transfer it actually happens all right so we're going to need to transfer from the coin that the user is firing we're going to need to pass a couple hour much we need to basically the output value amount we need to transfer it to the user's account all right so that's how we're calculating the whole thing and so there is and then we just return the output value which will just tell the user hey this is how much you actually got for your money and so there's the value that helps us once again convert between if and the custom token and you're going to decide which token you want to get and then you're just going to pass it turn it into way transfer it over and if that's good you're getting ready to go all right so let's go ahead and actually test this out so I'm going to deploy it and let's see what do we got because of the Constructor I already have access to a bunch of Ethan on all these tokens so those are already there so let's go ahead and use that swap eth token function and so I'm gonna need to type in coin a and put in a value of I don't know two if this is good and if let's see what happened so it says erc20 transfer amount exceeds balance so we're gonna need to increase that and that's because like initially we just started with a couple of coins let's just make it like 10 000 or something so there's like actual balance there all right deploy it again let's try it again passing coin a okay it seems like it worked and now we're just going to go ahead and check the balance now it has two inputs remember you're gonna put in coin a and then uh the wallet that you want to check it on so put in new wallet address and we should get back a pretty interesting number in way but it's going to be a one and a lot of zeros so let's see and there you go works perfectly Works beautifully now we're gonna need to do the swap the other direction you're gonna need to do it from Custom coin to eth as well so let's go ahead and do that now all right let's say you converted too much Ethan you want to convert some back I got you start by creating a new function and that and that will call swap token to eth which will obviously just like last time take in one string that is the token name but this time it will also take in a un which will be underscore amount and then this will return once again A U Win now we're going to get started with some quick math and stuff like that so create a new variable if it's going to be exact amount which is going to just convert it to way because well convert it to the 18 18 digit version the currency that you're passing in so that's always useful when you work with solidity and then you want to go ahead create a new variable which is going to be the ether Mount now it's going to be exact amount times The Ether value which is just the conversion value and then and we can get into business now we're going to need to make sure that the current address so meaning the current the contracts built in wallet has enough ease to bet enough ease to transfer over so you want to make sure that balance is greater than or equal to the amount that is that is required and if not just throw an error message and then after that you're going to go ahead and get started actually transferring that money so you want to make it make the message sender address payable and then transfer the required amount now after that you want to make sure at this point that the transfer was successful and then you want to and then last but not least return the amount that was to be that was transferred over now let's go ahead and test this out because there's a couple of things that we haven't discussed just yet but you're gonna find it out real soon so let's go and um do the same step so we're just gonna go ahead convert some teeth and then let's get the address so yeah there we go the ethuke token was successful however let's go ahead and start convert some of that back so yeah let's go with 12 coin A's let's uh let's transact and there you go there's some sort of error now don't worry about it it just says insufficient allowance on the second line at the very end that's something we haven't discussed yet but that's something that we're going to address right now so what you need to do is get the address of the coin like that and then we're gonna go ahead and interact with the coin contract itself as you can see on the screen because as of right now we're only interacting with the decks itself but we need to interact right now with the coin because we're gonna we're gonna need to increase the allowance so so put it put in your wallet address right there okay right there that's going to be your wallet address and now you're going to include increase the amount so that's what we need to specify now and just to make like things easy we're going to approve the entire balance of all the coordinates and then now it should go through so let's go ahead and actually hit transact and as you can see both of them both of the transactions went through and there you go the balance just changed by 12. you can see at the very end it says 88 and a lot of Nines in front of it so that means that our function worked perfectly in this case and just got it done so with that said let's go ahead and now enable the swapping between token custom token and custom token all right so far we have covered two of the three main swapping methods one just for quick refresh one was eth to custom token two was custom token eth now we're gonna need to cover the custom token to custom token so let's say you wanna you have a lot of coin A's but you want some coin B's and you don't want to spend e you just want to convert coin a to coin B that's what's coming up all right so we're gonna go ahead and start up with our trusty function and then it's going to be swap token to token or you can name it whatever but uh we're gonna need two strings as input so there's gonna be Source token name and there's gonna be destination token name and you also want to put in an amount which is going to be a a number now this is going to be once again a public one and we're gonna need to make sure that the source to connect we're going to need to make sure that we take out the amount yeah we take out the amount that is trying to be transferred from The Source wallet and we just store it in the contract and then we're going to transfer over from the central wallet to the user uh themselves so that's something uh liquidity to pull would be in a real life situation but this is going to be like a dumb down easier version of that so and now we're gonna just transfer over a bunch of token b or like destination tokens to the sender so once again lines first line is just taking out the source token from the user's wallet and then second is going to take take the equivalent amount in a different token and then put it back into the user's wallet and that's basically our function so let's go ahead and deploy it and we're going to go ahead and transfer swap some eth2 to coin a and then now we're going to need to increase the balance okay there you go we got the balance now we're going to need to increase the allowance so that's something that we're gonna do and just for simplistic approve for the entire balance let's go ahead and test out our function so coin a to coin B and let's say we just want to try pass over a tenth so what we need to see now is that when we check on coin B's balance in our wallet we're gonna we should see a ten and there you go ladies and gentlemen that is a perfect solution if you see that that's perfect and if not just go back rewind where you can just double check that the function is perfectly written or if you've made mistakes that's that let's go ahead and keep on going now this is just going to be like a quick complimentary function we're just going to go ahead and double check that how much eth is available on the contract so it is going to be an easy actually you should go ahead try it out by yourself there's no input nothing one liner I think so it's like a super easy function Try It Out by yourself pause it now and then if you were able to figure it out good if not it's completely fine too let's keep on going with the solution so it's going to return a uint and what we're going to return is address this dot balance that's it and that should in theory return how much eth is currently stored on our how much it is currently soared on our contracts wallet let's go ahead deploy the new contract and let's see what we've got it'll say zero so that's perfect and if you were to send some in there and convert then it's going to be updated but with that said let's keep on going all right so now we're gonna start using truffle extension inside of our vs code and what you want to do is just copy the entire contract that we just wrote put it on your clipboard command see it and because we're going to be copying it over so in our vs code what we're going to do is go ahead and create a new contracts folder and open up the CLI right there and you want to install truffle so it's going to be a global install if you haven't done that already now is the time and then you want to type in Truffle in it and that will spin up a new truffle project now inside the Truffle project you want to go ahead and type in truffle create contract unit Swap and that will create you a new contract file and that is where you want to go ahead and paste your contract so as you can see definitely you have to make sure that the solidity version is perfect and then just raise the entire contract and there you go now you might be seeing this red underscore under the on the open zaplin package and that's because it hasn't we haven't installed it yet so let's go ahead and fix that so it's your net and then paste at opens up and slash contact and once it's done you want to right click on your on your solidity file and then just hit build contracts now if you do not have Shuffle extension at this point go back in the video I explained it earlier how to install it and how to set it up I'm gonna I'm gonna do it again that is where they set up it so if you're skipping around it's gonna be like somewhere in the beginning so that's where you want to look for it all right let's go ahead and continue so you want to click that and then it's going to build and in the output you can check how that goes you want to see something like successful compiled successfully and then next up you want to hit deploy like right click and deploy and then select girly now we set this up as well and this is uh so don't worry about it just go back and check it out if you haven't done that already now it's asking for gas price leave it empty just hit return on it don't even worry about it and then I'm gonna either paste your mnemonic or if you've already set it up you can just use that configuration and then if you're pasting it it's going to do this and then once you're done it will go ahead and try the blade Howard it's not going to go through it's like you don't see any kind of address on my screen right now and that's because we missed out we completely forgot the migration as file that's something that like we hear a clever programmer every single time that is our signature that we try to deploy and then oh the migrations file so in the migrations folder you want to go ahead and create a new file which will be one underscore deploy and then we'll have to import the unit swap contract so it's going to be artifacts that require any unisplot and then just explore export the deployer and so then you're going to be good to go now try again hit deploy and this time it's gonna go through so let's speed through that real quick and as you can see there is my contract address so you want to go ahead copy that and then go into your unit swap app go into euros and then contracts.js close that output out and then just create a new variable Bowl which will be addressed and just save it there because that's going to be something that that's going to be the thing that we're going to be using now if you want to double check on ether scan currently.etherscan.io paste your address in you're going to see everything that just went through so if you're up to this point congratulations now we're going to go ahead and set up rainbow kit all right so you want to go into your app.js file and we're going to import a bunch of things so just hold on it's going to be Rainbow Dash me slash rainbow kid slash styles.css it's going to be giving us all the Styles and then you're going to copy you're going to import merge from low dash dot merge and then we're gonna this is gonna this is where it's gonna get started this is where it's gonna start to be mental so we're gonna need get default wallets we're gonna need rainbow kit provider we're going to need Dark theme and we're going to need midnight theme actually you can just choose between the two we sometimes just look at it I don't know I prefer Dark theme if you're interested but try out midnight that's like completely black and then the dark is like dark gray so the more you know all these are coming from rainbow kit now really a bunch of things from wag me I believe is what's coming up so let's chain configure chain create client and whack me config all this is coming from wag me and then we're going to import infuro Provider from wagme slash provider slash infuria and that is basically it now up until this point you need to import everything we're going to be using all of it so just pause here for a quick sec but we'll check you have everything and let's keep on going then now we're going to destructure chains and Provider from configure chains and we're going to have two arrays in here so in the first array we're just going to put in chain dot girly that means that this app is only going to be running on the girly chain nothing else is going to work here and then for that we're going to be using the infuria provider where we need to put in an API key now we have it somewhere if you haven't done that already just place it in an EMV file and then you can you don't need you're not you don't actually have to expose it to the browser that's a good thing about it you can just go with inferior API key you don't have to do next next public but as you can see that is how you get your API key so if you haven't done it already now is the time to do and so there you go all right next up we're going to be setting up the connectors for our OLED connection and that's that's going to be using get default wallets from wagme now we need to pass in app name that is going to be uni swap you can pass in whatever and then you're going to need to pass in Chains and then next up we're gonna have a wagme client that will use create client and we're gonna need to pass in a couple things here so we're gonna need to pass in autoconnect you can either set it to true or false I prefer to be truth true but for this build we just use false for whatever reason and then you want to pass in connectors and the provider and with that all the setup is ready and then one last thing to set up is going to be we're going to make sure we're going to create a my theme which will merge midnight theme and we're going to override a couple of colors so we're going to say we're going to have an accent color of that and this is like completely optional this is just elements so there you have it extended call Extended color foreground accent color and now we're going to wrap our app in between wagmeconfig and where we're going to need to pass in Wagner client is it's like context these are like contexts for our app to be able to access this and then we're going to import the or we're going to wrap the rainbow kit provider with the chains and the theme and then just and then just pass in and then just pass in the app and that is basically it now we're going to go ahead and actually render the connect button to our screen all right let's actually go ahead and render out that connect button and so this is going to be a quick one what you want to do is go into your header file inside your components folder and then go ahead and import connect button from rainbow kit just like that and then we already as you can see we have it commented out that's the place where you want to put it in as a component so that's literally all we do once that's there it's going to show up on the top right corner and now let's actually check it out so there you go literally preset up buy rainbow kit so you can already use it and once you hit I'm going to mask it's going to work perfectly so that's it all right let's go ahead and set up all the contract Builders so we're going to be importing a couple of things here so first of all we're gonna need ethers then we're going to need unit spot ABI from utils slash uniswap API yeah uniswap.json and then we're going to do the exact same for the custom token these are coming with the build all right now next up we're gonna we're gonna need two functions that will immediately straight away going to export so let's not waste any time on that at first we're gonna have a token contract that we're gonna export and that'll take in an address and then we're going to you we're going to generate a provider using ethers the providers.web 3 provider and that and using the window ethereum and what is window ethereum that's basically the code that is being injected by metamask now next up we're going to use that that we're just going to go ahead and destructure ethereum from that from window and if it actually exists meaning the user has installed metamask we're going to use that to generate first a science so we're gonna we're gonna say provider.getcenter and all these are going to be like this is gonna be this is a lot of like setup and prep and whatever but this is ultimately going to be like completely needed in order to be able to interact with the contract all right so we're gonna join the contract reader and it's going to use it's going to be new ethers.contract and passing dress contract ABI and the signer itself and then just return that bad boy and that's pretty much the first one now we're going to repeat this exact same process for for the unit swap contract itself so the decks so the first two lines are copy paste immediately if statement copy paste and the only two things that are going to change are going to be the the address because that's there's only one address in this scenario and that's going to be the Dax address and then which ABI are we actually are we passing it so in this case it's going to be the uni swap baby Island API and then we're just passing the same same signer that we created up above and then return the contract reader so that's pretty much it now we're going to set up a couple more helper functions and then actually put things into motion alright so these are going to be two functions that we're going to be setting up just so we can convert between eth or ether and way so we're going to import ethers from ethers and then we're gonna use that to set up two functions so there's we're going to have one function that will be two way and that will take in an amount and then that will take into decimals but default value is going to be 18 and then con we're just going to say cause twoway ether.utos.parse units and that's just something that like comes from ethers and I'm passing the amount and I'm passing decimals and then we're just going to return that now as a and then we're just going to return that as a string that is the first one and then the second one I'll let you try figure it out by yourself but it's going to be on the same analogy the only difference we're going to be passing in way here and then we're gonna need eth so I'm gonna go ahead and continue now so we're gonna say it's gonna be two eth and once again we're gonna pass in an amount decimals it's gonna be 18 usual utils.forement units and then we're gonna say we're gonna go to eat same we're gonna type the exact same thing all right that being said we are actually going to go ahead and start implementing the each coin functionality all right so let's actually let's like finally actually swap from E3 or custom tokens that we have worked so hard for all right so you want to go into your queries.js file and then import a couple of things so big number in ethers from ethers first of all and then you want to import contract and token contract from the from the contract file that we set up earlier so that's the like contract interaction interfaces functions I don't remember it though completely but that's what's basically going to allow you to actually interface with your contract and then next up we're going to import to eat and twoway so the other two helper functions that we just created and so here we're going to have the swap to eat function which will require a token name and amount and as I always say use try catch functions error console let the error out and then we're going to convert the amount to way because once again it's already only works with weight we're going to use the contract function that we set up earlier to generate a contract object for Unison for us and then we're going to use that to actually handle the transaction itself so we're going to say contractobject.swapes to token and pass in token name and TX which is the way amount of the eth amount the user passed in and then we're going to go ahead and generate a receipt by waiting for that data and then return it once it's done so that's basically it for that file now you want to go ahead and go over the swap component and scroll down to wherever you see functions for contract functionality here and then you want to put in create a new function that'll heavily rely on our setup for of the front end so we're going to create a perform swap function that's going to be an async function and we're gonna before we do anything set transactional pending true all right and then we're going to go ahead and generate a receipt we're going to go ahead and start create a new create a new variable that we're going to call receipt and then using everything that we set up earlier just type in the if Source token equals eth and destination token token doesn't equal either and you would just want to invoke and you want to wait for the swap if the token function and then put in destination token and input value and like I said this whole thing is heavily relying on the front and we already set up for your convenience now you definitely want to make sure that a function is actually getting called so we're gonna create a new function that we'll call handle swap it's actually on my screen in on line 73. there was a little bit of scrolling so I just wanted to help you out with that now here it's a little repetitive but we're just gonna double check that everything is good to go there and then call the function once the once everything is ready now my screen on line 140 where you're gonna pass in that function and what that basically does is that will fire up this function and whenever you hit the swap button which you currently cannot see because the wallet is not connected to the app but I'm going to show you just now let's go to this app put in a value there and then we're gonna need to select uh tokens that's going to be coin a and you're going to connect your wallet so that's something you gotta do and then it didn't turn blue so there is some sort of error going on here let's let's actually go ahead and figure that out now as you can see on line 16 we have imported use account from wagme and that basically I'm just going to help us that's just going to help us to check whether well that has been ink is connected or not so just update it on line 61 and you're just gonna restructure address from use account and that itself is going to take care of this whole things the wallet is connected and then there you go now there's your swap button and then confirm that transaction speed it up a little bit because that never hurt and there you go you can try it with another amount and it's going to work perfectly again so there it is that is your function now we're going to go ahead and fetch balances of each token render them out on the screen all right ladies and Gentlemen let's go ahead and fetch those balances that's going to be a little bit of a longer thing but yeah that's so that's where it's going to go now you want to go into your header file because everything is going to happen in our header and we're going to import a few things so start with use account from wagme and then we're going to import token balance from token balance and then we're gonna create a new use state which is going to be token balance and it's going to start out as a completely complete nothingness now you want to extract address from the structure address from use account and then we're just going to go ahead and kick things off with a use effect which we're gonna fire off every single time once the address changes that is important because if you connect a different wallet to the app you want to see the updated balances inside that wallet and not the previous one so this is super important now we're going to go ahead and uh our we're going to update the use date with a bunch of jsx code in there so we're going to use the token balance component and pass in coin a and then the wallet address so we're going to repeat this a couple of times so like we because we have three custom coins we're gonna either do this three times and by the way those um coin names are going to be strings so you want to make sure you have Queen ABC and then three times the wallet address as as in the address next up you want to have a an if statement and make sure that it and if the wallet any of the user haven't connected their bullets then you want to put you want to punch out a little bit of a notification for them so we're gonna go ahead and set that up right now so that's going to be a toast wallet and it's just going to be like a toast air and we're gonna be like yo connect your wallet or something like that it's going to be there for two seconds and that's basically how it's gonna look like you can see it on the right okay so we just connected our wallet and now you're gonna go ahead and we actually have to render those components out so render out just put the token balance component and render it out right there but throw some sort of error okay so let's actually go into that token balance component let's see what's going on in there so we're going to need to create a couple things we're going to need to have a balance use State and we're gonna need to have a copy icon used it so there's a few things that we need to specify here and that will just be a icon that we already imported for you so that's going to be clipboard icon and then we're gonna we're gonna have separate we're gonna have multiple States we're going to have a transaction pending and we're gonna have a not not pending and we're just gonna kick them off based on whatever uh whatever is suitable for the situation and then you also want to have a token address over there and by the way the balance is going to start out as an as like a dash string basically all right now we're gonna have two notifiers set up so that one is going to be an error and this is going to be like a toaster just like the one before but this time it's gonna go for six seconds and that's by the way in milliseconds so that's why it's six thousand and then we're gonna have a success message or like a success host where we're going to say transaction complete and I mean you can go ahead and set up a duration for that too honestly so go ahead create a new function which is going to be fetch token balance and that's going to be and then we're just gonna kick things off with invoking the get token balance function which we imported earlier which we're gonna set up in a little bit and you're going to need to pass in a name and wallet address for that and then we're going to also need to format the balance and then set that balance or set the formatted balance to the state itself out so there's going to be that's how it's going to look like in in a little bit that's the that's the component that we're going to make a and we're gonna have that we're gonna have to make we're gonna have to fill up with the good data all right so going to record is the JS file and we're gonna go ahead and set up get tokenbalance function and so we're gonna need to call the contract there so we're gonna need to set up the contact object and just like before use the get balance function from a method from the contract balance and then create a new variable and then return it and that should basically get it every single time and then you're gonna need another one which which is going to be get token address and once again just go ahead try it out by yourself like every single time we create a new function I want you to go ahead from now on because it's going to be a lot of repetition so try it out by yourself and see if it works and then just come back for the solution so try catch console log the error out and then we're gonna create the usual contract object and then the usual way just call on the get token address font method now everything that we just created we're going to go ahead and now import from from that file so get token address and get token balance and then we're also going to set up a new function which is going to be fetching which is going to use the get token address function that we just set up so it's going to be fetch token.s it's going to be an async function use that and then whatever that thing returns we're going to set it to the state and then we're going to go ahead set up a use effect that will run again and again whenever name and the wallet address changes and if both of them exist then we're gonna fetch the token balances and then we're also going to fetch the token addresses and if that even if they and if not either of them don't exist we're just gonna set everything back to their normal regular or like the initial value and then it says ethers doesn't exist so let's go ahead fix that import ethers from ethers and that should be good pretty much now if you scroll down on my screen it's line 40 but in your screen but on your page it might be something different so just check out where it's at we have a hardcodone balance there but we should go ahead and now fix that so let's see what happens there and there you go ladies and gentlemen as you can see our previous two swaps were successful because you can see the 30 coin a and the 20 coin B transactions that would fit there so that's basically it now we're gonna go ahead and display a success toast whenever the transaction succeeds all right let's just go ahead and set it up so go back to your swap component and as you can see we already set everything up for Success so now we're just gonna invoke everything so go down to your go to your perform swap function we should have set the set transaction pending state to false once it's done and then if the transaction results in your receipt and that result and that receipt doesn't have a transaction hash property then you want to go ahead and notify errors I've hired that off and then pass in receipt so everybody knows what's happening else just notify success and that should basically be pretty successful so let's go ahead and test it out so let's do some transactions over there hit confirm and let's see what do we got let's see if it works let's speed that bad boy up and any moment now and there you go there is your host message and also as you can see on the right hand side once I connect my wallet coin c oh coinb now has 60 so the transaction definitely went through and now we have proven that it did go through all right let's go ahead and now set up the swapping from token or like from Custom erc20 token to eth so what we're going to be doing here is uh first of all close out everything we're not we don't need a bunch of things go into your queries the JS file and we're gonna set up two functions but let's start with the first one now so that's going to be swap token to eat now it's going to be an async function that takes in token name and amount and we're just going to do the usual try catch console log area create your contract object and then what we're going to do is use that contract object to swap token two if basically call that function of the contract so we're going to pass in the usual stuff to the way converted amount of the amount you want to convert and then the token name now it's going to be the same thing whenever the receipt shows up wait for it and then return the receipt now as you remember we're going to need to preapprove the amount to be transferred so let's do that now it's going to be the second function so that's going to be increase allowance and so once again we're gonna have oh we're gonna pass in the token name and the amount and then we're gonna do the usual try catch console log the error and there's going to be a little bit of a trick here now so I want you to listen closely so we're going to Fat what we're going to do is we're going to determine the address of the uh specific coin that we're going to need and then we're going to use that address to generate a new contract object and we're going to use that to increase the allowance all right so there's going to be two contract objects here and both we're going to be interacting with two contracts in the same function so that's how let's continue so we're going to use the uni swap contract to get the address of the custom tokens we're going to pass in token name and then we're gonna go ahead and generate a token contract object using that address that we just generated so that we can increase the allowance and so we're going to do that right now so using that we're going to go ahead and say called approve and so what's happening now is the approved function Works in a way where you pass in who can who can interact with this or who can interact with this coin and how much are you allowing them to interact with this coin so we're going to need to pass in two things one of them is going to be the unit swap address and the other one is going to be the way amount of the amount or like the weight converted amount of the amount you want to convert and with that being said we're pretty much good to go here all right now let's actually connect this with our front end so we're gonna go into our swap component and then in the perform swap function there is that if statement so you're gonna add a else Clause after it so we're going to say else if if the source token is not if but the destination token is this is what we want to do so now we're going to generate the receipt based on that and we're going to call these swap token to eth function and now we're going to create the increase allowance function so let's go ahead and do that so transaction pending has to be true and then we're gonna use the function that we just built and then invoked it and invoking and then pass in Source token and input value and after that once it's good to go might as well turn off the loading screen and so inside of handle swap I'm going to turn on the loading screen again and then you want to check whether the wallet has some sort of allowance on the source token for the amount that you are trying to convert back to each oh there's a there's in there I'm gonna make it async okay that's fine and after that we're good with loading so let's actually move that and then if the result is valid and actually called the perform swap perform swap function and if if not if if the user doesn't have allowance now we get a call the handle increase handle insufficient allowance function and to do that what we're going to do like we we already set that up ahead of time now we're going to just switch out the swap button to a different button and so let's go ahead and do that that's on my screen that's line 162 and then there is a swap button text whether if it's your increase allowance or not and if it is then we're going to call the handle increase allowance function now let's go ahead and try it out let's see how this actually works so we're going to turn some we're going to use 20 coin A's and then swap back into eth and let's see what happens there's some interesting things going on around in the background so that's something so we apparently don't really have the has wallet allowance function but that's completely fine because we're gonna go ahead and build it now let's see what can we do here so we're going to pass an owner we're going to need the token name and the amount and we're going to use the usual try catch console log the error that's fine and then we're going to use the uniswap contract to generate our contract object and then we're going to have an address obviously once again we've got to fetch the token address to get everything and then using the using the token contracts we're going to double check the allowance so we're gonna we're literally just gonna fetch it so we're gonna pass an owner and we're gonna pass that as in the uni swap address and then we're going to convert it into a like a regular human number so we're gonna say that's a bunch of things going on there so basically what's happening is we're gonna get the way amount and then generate a big number from it and then we're going to use that to generate a string that we'll be able to work with later on so just go ahead copy that and then let's feel free to spend some time understanding what is happening there and then now we're gonna go ahead and return the result and also export the function because we need to use it in our swap component so let's go ahead and try it out again so if we click swap it says Ops insufficient allowance we're going to need to increase it so we're going to go ahead click that okay there's some interesting things happening here again so it says API that map is not a function we might have made a mistake earlier on yeah there it is so you want to double check that every single time when you are generating a contract contract reader you say you import the Json and then dot ABI and that's what you're trying to interface with because there's a bunch of stuff that you don't need so let's go ahead test this out again so refresh real quick connect your wallet and to say 30 okay insufficient allowance we've seen that and there you go give access let's wait for it to go through speed it up if we need to and then fresh real quick connect Google it again and then now it says Swap and if you click it you're gonna approve the transaction itself not the allowance so we should be pretty much good to go soon so let's see how that goes perfect it says transaction completed so technically we should be good let's just refresh real quick so connect that and now you see that the values have been updated so that's basically it now we're just going to implement tokens token and we're good to go all right so to make this work we're gonna need to go into our queries.js file and it's going to be super simple it's going to be super fast so just create a new function swap token to token as in Source token and destination token and amount and the usual try catch console log the error because that's usually helpful to see what went wrong and now you're going to generate the contract object as usual you can once again try it by yourself but if it doesn't if you're not that experienced that's fine too which is going to be basically the response of the swept function and then just pass in everything that we got obviously make sure you convert the amount to weight and next up you want to go ahead generate the receipt and return it now if you don't export the function it's not going to work elsewhere so go back to your swap component after you've done that and of uh perform swaps next statement you want to have an else clause which has no other conditions basically it just in the first two we made sure that everything is accounted for so now this is the only option to do or the only option to have and now what you want to do is generate the local receipt for that or update the receipt update the receipt variable for that and then call the swap token the token function from the file that we just from the queries file pass in everything that function is go ahead and see what do we need so everything should be ready to go pretty much so let's see what we got let's turn 30 coin A's and just swap them over to coin B let's see if that works so let's hit Swap and okay we gotta increase the allowance that's perfect that's fine okay hit confirm let's see if it works and we can just speed it up see if it's to go and after after that's done we can actually go at now that we have the allowance we can now actually go ahead and do the swap and once you confirm the transaction it should go through pretty fast transaction completed and there you go there you have it your coin a and coin B is updated so ladies and gentlemen that is it it is a fully functional unit swap Decks that is able to convert between random erc20 tokens use them you can literally actually factually use this and you can transfer your eth into custom coins and your custom coins back to eth and then custom coins between custom coins and then all that kind of stuff so you can have basically your own trading bot I'm not saying you should be doing that but with a little enhancement you can automate that stuff so there you go that's that's pretty much it and I hope you got some value out of this tutorial and with that said I'll see you in the next one
