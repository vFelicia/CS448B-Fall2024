With timestamps:

00:00 - what is up what is up people
00:03 - what is up ladies what is up gentlemen
00:06 - how you doing
00:07 - this is kazzy from cleverprogrammer.com
00:09 - and i'm here with
00:10 - daniel what is up guys i hope you guys
00:12 - are having a wonderful
00:14 - day today and what are we gonna do today
00:16 - quasi guys today we're gonna be doing
00:17 - something
00:18 - fun so i decided daniel and i decided
00:21 - hey
00:22 - let's learn more about react and let's
00:24 - sharpen our react.js skills
00:26 - because we're just inspired by you guys
00:29 - right i mean the react
00:31 - is such an awesome tool that you can
00:33 - have in your tool belt
00:35 - and we want to have that in our own tool
00:37 - belts so what's going to be cool about
00:38 - this
00:39 - is you're going to be watching me learn
00:42 - and daniel learn
00:43 - and you can learn with us okay and uh we
00:47 - are going about learning it in a pretty
00:48 - interesting way
00:50 - so i i i think you might pick up
00:53 - some skills from there too how you can
00:55 - actually pick it up faster
00:57 - i think it's important because you're
00:58 - going to realize we don't know
01:00 - everything
01:01 - right not everyone not anyone knows
01:03 - everything so we have a lot of learning
01:04 - to do i'm from python in django
01:06 - world so i'm good at that but react is
01:09 - new so i want to pick that up you'll see
01:11 - how a developer
01:12 - goes to another language and picks it up
01:15 - and daniel has
01:16 - um mostly background yeah java
01:19 - background
01:20 - and he's worked for a com blue origin
01:23 - and he was working on actually a rocket
01:25 - ship
01:26 - a big rocket ship i did a lot of back
01:29 - and stuff but
01:30 - that's what it was so with that said
01:32 - guys let's just jump into it daniel and
01:34 - i are going to be learning
01:36 - uh with you today so let's go so here's
01:38 - something interesting i did
01:40 - because i want to learn in a component
01:42 - based uh functional component-based way
01:44 - not
01:44 - class-based components so i just
01:46 - literally googled react functional
01:48 - functional components to do
01:50 - app github i found somebody's uh
01:53 - code so you guys can actually go here
01:56 - as well yo what's up we got 294 people
02:00 - what's up gang
02:00 - yo yo smash that like button
02:04 - smash that break that button yo raj raj
02:07 - hans is going to get a lot of uh
02:10 - a lot of cloud after this what's up
02:11 - let's go raj rajan guys
02:13 - if you want to surprise roger ajron go
02:15 - ahead and smash that star button here
02:18 - roger johns yo what's up from toronto
02:21 - obey
02:22 - says from toronto beautiful oh
02:24 - bangladesh
02:26 - yup this is live all right guys so here
02:28 - we go so basically what i did is i went
02:30 - and checked out what app this guy's
02:32 - built
02:32 - so it went here and it's a to-do list
02:35 - app looks pretty good
02:36 - if i type in daniel or i type in youtube
02:39 - a
02:40 - youtube hit add and when i check things
02:43 - off
02:44 - it does what it's supposed to do hey we
02:46 - already got a donation let's go
02:48 - gang [ __ ] come on baby hey hey hey
02:51 - what's up oh what's up dude this is
02:53 - crazy bro thank you guys yeah
02:55 - yeah let's go yo we got 245 people we
02:58 - gotta get we gotta break 300.
03:01 - let's almost at 300 let's go um
03:04 - yo guys welcome welcome oh man lunatic
03:06 - what's up brother nazmul how's it going
03:09 - govind thank you all right
03:12 - so let's go and now what i'm gonna do
03:14 - guys and you can do this
03:16 - with me you can do it with us
03:19 - let's grab the code let's do it you want
03:21 - to drop this link in the chat just in
03:22 - case you
03:23 - care all right here you guys go so you
03:26 - guys can
03:27 - copy this uh thing so i'm gonna copy
03:30 - this
03:32 - all right and then i'll go to my command
03:35 - line
03:36 - over here all right here we go
03:39 - and let's go into my github and i will
03:42 - clone this
03:44 - app react
03:46 - to do functional and i will
03:49 - npm install whatever is in there and
03:52 - then as soon as i'm done installing then
03:54 - what am i gonna do guys
03:55 - we're gonna run it oh [ __ ]
04:01 - let's see what other musics we got
04:07 - hey intense build-up all right here we
04:10 - go
04:11 - all right npm run npm
04:15 - hey we're learning this [ __ ] oh
04:18 - something's happening
04:19 - don't know what don't know
04:23 - all right cool so so far so good you
04:26 - guys have seen this before nothing new
04:27 - here nothing to get excited about
04:29 - nothing to write home about let's open
04:32 - up visual studio code and uh let's pop
04:34 - that bad boy
04:35 - open where is it github wait it's not
04:38 - here
04:39 - hold on
04:54 - why is this github different than this
04:55 - github
04:58 - where is this github ah it's under
05:01 - your user this is so confusing bro
05:06 - oh the build up is intense dude
05:10 - found it let's go
05:14 - perfect timing dude just for the drop i
05:16 - love
05:17 - it i'm just moving it to the other
05:19 - github
05:22 - what's up guys let's keep it rocking 285
05:25 - people
05:26 - let's break 300 bro let's [ __ ] go
05:30 - who wants to learn react i do
05:34 - just like ripping their shirts off
05:41 - we start signing people's chests yo 10
05:43 - notation let's go i mean donation
05:46 - thanks for the content cp help me with
05:48 - my react js and state management skills
05:49 - so much let's keep it up yo let's go
05:53 - hey all right so
05:57 - all right guys let's do this bring this
05:59 - down just a little bit
06:01 - so oops i meant to open up
06:04 - react to do app
06:08 - all right let's go to source app.js
06:10 - we're gonna do command j
06:11 - and um let's just do npm start yeah
06:15 - let's do it beautiful yo we just broke
06:17 - 300 viewers guys smash the
06:21 - thank you guys i love you guys so much
06:23 - let's keep it rocking and rolling
06:26 - all right so i like to have my code on
06:28 - the left and my
06:29 - what i'm saying this on the right one
06:31 - hand on the steering wheel all right
06:36 - all right so oops here we go
06:40 - uh i don't need this terminal anymore so
06:42 - i'm just going to quit
06:43 - out of it that's fine
06:47 - refresh okay i don't need this don't
06:50 - need this let's move this here okay
06:53 - there's also some face recognition app
06:55 - that i'm deciding to play with but we'll
06:57 - do that later for now
06:58 - let's just work on this so now i got
07:00 - this app up and running you guys can cop
07:02 - that code and get it up and running just
07:04 - like this still take you two seconds
07:05 - they're asking for the code again hey
07:08 - asking for the code again yo we just got
07:09 - another super chat what's up
07:11 - what's a super chat a donation
07:16 - thank you guys thank you adil for the
07:18 - five dollar donation
07:21 - daniel can finally get a haircut haircut
07:23 - hair cut
07:24 - yeah i've been going down my hair for
07:26 - three years because haircuts are too
07:27 - expensive guys
07:30 - oh man i told him that he got offended
07:32 - all right here we go
07:36 - all right so beautiful thank you so much
07:38 - for that donation appreciate you guys so
07:40 - freaking much
07:42 - we can get another monster now and keep
07:44 - coding all night
07:45 - biggest roi ever let's go so
07:48 - now what we're doing is the way that i
07:51 - want to learn react is i don't want to
07:53 - learn from some boring tutorial or some
07:54 - professor
07:55 - telling me what the [ __ ] is going on
07:57 - right how i want to learn react is
07:59 - i want to just get into the nitty-gritty
08:02 - the great mate i want to get into it i
08:05 - want to get in the [ __ ] dirt
08:07 - and learn so the way that i want to
08:09 - learn and um
08:10 - daniel and i decided to learn is we just
08:13 - want to get straight into somebody's
08:15 - code
08:15 - and then start breaking it apart and see
08:18 - how it's made
08:19 - so as i'm going through it i'm just
08:21 - going to be asking questions and
08:22 - learning along
08:23 - maybe you'll know the answer so you can
08:24 - drop it in chat daniel and i will just
08:26 - try to break this thing apart and figure
08:28 - it out we know web development other
08:29 - languages
08:30 - and we could probably figure out and
08:31 - react exactly and again this is because
08:33 - you guys inspired us we're like man if
08:35 - we're here teaching react we should also
08:37 - get down and dirty with react so we can
08:39 - learn it just like you guys so you guys
08:41 - are going to get to see us
08:42 - be a bunch of noobs and conquer react
08:45 - that's right we are up to 373 people
08:48 - let's go
08:50 - guys smash that like button so this
08:52 - video can just keep spreading and going
08:54 - out everywhere we're
08:55 - total 445 people welcome welcome thank
08:58 - you so much
08:59 - for jumping on appreciate you guys let's
09:01 - keep rocking and rolling
09:03 - so we are built we're learning to code
09:06 - in react js and i'm learning
09:08 - with you guys so let's keep going all
09:10 - right so what is happening so i'm going
09:12 - to put this on the
09:14 - you know what let's take this um here
09:18 - one thing that god blessed me in is my
09:20 - computer skills
09:22 - so let's go here let's go here and let's
09:25 - take a look
09:26 - all right so so far what makes sense to
09:28 - me daniel is i see this
09:29 - three things here and they map to three
09:31 - things now i'm not a rocket scientist
09:33 - but
09:34 - this adds up i think it adds up i think
09:36 - there's some sort of
09:38 - static list that's being populated
09:40 - before right
09:41 - yep so we got pick up laundry we got die
09:43 - we got this thing
09:44 - and i guess what that also tells us we
09:46 - could look at the objects and what
09:48 - they're mapping out to
09:49 - yeah so we know that each to do is
09:51 - composed of an id
09:52 - it's composed of a text and it's
09:54 - composed of a is complete
09:56 - boolean value ah okay so you're telling
09:58 - me that if i change this to a true
10:02 - this would mark it oh interesting very
10:04 - cool
10:05 - yeah okay so it looks like that is
10:06 - completely just changing the text
10:09 - and the style of it got it okay
10:12 - so that's what that's doing id is not
10:14 - gonna do anything right now
10:16 - i don't know try it out i mean if i
10:17 - change it to four i don't think it's
10:18 - gonna
10:19 - yeah okay so for now it's not gonna do
10:21 - anything but it could be useful at some
10:23 - point
10:23 - yeah like you could order things right
10:25 - right based on id
10:27 - now we got to do's um and this is what
10:30 - is it called in uh
10:32 - react uh it's called uh you know state
10:35 - state variables or whatever
10:37 - okay they're called okay um yeah so
10:40 - basically
10:40 - what's happening here is to do is we can
10:43 - change it on the fly
10:44 - whenever we call set to do's and change
10:46 - it it changes the to-do's list
10:48 - on the fly okay
10:51 - right so um
10:55 - so let's get into the functions so what
10:56 - were you talking about so this is the ad
10:58 - to do this is what runs when i hit add
11:01 - and i think by the way kudos to whoever
11:04 - made this code yo we're 416 people jesus
11:07 - christ let's keep going go
11:09 - at 1k people we'll take off our shirts
11:12 - like coding um no we're not gonna do
11:16 - that or maybe we will
11:17 - but kudos to this guy because he's
11:19 - documented so well like right here at
11:21 - to do i don't have to look at the
11:23 - function in that car to guess
11:24 - what it is it's gonna give you another
11:26 - to-do list after you press that add
11:28 - button and it probably gets triggered by
11:30 - the add button
11:33 - so this add button is running and then
11:36 - it adds the let's go it's being stored
11:39 - here in the react these are react hooks
11:42 - yes thank you guys
11:43 - so it's being stored in um
11:47 - in todos right and
11:50 - what's this text part so gotcha so what
11:53 - that looks like to me is this is
11:54 - appending to the ear yes
11:56 - so it's passing in a list that has the
11:59 - old to do's
12:00 - and then at the end or is it at the
12:02 - beginning it's appending
12:04 - a new object with the text i think it
12:06 - makes sense that it's
12:07 - at the end oh gotcha with the to-do
12:10 - assigned to the
12:11 - the the to-do is whatever they write in
12:13 - that's the parameter that's being passed
12:14 - in
12:15 - assigned to the text and that's why when
12:17 - you put let go it brings in that text it
12:19 - creates a new variable
12:21 - it sets the text of that or it creates a
12:22 - new object component whatever we're
12:24 - going to call it
12:24 - and it says that text of whatever you
12:26 - wrote so basically all that's happening
12:28 - is it's
12:28 - adding it in here as the fourth object
12:30 - yep right that's making sense
12:32 - cool all right so let's go and what
12:35 - these hooks allow you to do um
12:38 - what the what this allows you to do is
12:41 - when i
12:42 - add this in it doesn't refresh the page
12:44 - and it adds it in
12:46 - right that's good because refresh sucks
12:49 - right
12:50 - so boom okay figured that part out dude
12:53 - that was a lit song bro we need to
12:55 - yeah i want a sec right i love that one
12:58 - um okay so now we got mark complete and
13:02 - this
13:03 - is if i go to the index
13:07 - i click it it's been marked complete
13:11 - all right so hold on it takes no to do's
13:15 - so i think it just creates the new to
13:16 - do's and it adds the
13:18 - old to do's to it then the next one
13:21 - it's going to update the new to do's it
13:24 - looks like i got a specific index which
13:25 - is what's passed in
13:27 - by the parameter so here it would be
13:28 - like two zero one two
13:30 - yeah or one two three or however they're
13:32 - in i don't know if they're indexing
13:34 - based off zero or based off one it could
13:36 - be zero based or one based
13:38 - yeah but what it's doing is it's setting
13:40 - the is complete
13:42 - to whatever it is of the opposite right
13:45 - got it so whatever was like the opposite
13:47 - of what it currently is
13:48 - for example oh so when i click it it
13:50 - just does the opposite of this
13:52 - exactly oh so it's just using a very
13:55 - simple negation here
13:57 - oh no it's almost like logic i love that
14:00 - okay
14:01 - cool so this is a hack to just
14:04 - turn whatever you have into the opposite
14:06 - and since it's on and off if it's on
14:07 - it'll make it off if it's off it'll make
14:09 - it on
14:10 - exactly when you're coding sometimes you
14:11 - do care what the state is
14:13 - you know if it was pause or on off true
14:16 - false
14:17 - zero one whatever that is but in this
14:18 - case you don't really care you just
14:20 - wanna invert it to whatever that is
14:22 - whenever you mark it as complete so you
14:24 - could turn it on you could turn it off
14:26 - it doesn't matter and i think this is a
14:27 - great way of just doing it with the
14:29 - negation i love that and then set
14:32 - is okay so it just takes these
14:36 - to-do's um and it just it replaces the
14:40 - older to-do's with these new to-do's
14:42 - that's all that's and all the new to
14:44 - do's did was it
14:45 - you reverted or inverted the one you
14:48 - clicked got it so for example
14:50 - say i hit this this would be two
14:54 - right it would take it would go it's one
14:57 - base so it would be three
14:59 - ah one base okay so it'll be three cool
15:02 - so now
15:02 - it will make a replica of this right uh
15:06 - not a deep cop
15:08 - a regular copy right yeah make a copy of
15:10 - this
15:11 - then it would go to the is completed
15:14 - based off the index
15:15 - based off the index yeah based off the
15:17 - index so because of this it'll go here
15:20 - uh make this the opposite of what it is
15:24 - it'll turn true and then once it makes
15:26 - it true it will just take this entire
15:29 - thing turn that right and then
15:32 - uh replace what the existing to do's
15:36 - were right that's making sense to me
15:39 - okay cool does that make sense to you
15:41 - guys hopefully it does
15:42 - hopefully hopefully all right these guys
15:45 - might be way smarter than us brother
15:49 - very possible i mean wait till we get to
15:52 - once we start flying we're gonna
15:54 - start flying yeah we're gonna catch up
15:55 - real quick
16:00 - all right
16:03 - okay cool we should do like a 30 day
16:05 - challenge and see what we can put
16:06 - together in 30 days
16:08 - holy crap let's put together trading but
16:10 - i think we can put together a trading
16:11 - bot
16:12 - do you guys want to see a trading book i
16:14 - think we could put together a trading
16:15 - mod or like a
16:16 - machine learning face detection type of
16:17 - thing would react probably way less than
16:20 - 30 days
16:20 - yeah for sure five to seven days a
16:22 - little hackathon would knock it out
16:25 - momita says yes it made sense
16:29 - it made sense to us too you do two three
16:32 - five says i don't know man sounds like
16:33 - witchcraft oh
16:34 - dude all right
16:38 - so um now so
16:41 - i want to ask you this when i hit to do
16:44 - when i hit add here
16:46 - there's probably some button that's
16:48 - detecting a form completion
16:52 - and then calling the add to do function
16:54 - is that what's happening
16:57 - that sounds about right to me so let's
16:58 - go to to do form
17:00 - okay so first off i guess when you see
17:03 - the
17:04 - when you see the classes again could you
17:05 - pop up the menu real quick
17:08 - and you see app index to do form to do's
17:11 - what are the things that go through your
17:12 - head when you see these different
17:13 - classes
17:15 - when i see these yeah like what do you
17:17 - think to do forms
17:18 - is versus to do's versus i don't know
17:21 - app
17:22 - uh to do's i think is a component i also
17:25 - think to do form as a component
17:27 - as soon as i see anything with
17:28 - capitalization like that
17:30 - i know that in react it's a component
17:32 - gotcha so to do form would be a
17:35 - component that we could use and so is to
17:36 - do's and over here on the ui what
17:38 - components do you think they match up to
17:40 - so to do form i think matches up to this
17:42 - and i think
17:43 - to do's matches up to this that makes
17:45 - sense yeah because forms usually have
17:46 - inputs different types it could be text
17:49 - it could be buttons whatever that is but
17:51 - then you always have like the submit
17:52 - form
17:52 - in that case could be like the out of
17:54 - the to do yeah all right
17:56 - that's making sense to me that's what i
17:58 - think and uh let's go
18:01 - okay so now i want to just see what's
18:03 - happening with this
18:04 - code right here okay so to do form
18:09 - it takes in a add to do prop
18:14 - okay
18:17 - it takes the yeah so this is where i'm
18:20 - putting in the value
18:22 - gotcha cool so we have a handle
18:26 - change so what kind of change is that
18:30 - change in the form input so as i'm
18:32 - typing right on the fly it's doing this
18:34 - so for example when i type in f here
18:38 - now value is actually f like literally
18:41 - it takes the
18:42 - yeah you see what i'm saying so on the
18:44 - fly it's taking the f
18:46 - and calling this thing then that thing
18:49 - sets
18:49 - value to f so if i save
18:53 - e dot target as soon as they say
18:56 - r now fr is value got it okay
19:00 - so it's doing it on the fly without me
19:02 - hitting enter or anything that's the
19:04 - really really cool thing about right hey
19:07 - i get it i'm liking it
19:08 - so that's a really cool thing about
19:10 - react so now
19:14 - okay so handle submit so on submit we
19:17 - prevent default which stops react from
19:19 - refreshing which is really important so
19:21 - you always want to have prevent default
19:24 - and then if the value is not empty
19:27 - or if the if it's empty
19:31 - if it's if it is empty correctly right
19:33 - because if it's empty it can do nothing
19:34 - yeah but then they put the
19:37 - the negation again so to true so then it
19:39 - enters and does nothing
19:40 - right so if it's if it doesn't exist
19:42 - don't do anything
19:44 - um if there is a value yeah then we just
19:48 - add value
19:49 - oh so this add to do is from the app.js
19:53 - and it passes in the specific to do you
19:55 - want to add yes
19:56 - which is that text that's what i was
19:58 - looking for oh
19:59 - okay so this is happening on the form
20:01 - submission that's what i was thinking
20:03 - would happen
20:04 - handle submit
20:07 - because if i set this value to let's say
20:09 - daniel then i believe what would happen
20:12 - is whatever i type in and i hit add
20:15 - it will show daniel after boom
20:18 - holy [ __ ] are we developers or what i
20:20 - think so
20:21 - bro dude it feels good to be a developer
20:23 - you kind of feel like a magician like
20:26 - i feel like we can pick up like golang
20:28 - in one day and make a project that'll be
20:30 - sick
20:31 - easy peasy
20:37 - okay so what is next
20:44 - next is let's look at some of this uh
20:47 - what is that
20:47 - jsx or stuff when you want to do um
20:51 - [Music]
20:52 - when you want javascript and html kind
20:54 - of mix up stuff
20:56 - so all this is creating is that form
20:58 - area that you just pointed to right
21:00 - we have the input which is
21:03 - oh text type input so that's the add to
21:06 - do yeah and then you have your primary
21:08 - button input which is the add button
21:11 - right okay gotcha so here we're just
21:13 - creating it
21:14 - and this is what's called a to do form
21:15 - so when you export it
21:17 - and anywhere else you call to do form
21:19 - this pops out
21:23 - right hold on let me read this code a
21:26 - little bit more
21:28 - good okay
21:31 - boom another to-do app okay cool that's
21:35 - the title
21:36 - so they're doing something with css here
21:39 - for app title tech center i imagine
21:42 - look it up app titles right there i
21:44 - don't know
21:47 - okay all right
21:50 - so got that on submit call handle submit
21:54 - that's what's calling the function okay
21:56 - got it
21:57 - all right i think i don't know if that's
22:02 - bootstrap or is just regular styling
22:07 - form group
22:15 - okay and put this back on
22:22 - him all right
22:25 - that looks like some regular bootstrap
22:27 - type things like that or i don't know
22:29 - other frameworks or libraries use that
22:30 - yeah it looks like bootstrap
22:32 - yes our first input to text input
22:34 - placeholder add to do
22:37 - the value oh so there's that's where it
22:39 - gets the actual value on change equals
22:41 - handle change
22:42 - handle changes that in this class or is
22:44 - in the app js class
22:47 - handle change yo what's up guys hello
22:50 - hi deepak i love the way you teach us
22:51 - thank you so much brother ibrahim says
22:55 - qazi i'm really really excited about
22:56 - this live but i'm busy for now i'll
22:58 - definitely watch it later
22:59 - awesome bro we'll love to see you back
23:01 - guys please don't spam
23:03 - please don't spam i'd have to put you on
23:06 - time timeout
23:10 - all right put user in timeout oh my god
23:14 - please don't spam guys i'm gonna have to
23:17 - hide
23:18 - hide you or s um yeah perfect
23:22 - awesome
23:26 - okay so i think i got the to-do form
23:30 - now it's just to do's
23:34 - so to do this is taking in these
23:37 - props
23:40 - yeah so it looks like we have two
23:41 - different let's or would this be called
23:44 - a component
23:45 - yeah to do's as a component okay so what
23:48 - this looks like is we have
23:49 - eight to do yeah which has those
23:52 - probably those elements we talked about
23:53 - before
23:54 - and then we have to do's which has a
23:57 - specific
23:59 - list or a mapping of yeah to do is a
24:01 - component as well
24:02 - okay just not being exported but yeah
24:04 - there are two components in there
24:05 - so let's talk about the to do first then
24:07 - we'll go to the to do's with an s
24:09 - because that's gonna be probably a
24:10 - little more complicated right okay
24:13 - perfect so looking at this to do
24:17 - we have our divider class name to do
24:21 - the paragraph so this one's interesting
24:23 - right because it's giving it a style to
24:25 - the type paragraph
24:26 - called text decoration so this is where
24:29 - it's doing that like ternary if then
24:32 - condition
24:33 - if it's completed and if it is it'll do
24:36 - that like strikethrough
24:38 - and if it's not it will leave it empty
24:41 - right
24:41 - gotcha yeah so to the style it's
24:44 - assigning
24:45 - a text decoration of either line through
24:48 - or empty depending on whether that to do
24:51 - has been completed or not got it so
24:53 - basically for example if it is completed
24:55 - it simplifies this whole thing to that
24:59 - right
25:02 - yeah i'm saying yeah okay i was like
25:04 - yeah okay
25:05 - yes so if it is completed this is what
25:08 - it looks like
25:09 - and if it's not completed it looks just
25:11 - like empty without the line
25:13 - all right let me put this here let's put
25:15 - this here
25:17 - all right hopefully you guys can see the
25:18 - code
25:21 - better now
25:24 - okay so this is what it simplifies it
25:27 - too right if it is completed when i
25:28 - click it
25:29 - yes all right so let's undo this
25:32 - otherwise it completes auto um it gets
25:35 - simplified to this when it's
25:37 - not completed exactly correct so just a
25:40 - fancy way of writing
25:42 - like a long if-then condition
25:45 - got it awesome
25:49 - yeah and if you guys have any questions
25:50 - or you're wondering about something
25:51 - definitely drop that in that's related
25:53 - to this and we'll try to address it as
25:55 - we're going through for you guys
25:59 - what's the difference between class name
26:02 - and class name my class please okay
26:04 - that's a great question
26:06 - so um i think what it's doing
26:09 - if i go back to where was it doing but
26:12 - where did they put the
26:15 - the squiggly that he's asking for where
26:17 - did they do that is it into dues or two
26:20 - in the to-do form
26:22 - so sometimes when you are um
26:26 - in jsx what i know is if you're writing
26:28 - a javascript
26:30 - uh code you wrap it in squigglies
26:34 - when you're when you're writing like
26:36 - evaluating a javascript expression
26:38 - you write it in squigglies and i think
26:41 - yeah and it kind of like boils it down
26:43 - to like html that's what i think it
26:45 - it's happening oh yeah that definitely
26:47 - makes sense because it's it's kind of
26:48 - like
26:49 - hey this is squigglies and that's i mean
26:51 - the code inside isn't regular html it's
26:54 - yeah javascript or if it is like this
26:56 - let me just try and see what happens
26:59 - let's still work break the code it works
27:02 - break the
27:02 - code so this just gets simplified to the
27:05 - same thing it already is i think you
27:06 - could write this one both ways because
27:08 - this isn't a complicated javascript
27:10 - expression
27:11 - that's a good point so that one i think
27:13 - you'll be fine if you just write
27:15 - regular container to be honest
27:19 - that's just what i think then what would
27:21 - be the purpose of putting the jsx
27:23 - squiggly lines
27:24 - maybe you could like assign the class i
27:25 - feel like for this there's no purpose
27:27 - for this i can see a purpose because
27:31 - um i think like it needs to separate out
27:34 - between the next argument no dude you
27:37 - you can have spaces when it comes to
27:39 - html yeah
27:40 - that's proper html so i think here
27:43 - it doesn't serve anything it's just like
27:45 - putting extra set of parentheses in a
27:47 - mathematical expression that doesn't
27:48 - need it you know
27:49 - it's like if you had five
27:53 - plus four and then you just decided to
27:55 - wrap it in parentheses it wouldn't like
27:57 - change it i think that's what i'm
27:59 - thinking for this
28:01 - if it
28:04 - does
28:08 - like i literally think it won't make no
28:10 - difference like if i change this add a
28:12 - to-do
28:12 - and remove this and say add a to do's i
28:16 - think you'll be good
28:16 - yeah it'll be good so yeah uh bro i
28:19 - think the answer to your question is
28:20 - for this it doesn't matter i think you
28:22 - don't need the squiggly
28:24 - yeah you don't need it i think in the
28:26 - more complicated case
28:27 - where to the class name or whatever you
28:30 - need to assign
28:30 - an actual java variable or something
28:33 - right then it might be important
28:35 - but for now you could probably in this
28:36 - case you can take it off because it's
28:38 - regular html as well yeah
28:41 - and if you guys anybody that needs to
28:43 - code access to it here's the github
28:45 - profile
28:46 - you can just use it i just linked it
28:49 - below yo yo
28:53 - aaron aaron nobles bro thank you so much
28:58 - just gave a five dollar donation it says
29:00 - currently working on a project so i
29:02 - can't watch but i'd like to thank you
29:03 - guys for helping me
29:04 - get this far in my coding journey thank
29:07 - you so much aaron
29:08 - really appreciate you thank you
29:11 - guys if you're enjoying this so far
29:12 - smash that like button so let's
29:14 - keep getting this video out to more and
29:16 - more people let's go
29:18 - all right in this video guys we're
29:21 - learning react
29:22 - js with you i'm not a professional
29:24 - react.js developer i have
29:26 - experience with python django a lot of
29:28 - it
29:29 - daniel has a ton of experience with java
29:32 - and doing back-end web development with
29:33 - it
29:34 - so we're picking up react along with you
29:36 - guys we're just having fun
29:38 - all right so hopefully you're enjoying
29:39 - it as well and on the journey with us
29:43 - yo i've destroyed the like button come
29:46 - on chew
29:47 - let's go i love this
29:50 - is it my class of strength uh manpreet
29:53 - says there's no need
29:54 - of the squiggly for container as it is
29:56 - not resolving an expression or js code
29:58 - absolutely so i actually agree guys i i
30:01 - think that for all this stuff
30:03 - you shouldn't have it because i think it
30:05 - just makes it more complicated
30:07 - for no particular reason so
30:10 - i honestly would have it like this
30:15 - you know and i think it will be the same
30:18 - thing this is the
30:19 - code we're using so you guys can go
30:21 - ahead and use this we'll try to put it
30:23 - in the
30:24 - description and that's whoa somebody
30:26 - just gave 2 000 of something
30:34 - bitcoin
30:37 - so to this youtube video description
30:40 - below guys
30:41 - i just added this repository
30:44 - so if you guys want you can now click in
30:47 - the description refresh the page and
30:48 - then go open this code up and you guys
30:50 - could use this
30:51 - um this app fa jc might have a good
30:54 - point
30:55 - he says thank you for the donation by
30:57 - the way oh thank you yeah go for it
30:58 - he says it's for consistency purposes
31:04 - i think he's talking about the
31:04 - squigglies on those so i think it's just
31:07 - like
31:08 - you know i think anything where you
31:10 - don't need it
31:11 - like i think it's a little i think
31:14 - simplify it you know it's like that's
31:16 - how i would write python code if you
31:17 - don't need an additional set of
31:19 - parentheses or something yeah uh
31:22 - jose says jose antonio says what do you
31:25 - people think about typescript is it
31:26 - useful
31:27 - typescript is pretty useful it basically
31:29 - lets you like
31:31 - um essentially turns javascript into
31:35 - java
31:36 - you know it's like statically typed does
31:38 - it just make it more general or what
31:40 - yeah it just provides you it's i think
31:43 - it makes you less error-prone and things
31:45 - like that gotcha yeah
31:47 - that's what you have to define your data
31:48 - types in typescript
31:50 - so that's what i didn't like about uh my
31:53 - projects with c
31:54 - plus yeah it was like it's like even
31:56 - it's the next
31:57 - level dude like you have to say oh how
31:58 - many bits is gonna have or she like that
32:00 - you're just like oh my god
32:02 - can't mess up all right so
32:06 - i think i get the so now on the to-do so
32:09 - i get the decoration and how that's
32:11 - working and how the p style
32:13 - is is working for when i click here and
32:16 - strike through
32:18 - input type so this is the check box this
32:21 - is a little square they could click on
32:23 - and off
32:24 - so on change anytime i change this
32:28 - it can call a function calls mark
32:30 - complete
32:32 - based on the index cool and the index is
32:35 - being passed through here
32:40 - so i'm curious
32:44 - how's it getting that index when's it
32:46 - getting assigned i just thought about
32:47 - that too right now
32:49 - oh i think i know where go to app.js i
32:52 - saw it
32:59 - oh so there it is it's in the mapping
33:03 - so you see how for that to do it's
33:04 - assigning
33:06 - the the index key equals index
33:11 - index equals index
33:14 - and it's giving it a mark complete
33:15 - function
33:18 - what about the edit text hmm
33:25 - you go to app.js real quick yeah i think
33:28 - there's a function we didn't explore
33:29 - that might be important
33:32 - no edit titles also just so these
33:34 - functions are being passed down the
33:36 - indexes
33:37 - right so how is it picking up this exact
33:40 - so my assumption is it's gonna be from
33:42 - the form when someone creates it they
33:44 - have to add an index
33:46 - right to this new object oh
33:49 - does that make sense yeah just figuring
33:52 - out how is it passing it through you
33:54 - know what i mean like
33:56 - so i click it
33:59 - on change
34:02 - i mean it's this thing that runs right
34:06 - yeah yeah so so the on change does the
34:08 - mark complete the mark complete was the
34:09 - one that
34:10 - would change it to true or false on the
34:13 - remember and it would return the new
34:15 - list of things
34:16 - where or complete yeah this one remember
34:18 - so it would just assign the old one to
34:20 - the new to do's the new to do's
34:22 - that is complete we would invert it for
34:23 - the one that got chosen
34:25 - then we'd set it yeah
34:29 - oh yeah doing tailwind css would be fun
34:31 - too
34:33 - all right so hold on hold on though
34:36 - bro so i click it how's it getting the
34:40 - index
34:42 - so this is what i'm saying i think the
34:44 - index
34:46 - is all right so how is it getting the
34:48 - index i believe is
34:49 - from the to do's js again go back there
34:52 - yeah
34:54 - it's right here right so here's we're
34:57 - saying we have a to do
34:58 - yeah and when we're mapping it out i'm
35:00 - not entirely sure how this mapping
35:02 - function happens but you have it to do
35:03 - and you have an index
35:04 - so i'm assuming it's some sort of
35:06 - incremental thing right so for each to
35:08 - do
35:08 - we're gonna give it an index
35:10 - incrementing yeah and then here it's
35:12 - assigning the index so
35:13 - can we look at that like the to do is on
35:14 - map like google it let's see what this
35:16 - function does
35:18 - um i mean i think it's just looping
35:21 - through and then
35:24 - assigning it right that's what map
35:26 - generally does it allows you to just
35:28 - yeah i mean that goes through like every
35:31 - or yeah don't do to-do's map do
35:32 - like uh javascript yeah yeah react
35:39 - perfect so what's it say here maps
35:41 - number
35:42 - number two doubled so i'll give you back
35:47 - an array it seems like and that's that
35:50 - rave to do that we have
35:52 - boom right there so
35:55 - this gives us back an array
35:58 - right to do that map gives us back
36:03 - oh interesting okay so here it assigns a
36:05 - number
36:06 - right it passes in the number as a
36:08 - function and then the function is
36:10 - actually the numbers times two
36:12 - that's what it cares about and that's
36:13 - what it creates the array for right yeah
36:15 - so here passes in a to-do and an index
36:18 - and what it's going to do is this
36:20 - function which is it's going to create a
36:22 - to do html tag
36:24 - yeah and it's gonna assign everything
36:26 - it's gonna send it to do it's gonna
36:27 - assign the
36:28 - the key the index the mark complete and
36:31 - the edit title
36:33 - got it
36:36 - so then when i click it kind of so it
36:38 - already knows
36:39 - it has the index and then it just like
36:42 - calls the mark complete function on it
36:44 - and then it does
36:45 - the it does everything that it needs to
36:47 - do at that point yeah so i mean
36:48 - it doesn't do it i just think it sets it
36:50 - up got it
36:52 - like it passes it to this one like all
36:55 - this does is it passes it to this
36:56 - function here
36:57 - ah right right so here it assigns those
37:00 - i know we call them parameters or what
37:02 - were those things the props the props
37:03 - right yeah the signs are props for the
37:05 - to-do's so now a to-do has the to do
37:07 - itself has the index has the mark
37:09 - complete
37:10 - and has the edit title now here it got
37:13 - it from the mapping
37:14 - so we do the to-do's so let's let's back
37:17 - up a little more
37:18 - the to-do's receive the to-do's array
37:20 - uh-huh if they were marked complete
37:24 - wait do you think this is in the rear
37:26 - that's just one that has to be the whole
37:27 - thing right
37:28 - yeah i think that's that should be all
37:30 - of the to-do's right that's why it's
37:31 - to-do's
37:32 - like it should be getting this yes yes
37:36 - yes switches
37:36 - all of those yeah like we're yeah
37:40 - where is this being used yeah
37:48 - okay all right that's making sense then
37:50 - so we have
37:51 - yeah the the the to dose component that
37:54 - receives all of its to-do's
37:57 - along with those other parameters right
37:59 - we start to create this div
38:01 - for the component which is gonna be
38:02 - called to-do list yeah inside of this
38:05 - div
38:06 - we're going to do a to-do's map so we
38:09 - already have the to-do's right and
38:10 - that's where we're mapping it
38:12 - so each to-do of the to-do's is going to
38:15 - get mapped
38:15 - to an index so i'm assuming that index
38:18 - is that incremental thing
38:19 - yeah from now it's going to create a to
38:22 - do component
38:24 - right that to do component is going to
38:26 - pass in the specific to do that mapped
38:27 - out
38:28 - yeah for the key which is
38:32 - i don't know why they're doing the key
38:33 - because i don't see the key anywhere
38:34 - here yeah the key
38:36 - sometimes um react will use um like
38:39 - there are these plugins where
38:41 - it lets you have nice little animations
38:43 - to things coming up
38:44 - um interesting it's also kind of you
38:47 - right now it's not being used kind of
38:48 - anywhere i don't even think it'll make a
38:50 - difference
38:50 - yeah so what about this what if we can
38:54 - print out on the ui the index
38:58 - yeah and then let's just like manipulate
38:59 - it a little bit here just to see kind of
39:01 - what's happening
39:02 - right you think we can do that real
39:04 - quick do what
39:06 - so let's go to the ui let's show the the
39:09 - to do
39:09 - along with the index so we know what the
39:11 - index is
39:12 - and then let's kind of manipulate it or
39:14 - let's just do that first okay it should
39:16 - say like
39:16 - write a new blog post dash one
39:20 - pick up laundry dash two sure so if we
39:22 - wanna do that for the ui
39:24 - what are we thinking we could do here i
39:26 - think it's gonna be here right because
39:28 - this is a to do
39:28 - yeah this is specific to do so right
39:30 - there um
39:32 - right after that i would add in like the
39:36 - to do dot id
39:40 - to do yeah so i don't know let me
39:42 - actually try to do that id
39:44 - here and let's see what it gives me yeah
39:46 - exactly
39:48 - there we go getting the id
39:51 - perfect
39:58 - that's interesting you just get to would
40:00 - you do text yeah i did to do that
40:02 - okay okay cool so i guess what i'm
40:05 - getting to is
40:06 - do the id again yeah
40:10 - now let's go back to this one and what
40:13 - happens if you change the one for the
40:14 - key does that change anything
40:17 - right do like index plus plus or index
40:18 - plus one
40:20 - i mean this i don't think is going to do
40:21 - anything for now
40:24 - but i think if we changed index
40:28 - oh so what i'm assuming if you click one
40:31 - yeah yeah that's like that's gonna mess
40:33 - it up so this is where
40:35 - this is where that data is getting
40:36 - passed in then like that is gonna break
40:38 - it that's what i was thinking it's gonna
40:39 - break
40:40 - yeah so this is why this is like more
40:44 - back end uh this is not being used for
40:46 - now i don't think for anything
40:48 - but this is the one that we're using to
40:51 - do our
40:52 - strikethroughs and everything that's why
40:53 - it's being passed down here
40:55 - perfect so i guess did we get the answer
40:58 - that we were looking for i think we did
40:59 - right yeah which you were asking where
41:00 - do we get the index from
41:02 - and the index just comes from the
41:03 - mapping right and i guess that's why i
41:05 - wanted to look up this documentation
41:07 - because i'm curious like what happens if
41:09 - you add in more parameters what are
41:11 - those parameters what do those
41:12 - parameters mean
41:13 - right yeah or do we just assume if you
41:15 - had two parameters the second one is
41:16 - always going to be the index
41:17 - does that make sense right yeah i mean i
41:21 - think
41:23 - that that's why me personally i would be
41:25 - curious just to do like your
41:27 - js react dot maps function yeah
41:31 - what does it do like i know we went into
41:32 - that a little bit but i'd probably dig
41:33 - deeper just to really understand it for
41:35 - me
41:36 - right i'm doing multiple components man
41:43 - let's see if we could find one that has
41:46 - multiple parameters
41:50 - oh more than more than that because you
41:52 - see how this is just
41:54 - one yeah yeah this one just one this
41:55 - one's two like can we have three
41:57 - parameters
41:57 - i don't know like how right i see what
42:00 - you're saying like how many parameters
42:02 - can the map
42:02 - function have yeah because all these
42:05 - examples seem to just have one parameter
42:07 - yeah rendering an array
42:18 - i mean that's the actual documentation
42:28 - right
42:38 - there i think that's it right is that
42:42 - the callback no this is still not
42:46 - her belly
42:54 - so what are you trying to get at by
42:56 - adding another argument like what do you
42:59 - i guess what i'm trying to get at is
43:03 - just to understand the dot map because
43:04 - my assumption is with the dot map
43:07 - if you pass in the first parameter
43:09 - that's going to be the actual
43:10 - object right and if you have a second
43:12 - parameter or you name a second parameter
43:13 - right
43:14 - that's always going to be the index like
43:16 - is that always true is there a third
43:17 - parameter where maybe it could be
43:18 - something else like
43:20 - right that's kind of why i just want to
43:21 - understand more about that dot
43:23 - functionality but i think what we just
43:25 - had right now about the callback
43:26 - function
43:27 - i think that was it right so so
43:30 - far what we have is let me refresh this
43:34 - did we
43:34 - okay to do that text so so far
43:38 - we just have this thing over here i mean
43:40 - i feel like
43:41 - most of the app i understand
43:45 - pretty much how it works right like we
43:47 - understand how the to-do form works and
43:48 - it's a component
43:50 - we're using this component inside of our
43:52 - app
43:53 - js we have the to do form right here
43:57 - we're getting our this is one of our
44:00 - components that we're using from here
44:02 - this is the other component that we're
44:03 - using
44:05 - right all of our styling is being done
44:08 - here
44:11 - in app css
44:17 - so i feel like in terms of understanding
44:19 - how this
44:20 - app works i understand pretty much
44:25 - all of how it works i think the next
44:27 - steps for us would be to like
44:29 - learn how to actually edit
44:32 - and be able to even change these and the
44:35 - few things that we wanted to add was
44:36 - like
44:37 - uh be able to drag this up and down
44:40 - that'd be interesting
44:41 - right yeah
44:46 - damn that's it do you guys in this chat
44:51 - know how you would go about doing that
44:53 - because that's something
44:54 - new for us to learn with react and
44:56 - actually apply it
44:57 - so i want to know like is that something
44:59 - that you guys
45:01 - is there any i know that we have some
45:02 - people who are like actually
45:04 - react developers in here himanshu says i
45:07 - want to master react
45:09 - elijah says that was it
45:13 - ludus has removed the key and then you
45:14 - will see yep
45:17 - um when pretest index is like the
45:19 - position of the to do
45:20 - text if you're marking something is done
45:22 - it is calling mark complete
45:24 - which will show a line
45:27 - though based on the index and index is a
45:30 - default property
45:32 - yeah and indexes was the thing that was
45:35 - actually being used
45:36 - whereas the key right now wasn't a thing
45:39 - that we were
45:40 - using map is for iterating yep
45:46 - a little out of box do we need do we
45:49 - really need else if statements in
45:51 - python
45:57 - i mean you don't really need else if you
46:00 - can just keep doing
46:02 - if else but i liked it
46:08 - line through strikethrough yeah
46:13 - damn so we're going to keep on learning
46:16 - react i want to keep on actually
46:18 - increasing my skills
46:20 - in it i want to actually i think it
46:22 - would be cool to be able to build
46:24 - full-on projects with it and add more
46:25 - functionality to it
46:27 - so this upcoming week uh
46:30 - i'm actually interested in taking on the
46:32 - challenge of building the tesla app
46:34 - [Music]
46:35 - so what does that look like uh this is
46:38 - what it looks like so this is what i'm
46:40 - interested
46:41 - in building that's fancy
46:45 - definitely understanding how to build
46:47 - those tesla boxes
46:48 - so that's that nice little like scroll
46:50 - lock as i go down
46:54 - and then um where's that like i think
46:56 - they have a calculator too or something
46:59 - which gets pretty fancy oh my god
47:03 - i mean i don't know about all of this
47:05 - stuff the animations
47:06 - yeah it's like crazy animations but let
47:09 - me see where you can actually order the
47:11 - car and then there's some kind of
47:12 - calculator that it has
47:14 - like so let's go to order now
47:19 - i think that would be fun to like build
47:21 - build that
47:26 - dude look at this
47:29 - let's buy one right now i like how easy
47:31 - they make it like for example
47:33 - you just pick performance click next and
47:36 - then they're just like letting you
47:39 - get it this is this is why
47:42 - nice ui this is why nice ui the user
47:46 - experience
47:48 - is so important bro that's kind of like
47:54 - that's insane
47:58 - i mean you want to talk about high
48:00 - ticket like this is high ticket
48:03 - this is crazy people ordering sixty
48:06 - thousand dollars what happened
48:08 - just 10k bro back end is jacked
48:12 - auto steer on city streets oh so this is
48:14 - what it's actually showing you right
48:15 - here
48:16 - this is what this animation is showing
48:18 - you and you can add that
48:20 - on for 10k like this here
48:23 - the who like whatever developers are
48:26 - actually doing this
48:28 - like that's insane that's actually
48:31 - bringing them a lot of money
48:32 - like imagine somebody sitting here
48:34 - they're like yeah i'll actually take
48:35 - that feature i'll add this
48:37 - what else do they got dude how expensive
48:39 - can this car get
48:41 - let's just stack up all the [ __ ] back
48:44 - end products on there
48:45 - um i mean let's what if we actually
48:48 - ordered it on this
48:50 - uh that's it i mean that's a lot but
48:52 - cash
48:54 - yo oh my god imagine having a 700
48:57 - payment
48:58 - your car i mean 684
49:02 - i might do today 100 i'm down bro
49:06 - so what is this 4 500 down
49:11 - [ __ ] scamming me scam after
49:14 - something savings i mean i'm sure
49:16 - there's some kind of down
49:17 - i feel like you have to put some type of
49:18 - payment down you're leasing it yeah that
49:20 - 4500 though so 4500 then 684 that's not
49:23 - that bad paid off in three years
49:27 - and i think you can just order it dude
49:29 - like i think you just put in your credit
49:30 - card and that's it
49:32 - that's actually pretty crazy yo let's
49:34 - get some solar stuff
49:35 - bro so here like actually getting
49:38 - good web development skills in to make
49:42 - something
49:45 - somebody's like buy it please buy it
49:48 - that would actually be pretty amazing
49:50 - ab ryan says watching uh you're live for
49:53 - the very first time let's go
49:54 - let's go but like i want your phone
49:57 - number
49:58 - damn i love that
50:06 - i'm just seeing manpreet i can explain
50:09 - in short so basically okay cool
50:11 - responding to somebody oh my god
50:14 - this guy's still telling us about keys
50:16 - bro
50:19 - praveen i love it
50:22 - so i mean people who can actually
50:26 - learn these skills to me it makes a lot
50:28 - of sense why tesla would pay their
50:30 - developers
50:31 - a lot of money because if you can add
50:35 - these functionalities
50:36 - in where if you're about to place an
50:39 - order
50:40 - and it makes you add on a 10 000 thing
50:44 - they can hire 10 developers to build out
50:46 - their functionality make sure their app
50:48 - looks great because
50:50 - one order a day one cool looking
50:53 - animation can
50:54 - help them like close out ten thousand
50:56 - dollars extra dude
50:58 - you know what this is literally yeah
51:00 - this
51:01 - is the equivalent to mariah's hybrid
51:04 - product because think about it at a
51:06 - regular car
51:07 - dealership yeah to add that ten thousand
51:09 - dollar thing the salesman guy
51:11 - sits down with you yeah and he's like
51:13 - hey you want the leather seats another
51:15 - thousand dollars or whatever and you're
51:16 - like no they're like oh but the leather
51:18 - seats you know like they have to pitch
51:19 - you
51:19 - yeah get on the phone with you right
51:21 - yeah yeah yeah that's true but it's like
51:23 - here it's just like a click of a button
51:25 - on the page that's [ __ ] crazy like
51:28 - you said dude you hired developer to
51:29 - have that you don't need a salesman to
51:31 - get an extra 10k on one product
51:34 - it's on the page because the experience
51:36 - and the brand
51:39 - that's kind of good it's kind of like um
51:43 - i mean here the react developer is the
51:45 - salesman
51:46 - yeah you know what i mean yeah because
51:49 - whatever it is maybe i don't know if i
51:51 - order something
51:52 - i mean i don't know if i can order uh
51:54 - solar panels solar panels
51:57 - but whenever that order bump comes in
52:00 - and they make it
52:01 - look great one thing that they tack on
52:04 - is boom for somebody who can afford it
52:06 - it's not that much and some not you know
52:09 - a lot of people get teslas
52:10 - for them to tack that on i don't think
52:12 - it's like that big of a deal for most
52:14 - people
52:15 - and so i don't know to me it's just
52:17 - blowing my mind that they
52:19 - let you just order that from the
52:21 - internet because most of the times you
52:22 - can't order these things
52:23 - from the internet and second thing is i
52:25 - love actually how they can use the
52:27 - development and the experience of it to
52:28 - be able to sell
52:30 - like it's actually part the great user
52:33 - experience
52:34 - is part of the sales process yeah yeah
52:37 - and i mean it gets rid of
52:39 - like dude oh no i was gonna say do they
52:40 - even have tesla sales people
52:42 - like but they do have some of those demo
52:44 - stores where you could walk in and ask
52:46 - questions but i think in the end you
52:48 - still order online like you don't deal
52:50 - like there's not someone trying to close
52:53 - you
52:53 - on the tesla you know yeah let me see
52:56 - tesla jobs developer
52:58 - are they looking for software engineer
53:01 - careers tesla let's see
53:04 - i wonder if they are they actually
53:08 - list out project developer that's
53:10 - different
53:11 - charging infrastructure
53:16 - a gigafactory bro bro they're hiring
53:19 - their own developer or engineers to
53:21 - build their own gigafactories that's
53:23 - crazy
53:24 - what is that i think those are just like
53:27 - the big ass factories for either
53:28 - production they're like
53:29 - charging so wait hold on where did that
53:31 - go software engineer
53:35 - i wonder if they actually list out the
53:37 - technologies there we go
53:39 - react and java so build and support
53:42 - internal
53:43 - developer tools back and front end with
53:45 - typescript
53:46 - so yeah these are important to learn
53:49 - you got typescript react what's ror no
53:52 - clue
53:53 - return on oh [ __ ]
53:57 - oh we're not sure should we be sharing
53:58 - screen we're we should still be live
54:01 - i know but oh and there might be right
54:03 - yeah we're still live but
54:05 - our chrome just crashed so super
54:08 - annoying
54:11 - yeah it's always super annoying when
54:12 - like chrome crashes
54:14 - this is the new chrome update does this
54:16 - happen to you guys where your chrome
54:18 - crashes and it just like doesn't like
54:21 - i i don't know why but it started
54:23 - happening after the new update started
54:25 - happening a lot
54:26 - what is ror if this happens to you give
54:30 - us a thumbs up so we know it's not just
54:32 - us
54:33 - r-r oh yeah i never saw it as ror
54:37 - that's the first time i'm actually
54:38 - seeing it written like that
54:41 - do you know what the cool kids call it
54:43 - this is what you always talk about
54:44 - we expect you to have strong cs
54:46 - background and
54:48 - an ability to resolve complex
54:50 - engineering issues
54:52 - and other stuff but yeah i think that's
54:54 - what you talk about you're like dude you
54:55 - have to have
54:55 - good problem solving abilities right
54:58 - yeah and i think that doesn't just apply
54:59 - to code it just applies to anything in
55:01 - general
55:01 - right like if we're doing this live
55:03 - something goes down he's like oh like
55:04 - figure it out right yeah or whatever it
55:06 - is that you're doing things are always
55:07 - going to go wrong
55:08 - you just have to build that skill of on
55:11 - the spot
55:12 - solving problems right yeah that skill
55:16 - is extremely important and i think
55:18 - problem-solving skills
55:20 - all of these hiring managers actually
55:22 - put problem-solving skills on a pedestal
55:24 - above everything because even with react
55:26 - at the end of the day
55:27 - it doesn't matter if it's react or if
55:29 - it's any other framework
55:31 - they want you to be framework agnostic
55:33 - and
55:34 - they want you to just have great ability
55:36 - so tomorrow if they switch
55:38 - to angular or just switch to view or
55:40 - they switch to something else they want
55:41 - you to be able to crush it
55:43 - they want you to still be able to solve
55:44 - the actual problems that they have
55:46 - and and i think that's kind of where the
55:49 - typical
55:50 - big tech programming algorithm type
55:53 - interview questions come from right
55:55 - because hey like it doesn't matter what
55:56 - language you use
55:57 - let's see if you know some basic data
55:59 - structure although i still think it's
56:01 - kind of like a little overrated
56:03 - i definitely don't think you should jud
56:04 - like someone would be a good
56:06 - good programmer or not just based off
56:07 - whether they could solve algorithms
56:09 - but i think that's why they adopted it
56:10 - because they're like hey we want to be
56:11 - able to
56:12 - test people yeah to see if they have
56:14 - good problem solving skills but i just
56:16 - don't think that's the way to do it
56:18 - right they're even now starting to shy
56:20 - away they're they're starting to do less
56:22 - and less of
56:23 - whiteboard type of interviews and i mean
56:25 - frank was talking about this too
56:27 - oh what do you think remember he was
56:29 - here and he was talking about how
56:31 - they're starting to do uh less
56:34 - whiteboard interviews like just p uh
56:36 - companies in general
56:37 - and they're realizing that that's not
56:39 - the best way to judge candidates
56:41 - because sometimes he says people have
56:44 - anxiety
56:44 - and they get scared when they're in an
56:47 - interview
56:48 - that's happening over whiteboard and
56:49 - they just don't perform well
56:52 - but they actually might be great given
56:55 - a week two weeks a month working there
56:57 - yeah
56:58 - yeah for sure i mean i definitely
56:59 - remember going through those interview
57:01 - processes like
57:02 - you wake up you couldn't even sleep the
57:03 - night before how many interviews have
57:05 - you
57:06 - uh i went through microsoft uh youtube
57:09 - google's and blue origins and
57:12 - i only only went through those and they
57:13 - got those job offers and at that point i
57:15 - was like yeah like
57:16 - i don't want to play anywhere else did
57:18 - you get a job offer from google
57:19 - yeah the youtube google one what did
57:22 - they offer you
57:23 - are you able to say that or not yeah i
57:25 - could say that so that was i mean very
57:27 - similar to
57:28 - the microsoft one which was like they're
57:31 - both
57:31 - at uh 100 110k
57:35 - leaving college but then the benefits
57:37 - are insane dude like
57:38 - 401k matching for every dollar you put
57:40 - in they would match
57:42 - uh 50 50 cents meaning if you maxed out
57:45 - your 401k
57:46 - at 19 000 they would put in half of 19
57:50 - 000 which is 9500.
57:52 - so at the end of the year if you maxed
57:53 - them out there would be twenty seven
57:55 - hundred
57:56 - uh twenty seven thousand five hundred
57:58 - dollars in your 401k
58:00 - holy [ __ ] so that's like an extra almost
58:02 - 10k per year right then like
58:04 - the stocks incentives that they would
58:05 - give you they would give you the ability
58:06 - to buy the stocks
58:08 - at like a 10 discount so if uh if a
58:11 - microsoft stock was at a hundred dollars
58:13 - at the time they get to cash in and they
58:14 - they limit the stocks
58:15 - yeah you could buy at ninety dollars
58:18 - right you could right away sell it cash
58:20 - out get that ten percent
58:21 - or you could keep it long term it's
58:22 - already a profitable stock anyways
58:24 - damn but and then even then do like i
58:26 - remember at microsoft
58:27 - specifically at car dealerships yeah
58:30 - it's a big deal if you're trying to get
58:31 - a new car you're like
58:32 - what's your job like you have any pace
58:33 - they need to see like a month's worth of
58:35 - pay stubs yeah what if you tell them
58:36 - like yo i got a job microsoft they're
58:38 - like oh
58:38 - go ahead and get this card dude like
58:40 - you'll pay it off later damn
58:43 - so it's just crazy man like just i think
58:45 - that's crazy where big tech wins
58:47 - is the amazing so hold on an incentive
58:51 - before we move on to that so you got you
58:53 - applied to these three jobs and they all
58:55 - gave you offers
58:56 - yeah between google youtube microsoft
59:00 - and blue origin yeah so google is
59:01 - youtube right because
59:02 - right what made you go to what made you
59:05 - say no
59:06 - to google and microsoft for me it was
59:09 - more of saying yes to blue because i
59:10 - realized
59:11 - i can always just go to big tech later
59:14 - like
59:14 - blue origin was still at like when i
59:17 - joined there were thousand three hundred
59:18 - employees
59:19 - i think right now they are almost like
59:21 - at three thousand so there's a lot of
59:23 - growth in the two and a half years that
59:24 - i was there
59:25 - yeah and i was like dude like this
59:26 - opportunity is once in a lifetime like
59:29 - in the future in 50 years there's gonna
59:30 - be rockets up there and be like dude i
59:32 - was able to be part of that
59:35 - you know what i mean that's going to be
59:36 - normal maybe 50 years 100 years i don't
59:38 - know when that's going to be that's
59:39 - going to be normal
59:40 - yeah i was part of it when it wasn't
59:42 - normal that's kind of what
59:43 - what it was for me and what were your
59:45 - interviews like with google
59:47 - and microsoft um dude they were they
59:49 - were intense dude like the end of those
59:51 - days your brain is just fried you just
59:52 - wanted to go to sleep dude but
59:54 - you would show up at 8am yeah to the
59:57 - place
59:58 - and they kind of give you the breakdown
59:59 - like all right you're gonna have like
60:01 - these interviews but
60:02 - they all consisted of five to six maybe
60:05 - i think it was five technical interviews
60:06 - yeah
60:07 - and they would take you in microsoft i
60:10 - remember they would take me over to
60:11 - a guy specific office yeah i would go
60:13 - into his office and they all had like
60:15 - [ __ ] whiteboards
60:16 - like in their own houses and then um
60:20 - that's what it was it was like three
60:21 - technical interviews yeah then at lunch
60:23 - you would go to lunch with another
60:25 - employee and they would tell you like oh
60:27 - don't worry it's not part of the
60:28 - interview but obviously it's like a
60:29 - behavioral interview
60:31 - just kind of want to see if you're like
60:32 - a cool dude if they can vibe with you if
60:33 - you just pass their
60:35 - googliness check for you for youtube or
60:37 - just
60:38 - your cool dude from microsoft yeah after
60:40 - that after your lunch
60:42 - you get in two more rooms and you do
60:44 - coding interviews and what those
60:45 - interviews
60:46 - were i don't know how they've been
60:47 - changing but it was you show up
60:49 - they show up they talk five minutes
60:51 - about your resume ask you like a
60:52 - question or two and they're like all
60:53 - right boom let's go over to the
60:54 - whiteboard wow and the rest is just
60:56 - doing the whiteboard stuff
60:57 - huh so after that dude you're just like
61:00 - they're like all right
61:01 - good job whatever blah blah blah and
61:03 - what was the difficulty like what
61:05 - were they giving you a lot of
61:06 - theoretical questions or what was it
61:08 - um no i think
61:12 - like how were you all also like how were
61:14 - you prepared for
61:15 - them you know dude i prepared using
61:18 - firecode.io
61:19 - i really like firecode because here's
61:21 - the thing about firecoat
61:23 - is they use a memory recall or i don't
61:26 - know what that
61:27 - specific terminology is yeah but it'll
61:29 - take you through levels it'll take you
61:30 - to level one level two level three
61:32 - like easiest to hardest right yeah but
61:34 - while you're doing level two
61:35 - like every three or five problems you
61:37 - solve
61:38 - you'll bring back an old problem and you
61:40 - like solve it again
61:42 - so like you're developing also pattern
61:44 - recognition yeah yeah exactly right so
61:45 - then after a moment i just remember i
61:47 - would go in here and just [ __ ]
61:48 - eat them for breakfast dude i would just
61:50 - start knocking them out you know
61:52 - and i felt and that was only like at
61:54 - level three it has like five levels
61:55 - which is a lot more problems
61:57 - yeah but if i already get to level five
61:58 - it's just like that's what it is man you
62:00 - got to level five
62:01 - no no we've already gotten to level five
62:02 - that has been even that much more easier
62:04 - but that's what it is man it's
62:05 - recognition so those questions they
62:07 - asked you at google and these companies
62:09 - did some of them did you feel like some
62:12 - of them came
62:13 - from like fire code io or was it
62:16 - more difficult than that here's the
62:17 - thing it's not about
62:20 - getting the exact question like oh yeah
62:22 - i remember i practiced this one
62:23 - but it's literally what you said pattern
62:25 - recognition like there's one i can't
62:27 - remember the exact question but it was
62:28 - something long like all right imagine
62:30 - you have this lab of rats and they just
62:33 - [ __ ] decided to
62:34 - reproduce right how can you tell me if
62:37 - rat
62:37 - a and b are related and like by how much
62:41 - so that's just pattern recognition
62:42 - because when you think about
62:42 - relationships you think about like
62:44 - parents
62:45 - yeah and then when you think about
62:46 - parents you think of like a family tree
62:48 - or trees or graphs
62:49 - yeah in this case it'd be a tree not a
62:51 - graph because there's no like or
62:52 - there is some there could be some
62:55 - circular things but that's like all
62:56 - right cool
62:56 - now i know that's probably the type of
62:58 - data that i'm gonna have to store
63:00 - so now what's the problem all right well
63:01 - the problem is if i have a mom and a dad
63:03 - then that's going to create another note
63:04 - so i know i have each node has at least
63:06 - two parent nodes
63:07 - yeah each paranoid can have multiple
63:09 - child each node can have
63:10 - multiple child nodes you kind of start
63:12 - to figure out how this data is going to
63:13 - be stored
63:14 - yeah okay now if i want to find if a is
63:17 - related to b
63:18 - yeah and if so by what degree of
63:19 - separation what can i start doing
63:22 - right yeah so because you're doing doing
63:23 - the graphs the first thing i thought was
63:24 - like all right i could do with bread
63:26 - or bread first or depth first search
63:28 - yeah now for those of you who
63:30 - might not be familiar that could be you
63:31 - could follow one string
63:33 - of all right check this this this guy's
63:35 - dad's dad dad dad dad
63:37 - did that to you get to the origin yeah
63:39 - and see if you were able to come across
63:41 - it yeah not check his mom's mom go all
63:44 - the way to the origin
63:45 - if not to go to the dad's mom so you go
63:48 - all the way to to like as deep as it
63:50 - gets
63:51 - or breath first is like check the mom
63:53 - check the dad if it's not then check the
63:55 - mom check
63:55 - the dad check the mom check the dad of
63:56 - the mom and the dad if it's not then
63:58 - that one's more like you go
64:00 - wide instead right right but here's the
64:02 - thing there's also children
64:03 - so you have to go both up and down right
64:06 - so i forgot what the hell how i was able
64:08 - to do that like now i'm thinking i'm
64:09 - like oh my god what the hell
64:11 - but that was like the type of question
64:14 - that i had to code up
64:16 - yeah so i think i ended up doing a graph
64:18 - along with
64:19 - you know in terms of like pattern
64:20 - recognition i was like i'm probably not
64:22 - to store this data somewhere as i'm
64:23 - going through it
64:25 - so i could look through it so i got a
64:26 - stack yeah
64:28 - so that as i went through a parent i put
64:30 - in the stack
64:31 - so for example if i was doing depth
64:34 - first
64:34 - i could go through all of those put them
64:36 - on the stack search through the stack
64:38 - once i'm done searching to a stack if i
64:39 - find what i need
64:40 - yeah i'm done if not then go back and do
64:43 - another path or something like that
64:45 - damn and then did they make you you
64:47 - ended up having to write the
64:48 - algorithm as well right and you chose
64:51 - java or
64:52 - yeah so at that point i i did fire
64:55 - code.i o using java so i was able to
64:56 - practice that so that's what i just felt
64:58 - most comfortable with but in reality
64:59 - queues
65:00 - java python javascript any major
65:02 - programming language but
65:03 - right that's i guess up to you at that
65:06 - point
65:06 - damn that's really powerful dude like to
65:10 - actually
65:10 - uh use we're gonna head off uh in just a
65:13 - second
65:14 - but yeah that's actually really powerful
65:16 - i think we should actually teach that at
65:17 - some point
65:18 - some of those things yeah we could
65:19 - definitely get into that stuff yeah
65:21 - that's
65:21 - really cool because it doesn't even
65:23 - matter what language it is it comes down
65:25 - to just problem solving
65:26 - yeah for sure all right guys so what i
65:29 - want to say
65:30 - is i hope you guys enjoyed this video
65:33 - um i'm just picking up react and just
65:35 - having fun
65:36 - with daniel and uh yeah hopefully you
65:39 - guys had fun
65:40 - enjoyed pick up some stuff with us
65:43 - one tip that i want to give you is i
65:46 - like to pick up um
65:47 - especially if you know coding in another
65:49 - language and you for example i know
65:50 - python
65:51 - it's really easy and it makes it easier
65:53 - to pick up something
65:55 - by like looking at somebody's code
65:58 - downloading and playing around with it
66:00 - so i linked the source code to that
66:02 - person's code raj raj hussein something
66:05 - like that
66:05 - is his name and we took his code broke
66:08 - it down went through it and understood
66:09 - okay how this app is working now this is
66:11 - just day one
66:13 - if we did this every single day by day 5
66:17 - 10 30. we would know how these apps work
66:19 - we'd be able to build them from scratch
66:21 - and i highly recommend you do it like
66:23 - that and then play with it and break it
66:24 - and
66:25 - it'll help you understand and along with
66:27 - playing with it here's a challenge to
66:28 - you
66:28 - try to add some functionality to it if
66:30 - you can't think of any ideas
66:32 - think about this what if you could make
66:33 - it drag and drop what would that yeah
66:35 - or what if when you do it to do it
66:37 - disappears or moves it to like some sort
66:39 - of archive or something like that
66:41 - or even adding a date to those things
66:43 - like a little timeline yeah that could
66:45 - remind you it hits those dates so those
66:46 - are three ideas that it's like
66:47 - once you start to implement those you
66:49 - could really start to get a better
66:51 - understanding of react and really start
66:52 - to learn
66:53 - or take that to-do list app and add a
66:55 - database using something like firebase
66:57 - so the data actually stays there so it
66:59 - doesn't go away once you hit refresh
67:01 - guys um that's it hopefully you enjoyed
67:04 - it and had fun
67:05 - we'll do more of these and more advanced
67:08 - ones where we are building projects
67:10 - um so be on the lookout for that thank
67:12 - you guys smash the like button we love
67:13 - your beautiful face this is qazi and i'm
67:15 - with
67:16 - daniel here and we will see you on the
67:19 - next one
67:22 - [Music]
67:24 - peace

Cleaned transcript:

what is up what is up people what is up ladies what is up gentlemen how you doing this is kazzy from cleverprogrammer.com and i'm here with daniel what is up guys i hope you guys are having a wonderful day today and what are we gonna do today quasi guys today we're gonna be doing something fun so i decided daniel and i decided hey let's learn more about react and let's sharpen our react.js skills because we're just inspired by you guys right i mean the react is such an awesome tool that you can have in your tool belt and we want to have that in our own tool belts so what's going to be cool about this is you're going to be watching me learn and daniel learn and you can learn with us okay and uh we are going about learning it in a pretty interesting way so i i i think you might pick up some skills from there too how you can actually pick it up faster i think it's important because you're going to realize we don't know everything right not everyone not anyone knows everything so we have a lot of learning to do i'm from python in django world so i'm good at that but react is new so i want to pick that up you'll see how a developer goes to another language and picks it up and daniel has um mostly background yeah java background and he's worked for a com blue origin and he was working on actually a rocket ship a big rocket ship i did a lot of back and stuff but that's what it was so with that said guys let's just jump into it daniel and i are going to be learning uh with you today so let's go so here's something interesting i did because i want to learn in a component based uh functional componentbased way not classbased components so i just literally googled react functional functional components to do app github i found somebody's uh code so you guys can actually go here as well yo what's up we got 294 people what's up gang yo yo smash that like button smash that break that button yo raj raj hans is going to get a lot of uh a lot of cloud after this what's up let's go raj rajan guys if you want to surprise roger ajron go ahead and smash that star button here roger johns yo what's up from toronto obey says from toronto beautiful oh bangladesh yup this is live all right guys so here we go so basically what i did is i went and checked out what app this guy's built so it went here and it's a todo list app looks pretty good if i type in daniel or i type in youtube a youtube hit add and when i check things off it does what it's supposed to do hey we already got a donation let's go gang [ __ ] come on baby hey hey hey what's up oh what's up dude this is crazy bro thank you guys yeah yeah let's go yo we got 245 people we gotta get we gotta break 300. let's almost at 300 let's go um yo guys welcome welcome oh man lunatic what's up brother nazmul how's it going govind thank you all right so let's go and now what i'm gonna do guys and you can do this with me you can do it with us let's grab the code let's do it you want to drop this link in the chat just in case you care all right here you guys go so you guys can copy this uh thing so i'm gonna copy this all right and then i'll go to my command line over here all right here we go and let's go into my github and i will clone this app react to do functional and i will npm install whatever is in there and then as soon as i'm done installing then what am i gonna do guys we're gonna run it oh [ __ ] let's see what other musics we got hey intense buildup all right here we go all right npm run npm hey we're learning this [ __ ] oh something's happening don't know what don't know all right cool so so far so good you guys have seen this before nothing new here nothing to get excited about nothing to write home about let's open up visual studio code and uh let's pop that bad boy open where is it github wait it's not here hold on why is this github different than this github where is this github ah it's under your user this is so confusing bro oh the build up is intense dude found it let's go perfect timing dude just for the drop i love it i'm just moving it to the other github what's up guys let's keep it rocking 285 people let's break 300 bro let's [ __ ] go who wants to learn react i do just like ripping their shirts off we start signing people's chests yo 10 notation let's go i mean donation thanks for the content cp help me with my react js and state management skills so much let's keep it up yo let's go hey all right so all right guys let's do this bring this down just a little bit so oops i meant to open up react to do app all right let's go to source app.js we're gonna do command j and um let's just do npm start yeah let's do it beautiful yo we just broke 300 viewers guys smash the thank you guys i love you guys so much let's keep it rocking and rolling all right so i like to have my code on the left and my what i'm saying this on the right one hand on the steering wheel all right all right so oops here we go uh i don't need this terminal anymore so i'm just going to quit out of it that's fine refresh okay i don't need this don't need this let's move this here okay there's also some face recognition app that i'm deciding to play with but we'll do that later for now let's just work on this so now i got this app up and running you guys can cop that code and get it up and running just like this still take you two seconds they're asking for the code again hey asking for the code again yo we just got another super chat what's up what's a super chat a donation thank you guys thank you adil for the five dollar donation daniel can finally get a haircut haircut hair cut yeah i've been going down my hair for three years because haircuts are too expensive guys oh man i told him that he got offended all right here we go all right so beautiful thank you so much for that donation appreciate you guys so freaking much we can get another monster now and keep coding all night biggest roi ever let's go so now what we're doing is the way that i want to learn react is i don't want to learn from some boring tutorial or some professor telling me what the [ __ ] is going on right how i want to learn react is i want to just get into the nittygritty the great mate i want to get into it i want to get in the [ __ ] dirt and learn so the way that i want to learn and um daniel and i decided to learn is we just want to get straight into somebody's code and then start breaking it apart and see how it's made so as i'm going through it i'm just going to be asking questions and learning along maybe you'll know the answer so you can drop it in chat daniel and i will just try to break this thing apart and figure it out we know web development other languages and we could probably figure out and react exactly and again this is because you guys inspired us we're like man if we're here teaching react we should also get down and dirty with react so we can learn it just like you guys so you guys are going to get to see us be a bunch of noobs and conquer react that's right we are up to 373 people let's go guys smash that like button so this video can just keep spreading and going out everywhere we're total 445 people welcome welcome thank you so much for jumping on appreciate you guys let's keep rocking and rolling so we are built we're learning to code in react js and i'm learning with you guys so let's keep going all right so what is happening so i'm going to put this on the you know what let's take this um here one thing that god blessed me in is my computer skills so let's go here let's go here and let's take a look all right so so far what makes sense to me daniel is i see this three things here and they map to three things now i'm not a rocket scientist but this adds up i think it adds up i think there's some sort of static list that's being populated before right yep so we got pick up laundry we got die we got this thing and i guess what that also tells us we could look at the objects and what they're mapping out to yeah so we know that each to do is composed of an id it's composed of a text and it's composed of a is complete boolean value ah okay so you're telling me that if i change this to a true this would mark it oh interesting very cool yeah okay so it looks like that is completely just changing the text and the style of it got it okay so that's what that's doing id is not gonna do anything right now i don't know try it out i mean if i change it to four i don't think it's gonna yeah okay so for now it's not gonna do anything but it could be useful at some point yeah like you could order things right right based on id now we got to do's um and this is what is it called in uh react uh it's called uh you know state state variables or whatever okay they're called okay um yeah so basically what's happening here is to do is we can change it on the fly whenever we call set to do's and change it it changes the todo's list on the fly okay right so um so let's get into the functions so what were you talking about so this is the ad to do this is what runs when i hit add and i think by the way kudos to whoever made this code yo we're 416 people jesus christ let's keep going go at 1k people we'll take off our shirts like coding um no we're not gonna do that or maybe we will but kudos to this guy because he's documented so well like right here at to do i don't have to look at the function in that car to guess what it is it's gonna give you another todo list after you press that add button and it probably gets triggered by the add button so this add button is running and then it adds the let's go it's being stored here in the react these are react hooks yes thank you guys so it's being stored in um in todos right and what's this text part so gotcha so what that looks like to me is this is appending to the ear yes so it's passing in a list that has the old to do's and then at the end or is it at the beginning it's appending a new object with the text i think it makes sense that it's at the end oh gotcha with the todo assigned to the the the todo is whatever they write in that's the parameter that's being passed in assigned to the text and that's why when you put let go it brings in that text it creates a new variable it sets the text of that or it creates a new object component whatever we're going to call it and it says that text of whatever you wrote so basically all that's happening is it's adding it in here as the fourth object yep right that's making sense cool all right so let's go and what these hooks allow you to do um what the what this allows you to do is when i add this in it doesn't refresh the page and it adds it in right that's good because refresh sucks right so boom okay figured that part out dude that was a lit song bro we need to yeah i want a sec right i love that one um okay so now we got mark complete and this is if i go to the index i click it it's been marked complete all right so hold on it takes no to do's so i think it just creates the new to do's and it adds the old to do's to it then the next one it's going to update the new to do's it looks like i got a specific index which is what's passed in by the parameter so here it would be like two zero one two yeah or one two three or however they're in i don't know if they're indexing based off zero or based off one it could be zero based or one based yeah but what it's doing is it's setting the is complete to whatever it is of the opposite right got it so whatever was like the opposite of what it currently is for example oh so when i click it it just does the opposite of this exactly oh so it's just using a very simple negation here oh no it's almost like logic i love that okay cool so this is a hack to just turn whatever you have into the opposite and since it's on and off if it's on it'll make it off if it's off it'll make it on exactly when you're coding sometimes you do care what the state is you know if it was pause or on off true false zero one whatever that is but in this case you don't really care you just wanna invert it to whatever that is whenever you mark it as complete so you could turn it on you could turn it off it doesn't matter and i think this is a great way of just doing it with the negation i love that and then set is okay so it just takes these todo's um and it just it replaces the older todo's with these new todo's that's all that's and all the new to do's did was it you reverted or inverted the one you clicked got it so for example say i hit this this would be two right it would take it would go it's one base so it would be three ah one base okay so it'll be three cool so now it will make a replica of this right uh not a deep cop a regular copy right yeah make a copy of this then it would go to the is completed based off the index based off the index yeah based off the index so because of this it'll go here uh make this the opposite of what it is it'll turn true and then once it makes it true it will just take this entire thing turn that right and then uh replace what the existing to do's were right that's making sense to me okay cool does that make sense to you guys hopefully it does hopefully hopefully all right these guys might be way smarter than us brother very possible i mean wait till we get to once we start flying we're gonna start flying yeah we're gonna catch up real quick all right okay cool we should do like a 30 day challenge and see what we can put together in 30 days holy crap let's put together trading but i think we can put together a trading bot do you guys want to see a trading book i think we could put together a trading mod or like a machine learning face detection type of thing would react probably way less than 30 days yeah for sure five to seven days a little hackathon would knock it out momita says yes it made sense it made sense to us too you do two three five says i don't know man sounds like witchcraft oh dude all right so um now so i want to ask you this when i hit to do when i hit add here there's probably some button that's detecting a form completion and then calling the add to do function is that what's happening that sounds about right to me so let's go to to do form okay so first off i guess when you see the when you see the classes again could you pop up the menu real quick and you see app index to do form to do's what are the things that go through your head when you see these different classes when i see these yeah like what do you think to do forms is versus to do's versus i don't know app uh to do's i think is a component i also think to do form as a component as soon as i see anything with capitalization like that i know that in react it's a component gotcha so to do form would be a component that we could use and so is to do's and over here on the ui what components do you think they match up to so to do form i think matches up to this and i think to do's matches up to this that makes sense yeah because forms usually have inputs different types it could be text it could be buttons whatever that is but then you always have like the submit form in that case could be like the out of the to do yeah all right that's making sense to me that's what i think and uh let's go okay so now i want to just see what's happening with this code right here okay so to do form it takes in a add to do prop okay it takes the yeah so this is where i'm putting in the value gotcha cool so we have a handle change so what kind of change is that change in the form input so as i'm typing right on the fly it's doing this so for example when i type in f here now value is actually f like literally it takes the yeah you see what i'm saying so on the fly it's taking the f and calling this thing then that thing sets value to f so if i save e dot target as soon as they say r now fr is value got it okay so it's doing it on the fly without me hitting enter or anything that's the really really cool thing about right hey i get it i'm liking it so that's a really cool thing about react so now okay so handle submit so on submit we prevent default which stops react from refreshing which is really important so you always want to have prevent default and then if the value is not empty or if the if it's empty if it's if it is empty correctly right because if it's empty it can do nothing yeah but then they put the the negation again so to true so then it enters and does nothing right so if it's if it doesn't exist don't do anything um if there is a value yeah then we just add value oh so this add to do is from the app.js and it passes in the specific to do you want to add yes which is that text that's what i was looking for oh okay so this is happening on the form submission that's what i was thinking would happen handle submit because if i set this value to let's say daniel then i believe what would happen is whatever i type in and i hit add it will show daniel after boom holy [ __ ] are we developers or what i think so bro dude it feels good to be a developer you kind of feel like a magician like i feel like we can pick up like golang in one day and make a project that'll be sick easy peasy okay so what is next next is let's look at some of this uh what is that jsx or stuff when you want to do um when you want javascript and html kind of mix up stuff so all this is creating is that form area that you just pointed to right we have the input which is oh text type input so that's the add to do yeah and then you have your primary button input which is the add button right okay gotcha so here we're just creating it and this is what's called a to do form so when you export it and anywhere else you call to do form this pops out right hold on let me read this code a little bit more good okay boom another todo app okay cool that's the title so they're doing something with css here for app title tech center i imagine look it up app titles right there i don't know okay all right so got that on submit call handle submit that's what's calling the function okay got it all right i think i don't know if that's bootstrap or is just regular styling form group okay and put this back on him all right that looks like some regular bootstrap type things like that or i don't know other frameworks or libraries use that yeah it looks like bootstrap yes our first input to text input placeholder add to do the value oh so there's that's where it gets the actual value on change equals handle change handle changes that in this class or is in the app js class handle change yo what's up guys hello hi deepak i love the way you teach us thank you so much brother ibrahim says qazi i'm really really excited about this live but i'm busy for now i'll definitely watch it later awesome bro we'll love to see you back guys please don't spam please don't spam i'd have to put you on time timeout all right put user in timeout oh my god please don't spam guys i'm gonna have to hide hide you or s um yeah perfect awesome okay so i think i got the todo form now it's just to do's so to do this is taking in these props yeah so it looks like we have two different let's or would this be called a component yeah to do's as a component okay so what this looks like is we have eight to do yeah which has those probably those elements we talked about before and then we have to do's which has a specific list or a mapping of yeah to do is a component as well okay just not being exported but yeah there are two components in there so let's talk about the to do first then we'll go to the to do's with an s because that's gonna be probably a little more complicated right okay perfect so looking at this to do we have our divider class name to do the paragraph so this one's interesting right because it's giving it a style to the type paragraph called text decoration so this is where it's doing that like ternary if then condition if it's completed and if it is it'll do that like strikethrough and if it's not it will leave it empty right gotcha yeah so to the style it's assigning a text decoration of either line through or empty depending on whether that to do has been completed or not got it so basically for example if it is completed it simplifies this whole thing to that right yeah i'm saying yeah okay i was like yeah okay yes so if it is completed this is what it looks like and if it's not completed it looks just like empty without the line all right let me put this here let's put this here all right hopefully you guys can see the code better now okay so this is what it simplifies it too right if it is completed when i click it yes all right so let's undo this otherwise it completes auto um it gets simplified to this when it's not completed exactly correct so just a fancy way of writing like a long ifthen condition got it awesome yeah and if you guys have any questions or you're wondering about something definitely drop that in that's related to this and we'll try to address it as we're going through for you guys what's the difference between class name and class name my class please okay that's a great question so um i think what it's doing if i go back to where was it doing but where did they put the the squiggly that he's asking for where did they do that is it into dues or two in the todo form so sometimes when you are um in jsx what i know is if you're writing a javascript uh code you wrap it in squigglies when you're when you're writing like evaluating a javascript expression you write it in squigglies and i think yeah and it kind of like boils it down to like html that's what i think it it's happening oh yeah that definitely makes sense because it's it's kind of like hey this is squigglies and that's i mean the code inside isn't regular html it's yeah javascript or if it is like this let me just try and see what happens let's still work break the code it works break the code so this just gets simplified to the same thing it already is i think you could write this one both ways because this isn't a complicated javascript expression that's a good point so that one i think you'll be fine if you just write regular container to be honest that's just what i think then what would be the purpose of putting the jsx squiggly lines maybe you could like assign the class i feel like for this there's no purpose for this i can see a purpose because um i think like it needs to separate out between the next argument no dude you you can have spaces when it comes to html yeah that's proper html so i think here it doesn't serve anything it's just like putting extra set of parentheses in a mathematical expression that doesn't need it you know it's like if you had five plus four and then you just decided to wrap it in parentheses it wouldn't like change it i think that's what i'm thinking for this if it does like i literally think it won't make no difference like if i change this add a todo and remove this and say add a to do's i think you'll be good yeah it'll be good so yeah uh bro i think the answer to your question is for this it doesn't matter i think you don't need the squiggly yeah you don't need it i think in the more complicated case where to the class name or whatever you need to assign an actual java variable or something right then it might be important but for now you could probably in this case you can take it off because it's regular html as well yeah and if you guys anybody that needs to code access to it here's the github profile you can just use it i just linked it below yo yo aaron aaron nobles bro thank you so much just gave a five dollar donation it says currently working on a project so i can't watch but i'd like to thank you guys for helping me get this far in my coding journey thank you so much aaron really appreciate you thank you guys if you're enjoying this so far smash that like button so let's keep getting this video out to more and more people let's go all right in this video guys we're learning react js with you i'm not a professional react.js developer i have experience with python django a lot of it daniel has a ton of experience with java and doing backend web development with it so we're picking up react along with you guys we're just having fun all right so hopefully you're enjoying it as well and on the journey with us yo i've destroyed the like button come on chew let's go i love this is it my class of strength uh manpreet says there's no need of the squiggly for container as it is not resolving an expression or js code absolutely so i actually agree guys i i think that for all this stuff you shouldn't have it because i think it just makes it more complicated for no particular reason so i honestly would have it like this you know and i think it will be the same thing this is the code we're using so you guys can go ahead and use this we'll try to put it in the description and that's whoa somebody just gave 2 000 of something bitcoin so to this youtube video description below guys i just added this repository so if you guys want you can now click in the description refresh the page and then go open this code up and you guys could use this um this app fa jc might have a good point he says thank you for the donation by the way oh thank you yeah go for it he says it's for consistency purposes i think he's talking about the squigglies on those so i think it's just like you know i think anything where you don't need it like i think it's a little i think simplify it you know it's like that's how i would write python code if you don't need an additional set of parentheses or something yeah uh jose says jose antonio says what do you people think about typescript is it useful typescript is pretty useful it basically lets you like um essentially turns javascript into java you know it's like statically typed does it just make it more general or what yeah it just provides you it's i think it makes you less errorprone and things like that gotcha yeah that's what you have to define your data types in typescript so that's what i didn't like about uh my projects with c plus yeah it was like it's like even it's the next level dude like you have to say oh how many bits is gonna have or she like that you're just like oh my god can't mess up all right so i think i get the so now on the todo so i get the decoration and how that's working and how the p style is is working for when i click here and strike through input type so this is the check box this is a little square they could click on and off so on change anytime i change this it can call a function calls mark complete based on the index cool and the index is being passed through here so i'm curious how's it getting that index when's it getting assigned i just thought about that too right now oh i think i know where go to app.js i saw it oh so there it is it's in the mapping so you see how for that to do it's assigning the the index key equals index index equals index and it's giving it a mark complete function what about the edit text hmm you go to app.js real quick yeah i think there's a function we didn't explore that might be important no edit titles also just so these functions are being passed down the indexes right so how is it picking up this exact so my assumption is it's gonna be from the form when someone creates it they have to add an index right to this new object oh does that make sense yeah just figuring out how is it passing it through you know what i mean like so i click it on change i mean it's this thing that runs right yeah yeah so so the on change does the mark complete the mark complete was the one that would change it to true or false on the remember and it would return the new list of things where or complete yeah this one remember so it would just assign the old one to the new to do's the new to do's that is complete we would invert it for the one that got chosen then we'd set it yeah oh yeah doing tailwind css would be fun too all right so hold on hold on though bro so i click it how's it getting the index so this is what i'm saying i think the index is all right so how is it getting the index i believe is from the to do's js again go back there yeah it's right here right so here's we're saying we have a to do yeah and when we're mapping it out i'm not entirely sure how this mapping function happens but you have it to do and you have an index so i'm assuming it's some sort of incremental thing right so for each to do we're gonna give it an index incrementing yeah and then here it's assigning the index so can we look at that like the to do is on map like google it let's see what this function does um i mean i think it's just looping through and then assigning it right that's what map generally does it allows you to just yeah i mean that goes through like every or yeah don't do todo's map do like uh javascript yeah yeah react perfect so what's it say here maps number number two doubled so i'll give you back an array it seems like and that's that rave to do that we have boom right there so this gives us back an array right to do that map gives us back oh interesting okay so here it assigns a number right it passes in the number as a function and then the function is actually the numbers times two that's what it cares about and that's what it creates the array for right yeah so here passes in a todo and an index and what it's going to do is this function which is it's going to create a to do html tag yeah and it's gonna assign everything it's gonna send it to do it's gonna assign the the key the index the mark complete and the edit title got it so then when i click it kind of so it already knows it has the index and then it just like calls the mark complete function on it and then it does the it does everything that it needs to do at that point yeah so i mean it doesn't do it i just think it sets it up got it like it passes it to this one like all this does is it passes it to this function here ah right right so here it assigns those i know we call them parameters or what were those things the props the props right yeah the signs are props for the todo's so now a todo has the to do itself has the index has the mark complete and has the edit title now here it got it from the mapping so we do the todo's so let's let's back up a little more the todo's receive the todo's array uhhuh if they were marked complete wait do you think this is in the rear that's just one that has to be the whole thing right yeah i think that's that should be all of the todo's right that's why it's todo's like it should be getting this yes yes yes switches all of those yeah like we're yeah where is this being used yeah okay all right that's making sense then so we have yeah the the the to dose component that receives all of its todo's along with those other parameters right we start to create this div for the component which is gonna be called todo list yeah inside of this div we're going to do a todo's map so we already have the todo's right and that's where we're mapping it so each todo of the todo's is going to get mapped to an index so i'm assuming that index is that incremental thing yeah from now it's going to create a to do component right that to do component is going to pass in the specific to do that mapped out yeah for the key which is i don't know why they're doing the key because i don't see the key anywhere here yeah the key sometimes um react will use um like there are these plugins where it lets you have nice little animations to things coming up um interesting it's also kind of you right now it's not being used kind of anywhere i don't even think it'll make a difference yeah so what about this what if we can print out on the ui the index yeah and then let's just like manipulate it a little bit here just to see kind of what's happening right you think we can do that real quick do what so let's go to the ui let's show the the to do along with the index so we know what the index is and then let's kind of manipulate it or let's just do that first okay it should say like write a new blog post dash one pick up laundry dash two sure so if we wanna do that for the ui what are we thinking we could do here i think it's gonna be here right because this is a to do yeah this is specific to do so right there um right after that i would add in like the to do dot id to do yeah so i don't know let me actually try to do that id here and let's see what it gives me yeah exactly there we go getting the id perfect that's interesting you just get to would you do text yeah i did to do that okay okay cool so i guess what i'm getting to is do the id again yeah now let's go back to this one and what happens if you change the one for the key does that change anything right do like index plus plus or index plus one i mean this i don't think is going to do anything for now but i think if we changed index oh so what i'm assuming if you click one yeah yeah that's like that's gonna mess it up so this is where this is where that data is getting passed in then like that is gonna break it that's what i was thinking it's gonna break yeah so this is why this is like more back end uh this is not being used for now i don't think for anything but this is the one that we're using to do our strikethroughs and everything that's why it's being passed down here perfect so i guess did we get the answer that we were looking for i think we did right yeah which you were asking where do we get the index from and the index just comes from the mapping right and i guess that's why i wanted to look up this documentation because i'm curious like what happens if you add in more parameters what are those parameters what do those parameters mean right yeah or do we just assume if you had two parameters the second one is always going to be the index does that make sense right yeah i mean i think that that's why me personally i would be curious just to do like your js react dot maps function yeah what does it do like i know we went into that a little bit but i'd probably dig deeper just to really understand it for me right i'm doing multiple components man let's see if we could find one that has multiple parameters oh more than more than that because you see how this is just one yeah yeah this one just one this one's two like can we have three parameters i don't know like how right i see what you're saying like how many parameters can the map function have yeah because all these examples seem to just have one parameter yeah rendering an array i mean that's the actual documentation right there i think that's it right is that the callback no this is still not her belly so what are you trying to get at by adding another argument like what do you i guess what i'm trying to get at is just to understand the dot map because my assumption is with the dot map if you pass in the first parameter that's going to be the actual object right and if you have a second parameter or you name a second parameter right that's always going to be the index like is that always true is there a third parameter where maybe it could be something else like right that's kind of why i just want to understand more about that dot functionality but i think what we just had right now about the callback function i think that was it right so so far what we have is let me refresh this did we okay to do that text so so far we just have this thing over here i mean i feel like most of the app i understand pretty much how it works right like we understand how the todo form works and it's a component we're using this component inside of our app js we have the to do form right here we're getting our this is one of our components that we're using from here this is the other component that we're using right all of our styling is being done here in app css so i feel like in terms of understanding how this app works i understand pretty much all of how it works i think the next steps for us would be to like learn how to actually edit and be able to even change these and the few things that we wanted to add was like uh be able to drag this up and down that'd be interesting right yeah damn that's it do you guys in this chat know how you would go about doing that because that's something new for us to learn with react and actually apply it so i want to know like is that something that you guys is there any i know that we have some people who are like actually react developers in here himanshu says i want to master react elijah says that was it ludus has removed the key and then you will see yep um when pretest index is like the position of the to do text if you're marking something is done it is calling mark complete which will show a line though based on the index and index is a default property yeah and indexes was the thing that was actually being used whereas the key right now wasn't a thing that we were using map is for iterating yep a little out of box do we need do we really need else if statements in python i mean you don't really need else if you can just keep doing if else but i liked it line through strikethrough yeah damn so we're going to keep on learning react i want to keep on actually increasing my skills in it i want to actually i think it would be cool to be able to build fullon projects with it and add more functionality to it so this upcoming week uh i'm actually interested in taking on the challenge of building the tesla app so what does that look like uh this is what it looks like so this is what i'm interested in building that's fancy definitely understanding how to build those tesla boxes so that's that nice little like scroll lock as i go down and then um where's that like i think they have a calculator too or something which gets pretty fancy oh my god i mean i don't know about all of this stuff the animations yeah it's like crazy animations but let me see where you can actually order the car and then there's some kind of calculator that it has like so let's go to order now i think that would be fun to like build build that dude look at this let's buy one right now i like how easy they make it like for example you just pick performance click next and then they're just like letting you get it this is this is why nice ui this is why nice ui the user experience is so important bro that's kind of like that's insane i mean you want to talk about high ticket like this is high ticket this is crazy people ordering sixty thousand dollars what happened just 10k bro back end is jacked auto steer on city streets oh so this is what it's actually showing you right here this is what this animation is showing you and you can add that on for 10k like this here the who like whatever developers are actually doing this like that's insane that's actually bringing them a lot of money like imagine somebody sitting here they're like yeah i'll actually take that feature i'll add this what else do they got dude how expensive can this car get let's just stack up all the [ __ ] back end products on there um i mean let's what if we actually ordered it on this uh that's it i mean that's a lot but cash yo oh my god imagine having a 700 payment your car i mean 684 i might do today 100 i'm down bro so what is this 4 500 down [ __ ] scamming me scam after something savings i mean i'm sure there's some kind of down i feel like you have to put some type of payment down you're leasing it yeah that 4500 though so 4500 then 684 that's not that bad paid off in three years and i think you can just order it dude like i think you just put in your credit card and that's it that's actually pretty crazy yo let's get some solar stuff bro so here like actually getting good web development skills in to make something somebody's like buy it please buy it that would actually be pretty amazing ab ryan says watching uh you're live for the very first time let's go let's go but like i want your phone number damn i love that i'm just seeing manpreet i can explain in short so basically okay cool responding to somebody oh my god this guy's still telling us about keys bro praveen i love it so i mean people who can actually learn these skills to me it makes a lot of sense why tesla would pay their developers a lot of money because if you can add these functionalities in where if you're about to place an order and it makes you add on a 10 000 thing they can hire 10 developers to build out their functionality make sure their app looks great because one order a day one cool looking animation can help them like close out ten thousand dollars extra dude you know what this is literally yeah this is the equivalent to mariah's hybrid product because think about it at a regular car dealership yeah to add that ten thousand dollar thing the salesman guy sits down with you yeah and he's like hey you want the leather seats another thousand dollars or whatever and you're like no they're like oh but the leather seats you know like they have to pitch you yeah get on the phone with you right yeah yeah yeah that's true but it's like here it's just like a click of a button on the page that's [ __ ] crazy like you said dude you hired developer to have that you don't need a salesman to get an extra 10k on one product it's on the page because the experience and the brand that's kind of good it's kind of like um i mean here the react developer is the salesman yeah you know what i mean yeah because whatever it is maybe i don't know if i order something i mean i don't know if i can order uh solar panels solar panels but whenever that order bump comes in and they make it look great one thing that they tack on is boom for somebody who can afford it it's not that much and some not you know a lot of people get teslas for them to tack that on i don't think it's like that big of a deal for most people and so i don't know to me it's just blowing my mind that they let you just order that from the internet because most of the times you can't order these things from the internet and second thing is i love actually how they can use the development and the experience of it to be able to sell like it's actually part the great user experience is part of the sales process yeah yeah and i mean it gets rid of like dude oh no i was gonna say do they even have tesla sales people like but they do have some of those demo stores where you could walk in and ask questions but i think in the end you still order online like you don't deal like there's not someone trying to close you on the tesla you know yeah let me see tesla jobs developer are they looking for software engineer careers tesla let's see i wonder if they are they actually list out project developer that's different charging infrastructure a gigafactory bro bro they're hiring their own developer or engineers to build their own gigafactories that's crazy what is that i think those are just like the big ass factories for either production they're like charging so wait hold on where did that go software engineer i wonder if they actually list out the technologies there we go react and java so build and support internal developer tools back and front end with typescript so yeah these are important to learn you got typescript react what's ror no clue return on oh [ __ ] oh we're not sure should we be sharing screen we're we should still be live i know but oh and there might be right yeah we're still live but our chrome just crashed so super annoying yeah it's always super annoying when like chrome crashes this is the new chrome update does this happen to you guys where your chrome crashes and it just like doesn't like i i don't know why but it started happening after the new update started happening a lot what is ror if this happens to you give us a thumbs up so we know it's not just us rr oh yeah i never saw it as ror that's the first time i'm actually seeing it written like that do you know what the cool kids call it this is what you always talk about we expect you to have strong cs background and an ability to resolve complex engineering issues and other stuff but yeah i think that's what you talk about you're like dude you have to have good problem solving abilities right yeah and i think that doesn't just apply to code it just applies to anything in general right like if we're doing this live something goes down he's like oh like figure it out right yeah or whatever it is that you're doing things are always going to go wrong you just have to build that skill of on the spot solving problems right yeah that skill is extremely important and i think problemsolving skills all of these hiring managers actually put problemsolving skills on a pedestal above everything because even with react at the end of the day it doesn't matter if it's react or if it's any other framework they want you to be framework agnostic and they want you to just have great ability so tomorrow if they switch to angular or just switch to view or they switch to something else they want you to be able to crush it they want you to still be able to solve the actual problems that they have and and i think that's kind of where the typical big tech programming algorithm type interview questions come from right because hey like it doesn't matter what language you use let's see if you know some basic data structure although i still think it's kind of like a little overrated i definitely don't think you should jud like someone would be a good good programmer or not just based off whether they could solve algorithms but i think that's why they adopted it because they're like hey we want to be able to test people yeah to see if they have good problem solving skills but i just don't think that's the way to do it right they're even now starting to shy away they're they're starting to do less and less of whiteboard type of interviews and i mean frank was talking about this too oh what do you think remember he was here and he was talking about how they're starting to do uh less whiteboard interviews like just p uh companies in general and they're realizing that that's not the best way to judge candidates because sometimes he says people have anxiety and they get scared when they're in an interview that's happening over whiteboard and they just don't perform well but they actually might be great given a week two weeks a month working there yeah yeah for sure i mean i definitely remember going through those interview processes like you wake up you couldn't even sleep the night before how many interviews have you uh i went through microsoft uh youtube google's and blue origins and i only only went through those and they got those job offers and at that point i was like yeah like i don't want to play anywhere else did you get a job offer from google yeah the youtube google one what did they offer you are you able to say that or not yeah i could say that so that was i mean very similar to the microsoft one which was like they're both at uh 100 110k leaving college but then the benefits are insane dude like 401k matching for every dollar you put in they would match uh 50 50 cents meaning if you maxed out your 401k at 19 000 they would put in half of 19 000 which is 9500. so at the end of the year if you maxed them out there would be twenty seven hundred uh twenty seven thousand five hundred dollars in your 401k holy [ __ ] so that's like an extra almost 10k per year right then like the stocks incentives that they would give you they would give you the ability to buy the stocks at like a 10 discount so if uh if a microsoft stock was at a hundred dollars at the time they get to cash in and they they limit the stocks yeah you could buy at ninety dollars right you could right away sell it cash out get that ten percent or you could keep it long term it's already a profitable stock anyways damn but and then even then do like i remember at microsoft specifically at car dealerships yeah it's a big deal if you're trying to get a new car you're like what's your job like you have any pace they need to see like a month's worth of pay stubs yeah what if you tell them like yo i got a job microsoft they're like oh go ahead and get this card dude like you'll pay it off later damn so it's just crazy man like just i think that's crazy where big tech wins is the amazing so hold on an incentive before we move on to that so you got you applied to these three jobs and they all gave you offers yeah between google youtube microsoft and blue origin yeah so google is youtube right because right what made you go to what made you say no to google and microsoft for me it was more of saying yes to blue because i realized i can always just go to big tech later like blue origin was still at like when i joined there were thousand three hundred employees i think right now they are almost like at three thousand so there's a lot of growth in the two and a half years that i was there yeah and i was like dude like this opportunity is once in a lifetime like in the future in 50 years there's gonna be rockets up there and be like dude i was able to be part of that you know what i mean that's going to be normal maybe 50 years 100 years i don't know when that's going to be that's going to be normal yeah i was part of it when it wasn't normal that's kind of what what it was for me and what were your interviews like with google and microsoft um dude they were they were intense dude like the end of those days your brain is just fried you just wanted to go to sleep dude but you would show up at 8am yeah to the place and they kind of give you the breakdown like all right you're gonna have like these interviews but they all consisted of five to six maybe i think it was five technical interviews yeah and they would take you in microsoft i remember they would take me over to a guy specific office yeah i would go into his office and they all had like [ __ ] whiteboards like in their own houses and then um that's what it was it was like three technical interviews yeah then at lunch you would go to lunch with another employee and they would tell you like oh don't worry it's not part of the interview but obviously it's like a behavioral interview just kind of want to see if you're like a cool dude if they can vibe with you if you just pass their googliness check for you for youtube or just your cool dude from microsoft yeah after that after your lunch you get in two more rooms and you do coding interviews and what those interviews were i don't know how they've been changing but it was you show up they show up they talk five minutes about your resume ask you like a question or two and they're like all right boom let's go over to the whiteboard wow and the rest is just doing the whiteboard stuff huh so after that dude you're just like they're like all right good job whatever blah blah blah and what was the difficulty like what were they giving you a lot of theoretical questions or what was it um no i think like how were you all also like how were you prepared for them you know dude i prepared using firecode.io i really like firecode because here's the thing about firecoat is they use a memory recall or i don't know what that specific terminology is yeah but it'll take you through levels it'll take you to level one level two level three like easiest to hardest right yeah but while you're doing level two like every three or five problems you solve you'll bring back an old problem and you like solve it again so like you're developing also pattern recognition yeah yeah exactly right so then after a moment i just remember i would go in here and just [ __ ] eat them for breakfast dude i would just start knocking them out you know and i felt and that was only like at level three it has like five levels which is a lot more problems yeah but if i already get to level five it's just like that's what it is man you got to level five no no we've already gotten to level five that has been even that much more easier but that's what it is man it's recognition so those questions they asked you at google and these companies did some of them did you feel like some of them came from like fire code io or was it more difficult than that here's the thing it's not about getting the exact question like oh yeah i remember i practiced this one but it's literally what you said pattern recognition like there's one i can't remember the exact question but it was something long like all right imagine you have this lab of rats and they just [ __ ] decided to reproduce right how can you tell me if rat a and b are related and like by how much so that's just pattern recognition because when you think about relationships you think about like parents yeah and then when you think about parents you think of like a family tree or trees or graphs yeah in this case it'd be a tree not a graph because there's no like or there is some there could be some circular things but that's like all right cool now i know that's probably the type of data that i'm gonna have to store so now what's the problem all right well the problem is if i have a mom and a dad then that's going to create another note so i know i have each node has at least two parent nodes yeah each paranoid can have multiple child each node can have multiple child nodes you kind of start to figure out how this data is going to be stored yeah okay now if i want to find if a is related to b yeah and if so by what degree of separation what can i start doing right yeah so because you're doing doing the graphs the first thing i thought was like all right i could do with bread or bread first or depth first search yeah now for those of you who might not be familiar that could be you could follow one string of all right check this this this guy's dad's dad dad dad dad did that to you get to the origin yeah and see if you were able to come across it yeah not check his mom's mom go all the way to the origin if not to go to the dad's mom so you go all the way to to like as deep as it gets or breath first is like check the mom check the dad if it's not then check the mom check the dad check the mom check the dad of the mom and the dad if it's not then that one's more like you go wide instead right right but here's the thing there's also children so you have to go both up and down right so i forgot what the hell how i was able to do that like now i'm thinking i'm like oh my god what the hell but that was like the type of question that i had to code up yeah so i think i ended up doing a graph along with you know in terms of like pattern recognition i was like i'm probably not to store this data somewhere as i'm going through it so i could look through it so i got a stack yeah so that as i went through a parent i put in the stack so for example if i was doing depth first i could go through all of those put them on the stack search through the stack once i'm done searching to a stack if i find what i need yeah i'm done if not then go back and do another path or something like that damn and then did they make you you ended up having to write the algorithm as well right and you chose java or yeah so at that point i i did fire code.i o using java so i was able to practice that so that's what i just felt most comfortable with but in reality queues java python javascript any major programming language but right that's i guess up to you at that point damn that's really powerful dude like to actually uh use we're gonna head off uh in just a second but yeah that's actually really powerful i think we should actually teach that at some point some of those things yeah we could definitely get into that stuff yeah that's really cool because it doesn't even matter what language it is it comes down to just problem solving yeah for sure all right guys so what i want to say is i hope you guys enjoyed this video um i'm just picking up react and just having fun with daniel and uh yeah hopefully you guys had fun enjoyed pick up some stuff with us one tip that i want to give you is i like to pick up um especially if you know coding in another language and you for example i know python it's really easy and it makes it easier to pick up something by like looking at somebody's code downloading and playing around with it so i linked the source code to that person's code raj raj hussein something like that is his name and we took his code broke it down went through it and understood okay how this app is working now this is just day one if we did this every single day by day 5 10 30. we would know how these apps work we'd be able to build them from scratch and i highly recommend you do it like that and then play with it and break it and it'll help you understand and along with playing with it here's a challenge to you try to add some functionality to it if you can't think of any ideas think about this what if you could make it drag and drop what would that yeah or what if when you do it to do it disappears or moves it to like some sort of archive or something like that or even adding a date to those things like a little timeline yeah that could remind you it hits those dates so those are three ideas that it's like once you start to implement those you could really start to get a better understanding of react and really start to learn or take that todo list app and add a database using something like firebase so the data actually stays there so it doesn't go away once you hit refresh guys um that's it hopefully you enjoyed it and had fun we'll do more of these and more advanced ones where we are building projects um so be on the lookout for that thank you guys smash the like button we love your beautiful face this is qazi and i'm with daniel here and we will see you on the next one peace
