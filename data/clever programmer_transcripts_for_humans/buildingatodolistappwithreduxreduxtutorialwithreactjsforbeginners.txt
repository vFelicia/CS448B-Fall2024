With timestamps:

00:00 - what's up you guys it's david here from
00:01 - from coverprogrammer.com and today we
00:04 - are going to be talking about
00:05 - how you can get started with the redux
00:08 - and state management and all that kind
00:09 - of stuff
00:10 - using the redux toolkit now this is
00:13 - actually going to be the
00:14 - simple easiest way that you can get uh
00:17 - get your head into
00:18 - state management redux and all these
00:20 - kind of stuff so let's just talk about
00:22 - what
00:22 - redux is so this is probably the
00:26 - most important skill that a react
00:28 - developer can learn
00:30 - above react obviously redux basically
00:33 - is a bubble around your application it's
00:36 - kind of like a data layer
00:38 - speaking of data i got you a little
00:39 - something that can potentially
00:41 - up your programming game to the next
00:43 - level and you can actually monetize it
00:45 - at any given industry
00:47 - that's right one of the most important
00:49 - skills you can learn
00:50 - as a developer and you can actually
00:52 - charge more
00:54 - by just implementing some sort of
00:55 - analytical stuff is basically data
00:58 - science now your one-stop shop to learn
01:00 - data science is actually data camp is
01:03 - they give you
01:04 - a wide range of 300 plus courses
01:07 - that you can choose from say sql python
01:11 - or whatever they got you covered all
01:13 - that courses are bite-sized so no matter
01:15 - how tight your schedule is
01:17 - it does fit in and the best part it is
01:19 - actually accessible
01:20 - on mobile so even if you're on a toilet
01:23 - walking your dog
01:24 - getting groceries you can actually watch
01:26 - data camp all their courses
01:28 - are focused on practicality giving you
01:30 - the head start you deserve
01:31 - subscribe today for 25 bucks a month and
01:34 - let the skills you acquire pay for it
01:36 - still on the fence
01:37 - check out all their courses first
01:38 - chapter for completely free check out
01:40 - datacamp in the description down below
01:42 - let's get straight back into the video
01:44 - that is accessible for all
01:47 - the components that you have inside of
01:49 - your application basically you use it
01:50 - when the normal states are just not good
01:53 - enough
01:54 - and the whole idea around it is that you
01:56 - have a data layer around your
01:58 - application that is accessible for all
02:00 - your components
02:01 - so basically you can have some sort of
02:04 - global states that way
02:06 - creating an app with redux is as simple
02:08 - as typing in
02:10 - npx create react app space dot
02:13 - space template redux and it's just going
02:16 - to spin up a full working application
02:19 - that you can go ahead and get started
02:21 - after smashing that like button for the
02:23 - youtube algorithm i've made a quick
02:25 - to-do app just to demonstrate how this
02:27 - whole thing actually works and how you
02:29 - should be thinking about it
02:30 - and i actually link it down below so you
02:33 - can go ahead and clone that repository
02:35 - from github
02:37 - and you can just go ahead and take it
02:38 - away play with it and do whatever you
02:40 - want
02:40 - and speaking of stuff in the description
02:43 - we
02:43 - actually just released a new module to
02:46 - our course
02:47 - profit with javascript so i actually
02:49 - highly highly recommend checking it out
02:51 - because it's
02:51 - pretty awesome and i'm not gonna talk
02:53 - too much more about it and we actually
02:55 - gonna have some exclusive stuff just in
02:58 - there so make sure to go ahead and check
03:00 - it out
03:00 - we also have a one hour free training
03:03 - down below in the description
03:05 - you can go ahead and check out how nas
03:07 - made 300 grand
03:09 - in three years as a javascript developer
03:12 - so if you like money go ahead check it
03:13 - out
03:14 - because it is like literally a
03:16 - step-by-step tutorial
03:18 - how you can do the same so if you like
03:20 - money
03:21 - make sure to check it out and actually
03:23 - watch the whole thing it's super awesome
03:25 - with that said comment down below what
03:26 - you want me to build next
03:28 - for you guys and smash that like button
03:31 - subscribe
03:32 - for more awesomeness and let's roll that
03:34 - [Music]
03:44 - intro
03:49 - [Applause]
03:53 - all right step number one into
03:56 - understanding how this redux thing works
03:58 - is we're going to build a to-do app so
04:00 - we're just going to call it
04:02 - uh redux it's good
04:05 - and over here let's open up a new
04:09 - terminal
04:10 - and we're going to type in here npx
04:12 - create
04:13 - react app space dot dash dash template
04:17 - redux template redux
04:21 - so this is pretty much going to go ahead
04:23 - and do us
04:24 - all the hard work do all the hard work
04:27 - for us
04:28 - i will speed this up because this
04:29 - actually does take quite a while
04:32 - and this will basically do uh create us
04:35 - a react app that will be completely
04:38 - usable by us and will have a redux
04:42 - in it so we can pretty much go ahead and
04:44 - start building
04:45 - just like that all right
04:51 - all right so once the process is done we
04:53 - can you pretty much do the usual code
04:55 - space dot
04:56 - that will fire up a vs code with the
04:59 - project in it
05:00 - and i remember asking for more zoom so i
05:04 - will zoom in
05:05 - even further let me know guys in the
05:07 - comments down below if it's good enough
05:09 - zoom or not
05:10 - and but anyways this is pretty much the
05:13 - app we got
05:14 - we have a few different uh other folders
05:16 - than before
05:17 - but let's just go ahead and fire up the
05:21 - application so i'm just gonna hit yarn
05:23 - start in here
05:25 - and this is the template application
05:28 - that we get with redux
05:29 - and you can see a counter over here we
05:32 - can add like different
05:33 - amount of numbers to it and this will
05:37 - this is basically getting stored in uh
05:40 - redux and this is pretty much what we
05:43 - will understand and go ahead and
05:44 - make as a to-do list
05:52 - all right so in here we have a few
05:54 - different things uh
05:55 - we will pretty much not use any of these
05:58 - just like
05:59 - uh with the normal react app we can
06:01 - pretty much go ahead and delete
06:02 - everything inside of app.js so
06:05 - everything in between the header
06:08 - is going to be deleted as well as
06:10 - app.css is going to be completely
06:12 - emptied
06:14 - uh all these test files are not gonna be
06:17 - used
06:17 - at all neither is
06:21 - going to be the logo and we can go into
06:24 - uh index.css and add
06:27 - a margin of complete zero
06:31 - and that will pretty much just snap
06:32 - everything to the side
06:34 - and inside of the features folder we
06:37 - have this counter folder which we can go
06:38 - ahead and delete and in the store.js
06:41 - file
06:41 - we can delete all the import and all
06:44 - these reducers
06:46 - so we can let's take a look at how the
06:48 - application is looking like
06:49 - so super white that's good and going
06:52 - back to the app.js file
06:54 - let's just add a new uh h1
06:57 - which is going to be i don't know say
07:00 - clever
07:01 - programmer in here and if it shows up
07:04 - at the corner we are good to go
07:07 - so right now let's go ahead and continue
07:11 - uh with the to-do app
07:19 - all right so let's take a look at how we
07:20 - will build this whole thing
07:22 - so obviously on top we will have the
07:25 - to-do list
07:26 - so that's pretty good and below that we
07:29 - want to have some sort of
07:30 - input box so that way we can add new and
07:33 - new
07:34 - items now i also want to add a
07:37 - done or some sort of check check mark
07:40 - thing
07:40 - and that way we can keep track of what
07:43 - kind of to do
07:44 - do we have for the rest of the day all
07:46 - right
07:47 - so let's go ahead and build first the
07:49 - input part
07:50 - because afterwards then we will be uh
07:53 - able to
07:54 - work easier with the to-do list so let's
07:56 - go ahead and
07:57 - open up a new folder in here which we
07:59 - will call components
08:01 - all right so in here you want to go
08:03 - ahead and create an input.js
08:05 - as well as a input.css file
08:09 - so that will be our full
08:12 - input screen so i'm just gonna make this
08:15 - uh
08:16 - window look nice and if i type in here
08:18 - rafce
08:20 - that will go ahead and create a full
08:22 - working
08:24 - react component so if you don't know
08:26 - what this magic is
08:27 - go to the extensions of your vs code
08:30 - type in es7 and then this will this is
08:34 - the one
08:35 - extension that you want to actually go
08:36 - ahead and download
08:39 - all right so with that uh we can now go
08:42 - ahead
08:43 - and add a class name over here
08:47 - which is going to be input
08:50 - right and now we're going to make it uh
08:53 - so it looks
08:54 - capital because somebody because for
08:56 - some reason
08:59 - uh because for some reason it didn't uh
09:02 - make it
09:03 - didn't capitalize it but all good and
09:05 - before we actually forget let's import
09:07 - the input.css file
09:13 - like i said in put css
09:18 - moving on uh let's just create the full
09:20 - uh
09:21 - html structure of this file so we're
09:24 - gonna
09:25 - have obviously an input for uh in here
09:28 - simple input box and below that
09:31 - we want to obviously have a button so
09:33 - the button is what we're going to press
09:35 - once we are finished
09:37 - once we're done typing and that will
09:39 - actually fire off a
09:40 - function that will add the actual to do
09:43 - to the list okay
09:44 - so that's that's function so we're just
09:46 - going to add a
09:47 - [Music]
09:48 - let's actually call it add and it will
09:52 - a it will fire off the function of so
09:55 - on click so this is when we want to fire
09:57 - up that
09:58 - very function so we're just going to
10:00 - call it add to do
10:02 - and going up here let's go ahead and
10:05 - define that so and you do
10:09 - okay and right now the application is
10:12 - going to freak out because
10:13 - it doesn't know what to do when we do
10:16 - this so we pretty much want to
10:19 - keep a track of what's happening in the
10:21 - input box right so
10:22 - we will need to have a piece of state
10:24 - for that
10:25 - so for that we are going to use the use
10:27 - state library of
10:29 - react so what that does is
10:33 - it's pretty much the variable variables
10:36 - of react all right so
10:37 - let's just type in const and we're going
10:39 - to say input
10:43 - input and set input
10:46 - and that will be a used state
10:50 - with an initial value of nothing now
10:53 - you might be confused what's going on
10:55 - here if you are
10:57 - it's completely fine just know that we
11:00 - have a few
11:01 - other videos where we explain what is
11:03 - going on here
11:04 - but this is not uh this is this video is
11:08 - about redux so i'm not gonna
11:10 - dive deep into it make sure to check out
11:12 - profit with javascript down below in the
11:14 - description
11:14 - we go in depth in all these kind of
11:16 - stuff so with that said let's move on
11:20 - and just to actually connect that piece
11:23 - of state with
11:24 - the input box we want to say a value is
11:26 - going to equal to
11:28 - input and once we start typing
11:31 - that will fire off an unchanged function
11:34 - so then what we want to do
11:36 - is say that's going to be that's going
11:38 - to have an event okay
11:39 - and we want to set the input
11:43 - that uh inside the input whatever that
11:46 - to whatever that event is okay so that
11:49 - even
11:50 - actually has a target value which is
11:53 - pretty much
11:53 - the actual button that we pressed the
11:56 - value of that
11:57 - that wasn't so if i press this button
11:59 - over here
12:00 - this will go ahead and mean g all right
12:07 - so that's pretty much it now we actually
12:09 - saved it a piece of state
12:15 - all right next up what we will do
12:17 - actually let's go ahead and check it out
12:18 - first like how it actually looks like
12:21 - okay it doesn't look like nothing
12:23 - because we haven't
12:24 - imported it so we will go ahead and
12:27 - import input
12:29 - and there we have it so i actually used
12:32 - auto import which is a built-in feature
12:35 - of vs code but if it for some reason
12:37 - doesn't work for you you want to go
12:39 - ahead and type in this line of code
12:41 - so that will import this here we have
12:44 - this
12:44 - functional working
12:47 - add button and the input box i'm just
12:51 - zooming in for a little
12:53 - yeah pretty crappy but we're going to
12:55 - make it look beautiful
12:56 - all right next up uh let's do a little
12:59 - bit of styling because right now
13:00 - this application kind of lacks of
13:02 - styling so what you want to do is open
13:05 - up that css
13:06 - and target app right away
13:10 - which will have a height of
13:13 - 100 view height as well as a width
13:17 - of i said as well as a width of 100 view
13:20 - width
13:22 - with the background color it's going to
13:23 - be some sort of grayish
13:25 - i'm i tried to make it as minimal as
13:28 - possible
13:28 - so it's not going to be the most
13:30 - designed application
13:32 - but what you want is a 168
13:35 - 173 and a 182
13:39 - that will pretty much go ahead and give
13:40 - us this grayish something
13:43 - that's pretty much it for now all right
13:45 - going back to the
13:46 - css file we've got a few different other
13:49 - stuff to do okay so what you want
13:51 - is because we want the whole thing to be
13:54 - in the center
13:54 - we're going to use display grid this
13:56 - time
13:57 - and we want to go display grid and we're
14:01 - going to place the items
14:03 - so we're going to place items to the
14:06 - center
14:07 - and that will center the whole
14:09 - application we have this
14:10 - input box in here which is good but
14:16 - but we also want to make the input box
14:19 - look nice all right so in here in the
14:22 - input.css file
14:24 - okay you want to go ahead target input
14:27 - right away that will go and grab this
14:31 - like pretty much everything in here and
14:34 - you want to give it a height of a 50
14:36 - pixels
14:38 - width of 80 percent which will actually
14:41 - make sense later on but just go with the
14:43 - flow for
14:43 - now and we're gonna give it a border
14:47 - radius of 12 pixels
14:50 - and the background color of white all
14:53 - right so
14:53 - background color white yeah that's it
14:58 - and we're going to go with display flex
15:02 - and we are going to justify all the
15:04 - content to the center and
15:06 - uh align everything to the center that
15:10 - basically
15:11 - centers all the items all the child
15:14 - items
15:15 - in the center both vertically and
15:17 - horizontally so that's good
15:21 - once we're good with that now notice i'm
15:24 - going to type in input once again
15:26 - but this time around it's actually more
15:28 - of a pinkish color
15:29 - instead of the purple one so in
15:33 - here we actually target this class but
15:36 - this time
15:37 - we target the html tag input okay so
15:40 - that's a huge difference
15:42 - and what we want to say is going to be
15:45 - background
15:47 - so background is going to be none we
15:49 - want to remove
15:50 - everything because it looks ugly
15:53 - actually
15:54 - let's take a look at how it looks like
15:55 - so right now it looks like this
15:57 - now i order i've already removed the
15:59 - background but we have a few different
16:01 - stuff
16:01 - else to remove we have a border
16:05 - which we want to get rid of
16:08 - so that's going to be none again and
16:11 - we're going to give it a margin
16:13 - of left and that's going to be 12 pixels
16:17 - once again
16:18 - and we want this to be like stretch out
16:22 - as fast as far as it can and then just
16:25 - go ahead and take up all the space it
16:27 - can
16:28 - so we will say flex one and that will
16:30 - pretty much snap the button
16:31 - to the right hand side yeah just like
16:35 - that
16:35 - bank so now it's pretty crazy how it
16:39 - looks like but it will all come together
16:43 - now obviously this ugly blue
16:46 - thing when i uh go in here is
16:50 - ridiculous and we want to get rid of
16:52 - that and
16:53 - we can do that by targeting it
16:56 - and then adding a focus
17:01 - so that actually means once it is
17:04 - focused so once you actually click
17:05 - in there that this uh type this line of
17:08 - code is going to only apply at that time
17:11 - so we want to say outline and it's going
17:13 - to be none
17:16 - so now it's so much more batten better
17:19 - so much nicer
17:20 - we can still type in here if i actually
17:23 - select it
17:24 - and it doesn't look that ugly
17:27 - all right last but not least is going to
17:29 - be the button and that will have a
17:31 - margin
17:32 - right of 8 pixels a background color
17:39 - of rgb 214
17:43 - to 13. and another 213
17:47 - so that will be some sort of a more
17:50 - more of a light lighter gray
17:54 - and there is a typo so it doesn't work
17:56 - but
17:58 - we also we are also going to remove all
18:00 - the borders it had
18:02 - before and at a border radius
18:06 - of 8 10 pixels
18:10 - a height of 30 pixels
18:14 - and the width of 50 pixels
18:18 - so that's pretty much how it will look
18:20 - like it looks so much nicer
18:22 - and you can actually tell the bar that
18:24 - it's not the same color as the
18:26 - background not the same color as the
18:29 - input box so
18:30 - this is getting together all right so
18:32 - that was it
18:33 - for the input uh let's go ahead and
18:36 - continue
18:37 - by actually saving um
18:40 - all this stuff all the to do to to redux
18:43 - and that way we will have global
18:45 - variables and
18:46 - this is where things are going to get
18:48 - crazy
18:53 - all right time to actually save all the
18:56 - to-do's that we type in
18:58 - so for that that's where we're going to
19:00 - use
19:01 - redux now when we actually fire this
19:03 - project up
19:04 - inside of features we had something
19:06 - called the founder
19:07 - the counter and that was pretty much the
19:10 - whole redux slice
19:12 - that we had in here but we deleted that
19:14 - so we're just going to go ahead and
19:15 - create a to do
19:16 - slice in here
19:20 - and that will contain everything uh
19:24 - in connection with the redux now
19:27 - if you haven't already i'm showing you
19:29 - once again
19:30 - go to extensions open uh search for es7
19:34 - search for this very specific
19:39 - snippet snippet tool because this is
19:41 - going to save your life
19:43 - plus it is going to be a lot so if
19:46 - so if you haven't done that uh pause
19:48 - this video right now
19:49 - i don't usually say it so right now do
19:52 - pause it
19:52 - otherwise don't pause it ever at all
19:54 - also smash that like button
19:57 - and pause this install that and then
20:00 - come back
20:01 - all right so uh right now you should
20:04 - have that extensions
20:06 - otherwise you're going to get lost so uh
20:09 - going in here you just want to type in
20:11 - rx slice and that will
20:14 - pretty much create a redux slice for you
20:17 - inside of the redux toolkit now what you
20:19 - want here to do
20:22 - is because we named it two slides that's
20:26 - amazing
20:26 - now we want to give it a name and that's
20:29 - going to be uh to do's
20:31 - yeah over here now notice that we need
20:34 - to define the initial state
20:36 - out uh over here we can actually place
20:39 - it
20:40 - inside of here too but it doesn't make
20:42 - any sense like
20:43 - it's so much easier to handle them
20:46 - outside
20:48 - and what we can do is uh you want to go
20:51 - ahead and
20:52 - like this is where you actually started
20:54 - defining all those global states
20:56 - so you want to go and type in to-do list
20:59 - and that
21:00 - the initial state is going to be like it
21:02 - is a complete empty array
21:05 - we're just not gonna uh mess around with
21:07 - that
21:08 - now as for adding a to-do
21:11 - uh you will need to define something
21:14 - called
21:15 - something called a reducer this is where
21:18 - this is kind of like a symbol function
21:20 - that will just make sure that everything
21:22 - is saved and locked all in place
21:24 - so you just want to have a save to do
21:28 - function in here which will have state
21:31 - and action as their inputs
21:34 - and this is going to be the uh safe to
21:37 - do function now
21:38 - what is happening here so state
21:41 - is actually the current state of the
21:44 - safe to do
21:46 - action is uh something that
21:49 - when you shoot in redux that's what uh
21:51 - that's
21:52 - this is the function that is actually
21:53 - getting uh executed
21:55 - and this will have a payload uh which is
21:59 - going to be carried in here
22:01 - so i will actually uh make sure that you
22:04 - guys understand it just let's
22:06 - first create this so what we want to do
22:09 - is say
22:09 - say state dot to-do list
22:13 - the push oh that push
22:17 - and we want to throw in the action
22:21 - dot payload all right what's happening
22:25 - here
22:26 - okay so i will create a i will just
22:30 - comment here a normal state okay
22:33 - so say we got the to-do list all right
22:36 - so
22:36 - you do list
22:41 - and set to do list
22:44 - and this is going to be a used state
22:47 - and it will have an initial value of an
22:50 - empty array okay
22:52 - so
22:56 - this part right if you already
22:59 - understand
23:00 - uh states this will not be hard so this
23:02 - part
23:03 - over here is going to be this part
23:06 - exactly
23:07 - we just outsource it to a different kind
23:09 - of
23:10 - function over here okay it's pattern
23:12 - recognition
23:13 - uh this is how it looks like so to-do
23:16 - list is actually the state the current
23:20 - state
23:20 - of this specific uh
23:24 - this specific state okay
23:27 - now because redux is able to manage
23:30 - several states
23:31 - we actually need to like that has a
23:33 - current state of
23:34 - all those states that it actually
23:36 - manages inside of it
23:38 - so we will need to go into state and go
23:40 - into to-do list
23:41 - right so i will go slate go to-do list
23:45 - and then you want to push in the
23:48 - action.payload
23:49 - so what is this thing actually this
23:51 - whole thing this is the
23:53 - set to-do list all right so how to use a
23:55 - set to-do list
23:56 - it's basically set a new
24:00 - uh list and then you throw something in
24:02 - there now this is going to be the action
24:04 - payload
24:05 - okay all right now that
24:08 - we covered this uh make sure to actually
24:11 - play it back a few times
24:12 - and just try to understand what's
24:14 - happening here because
24:16 - this is going to be a lifesaver
24:19 - and with that you want to go ahead and
24:21 - export it
24:22 - because this is going to be a an action
24:25 - and you just want to
24:26 - uh add the save to do in here and that
24:29 - will
24:30 - that is it so far all right going back
24:33 - to input.js we need to import a
24:37 - few different things so first thing
24:39 - first we want to import
24:41 - uh use dispatch
24:44 - uh from the react redux uh
24:47 - library that's going to be the tool that
24:50 - we use to interact with redux so
24:52 - remember redux is actually layer around
24:55 - the application that is accessible for
24:57 - all the components
24:58 - so that but it actually needs a tool
25:02 - which which is use dispatch to actually
25:04 - interact with it
25:05 - so right after defining this piece of
25:08 - state
25:09 - you want to go ahead and i think if you
25:12 - just type and use dispatch
25:15 - and go with this one and then delete
25:18 - function
25:19 - this is what we need now we define it
25:21 - it's good
25:22 - and after that uh in here
25:26 - we exported a safe to do but now we want
25:29 - to import that
25:30 - so save to do and we want to import it
25:34 - from
25:35 - uh it's actually going to be in the
25:37 - features
25:38 - oops in the v come on
25:42 - so it's actually going to be in the
25:43 - features folder and
25:45 - inside of the to-do slides all right and
25:48 - to actually make sure
25:50 - that it actually it works and everything
25:52 - is working
25:53 - i'm just going to fire up a chrome real
25:55 - quick and we'll show you how it works
25:56 - but
25:57 - first we need to define the function
25:59 - that is actually going to shoot into
26:01 - redux so in here i'm just going to type
26:05 - in
26:05 - console.log and
26:08 - i just wanna
26:11 - i just wanna say adding to do we're
26:14 - adding actually the input
26:16 - so just make sure that we know what is
26:19 - happening
26:20 - and what we are actually uh throwing in
26:23 - redux
26:24 - so once that's done uh we went and
26:26 - that's when we want to save a
26:28 - uh full that's what we wanted to save
26:31 - that to do
26:32 - so we want to use the dispatch to
26:34 - actually interact with the
26:36 - redux and then i'm going to go ahead and
26:38 - save the to do
26:40 - but we're actually going to throw in a
26:42 - full uh
26:44 - object so what we want is we want to
26:46 - have an item
26:47 - that is going to be the input that we
26:49 - just typed
26:50 - in in the form and it will have a
26:53 - done indicator uh which is going to be
26:56 - false obviously because we haven't
26:58 - checked it as done
26:59 - and we want to give it an id so once we
27:03 - uh interact with the done check mark
27:06 - we actually know which one to actually
27:08 - mark uh
27:09 - done so it will say we're just going to
27:12 - give it an id
27:13 - and i think the easiest one is to say
27:16 - date dot now
27:17 - that is going to be unique time always
27:19 - passes
27:21 - so that's pretty much it and one more
27:24 - thing we need to
27:25 - store this whole uh we need to store
27:29 - this specific state in the store.js file
27:33 - so that way actually redux keeps track
27:35 - of what is going on
27:37 - and that will have another reducer okay
27:39 - so what
27:40 - we do here is we're gonna say import
27:44 - and we're gonna go ahead and say to do
27:46 - reducer
27:49 - and that will be imported from
27:54 - from the features and the 2d slice okay
27:58 - now this time we actually do export
28:01 - default here
28:02 - so it's all good and what we want
28:06 - is we want to say to-do's is going to be
28:10 - the reducer we just imported
28:14 - so that's good and let's take a look at
28:16 - what we have just built
28:18 - and if i go in and type in hey and go
28:21 - ahead add it
28:22 - now you can see the difference is this
28:26 - and we can see the new uh state we can
28:29 - see it is a
28:30 - chart which is pretty crazy but i don't
28:33 - even know what's going on
28:34 - we have to we can see the raw as well as
28:37 - the action
28:38 - and this is the payload we threw in
28:41 - so that's pretty much how you uh through
28:44 - uh
28:44 - shoot into redux and set a new piece of
28:48 - state
28:54 - all right next up it's time to actually
28:56 - go ahead and
28:58 - render out all the stuff that we've just
29:01 - saved into redux
29:03 - so for that we're gonna go into app.js
29:06 - and this is where we're gonna take care
29:09 - of
29:10 - the to-do list part now in here i want
29:12 - to actually create
29:13 - two divs which will wrap up the whole
29:17 - to-do list of so one is going to be
29:20 - app container
29:24 - and this will actually uh include
29:27 - the input as well not unlike the other
29:30 - one
29:31 - which is going to be app to do container
29:36 - and inside of there that is where we
29:39 - will
29:40 - loop through the saved
29:43 - stuff so whatever is in the slice
29:45 - whatever is stored in the
29:47 - slice that's what we're going to be
29:48 - looping through and then
29:51 - that is what will be rendered out all
29:53 - right so
29:54 - uh just for that purpose i
29:59 - i want to actually create just a
30:02 - dummy um dummy to do
30:06 - so i'm just going to do this and
30:09 - it will equal to
30:13 - a few different stuff all right so let's
30:15 - go in here and
30:17 - i'm just going to grab the stuff
30:20 - bang bam
30:24 - and oops actually i forgot that it's an
30:28 - object so we will take care of that now
30:32 - okay and whatever this
30:36 - is like okay it's just going to be to do
30:39 - dope and
30:44 - might even this is going to be some sort
30:47 - of number so i'm just going to pass that
30:48 - in
30:49 - and we want to have a true and a false
30:53 - just for later purposes boom
30:57 - go in here it's going to be true
31:00 - and yep so it's going to be to do two
31:03 - dope
31:04 - and bang
31:08 - whatever so over here what we see
31:12 - this is just a symbol array but if we
31:15 - take a look at
31:16 - what we dispatch into redux this is
31:19 - pretty much
31:20 - the exact same um structure
31:24 - so for this is going to be perfect for
31:27 - development purposes
31:30 - and what i will do is i'm just gonna
31:32 - loop that through
31:33 - with a dot map and in here i'm gonna
31:36 - have an item
31:38 - bank and instead of that kind
31:42 - i'm just gonna go with the normal
31:43 - brackets and in here i will have a
31:47 - component okay so that's going to be
31:49 - to do component dope so let's actually
31:52 - build that
31:54 - let's actually go ahead and build the
31:56 - two item and
31:58 - first thing first uh just to cancel out
32:00 - this error
32:01 - let's just quickly uh build the
32:03 - component
32:04 - so it's going to be due to item
32:08 - dot js yep exactly
32:12 - and we're gonna just say rafce boom
32:16 - and the class name just give it quickly
32:19 - it's going to be to do
32:20 - item that's it and
32:23 - i'm just going to pull it on the side so
32:26 - i can
32:27 - quickly import it real fast so i want
32:30 - to do item all right
32:34 - okay uh with that before we actually
32:36 - forget
32:37 - uh we want to have a to-do item that css
32:40 - file just as well
32:42 - we can leave it over there and let's
32:44 - quickly import it
32:46 - right away so it's going to be to do
32:48 - item.css
32:51 - okay and let's just think about it for a
32:53 - second so what we
32:54 - actually want is that this specific
32:58 - item displays the uh whatever we have to
33:01 - do
33:02 - whatever uh the specific item
33:05 - on our list if it is done or not
33:08 - and then based on uh that's that
33:11 - uh and if and if we go ahead and click
33:15 - that uh that we want to take this off we
33:18 - need to know the specific items id
33:21 - so we need to pass in all the different
33:23 - props that we have inside of redux
33:25 - so we're just going to go ahead and we
33:27 - want to give it a name
33:29 - which is going to be item dot item
33:32 - which is pretty weird but it does work
33:36 - and we also want to throw in
33:39 - i'm just going to do a little bit of
33:41 - line breaking here
33:43 - we also want to throw in uh done which
33:46 - is
33:47 - item dot done
33:51 - okay done right there boom
33:54 - and we also want to throw in the id
33:57 - which is going to be
33:58 - item id
34:01 - this name actually sounds a little bit
34:03 - weird but it is what it is
34:06 - all right uh next up uh here we
34:09 - actually want to catch e everything
34:11 - every single one of those that we
34:13 - actually throw in so we just wanna
34:15 - have a name a done and an id
34:18 - in there and now the fun begins
34:21 - so in here what we actually want to do
34:25 - is obviously have the check box but
34:28 - that's going to be
34:29 - just a little bit later so let's just
34:33 - have the check box over here and we also
34:35 - want to
34:38 - write the name right over here so that
34:41 - is actually going to be
34:42 - ap tag which will contain
34:46 - which will be just simply the name so
34:48 - it's not going to be something crazy
34:50 - that is happening
34:51 - but let's take a look at how it's going
34:53 - there is some sort of
34:54 - error okay and okay so
34:58 - it actually does work there might be
35:00 - some sort of issues
35:02 - with the with the styling but we will
35:04 - take care
35:05 - each and every single one of those so
35:07 - don't worry about that for now
35:09 - um for now let's get the functionality
35:13 - right
35:13 - and then we will figure out everything
35:15 - else so yeah it does work
35:17 - uh everything is in place so yeah
35:21 - let's go back this actually does work so
35:24 - yeah and what we want to do is add a
35:28 - specific
35:29 - class name based on whether
35:32 - it is done or not okay so in here what
35:35 - we want to do
35:36 - is done and if it is done then we want
35:39 - to add
35:40 - a to-do item and
35:43 - in the bam naming convention there is
35:45 - two different ways we can go about it
35:48 - uh so let's go to getpam.com
35:53 - so if you go ahead and go over here uh
35:56 - there is the
35:56 - the uh block so the so our normal block
35:59 - is just simply
36:00 - uh by its name then uh the element
36:04 - has this uh some sort of on the
36:07 - uh so so this is how elements are
36:11 - and with dashes we can add these uh sort
36:14 - of
36:14 - modifiers okay so that's pretty much
36:17 - what we will do uh over here as well
36:20 - so we want to have the to-do item and
36:23 - then we're just gonna say
36:24 - done over here so that we'll modify it
36:27 - and that will
36:28 - uh just do a strikethrough of
36:31 - the name okay we will set that up later
36:34 - on in the css part
36:36 - okay so we actually have the name done
36:40 - and now it's actually time to go ahead
36:43 - and
36:43 - install material ui and take a look at
36:46 - the checkbox stuff so let's go in here
36:49 - go back to the terminal and just type in
36:53 - yarn add and at material
36:57 - dash ui core boom and while that does
37:01 - its thing
37:02 - uh we can just take a look at material
37:04 - ui
37:06 - and we want to have a checkbox thing so
37:09 - let's just search for that
37:11 - buying react checkbox
37:14 - and this is exactly what we are looking
37:16 - for
37:17 - so this is all the documentation and all
37:19 - that kind of stuff i'm not gonna
37:21 - spend too much time on it um what you
37:25 - actually want here is this
37:27 - uh so i'm just gonna add a few space
37:30 - over spaces over here so you obviously
37:33 - want to import it from the material ui
37:35 - core
37:36 - and then for a checked right
37:39 - so that is going to be responsible to
37:42 - know whether it
37:43 - the item is checked or not the color you
37:46 - want to set it to primary
37:48 - because that's going to be this bluish
37:50 - thing
37:51 - and you want to fire off a function
37:55 - right so once you click on it you want
37:57 - to fire off a function
37:59 - which which i called handle check and
38:01 - this is just for seo purposes and for
38:04 - material ui to work
38:06 - so let's just create that function that
38:08 - we will fire off but
38:09 - let's not do anything in there so we
38:12 - will have handle
38:13 - check boom i actually messed something
38:16 - up in there
38:18 - yeah right okay now it's better so
38:21 - that's uh
38:22 - so we got the function already so that's
38:24 - good let's take a look at what we
38:26 - have over here and yeah
38:30 - just like that nothing is happening but
38:33 - we know that
38:34 - this one was actually marked as true
38:37 - this one was actually marked as false so
38:39 - we're we're getting there so let's fix
38:42 - that styling and then let's go ahead
38:44 - uh style the studio item and then we
38:47 - will hook
38:47 - up redux and do all the rest of the
38:50 - stuff
38:51 - so i'll catch you guys soon all right
38:53 - let's go ahead
38:54 - and do the styling part real quick
38:57 - so first thing first what we will do is
39:00 - let's just go into app.css and
39:03 - fix this weird looking stuff over here
39:05 - so in here
39:07 - uh we have two more stuff to do so we
39:09 - have the app
39:11 - we have the app uh cont oh we have the
39:14 - app
39:14 - container container
39:20 - boom and then we
39:23 - like it has a height of 700 pixels a
39:26 - width
39:27 - of 500 pixels
39:31 - with the semicolon
39:34 - we obviously have a display
39:37 - display of flux
39:41 - display flux
39:44 - and we will set the flex direction to
39:47 - column
39:50 - and align all the items to center
39:54 - and we will have a weird uh background
39:57 - color
39:57 - i was just moving around on the rgb
40:00 - scale
40:01 - so we'll have a two three two
40:05 - then a two three four ouch
40:09 - not that much yeah and the two three
40:12 - seven
40:12 - so that's that's kind of like a
40:15 - white-ish
40:16 - gray-ish something
40:20 - it's between white and light gray it's
40:22 - just so we have like
40:24 - this stuff all right and to actually
40:27 - make it look not that weird we want to
40:30 - add a
40:31 - border radius of 12 pixels
40:35 - and a padding 32 pixels and
40:39 - zero so what this will do is it will
40:42 - push stuff from
40:45 - above and below 30 pixels but will not
40:48 - mess on the sides okay
40:52 - exactly that even if we go into inspect
40:56 - element and we just put it on the side
41:01 - we can see that uh on the top and the
41:03 - bottom there is that green uh
41:06 - green line that indicates the whole
41:09 - um padding all right so
41:15 - next up we have the to-do container
41:19 - [Music]
41:22 - to do container which is yeah this thing
41:25 - you can go and copy-paste boom so much
41:28 - faster
41:29 - and this will actually have a flux of
41:32 - one so we want the
41:34 - input to be all the way down and have
41:37 - the to-do list
41:38 - take up as much space as possible
41:42 - okay and we also want to have uh give it
41:45 - a width of a hundred percent
41:48 - and then display
41:52 - flux give it a semicolon
41:57 - flex direction of column and align
42:01 - items to center all right time
42:04 - to design time to give some style to the
42:06 - to-do item
42:07 - all right it's time to desi uh give the
42:10 - to-do item some sort of nice looking
42:12 - style
42:13 - because we have almost
42:16 - the whole thing ready we're not going to
42:19 - go too much into detail with this one
42:21 - but the way it looks it's just
42:25 - super unpleasant so what we want to do
42:29 - is
42:30 - go into to do item that css
42:33 - and then just target the whole thing
42:36 - remember this
42:36 - is not about creating the ultimate video
42:40 - app it's about understanding how to
42:43 - interact with redux so to the item
42:47 - we're going to have a display of flux
42:51 - and we are going to align the items to
42:53 - the center
42:55 - with a width of an 80 per
42:58 - percent and the background color of
43:02 - white we're also
43:06 - going to give it a margin
43:09 - 6 on the vertical axis six pixels on the
43:12 - vertical axis
43:14 - and four pixels on the horizontal axis
43:17 - okay
43:18 - so it's going to be six and six uh above
43:21 - and below
43:21 - and then four uh right and on the left
43:25 - but it's super easy to do things like
43:27 - that okay
43:28 - it's going to have a height i said
43:31 - height of 40 pixels
43:35 - and then a border radius of
43:38 - 12 pixels so that way it actually
43:41 - matches
43:42 - the form factor of this app right so
43:45 - that's
43:46 - pretty much all the design we will have
43:49 - just to give it just to make sure that
43:53 - the checkbox doesn't go wrong
43:56 - let's just set the uh p tag to ha
44:00 - use all the space it actually can so
44:02 - give it a flex of one
44:04 - and then we want to set this track
44:06 - through up so
44:08 - to do item and remember
44:11 - the modifier so then it's good
44:14 - so if that flag is active
44:19 - we want to add a text decoration of
44:22 - line through and that will just yeah
44:26 - that will pretty much go ahead and just
44:27 - drag through the done to do
44:29 - so that's pretty much the design
44:33 - and the styling on the to-do application
44:36 - so now it is time we actually connect
44:39 - uh it with redux over here and then
44:44 - we had the to-do function and we are
44:46 - pretty much done all right so let's
44:47 - talk a little bit about um what is
44:51 - actually going to happen
44:52 - when we shoot again into redux into the
44:55 - data layer
44:56 - and we actually want to grab something
44:58 - out of it so for
44:59 - that we actually need to go into the 2d
45:02 - slice once again
45:04 - and we will need to export the current
45:07 - state
45:07 - of that specific state okay so
45:11 - uh for that we're just going to say
45:12 - export const
45:15 - const select
45:18 - to do list this is how we will call it
45:21 - and then it will equal to state and it
45:24 - will fire up a function right
45:26 - so it's gonna be the state to do's
45:30 - and we want to uh grab this specific one
45:33 - okay
45:35 - so what is happening here at that point
45:39 - uh we will reach into all the states
45:42 - grab the two use one so this one right
45:45 - so this slice
45:47 - and then pick out this specific
45:50 - uh state and then just return that okay
45:54 - i hope this kind of makes sense it's all
45:56 - pattern recognition
45:58 - watch this video a few times try to make
46:00 - it try to understand it
46:02 - uh we i will be using this a lot uh in
46:05 - the near future
46:06 - i will actually build a few clones with
46:09 - this
46:10 - just just like adding redux onto it just
46:12 - so you guys are exposed to it
46:15 - and yep that's pretty much what we do in
46:18 - here
46:19 - and then we go back to app.js remove all
46:23 - this stuff
46:27 - and then we will import two things one
46:29 - is going to be
46:30 - so let's import the use selector
46:33 - which is um use selector
46:37 - from uh
46:40 - and this is going to be the tool uh it's
46:42 - like this patch but
46:44 - this patch is actually pushing something
46:46 - and it's executing something
46:48 - over there on redux but this one
46:51 - use selector is actually grabbing it
46:53 - data okay
46:55 - so that's what is happening over there
46:57 - and then we obviously want to
46:59 - uh get the select uh
47:03 - select to do a list
47:06 - from the user slice
47:12 - so fro
47:15 - from the uh to do slice okay
47:19 - so what we want to do is uh
47:23 - not even that up so we want to go into
47:25 - features
47:26 - and then to the slides that's pretty
47:28 - much what we need to
47:29 - import and over here
47:33 - we definitely need to make this specific
47:37 - variable
47:39 - so it's just going to be const boom and
47:42 - then equals
47:44 - use selector and we're just going to
47:46 - select
47:47 - the to-do list notice how i gave the
47:51 - names
47:52 - what what kind of naming convention did
47:54 - i use
47:55 - um so obviously this should be
47:58 - just how you would name the variable but
48:01 - then
48:01 - over here it has to like it is highly
48:04 - advised that you give
48:06 - either a set or a save or something that
48:09 - is actually
48:09 - referring to what is happening over
48:11 - there okay so you nee
48:13 - you might want to just go with some sort
48:15 - of descriptive
48:16 - uh descriptive naming but
48:20 - make sure that it's actually an action
48:22 - and
48:23 - when you export you always want to go
48:25 - with select because that way you know
48:27 - that okay you select so you need to use
48:29 - selector and it's just connect
48:31 - all right so let's take a look at what's
48:35 - happening over here
48:37 - okay so to-do list not defined bug
48:40 - we don't care about it just yet all
48:42 - right so
48:44 - do-do bomb
48:48 - i don't even uh let's say take the dog
48:51 - for a walk add
48:54 - boom there it is bye
48:57 - grow serious bam
49:01 - there we go now right now checking it
49:04 - off
49:05 - doesn't work just yet but this is what
49:08 - we are going to be doing
49:09 - next up
49:15 - all right last but not least um we want
49:18 - to actually
49:19 - create a handle check function that will
49:23 - take care of all the checking and all
49:25 - that stuff so if we actually go ahead
49:27 - and
49:28 - do check the button or do check to
49:31 - do if you actually do check the to do
49:34 - then it
49:34 - actually goes ahead and changes from
49:36 - unchecked to checked
49:38 - right because over here nothing happens
49:41 - and
49:41 - if we actually decide that okay it's
49:44 - actually not done and we want to uncheck
49:48 - it
49:48 - right so let's do it let's go ahead and
49:50 - do that so
49:51 - over here uh this is going to be the
49:55 - function that we will dispatch into
49:58 - redux okay so that's going to to do
50:00 - slice okay
50:01 - and we're going to actually have a
50:03 - another uh
50:04 - reducer okay so reducer is essentially a
50:08 - function that we run that we run
50:11 - through redux okay so what we want to do
50:15 - is it's going to be set check and again
50:18 - it's something super descriptive um
50:23 - it is super descriptive so i know that
50:25 - it is setting
50:27 - the item either checked or unchecked but
50:29 - it definitely
50:30 - sets the check okay and in here
50:34 - and here we are just going to map
50:36 - through
50:37 - on the to-do list and we actually first
50:40 - want to identify like which one
50:43 - which item are we actually talking about
50:44 - okay so we're just going to say state
50:46 - dot to-do list
50:48 - map right and that will actually give
50:51 - back an item
50:54 - and we will decide if it is ours or not
50:57 - so you're just going to go if and then
51:00 - action
51:01 - dot payload
51:05 - we're just going to go ahead and say
51:06 - action the payload
51:09 - and if it actually equals to item
51:13 - the id then we actually want to
51:18 - check if it is then we actually want to
51:20 - go ahead
51:21 - and do the checking or the unchecking
51:23 - right so
51:24 - in here we're going to have another if
51:26 - statement and we're going to check if
51:28 - and we're going to see if the item dot
51:32 - done
51:32 - is equal to true so if the if that to do
51:36 - is done or not
51:37 - so if it is then we want to uh set that
51:40 - to
51:40 - false right because then because then
51:44 - that item is done
51:45 - but we actually decided that it's not
51:47 - done yet so we want to uncheck it
51:49 - okay so i uh item that done
51:52 - and that's going to equal to false
51:56 - on the other hand if it is actually not
51:58 - done then we actually
51:59 - want to mark it as done and
52:02 - it's going to be true bum and we should
52:06 - be
52:06 - good to go all right let's take a look
52:09 - at
52:09 - if it works or not let's go ahead and
52:11 - refresh okay
52:13 - take the dog for
52:16 - a walk
52:20 - boom okay so the reason it doesn't work
52:24 - is because i made the reducer but i
52:27 - haven't exported it
52:28 - okay so i want to go ahead and say set
52:31 - check
52:32 - and then go back to judo item
52:36 - and then import all the important stuff
52:39 - i forgot
52:40 - have the stuff okay so we want to have a
52:43 - use dispatch over here this
52:46 - patch oh come on dispatch
52:51 - and we want to import it from react
52:53 - redux
52:54 - i said react reader
52:58 - import use this patch
53:02 - from react redux yes
53:05 - that's it i don't know what didn't work
53:07 - last time but okay
53:09 - and then we also want to import uh set
53:12 - check
53:15 - and we want to import it from
53:19 - actually a level above and it's going to
53:21 - be in features
53:23 - to do slice okay so once we handle the
53:27 - check
53:28 - so once we click that we actually want
53:30 - to dispatch in there
53:31 - but we actually need to this uh
53:34 - okay so let's quickly go ahead and
53:37 - define this uh
53:39 - dispatch function and leave that empty
53:43 - so once we actually go ahead and click
53:45 - that uh check button
53:47 - then that's when we want to go ahead and
53:51 - just dispatch oh
53:56 - dispatch and then set check and then we
53:59 - just want to
54:00 - give the id in as a uh
54:05 - as the payload of that specific action
54:08 - so this now should be able to take care
54:11 - of checking or unchecking items so let's
54:14 - go ahead and take
54:16 - the dog for a walk
54:20 - add and that my friends
54:24 - this is how it is done we can go ahead
54:27 - and actually add a new one uh
54:30 - by grow rosaria's
54:34 - boom we can uh
54:38 - we need to do the laundry do the long
54:42 - tree yeah add that too and then i just
54:45 - want to check that off
54:47 - or maybe all of them or then i decide i
54:49 - need to get another stuff or i haven't
54:51 - done
54:52 - the laundry or i might as well just go
54:54 - with the dog for another walk
54:56 - okay let's take a look at what actually
54:59 - happens over here
55:00 - so take the dog for a walk in google
55:03 - chrome as well
55:05 - all right so over here we save the to do
55:07 - bom
55:08 - it actually happens in there boom we
55:11 - throw it in
55:12 - okay we check it okay set check payload
55:16 - we just throw in the uh the uh that date
55:20 - okay the id look it look at here
55:23 - boom and it's set set true boom that's
55:26 - it
55:27 - simple as that all right that was it for
55:30 - today's video i hope you guys liked it
55:32 - if so make sure to
55:34 - smash that like button down below
55:36 - literally give that a punch
55:38 - and if you want to dive deeper in these
55:41 - sort of stuff
55:42 - make sure to go ahead and check out
55:44 - profit with javascript down below in the
55:46 - description
55:47 - this is your go-to one-stop shop course
55:50 - to landing jobs as a developer
55:53 - and making a ton of money so if you like
55:55 - cash
55:57 - literally go ahead and check it out also
55:59 - let me know
56:00 - if there is something else that you want
56:03 - me to build
56:04 - for you guys um i actually got a few
56:07 - different requests so
56:09 - it might take quite a while but i will
56:11 - personally
56:12 - reply to each and every single one of
56:14 - you
56:15 - for the next few hours after this video
56:18 - is being dropped
56:19 - and just message me over here this is
56:22 - going to be my instagram handle
56:24 - uh message me whatever you want or just
56:26 - comment down below what you think
56:28 - how you like this one and with that said
56:30 - if you guys
56:31 - actually watch the whole thing drop a
56:34 - snail
56:35 - emoji in the comments just for fun just
56:37 - so i know like
56:38 - who actually watches the whole stuff and
56:41 - then yep
56:42 - that was it for today checking out peace

Cleaned transcript:

what's up you guys it's david here from from coverprogrammer.com and today we are going to be talking about how you can get started with the redux and state management and all that kind of stuff using the redux toolkit now this is actually going to be the simple easiest way that you can get uh get your head into state management redux and all these kind of stuff so let's just talk about what redux is so this is probably the most important skill that a react developer can learn above react obviously redux basically is a bubble around your application it's kind of like a data layer speaking of data i got you a little something that can potentially up your programming game to the next level and you can actually monetize it at any given industry that's right one of the most important skills you can learn as a developer and you can actually charge more by just implementing some sort of analytical stuff is basically data science now your onestop shop to learn data science is actually data camp is they give you a wide range of 300 plus courses that you can choose from say sql python or whatever they got you covered all that courses are bitesized so no matter how tight your schedule is it does fit in and the best part it is actually accessible on mobile so even if you're on a toilet walking your dog getting groceries you can actually watch data camp all their courses are focused on practicality giving you the head start you deserve subscribe today for 25 bucks a month and let the skills you acquire pay for it still on the fence check out all their courses first chapter for completely free check out datacamp in the description down below let's get straight back into the video that is accessible for all the components that you have inside of your application basically you use it when the normal states are just not good enough and the whole idea around it is that you have a data layer around your application that is accessible for all your components so basically you can have some sort of global states that way creating an app with redux is as simple as typing in npx create react app space dot space template redux and it's just going to spin up a full working application that you can go ahead and get started after smashing that like button for the youtube algorithm i've made a quick todo app just to demonstrate how this whole thing actually works and how you should be thinking about it and i actually link it down below so you can go ahead and clone that repository from github and you can just go ahead and take it away play with it and do whatever you want and speaking of stuff in the description we actually just released a new module to our course profit with javascript so i actually highly highly recommend checking it out because it's pretty awesome and i'm not gonna talk too much more about it and we actually gonna have some exclusive stuff just in there so make sure to go ahead and check it out we also have a one hour free training down below in the description you can go ahead and check out how nas made 300 grand in three years as a javascript developer so if you like money go ahead check it out because it is like literally a stepbystep tutorial how you can do the same so if you like money make sure to check it out and actually watch the whole thing it's super awesome with that said comment down below what you want me to build next for you guys and smash that like button subscribe for more awesomeness and let's roll that intro all right step number one into understanding how this redux thing works is we're going to build a todo app so we're just going to call it uh redux it's good and over here let's open up a new terminal and we're going to type in here npx create react app space dot dash dash template redux template redux so this is pretty much going to go ahead and do us all the hard work do all the hard work for us i will speed this up because this actually does take quite a while and this will basically do uh create us a react app that will be completely usable by us and will have a redux in it so we can pretty much go ahead and start building just like that all right all right so once the process is done we can you pretty much do the usual code space dot that will fire up a vs code with the project in it and i remember asking for more zoom so i will zoom in even further let me know guys in the comments down below if it's good enough zoom or not and but anyways this is pretty much the app we got we have a few different uh other folders than before but let's just go ahead and fire up the application so i'm just gonna hit yarn start in here and this is the template application that we get with redux and you can see a counter over here we can add like different amount of numbers to it and this will this is basically getting stored in uh redux and this is pretty much what we will understand and go ahead and make as a todo list all right so in here we have a few different things uh we will pretty much not use any of these just like uh with the normal react app we can pretty much go ahead and delete everything inside of app.js so everything in between the header is going to be deleted as well as app.css is going to be completely emptied uh all these test files are not gonna be used at all neither is going to be the logo and we can go into uh index.css and add a margin of complete zero and that will pretty much just snap everything to the side and inside of the features folder we have this counter folder which we can go ahead and delete and in the store.js file we can delete all the import and all these reducers so we can let's take a look at how the application is looking like so super white that's good and going back to the app.js file let's just add a new uh h1 which is going to be i don't know say clever programmer in here and if it shows up at the corner we are good to go so right now let's go ahead and continue uh with the todo app all right so let's take a look at how we will build this whole thing so obviously on top we will have the todo list so that's pretty good and below that we want to have some sort of input box so that way we can add new and new items now i also want to add a done or some sort of check check mark thing and that way we can keep track of what kind of to do do we have for the rest of the day all right so let's go ahead and build first the input part because afterwards then we will be uh able to work easier with the todo list so let's go ahead and open up a new folder in here which we will call components all right so in here you want to go ahead and create an input.js as well as a input.css file so that will be our full input screen so i'm just gonna make this uh window look nice and if i type in here rafce that will go ahead and create a full working react component so if you don't know what this magic is go to the extensions of your vs code type in es7 and then this will this is the one extension that you want to actually go ahead and download all right so with that uh we can now go ahead and add a class name over here which is going to be input right and now we're going to make it uh so it looks capital because somebody because for some reason uh because for some reason it didn't uh make it didn't capitalize it but all good and before we actually forget let's import the input.css file like i said in put css moving on uh let's just create the full uh html structure of this file so we're gonna have obviously an input for uh in here simple input box and below that we want to obviously have a button so the button is what we're going to press once we are finished once we're done typing and that will actually fire off a function that will add the actual to do to the list okay so that's that's function so we're just going to add a let's actually call it add and it will a it will fire off the function of so on click so this is when we want to fire up that very function so we're just going to call it add to do and going up here let's go ahead and define that so and you do okay and right now the application is going to freak out because it doesn't know what to do when we do this so we pretty much want to keep a track of what's happening in the input box right so we will need to have a piece of state for that so for that we are going to use the use state library of react so what that does is it's pretty much the variable variables of react all right so let's just type in const and we're going to say input input and set input and that will be a used state with an initial value of nothing now you might be confused what's going on here if you are it's completely fine just know that we have a few other videos where we explain what is going on here but this is not uh this is this video is about redux so i'm not gonna dive deep into it make sure to check out profit with javascript down below in the description we go in depth in all these kind of stuff so with that said let's move on and just to actually connect that piece of state with the input box we want to say a value is going to equal to input and once we start typing that will fire off an unchanged function so then what we want to do is say that's going to be that's going to have an event okay and we want to set the input that uh inside the input whatever that to whatever that event is okay so that even actually has a target value which is pretty much the actual button that we pressed the value of that that wasn't so if i press this button over here this will go ahead and mean g all right so that's pretty much it now we actually saved it a piece of state all right next up what we will do actually let's go ahead and check it out first like how it actually looks like okay it doesn't look like nothing because we haven't imported it so we will go ahead and import input and there we have it so i actually used auto import which is a builtin feature of vs code but if it for some reason doesn't work for you you want to go ahead and type in this line of code so that will import this here we have this functional working add button and the input box i'm just zooming in for a little yeah pretty crappy but we're going to make it look beautiful all right next up uh let's do a little bit of styling because right now this application kind of lacks of styling so what you want to do is open up that css and target app right away which will have a height of 100 view height as well as a width of i said as well as a width of 100 view width with the background color it's going to be some sort of grayish i'm i tried to make it as minimal as possible so it's not going to be the most designed application but what you want is a 168 173 and a 182 that will pretty much go ahead and give us this grayish something that's pretty much it for now all right going back to the css file we've got a few different other stuff to do okay so what you want is because we want the whole thing to be in the center we're going to use display grid this time and we want to go display grid and we're going to place the items so we're going to place items to the center and that will center the whole application we have this input box in here which is good but but we also want to make the input box look nice all right so in here in the input.css file okay you want to go ahead target input right away that will go and grab this like pretty much everything in here and you want to give it a height of a 50 pixels width of 80 percent which will actually make sense later on but just go with the flow for now and we're gonna give it a border radius of 12 pixels and the background color of white all right so background color white yeah that's it and we're going to go with display flex and we are going to justify all the content to the center and uh align everything to the center that basically centers all the items all the child items in the center both vertically and horizontally so that's good once we're good with that now notice i'm going to type in input once again but this time around it's actually more of a pinkish color instead of the purple one so in here we actually target this class but this time we target the html tag input okay so that's a huge difference and what we want to say is going to be background so background is going to be none we want to remove everything because it looks ugly actually let's take a look at how it looks like so right now it looks like this now i order i've already removed the background but we have a few different stuff else to remove we have a border which we want to get rid of so that's going to be none again and we're going to give it a margin of left and that's going to be 12 pixels once again and we want this to be like stretch out as fast as far as it can and then just go ahead and take up all the space it can so we will say flex one and that will pretty much snap the button to the right hand side yeah just like that bank so now it's pretty crazy how it looks like but it will all come together now obviously this ugly blue thing when i uh go in here is ridiculous and we want to get rid of that and we can do that by targeting it and then adding a focus so that actually means once it is focused so once you actually click in there that this uh type this line of code is going to only apply at that time so we want to say outline and it's going to be none so now it's so much more batten better so much nicer we can still type in here if i actually select it and it doesn't look that ugly all right last but not least is going to be the button and that will have a margin right of 8 pixels a background color of rgb 214 to 13. and another 213 so that will be some sort of a more more of a light lighter gray and there is a typo so it doesn't work but we also we are also going to remove all the borders it had before and at a border radius of 8 10 pixels a height of 30 pixels and the width of 50 pixels so that's pretty much how it will look like it looks so much nicer and you can actually tell the bar that it's not the same color as the background not the same color as the input box so this is getting together all right so that was it for the input uh let's go ahead and continue by actually saving um all this stuff all the to do to to redux and that way we will have global variables and this is where things are going to get crazy all right time to actually save all the todo's that we type in so for that that's where we're going to use redux now when we actually fire this project up inside of features we had something called the founder the counter and that was pretty much the whole redux slice that we had in here but we deleted that so we're just going to go ahead and create a to do slice in here and that will contain everything uh in connection with the redux now if you haven't already i'm showing you once again go to extensions open uh search for es7 search for this very specific snippet snippet tool because this is going to save your life plus it is going to be a lot so if so if you haven't done that uh pause this video right now i don't usually say it so right now do pause it otherwise don't pause it ever at all also smash that like button and pause this install that and then come back all right so uh right now you should have that extensions otherwise you're going to get lost so uh going in here you just want to type in rx slice and that will pretty much create a redux slice for you inside of the redux toolkit now what you want here to do is because we named it two slides that's amazing now we want to give it a name and that's going to be uh to do's yeah over here now notice that we need to define the initial state out uh over here we can actually place it inside of here too but it doesn't make any sense like it's so much easier to handle them outside and what we can do is uh you want to go ahead and like this is where you actually started defining all those global states so you want to go and type in todo list and that the initial state is going to be like it is a complete empty array we're just not gonna uh mess around with that now as for adding a todo uh you will need to define something called something called a reducer this is where this is kind of like a symbol function that will just make sure that everything is saved and locked all in place so you just want to have a save to do function in here which will have state and action as their inputs and this is going to be the uh safe to do function now what is happening here so state is actually the current state of the safe to do action is uh something that when you shoot in redux that's what uh that's this is the function that is actually getting uh executed and this will have a payload uh which is going to be carried in here so i will actually uh make sure that you guys understand it just let's first create this so what we want to do is say say state dot todo list the push oh that push and we want to throw in the action dot payload all right what's happening here okay so i will create a i will just comment here a normal state okay so say we got the todo list all right so you do list and set to do list and this is going to be a used state and it will have an initial value of an empty array okay so this part right if you already understand uh states this will not be hard so this part over here is going to be this part exactly we just outsource it to a different kind of function over here okay it's pattern recognition uh this is how it looks like so todo list is actually the state the current state of this specific uh this specific state okay now because redux is able to manage several states we actually need to like that has a current state of all those states that it actually manages inside of it so we will need to go into state and go into todo list right so i will go slate go todo list and then you want to push in the action.payload so what is this thing actually this whole thing this is the set todo list all right so how to use a set todo list it's basically set a new uh list and then you throw something in there now this is going to be the action payload okay all right now that we covered this uh make sure to actually play it back a few times and just try to understand what's happening here because this is going to be a lifesaver and with that you want to go ahead and export it because this is going to be a an action and you just want to uh add the save to do in here and that will that is it so far all right going back to input.js we need to import a few different things so first thing first we want to import uh use dispatch uh from the react redux uh library that's going to be the tool that we use to interact with redux so remember redux is actually layer around the application that is accessible for all the components so that but it actually needs a tool which which is use dispatch to actually interact with it so right after defining this piece of state you want to go ahead and i think if you just type and use dispatch and go with this one and then delete function this is what we need now we define it it's good and after that uh in here we exported a safe to do but now we want to import that so save to do and we want to import it from uh it's actually going to be in the features oops in the v come on so it's actually going to be in the features folder and inside of the todo slides all right and to actually make sure that it actually it works and everything is working i'm just going to fire up a chrome real quick and we'll show you how it works but first we need to define the function that is actually going to shoot into redux so in here i'm just going to type in console.log and i just wanna i just wanna say adding to do we're adding actually the input so just make sure that we know what is happening and what we are actually uh throwing in redux so once that's done uh we went and that's when we want to save a uh full that's what we wanted to save that to do so we want to use the dispatch to actually interact with the redux and then i'm going to go ahead and save the to do but we're actually going to throw in a full uh object so what we want is we want to have an item that is going to be the input that we just typed in in the form and it will have a done indicator uh which is going to be false obviously because we haven't checked it as done and we want to give it an id so once we uh interact with the done check mark we actually know which one to actually mark uh done so it will say we're just going to give it an id and i think the easiest one is to say date dot now that is going to be unique time always passes so that's pretty much it and one more thing we need to store this whole uh we need to store this specific state in the store.js file so that way actually redux keeps track of what is going on and that will have another reducer okay so what we do here is we're gonna say import and we're gonna go ahead and say to do reducer and that will be imported from from the features and the 2d slice okay now this time we actually do export default here so it's all good and what we want is we want to say todo's is going to be the reducer we just imported so that's good and let's take a look at what we have just built and if i go in and type in hey and go ahead add it now you can see the difference is this and we can see the new uh state we can see it is a chart which is pretty crazy but i don't even know what's going on we have to we can see the raw as well as the action and this is the payload we threw in so that's pretty much how you uh through uh shoot into redux and set a new piece of state all right next up it's time to actually go ahead and render out all the stuff that we've just saved into redux so for that we're gonna go into app.js and this is where we're gonna take care of the todo list part now in here i want to actually create two divs which will wrap up the whole todo list of so one is going to be app container and this will actually uh include the input as well not unlike the other one which is going to be app to do container and inside of there that is where we will loop through the saved stuff so whatever is in the slice whatever is stored in the slice that's what we're going to be looping through and then that is what will be rendered out all right so uh just for that purpose i i want to actually create just a dummy um dummy to do so i'm just going to do this and it will equal to a few different stuff all right so let's go in here and i'm just going to grab the stuff bang bam and oops actually i forgot that it's an object so we will take care of that now okay and whatever this is like okay it's just going to be to do dope and might even this is going to be some sort of number so i'm just going to pass that in and we want to have a true and a false just for later purposes boom go in here it's going to be true and yep so it's going to be to do two dope and bang whatever so over here what we see this is just a symbol array but if we take a look at what we dispatch into redux this is pretty much the exact same um structure so for this is going to be perfect for development purposes and what i will do is i'm just gonna loop that through with a dot map and in here i'm gonna have an item bank and instead of that kind i'm just gonna go with the normal brackets and in here i will have a component okay so that's going to be to do component dope so let's actually build that let's actually go ahead and build the two item and first thing first uh just to cancel out this error let's just quickly uh build the component so it's going to be due to item dot js yep exactly and we're gonna just say rafce boom and the class name just give it quickly it's going to be to do item that's it and i'm just going to pull it on the side so i can quickly import it real fast so i want to do item all right okay uh with that before we actually forget uh we want to have a todo item that css file just as well we can leave it over there and let's quickly import it right away so it's going to be to do item.css okay and let's just think about it for a second so what we actually want is that this specific item displays the uh whatever we have to do whatever uh the specific item on our list if it is done or not and then based on uh that's that uh and if and if we go ahead and click that uh that we want to take this off we need to know the specific items id so we need to pass in all the different props that we have inside of redux so we're just going to go ahead and we want to give it a name which is going to be item dot item which is pretty weird but it does work and we also want to throw in i'm just going to do a little bit of line breaking here we also want to throw in uh done which is item dot done okay done right there boom and we also want to throw in the id which is going to be item id this name actually sounds a little bit weird but it is what it is all right uh next up uh here we actually want to catch e everything every single one of those that we actually throw in so we just wanna have a name a done and an id in there and now the fun begins so in here what we actually want to do is obviously have the check box but that's going to be just a little bit later so let's just have the check box over here and we also want to write the name right over here so that is actually going to be ap tag which will contain which will be just simply the name so it's not going to be something crazy that is happening but let's take a look at how it's going there is some sort of error okay and okay so it actually does work there might be some sort of issues with the with the styling but we will take care each and every single one of those so don't worry about that for now um for now let's get the functionality right and then we will figure out everything else so yeah it does work uh everything is in place so yeah let's go back this actually does work so yeah and what we want to do is add a specific class name based on whether it is done or not okay so in here what we want to do is done and if it is done then we want to add a todo item and in the bam naming convention there is two different ways we can go about it uh so let's go to getpam.com so if you go ahead and go over here uh there is the the uh block so the so our normal block is just simply uh by its name then uh the element has this uh some sort of on the uh so so this is how elements are and with dashes we can add these uh sort of modifiers okay so that's pretty much what we will do uh over here as well so we want to have the todo item and then we're just gonna say done over here so that we'll modify it and that will uh just do a strikethrough of the name okay we will set that up later on in the css part okay so we actually have the name done and now it's actually time to go ahead and install material ui and take a look at the checkbox stuff so let's go in here go back to the terminal and just type in yarn add and at material dash ui core boom and while that does its thing uh we can just take a look at material ui and we want to have a checkbox thing so let's just search for that buying react checkbox and this is exactly what we are looking for so this is all the documentation and all that kind of stuff i'm not gonna spend too much time on it um what you actually want here is this uh so i'm just gonna add a few space over spaces over here so you obviously want to import it from the material ui core and then for a checked right so that is going to be responsible to know whether it the item is checked or not the color you want to set it to primary because that's going to be this bluish thing and you want to fire off a function right so once you click on it you want to fire off a function which which i called handle check and this is just for seo purposes and for material ui to work so let's just create that function that we will fire off but let's not do anything in there so we will have handle check boom i actually messed something up in there yeah right okay now it's better so that's uh so we got the function already so that's good let's take a look at what we have over here and yeah just like that nothing is happening but we know that this one was actually marked as true this one was actually marked as false so we're we're getting there so let's fix that styling and then let's go ahead uh style the studio item and then we will hook up redux and do all the rest of the stuff so i'll catch you guys soon all right let's go ahead and do the styling part real quick so first thing first what we will do is let's just go into app.css and fix this weird looking stuff over here so in here uh we have two more stuff to do so we have the app we have the app uh cont oh we have the app container container boom and then we like it has a height of 700 pixels a width of 500 pixels with the semicolon we obviously have a display display of flux display flux and we will set the flex direction to column and align all the items to center and we will have a weird uh background color i was just moving around on the rgb scale so we'll have a two three two then a two three four ouch not that much yeah and the two three seven so that's that's kind of like a whiteish grayish something it's between white and light gray it's just so we have like this stuff all right and to actually make it look not that weird we want to add a border radius of 12 pixels and a padding 32 pixels and zero so what this will do is it will push stuff from above and below 30 pixels but will not mess on the sides okay exactly that even if we go into inspect element and we just put it on the side we can see that uh on the top and the bottom there is that green uh green line that indicates the whole um padding all right so next up we have the todo container to do container which is yeah this thing you can go and copypaste boom so much faster and this will actually have a flux of one so we want the input to be all the way down and have the todo list take up as much space as possible okay and we also want to have uh give it a width of a hundred percent and then display flux give it a semicolon flex direction of column and align items to center all right time to design time to give some style to the todo item all right it's time to desi uh give the todo item some sort of nice looking style because we have almost the whole thing ready we're not going to go too much into detail with this one but the way it looks it's just super unpleasant so what we want to do is go into to do item that css and then just target the whole thing remember this is not about creating the ultimate video app it's about understanding how to interact with redux so to the item we're going to have a display of flux and we are going to align the items to the center with a width of an 80 per percent and the background color of white we're also going to give it a margin 6 on the vertical axis six pixels on the vertical axis and four pixels on the horizontal axis okay so it's going to be six and six uh above and below and then four uh right and on the left but it's super easy to do things like that okay it's going to have a height i said height of 40 pixels and then a border radius of 12 pixels so that way it actually matches the form factor of this app right so that's pretty much all the design we will have just to give it just to make sure that the checkbox doesn't go wrong let's just set the uh p tag to ha use all the space it actually can so give it a flex of one and then we want to set this track through up so to do item and remember the modifier so then it's good so if that flag is active we want to add a text decoration of line through and that will just yeah that will pretty much go ahead and just drag through the done to do so that's pretty much the design and the styling on the todo application so now it is time we actually connect uh it with redux over here and then we had the todo function and we are pretty much done all right so let's talk a little bit about um what is actually going to happen when we shoot again into redux into the data layer and we actually want to grab something out of it so for that we actually need to go into the 2d slice once again and we will need to export the current state of that specific state okay so uh for that we're just going to say export const const select to do list this is how we will call it and then it will equal to state and it will fire up a function right so it's gonna be the state to do's and we want to uh grab this specific one okay so what is happening here at that point uh we will reach into all the states grab the two use one so this one right so this slice and then pick out this specific uh state and then just return that okay i hope this kind of makes sense it's all pattern recognition watch this video a few times try to make it try to understand it uh we i will be using this a lot uh in the near future i will actually build a few clones with this just just like adding redux onto it just so you guys are exposed to it and yep that's pretty much what we do in here and then we go back to app.js remove all this stuff and then we will import two things one is going to be so let's import the use selector which is um use selector from uh and this is going to be the tool uh it's like this patch but this patch is actually pushing something and it's executing something over there on redux but this one use selector is actually grabbing it data okay so that's what is happening over there and then we obviously want to uh get the select uh select to do a list from the user slice so fro from the uh to do slice okay so what we want to do is uh not even that up so we want to go into features and then to the slides that's pretty much what we need to import and over here we definitely need to make this specific variable so it's just going to be const boom and then equals use selector and we're just going to select the todo list notice how i gave the names what what kind of naming convention did i use um so obviously this should be just how you would name the variable but then over here it has to like it is highly advised that you give either a set or a save or something that is actually referring to what is happening over there okay so you nee you might want to just go with some sort of descriptive uh descriptive naming but make sure that it's actually an action and when you export you always want to go with select because that way you know that okay you select so you need to use selector and it's just connect all right so let's take a look at what's happening over here okay so todo list not defined bug we don't care about it just yet all right so dodo bomb i don't even uh let's say take the dog for a walk add boom there it is bye grow serious bam there we go now right now checking it off doesn't work just yet but this is what we are going to be doing next up all right last but not least um we want to actually create a handle check function that will take care of all the checking and all that stuff so if we actually go ahead and do check the button or do check to do if you actually do check the to do then it actually goes ahead and changes from unchecked to checked right because over here nothing happens and if we actually decide that okay it's actually not done and we want to uncheck it right so let's do it let's go ahead and do that so over here uh this is going to be the function that we will dispatch into redux okay so that's going to to do slice okay and we're going to actually have a another uh reducer okay so reducer is essentially a function that we run that we run through redux okay so what we want to do is it's going to be set check and again it's something super descriptive um it is super descriptive so i know that it is setting the item either checked or unchecked but it definitely sets the check okay and in here and here we are just going to map through on the todo list and we actually first want to identify like which one which item are we actually talking about okay so we're just going to say state dot todo list map right and that will actually give back an item and we will decide if it is ours or not so you're just going to go if and then action dot payload we're just going to go ahead and say action the payload and if it actually equals to item the id then we actually want to check if it is then we actually want to go ahead and do the checking or the unchecking right so in here we're going to have another if statement and we're going to check if and we're going to see if the item dot done is equal to true so if the if that to do is done or not so if it is then we want to uh set that to false right because then because then that item is done but we actually decided that it's not done yet so we want to uncheck it okay so i uh item that done and that's going to equal to false on the other hand if it is actually not done then we actually want to mark it as done and it's going to be true bum and we should be good to go all right let's take a look at if it works or not let's go ahead and refresh okay take the dog for a walk boom okay so the reason it doesn't work is because i made the reducer but i haven't exported it okay so i want to go ahead and say set check and then go back to judo item and then import all the important stuff i forgot have the stuff okay so we want to have a use dispatch over here this patch oh come on dispatch and we want to import it from react redux i said react reader import use this patch from react redux yes that's it i don't know what didn't work last time but okay and then we also want to import uh set check and we want to import it from actually a level above and it's going to be in features to do slice okay so once we handle the check so once we click that we actually want to dispatch in there but we actually need to this uh okay so let's quickly go ahead and define this uh dispatch function and leave that empty so once we actually go ahead and click that uh check button then that's when we want to go ahead and just dispatch oh dispatch and then set check and then we just want to give the id in as a uh as the payload of that specific action so this now should be able to take care of checking or unchecking items so let's go ahead and take the dog for a walk add and that my friends this is how it is done we can go ahead and actually add a new one uh by grow rosaria's boom we can uh we need to do the laundry do the long tree yeah add that too and then i just want to check that off or maybe all of them or then i decide i need to get another stuff or i haven't done the laundry or i might as well just go with the dog for another walk okay let's take a look at what actually happens over here so take the dog for a walk in google chrome as well all right so over here we save the to do bom it actually happens in there boom we throw it in okay we check it okay set check payload we just throw in the uh the uh that date okay the id look it look at here boom and it's set set true boom that's it simple as that all right that was it for today's video i hope you guys liked it if so make sure to smash that like button down below literally give that a punch and if you want to dive deeper in these sort of stuff make sure to go ahead and check out profit with javascript down below in the description this is your goto onestop shop course to landing jobs as a developer and making a ton of money so if you like cash literally go ahead and check it out also let me know if there is something else that you want me to build for you guys um i actually got a few different requests so it might take quite a while but i will personally reply to each and every single one of you for the next few hours after this video is being dropped and just message me over here this is going to be my instagram handle uh message me whatever you want or just comment down below what you think how you like this one and with that said if you guys actually watch the whole thing drop a snail emoji in the comments just for fun just so i know like who actually watches the whole stuff and then yep that was it for today checking out peace
