With timestamps:

00:00 - in this video we are going to be
00:01 - building a fully crowd functional to-do
00:04 - list app to demonstrate how redis can be
00:06 - used as a primary database let's talk
00:08 - about redis for a quick second we all
00:10 - know that it used to be an in-memory
00:12 - only database that was used to just
00:15 - cache data from other databases like
00:17 - mongodb or whatever however redis
00:20 - recently decided to level up and now you
00:22 - can use them as a primary database
00:23 - alongside with it they release the redis
00:25 - om library which is super convenient
00:27 - with that said i just want to stop for a
00:29 - quick second and thank for ready for
00:31 - standing behind this video and
00:32 - sponsoring it which is good because when
00:34 - you use the link down in the description
00:35 - to sign up not only you are getting 200
00:38 - worth of credit on the radius cloud but
00:39 - you are entering to win a tesla all
00:42 - right enough talking let's get into the
00:43 - code all right cool so we're going to go
00:45 - ahead and get started by typing in the
00:47 - art in it and that is going to go ahead
00:50 - and take care of our note package and
00:53 - basically every question that is going
00:54 - to pop at you you can just quickly hit a
00:56 - return because it doesn't really matter
00:59 - default name is perfect and we're pretty
01:01 - much good to go now after that typing in
01:04 - code space period will go ahead and open
01:06 - up vs code for you
01:09 - which i zoomed in real quick for
01:11 - and right after i'm just going to go
01:12 - back into our terminal and install every
01:14 - single dependency that we are going to
01:16 - have throughout this application that is
01:19 - express that is of course and redis dash
01:22 - om which is by the way this video is all
01:25 - about
01:26 - so next up once those are installed i'm
01:29 - going to go into my vs code create a new
01:31 - folder which i'm going to call source or
01:34 - for short src
01:36 - and inside there i'm going to go ahead
01:38 - and create my index.js
01:40 - and going into my package.json i'm going
01:42 - to want to make sure that when i type in
01:45 - yarnstart it my application starts
01:48 - correctly so that's why i'm giving this
01:50 - script tag and inside there i'm going to
01:52 - give it the starts tag
01:54 - and i'll just target the index file that
01:56 - i'll just created now
01:59 - you can see that i typed nodemon instead
02:01 - of node that was originally suggested by
02:04 - copilot but that's just an extension
02:07 - that i have and by the way you should
02:09 - install it too it just enables you to
02:11 - run node apps node.js apps real smoothly
02:13 - and so with that next up i'm going to
02:15 - type in type and i'm going to make sure
02:18 - it is module and the reason for that is
02:21 - i don't really like using the cons
02:23 - something equals require whatever
02:26 - instead i prefer importing all the
02:28 - packages so that's why i'm gonna use the
02:31 - module type here and with that done i'm
02:33 - gonna go into my index.js and get
02:36 - started working so first up i'm going to
02:38 - go ahead and import express from express
02:40 - course from cores
02:42 - and i'm going to go ahead create my
02:44 - application instance which is going to
02:46 - be const app equals express
02:48 - give it a default port which is given by
02:51 - the server or if there is no port given
02:54 - i'm going to go with 9000 and i'm just
02:56 - going to go ahead and make sure our my
02:58 - application is going to be ready to
03:00 - handle json and the course is not going
03:02 - to be an issue later on so first up just
03:06 - give it a route and it's going to be an
03:08 - async and all that's going to do is
03:10 - return hello if you call the base url
03:12 - and so with that i'm just going to go
03:14 - ahead add the listener and let's test it
03:16 - out if it works so i'm just going to
03:18 - type in yarn start and yeah exactly my
03:21 - application is console logging the
03:22 - example app is listening on porn 9000 so
03:26 - that's good
03:27 - and so with that let's just test it out
03:29 - in postman and if it gives back hello
03:32 - like you can see over there
03:33 - you are good to move forward next up we
03:37 - are going to go ahead and clone the
03:38 - front end entire project i'm giving it
03:41 - to you just go ahead hit the link down
03:42 - below the github link
03:44 - download the package
03:46 - extract it and then just copy it into
03:48 - the folder where you want to use it
03:50 - later on and just run a yarn install on
03:53 - it because it has a bunch of different
03:54 - dependencies that you will be needing in
03:56 - order to have the application running
03:59 - once that is done
04:00 - you can basically look around this is
04:02 - how the application looks like but
04:04 - that's pretty much what we got on the
04:06 - front end going and you can just go
04:07 - ahead and close it we're not really
04:09 - going to mess with that just uh spin it
04:11 - up with the yarn start and you will see
04:14 - this application going you can go ahead
04:16 - obviously change my name to your user
04:18 - and
04:19 - same goes for the photo on the top right
04:21 - corner so with that what you want to do
04:24 - is right now this to do application is
04:26 - not functional at all so
04:30 - introducing redis
04:31 - redis as i said usually was used as a in
04:35 - memory cache database but now we're
04:37 - going to be using it as a primary
04:39 - database so this is how it's going to
04:41 - look like once you log in with your
04:43 - preferred account and now is the time to
04:45 - go into billing and payments add the
04:47 - credits and uh use the code clever 200
04:50 - to get 200
04:51 - off and with that you can go ahead and
04:54 - get started with a baller subscription
04:57 - and go for like a 500 megabyte one
05:00 - that's my personal recommendation and
05:02 - once you set it up and once you're done
05:04 - with that you're ready to go to set up
05:05 - your database same goes for the database
05:08 - select the module or release json and
05:10 - then just give it whatever name you now
05:12 - this in and out of itself is not going
05:14 - to be
05:15 - sufficient for your application to be
05:18 - able to connect to this database so you
05:20 - will have to go into data access control
05:23 - give it a new role which i just
05:25 - conveniently called admin
05:28 - give access to all the subscription all
05:29 - the databases give full access to it and
05:32 - then just hit check save roll and wait
05:34 - for it to wait for it to process
05:36 - go back to your users given you create a
05:39 - new user call it admin give it whatever
05:42 - password you want to as long as it is
05:44 - alphanumerical there is a capital letter
05:47 - non-capital numbers and there's a
05:50 - special correct character you should be
05:52 - good to go now once that is done hit
05:55 - check wait for it to finish and we are
05:57 - going to go back to the database copy
05:59 - the public endpoint link as you can see
06:03 - go back to your application import
06:05 - client and repository from the radius om
06:08 - package go down under where you
06:11 - initiated all the middlewares and then
06:13 - start and then just create a new client
06:16 - using the given function with that
06:18 - you're going to go ahead and open a
06:20 - connection and you're going to have to
06:22 - pass in a link which has the following
06:25 - pattern so you're going to want to type
06:27 - redis column
06:29 - username column password at and the link
06:32 - that you just copied so i'm just going
06:34 - to
06:34 - paste it in here so it's going to be
06:36 - calling admin 1234
06:38 - with the dash yeah that's pretty much a
06:40 - perfect password right there and at and
06:43 - i'm just going to go ahead paste the
06:44 - link that i just copied with that my
06:47 - application technically is connected to
06:50 - redis but it's not not enough yet so
06:52 - we're gonna go ahead create a schema
06:54 - folder in the root folder of the project
06:57 - and just create it to do that schema.js
06:59 - file in there
07:00 - now you're gonna go ahead and import
07:02 - entity and schema on the top from the
07:05 - library and then you're gonna go ahead
07:07 - create a class that we will name to do
07:10 - which will extend entity
07:12 - and we're just gonna pass in the
07:14 - following so you're going to create a
07:16 - to-do
07:17 - a status and then most importantly an id
07:21 - which will be the entity id next up
07:23 - you're going to go ahead and create the
07:24 - actual schema for the class that you
07:27 - just created and the tutorial will be a
07:29 - string and the status will be a boolean
07:32 - so with all that done you're gonna go
07:34 - ahead and grab the to-do schema which
07:36 - you wanna make sure that you export and
07:39 - then go ahead and import it in from that
07:41 - same file now you're to go ahead and use
07:44 - that throughout this application
07:45 - throughout the rest of this application
07:47 - so let's go ahead and remove our dummy
07:50 - end point and get started with adding a
07:53 - to-do let's go ahead and add some add
07:55 - some stuff in there so first off you're
07:56 - gonna have to create a new repository
07:59 - which i just conveniently called to do
08:01 - repo pass in the schema and the client
08:04 - and then drop the index and then create
08:06 - a new index so that just stops every
08:08 - connection that we had previously going
08:10 - on and creates a new one so technically
08:12 - nothing is going to mess up that's what
08:14 - it that's what it's for so as you can
08:17 - see if you check out the front end there
08:19 - is literally nothing happening there but
08:22 - that's the perfect time to get started
08:24 - and add a new item into our database so
08:27 - we're going to go ahead and create a new
08:30 - route which is going to be a post route
08:33 - on the slash add to do
08:35 - slug
08:36 - which is going to be which is going to
08:38 - fire off an async function
08:40 - that is going to go ahead create a new
08:43 - to-do item which will be a new entity
08:45 - inside of our to-do repository now we're
08:49 - going to give it a couple of traits this
08:51 - is going to be the to-do and obviously
08:52 - the status that we
08:54 - we're normally giving with it a to-do
08:56 - list app or a to-do item or whatever and
08:59 - then don't forget the id which will be
09:02 - created once you save once you save the
09:04 - item into the repository once that's
09:06 - done you're just gonna go ahead respond
09:08 - back okay
09:09 - and you should technically be good to go
09:12 - so as you can see i just go and i went
09:14 - ahead and tested it out technically that
09:16 - item should be already in in my database
09:19 - however you cannot see anything showing
09:21 - up and that's because we're not fetching
09:23 - anything so let's go ahead and fix that
09:25 - now next up i'm going to go ahead and
09:27 - create a get
09:29 - method endpoint which once again is
09:31 - going to be an async function
09:33 - and with that i'm just going to wait for
09:36 - the repo to search and return every
09:38 - single item that i have in there
09:40 - technically i want my to-do list to show
09:43 - me every single item that i have in
09:44 - there so it's pretty pretty logical
09:46 - right
09:47 - so as you can see
09:49 - i tested it out and it worked both of my
09:51 - items that i uh throw in there is
09:54 - showing up perfectly and so time to get
09:57 - rid of some of those we're going to go
09:59 - ahead and create a delete route on the
10:01 - slash delete to do slash call an id that
10:04 - means that in the url parameter i'm
10:06 - going to be passing in the actual id
10:09 - that i want to delete and that's what
10:11 - actually i'm going to be using to remove
10:14 - the specific item from my repository and
10:18 - once it's done i'm just gonna go ahead
10:19 - and respond back okay
10:21 - and so that's well that's how my front
10:23 - end will know that it's time to re-fetch
10:25 - my to-do list
10:26 - now let's say you want to check check
10:29 - off one of your to-do's or you made a
10:31 - typo or whatever
10:33 - and you cannot fix it now that's not
10:35 - really good so let's go ahead and fix
10:37 - that
10:38 - and so what we're going to do is create
10:40 - a put route
10:41 - on the update to do slash id id route
10:45 - and once again fire off an async
10:47 - function and it's going to be really
10:49 - close to what we had when we added a new
10:52 - item
10:53 - the only difference is is in this case
10:55 - we are not creating a new entity we are
10:57 - just going to fetch our existing
10:59 - entities and see if we find one if by
11:02 - the way if your database doesn't find a
11:04 - matching item it's not going to really
11:07 - think a lot about it this is going to go
11:08 - ahead and create a new one so
11:10 - you could technically use this function
11:13 - to create the item and to update it as
11:16 - well
11:17 - but you don't want to do that obviously
11:20 - so we're just going to pass in whatever
11:22 - items just changed and then save the
11:24 - save the to do and then just go ahead
11:27 - hit okay send okay back
11:29 - and that way our front end is going to
11:31 - know that something has changed time to
11:34 - refetch our to-do list so with that said
11:37 - we actually made it uh completely
11:39 - functional there you go there you have
11:41 - it this is a fully crud functional to-do
11:44 - list app using redis as its primary
11:48 - database as you can see i'm typing a
11:50 - couple of examples to just show off the
11:52 - functionality of the application once
11:54 - again thank you so much redis for
11:56 - sponsoring this video with that said you
11:58 - guys thank you so much for watching hit
11:59 - that like button and the subscribe
12:01 - button and i'll see you in the next
12:03 - video
12:08 - [Music]

Cleaned transcript:

in this video we are going to be building a fully crowd functional todo list app to demonstrate how redis can be used as a primary database let's talk about redis for a quick second we all know that it used to be an inmemory only database that was used to just cache data from other databases like mongodb or whatever however redis recently decided to level up and now you can use them as a primary database alongside with it they release the redis om library which is super convenient with that said i just want to stop for a quick second and thank for ready for standing behind this video and sponsoring it which is good because when you use the link down in the description to sign up not only you are getting 200 worth of credit on the radius cloud but you are entering to win a tesla all right enough talking let's get into the code all right cool so we're going to go ahead and get started by typing in the art in it and that is going to go ahead and take care of our note package and basically every question that is going to pop at you you can just quickly hit a return because it doesn't really matter default name is perfect and we're pretty much good to go now after that typing in code space period will go ahead and open up vs code for you which i zoomed in real quick for and right after i'm just going to go back into our terminal and install every single dependency that we are going to have throughout this application that is express that is of course and redis dash om which is by the way this video is all about so next up once those are installed i'm going to go into my vs code create a new folder which i'm going to call source or for short src and inside there i'm going to go ahead and create my index.js and going into my package.json i'm going to want to make sure that when i type in yarnstart it my application starts correctly so that's why i'm giving this script tag and inside there i'm going to give it the starts tag and i'll just target the index file that i'll just created now you can see that i typed nodemon instead of node that was originally suggested by copilot but that's just an extension that i have and by the way you should install it too it just enables you to run node apps node.js apps real smoothly and so with that next up i'm going to type in type and i'm going to make sure it is module and the reason for that is i don't really like using the cons something equals require whatever instead i prefer importing all the packages so that's why i'm gonna use the module type here and with that done i'm gonna go into my index.js and get started working so first up i'm going to go ahead and import express from express course from cores and i'm going to go ahead create my application instance which is going to be const app equals express give it a default port which is given by the server or if there is no port given i'm going to go with 9000 and i'm just going to go ahead and make sure our my application is going to be ready to handle json and the course is not going to be an issue later on so first up just give it a route and it's going to be an async and all that's going to do is return hello if you call the base url and so with that i'm just going to go ahead add the listener and let's test it out if it works so i'm just going to type in yarn start and yeah exactly my application is console logging the example app is listening on porn 9000 so that's good and so with that let's just test it out in postman and if it gives back hello like you can see over there you are good to move forward next up we are going to go ahead and clone the front end entire project i'm giving it to you just go ahead hit the link down below the github link download the package extract it and then just copy it into the folder where you want to use it later on and just run a yarn install on it because it has a bunch of different dependencies that you will be needing in order to have the application running once that is done you can basically look around this is how the application looks like but that's pretty much what we got on the front end going and you can just go ahead and close it we're not really going to mess with that just uh spin it up with the yarn start and you will see this application going you can go ahead obviously change my name to your user and same goes for the photo on the top right corner so with that what you want to do is right now this to do application is not functional at all so introducing redis redis as i said usually was used as a in memory cache database but now we're going to be using it as a primary database so this is how it's going to look like once you log in with your preferred account and now is the time to go into billing and payments add the credits and uh use the code clever 200 to get 200 off and with that you can go ahead and get started with a baller subscription and go for like a 500 megabyte one that's my personal recommendation and once you set it up and once you're done with that you're ready to go to set up your database same goes for the database select the module or release json and then just give it whatever name you now this in and out of itself is not going to be sufficient for your application to be able to connect to this database so you will have to go into data access control give it a new role which i just conveniently called admin give access to all the subscription all the databases give full access to it and then just hit check save roll and wait for it to wait for it to process go back to your users given you create a new user call it admin give it whatever password you want to as long as it is alphanumerical there is a capital letter noncapital numbers and there's a special correct character you should be good to go now once that is done hit check wait for it to finish and we are going to go back to the database copy the public endpoint link as you can see go back to your application import client and repository from the radius om package go down under where you initiated all the middlewares and then start and then just create a new client using the given function with that you're going to go ahead and open a connection and you're going to have to pass in a link which has the following pattern so you're going to want to type redis column username column password at and the link that you just copied so i'm just going to paste it in here so it's going to be calling admin 1234 with the dash yeah that's pretty much a perfect password right there and at and i'm just going to go ahead paste the link that i just copied with that my application technically is connected to redis but it's not not enough yet so we're gonna go ahead create a schema folder in the root folder of the project and just create it to do that schema.js file in there now you're gonna go ahead and import entity and schema on the top from the library and then you're gonna go ahead create a class that we will name to do which will extend entity and we're just gonna pass in the following so you're going to create a todo a status and then most importantly an id which will be the entity id next up you're going to go ahead and create the actual schema for the class that you just created and the tutorial will be a string and the status will be a boolean so with all that done you're gonna go ahead and grab the todo schema which you wanna make sure that you export and then go ahead and import it in from that same file now you're to go ahead and use that throughout this application throughout the rest of this application so let's go ahead and remove our dummy end point and get started with adding a todo let's go ahead and add some add some stuff in there so first off you're gonna have to create a new repository which i just conveniently called to do repo pass in the schema and the client and then drop the index and then create a new index so that just stops every connection that we had previously going on and creates a new one so technically nothing is going to mess up that's what it that's what it's for so as you can see if you check out the front end there is literally nothing happening there but that's the perfect time to get started and add a new item into our database so we're going to go ahead and create a new route which is going to be a post route on the slash add to do slug which is going to be which is going to fire off an async function that is going to go ahead create a new todo item which will be a new entity inside of our todo repository now we're going to give it a couple of traits this is going to be the todo and obviously the status that we we're normally giving with it a todo list app or a todo item or whatever and then don't forget the id which will be created once you save once you save the item into the repository once that's done you're just gonna go ahead respond back okay and you should technically be good to go so as you can see i just go and i went ahead and tested it out technically that item should be already in in my database however you cannot see anything showing up and that's because we're not fetching anything so let's go ahead and fix that now next up i'm going to go ahead and create a get method endpoint which once again is going to be an async function and with that i'm just going to wait for the repo to search and return every single item that i have in there technically i want my todo list to show me every single item that i have in there so it's pretty pretty logical right so as you can see i tested it out and it worked both of my items that i uh throw in there is showing up perfectly and so time to get rid of some of those we're going to go ahead and create a delete route on the slash delete to do slash call an id that means that in the url parameter i'm going to be passing in the actual id that i want to delete and that's what actually i'm going to be using to remove the specific item from my repository and once it's done i'm just gonna go ahead and respond back okay and so that's well that's how my front end will know that it's time to refetch my todo list now let's say you want to check check off one of your todo's or you made a typo or whatever and you cannot fix it now that's not really good so let's go ahead and fix that and so what we're going to do is create a put route on the update to do slash id id route and once again fire off an async function and it's going to be really close to what we had when we added a new item the only difference is is in this case we are not creating a new entity we are just going to fetch our existing entities and see if we find one if by the way if your database doesn't find a matching item it's not going to really think a lot about it this is going to go ahead and create a new one so you could technically use this function to create the item and to update it as well but you don't want to do that obviously so we're just going to pass in whatever items just changed and then save the save the to do and then just go ahead hit okay send okay back and that way our front end is going to know that something has changed time to refetch our todo list so with that said we actually made it uh completely functional there you go there you have it this is a fully crud functional todo list app using redis as its primary database as you can see i'm typing a couple of examples to just show off the functionality of the application once again thank you so much redis for sponsoring this video with that said you guys thank you so much for watching hit that like button and the subscribe button and i'll see you in the next video
