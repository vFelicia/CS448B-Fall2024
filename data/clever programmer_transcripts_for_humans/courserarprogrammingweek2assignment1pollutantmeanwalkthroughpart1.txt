With timestamps:

00:00 - [Music]
00:10 - okay so now we're going to go ahead and
00:12 - try to implement our first
00:16 - function the main thing that you need to
00:19 - know here are how to
00:22 - construct a list and basically add
00:24 - values to it so in R it's called a
00:28 - vector and we want to create an vector
00:30 - and start adding more and more values to
00:32 - it so we're going to learn that first
00:35 - because that's going to be one very
00:37 - important part of our pollutant mean. R
00:40 - function so let's go ahead and try that
00:43 - out so let's say I have some
00:47 - vector and it's just called
00:50 - nums and it it contains some random
00:55 - numbers okay it doesn't matter what
00:57 - numbers it has but I'm just going to put
01:00 - in a few numbers here now I want to
01:03 - construct a duplicate
01:06 - Vector but what I want to do is I want
01:08 - to pull out one value from nums at a
01:11 - time and by pulling out one value at a
01:14 - time I want to then add that value to
01:16 - dupe so I want to do a loop and I want
01:19 - to pull one value at a time and put it
01:22 - into a vector called dupe so I'm going
01:25 - to construct an empty Vector this is how
01:27 - you construct a numerical empty vector
01:31 - currently this is what nums look like
01:34 - and if I showed you dupe this is what
01:36 - dupe would look
01:38 - like so as you can see nums contains the
01:41 - numbers 26
01:43 - 3256 dupe contains nothing it's just an
01:47 - empty array or an empty Vector now I
01:51 - want to go through nums and pull out one
01:54 - value at a time and add it to dupe so
01:57 - how do I do that
01:59 - I'm going to say for
02:03 - I
02:04 - in
02:06 - nums so this is going to go over each
02:09 - value in nums so here a better variable
02:12 - would be for Num in
02:15 - nums and what I'm going to do
02:20 - is I'm going to add that variable so
02:23 - here let's open a new
02:25 - line and I'm going to say
02:35 - create a new variable called dupe and
02:38 - what the new variable dupe will be is
02:41 - actually a
02:43 - concatenation of the already constructed
02:46 - array dupe so already what dupe
02:49 - previously was except we're going to add
02:51 - one more value to it this time which is
02:53 - going to be numb okay so what we're
02:56 - doing here we're saying dupe is now
03:01 - just
03:03 - itself plus a new
03:06 - value so this is how we pretty much add
03:09 - values at the end of the
03:11 - vector so once I run this and this
03:14 - finishes running you're going to see
03:16 - that dupe is going to now be an
03:18 - identical
03:22 - Vector um just like nums it's going to
03:24 - look just like that I'm going to run it
03:26 - and I have to close my squiggly brackets
03:28 - here now let's take a look at what dupe
03:31 - is and you can see it's 263
03:35 - 256 that's the first very important part
03:39 - in writing our function so I'm going to
03:42 - leave this one here and I'm going to
03:45 - start now trying to write the function
03:46 - and as we go along I'm going to try to
03:49 - pretty much quiz you on it so feel free
03:51 - to pause your video and implement the
03:53 - functions by yourself as we go on but
03:56 - okay
03:57 - [Music]
04:06 - so the last thing that you need to know
04:09 - about here is how to access one of the
04:12 - columns so let's say that I have already
04:15 - have one of the CSV files stored in the
04:17 - variable data so I'm going to do head
04:20 - data okay and this is going to show you
04:23 - the top few lines now one way to get
04:26 - access to the columns is this way and I
04:29 - think you know about this way if I do
04:32 - sulfate but here's one really big
04:34 - problem that occurs here so let's say
04:36 - that I make some variable like y equal
04:40 - to sulfate okay and now if I do data and
04:46 - I do the dollar sign and I do why it has
04:49 - no idea what that is I have to literally
04:53 - type in dollar sign sulfate every time
04:56 - for that to work meaning in fact that if
04:59 - if I use some variable it's not going to
05:02 - work so from now on what I'm going to
05:04 - advise you to do is forget about the
05:07 - dollar sign and just avoid it the best
05:10 - you can instead use the two bracket
05:14 - indexing so here if you want to get the
05:16 - sulfate what I would say is do two
05:19 - brackets and do sulfate this is going to
05:22 - get the sulfate column and that pretty
05:24 - much got you the same thing so here you
05:27 - can also do mean data Sul uh you have to
05:31 - make sure you put quotes around it
05:33 - sulfate and what we can say is n. RM
05:38 - equal true and this is one way to get
05:41 - the
05:42 - mean this is one thing that was throwing
05:44 - our function off and made our function
05:46 - incorrect last time and we need to use
05:49 - the double bracket here okay now we're
05:54 - pretty much ready to put this all
05:56 - together and finish our first function
05:59 - [Music]
06:09 - okay so now we are ready to write our
06:11 - function from scratch so let's get
06:13 - started the function is called pollutant
06:19 - mean
06:21 - function the first argument is going to
06:24 - be the directory or the path the second
06:27 - argument is going to be what function
06:29 - you want to pass in uh
06:31 - what what query you want to pass in so
06:34 - are you looking for sulfate are you
06:35 - looking for
06:37 - nitrate or are you looking for sodium
06:39 - pretty much whatever you're looking for
06:41 - that's going to be your pollutant ID is
06:43 - going to be the file names so here we're
06:47 - going to say the optional argument is
06:48 - going to be all of them all
06:52 - 332 unless the user specifies
06:57 - their desired range so let's create a
07:01 - variable called file list and we've done
07:04 - this before but we're going to basically
07:07 - list all the files path is going to
07:09 - equal to directory so whatever we pass
07:12 - it in the directory pattern remember is
07:15 - going to be your all extensions are
07:17 - ending as CSV so that's going to be
07:20 - your pattern that you're looking for cuz
07:23 - it's the files are called 00 1.csv 002
07:27 - CSV and so on full name
07:30 - full
07:32 - names we want the full path of the file
07:35 - so we don't just want 001 CSV 002 we
07:40 - want downloads slpc data sl001 that CSV
07:46 - that's a lot more useful for us now I'm
07:49 - going to create that empty Vector like
07:52 - we talked about in the previous video
07:55 - and the Constructor is and the
07:58 - Constructor here is going to be just
07:59 - called numer so the Constructor here is
08:03 - called uh numeric we are calling it
08:06 - values and it's just an empty Vector
08:08 - right now so we're going to say
08:12 - for I in ID so this is just any number
08:17 - in one and 332 unless user specifies
08:20 - then it'll be something like 2 through
08:22 - 10 or 1 through 10 whatnot we're going
08:26 - to create something data which is just
08:29 - just going to be your file list
08:33 - and that number I think you get that
08:37 - part and now remember the trick we want
08:40 - to do is we want to go through each file
08:44 - and every time we calculate the mean
08:47 - from a file we need to save that mean
08:50 - then we need to go through another file
08:52 - calculate the mean save that mean the
08:55 - reason why we created this Vector in
08:58 - line three is is for that exact reason
09:00 - so we can go through multiple files and
09:03 - store all our values in here before we
09:05 - iterate to the next Loop because every
09:08 - time you loop again you're losing your
09:11 - previous information so the reason why
09:12 - we're using a vector is so it can retain
09:15 - the information for a longer period of
09:17 - time so here what we're doing is we're
09:19 - saying hey the new Vector values is just
09:23 - going to be the previous Vector values
09:26 - concatenated with now the new piece of
09:30 - information we have which is data so the
09:33 - new file and we just pretty much append
09:38 - one mean value to values so here
09:43 - remember to instead of using the dollar
09:46 - sign and saying
09:47 - pollutant you're going to get an error
09:50 - because remember here you would have to
09:52 - only say sulfate otherwise you get an
09:54 - error or you have to say nitrate
09:56 - otherwise you get an error so here the
09:59 - variable pollutant would mean
10:01 - nothing so we're actually going to have
10:04 - to use this index with the double
10:06 - brackets and pass in
10:08 - pollutant and remember pollutant is
10:11 - going to be something like
10:13 - sulfate or nitrate it's going to be like
10:16 - a
10:17 - string and we're going to close this and
10:20 - now all we do at the end is we just get
10:23 - the
10:24 - mean and pretty much remove our
10:30 - nonusable values or our non-available
10:33 - values rather na okay so this is working
10:37 - correctly now to test that this is
10:40 - working correctly let's just do a test
10:42 - case here and let's say pollutant mean
10:45 - and I'm going to put in the location of
10:49 - where this is at so let's do that drop
10:54 - box GitHub Cera
11:05 - okay so that's the path and we want to
11:08 - look for
11:09 - sulfate and if I run this we should get
11:14 - back
11:18 - 3189 followed by a few numbers so let's
11:21 - try to run this and see what we get back
11:24 - okay so I'm going to oh whoops it should
11:27 - be called pollutant meat
11:31 - save and now let's run
11:34 - it so it's taking a
11:38 - second and you can't see out of the
11:41 - screen but this is the result that I got
11:44 - in this
11:45 - case because that part is out of the
11:48 - screencast video scope but this is the
11:50 - main result that I got so if you run
11:52 - this code and you run it on spec data
11:55 - you're going to get the same
11:57 - result that's how you code the pollutant
12:00 - mean function from scratch in the next
12:03 - video we're going to code the second
12:06 - function okay

Cleaned transcript:

okay so now we're going to go ahead and try to implement our first function the main thing that you need to know here are how to construct a list and basically add values to it so in R it's called a vector and we want to create an vector and start adding more and more values to it so we're going to learn that first because that's going to be one very important part of our pollutant mean. R function so let's go ahead and try that out so let's say I have some vector and it's just called nums and it it contains some random numbers okay it doesn't matter what numbers it has but I'm just going to put in a few numbers here now I want to construct a duplicate Vector but what I want to do is I want to pull out one value from nums at a time and by pulling out one value at a time I want to then add that value to dupe so I want to do a loop and I want to pull one value at a time and put it into a vector called dupe so I'm going to construct an empty Vector this is how you construct a numerical empty vector currently this is what nums look like and if I showed you dupe this is what dupe would look like so as you can see nums contains the numbers 26 3256 dupe contains nothing it's just an empty array or an empty Vector now I want to go through nums and pull out one value at a time and add it to dupe so how do I do that I'm going to say for I in nums so this is going to go over each value in nums so here a better variable would be for Num in nums and what I'm going to do is I'm going to add that variable so here let's open a new line and I'm going to say create a new variable called dupe and what the new variable dupe will be is actually a concatenation of the already constructed array dupe so already what dupe previously was except we're going to add one more value to it this time which is going to be numb okay so what we're doing here we're saying dupe is now just itself plus a new value so this is how we pretty much add values at the end of the vector so once I run this and this finishes running you're going to see that dupe is going to now be an identical Vector um just like nums it's going to look just like that I'm going to run it and I have to close my squiggly brackets here now let's take a look at what dupe is and you can see it's 263 256 that's the first very important part in writing our function so I'm going to leave this one here and I'm going to start now trying to write the function and as we go along I'm going to try to pretty much quiz you on it so feel free to pause your video and implement the functions by yourself as we go on but okay so the last thing that you need to know about here is how to access one of the columns so let's say that I have already have one of the CSV files stored in the variable data so I'm going to do head data okay and this is going to show you the top few lines now one way to get access to the columns is this way and I think you know about this way if I do sulfate but here's one really big problem that occurs here so let's say that I make some variable like y equal to sulfate okay and now if I do data and I do the dollar sign and I do why it has no idea what that is I have to literally type in dollar sign sulfate every time for that to work meaning in fact that if if I use some variable it's not going to work so from now on what I'm going to advise you to do is forget about the dollar sign and just avoid it the best you can instead use the two bracket indexing so here if you want to get the sulfate what I would say is do two brackets and do sulfate this is going to get the sulfate column and that pretty much got you the same thing so here you can also do mean data Sul uh you have to make sure you put quotes around it sulfate and what we can say is n. RM equal true and this is one way to get the mean this is one thing that was throwing our function off and made our function incorrect last time and we need to use the double bracket here okay now we're pretty much ready to put this all together and finish our first function okay so now we are ready to write our function from scratch so let's get started the function is called pollutant mean function the first argument is going to be the directory or the path the second argument is going to be what function you want to pass in uh what what query you want to pass in so are you looking for sulfate are you looking for nitrate or are you looking for sodium pretty much whatever you're looking for that's going to be your pollutant ID is going to be the file names so here we're going to say the optional argument is going to be all of them all 332 unless the user specifies their desired range so let's create a variable called file list and we've done this before but we're going to basically list all the files path is going to equal to directory so whatever we pass it in the directory pattern remember is going to be your all extensions are ending as CSV so that's going to be your pattern that you're looking for cuz it's the files are called 00 1.csv 002 CSV and so on full name full names we want the full path of the file so we don't just want 001 CSV 002 we want downloads slpc data sl001 that CSV that's a lot more useful for us now I'm going to create that empty Vector like we talked about in the previous video and the Constructor is and the Constructor here is going to be just called numer so the Constructor here is called uh numeric we are calling it values and it's just an empty Vector right now so we're going to say for I in ID so this is just any number in one and 332 unless user specifies then it'll be something like 2 through 10 or 1 through 10 whatnot we're going to create something data which is just just going to be your file list and that number I think you get that part and now remember the trick we want to do is we want to go through each file and every time we calculate the mean from a file we need to save that mean then we need to go through another file calculate the mean save that mean the reason why we created this Vector in line three is is for that exact reason so we can go through multiple files and store all our values in here before we iterate to the next Loop because every time you loop again you're losing your previous information so the reason why we're using a vector is so it can retain the information for a longer period of time so here what we're doing is we're saying hey the new Vector values is just going to be the previous Vector values concatenated with now the new piece of information we have which is data so the new file and we just pretty much append one mean value to values so here remember to instead of using the dollar sign and saying pollutant you're going to get an error because remember here you would have to only say sulfate otherwise you get an error or you have to say nitrate otherwise you get an error so here the variable pollutant would mean nothing so we're actually going to have to use this index with the double brackets and pass in pollutant and remember pollutant is going to be something like sulfate or nitrate it's going to be like a string and we're going to close this and now all we do at the end is we just get the mean and pretty much remove our nonusable values or our nonavailable values rather na okay so this is working correctly now to test that this is working correctly let's just do a test case here and let's say pollutant mean and I'm going to put in the location of where this is at so let's do that drop box GitHub Cera okay so that's the path and we want to look for sulfate and if I run this we should get back 3189 followed by a few numbers so let's try to run this and see what we get back okay so I'm going to oh whoops it should be called pollutant meat save and now let's run it so it's taking a second and you can't see out of the screen but this is the result that I got in this case because that part is out of the screencast video scope but this is the main result that I got so if you run this code and you run it on spec data you're going to get the same result that's how you code the pollutant mean function from scratch in the next video we're going to code the second function okay
