With timestamps:

00:00 - in this video you're going to be
00:01 - building eBay web 3.0 adapt using
00:04 - infuria on the ethereum blockchain we're
00:06 - going to use rainbow kit to connect our
00:08 - metamask to the entire application and
00:10 - we're going to be using web3.js to
00:12 - interact with our custom solidity
00:14 - contract deployed using infuria and
00:16 - you're going to be able to list and sell
00:18 - your items and others will be able to
00:19 - come over and buy those items from you
00:21 - using ethereum with this app so with
00:23 - that said let's just jump straight into
00:25 - it all right let's get straight into the
00:27 - eBay clone and let's build this thing so
00:31 - what I got in front of me is basically a
00:34 - terminal ready to execute some
00:37 - stuff all right so I'm going to type in
00:40 - MPX leather programmer which is our
00:42 - custom built CLI tool just for you now
00:45 - I'm going to type in my email address
00:47 - here and let's see what else do we got
00:51 - after I'll put in my name and then just
00:53 - hit eBay now what's going to happen is
00:57 - you don't see it because it's on my
00:58 - other screen but it basically opened up
01:00 - an inference and you want to definitely
01:02 - use this specific Imperial link that
01:04 - this opened up because this will give
01:06 - you a bunch of perks now I personally
01:09 - already have an account within fewer so
01:12 - I'm just going to sign in but if you
01:14 - don't have an account yet you want to
01:16 - definitely create a new one with right
01:19 - here because it's going to give you a
01:20 - couple of perks and as you can see I
01:23 - created this eBay clone project now the
01:26 - way I did it is up here there's this
01:28 - create new key thingy which I just
01:32 - zoomed into for no apparent reason
01:33 - actually it's purple so you want to
01:35 - select web3 API formerly ethereum and
01:39 - then just give it whatever name my eBay
01:42 - project and it's gonna be like yo you
01:44 - have too many projects so I'm just going
01:45 - to hit cancel but this is literally what
01:48 - I'm gonna get now in here once you open
01:52 - it you want to hit manage key
01:54 - right there
01:55 - or it will show you this screen
01:56 - immediately and you want to go ahead and
01:59 - copy this API key this will be one of
02:03 - the most important things throughout
02:04 - this build so if you don't do anything
02:05 - just go ahead and copy this key and
02:07 - you're you should be good no I'm just
02:08 - kidding anyways regardless of copy that
02:10 - guy yup see copied it and very
02:14 - conveniently our CLI tool has just
02:17 - finished downloading this project so
02:19 - that's cool what you can do now is
02:22 - definitely you want to check for node
02:23 - modules in here in the roof folder and
02:27 - then down in the what is it next app
02:30 - folder so if you have those two node
02:32 - module folders you probably very likely
02:34 - ready to go now what you want to do is
02:36 - inside of next app create a new file and
02:39 - call it dot
02:40 - [Music]
02:42 - env.local that is period EnV period
02:45 - local now what you want to do is type in
02:48 - infuria and let me actually make this a
02:52 - little bigger that's what she said yeah
02:55 - should begin so what you want to type in
02:57 - is inferior underscore API underscore
03:00 - key not key or whatever and then just
03:04 - paste whatever key you've got there now
03:07 - you will also definitely keep this as a
03:09 - secret because the secret and
03:12 - um this is not going to work by the time
03:15 - you're watching this
03:16 - you can try though and if anybody gets
03:19 - access to your API key so this is your
03:21 - Warning by the way so if anybody gets
03:22 - access to your API key they will be able
03:25 - to use your inferior account which in
03:27 - turn might charge you if you are
03:30 - subscribed to paid services or just run
03:33 - all your free stuff out so there's that
03:35 - now once we've done this
03:38 - so once you open up the terminal and you
03:40 - should probably see it a keystrokes that
03:42 - I'm recording so what you can do here is
03:44 - go ahead and type in a CD next Dash app
03:47 - and that will basically just navigate
03:49 - you in here so your terminal is going to
03:51 - be inside that folder and now here you
03:53 - want to type in yarn def meaning your
03:56 - Dove and that should have technically
03:59 - opened or started this tunnel for you
04:02 - and what I'm going to do is just make
04:04 - things a little more convenient
04:06 - and if you pop it into a chrome
04:08 - congratulations you have the front and
04:11 - ready to go and this is what we're going
04:12 - to be using to build on top of after our
04:16 - coffee break
04:20 - okay this is the time to take another
04:23 - coffee break
04:24 - and go ahead and get started working on
04:27 - our
04:28 - contract so with that said go ahead and
04:31 - go into your contracts folder and inside
04:34 - there's this ebay.sol file now you want
04:37 - to come in here and this is basically
04:39 - pre-made contract that is ready for you
04:43 - all right so what can we do here so
04:46 - basically let's just go ahead and hide
04:48 - this terminal because we are not going
04:49 - to need it for a little bit and what
04:51 - we're going to be doing is
04:53 - let's just actually go ahead and start
04:55 - creating our objects trucks whatever
04:57 - mappings and stuff like that that's
05:00 - interesting I have the solution on my
05:02 - other screen and it doesn't look any up
05:04 - like that but I can imagine a scenario
05:07 - when GitHub copilot just puts out all
05:10 - the Developers
05:11 - let's hold their remote players out of
05:13 - their job you okay all right
05:16 - so let's go ahead and type in so let's
05:18 - go ahead and create a struct that will
05:21 - be called Product now that will have a
05:23 - couple of props in there so what are
05:25 - they we will have a address which is
05:28 - going to be the buyer's address it's the
05:31 - person who buys the product that'll be
05:34 - the buyer and then there's going to be
05:35 - another address which is yeah it's gonna
05:37 - be the seller now we're gonna have a
05:40 - uint which is going to be the ID of the
05:43 - product itself and we're going to have a
05:45 - price correct we're going to have
05:47 - another uint which we will be reading
05:50 - these products okay I put a comma
05:52 - because it was because my error linter
05:55 - was messing it was happy about the
06:00 - semicolon but okay all right let's do it
06:03 - that way though so then we're going to
06:06 - have a couple of strings here we're
06:07 - gonna have a name we're going to have a
06:10 - description we're going to have a
06:13 - category category
06:16 - like that and we're going to have an
06:19 - image URL
06:21 - nice it's nicely formatted now
06:24 - and next up what we're going to be doing
06:26 - is also versus like out in the wild out
06:29 - of out in the nothingness the Wilderness
06:31 - we're going to have a other U.N which
06:35 - will be product counter yeah yeah you
06:38 - and 256 you win it's basically the same
06:41 - thing I'm just a lazy person so I
06:43 - sometimes write you and but yeah anyways
06:47 - moving on you want to definitely map all
06:50 - the products
06:52 - and you want to map these product
06:54 - counter thingies so once again he went
06:58 - to a product and we'll be calling it
07:02 - this will be a public thing this mapping
07:04 - will be called products all right next
07:07 - up
07:08 - let's go actually just straight up jump
07:10 - into it and let's go ahead and create a
07:14 - new product list that guy all right so
07:16 - it's going to be list new product right
07:19 - and we will have to pass in a couple of
07:22 - things here
07:23 - so first of all we're going to need a
07:26 - name and this is the time when we're
07:29 - going to start introducing all these
07:31 - like underscores and stuff like that and
07:33 - memory next up we're going to have a
07:36 - description that we pass in then we're
07:39 - going to have a category that we pass in
07:42 - and an image URL that's smart that's
07:43 - actually pretty intelligent I don't know
07:46 - where my formatting went but there it is
07:48 - you also want to definitely pass in the
07:52 - price of the item price like that and
07:57 - you also want to pass in the rating of
08:01 - the item and don't leave any trailing
08:03 - commas what's up with my prettier dude
08:06 - all right there we go there we go okay
08:08 - so apparently
08:10 - okay so my pre-year apparently doesn't
08:12 - work as long as the function itself is
08:14 - like has syntax errors which is actually
08:17 - smart all right now you also want to
08:19 - make this a public function because you
08:21 - want to definitely make sure that
08:23 - whoever is interacting with the app is
08:25 - going to be able to call this function
08:27 - so now with that we're pretty good now
08:30 - next up we're going to do is yeah we'll
08:34 - do that eventually at some yeah so next
08:37 - up what you want to do is we'll be
08:38 - creating a new instance of the products
08:41 - truck that we just did up here all right
08:44 - so this is just a definition of the
08:45 - product struck and like just defines
08:47 - what are each and every single one of
08:51 - what kind of traits will each and every
08:53 - single product have and so what we're
08:55 - going to do is we're going to say
08:57 - product
08:58 - memory because from the memory we're
09:01 - doing things and it will be a new
09:03 - product and this is a declaration and
09:05 - this will be a type product and so in
09:08 - here we're going to pass in an object
09:10 - now
09:11 - we will be having a buyer who's going to
09:14 - be address zero
09:16 - all right so let's take a look at that
09:18 - what this actually is because this is
09:19 - some sort of like basic fold address
09:21 - that is that's just a placeholder so
09:23 - let's take a look at what Google what
09:26 - father Google says especially if I was
09:28 - able to type it correctly meaning in
09:31 - solidity and so there you go the zero
09:34 - count is just a special use case
09:36 - indicate that the new contract is being
09:38 - deployed so basically what we're going
09:39 - to be using that in this case is just
09:42 - like this placeholder that's literally
09:43 - what it means what is going to default
09:45 - back to so this is like not a like
09:48 - nobody owns this one is what I'm trying
09:50 - to say it's like when you put an ad item
09:52 - out for sale there's no actual factual
09:55 - Pro it's like kind of like if it's at
09:58 - zero but because that's not an address
10:00 - like you got to do it this way all right
10:02 - there we go so like seller that's going
10:05 - to be the message sender meaning the
10:08 - person who pops open their meta mask and
10:10 - puts out a new item for listing and
10:13 - we're going to have a ID which is going
10:16 - to be the product counter and then we're
10:18 - going to have a price and from now on
10:21 - basically match all these to these guys
10:25 - but like down here so if that was weird
10:28 - just watch me and you'll understand a
10:31 - little bit what I meant to like rating
10:32 - it's going to be rating and then you're
10:35 - going to have name it's going to be name
10:37 - and then you're going to have
10:38 - description it's going to be description
10:40 - category you're like yada yada and now
10:42 - we just close that guy remove the access
10:44 - stuff and let's see what the issue is so
10:48 - this is product identifier not found oh
10:51 - what would be helpful if I would type
10:54 - without typos so product all right cool
10:57 - function stay commutable that are
10:59 - restricted to view that's completely
11:02 - fine as of right now because right now
11:05 - we're not like I don't get it why it
11:07 - says that but it will go away in a
11:09 - little bit don't even worry about These
11:10 - Warnings warnings are not even legit so
11:12 - next up what you want to do is you're
11:14 - going to say products the product
11:16 - counter is going to be new product so
11:20 - what did I just do this will be the
11:22 - mapping all right so product counter
11:26 - is going to be we're going to where
11:28 - we'll literally have a product counter
11:30 - that starts from zero and that will be
11:33 - the index so that will be the ID and
11:36 - we'll be indexing through all these
11:37 - products so what we do now is we're
11:40 - going to have a tuple or like an array
11:43 - of tuples or whatever a mapping all
11:45 - right I'm just running like defensive
11:47 - with all these parts basically so we're
11:48 - going to be creating a mapping that will
11:50 - be mapping that will map all these new
11:53 - products these guys to each product
11:56 - counter does that make sense it's like
11:58 - we're gonna have one first product two
12:01 - second product yada once we build out
12:03 - the entire thing it'll like all come
12:05 - together and you will understand what
12:07 - I'm talking about and then obviously you
12:10 - want to increase the product counter
12:12 - because initially it starts out at zero
12:15 - and then the next if you didn't do that
12:17 - then and you added like a second product
12:19 - that's supposed to depict that you
12:22 - repeat the same step
12:24 - drawing skills on point
12:27 - so if you stay at so if you leave
12:29 - product camera at zero and but you don't
12:32 - step it up the next product is going to
12:34 - be still stored at zero which is
12:37 - obviously not ideal so you want to like
12:39 - stop it I should be able to pretty much
12:41 - be enough for now let's actually do one
12:44 - more thing which is going to be a really
12:45 - quick one so I just want to like create
12:47 - a new function
12:49 - we call get number of fraud ducts which
12:53 - is just going to be like a nicer naming
12:55 - of something we could already do because
12:58 - like whenever you
13:00 - Define a variable under the hood there's
13:03 - going to be a color view function
13:06 - created for it like immediately anyways
13:09 - we're just gonna make it nice anyways
13:12 - and we're just going to create a call
13:15 - function so that will return a uint and
13:20 - where's the T there's the T and then
13:23 - we're just going to literally return
13:25 - this guy back and that'll be basically
13:28 - what we will get started with now
13:31 - in the in a previous video and probably
13:34 - we suggested a couple times but let's go
13:37 - ahead and go into our extensions and you
13:39 - want to download ethereum remix so this
13:41 - is the guy that we are going to be using
13:43 - this is basically remix IDE baked into
13:46 - your vs code if you know what remix ID
13:48 - is this made a lot of sense to you if
13:51 - you don't know what remix IDE is I just
13:53 - saved you a ton of headache and copy and
13:55 - codes so don't even worry about it just
13:57 - get it this is a remix IDE for you
14:00 - all right let's go ahead and click that
14:02 - bad boy so that will be remix IDs icon
14:05 - once you install it and before you do
14:08 - anything you just want to make sure that
14:10 - the compiler version which you can set
14:12 - out heat set right here it currently
14:15 - doesn't have any kind of value
14:16 - so what you want to make sure is that
14:18 - there's 0 8 16 so you want to go ahead
14:21 - and select that guy and now you see it
14:24 - says zero eight sixteen how cool is that
14:27 - all right let's make this small again
14:29 - okay and so now you want to click run
14:32 - and deploy and then just hit activate
14:33 - and that will basically spin up this
14:37 - thing now it also spins up your
14:40 - output but we're just gonna put that out
14:42 - of the way so what's happening here
14:45 - there's a couple of things that are
14:46 - going on so if you go back to infuria
14:49 - and hat back right into your project and
14:52 - then you hit manage key over there and
14:55 - then here you select you can go with
14:57 - mainnet but that's going to cost you a
14:58 - ton of money so I would just recommend
15:00 - going with girly and then copying this
15:03 - guy and then you can paste this RPC URL
15:05 - here now that'll help you when you're
15:09 - deploying and when you're like finished
15:11 - with the app now when it comes to
15:13 - deploying to Tesla it takes a little
15:15 - longer time so instead what we're going
15:17 - to be using is not this but what we're
15:21 - going to be using is if you go to 12
15:23 - fullsweet.com ganache
15:26 - and then you go ahead and download this
15:28 - guy right here that will download an
15:31 - application to get in a ganache
15:33 - installed all right and then once you
15:35 - install it this will come up obviously
15:37 - you won't have no workspaces so what
15:40 - that means is you can just hit quick
15:41 - start or if you've been already using it
15:44 - you just click whatever workspace you
15:47 - got and you want to copy this RPC server
15:50 - all right so that's what we that's what
15:53 - you want to copy and then go back to
15:55 - your vs code and place it right here
15:58 - and then hit connect
16:00 - and so when you first
16:01 - connect your ganache to this whole thing
16:04 - this is what it will look like and so
16:07 - down here it's going to say network is
16:09 - local or custom just like it does it
16:11 - here it's like cool stuff all right you
16:14 - can also if you press command shift p
16:17 - and then you start typing in secondary
16:18 - you can open up the secondary sidebar
16:21 - thing you can just pop that output
16:23 - window right there and that will that
16:25 - way you can close it close the things
16:28 - down there and then just pull it out
16:30 - wide so you are going to be seeing
16:32 - everything now what you want to do is
16:34 - you want to have your ebay.so file open
16:36 - on the left hand side or like somewhere
16:38 - and then just make sure you selected
16:40 - that actually don't really have other
16:42 - options but just in case you do you want
16:44 - to select the correct one and then just
16:46 - hit compile let's see what it does let's
16:48 - see what it says let's see if our
16:50 - contract is good to go and ready to be
16:52 - deployed and compilation
16:54 - finished so that's cool and now what you
16:57 - can do is hit deploy and it is already
17:00 - deployed to your local blockchain
17:02 - ganache thingy so that's actually pretty
17:05 - good all right and so here are all the
17:08 - functions that you can do so as I said
17:11 - before so there we go now when you
17:14 - create now when you call this get number
17:16 - of products it's going to you say zero
17:18 - interesting so I'm just going to go
17:20 - ahead and clear this output so it's
17:22 - going to be nice and clean and so
17:24 - whenever you call this get number of
17:27 - products that we just defined somewhere
17:29 - in this contract it'll return zero
17:32 - meaning we don't have a single piece of
17:34 - product that's fine let's go ahead and
17:36 - create one so we're going to give it a
17:38 - name my first product one thing you
17:42 - don't ever press command a in here if
17:44 - you do the whole screen is going to turn
17:46 - into this grayish thing and you have to
17:48 - restart remix that's a bug I would guess
17:51 - probably that's what it is don't tell me
17:54 - I didn't warn you next up you want to
17:56 - put a put a description in so product
18:00 - description uh you know what I'm just
18:03 - gonna go with some gummy stuff so I'm
18:04 - just going to type in description
18:05 - category
18:07 - doesn't really matter for now because
18:09 - we're just testing it means you wear out
18:11 - now you would think that oh my God where
18:13 - is uh where am I going to get an image
18:14 - URL from don't worry about it it's just
18:16 - a simple string so you can just type in
18:18 - ing URL cool and then ask for a price
18:22 - now
18:23 - for now you're gonna get away with
18:25 - typing in one or something like that but
18:28 - later on you don't really want to do it
18:30 - because then it will cost an entire
18:31 - ethereum so just keep that in mind and
18:34 - for rating obviously it's a five out of
18:36 - five so that's pretty cool all right so
18:38 - once you hit transact which basically
18:40 - means like post it or like put it onto
18:42 - the blockchain what you will see is a
18:44 - bunch of like addresses guests used and
18:47 - if it like doesn't look super weird it
18:50 - like naturally feels good your developer
18:52 - instincts tell you that there's no error
18:54 - in here there's probably no error in
18:56 - here and another way to check that we're
18:59 - correct and probably this is the better
19:00 - way to do without having to listen to
19:03 - your instinct yes I'm just trying to
19:06 - find the optimal window stuff so I'm
19:09 - just going to delete it again or clear
19:10 - the output again and if you hit get
19:13 - number of products it should say one
19:16 - did I just write a perfect contract in
19:18 - here and if I was to put in zero
19:22 - that should
19:24 - hey there you go oh my God look at that
19:28 - so that's the mapping that's the mapping
19:31 - so remember when I said maybe I haven't
19:34 - said it but remember when I
19:36 - decided or didn't say it that mappings
19:39 - create their own cofunctions
19:41 - so that's why we only created a get
19:42 - number of products thing right
19:46 - so when you create a simple variable
19:48 - that doesn't create a call function
19:49 - under the hood but mappings do and so
19:53 - here what we did is we know that the
19:55 - first product that we put in there is
19:57 - because we're developers we start
19:59 - counting from zero zero one two three
20:01 - this is how we count
20:02 - now first product that we put in there
20:05 - has an ID of zero so this will be
20:07 - waiting for a zero
20:10 - it's about a counter again just put that
20:12 - guy in there call it and then you get
20:14 - back everything that isn't gonna that is
20:16 - that you've just saved into your product
20:20 - now
20:21 - here's everything
20:23 - Let's uh all right so with that said so
20:26 - with that it is time we go ahead and
20:29 - create a function that will allow our
20:31 - users to purchase these items that are
20:35 - listed so purchase I think that's how
20:38 - you write it item nice
20:42 - and that will actually be waiting for a
20:46 - you and ID so we'll have to pass in the
20:49 - ID now this is going to be a public
20:51 - payable and payable me just means that
20:55 - oh you gotta like there's going to be
20:57 - actual factual transactions going on in
20:59 - there so you gotta basically enable all
21:03 - these functions for the function I
21:05 - realized that sounded a little weird but
21:07 - that's what it is now right in here what
21:10 - we're going to be doing is we're going
21:13 - to require a couple things so
21:15 - what we mean what I mean by requiring a
21:18 - couple things is we need a couple of
21:20 - guard functions or guard Clauses is what
21:24 - I meant and that happens with the
21:27 - require keyword so let's go ahead and
21:29 - get started with that so what we're
21:32 - going to need is message.sender we're
21:34 - going to double we want to double check
21:36 - the price obviously that it's the
21:38 - correct prizes being sent so if the
21:40 - message sender no not the message value
21:45 - is less than no equals or more ah
21:51 - actually we should go with equals
21:53 - products.id so here's the tricky thing
21:56 - let's actually just generate the product
21:58 - instance in it so we're going into the
22:02 - product and then we're gonna say storage
22:05 - and then we're going to say product
22:06 - again because this is just going to be a
22:08 - local instance of the product itself all
22:10 - right and then we're just going to say
22:12 - products ID but it has to do there's a
22:15 - lot of products I'm gonna go again to
22:16 - the mapping that's products and then
22:18 - check for the ID that's being passed in
22:20 - and then I'm just storing that in here
22:24 - and this is literally just the type of
22:27 - that variable and storage is that oh
22:29 - we're going to be reading from the
22:30 - storage so that's uncomment this guy so
22:33 - we're we literally need that the message
22:35 - value is the same as product dot price
22:41 - yeah and if that doesn't happen we will
22:46 - just say invalid amounts and
22:50 - for product or something and that won't
22:54 - tell the user whether they sent too
22:57 - little or too much but there's a
22:58 - security feature so we're not gonna
23:00 - bother that now we also want to make
23:04 - sure that the person who's buying the
23:08 - product is not the person who is trying
23:10 - to sell it because that's like like a
23:12 - churning type of thing all right so next
23:14 - up what you want to make sure is that
23:16 - the item hasn't been purchased before
23:19 - how do we do that you ask so remember
23:22 - when we get started the buyer is going
23:24 - to be the zero guy so we also need that
23:27 - that the product the buyer equals that
23:31 - address zero because if it doesn't it
23:33 - means that somebody else has already
23:34 - purchased the item so make sense so it's
23:38 - product buyer has to be that zero guy
23:42 - because if it isn't that means somebody
23:44 - purchased this item so I damn has been
23:49 - bought or something like that I don't
23:51 - know I'm just gonna say that whatever
23:54 - that was yeah that's pretty much what
23:57 - we're gonna go with for now and so next
24:00 - up you also if you don't want to buy
24:02 - your own stuff so message dot sender
24:04 - cannot be equal to product dot seller
24:09 - and so yeah seller cannot buy own prod
24:13 - their own product
24:15 - and we could just eliminate all these
24:18 - typos all right
24:21 - these are basically the guard causes
24:23 - that we're gonna be rolling with for now
24:25 - this should be pretty much enough for us
24:27 - to go for it now at point you want to
24:30 - transfer over that item but before you
24:32 - do that if you want to make sure that
24:35 - the product is paid for so here's where
24:38 - the payable comes in
24:41 - product.seller is going to be the person
24:43 - that receives the amount of money and
24:47 - you want to transfer that amount which
24:50 - is the message that I value so basically
24:52 - what this does is
24:54 - this person will get this much in short
24:58 - all right so that being said we should
25:01 - technically be pretty good to go and
25:04 - move on to redeploy this contract onto
25:08 - our test server and then test it out
25:11 - once again so let's do that let's go
25:13 - into our ethereum let's go into our
25:16 - remix guy hit activate and let's see
25:19 - what do we got oh yeah nice the output
25:21 - thing came up so there's like all this
25:24 - like history and stuff I'm just gonna go
25:26 - ahead and delete that because we don't
25:28 - need any of that same for that same for
25:30 - the output cleaning let's just go ahead
25:33 - and hit compile
25:34 - and wait for it to pass oh compilation
25:38 - finished nice so that's pretty good and
25:40 - I'm just gonna go ahead and hit deploy
25:42 - so there it is okay there's a couple of
25:45 - things that are going on in here the
25:48 - remix IDE is now recognizing our new
25:51 - contract so get number of product zero
25:54 - that that makes sense
25:55 - so we're gonna say first product to sell
26:00 - or for sale description you're gonna
26:04 - have a category it don't really matter
26:06 - it really doesn't actually image URL and
26:09 - we're going to set I'm just going to say
26:11 - 10 because that's going to be like very
26:14 - visual in our
26:16 - ganache so what we're going to be
26:19 - expecting to do is that this account
26:21 - sells the item for 10 ethereum to this
26:24 - account so I'm expecting that this
26:28 - balance will go down to 89 ethereum and
26:31 - this will go up to 69 ethereum all right
26:34 - let's do that and the rating is five
26:37 - obviously you only sell the best stuff
26:40 - nice
26:41 - so there's that and so now what I'm
26:45 - going to be doing is just double check
26:47 - that we have the zeroth item there you
26:51 - go price ten noise so how do we purchase
26:53 - with this guy so first of all you want
26:55 - to change the account that's going to be
26:58 - interacting with the contract so we are
27:00 - in purchase mode now and what we want to
27:02 - do now is we're going to say purchase
27:05 - item zero you want to put the zero in
27:08 - there but don't hit don't hit it yet and
27:10 - here oh I think we put the price in way
27:15 - I believe so
27:17 - maybe not let's see that's probably in
27:20 - 10 way we'll see in a little bit so if I
27:23 - just put in tan
27:25 - there you go
27:26 - oh I just deployed it again okay I'm
27:30 - just going to go ahead and transact and
27:32 - it apparently went through now nothing
27:34 - really happened here
27:36 - wait wait we should technically have
27:39 - purchased this item I'm just going to
27:41 - clean my input and let's go ahead and
27:43 - check on the new product again so we see
27:47 - that the seller is still that person but
27:49 - the buyer is this guy and so even though
27:54 - we expected this to change this actually
27:56 - didn't because when you put in 10 here
27:59 - into this price thingy the contract is
28:03 - always talking in or like always expects
28:05 - these numbers or like whenever we are
28:07 - talking about values in way so what is
28:11 - way is like a super small amount
28:15 - basically so we're gonna say eth
28:18 - converter ethereum unit converter efesh
28:21 - converter.com so basically what you want
28:23 - to do is put in 10 here and if you wanna
28:27 - if you want something to cost 10 ether
28:29 - you will want to list it at this price
28:32 - it's just like dollars and pennies and
28:36 - cents and whatever so that's basically
28:38 - what it is so you want to copy that guy
28:40 - had back right here
28:42 - and so to be able to double check what
28:45 - is happening I'm just going to delete
28:46 - everything once again set go back to my
28:49 - original account
28:51 - and compile it again because that never
28:55 - hurts deploy this guy again because that
28:57 - doesn't hurt either and then go back
29:00 - into my eBay and then I'm just going to
29:02 - say product because I'm gonna make it
29:04 - fast description and I go right nice
29:09 - imgurl and then price I'll just paste
29:12 - that guy there and I hit five on rating
29:14 - transact nice it went through and clear
29:18 - this whole number of items we have one
29:20 - item in there zero call that guy and we
29:25 - can see that's the price so that's we
29:28 - can either copy that and paste it here
29:31 - in the value or we can just go ahead and
29:33 - type in 10 but then select ether
29:36 - and then you just want to hit zero there
29:39 - and change the account TD buyer account
29:43 - and now hit transact boom so that
29:47 - apparently went let's see what do we got
29:49 - on here so as you can as I explained it
29:53 - earlier and then put in the wrong price
29:55 - but now with the new price this went
29:59 - down by 10 ethereum and this went up by
30:01 - then ethereum so like rewind back if you
30:03 - don't believe me because I literally
30:04 - have video proof of this so that's
30:06 - basically how our thing works and by the
30:09 - way if I want to buy it again it is
30:12 - first of all I didn't specify the amount
30:14 - so I'm just gonna put in 10 ether again
30:16 - so it doesn't it cannot send that back
30:19 - but then it says item has been bought
30:21 - and then if I wanna uh check the other
30:24 - error and then I put in yeah 10 transact
30:28 - again
30:29 - yeah item has been so like there's a
30:31 - bunch of checks that are going through
30:33 - here and because the item has been
30:35 - actually we will not see the other the
30:38 - seller cannot buy their own item but
30:40 - like you can just create a new item try
30:42 - to buy it with the seller and then that
30:45 - will pop up so that is basically
30:47 - creating the contract them and testing
30:49 - it out that should technically have
30:51 - given you a pretty good understanding of
30:53 - how this whole thing works and what
30:55 - we're going to be interacting with
30:57 - throughout this build so with that said
30:59 - I'm just gonna go ahead now and let's
31:01 - deploy this guy
31:03 - all right now that brings us to our
31:06 - contract deployment so let's go ahead
31:08 - and at this point there's another
31:10 - extension that we got uh that we're
31:12 - gonna install so it's called truffle
31:14 - where am I even typing
31:16 - sorry that's truffle now this is the
31:19 - exact one you want to install so truffle
31:22 - for vs code this will open up this will
31:25 - add this guy right here and so this is
31:27 - your personal this is going to be your
31:30 - truffle now here what you will need to
31:32 - do is if you have any kind of other
31:34 - projects a link to it or maybe not what
31:37 - you can do is you can just say connect
31:39 - to network and then just hit inferior
31:41 - service
31:42 - and then if it's your first time using
31:44 - this extension it will pop open your
31:46 - your browser and that will let you
31:49 - connect to inferior but however if you
31:52 - don't have that or however if you've
31:54 - used it already it will just fetch all
31:56 - different projects that you've worked on
31:57 - before so in my case I just connected
32:00 - the wrong project again so let's just
32:02 - repeat that one more time
32:04 - so we're gonna go with inferior and then
32:06 - hit eBay clone so now that we have eBay
32:09 - there that will basically enable us to
32:12 - go ahead and deploy everything through
32:16 - inferior's RPC URL to the girly Network
32:19 - now what that will enable us to do is if
32:22 - I go back right here and then I right
32:24 - click the eBay clone and then I go ahead
32:26 - and hit build contract that will pop
32:29 - open my and it literally just said
32:31 - everything is up today yada yada
32:33 - finished okay that's pretty good it's
32:36 - because we already compiled it with uh
32:39 - wait what is it with the remix so I'm
32:40 - just gonna go ahead and remove the
32:42 - artifacts folder and now because it
32:46 - already recognize that oh we built it
32:48 - one more time there's another option
32:50 - that we can generate the API which we
32:52 - will need it's just by typing in trouble
32:55 - compile so there's that and with that it
32:58 - just created a new builds contracts
33:00 - folder and this is your API that we're
33:03 - going to be using later on in the build
33:05 - you know what while we're at it let's
33:07 - just go ahead copy this
33:09 - file and then go back to utils in under
33:13 - next app and then just paste it there
33:14 - it's going to be helpful let's just do
33:16 - that it doesn't take much time now what
33:18 - you want to do next up is go ahead and
33:21 - hit deploy contract
33:24 - okay so once you hit that will basically
33:26 - just give you a bunch of options on like
33:28 - where you can go ahead and deploy it so
33:30 - step one we're going to go ahead and
33:32 - deploy it on girly hey what did I just
33:36 - do boy oh
33:38 - curly there you go now we want to leave
33:41 - the gas price completely alone and empty
33:44 - that's fine and at this point you can go
33:48 - ahead and paste your mnemonic or
33:51 - generate a new mnemonic now if you
33:53 - generate a new mnemonic that will not
33:56 - have any kind of girly eat on it however
33:58 - if you already have a metamask
34:02 - that is connected to the girly Network
34:05 - and you unlock it
34:08 - see I have 7.3 girly eth so that's
34:11 - pretty good I can gen uh get that
34:14 - mnemonic from
34:16 - going here
34:19 - settings advanced
34:21 - not Advanced maybe security yeah and
34:25 - reveal secret recovery phrase so if I
34:28 - hit that I'm not gonna but if I hit
34:29 - that'll show me my mnemonic and then you
34:31 - can just paste it there and then you
34:33 - will it will generate you this EnV
34:34 - thingy now I've already done that so I'm
34:37 - not going to do it again but if I was to
34:39 - do it it will generate it would generate
34:41 - me a new one like this so I'm just going
34:43 - to use the one that I already saved and
34:46 - when you click that it'll take a little
34:49 - bit of a Time
34:50 - to get started with this thing now you
34:54 - want to definitely check your
34:55 - notifications because that's where this
34:58 - HD wallet provider thingy is going to
35:01 - pop up so you want to install that every
35:03 - the first time when you're deploying
35:05 - something so it'll take a little bit of
35:06 - time and then after that you are going
35:09 - to go ahead I'm just going to go ahead
35:11 - and deploy everything for you it still
35:15 - looks a little interesting to me
35:17 - so we're just gonna go ahead and try
35:21 - this one more time now
35:24 - oh
35:25 - so the reason why it like doesn't give
35:28 - you anything besides oh yeah it's
35:30 - deployed is because we don't have the
35:33 - migration set up so let's actually go
35:36 - ahead and do that
35:37 - the way it works is you want to go into
35:39 - your migrations folder and create a new
35:40 - file that you will call one underscore
35:42 - deploy.js or whatever and in here you
35:46 - want to create I'm going to import eBay
35:47 - from the artifacts are DOT choir
35:52 - and then you put in eBay now this has to
35:56 - match
35:57 - with the name of the contract so you
35:59 - want to double check that if you were to
36:01 - be a rebel that uses it for naming I
36:04 - know I used to be one and then you go
36:06 - ahead and say module exports async
36:08 - function deployer and then wait
36:11 - deployer.deploy eBay a lot of deploys
36:14 - deploy they play to play all right now
36:16 - you're gonna go ahead I'd like to clean
36:19 - my output a lot of times because it just
36:21 - clogs up and I don't know what ends
36:24 - where and now we can go ahead and hit
36:27 - deploy once again and when this guy runs
36:31 - through and finishes off oh it's still
36:34 - deploying okay so because it's a task
36:37 - that it actually takes quite a lot of
36:39 - time to deploy it so that's completely
36:41 - fine it's running through a bunch of
36:43 - blocks so
36:45 - there's that whenever it's done it's
36:47 - going to say deploy succeeded now you
36:50 - want to scroll up to contract address
36:51 - and this is your contract address so
36:55 - just to double check let's go on to my
36:58 - Safari I'm gonna say girly
37:01 - white girly Dot etherskin.io
37:05 - and that's the official ether scan and
37:09 - there you go now as you can see done
37:13 - I just deployed this contract and if I'm
37:17 - not mistaken that's going to be my
37:19 - wallet address let's see yup that's it
37:22 - that's that there you go now you just
37:24 - deploy it to girly now the next app
37:27 - we're going to deploy it to our ganache
37:29 - as well why
37:31 - a pretty valid cat question reason why
37:33 - we deployed to ganache and Gurley as
37:35 - well is
37:37 - because we're not going to be changing
37:39 - anything on the contract so like right
37:41 - now we're just going to deploy it to
37:43 - Gurley and then we're going to deploy to
37:45 - ganache but we're going to use ganache
37:47 - throughout the build and while we build
37:49 - it because Gurley is a slow Network
37:51 - compared to ganache when it runs on your
37:53 - local network it's always going to be
37:55 - faster it's always going to be a better
37:57 - developer experience and I want to speed
37:59 - through this build at the end or after
38:02 - the tutorial feel free to go up save
38:04 - this somewhere like you want to
38:06 - definitely go ahead and save it in your
38:08 - constants and then be like oh I don't
38:11 - know you wouldn't be export const
38:15 - for cons contract address or something
38:19 - like that so export counts the dress and
38:22 - then you just want to put it there but
38:23 - I'm just gonna comment it out for now
38:26 - because we're going to once again as I
38:28 - said deploy to ganache and then after
38:30 - the build is done and then you take down
38:32 - ganache you can just swap it swap out
38:35 - the address and then just make sure you
38:37 - connect the girly and you should be good
38:38 - to go switching Networks
38:40 - so once again I'm going to go ahead
38:43 - delete or empty out my output and then
38:47 - go ahead and deploy this guy now I'm
38:49 - going to type in local and it should be
38:51 - good and as you can see and as you can
38:54 - see it is like way faster like it's
38:56 - already done
38:57 - this is why we're going to use glitter
38:59 - so now I'm just going to type in export
39:01 - cause address once again bam and then
39:05 - you can put early after this and oops
39:10 - after this and so that way you're like
39:13 - not gonna mess up let's play now the
39:16 - next thing that we will be doing is you
39:19 - should have already installed with a CI
39:22 - you didn't have to do anything but you
39:24 - already have access to web 3 from web
39:28 - free you want to go ahead and employ
39:30 - import the ABI from this Json let's do
39:34 - that too so what you will say is
39:36 - contract ABI from ebay.json
39:40 - nice so next up what we will be doing is
39:45 - going to say con cons
39:47 - ethereum from window so basically this
39:51 - is just a structures ethereum from
39:53 - window window is literally all the code
39:55 - that's running in your browser and then
39:57 - ethereum is just a part of it so when
39:59 - you destructure it you will have an uh
40:01 - you will have a variable called ethereum
40:03 - all right next you're gonna say if
40:07 - ethereum but not with an exclamation
40:10 - point so if you have ethereum you want
40:12 - to go ahead and say const web 3 equals
40:15 - new web3 and then put in ethereum right
40:19 - there and then you want to return new
40:21 - web 3. that exactly this new
40:26 - web3.east.contract and I'm passing the
40:28 - ABI and the address
40:31 - now the one thing sometimes people
40:33 - forget is the ABI file itself has a
40:38 - bunch of things that are going on in
40:39 - there so there's this contract name
40:41 - there's the API that's exactly what and
40:43 - then like there's all this metadata and
40:45 - the random stuff that's going on yeah
40:47 - like all this stuff that like your app
40:50 - doesn't even need to worry about now
40:52 - option A what you can do is delete all
40:54 - this stuff but I prefer not to do that
40:57 - and instead it's just an easier solution
41:00 - to just contract maybe add an API and
41:02 - that literally takes care of the entire
41:04 - thing and and that's it you're good to
41:07 - go so with that said that is basically
41:10 - the deployment and now let's go ahead
41:13 - and create a nice little connect
41:16 - metamask button alright so I was told
41:19 - that this is the time that we go ahead
41:21 - and connect our metamask to this
41:23 - application so to do that you want to go
41:25 - into your app.js file now this is a
41:29 - bunch of things already imported
41:31 - so now we're just going to import a few
41:34 - more things so first of all
41:37 - we're going to be importing is just a
41:39 - stalling style file styling so from
41:42 - rainbow kit you want to go ahead and
41:45 - import styles.css it's their own
41:48 - specific styling and then you want to go
41:50 - ahead and import chain I'm going to
41:52 - import
41:53 - configure chains
41:56 - you also want to import create client
41:59 - create client yup and then wag me config
42:05 - here from blackme you thought it was
42:09 - going to be rainbow and then uh that's
42:12 - pretty much it oh wait no there's one
42:14 - more thing so we're gonna be importing
42:16 - get default wallets
42:20 - and rainbow kit provider and the Dark
42:26 - theme from that rainbow me slash rainbow
42:31 - kit and then you want to import two more
42:33 - things one of them is going to be the
42:34 - infuro provider from wag me
42:40 - slash
42:41 - provider slash infuro and you also want
42:46 - to import the Json RPC Provider from the
42:52 - same place or like almost
42:54 - now that suggestion was not good it's
42:57 - actually Json RPC like that so not Dash
43:00 - RPC okay so once you have these now
43:04 - we're gonna go ahead and set up a bunch
43:05 - of stuff now with that done let's go
43:07 - ahead and configure all the stuff that's
43:09 - going to be allowed as a user so like
43:12 - basically all the chains that the user
43:13 - will be able to connect to and all the
43:15 - providers for those chains we're gonna
43:18 - have chains and we're gonna have Pro VI
43:21 - and this is like not from anymore so
43:25 - we're gonna have configure chains and we
43:28 - are actually going to have two rays in
43:31 - here
43:32 - so in the first array we're just going
43:34 - to say chain dot Gurley and chains
43:39 - that's where we're gonna be coding in
43:42 - the next stop we're gonna have the
43:45 - inferior provider which is going to have
43:48 - an API key and for a little bit I'm just
43:52 - going to leave it empty but yeah and
43:55 - then we also want to make sure that the
43:57 - priority on this one is the highest so
43:59 - basically there's going to be two
44:00 - providers in here
44:02 - because we imported two there's gonna be
44:03 - inferior provider and there's going to
44:04 - be RPC the Json RPC what we're going to
44:07 - do is whichever chains a user selects
44:09 - you want to make sure we use infuria
44:12 - primarily however if they don't support
44:14 - that specific chain then we're going to
44:16 - have this Json RPC which is just
44:18 - literally the most custom RPC Rider out
44:22 - there so next up let's configure that
44:25 - secondary provider and it's going to be
44:27 - the Json RPC provider and we're gonna
44:31 - have to put in a few things so first of
44:34 - all priority two that's the secondary
44:37 - provider in this case and then RPC
44:39 - is going to be we're going to pass the
44:42 - chain and we're gonna go ahead and type
44:46 - in HTTP and then once again you want to
44:50 - put in this specific RPC address I'm not
44:54 - even gonna say it out because I didn't
44:56 - even want to say it out and that should
44:59 - basically wrap up all the providers that
45:01 - we got out here so these will be used in
45:04 - a little bit now I just want to like
45:06 - jump back right in right here uh to the
45:09 - inferior one and if you remember right
45:12 - at the very beginning of this app we
45:15 - actually saved our inferior API key here
45:17 - in the dot EnV so you want to go ahead
45:20 - copy that name and then come back right
45:23 - here and then you want to say cross dot
45:27 - EnV Dot and then just paste whatever
45:30 - name you gave it and um it should be
45:33 - good to go now one more thing you want
45:35 - to always restart the server so you just
45:40 - want to run your end up again and that
45:41 - will that would allow the application to
45:44 - read the end vehicle it probably already
45:46 - has but just in case it doesn't
45:49 - sometimes it helps and it's just like a
45:52 - safety measure okay
45:54 - so next up what you will want to do is
45:58 - you want to create a new const which is
46:00 - where we will
46:03 - destructure connectors from connect
46:05 - errors
46:06 - and it equals get default
46:11 - wallets like that and now we're gonna
46:14 - say app name it's not even Instagram
46:17 - it's eBay
46:19 - and we're gonna say up
46:21 - name eBay and then we're gonna say we're
46:25 - gonna just literally just gonna pass in
46:26 - all the chains we're just gonna pass in
46:29 - all the chains that we provided here so
46:30 - basically fees are gonna be the only
46:32 - change the user will be able to choose
46:34 - from when they are interacting with our
46:36 - app and then next up we're gonna have a
46:39 - whack me config
46:41 - and that'll be a create and then we're
46:45 - just going to go ahead and create the
46:46 - client with this specific function and
46:48 - then we want to pass an auto connect
46:49 - make it true you want to pass in right
46:53 - after that connectors and then you want
46:56 - to pass in provider and that should
46:59 - pretty much wrap up our setup for this
47:03 - for this metamask connection now there's
47:06 - a couple more things it's not that easy
47:08 - so come here like I'll just command x on
47:11 - it so I can just paste it back and
47:13 - whatever so once again copy that yep and
47:16 - then I'm going to say wag me config
47:20 - and say client
47:23 - and I'm passing Wegman config hey config
47:27 - like that so that closed nice
47:30 - and now I want to say rainbow kit
47:32 - provider and
47:36 - and then theme dark theme that's pretty
47:38 - cool and you can also like
47:40 - you can also enable cool mode now in
47:43 - that case you will probably have to
47:45 - import it yeah so let's import cool mode
47:48 - maybe you don't have to interesting okay
47:52 - check out we'll see if we have to import
47:54 - cool mode anyways it's just like a nice
47:56 - animation that's always it's not that
47:58 - important but before everything you want
48:01 - to make sure you pass in like into the
48:03 - chain selector like all the chains
48:05 - that's pretty much how it's supposed to
48:07 - be look like that's pretty much how it's
48:09 - supposed to look like and now in between
48:11 - all this you just paste that component
48:13 - thingy right back and now we should
48:17 - technically have access to all the
48:19 - connection now there's one more thing
48:22 - that we will need to do
48:24 - and that's going to be in our index.js
48:27 - file now in here you want to go ahead
48:31 - and import connect
48:34 - button from
48:37 - look at Rainbow meet
48:39 - alright so we got that copy that guy and
48:42 - then right under here online 30 line
48:46 - 2030. you want to put in connect button
48:49 - and that should enable yup there you go
48:53 - there is your connect button so that's
48:57 - pretty much that's pretty much a
48:59 - connection I'll show you guys what cool
49:01 - mode is if it enabled itself or if it
49:04 - didn't we'll see hit that that was cool
49:08 - that little animation that was cool man
49:10 - I'll show you once again because it's
49:12 - see and now it won't do it because I
49:15 - canceled it once but there you go that's
49:16 - cool mode hit retry and hit connect
49:22 - and there you go that is your metamask
49:25 - connection you just built it it is done
49:28 - it is so done it couldn't be any more
49:30 - done it is the most done metamask
49:32 - Connection in the done metamask
49:34 - connections history whatever leave it
49:38 - so with that said we're pretty much good
49:40 - to go to get started connecting the
49:42 - actual contract to the front end with
49:44 - that said I'll see you right there
49:46 - okay so it is time to go ahead and start
49:49 - connecting our stuff so we're gonna be
49:52 - doing mainly all kinds of Connections in
49:55 - the context so let's go ahead create a
49:57 - contact
49:58 - folder and then inside there you want to
50:01 - create a context.js file and uh let's go
50:06 - ahead and start importing stuff so we're
50:08 - in one definitely import create context
50:10 - we want to import new state use effect
50:15 - and use call
50:18 - contactor like that from react all of it
50:22 - and then while you're at it go ahead and
50:24 - import use account from wagme which is
50:29 - just super nice and easy way to get all
50:32 - the Account Details so yeah there's that
50:35 - and then you want to import web3 with a
50:38 - capital W from web3 with a not capital I
50:42 - believe and then you also want to go
50:44 - ahead and import create
50:46 - direct from euros and constants which is
50:49 - by the way con yeah this exact uh
50:55 - function that we created earlier
50:58 - so we already built that all right
51:02 - so you want to type it you want to go
51:04 - ahead and actually start creating the
51:06 - contract over here no context so you
51:10 - might say I have context and go ahead
51:13 - hit say create context and then next up
51:16 - export const and it's going to be app
51:19 - pro provider and that will have this
51:23 - children thing in between children
51:25 - that's pretty good and then create the
51:29 - function itself
51:30 - now What's Happening Here I think okay
51:33 - there you go and then that will
51:35 - basically return stuff so let's go ahead
51:37 - and return actually before we return
51:39 - anything let's do the test file or the
51:43 - test variable equals test whatever and
51:46 - now we're gonna return stuff return and
51:50 - we want to say app context dot not
51:53 - contest
51:55 - dot
51:57 - provider yeah and then value I was like
52:01 - garyvee would say I'm going to say test
52:03 - and close that bad boy
52:06 - and then just pop in chilled right there
52:09 - so that technically should be pretty
52:13 - much good to go in terms of a context
52:16 - thing now what you want to do is just
52:18 - make it a like you wanna we're gonna set
52:20 - up one more thing that's gonna make it
52:22 - just as much more easier so you want to
52:24 - say export cons to use uh context just
52:29 - like it suggests right there and uh you
52:32 - just want to return use context and then
52:35 - passing app context basically what that
52:37 - will allow you to do is you will have to
52:39 - import I believe less and it would just
52:42 - make made a hook out of it that's
52:44 - literally what happened okay let's go
52:46 - back to our app.js file and and in our
52:50 - app.js file what we will do next up is
52:54 - go ahead and import the app provider so
52:56 - I'm just going to go up here and make it
52:58 - like separate so there you go app
53:00 - provider
53:01 - and this bad boy I just put it like
53:04 - right here like right around the
53:07 - component
53:08 - actually we should be putting it outside
53:10 - of rainbow kit reason is Rainbow kitten
53:12 - might use stuff that is available in the
53:15 - provider so you want to allow that
53:17 - connection
53:18 - to happen and that's basically what did
53:23 - I do app contest for real
53:26 - okay
53:27 - that should have fixed it nice and just
53:31 - to test out this context thingy
53:35 - you want to open up your console and
53:39 - then inside of index.js you will you can
53:42 - go ahead and import use app contacts
53:46 - from
53:47 - context like that
53:49 - and then down here just go ahead and
53:52 - destructure test from the use up context
53:56 - thingy and then you'll just want to go
53:58 - ahead and console.log
54:02 - and if it says test in here our console
54:06 - as it does and my friends you little
54:09 - just created a perfect context and you
54:12 - graduated to move to the next step of
54:13 - this tutorial so congratulations on that
54:16 - if not just double check that everything
54:18 - that we set up here in the context and
54:22 - in the out.js file is correct and then
54:26 - let's move on I'll before we actually
54:28 - move on I'll just remove all this test
54:30 - related stuff because we don't need any
54:32 - of that you can close the app.js file
54:35 - remove that guy
54:37 - and then for a little bit we're going to
54:38 - be working inside our app provider we're
54:40 - inside our context we'll build a couple
54:42 - of functions and it will be done in a
54:45 - matter of no time I'll see you soon
54:47 - time to sell some products and what
54:50 - we're going to be using for that is our
54:52 - context so let's go ahead and get
54:55 - started setting a few things up here
54:58 - so what's your what we're going to do is
54:59 - we're going to create a couple of view
55:01 - States so there's going to be a contract
55:03 - side con track yeah like that and then
55:07 - you stay snow and then we're gonna say
55:09 - we're going to have a user user address
55:14 - set user address just like that might as
55:18 - well
55:18 - save it from typos and then one more is
55:22 - going to be prop doc handset products
55:25 - these are all going to be used later on
55:27 - in the app first of all this is going to
55:29 - be used this is where we're going to be
55:30 - storing our contract instance that we
55:32 - are generating with this guy next up
55:35 - we're going to have a user address which
55:37 - is we are going to be like saving like
55:39 - straight away so let's actually do that
55:43 - like right now so cons address and
55:47 - equals news account let's destructure
55:49 - that bad boy and while we are at it
55:52 - let's go ahead and set up a use effect
55:54 - that'll actually speed so whenever
55:57 - address changes what we're going to do
55:59 - is say set user address to address and
56:03 - uh we just addressed this situation
56:08 - all right now what we're gonna do is
56:11 - before we move any further we should
56:13 - Techni we should just go ahead and set
56:15 - up the contract situation as well so set
56:18 - contract open this guy and then create
56:21 - we don't have to pass in data just
56:23 - because that's not bad it is that's a
56:24 - different address we have access to that
56:27 - address so once that once this guy
56:29 - returns
56:31 - its thing it will be set into this
56:34 - contract thingy so basically every time
56:37 - you open up the app you will have access
56:40 - to all the contract connections
56:41 - immediately
56:43 - so
56:45 - that's good that's pretty good we are
56:48 - good there now you want to go ahead and
56:50 - create a function which we'll call sell
56:53 - item now
56:55 - actually let's just go ahead and let's
56:57 - figure out what we are going to be what
56:59 - are we gonna need for this so they're
57:01 - creative so we will be calling this this
57:05 - new product thing function and we will
57:08 - have to pass the name description
57:10 - category email price email image URL and
57:14 - rating always we'll have to pass them in
57:17 - so we'll have to account for all that
57:20 - I'm just going to leave this on the side
57:21 - just like a little peek like reminds us
57:25 - for that okay let's do this with an
57:29 - acing function because this is going to
57:30 - be an asynchronous situation
57:32 - and from the front we're going to pass
57:34 - the name we're going to pass in
57:36 - description we're going to fasten
57:39 - category I'm going to pass an image URL
57:43 - we're gonna pass in price
57:47 - handwriting it's basically everything
57:49 - close that bad boy
57:51 - little arrow thing and open the paren
57:55 - now thank you prettier for making my
57:57 - code look nice
57:59 - now you want to make sure that before
58:00 - any kind of interaction happens with the
58:03 - contract there is like the contract
58:05 - actually exists so return it's like card
58:08 - clause and then if that checks out you
58:13 - want to have a try catch functionality
58:15 - which will catch any kind of error that
58:18 - happens and then just console logs it
58:19 - out console error actually let's just
58:22 - put that there and then we can forget
58:24 - about that so error handling nice next
58:27 - up try
58:28 - so what we're going to be doing is
58:30 - immediately because the youth remember
58:31 - what we did with the the contract we
58:34 - expected that it was going to be in
58:36 - ethereum or in ether but that's not
58:38 - reality contract works with way and
58:42 - nobody is going to type up that many
58:44 - serials so
58:46 - we're going to say price in way and
58:49 - we're just gonna convert it and we're
58:51 - going to be like okay and luckily
58:53 - web3.js has what is built in so we can
58:56 - call that
58:58 - web3.utls.too-way thing function let me
59:01 - just pass it in price and then happen
59:03 - pass in the the currency that we want it
59:07 - back in so in this case it's ether sorry
59:09 - the other way around we pass in the
59:11 - prize in ether and because it's ether
59:13 - we'd tell them like what's the initial
59:16 - values
59:17 - currency and because it's ether it's
59:20 - gonna be stored in Whey right here and
59:23 - then I'm gonna go ahead and wait
59:25 - contract methods and this is where we
59:28 - actually go ahead and call the list new
59:31 - product function and so that requires
59:36 - once again name requires description
59:39 - what was that
59:41 - description
59:42 - requires category probably everything
59:45 - that that we have here
59:47 - prescription
59:49 - like
59:50 - I could type it out once but I couldn't
59:52 - type it out for the second though that's
59:53 - fine
59:55 - encryption category image URL price
59:58 - rating let's just double check it here
60:01 - as well I think we should be pretty much
60:03 - good to go here now
60:06 - oh my God copilot is so nice it like
60:09 - added this part as well so I'm just
60:11 - gonna explain it now so far this is how
60:14 - far we went and so because we are
60:17 - creating and adding data onto the
60:20 - blockchain like we want to store
60:21 - something on the blockchain you gotta
60:24 - pay for it
60:25 - all right nothing is freeing the web 3
60:26 - words so before we can actually wrap
60:29 - this function up and as copilot was
60:31 - already suggesting we have to send in
60:33 - some ether and that's going to be coming
60:37 - from the user address which we already
60:40 - have saved which we already have saved
60:43 - it in in here and then there's a couple
60:46 - more things like you want to set the gas
60:48 - fees to the this number which is three
60:53 - and then this is basically three million
60:55 - all right and then I'm gonna set guess
60:58 - price to null these are like
61:01 - optimization stuff so it like the
61:04 - transaction is going to be more
61:05 - optimized nice
61:07 - that's basically what we are cooking
61:10 - with right now and that should
61:13 - technically lists every new item that we
61:15 - throw at it let's go ahead and connect
61:17 - this to our
61:20 - create button right here
61:22 - so far actually not even the create
61:24 - button I was wrong this list item thing
61:26 - so if you check this should technically
61:28 - already work because that's how our
61:30 - project comes so you want to go ahead
61:32 - and go into the model file
61:35 - model I'm going to go ahead and go into
61:37 - the modal file so once you entered your
61:41 - modal file I'm going to go ahead and
61:42 - import the use of context thingy and
61:46 - then
61:47 - destructure cell item out of it now
61:51 - if you actually have one brain cell like
61:53 - I don't if we don't export this from our
61:58 - contacts we're not going to be able to
61:59 - import it anywhere else so
62:02 - all right we're we are we are all here
62:04 - to to learn and improve myself include
62:07 - it so you've got the sell item function
62:09 - oh that's pretty cool here's our handle
62:12 - submit function which is already
62:14 - connected to
62:17 - the button nice
62:20 - and so what you want to do is before
62:22 - oops before we move any anywhere any
62:25 - further I'm gonna go ahead and say event
62:28 - dot prevent default and what that will
62:32 - do is like it will prevent the website
62:36 - from refreshing whenever you hit that
62:38 - button sometimes you like need it it's
62:40 - like a reacting so we're going to be
62:42 - using that and so next up if there is no
62:45 - name if any of these fields that are
62:48 - required basically for this transaction
62:50 - to go through meaning name it the
62:53 - description category price and or rating
62:55 - any of them those are the pipes though
62:58 - all of them say not name or not the
63:01 - script like that's how you like read it
63:02 - out if any of them don't exist or return
63:05 - a falsy value which is an empty string
63:08 - is a falsy value then we're gonna
63:10 - display a toast error message which we
63:13 - already set up for you and we're just
63:15 - gonna return and we don't even want to
63:18 - like continue the process so see how
63:22 - cool is that that's pretty cool if you
63:24 - ask me so that's there's that now if
63:28 - however
63:29 - we're good on that end
63:31 - and that doesn't happen else
63:35 - or you can just say else we can't say
63:37 - toast dot promise and the reason why
63:41 - we're doing toes.promise are not like a
63:43 - regular JavaScript promise is because
63:45 - the toast thing is going to keep loading
63:48 - as long as our promise is not successful
63:52 - so we're gonna have the toast handle our
63:56 - async function and then our async
63:58 - function as long as it check lasts as
63:59 - soon as it checks out
64:01 - our toast is going to turn a little nice
64:03 - check mark so let's do that
64:06 - so toast I promise and we're gonna say
64:09 - sell item and pass in all the stuff that
64:12 - we need to uh need to pass in so name
64:15 - description category image URL
64:18 - and then next up we're gonna pass in a
64:21 - little bit of a function and that'll
64:23 - basically just change the toast message
64:25 - all the time so as long as it's loading
64:27 - we're gonna be like listing in progress
64:31 - please wait and maybe an hourglass Emoji
64:36 - or something that like makes it nice
64:39 - and then next up we can just Define the
64:42 - success and then can be like okay item
64:45 - listed successfully and if there's some
64:47 - sort of error and airlifting item please
64:49 - try again whatever and with some nice
64:52 - little emoji
64:53 - play we should be good to go so let's go
64:55 - ahead and try that it should into your
64:58 - work if it doesn't and probably made a
65:01 - mistake somewhere along the way alright
65:03 - so with that being said let's go ahead
65:04 - and search for a rug and let's just grab
65:07 - an image whatever this looks pretty good
65:10 - this is a puffy rug shout out puffy
65:13 - mattresses for providing us with the
65:15 - image
65:16 - this is free marketing for them nice so
65:19 - we're just gonna call it a puffy rug and
65:23 - once again shout out for a puffy
65:26 - mattress
65:27 - puffy mattress all right let's go ahead
65:32 - and upload this image right there
65:34 - shout out internet speed
65:36 - nice you can crop it down whatever don't
65:39 - even worry about that okay so it
65:41 - immediately says set image URL is not
65:44 - defined that's interesting okay so that
65:47 - means that for whatever this you state
65:49 - is like set up interesting okay meaning
65:55 - that some stuff was like
65:59 - hello now there it is what do you mean
66:01 - it's not there and you want to
66:03 - definitely put that guy in there so if
66:06 - the IMG URL doesn't exist that should
66:09 - make it fail too however we are passing
66:11 - it in here yeah this is the like one of
66:13 - the biggest drawbacks of using stuff
66:16 - like copilot because you'll just look
66:19 - over a couple of mistakes that you're
66:20 - making along the way
66:22 - I mean I'm glad we like have this here
66:24 - that's helpful all right all right let's
66:26 - start again puffy rug
66:29 - and Shout Out puffy mattress oh yeah
66:34 - Double T that's who failed her English
66:36 - classes no me though
66:39 - put that guy there shout out internet
66:41 - speed
66:42 - and hit done okay there's no issue there
66:45 - and then let's go type in perfect
66:49 - four rug pulls
66:52 - ha pun intended category rug whatever
66:56 - price this is how when you like
66:58 - literally want to start becoming more
67:00 - and more careful with what you put in as
67:03 - a price and also want to like switch to
67:06 - the localhost networks like ganache nice
67:09 - because otherwise it will try to put
67:12 - them to girly but we're not but this
67:14 - address is not ungurly so it wouldn't
67:16 - fail again
67:17 - so once again prize okay actually here
67:19 - you can look at like bigger numbers I'm
67:21 - just gonna go with 0.1 and then rating
67:23 - obviously it's a 5 out of five Co ahead
67:26 - hit confirm on that guy and item
67:29 - successful listed now the only problem
67:31 - is we don't see yet so let's go ahead
67:36 - and do that
67:37 - go ahead and make that happen
67:39 - all right so we got the selling done
67:42 - this is now time we go ahead and display
67:44 - all the items that are like listed for
67:48 - sale
67:48 - so let's go back right here as we can
67:51 - see the product state is like still like
67:53 - empty and if we go back to index
67:56 - we also have this dummy products array
68:00 - so like the app doesn't break so what
68:02 - I'm going to be doing now is I'm going
68:04 - to
68:05 - destructure products from use up context
68:10 - and that way I technically changed that
68:12 - dummy empty array to the array that we
68:15 - are going to be fetching from and let's
68:17 - get rid of all those runs and stuff
68:19 - lining up okay that's fine there so now
68:21 - it says products man
68:24 - it says undefine it okay that's because
68:27 - wait oh of course duh once again if you
68:31 - don't export you can't import it's like
68:33 - a pretty good all right there you go now
68:34 - here is a way it's got a little bit has
68:36 - gone away all right and so to get
68:39 - started fetching we are going to be
68:41 - creating a new function that is going to
68:44 - go ahead and get all the items for us
68:48 - so how's it going to look like
68:52 - all right let's see let's let's do it
68:53 - like right under here so it's gonna be
68:55 - get all items and it's gonna be an async
68:59 - function nothing to input and uh yeah so
69:04 - before we do anything yeah if there's no
69:06 - contract that thus far it's correct
69:10 - there's no contract then we should just
69:12 - like return and then like you can add
69:14 - like custom toast messages whatever like
69:18 - error getting items whatever I'm not
69:21 - gonna do it because
69:22 - take up time and I already showed you
69:24 - how to and then next up what you
69:26 - wouldn't do is like before all that like
69:29 - little before anything
69:30 - set products
69:32 - to empty the reason for that is if there
69:37 - is no contract then you want it to one
69:40 - the products to be like a safe empty
69:43 - array that like will not break the map
69:47 - and if the contract changes you want to
69:50 - wipe out all the old stuff from the old
69:53 - contract and then the new stuff can come
69:55 - in and whenever you refresh it we're
69:58 - going to be using the dot push method
70:01 - yeah I believe that's an array method so
70:03 - we're going to be using the dot push
70:04 - method and we don't want to mess our
70:08 - things up and no one are the one the
70:10 - same product to show up twice sorry
70:11 - three times or whatever
70:13 - okay so with all that out of the way
70:16 - we're gonna have a nice little
70:19 - try catch function next up what we're
70:22 - going to be doing is say cons product
70:24 - count equals oh way oh so basically what
70:29 - we're going to be doing
70:31 - just walk you through at a high level
70:33 - let's go to the so far is we're going to
70:36 - go ahead and fetch this
70:38 - that way we are going to know how many
70:39 - products are there and then what we're
70:42 - going to do then is we're going to have
70:43 - a loop that goes through this mapping
70:45 - and fetches each item one by one so what
70:48 - we're going to do is say contract meth
70:50 - thirds Dot and what was the
70:54 - function name again it was get number of
70:57 - products so that's what we're gonna call
71:00 - I don't need all that random file so
71:03 - let's just paste that there function
71:04 - thing you call and call it and you sh we
71:08 - should be good so we have a number there
71:12 - the awaiting is going to
71:15 - hold back the line until that result
71:17 - itself so we should be good there now
71:19 - what we're going to be doing is we're
71:21 - going to say start with a brand like
71:24 - plain and simple for support loop we're
71:27 - just going to say index equals zero
71:30 - colon no semicolon until index is
71:34 - smaller than
71:35 - product count some icon and index Plus
71:40 - and then open close whatever curly
71:43 - braces are there and then it's a columns
71:46 - the product equals oh wait contract
71:50 - dot methods Dot and
71:54 - which one are we going for I don't know
71:56 - which one are we going for not methods
71:59 - and let's see which one are we getting
72:01 - because we're going to be using the
72:03 - built-in function of this methods thing
72:04 - as if you remember the when we did the
72:08 - ethereum remix stuff let me just show
72:09 - you yeah I connect that guy
72:12 - so if you remember
72:14 - we had this guy this is what we're going
72:17 - to be using all right based on that
72:20 - we're going to say products and then
72:22 - pass in a bunch of things so what we're
72:25 - going to be doing is say products and
72:27 - then pass in index and non-pass and then
72:30 - just call it that should be our product
72:34 - and so now we're going to format this
72:37 - because if you remember we get back like
72:39 - we get back all the data like twice so
72:41 - there's no need for that so we're going
72:43 - to format it a little bit so just it
72:45 - just looks a little nicer
72:47 - actually let me just go ahead and
72:49 - console log the product just so you
72:51 - remember what I was talking about
72:54 - oh if nobody calls this function it's
72:57 - not going to run
72:59 - plastic should set up a other use effect
73:03 - like that paste that bad boy there call
73:06 - it and whenever contract
73:09 - changes we're going to call that now if
73:13 - contract doesn't exist this whole thing
73:15 - is going to kick it off and we won't
73:17 - have any kind of Errors so let's see
73:18 - what have we got let's refresh this guy
73:20 - and there you go there is our item so
73:23 - this is what we are going to make a ton
73:26 - nicer like it it just looks nasty how
73:28 - there's like zero one two three four
73:29 - whatever nah this is not good so we just
73:33 - want to strip out this piece of the
73:36 - object
73:38 - and then just like make a nice looking
73:40 - array out of that so let's do that now
73:43 - and that's why we are creating this
73:44 - formatted product thingy so we're going
73:46 - to create a new object which will have
73:49 - an ID which is going to be a product ID
73:51 - we're gonna have a buyer
73:54 - it's a buyer which is going to be a
73:56 - product a buyer
73:58 - buyer like that
74:00 - and then seller product seller name
74:04 - description we're gonna have category
74:08 - image URL and price now remember
74:14 - in the solidity contract we are only
74:17 - working with way numbers so there's a
74:19 - final there are like multiple ways you
74:21 - can convert between whey and if ether I
74:24 - just prefer doing it on the front end
74:25 - just because like the audience and
74:29 - ethereum and solidity is like soup like
74:31 - in the early days the baby steps is the
74:35 - dawn of web3 so let's just stay where we
74:38 - are like more comfortable with stuff and
74:40 - so we're going to convert everything on
74:42 - the front and plus web 3.js is like
74:45 - making it like way too easy like it
74:47 - should be like almost illegal at this
74:49 - point
74:49 - anyways we're getting back the price in
74:53 - way and we want to convert it into
74:54 - ethers or ether so that's what we're
74:57 - doing here and so that's pretty good and
75:00 - then we have one more thing which is the
75:02 - grading now let me actually console log
75:06 - the actually because I'm lazy I don't
75:10 - want to type all that
75:12 - formatted formatted product nice let's
75:15 - see the difference between the two so
75:18 - here's the ugly bun we don't like that
75:20 - and then number two ah so much nicer
75:24 - there you go so you're welcome that's
75:27 - why you're using random stuff random
75:29 - like formatted formatting things in the
75:31 - middle of our context and then um
75:35 - yeah once that's good to go what you
75:37 - want to do is say set products
75:40 - and my assistant Mr co-pilot is helping
75:45 - me with this basically what you want to
75:46 - do is get these set products function
75:49 - from this use state that keeps track of
75:52 - the previous actually it shouldn't be
75:54 - previous product I don't like when it
75:56 - like calls it like that so we should
75:59 - just call it previous state all right it
76:02 - should be previous state there you go
76:05 - that in theory show us all the
76:09 - stuff we got now one interesting thing
76:11 - though
76:12 - why does it say item five I haven't even
76:14 - bought it what do you mean I bought it
76:17 - that's probably just hooked up to a
76:19 - template function so don't even worry
76:21 - about it okay so you might be wondering
76:24 - David what is going on here in the first
76:27 - place why am I not seeing all my images
76:29 - like I literally uploaded them and if
76:32 - you still have the console lock turned
76:34 - on yeah this is undefined but
76:37 - actually I just spend a little bit of a
76:39 - time and traced it back and we are doing
76:41 - everything correctly except for one
76:43 - thing now
76:45 - if you look at it like how are we even
76:47 - save saving this stuff or how is it even
76:50 - being saved it is IMG URL and we are
76:53 - trying to destructure image URL once
76:55 - again we looked it over or like I
76:58 - personally looked it over because I'm
77:00 - using copilot so again
77:03 - there's a lot of negatives to it it's
77:05 - not going to put uh put us out of our
77:06 - job I'm pretty sure after these two I'm
77:09 - pretty I'm feeling pretty safe let's
77:12 - refresh let's see what do we got
77:13 - now we have the image URL now the only
77:17 - question is why do we not see it it's
77:20 - probably because
77:21 - we should be saving it like that
77:23 - all right there you go
77:25 - so with that little two literal two
77:28 - changes that we just did from image to
77:30 - IMG which is a story for image once you
77:34 - change that it apparently starts working
77:35 - so that's how we set up the template I
77:39 - completely forgot about it and we also
77:41 - are using copilot to help me out with
77:43 - typing so there's that now with that all
77:46 - set and done it is time we go ahead and
77:50 - purchase these items and we're
77:52 - technically done with the build
77:55 - see there
77:56 - all right we actually got through the
77:59 - very final part of this build which is
78:02 - purchasing
78:03 - these items so before we actually get
78:06 - into that I just want to clear out all
78:08 - the console logs if you've watched any
78:10 - of my other videos you know that um I
78:13 - don't like them like it's good as long
78:15 - as we're building stuff but then it like
78:17 - gets annoying and clogs up my consoles I
78:20 - like to keep that clean I'm a king dude
78:23 - we are going to be creating a new
78:25 - function down below here which we're
78:28 - gonna call by
78:30 - product which is the byproduct of me
78:33 - being funny hey anyways we're gonna pass
78:37 - in this ID which is going to be the
78:39 - product ID that's going to be coming
78:41 - from the front end so let's uh let's do
78:45 - that oh why is it oh there's the error
78:47 - okay so with that said now we also want
78:51 - to have we want to get the usual card
78:53 - Clause so if there is no contract then
78:55 - we just want to return
78:56 - with all the toasting stuff so again a
79:01 - usual try catch and then let's catch the
79:03 - error and then console.air.air
79:06 - I hope that made sense that was like a
79:08 - pretty good scent pretty good sentence
79:10 - if we have the contract we are going to
79:13 - go ahead and try to get the prize so
79:17 - what we're going to be doing is here get
79:19 - what the prize is we need to know how
79:21 - much the product costs all right and we
79:24 - don't really trust Lee friend to tell us
79:27 - what it costs because that could be
79:29 - manipulated pretty easily so instead
79:32 - what we're going to do is we're just
79:33 - going to go ahead and fetch the fetch
79:36 - the contract again for it so we're going
79:37 - to say contract dot methods dot product
79:41 - yeah product ID and then we're just
79:44 - going to call it and then once we called
79:46 - it
79:47 - we will as technically isn't the price
79:50 - but we're just uh you know what let's
79:52 - just actually name it so product so that
79:55 - will be the product and then we will use
79:58 - that to get the price all right so what
80:03 - is going to happen now is we're going to
80:05 - say oh wait and then we're just like
80:07 - straight into calling the purchase
80:09 - Method and so let's see how we actually
80:12 - named it here so this is going it is
80:15 - called purchase item now purchase item
80:18 - and then we will have to just pass in
80:20 - the ID that's all we need to pass in
80:22 - however when we send it in this is where
80:25 - we need to specify the actual purchase
80:27 - price of the product that we are sending
80:30 - in so this is where we're going to be
80:31 - using this line of code now
80:34 - open close paren open this new object
80:36 - and we're gonna say from in the user
80:39 - address which we already have access to
80:41 - you know what while we're at it even
80:43 - though it's like unlikely that it will
80:45 - ever happen that this doesn't exist and
80:48 - the contract doesn't exist because
80:51 - somewhere I believe oh wait hold on
80:54 - whenever
80:57 - here actually never mind you know what
80:59 - let's just put it in the guard cause
81:00 - it's not gonna hurt there it's fine so
81:03 - we're gonna be like okay contact address
81:04 - or user address so whoever is used
81:07 - Oliver is locked in that's the person
81:09 - that will have to pay for the product
81:12 - we're gonna give it a like the general
81:14 - three million gas which is like three
81:17 - million way I believe and then we're
81:19 - gonna say gas price null and then we're
81:21 - gonna say value because in this case we
81:24 - have to press specify the value and out
81:27 - here we actually got the price of that
81:32 - product like we we got the product so
81:34 - and we just want to get the price of
81:36 - that specific product and that will be
81:38 - the value so it's like way harder for
81:41 - any kind of like malicious intense like
81:45 - any kind of person with malicious intent
81:46 - to like tamper with this with this
81:49 - specific transaction and that should be
81:52 - pretty much it now Luna it's sport it
81:54 - because I've messed it up and forgot to
81:57 - export it twice and we're gonna be doing
81:59 - is I believe so it's in product JS where
82:03 - we'll be calling it so what we're gonna
82:06 - do here is we're going to go ahead and
82:09 - import use a
82:12 - context and then uh yeah I have all this
82:16 - uh template function there but we don't
82:20 - need this anymore instead we are just
82:22 - going to destructure this and right here
82:25 - the toast is ready to handle everything
82:27 - and it should be good to go let's see
82:30 - what we got so on click whenever we
82:32 - click one of these products and I don't
82:33 - know why it does that I think it's like
82:35 - I save it it like doubles It Anyways
82:37 - when you refresh it it only shows up
82:39 - once so that's pretty good
82:42 - and then it says item bod so that's
82:45 - interesting
82:45 - because reading length Okay that's weird
82:51 - why do we what are we dealing with all
82:54 - right oh hold on and once you actually
82:58 - do that my playlist should be working so
83:01 - let's go ahead and test this out
83:04 - so if I refresh I'm gonna say all right
83:07 - my Mana mask is popping up
83:09 - it's a zero dollars like that that
83:13 - detail looks a little fishy to me okay
83:17 - so there is this error and it says the
83:20 - value doesn't seem to be checking out I
83:24 - believe
83:25 - invalid amount sent for a product Oh
83:27 - interesting and so the reason why the
83:31 - price like wasn't really working is if
83:33 - you think about it like this is these
83:35 - are all async functions if we are
83:37 - waiting here for we literally have
83:39 - waited everywhere I think I just forgot
83:41 - to put the weight there let's see if
83:44 - that helped and let's see if that worked
83:48 - like there's like a lot of transaction
83:50 - clogged up here all right let's go ahead
83:52 - and refresh click that and there you go
83:56 - there you go now you can see that the
83:58 - Price Is Right There 0.1 each and then
84:01 - I'm gonna confirm it however it
84:04 - literally just says the seller cannot
84:06 - buy their own product so what I'm gonna
84:07 - do is I'm going to refresh here and then
84:11 - swap over to my other account
84:14 - like that come on and that has 69. nice
84:20 - uh Ethan there and let's hit the second
84:22 - one confirm there's the price and item
84:26 - bot now this one is successful so that
84:30 - pretty much revs up this entire build
84:31 - you were able to Now list and sell items
84:35 - using the blockchain using the ethereum
84:38 - blockchain and then once again if you
84:40 - want to send this to your friends deploy
84:43 - it to you anywhere you can just comment
84:45 - that line out and comment this line like
84:48 - back out so that's going to be the valid
84:50 - line and now this application is living
84:53 - on the girly Network
84:55 - so with that being said thank you so
84:57 - much for watching and I'll see you in
84:59 - the next one

Cleaned transcript:

in this video you're going to be building eBay web 3.0 adapt using infuria on the ethereum blockchain we're going to use rainbow kit to connect our metamask to the entire application and we're going to be using web3.js to interact with our custom solidity contract deployed using infuria and you're going to be able to list and sell your items and others will be able to come over and buy those items from you using ethereum with this app so with that said let's just jump straight into it all right let's get straight into the eBay clone and let's build this thing so what I got in front of me is basically a terminal ready to execute some stuff all right so I'm going to type in MPX leather programmer which is our custom built CLI tool just for you now I'm going to type in my email address here and let's see what else do we got after I'll put in my name and then just hit eBay now what's going to happen is you don't see it because it's on my other screen but it basically opened up an inference and you want to definitely use this specific Imperial link that this opened up because this will give you a bunch of perks now I personally already have an account within fewer so I'm just going to sign in but if you don't have an account yet you want to definitely create a new one with right here because it's going to give you a couple of perks and as you can see I created this eBay clone project now the way I did it is up here there's this create new key thingy which I just zoomed into for no apparent reason actually it's purple so you want to select web3 API formerly ethereum and then just give it whatever name my eBay project and it's gonna be like yo you have too many projects so I'm just going to hit cancel but this is literally what I'm gonna get now in here once you open it you want to hit manage key right there or it will show you this screen immediately and you want to go ahead and copy this API key this will be one of the most important things throughout this build so if you don't do anything just go ahead and copy this key and you're you should be good no I'm just kidding anyways regardless of copy that guy yup see copied it and very conveniently our CLI tool has just finished downloading this project so that's cool what you can do now is definitely you want to check for node modules in here in the roof folder and then down in the what is it next app folder so if you have those two node module folders you probably very likely ready to go now what you want to do is inside of next app create a new file and call it dot env.local that is period EnV period local now what you want to do is type in infuria and let me actually make this a little bigger that's what she said yeah should begin so what you want to type in is inferior underscore API underscore key not key or whatever and then just paste whatever key you've got there now you will also definitely keep this as a secret because the secret and um this is not going to work by the time you're watching this you can try though and if anybody gets access to your API key so this is your Warning by the way so if anybody gets access to your API key they will be able to use your inferior account which in turn might charge you if you are subscribed to paid services or just run all your free stuff out so there's that now once we've done this so once you open up the terminal and you should probably see it a keystrokes that I'm recording so what you can do here is go ahead and type in a CD next Dash app and that will basically just navigate you in here so your terminal is going to be inside that folder and now here you want to type in yarn def meaning your Dove and that should have technically opened or started this tunnel for you and what I'm going to do is just make things a little more convenient and if you pop it into a chrome congratulations you have the front and ready to go and this is what we're going to be using to build on top of after our coffee break okay this is the time to take another coffee break and go ahead and get started working on our contract so with that said go ahead and go into your contracts folder and inside there's this ebay.sol file now you want to come in here and this is basically premade contract that is ready for you all right so what can we do here so basically let's just go ahead and hide this terminal because we are not going to need it for a little bit and what we're going to be doing is let's just actually go ahead and start creating our objects trucks whatever mappings and stuff like that that's interesting I have the solution on my other screen and it doesn't look any up like that but I can imagine a scenario when GitHub copilot just puts out all the Developers let's hold their remote players out of their job you okay all right so let's go ahead and type in so let's go ahead and create a struct that will be called Product now that will have a couple of props in there so what are they we will have a address which is going to be the buyer's address it's the person who buys the product that'll be the buyer and then there's going to be another address which is yeah it's gonna be the seller now we're gonna have a uint which is going to be the ID of the product itself and we're going to have a price correct we're going to have another uint which we will be reading these products okay I put a comma because it was because my error linter was messing it was happy about the semicolon but okay all right let's do it that way though so then we're going to have a couple of strings here we're gonna have a name we're going to have a description we're going to have a category category like that and we're going to have an image URL nice it's nicely formatted now and next up what we're going to be doing is also versus like out in the wild out of out in the nothingness the Wilderness we're going to have a other U.N which will be product counter yeah yeah you and 256 you win it's basically the same thing I'm just a lazy person so I sometimes write you and but yeah anyways moving on you want to definitely map all the products and you want to map these product counter thingies so once again he went to a product and we'll be calling it this will be a public thing this mapping will be called products all right next up let's go actually just straight up jump into it and let's go ahead and create a new product list that guy all right so it's going to be list new product right and we will have to pass in a couple of things here so first of all we're going to need a name and this is the time when we're going to start introducing all these like underscores and stuff like that and memory next up we're going to have a description that we pass in then we're going to have a category that we pass in and an image URL that's smart that's actually pretty intelligent I don't know where my formatting went but there it is you also want to definitely pass in the price of the item price like that and you also want to pass in the rating of the item and don't leave any trailing commas what's up with my prettier dude all right there we go there we go okay so apparently okay so my preyear apparently doesn't work as long as the function itself is like has syntax errors which is actually smart all right now you also want to make this a public function because you want to definitely make sure that whoever is interacting with the app is going to be able to call this function so now with that we're pretty good now next up we're going to do is yeah we'll do that eventually at some yeah so next up what you want to do is we'll be creating a new instance of the products truck that we just did up here all right so this is just a definition of the product struck and like just defines what are each and every single one of what kind of traits will each and every single product have and so what we're going to do is we're going to say product memory because from the memory we're doing things and it will be a new product and this is a declaration and this will be a type product and so in here we're going to pass in an object now we will be having a buyer who's going to be address zero all right so let's take a look at that what this actually is because this is some sort of like basic fold address that is that's just a placeholder so let's take a look at what Google what father Google says especially if I was able to type it correctly meaning in solidity and so there you go the zero count is just a special use case indicate that the new contract is being deployed so basically what we're going to be using that in this case is just like this placeholder that's literally what it means what is going to default back to so this is like not a like nobody owns this one is what I'm trying to say it's like when you put an ad item out for sale there's no actual factual Pro it's like kind of like if it's at zero but because that's not an address like you got to do it this way all right there we go so like seller that's going to be the message sender meaning the person who pops open their meta mask and puts out a new item for listing and we're going to have a ID which is going to be the product counter and then we're going to have a price and from now on basically match all these to these guys but like down here so if that was weird just watch me and you'll understand a little bit what I meant to like rating it's going to be rating and then you're going to have name it's going to be name and then you're going to have description it's going to be description category you're like yada yada and now we just close that guy remove the access stuff and let's see what the issue is so this is product identifier not found oh what would be helpful if I would type without typos so product all right cool function stay commutable that are restricted to view that's completely fine as of right now because right now we're not like I don't get it why it says that but it will go away in a little bit don't even worry about These Warnings warnings are not even legit so next up what you want to do is you're going to say products the product counter is going to be new product so what did I just do this will be the mapping all right so product counter is going to be we're going to where we'll literally have a product counter that starts from zero and that will be the index so that will be the ID and we'll be indexing through all these products so what we do now is we're going to have a tuple or like an array of tuples or whatever a mapping all right I'm just running like defensive with all these parts basically so we're going to be creating a mapping that will be mapping that will map all these new products these guys to each product counter does that make sense it's like we're gonna have one first product two second product yada once we build out the entire thing it'll like all come together and you will understand what I'm talking about and then obviously you want to increase the product counter because initially it starts out at zero and then the next if you didn't do that then and you added like a second product that's supposed to depict that you repeat the same step drawing skills on point so if you stay at so if you leave product camera at zero and but you don't step it up the next product is going to be still stored at zero which is obviously not ideal so you want to like stop it I should be able to pretty much be enough for now let's actually do one more thing which is going to be a really quick one so I just want to like create a new function we call get number of fraud ducts which is just going to be like a nicer naming of something we could already do because like whenever you Define a variable under the hood there's going to be a color view function created for it like immediately anyways we're just gonna make it nice anyways and we're just going to create a call function so that will return a uint and where's the T there's the T and then we're just going to literally return this guy back and that'll be basically what we will get started with now in the in a previous video and probably we suggested a couple times but let's go ahead and go into our extensions and you want to download ethereum remix so this is the guy that we are going to be using this is basically remix IDE baked into your vs code if you know what remix ID is this made a lot of sense to you if you don't know what remix IDE is I just saved you a ton of headache and copy and codes so don't even worry about it just get it this is a remix IDE for you all right let's go ahead and click that bad boy so that will be remix IDs icon once you install it and before you do anything you just want to make sure that the compiler version which you can set out heat set right here it currently doesn't have any kind of value so what you want to make sure is that there's 0 8 16 so you want to go ahead and select that guy and now you see it says zero eight sixteen how cool is that all right let's make this small again okay and so now you want to click run and deploy and then just hit activate and that will basically spin up this thing now it also spins up your output but we're just gonna put that out of the way so what's happening here there's a couple of things that are going on so if you go back to infuria and hat back right into your project and then you hit manage key over there and then here you select you can go with mainnet but that's going to cost you a ton of money so I would just recommend going with girly and then copying this guy and then you can paste this RPC URL here now that'll help you when you're deploying and when you're like finished with the app now when it comes to deploying to Tesla it takes a little longer time so instead what we're going to be using is not this but what we're going to be using is if you go to 12 fullsweet.com ganache and then you go ahead and download this guy right here that will download an application to get in a ganache installed all right and then once you install it this will come up obviously you won't have no workspaces so what that means is you can just hit quick start or if you've been already using it you just click whatever workspace you got and you want to copy this RPC server all right so that's what we that's what you want to copy and then go back to your vs code and place it right here and then hit connect and so when you first connect your ganache to this whole thing this is what it will look like and so down here it's going to say network is local or custom just like it does it here it's like cool stuff all right you can also if you press command shift p and then you start typing in secondary you can open up the secondary sidebar thing you can just pop that output window right there and that will that way you can close it close the things down there and then just pull it out wide so you are going to be seeing everything now what you want to do is you want to have your ebay.so file open on the left hand side or like somewhere and then just make sure you selected that actually don't really have other options but just in case you do you want to select the correct one and then just hit compile let's see what it does let's see what it says let's see if our contract is good to go and ready to be deployed and compilation finished so that's cool and now what you can do is hit deploy and it is already deployed to your local blockchain ganache thingy so that's actually pretty good all right and so here are all the functions that you can do so as I said before so there we go now when you create now when you call this get number of products it's going to you say zero interesting so I'm just going to go ahead and clear this output so it's going to be nice and clean and so whenever you call this get number of products that we just defined somewhere in this contract it'll return zero meaning we don't have a single piece of product that's fine let's go ahead and create one so we're going to give it a name my first product one thing you don't ever press command a in here if you do the whole screen is going to turn into this grayish thing and you have to restart remix that's a bug I would guess probably that's what it is don't tell me I didn't warn you next up you want to put a put a description in so product description uh you know what I'm just gonna go with some gummy stuff so I'm just going to type in description category doesn't really matter for now because we're just testing it means you wear out now you would think that oh my God where is uh where am I going to get an image URL from don't worry about it it's just a simple string so you can just type in ing URL cool and then ask for a price now for now you're gonna get away with typing in one or something like that but later on you don't really want to do it because then it will cost an entire ethereum so just keep that in mind and for rating obviously it's a five out of five so that's pretty cool all right so once you hit transact which basically means like post it or like put it onto the blockchain what you will see is a bunch of like addresses guests used and if it like doesn't look super weird it like naturally feels good your developer instincts tell you that there's no error in here there's probably no error in here and another way to check that we're correct and probably this is the better way to do without having to listen to your instinct yes I'm just trying to find the optimal window stuff so I'm just going to delete it again or clear the output again and if you hit get number of products it should say one did I just write a perfect contract in here and if I was to put in zero that should hey there you go oh my God look at that so that's the mapping that's the mapping so remember when I said maybe I haven't said it but remember when I decided or didn't say it that mappings create their own cofunctions so that's why we only created a get number of products thing right so when you create a simple variable that doesn't create a call function under the hood but mappings do and so here what we did is we know that the first product that we put in there is because we're developers we start counting from zero zero one two three this is how we count now first product that we put in there has an ID of zero so this will be waiting for a zero it's about a counter again just put that guy in there call it and then you get back everything that isn't gonna that is that you've just saved into your product now here's everything Let's uh all right so with that said so with that it is time we go ahead and create a function that will allow our users to purchase these items that are listed so purchase I think that's how you write it item nice and that will actually be waiting for a you and ID so we'll have to pass in the ID now this is going to be a public payable and payable me just means that oh you gotta like there's going to be actual factual transactions going on in there so you gotta basically enable all these functions for the function I realized that sounded a little weird but that's what it is now right in here what we're going to be doing is we're going to require a couple things so what we mean what I mean by requiring a couple things is we need a couple of guard functions or guard Clauses is what I meant and that happens with the require keyword so let's go ahead and get started with that so what we're going to need is message.sender we're going to double we want to double check the price obviously that it's the correct prizes being sent so if the message sender no not the message value is less than no equals or more ah actually we should go with equals products.id so here's the tricky thing let's actually just generate the product instance in it so we're going into the product and then we're gonna say storage and then we're going to say product again because this is just going to be a local instance of the product itself all right and then we're just going to say products ID but it has to do there's a lot of products I'm gonna go again to the mapping that's products and then check for the ID that's being passed in and then I'm just storing that in here and this is literally just the type of that variable and storage is that oh we're going to be reading from the storage so that's uncomment this guy so we're we literally need that the message value is the same as product dot price yeah and if that doesn't happen we will just say invalid amounts and for product or something and that won't tell the user whether they sent too little or too much but there's a security feature so we're not gonna bother that now we also want to make sure that the person who's buying the product is not the person who is trying to sell it because that's like like a churning type of thing all right so next up what you want to make sure is that the item hasn't been purchased before how do we do that you ask so remember when we get started the buyer is going to be the zero guy so we also need that that the product the buyer equals that address zero because if it doesn't it means that somebody else has already purchased the item so make sense so it's product buyer has to be that zero guy because if it isn't that means somebody purchased this item so I damn has been bought or something like that I don't know I'm just gonna say that whatever that was yeah that's pretty much what we're gonna go with for now and so next up you also if you don't want to buy your own stuff so message dot sender cannot be equal to product dot seller and so yeah seller cannot buy own prod their own product and we could just eliminate all these typos all right these are basically the guard causes that we're gonna be rolling with for now this should be pretty much enough for us to go for it now at point you want to transfer over that item but before you do that if you want to make sure that the product is paid for so here's where the payable comes in product.seller is going to be the person that receives the amount of money and you want to transfer that amount which is the message that I value so basically what this does is this person will get this much in short all right so that being said we should technically be pretty good to go and move on to redeploy this contract onto our test server and then test it out once again so let's do that let's go into our ethereum let's go into our remix guy hit activate and let's see what do we got oh yeah nice the output thing came up so there's like all this like history and stuff I'm just gonna go ahead and delete that because we don't need any of that same for that same for the output cleaning let's just go ahead and hit compile and wait for it to pass oh compilation finished nice so that's pretty good and I'm just gonna go ahead and hit deploy so there it is okay there's a couple of things that are going on in here the remix IDE is now recognizing our new contract so get number of product zero that that makes sense so we're gonna say first product to sell or for sale description you're gonna have a category it don't really matter it really doesn't actually image URL and we're going to set I'm just going to say 10 because that's going to be like very visual in our ganache so what we're going to be expecting to do is that this account sells the item for 10 ethereum to this account so I'm expecting that this balance will go down to 89 ethereum and this will go up to 69 ethereum all right let's do that and the rating is five obviously you only sell the best stuff nice so there's that and so now what I'm going to be doing is just double check that we have the zeroth item there you go price ten noise so how do we purchase with this guy so first of all you want to change the account that's going to be interacting with the contract so we are in purchase mode now and what we want to do now is we're going to say purchase item zero you want to put the zero in there but don't hit don't hit it yet and here oh I think we put the price in way I believe so maybe not let's see that's probably in 10 way we'll see in a little bit so if I just put in tan there you go oh I just deployed it again okay I'm just going to go ahead and transact and it apparently went through now nothing really happened here wait wait we should technically have purchased this item I'm just going to clean my input and let's go ahead and check on the new product again so we see that the seller is still that person but the buyer is this guy and so even though we expected this to change this actually didn't because when you put in 10 here into this price thingy the contract is always talking in or like always expects these numbers or like whenever we are talking about values in way so what is way is like a super small amount basically so we're gonna say eth converter ethereum unit converter efesh converter.com so basically what you want to do is put in 10 here and if you wanna if you want something to cost 10 ether you will want to list it at this price it's just like dollars and pennies and cents and whatever so that's basically what it is so you want to copy that guy had back right here and so to be able to double check what is happening I'm just going to delete everything once again set go back to my original account and compile it again because that never hurts deploy this guy again because that doesn't hurt either and then go back into my eBay and then I'm just going to say product because I'm gonna make it fast description and I go right nice imgurl and then price I'll just paste that guy there and I hit five on rating transact nice it went through and clear this whole number of items we have one item in there zero call that guy and we can see that's the price so that's we can either copy that and paste it here in the value or we can just go ahead and type in 10 but then select ether and then you just want to hit zero there and change the account TD buyer account and now hit transact boom so that apparently went let's see what do we got on here so as you can as I explained it earlier and then put in the wrong price but now with the new price this went down by 10 ethereum and this went up by then ethereum so like rewind back if you don't believe me because I literally have video proof of this so that's basically how our thing works and by the way if I want to buy it again it is first of all I didn't specify the amount so I'm just gonna put in 10 ether again so it doesn't it cannot send that back but then it says item has been bought and then if I wanna uh check the other error and then I put in yeah 10 transact again yeah item has been so like there's a bunch of checks that are going through here and because the item has been actually we will not see the other the seller cannot buy their own item but like you can just create a new item try to buy it with the seller and then that will pop up so that is basically creating the contract them and testing it out that should technically have given you a pretty good understanding of how this whole thing works and what we're going to be interacting with throughout this build so with that said I'm just gonna go ahead now and let's deploy this guy all right now that brings us to our contract deployment so let's go ahead and at this point there's another extension that we got uh that we're gonna install so it's called truffle where am I even typing sorry that's truffle now this is the exact one you want to install so truffle for vs code this will open up this will add this guy right here and so this is your personal this is going to be your truffle now here what you will need to do is if you have any kind of other projects a link to it or maybe not what you can do is you can just say connect to network and then just hit inferior service and then if it's your first time using this extension it will pop open your your browser and that will let you connect to inferior but however if you don't have that or however if you've used it already it will just fetch all different projects that you've worked on before so in my case I just connected the wrong project again so let's just repeat that one more time so we're gonna go with inferior and then hit eBay clone so now that we have eBay there that will basically enable us to go ahead and deploy everything through inferior's RPC URL to the girly Network now what that will enable us to do is if I go back right here and then I right click the eBay clone and then I go ahead and hit build contract that will pop open my and it literally just said everything is up today yada yada finished okay that's pretty good it's because we already compiled it with uh wait what is it with the remix so I'm just gonna go ahead and remove the artifacts folder and now because it already recognize that oh we built it one more time there's another option that we can generate the API which we will need it's just by typing in trouble compile so there's that and with that it just created a new builds contracts folder and this is your API that we're going to be using later on in the build you know what while we're at it let's just go ahead copy this file and then go back to utils in under next app and then just paste it there it's going to be helpful let's just do that it doesn't take much time now what you want to do next up is go ahead and hit deploy contract okay so once you hit that will basically just give you a bunch of options on like where you can go ahead and deploy it so step one we're going to go ahead and deploy it on girly hey what did I just do boy oh curly there you go now we want to leave the gas price completely alone and empty that's fine and at this point you can go ahead and paste your mnemonic or generate a new mnemonic now if you generate a new mnemonic that will not have any kind of girly eat on it however if you already have a metamask that is connected to the girly Network and you unlock it see I have 7.3 girly eth so that's pretty good I can gen uh get that mnemonic from going here settings advanced not Advanced maybe security yeah and reveal secret recovery phrase so if I hit that I'm not gonna but if I hit that'll show me my mnemonic and then you can just paste it there and then you will it will generate you this EnV thingy now I've already done that so I'm not going to do it again but if I was to do it it will generate it would generate me a new one like this so I'm just going to use the one that I already saved and when you click that it'll take a little bit of a Time to get started with this thing now you want to definitely check your notifications because that's where this HD wallet provider thingy is going to pop up so you want to install that every the first time when you're deploying something so it'll take a little bit of time and then after that you are going to go ahead I'm just going to go ahead and deploy everything for you it still looks a little interesting to me so we're just gonna go ahead and try this one more time now oh so the reason why it like doesn't give you anything besides oh yeah it's deployed is because we don't have the migration set up so let's actually go ahead and do that the way it works is you want to go into your migrations folder and create a new file that you will call one underscore deploy.js or whatever and in here you want to create I'm going to import eBay from the artifacts are DOT choir and then you put in eBay now this has to match with the name of the contract so you want to double check that if you were to be a rebel that uses it for naming I know I used to be one and then you go ahead and say module exports async function deployer and then wait deployer.deploy eBay a lot of deploys deploy they play to play all right now you're gonna go ahead I'd like to clean my output a lot of times because it just clogs up and I don't know what ends where and now we can go ahead and hit deploy once again and when this guy runs through and finishes off oh it's still deploying okay so because it's a task that it actually takes quite a lot of time to deploy it so that's completely fine it's running through a bunch of blocks so there's that whenever it's done it's going to say deploy succeeded now you want to scroll up to contract address and this is your contract address so just to double check let's go on to my Safari I'm gonna say girly white girly Dot etherskin.io and that's the official ether scan and there you go now as you can see done I just deployed this contract and if I'm not mistaken that's going to be my wallet address let's see yup that's it that's that there you go now you just deploy it to girly now the next app we're going to deploy it to our ganache as well why a pretty valid cat question reason why we deployed to ganache and Gurley as well is because we're not going to be changing anything on the contract so like right now we're just going to deploy it to Gurley and then we're going to deploy to ganache but we're going to use ganache throughout the build and while we build it because Gurley is a slow Network compared to ganache when it runs on your local network it's always going to be faster it's always going to be a better developer experience and I want to speed through this build at the end or after the tutorial feel free to go up save this somewhere like you want to definitely go ahead and save it in your constants and then be like oh I don't know you wouldn't be export const for cons contract address or something like that so export counts the dress and then you just want to put it there but I'm just gonna comment it out for now because we're going to once again as I said deploy to ganache and then after the build is done and then you take down ganache you can just swap it swap out the address and then just make sure you connect the girly and you should be good to go switching Networks so once again I'm going to go ahead delete or empty out my output and then go ahead and deploy this guy now I'm going to type in local and it should be good and as you can see and as you can see it is like way faster like it's already done this is why we're going to use glitter so now I'm just going to type in export cause address once again bam and then you can put early after this and oops after this and so that way you're like not gonna mess up let's play now the next thing that we will be doing is you should have already installed with a CI you didn't have to do anything but you already have access to web 3 from web free you want to go ahead and employ import the ABI from this Json let's do that too so what you will say is contract ABI from ebay.json nice so next up what we will be doing is going to say con cons ethereum from window so basically this is just a structures ethereum from window window is literally all the code that's running in your browser and then ethereum is just a part of it so when you destructure it you will have an uh you will have a variable called ethereum all right next you're gonna say if ethereum but not with an exclamation point so if you have ethereum you want to go ahead and say const web 3 equals new web3 and then put in ethereum right there and then you want to return new web 3. that exactly this new web3.east.contract and I'm passing the ABI and the address now the one thing sometimes people forget is the ABI file itself has a bunch of things that are going on in there so there's this contract name there's the API that's exactly what and then like there's all this metadata and the random stuff that's going on yeah like all this stuff that like your app doesn't even need to worry about now option A what you can do is delete all this stuff but I prefer not to do that and instead it's just an easier solution to just contract maybe add an API and that literally takes care of the entire thing and and that's it you're good to go so with that said that is basically the deployment and now let's go ahead and create a nice little connect metamask button alright so I was told that this is the time that we go ahead and connect our metamask to this application so to do that you want to go into your app.js file now this is a bunch of things already imported so now we're just going to import a few more things so first of all we're going to be importing is just a stalling style file styling so from rainbow kit you want to go ahead and import styles.css it's their own specific styling and then you want to go ahead and import chain I'm going to import configure chains you also want to import create client create client yup and then wag me config here from blackme you thought it was going to be rainbow and then uh that's pretty much it oh wait no there's one more thing so we're gonna be importing get default wallets and rainbow kit provider and the Dark theme from that rainbow me slash rainbow kit and then you want to import two more things one of them is going to be the infuro provider from wag me slash provider slash infuro and you also want to import the Json RPC Provider from the same place or like almost now that suggestion was not good it's actually Json RPC like that so not Dash RPC okay so once you have these now we're gonna go ahead and set up a bunch of stuff now with that done let's go ahead and configure all the stuff that's going to be allowed as a user so like basically all the chains that the user will be able to connect to and all the providers for those chains we're gonna have chains and we're gonna have Pro VI and this is like not from anymore so we're gonna have configure chains and we are actually going to have two rays in here so in the first array we're just going to say chain dot Gurley and chains that's where we're gonna be coding in the next stop we're gonna have the inferior provider which is going to have an API key and for a little bit I'm just going to leave it empty but yeah and then we also want to make sure that the priority on this one is the highest so basically there's going to be two providers in here because we imported two there's gonna be inferior provider and there's going to be RPC the Json RPC what we're going to do is whichever chains a user selects you want to make sure we use infuria primarily however if they don't support that specific chain then we're going to have this Json RPC which is just literally the most custom RPC Rider out there so next up let's configure that secondary provider and it's going to be the Json RPC provider and we're gonna have to put in a few things so first of all priority two that's the secondary provider in this case and then RPC is going to be we're going to pass the chain and we're gonna go ahead and type in HTTP and then once again you want to put in this specific RPC address I'm not even gonna say it out because I didn't even want to say it out and that should basically wrap up all the providers that we got out here so these will be used in a little bit now I just want to like jump back right in right here uh to the inferior one and if you remember right at the very beginning of this app we actually saved our inferior API key here in the dot EnV so you want to go ahead copy that name and then come back right here and then you want to say cross dot EnV Dot and then just paste whatever name you gave it and um it should be good to go now one more thing you want to always restart the server so you just want to run your end up again and that will that would allow the application to read the end vehicle it probably already has but just in case it doesn't sometimes it helps and it's just like a safety measure okay so next up what you will want to do is you want to create a new const which is where we will destructure connectors from connect errors and it equals get default wallets like that and now we're gonna say app name it's not even Instagram it's eBay and we're gonna say up name eBay and then we're gonna say we're gonna just literally just gonna pass in all the chains we're just gonna pass in all the chains that we provided here so basically fees are gonna be the only change the user will be able to choose from when they are interacting with our app and then next up we're gonna have a whack me config and that'll be a create and then we're just going to go ahead and create the client with this specific function and then we want to pass an auto connect make it true you want to pass in right after that connectors and then you want to pass in provider and that should pretty much wrap up our setup for this for this metamask connection now there's a couple more things it's not that easy so come here like I'll just command x on it so I can just paste it back and whatever so once again copy that yep and then I'm going to say wag me config and say client and I'm passing Wegman config hey config like that so that closed nice and now I want to say rainbow kit provider and and then theme dark theme that's pretty cool and you can also like you can also enable cool mode now in that case you will probably have to import it yeah so let's import cool mode maybe you don't have to interesting okay check out we'll see if we have to import cool mode anyways it's just like a nice animation that's always it's not that important but before everything you want to make sure you pass in like into the chain selector like all the chains that's pretty much how it's supposed to be look like that's pretty much how it's supposed to look like and now in between all this you just paste that component thingy right back and now we should technically have access to all the connection now there's one more thing that we will need to do and that's going to be in our index.js file now in here you want to go ahead and import connect button from look at Rainbow meet alright so we got that copy that guy and then right under here online 30 line 2030. you want to put in connect button and that should enable yup there you go there is your connect button so that's pretty much that's pretty much a connection I'll show you guys what cool mode is if it enabled itself or if it didn't we'll see hit that that was cool that little animation that was cool man I'll show you once again because it's see and now it won't do it because I canceled it once but there you go that's cool mode hit retry and hit connect and there you go that is your metamask connection you just built it it is done it is so done it couldn't be any more done it is the most done metamask Connection in the done metamask connections history whatever leave it so with that said we're pretty much good to go to get started connecting the actual contract to the front end with that said I'll see you right there okay so it is time to go ahead and start connecting our stuff so we're gonna be doing mainly all kinds of Connections in the context so let's go ahead create a contact folder and then inside there you want to create a context.js file and uh let's go ahead and start importing stuff so we're in one definitely import create context we want to import new state use effect and use call contactor like that from react all of it and then while you're at it go ahead and import use account from wagme which is just super nice and easy way to get all the Account Details so yeah there's that and then you want to import web3 with a capital W from web3 with a not capital I believe and then you also want to go ahead and import create direct from euros and constants which is by the way con yeah this exact uh function that we created earlier so we already built that all right so you want to type it you want to go ahead and actually start creating the contract over here no context so you might say I have context and go ahead hit say create context and then next up export const and it's going to be app pro provider and that will have this children thing in between children that's pretty good and then create the function itself now What's Happening Here I think okay there you go and then that will basically return stuff so let's go ahead and return actually before we return anything let's do the test file or the test variable equals test whatever and now we're gonna return stuff return and we want to say app context dot not contest dot provider yeah and then value I was like garyvee would say I'm going to say test and close that bad boy and then just pop in chilled right there so that technically should be pretty much good to go in terms of a context thing now what you want to do is just make it a like you wanna we're gonna set up one more thing that's gonna make it just as much more easier so you want to say export cons to use uh context just like it suggests right there and uh you just want to return use context and then passing app context basically what that will allow you to do is you will have to import I believe less and it would just make made a hook out of it that's literally what happened okay let's go back to our app.js file and and in our app.js file what we will do next up is go ahead and import the app provider so I'm just going to go up here and make it like separate so there you go app provider and this bad boy I just put it like right here like right around the component actually we should be putting it outside of rainbow kit reason is Rainbow kitten might use stuff that is available in the provider so you want to allow that connection to happen and that's basically what did I do app contest for real okay that should have fixed it nice and just to test out this context thingy you want to open up your console and then inside of index.js you will you can go ahead and import use app contacts from context like that and then down here just go ahead and destructure test from the use up context thingy and then you'll just want to go ahead and console.log and if it says test in here our console as it does and my friends you little just created a perfect context and you graduated to move to the next step of this tutorial so congratulations on that if not just double check that everything that we set up here in the context and in the out.js file is correct and then let's move on I'll before we actually move on I'll just remove all this test related stuff because we don't need any of that you can close the app.js file remove that guy and then for a little bit we're going to be working inside our app provider we're inside our context we'll build a couple of functions and it will be done in a matter of no time I'll see you soon time to sell some products and what we're going to be using for that is our context so let's go ahead and get started setting a few things up here so what's your what we're going to do is we're going to create a couple of view States so there's going to be a contract side con track yeah like that and then you stay snow and then we're gonna say we're going to have a user user address set user address just like that might as well save it from typos and then one more is going to be prop doc handset products these are all going to be used later on in the app first of all this is going to be used this is where we're going to be storing our contract instance that we are generating with this guy next up we're going to have a user address which is we are going to be like saving like straight away so let's actually do that like right now so cons address and equals news account let's destructure that bad boy and while we are at it let's go ahead and set up a use effect that'll actually speed so whenever address changes what we're going to do is say set user address to address and uh we just addressed this situation all right now what we're gonna do is before we move any further we should Techni we should just go ahead and set up the contract situation as well so set contract open this guy and then create we don't have to pass in data just because that's not bad it is that's a different address we have access to that address so once that once this guy returns its thing it will be set into this contract thingy so basically every time you open up the app you will have access to all the contract connections immediately so that's good that's pretty good we are good there now you want to go ahead and create a function which we'll call sell item now actually let's just go ahead and let's figure out what we are going to be what are we gonna need for this so they're creative so we will be calling this this new product thing function and we will have to pass the name description category email price email image URL and rating always we'll have to pass them in so we'll have to account for all that I'm just going to leave this on the side just like a little peek like reminds us for that okay let's do this with an acing function because this is going to be an asynchronous situation and from the front we're going to pass the name we're going to pass in description we're going to fasten category I'm going to pass an image URL we're gonna pass in price handwriting it's basically everything close that bad boy little arrow thing and open the paren now thank you prettier for making my code look nice now you want to make sure that before any kind of interaction happens with the contract there is like the contract actually exists so return it's like card clause and then if that checks out you want to have a try catch functionality which will catch any kind of error that happens and then just console logs it out console error actually let's just put that there and then we can forget about that so error handling nice next up try so what we're going to be doing is immediately because the youth remember what we did with the the contract we expected that it was going to be in ethereum or in ether but that's not reality contract works with way and nobody is going to type up that many serials so we're going to say price in way and we're just gonna convert it and we're going to be like okay and luckily web3.js has what is built in so we can call that web3.utls.tooway thing function let me just pass it in price and then happen pass in the the currency that we want it back in so in this case it's ether sorry the other way around we pass in the prize in ether and because it's ether we'd tell them like what's the initial values currency and because it's ether it's gonna be stored in Whey right here and then I'm gonna go ahead and wait contract methods and this is where we actually go ahead and call the list new product function and so that requires once again name requires description what was that description requires category probably everything that that we have here prescription like I could type it out once but I couldn't type it out for the second though that's fine encryption category image URL price rating let's just double check it here as well I think we should be pretty much good to go here now oh my God copilot is so nice it like added this part as well so I'm just gonna explain it now so far this is how far we went and so because we are creating and adding data onto the blockchain like we want to store something on the blockchain you gotta pay for it all right nothing is freeing the web 3 words so before we can actually wrap this function up and as copilot was already suggesting we have to send in some ether and that's going to be coming from the user address which we already have saved which we already have saved it in in here and then there's a couple more things like you want to set the gas fees to the this number which is three and then this is basically three million all right and then I'm gonna set guess price to null these are like optimization stuff so it like the transaction is going to be more optimized nice that's basically what we are cooking with right now and that should technically lists every new item that we throw at it let's go ahead and connect this to our create button right here so far actually not even the create button I was wrong this list item thing so if you check this should technically already work because that's how our project comes so you want to go ahead and go into the model file model I'm going to go ahead and go into the modal file so once you entered your modal file I'm going to go ahead and import the use of context thingy and then destructure cell item out of it now if you actually have one brain cell like I don't if we don't export this from our contacts we're not going to be able to import it anywhere else so all right we're we are we are all here to to learn and improve myself include it so you've got the sell item function oh that's pretty cool here's our handle submit function which is already connected to the button nice and so what you want to do is before oops before we move any anywhere any further I'm gonna go ahead and say event dot prevent default and what that will do is like it will prevent the website from refreshing whenever you hit that button sometimes you like need it it's like a reacting so we're going to be using that and so next up if there is no name if any of these fields that are required basically for this transaction to go through meaning name it the description category price and or rating any of them those are the pipes though all of them say not name or not the script like that's how you like read it out if any of them don't exist or return a falsy value which is an empty string is a falsy value then we're gonna display a toast error message which we already set up for you and we're just gonna return and we don't even want to like continue the process so see how cool is that that's pretty cool if you ask me so that's there's that now if however we're good on that end and that doesn't happen else or you can just say else we can't say toast dot promise and the reason why we're doing toes.promise are not like a regular JavaScript promise is because the toast thing is going to keep loading as long as our promise is not successful so we're gonna have the toast handle our async function and then our async function as long as it check lasts as soon as it checks out our toast is going to turn a little nice check mark so let's do that so toast I promise and we're gonna say sell item and pass in all the stuff that we need to uh need to pass in so name description category image URL and then next up we're gonna pass in a little bit of a function and that'll basically just change the toast message all the time so as long as it's loading we're gonna be like listing in progress please wait and maybe an hourglass Emoji or something that like makes it nice and then next up we can just Define the success and then can be like okay item listed successfully and if there's some sort of error and airlifting item please try again whatever and with some nice little emoji play we should be good to go so let's go ahead and try that it should into your work if it doesn't and probably made a mistake somewhere along the way alright so with that being said let's go ahead and search for a rug and let's just grab an image whatever this looks pretty good this is a puffy rug shout out puffy mattresses for providing us with the image this is free marketing for them nice so we're just gonna call it a puffy rug and once again shout out for a puffy mattress puffy mattress all right let's go ahead and upload this image right there shout out internet speed nice you can crop it down whatever don't even worry about that okay so it immediately says set image URL is not defined that's interesting okay so that means that for whatever this you state is like set up interesting okay meaning that some stuff was like hello now there it is what do you mean it's not there and you want to definitely put that guy in there so if the IMG URL doesn't exist that should make it fail too however we are passing it in here yeah this is the like one of the biggest drawbacks of using stuff like copilot because you'll just look over a couple of mistakes that you're making along the way I mean I'm glad we like have this here that's helpful all right all right let's start again puffy rug and Shout Out puffy mattress oh yeah Double T that's who failed her English classes no me though put that guy there shout out internet speed and hit done okay there's no issue there and then let's go type in perfect four rug pulls ha pun intended category rug whatever price this is how when you like literally want to start becoming more and more careful with what you put in as a price and also want to like switch to the localhost networks like ganache nice because otherwise it will try to put them to girly but we're not but this address is not ungurly so it wouldn't fail again so once again prize okay actually here you can look at like bigger numbers I'm just gonna go with 0.1 and then rating obviously it's a 5 out of five Co ahead hit confirm on that guy and item successful listed now the only problem is we don't see yet so let's go ahead and do that go ahead and make that happen all right so we got the selling done this is now time we go ahead and display all the items that are like listed for sale so let's go back right here as we can see the product state is like still like empty and if we go back to index we also have this dummy products array so like the app doesn't break so what I'm going to be doing now is I'm going to destructure products from use up context and that way I technically changed that dummy empty array to the array that we are going to be fetching from and let's get rid of all those runs and stuff lining up okay that's fine there so now it says products man it says undefine it okay that's because wait oh of course duh once again if you don't export you can't import it's like a pretty good all right there you go now here is a way it's got a little bit has gone away all right and so to get started fetching we are going to be creating a new function that is going to go ahead and get all the items for us so how's it going to look like all right let's see let's let's do it like right under here so it's gonna be get all items and it's gonna be an async function nothing to input and uh yeah so before we do anything yeah if there's no contract that thus far it's correct there's no contract then we should just like return and then like you can add like custom toast messages whatever like error getting items whatever I'm not gonna do it because take up time and I already showed you how to and then next up what you wouldn't do is like before all that like little before anything set products to empty the reason for that is if there is no contract then you want it to one the products to be like a safe empty array that like will not break the map and if the contract changes you want to wipe out all the old stuff from the old contract and then the new stuff can come in and whenever you refresh it we're going to be using the dot push method yeah I believe that's an array method so we're going to be using the dot push method and we don't want to mess our things up and no one are the one the same product to show up twice sorry three times or whatever okay so with all that out of the way we're gonna have a nice little try catch function next up what we're going to be doing is say cons product count equals oh way oh so basically what we're going to be doing just walk you through at a high level let's go to the so far is we're going to go ahead and fetch this that way we are going to know how many products are there and then what we're going to do then is we're going to have a loop that goes through this mapping and fetches each item one by one so what we're going to do is say contract meth thirds Dot and what was the function name again it was get number of products so that's what we're gonna call I don't need all that random file so let's just paste that there function thing you call and call it and you sh we should be good so we have a number there the awaiting is going to hold back the line until that result itself so we should be good there now what we're going to be doing is we're going to say start with a brand like plain and simple for support loop we're just going to say index equals zero colon no semicolon until index is smaller than product count some icon and index Plus and then open close whatever curly braces are there and then it's a columns the product equals oh wait contract dot methods Dot and which one are we going for I don't know which one are we going for not methods and let's see which one are we getting because we're going to be using the builtin function of this methods thing as if you remember the when we did the ethereum remix stuff let me just show you yeah I connect that guy so if you remember we had this guy this is what we're going to be using all right based on that we're going to say products and then pass in a bunch of things so what we're going to be doing is say products and then pass in index and nonpass and then just call it that should be our product and so now we're going to format this because if you remember we get back like we get back all the data like twice so there's no need for that so we're going to format it a little bit so just it just looks a little nicer actually let me just go ahead and console log the product just so you remember what I was talking about oh if nobody calls this function it's not going to run plastic should set up a other use effect like that paste that bad boy there call it and whenever contract changes we're going to call that now if contract doesn't exist this whole thing is going to kick it off and we won't have any kind of Errors so let's see what have we got let's refresh this guy and there you go there is our item so this is what we are going to make a ton nicer like it it just looks nasty how there's like zero one two three four whatever nah this is not good so we just want to strip out this piece of the object and then just like make a nice looking array out of that so let's do that now and that's why we are creating this formatted product thingy so we're going to create a new object which will have an ID which is going to be a product ID we're gonna have a buyer it's a buyer which is going to be a product a buyer buyer like that and then seller product seller name description we're gonna have category image URL and price now remember in the solidity contract we are only working with way numbers so there's a final there are like multiple ways you can convert between whey and if ether I just prefer doing it on the front end just because like the audience and ethereum and solidity is like soup like in the early days the baby steps is the dawn of web3 so let's just stay where we are like more comfortable with stuff and so we're going to convert everything on the front and plus web 3.js is like making it like way too easy like it should be like almost illegal at this point anyways we're getting back the price in way and we want to convert it into ethers or ether so that's what we're doing here and so that's pretty good and then we have one more thing which is the grading now let me actually console log the actually because I'm lazy I don't want to type all that formatted formatted product nice let's see the difference between the two so here's the ugly bun we don't like that and then number two ah so much nicer there you go so you're welcome that's why you're using random stuff random like formatted formatting things in the middle of our context and then um yeah once that's good to go what you want to do is say set products and my assistant Mr copilot is helping me with this basically what you want to do is get these set products function from this use state that keeps track of the previous actually it shouldn't be previous product I don't like when it like calls it like that so we should just call it previous state all right it should be previous state there you go that in theory show us all the stuff we got now one interesting thing though why does it say item five I haven't even bought it what do you mean I bought it that's probably just hooked up to a template function so don't even worry about it okay so you might be wondering David what is going on here in the first place why am I not seeing all my images like I literally uploaded them and if you still have the console lock turned on yeah this is undefined but actually I just spend a little bit of a time and traced it back and we are doing everything correctly except for one thing now if you look at it like how are we even save saving this stuff or how is it even being saved it is IMG URL and we are trying to destructure image URL once again we looked it over or like I personally looked it over because I'm using copilot so again there's a lot of negatives to it it's not going to put uh put us out of our job I'm pretty sure after these two I'm pretty I'm feeling pretty safe let's refresh let's see what do we got now we have the image URL now the only question is why do we not see it it's probably because we should be saving it like that all right there you go so with that little two literal two changes that we just did from image to IMG which is a story for image once you change that it apparently starts working so that's how we set up the template I completely forgot about it and we also are using copilot to help me out with typing so there's that now with that all set and done it is time we go ahead and purchase these items and we're technically done with the build see there all right we actually got through the very final part of this build which is purchasing these items so before we actually get into that I just want to clear out all the console logs if you've watched any of my other videos you know that um I don't like them like it's good as long as we're building stuff but then it like gets annoying and clogs up my consoles I like to keep that clean I'm a king dude we are going to be creating a new function down below here which we're gonna call by product which is the byproduct of me being funny hey anyways we're gonna pass in this ID which is going to be the product ID that's going to be coming from the front end so let's uh let's do that oh why is it oh there's the error okay so with that said now we also want to have we want to get the usual card Clause so if there is no contract then we just want to return with all the toasting stuff so again a usual try catch and then let's catch the error and then console.air.air I hope that made sense that was like a pretty good scent pretty good sentence if we have the contract we are going to go ahead and try to get the prize so what we're going to be doing is here get what the prize is we need to know how much the product costs all right and we don't really trust Lee friend to tell us what it costs because that could be manipulated pretty easily so instead what we're going to do is we're just going to go ahead and fetch the fetch the contract again for it so we're going to say contract dot methods dot product yeah product ID and then we're just going to call it and then once we called it we will as technically isn't the price but we're just uh you know what let's just actually name it so product so that will be the product and then we will use that to get the price all right so what is going to happen now is we're going to say oh wait and then we're just like straight into calling the purchase Method and so let's see how we actually named it here so this is going it is called purchase item now purchase item and then we will have to just pass in the ID that's all we need to pass in however when we send it in this is where we need to specify the actual purchase price of the product that we are sending in so this is where we're going to be using this line of code now open close paren open this new object and we're gonna say from in the user address which we already have access to you know what while we're at it even though it's like unlikely that it will ever happen that this doesn't exist and the contract doesn't exist because somewhere I believe oh wait hold on whenever here actually never mind you know what let's just put it in the guard cause it's not gonna hurt there it's fine so we're gonna be like okay contact address or user address so whoever is used Oliver is locked in that's the person that will have to pay for the product we're gonna give it a like the general three million gas which is like three million way I believe and then we're gonna say gas price null and then we're gonna say value because in this case we have to press specify the value and out here we actually got the price of that product like we we got the product so and we just want to get the price of that specific product and that will be the value so it's like way harder for any kind of like malicious intense like any kind of person with malicious intent to like tamper with this with this specific transaction and that should be pretty much it now Luna it's sport it because I've messed it up and forgot to export it twice and we're gonna be doing is I believe so it's in product JS where we'll be calling it so what we're gonna do here is we're going to go ahead and import use a context and then uh yeah I have all this uh template function there but we don't need this anymore instead we are just going to destructure this and right here the toast is ready to handle everything and it should be good to go let's see what we got so on click whenever we click one of these products and I don't know why it does that I think it's like I save it it like doubles It Anyways when you refresh it it only shows up once so that's pretty good and then it says item bod so that's interesting because reading length Okay that's weird why do we what are we dealing with all right oh hold on and once you actually do that my playlist should be working so let's go ahead and test this out so if I refresh I'm gonna say all right my Mana mask is popping up it's a zero dollars like that that detail looks a little fishy to me okay so there is this error and it says the value doesn't seem to be checking out I believe invalid amount sent for a product Oh interesting and so the reason why the price like wasn't really working is if you think about it like this is these are all async functions if we are waiting here for we literally have waited everywhere I think I just forgot to put the weight there let's see if that helped and let's see if that worked like there's like a lot of transaction clogged up here all right let's go ahead and refresh click that and there you go there you go now you can see that the Price Is Right There 0.1 each and then I'm gonna confirm it however it literally just says the seller cannot buy their own product so what I'm gonna do is I'm going to refresh here and then swap over to my other account like that come on and that has 69. nice uh Ethan there and let's hit the second one confirm there's the price and item bot now this one is successful so that pretty much revs up this entire build you were able to Now list and sell items using the blockchain using the ethereum blockchain and then once again if you want to send this to your friends deploy it to you anywhere you can just comment that line out and comment this line like back out so that's going to be the valid line and now this application is living on the girly Network so with that being said thank you so much for watching and I'll see you in the next one
