With timestamps:

00:00 - hey what's up you guys aaron here from
00:01 - clever programmer calm and welcome to
00:03 - the flask crash course alright so this
00:06 - is a great tutorial we're gonna be going
00:07 - over a lot of stuff in the flash
00:08 - framework that allows us to build
00:10 - websites cleanly and efficiently without
00:12 - having any extra clutter so flask is a
00:13 - great framework we're gonna be going
00:15 - over the file structure so that we know
00:16 - how to organize our website and how all
00:18 - the different files interact the syntax
00:20 - of being frameworks so that we can put
00:21 - everything correctly we're gonna learn
00:22 - how to create blast bottles so that we
00:24 - can model real world objects in our code
00:26 - flask view so we can house all of our
00:28 - programming logic so that we know a code
00:29 - to run when a certain things on the
00:31 - website happened flask templates so that
00:33 - we know how it displays the whole front
00:34 - in and everything and also hook it all
00:35 - up to a database so we can have full
00:37 - crud functionality on our website we're
00:39 - gonna start with a very basic class cap
00:41 - it's probably like six or seven lines of
00:42 - code and from there we're gonna build
00:44 - our way up slowly learning all these
00:45 - different parts that I just mentioned
00:46 - and eventually we're gonna get to a
00:48 - full-blown blogging app with the
00:50 - bootstrap enable so that looks very nice
00:52 - with a pretty front-end I'm probably
00:53 - gonna be showing some stuff from the
00:54 - screen right now with what its gonna
00:55 - look like so you kind of have a preview
00:57 - of what we're gonna be making it'll be a
00:58 - lot of fun stay tuned we're gonna get to
00:59 - that very shortly
01:00 - subscribe to the channel don't forget
01:01 - that click the notification bill
01:02 - whatever people still do that comment
01:04 - ask questions Oh while we're going
01:06 - through this course you guys I have the
01:07 - code in the description if you want to
01:09 - compare your code at the end so
01:11 - definitely check it out if you want to
01:12 - download it and just compare your own
01:14 - code if you're following along so
01:15 - definitely do that
01:16 - you should definitely follow along and
01:17 - cool along with me during this project I
01:18 - mean you can still watch it but the code
01:20 - is in the description so check it out
01:22 - hey guys so real quick before we start I
01:24 - want to tell you that we have a really
01:26 - really cool 1 hour plus webinar that
01:28 - goes over the three secrets of how you
01:30 - can become a Python freelancer in 2019
01:33 - 2020 and beyond and it tells you how to
01:35 - start making an income even if you're a
01:37 - complete beginner if you've never
01:38 - written a lot of code before if you
01:39 - don't even know what code is or any of
01:41 - that stuff and how you can go from that
01:42 - to having a six-figure income as a
01:44 - freelancer or even as a software
01:46 - developer at a company if you want to do
01:48 - that it's still relevant so definitely
01:50 - check that out it's completely free just
01:52 - click the link in the description and
01:53 - you can put in your name in your email
01:55 - there and you'll be sent a link to get
01:57 - started the team worked really hard on
01:59 - it
01:59 - this guy this guy me other people so I
02:01 - just wanted to put as much value as we
02:03 - could it's one
02:03 - for you guys we shot it and we edit it
02:05 - and now it's free for all you guys watch
02:07 - so just go check it out we really
02:08 - appreciate it I think you'll really
02:09 - enjoy
02:10 - [Music]
02:20 - hey what's up you guys so now let's get
02:23 - started with the flask crash course okay
02:25 - but before we get into the code I want
02:27 - to actually go over what flask is if you
02:29 - guys don't already know that
02:30 - so all flask is is a web framework and
02:33 - all the web framework is is just a way
02:36 - to structure a website so like when you
02:38 - go to a certain URL then a certain web
02:40 - page pops up and then you could organize
02:42 - all these web pages together into
02:44 - website and you can kind of define how
02:45 - they're all named and all the names and
02:47 - stuff and how its laid out and
02:48 - structured how its framed I guess that's
02:51 - why it's called a framework maybe a
02:52 - double meaning there but that's pretty
02:57 - much it I mean you know you do need to
02:59 - know see HTML and CSS to actually design
03:02 - the web pages but then and then you use
03:04 - that within flask so if you don't know
03:05 - already know that please go do that
03:06 - first learn HTML and CSS first and then
03:09 - come back to this and then this will be
03:10 - useful and Python as well okay flask is
03:12 - written in Python if you didn't know
03:13 - that so we're gonna be doing all that
03:14 - meaning Python HTML CSS and then you can
03:16 - come to flask okay but that's pretty
03:19 - much it it's web framework one thing I
03:21 - need to point out though is that is it
03:22 - it is a micro web framework all right
03:25 - and all that really means is it is super
03:26 - lightweight and bare-bones so it kind of
03:29 - doesn't come prepackaged with anything
03:31 - at all it's like super super lightweight
03:33 - like you can get a web a very simple
03:35 - website web page up and running in about
03:37 - six lines of code five lines of code and
03:39 - it takes about 60 seconds to code up and
03:42 - we're actually gonna do that in a couple
03:43 - of minutes when we get to the code port
03:44 - on part after we install it but yeah it
03:48 - third align the line design philosophy
03:51 - is to just kind of import things as you
03:55 - need them so there's no database there's
03:56 - no form validation you guys know what
03:59 - the things are um database just like
04:00 - allows you to house data then you can
04:01 - like edit that data or retrieve it or or
04:03 - create things like crud operations and
04:05 - then form validation is whenever you're
04:07 - doing like API HTTP requests and stuff
04:09 - like to make sure that the request is
04:11 - valid or if you're like submitting any
04:13 - kind of form then just making sure it's
04:15 - valid before you send it so doesn't
04:17 - break the server and stuff though flash
04:18 - doesn't have any of that okay you
04:20 - actually need to import those things as
04:21 - you need them as you want them which is
04:23 - nice because it's very clean and
04:24 - minimalistic which I like unlike Django
04:26 - which has like everything bunched into
04:28 - together I has a database and back-end
04:31 - and all these everything just has
04:34 - everything in one it's like one juicy
04:36 - package which is cool but flask you just
04:38 - like more I guess you have a little more
04:40 - maneuverability oh yeah I guess they
04:44 - have a tag on here it says web
04:45 - development one drop at a time I never
04:46 - noticed that before but that goes along
04:48 - with their minimalistic import as you
04:50 - need design philosophy so that's cool so
04:52 - this is it
04:53 - apparently Pinterest and LinkedIn are
04:54 - built on flask I didn't know that and
04:55 - learning everyday cool and yeah let's
04:58 - just jump into the code let's get
05:00 - started so I'm in my IDE here I'm using
05:03 - vs code this is my idea of choice it's
05:05 - pretty nice but you just use whatever
05:07 - you prefer okay first I created a
05:10 - directory called flask up I'm just gonna
05:11 - be working in here and how about my
05:12 - files in here but yeah let's go down to
05:14 - the terminal let's start by installing
05:16 - flask okay so you can do it here you can
05:18 - just open up into the terminal if you
05:19 - don't know what a terminal is just open
05:20 - up the tournament here same thing but
05:23 - I'm just gonna use this integrated one
05:24 - because it looks nicer
05:25 - makes for a nice for video you know but
05:28 - I'm just gonna want to run pip install
05:32 - flask okay and that should run if you're
05:36 - getting some error um like permission
05:37 - errors you could have just run sudo pip
05:39 - install flask that just stands for Super
05:42 - User do okay they just kind of like
05:43 - overrides any permission errors you
05:46 - might have but we need to do that okay
05:47 - because we've already installed it so
05:48 - after you have flask installed you could
05:51 - type in flask - - version just make sure
05:53 - that you have it installed and as you
05:54 - can see we have
05:56 - flask installed the flash version 1.1.1
06:01 - okay and yeah let's just get started so
06:04 - let's go into here and flask app and
06:06 - create a new file alright and I'm just
06:08 - gonna call it app dot PI all right
06:12 - don't need that and now we can start
06:16 - putting up our first flask app okay so I
06:19 - said earlier is gonna take about 60
06:21 - seconds might take a little bit longer
06:22 - but it's really short it's just a few
06:23 - lines of code so the first line is of
06:25 - course from flask import flask we're
06:29 - just going to be importing the flask
06:31 - liber that we just downloaded okay
06:33 - that's how you do that there and
06:36 - afterward after we've done that we
06:38 - import this flask object okay now we
06:40 - just want to create in a flask
06:42 - using that flask object so that's how
06:45 - you do this okay you just call the flask
06:48 - constructor here and then we just create
06:50 - a app I mean I just called it app but
06:52 - you do need to pop in name here okay
06:54 - this is just like this just references
06:56 - this file this is a Python thing if
06:59 - you're curious you can look into it but
07:00 - you just have to do it so just follow it
07:02 - and if you're if you want to learn more
07:04 - about it you can look at you can google
07:05 - it or something but it just references
07:07 - this file it's not super important right
07:08 - now alright and now we can start getting
07:11 - into our flask stuff okay so flasks web
07:14 - frameworks so we're gonna be creating
07:15 - websites which is just a bunch of URLs
07:17 - that that lead to web pages so how do we
07:20 - define a URL okay well we do that by
07:22 - routing so it's called a route it's just
07:25 - like a URL route so we'll just do this
07:28 - little thing here this it's called a
07:29 - decorator in Python if you start a line
07:31 - with a ampersand like not a person at
07:34 - sign like that and flask uses this to
07:37 - define all of its URLs so this is the
07:39 - base URL if there's absolutely nothing
07:41 - so like your domain would be here so
07:42 - like www.yourdearbaby.com show you that
07:57 - later but just know this means if it's
08:00 - just your domain with nothing after it
08:02 - okay like WW --gel calm or something
08:05 - that would be that there's nothing that
08:06 - coming after so if the base URL of our
08:11 - website is that then we can just have a
08:14 - function right below it and this will
08:17 - this code is what will run whenever we
08:19 - get to this URL pretty simple so we'll
08:21 - just say let's just do a simple hello
08:23 - world okay
08:24 - and you're just gonna return hello world
08:30 - okay and that's pretty much it there's
08:34 - one more thing we have to do down here
08:36 - just for good practice sake we always
08:41 - doing this in Python you know so if you
08:44 - just want to make sure if we are running
08:45 - this direct from the command line in
08:48 - which case the name will be main if
08:50 - we're in this file directly then we
08:51 - actually want to turn on
08:53 - debug mode or which is pretty much
08:55 - developer mode
08:56 - okay which just like allows us to have
09:00 - it shows us actual errors whenever an
09:03 - error pops up and just sitting instead
09:04 - of just saying oh four four arrow blah
09:06 - blah and I should give this the full
09:07 - breakdown so we can actually figure out
09:08 - what's wrong and then also it allows us
09:10 - to update our server and our website on
09:14 - the fly so we're not this keep like
09:15 - stopping and restarting a server
09:16 - okay I'll demonstrate all this in a
09:18 - second but this here is pretty much the
09:20 - most basic flask app you can write okay
09:23 - you have like we import the library we
09:26 - create a flask app we define a route and
09:29 - the custom code to run and then just
09:32 - some practice developer stuff so yeah
09:34 - let's just get this running and see what
09:36 - happens okay go down here and we're
09:38 - gonna type Python app PI and and there
09:44 - we go so now it says debug mode is on
09:47 - it says the server flask app app we
09:50 - named it app write is running and it's
09:54 - running on this localhost okay
09:57 - so 120 7.0 point oh point one is
09:59 - actually gives you your localhost so
10:00 - instead we don't have an online domain
10:02 - right now like I said like
10:03 - www.google.com/mapmaker we're just using
10:07 - the localhost right now but it's gonna
10:09 - be on port 5,000 so that's important so
10:12 - let's just go back to our browser and
10:14 - paste this in okay and as you can see
10:18 - let me zoom in here a bit that hello
10:20 - world that we typed in is displayed here
10:22 - okay so this is the website this is our
10:24 - web page we can I change it to localhost
10:27 - okay instead and it'll it'll bring us
10:30 - the same page but yeah that's pretty
10:34 - much how flask works okay let's go back
10:37 - here one other thing I want to mention
10:40 - really quick is actually if you want to
10:44 - handle multiple things with one I mean
10:49 - multiple routes with one method or one
10:51 - function I mean then you can you can do
10:53 - that pretty much whenever you see route
10:55 - whatever mith function is like closest
10:58 - that comes next linearly in the code is
11:00 - the code that'll get right okay so if we
11:02 - see this we can actually put multiple
11:03 - ones here and let's just say we have
11:05 - home alright and so now if the base
11:08 - index and
11:09 - home slash home we'll both go to hello
11:11 - world like this so we save it and
11:14 - because debug mode is on then it
11:16 - automatically updates our server will go
11:19 - here and refresh this and no changes
11:23 - that worked or let's hello world to cool
11:26 - just so we can see some changes make
11:28 - them taking place there we go hello
11:30 - world too but also we said if we wanted
11:32 - at home to go to the same method then we
11:34 - can do that Aiki probably method
11:36 - functions are home alright and home will
11:41 - also bring us the same thing however if
11:43 - we go to some bogus URL like this and I
11:46 - hit enter then you're just gonna get a
11:47 - not found error okay so that's because
11:51 - this path wasn't defined if we actually
11:53 - defined slash bogus like change this to
11:55 - bogus or something then it would work
11:58 - alright
11:59 - so pretty straightforward should make
12:01 - sense up to this point but that's pretty
12:03 - much the basics and the most basic app
12:06 - we could make with flask and now we're
12:08 - going to start getting into a little bit
12:10 - more advanced stuff all right so I'll
12:11 - see you soon all right welcome back you
12:16 - guys so now we're gonna go into a little
12:17 - bit of advanced routing just like pretty
12:19 - much playing around a little bit with
12:20 - this app grout line up here and
12:23 - different things you can do with it so
12:24 - let's get rid of this to keep it simple
12:26 - almost go back to the base index or
12:29 - actually I'll leave it as home okay so
12:30 - let's just leave it like this and hello
12:35 - let's just go back here and run this
12:37 - it's still working a slash home is still
12:41 - working alright so what I want to show
12:43 - you guys actually how you can get
12:45 - parameters from the URL into our code
12:47 - okay so whatever we show URL right um
12:51 - and we get and then we run this function
12:52 - and this this uh this text is returned
12:55 - to the web page for the web page to
12:56 - display whether it's HTML or tech raw
12:59 - text like it is here whatever it is
13:02 - maybe there's some stuff in here that we
13:05 - want to change based on what was given
13:07 - the URL so like maybe like we want to
13:08 - actually like greet somebody in their
13:11 - name so let's just go through it and
13:13 - I'll show you what I mean
13:14 - so maybe a path like you want to
13:16 - actually be like slash home slash Aaron
13:19 - my name or a slash home slash kasi or
13:22 - something like that
13:22 - and depending on that you want to say
13:24 - like hello Aaron or hello Kazi instead
13:27 - so how like using pretty much like using
13:29 - variables in URL so how you do that is
13:32 - you use your little brackets here and
13:34 - then you define the data type and then
13:38 - the variable name so just like that so
13:40 - there's gonna be a string called name
13:42 - and then you can actually just pop a
13:43 - name here and this name here and this
13:46 - name needs to be the same and now we
13:49 - have access to this in our code okay so
13:51 - whatever pops up here in the URL whether
13:54 - it be Aaron or Kazi or any other string
13:56 - then now we have access to it here so
13:58 - now we can actually go here like this
14:00 - and actually add in something like that
14:05 - okay so whatever is in the URL is now
14:08 - gonna be displayed in the web page so
14:11 - that's how you get stuff from the URL
14:13 - like like parameters and variables into
14:15 - our code so let's some refresh this and
14:19 - we get a not found error because we
14:21 - didn't I should put a name forgot to put
14:22 - a name so now let's put name Aaron there
14:25 - and as you can see it says hello Aaron
14:28 - okay and we can put anything once there
14:30 - Kazi will also work or hello stupid but
14:37 - yeah so that's how you get variables
14:38 - from the URL into here so this might
14:40 - seem a little bit redundant I mean like
14:42 - like why would you need to do this but
14:43 - um one very useful thing that this
14:47 - allows us to do is pretty much um for
14:53 - dynamic URLs and um dynamic URLs are
14:56 - like when you have like maybe if your
14:58 - website where you have a bunch of
14:59 - different profiles a different bunch of
15:00 - bunch of blog posts or images or
15:02 - something and each one has an ID and the
15:04 - URL just keeps changing and then you
15:07 - might have like int okay and then you
15:10 - could have like ID like this or
15:11 - something like image image ID or
15:14 - something or just ID in general and then
15:16 - as this thing keeps changing then you
15:18 - could like have like some code here it's
15:20 - like Oh display image with this ID okay
15:23 - and it makes it very simple to handle
15:26 - all of the these URLs in one so you
15:29 - don't have to like have like um each one
15:31 - individually you don't to be like Oh a
15:33 - Prout
15:35 - one right display image one and then a
15:38 - Prout to have a separate function
15:40 - display image two and so on so forth you
15:43 - can just have this up here and then just
15:45 - pop in ID of course you have to change
15:47 - this ID and then you can just say okay
15:52 - based on ID well this is an int so you
15:55 - have to cast to a string before I print
15:57 - it but you need to what's going oh I
16:04 - have an extra parenthesis here but you
16:07 - need to I lost my train of thought
16:11 - that's okay but pretty much yeah it just
16:13 - allows you to have dynamic URL so that
16:15 - you can handle multiple URLs with one
16:18 - function okay and then of course you can
16:20 - have multiple ones of these so you could
16:21 - have like home slash users slash string
16:28 - well let me let me show you this first
16:29 - before I get exact so let's just do this
16:31 - and show you the string as well
16:33 - oops that's not right because usually
16:37 - home slash needs to be an int not a
16:39 - string so let's just put 10 okay
16:41 - so hello 10 cool but you can also have
16:46 - multiple ones in here so maybe like
16:47 - users slash string name slash posts
16:53 - slash ID okay so now we have name and we
16:57 - have ID so like okay let's should we
16:58 - have like website of some users and then
17:00 - you have the user name and then you have
17:02 - all their posts and you have an ID of
17:03 - one of their posts so it could be like
17:05 - hello name your ID is something like
17:16 - that and pop name back in here and let's
17:23 - run this okay and refresh this oops
17:27 - so we need to go to Aaron slash posts
17:32 - was it home slash users home slash users
17:36 - is what we said slash the name slash
17:39 - posts slash the ID so let's put five and
17:41 - let's hit enter
17:44 - and there we go it says hello Aaron your
17:46 - ID is five based on all the stuff in the
17:48 - URL okay and as this changes we can
17:51 - easily just keep updating this okay and
17:54 - then if we actually had like images and
17:56 - stuff we could like okay fetch this and
17:58 - I should return an image instead of just
17:59 - text you could be like image eight image
18:01 - blah blah blah and as we change the URL
18:03 - different images will be popping up okay
18:05 - so that's kind of the idea of dynamic
18:06 - URLs and routing with variables using
18:10 - this bracket notation here okay pretty
18:13 - cool and one other thing I want to go
18:16 - over now is actually limiting your
18:21 - webpages to specific request methods
18:24 - okay so let's just add another one here
18:27 - just for simplicity say because I don't
18:28 - to get too fancy on one and let's just
18:31 - call this only get there real that might
18:39 - not make sense right now would just just
18:41 - bear with me for a second
18:42 - so get get request and you can only get
18:54 - this web page okay so I saw this little
19:01 - thing out here and or actually get only
19:06 - or yeah whatever it doesn't really
19:09 - matter okay I'm getting nitpicky here
19:10 - but pretty much what I'm gonna do here
19:13 - is I want this web page to only allow
19:15 - get um get requests so you can only get
19:19 - get and like it doesn't it doesn't allow
19:20 - post or put or anything else at all
19:23 - alright only get and you can actually
19:27 - specify which methods you want to be
19:29 - allowed but let's just run this to see
19:32 - what happens okay only get
19:40 - like that okay so you can only get this
19:43 - webpage so that's actually not true
19:44 - because this is just a normal app route
19:46 - and everything but what you can do in
19:48 - this route method is after after the
19:51 - this little string here you can actually
19:54 - declare I think it's methods with an S
19:59 - yeah methods like this and then you can
20:01 - specify all of the pretty much the HTTP
20:05 - requests that you will accept on this
20:08 - webpage so if you only want to get get
20:09 - then it would be like that if you only
20:10 - want post then it would be like that
20:13 - okay if you want to get and post then it
20:16 - would be like this very simple it's just
20:18 - a list of all the allowed methods okay
20:20 - but since we're only allowing get here
20:23 - then why me this will still work because
20:25 - the get is still there so let's just
20:27 - give this a shot and run this okay and
20:30 - as you can see it still works and let's
20:32 - just pop it to and here to prove that
20:33 - it's still changing so it still works
20:35 - only get and also if we have only just
20:41 - get it all that's what all the intent I
20:43 - intended originally to only be able to
20:44 - get this webpage then changes to three
20:49 - just to demonstrate that it's continued
20:50 - to work three works but if we put post
20:53 - in here all right it's only allowing
20:56 - posts but it's gonna try to get so we're
20:59 - probably gonna get an error see method
21:04 - not allowed so this method is not
21:05 - allowed for the request the URL because
21:07 - you're trying to get this um you're
21:09 - trying to get this code whatever you
21:12 - request a web page you're trying to get
21:13 - it but it's only allowing to post and
21:15 - post would be like okay like like
21:16 - sending something to URL for them to
21:18 - save it to a database but yeah that's
21:20 - how you define your allowed request
21:25 - methods and then you can limit it to
21:27 - certain things okay so that's some fancy
21:29 - advanced routing stuff you can do and
21:31 - now we're gonna get into templating and
21:34 - actually doing some of the front and
21:35 - work like with HTML and CSS and static
21:38 - files like images involve a lot in our
21:41 - flask website framework hey what's up
21:46 - you guys so now we're gonna go over
21:48 - templates okay templates are just pretty
21:51 - much the front end of flask a way
21:53 - to organize all of our HTML and CSS and
21:57 - like those kind of front-end things and
21:59 - make them clean and stuff I make it not
22:02 - cluttered and very easy like just make
22:05 - our website easily manageable but it's
22:07 - been mainly for the for the front-end
22:08 - okay this is where our HTML code is
22:10 - gonna be going so I'm just gonna leave
22:13 - these two things here since we code them
22:14 - up but I'm just gonna go back to
22:15 - something simple I'm just gonna actually
22:18 - just pop back in a the base directory
22:21 - okay just keep things simple for now and
22:25 - let's call this index and very simple
22:30 - return home page okay like that nothing
22:37 - nothing scary okay let's just save this
22:41 - and go back to our browser here and go
22:48 - to the home page and as you can see home
22:49 - page pops up right there okay I'm zoomed
22:52 - in that's why it's so big but this is
22:55 - just regular bra text okay now I think I
23:00 - mentioned earlier that whenever we have
23:02 - a function here or a route and then a
23:05 - function it executed on that route
23:06 - whatever is returned back it's just spit
23:08 - into the browser so the browser can
23:10 - interpret anything it can interpret raw
23:12 - text like it is right now or it could
23:13 - even interpret HTML just raw HTML so we
23:16 - can actually do this okay we can
23:19 - actually just pop in some h1 tags like
23:22 - this and we'll go back here and when we
23:25 - refresh we'll see that it changed to an
23:27 - h1 tag all right so this is HTML code I
23:29 - mean it's not legal because it's just
23:30 - like a single tag it doesn't have all
23:32 - the right like protocol um all the other
23:38 - stuff well if the HTML needs all those
23:40 - other tags and stuff but this is just
23:42 - like a raw tag like it takes it XML or
23:44 - something whatever you want to call it
23:47 - but yeah pretty much you can put in
23:48 - everything you want in here you could
23:50 - even do like a we could do a triple um a
23:54 - multi-line string here like this and
23:57 - then actually put in your entire HTML
24:00 - webpage in here but I mean that gets
24:01 - really messy so that's this is word
24:02 - templates come in
24:04 - so because we have the ability to return
24:07 - anything here that we want it would be
24:09 - nice to put this all this stuff into a
24:11 - separate file okay and in this case
24:14 - we're gonna be putting it into a
24:15 - template file which was just an HTML
24:17 - file but they they're called templates
24:19 - so let's make a new folder in our flask
24:22 - app okay and call it templates alright
24:25 - it has to be called templates and then
24:27 - inside here let's just put index dot
24:31 - HTML all right index.html and then let's
24:35 - just paste all this into there copy and
24:41 - paste cool so just that for now and home
24:48 - page and back here okay so now now what
24:52 - we're gonna do is we're gonna learn how
24:53 - to actually get this HTML file in here
24:56 - we're just gonna render this as a
24:57 - template okay so first of all we need to
25:01 - import render template it auto-completed
25:04 - for me that's nice and then here instead
25:06 - of just returning a string we're going
25:08 - to be returning a function call I mean
25:11 - it's still a string but we're just gonna
25:12 - be calling this render template function
25:14 - and this is going to just take the name
25:19 - of the template that we are getting okay
25:21 - and it's in a template so it has to be
25:24 - in a directory called templates okay in
25:26 - order for it to find it so it's assumed
25:28 - that it's within templates parallel to
25:30 - our app and then index.html is inside
25:33 - there okay so let's run this now again
25:37 - well it should go to be running let's
25:39 - just refresh the page and nothing
25:41 - happened as figured but let's just put a
25:43 - two in here to signify any differences
25:45 - and boom as you can see our template is
25:50 - being rendered correctly okay so now
25:56 - let's actually fill this out to be
25:59 - proper HTML code I think HTML yeah looks
26:04 - like we can autocomplete with some some
26:07 - code or some boilerplate code thanks vs
26:12 - code alright so um I mean this is gonna
26:16 - look exactly the same let's just put it
26:17 - as three and go back here and boom okay
26:21 - but there's a little bit of formatting
26:22 - up there some a something up here happen
26:24 - I think content yeah all this stuff but
26:28 - yeah that's how you get that's how you
26:29 - render a template into your flask
26:31 - function okay so you're just like
26:33 - rendering this HTML file which is nice
26:38 - but as you can see all this stuff up
26:41 - here there's a bunch of other stuff from
26:43 - the HTML so there's actually something
26:44 - we can do called template inheritance
26:47 - which is kind of just like taking all
26:51 - the stuff that's common in all the web
26:52 - pages and putting it all into one file
26:54 - okay so let's let's actually do that now
26:57 - let's call this base HTML all right and
27:00 - let's copy all of this into there
27:02 - because every every web page needs like
27:05 - the doctype HTML needs this and eats the
27:07 - head and needs the body tags and all
27:08 - that so why don't we just like put that
27:11 - all on to one place okay like this and
27:13 - now now on what we can do is we can
27:17 - actually signify blocks in here that we
27:20 - want to be able to plug into so the only
27:24 - things that are relevant here that we
27:26 - are gonna be changed from web page to a
27:27 - web page are probably the name like the
27:28 - title here and the content in here so
27:32 - what we can do is we can actually just
27:33 - get rid of this okay and then we can use
27:36 - something called Jinja to which comes
27:39 - with flask if you know Django then you
27:41 - probably look it looks kind of familiar
27:43 - but we have this ability to code in
27:48 - things and put blocks and actually use
27:50 - like for loops and cool stuff in here
27:51 - thanks to ginger but this is how you do
27:54 - it so you can actually define blocks and
27:59 - then give them names so I'm just gonna
28:00 - call this title or not title maybe I get
28:02 - call it head whatever and then you can
28:06 - actually signify a block like this so
28:10 - make sure that you open and close with
28:11 - this bracket and parentheses I mean
28:14 - bracket and % notation and right here
28:17 - this signifies a block so now we can
28:19 - actually access this block
28:21 - wherever and um input content into their
28:24 - ourselves whenever with whatever content
28:27 - we want if we extend from base that HTML
28:30 - so let's do the same thing let's just
28:34 - copy this and paste it down here but
28:37 - call this body instead alright just like
28:41 - that now let's go back to index.html and
28:44 - they should all start making sense if
28:45 - you if you got lost or if I wasn't
28:46 - making any sense well let's just delete
28:49 - all this and now what we can say is
28:52 - instead of having all the HTML code we
28:54 - can simply say extend is extends with an
29:02 - S that's right extends base HTML all
29:06 - right
29:07 - so now now this using the Jinja - syntax
29:11 - which is this fancy stuff here that
29:13 - comes packaged with flask when you
29:16 - download it then it hurts all of this
29:21 - stuff everything in here including these
29:23 - little - body things these two blocks
29:25 - and now within here we have access to
29:27 - those blocks so we can actually say what
29:28 - we want to plug into those blocks which
29:31 - will automatically be plugged into here
29:33 - so that it's like a full-blown
29:35 - HTML page all right so let's just
29:38 - actually let's go here and copy this
29:40 - that's a little bit faster
29:41 - copy paste paste make sure this is body
29:47 - instead of head all right and boom just
29:51 - like that now this is actually just
29:54 - inheriting from our base which has all
29:56 - of this HTML stuff but now we have the
30:00 - ability to just plug in the stuff to
30:01 - these two blocks so very simple so here
30:03 - now we're gonna do this again we're
30:05 - gonna have title alright oops
30:09 - there we go
30:11 - title and then we're going to call it
30:13 - home page or just home again alright and
30:16 - then the body again we're gonna have
30:19 - each header tags and then just gonna
30:23 - call it home page and save that ok and
30:28 - now let's go back here and refresh it
30:31 - and as you can see it changed to home
30:33 - page again and up here the title has
30:35 - to home all right so that is how
30:39 - templates work at a very basic level
30:41 - we're gonna be going into some other
30:43 - things to just I just want to introduce
30:45 - you guys mainly to putting HTML code
30:48 - into other files which is templates and
30:50 - then this little Jinja syntax and we're
30:52 - actually gonna be getting into more into
30:53 - this stuff into syntax in the next
30:55 - segment we talked about sending
30:58 - variables around from from our code to
31:02 - templates and whatnot in case we have
31:04 - like maybe we have some data in in here
31:06 - and then we want to send it to the HTML
31:09 - so the HTML can display that data in
31:10 - some way something like that okay I
31:12 - always see you guys soon all right it is
31:17 - now officially soon so let's get started
31:19 - so we just learned about the Jinja
31:21 - syntax and stuff right in and rendering
31:24 - templates so using templates and
31:26 - inheriting templates and being able to
31:29 - signify blocks and whatnot using this
31:31 - syntax like extending HTML pretty much
31:34 - to be able to play around with it a
31:38 - little bit more now we're gonna talk
31:40 - about how to actually pass data from
31:42 - here to HTML in case you want to display
31:45 - it or something all right so let's
31:48 - actually create another route another
31:50 - web page and I'm just gonna call this
31:54 - slash posts okay like we're gonna have
31:59 - some blog posts or image posts or
32:00 - something maybe maybe we can make an
32:02 - Instagram clone or something like that
32:03 - but just posts for now okay and then I'm
32:07 - gonna call it posts define posts and
32:11 - then return render template alright and
32:16 - then I'm going to want to make a file
32:19 - called postage do
32:21 - and then I here almond boob that we can
32:24 - inherit everything so I'm just going to
32:26 - copy this over and to here nice get rid
32:30 - of all this stuff
32:33 - I'll actually maybe I'll just leave it
32:35 - in I'll change this to posts okay and
32:38 - then this I'll change to all posts cool
32:46 - and here render template and then we got
32:50 - to fill out the posts HTML unless you
32:54 - see if this is running okay so now that
32:57 - we're here let's just go to posts
33:00 - alright and as you can see all post pops
33:03 - up so it looks like it's working alright
33:06 - so let's go back here and now now let's
33:11 - actually create some dummy data so that
33:14 - we can actually send data from here to
33:16 - the HTML to see how we would do that
33:17 - okay so this is just dummy data you
33:20 - might actually have real data from a
33:22 - real database later on but for now we're
33:24 - just going to imitate it and use dummy
33:26 - data okay
33:26 - let's just go up here and we're just
33:29 - gonna call it posts all right or all
33:32 - posts yeah
33:33 - all posts will work and let's just make
33:37 - this a list okay and it's going to be a
33:39 - list of dictionaries so dictionaries are
33:42 - the way that you want to structure your
33:45 - databases in your your data here because
33:48 - it it's it allows you to easily access
33:51 - all the data in Jinja I'll show you how
33:54 - in just a second
33:55 - so let's just say okay if you have some
33:58 - blog posts we'll just call have like the
34:00 - title of the blog post or the name or
34:02 - whatever and then we'll just say this is
34:04 - post one all right comma and then we can
34:08 - say something like content yeah content
34:11 - and be like this is the content of post
34:19 - lalalalala cool and then let's just copy
34:25 - this so that we have two posts do just
34:30 - like that change is supposed to and post
34:32 - two
34:34 - and call that good all right so we have
34:36 - some dummy data here it's a list of
34:37 - dictionaries and dictionaries is the way
34:39 - we want to structure our data so we have
34:42 - this data called all posts so let's go
34:45 - to where's Ariel posts and now all we're
34:49 - going to do is we are going to define a
34:52 - variable okay let's just call it posts
34:54 - and um we want so we have it's called
34:57 - posts and then we want to pass in data
34:59 - to this so we're just gonna call it all
35:01 - posts you can call us whatever you want
35:03 - but that makes sense so all posts is our
35:07 - data and then now we have a have a
35:09 - variable called posts here okay so um
35:15 - note note this this blue posts right
35:17 - here now will be go to post at HTML we
35:20 - are actually going to have access to all
35:22 - of this data in here by using this name
35:24 - posts so let's go do that and I'll show
35:30 - you how that's done all right so let's
35:32 - go down here and it says all posts but
35:37 - for now I'm just gonna print out one
35:38 - thing first so we have access to posts
35:42 - so we can actually well let me show you
35:45 - this um
35:47 - Jinja to is actually very powerful you
35:48 - can you can um signal you can signify
35:51 - the blocks like this but you can also do
35:54 - other things you can actually have like
35:56 - loops and stuff to loop over data and
35:59 - whatnot so just like just like in Django
36:01 - okay and it's that it's templating
36:05 - engine so we can just say for posts in
36:08 - posts because remember posts is what we
36:12 - call this over here so whatever we call
36:14 - this we have to call that but now we can
36:16 - just um loop over it just like a Python
36:17 - loop alright and all we need to do is
36:21 - close it off just like a well every loop
36:28 - should be closed off and now we have
36:31 - access to each of these posts
36:33 - individually okay so we could actually
36:34 - go in here and do something like h2 you
36:40 - know and then go like
36:43 - Oh posts Oh another thing that I'll show
36:48 - you guys I guess I'll show you right now
36:49 - I might be going a little bit too fast
36:51 - but just follow along so this allows us
36:54 - to do like syntax things like define
36:56 - like blocks and do things like control
37:00 - flow kind of things like Oh like move
37:01 - this chunk of text over here and plug
37:03 - this into here or loop over this this
37:05 - many times in yadda yadda but the if you
37:08 - use double braces like this this is
37:10 - actually printing out something so what
37:13 - I mean by that is the post our dummy
37:16 - data the each post has a title right and
37:19 - it has content so we can actually just
37:21 - go in here and just go like this and use
37:23 - dot notation just like that oops
37:26 - post that title okay and using this
37:29 - double braces like this and post dot
37:31 - title and this will just print out the
37:32 - string of this post one so it'll just
37:36 - print out post one here it'll plug it
37:38 - into this thing here which is very nice
37:43 - so we can do that and then also we have
37:46 - our content that we want to put in so I
37:48 - guess I'll put that in a pete tag yeah
37:50 - that makes the most sense and then same
37:54 - deal we just want to use this and then
37:58 - instead of that it's gonna be post I
37:59 - mean instead of title is gonna be post
38:00 - content all right so let's just see how
38:04 - this goes so I came in here and then
38:08 - we're looping over a variable that we
38:10 - passed in posts and then for each one of
38:12 - those posts that were looping over we're
38:14 - just pulling out some data and then
38:16 - we're printing it okay within a valid
38:19 - HTML tag so let's go back to our page
38:24 - share and refresh it and as you can see
38:26 - these post pop up so it says post one
38:29 - this is the content of post one and post
38:31 - two this is the content of post two
38:33 - because I use h2 tags and P tags so it
38:36 - looks like the formatting is all correct
38:38 - here I'm just really zoomed in still so
38:44 - yeah that's pretty nice and clean
38:48 - another thing you can do is you can use
38:50 - if statements okay so I want to show you
38:52 - guys that let's go
38:56 - I think if I uh yeah yeah I think we can
38:58 - do this so let's say our data might have
39:02 - an author for the blog post but only but
39:05 - it's optional like maybe the author
39:06 - isn't available or something so for here
39:08 - we'll put Erin that's me and then for a
39:12 - post - there will be no author okay this
39:14 - just doesn't exist so let's go to posts
39:16 - and now we can say if there's a post
39:20 - here then we also want to print out the
39:23 - title alright so we could just do this
39:26 - and then just try to print it out there
39:35 - it is so post dot author alright just
39:41 - like that and why don't we just give
39:43 - that give this try and see what happens
39:45 - oops what so it's complaining about
39:51 - something one second I think yeah I
39:53 - didn't add a comma here because I added
39:55 - this thing to the dictionary let's try
39:58 - again let's restart the server and now
40:01 - let's go back to here and refresh it now
40:05 - so it worked it just it just ignored the
40:10 - data that wasn't there so it didn't
40:11 - break anything which is cool but what if
40:14 - we wanted to actually like pick out if
40:16 - there's a author or not then it's
40:18 - probably good to check and then you can
40:19 - say like oh it's by this person by this
40:22 - author or by author unknown or something
40:24 - like that so let's just put a check in
40:27 - there for demonstration purposes to show
40:29 - you how it's done
40:30 - so we're just gonna say if oops if
40:36 - something exists so if post dot author
40:39 - exists all right if that exists then you
40:45 - want to put this here and actually we're
40:47 - gonna go like this then um display by
40:50 - author otherwise the way you do that is
40:55 - just else big surprise then maybe we can
41:02 - do something like this
41:05 - by
41:07 - ah na or the author unknown is actually
41:12 - better now let's just put na not
41:15 - available because it's literally not
41:17 - available cool and then to close off a
41:19 - if statement then you just put and if
41:22 - just like that okay so this is a little
41:24 - statement here checking if there's an
41:26 - author and then displaying it and then
41:28 - if not then just displaying na and let's
41:31 - just run this and see what happens go
41:33 - over here refresh this page and as you
41:36 - can see I made updated and since there's
41:39 - the the first blog post have been off
41:41 - has an author then it displays it out
41:43 - and the second one because it doesn't it
41:45 - just displays na alright so this is cool
41:49 - this is very very elementary rudimentary
41:51 - kind of blog web page right now oh we
41:53 - have our posts just two posts right now
41:55 - but we can really clean this up with CSS
41:58 - and stuff in bootstrap later on um when
42:00 - we actually do a project but all right
42:03 - now I'm just showing you these syntax
42:05 - and how all this stuff works okay and
42:07 - there's ginger stuff so that is pretty
42:10 - much it for getting sending variables
42:13 - from our flask app to our front in using
42:18 - templates and stuff and utilizing those
42:23 - ginger control flow statements to get
42:27 - crafty with displaying that data so like
42:30 - actually let's go back here really quick
42:31 - and go to inspect so we can actually see
42:34 - the HTML code so if you look here this
42:37 - is the HTML code that was generated here
42:39 - on this web page and if you look back
42:41 - this is all we actually have in the file
42:43 - so remember we had the extends based on
42:45 - HTML so we have all this HTML so there's
42:47 - like doctype HTML let's make sure that's
42:49 - there yep there's doctype there's all
42:51 - this stuff there's all this crazy head
42:52 - stuff but the title is posts which is
42:57 - what we added in here from the block and
42:59 - then block body is all down here and
43:02 - then let's see if we can find post one
43:04 - yup post one is here with the author and
43:06 - stuff and then post two is right here
43:09 - so pretty cool this all this HTML was
43:12 - generated from all of our ginger with
43:15 - the loops like it was looping over and
43:16 - generating HTML on the fly and the
43:19 - blocks were all being
43:20 - plugged into our basic HTML so that's
43:23 - pretty much how templating works in
43:24 - flask okay there's more you can do even
43:26 - but those are the basics and most
43:28 - important things that you need to know
43:29 - first and yeah I think we should start
43:33 - getting into databases or something next
43:35 - or form submission or something like
43:36 - that but some more interesting more
43:37 - interesting things okay that kind of
43:39 - wraps up templates for now and I'll see
43:42 - you guys in a bit all right welcome back
43:44 - so we just went over templates in flask
43:47 - and how to get your HTML files into your
43:49 - flask program alright and we also went
43:52 - over a little bit of Jinja to using
43:55 - these percent braces and these double
43:57 - braces to be able to import variables
44:00 - into our front-end HTML so that we can
44:03 - have a dynamic front-end pretty much
44:04 - okay dynamically generated and now we're
44:08 - going to be moving on to how to get your
44:10 - static files into your flask program as
44:13 - well okay so static files are basically
44:15 - your styling sheets and your JavaScript
44:18 - so your CSS and your JavaScript these
44:20 - are static just because we're statically
44:21 - loaded every time they don't change
44:23 - dynamically like the HTML files might
44:25 - want in yada yada so let's just create a
44:29 - new folder in here okay called static
44:32 - and then within here let's create a
44:34 - folder called CSS and then with an
44:37 - earless code create a file called main
44:39 - CSS okay so you need this directory
44:41 - structure static and then CSS and they
44:43 - mean that CSS to keep it organized and
44:45 - here you we're just confusing a example
44:48 - styling sheet so it's not gonna be crazy
44:50 - we're just gonna very very simple just
44:52 - change the font so font family mol
44:55 - changes to Helvetica okay I saved that
44:59 - that's good enough for now instead of
45:01 - this Times New Roman font I'm just gonna
45:03 - change it but let's say we want to apply
45:05 - this CSS to everything on our web page
45:07 - okay so since everything is inheriting
45:09 - from based on HTML we can I just go into
45:11 - here and pop in the static file linking
45:17 - here so we just put in a link tag and
45:19 - I'm gonna say it's a stylesheet
45:21 - alright and then the file location will
45:25 - just be static slash CSS slash main dot
45:31 - CSS just like that
45:33 - so now this is going to be applied
45:34 - everywhere since we're changing the body
45:36 - tag this is just gonna change the font
45:38 - of everything in the body on every web
45:40 - page I think I saved it so it should be
45:43 - running cuz we're in debug mode it
45:44 - automatically updated let's go back here
45:46 - let's hit refresh and as you can see it
45:48 - changed to Helvetica okay from whatever
45:50 - Times New Roman font we had before and
45:52 - if we go into inspect and we go down to
45:56 - here then we can see the font family is
45:58 - Helvetica and you can toggle on and off
45:59 - here pretty much our change so that's
46:05 - pretty much it on how to link in your
46:08 - CSS files it'll be exactly the same for
46:10 - JavaScript okay you would just create a
46:13 - oops nope you would just create a new
46:19 - folder in here called j/s and then again
46:22 - new file main J s and then yada yada
46:25 - type out your JavaScript link it in here
46:27 - just like you did the CSS and that's how
46:29 - you do your static linking however there
46:33 - is one thing oh we do we can link it
46:36 - like this as you saw like it's working
46:38 - but a better way a better practice of
46:40 - doing it is to use a method called URL
46:42 - for so this will just more robust in the
46:46 - getting the static file location and
46:51 - it's just gonna be like this okay
46:54 - URL for so instead of writing out the
46:56 - entire static the URL path like word
47:00 - like character for character we're gonna
47:02 - be using this ginger syntax again so to
47:05 - get the gist syntax in here it's just
47:07 - going to plug in something so we're
47:09 - gonna call some code and then whatever
47:10 - this code returns we're going to plug
47:12 - into here that's what ginger does
47:14 - alright so URL 4 is actually gonna
47:16 - return the location of a static file and
47:18 - then it's just going to print it out as
47:20 - a string or I plug it in as a string
47:22 - into our HTML here so the way we do that
47:26 - is we define the the top-level directory
47:30 - since this is a static file just gonna
47:32 - be static and then within here and then
47:34 - you can actually define the file name
47:36 - further okay so the way we do this oops
47:39 - don't use double quotes because we're
47:40 - gonna use them it then we're just going
47:43 - to put CSS slash main CSS
47:46 - all right and now when you run this this
47:49 - is going to autocomplete or it's going
47:51 - to evaluate to the actual complete path
47:55 - of this and then it's just going to be
47:57 - plugged in via Jinja so when we go back
47:59 - here back to our webpage then we can see
48:04 - that when we refresh it that um it stays
48:06 - the same well just to prove it to you
48:07 - let me just I'll comment this out so you
48:09 - can see that it's actually being read so
48:12 - when we comment this out okay
48:14 - and then we refresh this it goes back to
48:16 - what it was before but then when we put
48:19 - it back in okay with this new format let
48:22 - me save it and we go back here we can
48:24 - see that the font change still takes
48:27 - place okay so that's how you should link
48:30 - things your static files in in flask
48:35 - using URL for and this Jinja syntax
48:41 - thing okay so that's how you link your
48:42 - static files I'll see you guys soon to
48:45 - go over databases
48:48 - [Music]
48:54 - all right you guys so now we're gonna go
48:56 - over to databases alright so I said
48:58 - earlier that flax doesn't actually come
49:00 - with a database all included with it
49:02 - when you download it which is true
49:04 - because they want to keep a lightweight
49:05 - so if you want a database then we have
49:07 - to actually use an external third-party
49:09 - one so there's a school little library
49:12 - that has interoperability with flask
49:15 - called
49:15 - SQL alchemy you never heard of it is
49:18 - just kind of like a um interface to
49:21 - allow us to interact with databases like
49:25 - sequel Lite or my sequel or Postgres or
49:28 - something from application like flask so
49:33 - let's just get into it and I'll show you
49:35 - how it works okay so first you're gonna
49:37 - need to actually install it so go don't
49:40 - go down to your terminal alright and
49:41 - then just run pip install flask dot -
49:48 - SQL alchemy just like that just spell it
49:51 - right yeah so run that and it should
49:55 - download I'll already have it downloaded
49:57 - so it didn't actually download it'll
49:59 - take like 10 seconds having issues again
50:01 - you could use again you could use oops
50:04 - sudo just run sudo before the whole
50:06 - command and then all that might fix it
50:09 - all but now that it's installed let's
50:12 - just get into the code okay so the first
50:13 - thing you're gonna have to do is
50:14 - obviously import it so we're just going
50:18 - to run umm what is it called from flask
50:24 - sq alchemy import SQL alchemy alright
50:35 - yeah it should be import SQL alchemy
50:38 - just like that so now that we have that
50:43 - now we actually just start setting up
50:44 - our database okay so the first thing
50:46 - we're gonna do is we need to actually
50:49 - tell us or tell flask our flask app
50:54 - where our database is going to be stored
50:55 - okay so that's done through a
50:57 - configuration so we actually just call
50:59 - config on our
51:00 - scout okay and then there is a field in
51:03 - that configuration file called SQL
51:05 - alchemy underscore database underscore
51:10 - URI which is just a path to where the
51:14 - database is stored okay
51:15 - so we're gonna be using SQLite because
51:20 - it's just easy for the when we're in
51:22 - development mode and then if you
51:24 - actually in production mode then you can
51:25 - use a different database if you want but
51:28 - the really nice thing about SQL like
51:29 - alchemy is that it allows us to use any
51:35 - database we like and um it's as simple
51:38 - as just changing the route to a
51:41 - different database and then pretty much
51:42 - all of the query and stuff to our
51:44 - database is the same so SQL alchemy is
51:46 - like a nice interface and it allows us
51:48 - to use the same code pretty much but we
51:50 - can actually hot-swap in my sequel or
51:52 - Postgres later when we're act in actual
51:55 - production mode but we're just gonna use
51:56 - SQLite for now just because it's simple
51:58 - and it's easy and SQL Lite stores the
52:02 - database locally in a file so we're
52:06 - actually gonna have our database stored
52:07 - in here in a file right down here umm
52:09 - we'll do that in a few seconds you'll
52:10 - see but that's why we're gonna use
52:13 - SQLite okay so once you have your
52:18 - database chosen okay oops let me disable
52:23 - this the emoji thing but once you have
52:27 - your database chosen then you just need
52:32 - to define the path of where it's going
52:34 - to be stored okay so you can use three
52:38 - slashes or four slashes on the actually
52:40 - two different things this means it's
52:41 - gonna be a relative path so wherever we
52:43 - put it it's gonna be relative to this
52:44 - current file app dot pi or if I put four
52:48 - slashes then this is a absolute path and
52:50 - I can go from the root directory or
52:52 - something but we're just gonna do
52:52 - relative that's what you should be doing
52:54 - it's it's a it's better in cleaner but
52:57 - we're just gonna call this post's dot DB
52:59 - okay so we're gonna create a file a
53:01 - database file called posts and this is
53:03 - actually just going to pop up right
53:06 - parallel to this file so it's going to
53:07 - be right down here okay so that's how
53:11 - you do that now now that we have that
53:13 - now we can actually
53:14 - our database so deep or I'm just gonna
53:16 - call it DB equals SQL alchemy alright
53:21 - and then we just pop an app like that so
53:23 - now we have a database and SQL alchemy
53:26 - took our app our flask app and is now
53:28 - linked them together okay so that's
53:33 - pretty much all of the setup for the
53:34 - database now we can actually get into
53:36 - designing the database okay so if you
53:39 - guys are familiar with
53:40 - model--view--controller stuff the
53:42 - structure for web development pretty
53:45 - much then then we're gonna be doing our
53:47 - models right now if you don't know
53:48 - models are pretty much it's just a way
53:50 - to structure the data in your database
53:53 - so it's like okay if if we're in a
53:55 - database and we're making a blog then
53:57 - each blog is gonna have a title and then
54:00 - it's gonna have an author and it's gonna
54:01 - have some text that is actually in the
54:02 - blog post and that's how those are the
54:06 - kind of things you'd need so like in
54:07 - your database you're gonna need a title
54:09 - field a content field in an author field
54:10 - so we're gonna model that in code so if
54:13 - you're coming from Django then this
54:14 - should be very straightforward but yeah
54:17 - let's just create some models okay so
54:18 - the one we're gonna do or you create
54:20 - with classes by the way you you kinda
54:23 - just define a class and then each each
54:26 - class variable is considered like a
54:28 - piece of data in your database so I'm
54:33 - just gonna call this class blog post
54:34 - okay and it needs to inherit from model
54:37 - all right our database model because
54:41 - making the model and now we just need to
54:43 - go through all the different things that
54:44 - a blog post might have okay so the first
54:46 - thing that many most models have or
54:48 - pretty much all models should have is an
54:50 - ID okay and um oh we have to create
54:55 - columns okay so the way we do it in SQ
54:58 - alchemy is we create columns in the
55:01 - table so a database is really just like
55:03 - a big table okay and then each column is
55:05 - like the one of the different attributes
55:07 - and then each row is like another each
55:09 - row is a separate is a separate blog
55:11 - post and each column is a different
55:12 - class variable so after you redefine a
55:17 - column then you have to give the data
55:19 - type so this is going to be an integer
55:21 - alright and then we're gonna set this to
55:24 - primary key to be true alright and what
55:27 - that means is prime
55:28 - he is just it just means that this ID is
55:31 - going to be the main distinguisher
55:33 - between different blog posts because
55:34 - this ID will always be unique even if
55:36 - you have duplicate blog on blog posts
55:38 - and blah blah blah this will always be
55:40 - the distinguishing factor so that's what
55:43 - we call the primary key it's like an in
55:44 - dictionary like the key needs to be
55:46 - unique so this idea will always be
55:47 - unique all right what else we need we
55:50 - need a title okay so I'm just gonna go
55:52 - through these pretty quickly it's pretty
55:55 - much the same thing it's just we change
55:56 - the data type so for title then we want
55:59 - this to be string okay and we can
56:02 - actually limit this to a certain amount
56:04 - of characters so I'm just gonna put a
56:05 - hundred what first ring you actually
56:07 - have to I believe I don't know what the
56:08 - default is but I think you need to put a
56:11 - number in here so we're just gonna say
56:12 - title can be up to 100 characters and
56:14 - then I'm gonna set this um nullable
56:17 - equal to false all this means is that
56:20 - this field is required okay
56:22 - this field cannot be null cannot be like
56:26 - nothing so we're setting this to false
56:28 - which means this has to be here okay
56:32 - what else we need we need content okay
56:34 - so the content of the blog post is going
56:36 - to be column again if I can type it
56:42 - correctly and this time it's not gonna
56:44 - be string but it's just gonna be text
56:46 - okay and this has no length to it it
56:48 - just goes for as long as it once and
56:49 - then this is also gonna be required for
56:52 - a blog post okay cuz you don't an empty
56:54 - blog post next we're gonna have author
56:57 - all right we're just creating a model
56:59 - here for a blog post you guys haven't
57:01 - caught on to that yet column again for
57:06 - like the third fourth time and then
57:08 - string and let's just limit it to 20
57:11 - because I don't think most people's
57:12 - names are longer than 20 characters so
57:13 - that should be good enough and then
57:15 - nullable equals false like there always
57:17 - needs to be um some kind of author
57:20 - listed however if there's no author
57:23 - actually written down like we had before
57:26 - and our dummy data like this if there's
57:29 - nothing there then I want I want it to
57:31 - autocomplete - oops
57:34 - then I wanted to autocomplete to n/a
57:37 - okay so all we can do I mean all we need
57:40 - to do to do that is you can actually
57:41 - just set a
57:42 - fault so a default value for that would
57:45 - just be an a and so this is saying that
57:48 - our author is required but if it isn't
57:51 - actually there just set it to the
57:53 - default so that's handy okay and last
57:57 - thing I think we'll do date post it okay
58:00 - or date created or whatever and again DB
58:04 - dot column and DB dot date time so
58:11 - actually this this is a different data
58:12 - type this is a date time because it
58:14 - needs to be a date obviously and
58:16 - nullable equals false and again we're
58:21 - gonna set the default to the current
58:26 - time okay so UTC now you to see is just
58:30 - the time zone you should be using
58:32 - because I believe it's just a standard
58:35 - so always UTC now but we actually do
58:38 - need to import date time so let's go up
58:40 - here and say import or from date time
58:45 - import date time god and default and I
58:53 - think that's it for the model oh we need
58:55 - to actually do one more thing before we
58:57 - do that I just want to point out that
58:59 - what we're doing is we're creating a
59:01 - real database now
59:02 - okay versus using this dummy data which
59:04 - we did earlier but we're gonna be um
59:06 - having it look the same so I'm have
59:07 - title that's where I got all this model
59:09 - stuff from okay I have a title I have
59:12 - content and I have author and pretty
59:16 - much raised can be using this database
59:17 - to replace this dummy data and do the
59:20 - same exact thing of going through here
59:22 - sending the sending all the posts to our
59:25 - front-end and then printing out on our
59:28 - web page like this okay so very last
59:33 - thing we're gonna do in our model is we
59:35 - want to define a method here okay and it
59:39 - is actually called um underscore
59:42 - underscore that's two underscores our
59:44 - epr underscore underscore I don't
59:46 - actually know what that stands for
59:47 - okay I may be like reprint or something
59:50 - but pretty much what this this function
59:52 - is going to do
59:54 - is or method I always get those mixed up
59:56 - but what this this function here it's
60:01 - going to print out whenever we create a
60:04 - new blog post okay and it's kind of like
60:06 - tabs it like a it gives it like a just
60:09 - something the display to the screen
60:11 - after we created so that we can
60:12 - recognize it so we're just gonna pop in
60:16 - this very simple thing I'm just going to
60:19 - say blog post and then I'm just going to
60:23 - add the ID I'm assuming you guys know
60:28 - object or any programming okay you need
60:30 - to know that if you don't then please go
60:32 - learn that and come back okay and oh I
60:37 - believe in the cast this to a string
60:39 - yeah cuz that's an int so it's just
60:42 - gonna say blog post and then the ID
60:44 - because that's this is always unique so
60:45 - when we create it then in our database
60:47 - whenever we're looking at it then we'll
60:48 - be able to see the ID and that it was
60:50 - created but that's pretty much it for
60:52 - setting up a database I mean we just
60:54 - like downloaded it and created the model
60:56 - and got it all set up and that's pretty
60:58 - much all the backend stuff and then next
61:00 - what we're gonna go over is actually
61:02 - hooking this up to our front-end so that
61:05 - we can input date it to our database
61:09 - input data to our database and have it
61:12 - display on our web page like on the fly
61:14 - whenever we add new stuff in refresh the
61:16 - page we want the the data in the
61:18 - database to be reflected on the web page
61:19 - so we're gonna be hooking up to our
61:20 - front end alright so I'll see you guys
61:21 - soon we're actually I forgot real quick
61:26 - before we go to the front end we
61:28 - actually need to create our database so
61:30 - we designed it and everything like we
61:31 - have it set up and we defined where you
61:33 - want it to be and then we have our whole
61:35 - model on everything and blah blah was
61:36 - gonna print out when we create stuff but
61:38 - now we actually want to build this
61:39 - database and generate this file okay
61:41 - this posts that database file so that's
61:43 - um as simple as just going down to our
61:46 - terminal okay and then let's just start
61:49 - a Python environment and navigate to
61:53 - this directory the same one here but it
61:57 - should be there by default alright and
61:58 - then all we need to do is say from app
62:01 - from our app you want to import the
62:03 - database that we just created okay this
62:05 - database up here the SQL I'll come you
62:07 - up
62:08 - and yes some of this stuff will print
62:11 - out this is not important it always
62:13 - prints out pretty much and then once
62:16 - they're here you just want to print DB
62:18 - dot create all alright and what this
62:24 - does is is going to go through our model
62:27 - on everything and then go through here
62:28 - in the configuration and it's going to
62:31 - create this database with this model in
62:33 - mind okay with all this code this class
62:35 - in mind and you're actually gonna see
62:37 - this database post database pop up down
62:40 - here so let's run this and as you can
62:43 - see it created our post that database
62:45 - file in the same directory because
62:47 - remember we're making we want our days
62:48 - to be relative to this and in the same
62:52 - directory as our flask app ok so now now
62:56 - we'll be going on to the front-end
62:59 - actually I changed my mind surprise
63:01 - right before we go to the front-end
63:03 - stuff I do want to just demo this a
63:05 - little bit so we built the database and
63:07 - it got built over here but now in this
63:10 - little environment let's actually just
63:11 - add a couple things to the database and
63:12 - then um see if they were input in okay
63:17 - so after we create the database here
63:19 - I'm sorry created we can go ahead and
63:22 - actually add some entries to it but
63:26 - before we do that we have to import the
63:30 - models okay so the our model is blog
63:32 - post so we're gonna have to say from app
63:34 - again import blog post this time already
63:37 - have we already have the database
63:38 - imported here so once we have both of
63:42 - these then we're good to go so we have
63:43 - our database and we have the model that
63:44 - we want to be able to input so after
63:48 - you've done that I'm gonna show you guys
63:50 - how to print out all blog posts or or of
63:54 - any model in the database so in a
63:55 - database can have mini models inside and
63:57 - ours we only have one just blog post but
64:00 - you might have like blog post you might
64:01 - have like authors you might have like
64:03 - images and a bunch of other things but
64:05 - you can call this thing called query so
64:07 - we're just gonna query it and then say
64:09 - all so this this is just saying spit all
64:12 - of the blog posts back to me all of them
64:15 - in a list
64:16 - so when I run that you can see that it's
64:18 - an empty list because we haven't added
64:19 - anything to the database yet oh we
64:21 - haven't added any blog post to the
64:22 - database so adding to the databases as
64:25 - simple as pretty much just doing this
64:27 - okay so database dot session so our
64:31 - current session and then just calling
64:35 - add alright and then in here all we need
64:38 - to put is a new model type so a new blog
64:40 - post or whatever other model we have
64:42 - when our case is blog post so we're just
64:44 - going to put a blog post and now we need
64:47 - to create the blog post so let's look at
64:50 - our model here up here so there's a
64:52 - title alright title is let's just say
64:56 - log post
64:58 - oops that's wrong blog post one alright
65:04 - second would be content alright and
65:08 - we'll just say content of blog post one
65:14 - again same thing and then after that
65:18 - then we need author alright equals Aaron
65:23 - and date posted we'll we'll just let the
65:28 - default happen okay so as soon as it's
65:31 - created it is when it is considered
65:32 - posted so let's hit that and didn't
65:36 - complain it all cool so now let's go
65:38 - back up to here and say a blog post
65:40 - query all and as you can see blog post
65:42 - one pops up okay
65:43 - and it says blog post one because
65:45 - whenever we create a new blog post we
65:48 - said we want to print blog post and then
65:51 - have the idea after so the idea is one
65:53 - in this case and then if you run this
65:55 - command again and make another another
66:02 - blog post in the database then I can
66:05 - change let me just change the numbers
66:07 - quick like that and then print them all
66:12 - out again and as you can see now there's
66:13 - two in the database okay and these
66:16 - changes are actually happening in this
66:17 - database file so like if I completely
66:19 - like completely restart my entire
66:21 - computer and close all this and have
66:23 - different terminal sessions and stuff
66:24 - these changes and this data will be
66:28 - preserved in this file no matter what
66:30 - even if I like move this file to a
66:31 - different computer okay that's why it's
66:33 - a database so it's it's pretty cool
66:36 - now let me just because this is kind of
66:38 - cryptic it doesn't really give us much
66:39 - information let's dig into each one a
66:43 - little bit okay so I can say blog posts
66:48 - that query dot all right but it's a list
66:50 - so if I do this then I'll just get
66:52 - logged post one and from here then I can
66:54 - actually just get the different fields
67:00 - just by calling dot here okay
67:03 - so let's just put title alright title
67:07 - will be blog post one and maybe let's
67:10 - put content let's see the content
67:13 - content blog post one lalalalala and the
67:17 - author okay would be me and let's see
67:21 - date posted all right
67:24 - date time oh we could clean up that
67:26 - formatting but point is that the date
67:28 - time object is in there correctly okay
67:30 - well we can clean it up long later if
67:32 - we're actually doing the front end stuff
67:34 - but as long as the date is in there
67:35 - that's what you want you have all the
67:36 - data on here that you need year month
67:39 - day hour minute second millisecond and
67:45 - yeah let's just check the second one as
67:49 - well they posted a little bit later
67:51 - that's right and then I just want to
67:53 - check the author to make sure it's in a
67:54 - to make sure the default is working and
67:56 - it's working correctly okay so that's
67:58 - just a little demo of our database now
68:00 - all now that you see a little bit of how
68:01 - the code works we're actually gonna be
68:02 - using this kind of code these query
68:05 - things and all these and these uh the ad
68:09 - ad and all that stuff into our code all
68:14 - right into our actual code up here and
68:15 - then have it running and then we'll
68:17 - connect our front-end okay I'm done
68:18 - lying now so we're gonna go to the
68:19 - front-end now alright so now we're gonna
68:24 - hook up this database to our front-end
68:25 - if you remember from earlier we this was
68:28 - the the web page that how it has a lot
68:31 - of our posts on it and we have two of
68:35 - these posts in here but from our dummy
68:37 - data right our dummy duty here what we
68:40 - want this to do is you want all the data
68:41 - here to reflect
68:42 - whatever is in our database so like it
68:44 - goes into the database and reads it all
68:45 - and then displays it all here and then
68:48 - also I want to have a little section
68:50 - here at the top where you can put in a
68:53 - new title like like to make a new blog
68:56 - post you can input a title you can put
68:57 - in put some text and then like click
68:59 - like a submit or a post button and then
69:01 - have that added to the database and then
69:02 - automatically added to the end of this
69:04 - list
69:05 - I already have this list ordered in um
69:09 - order of date posted okay so let's get
69:14 - started alright um so the first thing
69:18 - we're gonna need to do is like I said
69:20 - before if we want to be able to add
69:24 - things to this webpage like be able to
69:26 - post something um if we're gonna fill
69:28 - out a form and then send it to the
69:30 - database then we need to actually allow
69:31 - post requests on this web page okay so
69:34 - if we go here and I believe it is slash
69:37 - posts here at slash posts if nothing is
69:40 - listed then the only request that is
69:43 - allowed is get by default so it would
69:46 - look like this methods equals get that's
69:51 - by default but we also want to allow
69:53 - post okay so now I can have get and post
69:56 - and now we can actually have a forum
69:58 - that we can fill out and post to our
70:00 - database from that web page so now this
70:03 - is allowed alright so that's the first
70:05 - step short but very crucial and now now
70:09 - we're gonna want to some loud stuff
70:12 - going on outside now we're now we want
70:15 - to actually go to the front end and
70:17 - actually add in this form okay so let's
70:22 - just go to let's just add it right after
70:26 - all posts and before all the posts are
70:28 - listed let's just go right here cool
70:32 - let's just add a couple nice line breaks
70:39 - to keep it by itself these are just
70:42 - horizontal lines across the whole
70:43 - webpage it's just gonna keep it nice and
70:46 - it'll look nicer
70:47 - alright so let's add in a header okay so
70:50 - this will be create new blog posts
70:56 - and capitalize this correctly all right
71:01 - and then now now we're just gonna have a
71:04 - forum all right so the action which is
71:09 - just the URL that we want to be at is
71:12 - gonna be posts okay so that's where it's
71:15 - gonna be posted from and the method is
71:17 - going to be post all right and you can
71:23 - close off this tag and now we can put
71:25 - all this stuff we want inside of our
71:26 - forum so this forum whatever we put in
71:28 - here when we when we hit the submit
71:29 - button then everything in this forum is
71:31 - going to be sent to our database all
71:32 - right
71:33 - so let's have a title all right and this
71:37 - will be input and the type will be 'text
71:41 - just putting in text dang it
71:44 - text and then also the name and the ID
71:50 - will both be title okay so this is just
71:53 - so we can refer to this input thing as
71:56 - title and then we know in the database
71:58 - like what like worth to put from where
72:01 - to put it in database from each form so
72:02 - like from this in books inbox thing I
72:05 - mean from this input thing then we're
72:06 - gonna have we know we're gonna put this
72:08 - into the title part of the database
72:10 - that's why we need these here okay let's
72:13 - just put a line break and then let's put
72:18 - post so that's where the post text is
72:21 - gonna go and again input type equals
72:25 - text and name equals content and ID
72:33 - equals content all right same deal now
72:38 - the line break and last one input
72:44 - input type equals submit button so this
72:47 - is how we're gonna submit our form you
72:48 - guys should know this oops if you know
72:51 - HTML equals post so that's the what's
72:58 - gonna be displayed on the button and
73:00 - that should be the entire form okay
73:03 - that's just plugging that into the front
73:06 - end so let's get this running again
73:09 - let's quit out of this there we go out
73:18 - of that Python environment get the flash
73:21 - server up and running again come back
73:22 - here Oh was why is it not working well I
73:34 - find out why it's not working oh I
73:36 - should put this in the wrong spot silly
73:38 - me
73:38 - so let's just copy cut that out and
73:40 - actually put it in here okay it was
73:43 - supposed to be within the body block
73:46 - here okay I put it between the two
73:47 - blocks in here it's supposed to go
73:49 - inside this block right after all posts
73:52 - okay
73:52 - so let's I copied all that and let's
73:56 - indent it save it server should update
73:59 - automatically come back here now I want
74:01 - to refresh boom there we go that's
74:03 - better so here's the little lines that I
74:06 - was talking about we have the title and
74:08 - then we have like very simple text and
74:09 - some input fields and post okay I'm
74:13 - gonna hit this nothing happens okay
74:15 - because we haven't decided what to do
74:17 - when we submit the form
74:18 - so just I'll redirect here by default
74:21 - okay to itself so now that we have the
74:27 - form completed now all we need to do is
74:30 - hook up the form so when we fill it out
74:34 - and hit submit that it actually goes to
74:36 - the database and it's saved to the
74:38 - database and then when it um when it
74:40 - saves the database then it is
74:42 - automatically on this entire list is
74:44 - automatically reread from the database
74:46 - and repopulated to to show the new blog
74:49 - post that we just created so let's go to
74:52 - our code again come down to posts
74:57 - all right and then we are going to want
74:59 - to add in a little check here within
75:03 - this function here and we basically just
75:05 - want to say if requests dot method
75:11 - equals post all right then
75:16 - add it to the database we're actually
75:19 - gonna need to include requests okay up
75:22 - here so from flask import flask we're in
75:24 - a template and request alright here we
75:31 - are
75:32 - so if the method is post then what we
75:36 - want to do is actually read all the data
75:38 - from the form and then send all that
75:40 - data to the database okay and then save
75:43 - it to the database before redirecting
75:47 - redirecting back to itself and showing
75:50 - the new blog post in that entire list
75:52 - okay so this is just gonna be pretty
75:54 - simple there's gonna be a title right
75:57 - because there's a title field so we need
75:58 - title and post I mean in content so it's
76:01 - post title will just be be request read
76:05 - from the form and this will just be
76:08 - title okay and the content will be
76:12 - request a form and this will be content
76:17 - all right and then we'll just create a
76:22 - new post from these two things okay a
76:24 - new blog post object and the title will
76:30 - be the post title okay and content will
76:36 - be the post content and author will be
76:43 - Erin okay and the date created would
76:50 - just be auto-generated by default all
76:53 - right so now that we have oops needs to
76:56 - be equals there so now that we have our
76:57 - new post object okay our new blog post
77:00 - object we can now add this to the
77:02 - database okay very very simple so we did
77:05 - this before in the down here when we
77:07 - were playing on the database it's gonna
77:08 - be the exact
77:09 - the same we're just gonna call DB dot
77:11 - session dot add new post okay and what
77:19 - that's gonna do is it's going to add
77:21 - this to the database okay in this
77:25 - current session one thing I think I
77:27 - forgot to actually show down there when
77:29 - we were playing with the database is
77:31 - after you add something to the database
77:33 - it's actually only added in the current
77:35 - set in the current session I said if you
77:38 - like move this database to like a
77:39 - different file or you restart your
77:41 - computer and this and that that the
77:43 - change would still be there that is not
77:44 - true because you only added to it um in
77:46 - this session well you actually have to
77:48 - do is you also have to take whatever's
77:51 - in this session currently and commit it
77:53 - to the database completely so only after
77:56 - you call commit will it actually be
77:58 - saved here permanently and then when you
77:59 - move the database to a different
78:01 - computer or restart or blah blah blah
78:02 - then it'll still be there but if you add
78:04 - so if you add it it'll be there only for
78:06 - like this current runtime but then in
78:10 - the committed to make a permit alright
78:12 - so after we create this stuff by getting
78:15 - the content from the form the data from
78:17 - the form and then creating it and then
78:18 - committee and then all we have to do is
78:20 - a simple redirect okay redirect and we
78:25 - just want to redirect back to the same
78:30 - page so that it goes there and then it
78:33 - just gets it and then since it's in the
78:35 - database and it's gonna be read from the
78:36 - database and then new the new post will
78:37 - be there alright and else if we are not
78:42 - posting which means the only other
78:44 - option is we're getting then we just
78:46 - want to display the blog posts as normal
78:50 - okay without adding anything so the way
78:54 - you can do this if you actually want to
78:56 - read from the database remember before
78:57 - we're using dummy data um all posts we
79:00 - are actually getting this from this
79:01 - dictionary up here I called all posts um
79:03 - I can actually just delete this but I'll
79:05 - just collapse it for now all posts we're
79:08 - just gonna overwrite this so that would
79:10 - actually have to change anything okay so
79:11 - all posts I'm just going to overwrite
79:14 - this and then what we're gonna be doing
79:16 - here is actually getting all of the blog
79:18 - posts from the database so I'm
79:22 - that's just query and then we can just
79:23 - call all okay and that would actually
79:25 - work but one other little thing I want
79:28 - to do instead of just calling all is you
79:30 - can actually what we can leave that
79:32 - there you can actually just pop in
79:34 - another call here called I believe order
79:39 - by okay and then we can decide what you
79:43 - want to order all your blog post by and
79:46 - what we're gonna board or ours by is the
79:50 - date created okay so you can just call
79:53 - it or the date posted I think yeah date
79:55 - posted so we're just gonna be getting
79:59 - all of the blog posts reading all of
80:01 - them from the database ordering them by
80:03 - the date they were posted and then
80:06 - simply sending that to our front end
80:08 - like we were before all right so let's
80:13 - refresh this or I might break actually
80:18 - so this is I think it's actually ready
80:23 - to go so let's let's just try to go here
80:25 - refresh this click continue
80:28 - oh yeah the server isn't running why
80:31 - isn't it running I knew something was
80:35 - off all right let's try it again
80:42 - global name blog posts is not defined it
80:46 - looks like a quick bug let me let me fix
80:47 - this all posts equal blog post there's
80:54 - no s at the end all right now let's try
80:57 - it there we go
81:00 - so as you can see it the changes took
81:05 - place because this is all here and our
81:07 - database is currently empty so there are
81:09 - no blog posts here okay but if we type
81:12 - in I suppose actually we should have put
81:17 - a third one called author so like you
81:19 - could put like title and then post and
81:21 - then have author I just hard-coded in an
81:23 - errand for now but you guys get the idea
81:24 - okay this is Flast not a HTML crash
81:28 - course so title would you say first blog
81:32 - post
81:34 - and the post would be hey you guys I
81:40 - just wrote my first blog post thanks for
81:49 - reading cool and then let's hit post
81:57 - redirect okay again I did not include
82:02 - redirect okay so you need to import that
82:05 - as well along with request now let's try
82:07 - again and post and there we go so it
82:11 - worked um oh and it looks like the forum
82:18 - was saved even though it didn't send
82:20 - through it actually sent twice so maybe
82:23 - we could fix that but point is it seems
82:26 - like it's working okay let's add a
82:27 - second one so second blog post this is
82:33 - my second one and hit post again and
82:37 - there we go
82:38 - it just added to the end there okay
82:40 - second blog post by author this is my
82:43 - second one yadda yadda yadda and so yeah
82:47 - so we have our database hooked up to our
82:49 - front end now and that's the basic
82:51 - framework of course we can use CSS to
82:53 - clean this up make it better and have a
82:55 - lot better website design and all that
82:57 - but the back end and the the backbone of
83:00 - all this stuff is is working alright so
83:03 - that is it for databases for now we'll
83:06 - also go over like deleting deleting blog
83:08 - posts and updating blog posts um a
83:13 - little bit later because we already um
83:15 - for a further for a crud application
83:17 - I'll create read update delete we've
83:19 - already done create and read here but
83:21 - yeah we'll go over that later and then
83:23 - there's actually a lot of different
83:23 - other things you can do to read from
83:26 - your database like there's other ways
83:27 - you can order it you can filter it you
83:30 - can get all of them you can get like the
83:31 - first one and all that stuff so we'll go
83:33 - over all of that shortly but all you
83:35 - guys get the basics for now alright
83:40 - nothing is going according to plan I'm
83:41 - just gonna go over them right now
83:42 - actually so I'm gonna go over all the
83:44 - different kinds you can read from the
83:46 - database which is
83:47 - querying and then also we'll go over the
83:49 - how to delete things from your database
83:52 - and also how to update elements and only
83:54 - like certain parts of like certain parts
83:56 - of blog post like updating the author or
83:57 - updating the title or updating the whole
83:58 - post to finish off the crud stuff in
84:02 - flask okay so we're gonna do all that
84:04 - down here in a Python environment and
84:05 - then we'll go ahead and then implement
84:07 - it in our code right after okay so let's
84:09 - just get python up and running again
84:10 - oops
84:11 - Python alright and then again from app
84:15 - we have to import our database and also
84:18 - our model we only have one blog post all
84:22 - right so this information is pop prints
84:23 - out all the time you can know that again
84:26 - let's put some space and now if we go
84:29 - back to our web site remember we're here
84:31 - to our blog with all this here let's let
84:37 - me just show you how to read like all
84:39 - the different reads and stuff I
84:40 - mentioned you can filter by things I
84:41 - mentioned you can there's different
84:43 - kinds of ways you can read from v
84:45 - database let's just go over that so
84:47 - remember to get any of the blog post
84:49 - she's called query and you guys are
84:51 - familiar with already okay there's blog
84:53 - post one two and three blog post one two
84:55 - and three all right and then if I add
84:57 - one why don't we just add another one
85:00 - title a fourth one yoyoyo
85:04 - hi-hi-hi cool post there we go fourth
85:08 - one you yoyoyo haha hi by Aaron and then
85:11 - I'll run this again then the blog post
85:13 - pops up right there cool on the fly what
85:17 - else is there you can actually just call
85:19 - first okay and this would just give us
85:21 - the first one because this is an entire
85:22 - list you know so this is just a shortcut
85:24 - to get the first one but of course we
85:26 - can also just index into it like this
85:30 - one two three four
85:32 - blah blah blah oh you can't you can't
85:35 - index out of it though you're gonna get
85:36 - an error as you can see okay what else
85:40 - can you do you can I said you can filter
85:43 - right so let's go back to the one that's
85:45 - not breaking right up here okay and you
85:48 - can actually call something called
85:51 - filter by and here you can actually
85:53 - specify what you want to filter by so
85:55 - for us if we filter by maybe author
85:59 - if we filter by author then it'll only
86:02 - spit out all the ones where the author
86:03 - matches so actually so I guess this will
86:06 - actually come in handy over here since
86:08 - these two have the same title let's just
86:09 - filter by this title okay which and
86:12 - which means that only these two will
86:13 - show up all right when we filter by that
86:16 - so what's going to here and let's just
86:18 - say title equals oops no that's not
86:23 - there we go title equals first blog post
86:27 - so let's just copy this pop that in
86:29 - there dang it okay pop that in there and
86:37 - oh and when you do this this actually
86:40 - alters the query so this is uh this
86:44 - isn't actually gonna pop up we need we
86:45 - actually took all all again okay so when
86:48 - we when we query blog post it just
86:50 - automatically gets all of it and then we
86:51 - have to call all to actually show all of
86:53 - it because this is just like a query
86:55 - object so but this filter by actually
86:58 - just edits this query object and then we
87:00 - have to call all again to actually show
87:01 - it so as you can see only blog post one
87:03 - a blog post to show up because those are
87:06 - the only ones that have a title that
87:07 - match um first blog post like that okay
87:09 - this would be a lot more useful if
87:11 - there's like different authors or
87:12 - something but when we do update in a few
87:14 - seconds I'll show you how to do that and
87:15 - then we'll do another filter okay
87:18 - besides tilter you can also do order by
87:20 - which we already did up in the code
87:21 - remember you can order by instead of
87:23 - filtering by something then you would
87:25 - just order by it which means you'll get
87:26 - everything but then you'll order it
87:28 - you'll sort it by that order based on
87:31 - that thing the date posted in this case
87:36 - oh and lastly the very very important
87:39 - one okay I'm just going over them all
87:41 - the most important different kinds of
87:42 - reads okay you can go look at the
87:43 - documentation if you want to see
87:44 - everything else there's also cute
87:47 - query dot get okay so what this does is
87:50 - this actually gets whichever model
87:55 - object has their ID okay so if you put
88:00 - you so you see how there's like blog
88:01 - post one blog post two if I put one it
88:03 - would automatically just get blog post
88:05 - one for me so as you can see it works
88:08 - like that and if I do but um get two
88:10 - then I get blog post two and so on and
88:12 - so forth
88:13 - again if I go out of range nothing
88:15 - breaks but if you actually print this
88:17 - out this is returning a blog post object
88:21 - right here but what this is returning is
88:23 - actually none okay so if I actually type
88:25 - print blog post query dot get five okay
88:35 - it's none it's just an empty thing so
88:36 - it's it's empty it's null and so if you
88:38 - try to do anything with it it's gonna
88:39 - break there's actually another method
88:42 - called get or 404 which we're actually
88:44 - using our code a little bit later but
88:46 - don't worry about that for now just know
88:49 - what that get using calling a get
88:51 - function just requires the ID okay the
88:55 - primary care primary key ID that's
88:59 - pretty much it for reading though I mean
89:00 - that's those are all the different
89:01 - things you can do to query like all the
89:03 - main things you can do to query a
89:04 - database and now let's go over delete
89:07 - alright so if we go up here I had my I
89:11 - guess duplicate here let's just delete
89:13 - one of these duplicates okay or let's
89:16 - delete the last one that I just leave it
89:17 - okay because it's kind of whatever the
89:20 - way you delete in flask is you have to
89:23 - from the databases you have to call the
89:25 - database object and then the session
89:27 - again okay and then instead of ad which
89:29 - we had before we just have delete
89:31 - alright very straightforward and on what
89:33 - we need in here is actually the the
89:36 - object of the model in this case our
89:40 - blog post so we have to actually get a
89:41 - blog post object in there so how do we
89:44 - do that well we can use the get so if we
89:46 - just um copy this and paste that in
89:51 - there and go like this and we want to
89:53 - delete the fourth one right go like that
89:56 - and then we hit enter then it'll
89:58 - actually delete this fourth one it's not
90:00 - gonna work i believe if i refresh it
90:02 - yeah because we um haven't committed
90:04 - those changes alright so you have to DVD
90:07 - session dot commit as well alright and
90:10 - it should work now there we go it is
90:12 - gone
90:13 - the reason it's working is because I
90:14 - actually have a terminal running in the
90:16 - background just to have the server up
90:17 - and running because I'm in the Python
90:18 - environment down here this would have
90:20 - crashed but I started writing this ahead
90:22 - of time okay so this terminal is exactly
90:24 - the same let me just
90:26 - I guess you don't even need to see this
90:28 - it's just the terminal running but
90:32 - that's pretty much it for delete okay
90:34 - you just need to have the ID the primary
90:36 - key because if you're deleting something
90:38 - then if two blog posts are completely
90:40 - identical then you still need to
90:42 - distinguish between those two to know
90:43 - which one to delete so you have to
90:44 - delete by the primary key okay
90:45 - and that's ID lastly we have update
90:49 - which is pretty cool so remember how we
90:51 - were able to go into different fields of
90:57 - a model of a blog post so we can like go
90:59 - get the title we can go with the content
91:00 - we can go with the author by simply
91:02 - going like this blog post dot query dot
91:06 - get one dot title or something okay and
91:13 - we do that then we get first blog post
91:17 - okay which is the title of the very
91:18 - first one now what's cool about this is
91:20 - we can actually just set this equal to
91:22 - something else so if we let's change the
91:27 - author of the second one okay dot author
91:30 - this should be Aaron okay that is right
91:34 - Bayern and what we can do now is
91:40 - actually just change this by because
91:43 - this is a variable okay we have direct
91:45 - access to this we can just assign to
91:46 - something else to Kazi okay so the
91:49 - second one is Aaron right now let's run
91:50 - this no errors it's not gonna work
91:52 - because we didn't commit yet but as soon
91:54 - as we commit all of our changes boom and
91:58 - we go back here and refresh boom it
92:00 - changes a Kazi okay and same thing again
92:03 - we can change it right back alright and
92:06 - commit again boom refresh back to Aaron
92:11 - all right but actually let's change it
92:13 - back to cause it real quick and then I
92:14 - want to show you filter again cause II
92:17 - commit and now that we have refresh this
92:23 - now that we have a different author here
92:25 - I'm going to actually filter by Aaron
92:27 - and then it should ignore the second one
92:29 - okay just to demonstrate that last part
92:31 - so DB query dot filter by that's what
92:38 - it's called
92:39 - not guilty
92:41 - Gilmore Girls I never even watched that
92:45 - show but also doing filtering by author
92:49 - that's right equals Aaron okay and dot
92:54 - all remember we have to because this
92:56 - just edits the query now that we have
92:58 - dot all we can just run this oops sorry
93:04 - not DB query to filter a blog post out
93:09 - query to filter there we go so you can
93:15 - see that we get blog post one and blog
93:16 - post three okay and that makes sense
93:18 - because we're filtering by the Thai Tom
93:20 - by the author of Aaron and it ignores
93:22 - this one alright and again because this
93:24 - is adding the query we can actually just
93:26 - you first something like this alright
93:28 - and or just index into it like this and
93:31 - boom we can get exactly one so now we
93:34 - know how to read we know how to update
93:35 - you can update any other the any other
93:37 - of these sorry assuming we have the
93:44 - right data type so like if I wanted to
93:46 - change the date posted then you just
93:48 - have to like a date/time whatever object
93:50 - and blah blah blah but you probably be
93:52 - getting all these things from like HTML
93:54 - front-end form which is what we gonna be
93:56 - doing we implemented implement this in
93:58 - code in just a second okay so I'll see
94:00 - you guys in just a second to do that
94:04 - alright you guys right before we do that
94:06 - though I realized that I how I was hard
94:09 - coding in the author here to Aaron let's
94:12 - change it really quick okay so when we
94:13 - create a new blog post we can I should
94:14 - specify the author all right and then if
94:16 - it's not provided then it'll it'll
94:17 - automatically put in not available and
94:20 - /a okay let's do that really quick let's
94:23 - get rid of this dummy data - we don't
94:24 - need this anymore all posts because
94:25 - we're using a database now so I'm just
94:27 - gonna simply delete that all right now
94:30 - all this you have to do is a pretty
94:32 - straightforward let's just go to post
94:34 - HTML because that's what's here and then
94:36 - go to our form which is right here and
94:40 - then we have title and post so let's
94:43 - just add one that is called author and
94:48 - we'll call this author
94:50 - and call this author all right save
94:54 - those um that should be good let's just
95:00 - refresh this there you go change was
95:02 - made cool but now we also need to go
95:04 - into our code and whenever we generate
95:07 - the slash posts web page whenever we're
95:09 - here or like we refresh this page and
95:10 - all this is generated we need to make
95:12 - sure that this author reflects whatever
95:14 - was typed in here is in the database so
95:18 - when we get here when we post a new blog
95:22 - post then we were only getting title and
95:24 - content but now we also need to get
95:26 - author post author and call it author
95:34 - because that's what we gave the name and
95:37 - ID all right and then one last thing is
95:41 - when we're creating the post we have to
95:43 - specify that the author is post author
95:46 - and not Aaron okay and that Aaron by
95:49 - hard-coded okay that's cool if there's
95:53 - no author then I believe it'll still
95:56 - just display n/a because down here we
95:58 - say if there's an author then this way
96:00 - the author but if the author if there is
96:02 - no author if it's null then we're just
96:04 - gonna display n/a okay I could have
96:06 - saved n/a in the author but I think this
96:07 - is just better because you don't want to
96:09 - like like weird n/a things floating
96:11 - around in your database for authors okay
96:13 - it's just a display thing we're just
96:15 - like making it easy clean for the front
96:16 - end so it's better to do it like this
96:17 - okay let's just refresh this really
96:21 - quick okay
96:23 - let's create a new post awesome blog
96:28 - post cool author is me and post is post
96:34 - post post and we can hit enter
96:37 - and that should work so awesome blog
96:41 - post and by me and post post post all
96:44 - right so now let's get into let's get
96:50 - into the delete and update all right so
96:54 - deleting so I think on our website we
96:57 - should just have a delete button okay
97:00 - after the entire post so that we can
97:01 - delete it and then we'll also have an
97:02 - edit button later when we're doing
97:03 - update
97:04 - okay we'll have like a cleat and an edit
97:05 - button we can just click and then it'll
97:07 - either delete it or then we can edit it
97:09 - okay and then when we save it then it
97:11 - should just be reflected here the change
97:12 - should be reflected let's go back here
97:14 - let's just go to post HTML and let's add
97:17 - in that button okay so after the content
97:21 - I think we can put at the very end so
97:22 - just enter the content well two buttons
97:23 - so very simple let's just put in some
97:26 - simple links here all right href would
97:31 - just leave an empty for a second um each
97:35 - ref and just call this delete okay and
97:40 - I'll just leave it like that
97:42 - let's just save it refresh there we go
97:45 - so we have to delete there it looks like
97:47 - it's working let's add a nice line
97:52 - fighter that looks better okay and now
97:56 - let's actually put the href in so the
97:58 - URL um then I'm going to use is just
98:00 - posts slash I think delete slash and
98:10 - then we're also gonna need the post of
98:11 - the the ID of the of the post let's
98:16 - let's do this later actually let's leave
98:18 - this blank for now let me go back to our
98:19 - code over here and let's start
98:21 - implementing the URL first and that
98:22 - makes it more sensitive within this
98:23 - order so um let's define a new route for
98:32 - delete all right we don't need these
98:33 - methods like that and let's make it
98:36 - delete and then in here we are going to
98:39 - need to specify which blog posts we're
98:43 - gonna delete so that's just gonna be
98:44 - from the ID okay so when we go to that
98:46 - URL if we go to the slash posts / delete
98:49 - / i D like if it was this / delete / 1
98:54 - then this one will get deleted okay oops
99:02 - let's just define delete here okay
99:05 - and that should be ID in here the
99:09 - variable that we just made up there and
99:11 - from the URL and then once we're in here
99:14 - all we need to do is just fetch the
99:15 - unique blog post using the ID that's why
99:17 - we need the ID because that's the
99:19 - primary key if you guys remember that's
99:21 - the distinguishing field and we're just
99:24 - going to say blog post doc query dot get
99:30 - or 404 because if it doesn't exist then
99:34 - we don't want it to break and the Rio so
99:37 - we have our post and now it's as simple
99:39 - as just deleting delete post all right
99:46 - and then commit little DB that session
99:52 - commit and then after this then we just
99:57 - have to redirect to the back to the post
100:02 - page okay
100:04 - just like that pretty straightforward so
100:07 - we're just um but if we go to this URL
100:09 - with the ID the distinguishing factor
100:11 - then we get that post then we just call
100:13 - delete on the database we commit the
100:15 - change and then we just redirect back to
100:17 - this mean um list of posts okay the
100:20 - global list so let's save this let's
100:23 - let's go back here let's refresh it and
100:28 - oh yeah we didn't we didn't I undid
100:31 - undid that change let's go back and make
100:33 - that change now let's go to post the
100:35 - HTML and if you see down here we are
100:40 - passing in the post when we delete it so
100:48 - when we're here we can actually just
100:50 - call slash posts slash the delete leave
100:57 - right that's what I called ya and then
100:59 - just use some Jinja to syntax here
101:01 - but you just called post ID all right
101:03 - why is it red or is it giving me an
101:06 - issue there
101:10 - Oh href equals okay that was throwing me
101:16 - off earlier got it but now um so all
101:20 - this is doing is when we're generating
101:21 - all of the posts it's just getting the
101:23 - ID of the post okay and then it's
101:27 - fetching that and then it's going to
101:29 - this URL okay so when we click on the
101:31 - delete button it's going to take us to
101:32 - this URL all right down here so clicking
101:36 - here will take us to the / delete / ID
101:39 - URL for this one and then it'll delete
101:41 - it so I already saved it let's refresh
101:44 - this and as you can see now there's
101:46 - delete buttons and if we hover over it
101:49 - you can see on the bottom right and
101:51 - right below where my clicker is it might
101:53 - be a little bit small well if I remember
101:56 - to edit this in then I can zoom in so
101:57 - you can see it clear but it was it says
102:01 - local host on port 5000 slash posts /
102:04 - delete / 4 because this is the fourth
102:06 - blog post okay
102:08 - 4 so it'll delete this one if I click it
102:10 - and then same thing here
102:12 - it's slash 3 and so on and so forth so
102:15 - let's just give it a try delete and will
102:18 - be the last one and it's gone okay so
102:20 - pretty straightforward for delete now
102:22 - let's add in an edit button so let's add
102:29 - in the edit button now ok so we have a
102:31 - delete button and then let's just follow
102:32 - it up with our edit button right after
102:34 - it very simple we'll just copy and paste
102:36 - this and the URL that I want to use is
102:38 - exactly the same except it's gonna be
102:40 - post / edit / the ID because again we
102:42 - can only edit one blog post at a time so
102:44 - you want to distinguish it and instead
102:46 - of delete if you want to have the habit
102:48 - say edit okay very straightforward so we
102:51 - just added this button in and it's going
102:53 - to link to this specific URL so after I
102:55 - show you this then all you need to do is
102:56 - go into our app dot PI and then define
102:59 - this route now and then whenever we
103:01 - stumble upon this URL then we need to go
103:05 - to a separate new page that allows us to
103:06 - update everything in there and then save
103:08 - it back to the database okay so let's go
103:10 - over here let's just refresh this to
103:12 - show that it's popping up as you can see
103:14 - the let me go back I guess I can't undo
103:17 - it
103:18 - yeah just remind the video you should
103:19 - have seen just this edit at the bottom
103:21 - pop-up okay right here
103:23 - there before Ellen if we click it then
103:25 - it says not found because see we're
103:27 - actually at the slash edit / one URL
103:30 - okay but we haven't defined that route
103:32 - yet so that's why it's giving us a not
103:34 - found error okay so let's go back to
103:37 - here all right and now let's go to app
103:40 - dot PI and let's simply define a new
103:42 - route okay app dot route we've done this
103:48 - before so you guys should be getting
103:49 - familiar with it posts I said we want to
103:51 - do edit instead of delete and we're
103:57 - gonna need an ID let me turn off rocket
104:00 - again and I lost my train of thought and
104:06 - all we're all thinking also gonna need
104:08 - to define that we can do get or post
104:15 - requests okay dang it okay because if
104:20 - we're editing if we're editing a post
104:22 - then we need to be posting to the
104:25 - database we need to be updating the bit
104:26 - database so that's post a post request
104:28 - okay so we have that and now we're just
104:31 - going to define the code okay so for
104:35 - edit very straightforward all we're
104:38 - gonna have to do is get the post again
104:39 - very similar so actually you just copy
104:43 - your pace copy and paste this cool and
104:46 - then now now it's very simple it's if
104:51 - we're posting we need to treat
104:52 - differently if we're posting or if we
104:55 - are just getting this URL okay so what I
104:59 - want this to look like is when you when
105:02 - you click Edit here on this post okay I
105:05 - want a separate page to pop up that just
105:09 - has this form with different text it'll
105:11 - say like editing post and then this will
105:12 - just say edit or something okay and then
105:14 - it'll be here it'll be in here and then
105:16 - I want the title to auto um fill in with
105:19 - whatever the title is the author to auto
105:21 - fill in with whatever the author is and
105:22 - the content to fill in with with
105:24 - whatever the content is and then for
105:26 - this to say save instead of posts okay I
105:28 - want just that and then you can change
105:30 - make your changes and then hit save and
105:31 - then um and then when you hit save a
105:34 - should come back to this one and your
105:35 - change
105:35 - reflected all right so that's kind of
105:37 - like the goal and we're gonna do that
105:39 - right now so once we get to there um all
105:43 - we're gonna need to do is just get all
105:47 - of the data from the form so we're gonna
105:48 - be just copying over this form pretty
105:50 - much we're just gonna copy the code over
105:51 - to a new web page called edit dot HTML
105:55 - okay we're actually create a new HTML
105:56 - file but then once all the data is in
105:58 - here we can make whatever changes we
105:59 - want on the front end but then we hit
106:01 - save all the new new data in this form
106:03 - needs to be saved to the database so
106:04 - that's what we're gonna do here so it's
106:07 - literally as simple as just saying post
106:10 - title now equals request dot form title
106:16 - just like that okay
106:17 - so this is getting the the data that was
106:20 - in the title field whatever we changed
106:22 - it to and then it's just saving it to
106:24 - this it's just overwriting whatever was
106:26 - used to be there okay and then surprise
106:28 - we do the same exact thing for author
106:30 - and for content and that will pretty
106:36 - much do it no spelling mistakes cool and
106:44 - then of course the very end we need to
106:46 - commit these changes all right
106:49 - DB session I always forget that session
106:52 - and then we just want to redirect after
106:56 - we save um oh of course I need to put
107:00 - this in a if request dot method equals
107:08 - post yeah and all this needs to be
107:11 - indented so if we're posting to this to
107:15 - this which means when we're on the new
107:16 - web page and this all pops up in just
107:18 - this and then we click this which means
107:20 - we're posting something then do that um
107:23 - then then do all this stuff then we're
107:25 - gonna have to define also what to get
107:27 - when we just let me just arrive on that
107:28 - page we're just you just want to display
107:30 - what the empty fields there well not
107:32 - empty but whatever it is supposed to be
107:34 - full in here by default from the
107:35 - database so this is going to be a simple
107:38 - redirect after we submit the form we're
107:40 - just gonna go back to posts okay like
107:43 - that
107:44 - and then else for here we're going to
107:50 - return we just want to render the new
107:54 - HTML template okay oops
107:59 - no render template and then we're just
108:04 - gonna call it edit HTML all right so now
108:08 - let's create edit HTML okay this
108:10 - might've been a little bit of a big
108:11 - chunk to bite off but it was either this
108:13 - or the HTML first might even better the
108:16 - HTML first but you guys should be able
108:18 - to follow along at this point so let's
108:19 - just create a new file in here okay and
108:21 - call edit HTML cool and then let's just
108:25 - drag it over here and let's just copy
108:29 - all of this from post HTML or actual I
108:32 - don't need all of it um we definitely
108:34 - need the extends we let's just do a
108:37 - piece by piece so we need the extends
108:39 - because you want to extend the template
108:41 - again oh we're gonna need a title so
108:44 - let's just paste these in okay but
108:45 - instead of post it's going to be edit
108:49 - post alright save this go back to posts
108:54 - we're also getting in a block body
108:56 - alright so that's good and then in here
109:01 - we wanted to copy over this form
109:03 - remember in this form only we don't
109:04 - actually want the for loop that
109:05 - generates all this stuff so let's just
109:07 - go to here and I just get all posts and
109:13 - here and the whole form and stop right
109:15 - there okay because we don't want to
109:17 - generate all the blog posts here in this
109:18 - for loop so let's just stop
109:20 - oops this way paste that in and then
109:25 - we're gonna need to skip that and then
109:26 - end the block so copy and in block
109:33 - alright that should do it
109:37 - let's save it and let's just see if it
109:42 - broke so I oh whoa what happened did my
109:48 - oh it broke it uh the server stopped
109:54 - there we go we just started it up again
109:55 - go here refresh it cool so now when we
109:59 - hit edit
110:00 - alright cool it looks like we are at the
110:04 - post / post / edit / one URL and only
110:07 - the form was generated okay with all
110:10 - Dilla here so that's good it seems to be
110:12 - working
110:13 - let's go over here change the edit post
110:14 - this changes from all post to editing
110:17 - post alright let's change this to create
110:20 - new blog posts who simply edit and then
110:23 - we'll keep those three there and then
110:25 - instead of a post button I want to have
110:28 - this say save so we can just save our
110:30 - changes so let's delete that and just
110:33 - put this in here like this save it again
110:34 - come here because they're in debug mode
110:37 - it's automatically updating the server
110:38 - and as you can see now we are on editing
110:41 - post and then edit and title author post
110:44 - and safe okay
110:45 - I'm gonna hit save remember I said there
110:48 - is going to be a redirect back to the
110:49 - main post page that has all the posts
110:51 - there because we hit the post when we
110:53 - hit the post button the Save button then
110:55 - we're doing a post request and then it's
110:57 - gonna go back so let's hit save and it
110:59 - should go back cool but when we hit edit
111:03 - we want these changes to be reflected
111:06 - okay so we're missing that bit of the
111:07 - code so let's go to our edit HTML
111:11 - alright and now in here we're just gonna
111:14 - have to oops we're gonna have to make
111:17 - some changes mainly we're just going to
111:21 - have to change the URL here first of all
111:26 - so the form the action is the the form
111:31 - that were I mean that URL that we're
111:33 - submitting on so um since we said we
111:36 - were going to handle post requests on
111:38 - this URL okay let's copy that then we
111:42 - need to we need to have the form be
111:46 - submitted on this URL okay but of course
111:49 - it's not going to be in
111:51 - Eydie is just going to be simply post
111:54 - that ID all right oh I think we forgot
111:58 - to UM send in post here okay
112:03 - post equals post because we need to send
112:09 - the post that we are editing over to
112:11 - have access to all of its data so we can
112:12 - auto so we can auto fill in these fields
112:16 - here okay so we have the post and then
112:19 - now let's go over and then we send the
112:21 - post data over and now that we're in
112:23 - here we also have access to the post ID
112:25 - so we know the ID here and then then
112:30 - we're pretty much almost done the pretty
112:32 - much the only change we have to make
112:33 - here is add on something here to issue
112:36 - these fields and that is a default value
112:38 - so we can by default this empty that's
112:40 - why these are empty but we can actually
112:42 - say to input some data in there
112:45 - something anything we want really so
112:47 - actually I'll just show you if you put
112:49 - Cal say this go over and refresh post
112:56 - reference before assignment one second
113:02 - guys post equals post over here post
113:10 - equals post ah I see because this needs
113:13 - to be outside of the statement little
113:16 - bug here so we get the post for this
113:19 - method and then then we go into the if
113:22 - statement and then this will be
113:23 - available in here so let's save this and
113:26 - try this again
113:27 - there we go so you see that cow is auto
113:29 - completed in the field there so let's go
113:32 - back to edit HTML change this and simply
113:35 - all we need to do is just get the title
113:37 - right get the title from the post that
113:39 - we have so that's just gonna be post
113:41 - title okay pretty straightforward we'll
113:44 - save this we'll hit this button first
113:46 - blog post which is what the title should
113:48 - be and then just repeat this process for
113:50 - the other two and we will be done so
113:55 - post that author all right and post dot
114:01 - content
114:02 - and that should be good to go so we have
114:06 - the save let's go back here let's
114:08 - refresh it and as you can see all of
114:11 - these changes have taken effect
114:13 - these fields are auto completed and if
114:15 - we change the author we can say Tony
114:19 - Stark and hit save as you can see the
114:23 - author was changed Tony Stark okay and
114:25 - we can edit again first blog post and
114:27 - add some more exclamation points hit
114:29 - save we redirect back to the page we
114:31 - made um we changed the stuff in the
114:33 - database with the commit and then when
114:34 - we auto generate this stuff again then
114:36 - all the changes are made okay and of
114:38 - course we can go down here we can delete
114:40 - posts we can add we can add new posts
114:43 - let's add a new one new post again
114:45 - author me or you and post let's just say
114:49 - 1 2 3 4 5 enter there we go new post
114:53 - again edit 2 3 4 5 6 7 8 9 10 and let's
114:58 - delete this so let's empty hit save and
115:00 - because it's empty you can see that the
115:03 - author was completed to an a all right
115:06 - let's let this cuz this makes no sense
115:07 - and that pretty much completes all of
115:10 - the crud functionality for this flask
115:12 - app ok we're able to create new posts ok
115:15 - we can read posts in all different ways
115:17 - we know how to read all we not a filter
115:19 - by we know how to order by we know how
115:20 - to use the get method we know how to
115:24 - update posts we know how to delete posts
115:26 - and that pretty much completes it so now
115:29 - we're going to go on and make this look
115:30 - a lot nicer ok probably gonna use some
115:32 - bootstrap and stuff they clean this up
115:34 - and maybe add in some other nice
115:35 - features but this is the basics of flask
115:37 - pretty much done so if that's all you
115:39 - needed
115:39 - umm you just wanna learn like some basic
115:41 - basic class stuff then you're good to go
115:42 - but I encourage you to keep watching
115:44 - because we'll be getting some more some
115:46 - more fun stuff in just a little bit
115:47 - alright see you guys
115:49 - [Music]
115:56 - all right you guys so now it's time to
115:58 - get some bootstrap in this project okay
116:01 - so we finished all the flat stuff we
116:03 - have our whole crud up our whole credit
116:04 - application and now let's just all get
116:07 - some boots trip in so let's go to
116:09 - bootstrap comm or or to the website I
116:14 - mean and let's just go to the
116:16 - introduction okay this is where we can
116:18 - get the code to get started so bootstrap
116:20 - is just a collection of CSS files and
116:24 - JavaScript files and HTML files that
116:27 - allows us to plug and play things easily
116:29 - that I'll make it look nicer so we don't
116:31 - have to code everything from scratch
116:32 - okay it's just like a building blocks
116:33 - it's like Legos or something but it's
116:36 - very useful for speeding things up and
116:37 - whatnot so let's just go through the
116:40 - QuickStart here
116:40 - so pretty much all we have to do is just
116:42 - copy a stylesheet okay so this is gonna
116:45 - be CSS and then also some JavaScript
116:47 - from them and then everything will be
116:49 - ready to go pretty much so let's just
116:52 - take this alright copy the CSS and paste
116:54 - this into our base HTML because we want
116:59 - this to be applied to every web page and
117:01 - since everything inherits from our base
117:02 - to HTML then we can just paste it in
117:05 - here pretty much okay so literally just
117:06 - paste it we can get rid of this other
117:08 - stylesheet we don't need it okay boom
117:11 - like that and let's save it alright and
117:13 - the server is running and let's go back
117:16 - to our our website and when we refresh
117:21 - it you can see that all of the fonts
117:22 - updated okay so now everything is a
117:24 - little bit different um that's good
117:27 - because that means that bootstrap the
117:28 - bootstrap fonts have been inherited so
117:33 - we also need some of the JavaScript like
117:36 - they sit down here so let's just copy
117:39 - this as well go back here and then it
117:41 - says paste it at the bottom of the body
117:43 - tag okay so we're just gonna paste it
117:45 - right down there just like that and fix
117:48 - the formatting alright save it and that
117:51 - should do it um it's not gonna make any
117:53 - changes we're just gonna have a little
117:54 - bit JavaScript in a bit but that's where
117:56 - it supposed to go okay at the end of the
117:57 - body tag um one last thing now the last
118:02 - step that we want to do to get a few
118:04 - more formatting things in is in
118:06 - our base again um in the body we just
118:09 - want to sandwich this okay in a div
118:12 - called container all right so class is
118:18 - going to be container and all this is is
118:22 - just a special bootstrap class bootstrap
118:27 - specifies this class container and CSS
118:30 - and what its gonna do is just give us
118:31 - some nice formatting things like some
118:36 - padding and margin so why not so and i
118:37 - refresh this you're gonna see everything
118:38 - is gonna be centered and as you can see
118:40 - now you have some nice margins at the
118:42 - edge and when we zoom um close the make
118:46 - the window small what not or if we're
118:47 - going on mobile then everything will be
118:49 - accounted for it's not gonna be any
118:50 - weird like clipping issues and stuff
118:52 - like that bootstrap takes care of all of
118:53 - that which is great okay so we finally
118:55 - have a little bit of a nice front end
118:58 - going but now we're gonna make it a lot
118:59 - nicer okay I'll stay tuned all right so
119:04 - we got bootstrap installed and things
119:05 - are looking a bit nicer so let's
119:07 - continue okay so now that we have all
119:09 - this here I want to add a nav bar all
119:11 - right so it's very easy um thanks to
119:14 - bootstrap we can just go into bootstrap
119:15 - and plug in the navbar pretty much so
119:17 - let's just go to the website again go to
119:19 - examples here and you can scroll down
119:21 - you can pretty much go to any of these
119:22 - websites and just been just like inspect
119:24 - the source code and paste things into
119:25 - your own project as needed so let's
119:28 - scroll down here to nav bars okay and
119:31 - then they have a bunch of nav bars here
119:32 - just in code and let's just take this
119:35 - first one okay this little one that has
119:36 - this nice little collapsible menu and
119:39 - blah blah blah and maybe we'll take
119:41 - another thing from here later so let's
119:43 - just go here right click and click on
119:45 - View page source alright and then just
119:48 - gonna do command F the find function and
119:50 - just put in any eight nav four nav and
119:53 - let's just find the first nav bar so it
119:56 - looks like this is the first nav bar
119:58 - here from nav to nav so let's just take
120:01 - this okay boom just like that
120:04 - copy and let's just paste it right at
120:07 - the top of our body okay just like they
120:08 - did here so we'll go here at the top of
120:11 - our body paste in this nav bar alright
120:14 - right click and let's say format
120:16 - document so everything is nice and
120:17 - formatted for us let's save it alright
120:19 - servers running because the debug mode
120:21 - is on let's go back to posts refresh and
120:24 - voila the navbar is installed just like
120:26 - a Lego easy so we have a collapsible
120:28 - menu here all this text is wrong but
120:31 - about to change that and then we can
120:32 - also link these two linked to the right
120:33 - web pages and whatnot so let's go back
120:35 - into the code and do that now okay so if
120:38 - we go into here we can see never expand
120:42 - so never expand was this text here so
120:45 - let's just change this to clever
120:48 - programmer block cool save and then
120:52 - let's just change this to the root
120:53 - directory okay what else do we need
120:56 - let's just refresh this as we go okay
120:58 - cool it up updated if we click it then
121:01 - it'll just take us to the home page
121:03 - again but let's go back to posts what
121:08 - else we need to change home yeah let's
121:11 - change all these so link home is okay
121:14 - but I have this also linked to the home
121:17 - index let's change that there
121:18 - cool link instead of link let's have
121:21 - posts okay save this and then have this
121:24 - link to slash posts alright what else is
121:28 - there disabled let's change this to
121:31 - about okay we don't have an about page
121:34 - but let's change that for now maybe we
121:36 - can we can add one later let's refresh
121:38 - this check out the menu see if it
121:40 - changed yup we have home we have posts
121:42 - click on home it take you to the home
121:44 - page and if we click on if we click on
121:48 - posts it should take us to the posts
121:50 - page perfect alright and then we have
121:53 - the about of course and then our drop
121:54 - down here is another thing uh let's keep
121:59 - going okay so um drop down menu here
122:08 - maybe we can just add a contact us kind
122:11 - of thing here alright and we could add
122:15 - maybe a like link to our website we
122:19 - could link to our YouTube we could link
122:22 - to our Facebook maybe I'll actually
122:25 - paste links in here later and then we
122:26 - can just copy this and
122:28 - [Music]
122:30 - Twitter or Instagram wrong one and
122:33 - Instagram okay so we could actually link
122:35 - to these things and why don't we
122:39 - actually do that okay so really quick
122:40 - our website is going to be HTTP slash
122:46 - slash on wwl ever program or calm
122:50 - alright and let's just pop in our clever
122:55 - programmer Facebook cool boom here let's
123:03 - grab this URL here's our Facebook page
123:05 - its cause II I'll go here and paste that
123:10 - into Facebook cool there's a double are
123:13 - here I think it's a typo I don't know
123:14 - but that's actually the page but anyways
123:17 - I mean maybe we'll fix that later our
123:19 - YouTube channel you guys are probably
123:20 - familiar with clever program or YouTube
123:23 - boom little load just do this for
123:31 - completeness sake get the
123:38 - there we go get the channel here pause
123:43 - that video pop this into here alright
123:46 - save and Instagram last one so that's
123:49 - gonna be cause ease clever Kazi
123:51 - Instagram but boom boom get the one here
123:56 - and the URL last one and cool so now we
124:00 - have a fully fledged contact us so let's
124:03 - go back here let's quit out of this
124:04 - because we don't eat anymore
124:05 - now guard we'll leave this here cuz
124:07 - we're gonna grab some more stuff in
124:08 - there probably let's refresh this go
124:10 - back down here click we can see that it
124:12 - changed to contact us and now all of
124:14 - these should actually be linking to the
124:15 - correct places so website if you wanna
124:17 - go to our website here we also have our
124:21 - YouTube channel
124:22 - as you can see loads up there just fine
124:26 - and the Facebook and Instagram I'm sure
124:28 - you guys believe me that they work ok oh
124:31 - right so now we got our navbar in our
124:33 - app ok we have up here so what else can
124:36 - we do I was thinking our homepage is
124:38 - looking kind of lackluster ok it looks
124:40 - like that
124:41 - so let's uh beef it up a little bit ok I
124:43 - was looking at the nav bar and if you we
124:46 - grabbed this top top one already this
124:48 - nav bar but if you go all the way to the
124:49 - bottom you can see this nice grey
124:50 - rectangle with a little bit of text and
124:54 - like a little button here to like launch
124:56 - something or whatever let's put this on
124:58 - the home page ok and just have like a
124:59 - little welcome thing some little text to
125:01 - explain what it is and then have this
125:02 - link to our our main web page that has
125:05 - all of our posts ok so let's go back to
125:08 - the inspect source code here I didn't
125:13 - close this so this is just if you
125:14 - remember if you just right-click this
125:15 - and you go to view page source and you
125:17 - can get all the source code of this web
125:18 - page go down here and I believe this
125:21 - thing down here is called a Jumbotron
125:23 - okay and bootstrap that's what these uh
125:26 - big rectangles are called so if you can
125:28 - see it says Jumbotron right here alright
125:31 - and let's just copy this main tag and
125:34 - this all this here should be this
125:37 - rectangle here ok so our home page is
125:39 - empty let's go to here let's go to our
125:42 - index which is our home page and right
125:44 - under home page let's just paste in this
125:46 - main thing and we can form a document a
125:48 - little bit let's just say this suit it
125:52 - looks like alright refresh this boom
125:55 - that was easy
125:57 - let's add in some line breaks here
125:58 - because it looks a little bit crunched a
126:00 - little crowded ok so just a little break
126:03 - here BR and you want underneath it to be
126:07 - our cool and let's just see what it
126:11 - looks like that looks better
126:13 - alright so let's continue instead of
126:15 - navbar examples let's write welcome cool
126:20 - and then let's I'll change this text a
126:24 - little bit ok
126:24 - let's get one of these a ref tags off
126:28 - and let's just paste this down here it's
126:33 - for this later I'm gonna have a link
126:34 - later on this P tag let's get this sorry
126:43 - guys
126:45 - let's just say welcome to the clever pro
126:51 - grammar blog cool here we'll be talking
126:58 - about everything computer science cool
127:07 - basics frameworks you know what I'm just
127:12 - leaving typos cuz it doesn't matter
127:13 - frames works machine learning other data
127:21 - science stuff any new tech or findings
127:26 - and more ok or and pretty much anything
127:34 - computer science related cool uh let's
127:40 - see what it looks like to make it
127:42 - consistent that looks better
127:43 - alright and on the second one let's just
127:46 - say go visit us at our website
127:53 - and let's just have this anchor tag in
127:56 - here HTTP buh buh buh www dot clever
128:01 - programmer calm trying to talk too fast
128:04 - again and say clever programmer calm all
128:11 - right to check out more cool stuff
128:27 - beyond just blocks done all right so
128:31 - that that settles it for that we have
128:34 - our home page it's all nice now we have
128:36 - this giant jumbo Tron's at least welcome
128:37 - people to our blog with a little bit of
128:39 - a introduction here briefing people in
128:41 - what's about to happen
128:42 - very good nice website design and we
128:45 - have a link to our website here if
128:47 - people want to learn more okay so we
128:49 - have like a free three part masterclass
128:50 - blah blah blah go back to our website
128:53 - and oh I forgot the button of course so
128:56 - down here we want this button - dang
128:59 - what is going on here I don't like this
129:00 - formatting okay so we have here and then
129:03 - we'll just say go to posts all right so
129:07 - go to blog posts awesome and instead of
129:12 - this we don't a link to the docs of
129:14 - bootstrap you just want to go to posts
129:16 - okay now let's go back here refresh boom
129:18 - this change to go to post and when we
129:20 - click this it brings us to all of our
129:21 - posts awesome so we have our navbar
129:24 - plugged in we have a nice little
129:26 - Jumbotron
129:26 - welcome pay you plugged in all thanks to
129:28 - bootstrap that was pretty fast I don't
129:29 - know five minutes ten minutes wouldn't
129:31 - what was that you guys aren't on depends
129:32 - on how fast edit it or how sure to edit
129:34 - it down to but yeah let's move on
129:39 - alright so that does it for our home
129:41 - page we just finished it up let's go to
129:43 - our posts okay and now let's start
129:45 - cleaning this up okay so it looks okay
129:47 - but I could look a lot nicer right so
129:49 - let's start with um making these blog
129:53 - posts look a little better okay each one
129:55 - of these little blog posts let's just
129:56 - clean this up and make it look mmm more
129:59 - blogging all right so let's go to posts
130:03 - and we generate all these on our
130:05 - template
130:06 - in the loop remember we generate each
130:07 - blog post in a loop so our loop is down
130:09 - here and let's change this so I think if
130:16 - we instead of using the hair tag here if
130:18 - we actually changes completely to using
130:20 - small tags this just gonna look nicer it
130:23 - will make a big difference let's just
130:26 - pop this in here like this all right and
130:28 - then let's just write written by author
130:31 - and then also let's add in the date okay
130:34 - the date that it was created so remember
130:36 - we have post author we also have post
130:38 - dot I believe it is author and date
130:42 - posted okay so let's copy this go back
130:45 - to our posts and post dot date posted
130:48 - and that should do it okay so I want to
130:51 - change this format and then again let's
130:53 - just copy this in case there is no
130:55 - author what are we gonna do we just
130:57 - paste it's down here and we can say
130:58 - written by well there is no author so
131:00 - we're just gonna write unknown alright
131:03 - and then the date is required because
131:04 - when the post is created it's
131:06 - auto-generated so that'll always be
131:07 - there and let's just format this and
131:10 - let's check it out okay so let's go back
131:12 - here and let's refresh it and as you can
131:15 - see this looks a lot nicer okay let me
131:17 - zoom in a little bit the website starts
131:19 - looking a little funky when i zoom in
131:20 - too far but just to show you
131:22 - so it's bigger you can see that this was
131:26 - changed okay so it says written by the
131:28 - author on the time exactly which looks a
131:31 - lot nicer a little bit more clear um and
131:33 - it looks more like other blogs I looked
131:34 - at some other blogs and they tend to
131:36 - have this really small so like New York
131:37 - Times or whatever but yeah let's change
131:39 - fix some of this spacing maybe I think
131:42 - this could probably use a break here or
131:46 - fish this or whatever and let's change
131:54 - some of these buttons now okay so let's
131:56 - zoom back out oops let's zoom back out
131:59 - alright and let's go to the buttons all
132:06 - right so bootstrap is nice because it
132:07 - gives us a lot of like free little or I
132:10 - shouldn't show you so bootstrap buttons
132:14 - if you guys didn't know there are a lot
132:15 - of different buttons that allows us to
132:17 - make and there's a nice image here I
132:19 - just go to the
132:20 - this image is good all right so you see
132:24 - this we can add all these different
132:26 - buttons so instead of just having these
132:27 - little blue link things with the little
132:28 - underline we can actually have buttons
132:30 - that look like this okay so all it is is
132:32 - we just inherit a class and the class
132:34 - specifies all the stuff so we have
132:35 - different colors if we call it a danger
132:37 - button then it'll be red if you call it
132:39 - a primary button it'll be blue and if
132:40 - you call it a success button it'll be
132:42 - green so let's just go into our code all
132:45 - right and go down to the buttons here
132:47 - and all we have to do here is pretty
132:50 - much just add in a class all right and
132:52 - this is all specified by bootstrap and
132:54 - we just wanted to say it's a button and
132:55 - this one it's a delete button so we want
132:58 - it to be danger okay because I wanted to
132:59 - be red and I'll be delete and then also
133:02 - down here I want this button to be a
133:09 - primary I want to be blue okay because
133:11 - it's an edit button so it's kind of a
133:12 - neutral color so let's go over here back
133:14 - to our website and refresh this and as
133:16 - you can see
133:17 - Kabam these buttons are a lot nicer okay
133:20 - so delete and edit that has the same
133:21 - exact function functionality we hit edit
133:22 - we go back here and we can edit our post
133:24 - let's go back but that's pretty much it
133:27 - let me just clean up clean up a little
133:29 - bit of the spacing with a couple more
133:32 - line breaks above the header and then
133:36 - below the time so let's add another
133:38 - break here just like that and above the
133:45 - header let's just added break as well
133:47 - it's a little sloppy but I just want to
133:49 - make it look nice okay that's better so
133:53 - we have some spacing here and spacing at
133:55 - the top so each of them looks like
133:56 - they're a little bit detached and
133:58 - actually let's add one right before the
134:00 - buttons to Oh oops I don't know what it
134:02 - clicked but whatever and uh her library
134:06 - okay this is actually really bad but
134:07 - it's fine as long as it looks I screwed
134:10 - that up ding ding
134:12 - I meant down here like that
134:17 - and yeah that'll do so let's continue
134:29 - alright now that we got these buttons
134:31 - done let's clean this up next okay so
134:34 - this looks a little bit like old and
134:36 - antiquated outdated so let's just update
134:39 - these input fields okay so this is in
134:42 - the posts we have this hard-coded at the
134:44 - top I believe up here that's right so
134:49 - let's actually change these inputs to
134:51 - better inputs okay so let's and we're
134:54 - gonna change you some real labels too
134:55 - cuz we just have these labels just
134:57 - hard-coded in there so for now let's
134:59 - just put these on new lines alright save
135:01 - that and if we go back to here and we go
135:04 - down here as you can see there's a
135:05 - search bar here with a input field I
135:08 - actually want to use this input field
135:09 - here instead of these weird rectangular
135:11 - ones these ones are from bootstrap so
135:13 - I'm just gonna go into the code and
135:14 - paste this one and then paste them in
135:15 - here and kind of like Jake it together
135:17 - to get it working so let's go to where
135:22 - is this this is in the nav bar so this
135:24 - will be in base HTML and then we'll go
135:27 - to or it'll be uh the nav bar should be
135:36 - top body that's right nav bar here
135:38 - clever programmer blog at the bottom
135:43 - here we go finally found it so this
135:45 - little form here is actually the little
135:48 - search bar as you can see it says
135:49 - placeholder search which means Oh
135:51 - pre-populated with the word search and
135:54 - as you can see there's a little word
135:55 - search here so we know what this textbox
135:57 - is for so let's just take this input
135:59 - okay
136:00 - this input and we're gonna copy this and
136:03 - paste this here and kind of splice these
136:07 - together okay so input we would have
136:10 - typed text we have class form control
136:13 - placeholder search and search and all we
136:15 - need to do is just copy and paste name
136:16 - and title over okay so let's just paste
136:20 - these right here that I'll do or
136:21 - actually let's paste them right after
136:24 - text right there just like that
136:26 - so title title we can completely get rid
136:28 - of this input all right
136:31 - save it go here and placeholder we want
136:34 - to have enter title instead all right
136:37 - and then this will have also enter title
136:40 - enter title save that let's just see if
136:44 - this is working correctly go over here
136:46 - refresh this and as you can see it
136:50 - worked and enter title so this looks
136:53 - better than the author and post do so
136:55 - let's do the same thing for those well
136:58 - actually just for author for posts are
136:59 - actually gonna upgrade it even more but
137:01 - let's just get this line do copy go down
137:07 - here same routine except this is going
137:11 - to be author instead of title alright so
137:14 - form control so text and instead of
137:16 - title it's gonna be author and author
137:20 - and placeholder will be enter author and
137:25 - enter author all right that's nice it's
137:36 - like a 1 done cool and now post so the
137:41 - body of a blog post is usually gonna be
137:43 - a lot longer so I don't want to just use
137:44 - a regular text input anymore I actually
137:46 - want to use a text area which is gonna
137:48 - be a huge block of input text ok so the
137:51 - way we can do that is or the way you
137:54 - could go out about finding it yourself
137:55 - is actually just going to the bootstrap
137:57 - stuff there's a page on bootstrap for
138:00 - forums so let's just write down forums
138:03 - oops
138:04 - right think I opened this in a new
138:08 - window
138:10 - bootstrap forums there we go and just
138:12 - click here forms your bootstrap and here
138:15 - it gives us all of the different
138:16 - possibilities for creating forums using
138:19 - bootstrap all right so let's scroll down
138:21 - this is just regular input text fields
138:24 - blah blah blah if we keep going down
138:26 - then right here text area this is what I
138:28 - want a big text area with this little
138:30 - resizable window thing here so we can
138:32 - have a long long blog post ok so this is
138:35 - here and it should be at the bottom of
138:37 - these four things so it should be right
138:40 - down here I believe it's this div label
138:43 - text area that looks
138:45 - and let's just copy this and go over to
138:50 - our code and place this here alright so
138:53 - this is going to be a div I actually
138:59 - don't think we need the div yeah let's
139:03 - try get rid of the div and just have
139:08 - this here well we got to change the
139:11 - labels to as seen here why don't we do
139:15 - that right now
139:16 - label do that and this is going to be
139:23 - post all right
139:26 - label and it's going to be for content
139:31 - all right just like that and then we'll
139:34 - do the same thing for the other two oh
139:36 - sorry
139:40 - like that and then just repeat this for
139:44 - these other two labels for the click so
139:45 - this is gonna be author instead author
139:51 - and change this to author and same thing
139:58 - for title last one it's going to be
140:01 - title this say for is just linking this
140:05 - name title to this name okay so it's
140:07 - saying this label is for this title done
140:13 - now let's go back to the text area so
140:17 - the ID here is going to be content all
140:20 - right and the name is also going to be
140:24 - content I believe and that should be it
140:33 - let's just delete this
140:39 - fresh the page and as you can see we
140:41 - have a nice big text area here okay cool
140:44 - oh and the labels to the labels changed
140:50 - it only looks a little bit different but
140:52 - these are actual tables okay oh we can
140:57 - also actually add in placeholders here's
140:59 - two placeholder and we'll just type in a
141:06 - content oops not : equal signs refresh
141:11 - this and there we go we have a little
141:13 - thing there also we're gonna need this
141:19 - just to stay consistent and we're gonna
141:23 - say well enter content and enter content
141:30 - boom fresh this alright and that should
141:34 - be it so we are good on that let's just
141:38 - double check that this is working title
141:42 - one and author one and yo yo yo hello
141:48 - helloooo post go down here and as you
141:52 - can see it working just fine so title
141:54 - one written by author one at the time
141:56 - and then this and then just delete it
141:58 - and it's gone so cool that cleans that
142:03 - up what else can we do one thing I
142:08 - forgot to mention is when we add
142:11 - something with the different new lines
142:14 - and stuff like multiple lines in the
142:15 - content it's like let's say line 1 and
142:17 - line 2 and line 3 like this and we post
142:21 - it as you can see the whitespace and all
142:25 - of the new lines and stuff are not
142:28 - preserved are not being rendered here so
142:31 - let's go in there and actually fix that
142:33 - okay so let's go to our code here and if
142:36 - we go to posts where that is in the loop
142:39 - where the content is printed out it's
142:41 - right here post content all we can just
142:44 - pop in something here a little bit hacky
142:46 - but that's okay all we're gonna do is
142:49 - type in
142:50 - I believe whitespace okay and then we're
142:54 - gonna say not woke space white space
142:57 - white space and we're gonna say pre-wrap
143:00 - so this what this means is preserve the
143:03 - wrap the line wrapping okay and let's
143:07 - just save this and go back here and
143:09 - refresh this and as you can see now the
143:12 - the white space and the new lines and
143:14 - stuff are all preserved so now we can
143:16 - actually have multiple paragraphs per
143:17 - blog post and so it's all in just one
143:18 - big blob okay I noticed that that air
143:21 - earlier I just I fixed it so let's
143:24 - delete this okay let's actually paste
143:31 - these in a bunch more times and save it
143:34 - and so that just looks more like a blog
143:36 - a little bit more that's fine and yeah
143:40 - let's move on alright so next let's go
143:46 - here and let's go into edit and as you
143:49 - can see let's just add in a bunch of
143:52 - stuff here to make it nicer but as you
143:54 - can see we're going to edit this is
143:56 - still not the nice new input type so
143:59 - let's all make the changes here as well
144:01 - okay so we're gonna have to go into the
144:06 - edit web page the edit template and then
144:09 - we're just going to copy over the form
144:11 - that we just did here okay but we need
144:13 - to like populate these with the existing
144:14 - content and whatnot so edit we have the
144:18 - form here and this is the old form we
144:21 - don't want that anymore we want the new
144:22 - form that we did just now with the
144:24 - labels and the nice text inputs and the
144:27 - text area and let's just paste this in
144:31 - here okay so now we have the new form
144:35 - but remember the difference with edit is
144:37 - we don't want empty forms you want to
144:38 - actually populate each of the text
144:41 - fields or text areas with whatever data
144:45 - is already in that blog post okay and
144:47 - that's pretty simple it's as simple as
144:49 - instead of having a placeholder okay
144:52 - we're just gonna have value and then
144:54 - this is just going to equal to the what
144:58 - should we call it the
145:02 - previous data so this is going to be
145:04 - post out title so the title of the post
145:05 - and then we just copy and paste this for
145:09 - author as well post dot otter and for
145:17 - this text area actually a little bit
145:20 - different there's no such thing as value
145:22 - there's no value parameter for this tag
145:25 - for a textarea tag so let's delete this
145:27 - placeholder all right and what we need
145:29 - to do is if you notice the input input
145:32 - tags don't have closing tags okay it's
145:34 - just the opening tag but the text area
145:36 - does that's because everything within
145:38 - this text tag is gonna be what's inside
145:41 - the content so instead of using value we
145:43 - actually just paste it straight into
145:44 - here like this okay but um instead of oh
145:49 - we don't need value of course but
145:51 - instead of title it's going to be
145:53 - content all right and we don't need that
145:57 - last parenthesis I mean uh quotation
146:01 - marks and I don't think there are any
146:03 - errors here yep oh but this should be
146:08 - not post should be save because we
146:11 - wanted the button to say save instead of
146:13 - post and let's just let's just see if it
146:18 - worked all right so refresh the page
146:21 - let's hit edit okay and there we go
146:24 - so if we go back we see that this is
146:26 - second blog post written by Aaron and
146:29 - the content is this is my second one we
146:32 - go in here this is my second one written
146:33 - by Aaron second blog post cool so now we
146:36 - can actually copy a bunch of I mean we
146:38 - can edit stuff in here we can go on new
146:40 - lines multiple paragraphs like this cool
146:45 - and hit save and when we come back it's
146:51 - creating a new Obi cuz we didn't we're
146:53 - not updating it oops so we need to
147:00 - change the URL that we are posting to so
147:05 - we were actually posting to the entire
147:08 - post list so we were treating like a
147:09 - treating it like a new post that's why
147:12 - it was adding it like a new post here
147:13 - okay instead of updating an existing one
147:15 - but what we need to do is actually go to
147:18 - edit remember because in our app pie we
147:21 - have the route specified that when we go
147:24 - to edit then to update the database and
147:27 - all this stuff here and then render the
147:28 - template again so we want to actually go
147:30 - to edit but we also need to pass the ID
147:31 - of which blog post in the database to
147:34 - edit if we if you go back in the video
147:37 - the form that was here earlier it
147:39 - actually had this action okay but I
147:42 - deleted the whole thing that's why I
147:43 - forgot to I should have left it and then
147:44 - double check before I ran it just make
147:46 - sure that didn't I was carrying over
147:47 - everything and spicing them together
147:48 - correctly but um yeah so we need to uh I
147:55 - think it's a post that ID I believe so
148:00 - yeah and that should fix it
148:03 - so let's yep so let's delete this okay
148:08 - I'll go here refresh this and go into
148:12 - edit and then do a bunch of changes like
148:17 - that hit save and when we come back it
148:22 - is now edited okay so we edited the
148:25 - content here the title and the author
148:27 - stayed the same but that is the Edit
148:30 - functionality cleaned up as well cool so
148:33 - when we hit again we are back in this
148:35 - nice little area with the nice input
148:38 - fields so now let's actually clean this
148:45 - up too so initially we had the add a
148:51 - create a new blog post functionally here
148:52 - on the same page as all of the existing
148:56 - blog posts the whole list but let's
148:59 - actually detach this and put this in its
149:00 - own web page okay and then add like a
149:02 - little button or something like that
149:03 - says new post that we can click the go
149:05 - there to make a new post and then when
149:07 - we save it then it comes back here and
149:09 - it's added to this list all right so
149:12 - let's start by creating a new file
149:17 - that's the first thing left to do and
149:18 - let's call it new post HTML alright new
149:23 - post
149:24 - HTML so it's gonna look very similar to
149:27 - the Edit that HTML right so
149:29 - just copy everything over from there to
149:30 - start because we want all this
149:32 - inheritance and stuff in the head and
149:33 - blah blah blah let's go through all this
149:36 - we're not editing a post we're gonna say
149:38 - new post instead of an editing post it's
149:41 - gonna say new post and then it's going
149:44 - to say yeah that's fine um well I mean
149:51 - not the idea let's just put a new post
149:53 - again I don't this is gonna look like
149:54 - what we can change it when we get in to
149:56 - the website but this form isn't what we
149:59 - want this form is to edit one that has
150:01 - all the Edit content the form that we
150:02 - actually want already exists it's right
150:04 - here remember so let's go into here and
150:07 - let's just take that and paste this into
150:15 - here like this cool and I think that's
150:23 - pretty much it
150:25 - let's just see if it worked because we
150:31 - didn't delete this yet from here so
150:33 - nothing's changing but also this exists
150:36 - but we're not linking to anywhere so we
150:37 - need to actually create a route first to
150:41 - actually render this template so before
150:43 - we can see if this is correct we need to
150:45 - go into here and create a new route all
150:53 - right so let's just copy this new route
150:58 - and this is going to be posts slash new
151:01 - okay and then we're going to allow get
151:04 - and post and are you just gonna want to
151:11 - populate this alright I mean this this
151:13 - method so we need to we can actually
151:18 - just copy this from edit because it's
151:20 - gonna be very similar um we don't need
151:23 - we don't need a specific idea of a post
151:25 - because we're creating a new one so we
151:26 - can just skip it down to here and we can
151:28 - just paste this down so if we're posting
151:31 - then we actually want to create an
151:32 - entire new post and then push that to
151:38 - the list or to the database push it to
151:41 - the database and then
151:42 - redirect back to the list of all posts
151:44 - we can see the new post that we just
151:45 - created so this is very similar
151:46 - I believe it's exactly the same actually
151:49 - a post title post author so yeah just
151:53 - getting the things from the forum and
151:55 - then oh we actual when we're creating a
152:00 - new blog post we need to create the new
152:07 - blog post after we get the format the
152:09 - current the post and add it to the
152:11 - database before it commits so let's go
152:13 - down here and then add this in here okay
152:15 - so we get though we get the data from
152:17 - the form if we're posting from all that
152:20 - data we create the new blog post and
152:22 - then we add it to the database and then
152:23 - we commit it and then we redirect back
152:25 - to posts okay yeah that looks right and
152:31 - then when we if we're only reading it I
152:34 - mean if we're only doing a get request
152:35 - here then we just want to render the new
152:38 - post dot HTML and we actually don't need
152:43 - this because there's no post being sent
152:44 - in it's just raw so like what this is
152:46 - gonna do is this is just going to render
152:48 - an empty forum for us to fill out and
152:50 - then when we fill it out and hit post
152:52 - and that's when this will fire off okay
152:53 - so that's pretty much it
152:56 - let's see if it's working so we are we
153:02 - are saying it's going to be oh crap I
153:08 - made all these changes on the wrong
153:11 - function let's do it down here oops and
153:18 - then redirect the posts and this needs
153:22 - to go back to edit all right template
153:26 - posts and that is annoying and a new
153:30 - post dot HTML okay let's make sure there
153:36 - is
153:37 - do not show again
153:45 - yeah that looks correct so let's go back
153:49 - here and refresh this and we said it's
153:51 - posts slash new global name post is not
153:55 - defined let's see what is wrong here
154:01 - yeah I forgot to delete this here
154:03 - because we're not passing in a post when
154:05 - we're creating a new post it's not
154:07 - expecting supposed to come through then
154:10 - let's just get rid of that okay and now
154:12 - it should work so let's go back and
154:14 - let's go to new and there we go it is
154:19 - rendering correctly okay so we have new
154:22 - post here this is by itself and now we
154:24 - using to make sure everything is hooked
154:25 - up correctly so let's type in a test
154:34 - title okay and test author and test
154:38 - content and let's just repeat this
154:41 - couple times cool post and it redirects
154:47 - back to our whole list and there we go
154:50 - we put in a test title the test author
154:52 - and all this test content and it's
154:54 - working just fine we can delete it too
154:56 - and it's disappeared awesome
154:59 - now last step is we just gotta get rid
155:01 - of this thing here because we don't need
155:02 - this anymore and then we also need a
155:04 - button to redirect to that new web page
155:06 - from here so we can create a new post
155:08 - all right so let's go into our posts
155:12 - here and then we can pretty much just
155:13 - get rid of this entire form at the top
155:16 - all right just like that and we don't
155:20 - need this HR anymore and save that so
155:24 - what does this look like it is gone cool
155:26 - so we have our list of all of our blog
155:28 - posts here let's change them these
155:31 - titles oops
155:33 - post is undefined ah because I deleted
155:37 - it from edit and here edit we got to put
155:42 - this back in so I think it's post equals
155:48 - posts equals
155:53 - what was it
155:55 - post equals post so let's get rid of
155:59 - that and then paste this into there
156:03 - let's try it again there we go so we'll
156:06 - just say blog post one save and we'll
156:13 - say it change this to blog post to save
156:17 - and change this to blog post three all
156:26 - right this looking a little bit more
156:28 - coherent cool so now let's add in this
156:32 - button next to all posts all right so
156:34 - what I'm thinking is remember those
156:36 - bootstrap buttons there's there is a
156:38 - green one I want to add a little button
156:40 - here right here that says new post plus
156:43 - new post in as a green button and then I
156:46 - just want that to redirect to our new
156:47 - post page so we have some way to get to
156:49 - that web page from here and then we
156:51 - could actually actually add a new post
156:53 - into here too if you want to into the
156:55 - menu but unnecessary I'm sure you guys
156:58 - can figure out a few guys want to do
156:59 - that as an exercise for yourself
157:01 - so let's go to here all posts and then I
157:05 - just want to add in a button so that's
157:08 - going to be I believe posts here
157:15 - I'll post here we go cool so we have a
157:18 - header here but I also want a button so
157:20 - let's add a button it's gonna be a and
157:25 - then it's going to be class equals
157:30 - button and then it's gonna be button
157:32 - success if you remember a success means
157:34 - it's gonna be green that's the style
157:36 - that bootstrap is all making us do and
157:39 - then we're gonna want this to go to
157:42 - slash posts slash new okay because we
157:46 - want this button to go to that URL so we
157:50 - can input a new blog post and then we
157:53 - want
157:58 - and then we just want a new post like
158:00 - that okay I'll let you see what that
158:03 - looks like so let's refresh this page
158:04 - and we can see all posts says new post
158:07 - right there that's cool but I actually
158:09 - want it over here and actually let's
158:11 - make this plus new post all right there
158:15 - we go and then I want this to be right
158:17 - aligned so I believe that is I think
158:23 - it's in the class yeah and bootstrap
158:25 - bootstrap for you can put float right
158:28 - and then it'll float all the way to the
158:30 - right so let's refresh this and there we
158:32 - go I had a new post but this looks a
158:36 - little bit funky so I want this and this
158:38 - to be on the same line in line together
158:40 - so let's pop both of these into a div
158:42 - together all right
158:43 - div and go boom and like that and indent
158:49 - both of these all right and then let's
158:53 - refresh this looking a bit bitter I mean
158:58 - I'm not looking with bitter but they're
159:01 - in a div they're gonna dip together and
159:03 - we actually need to get them in line so
159:05 - we can just do that really quickly by
159:07 - adding a quick style and then all we
159:09 - want to say is display inline okay and
159:13 - pretty much everything that has this
159:14 - style together within the same div is
159:16 - going to be inline together so let's
159:19 - refresh this and now it's inline so all
159:22 - we need to do now is just add in a
159:24 - couple of line breaks to make things a
159:25 - little bit cleaner all right let's go
159:28 - here refresh this and there we go I
159:31 - guess I don't think we need this one
159:32 - down here
159:32 - some quick spacing perfect so we have
159:37 - all posts here and we have a button and
159:39 - as you can see when we click new post it
159:42 - brings us to the new post input area so
159:45 - we can just say machine learning versus
159:51 - web development all right
159:55 - blog posts this can be by Erin Byrne F
159:57 - and we can say what is better to pursue
160:03 - web development
160:07 - or machine learning or data science
160:12 - answer both and post it and let's see if
160:22 - it worked
160:23 - machine learning versus web development
160:25 - written by Aaron Burr Neff at this time
160:27 - what is better to pursue a dormant web
160:29 - development or machine learning answer
160:30 - both so that looks like it is all
160:33 - functioning okay so we we pretty much
160:38 - put in a bunch of bootstrap into this
160:40 - entire thing we have a nav bar here that
160:43 - we chucked in we have a nice homepage
160:45 - remember if we go here we have this
160:46 - Jumbotron rectangle and some welcome
160:49 - text and then a way to get to our post
160:52 - here and from here we have all of our
160:53 - crud functionality with nice buttons and
160:55 - nice padding and nice containers using
160:57 - bootstrap we have the ability to
160:59 - separate white space to display if our
161:03 - texts are have multiple paragraphs in
161:07 - our in our blog posts within these edit
161:09 - fields we have the better input fields
161:11 - we have a giant text area for our
161:14 - editing post and we have this new post
161:17 - button so that there guys pretty much
161:20 - wraps up our flask app and some guys
161:26 - hanging outside that pretty much wraps
161:29 - up our flask app with bootstrap enabled
161:31 - I think this looks a lot nicer than what
161:32 - we had before but this is a nice little
161:35 - project to get you started if you never
161:37 - use flash before from here you can add
161:39 - on a lot of different things you can um
161:40 - you could really like go in-depth and
161:43 - get this all going you could add like a
161:44 - sidebar over here and here you could add
161:46 - like a whole editor so you could have
161:48 - like you know how at the top of editing
161:50 - out of text fields I have like the bold
161:52 - button and the italics button and like
161:54 - underlined button and then like the text
161:56 - size and all that you could implement
161:57 - all that and all this stuff but that's
162:00 - getting more and more into front-end
162:01 - development and less flasks so I think
162:03 - this is a good place to end it all right
162:06 - so this is our little flash blogging app
162:08 - there's no login functionality maybe
162:12 - we'll do that some other time but I
162:13 - think this is a perfect amount a
162:15 - bite-sized chunk to get you guys started
162:16 - defeat of use flash before
162:17 - so thanks for watching and I will see
162:20 - you guys in a different video good bye
162:25 - hey guys nice job you made it to the end
162:28 - of the flats tutorial very proud of you
162:31 - guys you made it this far you went from
162:32 - completely knowing nothing about flasks
162:34 - and creating your basic app all the way
162:36 - up to having a full blogging app with
162:38 - bootstrap enabled with a beautiful front
162:40 - end and a back end and a database and
162:42 - everything is great and I just want to
162:44 - congratulate you for completing that
162:46 - project so and I have this little thing
162:47 - in your back pocket you can pull it out
162:49 - whenever you need but good job for
162:51 - getting this far now if you're
162:54 - interested in taking things further ok
162:56 - if you like this course then I just
162:58 - wanna remind you that we have a one hour
163:00 - plus webinar called the three secrets to
163:03 - becoming a Python freelancer in 2019 and
163:06 - beyond which basically tells you how to
163:08 - go from not knowing anything encoding at
163:10 - all and whatever the steps you can take
163:12 - to increase your chances maximize your
163:15 - chances to having a six-figure income as
163:17 - a Python freelancer okay it's not a
163:19 - guarantee you're gonna make it okay but
163:21 - it really really increases your chances
163:22 - to actually get in there making it
163:24 - happen if you put in the work so we're
163:25 - gonna be going over the three secrets
163:26 - yeah it teaches you how to line clients
163:28 - how to reach out I mentioned the
163:30 - technical skills you probably gonna have
163:31 - to learn that's actually the easiest
163:32 - part
163:33 - everybody everybody knows that but how
163:34 - to reach out to clients how to do all
163:37 - the soft skill things how to negotiate
163:38 - and all that stuff and the different
163:41 - opportunities you can pursue and we're
163:43 - to really direct and focus your energy
163:44 - and whatnot to actually start making
163:47 - income with Python and programming in
163:49 - general alright
163:50 - so definitely check it out we all worked
163:52 - really hard on it just reminding you
163:53 - again if you like this video then go
163:55 - check that out and go check out the
163:56 - other videos on our channel and just
163:57 - stick with us and good [ __ ] will happen
164:00 - and thank you for watching this course
164:05 - [Music]
164:16 - you
164:17 - [Music]

Cleaned transcript:

hey what's up you guys aaron here from clever programmer calm and welcome to the flask crash course alright so this is a great tutorial we're gonna be going over a lot of stuff in the flash framework that allows us to build websites cleanly and efficiently without having any extra clutter so flask is a great framework we're gonna be going over the file structure so that we know how to organize our website and how all the different files interact the syntax of being frameworks so that we can put everything correctly we're gonna learn how to create blast bottles so that we can model real world objects in our code flask view so we can house all of our programming logic so that we know a code to run when a certain things on the website happened flask templates so that we know how it displays the whole front in and everything and also hook it all up to a database so we can have full crud functionality on our website we're gonna start with a very basic class cap it's probably like six or seven lines of code and from there we're gonna build our way up slowly learning all these different parts that I just mentioned and eventually we're gonna get to a fullblown blogging app with the bootstrap enable so that looks very nice with a pretty frontend I'm probably gonna be showing some stuff from the screen right now with what its gonna look like so you kind of have a preview of what we're gonna be making it'll be a lot of fun stay tuned we're gonna get to that very shortly subscribe to the channel don't forget that click the notification bill whatever people still do that comment ask questions Oh while we're going through this course you guys I have the code in the description if you want to compare your code at the end so definitely check it out if you want to download it and just compare your own code if you're following along so definitely do that you should definitely follow along and cool along with me during this project I mean you can still watch it but the code is in the description so check it out hey guys so real quick before we start I want to tell you that we have a really really cool 1 hour plus webinar that goes over the three secrets of how you can become a Python freelancer in 2019 2020 and beyond and it tells you how to start making an income even if you're a complete beginner if you've never written a lot of code before if you don't even know what code is or any of that stuff and how you can go from that to having a sixfigure income as a freelancer or even as a software developer at a company if you want to do that it's still relevant so definitely check that out it's completely free just click the link in the description and you can put in your name in your email there and you'll be sent a link to get started the team worked really hard on it this guy this guy me other people so I just wanted to put as much value as we could it's one for you guys we shot it and we edit it and now it's free for all you guys watch so just go check it out we really appreciate it I think you'll really enjoy hey what's up you guys so now let's get started with the flask crash course okay but before we get into the code I want to actually go over what flask is if you guys don't already know that so all flask is is a web framework and all the web framework is is just a way to structure a website so like when you go to a certain URL then a certain web page pops up and then you could organize all these web pages together into website and you can kind of define how they're all named and all the names and stuff and how its laid out and structured how its framed I guess that's why it's called a framework maybe a double meaning there but that's pretty much it I mean you know you do need to know see HTML and CSS to actually design the web pages but then and then you use that within flask so if you don't know already know that please go do that first learn HTML and CSS first and then come back to this and then this will be useful and Python as well okay flask is written in Python if you didn't know that so we're gonna be doing all that meaning Python HTML CSS and then you can come to flask okay but that's pretty much it it's web framework one thing I need to point out though is that is it it is a micro web framework all right and all that really means is it is super lightweight and barebones so it kind of doesn't come prepackaged with anything at all it's like super super lightweight like you can get a web a very simple website web page up and running in about six lines of code five lines of code and it takes about 60 seconds to code up and we're actually gonna do that in a couple of minutes when we get to the code port on part after we install it but yeah it third align the line design philosophy is to just kind of import things as you need them so there's no database there's no form validation you guys know what the things are um database just like allows you to house data then you can like edit that data or retrieve it or or create things like crud operations and then form validation is whenever you're doing like API HTTP requests and stuff like to make sure that the request is valid or if you're like submitting any kind of form then just making sure it's valid before you send it so doesn't break the server and stuff though flash doesn't have any of that okay you actually need to import those things as you need them as you want them which is nice because it's very clean and minimalistic which I like unlike Django which has like everything bunched into together I has a database and backend and all these everything just has everything in one it's like one juicy package which is cool but flask you just like more I guess you have a little more maneuverability oh yeah I guess they have a tag on here it says web development one drop at a time I never noticed that before but that goes along with their minimalistic import as you need design philosophy so that's cool so this is it apparently Pinterest and LinkedIn are built on flask I didn't know that and learning everyday cool and yeah let's just jump into the code let's get started so I'm in my IDE here I'm using vs code this is my idea of choice it's pretty nice but you just use whatever you prefer okay first I created a directory called flask up I'm just gonna be working in here and how about my files in here but yeah let's go down to the terminal let's start by installing flask okay so you can do it here you can just open up into the terminal if you don't know what a terminal is just open up the tournament here same thing but I'm just gonna use this integrated one because it looks nicer makes for a nice for video you know but I'm just gonna want to run pip install flask okay and that should run if you're getting some error um like permission errors you could have just run sudo pip install flask that just stands for Super User do okay they just kind of like overrides any permission errors you might have but we need to do that okay because we've already installed it so after you have flask installed you could type in flask version just make sure that you have it installed and as you can see we have flask installed the flash version 1.1.1 okay and yeah let's just get started so let's go into here and flask app and create a new file alright and I'm just gonna call it app dot PI all right don't need that and now we can start putting up our first flask app okay so I said earlier is gonna take about 60 seconds might take a little bit longer but it's really short it's just a few lines of code so the first line is of course from flask import flask we're just going to be importing the flask liber that we just downloaded okay that's how you do that there and afterward after we've done that we import this flask object okay now we just want to create in a flask using that flask object so that's how you do this okay you just call the flask constructor here and then we just create a app I mean I just called it app but you do need to pop in name here okay this is just like this just references this file this is a Python thing if you're curious you can look into it but you just have to do it so just follow it and if you're if you want to learn more about it you can look at you can google it or something but it just references this file it's not super important right now alright and now we can start getting into our flask stuff okay so flasks web frameworks so we're gonna be creating websites which is just a bunch of URLs that that lead to web pages so how do we define a URL okay well we do that by routing so it's called a route it's just like a URL route so we'll just do this little thing here this it's called a decorator in Python if you start a line with a ampersand like not a person at sign like that and flask uses this to define all of its URLs so this is the base URL if there's absolutely nothing so like your domain would be here so like www.yourdearbaby.com show you that later but just know this means if it's just your domain with nothing after it okay like WW gel calm or something that would be that there's nothing that coming after so if the base URL of our website is that then we can just have a function right below it and this will this code is what will run whenever we get to this URL pretty simple so we'll just say let's just do a simple hello world okay and you're just gonna return hello world okay and that's pretty much it there's one more thing we have to do down here just for good practice sake we always doing this in Python you know so if you just want to make sure if we are running this direct from the command line in which case the name will be main if we're in this file directly then we actually want to turn on debug mode or which is pretty much developer mode okay which just like allows us to have it shows us actual errors whenever an error pops up and just sitting instead of just saying oh four four arrow blah blah and I should give this the full breakdown so we can actually figure out what's wrong and then also it allows us to update our server and our website on the fly so we're not this keep like stopping and restarting a server okay I'll demonstrate all this in a second but this here is pretty much the most basic flask app you can write okay you have like we import the library we create a flask app we define a route and the custom code to run and then just some practice developer stuff so yeah let's just get this running and see what happens okay go down here and we're gonna type Python app PI and and there we go so now it says debug mode is on it says the server flask app app we named it app write is running and it's running on this localhost okay so 120 7.0 point oh point one is actually gives you your localhost so instead we don't have an online domain right now like I said like www.google.com/mapmaker we're just using the localhost right now but it's gonna be on port 5,000 so that's important so let's just go back to our browser and paste this in okay and as you can see let me zoom in here a bit that hello world that we typed in is displayed here okay so this is the website this is our web page we can I change it to localhost okay instead and it'll it'll bring us the same page but yeah that's pretty much how flask works okay let's go back here one other thing I want to mention really quick is actually if you want to handle multiple things with one I mean multiple routes with one method or one function I mean then you can you can do that pretty much whenever you see route whatever mith function is like closest that comes next linearly in the code is the code that'll get right okay so if we see this we can actually put multiple ones here and let's just say we have home alright and so now if the base index and home slash home we'll both go to hello world like this so we save it and because debug mode is on then it automatically updates our server will go here and refresh this and no changes that worked or let's hello world to cool just so we can see some changes make them taking place there we go hello world too but also we said if we wanted at home to go to the same method then we can do that Aiki probably method functions are home alright and home will also bring us the same thing however if we go to some bogus URL like this and I hit enter then you're just gonna get a not found error okay so that's because this path wasn't defined if we actually defined slash bogus like change this to bogus or something then it would work alright so pretty straightforward should make sense up to this point but that's pretty much the basics and the most basic app we could make with flask and now we're going to start getting into a little bit more advanced stuff all right so I'll see you soon all right welcome back you guys so now we're gonna go into a little bit of advanced routing just like pretty much playing around a little bit with this app grout line up here and different things you can do with it so let's get rid of this to keep it simple almost go back to the base index or actually I'll leave it as home okay so let's just leave it like this and hello let's just go back here and run this it's still working a slash home is still working alright so what I want to show you guys actually how you can get parameters from the URL into our code okay so whatever we show URL right um and we get and then we run this function and this this uh this text is returned to the web page for the web page to display whether it's HTML or tech raw text like it is here whatever it is maybe there's some stuff in here that we want to change based on what was given the URL so like maybe like we want to actually like greet somebody in their name so let's just go through it and I'll show you what I mean so maybe a path like you want to actually be like slash home slash Aaron my name or a slash home slash kasi or something like that and depending on that you want to say like hello Aaron or hello Kazi instead so how like using pretty much like using variables in URL so how you do that is you use your little brackets here and then you define the data type and then the variable name so just like that so there's gonna be a string called name and then you can actually just pop a name here and this name here and this name needs to be the same and now we have access to this in our code okay so whatever pops up here in the URL whether it be Aaron or Kazi or any other string then now we have access to it here so now we can actually go here like this and actually add in something like that okay so whatever is in the URL is now gonna be displayed in the web page so that's how you get stuff from the URL like like parameters and variables into our code so let's some refresh this and we get a not found error because we didn't I should put a name forgot to put a name so now let's put name Aaron there and as you can see it says hello Aaron okay and we can put anything once there Kazi will also work or hello stupid but yeah so that's how you get variables from the URL into here so this might seem a little bit redundant I mean like like why would you need to do this but um one very useful thing that this allows us to do is pretty much um for dynamic URLs and um dynamic URLs are like when you have like maybe if your website where you have a bunch of different profiles a different bunch of bunch of blog posts or images or something and each one has an ID and the URL just keeps changing and then you might have like int okay and then you could have like ID like this or something like image image ID or something or just ID in general and then as this thing keeps changing then you could like have like some code here it's like Oh display image with this ID okay and it makes it very simple to handle all of the these URLs in one so you don't have to like have like um each one individually you don't to be like Oh a Prout one right display image one and then a Prout to have a separate function display image two and so on so forth you can just have this up here and then just pop in ID of course you have to change this ID and then you can just say okay based on ID well this is an int so you have to cast to a string before I print it but you need to what's going oh I have an extra parenthesis here but you need to I lost my train of thought that's okay but pretty much yeah it just allows you to have dynamic URL so that you can handle multiple URLs with one function okay and then of course you can have multiple ones of these so you could have like home slash users slash string well let me let me show you this first before I get exact so let's just do this and show you the string as well oops that's not right because usually home slash needs to be an int not a string so let's just put 10 okay so hello 10 cool but you can also have multiple ones in here so maybe like users slash string name slash posts slash ID okay so now we have name and we have ID so like okay let's should we have like website of some users and then you have the user name and then you have all their posts and you have an ID of one of their posts so it could be like hello name your ID is something like that and pop name back in here and let's run this okay and refresh this oops so we need to go to Aaron slash posts was it home slash users home slash users is what we said slash the name slash posts slash the ID so let's put five and let's hit enter and there we go it says hello Aaron your ID is five based on all the stuff in the URL okay and as this changes we can easily just keep updating this okay and then if we actually had like images and stuff we could like okay fetch this and I should return an image instead of just text you could be like image eight image blah blah blah and as we change the URL different images will be popping up okay so that's kind of the idea of dynamic URLs and routing with variables using this bracket notation here okay pretty cool and one other thing I want to go over now is actually limiting your webpages to specific request methods okay so let's just add another one here just for simplicity say because I don't to get too fancy on one and let's just call this only get there real that might not make sense right now would just just bear with me for a second so get get request and you can only get this web page okay so I saw this little thing out here and or actually get only or yeah whatever it doesn't really matter okay I'm getting nitpicky here but pretty much what I'm gonna do here is I want this web page to only allow get um get requests so you can only get get and like it doesn't it doesn't allow post or put or anything else at all alright only get and you can actually specify which methods you want to be allowed but let's just run this to see what happens okay only get like that okay so you can only get this webpage so that's actually not true because this is just a normal app route and everything but what you can do in this route method is after after the this little string here you can actually declare I think it's methods with an S yeah methods like this and then you can specify all of the pretty much the HTTP requests that you will accept on this webpage so if you only want to get get then it would be like that if you only want post then it would be like that okay if you want to get and post then it would be like this very simple it's just a list of all the allowed methods okay but since we're only allowing get here then why me this will still work because the get is still there so let's just give this a shot and run this okay and as you can see it still works and let's just pop it to and here to prove that it's still changing so it still works only get and also if we have only just get it all that's what all the intent I intended originally to only be able to get this webpage then changes to three just to demonstrate that it's continued to work three works but if we put post in here all right it's only allowing posts but it's gonna try to get so we're probably gonna get an error see method not allowed so this method is not allowed for the request the URL because you're trying to get this um you're trying to get this code whatever you request a web page you're trying to get it but it's only allowing to post and post would be like okay like like sending something to URL for them to save it to a database but yeah that's how you define your allowed request methods and then you can limit it to certain things okay so that's some fancy advanced routing stuff you can do and now we're gonna get into templating and actually doing some of the front and work like with HTML and CSS and static files like images involve a lot in our flask website framework hey what's up you guys so now we're gonna go over templates okay templates are just pretty much the front end of flask a way to organize all of our HTML and CSS and like those kind of frontend things and make them clean and stuff I make it not cluttered and very easy like just make our website easily manageable but it's been mainly for the for the frontend okay this is where our HTML code is gonna be going so I'm just gonna leave these two things here since we code them up but I'm just gonna go back to something simple I'm just gonna actually just pop back in a the base directory okay just keep things simple for now and let's call this index and very simple return home page okay like that nothing nothing scary okay let's just save this and go back to our browser here and go to the home page and as you can see home page pops up right there okay I'm zoomed in that's why it's so big but this is just regular bra text okay now I think I mentioned earlier that whenever we have a function here or a route and then a function it executed on that route whatever is returned back it's just spit into the browser so the browser can interpret anything it can interpret raw text like it is right now or it could even interpret HTML just raw HTML so we can actually do this okay we can actually just pop in some h1 tags like this and we'll go back here and when we refresh we'll see that it changed to an h1 tag all right so this is HTML code I mean it's not legal because it's just like a single tag it doesn't have all the right like protocol um all the other stuff well if the HTML needs all those other tags and stuff but this is just like a raw tag like it takes it XML or something whatever you want to call it but yeah pretty much you can put in everything you want in here you could even do like a we could do a triple um a multiline string here like this and then actually put in your entire HTML webpage in here but I mean that gets really messy so that's this is word templates come in so because we have the ability to return anything here that we want it would be nice to put this all this stuff into a separate file okay and in this case we're gonna be putting it into a template file which was just an HTML file but they they're called templates so let's make a new folder in our flask app okay and call it templates alright it has to be called templates and then inside here let's just put index dot HTML all right index.html and then let's just paste all this into there copy and paste cool so just that for now and home page and back here okay so now now what we're gonna do is we're gonna learn how to actually get this HTML file in here we're just gonna render this as a template okay so first of all we need to import render template it autocompleted for me that's nice and then here instead of just returning a string we're going to be returning a function call I mean it's still a string but we're just gonna be calling this render template function and this is going to just take the name of the template that we are getting okay and it's in a template so it has to be in a directory called templates okay in order for it to find it so it's assumed that it's within templates parallel to our app and then index.html is inside there okay so let's run this now again well it should go to be running let's just refresh the page and nothing happened as figured but let's just put a two in here to signify any differences and boom as you can see our template is being rendered correctly okay so now let's actually fill this out to be proper HTML code I think HTML yeah looks like we can autocomplete with some some code or some boilerplate code thanks vs code alright so um I mean this is gonna look exactly the same let's just put it as three and go back here and boom okay but there's a little bit of formatting up there some a something up here happen I think content yeah all this stuff but yeah that's how you get that's how you render a template into your flask function okay so you're just like rendering this HTML file which is nice but as you can see all this stuff up here there's a bunch of other stuff from the HTML so there's actually something we can do called template inheritance which is kind of just like taking all the stuff that's common in all the web pages and putting it all into one file okay so let's let's actually do that now let's call this base HTML all right and let's copy all of this into there because every every web page needs like the doctype HTML needs this and eats the head and needs the body tags and all that so why don't we just like put that all on to one place okay like this and now now on what we can do is we can actually signify blocks in here that we want to be able to plug into so the only things that are relevant here that we are gonna be changed from web page to a web page are probably the name like the title here and the content in here so what we can do is we can actually just get rid of this okay and then we can use something called Jinja to which comes with flask if you know Django then you probably look it looks kind of familiar but we have this ability to code in things and put blocks and actually use like for loops and cool stuff in here thanks to ginger but this is how you do it so you can actually define blocks and then give them names so I'm just gonna call this title or not title maybe I get call it head whatever and then you can actually signify a block like this so make sure that you open and close with this bracket and parentheses I mean bracket and % notation and right here this signifies a block so now we can actually access this block wherever and um input content into their ourselves whenever with whatever content we want if we extend from base that HTML so let's do the same thing let's just copy this and paste it down here but call this body instead alright just like that now let's go back to index.html and they should all start making sense if you if you got lost or if I wasn't making any sense well let's just delete all this and now what we can say is instead of having all the HTML code we can simply say extend is extends with an S that's right extends base HTML all right so now now this using the Jinja syntax which is this fancy stuff here that comes packaged with flask when you download it then it hurts all of this stuff everything in here including these little body things these two blocks and now within here we have access to those blocks so we can actually say what we want to plug into those blocks which will automatically be plugged into here so that it's like a fullblown HTML page all right so let's just actually let's go here and copy this that's a little bit faster copy paste paste make sure this is body instead of head all right and boom just like that now this is actually just inheriting from our base which has all of this HTML stuff but now we have the ability to just plug in the stuff to these two blocks so very simple so here now we're gonna do this again we're gonna have title alright oops there we go title and then we're going to call it home page or just home again alright and then the body again we're gonna have each header tags and then just gonna call it home page and save that ok and now let's go back here and refresh it and as you can see it changed to home page again and up here the title has to home all right so that is how templates work at a very basic level we're gonna be going into some other things to just I just want to introduce you guys mainly to putting HTML code into other files which is templates and then this little Jinja syntax and we're actually gonna be getting into more into this stuff into syntax in the next segment we talked about sending variables around from from our code to templates and whatnot in case we have like maybe we have some data in in here and then we want to send it to the HTML so the HTML can display that data in some way something like that okay I always see you guys soon all right it is now officially soon so let's get started so we just learned about the Jinja syntax and stuff right in and rendering templates so using templates and inheriting templates and being able to signify blocks and whatnot using this syntax like extending HTML pretty much to be able to play around with it a little bit more now we're gonna talk about how to actually pass data from here to HTML in case you want to display it or something all right so let's actually create another route another web page and I'm just gonna call this slash posts okay like we're gonna have some blog posts or image posts or something maybe maybe we can make an Instagram clone or something like that but just posts for now okay and then I'm gonna call it posts define posts and then return render template alright and then I'm going to want to make a file called postage do and then I here almond boob that we can inherit everything so I'm just going to copy this over and to here nice get rid of all this stuff I'll actually maybe I'll just leave it in I'll change this to posts okay and then this I'll change to all posts cool and here render template and then we got to fill out the posts HTML unless you see if this is running okay so now that we're here let's just go to posts alright and as you can see all post pops up so it looks like it's working alright so let's go back here and now now let's actually create some dummy data so that we can actually send data from here to the HTML to see how we would do that okay so this is just dummy data you might actually have real data from a real database later on but for now we're just going to imitate it and use dummy data okay let's just go up here and we're just gonna call it posts all right or all posts yeah all posts will work and let's just make this a list okay and it's going to be a list of dictionaries so dictionaries are the way that you want to structure your databases in your your data here because it it's it allows you to easily access all the data in Jinja I'll show you how in just a second so let's just say okay if you have some blog posts we'll just call have like the title of the blog post or the name or whatever and then we'll just say this is post one all right comma and then we can say something like content yeah content and be like this is the content of post lalalalala cool and then let's just copy this so that we have two posts do just like that change is supposed to and post two and call that good all right so we have some dummy data here it's a list of dictionaries and dictionaries is the way we want to structure our data so we have this data called all posts so let's go to where's Ariel posts and now all we're going to do is we are going to define a variable okay let's just call it posts and um we want so we have it's called posts and then we want to pass in data to this so we're just gonna call it all posts you can call us whatever you want but that makes sense so all posts is our data and then now we have a have a variable called posts here okay so um note note this this blue posts right here now will be go to post at HTML we are actually going to have access to all of this data in here by using this name posts so let's go do that and I'll show you how that's done all right so let's go down here and it says all posts but for now I'm just gonna print out one thing first so we have access to posts so we can actually well let me show you this um Jinja to is actually very powerful you can you can um signal you can signify the blocks like this but you can also do other things you can actually have like loops and stuff to loop over data and whatnot so just like just like in Django okay and it's that it's templating engine so we can just say for posts in posts because remember posts is what we call this over here so whatever we call this we have to call that but now we can just um loop over it just like a Python loop alright and all we need to do is close it off just like a well every loop should be closed off and now we have access to each of these posts individually okay so we could actually go in here and do something like h2 you know and then go like Oh posts Oh another thing that I'll show you guys I guess I'll show you right now I might be going a little bit too fast but just follow along so this allows us to do like syntax things like define like blocks and do things like control flow kind of things like Oh like move this chunk of text over here and plug this into here or loop over this this many times in yadda yadda but the if you use double braces like this this is actually printing out something so what I mean by that is the post our dummy data the each post has a title right and it has content so we can actually just go in here and just go like this and use dot notation just like that oops post that title okay and using this double braces like this and post dot title and this will just print out the string of this post one so it'll just print out post one here it'll plug it into this thing here which is very nice so we can do that and then also we have our content that we want to put in so I guess I'll put that in a pete tag yeah that makes the most sense and then same deal we just want to use this and then instead of that it's gonna be post I mean instead of title is gonna be post content all right so let's just see how this goes so I came in here and then we're looping over a variable that we passed in posts and then for each one of those posts that were looping over we're just pulling out some data and then we're printing it okay within a valid HTML tag so let's go back to our page share and refresh it and as you can see these post pop up so it says post one this is the content of post one and post two this is the content of post two because I use h2 tags and P tags so it looks like the formatting is all correct here I'm just really zoomed in still so yeah that's pretty nice and clean another thing you can do is you can use if statements okay so I want to show you guys that let's go I think if I uh yeah yeah I think we can do this so let's say our data might have an author for the blog post but only but it's optional like maybe the author isn't available or something so for here we'll put Erin that's me and then for a post there will be no author okay this just doesn't exist so let's go to posts and now we can say if there's a post here then we also want to print out the title alright so we could just do this and then just try to print it out there it is so post dot author alright just like that and why don't we just give that give this try and see what happens oops what so it's complaining about something one second I think yeah I didn't add a comma here because I added this thing to the dictionary let's try again let's restart the server and now let's go back to here and refresh it now so it worked it just it just ignored the data that wasn't there so it didn't break anything which is cool but what if we wanted to actually like pick out if there's a author or not then it's probably good to check and then you can say like oh it's by this person by this author or by author unknown or something like that so let's just put a check in there for demonstration purposes to show you how it's done so we're just gonna say if oops if something exists so if post dot author exists all right if that exists then you want to put this here and actually we're gonna go like this then um display by author otherwise the way you do that is just else big surprise then maybe we can do something like this by ah na or the author unknown is actually better now let's just put na not available because it's literally not available cool and then to close off a if statement then you just put and if just like that okay so this is a little statement here checking if there's an author and then displaying it and then if not then just displaying na and let's just run this and see what happens go over here refresh this page and as you can see I made updated and since there's the the first blog post have been off has an author then it displays it out and the second one because it doesn't it just displays na alright so this is cool this is very very elementary rudimentary kind of blog web page right now oh we have our posts just two posts right now but we can really clean this up with CSS and stuff in bootstrap later on um when we actually do a project but all right now I'm just showing you these syntax and how all this stuff works okay and there's ginger stuff so that is pretty much it for getting sending variables from our flask app to our front in using templates and stuff and utilizing those ginger control flow statements to get crafty with displaying that data so like actually let's go back here really quick and go to inspect so we can actually see the HTML code so if you look here this is the HTML code that was generated here on this web page and if you look back this is all we actually have in the file so remember we had the extends based on HTML so we have all this HTML so there's like doctype HTML let's make sure that's there yep there's doctype there's all this stuff there's all this crazy head stuff but the title is posts which is what we added in here from the block and then block body is all down here and then let's see if we can find post one yup post one is here with the author and stuff and then post two is right here so pretty cool this all this HTML was generated from all of our ginger with the loops like it was looping over and generating HTML on the fly and the blocks were all being plugged into our basic HTML so that's pretty much how templating works in flask okay there's more you can do even but those are the basics and most important things that you need to know first and yeah I think we should start getting into databases or something next or form submission or something like that but some more interesting more interesting things okay that kind of wraps up templates for now and I'll see you guys in a bit all right welcome back so we just went over templates in flask and how to get your HTML files into your flask program alright and we also went over a little bit of Jinja to using these percent braces and these double braces to be able to import variables into our frontend HTML so that we can have a dynamic frontend pretty much okay dynamically generated and now we're going to be moving on to how to get your static files into your flask program as well okay so static files are basically your styling sheets and your JavaScript so your CSS and your JavaScript these are static just because we're statically loaded every time they don't change dynamically like the HTML files might want in yada yada so let's just create a new folder in here okay called static and then within here let's create a folder called CSS and then with an earless code create a file called main CSS okay so you need this directory structure static and then CSS and they mean that CSS to keep it organized and here you we're just confusing a example styling sheet so it's not gonna be crazy we're just gonna very very simple just change the font so font family mol changes to Helvetica okay I saved that that's good enough for now instead of this Times New Roman font I'm just gonna change it but let's say we want to apply this CSS to everything on our web page okay so since everything is inheriting from based on HTML we can I just go into here and pop in the static file linking here so we just put in a link tag and I'm gonna say it's a stylesheet alright and then the file location will just be static slash CSS slash main dot CSS just like that so now this is going to be applied everywhere since we're changing the body tag this is just gonna change the font of everything in the body on every web page I think I saved it so it should be running cuz we're in debug mode it automatically updated let's go back here let's hit refresh and as you can see it changed to Helvetica okay from whatever Times New Roman font we had before and if we go into inspect and we go down to here then we can see the font family is Helvetica and you can toggle on and off here pretty much our change so that's pretty much it on how to link in your CSS files it'll be exactly the same for JavaScript okay you would just create a oops nope you would just create a new folder in here called j/s and then again new file main J s and then yada yada type out your JavaScript link it in here just like you did the CSS and that's how you do your static linking however there is one thing oh we do we can link it like this as you saw like it's working but a better way a better practice of doing it is to use a method called URL for so this will just more robust in the getting the static file location and it's just gonna be like this okay URL for so instead of writing out the entire static the URL path like word like character for character we're gonna be using this ginger syntax again so to get the gist syntax in here it's just going to plug in something so we're gonna call some code and then whatever this code returns we're going to plug into here that's what ginger does alright so URL 4 is actually gonna return the location of a static file and then it's just going to print it out as a string or I plug it in as a string into our HTML here so the way we do that is we define the the toplevel directory since this is a static file just gonna be static and then within here and then you can actually define the file name further okay so the way we do this oops don't use double quotes because we're gonna use them it then we're just going to put CSS slash main CSS all right and now when you run this this is going to autocomplete or it's going to evaluate to the actual complete path of this and then it's just going to be plugged in via Jinja so when we go back here back to our webpage then we can see that when we refresh it that um it stays the same well just to prove it to you let me just I'll comment this out so you can see that it's actually being read so when we comment this out okay and then we refresh this it goes back to what it was before but then when we put it back in okay with this new format let me save it and we go back here we can see that the font change still takes place okay so that's how you should link things your static files in in flask using URL for and this Jinja syntax thing okay so that's how you link your static files I'll see you guys soon to go over databases all right you guys so now we're gonna go over to databases alright so I said earlier that flax doesn't actually come with a database all included with it when you download it which is true because they want to keep a lightweight so if you want a database then we have to actually use an external thirdparty one so there's a school little library that has interoperability with flask called SQL alchemy you never heard of it is just kind of like a um interface to allow us to interact with databases like sequel Lite or my sequel or Postgres or something from application like flask so let's just get into it and I'll show you how it works okay so first you're gonna need to actually install it so go don't go down to your terminal alright and then just run pip install flask dot SQL alchemy just like that just spell it right yeah so run that and it should download I'll already have it downloaded so it didn't actually download it'll take like 10 seconds having issues again you could use again you could use oops sudo just run sudo before the whole command and then all that might fix it all but now that it's installed let's just get into the code okay so the first thing you're gonna have to do is obviously import it so we're just going to run umm what is it called from flask sq alchemy import SQL alchemy alright yeah it should be import SQL alchemy just like that so now that we have that now we actually just start setting up our database okay so the first thing we're gonna do is we need to actually tell us or tell flask our flask app where our database is going to be stored okay so that's done through a configuration so we actually just call config on our scout okay and then there is a field in that configuration file called SQL alchemy underscore database underscore URI which is just a path to where the database is stored okay so we're gonna be using SQLite because it's just easy for the when we're in development mode and then if you actually in production mode then you can use a different database if you want but the really nice thing about SQL like alchemy is that it allows us to use any database we like and um it's as simple as just changing the route to a different database and then pretty much all of the query and stuff to our database is the same so SQL alchemy is like a nice interface and it allows us to use the same code pretty much but we can actually hotswap in my sequel or Postgres later when we're act in actual production mode but we're just gonna use SQLite for now just because it's simple and it's easy and SQL Lite stores the database locally in a file so we're actually gonna have our database stored in here in a file right down here umm we'll do that in a few seconds you'll see but that's why we're gonna use SQLite okay so once you have your database chosen okay oops let me disable this the emoji thing but once you have your database chosen then you just need to define the path of where it's going to be stored okay so you can use three slashes or four slashes on the actually two different things this means it's gonna be a relative path so wherever we put it it's gonna be relative to this current file app dot pi or if I put four slashes then this is a absolute path and I can go from the root directory or something but we're just gonna do relative that's what you should be doing it's it's a it's better in cleaner but we're just gonna call this post's dot DB okay so we're gonna create a file a database file called posts and this is actually just going to pop up right parallel to this file so it's going to be right down here okay so that's how you do that now now that we have that now we can actually our database so deep or I'm just gonna call it DB equals SQL alchemy alright and then we just pop an app like that so now we have a database and SQL alchemy took our app our flask app and is now linked them together okay so that's pretty much all of the setup for the database now we can actually get into designing the database okay so if you guys are familiar with modelviewcontroller stuff the structure for web development pretty much then then we're gonna be doing our models right now if you don't know models are pretty much it's just a way to structure the data in your database so it's like okay if if we're in a database and we're making a blog then each blog is gonna have a title and then it's gonna have an author and it's gonna have some text that is actually in the blog post and that's how those are the kind of things you'd need so like in your database you're gonna need a title field a content field in an author field so we're gonna model that in code so if you're coming from Django then this should be very straightforward but yeah let's just create some models okay so the one we're gonna do or you create with classes by the way you you kinda just define a class and then each each class variable is considered like a piece of data in your database so I'm just gonna call this class blog post okay and it needs to inherit from model all right our database model because making the model and now we just need to go through all the different things that a blog post might have okay so the first thing that many most models have or pretty much all models should have is an ID okay and um oh we have to create columns okay so the way we do it in SQ alchemy is we create columns in the table so a database is really just like a big table okay and then each column is like the one of the different attributes and then each row is like another each row is a separate is a separate blog post and each column is a different class variable so after you redefine a column then you have to give the data type so this is going to be an integer alright and then we're gonna set this to primary key to be true alright and what that means is prime he is just it just means that this ID is going to be the main distinguisher between different blog posts because this ID will always be unique even if you have duplicate blog on blog posts and blah blah blah this will always be the distinguishing factor so that's what we call the primary key it's like an in dictionary like the key needs to be unique so this idea will always be unique all right what else we need we need a title okay so I'm just gonna go through these pretty quickly it's pretty much the same thing it's just we change the data type so for title then we want this to be string okay and we can actually limit this to a certain amount of characters so I'm just gonna put a hundred what first ring you actually have to I believe I don't know what the default is but I think you need to put a number in here so we're just gonna say title can be up to 100 characters and then I'm gonna set this um nullable equal to false all this means is that this field is required okay this field cannot be null cannot be like nothing so we're setting this to false which means this has to be here okay what else we need we need content okay so the content of the blog post is going to be column again if I can type it correctly and this time it's not gonna be string but it's just gonna be text okay and this has no length to it it just goes for as long as it once and then this is also gonna be required for a blog post okay cuz you don't an empty blog post next we're gonna have author all right we're just creating a model here for a blog post you guys haven't caught on to that yet column again for like the third fourth time and then string and let's just limit it to 20 because I don't think most people's names are longer than 20 characters so that should be good enough and then nullable equals false like there always needs to be um some kind of author listed however if there's no author actually written down like we had before and our dummy data like this if there's nothing there then I want I want it to autocomplete oops then I wanted to autocomplete to n/a okay so all we can do I mean all we need to do to do that is you can actually just set a fault so a default value for that would just be an a and so this is saying that our author is required but if it isn't actually there just set it to the default so that's handy okay and last thing I think we'll do date post it okay or date created or whatever and again DB dot column and DB dot date time so actually this this is a different data type this is a date time because it needs to be a date obviously and nullable equals false and again we're gonna set the default to the current time okay so UTC now you to see is just the time zone you should be using because I believe it's just a standard so always UTC now but we actually do need to import date time so let's go up here and say import or from date time import date time god and default and I think that's it for the model oh we need to actually do one more thing before we do that I just want to point out that what we're doing is we're creating a real database now okay versus using this dummy data which we did earlier but we're gonna be um having it look the same so I'm have title that's where I got all this model stuff from okay I have a title I have content and I have author and pretty much raised can be using this database to replace this dummy data and do the same exact thing of going through here sending the sending all the posts to our frontend and then printing out on our web page like this okay so very last thing we're gonna do in our model is we want to define a method here okay and it is actually called um underscore underscore that's two underscores our epr underscore underscore I don't actually know what that stands for okay I may be like reprint or something but pretty much what this this function is going to do is or method I always get those mixed up but what this this function here it's going to print out whenever we create a new blog post okay and it's kind of like tabs it like a it gives it like a just something the display to the screen after we created so that we can recognize it so we're just gonna pop in this very simple thing I'm just going to say blog post and then I'm just going to add the ID I'm assuming you guys know object or any programming okay you need to know that if you don't then please go learn that and come back okay and oh I believe in the cast this to a string yeah cuz that's an int so it's just gonna say blog post and then the ID because that's this is always unique so when we create it then in our database whenever we're looking at it then we'll be able to see the ID and that it was created but that's pretty much it for setting up a database I mean we just like downloaded it and created the model and got it all set up and that's pretty much all the backend stuff and then next what we're gonna go over is actually hooking this up to our frontend so that we can input date it to our database input data to our database and have it display on our web page like on the fly whenever we add new stuff in refresh the page we want the the data in the database to be reflected on the web page so we're gonna be hooking up to our front end alright so I'll see you guys soon we're actually I forgot real quick before we go to the front end we actually need to create our database so we designed it and everything like we have it set up and we defined where you want it to be and then we have our whole model on everything and blah blah was gonna print out when we create stuff but now we actually want to build this database and generate this file okay this posts that database file so that's um as simple as just going down to our terminal okay and then let's just start a Python environment and navigate to this directory the same one here but it should be there by default alright and then all we need to do is say from app from our app you want to import the database that we just created okay this database up here the SQL I'll come you up and yes some of this stuff will print out this is not important it always prints out pretty much and then once they're here you just want to print DB dot create all alright and what this does is is going to go through our model on everything and then go through here in the configuration and it's going to create this database with this model in mind okay with all this code this class in mind and you're actually gonna see this database post database pop up down here so let's run this and as you can see it created our post that database file in the same directory because remember we're making we want our days to be relative to this and in the same directory as our flask app ok so now now we'll be going on to the frontend actually I changed my mind surprise right before we go to the frontend stuff I do want to just demo this a little bit so we built the database and it got built over here but now in this little environment let's actually just add a couple things to the database and then um see if they were input in okay so after we create the database here I'm sorry created we can go ahead and actually add some entries to it but before we do that we have to import the models okay so the our model is blog post so we're gonna have to say from app again import blog post this time already have we already have the database imported here so once we have both of these then we're good to go so we have our database and we have the model that we want to be able to input so after you've done that I'm gonna show you guys how to print out all blog posts or or of any model in the database so in a database can have mini models inside and ours we only have one just blog post but you might have like blog post you might have like authors you might have like images and a bunch of other things but you can call this thing called query so we're just gonna query it and then say all so this this is just saying spit all of the blog posts back to me all of them in a list so when I run that you can see that it's an empty list because we haven't added anything to the database yet oh we haven't added any blog post to the database so adding to the databases as simple as pretty much just doing this okay so database dot session so our current session and then just calling add alright and then in here all we need to put is a new model type so a new blog post or whatever other model we have when our case is blog post so we're just going to put a blog post and now we need to create the blog post so let's look at our model here up here so there's a title alright title is let's just say log post oops that's wrong blog post one alright second would be content alright and we'll just say content of blog post one again same thing and then after that then we need author alright equals Aaron and date posted we'll we'll just let the default happen okay so as soon as it's created it is when it is considered posted so let's hit that and didn't complain it all cool so now let's go back up to here and say a blog post query all and as you can see blog post one pops up okay and it says blog post one because whenever we create a new blog post we said we want to print blog post and then have the idea after so the idea is one in this case and then if you run this command again and make another another blog post in the database then I can change let me just change the numbers quick like that and then print them all out again and as you can see now there's two in the database okay and these changes are actually happening in this database file so like if I completely like completely restart my entire computer and close all this and have different terminal sessions and stuff these changes and this data will be preserved in this file no matter what even if I like move this file to a different computer okay that's why it's a database so it's it's pretty cool now let me just because this is kind of cryptic it doesn't really give us much information let's dig into each one a little bit okay so I can say blog posts that query dot all right but it's a list so if I do this then I'll just get logged post one and from here then I can actually just get the different fields just by calling dot here okay so let's just put title alright title will be blog post one and maybe let's put content let's see the content content blog post one lalalalala and the author okay would be me and let's see date posted all right date time oh we could clean up that formatting but point is that the date time object is in there correctly okay well we can clean it up long later if we're actually doing the front end stuff but as long as the date is in there that's what you want you have all the data on here that you need year month day hour minute second millisecond and yeah let's just check the second one as well they posted a little bit later that's right and then I just want to check the author to make sure it's in a to make sure the default is working and it's working correctly okay so that's just a little demo of our database now all now that you see a little bit of how the code works we're actually gonna be using this kind of code these query things and all these and these uh the ad ad and all that stuff into our code all right into our actual code up here and then have it running and then we'll connect our frontend okay I'm done lying now so we're gonna go to the frontend now alright so now we're gonna hook up this database to our frontend if you remember from earlier we this was the the web page that how it has a lot of our posts on it and we have two of these posts in here but from our dummy data right our dummy duty here what we want this to do is you want all the data here to reflect whatever is in our database so like it goes into the database and reads it all and then displays it all here and then also I want to have a little section here at the top where you can put in a new title like like to make a new blog post you can input a title you can put in put some text and then like click like a submit or a post button and then have that added to the database and then automatically added to the end of this list I already have this list ordered in um order of date posted okay so let's get started alright um so the first thing we're gonna need to do is like I said before if we want to be able to add things to this webpage like be able to post something um if we're gonna fill out a form and then send it to the database then we need to actually allow post requests on this web page okay so if we go here and I believe it is slash posts here at slash posts if nothing is listed then the only request that is allowed is get by default so it would look like this methods equals get that's by default but we also want to allow post okay so now I can have get and post and now we can actually have a forum that we can fill out and post to our database from that web page so now this is allowed alright so that's the first step short but very crucial and now now we're gonna want to some loud stuff going on outside now we're now we want to actually go to the front end and actually add in this form okay so let's just go to let's just add it right after all posts and before all the posts are listed let's just go right here cool let's just add a couple nice line breaks to keep it by itself these are just horizontal lines across the whole webpage it's just gonna keep it nice and it'll look nicer alright so let's add in a header okay so this will be create new blog posts and capitalize this correctly all right and then now now we're just gonna have a forum all right so the action which is just the URL that we want to be at is gonna be posts okay so that's where it's gonna be posted from and the method is going to be post all right and you can close off this tag and now we can put all this stuff we want inside of our forum so this forum whatever we put in here when we when we hit the submit button then everything in this forum is going to be sent to our database all right so let's have a title all right and this will be input and the type will be 'text just putting in text dang it text and then also the name and the ID will both be title okay so this is just so we can refer to this input thing as title and then we know in the database like what like worth to put from where to put it in database from each form so like from this in books inbox thing I mean from this input thing then we're gonna have we know we're gonna put this into the title part of the database that's why we need these here okay let's just put a line break and then let's put post so that's where the post text is gonna go and again input type equals text and name equals content and ID equals content all right same deal now the line break and last one input input type equals submit button so this is how we're gonna submit our form you guys should know this oops if you know HTML equals post so that's the what's gonna be displayed on the button and that should be the entire form okay that's just plugging that into the front end so let's get this running again let's quit out of this there we go out of that Python environment get the flash server up and running again come back here Oh was why is it not working well I find out why it's not working oh I should put this in the wrong spot silly me so let's just copy cut that out and actually put it in here okay it was supposed to be within the body block here okay I put it between the two blocks in here it's supposed to go inside this block right after all posts okay so let's I copied all that and let's indent it save it server should update automatically come back here now I want to refresh boom there we go that's better so here's the little lines that I was talking about we have the title and then we have like very simple text and some input fields and post okay I'm gonna hit this nothing happens okay because we haven't decided what to do when we submit the form so just I'll redirect here by default okay to itself so now that we have the form completed now all we need to do is hook up the form so when we fill it out and hit submit that it actually goes to the database and it's saved to the database and then when it um when it saves the database then it is automatically on this entire list is automatically reread from the database and repopulated to to show the new blog post that we just created so let's go to our code again come down to posts all right and then we are going to want to add in a little check here within this function here and we basically just want to say if requests dot method equals post all right then add it to the database we're actually gonna need to include requests okay up here so from flask import flask we're in a template and request alright here we are so if the method is post then what we want to do is actually read all the data from the form and then send all that data to the database okay and then save it to the database before redirecting redirecting back to itself and showing the new blog post in that entire list okay so this is just gonna be pretty simple there's gonna be a title right because there's a title field so we need title and post I mean in content so it's post title will just be be request read from the form and this will just be title okay and the content will be request a form and this will be content all right and then we'll just create a new post from these two things okay a new blog post object and the title will be the post title okay and content will be the post content and author will be Erin okay and the date created would just be autogenerated by default all right so now that we have oops needs to be equals there so now that we have our new post object okay our new blog post object we can now add this to the database okay very very simple so we did this before in the down here when we were playing on the database it's gonna be the exact the same we're just gonna call DB dot session dot add new post okay and what that's gonna do is it's going to add this to the database okay in this current session one thing I think I forgot to actually show down there when we were playing with the database is after you add something to the database it's actually only added in the current set in the current session I said if you like move this database to like a different file or you restart your computer and this and that that the change would still be there that is not true because you only added to it um in this session well you actually have to do is you also have to take whatever's in this session currently and commit it to the database completely so only after you call commit will it actually be saved here permanently and then when you move the database to a different computer or restart or blah blah blah then it'll still be there but if you add so if you add it it'll be there only for like this current runtime but then in the committed to make a permit alright so after we create this stuff by getting the content from the form the data from the form and then creating it and then committee and then all we have to do is a simple redirect okay redirect and we just want to redirect back to the same page so that it goes there and then it just gets it and then since it's in the database and it's gonna be read from the database and then new the new post will be there alright and else if we are not posting which means the only other option is we're getting then we just want to display the blog posts as normal okay without adding anything so the way you can do this if you actually want to read from the database remember before we're using dummy data um all posts we are actually getting this from this dictionary up here I called all posts um I can actually just delete this but I'll just collapse it for now all posts we're just gonna overwrite this so that would actually have to change anything okay so all posts I'm just going to overwrite this and then what we're gonna be doing here is actually getting all of the blog posts from the database so I'm that's just query and then we can just call all okay and that would actually work but one other little thing I want to do instead of just calling all is you can actually what we can leave that there you can actually just pop in another call here called I believe order by okay and then we can decide what you want to order all your blog post by and what we're gonna board or ours by is the date created okay so you can just call it or the date posted I think yeah date posted so we're just gonna be getting all of the blog posts reading all of them from the database ordering them by the date they were posted and then simply sending that to our front end like we were before all right so let's refresh this or I might break actually so this is I think it's actually ready to go so let's let's just try to go here refresh this click continue oh yeah the server isn't running why isn't it running I knew something was off all right let's try it again global name blog posts is not defined it looks like a quick bug let me let me fix this all posts equal blog post there's no s at the end all right now let's try it there we go so as you can see it the changes took place because this is all here and our database is currently empty so there are no blog posts here okay but if we type in I suppose actually we should have put a third one called author so like you could put like title and then post and then have author I just hardcoded in an errand for now but you guys get the idea okay this is Flast not a HTML crash course so title would you say first blog post and the post would be hey you guys I just wrote my first blog post thanks for reading cool and then let's hit post redirect okay again I did not include redirect okay so you need to import that as well along with request now let's try again and post and there we go so it worked um oh and it looks like the forum was saved even though it didn't send through it actually sent twice so maybe we could fix that but point is it seems like it's working okay let's add a second one so second blog post this is my second one and hit post again and there we go it just added to the end there okay second blog post by author this is my second one yadda yadda yadda and so yeah so we have our database hooked up to our front end now and that's the basic framework of course we can use CSS to clean this up make it better and have a lot better website design and all that but the back end and the the backbone of all this stuff is is working alright so that is it for databases for now we'll also go over like deleting deleting blog posts and updating blog posts um a little bit later because we already um for a further for a crud application I'll create read update delete we've already done create and read here but yeah we'll go over that later and then there's actually a lot of different other things you can do to read from your database like there's other ways you can order it you can filter it you can get all of them you can get like the first one and all that stuff so we'll go over all of that shortly but all you guys get the basics for now alright nothing is going according to plan I'm just gonna go over them right now actually so I'm gonna go over all the different kinds you can read from the database which is querying and then also we'll go over the how to delete things from your database and also how to update elements and only like certain parts of like certain parts of blog post like updating the author or updating the title or updating the whole post to finish off the crud stuff in flask okay so we're gonna do all that down here in a Python environment and then we'll go ahead and then implement it in our code right after okay so let's just get python up and running again oops Python alright and then again from app we have to import our database and also our model we only have one blog post all right so this information is pop prints out all the time you can know that again let's put some space and now if we go back to our web site remember we're here to our blog with all this here let's let me just show you how to read like all the different reads and stuff I mentioned you can filter by things I mentioned you can there's different kinds of ways you can read from v database let's just go over that so remember to get any of the blog post she's called query and you guys are familiar with already okay there's blog post one two and three blog post one two and three all right and then if I add one why don't we just add another one title a fourth one yoyoyo hihihi cool post there we go fourth one you yoyoyo haha hi by Aaron and then I'll run this again then the blog post pops up right there cool on the fly what else is there you can actually just call first okay and this would just give us the first one because this is an entire list you know so this is just a shortcut to get the first one but of course we can also just index into it like this one two three four blah blah blah oh you can't you can't index out of it though you're gonna get an error as you can see okay what else can you do you can I said you can filter right so let's go back to the one that's not breaking right up here okay and you can actually call something called filter by and here you can actually specify what you want to filter by so for us if we filter by maybe author if we filter by author then it'll only spit out all the ones where the author matches so actually so I guess this will actually come in handy over here since these two have the same title let's just filter by this title okay which and which means that only these two will show up all right when we filter by that so what's going to here and let's just say title equals oops no that's not there we go title equals first blog post so let's just copy this pop that in there dang it okay pop that in there and oh and when you do this this actually alters the query so this is uh this isn't actually gonna pop up we need we actually took all all again okay so when we when we query blog post it just automatically gets all of it and then we have to call all to actually show all of it because this is just like a query object so but this filter by actually just edits this query object and then we have to call all again to actually show it so as you can see only blog post one a blog post to show up because those are the only ones that have a title that match um first blog post like that okay this would be a lot more useful if there's like different authors or something but when we do update in a few seconds I'll show you how to do that and then we'll do another filter okay besides tilter you can also do order by which we already did up in the code remember you can order by instead of filtering by something then you would just order by it which means you'll get everything but then you'll order it you'll sort it by that order based on that thing the date posted in this case oh and lastly the very very important one okay I'm just going over them all the most important different kinds of reads okay you can go look at the documentation if you want to see everything else there's also cute query dot get okay so what this does is this actually gets whichever model object has their ID okay so if you put you so you see how there's like blog post one blog post two if I put one it would automatically just get blog post one for me so as you can see it works like that and if I do but um get two then I get blog post two and so on and so forth again if I go out of range nothing breaks but if you actually print this out this is returning a blog post object right here but what this is returning is actually none okay so if I actually type print blog post query dot get five okay it's none it's just an empty thing so it's it's empty it's null and so if you try to do anything with it it's gonna break there's actually another method called get or 404 which we're actually using our code a little bit later but don't worry about that for now just know what that get using calling a get function just requires the ID okay the primary care primary key ID that's pretty much it for reading though I mean that's those are all the different things you can do to query like all the main things you can do to query a database and now let's go over delete alright so if we go up here I had my I guess duplicate here let's just delete one of these duplicates okay or let's delete the last one that I just leave it okay because it's kind of whatever the way you delete in flask is you have to from the databases you have to call the database object and then the session again okay and then instead of ad which we had before we just have delete alright very straightforward and on what we need in here is actually the the object of the model in this case our blog post so we have to actually get a blog post object in there so how do we do that well we can use the get so if we just um copy this and paste that in there and go like this and we want to delete the fourth one right go like that and then we hit enter then it'll actually delete this fourth one it's not gonna work i believe if i refresh it yeah because we um haven't committed those changes alright so you have to DVD session dot commit as well alright and it should work now there we go it is gone the reason it's working is because I actually have a terminal running in the background just to have the server up and running because I'm in the Python environment down here this would have crashed but I started writing this ahead of time okay so this terminal is exactly the same let me just I guess you don't even need to see this it's just the terminal running but that's pretty much it for delete okay you just need to have the ID the primary key because if you're deleting something then if two blog posts are completely identical then you still need to distinguish between those two to know which one to delete so you have to delete by the primary key okay and that's ID lastly we have update which is pretty cool so remember how we were able to go into different fields of a model of a blog post so we can like go get the title we can go with the content we can go with the author by simply going like this blog post dot query dot get one dot title or something okay and we do that then we get first blog post okay which is the title of the very first one now what's cool about this is we can actually just set this equal to something else so if we let's change the author of the second one okay dot author this should be Aaron okay that is right Bayern and what we can do now is actually just change this by because this is a variable okay we have direct access to this we can just assign to something else to Kazi okay so the second one is Aaron right now let's run this no errors it's not gonna work because we didn't commit yet but as soon as we commit all of our changes boom and we go back here and refresh boom it changes a Kazi okay and same thing again we can change it right back alright and commit again boom refresh back to Aaron all right but actually let's change it back to cause it real quick and then I want to show you filter again cause II commit and now that we have refresh this now that we have a different author here I'm going to actually filter by Aaron and then it should ignore the second one okay just to demonstrate that last part so DB query dot filter by that's what it's called not guilty Gilmore Girls I never even watched that show but also doing filtering by author that's right equals Aaron okay and dot all remember we have to because this just edits the query now that we have dot all we can just run this oops sorry not DB query to filter a blog post out query to filter there we go so you can see that we get blog post one and blog post three okay and that makes sense because we're filtering by the Thai Tom by the author of Aaron and it ignores this one alright and again because this is adding the query we can actually just you first something like this alright and or just index into it like this and boom we can get exactly one so now we know how to read we know how to update you can update any other the any other of these sorry assuming we have the right data type so like if I wanted to change the date posted then you just have to like a date/time whatever object and blah blah blah but you probably be getting all these things from like HTML frontend form which is what we gonna be doing we implemented implement this in code in just a second okay so I'll see you guys in just a second to do that alright you guys right before we do that though I realized that I how I was hard coding in the author here to Aaron let's change it really quick okay so when we create a new blog post we can I should specify the author all right and then if it's not provided then it'll it'll automatically put in not available and /a okay let's do that really quick let's get rid of this dummy data we don't need this anymore all posts because we're using a database now so I'm just gonna simply delete that all right now all this you have to do is a pretty straightforward let's just go to post HTML because that's what's here and then go to our form which is right here and then we have title and post so let's just add one that is called author and we'll call this author and call this author all right save those um that should be good let's just refresh this there you go change was made cool but now we also need to go into our code and whenever we generate the slash posts web page whenever we're here or like we refresh this page and all this is generated we need to make sure that this author reflects whatever was typed in here is in the database so when we get here when we post a new blog post then we were only getting title and content but now we also need to get author post author and call it author because that's what we gave the name and ID all right and then one last thing is when we're creating the post we have to specify that the author is post author and not Aaron okay and that Aaron by hardcoded okay that's cool if there's no author then I believe it'll still just display n/a because down here we say if there's an author then this way the author but if the author if there is no author if it's null then we're just gonna display n/a okay I could have saved n/a in the author but I think this is just better because you don't want to like like weird n/a things floating around in your database for authors okay it's just a display thing we're just like making it easy clean for the front end so it's better to do it like this okay let's just refresh this really quick okay let's create a new post awesome blog post cool author is me and post is post post post and we can hit enter and that should work so awesome blog post and by me and post post post all right so now let's get into let's get into the delete and update all right so deleting so I think on our website we should just have a delete button okay after the entire post so that we can delete it and then we'll also have an edit button later when we're doing update okay we'll have like a cleat and an edit button we can just click and then it'll either delete it or then we can edit it okay and then when we save it then it should just be reflected here the change should be reflected let's go back here let's just go to post HTML and let's add in that button okay so after the content I think we can put at the very end so just enter the content well two buttons so very simple let's just put in some simple links here all right href would just leave an empty for a second um each ref and just call this delete okay and I'll just leave it like that let's just save it refresh there we go so we have to delete there it looks like it's working let's add a nice line fighter that looks better okay and now let's actually put the href in so the URL um then I'm going to use is just posts slash I think delete slash and then we're also gonna need the post of the the ID of the of the post let's let's do this later actually let's leave this blank for now let me go back to our code over here and let's start implementing the URL first and that makes it more sensitive within this order so um let's define a new route for delete all right we don't need these methods like that and let's make it delete and then in here we are going to need to specify which blog posts we're gonna delete so that's just gonna be from the ID okay so when we go to that URL if we go to the slash posts / delete / i D like if it was this / delete / 1 then this one will get deleted okay oops let's just define delete here okay and that should be ID in here the variable that we just made up there and from the URL and then once we're in here all we need to do is just fetch the unique blog post using the ID that's why we need the ID because that's the primary key if you guys remember that's the distinguishing field and we're just going to say blog post doc query dot get or 404 because if it doesn't exist then we don't want it to break and the Rio so we have our post and now it's as simple as just deleting delete post all right and then commit little DB that session commit and then after this then we just have to redirect to the back to the post page okay just like that pretty straightforward so we're just um but if we go to this URL with the ID the distinguishing factor then we get that post then we just call delete on the database we commit the change and then we just redirect back to this mean um list of posts okay the global list so let's save this let's let's go back here let's refresh it and oh yeah we didn't we didn't I undid undid that change let's go back and make that change now let's go to post the HTML and if you see down here we are passing in the post when we delete it so when we're here we can actually just call slash posts slash the delete leave right that's what I called ya and then just use some Jinja to syntax here but you just called post ID all right why is it red or is it giving me an issue there Oh href equals okay that was throwing me off earlier got it but now um so all this is doing is when we're generating all of the posts it's just getting the ID of the post okay and then it's fetching that and then it's going to this URL okay so when we click on the delete button it's going to take us to this URL all right down here so clicking here will take us to the / delete / ID URL for this one and then it'll delete it so I already saved it let's refresh this and as you can see now there's delete buttons and if we hover over it you can see on the bottom right and right below where my clicker is it might be a little bit small well if I remember to edit this in then I can zoom in so you can see it clear but it was it says local host on port 5000 slash posts / delete / 4 because this is the fourth blog post okay 4 so it'll delete this one if I click it and then same thing here it's slash 3 and so on and so forth so let's just give it a try delete and will be the last one and it's gone okay so pretty straightforward for delete now let's add in an edit button so let's add in the edit button now ok so we have a delete button and then let's just follow it up with our edit button right after it very simple we'll just copy and paste this and the URL that I want to use is exactly the same except it's gonna be post / edit / the ID because again we can only edit one blog post at a time so you want to distinguish it and instead of delete if you want to have the habit say edit okay very straightforward so we just added this button in and it's going to link to this specific URL so after I show you this then all you need to do is go into our app dot PI and then define this route now and then whenever we stumble upon this URL then we need to go to a separate new page that allows us to update everything in there and then save it back to the database okay so let's go over here let's just refresh this to show that it's popping up as you can see the let me go back I guess I can't undo it yeah just remind the video you should have seen just this edit at the bottom popup okay right here there before Ellen if we click it then it says not found because see we're actually at the slash edit / one URL okay but we haven't defined that route yet so that's why it's giving us a not found error okay so let's go back to here all right and now let's go to app dot PI and let's simply define a new route okay app dot route we've done this before so you guys should be getting familiar with it posts I said we want to do edit instead of delete and we're gonna need an ID let me turn off rocket again and I lost my train of thought and all we're all thinking also gonna need to define that we can do get or post requests okay dang it okay because if we're editing if we're editing a post then we need to be posting to the database we need to be updating the bit database so that's post a post request okay so we have that and now we're just going to define the code okay so for edit very straightforward all we're gonna have to do is get the post again very similar so actually you just copy your pace copy and paste this cool and then now now it's very simple it's if we're posting we need to treat differently if we're posting or if we are just getting this URL okay so what I want this to look like is when you when you click Edit here on this post okay I want a separate page to pop up that just has this form with different text it'll say like editing post and then this will just say edit or something okay and then it'll be here it'll be in here and then I want the title to auto um fill in with whatever the title is the author to auto fill in with whatever the author is and the content to fill in with with whatever the content is and then for this to say save instead of posts okay I want just that and then you can change make your changes and then hit save and then um and then when you hit save a should come back to this one and your change reflected all right so that's kind of like the goal and we're gonna do that right now so once we get to there um all we're gonna need to do is just get all of the data from the form so we're gonna be just copying over this form pretty much we're just gonna copy the code over to a new web page called edit dot HTML okay we're actually create a new HTML file but then once all the data is in here we can make whatever changes we want on the front end but then we hit save all the new new data in this form needs to be saved to the database so that's what we're gonna do here so it's literally as simple as just saying post title now equals request dot form title just like that okay so this is getting the the data that was in the title field whatever we changed it to and then it's just saving it to this it's just overwriting whatever was used to be there okay and then surprise we do the same exact thing for author and for content and that will pretty much do it no spelling mistakes cool and then of course the very end we need to commit these changes all right DB session I always forget that session and then we just want to redirect after we save um oh of course I need to put this in a if request dot method equals post yeah and all this needs to be indented so if we're posting to this to this which means when we're on the new web page and this all pops up in just this and then we click this which means we're posting something then do that um then then do all this stuff then we're gonna have to define also what to get when we just let me just arrive on that page we're just you just want to display what the empty fields there well not empty but whatever it is supposed to be full in here by default from the database so this is going to be a simple redirect after we submit the form we're just gonna go back to posts okay like that and then else for here we're going to return we just want to render the new HTML template okay oops no render template and then we're just gonna call it edit HTML all right so now let's create edit HTML okay this might've been a little bit of a big chunk to bite off but it was either this or the HTML first might even better the HTML first but you guys should be able to follow along at this point so let's just create a new file in here okay and call edit HTML cool and then let's just drag it over here and let's just copy all of this from post HTML or actual I don't need all of it um we definitely need the extends we let's just do a piece by piece so we need the extends because you want to extend the template again oh we're gonna need a title so let's just paste these in okay but instead of post it's going to be edit post alright save this go back to posts we're also getting in a block body alright so that's good and then in here we wanted to copy over this form remember in this form only we don't actually want the for loop that generates all this stuff so let's just go to here and I just get all posts and here and the whole form and stop right there okay because we don't want to generate all the blog posts here in this for loop so let's just stop oops this way paste that in and then we're gonna need to skip that and then end the block so copy and in block alright that should do it let's save it and let's just see if it broke so I oh whoa what happened did my oh it broke it uh the server stopped there we go we just started it up again go here refresh it cool so now when we hit edit alright cool it looks like we are at the post / post / edit / one URL and only the form was generated okay with all Dilla here so that's good it seems to be working let's go over here change the edit post this changes from all post to editing post alright let's change this to create new blog posts who simply edit and then we'll keep those three there and then instead of a post button I want to have this say save so we can just save our changes so let's delete that and just put this in here like this save it again come here because they're in debug mode it's automatically updating the server and as you can see now we are on editing post and then edit and title author post and safe okay I'm gonna hit save remember I said there is going to be a redirect back to the main post page that has all the posts there because we hit the post when we hit the post button the Save button then we're doing a post request and then it's gonna go back so let's hit save and it should go back cool but when we hit edit we want these changes to be reflected okay so we're missing that bit of the code so let's go to our edit HTML alright and now in here we're just gonna have to oops we're gonna have to make some changes mainly we're just going to have to change the URL here first of all so the form the action is the the form that were I mean that URL that we're submitting on so um since we said we were going to handle post requests on this URL okay let's copy that then we need to we need to have the form be submitted on this URL okay but of course it's not going to be in Eydie is just going to be simply post that ID all right oh I think we forgot to UM send in post here okay post equals post because we need to send the post that we are editing over to have access to all of its data so we can auto so we can auto fill in these fields here okay so we have the post and then now let's go over and then we send the post data over and now that we're in here we also have access to the post ID so we know the ID here and then then we're pretty much almost done the pretty much the only change we have to make here is add on something here to issue these fields and that is a default value so we can by default this empty that's why these are empty but we can actually say to input some data in there something anything we want really so actually I'll just show you if you put Cal say this go over and refresh post reference before assignment one second guys post equals post over here post equals post ah I see because this needs to be outside of the statement little bug here so we get the post for this method and then then we go into the if statement and then this will be available in here so let's save this and try this again there we go so you see that cow is auto completed in the field there so let's go back to edit HTML change this and simply all we need to do is just get the title right get the title from the post that we have so that's just gonna be post title okay pretty straightforward we'll save this we'll hit this button first blog post which is what the title should be and then just repeat this process for the other two and we will be done so post that author all right and post dot content and that should be good to go so we have the save let's go back here let's refresh it and as you can see all of these changes have taken effect these fields are auto completed and if we change the author we can say Tony Stark and hit save as you can see the author was changed Tony Stark okay and we can edit again first blog post and add some more exclamation points hit save we redirect back to the page we made um we changed the stuff in the database with the commit and then when we auto generate this stuff again then all the changes are made okay and of course we can go down here we can delete posts we can add we can add new posts let's add a new one new post again author me or you and post let's just say 1 2 3 4 5 enter there we go new post again edit 2 3 4 5 6 7 8 9 10 and let's delete this so let's empty hit save and because it's empty you can see that the author was completed to an a all right let's let this cuz this makes no sense and that pretty much completes all of the crud functionality for this flask app ok we're able to create new posts ok we can read posts in all different ways we know how to read all we not a filter by we know how to order by we know how to use the get method we know how to update posts we know how to delete posts and that pretty much completes it so now we're going to go on and make this look a lot nicer ok probably gonna use some bootstrap and stuff they clean this up and maybe add in some other nice features but this is the basics of flask pretty much done so if that's all you needed umm you just wanna learn like some basic basic class stuff then you're good to go but I encourage you to keep watching because we'll be getting some more some more fun stuff in just a little bit alright see you guys all right you guys so now it's time to get some bootstrap in this project okay so we finished all the flat stuff we have our whole crud up our whole credit application and now let's just all get some boots trip in so let's go to bootstrap comm or or to the website I mean and let's just go to the introduction okay this is where we can get the code to get started so bootstrap is just a collection of CSS files and JavaScript files and HTML files that allows us to plug and play things easily that I'll make it look nicer so we don't have to code everything from scratch okay it's just like a building blocks it's like Legos or something but it's very useful for speeding things up and whatnot so let's just go through the QuickStart here so pretty much all we have to do is just copy a stylesheet okay so this is gonna be CSS and then also some JavaScript from them and then everything will be ready to go pretty much so let's just take this alright copy the CSS and paste this into our base HTML because we want this to be applied to every web page and since everything inherits from our base to HTML then we can just paste it in here pretty much okay so literally just paste it we can get rid of this other stylesheet we don't need it okay boom like that and let's save it alright and the server is running and let's go back to our our website and when we refresh it you can see that all of the fonts updated okay so now everything is a little bit different um that's good because that means that bootstrap the bootstrap fonts have been inherited so we also need some of the JavaScript like they sit down here so let's just copy this as well go back here and then it says paste it at the bottom of the body tag okay so we're just gonna paste it right down there just like that and fix the formatting alright save it and that should do it um it's not gonna make any changes we're just gonna have a little bit JavaScript in a bit but that's where it supposed to go okay at the end of the body tag um one last thing now the last step that we want to do to get a few more formatting things in is in our base again um in the body we just want to sandwich this okay in a div called container all right so class is going to be container and all this is is just a special bootstrap class bootstrap specifies this class container and CSS and what its gonna do is just give us some nice formatting things like some padding and margin so why not so and i refresh this you're gonna see everything is gonna be centered and as you can see now you have some nice margins at the edge and when we zoom um close the make the window small what not or if we're going on mobile then everything will be accounted for it's not gonna be any weird like clipping issues and stuff like that bootstrap takes care of all of that which is great okay so we finally have a little bit of a nice front end going but now we're gonna make it a lot nicer okay I'll stay tuned all right so we got bootstrap installed and things are looking a bit nicer so let's continue okay so now that we have all this here I want to add a nav bar all right so it's very easy um thanks to bootstrap we can just go into bootstrap and plug in the navbar pretty much so let's just go to the website again go to examples here and you can scroll down you can pretty much go to any of these websites and just been just like inspect the source code and paste things into your own project as needed so let's scroll down here to nav bars okay and then they have a bunch of nav bars here just in code and let's just take this first one okay this little one that has this nice little collapsible menu and blah blah blah and maybe we'll take another thing from here later so let's just go here right click and click on View page source alright and then just gonna do command F the find function and just put in any eight nav four nav and let's just find the first nav bar so it looks like this is the first nav bar here from nav to nav so let's just take this okay boom just like that copy and let's just paste it right at the top of our body okay just like they did here so we'll go here at the top of our body paste in this nav bar alright right click and let's say format document so everything is nice and formatted for us let's save it alright servers running because the debug mode is on let's go back to posts refresh and voila the navbar is installed just like a Lego easy so we have a collapsible menu here all this text is wrong but about to change that and then we can also link these two linked to the right web pages and whatnot so let's go back into the code and do that now okay so if we go into here we can see never expand so never expand was this text here so let's just change this to clever programmer block cool save and then let's just change this to the root directory okay what else do we need let's just refresh this as we go okay cool it up updated if we click it then it'll just take us to the home page again but let's go back to posts what else we need to change home yeah let's change all these so link home is okay but I have this also linked to the home index let's change that there cool link instead of link let's have posts okay save this and then have this link to slash posts alright what else is there disabled let's change this to about okay we don't have an about page but let's change that for now maybe we can we can add one later let's refresh this check out the menu see if it changed yup we have home we have posts click on home it take you to the home page and if we click on if we click on posts it should take us to the posts page perfect alright and then we have the about of course and then our drop down here is another thing uh let's keep going okay so um drop down menu here maybe we can just add a contact us kind of thing here alright and we could add maybe a like link to our website we could link to our YouTube we could link to our Facebook maybe I'll actually paste links in here later and then we can just copy this and Twitter or Instagram wrong one and Instagram okay so we could actually link to these things and why don't we actually do that okay so really quick our website is going to be HTTP slash slash on wwl ever program or calm alright and let's just pop in our clever programmer Facebook cool boom here let's grab this URL here's our Facebook page its cause II I'll go here and paste that into Facebook cool there's a double are here I think it's a typo I don't know but that's actually the page but anyways I mean maybe we'll fix that later our YouTube channel you guys are probably familiar with clever program or YouTube boom little load just do this for completeness sake get the there we go get the channel here pause that video pop this into here alright save and Instagram last one so that's gonna be cause ease clever Kazi Instagram but boom boom get the one here and the URL last one and cool so now we have a fully fledged contact us so let's go back here let's quit out of this because we don't eat anymore now guard we'll leave this here cuz we're gonna grab some more stuff in there probably let's refresh this go back down here click we can see that it changed to contact us and now all of these should actually be linking to the correct places so website if you wanna go to our website here we also have our YouTube channel as you can see loads up there just fine and the Facebook and Instagram I'm sure you guys believe me that they work ok oh right so now we got our navbar in our app ok we have up here so what else can we do I was thinking our homepage is looking kind of lackluster ok it looks like that so let's uh beef it up a little bit ok I was looking at the nav bar and if you we grabbed this top top one already this nav bar but if you go all the way to the bottom you can see this nice grey rectangle with a little bit of text and like a little button here to like launch something or whatever let's put this on the home page ok and just have like a little welcome thing some little text to explain what it is and then have this link to our our main web page that has all of our posts ok so let's go back to the inspect source code here I didn't close this so this is just if you remember if you just rightclick this and you go to view page source and you can get all the source code of this web page go down here and I believe this thing down here is called a Jumbotron okay and bootstrap that's what these uh big rectangles are called so if you can see it says Jumbotron right here alright and let's just copy this main tag and this all this here should be this rectangle here ok so our home page is empty let's go to here let's go to our index which is our home page and right under home page let's just paste in this main thing and we can form a document a little bit let's just say this suit it looks like alright refresh this boom that was easy let's add in some line breaks here because it looks a little bit crunched a little crowded ok so just a little break here BR and you want underneath it to be our cool and let's just see what it looks like that looks better alright so let's continue instead of navbar examples let's write welcome cool and then let's I'll change this text a little bit ok let's get one of these a ref tags off and let's just paste this down here it's for this later I'm gonna have a link later on this P tag let's get this sorry guys let's just say welcome to the clever pro grammar blog cool here we'll be talking about everything computer science cool basics frameworks you know what I'm just leaving typos cuz it doesn't matter frames works machine learning other data science stuff any new tech or findings and more ok or and pretty much anything computer science related cool uh let's see what it looks like to make it consistent that looks better alright and on the second one let's just say go visit us at our website and let's just have this anchor tag in here HTTP buh buh buh www dot clever programmer calm trying to talk too fast again and say clever programmer calm all right to check out more cool stuff beyond just blocks done all right so that that settles it for that we have our home page it's all nice now we have this giant jumbo Tron's at least welcome people to our blog with a little bit of a introduction here briefing people in what's about to happen very good nice website design and we have a link to our website here if people want to learn more okay so we have like a free three part masterclass blah blah blah go back to our website and oh I forgot the button of course so down here we want this button dang what is going on here I don't like this formatting okay so we have here and then we'll just say go to posts all right so go to blog posts awesome and instead of this we don't a link to the docs of bootstrap you just want to go to posts okay now let's go back here refresh boom this change to go to post and when we click this it brings us to all of our posts awesome so we have our navbar plugged in we have a nice little Jumbotron welcome pay you plugged in all thanks to bootstrap that was pretty fast I don't know five minutes ten minutes wouldn't what was that you guys aren't on depends on how fast edit it or how sure to edit it down to but yeah let's move on alright so that does it for our home page we just finished it up let's go to our posts okay and now let's start cleaning this up okay so it looks okay but I could look a lot nicer right so let's start with um making these blog posts look a little better okay each one of these little blog posts let's just clean this up and make it look mmm more blogging all right so let's go to posts and we generate all these on our template in the loop remember we generate each blog post in a loop so our loop is down here and let's change this so I think if we instead of using the hair tag here if we actually changes completely to using small tags this just gonna look nicer it will make a big difference let's just pop this in here like this all right and then let's just write written by author and then also let's add in the date okay the date that it was created so remember we have post author we also have post dot I believe it is author and date posted okay so let's copy this go back to our posts and post dot date posted and that should do it okay so I want to change this format and then again let's just copy this in case there is no author what are we gonna do we just paste it's down here and we can say written by well there is no author so we're just gonna write unknown alright and then the date is required because when the post is created it's autogenerated so that'll always be there and let's just format this and let's check it out okay so let's go back here and let's refresh it and as you can see this looks a lot nicer okay let me zoom in a little bit the website starts looking a little funky when i zoom in too far but just to show you so it's bigger you can see that this was changed okay so it says written by the author on the time exactly which looks a lot nicer a little bit more clear um and it looks more like other blogs I looked at some other blogs and they tend to have this really small so like New York Times or whatever but yeah let's change fix some of this spacing maybe I think this could probably use a break here or fish this or whatever and let's change some of these buttons now okay so let's zoom back out oops let's zoom back out alright and let's go to the buttons all right so bootstrap is nice because it gives us a lot of like free little or I shouldn't show you so bootstrap buttons if you guys didn't know there are a lot of different buttons that allows us to make and there's a nice image here I just go to the this image is good all right so you see this we can add all these different buttons so instead of just having these little blue link things with the little underline we can actually have buttons that look like this okay so all it is is we just inherit a class and the class specifies all the stuff so we have different colors if we call it a danger button then it'll be red if you call it a primary button it'll be blue and if you call it a success button it'll be green so let's just go into our code all right and go down to the buttons here and all we have to do here is pretty much just add in a class all right and this is all specified by bootstrap and we just wanted to say it's a button and this one it's a delete button so we want it to be danger okay because I wanted to be red and I'll be delete and then also down here I want this button to be a primary I want to be blue okay because it's an edit button so it's kind of a neutral color so let's go over here back to our website and refresh this and as you can see Kabam these buttons are a lot nicer okay so delete and edit that has the same exact function functionality we hit edit we go back here and we can edit our post let's go back but that's pretty much it let me just clean up clean up a little bit of the spacing with a couple more line breaks above the header and then below the time so let's add another break here just like that and above the header let's just added break as well it's a little sloppy but I just want to make it look nice okay that's better so we have some spacing here and spacing at the top so each of them looks like they're a little bit detached and actually let's add one right before the buttons to Oh oops I don't know what it clicked but whatever and uh her library okay this is actually really bad but it's fine as long as it looks I screwed that up ding ding I meant down here like that and yeah that'll do so let's continue alright now that we got these buttons done let's clean this up next okay so this looks a little bit like old and antiquated outdated so let's just update these input fields okay so this is in the posts we have this hardcoded at the top I believe up here that's right so let's actually change these inputs to better inputs okay so let's and we're gonna change you some real labels too cuz we just have these labels just hardcoded in there so for now let's just put these on new lines alright save that and if we go back to here and we go down here as you can see there's a search bar here with a input field I actually want to use this input field here instead of these weird rectangular ones these ones are from bootstrap so I'm just gonna go into the code and paste this one and then paste them in here and kind of like Jake it together to get it working so let's go to where is this this is in the nav bar so this will be in base HTML and then we'll go to or it'll be uh the nav bar should be top body that's right nav bar here clever programmer blog at the bottom here we go finally found it so this little form here is actually the little search bar as you can see it says placeholder search which means Oh prepopulated with the word search and as you can see there's a little word search here so we know what this textbox is for so let's just take this input okay this input and we're gonna copy this and paste this here and kind of splice these together okay so input we would have typed text we have class form control placeholder search and search and all we need to do is just copy and paste name and title over okay so let's just paste these right here that I'll do or actually let's paste them right after text right there just like that so title title we can completely get rid of this input all right save it go here and placeholder we want to have enter title instead all right and then this will have also enter title enter title save that let's just see if this is working correctly go over here refresh this and as you can see it worked and enter title so this looks better than the author and post do so let's do the same thing for those well actually just for author for posts are actually gonna upgrade it even more but let's just get this line do copy go down here same routine except this is going to be author instead of title alright so form control so text and instead of title it's gonna be author and author and placeholder will be enter author and enter author all right that's nice it's like a 1 done cool and now post so the body of a blog post is usually gonna be a lot longer so I don't want to just use a regular text input anymore I actually want to use a text area which is gonna be a huge block of input text ok so the way we can do that is or the way you could go out about finding it yourself is actually just going to the bootstrap stuff there's a page on bootstrap for forums so let's just write down forums oops right think I opened this in a new window bootstrap forums there we go and just click here forms your bootstrap and here it gives us all of the different possibilities for creating forums using bootstrap all right so let's scroll down this is just regular input text fields blah blah blah if we keep going down then right here text area this is what I want a big text area with this little resizable window thing here so we can have a long long blog post ok so this is here and it should be at the bottom of these four things so it should be right down here I believe it's this div label text area that looks and let's just copy this and go over to our code and place this here alright so this is going to be a div I actually don't think we need the div yeah let's try get rid of the div and just have this here well we got to change the labels to as seen here why don't we do that right now label do that and this is going to be post all right label and it's going to be for content all right just like that and then we'll do the same thing for the other two oh sorry like that and then just repeat this for these other two labels for the click so this is gonna be author instead author and change this to author and same thing for title last one it's going to be title this say for is just linking this name title to this name okay so it's saying this label is for this title done now let's go back to the text area so the ID here is going to be content all right and the name is also going to be content I believe and that should be it let's just delete this fresh the page and as you can see we have a nice big text area here okay cool oh and the labels to the labels changed it only looks a little bit different but these are actual tables okay oh we can also actually add in placeholders here's two placeholder and we'll just type in a content oops not equal signs refresh this and there we go we have a little thing there also we're gonna need this just to stay consistent and we're gonna say well enter content and enter content boom fresh this alright and that should be it so we are good on that let's just double check that this is working title one and author one and yo yo yo hello helloooo post go down here and as you can see it working just fine so title one written by author one at the time and then this and then just delete it and it's gone so cool that cleans that up what else can we do one thing I forgot to mention is when we add something with the different new lines and stuff like multiple lines in the content it's like let's say line 1 and line 2 and line 3 like this and we post it as you can see the whitespace and all of the new lines and stuff are not preserved are not being rendered here so let's go in there and actually fix that okay so let's go to our code here and if we go to posts where that is in the loop where the content is printed out it's right here post content all we can just pop in something here a little bit hacky but that's okay all we're gonna do is type in I believe whitespace okay and then we're gonna say not woke space white space white space and we're gonna say prewrap so this what this means is preserve the wrap the line wrapping okay and let's just save this and go back here and refresh this and as you can see now the the white space and the new lines and stuff are all preserved so now we can actually have multiple paragraphs per blog post and so it's all in just one big blob okay I noticed that that air earlier I just I fixed it so let's delete this okay let's actually paste these in a bunch more times and save it and so that just looks more like a blog a little bit more that's fine and yeah let's move on alright so next let's go here and let's go into edit and as you can see let's just add in a bunch of stuff here to make it nicer but as you can see we're going to edit this is still not the nice new input type so let's all make the changes here as well okay so we're gonna have to go into the edit web page the edit template and then we're just going to copy over the form that we just did here okay but we need to like populate these with the existing content and whatnot so edit we have the form here and this is the old form we don't want that anymore we want the new form that we did just now with the labels and the nice text inputs and the text area and let's just paste this in here okay so now we have the new form but remember the difference with edit is we don't want empty forms you want to actually populate each of the text fields or text areas with whatever data is already in that blog post okay and that's pretty simple it's as simple as instead of having a placeholder okay we're just gonna have value and then this is just going to equal to the what should we call it the previous data so this is going to be post out title so the title of the post and then we just copy and paste this for author as well post dot otter and for this text area actually a little bit different there's no such thing as value there's no value parameter for this tag for a textarea tag so let's delete this placeholder all right and what we need to do is if you notice the input input tags don't have closing tags okay it's just the opening tag but the text area does that's because everything within this text tag is gonna be what's inside the content so instead of using value we actually just paste it straight into here like this okay but um instead of oh we don't need value of course but instead of title it's going to be content all right and we don't need that last parenthesis I mean uh quotation marks and I don't think there are any errors here yep oh but this should be not post should be save because we wanted the button to say save instead of post and let's just let's just see if it worked all right so refresh the page let's hit edit okay and there we go so if we go back we see that this is second blog post written by Aaron and the content is this is my second one we go in here this is my second one written by Aaron second blog post cool so now we can actually copy a bunch of I mean we can edit stuff in here we can go on new lines multiple paragraphs like this cool and hit save and when we come back it's creating a new Obi cuz we didn't we're not updating it oops so we need to change the URL that we are posting to so we were actually posting to the entire post list so we were treating like a treating it like a new post that's why it was adding it like a new post here okay instead of updating an existing one but what we need to do is actually go to edit remember because in our app pie we have the route specified that when we go to edit then to update the database and all this stuff here and then render the template again so we want to actually go to edit but we also need to pass the ID of which blog post in the database to edit if we if you go back in the video the form that was here earlier it actually had this action okay but I deleted the whole thing that's why I forgot to I should have left it and then double check before I ran it just make sure that didn't I was carrying over everything and spicing them together correctly but um yeah so we need to uh I think it's a post that ID I believe so yeah and that should fix it so let's yep so let's delete this okay I'll go here refresh this and go into edit and then do a bunch of changes like that hit save and when we come back it is now edited okay so we edited the content here the title and the author stayed the same but that is the Edit functionality cleaned up as well cool so when we hit again we are back in this nice little area with the nice input fields so now let's actually clean this up too so initially we had the add a create a new blog post functionally here on the same page as all of the existing blog posts the whole list but let's actually detach this and put this in its own web page okay and then add like a little button or something like that says new post that we can click the go there to make a new post and then when we save it then it comes back here and it's added to this list all right so let's start by creating a new file that's the first thing left to do and let's call it new post HTML alright new post HTML so it's gonna look very similar to the Edit that HTML right so just copy everything over from there to start because we want all this inheritance and stuff in the head and blah blah blah let's go through all this we're not editing a post we're gonna say new post instead of an editing post it's gonna say new post and then it's going to say yeah that's fine um well I mean not the idea let's just put a new post again I don't this is gonna look like what we can change it when we get in to the website but this form isn't what we want this form is to edit one that has all the Edit content the form that we actually want already exists it's right here remember so let's go into here and let's just take that and paste this into here like this cool and I think that's pretty much it let's just see if it worked because we didn't delete this yet from here so nothing's changing but also this exists but we're not linking to anywhere so we need to actually create a route first to actually render this template so before we can see if this is correct we need to go into here and create a new route all right so let's just copy this new route and this is going to be posts slash new okay and then we're going to allow get and post and are you just gonna want to populate this alright I mean this this method so we need to we can actually just copy this from edit because it's gonna be very similar um we don't need we don't need a specific idea of a post because we're creating a new one so we can just skip it down to here and we can just paste this down so if we're posting then we actually want to create an entire new post and then push that to the list or to the database push it to the database and then redirect back to the list of all posts we can see the new post that we just created so this is very similar I believe it's exactly the same actually a post title post author so yeah just getting the things from the forum and then oh we actual when we're creating a new blog post we need to create the new blog post after we get the format the current the post and add it to the database before it commits so let's go down here and then add this in here okay so we get though we get the data from the form if we're posting from all that data we create the new blog post and then we add it to the database and then we commit it and then we redirect back to posts okay yeah that looks right and then when we if we're only reading it I mean if we're only doing a get request here then we just want to render the new post dot HTML and we actually don't need this because there's no post being sent in it's just raw so like what this is gonna do is this is just going to render an empty forum for us to fill out and then when we fill it out and hit post and that's when this will fire off okay so that's pretty much it let's see if it's working so we are we are saying it's going to be oh crap I made all these changes on the wrong function let's do it down here oops and then redirect the posts and this needs to go back to edit all right template posts and that is annoying and a new post dot HTML okay let's make sure there is do not show again yeah that looks correct so let's go back here and refresh this and we said it's posts slash new global name post is not defined let's see what is wrong here yeah I forgot to delete this here because we're not passing in a post when we're creating a new post it's not expecting supposed to come through then let's just get rid of that okay and now it should work so let's go back and let's go to new and there we go it is rendering correctly okay so we have new post here this is by itself and now we using to make sure everything is hooked up correctly so let's type in a test title okay and test author and test content and let's just repeat this couple times cool post and it redirects back to our whole list and there we go we put in a test title the test author and all this test content and it's working just fine we can delete it too and it's disappeared awesome now last step is we just gotta get rid of this thing here because we don't need this anymore and then we also need a button to redirect to that new web page from here so we can create a new post all right so let's go into our posts here and then we can pretty much just get rid of this entire form at the top all right just like that and we don't need this HR anymore and save that so what does this look like it is gone cool so we have our list of all of our blog posts here let's change them these titles oops post is undefined ah because I deleted it from edit and here edit we got to put this back in so I think it's post equals posts equals what was it post equals post so let's get rid of that and then paste this into there let's try it again there we go so we'll just say blog post one save and we'll say it change this to blog post to save and change this to blog post three all right this looking a little bit more coherent cool so now let's add in this button next to all posts all right so what I'm thinking is remember those bootstrap buttons there's there is a green one I want to add a little button here right here that says new post plus new post in as a green button and then I just want that to redirect to our new post page so we have some way to get to that web page from here and then we could actually actually add a new post into here too if you want to into the menu but unnecessary I'm sure you guys can figure out a few guys want to do that as an exercise for yourself so let's go to here all posts and then I just want to add in a button so that's going to be I believe posts here I'll post here we go cool so we have a header here but I also want a button so let's add a button it's gonna be a and then it's going to be class equals button and then it's gonna be button success if you remember a success means it's gonna be green that's the style that bootstrap is all making us do and then we're gonna want this to go to slash posts slash new okay because we want this button to go to that URL so we can input a new blog post and then we want and then we just want a new post like that okay I'll let you see what that looks like so let's refresh this page and we can see all posts says new post right there that's cool but I actually want it over here and actually let's make this plus new post all right there we go and then I want this to be right aligned so I believe that is I think it's in the class yeah and bootstrap bootstrap for you can put float right and then it'll float all the way to the right so let's refresh this and there we go I had a new post but this looks a little bit funky so I want this and this to be on the same line in line together so let's pop both of these into a div together all right div and go boom and like that and indent both of these all right and then let's refresh this looking a bit bitter I mean I'm not looking with bitter but they're in a div they're gonna dip together and we actually need to get them in line so we can just do that really quickly by adding a quick style and then all we want to say is display inline okay and pretty much everything that has this style together within the same div is going to be inline together so let's refresh this and now it's inline so all we need to do now is just add in a couple of line breaks to make things a little bit cleaner all right let's go here refresh this and there we go I guess I don't think we need this one down here some quick spacing perfect so we have all posts here and we have a button and as you can see when we click new post it brings us to the new post input area so we can just say machine learning versus web development all right blog posts this can be by Erin Byrne F and we can say what is better to pursue web development or machine learning or data science answer both and post it and let's see if it worked machine learning versus web development written by Aaron Burr Neff at this time what is better to pursue a dormant web development or machine learning answer both so that looks like it is all functioning okay so we we pretty much put in a bunch of bootstrap into this entire thing we have a nav bar here that we chucked in we have a nice homepage remember if we go here we have this Jumbotron rectangle and some welcome text and then a way to get to our post here and from here we have all of our crud functionality with nice buttons and nice padding and nice containers using bootstrap we have the ability to separate white space to display if our texts are have multiple paragraphs in our in our blog posts within these edit fields we have the better input fields we have a giant text area for our editing post and we have this new post button so that there guys pretty much wraps up our flask app and some guys hanging outside that pretty much wraps up our flask app with bootstrap enabled I think this looks a lot nicer than what we had before but this is a nice little project to get you started if you never use flash before from here you can add on a lot of different things you can um you could really like go indepth and get this all going you could add like a sidebar over here and here you could add like a whole editor so you could have like you know how at the top of editing out of text fields I have like the bold button and the italics button and like underlined button and then like the text size and all that you could implement all that and all this stuff but that's getting more and more into frontend development and less flasks so I think this is a good place to end it all right so this is our little flash blogging app there's no login functionality maybe we'll do that some other time but I think this is a perfect amount a bitesized chunk to get you guys started defeat of use flash before so thanks for watching and I will see you guys in a different video good bye hey guys nice job you made it to the end of the flats tutorial very proud of you guys you made it this far you went from completely knowing nothing about flasks and creating your basic app all the way up to having a full blogging app with bootstrap enabled with a beautiful front end and a back end and a database and everything is great and I just want to congratulate you for completing that project so and I have this little thing in your back pocket you can pull it out whenever you need but good job for getting this far now if you're interested in taking things further ok if you like this course then I just wanna remind you that we have a one hour plus webinar called the three secrets to becoming a Python freelancer in 2019 and beyond which basically tells you how to go from not knowing anything encoding at all and whatever the steps you can take to increase your chances maximize your chances to having a sixfigure income as a Python freelancer okay it's not a guarantee you're gonna make it okay but it really really increases your chances to actually get in there making it happen if you put in the work so we're gonna be going over the three secrets yeah it teaches you how to line clients how to reach out I mentioned the technical skills you probably gonna have to learn that's actually the easiest part everybody everybody knows that but how to reach out to clients how to do all the soft skill things how to negotiate and all that stuff and the different opportunities you can pursue and we're to really direct and focus your energy and whatnot to actually start making income with Python and programming in general alright so definitely check it out we all worked really hard on it just reminding you again if you like this video then go check that out and go check out the other videos on our channel and just stick with us and good [ __ ] will happen and thank you for watching this course you
