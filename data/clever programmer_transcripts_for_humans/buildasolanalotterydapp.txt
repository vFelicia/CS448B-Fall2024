With timestamps:

00:00 - picture this it's September 2022 and the
00:03 - USA Mega Millions jackpot is at 301
00:07 - million dollars now imagine if you could
00:10 - create your own lottery app using crypto
00:14 - instead that's right in this video we're
00:16 - going to be making the lottery dap on
00:18 - Solana blockchain I'm gonna be showing
00:21 - you guys how to make your very own
00:23 - Solana smart contract using anchor which
00:25 - is just a framework of rust I'll walk
00:27 - you guys through step by step how you
00:29 - can buy tickets create the lottery and
00:32 - transfer that Sweet Soul to a very lucky
00:34 - winner next I'll show you guys how to
00:37 - use your Phantom wallet and connect it
00:39 - to your app and of course we're gonna
00:41 - need an RPC node provider to connect us
00:44 - to the blockchain and our friends at
00:45 - quicknote are going to hook us up we'll
00:47 - also be using something called Solana
00:48 - playground which is the place to create
00:51 - your smart contract build it deploy it
00:54 - and for my favorite part test it so that
00:56 - you can understand how all of the
00:58 - functionality works so if this excites
01:00 - you make sure you drop a like in the
01:02 - video and let's get started with the
01:04 - demo and like I just said this is a
01:07 - amazing exciting app for you guys we're
01:09 - actually making a lottery we're taking
01:11 - what we know about Solana and I'll walk
01:14 - you guys through how to make this cool
01:15 - app but first let me show you around
01:17 - right let's how this is how it works
01:19 - right as you can see we have Phantom
01:21 - wallets we have another button here that
01:24 - we can use as well and I'll show you
01:26 - guys how to set that up but to get
01:28 - started and log in and connect we click
01:30 - select wallet we're using Phantom Of
01:33 - Course and there we go boom the way this
01:36 - works is we need to initialize what I'll
01:38 - call the master so once we initialize
01:41 - that Solano will ask us to approve
01:44 - click approve and Bam so that we have
01:46 - nice toast notifications this time and
01:49 - we can see that this is lottery number
01:51 - zero well that's the initial State
01:53 - what's the pot nothing what was the
01:55 - recent winner zero nothing
01:58 - right so how do we make some more life
02:00 - right well let's make a lottery do you
02:02 - want to make the next Mega Millions
02:04 - jackpot well we can do that with Solana
02:07 - here so let's click create Lottery
02:10 - and let's hit approve
02:12 - and Bam now we're talking right so a
02:15 - lottery was created as you can see and
02:17 - now we're in lottery number one right
02:20 - the cool part about this is we can
02:23 - purchase a ticket and every ticket that
02:25 - we purchase is gonna cost you five sold
02:27 - it's pretty steep right but luckily for
02:30 - me I have 13 Soul right now let's go
02:33 - ahead and enter
02:35 - let's hit approve notice how it says
02:36 - minus five I bought a ticket and we can
02:39 - see that I lost some soul I have eight
02:42 - now right so let me let's make this
02:43 - interesting right so let's use a
02:46 - different wall let's say someone else
02:47 - logs into the very same app right and
02:51 - let's go wallet number four
02:52 - this guy's pretty rich too he says 13
02:54 - and notice a couple things I switched to
02:57 - my CV wallet but now there's no pick
03:00 - winner button right because the cool
03:02 - part about this it's secure the only one
03:04 - who can pick a winner is the one who
03:06 - created the lottery and this guy didn't
03:08 - create it so he can't decide who who's
03:09 - the winner
03:10 - right
03:12 - so let's enter this guy in and let's hit
03:15 - approve so there's a 50 50 chance right
03:17 - you want to make it even more spicy
03:18 - right let's add to the pot all right
03:21 - let's add to the tally all right let's
03:22 - see wallet number two does he have any
03:23 - Soul he has seven this is the poorest
03:25 - wall that I have all right he's gonna
03:27 - enter in he's gonna hit approve and Bam
03:30 - pot's now 15 right so one out of three
03:33 - chance let's go to wallet number one
03:35 - right let's be a little bit unfair and
03:38 - let's make it so I have two entries so
03:42 - who had let's see how many total tickets
03:44 - right if there's 20 there's four tickets
03:46 - two of them are owned by me one of them
03:48 - is owned by wallet number four let's say
03:51 - it's you guys you guys are wallet number
03:52 - four and we have wallet number two right
03:55 - so
03:57 - what we can do since I made this Lottery
03:58 - let's pick a winner shall we so let's
04:00 - say pick winner
04:02 - and let's hit approve
04:03 - and the winner is for a what the hell so
04:08 - that means I didn't win I can't claim
04:10 - that money or else we'll get an error
04:12 - right I think wallet number two the
04:14 - poorest wallet out there wins the prize
04:17 - so this guy he has two he spent his life
04:21 - savings on his ticket so if I click
04:22 - claim prize he gets 20 Soul I'd say
04:26 - approve boom claim the prize those
04:29 - buttons are gone and you can see there's
04:31 - history and you can see who won right so
04:33 - this is an amazing app there's a lot
04:35 - that goes into it I show you guys how to
04:38 - do something that's not really possible
04:39 - in Sana right you can't generate a
04:41 - random winner there's something called
04:43 - pseudo-randomness that I'll show you
04:45 - that's possible so look at this wallet 2
04:48 - is now the richest man out of all my
04:50 - wallet says 22 soul and that's the demo
04:53 - so are you excited to build this app you
04:55 - guys are excited drop a like right now
04:58 - leave a comment saying I'm ready Lance
05:00 - so I know that you're watching and if
05:02 - you want more videos like this also let
05:04 - me know so without further Ado let's get
05:06 - to the tutorial all we have to do to get
05:08 - started is open up your terminal go into
05:10 - the folder that you want to put this
05:12 - file in and type npx
05:15 - cleverprogrammer at latest once you do
05:18 - that hit enter and watch the magic
05:21 - happen you're gonna see our CLI tool
05:23 - load up it's going to ask if to you to
05:25 - put your email address I'll put in mine
05:27 - plants at programmer.com BAM your name
05:31 - and Lance and select the project that
05:34 - you want to load up you guys don't have
05:36 - to write a lick of code to make sure you
05:39 - have the same files that I do right
05:40 - we've done so many projects this past
05:43 - month right now we're like doing the
05:45 - salon lottery app as you guys know so
05:48 - let's hit enter
05:51 - right
05:52 - and as it loads up I mentioned before
05:54 - that we're going to need an RPC node to
05:57 - connect to the blockchain so let's go
05:58 - ahead and set that up while our CLI tool
06:01 - installs the project
06:04 - all you have to do oh look at that vs
06:06 - code is already finished but all you
06:07 - guys have to do is type in the link in
06:10 - the description and it's going to be try
06:11 - quicknow.com
06:13 - cleverprogrammer so if you hit enter
06:16 - you should see this nice page right here
06:18 - go ahead and put in your information
06:20 - your name your organization you can say
06:23 - personal you can say you know whatever
06:25 - company you're part of your email and go
06:28 - ahead and create an account I already
06:29 - have an account so I'm just going to
06:31 - sign in
06:32 - so once you've done that you should see
06:34 - this nice screen right here and all you
06:36 - need to do is set up an endpoint is
06:37 - click this button create endpoint select
06:39 - the chain that we're using and of course
06:41 - we are doing Solana and the important
06:43 - thing here is that there's three
06:45 - networks that you guys should know about
06:46 - when working on Solana there's mainnet
06:48 - testnet and devnet what I'll say is this
06:50 - when you're ready for the real deal and
06:52 - you want to use Real Solana right your
06:54 - own money you can use mainnet beta but
06:57 - if you're learning with me let's use
06:58 - devnet okay so let's use devnet I'm
07:00 - gonna hit continue and
07:02 - there you go there's a couple of add-ons
07:04 - that you could add but let's go ahead
07:06 - and just hit continue
07:09 - all right we'll just hit create
07:12 - because we want to use the free tier
07:16 - and Bam that's it this shy tiniest
07:19 - Firefly that is our amazing RPC node
07:22 - that's going to help us deploy our
07:24 - contract and connect to the blockchain
07:26 - all you guys have to do is hit this copy
07:29 - button right here and we should be good
07:30 - to go with that said I think our app is
07:33 - ready so if I hold I'll tap here our CLI
07:36 - tool is going to set up our app right
07:39 - see this this opened up itself or at
07:41 - least it should open up itself so you
07:43 - can see over here
07:45 - we have our nice app and all of the
07:48 - components inside of it
07:51 - and since we're already here one thing
07:53 - that we should do is let's set up our
07:55 - Phantom wallet if you didn't know we're
07:56 - going to use Phantom wallet to connect
07:58 - to our app and send all of our
08:01 - transactions and sign them of course so
08:03 - what I'm going to do open up our tab
08:04 - here and if you don't have Phantom
08:06 - wallet installed go ahead and type in
08:08 - Phantom wallet extension on Google
08:11 - Chrome
08:12 - and you can see it should be the first
08:14 - one it should be this page right here I
08:16 - already have it installed so you should
08:18 - be good to go so if you already have
08:19 - Phantom skip a little bit ahead of the
08:21 - video you know what you're doing right
08:23 - if you don't you're new here what's up
08:25 - guys welcome so once you have the
08:27 - extension installed go ahead and log in
08:29 - you should see something like
08:31 - um saving your recovery phase a phrase
08:34 - that's your password don't share that
08:35 - with anybody keep it private and to
08:38 - yourself some are safe right so you
08:39 - remember just in case you lose your wall
08:41 - information okay but you should see
08:43 - something like this and notice how it
08:45 - says you are currently on devnet right
08:47 - by default if you just install this this
08:50 - wouldn't be on devnet so what you need
08:52 - to do is go into your settings
08:55 - change network and click devnet right
08:57 - because remember when we set up for
08:58 - quick note which one did we use we use
09:01 - devnet all right now you guys are
09:02 - following all right so now that you did
09:04 - that uh you might notice you don't have
09:06 - any Solana like you're really poor right
09:08 - so let's get you guys rich Let's print
09:10 - all the Solana we need to do that just
09:13 - type in Saw faucet.com and put in your
09:17 - wallet address so if you don't know your
09:19 - wallet address all right just go at the
09:21 - top here you can see if you hit copy
09:23 - right
09:25 - that's going to be your wallet address
09:26 - so I'm going to hit and paste my wallet
09:28 - just in here and what you could do you
09:30 - don't have to do one at a time you can
09:31 - do two at a time and you're gonna click
09:33 - which network
09:35 - that's right Kevin devnet I don't know
09:37 - if there's any Kevin's watching but if
09:39 - there is shout out to Kevin all right so
09:41 - back to Soul faucet now I have two
09:43 - I think I had 16 before now I have 18.
09:46 - so do this as many times as you like oh
09:48 - you won't need a lot I'd say for the
09:50 - lottery app you can get about like 15 10
09:53 - even all right it's all up to you so
09:55 - that said I think we're good on the
09:58 - Solana side let's go ahead and check out
10:00 - our app
10:02 - all right so going into my app now you
10:04 - should have everything you need if you
10:06 - did the CLI tool command correctly right
10:08 - all the packages are installed you
10:10 - shouldn't see any uh Missing packages it
10:12 - should be set up for you guys what you
10:14 - guys need to do now is press command J
10:16 - or Com or control J if you're on Windows
10:19 - and let's CD into the app once you're in
10:22 - the app if you didn't know this to start
10:24 - it we use yarn depth
10:27 - okay so now our app is running at
10:29 - localhost 3000 let's go ahead and head
10:31 - over there
10:34 - and Bam right if you guys just saw the
10:36 - demo this looks a lot different than
10:39 - what I just showed case reason being is
10:41 - because this is a challenge right why is
10:43 - this a challenge because everything
10:45 - works but we need to make it Dynamic
10:49 - what do I mean if you guys are familiar
10:51 - with programming at all all of this is
10:53 - static data what do I mean by Stack
10:54 - let's say I click this connect wallet
10:56 - button boom we're connected but it
10:59 - doesn't actually use Phantom all right
11:01 - it's just a button that changes what we
11:03 - call States right so look at this this
11:06 - these lotteries it just says one one one
11:07 - right we can initialize the master right
11:10 - we already have the pot for this Lottery
11:12 - we can enter right it doesn't really do
11:15 - anything right all it does is set up a
11:18 - console log so let's take a look at that
11:20 - all right so we connect wallet
11:21 - connecting static wallet initialize the
11:24 - master we hit enter we purchase the
11:26 - ticket purchased a ticket we create a
11:28 - lottery right pick winner it's basically
11:31 - just an empty function that's console
11:33 - logging uh what it should do does that
11:35 - make sense to you guys cool
11:38 - all right so if that made sense our goal
11:40 - is to give this app some life right you
11:42 - saw what it does how do we make that
11:43 - work well let's first understand right
11:46 - what our app looks like so what I like
11:49 - to do is you know just show you first of
11:51 - all what our app does so if we go to our
11:54 - pages I believe let's head over to our
11:56 - index notice a couple things here we
11:59 - have header pot card and table those are
12:02 - our three main components right this
12:05 - project requires you to understand react
12:07 - so if you're a complete beginner I
12:09 - apologize but this might be a little
12:11 - difficult for you but don't worry try to
12:13 - see if you can learn something from this
12:14 - cool so like I said header pod card
12:17 - table right if we were to draw like a
12:21 - nice visual for all this
12:22 - let's go ahead and do that let me see if
12:25 - I can make this smaller
12:27 - and let's do my handy dandy notebook
12:30 - [Music]
12:31 - you can just use any other whiteboard
12:33 - but this is the one I like to use
12:34 - perfect so as you know if you are
12:38 - familiar with programming or at least
12:39 - react right we have different components
12:43 - right so you can see that this is my
12:46 - underscore app.js it's returning a
12:49 - component but within this component
12:51 - right oops not our code over there
12:54 - within this component
12:56 - we have this right this com this app
12:59 - component has children within it right
13:02 - so if I would draw a little tree to
13:04 - illustrate that relationship
13:06 - all right I would it would be a little
13:07 - bit like this so if I draw a box
13:10 - this is the app all right and from there
13:14 - we have the index.js right
13:18 - you guys following so far you guys know
13:20 - what I mean when I say the child of the
13:23 - app is the index right this component is
13:26 - the same as this whole index
13:28 - so what would be the child or the
13:30 - children of the index.js what do you
13:33 - think give you guys three seconds three
13:35 - two one what do you think which one's
13:39 - the child
13:41 - all three of them right so that means
13:43 - index has three children
13:45 - all right so we have one
13:48 - two
13:49 - three okay
13:51 - we have what are the three children's
13:53 - names guys
13:54 - should be pretty easy right you guys
13:56 - read it's gonna be header uh pot card
13:59 - pot card
14:02 - and something called table right if you
14:05 - guys uh create your components the name
14:08 - alone should let you know what the
14:10 - purpose of it right
14:12 - so if you look at this
14:14 - right what part of our app
14:17 - does header contain right if you look at
14:20 - this which part is the header can you
14:22 - guys tell which is the header
14:24 - if you said this top area right here you
14:27 - are correct all right how do I know
14:28 - let's comment out the header right
14:30 - save Boom the header is gone okay
14:33 - what about the pot card what's the pot
14:35 - card boom gone right
14:38 - over the table boom gone right what does
14:41 - that tell us though it tells us that the
14:43 - functionality of each component exists
14:47 - within that component right so if I
14:49 - wanna you know make it like the demo
14:51 - where you click this connect wallet and
14:53 - you make a phantom wallet connection
14:56 - which of these components should I
14:58 - tackle
14:59 - should I look in the table yes or no
15:01 - no right we're going to look at either
15:04 - the header or the plot card right if you
15:07 - said pot card I can understand because
15:08 - the connect wallet button is here as
15:10 - well but the main way to connect your
15:13 - wallet you saw uh was basically starts
15:16 - with the header all right so let's look
15:18 - at the header so if it's in the header
15:20 - we can actually go to that very
15:22 - component and take a look right and as
15:25 - you can see the header is very simple we
15:28 - just have a div wrapper here a div that
15:31 - holds Lottery depth and a button that
15:34 - says connect wallet so this right is
15:38 - where we want to look at to make that
15:39 - Phantom wallet connection as you can see
15:41 - right here
15:42 - something called a wallet multi button
15:44 - that is gonna be a replacement our
15:47 - Dynamic button right so some of the
15:49 - Imports are set up for you guys already
15:50 - other than other Imports we got to
15:53 - figure out together
15:54 - okay so let's go ahead and figure out
15:57 - how we can connect our Phantom wallet to
15:59 - this app
16:01 - now before we get excited about taking
16:04 - this multi-button and putting it in here
16:07 - right we can't just do that right away
16:10 - right because the important part is we
16:11 - want to connect our wallet to the app I
16:14 - was putting a button there isn't
16:16 - necessarily going to do that we have to
16:18 - set up what I'll call the connection
16:20 - provider right what do I mean all right
16:23 - let's take a look
16:24 - I was saying that we should put the
16:26 - connect wallet button here right
16:29 - but uh we need to establish the
16:31 - connection to our app right so what I
16:34 - mean by that
16:35 - is this
16:36 - let me change it to this board Perfect
16:39 - all right I essentially want to wrap my
16:41 - app with a phantom wallet connection so
16:44 - that anywhere my app is right oops
16:48 - anywhere my app is we have a wallet
16:52 - connection
16:54 - if I'm in my table
16:56 - if I'm in the table it should have
16:58 - access to the wallet connection if I'm
16:59 - at the pod card it should know what the
17:01 - wallet is so forth and so forth right we
17:04 - can do this by wrapping that connection
17:07 - provider within the index alright so we
17:10 - want to tackle the index component you
17:12 - guys with me so if that's the case
17:15 - let's go back here let's open up
17:18 - this go to the index and let's take a
17:20 - look
17:21 - awesome
17:23 - so as you can see already right we have
17:25 - a bunch of code here let's actually make
17:29 - this bigger so you guys can see it
17:32 - oops too big awesome so we have a bunch
17:34 - of code here we know that this index
17:37 - component holds the three main
17:40 - functionalities of our app we can put
17:42 - the wallet connection here it's also
17:44 - okay to put your wallet connection here
17:45 - right it doesn't really matter that much
17:47 - right but for simplicity's sake and for
17:49 - visual sake let's work on the index
17:52 - so we want to import a couple of things
17:54 - what we do want to import is something
17:57 - called the use memo which is a react
18:00 - Hook from react
18:02 - we want to import
18:05 - connection provider
18:07 - import
18:09 - connection
18:11 - oops provider right and if I press tab
18:15 - you can get the Auto Import of Solano
18:17 - wall adapter react
18:19 - and there's actually another thing we
18:21 - want not only we want the connection
18:22 - provider we want the wallet Provider
18:25 - from the same place
18:27 - okay cool uh we also want to import the
18:31 - wallet
18:33 - adapter Network all right this is from
18:37 - uh Solana
18:40 - Solana slash wallet adapter
18:45 - uh base all right that's what I believe
18:47 - it's from so we also want to import
18:50 - the Phantom one right because what
18:52 - wallet are we using we're using Phantom
18:54 - one there's actually other uh Solana
18:56 - supported wallets that you could use it
18:59 - doesn't have to be Phantom right but I'm
19:01 - most familiar with Phantom I like using
19:02 - Phantom so we want to import that right
19:06 - if you're more curious to see the other
19:07 - wallets you can actually look at this
19:08 - library and see the other options at
19:11 - Solana wallet adapter wallets all right
19:14 - this Library holds all of the adapters
19:17 - cool
19:19 - um let's see what else do we need
19:21 - we can also import the wallet modal
19:24 - provider right
19:25 - so the wallet modal provider gives
19:28 - literally sounds like what it says it's
19:30 - gonna provide us with the wallet's
19:32 - modals when I click the button we should
19:34 - see the list of wallets that we can
19:36 - connect to and it should be a Solana
19:38 - wall adapter react UI that is correct
19:42 - and from there we can just require
19:44 - require
19:48 - at Solana oh web
19:52 - Solana wallet adapter react to Y uh
19:56 - Slash Styles dot CSS right we want to
19:59 - get the CSS that Sonic comes with it's
20:02 - that nice blue look that you saw from
20:04 - the demo so let's get that as well
20:08 - okay this looks pretty good to me from
20:10 - here let's use all these Imports now
20:13 - right so from order we want to get the
20:16 - uh use memo first
20:19 - okay
20:20 - so let's see actually let's make a
20:22 - variable I want to make
20:23 - const endpoint
20:26 - okay so what is an endpoint all right
20:30 - let's say I open this guy up again let's
20:33 - say I want to connect to the blockchain
20:34 - right
20:36 - oops let's erase this for now I want to
20:38 - connect to the blockchain from my app
20:41 - and I guess we can make the circle again
20:43 - boom here's my app
20:45 - and the blockchain
20:47 - since it's a chain or a block we can
20:50 - make it a rectangle right Solana chain
20:53 - right
20:54 - and it's made out of different blocks or
20:56 - whatever right in order to get our app
20:58 - to connect to the chain
21:00 - right we need something like an RPC node
21:04 - right and if you didn't know quick node
21:07 - provides you with an RPC node we could
21:09 - technically make our own RPC node right
21:12 - but that requires us setting up some
21:14 - infrastructure uh maybe even Reinventing
21:17 - the wheel and setting it up right I like
21:19 - using quick note because it makes it
21:20 - nice and easy to set it up right so we
21:24 - want to use our RPC node or quick node
21:27 - to connect to the blockchain so it knows
21:30 - what wallet I'm using right and if I
21:33 - want to make transactions to the
21:35 - blockchain we can also use the same
21:37 - process right there we go so how do I
21:40 - use the RPC node well remember I told
21:43 - you to copy this HTTP provider go ahead
21:46 - and copy it if you didn't already get
21:49 - quotes and paste it right there right
21:51 - I'm putting in a variable because it's
21:52 - usually very long so I want to store it
21:55 - in endpoint so I don't have to like put
21:58 - this whole URL somewhere else
22:00 - cool so now that you have your endpoints
22:03 - set up let's go ahead and set up our
22:05 - wallets all right so we've got the
22:06 - endpoint set up let's get the wallets
22:08 - right technically we're only setting up
22:11 - one wallet but if you did want to set up
22:13 - more wallet options uh here is where you
22:16 - would put the rest of the adapters that
22:17 - I was talking about
22:19 - but like I said we only have one so
22:22 - here we go so let's set up this array
22:24 - here
22:25 - oh sorry about that camera died for a
22:27 - second but we're back anyways as I was
22:30 - saying setting up our wallets we're
22:32 - gonna put Phantom wallet adapter right
22:35 - here this is creating a new instance of
22:37 - this wallet
22:39 - let's put a comma here and again if you
22:41 - wanted to add more uh different kinds of
22:44 - wallets as an option you would list them
22:46 - out here
22:48 - cool and put empty array right here
22:51 - and with that this should be it
22:53 - utilizing that react Hook New Phantom
22:56 - wallet adapter bam
22:58 - um let's see
23:00 - yep now it's time to set up our
23:01 - connection provider and our wallet
23:03 - provider so one thing I want to mention
23:06 - is back to our drawing
23:10 - we want to set up that connection and
23:12 - this is technically more accurate but we
23:14 - want to set up that connection we have
23:16 - to wrap it within our app right see how
23:19 - this circle is our connection and it's
23:20 - wrapped within our app right to do that
23:23 - uh with our code you want to take that
23:27 - connection provider
23:29 - connection provider
23:32 - put all of our components
23:34 - within that app this is what we call
23:37 - wrapping right we're wrapping the app or
23:41 - header popcorn table with our connection
23:43 - provider so it's wrapped in there make
23:46 - sense so now
23:48 - we're providing the connection right
23:49 - quite literally
23:51 - cool one thing you could do is that you
23:53 - need to provide the connection provider
23:55 - with an endpoint right it sounds funny
23:57 - to say so if I say endpoint right here
24:00 - right we're going to pass in this prop
24:02 - of end point there we go we're passing
24:06 - in our our PC connection to our provider
24:09 - which in turn is providing that
24:10 - connection throughout the app
24:12 - make sense
24:13 - that's the way I would explain it we
24:16 - also have another provider here it's the
24:17 - wallet provider essentially the same
24:19 - thing but specifically for the wallet
24:22 - so again wrap those components in there
24:26 - and yes the order does matter if you
24:29 - were wondering right it should be
24:30 - connection provider then the wall
24:31 - provider then the rest
24:33 - okay we're almost done using all the
24:35 - Imports
24:37 - let's see
24:41 - um one thing that happens we don't need
24:43 - is this adapter Network so again if you
24:46 - weren't using your RPC node and you just
24:48 - want to strictly connect to the devnet
24:50 - you would use this import right
24:53 - so we don't need that what we do need is
24:56 - within the wallet provider I want to use
24:59 - the modal again this is kind of optional
25:01 - but it's nice having this modal here
25:03 - because it takes a lot of work out of us
25:07 - that we need to set up you'll see in a
25:09 - second so I said save boom
25:12 - okay
25:18 - yeah I think that's pretty good
25:23 - all right cool
25:27 - and you know what too we can even put
25:29 - this div right here this style wrapper
25:31 - we can make the connection provided the
25:33 - parent did what I mean by the parent div
25:35 - is the div that's on the most outside so
25:37 - what I'll do is take this
25:39 - put it in here
25:41 - and don't forget if you do this this is
25:43 - the lid of the box right you want to
25:46 - make sure that it matches up oops
25:50 - right here
25:52 - I took that outside parent div and I
25:54 - made the connection provider the new
25:56 - parent so our app should look a little
25:59 - bit something like this if it looks like
26:01 - this we should be good to go and we can
26:03 - double check by looking here can't read
26:06 - properties of map that's fine
26:10 - okay cool
26:12 - uh this error shouldn't happen but I'm
26:14 - guessing it's because if we go to our
26:16 - wallet provider we should provide it
26:18 - with the wallets so let's go ahead and
26:19 - do that wallets is wallets and uh if you
26:24 - want your app to automatically connect
26:26 - you can put this auto connect prop right
26:28 - here and there you go no more error
26:31 - that's what it was missing all right
26:32 - don't forget to put your wallets right
26:34 - here if you have something like this if
26:36 - I zoom out
26:38 - take a look if it matches up
26:40 - no errors we're good to go right but
26:43 - notice something uh connecting a wallet
26:45 - doesn't actually do something
26:47 - not even this one right but again oh the
26:50 - first thing I wanted to tackle was this
26:52 - connect wallet button
26:53 - so to do that which component do we need
26:56 - to go to
26:57 - let's go to the header
27:00 - so I'm gonna go to the header
27:03 - you see how we're importing this wallet
27:04 - multi-button
27:06 - should be pretty simple now if I do
27:08 - something like this oops
27:10 - or if I just start saying wallet multi
27:12 - button
27:15 - oh yeah that doesn't work let's just do
27:17 - it normally wallet
27:18 - multi button
27:23 - and the wallet multi button is actually
27:25 - self-closing meaning we can just do
27:27 - something like this
27:29 - and let's take a look
27:33 - hey look at that it says select wallet
27:36 - now and uh if we have our proper
27:38 - connection on provider setup we can
27:41 - click on it you can select we can see
27:43 - the modal here with all the wallets that
27:44 - we have connected and it knows that I
27:46 - have Phantom I'll click Phantom and
27:48 - there we go right what functionality did
27:50 - I write to do all this none that's
27:52 - what's nice about uh the Solano wallet
27:55 - adapter right we can connect our wallet
27:57 - we can even disconnect it and it's gone
27:59 - all right the next thing I want to do is
28:01 - let's put that same button here all
28:04 - right so let's go ahead and do that what
28:05 - component should that be in
28:08 - all right let's take a look
28:09 - should be in the pot card right
28:12 - so I hope you guys are getting the
28:13 - pattern because as we go on I'm going to
28:15 - explain it less and less I'm not going
28:16 - to hold your hand anymore I'm sorry all
28:18 - right so we're in the plot card and
28:19 - there's some static comments here that
28:21 - we'll talk about in just a second what
28:23 - we do want is the wallet multi button
28:26 - yes
28:27 - and let's go ahead and put it in the
28:29 - right places
28:30 - so if we look there's a comment just for
28:33 - you guys says wallet multi button goes
28:35 - here let's say wallet multi-button
28:39 - like so
28:40 - and there's another place where we need
28:42 - this and I believe
28:46 - strip here connect wallet wallet multi
28:50 - button so let's hit save and it goes
28:52 - right here perfect so if I refresh
28:54 - select while you can even click this
28:56 - button to connect your wallet and as you
28:57 - can see it's in both places awesome
29:02 - cool
29:04 - right and it does mess up our static
29:06 - functions because uh we didn't set that
29:09 - up but that's okay for now
29:11 - what I want to do next is let's actually
29:13 - create the smart contract first and then
29:15 - we'll get back to this and explain how
29:17 - to put it all together sounds good
29:19 - cool so let's go ahead and do that all
29:21 - right so to move on to the next step and
29:23 - get started writing our first smart
29:24 - contract together which you guys should
29:26 - do is we can go ahead and exit this tab
29:29 - we can make a new tab and we're going to
29:31 - open up something called Solana
29:33 - playground so let me go ahead and make
29:36 - sure we use the full window because
29:38 - we're not going to look at our app for a
29:39 - while like I mentioned so we're going to
29:42 - do is type in beta soul.pg.io this right
29:45 - here and don't worry about this stuff
29:48 - what we need to do is click this plus
29:50 - button on the side and let's choose a
29:52 - framework before I move on if you guys
29:54 - want to know Solana playground is the
29:56 - place where we can write your very own
29:57 - smart contract you can build here you
30:00 - can deploy here and the most important
30:02 - feature that we're going to use today on
30:03 - this is easy to test all of your
30:07 - functions because if you're just coming
30:08 - in you're not going to know how these
30:10 - work but the way I understood them the
30:12 - way I got I'm getting better at this is
30:14 - by testing and figuring out what does
30:15 - this do what does this do so when you're
30:17 - choosing a framework we could do this in
30:19 - Native first we could do this an anchor
30:21 - and there's new support for python now
30:23 - which is exciting but what we want now
30:25 - to use is Anchor and let's name this
30:27 - project Lottery
30:30 - sold all right so I'll click anchor rust
30:32 - hit create and Bam here we go we get
30:35 - started off with these files right here
30:37 - this is the default uh files as you can
30:40 - see there's an initialize but what I
30:42 - want to draw your attention is this
30:44 - macro it's called hashtag program this
30:47 - defines a program so everything within
30:49 - this scope right here that I highlighted
30:51 - is the program right we want to create
30:53 - our own Solana program and just so you
30:55 - know when I say program and smart
30:57 - contract I'm going to use that
30:59 - interchangeable but they're going to
31:00 - mean the same thing all right if you're
31:01 - coming from solidity this is essentially
31:03 - the remix of Solana
31:06 - cool so let's go ahead and clear this
31:08 - out because we're going to make this
31:09 - from scratch so get ready for that
31:12 - so like I said we're going to be using
31:14 - something called anchor which is just a
31:16 - framework of rust and if you don't know
31:18 - what rust is it's a the native coding
31:20 - language to write for Solana right so
31:25 - um if you see me import stuff in
31:26 - JavaScript you guys should know that
31:28 - import
31:29 - you know use state from react all right
31:33 - what does this do right here well if you
31:35 - were to write this in JavaScript this is
31:36 - getting us the you stake Hook from the
31:39 - react Library okay so you can't write
31:43 - this in rest because that's not going to
31:44 - work it's a different language so how do
31:45 - we do something similar to this in Rust
31:48 - well
31:49 - the cool part is that you can do this
31:51 - you can say use anchor Lang right anchor
31:55 - Lang is a library and when I say use you
31:58 - can look at it as import we're getting
32:00 - anchor Lang right but what do we want
32:02 - from anchor length so we can get more
32:04 - stuff from anchor length by saying two
32:06 - colons right if you think of it like a
32:09 - folder we're going into this folder when
32:11 - I say colon colon
32:12 - right so we're inside this folder and we
32:15 - can get something from it we can say
32:16 - Prelude right so what do we get from
32:18 - anchor lag we got Prelude right and when
32:20 - I do colon colon again what's happening
32:23 - I'm reaching into this folder I'm
32:24 - grabbing a cookie and inside that jar
32:27 - I'm going to put star this is basically
32:28 - saying get everything uh within Prelude
32:32 - right
32:33 - so you saw me use used it right I did
32:35 - this and then used it here we can do
32:36 - something similar by writing Prelude
32:40 - get me everything inside Prelude well
32:44 - first go into Prelude and then inside
32:46 - Prelude get me everything in there if I
32:48 - do a comma here I'm getting more things
32:50 - from anchor length think of this is like
32:52 - me getting used State use effect and use
32:54 - memo for example all right so what else
32:56 - do we want here well we want Solana
33:00 - right so I'm going within this Library
33:04 - and we can get more stuff so we can get
33:07 - clock
33:08 - hold on clock right we're getting
33:11 - something from here
33:13 - okay
33:14 - we can do a comma we can do hash get me
33:18 - hash
33:20 - and we can get more things here so we're
33:22 - going to use a bunch of these libraries
33:24 - don't worry about fully understanding
33:26 - what all of them is it's easier to
33:28 - understand all of them within practice
33:31 - okay so system
33:34 - uh instruction
33:36 - colon colon transfer yep
33:40 - cool
33:41 - all right so this looks pretty good this
33:43 - is us importing all the libraries we
33:45 - need
33:47 - awesome so how do we create our smart
33:49 - contract or like I said a program well
33:52 - to define a program we have to use the
33:55 - program macro and again we don't have to
33:58 - use it but this will make our lives a
33:59 - lot easier
34:02 - so
34:03 - everything I write within this macro is
34:06 - going to Define what that program is and
34:08 - maybe if I zoom in you can see it a lot
34:09 - better all right so within here you say
34:11 - mod and then the name of your program so
34:15 - you could call this hello right you can
34:17 - say uh
34:18 - the program right which is not very good
34:21 - name actually you can even say Lottery
34:23 - and that's what we'll call it here
34:24 - so if you do some uh curly brackets like
34:27 - this
34:28 - this entire thing that I'm highlighting
34:30 - that's your program not much right so
34:32 - keep that in mind when you're making a
34:34 - program another thing that you could do
34:36 - is write CP right not clever programmer
34:39 - uh create program and you can click this
34:41 - and Bam right and it's going to do some
34:44 - interesting things but I don't want you
34:45 - to worry about right that right now
34:47 - right so you can literally highlight
34:50 - this it's automatic highlighted I can
34:52 - say lottery I can hit tab change the
34:54 - name of this blah blah change the name
34:56 - of this right
34:57 - so I'm gonna erase this because I want
35:00 - to talk about each thing before I get to
35:02 - it
35:03 - okay
35:04 - so we've made our program right there's
35:06 - nothing in it it's pretty empty uh but
35:08 - let's say you want to import a bunch of
35:12 - other folders in here or files rather
35:14 - right how many files do we have right
35:16 - now guys
35:17 - all right we have one lib.rs think of
35:21 - that as the entry point which your code
35:23 - would read right but we can we can make
35:25 - more files than this to separate things
35:27 - all right let's make a constants file
35:29 - let's write this button right here to
35:32 - make a new file and we can call it
35:33 - constants and don't forget to put dot RS
35:36 - right RS stands for rust so like it's a
35:39 - rust file just like how we dot JS for a
35:41 - Javascript file
35:42 - cool
35:43 - awesome so we have a now we have a
35:45 - constants file but let's say we had like
35:47 - some stuff in here right how do we get
35:49 - stuff from this folder into this folder
35:51 - well we can import it right so to import
35:54 - that folder we can say mod constants
35:57 - right right here
35:59 - and from there we can say use right so
36:01 - remember what I said what it uses use
36:03 - create
36:05 - okay news crate colon colon
36:08 - and we can destructure it by saying
36:10 - constants oops
36:12 - constants
36:14 - colon colon star so what does this mean
36:16 - right based on everything I told you so
36:18 - far I'm basically going into my
36:20 - constants folder and grabbing all that's
36:23 - in here and right now nothing in
36:25 - constants but there will be don't worry
36:27 - all right so use crate if you didn't
36:29 - know is bringing
36:31 - um
36:33 - everything from this file into this
36:36 - entire scope right
36:38 - so that means I can call on whatever
36:41 - constants is here right but if you want
36:43 - to bring everything from constants
36:46 - into this scope all right we're going to
36:48 - write something called use
36:50 - super right star
36:54 - okay what this means is that I take
36:57 - everything from that we import and bring
37:00 - it into our program so that we don't
37:02 - have to go within the folder just like
37:04 - we did here we can just call it as it is
37:06 - all right if I had a variable uh this
37:08 - wouldn't work but if I had a variable
37:09 - const uh name and then I said Lance
37:13 - right this this is not going to run but
37:15 - let's say I wanted to get name right and
37:17 - constants I can just say name here
37:20 - otherwise if I didn't have U super I
37:22 - would have to say constants and say
37:25 - colon colon name something like that
37:28 - okay cool all right so let's erase that
37:31 - because it's going to break our code
37:33 - cool
37:34 - and let's recap something right another
37:37 - important thing about rust is look at
37:39 - this this is a semicolon right in
37:41 - JavaScript we can get away with this
37:43 - right they're pretty lacks with you in
37:45 - JavaScript and Russ this marks the end
37:48 - of the line right after the you see the
37:50 - semicolon your code is like yep that's
37:52 - the line otherwise it's going to think
37:54 - that this whole thing is one line if I
37:56 - didn't have this semicolon here all
37:58 - right so you need to put semicolons if
38:01 - you don't put semicolons your code will
38:03 - Panic so make sure you do that
38:06 - uh we're gonna need it for this use
38:08 - super as well
38:09 - right and use anchor Lang should be like
38:13 - this as well cool
38:16 - awesome so going between our use crate
38:18 - and our program we also need to declare
38:21 - ID right so if I press d
38:23 - if you press d i we can press declare ID
38:26 - so I clicked it and it generated this
38:28 - for us this is uh the address of where
38:32 - our program is right you can think of it
38:34 - as the yeah the address of where it
38:36 - lives and if you see all these ones
38:38 - that's the default essentially right
38:40 - when I go ahead and build this we'll get
38:43 - our new programs public key so don't
38:47 - worry if it says one we can leave it
38:48 - blank for now
38:49 - but now it's starting to look a lot like
38:51 - the starter files right
38:54 - so the next important thing you need to
38:55 - know is how do we make a function in
38:57 - Rust how do we do that right in
38:59 - JavaScript you would just write function
39:01 - right function and then say knit right
39:04 - in Rust kind of similar right all I have
39:07 - to say to get started is say Pub
39:10 - have FN e-nit right I'll even call this
39:13 - init Master because that's we're gonna
39:14 - have to do in a second
39:16 - and that's how you make a function right
39:17 - so what's the skeleton you need these
39:20 - parentheses
39:21 - and you guys should know if you know
39:23 - anything about programming is this is
39:24 - where you put your arguments
39:27 - okay
39:28 - cool so what's next are we done
39:30 - not necessarily all right what we need
39:32 - to do is press this Dash right here all
39:34 - greater than sign to make an arrow then
39:37 - you say result
39:38 - uh less than sign parentheses greater
39:40 - than sign
39:42 - curly brackets and Bam that's it this
39:45 - right here that I'm highlighting this is
39:47 - a function or an empty function right
39:50 - it's a skeleton of a function all we
39:52 - need to do now right is write the logic
39:55 - in here
39:57 - right so this should look more familiar
39:59 - to you it's not scary rust right now
40:00 - right uh what are some other parts of a
40:03 - function usually there's a return here
40:05 - and you can turn the number five like if
40:07 - this was whatever adding function
40:09 - right but in Rust uh we're going to
40:12 - return okay right this is not exactly
40:15 - return but does give us back something
40:17 - and if you didn't want to give back five
40:19 - if it works you put five but for this
40:22 - specific function we can leave it as is
40:27 - okay
40:28 - you with me so far all right because
40:30 - you're doing great this is it so far for
40:32 - the function what do we want to do with
40:34 - init Master what does it all mean right
40:36 - so if we think back to our app right
40:39 - we're connected here
40:42 - um let's see it's
40:44 - what I'm going to do is temporarily
40:45 - remove this button over here so let's go
40:48 - to our code
40:49 - code code
40:52 - right here
40:55 - let's see if we can make this bigger
40:58 - nice
41:00 - and where is that wallet multi button
41:02 - comes out save
41:04 - boom right oh it might not be even
41:06 - running let's try and make it run yarn
41:09 - that's it
41:11 - oh see the app first and then
41:14 - okay we're good we're back guys so let's
41:17 - refresh this
41:24 - oh I see because it can't be empty
41:26 - that's totally fine
41:28 - we'll just put
41:30 - button here
41:36 - button
41:38 - and I believe there's on click
41:41 - and we had a temporary function here
41:43 - which was connect
41:45 - wallet I believe
41:48 - connect well yep
41:51 - so I'm just going to temporarily put
41:52 - this back connect wallet
41:56 - [Music]
41:58 - there you go
42:01 - oh did I change the wrong one I did
42:06 - foreign
42:16 - let's bring this to the other place
42:24 - right here
42:26 - there we go okay so remember what this
42:28 - button does we connect our wallet and
42:30 - this is the next thing we should see
42:31 - initialize the master right because once
42:33 - we initialize the master we should have
42:36 - access to all the things right so the
42:38 - real question I was asking is uh what
42:42 - what is the master right so the master
42:46 - is going to be an object
42:49 - right this is what it'll look like in
42:50 - JavaScript that's going to hold the last
42:53 - Lottery ID right why is that important
42:58 - Lottery ID
43:00 - because if you look back at our app this
43:03 - current lottery is number three at some
43:05 - point it was Zero some point is one some
43:07 - pointers two we need an object to keep
43:08 - track of what Lottery ID it is all right
43:11 - the reason why I'm making a master
43:13 - object is because this guy will do it
43:17 - and if we do it correctly we can have
43:19 - multiple lotteries going at once it
43:21 - doesn't have to be one at a time right
43:23 - so this is perfect for that for the
43:25 - purpose of this specific video we will
43:27 - work like it's one Lottery at a time if
43:30 - you're more advanced see if you can make
43:32 - multiple lotteries come at once there's
43:33 - no front-end support for that but that's
43:35 - my challenge to you guys if this is too
43:37 - easy for you so yeah we want to make
43:40 - a master object essentially and
43:43 - initialize it here
43:45 - right so there's a lot of pieces that
43:48 - we're gonna need
43:49 - cool so before I get into the rest of it
43:54 - um an object that holds the last laundry
43:58 - ID
43:59 - right
44:01 - before I continue writing out the answer
44:04 - another thing about functions is that
44:07 - there's usually context
44:09 - as a parameter right so let's say when
44:12 - we're adding two numbers it would be
44:13 - num1 and num2 right
44:16 - for every function in rust or anchor we
44:20 - need to write CTX which stands for
44:22 - context right we got to give this
44:24 - function context to work with like what
44:26 - is a master that's what it needs to know
44:27 - so we have to pass that in okay another
44:30 - thing about rust is that you need to
44:32 - identify the type so remember my example
44:35 - of like let's say we wanted to get the
44:36 - name
44:37 - what type what data type is name usually
44:40 - can you expect all right it would be
44:42 - string right you gotta let rust know
44:44 - like hey there's going to be a name
44:45 - coming in and he's a string by the way
44:46 - all right kind of like the the security
44:49 - guard
44:50 - so context right it's not going to be a
44:52 - string or a number it's going to be a
44:55 - struct called context
44:58 - all right and it's going to look
44:59 - something like this and you put your
45:01 - variable in here and this where the t is
45:04 - okay
45:05 - cool so our context is usually going to
45:07 - the name of our context is going to
45:09 - usually be the same name as the function
45:11 - it doesn't have to be but it should
45:12 - right so if it's the same name we can
45:15 - call it knit master
45:18 - okay and when you ever you're not really
45:20 - using it
45:21 - uh or doing anything in a function you
45:24 - put an underscore here
45:26 - okay
45:28 - cool
45:30 - and there's a reason why we don't have
45:31 - to initialize it here but don't worry
45:33 - about that so so far all we know is we
45:34 - made a function where we put okay here
45:36 - this is our result our logic goes in
45:39 - here and it needs a context right but if
45:43 - I were to ask you guys a question does
45:45 - init Master exist is this context struct
45:48 - exist
45:49 - yes or no
45:51 - no it doesn't right what did I get right
45:54 - there right nip Master doesn't exist yet
45:57 - right so this would be like undefined or
46:00 - more like this is undefined so how do we
46:02 - figure out or make our code understand
46:04 - what is init master
46:06 - well you want to go outside your program
46:08 - come right here
46:10 - and let's initialize it right so
46:15 - let's talk about accounts
46:18 - so what are accounts basically
46:22 - um with our Solana program we can create
46:24 - something called pdas and essentially
46:28 - store data at these accounts right so
46:30 - have a look if this is a Solana chain
46:32 - right this is this rectangle is our
46:34 - program we can use this program right to
46:38 - generate accounts and each of these
46:41 - accounts will have their own public key
46:43 - right or their address within the public
46:46 - key we can put uh account data right or
46:51 - in other words the master
46:53 - count
46:54 - okay and what is the master account hold
46:57 - it holds a lottery ID
47:00 - okay so later on we're going to do is
47:02 - fetch these accounts into our app right
47:06 - and use them and plug them in to make
47:09 - this work
47:11 - you following so far you can think of
47:12 - this as a database right because it is a
47:14 - database that's decentralized and we can
47:17 - fetch all of the objects right I'll call
47:19 - them objects from the chain
47:22 - all right I'll make more sense once we
47:23 - actually make it all right so to
47:25 - actually create an account in Rust we're
47:28 - going to use a macro we're going to say
47:29 - hashtag square brackets to arrive
47:33 - derive parentheses accounts right so
47:36 - this makes sense right deriving accounts
47:38 - here
47:39 - or creating a PDA and we're saying Pub
47:41 - struct right
47:43 - init
47:45 - Master Okay and then from there you're
47:48 - gonna say less than greater than and
47:50 - write info like this when one apostrophe
47:54 - and that's it right this is called a
47:55 - lifetime variable this you know without
47:57 - making it too complicated we're gonna
47:59 - just make sure that this struct will
48:01 - live on for however it needs to interact
48:05 - right because in JavaScript if I were to
48:07 - make an array let's say
48:10 - let array
48:12 - right
48:14 - how long would this live in memory this
48:16 - would live forever until I'd like
48:18 - deleted it or clear it or the Heap
48:20 - garbage collector from JavaScript
48:22 - destroys it right
48:23 - when I put a lifetime variable you let
48:25 - your code know hey this is going to last
48:27 - for this long he's staying at this hotel
48:28 - for this long right
48:30 - I'm not defining exactly how long it's
48:33 - staying I'm just saying it's going to
48:34 - live as long as it needs to cool so how
48:36 - do we actually make an account all right
48:38 - bore encoding stuff I know but to
48:41 - actually make an account we need another
48:42 - macro within here right and remember
48:45 - every time you use it what you write
48:47 - under it is where this information is
48:50 - going to get put into right so within
48:51 - here making a macro and we're going to
48:54 - write account
48:56 - okay and then we're going to say
48:58 - parentheses
48:59 - enter right and the cool part about
49:02 - anchor is that it initializes an account
49:04 - for you
49:06 - all you need to do as a developer is
49:07 - just write in it boom you just told
49:10 - anchor hey initialize uh init Master
49:13 - struct right well actually no it's gonna
49:16 - go under here so this is a struct this
49:18 - is our context of our code I want to
49:21 - initialize
49:22 - master account so if I say Pub Master
49:25 - here does that make more sense this
49:26 - macro is going to initialize a master
49:28 - account
49:30 - okay so init we'll initialize
49:33 - pair equals payer
49:36 - okay
49:37 - the reason why I'm writing payer is
49:39 - because whenever you store something
49:42 - oops you store something on the salon
49:44 - and chain right you got to pay for it
49:46 - right this isn't free right you have to
49:48 - pay for the space you use kind of like
49:50 - uh rent right if you're gonna stay
49:52 - somewhere you got to pay some rent
49:55 - okay so get used to that concept and
49:57 - don't worry it's not expensive because
49:58 - we're on the devnet so it's essentially
50:00 - free right but it usually costs like
50:03 - point zero zero zero zero zero zero on
50:05 - the debit so don't worry about it but
50:07 - the payer is going to be payer which is
50:09 - us all right the wallet that puts this
50:11 - here
50:12 - okay that's all you need to know and
50:14 - then we have to Define how much space
50:16 - does this actually take I'll let you
50:18 - know it's going to take up four right
50:20 - plus eight
50:23 - okay don't worry about this just yet
50:24 - I'll come back to it next thing that's
50:26 - important though is we need to put seeds
50:29 - all right what are seeds all right so
50:31 - remember before how I said uh when we
50:34 - are generating a new account right it's
50:36 - gonna have its own address right but we
50:39 - can predictably find an address to put
50:43 - this data in right we just have to put
50:46 - something as a seed all right the best
50:49 - way you can visualize this it's not the
50:51 - exact it's not the same thing but the
50:53 - best way to visualize this is there's
50:54 - something called disparate right notice
50:56 - how it says put your custom seat here if
50:58 - I put the string Lance I will put Lance
51:01 - it generates a unique Avatar this is my
51:04 - avatar right here right but if I were to
51:06 - say Lance with two e's notice how it's a
51:08 - completely different Avatar right so
51:10 - depending on what seed you get you'll
51:12 - arrive at a different address or public
51:15 - key okay
51:17 - cool so uh what I want to put here is a
51:20 - string as well so you can put a string
51:22 - what I'll do is I'm going to call a
51:25 - variable
51:27 - and what do I mean when I call a
51:28 - variable let's make use of our constants
51:30 - and let's write pop const
51:33 - Master oops Master seed
51:37 - right colon right because it's expecting
51:39 - the type and string and it's going to
51:42 - reference itself
51:44 - right and it's going to write master and
51:46 - semicolon right cool so Master scene
51:49 - right this lives in constants we bring
51:52 - that Master seed using use crate to
51:55 - bring it here we use super to bring it
51:57 - in this scope right just in case but we
51:59 - don't need that all right our our crates
52:02 - so for the seeds if I write Master here
52:06 - all right you guys should know what I
52:07 - mean this is a string it's a variable
52:10 - that holds this string and usually when
52:13 - you put something in this array it wants
52:15 - it in bytes so if you do a DOT as
52:18 - underscore bytes it will convert it to
52:20 - bytes
52:22 - okay take that string convert it to
52:24 - bytes that's the seat
52:27 - okay
52:29 - Master seed
52:31 - uh I'm gonna have to just put Master
52:33 - should be Master C like this
52:36 - cool yeah make sure it's the same name
52:38 - as this
52:40 - awesome so we have our seeds we have our
52:42 - space and now let's add bump
52:46 - if you don't know what bump is let's say
52:48 - uh when I'm trying to put it in this
52:50 - little account there's already something
52:53 - there so I need to put it somewhere else
52:54 - right it's kind of like saying um oh
52:57 - there's already a lance Avatar uh that
53:00 - exist if I put a 1 here we'll put it
53:03 - there instead but what if that'll exist
53:05 - and we'll put another one here or a 2
53:07 - right that's what bump is doing it's
53:09 - checking the next available address that
53:12 - it can do
53:13 - all right I'm very simplifying this but
53:15 - that's all you need to know for now and
53:17 - all of that information is related to
53:20 - this master right here and what type can
53:23 - we expect from Master well it's an
53:25 - account right because we want to
53:26 - initialize
53:27 - an account right
53:30 - right and again if you didn't know where
53:31 - a cow comes from it comes from anchor
53:33 - length so all of our Imports are
53:34 - important and how long does this account
53:37 - live for I don't know we're going to put
53:39 - info here comma Master right master
53:44 - is essentially what this account is what
53:46 - account is this holding what's in this
53:48 - account a master account
53:51 - but if I were to run this guys it
53:53 - doesn't exist right how do we make it
53:55 - exist well we have to create it so let's
53:58 - create a master account
54:01 - all right so to make a actual account
54:04 - right we need to Define what a master
54:07 - account is and I kept calling an object
54:09 - because that's what you guys coming from
54:10 - JavaScript are going to relate to so put
54:12 - hashtag account like so and then you're
54:15 - gonna write Pub struct Master like this
54:19 - and you say
54:20 - uh Pub last
54:23 - last ID
54:26 - is u32
54:28 - okay
54:30 - cool
54:32 - all right that's it we're done we made
54:34 - an object right so what's the equivalent
54:36 - of this um you can kind of say like uh
54:39 - master or class master
54:42 - uh is something like this
54:45 - Constructor it's been a while since I
54:48 - made this right this dot last ID
54:53 - is equal to like nothing or empty right
54:57 - I made what would this make right this
54:58 - would make a object
55:02 - that has a last ID
55:06 - right so this class Master The Struck
55:09 - Master will make an object that has last
55:12 - ID and does this have a value
55:15 - no has no value it
55:17 - so
55:19 - we need to basically initialize it with
55:21 - a value later
55:22 - okay so cool
55:24 - I hope this makes sense because we're
55:26 - going to be doing this over and over
55:27 - like anchor once you recognize the
55:29 - pattern it's pretty repetitive so keep
55:31 - that in mind so now Master exists
55:34 - um don't think there's anything else we
55:35 - need to add but how much space does a
55:38 - u32 take it's going to take in four
55:41 - so that's why for how much space we say
55:43 - hey there's going to be a master account
55:45 - that's coming in
55:47 - uh he he's gonna take up this much space
55:50 - for
55:51 - and this eight is kind of like the
55:52 - filler space this is called the account
55:54 - discriminator so you always see me add
55:56 - eight to all everything
55:58 - okay cool another thing that we're gonna
56:01 - need is we're going to say hashtag uh
56:04 - oops
56:05 - account mute
56:08 - Pub pair oops Pub
56:11 - pair
56:14 - is gonna be the signer and this signer
56:17 - struct is coming from a library as well
56:20 - this is so that we can Define what a
56:22 - pair is so that the pair does actually
56:24 - in fact equal the pair
56:27 - okay then you can add some space here
56:28 - and say Pub System Program is the
56:32 - program itself
56:34 - info
56:35 - system right
56:37 - cool and don't forget to add these
56:39 - commas here because they're kind of
56:40 - important
56:42 - all right so if it looks like this
56:44 - we should have our contacts
56:47 - and again I put an underscore context
56:49 - because we're not really doing anything
56:50 - with it
56:51 - it's going to be blank
56:53 - and we should be good to go so let's do
56:56 - the moment of truth
56:58 - right we can go to build and let's run
57:00 - it so we build uh there might be some
57:02 - errors as you can see
57:05 - all right so usually if you see a bunch
57:07 - of things it might be uh something to do
57:11 - with the the first one so it says
57:15 - program not found in the Master Okay
57:17 - cool so let's figure out what's going on
57:21 - I'm guessing has to do with the
57:23 - semicolon or something I forgot
57:26 - so I'm taking a look around
57:28 - [Music]
57:29 - and the first error is expecting a comma
57:33 - line 27.
57:36 - comma oh I see there's no comma right
57:38 - here cool
57:42 - so let's go ahead click this brush thing
57:44 - to clear it out let's hit build
57:46 - okay more stuff
57:49 - now it says something wrong with uh init
57:52 - master
57:54 - okay
58:02 - I have a feeling it's another comma
58:04 - thing come on comma
58:06 - there's one right here
58:08 - build
58:10 - hey okay build successful cool someone
58:12 - press this brush let's build again so
58:14 - you can see the successful build
58:16 - awesome so
58:18 - I forgot a comma right here now it's
58:20 - good all right if you see uh warnings
58:23 - that doesn't mean it's not working it's
58:25 - just a code warning you like hey um you
58:28 - imported a clock but you didn't really
58:30 - use it yet right but that's okay we can
58:32 - live with the warnings because
58:33 - eventually we will use those clock okay
58:36 - so other than that we're good to go so
58:40 - all you have to do if you haven't done
58:41 - so already if you're your first time
58:43 - using Solana playground connect your
58:44 - wallet here I don't know why the brush
58:46 - is really big
58:47 - but click this toggle Solana wallet
58:50 - button once you do it it should say
58:52 - connected right uh if you didn't know
58:55 - this browser already comes with a wallet
58:56 - so you don't have to connect your
58:57 - Phantom but you can if you want to right
59:00 - but if you want to deploy use this right
59:02 - here
59:02 - you probably don't have any Solana
59:04 - either so all you should do is uh go
59:07 - into your terminal
59:09 - and type in Solana airdrop two all right
59:13 - this is the same thing as the Solana
59:15 - faucet it will give you two to deploy
59:17 - all right cool
59:20 - so again what's happening right now well
59:22 - essentially uh we made a smart contract
59:24 - all right we want to deploy it to the
59:27 - blockchain so that we can call it from
59:30 - the blockchain back to our app all right
59:31 - so what step are we in we did this part
59:33 - we wrote some code like this right and
59:36 - now let's deploy it let's exit this dice
59:39 - bear
59:40 - deploy
59:43 - and it usually takes a couple seconds
60:01 - nice okay deployment successful there we
60:04 - go
60:05 - cool so what does this mean now it means
60:07 - our code successfully lives on the
60:10 - blockchain now
60:11 - right so now that's the thing
60:14 - we can test it
60:16 - so the cool part that I like about
60:18 - Solano playground
60:19 - um is that if you click this test tube
60:21 - right here we can test all of the
60:23 - functions that we create so that we can
60:25 - get a better understanding of it
60:27 - now
60:28 - one thing you'll notice to start
60:30 - understanding this is we have some
60:32 - accounts right it recognizes hey it's
60:34 - going to create some master accounts but
60:37 - if I ask you since we just deployed it
60:38 - to the blockchain how many Master
60:40 - accounts do we have I'll give you guys
60:42 - three seconds three two one ding ding
60:46 - ding if you said the answer is zero if
60:49 - that's all you are correct right you can
60:51 - fetch all the accounts that we created
60:53 - with this program and you'll notice that
60:55 - there's an empty array which means
60:57 - there's no Masters how do we create a
60:59 - master account well remember that we
61:03 - initialize it in this context but we
61:05 - have to run
61:07 - that function so we need to do init
61:09 - Master Okay so let's run it
61:12 - but we can't just run it we need to pass
61:13 - in some things right see how it says
61:16 - accounts here
61:18 - all of this is equal to the context this
61:22 - is our context right what we're going to
61:23 - give our function some information right
61:26 - so
61:28 - the accounts that we need to give to our
61:30 - function is a master account and a payer
61:32 - account
61:33 - so let's scroll down where is Master and
61:35 - pair coming from how does it know well
61:37 - if you look at our e-nit Master context
61:39 - what are the what's there a master a
61:42 - payer and a system program Master payer
61:46 - System Program and if I remember what I
61:49 - told you guys let's start with something
61:50 - easy
61:52 - I told you guys that the payer is us so
61:55 - if you click this click my address
61:56 - that's us 6D if I click this wall here
61:59 - 16. that's my address it's going to be
62:01 - different than yours make sure you click
62:03 - my address the system program is going
62:05 - to be all this ones right because that's
62:07 - going to be default it's going to be set
62:08 - up for you already you typically uh at
62:11 - least when we're on this browser don't
62:12 - have to write anything
62:14 - now for the master
62:16 - you basically have to tell your function
62:18 - hey where are we putting
62:21 - this master account right remember where
62:24 - are we putting this master account
62:25 - right
62:26 - are we gonna put it oops not that one
62:29 - we're gonna put it
62:31 - um here and this rectangle this
62:34 - rectangle this rectangle how does it
62:36 - know well we can predict it uh by using
62:39 - our seeds
62:41 - all right so what is our seeds
62:43 - well if you look in our seeds we need to
62:45 - just say Mass our seeds is the master
62:47 - seed what is Master seed it's just a
62:50 - shrink master
62:51 - so what does that look like click in
62:53 - this input field click generate a public
62:55 - key from seed and make sure it's string
62:58 - it usually is and all you guys have to
63:00 - do is write master
63:02 - generate boom that's it right see the
63:07 - 7rx that's the C that generates from us
63:10 - writing master
63:12 - right
63:13 - so
63:14 - that's the place we're gonna put it so
63:16 - if I press test
63:18 - it should create a master account
63:21 - let's go with past all right that's a
63:22 - good sign
63:23 - so a pass which means we initialized
63:26 - master account how do we know if I do a
63:28 - fetchall
63:30 - boom there it is in this array there is
63:32 - one object with two properties one the
63:36 - public key on where it lives and also
63:39 - the account with blast ID
63:43 - all right how's that
63:45 - also by the way it says the ISD is zero
63:48 - so when we first start the first Lottery
63:50 - should be zero
63:53 - cool so I hope it made sense every time
63:55 - we make these functions if you're
63:56 - confused at all wait till I test it
63:58 - right testing is the key here so this is
64:02 - level one we're only going to increase
64:04 - the levels it's gonna be just like this
64:05 - but we're gonna add another layer to it
64:07 - so if you guys are with me drop a like
64:09 - in the video put a comment below say
64:11 - that I'm helping you out Solano is
64:12 - awesome right also shout out to atcharon
64:15 - he's a developer who made this website
64:17 - that helped me learn Solana so let's
64:19 - keep it moving
64:21 - all right so I think you guys get the
64:23 - idea time for the next function all
64:26 - right so another function that we need
64:27 - to make is we made the master let's
64:31 - create the lottery All right we need to
64:34 - set up the lottery right if we go back
64:35 - to our app what happens let's refresh
64:37 - this real quick what happens statically
64:40 - at the moment we connect our wallet we
64:41 - initialize the master and then we can
64:44 - create the lottery right because if we
64:47 - don't create the lottery
64:48 - what are we even playing right so we got
64:51 - to do that so let's create the lottery
64:52 - how do I create a function well you say
64:56 - Pub FN
64:57 - name of function which is create Lottery
65:00 - cool what else parentheses Arrow
65:05 - result
65:07 - boom and then after the result curly
65:10 - brackets this is your function
65:13 - you guys know who copy is from tick tock
65:16 - that's a function okay so from there
65:19 - let's go ahead and write CTX because we
65:21 - need context right and then what is
65:24 - context what type is it what context is
65:27 - context oops don't write it like that
65:29 - right like this context
65:31 - and what kind of context are we
65:34 - expecting uh we're expecting a create
65:37 - Lottery context and if I were to ask you
65:40 - guys does this exist yet you have to say
65:43 - no no Lance it doesn't exist so what do
65:46 - we do next let's create the lottery
65:49 - right
65:50 - and again
65:52 - um the whole point of this is so let's
65:54 - write what we want to do right we need
65:56 - to create a Lottery account right
66:01 - so what do we want to do this what is
66:03 - the Lottery account before we go any
66:05 - further well Lottery account
66:07 - it's going to hold
66:09 - the current
66:11 - let's ask the question what is a Lottery
66:15 - account
66:17 - well the answer to that is it holds
66:20 - the ID
66:22 - uh the winner
66:25 - the winning winning
66:29 - address right whatever address wins the
66:33 - total prize
66:35 - right
66:37 - and sorry about that let's make this
66:39 - smaller the total prize and it also
66:42 - holds I'm thinking
66:44 - um oh
66:45 - if the price was claimed
66:51 - and
66:52 - who has Authority
66:56 - over the lottery right Authority is
66:59 - basically who controls the lottery who
67:01 - created it
67:03 - all right so that means uh in short
67:05 - there is a lot of things that we care
67:06 - about in this Lottery okay so we need ID
67:09 - the winning address the total prize if
67:12 - the prize was claimed and who has
67:15 - uh authority over the lottery okay
67:18 - you guys got all that cool so uh we
67:21 - can't do anything here just yet because
67:23 - we need to create the context so let's
67:25 - go ahead and do that
67:26 - so we can go ahead and create the
67:28 - context and how did we start last time
67:31 - this is why it's repetitive
67:32 - we have to start with that all right
67:34 - say hashtag
67:36 - square brackets derive
67:39 - accounts
67:41 - Pub struct
67:43 - create Lottery and this is the last time
67:45 - I'm going to be writing it and typing
67:47 - myself I'm going to show you guys how to
67:48 - use the shortcuts
67:50 - okay so create info
67:52 - great Lottery and then put info put
67:55 - these code brackets to identify the
67:58 - scope
68:00 - cool so let's set up another account
68:03 - macro here
68:05 - and before I move on all of the
68:07 - information that comes in here is going
68:08 - to be coming
68:09 - to the lottery because we want to Define
68:11 - what a Lottery account is okay cool oops
68:15 - so
68:17 - how do I initialize an account
68:20 - you're right in it
68:23 - how do I Define who the payer is last
68:26 - time we put payer right but the
68:29 - difference between this the master and
68:31 - the lottery is that there's an authority
68:34 - so who the payer should be Whoever has
68:37 - authority over this and again just like
68:39 - how payer
68:41 - was a variable that we made later
68:43 - Authority is going to be a variable we
68:47 - make later as well so let's go ahead and
68:49 - not forget the commas this time and for
68:52 - space leave this blank for now uh for
68:55 - seeds though
68:56 - put that array
68:58 - what did we do last time we had a
69:00 - variable that holds a string we can do
69:02 - the same thing we don't want to put
69:04 - Master C because that would generate the
69:05 - same PDA we want to put Lottery seed
69:09 - all right and this Lottery seed exists
69:11 - no but that's okay we can make it so
69:13 - let's say Pub cost Lottery seed
69:17 - make it exactly the same thing which is
69:20 - a referenced string and we say uh
69:25 - Lottery
69:27 - okay
69:28 - wonderful wonderful
69:30 - so Master Lottery
69:32 - I think we're good with that cool so lib
69:36 - boom so a lottery seed but we also need
69:39 - to turn this into bites right so let's
69:41 - turn to bites as
69:43 - bites
69:45 - boom cool
69:48 - and we can do comma bump
69:51 - before I do anything else but one thing
69:53 - I want to say is for the creating a
69:55 - lottery
69:56 - we should have more than one seed right
69:59 - because the more seeds we put into this
70:01 - right the more uh unique of a PDA we can
70:05 - generate
70:07 - okay and again we're not making new
70:08 - addresses all these addresses exist
70:10 - already right but we just want to make
70:12 - sure we select uh a predictable one
70:15 - right so
70:16 - right now the only seeds is the lottery
70:18 - seed which just says Lottery
70:20 - we can also put a comma here to add more
70:23 - and we can say
70:25 - um we can do master dot last
70:29 - ID right so what's mastered that last ID
70:33 - let's look at this Mass this is master
70:37 - right this account dot last ID gives us
70:40 - zero right when our Lottery is at one
70:44 - technically the seed will be at one
70:46 - all right so let's do that
70:48 - and again when we create a lottery we
70:51 - need to add one to it so that's why it's
70:53 - whatever the last ID is plus one so
70:55 - technically uh if this is zero this will
70:57 - give us one
71:00 - okay
71:02 - and uh we want this to be formatted the
71:05 - way it can read it so let's say 2 L E
71:08 - bytes
71:11 - awesome cool
71:13 - so now we have some jack seeds in here
71:16 - we have the string and essentially the
71:19 - number right of plus one as our seeds
71:23 - and that's going to help generate the
71:25 - Lottery account so again what type is
71:28 - Lottery well it's an account
71:31 - you can say lifetime his info and what
71:36 - type of account it's a Lottery account
71:38 - but this Lottery account exist
71:40 - the same way Master did before no so
71:43 - let's make it and again to make it same
71:46 - structure account Pub
71:48 - struck
71:51 - Lottery
71:54 - and now let's define the object what do
71:56 - we need for the lottery right just in
71:58 - case you forgot we wrote it all down it
72:00 - needs an ID
72:01 - the winning address the total prize if
72:04 - the prize was claimed and who has
72:06 - authority over the lottery and again it
72:09 - doesn't necessarily have to be in that
72:10 - order
72:10 - so let's write it down Pub ID cool so
72:15 - I'm saying hey every Lottery account
72:16 - will have an ID
72:18 - then your code's like hey uh Lance
72:20 - what's the type of that though well it's
72:22 - gonna be you 32 and if you didn't know
72:25 - u32 means unsigned integer 32 bytes
72:29 - right uh if let's say the way I
72:32 - understand is that if you do u8 that's a
72:34 - small number but if you it's like if
72:37 - it's like 900 you it's not a good number
72:40 - uh type to put you should put 32 because
72:42 - I feel like that's going to be a no
72:45 - okay let's put Authority right who has
72:49 - Authority it should be the person who
72:51 - created it so what we could do is write
72:53 - something called a pub key because the
72:56 - authority
72:58 - is going to be whoever created it in
72:59 - this case it's this address which is a
73:01 - type public key
73:04 - okay with me cool so this the rest of
73:07 - this should make more sense
73:09 - Pub ticket price is next
73:13 - okay so this one I forgot this isn't the
73:15 - total
73:16 - um
73:17 - it's got total prize it's
73:19 - it's the ticket
73:21 - cost or how much does each ticket cost
73:24 - what's the price okay and for this one
73:28 - we can say u64 because I wanted to give
73:30 - us a range of numbers we can use a
73:32 - bigger range than however numbers ID can
73:35 - go up to so 64 bytes
73:38 - okay
73:39 - cool so u64
73:41 - we also need the last
73:44 - ticket ID
73:46 - right which will be u32
73:49 - and uh before I move on just so you know
73:52 - there's a difference between a lottery
73:54 - and a ticket duh right so every time
73:57 - there's a lottery we can purchase a
73:59 - ticket right we should also keep track
74:01 - uh how many tickets there are so if the
74:05 - last ticket number was Zero
74:07 - the next one should be one the last one
74:09 - was one it should be two right because
74:11 - what later when we picked the winner
74:13 - we're gonna select
74:15 - a random Lottery ID
74:17 - and figure out what the pub key
74:19 - associated with that idea is
74:22 - cool
74:24 - that was a different language to you
74:25 - just now don't worry about it
74:28 - cool so later on we want to establish
74:30 - who the winner ID is and the type of
74:32 - this is pretty interesting it's called
74:33 - an option
74:34 - right
74:36 - option
74:37 - okay this is unique uh to Rusty like
74:41 - you've never seen this before in
74:42 - JavaScript but make sure it's type
74:43 - option
74:44 - and claimed right I want to want you
74:47 - guys to answer this claimed what does
74:49 - that mean
74:51 - did the winner
74:53 - claim the prize
74:56 - right
74:58 - did the winner claim the prize
75:00 - what kind of type should that be
75:02 - I'll give you three seconds three two
75:05 - one did you guess it it's gonna be a
75:08 - Boolean so to make a Boolean type say
75:10 - Bool
75:13 - awesome Okay cool so we made the Lottery
75:15 - account
75:18 - that's that's it there you go there's
75:20 - the account the context is almost done
75:23 - we just need to put Pub Authority well
75:27 - actually we need the macro first account
75:29 - mute then we can put the macro I mean
75:32 - the authority and say Pub
75:35 - Authority is the signer right so again
75:40 - um this is just the naming of it it's
75:42 - the same thing as what we did with payer
75:43 - but this time
75:45 - it's a tour
75:46 - okay you can put pear if it's too
75:48 - confusing
75:49 - cool and last one we need is System
75:51 - Program all right again you could copy
75:53 - and paste this because again
75:56 - same thing
75:58 - cool so that's a lottery Moment of Truth
76:02 - we hit build cross our fingers
76:05 - okay of course we forgot forgot
76:07 - something
76:10 - uh there's our warning
76:12 - the first arrow is info is never used
76:15 - line 52 create Lottery okay
76:18 - cool so 30. oh how can I forget I said
76:21 - we're gonna come back to space but
76:23 - freaking didn't come back to space all
76:25 - right so basically to determine how much
76:27 - space you're gonna use
76:29 - um each of these things each of these
76:31 - types will take up a unique amount right
76:35 - uh one way to think about it is that u32
76:37 - will take four right so how many u32s do
76:40 - we have uh we have about three so that's
76:43 - how much space it's gonna take so you
76:45 - say four well we can do the four
76:49 - plus 32 Plus
76:52 - 8 plus oops eight plus
76:56 - we have
76:59 - four
77:01 - plus four plus one plus four plus one
77:07 - all right cool
77:09 - cool yeah u32 is going to be for the 64.
77:12 - this 8 here I'm gonna put at the end
77:19 - 32.
77:21 - plus oh we actually do need eight
77:26 - now I'm thinking about it so we have 4
77:28 - 32 841
77:32 - 41 and then the account discriminator so
77:35 - yeah all of this is how much space the
77:37 - lottery takes
77:40 - um
77:42 - there's something weird though
77:46 - this should be highlighted the same way
77:48 - this is highlighted
77:49 - so that's pretty weird
77:52 - oh there should be a comma here
77:56 - it's the first thing
78:00 - oh and there should be a comma here and
78:02 - there we go so now I could tell this
78:04 - time the error is because of the colors
78:05 - so let's see if we build
78:10 - okay cool
78:12 - right so again we're kind of gonna error
78:14 - because the function's not done so we
78:17 - have our context create Lottery we have
78:20 - our struct or our count lottery
78:23 - we need to use it so again this is
78:25 - different from a knit Master because we
78:27 - didn't do anything here here we can
78:29 - actually we should write stuff
78:33 - so when we're creating a lottery
78:35 - right
78:36 - let's make this smaller when we want to
78:38 - but we want to do with this function is
78:40 - initialize
78:42 - the account right basically give values
78:46 - to this because this should have the
78:48 - last ticket ID and so forth so forth
78:50 - right
78:54 - another thing about it we might be
78:55 - missing one more thing
78:58 - foreign
78:59 - missing anything for your lottery
79:03 - oh we are we also need access to this
79:07 - master account right
79:10 - or the master account that's associated
79:12 - so just like how we initialized it here
79:15 - like this
79:17 - we can bring it in our code right here
79:19 - we can say hashtag
79:22 - count all right oops and say mute
79:26 - because it can be different
79:27 - seeds right so remember how in the
79:31 - master we were able to generate the
79:35 - corresponding Master based on the seed
79:39 - we can do that here as well by saying
79:41 - Master seed bytes
79:43 - all right so this should give us the
79:46 - same
79:47 - master I could say Pub master
79:51 - tell him what type it's gonna expect an
79:53 - account
79:56 - info
79:58 - Master cool I couldn't forget that seeds
80:02 - uh and we can just do bump
80:05 - and again we don't need to initialize
80:07 - here or tell them how much space it
80:10 - needs because we already set it up
80:12 - earlier or it should be done by the time
80:14 - we can create a lottery
80:17 - so we have access to the Lottery account
80:19 - we have access to the master we have
80:21 - access to Authority and the system
80:23 - program so we need to we all of that all
80:26 - what I just said exists when I write CTX
80:29 - okay
80:31 - so how do we use this let's think about
80:34 - so CTX is essentially all of this right
80:39 - when it's kind of like an object so how
80:41 - do I get the lottery
80:42 - right so to get the lottery
80:46 - I'll just type in ctx.accounts
80:49 - right and once you do dot accounts after
80:51 - CTX
80:53 - you have access right keyword access and
80:56 - I put a comma here comma that's good
80:58 - access to Lottery to master Authority
81:03 - and System Program so let's say I wanted
81:05 - the authority all to do is
81:07 - ctex.accounts.authority
81:09 - all right but which one did I want I
81:11 - want the lottery so if I say dot Lottery
81:14 - now it's the same as
81:17 - um getting the lottery object all right
81:20 - so I've accessed all this stuff
81:23 - what I like to do is set it equal to a
81:25 - variable so you can say let Lottery
81:29 - is equal to all that
81:31 - okay so now when I say Lottery dot uh
81:35 - is CL like what's called last ID right
81:39 - you know what I'm talking about now yeah
81:41 - or better yeah Lottery lottery ID I can
81:44 - set this equal to zero I can hard code
81:46 - it I can even set it to three or four or
81:50 - five
81:50 - all right
81:51 - another variable I want to set up is let
81:54 - master and do I have access to the
81:56 - master accounts
81:58 - yes I do that's why I set it up
82:00 - so if I do
82:01 - CTX
82:04 - I can do dot accounts
82:06 - and then I could do not matched
82:08 - start a nap here cool
82:12 - um so what do we need to do well the
82:14 - first thing I like to do is
82:16 - remember when you make a master account
82:20 - oops I want to make a master account
82:22 - it's
82:24 - only keeping track of the last lottery
82:26 - ID right
82:28 - so when we create a lottery
82:31 - we should increment
82:33 - so we can increment that really easily
82:35 - by saying master dot last ID
82:40 - plus equals one this is Javascript or we
82:43 - know this how to do this in JavaScript
82:44 - it's the same thing
82:45 - right
82:47 - increment the last ticket ID and again
82:51 - uh if you're more advanced you know how
82:54 - to do this if you switch the
82:58 - branch on the repo it's from CLI star to
83:01 - main I've included the solution so you
83:03 - can compare it to that as well okay so
83:06 - move on right ahead if this makes sense
83:07 - to you if you're a beginner don't worry
83:09 - stick with me you'll learn cool so we
83:12 - increment the last ticket ID
83:15 - next we want to set the lottery values
83:18 - right so currently
83:22 - lottery.id is empty but what should it
83:24 - be
83:25 - all right should it be zero should be
83:27 - one two well it should be whatever
83:30 - master that last ID is
83:33 - so if you know if you know you can say
83:36 - master that last ID like this
83:40 - okay you're literally pulling it from
83:42 - here so we incremented it it was Zero
83:43 - now it's one and now I'm saying the
83:45 - first Lottery the ID is one so if you
83:48 - were to reflect that here technically
83:49 - the first number would be one two three
83:52 - okay
83:54 - cool
83:55 - next thing you want to do is who is the
83:57 - authority so we say lottery.authority
83:59 - well the lottery that Authority
84:02 - should be us
84:04 - but do we have access to that
84:06 - we do
84:07 - all right so go back to your context
84:08 - check if we do
84:10 - we have it right here so how do we get
84:12 - this
84:13 - think for a second so I want to try this
84:15 - on your own three
84:17 - two one
84:19 - all right
84:21 - if you said to get the authority you say
84:23 - CTX
84:25 - dot account
84:27 - dot Authority you're correct but it's
84:30 - not um a public key or not in the format
84:32 - that you want right now what you want to
84:34 - do is dot key and there you go you got
84:37 - it now so that's the authority
84:39 - okay
84:41 - next thing you want to do is
84:42 - lottery.ticket
84:44 - price all right how much does
84:48 - ticket price cost hmm
84:51 - well this one
84:53 - do we have any information about that
84:56 - no we don't
84:58 - right how much does each ticket cost on
85:01 - this last specific Lottery right we can
85:04 - pass that in as a variable or parameter
85:07 - so we can write a ticket here
85:10 - and let's see do you want to do anything
85:12 - yeah ticket prize
85:15 - and this can be a u
85:18 - 64.
85:20 - all right so this takes in two arguments
85:22 - the context which it always does and
85:24 - ticket price so technically it takes one
85:26 - plus the context
85:28 - okay so then we could take this argument
85:31 - and use it right here ticket price
85:35 - ticket price
85:40 - amazing okay cool battery dot ticket
85:42 - price
85:44 - cool
85:46 - uh one cool thing is that we can add
85:48 - messages
85:49 - all right I imported this library and
85:51 - say created
85:53 - created
85:56 - lottery or create Lottery
86:00 - it's kind of like when you see a message
86:01 - like this think of it like console log
86:03 - in JavaScript I'm basically saying
86:07 - um hey
86:08 - this is the created Lottery which is
86:12 - gonna be Lottery
86:15 - dot ID
86:17 - okay uh the reason I write it like this
86:19 - is because if I say Lottery ID here it's
86:21 - going to go where this curly bracket is
86:23 - so basically say create a lottery is it
86:25 - one
86:27 - okay another message
86:29 - the authority
86:32 - right so how do I Define what the
86:33 - authority is Curly brackets comma
86:35 - Lottery Dot
86:38 - story
86:40 - nice
86:42 - and we can also let them know what the
86:44 - message is and I forgot every message is
86:45 - exclamation point like this the bang
86:48 - and the ticket
86:50 - price
86:54 - colon curly bracket and let's fill in
86:58 - that quarter curly bracket with
86:59 - lottery.ticket
87:01 - how do we get the ticket price ticket
87:04 - price
87:05 - okay
87:07 - it's when I said okay because that's
87:08 - what we need next
87:11 - all right that was a bigger way bigger
87:13 - function than internet Master yeah guys
87:16 - well but this is what we need to do to
87:18 - create a lottery
87:20 - first simplify the context into
87:22 - variables increment the last ticket ID
87:25 - set the values and again optional but we
87:28 - can write little messages here so let's
87:30 - take a look clear that go to build
87:35 - got one
87:37 - is this an error
87:41 - could not compile
87:48 - results found okay
87:51 - let's see what's going on
87:57 - let's make this smaller and let's take a
87:58 - look
88:00 - [Music]
88:02 - I wanted to see this again
88:05 - ticket price ticket price
88:09 - oh I brought ticket prize
88:13 - but it should be ticket price okay that
88:15 - was my final prize here but it should be
88:16 - price
88:18 - I think
88:20 - what did I put here
88:21 - ticket price okay let's build
88:28 - ah
88:29 - another important lesson
88:32 - okay
88:33 - so if we go back here
88:35 - [Music]
88:36 - one thing I forgot is that in Rust
88:39 - we can't just say equals this if we're
88:42 - going to change it right remember const
88:43 - in JavaScript right we can't change
88:45 - variables that say const and rust it's
88:47 - even more strict because if we want to
88:49 - change a let right get the same and mute
88:53 - all right so let's make sure we add the
88:54 - end mute
88:55 - because this means I'm making this
88:57 - variable mutable and that it can change
89:00 - otherwise it's going to assume that it's
89:02 - going to stay that way
89:04 - let's go build successful all right so
89:07 - let's clear that let's show you again
89:11 - nice again warnings totally fine right
89:13 - now I'll use the clock I'll get to it
89:16 - but there we go
89:18 - um I'll ask you guys this we
89:20 - deployed our smart contract on chain
89:22 - right but when I add new code am I
89:26 - writing that on chain yes or no am I
89:28 - right in here no essentially uh we still
89:31 - have our copy here and we wrote that
89:34 - first function
89:35 - but we just wrote a second function
89:37 - right we want to upgrade this contract
89:39 - all right the cool part about Salon is
89:41 - that you can upgrade it usually when
89:43 - it's on a blockchain you can't delete
89:45 - stuff or uh rewrite stuff but we can by
89:48 - pressing this upgrade button and this
89:50 - will cost you so some soul so make sure
89:52 - you airdrop yourself a lot of soul I
89:54 - think this should be enough for me
89:56 - and once that's done
89:58 - we run the test again and this is the
90:00 - process
90:02 - you create you figure out what you want
90:04 - to do create the function create the
90:07 - context get what you need in that
90:09 - context
90:11 - and you're good to go right so you can
90:12 - make any function this way I encourage
90:14 - you guys to try it make your own
90:16 - projects test this out learn from this
90:18 - right we have the create Lottery
90:20 - function now
90:21 - so again currently
90:24 - if I fetch all we still should have one
90:25 - even though I upgraded it I didn't make
90:27 - a new smart contract I still have the
90:30 - same address and this is still a account
90:33 - made with this from this address right
90:36 - but do we have any lotteries
90:39 - no I have none
90:41 - let's walk through the hypothetical
90:43 - if I create a lottery object right a
90:46 - Lottery account that should be filled up
90:48 - but does this get changed yes or no
90:51 - yes right the last ID gets incremented
90:55 - right right how we did it right here so
90:58 - let's put my theory to the test right
91:00 - we need to put a ticket price
91:05 - cool so let's determine how much each
91:09 - ticket will cost for this Lottery right
91:11 - in an ideal world uh we could just put
91:13 - five it costs five Solano to enter the
91:15 - lottery
91:16 - but
91:17 - um when we're testing this it should be
91:20 - in what we call Lamp ports right so what
91:22 - are lamp ports well you know the native
91:24 - token for Solana is sold right well if I
91:27 - say lamp ports lamp ports is a fraction
91:30 - of Soul right so a bunch of land ports
91:33 - like a lot of lamp ports will create one
91:35 - Soul right so let's say I want to make
91:38 - this Lottery cost one soul right to do
91:43 - that you would write zeros nine zero
91:46 - zero zero zero zero zero zero zero zero
91:48 - zero and you put how much a soul right
91:52 - here so if I put five this will be
91:54 - technically five Solana
91:56 - but for the sake of how much longer I
91:58 - have I only have 5.8 in this wallet put
92:01 - one
92:02 - okay
92:03 - cool
92:04 - now again let's do the easy stuff first
92:07 - we did the arguments right right here
92:09 - what accounts do we put in this is
92:12 - coming from where guys the context all
92:14 - right we need to find the mass well not
92:16 - this one we need to find the
92:18 - Lottery the master the authority and the
92:22 - system program system programs done for
92:24 - us but who has the authority who's
92:27 - paying for this me my address
92:30 - the master do I need to generate a
92:33 - public key from seeds or should I do I
92:35 - have something already
92:37 - I do I already have a master right here
92:39 - so go to the public key double click
92:42 - this Ctrl C or command C and paste that
92:45 - right there right this is the master
92:47 - that we're gonna base off
92:49 - to create the lottery
92:51 - all right so now for the Lottery account
92:53 - does a Lottery account already exist yes
92:56 - or no
92:57 - all right you should say no here
92:59 - y doesn't exist because we generate a
93:02 - lottery count from the seed all right so
93:04 - let's do it from seed so the first thing
93:06 - is Lottery
93:08 - all right and the next is uh whatever
93:11 - the master's last ID is plus one right
93:15 - so you select that right it's gonna be
93:18 - in u8
93:19 - should be
93:24 - and actually as I think about it let's
93:26 - remove that
93:28 - let's add a u32 here
93:31 - why do I want to add a u32 here is
93:33 - because
93:34 - um it's expecting a u32 anyways all
93:37 - right so let's keep it consistent and
93:40 - what is the master's last ID let's check
93:44 - it's zero but the trick here the gotcha
93:47 - is this plus one so what's zero plus one
93:49 - guys
93:50 - yep thank you it's one good job Sarah
93:53 - all right so now we generate Bulma
93:56 - calculates the public key
93:58 - we got the master right and if we wrote
94:00 - everything right the test should pass
94:03 - let's go all right I'm always a little
94:05 - nervous when I run the test because
94:06 - maybe I wrote something wrong as you saw
94:08 - before but the current lottery passed
94:11 - right
94:12 - so when I fetch this how many accounts
94:15 - should we have
94:16 - boom one right so notice something
94:20 - remember how we defined the winner ID to
94:22 - be option right it's either going to be
94:23 - null or it's going to have an actual
94:26 - winner here right but we need to create
94:28 - a winner function first in order to see
94:31 - that in action right and again this
94:33 - doesn't cost like a million dollars this
94:35 - is equivalent to one Solana we're gonna
94:38 - make that conversion later right because
94:40 - again this is in lamp ports right
94:42 - fractions of soul okay so it should be
94:45 - one Soul who has Authority right this
94:48 - guy has Authority and what does that all
94:50 - that means is
94:52 - um he can pick the winner right because
94:54 - it'd be weird if other users can pick
94:55 - the winner
94:56 - the idea is one
94:58 - and now my question to you guys if I get
94:59 - the master if I fetch this what should
95:01 - this last Knight D be now
95:03 - it's one
95:04 - cool so how many lotteries we have
95:07 - ongoing uh currently one right and it
95:10 - won't be ongoing until we have a winner
95:14 - and they claimed the lottery
95:16 - cool so that's the create Lottery
95:18 - function
95:20 - all right so let's continue on so we
95:23 - just made the create Lottery button but
95:25 - what other functions that we want to
95:26 - make guys all right let's think back to
95:29 - the demo what did we do right we
95:33 - connected our wallet
95:35 - we initialize we can initialize the
95:37 - master we can create a lottery but we
95:40 - also need to enter when we talk about
95:42 - enter I mean let's purchase a ticket
95:45 - and
95:47 - add to the pot right so if every ticket
95:50 - costs one Soul after I press enter which
95:53 - should the pot be now
95:54 - 1001 exactly okay so with that in mind
95:58 - we need to create that functionality all
96:00 - of our functionality is coming from the
96:01 - smart contract right you know it's
96:03 - different from when if we were to make
96:05 - this in just pure next JS we would put
96:09 - all that functionality there it'd be
96:11 - really easy right for us we're just
96:13 - going to say Pub have fun
96:15 - okay we say bye underscore ticket
96:19 - because that's the function name and
96:21 - excuse me let me just move that over by
96:23 - ticket
96:24 - set up the function
96:29 - cool
96:31 - and what else do we need guys we need
96:33 - context so let's say CTX and this is the
96:36 - last time writing about this function so
96:38 - CTX
96:39 - context
96:41 - what is the context it's the buy ticket
96:44 - one
96:45 - okay
96:46 - um I'll let you know right now this buy
96:48 - ticket is going to take in the lottery
96:51 - ID right what
96:53 - Lottery are we buying a ticket for
96:55 - that's why we need this
96:57 - okay cool that's set up we need to set
97:01 - up the context now so let's go scroll
97:03 - down to the bottom
97:05 - and create that context
97:09 - all right so you want to buy a ticket
97:10 - how do we start well we can go and say
97:14 - dot Drive
97:17 - accounts thrive
97:20 - accounts
97:23 - you can say hashtag this is kind of new
97:26 - we it's an actual instruction so we say
97:29 - instruct
97:30 - shown parentheses we want to pass in the
97:34 - lottery ID
97:38 - type u32
97:41 - okay and then underneath that we say Pub
97:44 - struct by ticket
97:48 - okay what do we put here info
97:52 - and curly brackets we are in business
97:55 - boys so from here we want to create that
97:59 - account right
98:01 - so the first thing I want to get is this
98:03 - so maybe this will make more sense we
98:05 - for when we buy a ticket what context do
98:08 - we need well we should know what the
98:10 - lottery is right if we need to pass in
98:12 - the lottery ID uh we should know
98:16 - the ticket right so that means we have
98:19 - to create an account we should know
98:22 - um the buyer right buyer and this one's
98:27 - always here but we need the pub System
98:31 - Program okay
98:34 - so this is all the context we need we
98:36 - need to get all of the context and the
98:38 - first way to get uh the lottery is to
98:42 - write this account thing again
98:43 - and my question to you guys is do we
98:45 - need to initialize it no we just have to
98:47 - say it's mutable
98:48 - we just need it to be mutable because
98:51 - there could be different lotteries that
98:53 - we're getting
98:54 - uh how do we determine and calculate
98:57 - what Lottery we need well let's pass in
99:00 - the same seeds to get that
99:03 - address so we Dean Lottery seed I
99:05 - believe that has bytes
99:09 - okay comma and what else do we use as a
99:12 - seed guys it's gonna be and
99:15 - Lottery underscore ID dot t o underscore
99:20 - l e bytes parentheses cool
99:25 - so that's it for seeds don't forget this
99:27 - bump here and that's it for lottery All
99:29 - right we just need to put the type
99:31 - Lottery what is it expecting it's an
99:33 - account
99:34 - um
99:35 - what kind of account are his Lottery
99:37 - it's a Lottery account all right so now
99:40 - we have access well we're giving a
99:42 - context Within by ticket
99:44 - okay so now the important part
99:47 - the ticket itself right
99:49 - is there an account that we set up for a
99:52 - ticket like does our code know what a
99:54 - ticket looks like
99:56 - no so what do we have to do we have to
99:58 - initialize it so let's do a count
100:01 - and say parentheses here and say knit to
100:04 - initialize it the payer right we usually
100:07 - put a payer here but we actually can put
100:10 - the buyer all right and again if you
100:13 - this confuses you you can put it as
100:14 - Authority but when you see me use this
100:16 - variable later on it'll make more sense
100:18 - it's just for naming purposes same thing
100:20 - though buyer is going to be signer so we
100:23 - could do that now so we should say a
100:24 - buyer is the signer
100:26 - right whoever signs for it that's the
100:28 - buyer the payer to pay for the space is
100:30 - the buyer
100:32 - space
100:33 - all right I'll tell you right now it's
100:35 - gonna be four
100:37 - Plus
100:38 - four
100:40 - plus thirty two plus eight and again you
100:43 - don't put the eight at the end I just
100:45 - want you to know this is something
100:46 - called the account discriminator
100:48 - cool and now for the seats right this is
100:50 - the fun part seeds is equal to
100:53 - uh it's gonna be a couple things right
100:55 - so we're leveling up before to get the
100:57 - lottery we need two seeds but for the
100:59 - ticket we're actually gonna put three
101:00 - all right so the first one is the ticket
101:03 - C variable which we need to create later
101:06 - as bytes
101:08 - next thing is we should put the lottery
101:11 - key
101:14 - as ref
101:16 - and I want you to keep in mind what
101:18 - seeds do we use for each account right
101:19 - so this takes two this takes three what
101:22 - kind of things does it take in right and
101:24 - then we also need to do
101:26 - and Lottery
101:29 - dot last
101:31 - ticket ID
101:33 - right
101:34 - so
101:36 - very similar to how we got the lottery
101:38 - ID as the current lottery ID as part of
101:41 - the seed we need the last ticket ID
101:43 - right so if I scroll up here
101:47 - just like how our master
101:49 - keeps track of the last uh ID or the
101:53 - last lottery
101:55 - the lottery keeps track of the last
101:58 - ticket ID right so did
102:01 - is it this ticket number zero is this
102:03 - ticket number one it's number two right
102:05 - we help determine that by passing it
102:07 - right here
102:08 - and again it's last ticket ID plus one
102:11 - all right so the first ticket ID is
102:14 - gonna be one
102:16 - all right
102:17 - so after that we can play dot to
102:21 - underscore l e
102:23 - bytes
102:25 - okay and you could put a comma here but
102:27 - not necessary because it's the last one
102:29 - up so make sure you spell that all
102:31 - correctly don't forget to put a comma
102:33 - after the space
102:35 - and comma after this and say bump
102:39 - so we had the mandatory bump
102:42 - next for the ticket
102:45 - all right what kind of type is ticket
102:47 - it's an account
102:48 - you say info and what account is is this
102:52 - gonna hold it's gonna hold D take it one
102:55 - but we don't have that yet so we need to
102:57 - make it
102:59 - don't put comma here comma here and for
103:01 - the system program
103:03 - we're just going to put program oops
103:06 - pretty standard
103:08 - program
103:12 - info
103:14 - system
103:16 - okay
103:18 - cool so there is that that's the buy
103:21 - ticket struct
103:22 - let's make the account now so we can say
103:24 - hashtag
103:25 - account
103:30 - um and then under here we say Pub
103:33 - instruct
103:34 - ticket
103:36 - boom and again this is not
103:39 - the right color we are missing something
103:44 - um
103:46 - water Empire
103:52 - what's this
103:57 - signer
103:59 - oh I forgot
104:01 - this one that needs
104:03 - to be mutable
104:07 - count mute oops
104:11 - okay so that's one thing
104:14 - what else
104:16 - missing something else here
104:18 - signer System Program that's fine
104:23 - ticket
104:30 - bump is good this is good
104:37 - oh comma here
104:40 - hey we're good okay yeah don't forget
104:42 - your commas so take it
104:45 - what is the properties of a ticket right
104:47 - what do we need we need what's the id
104:51 - um and who has authority over this
104:54 - ticket so let's do Pub ID
104:56 - u32
104:59 - um the authority
105:04 - and last but not least we want to put
105:06 - Pub Lottery ID right again this is kind
105:09 - of unnecessary but when we fetch tickets
105:13 - from the front end
105:14 - it'll be a lot easier because you can
105:16 - say like oh give me all the tickets from
105:19 - lottery number two otherwise we'd have
105:22 - to go to each Lottery and find out okay
105:24 - what are the tickets inside that Lottery
105:25 - right it's easier to be like okay this
105:27 - ticket is with lottery number two
105:30 - lottery number one right it's gonna be
105:31 - you 32.
105:35 - oh so we got this the account
105:37 - we have the
105:38 - the struct the context for buy tickets
105:40 - and now let's just quickly make the
105:43 - variable Pub const uh ticket seed
105:48 - type
105:49 - the referenced
105:51 - string
105:53 - and ticket
105:55 - cool
105:58 - all right so now that should exist and I
106:01 - can't pass build yet because we didn't
106:02 - write any logic for buy ticket right so
106:04 - how does buy ticket work
106:06 - all right so what is buying a ticket
106:08 - it's exactly what it sounds like right
106:10 - we're purchasing a ticket for the
106:12 - lottery right but what should happen is
106:16 - when we buy a ticket we create a ticket
106:21 - account and
106:24 - pay
106:26 - right the lottery
106:29 - with the ticket price right so if the
106:33 - ticket price is one Soul where is that
106:36 - one Soul go to that I spent this ticket
106:38 - on all right it goes to
106:40 - that Lottery that I pass in
106:43 - so when we buy a ticket we create a
106:45 - ticket account and pay the lottery with
106:47 - the ticket price which is our case
106:49 - One Soul
106:51 - got that so how do we do all that well
106:54 - the first thing we're going to need to
106:55 - do is set up the variables so let's say
106:57 - let Lottery is equal to and mute because
107:01 - we need to do this it's going to be a
107:02 - different lottery every time I run this
107:04 - function it's not going to be the same
107:05 - one and we also need to uh assign some
107:08 - variables to it so we say and mute CTX
107:10 - dot accounts dot Lottery right do you
107:13 - guys understand where I'm getting this
107:14 - from I'm getting this from the context
107:16 - because the accounts at by ticket are
107:20 - Lottery account there's a ticket account
107:22 - there's a buyer and a system program I
107:25 - want to say that accounts I have access
107:26 - to all four of those things saving that
107:28 - variable and not that Lotter and let
107:32 - Lottery right so we can say let ticket
107:35 - is equal to and mute CTX that counts
107:41 - and I know I see it the catch and mute
107:45 - Dot ticket right and again you don't
107:49 - have to set up these variables but I
107:51 - want to otherwise you have to write
107:54 - ctx.accounts.lottery.lastid
107:55 - ctx.accounts.ticket blah blah right we
107:58 - want to make the variables so we can
108:00 - shorten it so we can say equals
108:03 - um and
108:05 - ctx.account Dot buyer
108:09 - right oh that accounts sorry
108:12 - amazing so the buyers in this variable
108:15 - ticket lottery were good so now
108:17 - let's check right so
108:21 - um let's transfer transfer
108:24 - soul to Lottery PDA
108:28 - okay
108:30 - so to transfer our soul to the Lottery
108:33 - account right remember that's last part
108:35 - of the pseudocode we want to invoke a
108:38 - function right so right invoke
108:40 - parentheses and to transfer you just say
108:43 - and transfer okay
108:46 - so once you do and transfer right you
108:49 - can put parentheses here I'm just hit
108:51 - oops I'm gonna hit enter so that we can
108:53 - list them out but basically uh you want
108:56 - to write
108:57 - who you want to send money from so where
109:00 - is the Solana coming from
109:02 - it's coming from the lottery the ticket
109:04 - or the buyer
109:06 - the buyer exactly so we have that
109:07 - variable so if we say
109:09 - um
109:10 - and buyer.key
109:12 - all right
109:13 - the buyer at this key comma we want to
109:17 - send it to the ticket or the lottery
109:21 - the lottery right so that we can add to
109:23 - the pot so and Lottery
109:27 - dot to account oops to account
109:31 - underscore info
109:34 - and we say CTX dot accounts right
109:38 - oops not that one sorry
109:40 - hand Lottery dot key this is actually
109:42 - later
109:44 - so yeah basically from
109:46 - two and how much this last part is how
109:50 - much
109:52 - do they send well
109:54 - we know how much each ticket costs and
109:56 - where do we save how much each ticket
109:59 - costs we save it in The Lottery by
110:01 - saying lottery.ticket price which should
110:04 - be uh we signed up to one Solana all
110:07 - right so we got key buyers which is from
110:10 - two how much
110:12 - okay pretty simple so far and after this
110:15 - closing parentheses put a comma right
110:17 - this first one you can see it by the
110:18 - matching one hit enter and you say end
110:22 - array right because this is the
110:23 - information of each one so we can say uh
110:27 - oops we can say
110:30 - buyer.2 oops account underscore info
110:35 - comma
110:37 - oops
110:39 - comma we can say Lottery
110:41 - .2 account underscore info
110:45 - we can say CTX this is what I was doing
110:47 - before accounts.system
110:50 - program
110:51 - [Applause]
110:54 - program.2 underscore account underscore
110:57 - info
110:58 - cool so all of this is part of the
111:02 - invoke function the only thing you'll
111:04 - need to do after this is after the
111:06 - square bracket put a comma
111:09 - and after this closing parentheses you
111:11 - could put a question mark here semicolon
111:13 - and we should be good to go right
111:16 - because this closing credit bracket is
111:18 - still our function
111:19 - there's some other things we need to
111:20 - write here like Lottery
111:23 - uh Dot
111:25 - last ticket ID right after we buy a
111:30 - ticket we should also increment the last
111:33 - ticket ID right so that we don't have
111:35 - the same ticket with the same ID so how
111:37 - do we increment this variable plus
111:38 - equals one
111:41 - okay
111:43 - uh so we can say the ticket oh yeah we
111:45 - need to we need to set these values
111:47 - right what tick what is the ID of the
111:49 - ticket I just bought well it's going to
111:52 - be equal to Lottery dot last
111:56 - ticket Aggie
111:58 - okay basically uh if the last ticket I
112:01 - do is zero this ticket I just bought is
112:03 - gonna be ticket ID one
112:06 - makes sense
112:07 - uh we also need ticket dot Lottery ID
112:11 - like what Lottery did we buy this ticket
112:13 - at we bought it at Lottery underscore ID
112:16 - it should be the same
112:18 - okay and then we need ticket to
112:20 - Authority right if I'm getting any
112:21 - errors it'd probably be uh spelling
112:24 - so buyer dot C who's the authority
112:28 - should be same as the buyer which makes
112:30 - sense
112:31 - and we can add some nice messages here
112:36 - so we could say that the ticket
112:39 - ID
112:41 - and how can we do like a template
112:44 - literal technically here you can say
112:46 - ticket ID again this variable or
112:49 - whatever value this is will go here and
112:51 - we'll remove the square brackets
112:54 - also message you can say quotes the
112:57 - ticket Authority who has authority over
113:00 - this ticket
113:02 - it should be the now ticket Authority so
113:05 - colon this
113:07 - ticket oh comma
113:10 - ticket dot Authority
113:13 - and then
113:15 - okay
113:18 - there is one more thing that we should
113:21 - add before we completely finish this
113:23 - function and it's just basically some
113:25 - error handling so if you think about it
113:27 - right we create a lottery
113:29 - we buy a ticket we pick a winner right
113:34 - and then we
113:37 - uh claim the prize right but if we're
113:39 - still on lottery number three there's
113:40 - already a winner should we be able to
113:43 - enter and buy another ticket no it's
113:45 - kind of like a scam there's already a
113:46 - winner we shouldn't buy tickets at that
113:49 - Lottery right so we can add that error
113:52 - handling in here right with some sort of
113:54 - if statement okay another cool thing we
113:57 - could do is make another file that has
114:00 - our error messages right it's really
114:02 - cool in Rust so you could say error
114:05 - the RS and that will be where we write
114:08 - all our error messages and once again
114:11 - you don't have to make a error file you
114:13 - can actually just put all of it in the
114:15 - lib but just for organization purposes
114:18 - right we can do something like this so
114:20 - we can say anchor Lang
114:22 - pray lewd error underscore code right so
114:26 - quiz time uh what did we just import
114:28 - here we went into anchor Lang we wanted
114:30 - to Prelude we got error code from
114:33 - Prelude and now we can say
114:36 - error code
114:39 - you'd say Pub
114:42 - right Lottery error
114:45 - and we can say hashtag message
114:50 - uh winner
114:51 - already
114:53 - exists
114:55 - right
114:56 - and then we can say underneath that
114:59 - macro we could say winner already exists
115:03 - this is the type of error that we get
115:06 - and this is the message that will come
115:09 - out of that error okay
115:11 - um it's enum because we can allow
115:13 - multiple errors here
115:15 - okay and since we're here let's write
115:18 - out all the possible errors again uh to
115:22 - make a message you say hashtag message
115:24 - another one that we need to think about
115:26 - is
115:27 - um
115:29 - you like if I want to pick a winner but
115:32 - nobody buy any tickets that shouldn't be
115:34 - possible Right how can we claim winner
115:36 - if nobody added to the pot or if nobody
115:37 - bought a ticket so you can say something
115:40 - like can't choose
115:43 - uh winner when there are no tickets
115:49 - and you can call that type no tickets
115:51 - right so when I'm going back to this
115:53 - code I can call literally winner does
115:56 - not exist already exist or no tickets I
115:59 - can just write this and it'll know which
116:01 - error message to send
116:03 - okay another one is this message
116:07 - um
116:08 - when there's a winner not chosen right
116:12 - so
116:14 - we can say winner
116:16 - has not been chosen
116:19 - period and from there I was out of
116:23 - periods here
116:24 - period
116:25 - period
116:27 - okay and then we call that winner not
116:30 - chosen all right is this making sense so
116:31 - far uh another possible error that we
116:34 - might want to use is message
116:37 - um if there's an invalid winner like
116:39 - what for whatever reason the ticket was
116:40 - invalid
116:42 - right they somehow got a ticket that
116:43 - doesn't make any sense you can say
116:45 - invalid winner and call it invalid
116:49 - okay and I can only think of one more if
116:52 - you guys have any more feel free to add
116:53 - it all right good prize has already been
116:57 - cleaned I can guess what kind of error
116:58 - this is
116:59 - it's basically somebody has claimed the
117:01 - prize right and someone's trying to
117:04 - claim the prize again which shouldn't
117:06 - happen right which should say already
117:08 - closed
117:09 - cool and that's how you make error
117:12 - yeah so that's how you make all the
117:13 - errors and um I think this should be
117:15 - already closed already claimed I like
117:18 - how that sounds better
117:21 - okay
117:22 - so again we made an error file we can
117:26 - import this by saying error
117:31 - star we can say mod error and now right
117:37 - this brings it into the scope as you
117:39 - remember use super brings everything in
117:41 - this scope
117:42 - into the program right so I don't have
117:44 - to go into that folder so let's go back
117:47 - to here
117:48 - and let's do one of our checks so I'll
117:51 - put this at the top here if right
117:53 - there's still if statements here but
117:55 - it's different if you say if
117:57 - Lottery
117:59 - dot winner ID and just in case you don't
118:01 - know I'm trying to do uh the winner
118:04 - already exists there
118:05 - all right so how can we tell if a winner
118:08 - already exists well let's think back to
118:11 - the lottery struct
118:14 - right
118:16 - we have this winner ID and the way to
118:19 - look at it is like option
118:21 - uh basically means
118:23 - the winner I can be the winner ID can be
118:25 - two things it can be like some
118:28 - and there's like something in here or
118:31 - it can be none
118:33 - right we kind of saw this when we got we
118:36 - saw the Lottery account and it's the
118:37 - winner ID is null right so that means
118:40 - it's not some and when I say t here it
118:42 - means a value right so there's an ID
118:43 - here whatever it is
118:45 - okay so let me erase this because we
118:49 - don't need that
118:51 - so what I'm saying is
118:53 - if Lottery dot winner
118:56 - ID dot is sum right that means it's not
119:00 - empty like there's something in here
119:02 - there's a winner right so if winner
119:05 - return
119:08 - error
119:09 - and then you can say Lottery error right
119:13 - why am I saying Lottery error because
119:14 - that's the type right here that's the
119:16 - enum Lottery error
119:20 - is winner already exists all right is
119:24 - that all come together now if there is a
119:26 - winner
119:27 - return the error and what kind of error
119:30 - are we returning that the winner already
119:32 - exists it would print out this message
119:34 - when it already exists
119:36 - pretty cool right so when you're making
119:37 - your own app think about that structure
119:40 - and what you need from that error all
119:43 - right what kind of error do you want to
119:45 - display here
119:46 - okay I think we can buy a ticket now so
119:50 - let's see if we can build
119:52 - I'm guessing there's probably going to
119:54 - be some spelling errors yep literally
119:56 - ticket price anything else
119:59 - lottery ticket prize
120:02 - it's the first thing
120:07 - okay there's a lot a lot to go off
120:09 - payer specified does not exist
120:14 - okay so that's the first thing 158
120:18 - let's take a look
120:24 - okay so it's something wrong with the
120:26 - payer the payer is the buyer
120:29 - buyer should be the singer should be the
120:33 - signer it's about this wrong
120:35 - signer okay
120:37 - let's see what we get now
120:40 - and let's hit build
120:42 - there's probably some more things
120:48 - look for the next building
120:52 - expected function macro error return
120:54 - error not a function oh okay
120:58 - so there's something with our check
121:01 - so it tells me you should go up here
121:04 - turn error
121:09 - return some turn oh oh it should be
121:14 - exclamation point same way we have
121:15 - message exclamation point that should be
121:18 - the same thing and I think we might need
121:20 - a exclamation point here
121:23 - uh let's see let me just test it first
121:25 - so let's just clear this out
121:28 - go back to here build
121:30 - a lot of errors
121:34 - all right
121:37 - is our that's the first building
121:41 - second building third building okay
121:43 - unused Imports that's fine oh
121:46 - right here no field ticket price on type
121:51 - mute anchor Lang
121:53 - unknown field oh I did it again it
121:56 - should be ticket price not ticket price
121:57 - so line 59
121:59 - ticket
122:01 - price
122:04 - okay
122:06 - you can see this is like that build
122:10 - taking a while
122:12 - build successful okay let's go so again
122:16 - if your code has errors that's not
122:18 - necessarily a bad thing it's just about
122:19 - understanding why it works which a lot
122:21 - of time I don't understand why it works
122:23 - but luckily we're able to figure it out
122:25 - right so every time I put price a prize
122:27 - it should be price
122:29 - another thing that I realize error
122:31 - should have an exclamation point here
122:34 - cool so build success successful let's
122:38 - run out one more time to make sure
122:41 - build
122:44 - boom okay so build successful that means
122:47 - we're good again warnings are okay
122:50 - cool so what do we do after we finish
122:53 - building we upgrade
122:55 - again upgrade's gonna take a couple
122:57 - seconds but I'll be back when it's done
123:00 - cool all right so deployment successful
123:02 - right if you go to tests we have buy
123:05 - ticket now so let's just review what we
123:07 - have we should have a master initialized
123:09 - we should have one Lottery active right
123:12 - there's no winner there's last ticket ID
123:15 - zero which means how many tickets there
123:16 - are zero there's no winner false which
123:19 - means there's no winner we're like I
123:21 - just said and how many tickets do we
123:23 - have
123:24 - empty
123:25 - all right so let's buy a ticket then
123:28 - all right so how do we buy a ticket
123:30 - um actually we need this one we open
123:32 - this up we need to pass an argument and
123:35 - we gotta pass in all of the accounts so
123:37 - what is the lottery ID right what
123:41 - Lottery are we buying a ticket for
123:43 - that's what this is saying well our ID
123:45 - is one so we should just be able to put
123:47 - one here and we're good to go so that's
123:49 - it for arguments all about for accounts
123:51 - our context right
123:54 - um do we have a lottery that we want to
123:56 - put here do I need to generate a new one
123:58 - from seed no we already have a lottery
124:01 - we just need the public key of that
124:03 - Lottery
124:04 - so there's a have a public key right I
124:06 - fetch it right there the 9C for me
124:09 - that's the lottery
124:11 - public key cool paste that ticket all
124:14 - right let's pause and take it but buyer
124:16 - who's buying this ticket me so then you
124:18 - should say my address system program is
124:21 - good now for the ticket right how do we
124:23 - generate a public key for the ticket
124:26 - the first question I have to myself is
124:28 - do we have a ticket already
124:30 - nope we do not so we need to generate it
124:33 - from
124:34 - seed right so the first thing that we
124:37 - write for Ticket seed uh is just ticket
124:40 - I believe you can double check that in
124:41 - your constants ticket
124:43 - then we need a lottery key dot as ref
124:47 - that should be public key right
124:51 - when it says lottery.key that's just the
124:53 - Lottery's public key which we have right
124:55 - here actually so copy that paste it
124:57 - right mine is 9C yours will be something
124:59 - different here
125:00 - oops and how many C3 we need one more
125:04 - all right do we need the lottery dot
125:07 - last ticket ID so what was the type of
125:09 - last ticket ID
125:10 - let's see let's scroll up elastic ID is
125:13 - u32
125:14 - so we can add that
125:16 - as u32
125:17 - and then let's scroll down
125:21 - it's going to be the last ticket ID plus
125:23 - one so we can take a look at that so the
125:25 - last
125:26 - ticket ID is zero what's zero plus one
125:30 - one you hit generate and that should be
125:33 - our public key that we get that's the
125:35 - account
125:36 - public key we hit test hope for the best
125:39 - and we bought a ticket let's go so that
125:43 - means we spent some salon right I did
125:45 - have I've already forgot how much um
125:48 - tickets we bought but there we go
125:50 - awesome so let's see how many tickets we
125:52 - have
125:55 - we have
125:56 - one ticket with the idea of one what
125:59 - Lottery did we buy it for lottery ID
126:01 - number one okay so now if I fetch this
126:03 - what should be the last ticket ID
126:06 - one there we go and let me show you this
126:08 - example by buying another ticket
126:10 - all right so
126:12 - for arguments right what should be the
126:15 - lottery ID
126:16 - one
126:17 - what should be the lottery this
126:20 - who is the buyer still me so what does
126:22 - that mean in real life I'm buying two
126:23 - tickets
126:24 - right
126:26 - for Ticket should it be the same public
126:28 - key it shouldn't right so we need to
126:30 - generate this from seed again
126:33 - um the cool part is you'll see the
126:35 - difference right so to generate a ticket
126:38 - public key from seed
126:40 - you just have to put in the same seeds
126:41 - so we say ticket
126:43 - and then you say Pub Key which is the
126:44 - same but here's where the magic happens
126:46 - on the third one
126:48 - where you expect the u32 last time we
126:51 - put one right because we got the last
126:53 - ticket ID plus one we don't want to put
126:55 - one or else we're gonna get the same uh
126:57 - public key we're gonna get this a y we
127:00 - want something different otherwise that
127:02 - already exists right
127:04 - so we need to figure out the last ticket
127:08 - ID which is one and add one to it right
127:11 - so we add one to it one plus one 21 I
127:14 - mean two right we hit generate
127:17 - and now it's C and I and just to make
127:19 - sure I have 4.7 soul
127:22 - let's hit test
127:25 - let's go I have three Soul right so that
127:27 - means I took my Solana from this wallet
127:30 - and put it into this Lottery right so if
127:33 - I ask you what is the um total pot right
127:36 - now you can't see it from here but the
127:38 - total pot is too sold which means if I
127:41 - pick a winner they're gonna get two sold
127:43 - right we just successfully transferred
127:45 - it to this account there's a concept
127:47 - called escrow right this is essentially
127:50 - an escrow okay but don't worry too much
127:53 - if you don't understand it so we have we
127:54 - have two tickets right we can see that
127:56 - here if I fetch all the tickets there's
127:57 - two
127:59 - you can see what id you can see who
128:01 - bought tickets by The Authority right 60
128:03 - 60 so two I bought two right
128:07 - cool
128:08 - so let's go ahead and make the next
128:11 - function all right so we have a knit
128:13 - Master create Lottery and now
128:16 - what should we do we should pick a
128:19 - winner
128:20 - okay so to get started with that next
128:22 - function uh we can bring this over here
128:26 - scroll up to the top
128:28 - and I'm gonna teach you guys a shortcut
128:29 - I showed you guys earlier but you can
128:31 - say FN and click this right here you can
128:34 - create a function the cool part is the
128:37 - important stuff is highlighted for you
128:38 - so let's say I press backspace
128:41 - I press pick winner and if I press tab I
128:44 - can edit the context in the context you
128:46 - guys should know should be pick winner
128:48 - right so what the hell is pick winner
128:51 - this is kind of like the meat of the
128:52 - function right basically
128:55 - um you want to
128:56 - let's say select
128:59 - oops
129:01 - select a
129:03 - random ticket
129:05 - as a winner
129:09 - right and set the winner
129:13 - ID to that winner
129:18 - okay so uh the cool thing about the
129:20 - shortcut it already sets up our okay it
129:22 - sets up our context and we just have to
129:24 - fill in the blank really because it's
129:25 - pretty repetitive so let's go here and
129:29 - let's create that context for declaring
129:32 - a winner
129:34 - so what I'll do here is type in type in
129:37 - um
129:40 - derive
129:42 - accounts
129:44 - okay
129:45 - we can say
129:48 - #instruction because there's something I
129:50 - do want to put in here we want to put
129:52 - Lottery ID right because we need to know
129:55 - what Lottery are we picking the winner
129:57 - from is it the first one the second one
129:58 - the only one right so we can say space
130:01 - u32 and underneath is where we write the
130:04 - struct so we could say s or
130:07 - uh CS for create struck click this boom
130:11 - and then again it highlights what we
130:12 - need to edit so we can say the struct is
130:14 - pick winner
130:16 - and of course put your info in here
130:19 - Okay cool so we have this truck set up
130:22 - let's set up the account
130:25 - mute account oops
130:28 - like so
130:30 - yep it's going to be mutable
130:32 - hit enter
130:34 - because it's going to be a couple other
130:36 - things because the reason why I want to
130:37 - do this is not
130:39 - this right here
130:42 - it's going to be for the lottery right
130:44 - because like I said we need to get the
130:46 - contacts that we need is the lottery
130:47 - itself so I want to make sure that's
130:49 - mutable because it can be many different
130:51 - lotteries
130:52 - we need to tell them what seeds to get
130:54 - the right public key which will be
130:57 - Lottery seed
130:59 - dot as bytes
131:01 - comma
131:03 - self-reference and Lottery
131:07 - id.2 underscore Le underscore bytes
131:11 - parentheses comma and we don't forget
131:14 - bump and we can do a has one equals
131:18 - Authority okay
131:21 - because
131:22 - um only one account can pick the winner
131:26 - right and the person that can pick the
131:28 - winner is the one who created the
131:29 - lottery otherwise if
131:31 - um let's say there's Mega Millions
131:32 - jackpot right we the if I'm picking the
131:35 - winner right I shouldn't be the one to
131:37 - pick the winner if I didn't make the
131:39 - Mega Millions jackpot all right cool
131:41 - then we can say
131:43 - enter Pub Authority is just the signer
131:47 - who's ever signed
131:50 - all right
131:52 - perfect
131:54 - uh for common here come here
131:57 - and come here
131:59 - and that should be it right that's
132:00 - actually it for picking a winner and I
132:02 - would ask you guys do we have to make
132:04 - any new accounts nope we just want the
132:07 - Lottery account
132:09 - cool so this should be the struck trying
132:12 - to think
132:13 - yeah this is it for the struct the uh
132:17 - difficult part about this function is
132:20 - going to be
132:21 - the logic of pick a winner right because
132:23 - yes the pseudocode is selected we're
132:25 - going to take it as a winner and set the
132:27 - random the winner ID as the winner
132:31 - um the issue here
132:32 - is
132:34 - a random ticket right because in Solana
132:37 - there's no true random solution but
132:41 - there is like a
132:42 - pseudo random solution like pick a
132:45 - pseudo random winner and you don't have
132:47 - to fully understand how to do it but if
132:49 - you want to know how to get a
132:51 - pseudorandom number in Solana this would
132:53 - be the way
132:54 - okay so I think the oh wait hold on
132:56 - sorry about that camera died but we're
132:59 - back so as I was saying I think the best
133:02 - way to show you guys how this pseudo
133:04 - random uh
133:06 - number works is let's build out the
133:08 - whole thing and let me talk about it
133:10 - okay so the first thing you need to
133:12 - write is a variable called like clock
133:13 - and let's get the clock and again this
133:17 - if you're wondering where clock is from
133:18 - we're finally using uh all these Imports
133:21 - over here right the clock the hash uh we
133:24 - used invoker ready uh we use transfer we
133:26 - need the clock and the hash so the first
133:28 - thing we need is the clock
133:30 - to get the clock we say clock clock
133:31 - clock clock clock say clock colon colon
133:35 - um get right here okay
133:38 - and then put this question mark and say
133:40 - semicolon
133:41 - and from there we also want to make a
133:43 - variable that's going to hold our random
133:45 - number so the suit the random number
133:47 - will be called let
133:49 - pseudo random number because again uh
133:53 - Solana is what we call deterministic so
133:56 - uh it will usually know the answer
133:59 - before the transaction goes through and
134:02 - that's why it's hard to get a random
134:04 - number
134:04 - um another way to get a random number is
134:06 - if you have to set up some sort of
134:07 - Oracle but that is a way above my uh
134:10 - knowledge so this is a way to do it
134:14 - so we've set a variable here and let's
134:17 - just put parentheses because Within
134:20 - These parentheses we want to write
134:22 - something
134:22 - and uh bear with me because this is
134:24 - again I'm even still trying to wrap my
134:27 - hand around this but from what I
134:28 - understand we want to make a number
134:31 - right we want to make a big number which
134:33 - is why we say u64 here right and we can
134:37 - generate a big number from bytes so we
134:40 - say from
134:42 - Le underscore bytes
134:44 - okay
134:46 - and again this
134:49 - is a function in itself and to generate
134:52 - a number from bytes right to generate a
134:54 - u64 big number we need to pass something
134:57 - in here so I'm going to hit enter
135:00 - and what we want to pass in is this we
135:03 - will say less than greater than
135:06 - array
135:07 - and it's not on the right it's just
135:08 - square brackets so u8
135:11 - eight
135:13 - and you say common colon
135:15 - try from
135:18 - parentheses
135:20 - and again I'll break it down after I
135:21 - write it all out and hash
135:24 - okay again so we're using that hash
135:26 - function from the top over there that we
135:28 - imported
135:30 - all right this hash
135:32 - okay
135:34 - and what we want to do is say in hash uh
135:37 - parentheses because that's a function
135:39 - all right we're going to generate a hash
135:41 - from
135:43 - this and clock right
135:46 - dot Unix
135:49 - timestamp
135:52 - timestamp dot t o b e underscore bytes
135:57 - parentheses
135:59 - okay
136:01 - with me so far cool because the next
136:03 - thing after this is going to be dot two
136:07 - bytes right and make sure it's out of
136:08 - this parenthesis right here
136:10 - dot to bytes parentheses
136:15 - dot dot eight
136:19 - parentheses uh Dot
136:23 - unwrap
136:24 - actually I could just write that here
136:25 - dot on red
136:28 - okay and then you put a comma
136:31 - right and after that comma
136:34 - there should be
136:37 - one parenthesis here
136:40 - you can hit enter right there
136:42 - and you can say
136:44 - times
136:47 - clock that slot right and uh in the next
136:52 - line
136:55 - I just organize this information
136:58 - oops
137:00 - slot
137:02 - you can say
137:04 - percent Q32
137:07 - Max
137:09 - has q64
137:12 - and you can say in between these two
137:15 - parentheses here as
137:17 - uh
137:19 - wait did I do this right
137:20 - percent to 32 equal Max
137:24 - as 32.
137:29 - okay
137:31 - um let me see so this opening has a
137:34 - closing
137:35 - this one has a closing
137:38 - this one has a closing
137:40 - this one as a closing
137:43 - and this one closes so yeah there should
137:47 - be there's an extra one right here
137:48 - semicolon
137:50 - and yeah
137:52 - cool all right so yeah I know this is a
137:55 - lot if you didn't click off the video
137:56 - congratulations you're a trooper because
137:58 - this uh definitely was a doozy right but
138:02 - to break it down in simplest terms like
138:04 - I mentioned before we want to create a
138:07 - big number right and I represent this
138:09 - big number by saying u64 so I want to
138:12 - make a big number
138:13 - uh to make this big number I'm calling
138:16 - this function called bytes from Le bytes
138:19 - right and what this takes in is bytes so
138:23 - in between this parentheses and this
138:26 - parentheses we need to get bytes right
138:28 - so you can assume that this whole thing
138:31 - here
138:32 - is giving us bytes right
138:35 - here's the thing though
138:38 - um here's the thing though
138:42 - if this gives us bytes what the hell is
138:44 - this thing I'm highlighting well to tell
138:46 - you right with from here we're getting a
138:49 - try from all right don't worry about
138:50 - that yet which is another function
138:52 - that's calling a hash function so again
138:56 - big number we want a big number from
138:59 - bytes and from those bytes we're gonna
139:02 - call the hash and then we're gonna get
139:04 - the clock new next time stamp right so
139:06 - what is the clock Unix timestamp it's
139:08 - basically what time is it right now it
139:11 - could be like uh 12 it could be 19 22
139:14 - right whatever that is that number and
139:17 - turn that into bytes
139:19 - okay because the hash function this
139:22 - whole thing I'm highlighting right it
139:23 - wants bytes within here
139:25 - so take the clock take the time turn it
139:27 - to bytes and then let me highlight a new
139:29 - thing right here this will return a hash
139:33 - right so it generates a random a hash
139:36 - from the time and what makes this
139:39 - already kind of random is the time right
139:42 - because
139:43 - um the way time works right it'll be a
139:46 - different point in time of day depending
139:49 - on when you run this pick winner right
139:51 - and from there it will generate a hash
139:54 - for you and again uh to get some to make
139:57 - this function work we have to turn that
139:58 - back into bytes okay so that's this
140:02 - whole thing so from lib so we want a big
140:04 - number
140:05 - uh so we have to turn it into bytes
140:07 - First We Take the time turn that into a
140:10 - hash which then we turn into bytes right
140:13 - and then from there you're gonna see an
140:15 - unwrap right because the reason why it's
140:16 - unwrapped here is because this try from
140:19 - can fail but uh it will never fail so
140:22 - you don't have to worry about it but we
140:23 - do just want to put an unwrap here and
140:25 - last but not least we need to multiply
140:28 - the time slot the clock dot slot right
140:31 - so not only are we getting a big number
140:34 - from here right we're also going to
140:36 - multiply that to get that big number so
140:39 - again it's not truly random technically
140:42 - there's a chance
140:43 - um
140:44 - that it won't be random but it's what we
140:47 - call pseudo random okay and then from
140:50 - there uh we're casting it as a 32. as
140:54 - you instead to be u32 there you go as
140:56 - u32
140:58 - okay so that should give us a random a
141:02 - pseudo-random number
141:03 - okay and if I did this right we want to
141:06 - say let winner ID right it's a variable
141:09 - set this equal to parentheses
141:12 - pseudo
141:13 - random number that variable whatever
141:16 - that random number is
141:17 - and we say modulus
141:20 - Lottery right a lot where are we getting
141:23 - Lottery from right from our context
141:26 - right we set it up all the way down here
141:29 - and
141:30 - pick winner we have the lottery so let's
141:32 - get that context right so I can't just
141:33 - say Lottery just yet it's gonna be
141:36 - undefined but let's define it here
141:38 - let Lottery is equal to and immune to
141:42 - CTX dot accounts dot lottery so we have
141:46 - access to that now so I can say Lottery
141:49 - dot last ticket ID right so basically
141:54 - um this is how many tickets there are
141:57 - this could be
141:58 - 5 this could be 2 this could be one and
142:01 - for example sake how much tickets do we
142:03 - have right now so we have two
142:06 - okay
142:07 - so the way this is shaping up to be
142:11 - is we take the random number we do
142:14 - modulus two and we can't forget we need
142:17 - to do a plus one here
142:19 - right because it could be zero
142:21 - right so basically pick a number a
142:23 - random number between uh how many
142:26 - tickets we have so if it's zero to I
142:28 - mean if it's one to seven pick a number
142:31 - from one to seven that's the winning uh
142:35 - last ticket ID so it could be ticket
142:37 - number one or ticket number two in our
142:38 - case
142:39 - okay so that's how it should all work
142:41 - right so once it selects that it's going
142:43 - to store in this winner ID that's the
142:45 - winning ticket
142:48 - right and then from there we can say the
142:50 - lottery oops Kidder a lot sorry
142:57 - Lottery
142:59 - oh it's weird it's why is this doing
143:01 - this
143:03 - dot winner
143:06 - underscore ID is equal to sum winner
143:10 - underscore ID all right so remember how
143:13 - in the lottery struct
143:15 - we had winner ID is an option it could
143:17 - be either what guys it could be sum with
143:19 - a value inside or none right as you saw
143:22 - is no right here we're making it from
143:24 - null to something and that something is
143:27 - the winner ID that's the simplest way to
143:29 - look at it
143:30 - and then from there let's make a nice
143:32 - message here that the winner ID
143:36 - is the winner
143:39 - underscore ID and this should be a comma
143:41 - so that it'll take whatever this is and
143:44 - write that message here and then
143:46 - semicolon
143:48 - um and yeah that should be it so again
143:50 - this could fail because I might have
143:52 - wrote this wrong it is a lot of code so
143:54 - let me just double check it
143:56 - okay so the random number you
143:59 - eight
144:02 - uh two B bytes two oh I've already seen
144:07 - error that should be two underscore
144:08 - bytes so make sure it does that
144:10 - um hit enter here so it's still gonna
144:12 - work because I didn't put a semicolon
144:14 - just so that it doesn't wrap around that
144:16 - screen and let me see clock slot okay so
144:21 - that looks good pause this video make
144:23 - sure it looks exactly like this because
144:24 - there could be a chance you're missing a
144:26 - comma semicolon spelled something wrong
144:28 - right if there's any errors it'd
144:30 - probably be around here
144:32 - cool
144:35 - now I'm double checking this line
144:37 - sudo it's about pseudo wrong
144:40 - EU all right that's how I spelled it
144:42 - here
144:43 - you you yep
144:46 - okay I'm pretty good with this so we can
144:49 - pick a winner
144:50 - okay
144:51 - and that's it so let's go ahead and
144:54 - build let's see if anything else comes
144:56 - up
144:57 - of course
144:59 - can't infer Strokes let's see at the
145:02 - very top because that's usually where
145:03 - the error begins
145:04 - unresolved import for a client's
145:09 - client account signer okay
145:12 - 93.
145:17 - hmm
145:19 - taking a look at this
145:21 - I should put bloodstruck here I don't
145:23 - know if that'll fix it but we'll see
145:26 - nope can't infer type
145:29 - Hmm this looks good
145:32 - Pub Lottery count lottery Pub Authority
145:36 - singer again forgot signer now we hit
145:40 - build
145:43 - a build successful okay so we got a
145:47 - build successful and now what do we do
145:50 - we hit upgrade so give this a couple
145:52 - minutes and we'll be right back
145:55 - all right so it was successfully
145:58 - deployed again and upgraded and now we
146:01 - have a pick a winner function so let's
146:04 - run it all right so let's let's see just
146:06 - to recap uh we do have one Lottery
146:09 - that's ongoing right because it's not
146:11 - claimed uh there's no winner yet right
146:13 - and we have two tickets right so I
146:17 - bought two tickets so out of these two
146:19 - tickets who's gonna win at the end of
146:22 - the day it's gonna be me right because I
146:23 - bought both of these tickets but which
146:25 - ticket's gonna win one or two I don't
146:27 - know all right we can do that by picking
146:29 - a winner and to pick a winner
146:32 - let's see I don't think we have any
146:34 - arguments I believe right
146:38 - we do need one more thing so
146:41 - I need a lottery ID so I gotta pass that
146:44 - in
146:47 - so where is buy ticket pick winner yep
146:50 - so over here we put comma let's put
146:52 - underscore Lottery ID right the reason
146:55 - we put underscore is because we don't
146:56 - actually use it we just need to pass it
146:59 - in here right because it's going to go
147:01 - into our context so let's go build
147:06 - build successful type upgrade and now
147:11 - we're good right we got to make sure to
147:12 - pass this because we also take it in our
147:16 - struct
147:17 - right here Lottery ID because we need to
147:19 - know which Lottery are you picking the
147:21 - winner for right
147:22 - so it's almost done
147:27 - man I really need to win this ladder
147:28 - because I'm running out of Seoul here
147:34 - cool so again we upgraded it so now when
147:38 - I pick a winner we can pass in a lottery
147:40 - ID as an argument
147:42 - so
147:43 - um what is the lottery ID I already know
147:45 - it's going to be one right but there
147:47 - could be multiple lotteries ongoing but
147:49 - Lottery ID is one
147:51 - the accounts should be pretty simple
147:53 - what Lottery account are we passing in
147:56 - there's only one so put this public key
147:58 - minus 9C yours could be something
148:00 - different
148:01 - and for Authority you put my address
148:03 - because I'm the one who created this
148:05 - Lottery I'm the one that has Authority
148:07 - and let's pick a winner
148:10 - boom pick winner passed so there is a
148:13 - winner here and remember how it says the
148:15 - winner ID is null when we fetch this it
148:17 - should be something different
148:18 - two so what that tells me is that ticket
148:21 - number two is the winner right but
148:24 - notice something
148:26 - Where's My Money Right One must I should
148:28 - win the two Solana that I paid right
148:30 - well I don't have any so we need to make
148:33 - that function which is picking a winner
148:36 - okay so we successfully picked the
148:39 - winner right now for the final function
148:42 - that we need to make uh it should be as
148:45 - you know claim the prize and claim prize
148:48 - is exactly what it sounds like all the
148:50 - money is in this Lottery account and we
148:52 - want to take that money from the Lottery
148:54 - account our third party account and put
148:56 - it into our wallet so that was what the
148:59 - pick winner is going I mean claim prize
149:01 - is going to do
149:03 - so I'm going to go over here
149:06 - and we can say FN and we can hit create
149:09 - and we can say claim
149:12 - price tab uh claim price I'm going to
149:18 - move a little bit faster on this all
149:20 - right and then put comma it's also going
149:22 - to take in Lottery ID and we're not
149:24 - going to use it in this function so we
149:26 - need to put underscore so
149:29 - it's going to inspect a type of u32
149:32 - u32
149:34 - it also will need to know what ticket
149:37 - won so we need to pass that in so put
149:39 - underscore ticket
149:40 - ID
149:42 - u32
149:49 - okay
149:50 - and then from there we can say let
149:51 - Lottery is equal to and mute
149:57 - oh actually we don't want to do this yet
149:58 - because it doesn't make sense yet but it
150:00 - will in a second
150:01 - all right so that kind of gave it away
150:02 - in our context we need access to the
150:04 - lottery
150:05 - we need access to the completed ticket
150:08 - word and we need to basically determine
150:12 - who the winner oh get grab the winner
150:15 - right so let's scroll down all the way
150:17 - to the bottom
150:19 - okay and let's start creating our
150:21 - structs so to get started you guys
150:23 - should know the drill by now we do this
150:25 - macro of derive
150:27 - accounts
150:28 - you say hashtag oops hashtag instruction
150:32 - and you saw how many things are we
150:34 - passing in here we're passing two
150:35 - Lottery ID which is expecting a type of
150:38 - u32
150:40 - and uh after the 32 put a comma and say
150:43 - ticket underscore ID
150:45 - and say you 32 right this is a lot of
150:48 - code right so that's why we're not
150:51 - focusing too much on the front end we're
150:53 - focusing on the uh web 3 part of this
150:57 - so and again if you ever want to learn
150:59 - how to make the front end uh for my
151:02 - beginners out there drop comment down
151:04 - below saying that you want the full
151:06 - complete tutorial right
151:09 - but this is more so if you want to learn
151:11 - uh web3 with me so let's say the struct
151:14 - is claim price
151:17 - say info
151:21 - put the curly braces and this is our
151:23 - scope
151:24 - okay it looks pretty good so far uh we
151:26 - want to do here is we want to get the
151:28 - lottery right so how do we get this well
151:31 - we should just press
151:33 - Tab and say hashtag account
151:36 - you want it to be mutable because we
151:37 - could get multiple we could be claiming
151:39 - the price of several lotteries right so
151:42 - it could be seeds not just one
151:45 - and what are this what are the seeds
151:46 - that we usually get for lottery
151:48 - right if you get confused you can look
151:50 - above but I'll tell you right now it s
151:52 - lotteryseed that has bites
151:56 - the comma and it also takes in the
151:58 - lottery ID
152:00 - uh dot two l e
152:03 - uh Le underscore
152:07 - okay and of course bump
152:10 - and that is the lottery
152:13 - and what is the type of Lottery lottery
152:15 - is going to be an account so let's write
152:17 - that
152:18 - and what what is going to be the type of
152:21 - account it's going to be Lottery which
152:23 - we set up so we don't need to create it
152:24 - which is why we don't say init here
152:26 - okay cool we also need the ticket
152:30 - so I'm gonna put a comment here and how
152:32 - do we get the
152:33 - ticket all right so to get the ticket we
152:36 - say hashtag account again
152:40 - and we say seeds is equal to right this
152:45 - is different right and say
152:47 - um mute here I'm putting my seeds
152:49 - already
152:51 - I'm formatting like this because there's
152:52 - a lot of seeds we want the ticket
152:54 - seed dot as bytes
152:59 - and what else do we want guys we want
153:01 - Lottery dot key dot as ref
153:05 - and we also
153:07 - uh last seed was the ticket ID I believe
153:10 - ticket ID and to do this we need to do
153:13 - dot two l e
153:17 - so this should give us the PDA of our
153:20 - ticket
153:21 - we get comma we have bump
153:25 - um and uh there should be one Authority
153:28 - for this one so we say it has one
153:30 - equals Authority
153:33 - okay so ticket is good you can say
153:36 - account
153:38 - info
153:40 - comma ticket
153:43 - comma you can say hashtag
153:47 - count mute because it can be a different
153:49 - person a different Authority I mean pop
153:52 - Authority
153:54 - is the signer I almost put singer again
153:57 - signer
153:59 - info
154:00 - and of course the last part was the
154:03 - system program
154:06 - which is going to be the same so program
154:10 - info
154:14 - comma system okay we breathing we live
154:19 - good yeah just give me a nod if you're
154:21 - still here
154:22 - good I have no way of confirming that
154:24 - but I'm glad that you guys nodded
154:26 - so we have the struct for claim price
154:30 - um
154:31 - yep claim prize and let me ask you do I
154:34 - need to make any accounts lottery ticket
154:36 - nope we have those exist
154:39 - cool so that's the struct
154:41 - now I can go back up and actually claim
154:45 - the price
154:46 - okay so let's set up our variables again
154:49 - so the first one is the lottery
154:52 - uh how do we get this we say and
154:55 - and mute CTX dot accounts dot Lottery
155:00 - because this lot the lot no we can claim
155:02 - the prize of different lotteries right
155:06 - we can get the ticket
155:10 - and say and ctx.accounts
155:14 - that ticket
155:18 - you can say let winner
155:20 - is equal to
155:21 - and CTX dot accounts dot Authority
155:28 - and there we go all right so what do we
155:31 - need to do first is we need to uh I'll
155:33 - say validate the winner ID right so to
155:38 - validate we can say match
155:41 - so we can say match Lottery dot winner
155:45 - underscore ID
155:46 - and say curly brackets here
155:50 - and we can say remember how it's a sum
155:52 - we can say sum winner
155:54 - ID
155:56 - and equals Arrow
155:59 - like so and we can say if
156:03 - um
156:04 - when
156:05 - if
156:07 - winner ID
156:09 - does not equal oh well I don't even know
156:13 - it does that hashtag exclamation point
156:15 - equals does not equal ticket dot ID
156:19 - then we should throw an error so we say
156:20 - return error and we say oh don't forget
156:24 - the exclamation point and we say
156:27 - [Music]
156:29 - Lottery
156:30 - error
156:32 - colon colon in valid winner so for
156:34 - whatever reason the winning ticket
156:36 - doesn't match uh the ticket that we put
156:39 - in we can say invalid winner
156:42 - okay uh really brackets and then we can
156:46 - say okay so sum can either be something
156:48 - or none right so if it is none all right
156:52 - you can return another error
156:54 - which probably won't happen often so it
156:57 - says Lottery
156:58 - error
156:59 - is uh winner not chosen right this is if
157:04 - you try to claim a prize
157:06 - right but the winner hasn't been picked
157:08 - yet which in our front end you'll never
157:10 - see that happen but in the case you did
157:12 - uh you'd run into this
157:15 - cool and another thing another check
157:17 - that we need to do is uh if the lottery
157:19 - got claimed or that if that is true if
157:23 - so if the prize was already claimed it
157:25 - should also return error which is uh the
157:28 - lottery error that we created
157:31 - already closed all right somebody
157:33 - already claimed it all right so you
157:35 - shouldn't be able to press that button
157:36 - again so this is just a back end check
157:38 - uh back and check back end check
157:41 - cool for now for the actual transfer
157:43 - it's gonna be
157:44 - a little bit different than how we
157:46 - transferred it before so we say transfer
157:50 - um the prize from the Lottery account or
157:53 - Lottery PDA same thing to the winner so
157:56 - how do we do this
157:57 - so uh as I was saying to get started we
158:00 - say let's prize here is equal to Lottery
158:06 - um yeah we have we have Lottery right
158:07 - yep we do Lottery
158:10 - let Lottery
158:11 - and again because we don't put a
158:13 - semicolon this is technically saying
158:15 - Lottery dot ticket price
158:17 - okay so we take the so to get the prize
158:22 - from
158:23 - the lottery PDA to the winner we have to
158:26 - first get the total pot right so again
158:29 - uh we had two souls to get this a
158:31 - thousand Soul we gotta calculate it
158:33 - first so to get that we said that ticket
158:35 - price dot checked
158:38 - multiply right basically it's going to
158:40 - multiply
158:41 - Lottery
158:43 - dot last underscore oops underscore
158:47 - ticket underscore ID dot N2
158:51 - right and then we just add a DOT on wrap
158:56 - all right so this should calculate what
158:58 - the prize is
158:59 - so
159:01 - um
159:02 - basically to sum it up uh we take the
159:05 - cost of each ticket
159:06 - multiply that by how many tickets there
159:08 - are and then unwrap it
159:10 - so let's say each ticket was worth five
159:14 - Solana if there's if we bought two
159:16 - tickets the total prize money would be
159:18 - ten all right so do that quick
159:20 - calculation and then afterwards
159:23 - um we want to do a star star
159:26 - and again this is double dereferencing
159:29 - but
159:30 - um don't worry too much about that I
159:32 - suggest like you look into Double D
159:34 - referencing but the main thing is it's
159:37 - right star star lottery.2 account
159:41 - right this is so that we can probably
159:43 - access that information that's the right
159:45 - we need to do this first because we
159:47 - can't just write lottery.2 account
159:49 - so lottery.com info dot try borrow mute
159:55 - lamp ports all right lamp ports
159:59 - okay and then we say minus equals prize
160:04 - okay so basically
160:07 - um
160:08 - try to
160:10 - get the lottery info right
160:13 - see how many lamp ports it is and
160:16 - subtract the price from that so let's
160:19 - say the the total pot is tensile right
160:23 - basically take 10 sold from the lottery
160:25 - time all right take
160:29 - the total
160:32 - prize money from lottery.com
160:36 - okay so we successfully took the prize
160:38 - away from the lottery
160:40 - so removing the funds from the lottery
160:42 - PDA and now we can say star star winner
160:46 - dot to
160:47 - account right because we have a winner I
160:49 - believe right winner is the authority
160:52 - right so yeah so whoever is the winning
160:56 - wallet address they should be able to
160:59 - see the claim prize button right so
161:01 - basically if I were to show you visually
161:05 - um I pick a winner
161:09 - you only see this button if you are have
161:12 - the matching ticket if you are the owner
161:14 - of that winning ticket let's say I click
161:16 - pick winner and I I wasn't the winner
161:19 - like my wasn't my ticket I wouldn't see
161:21 - claim prize I would just see enter pick
161:23 - winner and create Lottery again
161:25 - make sense so that's who the winner is
161:29 - it's exactly what it sounds like so
161:31 - winner.2 account info parentheses try
161:35 - borrow right
161:38 - mute Lan ports again
161:42 - question mark and essentially this means
161:44 - plus equals price right
161:47 - so basically uh subtract that prize
161:51 - money
161:51 - to from the lottery and add that prize
161:54 - money to the winner right
161:57 - add that same amount to the winner
162:02 - okay
162:04 - cool and then the last thing we need to
162:08 - do is lottery.cleaned right by default
162:10 - this is false but now that we gave money
162:14 - to the winner we can say that that
162:16 - Lottery is claimed set that to true
162:20 - okay so then we can say MSG
162:22 - exclamation point
162:25 - all right and say
162:28 - quotes
162:29 - uh curly bracket here claimed
162:33 - it's kind of like a template literal
162:34 - lamp ports oops lamp ports from Lottery
162:39 - ID
162:41 - with ticket
162:44 - ID this all right then it's going to
162:46 - have a lot of stuff that first curly
162:49 - bracket
162:50 - is going to be the winner.key what
162:53 - public what key one
162:56 - what address one uh the second curly
162:59 - bracket will be the prize how much they
163:01 - won Lottery dot ID will be which Lottery
163:05 - is the winner from is it lottery number
163:08 - one number two right and what is the
163:11 - winning ticket ID
163:14 - okay semicolon here
163:16 - and uh we did a bunch of errors and I'm
163:19 - just realizing we should do some error
163:21 - checks up here at the top with the pick
163:24 - winner
163:25 - all right so let's do some checks
163:27 - Lottery equals that
163:30 - we can say if
163:32 - Lottery and this is again I went up to
163:35 - pick winner
163:36 - I wanted to do some error handling here
163:37 - as well so lottery.winner underscore ID
163:40 - that is
163:42 - sum
163:44 - all right
163:45 - we want to return error
163:49 - Lottery error
163:51 - right because if there is something
163:53 - already in the winner ID then we know
163:56 - that the winner already exists like
163:58 - that's if I tried to click um pick
163:59 - winner Winner's already a winner
164:01 - so that's that case
164:04 - there's also the case that uh oops we
164:07 - don't need the parentheses if Lottery
164:09 - dot last ticket ID is equal equal to
164:14 - zero
164:16 - we can return another error which is
164:19 - going to be a lottery error that we set
164:21 - up and the specific type is no tickets
164:24 - so basically if I try to pick a winner
164:28 - and nobody entered in my lottery right
164:30 - they shouldn't be able to pick a winner
164:32 - so we should get this error uh we I will
164:34 - say though for the front end we have
164:36 - some checks we wouldn't even see pick a
164:38 - winner if nobody entered
164:40 - okay so those are the checks for that
164:43 - that was just my quick tangent but for
164:46 - claim prize
164:49 - um this looks good to me
164:52 - so Moment of Truth
164:53 - let's see if I wrote singer again let's
164:55 - hit build
164:57 - yes okay use crate error
165:03 - expected 122.
165:07 - 122.
165:09 - invalid winner
165:12 - I missed something here
165:17 - oh I put a comma instead of a semicolon
165:21 - okay that's it build again
165:25 - [Music]
165:26 - okay
165:30 - this is good
165:36 - tick toe from front of the scope
165:39 - prize is not found in the scope
165:42 - what it's right here
165:45 - left prize
165:49 - and just take out these comments I don't
165:50 - think it's gonna fix it but let's just
165:51 - take these comments out
165:56 - let price
166:06 - and strange it should be in the scope
166:17 - like it's right here but I'm guessing
166:19 - it's because it's semicolon somewhere
166:22 - oh right here so under after the dot
166:24 - unwrap I can't forget the semicolon
166:28 - and Bam build successful like isn't it
166:30 - crazy how like one semicolon like just
166:32 - ruins your entire code the reason why it
166:34 - said prize is not found in the scope is
166:36 - because I say let prize here and the
166:39 - code line technically doesn't end until
166:41 - this line right here all right so it's
166:43 - saying that this whole thing I'm
166:45 - highlighting is one line if I put a
166:47 - semicolon here it makes all the
166:49 - difference so if I build
166:52 - successful hit upgrade
166:57 - and now I should be able to claim my
166:59 - prize once this is done
167:02 - okay upgrade successful and again I'm
167:05 - still have three Soul here but I haven't
167:07 - claimed my prize yet so let's go ahead
167:09 - and do that so to claim a prize I have
167:12 - to save the lottery ID which I know is
167:14 - one and if you're not sure what Lottery
167:16 - ID fetch all look right here
167:19 - I'll also fetch the ticket uh I believe
167:21 - the winning ticket was number two right
167:24 - winning id2
167:26 - so tick ID should be number two
167:29 - uh and we can do the lottery
167:32 - which we have right here minus 9C yours
167:35 - might be different
167:36 - cool and then the address of the ticket
167:39 - oops did it disappear
167:41 - yep the address of the ticket
167:44 - which is number two so to be the CN and
167:47 - again if I were put anything different
167:49 - than what I'm doing now it should it
167:50 - would fail
167:51 - my authority is me so if the prize was
167:55 - too sold I should end up with five Soul
167:57 - if this works so hit test
168:00 - test passed five so we did it we
168:02 - transferred the lottery from the prize
168:05 - from the lottery to our account and we
168:08 - are successful
168:10 - that's amazing and another reason I'm
168:12 - really happy is because you guys finish
168:14 - the smart contract so like the video now
168:17 - if you were successful of all your tests
168:18 - passed because you guys know how to make
168:21 - a lottery functional app right so
168:25 - here's what we'll do right The Next Step
168:27 - that we need to do is take
168:31 - um this code and call it within our
168:35 - front end app which is going to be a
168:37 - whole setup and itself so let's work on
168:40 - that
168:41 - all right so now we can finally start
168:43 - working on the app itself and let's just
168:46 - take a look at something before we get
168:48 - too crazy right so this is the app
168:50 - we could do an ALT Tab and we should see
168:53 - this screen right here and I want to
168:55 - draw your attention to a folder called
168:57 - uh utils right and again a lot of this
169:00 - is set up for you all right so let's
169:02 - open up utils and let's take a look
169:03 - there we have a constants.js folder so
169:07 - click this it should look pretty
169:08 - familiar right Master seed is Master
169:11 - Lottery seed is lottery ticket see this
169:13 - ticket right
169:15 - um this is why I said the the testing
169:18 - from the Solano playground if you
169:20 - understand that this part shouldn't be
169:22 - as bad all right what do we do the
169:24 - actual code
169:26 - I don't think you're gonna notice is
169:27 - that the program ID
169:30 - should match the program ID that you
169:33 - have right now so ours is h y at the
169:35 - moment so that's something to keep in
169:38 - mind
169:39 - right for later there's this helper.js
169:41 - which is a bunch of helper functions
169:43 - that we might call on later why not
169:46 - next is this program.js which Imports
169:49 - our seeds and our program ID right from
169:52 - constants
169:53 - and um
169:55 - what it does is it literally gets our
169:57 - program it's going to fetch our program
169:59 - from the chain
170:01 - and we're also going to get a couple
170:03 - things so we're going to get the master
170:04 - address right so if you guys don't know
170:08 - or understand what's going on here let's
170:10 - think about this
170:15 - how did we generate the master that's
170:17 - how we're going to talk about it so
170:18 - let's make this smaller
170:19 - make this smaller right when we
170:21 - initialize the master right how did we
170:25 - generate the master PDA
170:28 - we got it from seed and all we wrote was
170:31 - mastered right when we hit generate we
170:33 - get the 7 RX number right
170:37 - so keep that in mind all right so when I
170:41 - have a function here this is a front-end
170:42 - function that says get master address
170:46 - okay
170:47 - so it's asynchronous right again you
170:49 - might need to know some uh basic on that
170:53 - basic but some JavaScript in react
170:55 - beforehand before this and if you do
170:57 - want to learn more JavaScript we do have
170:59 - a JavaScript cache course 2022 be sure
171:03 - to watch that as well if you want to
171:04 - learn more JavaScript we teach async
171:06 - functions in there as well anyways
171:08 - Shameless plug aside
171:10 - what does this function do well ignore
171:13 - public key but basically this function
171:16 - right here is find program address
171:19 - okay and
171:21 - we want to find a program address
171:24 - with Master seed and use our program ID
171:28 - right so basically
171:30 - this line right here is
171:33 - check or get
171:35 - the master the PDA
171:38 - from these seats right so if I were to
171:40 - again show you the example if I were to
171:43 - say from seed all I said was write
171:45 - Master here put the program ID generate
171:48 - this will give us this PDA
171:51 - that's what this will do as well right
171:52 - return
171:54 - the master address so it's literally
171:55 - fetching the master address okay let's
171:58 - apply the logic to get lottery address
172:00 - Okay so
172:02 - before we look at the code of that how
172:04 - do we get a lottery right how do we get
172:07 - a lottery address right it's right here
172:10 - we got this from seed what seeds do we
172:13 - need to get the lottery address
172:14 - whether it exists or not right we need
172:18 - the lottery seed we need the last uh ID
172:22 - plus one and that's it all right so two
172:25 - things we need
172:26 - u32 we need Lottery and we need uh one
172:30 - we generate that 9C
172:32 - right and again let's check was that 9C
172:36 - it was 9C so it's predictable right
172:39 - so with that in mind
172:41 - we want to get a PDA
172:44 - with these seeds with Lottery
172:47 - and a big number I don't don't get
172:50 - scared by all this
172:51 - but it's gonna be
172:54 - ID right
172:56 - so get us a new address with that ID
173:00 - yeah cool
173:03 - so this is going to be like the one
173:05 - and again this dot two array like is
173:07 - making it a format that the seed likes
173:09 - right that's why it says buffer from and
173:12 - of course put the program ID so the same
173:14 - way that I just did it in this test
173:15 - right here to generate this PDA we're
173:18 - finding if there's anything at that PDA
173:21 - based on the seed right so again ticket
173:24 - address we had three seeds here's your
173:26 - three seeds right here
173:28 - okay cool
173:30 - awesome so and there's a function that
173:33 - gets the total prize right
173:36 - and again we need this function because
173:38 - to get the total price remember how
173:40 - let's say each ticket costs five sold I
173:43 - buy two tickets the total prize is 10
173:46 - right so the total prize is 10.
173:48 - we need to change that
173:51 - um from Lan ports
173:53 - to Seoul right or the other way around I
173:55 - believe
173:56 - I convert lamp parts per soul and
173:58 - convert it to a string right we want it
174:00 - to be a string so that we can see the
174:02 - total prize and we want to display that
174:05 - total number here a thousand sold or
174:07 - five Soul or tensile however many is the
174:10 - total right now so
174:12 - does that make sense to you guys that's
174:13 - what each function does right the name
174:16 - should give it away and if not I wrote
174:18 - comments for you guys so hopefully it
174:20 - makes sense
174:21 - so get confused think literally what
174:24 - this is mean
174:25 - cool so uh let's set it up right because
174:28 - there's two things that we need to
174:29 - change now right
174:30 - the first thing we need to change is
174:32 - this this should reflect our current
174:35 - program and this idl.json all right this
174:39 - is essentially a Json file that
174:41 - describes
174:43 - our smart contract right so here's what
174:46 - I'll do
174:47 - this is an optional step right but let's
174:50 - say uh I don't want my master
174:52 - initialized because I want to see that
174:54 - it's not initialized it so that I can
174:55 - call it from the front end I don't want
174:57 - to initialize it from here I want to
174:59 - initialize it for my front end right so
175:01 - instead of like closing all the accounts
175:04 - one way you could do this is
175:06 - let's create another smart contract and
175:10 - deploy that onto chain so now there's
175:12 - going to be another smart contract it's
175:13 - just going to have the same content
175:14 - really right which means it's going to
175:17 - have a new address
175:20 - okay so this was the original one we're
175:22 - gonna make a new one
175:23 - okay and again we don't have to write
175:25 - any new code the cool part is if you
175:27 - want to make a new program
175:30 - all right just click new here generate
175:32 - this is our new ID and E well that's
175:35 - what it is for me and I'm just going to
175:36 - hit build
175:40 - successful
175:42 - deploy oh
175:43 - I need six soul I have five uh let's try
175:46 - Solana airdrop two
175:50 - oh
175:51 - success failed okay so it failed I think
175:54 - it's because I need to switch to the
175:56 - devnet so if you haven't been doing this
175:57 - on the devnet make sure you're on devnet
176:00 - so let's try this again it's on the
176:01 - airdrop 2.
176:04 - there you go so now I have seven soul I
176:06 - like using the Genesis go devnet because
176:08 - there's two servers because this one
176:10 - fails less but you can't really airdrop
176:12 - from there uh successfully yet but cool
176:15 - I believe we built already but just in
176:17 - case build
176:20 - and deploy the contract to the chain
176:22 - right visually what I did was it took
176:24 - this contract put it on chain
176:27 - and this is the address
176:30 - so I'm gonna wait for this finish and
176:32 - I'll be right back alrighty so the
176:34 - deployment was a success right now it
176:36 - says upgrade instead of deploy
176:38 - and exist on chain the next thing we
176:40 - need to do is we need that IDL so go to
176:42 - this IDL tab and hit export all right uh
176:45 - for you if this is your first time you
176:47 - should just see IDL no number I have
176:49 - just have three ideas of my downloads
176:51 - but if you have Chrome double click this
176:53 - it'll open it in vs code
176:56 - what you want to do is press Ctrl a and
176:59 - copy this right I press I'll cut it
177:01 - instead so you can see it's like gone
177:03 - and you want to instead of this you want
177:06 - to paste it here
177:08 - all right technically it's going to be
177:10 - the same thing if you follow it exactly
177:12 - right but make sure that you have your
177:15 - latest IDL here I'm going to exit out
177:17 - the uh downloaded one and this is the
177:20 - updated Ideo you can see it's Modified
177:22 - by this m
177:23 - and again for their constants this is
177:26 - all the same but what you want to do is
177:28 - change this to your program ID how do
177:30 - you know which program ID is you can
177:32 - scroll all the way to the top
177:34 - mine's an e now yours might be something
177:37 - different and I'll paste this there and
177:39 - with that uh there that you did the
177:42 - setup
177:43 - right to connect your code but it's not
177:45 - really calling anything but all the
177:47 - setup is there the pieces are there I've
177:49 - got to put the puzzle together now
177:50 - sounds good
177:51 - okay so it's been a while since we
177:54 - looked at our front-end app so uh let's
177:56 - draw our attention to the pod card right
177:59 - because the pot card can have all the
178:01 - answers for us right so
178:03 - as you look there is some temporary
178:05 - Imports here which is probably key and
178:07 - uh the U state from react but what I
178:10 - care about is this static data and the
178:12 - static States and these static functions
178:14 - right what do I mean by Static it means
178:16 - that they're not going to change like
178:18 - the lottery ID will always be three and
178:20 - the pot will always be a thousand
178:22 - so let's just do a little side by side
178:25 - here
178:27 - something like this it's totally fine
178:30 - you know what we can even um
178:32 - do it like this
178:34 - cool
178:34 - awesome right so what makes the static
178:37 - right if I change this to like
178:41 - 50. I hit save notice how it says 50
178:44 - Soul now right if I refresh
178:47 - connect wallet initialize Master it's
178:49 - still 50 Soul okay uh what I want you to
178:52 - understand is how this all works right
178:55 - so
178:57 - if I hit refresh
179:00 - notice how I don't see the buttons why
179:02 - don't I see the buttons that's because
179:04 - of these states here right so
179:08 - the comments will guide you
179:10 - this first state is checking if we're
179:13 - connected right now so anything you
179:15 - write here is the initial state so
179:18 - what's the initial state of connected
179:19 - true or false false all right but what
179:22 - if it was true
179:23 - say true
179:24 - save we see initialize Master right how
179:28 - did that happen how come I see election
179:29 - as Master when I turn this to True right
179:31 - if you write this code by itself doesn't
179:33 - necessarily do anything the secret is in
179:36 - all of the conditional rendering right
179:39 - so basically this
179:41 - [Music]
179:43 - um
179:45 - okay cool
179:48 - let's find Ctrl F connected
179:52 - connected connected connected connected
179:54 - boom okay cool this line right here line
179:56 - 70.
179:57 - this is something called conditional
179:59 - rendering right if connected is true all
180:03 - right let's see what I'm highlighting
180:04 - load this HTML initialize Master if
180:09 - connected is false show me the connect
180:12 - wallet button which is right now uh it
180:15 - should be wallet multi button but it's
180:17 - this static button right here does that
180:20 - make sense so with that logic if I
180:22 - change this back to false
180:26 - I'm gonna show me the button cool so
180:28 - let's change that back to true
180:30 - now you notice this right now it says
180:32 - now it's just the initialize Master
180:33 - button right so connected is true
180:36 - how do we make it so we see the rest of
180:37 - the buttons like enter claim pride and
180:39 - all that that stuff right well that's
180:41 - where this other check comes in
180:44 - if his mastered initialized right this
180:48 - exclamation point is the opposite
180:50 - right
180:52 - so basically uh if false
180:55 - right load
180:57 - all of this
180:58 - right
181:00 - but what if
181:02 - if what if initialize Master is true
181:05 - right so let's just test it out so let's
181:07 - say it is initialize Master right or the
181:10 - comment for you to understand is is the
181:11 - master created for the smart contract
181:14 - all right let's change it to true
181:17 - let's see what happens it's true there
181:19 - we go all right so if
181:21 - his master initialized is true we should
181:24 - see
181:25 - all the buttons right
181:28 - cool
181:29 - now there's another one
181:31 - another state is is there already a
181:33 - winner for the lottery
181:34 - right
181:36 - if there is we should be able to claim
181:39 - the prize right because if if there's a
181:40 - winner we can claim the prize so we can
181:43 - say
181:44 - um true
181:49 - oh cool cool
181:51 - false yeah is there already a winner for
181:53 - the lottery
181:54 - let's check is finished
181:56 - is finished
181:58 - enter okay so if it's not finished
182:02 - right
182:03 - if we're connected oh this is a really
182:05 - good right this is some really good
182:06 - condition running so if we're connected
182:09 - and
182:10 - is because we're not finished we can
182:13 - enter the lottery right basically
182:17 - if this is true
182:20 - that means we can't enter anymore which
182:21 - is why I don't see the enter button
182:23 - right uh another thing that can we can
182:27 - change is if there's a winner can that
182:29 - winner claim the prize
182:31 - let's see if it's true yes
182:33 - we can claim the prize
182:35 - right so the secret to finishing this
182:38 - app is understanding all of the states
182:43 - okay another thing that's interesting is
182:47 - uh if I make this true
182:49 - I receive the buttons
182:51 - the only one who can pick the winner of
182:54 - the lottery is the person who created it
182:56 - so let's say I log in as a different
182:59 - wallet let's say I log in as qazi's
183:01 - wallet he wouldn't see pick a winner if
183:03 - he didn't make the lottery this is what
183:05 - he would see
183:06 - right here we just see enter and he can
183:08 - create his own laundry all right so
183:10 - that's what const is Lottery Authority
183:13 - right did the connected Wallet create
183:15 - the lottery
183:17 - and so that's why I don't see that
183:18 - button
183:19 - yes a lot of conditioning not
183:21 - conditioning a lot of conditionals right
183:23 - and but our goal is to take all of those
183:26 - States all of this data
183:29 - and make it Dynamic okay and the place
183:33 - that we are going to make it Dynamic is
183:35 - is
183:36 - the context so if you go to the context
183:38 - on x.js you'll see all of this code
183:42 - right here so if you're not familiar
183:44 - with context the tldr version is this
183:48 - right usually if I were to make
183:51 - um oh actually a good example is
183:53 - [Music]
183:55 - oops a good example of this is
183:57 - we have a connected variable in plot
184:00 - card correct or it lives right here but
184:02 - let's say I created that connected
184:04 - variable in index
184:06 - right how do we check if
184:09 - if I want to check the connected here
184:11 - right
184:13 - it's going to say connected is undefined
184:14 - if I only Define it in index
184:16 - but what you could do is pass it down as
184:18 - a prop right this is a react thing
184:21 - you can pass down connect it as a prop
184:23 - to pot card and then it knows what
184:25 - connected is
184:27 - right the issue
184:31 - is when you have a lot of components
184:33 - like children and let's say I need I
184:35 - need connected to go here I have to pass
184:38 - down as a prop from index to pot card
184:40 - pass it down as a prop from pot card to
184:42 - this one from that one to this one from
184:45 - that one to this one right and
184:47 - eventually if it's a long set of
184:50 - components that could lead to problems
184:53 - down the road right it's called prop
184:56 - Drilling
184:57 - and we want to prevent that and it's
185:00 - just for organization purposes as well
185:01 - we can create something called a context
185:04 - so let me just make it here
185:07 - let's move Lan ports over
185:09 - a context right and that context can
185:13 - hold all of our variables so we can make
185:14 - connected here we can put uh is Master
185:18 - initialized in here right
185:21 - and what we can do is take things from
185:23 - that little context or that store and
185:25 - bring it to where we need it so I don't
185:27 - have to bring this to index and then
185:29 - pass it down or we can make it simple
185:30 - and say like hey I need connected in the
185:33 - pot card and I need is Master unit in
185:35 - the table
185:36 - right so we can call on our context
185:39 - that's the visual way I like to see it
185:42 - right so here
185:44 - all of this code that you're seeing
185:46 - right we're creating the context and
185:49 - then we have to provide our app with
185:52 - that contact so this is the app provider
185:54 - right so what does that mean
185:56 - the same way
185:58 - right this circle right here is our
186:01 - wallet connection right we need to make
186:03 - our context there as well so I guess the
186:06 - better visual would be something like
186:08 - this let's make this blue
186:10 - and be something like this another
186:12 - Circle right like so
186:16 - right and inside we have connected right
186:20 - and I want to take that connected
186:21 - variable and put it into pot card
186:24 - okay so we gotta wrap our app with this
186:27 - app provider now
186:29 - you with me so let's go ahead and do
186:31 - that so what does that need to go
186:34 - I'd say it needs to go into the index so
186:37 - let's go an index and notice we need to
186:39 - put in that app provider right so uh if
186:42 - this is our app we should wrap it so the
186:45 - first thing we need to do though is
186:46 - import it so we can say import
186:50 - um
186:50 - app provider you can see it here
186:54 - from the contacts and provide
186:57 - right here you can say app
186:59 - provider
187:01 - take our app
187:06 - and paste it here
187:09 - and there we go so now we can use or we
187:12 - basically just drew the blue circle
187:13 - around our app so now we can take
187:15 - anything we create in here and bring it
187:18 - to wherever we want
187:21 - so anything that we create here
187:22 - functions variables put that in value
187:25 - and that's essentially how we can bring
187:26 - it out basically you're loading up your
187:28 - store and once we get to the pop card
187:31 - I'll show you how to bring it from that
187:32 - to here
187:35 - we're good cool so essentially this is
187:37 - how we create our contacts we have to
187:39 - make a function called app provider
187:42 - and then here we're going to return that
187:45 - provider with everything it needs and
187:47 - we're going to use our custom hook here
187:50 - which is going to use our context so
187:52 - that we can call it later so that's my
187:55 - explanation I hope that makes sense and
187:57 - it'll make more sense as we add more
187:59 - things to this so let's get to it okay
188:02 - so to start off we won't need to see our
188:04 - app for a while so let's go ahead and
188:06 - make this a lot bigger cool
188:09 - um usually what I like to do is let's
188:11 - import everything we need when I first
188:13 - built this you don't necessarily know
188:15 - what you'll need until you're building
188:17 - and you're like oh I need this import
188:18 - but for the sake of the tutorial I want
188:21 - to tell you everything you need so that
188:22 - we don't have to import it later so
188:24 - we'll say import
188:25 - BN BN stands for big number you can get
188:28 - this from at quotes at oh I saw at
188:32 - project serum anchor
188:35 - okay we also want to import
188:38 - system
188:40 - program
188:42 - from Solano web3js not anchor
188:47 - program and another thing is lamp ports
188:51 - per Soul this will help with the
188:52 - conversion per Seoul
188:56 - okay from
188:59 - at Solana slash web3.js
189:05 - okay so now we import
189:08 - uh use anchor wallet from Solano wallet
189:12 - adapter react and we also want to get
189:16 - used connection from there as well okay
189:18 - we also need to import something called
189:20 - base 58 or bs58
189:24 - I believe this is from Inc no it's not
189:26 - Bass
189:29 - BS 58
189:32 - from I think it's actually from BS
189:36 - 58. cool
189:39 - okay uh remember all the seeds that we
189:42 - made and the functions right from our
189:45 - utils we want to import all those
189:47 - functions too so we want to get lottery
189:50 - address right
189:52 - we want to get the master address this
189:56 - is the functions that I explained to you
189:58 - before in our program which is in utils
190:01 - uh get the program
190:03 - the get
190:05 - ticket
190:07 - address
190:08 - oops
190:10 - uh there's also get
190:12 - total prize
190:16 - you can say from
190:19 - utils slash program
190:25 - okie dokie
190:27 - and then from there let's say import
190:31 - confirm
190:33 - TX
190:34 - mock wallet this again is also coming
190:37 - from the helper mock wallet
190:39 - from
190:42 - util slash helper
190:45 - and another thing I like to import is
190:47 - toast so we can get nice notifications
190:48 - when something works or not it's good to
190:51 - have that feedback
190:53 - you saw this from the demo toast
190:57 - okay
190:59 - this looks pretty good it's just because
191:01 - I have a habit of semicolons right now
191:03 - let's do that
191:04 - core
191:06 - so all the Imports are done
191:10 - um let's see
191:12 - um
191:15 - the first thing I want to start off is
191:17 - let's make one of our static variables
191:21 - to
191:25 - the real thing right so it was in pot
191:27 - card right so the first thing I want to
191:29 - tackle is this is wallet connected and
191:32 - it says true right so
191:35 - how can we do this
191:38 - well to make this dynamic
191:41 - we need to set up what connect it is in
191:45 - the context right so what I'll do first
191:47 - is over here right above the return
191:50 - let's uh get our provider right so to do
191:54 - that we can say cons
191:57 - equal to use connection
192:00 - or not use connection yeah use
192:02 - connection all right so use connection
192:04 - and this is one of our
192:08 - hooks from Solana wallet adapter right
192:11 - connection again will hold our
192:14 - connection if it's true or not
192:16 - right but from there we want to say
192:19 - const
192:20 - wallet is equal to
192:22 - use anchor wallet
192:26 - [Applause]
192:27 - all right another thing is const program
192:30 - is equal to use memo
192:34 - right which is a react tuck did I import
192:36 - that
192:38 - yeah I need to to
192:41 - get that use memo so make sure you have
192:45 - that hook as well so that you can use
192:47 - this
192:48 - use memo
192:58 - what else do we need use memo
193:01 - so for use member we need to check if
193:03 - there's a connection
193:06 - we can return get program and get
193:09 - program is our function from our helper
193:11 - right right here which is going to fetch
193:14 - the program
193:16 - it's going to return the program so
193:17 - return
193:18 - our program
193:19 - right but we do need to pass in things
193:21 - to our Pro that function right we need
193:22 - to pass in our connection our wallet and
193:26 - if for whatever reason uh the wallet
193:28 - isn't there we do this question mark
193:30 - question mark we'll use the mock wallet
193:34 - right but if it should be there because
193:35 - you reset it up with this
193:38 - okay cool we got a program
193:40 - and uh comma
193:44 - run it if there is a connection and if
193:47 - there's a wallet try again
193:49 - okay run this cool so we have any time I
193:52 - say program uh it's going to hold all
193:54 - the information about our program which
193:57 - I'll show you in just a second but the
193:59 - main thing that we wanted was this
194:00 - wallet here
194:02 - right so
194:05 - what I'll do is in our value
194:08 - we can say
194:09 - uh connected right
194:12 - this is a variable and this variable is
194:15 - going to hold wallet
194:18 - if there's a wallet
194:20 - get the public key if there's a polo key
194:25 - it's either going to be true or false
194:27 - right so essentially connected will be
194:30 - either true or false depending on
194:33 - if we're connected right so that's when
194:35 - it makes sense so if this is true we can
194:39 - go into pop card
194:41 - and we can
194:42 - comment this out for now
194:45 - and at the top of our pod card
194:49 - let's take what we need from our context
194:52 - so to first thing we need to do actually
194:54 - is go above this temporary Imports
194:58 - comment you can say import use app
195:02 - context
195:03 - all right this is our little context
195:07 - in here so we can say
195:09 - it's called const object and we can say
195:12 - get me connected from there
195:15 - okay and this is coming from our use app
195:18 - context
195:20 - right so comment here and we'll console
195:23 - log
195:24 - connected
195:26 - connection status
195:32 - Okay cool so let's see if we can see
195:34 - that real quick
195:36 - app context oh did I already do this oh
195:38 - I did up here already so we can remove
195:40 - the import so you don't need to write
195:41 - that guys sorry I already gave it to you
195:43 - up here
195:44 - I'm too nice cool so we uh open up our
195:47 - app let's see false connection status
195:51 - right
195:53 - this should be true at some point right
195:56 - which is why we can set it to that
195:59 - cool
196:02 - and since we don't we're gonna slowly
196:05 - remove this we can put back our wallet
196:07 - multi button wallet multi-button
196:10 - uh this is self-closing
196:13 - and I believe there's another place
196:14 - where this goes
196:15 - while the multi-button and
196:19 - right here Wallace multibut
196:22 - cool
196:23 - so let's select the wallet
196:25 - Phantom and there look at that guys it
196:27 - already works all right so I refreshed
196:29 - it right
196:32 - so now it says first it was false
196:35 - right but once I connected my wallet
196:39 - if you remember our context this becomes
196:41 - true and this should become true so now
196:46 - we're there right it's automatically
196:48 - going to connect and once it recognizes
196:50 - that there is a valid Phantom one
196:52 - connected the the flag will set all
196:55 - these buttons right and again at the
196:57 - moment these don't work but our goal is
196:58 - to make it Dynamic just like that
197:02 - all right so on to the next thing I'm
197:04 - gonna go back to our code and let's
197:06 - start setting up a use effect and if you
197:08 - didn't know use effect is a react hook
197:10 - that's basically going to do something
197:11 - when we load our app okay that is the
197:15 - simplest thing I can give you right now
197:16 - if you don't know what use effect is
197:17 - right
197:20 - but what we want to do is set that up so
197:22 - in our app provider
197:25 - I'm going to go over here and say use
197:28 - effect
197:29 - like this parentheses and this is how we
197:31 - can start using use effect takes in
197:34 - Anonymous function it's very similar to
197:35 - use memo
197:37 - right but what I want to do with this
197:39 - use effect is run a function called
197:42 - update
197:43 - State all right and again if you were to
197:46 - run this right here right now it would
197:48 - say update state is not a function
197:49 - because it doesn't exist yet
197:51 - okay but uh after this Anonymous
197:53 - function put comma and then uh
197:56 - kind of right here this is what we call
197:58 - dependency module and if you put program
198:00 - in here basically when we first load the
198:03 - app Run update state
198:05 - or when the program changes or this gets
198:09 - updated run this again
198:11 - okay
198:12 - so that's set up for later let's go
198:15 - ahead and Define what the hell
198:18 - what the hell update state is so let's
198:21 - start writing it that function const
198:23 - update state is equal to a sink it's
198:27 - going to be asynchronous
198:29 - and let's figure out what we want to do
198:32 - the first thing that we want to do is
198:34 - that if there is no program
198:37 - this shouldn't run so let's just put
198:39 - return this is a check
198:40 - okay but what we want to do is a try
198:43 - catch
198:45 - all right this is usually what you do
198:46 - when something's asynchronous you want
198:48 - to do a try catch
198:51 - um
199:00 - uh maybe it's fine we could just say
199:02 - error for now and then we can say
199:04 - console.log whatever
199:07 - Dot
199:09 - cool okay as I was saying
199:13 - I want to do a try catch and that first
199:16 - thing you want to check is if there's a
199:18 - master right so
199:20 - for whatever reason there is no master
199:24 - address that's what this is saying
199:28 - then
199:29 - we need to
199:31 - get the master address right
199:36 - so
199:37 - um how do we get the master address
199:39 - think back to our
199:43 - folder here
199:44 - in our program how did we
199:47 - get it right we need to call this
199:49 - function right we're getting it from its
199:50 - seed so we're going to call this
199:51 - function and we actually imported right
199:54 - here we're going to call this function
199:57 - um but then the next question is
200:00 - how do we save the master address
200:03 - because after we save after we get it
200:05 - how do we save it all right so that's
200:07 - where another hook called you state is
200:11 - going to come from and if you just
200:13 - remember the pot card that's where
200:18 - of this is what a new state is right
200:20 - it's basically
200:22 - saving the state that this variable is
200:27 - in is true is it false is an array is
200:30 - there stuff in that array all right you
200:31 - can do that by state
200:33 - so what we want to do is we're going to
200:35 - end up with a bunch of State variables
200:38 - in this app provider right one of the
200:41 - first things we can write is const
200:43 - Master address
200:45 - Master address
200:47 - set master address
200:51 - okay is equal to use state
200:54 - okay cool
200:56 - so there we go so now if there is no
200:59 - master address which that's true there's
201:02 - no master address right now we need to
201:04 - get the master address
201:07 - so how do we do that we can say const
201:10 - uh master
201:12 - address or you can call this variable
201:14 - the same name it's fine you can say
201:15 - await get mastered if it's a function
201:18 - right otherwise if I didn't make that
201:21 - function in my utils I would have to
201:24 - write out that function here this is so
201:26 - we can just organize it a little bit
201:28 - better
201:29 - cool so then how do we save the master
201:31 - address we can say set master address is
201:34 - Master address
201:37 - okay
201:38 - cool so now we have it right so that
201:41 - means this if block wouldn't run
201:44 - right so
201:46 - um
201:51 - another thing we can do is
201:52 - say cons master
201:57 - is equal to await program I remember I
202:01 - said when I say program gives you all
202:02 - the information
202:04 - we can get the actual object right so
202:07 - yes we got the master address we need to
202:10 - do now is fetch the object right so when
202:13 - you saw me do a fetch all
202:15 - oh yeah there's no Mastery but before
202:16 - there was something here right there was
202:19 - the master account you can fetch an
202:21 - individual account by just writing it
202:24 - right here so this is how you got the
202:26 - singular account you can say program dot
202:29 - account
202:30 - dot master
202:32 - fetch
202:34 - oops
202:35 - my master
202:37 - dot fetch
202:39 - and what we want to put inside here is
202:41 - the master address the public key that
202:44 - we get from here
202:46 - after we fetched it
202:48 - and or if it does if for whatever reason
202:51 - it's not there we can say await that
202:53 - Master address again and get it all
202:56 - right so that's what this question mark
202:57 - question mark is so
202:59 - if it's there this will run if whatever
203:01 - reason it's not there we can get it
203:03 - right here
203:05 - does that make sense so far
203:08 - um
203:09 - another thing that we should do
203:12 - is
203:13 - set initialized right so we need another
203:16 - state
203:17 - all right our states help us keep track
203:19 - so let's say const
203:21 - uh initialized
203:25 - and that shouldn't be Capital it should
203:26 - be lowercase
203:28 - initialized
203:29 - you can say set
203:32 - initialized
203:34 - and set that equal to
203:37 - use State and the default state of
203:40 - initialize is going to be false
203:43 - and check pocket yeah so that's
203:46 - essentially the same as this is the
203:48 - master initialized
203:49 - so if it's initialized we're good it's
203:52 - not false
203:54 - cool
203:57 - all right so uh if we there is a mat if
204:00 - we're able to fetch a master right we
204:03 - can set initialize to true
204:08 - awesome
204:13 - yep and this is just update state
204:16 - just going to run that it's going to do
204:18 - these checks
204:22 - it's console log it console log
204:24 - Master address because there shouldn't
204:25 - be in a master address
204:32 - okay say refresh
204:35 - select wallet Phantom
204:40 - oh yeah account does not exist so there
204:42 - is no master but because there's no
204:44 - master we shouldn't see these three
204:46 - buttons we should see initialized Master
204:49 - first all right so what we need to do is
204:51 - we need to pass something in this value
204:53 - here so to keep track of that state
204:56 - right so what was it called we call the
204:59 - is master initialized I mean yeah let's
205:01 - just skip that same naming we could say
205:03 - is master
205:06 - uh initialized
205:10 - and uh give it a new name Click put
205:14 - initialize here so
205:16 - whatever the value of this initialized
205:18 - is is going to be the same as is Master
205:20 - initialize basically
205:22 - um I'm giving it a nickname right if
205:24 - your nickname is Robert if your name is
205:27 - Robert
205:28 - here's Robert
205:29 - I'm gonna call you Bob
205:31 - that's basically what it says and the
205:33 - reason you see Scooby is because we need
205:34 - a comma here so this is the nickname of
205:38 - initialized right so let's bring it save
205:40 - it let's bring it
205:42 - here
205:44 - oh yeah we can erase this now because
205:45 - yeah we do have a wallet connected
205:48 - and we have this guy now so we can erase
205:51 - this
205:53 - in our context so let's get is Master
205:55 - initialized comma
205:58 - so let's hit save and let's see if it
205:59 - works select wallet connect hey all
206:02 - right that's true right there is no
206:04 - master account and there's proof in our
206:06 - backend right here no master account
206:09 - so now when I click initialize Master
206:12 - right we need to be able to create the
206:16 - master right so uh how did we do it when
206:19 - our cell on a playground
206:20 - right we fetched oh we fetched it we
206:23 - tested it by running it here
206:25 - we want to now run it in our front end
206:28 - code all right so that's exciting
206:31 - Okay so
206:33 - now how do we call it in our front end
206:35 - I'm glad you asked what you should do is
206:38 - let's go back to our context
206:40 - let's scroll to
206:43 - where the end of update state is right
206:45 - so underneath update State uh we can
206:48 - make another function called const init
206:53 - IAL right
206:54 - and here we're going to make a comment
206:56 - of
206:56 - um
206:58 - call
206:59 - Solana program
207:01 - instructions here so anytime we're
207:04 - calling something from our smart
207:06 - contract on the blockchain
207:08 - this is what we're going to call it from
207:09 - so it's going to be called Enid master
207:12 - equal to async
207:16 - and if you don't know what I'm saying
207:17 - basically
207:20 - over here
207:22 - we want to
207:24 - call
207:25 - our smart contract writes this one we
207:28 - want to call our smart contract from our
207:29 - front end so basically we're going to
207:32 - make a function in our context that
207:35 - talks to our smart contract that runs
207:38 - the function that will create a master
207:41 - okay
207:43 - so me just writing this function right
207:46 - now
207:48 - this this is not me calling it just yet
207:50 - and I'll show you what's calling the
207:52 - Solana instruction
207:54 - okay so first thing you want to do is a
207:57 - try catch
207:58 - catch right here
208:00 - error and we can say
208:02 - console.log error Dot message
208:06 - okay
208:07 - cool
208:11 - so yeah what do we want to try here well
208:14 - we want to say cons TX hash
208:17 - all right to transaction hash because
208:19 - every time you uh call something from
208:24 - the salonist program that counts as a
208:26 - transaction right and this TX hash is
208:29 - the variable that holds all the
208:31 - information so how do we call that Salon
208:34 - instruction you need to say wait
208:37 - program right because program is going
208:40 - to hold all the information it holds the
208:42 - accounts where we did I got accounts but
208:44 - it also holds all of the instructions
208:46 - and it's going to hold it in dot methods
208:49 - right so dot methods and then you want
208:51 - to say
208:52 - dot unit Master the name of the method
208:56 - right if you remember we called it init
208:59 - under a knit Master right here so get
209:02 - the same the name of the function if I
209:03 - want to call create Lottery we say
209:05 - create Lottery right this is init master
209:08 - and again it doesn't matter if I press
209:10 - enter here it's the same thing
209:12 - right then you want to get the dot
209:15 - accounts right so what am I doing by
209:17 - when I say dot accounts this is the
209:19 - context guys you understand all right so
209:22 - every here is where we put all the
209:24 - context so what's the context of this
209:27 - I don't know so all the testing
209:29 - practices coming in so the accounts that
209:31 - we need is a master
209:33 - and the payer right how do we get the
209:35 - master we got it from the seed right all
209:38 - right so what we can do here is say
209:40 - master
209:42 - and then underneath we can say payer
209:44 - right because I believe that's what we
209:46 - called it right pay
209:48 - oops
209:49 - payer all right so that's that's good
209:51 - payer and the system program all right
209:55 - so don't mind the squiglies we'll fix it
209:57 - in a second
209:58 - so if you want to tackle oops if we want
210:01 - to tackle the master here we have to say
210:03 - semicolon and then put
210:06 - semicolon and then put the publicly
210:10 - we're going to put a public key here
210:11 - right but we can't just write public key
210:13 - we want to write Master address
210:16 - wow why are we writing Master address
210:18 - here well if you remember where Master
210:21 - address comes from
210:23 - all right if there's no master address
210:25 - we're gonna get the master address
210:29 - right and how did we get the master
210:32 - address we're gonna put in the seeds
210:34 - right that's why I asked you to
210:35 - understand
210:37 - what this program.js does all right
210:40 - we're gonna put the master
210:42 - the the string and we'll get an address
210:44 - right that's the same as me doing
210:48 - this boom ja right cool
210:52 - so
210:54 - because we set up that program.js
210:58 - it's going to make our lives easier here
210:59 - so all you have to write is Master
211:00 - address here and we're good
211:02 - because the value of this is going to be
211:04 - the public key of the address that we
211:07 - generated from seed and now for the pair
211:12 - and now for the pair it's going to be
211:15 - the wallet Dot Public key
211:21 - another persistent program
211:23 - it's going to be system
211:27 - program dot program ID
211:30 - that's how you get the program ID we
211:32 - need
211:33 - I'm not sure why this is freaking out
211:37 - if I miss something
211:43 - oh I think I know uh sorry accounts
211:46 - should have an up it should be all in an
211:47 - object
211:53 - so
211:55 - put that all in here
211:57 - there you go no more squigglies we're
211:59 - good to go so yeah
212:00 - I'm giving our function Our Salon
212:03 - instruction the context which means
212:05 - Master pair System Program Master
212:08 - address generates it from seed I put in
212:11 - my authority the program ID is already
212:13 - here
212:15 - cool uh the only thing you need to do is
212:17 - make sure you type in RPC because we
212:19 - need that and then we can say oh wait
212:22 - confirm TX right because I want to
212:24 - confirm that my transaction went through
212:27 - right that's what uh is that here I
212:30 - think it's in a helper function
212:33 - yes all right because we want to
212:35 - validate that our transaction went
212:37 - through
212:39 - okay and by saying await confirm TX pass
212:43 - in the transaction hash and then we can
212:45 - say passing the connection
212:47 - cool and after that
212:50 - we can just update the state I remember
212:52 - we wanna we made a function called
212:53 - update state
212:55 - so it's going to initialize the master
212:58 - which will then update the state which
213:01 - will then do this check
213:02 - which will then set the master right
213:07 - and I'm trying to think if there's
213:09 - anything else I need in here
213:11 - [Music]
213:11 - um
213:22 - master master
213:26 - oh okay yeah we don't need to worry
213:28 - about this just yet
213:30 - but it should make this true
213:34 - right set initialize to true
213:38 - because the reason why it said uh
213:40 - account not found is because we got to
213:43 - this point and then it failed right you
213:46 - couldn't get a master address doesn't
213:48 - exist so it went to the catch and that's
213:50 - why we saw account fail but since it
213:52 - doesn't fail it's actually going to set
213:54 - this to true so let's see if that works
213:57 - let's go back to our app Moment of Truth
214:01 - select wallet Phantom
214:04 - inspect element console right
214:07 - count does not exist let's click
214:09 - initialize master
214:11 - oh okay set is Master initialized oh duh
214:15 - all right so the reason why it has
214:17 - failed is because yes we created the
214:20 - function but notice how it's kind of
214:22 - grayed out
214:23 - we need to pass it and not through our
214:25 - contacts and then plug it into that
214:27 - button I can't forget that step let's
214:29 - put a comma here let's say init
214:32 - master
214:35 - okay
214:36 - so now this shouldn't be grayed out
214:39 - pot card
214:42 - where is our contacts we say init master
214:47 - right and there's a function this is the
214:50 - static function right here unit Master
214:52 - we can get rid of that now
214:55 - right and we don't have to plug it to
214:57 - the button itself because it has the
214:59 - same name
215:00 - so right here on click in it master
215:04 - so now we should be good to go let's
215:06 - select wallet
215:08 - and now it's in the master oh okay all
215:11 - right I have to cross my fingers but if
215:12 - you see this approved transaction this
215:14 - is a very good sign and cool we can
215:16 - actually see how much soul that we use
215:18 - we can hit approve
215:22 - hey look how it automatically changed we
215:24 - made it Dynamic right and I forgot to
215:28 - put the toast but usually it'll be
215:30 - another notification here that says uh
215:32 - it was successful all right so now
215:35 - there's a master and the cool part is we
215:37 - can check it on this end too we can do a
215:39 - fetch all boom there it is
215:42 - all right last ID bam
215:45 - cool so now uh there's a couple things
215:47 - now I want to check all right we should
215:49 - see if there is a uh the lottery ID well
215:52 - actually now we can't see the lottery ID
215:54 - so let's work on creating a lottery next
215:59 - all right so you want to figure out how
216:01 - to make a lottery let's go back to our
216:04 - contacts right and let's set it up
216:08 - right so the side up we just have to
216:10 - make that function again so underneath
216:11 - the net Master let's go right create
216:14 - Lottery
216:15 - so we say const create
216:19 - Lottery
216:21 - all right is equal to an asynchronous
216:24 - function
216:27 - and the same way we did this
216:30 - it's going to be very similar right so
216:33 - um
216:36 - what else did I do here oh yeah we could
216:38 - say toast dot success so next time we'll
216:41 - see the notification uh master
216:46 - or initialize master initialized
216:50 - master
216:52 - cool and just in case it failed you say
216:54 - toast dot error
216:57 - you say error Dot message
217:00 - perfect Okay cool so that we just
217:02 - finished up the init Master but to
217:04 - create the lottery uh what did we do
217:07 - first we did a try catch
217:11 - error and we can console the log the
217:17 - error.message or we can also do a
217:19 - toaster error
217:21 - and put the error
217:23 - Dot message because it's going to
217:24 - disappear I don't want to disappear cool
217:26 - so for the try catch what are we doing
217:29 - well we want to set up the lottery
217:32 - address right
217:34 - so you want to say const Lottery
217:38 - address
217:40 - oops address
217:44 - foreign
217:48 - get lottery address but now the key is
217:50 - this
217:51 - we need to pass in the lottery ID right
217:55 - and again that's because this function
217:58 - is essentially doing this part right
218:02 - it's going to create Lottery it's going
218:05 - to this and we're going to generate from
218:07 - seed which is Lottery right now I'll
218:09 - caps but Lottery which is the oops and
218:15 - the last lottery ID plus one which would
218:17 - be one and we generate should be 4q
218:20 - right I don't think it actually does the
218:23 - plus one on the front end though let me
218:27 - check the control B and let's quickly go
218:29 - to our program and see how it works
218:34 - Okay cool so it takes in an ID
218:36 - right so we need that means we need to
218:38 - plus one
218:40 - before we pass it in
218:43 - so
218:45 - let's go back to contacts so basically
218:48 - we want to say Lottery ID plus one so
218:50 - how do we get the lottery ID
218:53 - the first thing I would say is Let's
218:54 - Make a state for it so let's go up the
218:57 - top
218:58 - and again like I said we're gonna end up
218:59 - with a bunch of States here guys so
219:01 - let's say const Lottery lost 3 lottery
219:04 - ID set Lottery
219:08 - ID set it equal to use State and we can
219:12 - uh we can leave a blank
219:14 - yeah we can leave a blank because we're
219:16 - gonna set it anyways cool so when do we
219:19 - get our first Lottery ID well if you
219:23 - remember why we set up the master
219:26 - we get it from master dot last ID right
219:30 - so do we have access to master
219:32 - right so we're checking if we don't have
219:34 - master we're getting it if we don't
219:36 - we're saving it or we can even erase
219:38 - this
219:39 - uh so then we get the master the reason
219:42 - why we stated it in this variable is
219:44 - because now we can say set Lottery ID to
219:48 - master and then how do we get the last
219:51 - ID from this you can say dot uh last
219:54 - let me see last ID so literally last ID
219:57 - so now
220:00 - after after this runs
220:02 - when I say Lottery ID this should hold
220:04 - the value of zero currently
220:07 - right so we'll always update so
220:09 - basically whatever the lottery ID is
220:13 - plus one right because this function is
220:16 - only going to run if there is a master
220:18 - so there goes that check
220:21 - so I think you're with me now so after
220:23 - we get the lottery address this would
220:25 - give us a public key
220:29 - okay that's the type it's not going to
220:31 - give us this Lottery just isn't going to
220:33 - hold a number it's going to hold the PDA
220:38 - okay so now that it's holding the PDA we
220:42 - can take that information and say cons
220:45 - TX hash because we want to confirm this
220:47 - later
220:49 - VX hash
220:51 - cool two await
220:53 - program dot methods
220:56 - and what method do we want to call guys
220:58 - we want to call
221:00 - oops dot create
221:03 - Lottery okay and we want to say new
221:08 - uh BN
221:10 - right
221:13 - cool
221:14 - why do you want to say Nubian because
221:16 - when we create a lottery
221:21 - we need to define the ticket price
221:24 - okay
221:25 - uh remember when we put the ticket price
221:28 - here we said we put nine zeros one two
221:30 - three four five six
221:33 - uh
221:34 - uh 6 79 and then we put one here this
221:39 - will cost one Soul right the price isn't
221:42 - hard coded on the contract we can
221:44 - actually determine the price right here
221:46 - right so if I put one here and say dot
221:49 - and that multiply uh new BN uh lamb
221:54 - ports per Soul this is the same thing
221:57 - this would generate the same number as
222:01 - this all right zero zero zero zero zero
222:04 - zero zero zero zero that should be nine
222:05 - zeros cool
222:07 - so this is one Soul this will give me
222:10 - one soul and you know what just like the
222:11 - demo let's up the ante let's give it
222:13 - five all right so how much does uh when
222:16 - I create a lottery by default it'll be
222:18 - five right if you want to make this
222:20 - Dynamic uh you wanna you can put an
222:23 - input field somewhere here
222:25 - set the state and when you create a
222:27 - lottery that's how much that Lottery
222:29 - price would cost all right but for now
222:31 - to keep things simpler uh we're gonna
222:35 - put five soul
222:37 - okay
222:38 - cool so after we create uh that argument
222:42 - let's pass in the context and what
222:45 - context does this function take in I'll
222:47 - tell you it takes in a Lottery account
222:50 - oops
222:51 - it takes in a master account
222:54 - takes in a Authority
222:58 - and takes in a system program of course
223:01 - cool so don't worry we're going to
223:03 - Define all this so lottery address we
223:06 - actually get it right here all right
223:07 - this is gonna generate it from seed and
223:11 - we're going to put in a variable of
223:12 - letter ID plus one
223:15 - and we're gonna say Larry dress cool so
223:18 - what is the master we should already
223:20 - have uh the master address it's in the
223:22 - state right so that's nice and easy
223:25 - The Authority is also easy we can say
223:27 - wallet
223:28 - right our wallet and get the public key
223:32 - and then persistent program
223:34 - security standard you say System Program
223:37 - dot program
223:39 - ID
223:42 - and then you can say dot RPC right here
223:44 - oops RPC
223:47 - and we want to confirm the transaction
223:49 - so we say confirm
223:51 - DX
223:53 - TX hash
223:55 - right and connection right so if you're
223:57 - coming from uh the to-do app Airbnb or
224:01 - the blog app this is like the proper way
224:04 - to do everything
224:06 - right so and again there's more than one
224:08 - away I'm not saying there's a right or
224:10 - wrong way it's nice to confirm the
224:11 - transaction
224:13 - after it's done we then want to update
224:16 - the state
224:17 - and this time I want to see a nice
224:19 - message so we'll say toast that's
224:21 - success
224:23 - and we'll say
224:25 - Lottery
224:27 - create
224:30 - okay cool
224:33 - awesome so let's take this create
224:34 - Lottery it's grayed out
224:36 - and put it right here oh
224:38 - don't know oh I actually made the
224:40 - Whiteboard sorry about that cool so
224:42 - let's take it and put it right here
224:46 - you can say create
224:48 - Lottery
224:50 - and if we do that we need to bring it
224:53 - into pot card
224:55 - so we have the static create Lottery
224:57 - let's go ahead and erase that let's
224:59 - erase the static connect wallet all
225:01 - right this is basically our to-do list
225:03 - right here
225:05 - um
225:07 - yep over here after a net Master you can
225:10 - say create Lottery and we don't need to
225:12 - plug it into the button because it has
225:13 - the same name I made a nice and simple
225:16 - Okay cool so let's go back to our app
225:19 - select the wallet
225:21 - and we want to create the lottery
225:25 - hey okay so again this is the first good
225:27 - sign that we can it's going to ask us to
225:29 - sign and approve
225:31 - and let's hit approve
225:33 - we wait a lottery created right so we
225:36 - made a lottery uh we can double check
225:39 - this on our back end by fetching and
225:43 - there we go we have the uh Lottery ID
225:47 - we don't know the winner we have the
225:49 - last ticket ID and we have the authority
225:53 - right so who has Authority 8T which is
225:56 - the one who created this Lottery right
225:59 - so a couple things here now this this is
226:02 - technically incorrect right lottery
226:04 - number three it should be zero right
226:07 - same thing with this this should be
226:09 - uh zero Soul because there's nothing in
226:11 - the pot so why don't we work on those
226:13 - two things
226:16 - okay so like I said we want to change
226:18 - these static variables into the actual
226:20 - variables other words make it Dynamic
226:22 - it's actually pretty simple right so if
226:25 - we go back to our code
226:27 - in the pop card this is the stack data
226:29 - we want to change all right right now
226:30 - it's three pots 50 right if we go to our
226:33 - context let's actually make those dates
226:37 - and the cool part is the first part's
226:39 - done we already got a lot already I just
226:41 - need to make const uh Lottery pot
226:45 - postpart
226:47 - and say set Lottery
226:49 - pot
226:51 - alright so we'll just set this
226:52 - temporarily
226:53 - State boom and
226:56 - yeah we cleaned that blank so let's
226:58 - start with Lottery ID the cool part is
227:00 - we already have that set up we're
227:02 - getting it from the master
227:05 - I'm gonna put all of our instructions at
227:08 - the bottom
227:09 - but for the lottery ID we'll say Lottery
227:11 - ID
227:14 - and comma and once we do that we can hit
227:17 - save and we can go to pot card
227:20 - let's bring that in
227:23 - Lottery ID
227:26 - and now notice how there's two Lottery
227:27 - IDs that can happen we can erase this
227:29 - now
227:30 - save and take a look guys lottery number
227:33 - one and is that accurate right because
227:36 - ID is one
227:38 - we got lottery number one so when I make
227:40 - a new Lottery this will automatically
227:42 - change
227:43 - when I update the state right so that's
227:45 - why I made an update State function so
227:47 - it just literally updates our front end
227:49 - uh with the correct State now let's work
227:52 - on the pot
227:54 - so yeah this is our static one go back
227:57 - to our context
227:58 - and uh you know what we can go to the
228:01 - top let's put it above unit master and
228:04 - let's make a
228:06 - get pot function right so that next
228:09 - should be pretty simple we can say const
228:13 - get pot is equal to async
228:17 - and we can say constant pot
228:20 - is equal to we have a function that
228:22 - doesn't get
228:23 - total prize I gave this to you and if
228:25 - you're curious on how it works
228:28 - um feel free to check it out in program
228:31 - all right good bye
228:34 - cool so get total prize we just gotta
228:36 - pass in the lottery all right what is
228:39 - the lottery
228:41 - okay so we that means it's a state that
228:43 - we have to set
228:44 - all right because we need the
228:46 - essentially the address of this
228:47 - so let's set up that state
228:52 - uh over here const
228:56 - foreign
228:59 - set Lottery
229:01 - is equal to use state
229:05 - and we can set this to empty I believe
229:09 - yep you can set it empty and another
229:12 - thing that we're going to need to do is
229:15 - first set what that lettering is because
229:16 - right now it's nothing so when we pass
229:18 - it into get pot it wouldn't work
229:21 - we gotta go to update State boys and
229:23 - girls and we need to go
229:26 - underneath set Lottery ID
229:28 - right we need to get that lottery
229:30 - address so how do we get the lottery
229:31 - address we can say cons
229:33 - lottery address
229:35 - is equal to a weight get lottery address
229:40 - and say
229:43 - we can get the lottery address
229:45 - by passing in the master that last ID
229:48 - there you go and we don't need to plus
229:49 - one here because we're not making a new
229:51 - one right we're just fetching the
229:53 - current one based on the last ID
229:57 - so from there we can say
230:00 - uh
230:03 - actually no this is getting a different
230:04 - state so we need two states actually so
230:06 - we need to say cons
230:09 - lottery address that's going to help us
230:11 - later
230:12 - set Lottery
230:14 - address is equal to use state
230:19 - cool
230:22 - awesome
230:25 - all right so yeah this first one uh we
230:26 - didn't really need quite yet but since
230:28 - I'm already here we want to set lottery
230:30 - address to that lottery address
230:33 - so the same thing with the master we can
230:35 - call this one instead because that's
230:36 - going to be the current lottery
230:38 - right so it's a lottery just and now for
230:40 - the real thing to get the lottery pot
230:43 - you can say cons Lottery goes await
230:46 - program dot account dot Lottery right
230:50 - because we're going to fetch a specific
230:52 - lottery so if we're going to fetch One
230:54 - account we want to fetch it by the
230:55 - lottery address so now that makes sense
230:57 - we want to get this first and then do
230:59 - this right so let me show you what I
231:01 - mean basically what we did with these
231:03 - two lines of code or this line of code
231:05 - specifically line 57 for me is we go to
231:09 - your app
231:10 - go to here
231:12 - um
231:13 - let's copy that public key and let's
231:15 - just uh do a little bit of this
231:18 - boom so notice how I'm not fetching
231:20 - anything I paste in that publicly this
231:22 - is lottery address right here
231:25 - this right here
231:27 - and I'm taking that address
231:30 - I'm pasting it here and fetching it and
231:32 - then it gives me a singular object right
231:34 - so again in our code we get the public
231:37 - key we fetch an account with that
231:41 - address and store that object here
231:44 - console Lottery and then to save it we
231:47 - say set Lottery
231:49 - his daughter
231:50 - Okay cool so now
231:53 - when we do get pot I mean get total
231:56 - prize we just have to say
231:59 - you should get a total prize Lottery
232:01 - and then
232:02 - set
232:03 - Lottery put
232:06 - and set it to the pot right so this is
232:08 - why we have so many states so I gotta
232:10 - keep track of all this
232:11 - not any not an easy build but if you
232:14 - guys made it this far I'm really proud
232:15 - of you so it gets but
232:18 - comma
232:20 - and why not get quite calm on my bed
232:24 - you can say uh Lottery pot yeah Lottery
232:27 - pot that's all we need
232:29 - and what did I say before I said I
232:30 - wanted to put all the functions there
232:32 - and all the data here
232:34 - cool so now we got Lottery pot in store
232:37 - so we can go here and say Lottery pot
232:42 - erase the static data
232:44 - all right so we can cross that off our
232:46 - to-do list we only have this left and
232:48 - all these functions
232:50 - we can save and now what is our pot
232:54 - should be zero yeah should be zero Soul
232:57 - or nothing
233:00 - oh yeah that makes sense there's no
233:02 - there's nothing in there but if you did
233:03 - want to see a number
233:05 - right if it's zero Soul we can set our
233:07 - initial state to that so uh let's go to
233:10 - context
233:13 - all right there's literally no Solana in
233:15 - there so that's why it's literally
233:16 - nothing
233:17 - so let's do Lottery pot here zero I
233:20 - might change this actually all right now
233:22 - we're good zero soul
233:25 - Lottery
233:27 - pot
233:29 - oh I see why it's still saying zero
233:31 - because we didn't we didn't call get
233:34 - buttery pot and we have to call the
233:37 - function and we want to call the
233:39 - function
233:43 - we need to make another use effect
233:45 - that's what I'm thinking so let's make
233:46 - another one so this use effect right
233:49 - here
233:52 - this one is going to get pot
233:55 - all right so we're gonna get the pot and
233:58 - if it does work it'll set the state so
234:01 - now if I hit save here
234:03 - last
234:06 - ticket ID
234:08 - Lottery
234:13 - [Music]
234:17 - okay so it's not sure what Lottery is
234:23 - all right let's troubleshoot this so to
234:25 - troubleshoot this
234:26 - [Music]
234:30 - oh wait maybe you should have a check
234:32 - here if there's no Lottery
234:35 - return
234:41 - oops
234:43 - there you go yeah that's because uh we
234:46 - need to wait for it to fetch it and then
234:49 - there'll be a lottery otherwise it's
234:50 - gonna run that command
234:53 - before it's even there so that's why we
234:54 - need to check this first so
234:57 - it's going to keep running this code but
234:59 - once there is a lottery get the pot so
235:01 - now it's zero soul and that makes more
235:02 - sense it should be zero we don't have to
235:05 - initialize the state with zero and yeah
235:07 - there you go reset the lottery ID and
235:09 - the lottery pot
235:11 - all right so what's next guys well let's
235:13 - take a look if I go to my app we need to
235:16 - be able to enter and buy a ticket and
235:19 - our tickets are pretty expensive it's
235:20 - five Salon all right so in order to buy
235:24 - a ticket we have the button set up we
235:26 - just need the function
235:28 - so we can scroll all the way down to
235:31 - here and let's make a function uh buy
235:34 - ticket so we say const by ticket I can
235:39 - go a little bit faster now because you
235:40 - guys should start seeing the pattern
235:42 - but it's going to be a sync
235:45 - right what do we put here try
235:48 - catch
235:50 - all right error I'm not even gonna do
235:52 - the console log because we can just do
235:54 - the toast that error
235:56 - and say air Dot message
235:59 - and for the try
236:01 - you guys know we're buying TX hash
236:04 - equals a weight program
236:08 - dot methods okay and then what method do
236:10 - you want to call
236:11 - it's going to be buy ticket
236:14 - and then it's going to be a lottery ID
236:17 - right we have this state right and it
236:20 - should be uh one because that's what
236:22 - we're on
236:23 - and we could do another dot accounts
236:25 - this is our context
236:27 - expects an object and our context is
236:30 - what
236:31 - Lottery
236:33 - ticket
236:35 - Oops why can't I do ticket
236:39 - and not ticket seed sorry ticket
236:43 - and the buyer I believe right we call
236:46 - the buyer
236:47 - buyer and we need System Program all
236:51 - right these are the all the accounts we
236:52 - need all right just to prove it to you
236:57 - when I buy a ticket
236:59 - we have lottery ticket buyer System
237:01 - Program lottery ticket buyer System
237:03 - Program right
237:05 - okay so again we should have all of
237:09 - these we say lottery address because we
237:11 - have the state now which is so nice I
237:13 - don't have to say const uh lottery
237:15 - address and then fetch it here we
237:17 - already saved the inner state so we can
237:20 - reuse it so now the key part is ticket
237:22 - uh we don't have this saved but we can
237:25 - get it by saying oh wait
237:27 - get oops wait get ticket address right I
237:31 - set up a function in our utils and uh
237:34 - it's gonna take in two things I believe
237:36 - it's gonna be our lottery address which
237:38 - we have and the lottery
237:41 - or this is our object
237:43 - dot last ticket ID
237:47 - right plus one all right so this ticket
237:51 - ID will be id1
237:54 - cool uh now we put a comma here after
237:57 - that function and we say the buyer is
237:59 - the same as us which is wallet our
238:01 - wallet Dot Public
238:05 - okay and the system program is capital
238:08 - System Program dot program ID I'm sorry
238:12 - if this is boring because it's the same
238:14 - thing over and over but this is really
238:16 - cool because once you understand how to
238:17 - do this pattern you can learn to make
238:19 - any app you want you can make Twitter
238:21 - all right we made Facebook together you
238:23 - can make a better version of that now
238:25 - right
238:28 - yeah yeah so then from there we can do
238:30 - dot RPC
238:33 - and we can say await
238:36 - confirm TX which is our helper function
238:39 - TX hash
238:41 - and we pass in our connection
238:44 - cool and we say toast.success
238:47 - and we say
238:49 - bot a ticket
238:52 - let's pick a capital for emphasis
238:56 - okay uh yeah we're good so this is our
238:59 - function by ticket
239:01 - let's go to the bottom here and say by
239:02 - ticket
239:04 - cool
239:06 - we bought the ticket
239:08 - we go to pop card
239:10 - we gotta bring them by ticket
239:14 - and you see this quickly because it
239:15 - already exists there's our static
239:17 - function
239:19 - you can erase that now we only got two
239:21 - static functions left
239:23 - right we don't need to put it in the
239:24 - button because it should already be
239:25 - there
239:26 - so back to our code
239:28 - we have one Lottery it's one
239:31 - all right let's hit refresh actually
239:33 - boom one
239:34 - uh we can't pick a winner yet we can't
239:37 - create a lottery right this doesn't mean
239:38 - anything but if I hit enter
239:41 - good sign and look at that it's
239:44 - literally gonna take five salon for me
239:46 - it tells me how much it's gonna take
239:47 - plus tax of course it's kind of like tax
239:49 - Network fee
239:50 - but um let's look yeah something went
239:52 - wrong there's our toast
239:54 - but let's look into our Phantom real
239:56 - quick I have 18 Souls so after this I
239:58 - should only have 13 so so let's see if
240:01 - it actually takes my money and that five
240:04 - Soul should be updated in our pot right
240:06 - because we're gonna update the states
240:08 - right so what we need to do is not
240:11 - forget
240:13 - um
240:14 - after we confirm the transaction we can
240:18 - say update state
240:20 - all right don't forget to call that
240:22 - we're going to call update state every
240:23 - time our transaction goes through
240:24 - because if we update the state our pot
240:27 - will get updated
240:28 - and anything else so let's select wallet
240:31 - let's hit enter
240:34 - 5 soul
240:35 - approve
240:37 - bought a ticket and look at the pot
240:39 - automatically updated we can check how
240:41 - much money we have report we spent 13.
240:44 - and just for fun
240:46 - um
240:46 - let's make it interesting and let's
240:50 - switch to my other wallet
240:52 - let's see this is my cozy wallet have
240:54 - anything we have seven soul okay so 50
240:57 - 50 shot will cause you win money I will
240:59 - lie with money right so let's make Kazi
241:01 - enter
241:02 - it's gonna cost him five sold
241:05 - tensile right so that means either I can
241:07 - win or cause you can win
241:09 - uh but who was able to pick a winner
241:11 - Kazi shouldn't be able to pick a winner
241:14 - because he didn't make the lottery only
241:16 - I should be able to pick a winner so
241:19 - yeah this pick winner thing should be us
241:23 - right it should only be us so maybe
241:25 - let's set that uh button before we
241:28 - create the functionality but other than
241:30 - that that's how we buy a ticket let's go
241:33 - well so how do we make it so only the
241:35 - person who created the lottery sees the
241:37 - pick winner button well if you remember
241:40 - how our plot card works
241:42 - we gotta figure out is Lottery Authority
241:45 - right because if this is false all right
241:48 - this is what Kazi should see all right
241:50 - but what I should see is this
241:53 - okay so how do we make this dynamic it's
241:55 - going to go into our context and let's
241:58 - figure that out
241:59 - the cool part is we don't need to make
242:01 - any special function we can actually
242:03 - just go in here underneath Lottery pot
242:05 - and we can say is
242:09 - Lottery
242:12 - Authority
242:14 - colon right and I'll hit enter here and
242:17 - we can say
242:18 - the they're going to give a nickname
242:21 - to something all right what are we going
242:22 - to give a nickname to and actually we
242:24 - can even just write it all in one line
242:25 - so it's not confusing we can say wallet
242:29 - and oops
242:31 - Lottery
242:33 - and
242:35 - oh make sure it's double double
242:36 - ampersand
242:40 - wallet
242:41 - Dot
242:43 - public key
242:45 - dot equals
242:48 - Lottery dot Authority
242:52 - okay I know that was a mouthful
242:54 - but basically
242:57 - um if there's a wallet and a lottery and
243:00 - the wallets like my address is equal to
243:04 - the lottery Authority right so let's
243:07 - check what the lottery Authority is if
243:09 - you don't know
243:10 - if my wallet address equals uh
243:14 - this Authority here at which it does a t
243:18 - we should be able to see the pick winner
243:20 - button so all of this will either be
243:22 - true or false and it's going to be in
243:26 - this name his Lottery Authority so if I
243:28 - hit save here let's bring it to
243:31 - a plot card
243:34 - underneath
243:36 - oh we should organize this Lottery pot
243:38 - shouldn't be here should be right here
243:41 - and we can say
243:43 - is Lottery Authority
243:46 - and we can get rid of this static guy
243:49 - right here static state is gone
243:52 - oh we can also erase this comma here
243:54 - nice all right we're making a lot of
243:56 - progress guys you still have static
243:57 - history here these two states these two
244:00 - functions all right we're almost done so
244:02 - it said save and now when I select
244:05 - wallet we can see the pick winner but
244:07 - what if I log in as qazi right so I'm
244:10 - going to switch wallets I'm going to do
244:11 - my cozy wallet boom you don't see it
244:13 - right it's all automatic it's not static
244:15 - anymore which is amazing
244:18 - so let's switch back to here my wallet
244:20 - number one and let's pick a winner
244:23 - and we can claim the prize right that's
244:24 - the next two things but again pick
244:26 - winner static let's make that function
244:31 - okay you know the drill where are we
244:32 - going guys we're going to context and uh
244:35 - underneath by ticket
244:37 - let's make pick winner so to pick winner
244:40 - I'll just say const pick winner
244:45 - okay pick winner
244:47 - is equal to a sink
244:53 - you say try catch
244:56 - okay error or error
245:00 - and we can say toast.air
245:03 - is error.message
245:06 - okay and but in this try catch we'll set
245:08 - up our TX hash it's equal to await
245:14 - program dot methods
245:17 - okay and what method are we calling
245:19 - we're calling pick winner and what uh
245:22 - arguments does pick winner take does it
245:24 - take any
245:25 - takes in Lottery ID aren't you glad you
245:27 - save it as a state otherwise you'd have
245:29 - to literally type in Lottery dot Lottery
245:32 - ID and if you didn't do that you'd have
245:34 - to fetch it here right so you want to
245:37 - pick a winner you want to set up your
245:39 - accounts this is an object this is your
245:41 - context so what do we need I'm not going
245:44 - to write all of it out anymore because
245:46 - you guys know the idea the first account
245:47 - that we need is the lottery which we
245:50 - have when I write lottery address saved
245:52 - in our state we have the authority
245:56 - then we can write wallet Dot Public key
245:59 - and uh that's it believe it or not
246:01 - that's it for pick winner
246:03 - and we can write dot part PC
246:05 - right all the the meat and bones was in
246:07 - that pseudo-random function I'll pick
246:10 - winner if you remember
246:11 - okay so the RPC and then we await
246:15 - confirm TX
246:17 - CTX hash
246:20 - and connection
246:22 - all right
246:23 - update state
246:26 - all right because we want to make sure
246:27 - after we confirm the hash we update the
246:29 - state and we give a nice little message
246:32 - that says hey
246:34 - picked a winner
246:38 - okay cool
246:45 - [Music]
246:45 - um
246:47 - awesome uh yeah so we have the function
246:53 - update state to success what we need to
246:57 - do now is make sure we pass that in here
247:00 - we say pick winner but there is one
247:03 - thing that we do need to do
247:05 - do you need to do is when we connect our
247:08 - wallet when we pick a winner
247:10 - we should see recent winner right here I
247:14 - should update this so that means we need
247:16 - to look in our updates State I believe
247:20 - I'm trying to think
247:25 - if users tickets
247:29 - yeah okay
247:31 - so I gotta do a couple things then
247:33 - let's go back into here and let's go
247:35 - back to our update State function
247:39 - right here cool so we got the lottery
247:42 - adjust we got the lottery object and now
247:46 - uh the first thing that we're gonna need
247:47 - to do is get the users tickets for the
247:51 - current lottery and you'll see why in a
247:53 - second right so just follow along with
247:55 - me that makes sense uh let's do a quick
247:57 - check here if there's no wallet and put
248:00 - a question mark here because it won't
248:01 - run if there's no wallet the public key
248:05 - then we're just going to return nothing
248:07 - right so basically if there's no wallets
248:09 - uh this shouldn't run at all
248:12 - okay just leave right but if there is I
248:16 - want to say const user tickets
248:20 - equal to how do we get all the tickets
248:22 - right basically what we want to do is uh
248:26 - go to this ticket here and do a fetch
248:28 - all right and it should be two
248:31 - but how do we do that in the front end
248:33 - code
248:34 - is this how you say await
248:37 - uh program
248:42 - program
248:43 - Dot account
248:46 - dot Lottery well not Lottery sorry we
248:49 - need a ticket yep dot all right and
248:55 - what you need to do is filter it
248:58 - by
249:00 - um
249:02 - there's a way to filter it and what I'm
249:05 - going to do is copy and paste this one
249:07 - so this is the only thing I'll copy and
249:08 - paste for you guys because uh there's a
249:12 - certain way to filter it you don't
249:13 - necessarily need to do this step if you
249:15 - remember the uh Airbnb I didn't
249:18 - necessarily put a filter here but what
249:21 - you want to do
249:23 - is something like this
249:26 - boom
249:27 - right
249:29 - yep
249:31 - a couple conversions here plugging in
249:33 - our wallets
249:35 - there you go this is the this is what we
249:36 - call the author filter
249:39 - okay so again
249:41 - you don't want to write out the pause
249:43 - the video copy this right here this is
249:45 - the filter for all
249:48 - um you can also switch to the other
249:49 - Branch get that piece of code there or
249:51 - go to our GitHub and find that solution
249:54 - in the main branch
249:55 - but basically it's going to filter the
249:57 - user tickets and once that's done store
250:00 - it in this variable
250:02 - okay we should so now that we have all
250:04 - the tickets we want to
250:06 - check
250:08 - whether any of the user tickets win all
250:14 - right so
250:16 - yep
250:18 - so
250:19 - to check if they won
250:21 - it's kind of complicated as well make a
250:23 - variable called user win set it equal to
250:26 - user tickets
250:28 - dot sum
250:29 - right and you're going to write t
250:33 - an anonymous function here
250:36 - all right T
250:37 - what's the name of that it's a t dot
250:40 - account the ID and T stands for ticket
250:42 - by the way you don't have to write T you
250:43 - can put ticket that makes more sense is
250:46 - equal equal to how do we know what id
250:49 - wins from that Lottery you say Lottery
250:51 - dot winner I because when we pick a
250:54 - winner
250:55 - this will have a value it's not going to
250:56 - be no all right because I believe right
250:58 - now
250:59 - if you look at it
251:03 - it's no but when we pick a winner like
251:06 - we just like we're about to do
251:08 - it's not gonna be null anymore it's
251:10 - gonna be something
251:12 - all right so check if there's something
251:13 - essentially
251:15 - if there's a winner
251:18 - and if
251:20 - there is a winner right so this means
251:22 - that if this is true
251:24 - set
251:25 - and save that user so I guess that means
251:28 - we need to make a state
251:29 - so I'm gonna go up the top here it's a
251:31 - const uh
251:36 - set
251:39 - is it winning ID
251:41 - yeah set winning ID
251:46 - yeah so we're gonna say
251:48 - fuser winning
251:51 - ID and set user winning ID and equals
251:57 - use State and this is going to be false
251:59 - by default because there shouldn't be a
252:01 - winner ID just yet
252:03 - um another thing you want to do is
252:08 - so winning
252:09 - a dress that we should set
252:13 - oh no this is it we can just use our
252:15 - winning ID
252:17 - set user winning ID cool
252:20 - all right so I think we're good
252:21 - so yeah if there is a user winner
252:25 - you want to set user winner and ID
252:30 - to that lottery winner idea
252:35 - all right so this is the check if there
252:36 - is a winner this is set it to that
252:39 - winner
252:40 - set the ID to that warning ID
252:44 - um then we can do else
252:47 - and say
252:49 - set user warning ID set that back to no
252:56 - okay and then there should just be a
252:57 - catch here
253:00 - and I think we're good
253:03 - okay
253:08 - um
253:11 - so what can we do with this with the
253:14 - winning ID well I can do a couple of
253:16 - things actually we can go down below
253:18 - here
253:19 - all right we have a lot of things
253:21 - already but we can go underneath in
253:23 - between internet master and create
253:24 - Lottery
253:25 - uh we can say is finished all right
253:29 - because when we pick a winner we should
253:31 - finish the lottery right so lottery so
253:35 - if there's a lottery and uh Lottery dot
253:38 - winner ID right because after that check
253:40 - on update State this shouldn't be null
253:42 - anymore it should be something
253:44 - okay and I believe in pot card we have
253:46 - is finished
253:48 - right if the winner is a winner can that
253:51 - winner claim the prize right so we need
253:53 - a can claim
253:54 - so can claim
253:56 - right it's going to be
253:59 - um Lottery if there's a lottery
254:02 - and uh there is
254:05 - not a lottery.cleaned right because
254:08 - remember this is true or false right
254:11 - and there needs to be a user winning ID
254:16 - okay so basically uh can they claim it
254:20 - right this will check if they claimed it
254:22 - or not
254:23 - so if it's false this would be true
254:26 - and if this is true like all three of
254:28 - these have to be true for Ken claim to
254:30 - be true otherwise it'll be false hope
254:33 - that made sense live checks so with that
254:36 - said we can get is finished
254:40 - and we can get can claimed oh wait I
254:42 - want to move put these guys
254:45 - right here is finished can claim
254:49 - and we got two squigglies because these
254:51 - are our last States so let's go ahead
254:53 - and erase those things so now
254:58 - there we go
255:00 - what was I doing again oh yeah I wanted
255:02 - to check this really quickly boom uh
255:05 - there's no recent winner yet so let's
255:08 - set this up
255:10 - so I want to set up the recent winner
255:13 - uh to do that we're gonna need Lottery
255:14 - history right so basically uh there's an
255:18 - array here
255:22 - and
255:23 - surprise
255:27 - 15. cool
255:32 - yeah so there's recent winner is coming
255:34 - from Lottery history we can get lottery
255:36 - history uh by looking through all the
255:41 - tickets and then checking if there's a
255:44 - winner
255:45 - in each of those tickets and once it
255:48 - finds that winner it'll take that
255:50 - winning address and put it here all
255:52 - right so basically looking through our
255:54 - history looking through the tickets and
255:56 - then saving it
255:58 - all right so let's make that function so
256:00 - we can say const get history
256:04 - is equal to async
256:08 - and say if
256:10 - there's no Lottery ID then there's no
256:13 - point we should return it's one of our
256:14 - edge cases next let's set up this
256:17 - history remember there's going to be an
256:18 - array right and it's going to hold
256:22 - um basically it could hold more than one
256:23 - object right but right now it's only
256:25 - holding one
256:27 - and it's basically all the recent
256:29 - winners all right so if we have multiple
256:31 - lotteries uh it's always going to have
256:33 - the last item in the lottery that gets
256:36 - pushed does that make sense so
256:38 - technically
256:40 - um
256:42 - if I had oops
256:45 - if I had this
256:48 - it would give me this
256:51 - public key right as the recent winner
256:54 - okay
256:56 - cool so we want to make this Dynamic now
256:58 - uh
256:59 - again this requires you to have a little
257:01 - bit of knowledge of for Loops so again
257:04 - if you don't know
257:06 - just follow along I'm just going to say
257:07 - four const I in
257:10 - oh this is a four in Loop and we're
257:12 - gonna make it a new array
257:15 - from the lottery ID
257:18 - and then we say dot fill
257:21 - no
257:22 - all right value to fill rate section
257:24 - with no
257:27 - and then
257:30 - oh yeah
257:31 - so now we're looping through this array
257:33 - and we want to say
257:36 - const ID is equal to Lottery ID
257:42 - minus
257:44 - parse hint I right so this is a this is
257:47 - a kind of like a coding problem here
257:48 - right that we're solving for so to get
257:51 - the history we're gonna need to do a
257:53 - couple things right if there's no ID we
257:55 - need to break
257:57 - but if there is an ID we can keep
258:00 - looping so we want to do a lottery
258:02 - address
258:05 - is equal to weight get lottery address
258:09 - and pass in the ID
258:12 - so again this is getting all the history
258:14 - of the recent winner so there's going to
258:16 - be multiple lotteries right so uh get me
258:19 - the the first Lottery give me the second
258:22 - Lottery the third but if there's no
258:24 - second or third break
258:26 - that's like the English translation cool
258:29 - so once we have the lottery addresses
258:31 - right we need to then get the lottery
258:35 - objects right so we can say
258:38 - program.account.lottery.fetch uh lottery
258:40 - address
258:41 - so this piece of these two pieces codes
258:44 - are going to be running multiple times
258:46 - all right so right now there's only one
258:48 - Lottery
258:50 - right so this is not going to run
258:53 - multiple times it's going to run once
258:55 - probably
258:57 - and from there we need to get the winner
258:59 - ID
259:01 - so it's going to be a lottery
259:03 - winner ID so it's going to go through
259:05 - all the lotteries it's gonna go through
259:07 - all the winners
259:08 - right and if there's no winner so let's
259:11 - say like Lottery one and Lottery two was
259:13 - done uh let's looking at lottery three
259:15 - but there's no winner yet
259:17 - we want to just skip that one so winner
259:20 - ID and continue because there's a chance
259:23 - lottery number four has a winner so
259:26 - Lottery one two not three four has a
259:28 - winner
259:29 - right so we're gonna continue skip this
259:31 - one go to lottery number four
259:33 - that's the way to look at it so continue
259:36 - and then after we do that we can get the
259:39 - ticket address
259:41 - because we want to know the winning
259:42 - ticket
259:44 - and set that equal to a weight
259:47 - get
259:48 - ticket address
259:50 - pass in the lottery address
259:53 - and the winning ID this is how we get
259:56 - the winning ticket
259:58 - uh the winning ticket address and to get
260:01 - the winning ticket uh you need to pass
260:03 - in that address so program Dot
260:05 - account.ticket.fetch
260:09 - ticket
260:11 - dress
260:12 - cool so after you do all that you want
260:15 - to do a history dot push
260:19 - and then you can push the object
260:21 - and what does the object look like we
260:24 - can generate it similar to this ID
260:26 - winner id address boom so we say Lottery
260:29 - ID is going to be the same as the ID
260:33 - that we're iterating on right now it's
260:36 - going to have the winning ticket ID
260:38 - and the winning winner address
260:42 - right so it's this is where you see the
260:44 - one one one
260:45 - you can get the public Key by saying
260:47 - ticket dot Authority
260:49 - and then we can say the prize and say
260:52 - get total prize in case you wanted to
260:55 - know how much uh was the prize
260:58 - of that Lottery
261:00 - like what it was
261:02 - okay cool
261:05 - yeah so uh after all that's said and
261:07 - done
261:11 - right here we can say Set uh Lottery
261:14 - to oh sorry set Lottery history
261:18 - to
261:20 - history
261:24 - okay so a lot set Lottery history is
261:26 - going to hold an array right so this is
261:29 - a state we haven't made just yet
261:31 - let's go ahead and hit save
261:34 - let's make that state say const
261:39 - Lottery
261:41 - history
261:43 - and say set Lottery history is equal to
261:47 - you state and we can say empty array it
261:51 - should be an empty array here and
261:52 - there's some things we want to do with
261:54 - this
261:55 - all right but the first thing I want to
261:56 - do is after get pot let's also get
261:59 - history
262:00 - so it's not grayed out anymore
262:03 - and the second thing we need to do is
262:05 - pass in that array
262:11 - all right so right here we can say
262:12 - Lottery is three
262:15 - cool and what we want to do with that
262:17 - Lottery history is bring it here
262:20 - right because how do we get the recent
262:23 - winner well after we have the lottery
262:26 - history
262:28 - right you're gonna get the last item in
262:30 - the array by doing Lottery history
262:32 - length minus one
262:33 - get the winner address
262:35 - we're going to shorten it with our
262:37 - function so it doesn't look like super
262:39 - long
262:41 - and let's bring it out here Lottery
262:44 - history
262:47 - take this out and guess what we don't
262:49 - have any more static data so we hit save
262:51 - and now let's finally test our function
262:55 - right so when recent winner is zero
262:58 - and that's interesting
263:00 - okay so we will pick a winner
263:03 - oh yeah we forgot to plug it in
263:05 - need to get pick winner here pick winner
263:11 - take out the static function
263:14 - save
263:16 - big winner
263:17 - okay
263:18 - oh
263:20 - uh shoes there's something here let's
263:22 - hit approve see what happens
263:25 - hey we picked the winner right so cause
263:28 - he's gonna win I won all that money so
263:30 - the pot's 10 that means
263:35 - sorry I was saying that that means I win
263:38 - the 10 Soul which is amazing and cool
263:41 - the recent winner is correct uh it
263:44 - should be
263:46 - yeah me right so again how much so am I
263:50 - going to end up with
263:51 - after I claim it
263:53 - it's gonna I'm gonna I'm gonna up with
263:55 - 23 so isn't that same so
263:58 - there we go and the same thing that you
264:00 - notice is that I can't enter a ticket
264:02 - and I also can't pick a winner again
264:05 - because there already is a winner so the
264:07 - only thing I do is create another
264:08 - Lottery
264:09 - right
264:10 - um
264:11 - another thing we can do is set up a can
264:13 - claim right we should be able to claim
264:16 - our prize which should be set up already
264:20 - it's console logar can claim
264:23 - oh can claim
264:27 - right here
264:30 - so instead of connected let's put can
264:32 - claim
264:33 - and put flame
264:36 - Stitch claim status
264:40 - so if I'm guessing it should be false
264:42 - right now
264:43 - oh it's not okay that's not good
264:46 - let's go to our contacts and let's
264:49 - figure this out so can claim
264:51 - there's a lottery
264:53 - claimed
264:56 - user winning ID
265:01 - Okay so
265:02 - it's null at some point it was false
265:07 - hmm okay so we could do here is
265:10 - literally check
265:12 - all these things
265:14 - so it's user winning
265:17 - ID yeah so it should never be false
265:22 - uh we can check here
265:28 - cancel that log
265:30 - there is a user link
265:33 - oh this should be a string
265:40 - see where I go wrong
265:43 - oh we disconnected whoops
265:47 - okay so that if statement isn't running
265:53 - so there must be something wrong in this
265:56 - update state that we update state
266:00 - with the pick winner
266:01 - we did
266:05 - okay let's check our back end
266:10 - on the lottery fetchall
266:12 - oh yeah winning ideas one
266:15 - okay
266:17 - so what did we set
266:19 - uh winning ID
266:23 - Lottery dot winner ID
266:28 - okay so I think it's something with this
266:30 - user win here
266:31 - user win
266:36 - [Music]
266:41 - hmm
266:43 - okay let's uh
266:46 - check if there's a user win
266:49 - this should have
266:54 - tests
266:57 - all right so you see this weird sentence
266:59 - should be something
267:06 - false
267:08 - what
267:09 - there should be tickets here
267:11 - there should be something
267:14 - okay well
267:16 - what about user tickets all right there
267:19 - should be two user tickets
267:21 - user
267:23 - tickets
267:30 - okay
267:31 - show me the tickets
267:33 - empty
267:34 - what
267:35 - all right but if we go to the playground
267:39 - there's two tickets all right
267:41 - um I have a theory
267:43 - that it's this filter
267:54 - so let's take out that filter and let's
267:56 - just get it as is
267:58 - all right yeah there's two tickets
268:01 - it's Phantom and now we can claim the
268:03 - prize oh my God okay so
268:06 - I forget do we need this filter I think
268:10 - there's a reason why we have this filter
268:13 - but for now like I said we'll just do an
268:15 - all here and we'll probably notice when
268:19 - the gets becomes a problem right but
268:21 - right now the way I'm doing this filter
268:22 - is wrong so I just removed it we're just
268:25 - going to do a DOT all just get all the
268:27 - tickets
268:29 - and now we should be able to claim the
268:31 - prize right and again this is not going
268:33 - to work because if we need to make that
268:35 - function but other than that we set it
268:37 - up so we have that
268:39 - and there's also this right here
268:42 - I want to see that as well
268:44 - so let's see how I do that pop card
268:52 - oh it's actually the table now
268:54 - let's go to the table
268:59 - table
269:01 - ah yes we have to bring Lottery history
269:03 - here too
269:04 - so we can say
269:08 - const
269:11 - Lottery history
269:13 - is equal to use app context
269:15 - erase this guy
269:18 - see what we get hey look at that so we
269:21 - also have our Lottery history here and
269:23 - now let's claim prize and we should be
269:25 - done
269:27 - okay
269:28 - so
269:31 - yes claim prize
269:35 - yep so to claim prize we need to go to
269:38 - the context
269:40 - alrighty so we are in the context now
269:43 - and what we want to do
269:45 - is
269:47 - claim price right so let's reap our
269:49 - rewards let's brag it in front of kazi's
269:51 - face that we got the tensile right so we
269:54 - can say uh down here
269:57 - const Flame prize equal to async
270:03 - Arrow
270:04 - and we could say try catch right at this
270:07 - point
270:08 - this should be straightforward you can
270:11 - say toast dot error is error.message and
270:16 - we can then say
270:18 - cons TX hash is equal to 08
270:24 - program
270:25 - dot methods and what method would you
270:28 - like to call I'd like to call the claim
270:30 - prize one thank you
270:32 - and what do we need to pass in we pass
270:34 - in Lottery
270:36 - ID and the user winning ID which we set
270:41 - up all right so where do we set user
270:43 - winning ID again
270:44 - is there one name
270:46 - oops user winning
270:48 - ID
270:53 - right here set winning ID to that
270:56 - cool
270:59 - awesome
271:00 - all right so back to
271:02 - claim price all right we're gonna pass
271:04 - in the winning ID which was ticket
271:06 - number one which was me the dot accounts
271:10 - uh pass in the context which in the all
271:13 - the accounts that we need is Lottery
271:15 - we have that saved in lottery address
271:18 - we need the ticket uh this one we want
271:21 - to get because we want to get a specific
271:22 - ticket and through that we could say
271:24 - await get
271:27 - ticket address
271:29 - in lottery address pass in the winnering
271:32 - ID user warning ID
271:35 - comma
271:37 - we want to do our Authority
271:39 - which is simple wallet Dot Public key
271:44 - System Program
271:47 - let's say System Program Dot
271:51 - program ID
271:54 - and there you go dot RPC here
271:58 - a way to confirm the transaction
272:03 - pass in TX hash and connection
272:07 - and we want to update the state of
272:10 - course up to state
272:12 - and we can say toast.success
272:17 - here
272:19 - claiming
272:21 - uh
272:24 - good price
272:27 - or a claim the price to instead of say
272:29 - claiming claimed
272:31 - okay
272:32 - cool
272:37 - claim prize by ticket
272:40 - yeah I think we
272:42 - did all of it so we can say claim price
272:44 - let me just take one look at our update
272:47 - state
272:48 - is there anything else we need to do
272:50 - after setting the winning ID
272:54 - um
272:56 - no after that I think that's pretty much
272:58 - it
272:59 - so yeah it feels kind of weird that we
273:01 - made it this far guys but I'm really
273:03 - happy this is a really cool app
273:05 - so let's bring
273:08 - claim price
273:10 - from our contacts claim price
273:14 - right remove our final static function
273:18 - all right remove all these comments
273:21 - uh we can even get rid of this console
273:23 - log claim here
273:24 - save
273:26 - let's go back to our app
273:28 - select winner claim prize and again if I
273:32 - go to qazi's wallet should he be able to
273:35 - claim
273:36 - the 10 Solana
273:38 - let's go here
273:41 - right he shouldn't be able to
273:45 - all right because he shouldn't be able
273:46 - to claim the prize
273:49 - the other can claims should be false
273:51 - just to check I want to bring back that
273:53 - uh can claim
273:56 - it's true actually
274:03 - Claims can claim oh because can Claims
274:06 - can claim is one
274:09 - that should be
274:11 - something else
274:13 - I'm gonna look in context real quick
274:16 - can't claim should be true or false
274:21 - why isn't it true or false
274:27 - did I do this wrong
274:29 - come on this is a home stretch Clan
274:31 - claim
274:35 - okay let's try this again
274:37 - I'm going to select wallet and I should
274:39 - see claim prize there you go okay so we
274:42 - can claim the prize let's click this
274:45 - all right and again we should get 10
274:47 - sold if I try to claim the prize as qazi
274:49 - uh we should run into that error that
274:53 - says hey uh invalid
274:56 - where is it yeah winner
275:00 - yeah the last lottery ticket ID doesn't
275:02 - match
275:04 - and already claim oh here we go invalid
275:08 - winner right so if you try to claim it
275:09 - as qazi we should get an error that says
275:11 - invalid winner but since I am the winner
275:14 - all right I get plus 10 Soul so from
275:18 - here
275:19 - we claim the prize we get 23 soul
275:23 - there we go we finished the app and
275:26 - again if you wanted to make a lottery
275:27 - you can all right create a lottery boom
275:31 - Lottery created we're good to go so I
275:34 - hope you enjoyed this this is an amazing
275:36 - app right we took everything we learned
275:39 - up to this point and we can make
275:41 - something cool like this so if you like
275:43 - the video drop a like down below leave a
275:46 - comment tell me that this was awesome
275:48 - and I'll see you guys in the next video
275:51 - peace

Cleaned transcript:

picture this it's September 2022 and the USA Mega Millions jackpot is at 301 million dollars now imagine if you could create your own lottery app using crypto instead that's right in this video we're going to be making the lottery dap on Solana blockchain I'm gonna be showing you guys how to make your very own Solana smart contract using anchor which is just a framework of rust I'll walk you guys through step by step how you can buy tickets create the lottery and transfer that Sweet Soul to a very lucky winner next I'll show you guys how to use your Phantom wallet and connect it to your app and of course we're gonna need an RPC node provider to connect us to the blockchain and our friends at quicknote are going to hook us up we'll also be using something called Solana playground which is the place to create your smart contract build it deploy it and for my favorite part test it so that you can understand how all of the functionality works so if this excites you make sure you drop a like in the video and let's get started with the demo and like I just said this is a amazing exciting app for you guys we're actually making a lottery we're taking what we know about Solana and I'll walk you guys through how to make this cool app but first let me show you around right let's how this is how it works right as you can see we have Phantom wallets we have another button here that we can use as well and I'll show you guys how to set that up but to get started and log in and connect we click select wallet we're using Phantom Of Course and there we go boom the way this works is we need to initialize what I'll call the master so once we initialize that Solano will ask us to approve click approve and Bam so that we have nice toast notifications this time and we can see that this is lottery number zero well that's the initial State what's the pot nothing what was the recent winner zero nothing right so how do we make some more life right well let's make a lottery do you want to make the next Mega Millions jackpot well we can do that with Solana here so let's click create Lottery and let's hit approve and Bam now we're talking right so a lottery was created as you can see and now we're in lottery number one right the cool part about this is we can purchase a ticket and every ticket that we purchase is gonna cost you five sold it's pretty steep right but luckily for me I have 13 Soul right now let's go ahead and enter let's hit approve notice how it says minus five I bought a ticket and we can see that I lost some soul I have eight now right so let me let's make this interesting right so let's use a different wall let's say someone else logs into the very same app right and let's go wallet number four this guy's pretty rich too he says 13 and notice a couple things I switched to my CV wallet but now there's no pick winner button right because the cool part about this it's secure the only one who can pick a winner is the one who created the lottery and this guy didn't create it so he can't decide who who's the winner right so let's enter this guy in and let's hit approve so there's a 50 50 chance right you want to make it even more spicy right let's add to the pot all right let's add to the tally all right let's see wallet number two does he have any Soul he has seven this is the poorest wall that I have all right he's gonna enter in he's gonna hit approve and Bam pot's now 15 right so one out of three chance let's go to wallet number one right let's be a little bit unfair and let's make it so I have two entries so who had let's see how many total tickets right if there's 20 there's four tickets two of them are owned by me one of them is owned by wallet number four let's say it's you guys you guys are wallet number four and we have wallet number two right so what we can do since I made this Lottery let's pick a winner shall we so let's say pick winner and let's hit approve and the winner is for a what the hell so that means I didn't win I can't claim that money or else we'll get an error right I think wallet number two the poorest wallet out there wins the prize so this guy he has two he spent his life savings on his ticket so if I click claim prize he gets 20 Soul I'd say approve boom claim the prize those buttons are gone and you can see there's history and you can see who won right so this is an amazing app there's a lot that goes into it I show you guys how to do something that's not really possible in Sana right you can't generate a random winner there's something called pseudorandomness that I'll show you that's possible so look at this wallet 2 is now the richest man out of all my wallet says 22 soul and that's the demo so are you excited to build this app you guys are excited drop a like right now leave a comment saying I'm ready Lance so I know that you're watching and if you want more videos like this also let me know so without further Ado let's get to the tutorial all we have to do to get started is open up your terminal go into the folder that you want to put this file in and type npx cleverprogrammer at latest once you do that hit enter and watch the magic happen you're gonna see our CLI tool load up it's going to ask if to you to put your email address I'll put in mine plants at programmer.com BAM your name and Lance and select the project that you want to load up you guys don't have to write a lick of code to make sure you have the same files that I do right we've done so many projects this past month right now we're like doing the salon lottery app as you guys know so let's hit enter right and as it loads up I mentioned before that we're going to need an RPC node to connect to the blockchain so let's go ahead and set that up while our CLI tool installs the project all you have to do oh look at that vs code is already finished but all you guys have to do is type in the link in the description and it's going to be try quicknow.com cleverprogrammer so if you hit enter you should see this nice page right here go ahead and put in your information your name your organization you can say personal you can say you know whatever company you're part of your email and go ahead and create an account I already have an account so I'm just going to sign in so once you've done that you should see this nice screen right here and all you need to do is set up an endpoint is click this button create endpoint select the chain that we're using and of course we are doing Solana and the important thing here is that there's three networks that you guys should know about when working on Solana there's mainnet testnet and devnet what I'll say is this when you're ready for the real deal and you want to use Real Solana right your own money you can use mainnet beta but if you're learning with me let's use devnet okay so let's use devnet I'm gonna hit continue and there you go there's a couple of addons that you could add but let's go ahead and just hit continue all right we'll just hit create because we want to use the free tier and Bam that's it this shy tiniest Firefly that is our amazing RPC node that's going to help us deploy our contract and connect to the blockchain all you guys have to do is hit this copy button right here and we should be good to go with that said I think our app is ready so if I hold I'll tap here our CLI tool is going to set up our app right see this this opened up itself or at least it should open up itself so you can see over here we have our nice app and all of the components inside of it and since we're already here one thing that we should do is let's set up our Phantom wallet if you didn't know we're going to use Phantom wallet to connect to our app and send all of our transactions and sign them of course so what I'm going to do open up our tab here and if you don't have Phantom wallet installed go ahead and type in Phantom wallet extension on Google Chrome and you can see it should be the first one it should be this page right here I already have it installed so you should be good to go so if you already have Phantom skip a little bit ahead of the video you know what you're doing right if you don't you're new here what's up guys welcome so once you have the extension installed go ahead and log in you should see something like um saving your recovery phase a phrase that's your password don't share that with anybody keep it private and to yourself some are safe right so you remember just in case you lose your wall information okay but you should see something like this and notice how it says you are currently on devnet right by default if you just install this this wouldn't be on devnet so what you need to do is go into your settings change network and click devnet right because remember when we set up for quick note which one did we use we use devnet all right now you guys are following all right so now that you did that uh you might notice you don't have any Solana like you're really poor right so let's get you guys rich Let's print all the Solana we need to do that just type in Saw faucet.com and put in your wallet address so if you don't know your wallet address all right just go at the top here you can see if you hit copy right that's going to be your wallet address so I'm going to hit and paste my wallet just in here and what you could do you don't have to do one at a time you can do two at a time and you're gonna click which network that's right Kevin devnet I don't know if there's any Kevin's watching but if there is shout out to Kevin all right so back to Soul faucet now I have two I think I had 16 before now I have 18. so do this as many times as you like oh you won't need a lot I'd say for the lottery app you can get about like 15 10 even all right it's all up to you so that said I think we're good on the Solana side let's go ahead and check out our app all right so going into my app now you should have everything you need if you did the CLI tool command correctly right all the packages are installed you shouldn't see any uh Missing packages it should be set up for you guys what you guys need to do now is press command J or Com or control J if you're on Windows and let's CD into the app once you're in the app if you didn't know this to start it we use yarn depth okay so now our app is running at localhost 3000 let's go ahead and head over there and Bam right if you guys just saw the demo this looks a lot different than what I just showed case reason being is because this is a challenge right why is this a challenge because everything works but we need to make it Dynamic what do I mean if you guys are familiar with programming at all all of this is static data what do I mean by Stack let's say I click this connect wallet button boom we're connected but it doesn't actually use Phantom all right it's just a button that changes what we call States right so look at this this these lotteries it just says one one one right we can initialize the master right we already have the pot for this Lottery we can enter right it doesn't really do anything right all it does is set up a console log so let's take a look at that all right so we connect wallet connecting static wallet initialize the master we hit enter we purchase the ticket purchased a ticket we create a lottery right pick winner it's basically just an empty function that's console logging uh what it should do does that make sense to you guys cool all right so if that made sense our goal is to give this app some life right you saw what it does how do we make that work well let's first understand right what our app looks like so what I like to do is you know just show you first of all what our app does so if we go to our pages I believe let's head over to our index notice a couple things here we have header pot card and table those are our three main components right this project requires you to understand react so if you're a complete beginner I apologize but this might be a little difficult for you but don't worry try to see if you can learn something from this cool so like I said header pod card table right if we were to draw like a nice visual for all this let's go ahead and do that let me see if I can make this smaller and let's do my handy dandy notebook you can just use any other whiteboard but this is the one I like to use perfect so as you know if you are familiar with programming or at least react right we have different components right so you can see that this is my underscore app.js it's returning a component but within this component right oops not our code over there within this component we have this right this com this app component has children within it right so if I would draw a little tree to illustrate that relationship all right I would it would be a little bit like this so if I draw a box this is the app all right and from there we have the index.js right you guys following so far you guys know what I mean when I say the child of the app is the index right this component is the same as this whole index so what would be the child or the children of the index.js what do you think give you guys three seconds three two one what do you think which one's the child all three of them right so that means index has three children all right so we have one two three okay we have what are the three children's names guys should be pretty easy right you guys read it's gonna be header uh pot card pot card and something called table right if you guys uh create your components the name alone should let you know what the purpose of it right so if you look at this right what part of our app does header contain right if you look at this which part is the header can you guys tell which is the header if you said this top area right here you are correct all right how do I know let's comment out the header right save Boom the header is gone okay what about the pot card what's the pot card boom gone right over the table boom gone right what does that tell us though it tells us that the functionality of each component exists within that component right so if I wanna you know make it like the demo where you click this connect wallet and you make a phantom wallet connection which of these components should I tackle should I look in the table yes or no no right we're going to look at either the header or the plot card right if you said pot card I can understand because the connect wallet button is here as well but the main way to connect your wallet you saw uh was basically starts with the header all right so let's look at the header so if it's in the header we can actually go to that very component and take a look right and as you can see the header is very simple we just have a div wrapper here a div that holds Lottery depth and a button that says connect wallet so this right is where we want to look at to make that Phantom wallet connection as you can see right here something called a wallet multi button that is gonna be a replacement our Dynamic button right so some of the Imports are set up for you guys already other than other Imports we got to figure out together okay so let's go ahead and figure out how we can connect our Phantom wallet to this app now before we get excited about taking this multibutton and putting it in here right we can't just do that right away right because the important part is we want to connect our wallet to the app I was putting a button there isn't necessarily going to do that we have to set up what I'll call the connection provider right what do I mean all right let's take a look I was saying that we should put the connect wallet button here right but uh we need to establish the connection to our app right so what I mean by that is this let me change it to this board Perfect all right I essentially want to wrap my app with a phantom wallet connection so that anywhere my app is right oops anywhere my app is we have a wallet connection if I'm in my table if I'm in the table it should have access to the wallet connection if I'm at the pod card it should know what the wallet is so forth and so forth right we can do this by wrapping that connection provider within the index alright so we want to tackle the index component you guys with me so if that's the case let's go back here let's open up this go to the index and let's take a look awesome so as you can see already right we have a bunch of code here let's actually make this bigger so you guys can see it oops too big awesome so we have a bunch of code here we know that this index component holds the three main functionalities of our app we can put the wallet connection here it's also okay to put your wallet connection here right it doesn't really matter that much right but for simplicity's sake and for visual sake let's work on the index so we want to import a couple of things what we do want to import is something called the use memo which is a react Hook from react we want to import connection provider import connection oops provider right and if I press tab you can get the Auto Import of Solano wall adapter react and there's actually another thing we want not only we want the connection provider we want the wallet Provider from the same place okay cool uh we also want to import the wallet adapter Network all right this is from uh Solana Solana slash wallet adapter uh base all right that's what I believe it's from so we also want to import the Phantom one right because what wallet are we using we're using Phantom one there's actually other uh Solana supported wallets that you could use it doesn't have to be Phantom right but I'm most familiar with Phantom I like using Phantom so we want to import that right if you're more curious to see the other wallets you can actually look at this library and see the other options at Solana wallet adapter wallets all right this Library holds all of the adapters cool um let's see what else do we need we can also import the wallet modal provider right so the wallet modal provider gives literally sounds like what it says it's gonna provide us with the wallet's modals when I click the button we should see the list of wallets that we can connect to and it should be a Solana wall adapter react UI that is correct and from there we can just require require at Solana oh web Solana wallet adapter react to Y uh Slash Styles dot CSS right we want to get the CSS that Sonic comes with it's that nice blue look that you saw from the demo so let's get that as well okay this looks pretty good to me from here let's use all these Imports now right so from order we want to get the uh use memo first okay so let's see actually let's make a variable I want to make const endpoint okay so what is an endpoint all right let's say I open this guy up again let's say I want to connect to the blockchain right oops let's erase this for now I want to connect to the blockchain from my app and I guess we can make the circle again boom here's my app and the blockchain since it's a chain or a block we can make it a rectangle right Solana chain right and it's made out of different blocks or whatever right in order to get our app to connect to the chain right we need something like an RPC node right and if you didn't know quick node provides you with an RPC node we could technically make our own RPC node right but that requires us setting up some infrastructure uh maybe even Reinventing the wheel and setting it up right I like using quick note because it makes it nice and easy to set it up right so we want to use our RPC node or quick node to connect to the blockchain so it knows what wallet I'm using right and if I want to make transactions to the blockchain we can also use the same process right there we go so how do I use the RPC node well remember I told you to copy this HTTP provider go ahead and copy it if you didn't already get quotes and paste it right there right I'm putting in a variable because it's usually very long so I want to store it in endpoint so I don't have to like put this whole URL somewhere else cool so now that you have your endpoints set up let's go ahead and set up our wallets all right so we've got the endpoint set up let's get the wallets right technically we're only setting up one wallet but if you did want to set up more wallet options uh here is where you would put the rest of the adapters that I was talking about but like I said we only have one so here we go so let's set up this array here oh sorry about that camera died for a second but we're back anyways as I was saying setting up our wallets we're gonna put Phantom wallet adapter right here this is creating a new instance of this wallet let's put a comma here and again if you wanted to add more uh different kinds of wallets as an option you would list them out here cool and put empty array right here and with that this should be it utilizing that react Hook New Phantom wallet adapter bam um let's see yep now it's time to set up our connection provider and our wallet provider so one thing I want to mention is back to our drawing we want to set up that connection and this is technically more accurate but we want to set up that connection we have to wrap it within our app right see how this circle is our connection and it's wrapped within our app right to do that uh with our code you want to take that connection provider connection provider put all of our components within that app this is what we call wrapping right we're wrapping the app or header popcorn table with our connection provider so it's wrapped in there make sense so now we're providing the connection right quite literally cool one thing you could do is that you need to provide the connection provider with an endpoint right it sounds funny to say so if I say endpoint right here right we're going to pass in this prop of end point there we go we're passing in our our PC connection to our provider which in turn is providing that connection throughout the app make sense that's the way I would explain it we also have another provider here it's the wallet provider essentially the same thing but specifically for the wallet so again wrap those components in there and yes the order does matter if you were wondering right it should be connection provider then the wall provider then the rest okay we're almost done using all the Imports let's see um one thing that happens we don't need is this adapter Network so again if you weren't using your RPC node and you just want to strictly connect to the devnet you would use this import right so we don't need that what we do need is within the wallet provider I want to use the modal again this is kind of optional but it's nice having this modal here because it takes a lot of work out of us that we need to set up you'll see in a second so I said save boom okay yeah I think that's pretty good all right cool and you know what too we can even put this div right here this style wrapper we can make the connection provided the parent did what I mean by the parent div is the div that's on the most outside so what I'll do is take this put it in here and don't forget if you do this this is the lid of the box right you want to make sure that it matches up oops right here I took that outside parent div and I made the connection provider the new parent so our app should look a little bit something like this if it looks like this we should be good to go and we can double check by looking here can't read properties of map that's fine okay cool uh this error shouldn't happen but I'm guessing it's because if we go to our wallet provider we should provide it with the wallets so let's go ahead and do that wallets is wallets and uh if you want your app to automatically connect you can put this auto connect prop right here and there you go no more error that's what it was missing all right don't forget to put your wallets right here if you have something like this if I zoom out take a look if it matches up no errors we're good to go right but notice something uh connecting a wallet doesn't actually do something not even this one right but again oh the first thing I wanted to tackle was this connect wallet button so to do that which component do we need to go to let's go to the header so I'm gonna go to the header you see how we're importing this wallet multibutton should be pretty simple now if I do something like this oops or if I just start saying wallet multi button oh yeah that doesn't work let's just do it normally wallet multi button and the wallet multi button is actually selfclosing meaning we can just do something like this and let's take a look hey look at that it says select wallet now and uh if we have our proper connection on provider setup we can click on it you can select we can see the modal here with all the wallets that we have connected and it knows that I have Phantom I'll click Phantom and there we go right what functionality did I write to do all this none that's what's nice about uh the Solano wallet adapter right we can connect our wallet we can even disconnect it and it's gone all right the next thing I want to do is let's put that same button here all right so let's go ahead and do that what component should that be in all right let's take a look should be in the pot card right so I hope you guys are getting the pattern because as we go on I'm going to explain it less and less I'm not going to hold your hand anymore I'm sorry all right so we're in the plot card and there's some static comments here that we'll talk about in just a second what we do want is the wallet multi button yes and let's go ahead and put it in the right places so if we look there's a comment just for you guys says wallet multi button goes here let's say wallet multibutton like so and there's another place where we need this and I believe strip here connect wallet wallet multi button so let's hit save and it goes right here perfect so if I refresh select while you can even click this button to connect your wallet and as you can see it's in both places awesome cool right and it does mess up our static functions because uh we didn't set that up but that's okay for now what I want to do next is let's actually create the smart contract first and then we'll get back to this and explain how to put it all together sounds good cool so let's go ahead and do that all right so to move on to the next step and get started writing our first smart contract together which you guys should do is we can go ahead and exit this tab we can make a new tab and we're going to open up something called Solana playground so let me go ahead and make sure we use the full window because we're not going to look at our app for a while like I mentioned so we're going to do is type in beta soul.pg.io this right here and don't worry about this stuff what we need to do is click this plus button on the side and let's choose a framework before I move on if you guys want to know Solana playground is the place where we can write your very own smart contract you can build here you can deploy here and the most important feature that we're going to use today on this is easy to test all of your functions because if you're just coming in you're not going to know how these work but the way I understood them the way I got I'm getting better at this is by testing and figuring out what does this do what does this do so when you're choosing a framework we could do this in Native first we could do this an anchor and there's new support for python now which is exciting but what we want now to use is Anchor and let's name this project Lottery sold all right so I'll click anchor rust hit create and Bam here we go we get started off with these files right here this is the default uh files as you can see there's an initialize but what I want to draw your attention is this macro it's called hashtag program this defines a program so everything within this scope right here that I highlighted is the program right we want to create our own Solana program and just so you know when I say program and smart contract I'm going to use that interchangeable but they're going to mean the same thing all right if you're coming from solidity this is essentially the remix of Solana cool so let's go ahead and clear this out because we're going to make this from scratch so get ready for that so like I said we're going to be using something called anchor which is just a framework of rust and if you don't know what rust is it's a the native coding language to write for Solana right so um if you see me import stuff in JavaScript you guys should know that import you know use state from react all right what does this do right here well if you were to write this in JavaScript this is getting us the you stake Hook from the react Library okay so you can't write this in rest because that's not going to work it's a different language so how do we do something similar to this in Rust well the cool part is that you can do this you can say use anchor Lang right anchor Lang is a library and when I say use you can look at it as import we're getting anchor Lang right but what do we want from anchor length so we can get more stuff from anchor length by saying two colons right if you think of it like a folder we're going into this folder when I say colon colon right so we're inside this folder and we can get something from it we can say Prelude right so what do we get from anchor lag we got Prelude right and when I do colon colon again what's happening I'm reaching into this folder I'm grabbing a cookie and inside that jar I'm going to put star this is basically saying get everything uh within Prelude right so you saw me use used it right I did this and then used it here we can do something similar by writing Prelude get me everything inside Prelude well first go into Prelude and then inside Prelude get me everything in there if I do a comma here I'm getting more things from anchor length think of this is like me getting used State use effect and use memo for example all right so what else do we want here well we want Solana right so I'm going within this Library and we can get more stuff so we can get clock hold on clock right we're getting something from here okay we can do a comma we can do hash get me hash and we can get more things here so we're going to use a bunch of these libraries don't worry about fully understanding what all of them is it's easier to understand all of them within practice okay so system uh instruction colon colon transfer yep cool all right so this looks pretty good this is us importing all the libraries we need awesome so how do we create our smart contract or like I said a program well to define a program we have to use the program macro and again we don't have to use it but this will make our lives a lot easier so everything I write within this macro is going to Define what that program is and maybe if I zoom in you can see it a lot better all right so within here you say mod and then the name of your program so you could call this hello right you can say uh the program right which is not very good name actually you can even say Lottery and that's what we'll call it here so if you do some uh curly brackets like this this entire thing that I'm highlighting that's your program not much right so keep that in mind when you're making a program another thing that you could do is write CP right not clever programmer uh create program and you can click this and Bam right and it's going to do some interesting things but I don't want you to worry about right that right now right so you can literally highlight this it's automatic highlighted I can say lottery I can hit tab change the name of this blah blah change the name of this right so I'm gonna erase this because I want to talk about each thing before I get to it okay so we've made our program right there's nothing in it it's pretty empty uh but let's say you want to import a bunch of other folders in here or files rather right how many files do we have right now guys all right we have one lib.rs think of that as the entry point which your code would read right but we can we can make more files than this to separate things all right let's make a constants file let's write this button right here to make a new file and we can call it constants and don't forget to put dot RS right RS stands for rust so like it's a rust file just like how we dot JS for a Javascript file cool awesome so we have a now we have a constants file but let's say we had like some stuff in here right how do we get stuff from this folder into this folder well we can import it right so to import that folder we can say mod constants right right here and from there we can say use right so remember what I said what it uses use create okay news crate colon colon and we can destructure it by saying constants oops constants colon colon star so what does this mean right based on everything I told you so far I'm basically going into my constants folder and grabbing all that's in here and right now nothing in constants but there will be don't worry all right so use crate if you didn't know is bringing um everything from this file into this entire scope right so that means I can call on whatever constants is here right but if you want to bring everything from constants into this scope all right we're going to write something called use super right star okay what this means is that I take everything from that we import and bring it into our program so that we don't have to go within the folder just like we did here we can just call it as it is all right if I had a variable uh this wouldn't work but if I had a variable const uh name and then I said Lance right this this is not going to run but let's say I wanted to get name right and constants I can just say name here otherwise if I didn't have U super I would have to say constants and say colon colon name something like that okay cool all right so let's erase that because it's going to break our code cool and let's recap something right another important thing about rust is look at this this is a semicolon right in JavaScript we can get away with this right they're pretty lacks with you in JavaScript and Russ this marks the end of the line right after the you see the semicolon your code is like yep that's the line otherwise it's going to think that this whole thing is one line if I didn't have this semicolon here all right so you need to put semicolons if you don't put semicolons your code will Panic so make sure you do that uh we're gonna need it for this use super as well right and use anchor Lang should be like this as well cool awesome so going between our use crate and our program we also need to declare ID right so if I press d if you press d i we can press declare ID so I clicked it and it generated this for us this is uh the address of where our program is right you can think of it as the yeah the address of where it lives and if you see all these ones that's the default essentially right when I go ahead and build this we'll get our new programs public key so don't worry if it says one we can leave it blank for now but now it's starting to look a lot like the starter files right so the next important thing you need to know is how do we make a function in Rust how do we do that right in JavaScript you would just write function right function and then say knit right in Rust kind of similar right all I have to say to get started is say Pub have FN enit right I'll even call this init Master because that's we're gonna have to do in a second and that's how you make a function right so what's the skeleton you need these parentheses and you guys should know if you know anything about programming is this is where you put your arguments okay cool so what's next are we done not necessarily all right what we need to do is press this Dash right here all greater than sign to make an arrow then you say result uh less than sign parentheses greater than sign curly brackets and Bam that's it this right here that I'm highlighting this is a function or an empty function right it's a skeleton of a function all we need to do now right is write the logic in here right so this should look more familiar to you it's not scary rust right now right uh what are some other parts of a function usually there's a return here and you can turn the number five like if this was whatever adding function right but in Rust uh we're going to return okay right this is not exactly return but does give us back something and if you didn't want to give back five if it works you put five but for this specific function we can leave it as is okay you with me so far all right because you're doing great this is it so far for the function what do we want to do with init Master what does it all mean right so if we think back to our app right we're connected here um let's see it's what I'm going to do is temporarily remove this button over here so let's go to our code code code right here let's see if we can make this bigger nice and where is that wallet multi button comes out save boom right oh it might not be even running let's try and make it run yarn that's it oh see the app first and then okay we're good we're back guys so let's refresh this oh I see because it can't be empty that's totally fine we'll just put button here button and I believe there's on click and we had a temporary function here which was connect wallet I believe connect well yep so I'm just going to temporarily put this back connect wallet there you go oh did I change the wrong one I did foreign let's bring this to the other place right here there we go okay so remember what this button does we connect our wallet and this is the next thing we should see initialize the master right because once we initialize the master we should have access to all the things right so the real question I was asking is uh what what is the master right so the master is going to be an object right this is what it'll look like in JavaScript that's going to hold the last Lottery ID right why is that important Lottery ID because if you look back at our app this current lottery is number three at some point it was Zero some point is one some pointers two we need an object to keep track of what Lottery ID it is all right the reason why I'm making a master object is because this guy will do it and if we do it correctly we can have multiple lotteries going at once it doesn't have to be one at a time right so this is perfect for that for the purpose of this specific video we will work like it's one Lottery at a time if you're more advanced see if you can make multiple lotteries come at once there's no frontend support for that but that's my challenge to you guys if this is too easy for you so yeah we want to make a master object essentially and initialize it here right so there's a lot of pieces that we're gonna need cool so before I get into the rest of it um an object that holds the last laundry ID right before I continue writing out the answer another thing about functions is that there's usually context as a parameter right so let's say when we're adding two numbers it would be num1 and num2 right for every function in rust or anchor we need to write CTX which stands for context right we got to give this function context to work with like what is a master that's what it needs to know so we have to pass that in okay another thing about rust is that you need to identify the type so remember my example of like let's say we wanted to get the name what type what data type is name usually can you expect all right it would be string right you gotta let rust know like hey there's going to be a name coming in and he's a string by the way all right kind of like the the security guard so context right it's not going to be a string or a number it's going to be a struct called context all right and it's going to look something like this and you put your variable in here and this where the t is okay cool so our context is usually going to the name of our context is going to usually be the same name as the function it doesn't have to be but it should right so if it's the same name we can call it knit master okay and when you ever you're not really using it uh or doing anything in a function you put an underscore here okay cool and there's a reason why we don't have to initialize it here but don't worry about that so so far all we know is we made a function where we put okay here this is our result our logic goes in here and it needs a context right but if I were to ask you guys a question does init Master exist is this context struct exist yes or no no it doesn't right what did I get right there right nip Master doesn't exist yet right so this would be like undefined or more like this is undefined so how do we figure out or make our code understand what is init master well you want to go outside your program come right here and let's initialize it right so let's talk about accounts so what are accounts basically um with our Solana program we can create something called pdas and essentially store data at these accounts right so have a look if this is a Solana chain right this is this rectangle is our program we can use this program right to generate accounts and each of these accounts will have their own public key right or their address within the public key we can put uh account data right or in other words the master count okay and what is the master account hold it holds a lottery ID okay so later on we're going to do is fetch these accounts into our app right and use them and plug them in to make this work you following so far you can think of this as a database right because it is a database that's decentralized and we can fetch all of the objects right I'll call them objects from the chain all right I'll make more sense once we actually make it all right so to actually create an account in Rust we're going to use a macro we're going to say hashtag square brackets to arrive derive parentheses accounts right so this makes sense right deriving accounts here or creating a PDA and we're saying Pub struct right init Master Okay and then from there you're gonna say less than greater than and write info like this when one apostrophe and that's it right this is called a lifetime variable this you know without making it too complicated we're gonna just make sure that this struct will live on for however it needs to interact right because in JavaScript if I were to make an array let's say let array right how long would this live in memory this would live forever until I'd like deleted it or clear it or the Heap garbage collector from JavaScript destroys it right when I put a lifetime variable you let your code know hey this is going to last for this long he's staying at this hotel for this long right I'm not defining exactly how long it's staying I'm just saying it's going to live as long as it needs to cool so how do we actually make an account all right bore encoding stuff I know but to actually make an account we need another macro within here right and remember every time you use it what you write under it is where this information is going to get put into right so within here making a macro and we're going to write account okay and then we're going to say parentheses enter right and the cool part about anchor is that it initializes an account for you all you need to do as a developer is just write in it boom you just told anchor hey initialize uh init Master struct right well actually no it's gonna go under here so this is a struct this is our context of our code I want to initialize master account so if I say Pub Master here does that make more sense this macro is going to initialize a master account okay so init we'll initialize pair equals payer okay the reason why I'm writing payer is because whenever you store something oops you store something on the salon and chain right you got to pay for it right this isn't free right you have to pay for the space you use kind of like uh rent right if you're gonna stay somewhere you got to pay some rent okay so get used to that concept and don't worry it's not expensive because we're on the devnet so it's essentially free right but it usually costs like point zero zero zero zero zero zero on the debit so don't worry about it but the payer is going to be payer which is us all right the wallet that puts this here okay that's all you need to know and then we have to Define how much space does this actually take I'll let you know it's going to take up four right plus eight okay don't worry about this just yet I'll come back to it next thing that's important though is we need to put seeds all right what are seeds all right so remember before how I said uh when we are generating a new account right it's gonna have its own address right but we can predictably find an address to put this data in right we just have to put something as a seed all right the best way you can visualize this it's not the exact it's not the same thing but the best way to visualize this is there's something called disparate right notice how it says put your custom seat here if I put the string Lance I will put Lance it generates a unique Avatar this is my avatar right here right but if I were to say Lance with two e's notice how it's a completely different Avatar right so depending on what seed you get you'll arrive at a different address or public key okay cool so uh what I want to put here is a string as well so you can put a string what I'll do is I'm going to call a variable and what do I mean when I call a variable let's make use of our constants and let's write pop const Master oops Master seed right colon right because it's expecting the type and string and it's going to reference itself right and it's going to write master and semicolon right cool so Master scene right this lives in constants we bring that Master seed using use crate to bring it here we use super to bring it in this scope right just in case but we don't need that all right our our crates so for the seeds if I write Master here all right you guys should know what I mean this is a string it's a variable that holds this string and usually when you put something in this array it wants it in bytes so if you do a DOT as underscore bytes it will convert it to bytes okay take that string convert it to bytes that's the seat okay Master seed uh I'm gonna have to just put Master should be Master C like this cool yeah make sure it's the same name as this awesome so we have our seeds we have our space and now let's add bump if you don't know what bump is let's say uh when I'm trying to put it in this little account there's already something there so I need to put it somewhere else right it's kind of like saying um oh there's already a lance Avatar uh that exist if I put a 1 here we'll put it there instead but what if that'll exist and we'll put another one here or a 2 right that's what bump is doing it's checking the next available address that it can do all right I'm very simplifying this but that's all you need to know for now and all of that information is related to this master right here and what type can we expect from Master well it's an account right because we want to initialize an account right right and again if you didn't know where a cow comes from it comes from anchor length so all of our Imports are important and how long does this account live for I don't know we're going to put info here comma Master right master is essentially what this account is what account is this holding what's in this account a master account but if I were to run this guys it doesn't exist right how do we make it exist well we have to create it so let's create a master account all right so to make a actual account right we need to Define what a master account is and I kept calling an object because that's what you guys coming from JavaScript are going to relate to so put hashtag account like so and then you're gonna write Pub struct Master like this and you say uh Pub last last ID is u32 okay cool all right that's it we're done we made an object right so what's the equivalent of this um you can kind of say like uh master or class master uh is something like this Constructor it's been a while since I made this right this dot last ID is equal to like nothing or empty right I made what would this make right this would make a object that has a last ID right so this class Master The Struck Master will make an object that has last ID and does this have a value no has no value it so we need to basically initialize it with a value later okay so cool I hope this makes sense because we're going to be doing this over and over like anchor once you recognize the pattern it's pretty repetitive so keep that in mind so now Master exists um don't think there's anything else we need to add but how much space does a u32 take it's going to take in four so that's why for how much space we say hey there's going to be a master account that's coming in uh he he's gonna take up this much space for and this eight is kind of like the filler space this is called the account discriminator so you always see me add eight to all everything okay cool another thing that we're gonna need is we're going to say hashtag uh oops account mute Pub pair oops Pub pair is gonna be the signer and this signer struct is coming from a library as well this is so that we can Define what a pair is so that the pair does actually in fact equal the pair okay then you can add some space here and say Pub System Program is the program itself info system right cool and don't forget to add these commas here because they're kind of important all right so if it looks like this we should have our contacts and again I put an underscore context because we're not really doing anything with it it's going to be blank and we should be good to go so let's do the moment of truth right we can go to build and let's run it so we build uh there might be some errors as you can see all right so usually if you see a bunch of things it might be uh something to do with the the first one so it says program not found in the Master Okay cool so let's figure out what's going on I'm guessing has to do with the semicolon or something I forgot so I'm taking a look around and the first error is expecting a comma line 27. comma oh I see there's no comma right here cool so let's go ahead click this brush thing to clear it out let's hit build okay more stuff now it says something wrong with uh init master okay I have a feeling it's another comma thing come on comma there's one right here build hey okay build successful cool someone press this brush let's build again so you can see the successful build awesome so I forgot a comma right here now it's good all right if you see uh warnings that doesn't mean it's not working it's just a code warning you like hey um you imported a clock but you didn't really use it yet right but that's okay we can live with the warnings because eventually we will use those clock okay so other than that we're good to go so all you have to do if you haven't done so already if you're your first time using Solana playground connect your wallet here I don't know why the brush is really big but click this toggle Solana wallet button once you do it it should say connected right uh if you didn't know this browser already comes with a wallet so you don't have to connect your Phantom but you can if you want to right but if you want to deploy use this right here you probably don't have any Solana either so all you should do is uh go into your terminal and type in Solana airdrop two all right this is the same thing as the Solana faucet it will give you two to deploy all right cool so again what's happening right now well essentially uh we made a smart contract all right we want to deploy it to the blockchain so that we can call it from the blockchain back to our app all right so what step are we in we did this part we wrote some code like this right and now let's deploy it let's exit this dice bear deploy and it usually takes a couple seconds nice okay deployment successful there we go cool so what does this mean now it means our code successfully lives on the blockchain now right so now that's the thing we can test it so the cool part that I like about Solano playground um is that if you click this test tube right here we can test all of the functions that we create so that we can get a better understanding of it now one thing you'll notice to start understanding this is we have some accounts right it recognizes hey it's going to create some master accounts but if I ask you since we just deployed it to the blockchain how many Master accounts do we have I'll give you guys three seconds three two one ding ding ding if you said the answer is zero if that's all you are correct right you can fetch all the accounts that we created with this program and you'll notice that there's an empty array which means there's no Masters how do we create a master account well remember that we initialize it in this context but we have to run that function so we need to do init Master Okay so let's run it but we can't just run it we need to pass in some things right see how it says accounts here all of this is equal to the context this is our context right what we're going to give our function some information right so the accounts that we need to give to our function is a master account and a payer account so let's scroll down where is Master and pair coming from how does it know well if you look at our enit Master context what are the what's there a master a payer and a system program Master payer System Program and if I remember what I told you guys let's start with something easy I told you guys that the payer is us so if you click this click my address that's us 6D if I click this wall here 16. that's my address it's going to be different than yours make sure you click my address the system program is going to be all this ones right because that's going to be default it's going to be set up for you already you typically uh at least when we're on this browser don't have to write anything now for the master you basically have to tell your function hey where are we putting this master account right remember where are we putting this master account right are we gonna put it oops not that one we're gonna put it um here and this rectangle this rectangle this rectangle how does it know well we can predict it uh by using our seeds all right so what is our seeds well if you look in our seeds we need to just say Mass our seeds is the master seed what is Master seed it's just a shrink master so what does that look like click in this input field click generate a public key from seed and make sure it's string it usually is and all you guys have to do is write master generate boom that's it right see the 7rx that's the C that generates from us writing master right so that's the place we're gonna put it so if I press test it should create a master account let's go with past all right that's a good sign so a pass which means we initialized master account how do we know if I do a fetchall boom there it is in this array there is one object with two properties one the public key on where it lives and also the account with blast ID all right how's that also by the way it says the ISD is zero so when we first start the first Lottery should be zero cool so I hope it made sense every time we make these functions if you're confused at all wait till I test it right testing is the key here so this is level one we're only going to increase the levels it's gonna be just like this but we're gonna add another layer to it so if you guys are with me drop a like in the video put a comment below say that I'm helping you out Solano is awesome right also shout out to atcharon he's a developer who made this website that helped me learn Solana so let's keep it moving all right so I think you guys get the idea time for the next function all right so another function that we need to make is we made the master let's create the lottery All right we need to set up the lottery right if we go back to our app what happens let's refresh this real quick what happens statically at the moment we connect our wallet we initialize the master and then we can create the lottery right because if we don't create the lottery what are we even playing right so we got to do that so let's create the lottery how do I create a function well you say Pub FN name of function which is create Lottery cool what else parentheses Arrow result boom and then after the result curly brackets this is your function you guys know who copy is from tick tock that's a function okay so from there let's go ahead and write CTX because we need context right and then what is context what type is it what context is context oops don't write it like that right like this context and what kind of context are we expecting uh we're expecting a create Lottery context and if I were to ask you guys does this exist yet you have to say no no Lance it doesn't exist so what do we do next let's create the lottery right and again um the whole point of this is so let's write what we want to do right we need to create a Lottery account right so what do we want to do this what is the Lottery account before we go any further well Lottery account it's going to hold the current let's ask the question what is a Lottery account well the answer to that is it holds the ID uh the winner the winning winning address right whatever address wins the total prize right and sorry about that let's make this smaller the total prize and it also holds I'm thinking um oh if the price was claimed and who has Authority over the lottery right Authority is basically who controls the lottery who created it all right so that means uh in short there is a lot of things that we care about in this Lottery okay so we need ID the winning address the total prize if the prize was claimed and who has uh authority over the lottery okay you guys got all that cool so uh we can't do anything here just yet because we need to create the context so let's go ahead and do that so we can go ahead and create the context and how did we start last time this is why it's repetitive we have to start with that all right say hashtag square brackets derive accounts Pub struct create Lottery and this is the last time I'm going to be writing it and typing myself I'm going to show you guys how to use the shortcuts okay so create info great Lottery and then put info put these code brackets to identify the scope cool so let's set up another account macro here and before I move on all of the information that comes in here is going to be coming to the lottery because we want to Define what a Lottery account is okay cool oops so how do I initialize an account you're right in it how do I Define who the payer is last time we put payer right but the difference between this the master and the lottery is that there's an authority so who the payer should be Whoever has authority over this and again just like how payer was a variable that we made later Authority is going to be a variable we make later as well so let's go ahead and not forget the commas this time and for space leave this blank for now uh for seeds though put that array what did we do last time we had a variable that holds a string we can do the same thing we don't want to put Master C because that would generate the same PDA we want to put Lottery seed all right and this Lottery seed exists no but that's okay we can make it so let's say Pub cost Lottery seed make it exactly the same thing which is a referenced string and we say uh Lottery okay wonderful wonderful so Master Lottery I think we're good with that cool so lib boom so a lottery seed but we also need to turn this into bites right so let's turn to bites as bites boom cool and we can do comma bump before I do anything else but one thing I want to say is for the creating a lottery we should have more than one seed right because the more seeds we put into this right the more uh unique of a PDA we can generate okay and again we're not making new addresses all these addresses exist already right but we just want to make sure we select uh a predictable one right so right now the only seeds is the lottery seed which just says Lottery we can also put a comma here to add more and we can say um we can do master dot last ID right so what's mastered that last ID let's look at this Mass this is master right this account dot last ID gives us zero right when our Lottery is at one technically the seed will be at one all right so let's do that and again when we create a lottery we need to add one to it so that's why it's whatever the last ID is plus one so technically uh if this is zero this will give us one okay and uh we want this to be formatted the way it can read it so let's say 2 L E bytes awesome cool so now we have some jack seeds in here we have the string and essentially the number right of plus one as our seeds and that's going to help generate the Lottery account so again what type is Lottery well it's an account you can say lifetime his info and what type of account it's a Lottery account but this Lottery account exist the same way Master did before no so let's make it and again to make it same structure account Pub struck Lottery and now let's define the object what do we need for the lottery right just in case you forgot we wrote it all down it needs an ID the winning address the total prize if the prize was claimed and who has authority over the lottery and again it doesn't necessarily have to be in that order so let's write it down Pub ID cool so I'm saying hey every Lottery account will have an ID then your code's like hey uh Lance what's the type of that though well it's gonna be you 32 and if you didn't know u32 means unsigned integer 32 bytes right uh if let's say the way I understand is that if you do u8 that's a small number but if you it's like if it's like 900 you it's not a good number uh type to put you should put 32 because I feel like that's going to be a no okay let's put Authority right who has Authority it should be the person who created it so what we could do is write something called a pub key because the authority is going to be whoever created it in this case it's this address which is a type public key okay with me cool so this the rest of this should make more sense Pub ticket price is next okay so this one I forgot this isn't the total um it's got total prize it's it's the ticket cost or how much does each ticket cost what's the price okay and for this one we can say u64 because I wanted to give us a range of numbers we can use a bigger range than however numbers ID can go up to so 64 bytes okay cool so u64 we also need the last ticket ID right which will be u32 and uh before I move on just so you know there's a difference between a lottery and a ticket duh right so every time there's a lottery we can purchase a ticket right we should also keep track uh how many tickets there are so if the last ticket number was Zero the next one should be one the last one was one it should be two right because what later when we picked the winner we're gonna select a random Lottery ID and figure out what the pub key associated with that idea is cool that was a different language to you just now don't worry about it cool so later on we want to establish who the winner ID is and the type of this is pretty interesting it's called an option right option okay this is unique uh to Rusty like you've never seen this before in JavaScript but make sure it's type option and claimed right I want to want you guys to answer this claimed what does that mean did the winner claim the prize right did the winner claim the prize what kind of type should that be I'll give you three seconds three two one did you guess it it's gonna be a Boolean so to make a Boolean type say Bool awesome Okay cool so we made the Lottery account that's that's it there you go there's the account the context is almost done we just need to put Pub Authority well actually we need the macro first account mute then we can put the macro I mean the authority and say Pub Authority is the signer right so again um this is just the naming of it it's the same thing as what we did with payer but this time it's a tour okay you can put pear if it's too confusing cool and last one we need is System Program all right again you could copy and paste this because again same thing cool so that's a lottery Moment of Truth we hit build cross our fingers okay of course we forgot forgot something uh there's our warning the first arrow is info is never used line 52 create Lottery okay cool so 30. oh how can I forget I said we're gonna come back to space but freaking didn't come back to space all right so basically to determine how much space you're gonna use um each of these things each of these types will take up a unique amount right uh one way to think about it is that u32 will take four right so how many u32s do we have uh we have about three so that's how much space it's gonna take so you say four well we can do the four plus 32 Plus 8 plus oops eight plus we have four plus four plus one plus four plus one all right cool cool yeah u32 is going to be for the 64. this 8 here I'm gonna put at the end 32. plus oh we actually do need eight now I'm thinking about it so we have 4 32 841 41 and then the account discriminator so yeah all of this is how much space the lottery takes um there's something weird though this should be highlighted the same way this is highlighted so that's pretty weird oh there should be a comma here it's the first thing oh and there should be a comma here and there we go so now I could tell this time the error is because of the colors so let's see if we build okay cool right so again we're kind of gonna error because the function's not done so we have our context create Lottery we have our struct or our count lottery we need to use it so again this is different from a knit Master because we didn't do anything here here we can actually we should write stuff so when we're creating a lottery right let's make this smaller when we want to but we want to do with this function is initialize the account right basically give values to this because this should have the last ticket ID and so forth so forth right another thing about it we might be missing one more thing foreign missing anything for your lottery oh we are we also need access to this master account right or the master account that's associated so just like how we initialized it here like this we can bring it in our code right here we can say hashtag count all right oops and say mute because it can be different seeds right so remember how in the master we were able to generate the corresponding Master based on the seed we can do that here as well by saying Master seed bytes all right so this should give us the same master I could say Pub master tell him what type it's gonna expect an account info Master cool I couldn't forget that seeds uh and we can just do bump and again we don't need to initialize here or tell them how much space it needs because we already set it up earlier or it should be done by the time we can create a lottery so we have access to the Lottery account we have access to the master we have access to Authority and the system program so we need to we all of that all what I just said exists when I write CTX okay so how do we use this let's think about so CTX is essentially all of this right when it's kind of like an object so how do I get the lottery right so to get the lottery I'll just type in ctx.accounts right and once you do dot accounts after CTX you have access right keyword access and I put a comma here comma that's good access to Lottery to master Authority and System Program so let's say I wanted the authority all to do is ctex.accounts.authority all right but which one did I want I want the lottery so if I say dot Lottery now it's the same as um getting the lottery object all right so I've accessed all this stuff what I like to do is set it equal to a variable so you can say let Lottery is equal to all that okay so now when I say Lottery dot uh is CL like what's called last ID right you know what I'm talking about now yeah or better yeah Lottery lottery ID I can set this equal to zero I can hard code it I can even set it to three or four or five all right another variable I want to set up is let master and do I have access to the master accounts yes I do that's why I set it up so if I do CTX I can do dot accounts and then I could do not matched start a nap here cool um so what do we need to do well the first thing I like to do is remember when you make a master account oops I want to make a master account it's only keeping track of the last lottery ID right so when we create a lottery we should increment so we can increment that really easily by saying master dot last ID plus equals one this is Javascript or we know this how to do this in JavaScript it's the same thing right increment the last ticket ID and again uh if you're more advanced you know how to do this if you switch the branch on the repo it's from CLI star to main I've included the solution so you can compare it to that as well okay so move on right ahead if this makes sense to you if you're a beginner don't worry stick with me you'll learn cool so we increment the last ticket ID next we want to set the lottery values right so currently lottery.id is empty but what should it be all right should it be zero should be one two well it should be whatever master that last ID is so if you know if you know you can say master that last ID like this okay you're literally pulling it from here so we incremented it it was Zero now it's one and now I'm saying the first Lottery the ID is one so if you were to reflect that here technically the first number would be one two three okay cool next thing you want to do is who is the authority so we say lottery.authority well the lottery that Authority should be us but do we have access to that we do all right so go back to your context check if we do we have it right here so how do we get this think for a second so I want to try this on your own three two one all right if you said to get the authority you say CTX dot account dot Authority you're correct but it's not um a public key or not in the format that you want right now what you want to do is dot key and there you go you got it now so that's the authority okay next thing you want to do is lottery.ticket price all right how much does ticket price cost hmm well this one do we have any information about that no we don't right how much does each ticket cost on this last specific Lottery right we can pass that in as a variable or parameter so we can write a ticket here and let's see do you want to do anything yeah ticket prize and this can be a u 64. all right so this takes in two arguments the context which it always does and ticket price so technically it takes one plus the context okay so then we could take this argument and use it right here ticket price ticket price amazing okay cool battery dot ticket price cool uh one cool thing is that we can add messages all right I imported this library and say created created lottery or create Lottery it's kind of like when you see a message like this think of it like console log in JavaScript I'm basically saying um hey this is the created Lottery which is gonna be Lottery dot ID okay uh the reason I write it like this is because if I say Lottery ID here it's going to go where this curly bracket is so basically say create a lottery is it one okay another message the authority right so how do I Define what the authority is Curly brackets comma Lottery Dot story nice and we can also let them know what the message is and I forgot every message is exclamation point like this the bang and the ticket price colon curly bracket and let's fill in that quarter curly bracket with lottery.ticket how do we get the ticket price ticket price okay it's when I said okay because that's what we need next all right that was a bigger way bigger function than internet Master yeah guys well but this is what we need to do to create a lottery first simplify the context into variables increment the last ticket ID set the values and again optional but we can write little messages here so let's take a look clear that go to build got one is this an error could not compile results found okay let's see what's going on let's make this smaller and let's take a look I wanted to see this again ticket price ticket price oh I brought ticket prize but it should be ticket price okay that was my final prize here but it should be price I think what did I put here ticket price okay let's build ah another important lesson okay so if we go back here one thing I forgot is that in Rust we can't just say equals this if we're going to change it right remember const in JavaScript right we can't change variables that say const and rust it's even more strict because if we want to change a let right get the same and mute all right so let's make sure we add the end mute because this means I'm making this variable mutable and that it can change otherwise it's going to assume that it's going to stay that way let's go build successful all right so let's clear that let's show you again nice again warnings totally fine right now I'll use the clock I'll get to it but there we go um I'll ask you guys this we deployed our smart contract on chain right but when I add new code am I writing that on chain yes or no am I right in here no essentially uh we still have our copy here and we wrote that first function but we just wrote a second function right we want to upgrade this contract all right the cool part about Salon is that you can upgrade it usually when it's on a blockchain you can't delete stuff or uh rewrite stuff but we can by pressing this upgrade button and this will cost you so some soul so make sure you airdrop yourself a lot of soul I think this should be enough for me and once that's done we run the test again and this is the process you create you figure out what you want to do create the function create the context get what you need in that context and you're good to go right so you can make any function this way I encourage you guys to try it make your own projects test this out learn from this right we have the create Lottery function now so again currently if I fetch all we still should have one even though I upgraded it I didn't make a new smart contract I still have the same address and this is still a account made with this from this address right but do we have any lotteries no I have none let's walk through the hypothetical if I create a lottery object right a Lottery account that should be filled up but does this get changed yes or no yes right the last ID gets incremented right right how we did it right here so let's put my theory to the test right we need to put a ticket price cool so let's determine how much each ticket will cost for this Lottery right in an ideal world uh we could just put five it costs five Solano to enter the lottery but um when we're testing this it should be in what we call Lamp ports right so what are lamp ports well you know the native token for Solana is sold right well if I say lamp ports lamp ports is a fraction of Soul right so a bunch of land ports like a lot of lamp ports will create one Soul right so let's say I want to make this Lottery cost one soul right to do that you would write zeros nine zero zero zero zero zero zero zero zero zero zero and you put how much a soul right here so if I put five this will be technically five Solana but for the sake of how much longer I have I only have 5.8 in this wallet put one okay cool now again let's do the easy stuff first we did the arguments right right here what accounts do we put in this is coming from where guys the context all right we need to find the mass well not this one we need to find the Lottery the master the authority and the system program system programs done for us but who has the authority who's paying for this me my address the master do I need to generate a public key from seeds or should I do I have something already I do I already have a master right here so go to the public key double click this Ctrl C or command C and paste that right there right this is the master that we're gonna base off to create the lottery all right so now for the Lottery account does a Lottery account already exist yes or no all right you should say no here y doesn't exist because we generate a lottery count from the seed all right so let's do it from seed so the first thing is Lottery all right and the next is uh whatever the master's last ID is plus one right so you select that right it's gonna be in u8 should be and actually as I think about it let's remove that let's add a u32 here why do I want to add a u32 here is because um it's expecting a u32 anyways all right so let's keep it consistent and what is the master's last ID let's check it's zero but the trick here the gotcha is this plus one so what's zero plus one guys yep thank you it's one good job Sarah all right so now we generate Bulma calculates the public key we got the master right and if we wrote everything right the test should pass let's go all right I'm always a little nervous when I run the test because maybe I wrote something wrong as you saw before but the current lottery passed right so when I fetch this how many accounts should we have boom one right so notice something remember how we defined the winner ID to be option right it's either going to be null or it's going to have an actual winner here right but we need to create a winner function first in order to see that in action right and again this doesn't cost like a million dollars this is equivalent to one Solana we're gonna make that conversion later right because again this is in lamp ports right fractions of soul okay so it should be one Soul who has Authority right this guy has Authority and what does that all that means is um he can pick the winner right because it'd be weird if other users can pick the winner the idea is one and now my question to you guys if I get the master if I fetch this what should this last Knight D be now it's one cool so how many lotteries we have ongoing uh currently one right and it won't be ongoing until we have a winner and they claimed the lottery cool so that's the create Lottery function all right so let's continue on so we just made the create Lottery button but what other functions that we want to make guys all right let's think back to the demo what did we do right we connected our wallet we initialize we can initialize the master we can create a lottery but we also need to enter when we talk about enter I mean let's purchase a ticket and add to the pot right so if every ticket costs one Soul after I press enter which should the pot be now 1001 exactly okay so with that in mind we need to create that functionality all of our functionality is coming from the smart contract right you know it's different from when if we were to make this in just pure next JS we would put all that functionality there it'd be really easy right for us we're just going to say Pub have fun okay we say bye underscore ticket because that's the function name and excuse me let me just move that over by ticket set up the function cool and what else do we need guys we need context so let's say CTX and this is the last time writing about this function so CTX context what is the context it's the buy ticket one okay um I'll let you know right now this buy ticket is going to take in the lottery ID right what Lottery are we buying a ticket for that's why we need this okay cool that's set up we need to set up the context now so let's go scroll down to the bottom and create that context all right so you want to buy a ticket how do we start well we can go and say dot Drive accounts thrive accounts you can say hashtag this is kind of new we it's an actual instruction so we say instruct shown parentheses we want to pass in the lottery ID type u32 okay and then underneath that we say Pub struct by ticket okay what do we put here info and curly brackets we are in business boys so from here we want to create that account right so the first thing I want to get is this so maybe this will make more sense we for when we buy a ticket what context do we need well we should know what the lottery is right if we need to pass in the lottery ID uh we should know the ticket right so that means we have to create an account we should know um the buyer right buyer and this one's always here but we need the pub System Program okay so this is all the context we need we need to get all of the context and the first way to get uh the lottery is to write this account thing again and my question to you guys is do we need to initialize it no we just have to say it's mutable we just need it to be mutable because there could be different lotteries that we're getting uh how do we determine and calculate what Lottery we need well let's pass in the same seeds to get that address so we Dean Lottery seed I believe that has bytes okay comma and what else do we use as a seed guys it's gonna be and Lottery underscore ID dot t o underscore l e bytes parentheses cool so that's it for seeds don't forget this bump here and that's it for lottery All right we just need to put the type Lottery what is it expecting it's an account um what kind of account are his Lottery it's a Lottery account all right so now we have access well we're giving a context Within by ticket okay so now the important part the ticket itself right is there an account that we set up for a ticket like does our code know what a ticket looks like no so what do we have to do we have to initialize it so let's do a count and say parentheses here and say knit to initialize it the payer right we usually put a payer here but we actually can put the buyer all right and again if you this confuses you you can put it as Authority but when you see me use this variable later on it'll make more sense it's just for naming purposes same thing though buyer is going to be signer so we could do that now so we should say a buyer is the signer right whoever signs for it that's the buyer the payer to pay for the space is the buyer space all right I'll tell you right now it's gonna be four Plus four plus thirty two plus eight and again you don't put the eight at the end I just want you to know this is something called the account discriminator cool and now for the seats right this is the fun part seeds is equal to uh it's gonna be a couple things right so we're leveling up before to get the lottery we need two seeds but for the ticket we're actually gonna put three all right so the first one is the ticket C variable which we need to create later as bytes next thing is we should put the lottery key as ref and I want you to keep in mind what seeds do we use for each account right so this takes two this takes three what kind of things does it take in right and then we also need to do and Lottery dot last ticket ID right so very similar to how we got the lottery ID as the current lottery ID as part of the seed we need the last ticket ID right so if I scroll up here just like how our master keeps track of the last uh ID or the last lottery the lottery keeps track of the last ticket ID right so did is it this ticket number zero is this ticket number one it's number two right we help determine that by passing it right here and again it's last ticket ID plus one all right so the first ticket ID is gonna be one all right so after that we can play dot to underscore l e bytes okay and you could put a comma here but not necessary because it's the last one up so make sure you spell that all correctly don't forget to put a comma after the space and comma after this and say bump so we had the mandatory bump next for the ticket all right what kind of type is ticket it's an account you say info and what account is is this gonna hold it's gonna hold D take it one but we don't have that yet so we need to make it don't put comma here comma here and for the system program we're just going to put program oops pretty standard program info system okay cool so there is that that's the buy ticket struct let's make the account now so we can say hashtag account um and then under here we say Pub instruct ticket boom and again this is not the right color we are missing something um water Empire what's this signer oh I forgot this one that needs to be mutable count mute oops okay so that's one thing what else missing something else here signer System Program that's fine ticket bump is good this is good oh comma here hey we're good okay yeah don't forget your commas so take it what is the properties of a ticket right what do we need we need what's the id um and who has authority over this ticket so let's do Pub ID u32 um the authority and last but not least we want to put Pub Lottery ID right again this is kind of unnecessary but when we fetch tickets from the front end it'll be a lot easier because you can say like oh give me all the tickets from lottery number two otherwise we'd have to go to each Lottery and find out okay what are the tickets inside that Lottery right it's easier to be like okay this ticket is with lottery number two lottery number one right it's gonna be you 32. oh so we got this the account we have the the struct the context for buy tickets and now let's just quickly make the variable Pub const uh ticket seed type the referenced string and ticket cool all right so now that should exist and I can't pass build yet because we didn't write any logic for buy ticket right so how does buy ticket work all right so what is buying a ticket it's exactly what it sounds like right we're purchasing a ticket for the lottery right but what should happen is when we buy a ticket we create a ticket account and pay right the lottery with the ticket price right so if the ticket price is one Soul where is that one Soul go to that I spent this ticket on all right it goes to that Lottery that I pass in so when we buy a ticket we create a ticket account and pay the lottery with the ticket price which is our case One Soul got that so how do we do all that well the first thing we're going to need to do is set up the variables so let's say let Lottery is equal to and mute because we need to do this it's going to be a different lottery every time I run this function it's not going to be the same one and we also need to uh assign some variables to it so we say and mute CTX dot accounts dot Lottery right do you guys understand where I'm getting this from I'm getting this from the context because the accounts at by ticket are Lottery account there's a ticket account there's a buyer and a system program I want to say that accounts I have access to all four of those things saving that variable and not that Lotter and let Lottery right so we can say let ticket is equal to and mute CTX that counts and I know I see it the catch and mute Dot ticket right and again you don't have to set up these variables but I want to otherwise you have to write ctx.accounts.lottery.lastid ctx.accounts.ticket blah blah right we want to make the variables so we can shorten it so we can say equals um and ctx.account Dot buyer right oh that accounts sorry amazing so the buyers in this variable ticket lottery were good so now let's check right so um let's transfer transfer soul to Lottery PDA okay so to transfer our soul to the Lottery account right remember that's last part of the pseudocode we want to invoke a function right so right invoke parentheses and to transfer you just say and transfer okay so once you do and transfer right you can put parentheses here I'm just hit oops I'm gonna hit enter so that we can list them out but basically uh you want to write who you want to send money from so where is the Solana coming from it's coming from the lottery the ticket or the buyer the buyer exactly so we have that variable so if we say um and buyer.key all right the buyer at this key comma we want to send it to the ticket or the lottery the lottery right so that we can add to the pot so and Lottery dot to account oops to account underscore info and we say CTX dot accounts right oops not that one sorry hand Lottery dot key this is actually later so yeah basically from two and how much this last part is how much do they send well we know how much each ticket costs and where do we save how much each ticket costs we save it in The Lottery by saying lottery.ticket price which should be uh we signed up to one Solana all right so we got key buyers which is from two how much okay pretty simple so far and after this closing parentheses put a comma right this first one you can see it by the matching one hit enter and you say end array right because this is the information of each one so we can say uh oops we can say buyer.2 oops account underscore info comma oops comma we can say Lottery .2 account underscore info we can say CTX this is what I was doing before accounts.system program program.2 underscore account underscore info cool so all of this is part of the invoke function the only thing you'll need to do after this is after the square bracket put a comma and after this closing parentheses you could put a question mark here semicolon and we should be good to go right because this closing credit bracket is still our function there's some other things we need to write here like Lottery uh Dot last ticket ID right after we buy a ticket we should also increment the last ticket ID right so that we don't have the same ticket with the same ID so how do we increment this variable plus equals one okay uh so we can say the ticket oh yeah we need to we need to set these values right what tick what is the ID of the ticket I just bought well it's going to be equal to Lottery dot last ticket Aggie okay basically uh if the last ticket I do is zero this ticket I just bought is gonna be ticket ID one makes sense uh we also need ticket dot Lottery ID like what Lottery did we buy this ticket at we bought it at Lottery underscore ID it should be the same okay and then we need ticket to Authority right if I'm getting any errors it'd probably be uh spelling so buyer dot C who's the authority should be same as the buyer which makes sense and we can add some nice messages here so we could say that the ticket ID and how can we do like a template literal technically here you can say ticket ID again this variable or whatever value this is will go here and we'll remove the square brackets also message you can say quotes the ticket Authority who has authority over this ticket it should be the now ticket Authority so colon this ticket oh comma ticket dot Authority and then okay there is one more thing that we should add before we completely finish this function and it's just basically some error handling so if you think about it right we create a lottery we buy a ticket we pick a winner right and then we uh claim the prize right but if we're still on lottery number three there's already a winner should we be able to enter and buy another ticket no it's kind of like a scam there's already a winner we shouldn't buy tickets at that Lottery right so we can add that error handling in here right with some sort of if statement okay another cool thing we could do is make another file that has our error messages right it's really cool in Rust so you could say error the RS and that will be where we write all our error messages and once again you don't have to make a error file you can actually just put all of it in the lib but just for organization purposes right we can do something like this so we can say anchor Lang pray lewd error underscore code right so quiz time uh what did we just import here we went into anchor Lang we wanted to Prelude we got error code from Prelude and now we can say error code you'd say Pub right Lottery error and we can say hashtag message uh winner already exists right and then we can say underneath that macro we could say winner already exists this is the type of error that we get and this is the message that will come out of that error okay um it's enum because we can allow multiple errors here okay and since we're here let's write out all the possible errors again uh to make a message you say hashtag message another one that we need to think about is um you like if I want to pick a winner but nobody buy any tickets that shouldn't be possible Right how can we claim winner if nobody added to the pot or if nobody bought a ticket so you can say something like can't choose uh winner when there are no tickets and you can call that type no tickets right so when I'm going back to this code I can call literally winner does not exist already exist or no tickets I can just write this and it'll know which error message to send okay another one is this message um when there's a winner not chosen right so we can say winner has not been chosen period and from there I was out of periods here period period okay and then we call that winner not chosen all right is this making sense so far uh another possible error that we might want to use is message um if there's an invalid winner like what for whatever reason the ticket was invalid right they somehow got a ticket that doesn't make any sense you can say invalid winner and call it invalid okay and I can only think of one more if you guys have any more feel free to add it all right good prize has already been cleaned I can guess what kind of error this is it's basically somebody has claimed the prize right and someone's trying to claim the prize again which shouldn't happen right which should say already closed cool and that's how you make error yeah so that's how you make all the errors and um I think this should be already closed already claimed I like how that sounds better okay so again we made an error file we can import this by saying error star we can say mod error and now right this brings it into the scope as you remember use super brings everything in this scope into the program right so I don't have to go into that folder so let's go back to here and let's do one of our checks so I'll put this at the top here if right there's still if statements here but it's different if you say if Lottery dot winner ID and just in case you don't know I'm trying to do uh the winner already exists there all right so how can we tell if a winner already exists well let's think back to the lottery struct right we have this winner ID and the way to look at it is like option uh basically means the winner I can be the winner ID can be two things it can be like some and there's like something in here or it can be none right we kind of saw this when we got we saw the Lottery account and it's the winner ID is null right so that means it's not some and when I say t here it means a value right so there's an ID here whatever it is okay so let me erase this because we don't need that so what I'm saying is if Lottery dot winner ID dot is sum right that means it's not empty like there's something in here there's a winner right so if winner return error and then you can say Lottery error right why am I saying Lottery error because that's the type right here that's the enum Lottery error is winner already exists all right is that all come together now if there is a winner return the error and what kind of error are we returning that the winner already exists it would print out this message when it already exists pretty cool right so when you're making your own app think about that structure and what you need from that error all right what kind of error do you want to display here okay I think we can buy a ticket now so let's see if we can build I'm guessing there's probably going to be some spelling errors yep literally ticket price anything else lottery ticket prize it's the first thing okay there's a lot a lot to go off payer specified does not exist okay so that's the first thing 158 let's take a look okay so it's something wrong with the payer the payer is the buyer buyer should be the singer should be the signer it's about this wrong signer okay let's see what we get now and let's hit build there's probably some more things look for the next building expected function macro error return error not a function oh okay so there's something with our check so it tells me you should go up here turn error return some turn oh oh it should be exclamation point same way we have message exclamation point that should be the same thing and I think we might need a exclamation point here uh let's see let me just test it first so let's just clear this out go back to here build a lot of errors all right is our that's the first building second building third building okay unused Imports that's fine oh right here no field ticket price on type mute anchor Lang unknown field oh I did it again it should be ticket price not ticket price so line 59 ticket price okay you can see this is like that build taking a while build successful okay let's go so again if your code has errors that's not necessarily a bad thing it's just about understanding why it works which a lot of time I don't understand why it works but luckily we're able to figure it out right so every time I put price a prize it should be price another thing that I realize error should have an exclamation point here cool so build success successful let's run out one more time to make sure build boom okay so build successful that means we're good again warnings are okay cool so what do we do after we finish building we upgrade again upgrade's gonna take a couple seconds but I'll be back when it's done cool all right so deployment successful right if you go to tests we have buy ticket now so let's just review what we have we should have a master initialized we should have one Lottery active right there's no winner there's last ticket ID zero which means how many tickets there are zero there's no winner false which means there's no winner we're like I just said and how many tickets do we have empty all right so let's buy a ticket then all right so how do we buy a ticket um actually we need this one we open this up we need to pass an argument and we gotta pass in all of the accounts so what is the lottery ID right what Lottery are we buying a ticket for that's what this is saying well our ID is one so we should just be able to put one here and we're good to go so that's it for arguments all about for accounts our context right um do we have a lottery that we want to put here do I need to generate a new one from seed no we already have a lottery we just need the public key of that Lottery so there's a have a public key right I fetch it right there the 9C for me that's the lottery public key cool paste that ticket all right let's pause and take it but buyer who's buying this ticket me so then you should say my address system program is good now for the ticket right how do we generate a public key for the ticket the first question I have to myself is do we have a ticket already nope we do not so we need to generate it from seed right so the first thing that we write for Ticket seed uh is just ticket I believe you can double check that in your constants ticket then we need a lottery key dot as ref that should be public key right when it says lottery.key that's just the Lottery's public key which we have right here actually so copy that paste it right mine is 9C yours will be something different here oops and how many C3 we need one more all right do we need the lottery dot last ticket ID so what was the type of last ticket ID let's see let's scroll up elastic ID is u32 so we can add that as u32 and then let's scroll down it's going to be the last ticket ID plus one so we can take a look at that so the last ticket ID is zero what's zero plus one one you hit generate and that should be our public key that we get that's the account public key we hit test hope for the best and we bought a ticket let's go so that means we spent some salon right I did have I've already forgot how much um tickets we bought but there we go awesome so let's see how many tickets we have we have one ticket with the idea of one what Lottery did we buy it for lottery ID number one okay so now if I fetch this what should be the last ticket ID one there we go and let me show you this example by buying another ticket all right so for arguments right what should be the lottery ID one what should be the lottery this who is the buyer still me so what does that mean in real life I'm buying two tickets right for Ticket should it be the same public key it shouldn't right so we need to generate this from seed again um the cool part is you'll see the difference right so to generate a ticket public key from seed you just have to put in the same seeds so we say ticket and then you say Pub Key which is the same but here's where the magic happens on the third one where you expect the u32 last time we put one right because we got the last ticket ID plus one we don't want to put one or else we're gonna get the same uh public key we're gonna get this a y we want something different otherwise that already exists right so we need to figure out the last ticket ID which is one and add one to it right so we add one to it one plus one 21 I mean two right we hit generate and now it's C and I and just to make sure I have 4.7 soul let's hit test let's go I have three Soul right so that means I took my Solana from this wallet and put it into this Lottery right so if I ask you what is the um total pot right now you can't see it from here but the total pot is too sold which means if I pick a winner they're gonna get two sold right we just successfully transferred it to this account there's a concept called escrow right this is essentially an escrow okay but don't worry too much if you don't understand it so we have we have two tickets right we can see that here if I fetch all the tickets there's two you can see what id you can see who bought tickets by The Authority right 60 60 so two I bought two right cool so let's go ahead and make the next function all right so we have a knit Master create Lottery and now what should we do we should pick a winner okay so to get started with that next function uh we can bring this over here scroll up to the top and I'm gonna teach you guys a shortcut I showed you guys earlier but you can say FN and click this right here you can create a function the cool part is the important stuff is highlighted for you so let's say I press backspace I press pick winner and if I press tab I can edit the context in the context you guys should know should be pick winner right so what the hell is pick winner this is kind of like the meat of the function right basically um you want to let's say select oops select a random ticket as a winner right and set the winner ID to that winner okay so uh the cool thing about the shortcut it already sets up our okay it sets up our context and we just have to fill in the blank really because it's pretty repetitive so let's go here and let's create that context for declaring a winner so what I'll do here is type in type in um derive accounts okay we can say #instruction because there's something I do want to put in here we want to put Lottery ID right because we need to know what Lottery are we picking the winner from is it the first one the second one the only one right so we can say space u32 and underneath is where we write the struct so we could say s or uh CS for create struck click this boom and then again it highlights what we need to edit so we can say the struct is pick winner and of course put your info in here Okay cool so we have this truck set up let's set up the account mute account oops like so yep it's going to be mutable hit enter because it's going to be a couple other things because the reason why I want to do this is not this right here it's going to be for the lottery right because like I said we need to get the contacts that we need is the lottery itself so I want to make sure that's mutable because it can be many different lotteries we need to tell them what seeds to get the right public key which will be Lottery seed dot as bytes comma selfreference and Lottery id.2 underscore Le underscore bytes parentheses comma and we don't forget bump and we can do a has one equals Authority okay because um only one account can pick the winner right and the person that can pick the winner is the one who created the lottery otherwise if um let's say there's Mega Millions jackpot right we the if I'm picking the winner right I shouldn't be the one to pick the winner if I didn't make the Mega Millions jackpot all right cool then we can say enter Pub Authority is just the signer who's ever signed all right perfect uh for common here come here and come here and that should be it right that's actually it for picking a winner and I would ask you guys do we have to make any new accounts nope we just want the Lottery account cool so this should be the struck trying to think yeah this is it for the struct the uh difficult part about this function is going to be the logic of pick a winner right because yes the pseudocode is selected we're going to take it as a winner and set the random the winner ID as the winner um the issue here is a random ticket right because in Solana there's no true random solution but there is like a pseudo random solution like pick a pseudo random winner and you don't have to fully understand how to do it but if you want to know how to get a pseudorandom number in Solana this would be the way okay so I think the oh wait hold on sorry about that camera died but we're back so as I was saying I think the best way to show you guys how this pseudo random uh number works is let's build out the whole thing and let me talk about it okay so the first thing you need to write is a variable called like clock and let's get the clock and again this if you're wondering where clock is from we're finally using uh all these Imports over here right the clock the hash uh we used invoker ready uh we use transfer we need the clock and the hash so the first thing we need is the clock to get the clock we say clock clock clock clock clock say clock colon colon um get right here okay and then put this question mark and say semicolon and from there we also want to make a variable that's going to hold our random number so the suit the random number will be called let pseudo random number because again uh Solana is what we call deterministic so uh it will usually know the answer before the transaction goes through and that's why it's hard to get a random number um another way to get a random number is if you have to set up some sort of Oracle but that is a way above my uh knowledge so this is a way to do it so we've set a variable here and let's just put parentheses because Within These parentheses we want to write something and uh bear with me because this is again I'm even still trying to wrap my hand around this but from what I understand we want to make a number right we want to make a big number which is why we say u64 here right and we can generate a big number from bytes so we say from Le underscore bytes okay and again this is a function in itself and to generate a number from bytes right to generate a u64 big number we need to pass something in here so I'm going to hit enter and what we want to pass in is this we will say less than greater than array and it's not on the right it's just square brackets so u8 eight and you say common colon try from parentheses and again I'll break it down after I write it all out and hash okay again so we're using that hash function from the top over there that we imported all right this hash okay and what we want to do is say in hash uh parentheses because that's a function all right we're going to generate a hash from this and clock right dot Unix timestamp timestamp dot t o b e underscore bytes parentheses okay with me so far cool because the next thing after this is going to be dot two bytes right and make sure it's out of this parenthesis right here dot to bytes parentheses dot dot eight parentheses uh Dot unwrap actually I could just write that here dot on red okay and then you put a comma right and after that comma there should be one parenthesis here you can hit enter right there and you can say times clock that slot right and uh in the next line I just organize this information oops slot you can say percent Q32 Max has q64 and you can say in between these two parentheses here as uh wait did I do this right percent to 32 equal Max as 32. okay um let me see so this opening has a closing this one has a closing this one has a closing this one as a closing and this one closes so yeah there should be there's an extra one right here semicolon and yeah cool all right so yeah I know this is a lot if you didn't click off the video congratulations you're a trooper because this uh definitely was a doozy right but to break it down in simplest terms like I mentioned before we want to create a big number right and I represent this big number by saying u64 so I want to make a big number uh to make this big number I'm calling this function called bytes from Le bytes right and what this takes in is bytes so in between this parentheses and this parentheses we need to get bytes right so you can assume that this whole thing here is giving us bytes right here's the thing though um here's the thing though if this gives us bytes what the hell is this thing I'm highlighting well to tell you right with from here we're getting a try from all right don't worry about that yet which is another function that's calling a hash function so again big number we want a big number from bytes and from those bytes we're gonna call the hash and then we're gonna get the clock new next time stamp right so what is the clock Unix timestamp it's basically what time is it right now it could be like uh 12 it could be 19 22 right whatever that is that number and turn that into bytes okay because the hash function this whole thing I'm highlighting right it wants bytes within here so take the clock take the time turn it to bytes and then let me highlight a new thing right here this will return a hash right so it generates a random a hash from the time and what makes this already kind of random is the time right because um the way time works right it'll be a different point in time of day depending on when you run this pick winner right and from there it will generate a hash for you and again uh to get some to make this function work we have to turn that back into bytes okay so that's this whole thing so from lib so we want a big number uh so we have to turn it into bytes First We Take the time turn that into a hash which then we turn into bytes right and then from there you're gonna see an unwrap right because the reason why it's unwrapped here is because this try from can fail but uh it will never fail so you don't have to worry about it but we do just want to put an unwrap here and last but not least we need to multiply the time slot the clock dot slot right so not only are we getting a big number from here right we're also going to multiply that to get that big number so again it's not truly random technically there's a chance um that it won't be random but it's what we call pseudo random okay and then from there uh we're casting it as a 32. as you instead to be u32 there you go as u32 okay so that should give us a random a pseudorandom number okay and if I did this right we want to say let winner ID right it's a variable set this equal to parentheses pseudo random number that variable whatever that random number is and we say modulus Lottery right a lot where are we getting Lottery from right from our context right we set it up all the way down here and pick winner we have the lottery so let's get that context right so I can't just say Lottery just yet it's gonna be undefined but let's define it here let Lottery is equal to and immune to CTX dot accounts dot lottery so we have access to that now so I can say Lottery dot last ticket ID right so basically um this is how many tickets there are this could be 5 this could be 2 this could be one and for example sake how much tickets do we have right now so we have two okay so the way this is shaping up to be is we take the random number we do modulus two and we can't forget we need to do a plus one here right because it could be zero right so basically pick a number a random number between uh how many tickets we have so if it's zero to I mean if it's one to seven pick a number from one to seven that's the winning uh last ticket ID so it could be ticket number one or ticket number two in our case okay so that's how it should all work right so once it selects that it's going to store in this winner ID that's the winning ticket right and then from there we can say the lottery oops Kidder a lot sorry Lottery oh it's weird it's why is this doing this dot winner underscore ID is equal to sum winner underscore ID all right so remember how in the lottery struct we had winner ID is an option it could be either what guys it could be sum with a value inside or none right as you saw is no right here we're making it from null to something and that something is the winner ID that's the simplest way to look at it and then from there let's make a nice message here that the winner ID is the winner underscore ID and this should be a comma so that it'll take whatever this is and write that message here and then semicolon um and yeah that should be it so again this could fail because I might have wrote this wrong it is a lot of code so let me just double check it okay so the random number you eight uh two B bytes two oh I've already seen error that should be two underscore bytes so make sure it does that um hit enter here so it's still gonna work because I didn't put a semicolon just so that it doesn't wrap around that screen and let me see clock slot okay so that looks good pause this video make sure it looks exactly like this because there could be a chance you're missing a comma semicolon spelled something wrong right if there's any errors it'd probably be around here cool now I'm double checking this line sudo it's about pseudo wrong EU all right that's how I spelled it here you you yep okay I'm pretty good with this so we can pick a winner okay and that's it so let's go ahead and build let's see if anything else comes up of course can't infer Strokes let's see at the very top because that's usually where the error begins unresolved import for a client's client account signer okay 93. hmm taking a look at this I should put bloodstruck here I don't know if that'll fix it but we'll see nope can't infer type Hmm this looks good Pub Lottery count lottery Pub Authority singer again forgot signer now we hit build a build successful okay so we got a build successful and now what do we do we hit upgrade so give this a couple minutes and we'll be right back all right so it was successfully deployed again and upgraded and now we have a pick a winner function so let's run it all right so let's let's see just to recap uh we do have one Lottery that's ongoing right because it's not claimed uh there's no winner yet right and we have two tickets right so I bought two tickets so out of these two tickets who's gonna win at the end of the day it's gonna be me right because I bought both of these tickets but which ticket's gonna win one or two I don't know all right we can do that by picking a winner and to pick a winner let's see I don't think we have any arguments I believe right we do need one more thing so I need a lottery ID so I gotta pass that in so where is buy ticket pick winner yep so over here we put comma let's put underscore Lottery ID right the reason we put underscore is because we don't actually use it we just need to pass it in here right because it's going to go into our context so let's go build build successful type upgrade and now we're good right we got to make sure to pass this because we also take it in our struct right here Lottery ID because we need to know which Lottery are you picking the winner for right so it's almost done man I really need to win this ladder because I'm running out of Seoul here cool so again we upgraded it so now when I pick a winner we can pass in a lottery ID as an argument so um what is the lottery ID I already know it's going to be one right but there could be multiple lotteries ongoing but Lottery ID is one the accounts should be pretty simple what Lottery account are we passing in there's only one so put this public key minus 9C yours could be something different and for Authority you put my address because I'm the one who created this Lottery I'm the one that has Authority and let's pick a winner boom pick winner passed so there is a winner here and remember how it says the winner ID is null when we fetch this it should be something different two so what that tells me is that ticket number two is the winner right but notice something Where's My Money Right One must I should win the two Solana that I paid right well I don't have any so we need to make that function which is picking a winner okay so we successfully picked the winner right now for the final function that we need to make uh it should be as you know claim the prize and claim prize is exactly what it sounds like all the money is in this Lottery account and we want to take that money from the Lottery account our third party account and put it into our wallet so that was what the pick winner is going I mean claim prize is going to do so I'm going to go over here and we can say FN and we can hit create and we can say claim price tab uh claim price I'm going to move a little bit faster on this all right and then put comma it's also going to take in Lottery ID and we're not going to use it in this function so we need to put underscore so it's going to inspect a type of u32 u32 it also will need to know what ticket won so we need to pass that in so put underscore ticket ID u32 okay and then from there we can say let Lottery is equal to and mute oh actually we don't want to do this yet because it doesn't make sense yet but it will in a second all right so that kind of gave it away in our context we need access to the lottery we need access to the completed ticket word and we need to basically determine who the winner oh get grab the winner right so let's scroll down all the way to the bottom okay and let's start creating our structs so to get started you guys should know the drill by now we do this macro of derive accounts you say hashtag oops hashtag instruction and you saw how many things are we passing in here we're passing two Lottery ID which is expecting a type of u32 and uh after the 32 put a comma and say ticket underscore ID and say you 32 right this is a lot of code right so that's why we're not focusing too much on the front end we're focusing on the uh web 3 part of this so and again if you ever want to learn how to make the front end uh for my beginners out there drop comment down below saying that you want the full complete tutorial right but this is more so if you want to learn uh web3 with me so let's say the struct is claim price say info put the curly braces and this is our scope okay it looks pretty good so far uh we want to do here is we want to get the lottery right so how do we get this well we should just press Tab and say hashtag account you want it to be mutable because we could get multiple we could be claiming the price of several lotteries right so it could be seeds not just one and what are this what are the seeds that we usually get for lottery right if you get confused you can look above but I'll tell you right now it s lotteryseed that has bites the comma and it also takes in the lottery ID uh dot two l e uh Le underscore okay and of course bump and that is the lottery and what is the type of Lottery lottery is going to be an account so let's write that and what what is going to be the type of account it's going to be Lottery which we set up so we don't need to create it which is why we don't say init here okay cool we also need the ticket so I'm gonna put a comment here and how do we get the ticket all right so to get the ticket we say hashtag account again and we say seeds is equal to right this is different right and say um mute here I'm putting my seeds already I'm formatting like this because there's a lot of seeds we want the ticket seed dot as bytes and what else do we want guys we want Lottery dot key dot as ref and we also uh last seed was the ticket ID I believe ticket ID and to do this we need to do dot two l e so this should give us the PDA of our ticket we get comma we have bump um and uh there should be one Authority for this one so we say it has one equals Authority okay so ticket is good you can say account info comma ticket comma you can say hashtag count mute because it can be a different person a different Authority I mean pop Authority is the signer I almost put singer again signer info and of course the last part was the system program which is going to be the same so program info comma system okay we breathing we live good yeah just give me a nod if you're still here good I have no way of confirming that but I'm glad that you guys nodded so we have the struct for claim price um yep claim prize and let me ask you do I need to make any accounts lottery ticket nope we have those exist cool so that's the struct now I can go back up and actually claim the price okay so let's set up our variables again so the first one is the lottery uh how do we get this we say and and mute CTX dot accounts dot Lottery because this lot the lot no we can claim the prize of different lotteries right we can get the ticket and say and ctx.accounts that ticket you can say let winner is equal to and CTX dot accounts dot Authority and there we go all right so what do we need to do first is we need to uh I'll say validate the winner ID right so to validate we can say match so we can say match Lottery dot winner underscore ID and say curly brackets here and we can say remember how it's a sum we can say sum winner ID and equals Arrow like so and we can say if um when if winner ID does not equal oh well I don't even know it does that hashtag exclamation point equals does not equal ticket dot ID then we should throw an error so we say return error and we say oh don't forget the exclamation point and we say Lottery error colon colon in valid winner so for whatever reason the winning ticket doesn't match uh the ticket that we put in we can say invalid winner okay uh really brackets and then we can say okay so sum can either be something or none right so if it is none all right you can return another error which probably won't happen often so it says Lottery error is uh winner not chosen right this is if you try to claim a prize right but the winner hasn't been picked yet which in our front end you'll never see that happen but in the case you did uh you'd run into this cool and another thing another check that we need to do is uh if the lottery got claimed or that if that is true if so if the prize was already claimed it should also return error which is uh the lottery error that we created already closed all right somebody already claimed it all right so you shouldn't be able to press that button again so this is just a back end check uh back and check back end check cool for now for the actual transfer it's gonna be a little bit different than how we transferred it before so we say transfer um the prize from the Lottery account or Lottery PDA same thing to the winner so how do we do this so uh as I was saying to get started we say let's prize here is equal to Lottery um yeah we have we have Lottery right yep we do Lottery let Lottery and again because we don't put a semicolon this is technically saying Lottery dot ticket price okay so we take the so to get the prize from the lottery PDA to the winner we have to first get the total pot right so again uh we had two souls to get this a thousand Soul we gotta calculate it first so to get that we said that ticket price dot checked multiply right basically it's going to multiply Lottery dot last underscore oops underscore ticket underscore ID dot N2 right and then we just add a DOT on wrap all right so this should calculate what the prize is so um basically to sum it up uh we take the cost of each ticket multiply that by how many tickets there are and then unwrap it so let's say each ticket was worth five Solana if there's if we bought two tickets the total prize money would be ten all right so do that quick calculation and then afterwards um we want to do a star star and again this is double dereferencing but um don't worry too much about that I suggest like you look into Double D referencing but the main thing is it's right star star lottery.2 account right this is so that we can probably access that information that's the right we need to do this first because we can't just write lottery.2 account so lottery.com info dot try borrow mute lamp ports all right lamp ports okay and then we say minus equals prize okay so basically um try to get the lottery info right see how many lamp ports it is and subtract the price from that so let's say the the total pot is tensile right basically take 10 sold from the lottery time all right take the total prize money from lottery.com okay so we successfully took the prize away from the lottery so removing the funds from the lottery PDA and now we can say star star winner dot to account right because we have a winner I believe right winner is the authority right so yeah so whoever is the winning wallet address they should be able to see the claim prize button right so basically if I were to show you visually um I pick a winner you only see this button if you are have the matching ticket if you are the owner of that winning ticket let's say I click pick winner and I I wasn't the winner like my wasn't my ticket I wouldn't see claim prize I would just see enter pick winner and create Lottery again make sense so that's who the winner is it's exactly what it sounds like so winner.2 account info parentheses try borrow right mute Lan ports again question mark and essentially this means plus equals price right so basically uh subtract that prize money to from the lottery and add that prize money to the winner right add that same amount to the winner okay cool and then the last thing we need to do is lottery.cleaned right by default this is false but now that we gave money to the winner we can say that that Lottery is claimed set that to true okay so then we can say MSG exclamation point all right and say quotes uh curly bracket here claimed it's kind of like a template literal lamp ports oops lamp ports from Lottery ID with ticket ID this all right then it's going to have a lot of stuff that first curly bracket is going to be the winner.key what public what key one what address one uh the second curly bracket will be the prize how much they won Lottery dot ID will be which Lottery is the winner from is it lottery number one number two right and what is the winning ticket ID okay semicolon here and uh we did a bunch of errors and I'm just realizing we should do some error checks up here at the top with the pick winner all right so let's do some checks Lottery equals that we can say if Lottery and this is again I went up to pick winner I wanted to do some error handling here as well so lottery.winner underscore ID that is sum all right we want to return error Lottery error right because if there is something already in the winner ID then we know that the winner already exists like that's if I tried to click um pick winner Winner's already a winner so that's that case there's also the case that uh oops we don't need the parentheses if Lottery dot last ticket ID is equal equal to zero we can return another error which is going to be a lottery error that we set up and the specific type is no tickets so basically if I try to pick a winner and nobody entered in my lottery right they shouldn't be able to pick a winner so we should get this error uh we I will say though for the front end we have some checks we wouldn't even see pick a winner if nobody entered okay so those are the checks for that that was just my quick tangent but for claim prize um this looks good to me so Moment of Truth let's see if I wrote singer again let's hit build yes okay use crate error expected 122. 122. invalid winner I missed something here oh I put a comma instead of a semicolon okay that's it build again okay this is good tick toe from front of the scope prize is not found in the scope what it's right here left prize and just take out these comments I don't think it's gonna fix it but let's just take these comments out let price and strange it should be in the scope like it's right here but I'm guessing it's because it's semicolon somewhere oh right here so under after the dot unwrap I can't forget the semicolon and Bam build successful like isn't it crazy how like one semicolon like just ruins your entire code the reason why it said prize is not found in the scope is because I say let prize here and the code line technically doesn't end until this line right here all right so it's saying that this whole thing I'm highlighting is one line if I put a semicolon here it makes all the difference so if I build successful hit upgrade and now I should be able to claim my prize once this is done okay upgrade successful and again I'm still have three Soul here but I haven't claimed my prize yet so let's go ahead and do that so to claim a prize I have to save the lottery ID which I know is one and if you're not sure what Lottery ID fetch all look right here I'll also fetch the ticket uh I believe the winning ticket was number two right winning id2 so tick ID should be number two uh and we can do the lottery which we have right here minus 9C yours might be different cool and then the address of the ticket oops did it disappear yep the address of the ticket which is number two so to be the CN and again if I were put anything different than what I'm doing now it should it would fail my authority is me so if the prize was too sold I should end up with five Soul if this works so hit test test passed five so we did it we transferred the lottery from the prize from the lottery to our account and we are successful that's amazing and another reason I'm really happy is because you guys finish the smart contract so like the video now if you were successful of all your tests passed because you guys know how to make a lottery functional app right so here's what we'll do right The Next Step that we need to do is take um this code and call it within our front end app which is going to be a whole setup and itself so let's work on that all right so now we can finally start working on the app itself and let's just take a look at something before we get too crazy right so this is the app we could do an ALT Tab and we should see this screen right here and I want to draw your attention to a folder called uh utils right and again a lot of this is set up for you all right so let's open up utils and let's take a look there we have a constants.js folder so click this it should look pretty familiar right Master seed is Master Lottery seed is lottery ticket see this ticket right um this is why I said the the testing from the Solano playground if you understand that this part shouldn't be as bad all right what do we do the actual code I don't think you're gonna notice is that the program ID should match the program ID that you have right now so ours is h y at the moment so that's something to keep in mind right for later there's this helper.js which is a bunch of helper functions that we might call on later why not next is this program.js which Imports our seeds and our program ID right from constants and um what it does is it literally gets our program it's going to fetch our program from the chain and we're also going to get a couple things so we're going to get the master address right so if you guys don't know or understand what's going on here let's think about this how did we generate the master that's how we're going to talk about it so let's make this smaller make this smaller right when we initialize the master right how did we generate the master PDA we got it from seed and all we wrote was mastered right when we hit generate we get the 7 RX number right so keep that in mind all right so when I have a function here this is a frontend function that says get master address okay so it's asynchronous right again you might need to know some uh basic on that basic but some JavaScript in react beforehand before this and if you do want to learn more JavaScript we do have a JavaScript cache course 2022 be sure to watch that as well if you want to learn more JavaScript we teach async functions in there as well anyways Shameless plug aside what does this function do well ignore public key but basically this function right here is find program address okay and we want to find a program address with Master seed and use our program ID right so basically this line right here is check or get the master the PDA from these seats right so if I were to again show you the example if I were to say from seed all I said was write Master here put the program ID generate this will give us this PDA that's what this will do as well right return the master address so it's literally fetching the master address okay let's apply the logic to get lottery address Okay so before we look at the code of that how do we get a lottery right how do we get a lottery address right it's right here we got this from seed what seeds do we need to get the lottery address whether it exists or not right we need the lottery seed we need the last uh ID plus one and that's it all right so two things we need u32 we need Lottery and we need uh one we generate that 9C right and again let's check was that 9C it was 9C so it's predictable right so with that in mind we want to get a PDA with these seeds with Lottery and a big number I don't don't get scared by all this but it's gonna be ID right so get us a new address with that ID yeah cool so this is going to be like the one and again this dot two array like is making it a format that the seed likes right that's why it says buffer from and of course put the program ID so the same way that I just did it in this test right here to generate this PDA we're finding if there's anything at that PDA based on the seed right so again ticket address we had three seeds here's your three seeds right here okay cool awesome so and there's a function that gets the total prize right and again we need this function because to get the total price remember how let's say each ticket costs five sold I buy two tickets the total prize is 10 right so the total prize is 10. we need to change that um from Lan ports to Seoul right or the other way around I believe I convert lamp parts per soul and convert it to a string right we want it to be a string so that we can see the total prize and we want to display that total number here a thousand sold or five Soul or tensile however many is the total right now so does that make sense to you guys that's what each function does right the name should give it away and if not I wrote comments for you guys so hopefully it makes sense so get confused think literally what this is mean cool so uh let's set it up right because there's two things that we need to change now right the first thing we need to change is this this should reflect our current program and this idl.json all right this is essentially a Json file that describes our smart contract right so here's what I'll do this is an optional step right but let's say uh I don't want my master initialized because I want to see that it's not initialized it so that I can call it from the front end I don't want to initialize it from here I want to initialize it for my front end right so instead of like closing all the accounts one way you could do this is let's create another smart contract and deploy that onto chain so now there's going to be another smart contract it's just going to have the same content really right which means it's going to have a new address okay so this was the original one we're gonna make a new one okay and again we don't have to write any new code the cool part is if you want to make a new program all right just click new here generate this is our new ID and E well that's what it is for me and I'm just going to hit build successful deploy oh I need six soul I have five uh let's try Solana airdrop two oh success failed okay so it failed I think it's because I need to switch to the devnet so if you haven't been doing this on the devnet make sure you're on devnet so let's try this again it's on the airdrop 2. there you go so now I have seven soul I like using the Genesis go devnet because there's two servers because this one fails less but you can't really airdrop from there uh successfully yet but cool I believe we built already but just in case build and deploy the contract to the chain right visually what I did was it took this contract put it on chain and this is the address so I'm gonna wait for this finish and I'll be right back alrighty so the deployment was a success right now it says upgrade instead of deploy and exist on chain the next thing we need to do is we need that IDL so go to this IDL tab and hit export all right uh for you if this is your first time you should just see IDL no number I have just have three ideas of my downloads but if you have Chrome double click this it'll open it in vs code what you want to do is press Ctrl a and copy this right I press I'll cut it instead so you can see it's like gone and you want to instead of this you want to paste it here all right technically it's going to be the same thing if you follow it exactly right but make sure that you have your latest IDL here I'm going to exit out the uh downloaded one and this is the updated Ideo you can see it's Modified by this m and again for their constants this is all the same but what you want to do is change this to your program ID how do you know which program ID is you can scroll all the way to the top mine's an e now yours might be something different and I'll paste this there and with that uh there that you did the setup right to connect your code but it's not really calling anything but all the setup is there the pieces are there I've got to put the puzzle together now sounds good okay so it's been a while since we looked at our frontend app so uh let's draw our attention to the pod card right because the pot card can have all the answers for us right so as you look there is some temporary Imports here which is probably key and uh the U state from react but what I care about is this static data and the static States and these static functions right what do I mean by Static it means that they're not going to change like the lottery ID will always be three and the pot will always be a thousand so let's just do a little side by side here something like this it's totally fine you know what we can even um do it like this cool awesome right so what makes the static right if I change this to like 50. I hit save notice how it says 50 Soul now right if I refresh connect wallet initialize Master it's still 50 Soul okay uh what I want you to understand is how this all works right so if I hit refresh notice how I don't see the buttons why don't I see the buttons that's because of these states here right so the comments will guide you this first state is checking if we're connected right now so anything you write here is the initial state so what's the initial state of connected true or false false all right but what if it was true say true save we see initialize Master right how did that happen how come I see election as Master when I turn this to True right if you write this code by itself doesn't necessarily do anything the secret is in all of the conditional rendering right so basically this um okay cool let's find Ctrl F connected connected connected connected connected boom okay cool this line right here line 70. this is something called conditional rendering right if connected is true all right let's see what I'm highlighting load this HTML initialize Master if connected is false show me the connect wallet button which is right now uh it should be wallet multi button but it's this static button right here does that make sense so with that logic if I change this back to false I'm gonna show me the button cool so let's change that back to true now you notice this right now it says now it's just the initialize Master button right so connected is true how do we make it so we see the rest of the buttons like enter claim pride and all that that stuff right well that's where this other check comes in if his mastered initialized right this exclamation point is the opposite right so basically uh if false right load all of this right but what if if what if initialize Master is true right so let's just test it out so let's say it is initialize Master right or the comment for you to understand is is the master created for the smart contract all right let's change it to true let's see what happens it's true there we go all right so if his master initialized is true we should see all the buttons right cool now there's another one another state is is there already a winner for the lottery right if there is we should be able to claim the prize right because if if there's a winner we can claim the prize so we can say um true oh cool cool false yeah is there already a winner for the lottery let's check is finished is finished enter okay so if it's not finished right if we're connected oh this is a really good right this is some really good condition running so if we're connected and is because we're not finished we can enter the lottery right basically if this is true that means we can't enter anymore which is why I don't see the enter button right uh another thing that can we can change is if there's a winner can that winner claim the prize let's see if it's true yes we can claim the prize right so the secret to finishing this app is understanding all of the states okay another thing that's interesting is uh if I make this true I receive the buttons the only one who can pick the winner of the lottery is the person who created it so let's say I log in as a different wallet let's say I log in as qazi's wallet he wouldn't see pick a winner if he didn't make the lottery this is what he would see right here we just see enter and he can create his own laundry all right so that's what const is Lottery Authority right did the connected Wallet create the lottery and so that's why I don't see that button yes a lot of conditioning not conditioning a lot of conditionals right and but our goal is to take all of those States all of this data and make it Dynamic okay and the place that we are going to make it Dynamic is is the context so if you go to the context on x.js you'll see all of this code right here so if you're not familiar with context the tldr version is this right usually if I were to make um oh actually a good example is oops a good example of this is we have a connected variable in plot card correct or it lives right here but let's say I created that connected variable in index right how do we check if if I want to check the connected here right it's going to say connected is undefined if I only Define it in index but what you could do is pass it down as a prop right this is a react thing you can pass down connect it as a prop to pot card and then it knows what connected is right the issue is when you have a lot of components like children and let's say I need I need connected to go here I have to pass down as a prop from index to pot card pass it down as a prop from pot card to this one from that one to this one from that one to this one right and eventually if it's a long set of components that could lead to problems down the road right it's called prop Drilling and we want to prevent that and it's just for organization purposes as well we can create something called a context so let me just make it here let's move Lan ports over a context right and that context can hold all of our variables so we can make connected here we can put uh is Master initialized in here right and what we can do is take things from that little context or that store and bring it to where we need it so I don't have to bring this to index and then pass it down or we can make it simple and say like hey I need connected in the pot card and I need is Master unit in the table right so we can call on our context that's the visual way I like to see it right so here all of this code that you're seeing right we're creating the context and then we have to provide our app with that contact so this is the app provider right so what does that mean the same way right this circle right here is our wallet connection right we need to make our context there as well so I guess the better visual would be something like this let's make this blue and be something like this another Circle right like so right and inside we have connected right and I want to take that connected variable and put it into pot card okay so we gotta wrap our app with this app provider now you with me so let's go ahead and do that so what does that need to go I'd say it needs to go into the index so let's go an index and notice we need to put in that app provider right so uh if this is our app we should wrap it so the first thing we need to do though is import it so we can say import um app provider you can see it here from the contacts and provide right here you can say app provider take our app and paste it here and there we go so now we can use or we basically just drew the blue circle around our app so now we can take anything we create in here and bring it to wherever we want so anything that we create here functions variables put that in value and that's essentially how we can bring it out basically you're loading up your store and once we get to the pop card I'll show you how to bring it from that to here we're good cool so essentially this is how we create our contacts we have to make a function called app provider and then here we're going to return that provider with everything it needs and we're going to use our custom hook here which is going to use our context so that we can call it later so that's my explanation I hope that makes sense and it'll make more sense as we add more things to this so let's get to it okay so to start off we won't need to see our app for a while so let's go ahead and make this a lot bigger cool um usually what I like to do is let's import everything we need when I first built this you don't necessarily know what you'll need until you're building and you're like oh I need this import but for the sake of the tutorial I want to tell you everything you need so that we don't have to import it later so we'll say import BN BN stands for big number you can get this from at quotes at oh I saw at project serum anchor okay we also want to import system program from Solano web3js not anchor program and another thing is lamp ports per Soul this will help with the conversion per Seoul okay from at Solana slash web3.js okay so now we import uh use anchor wallet from Solano wallet adapter react and we also want to get used connection from there as well okay we also need to import something called base 58 or bs58 I believe this is from Inc no it's not Bass BS 58 from I think it's actually from BS 58. cool okay uh remember all the seeds that we made and the functions right from our utils we want to import all those functions too so we want to get lottery address right we want to get the master address this is the functions that I explained to you before in our program which is in utils uh get the program the get ticket address oops uh there's also get total prize you can say from utils slash program okie dokie and then from there let's say import confirm TX mock wallet this again is also coming from the helper mock wallet from util slash helper and another thing I like to import is toast so we can get nice notifications when something works or not it's good to have that feedback you saw this from the demo toast okay this looks pretty good it's just because I have a habit of semicolons right now let's do that core so all the Imports are done um let's see um the first thing I want to start off is let's make one of our static variables to the real thing right so it was in pot card right so the first thing I want to tackle is this is wallet connected and it says true right so how can we do this well to make this dynamic we need to set up what connect it is in the context right so what I'll do first is over here right above the return let's uh get our provider right so to do that we can say cons equal to use connection or not use connection yeah use connection all right so use connection and this is one of our hooks from Solana wallet adapter right connection again will hold our connection if it's true or not right but from there we want to say const wallet is equal to use anchor wallet all right another thing is const program is equal to use memo right which is a react tuck did I import that yeah I need to to get that use memo so make sure you have that hook as well so that you can use this use memo what else do we need use memo so for use member we need to check if there's a connection we can return get program and get program is our function from our helper right right here which is going to fetch the program it's going to return the program so return our program right but we do need to pass in things to our Pro that function right we need to pass in our connection our wallet and if for whatever reason uh the wallet isn't there we do this question mark question mark we'll use the mock wallet right but if it should be there because you reset it up with this okay cool we got a program and uh comma run it if there is a connection and if there's a wallet try again okay run this cool so we have any time I say program uh it's going to hold all the information about our program which I'll show you in just a second but the main thing that we wanted was this wallet here right so what I'll do is in our value we can say uh connected right this is a variable and this variable is going to hold wallet if there's a wallet get the public key if there's a polo key it's either going to be true or false right so essentially connected will be either true or false depending on if we're connected right so that's when it makes sense so if this is true we can go into pop card and we can comment this out for now and at the top of our pod card let's take what we need from our context so to first thing we need to do actually is go above this temporary Imports comment you can say import use app context all right this is our little context in here so we can say it's called const object and we can say get me connected from there okay and this is coming from our use app context right so comment here and we'll console log connected connection status Okay cool so let's see if we can see that real quick app context oh did I already do this oh I did up here already so we can remove the import so you don't need to write that guys sorry I already gave it to you up here I'm too nice cool so we uh open up our app let's see false connection status right this should be true at some point right which is why we can set it to that cool and since we don't we're gonna slowly remove this we can put back our wallet multi button wallet multibutton uh this is selfclosing and I believe there's another place where this goes while the multibutton and right here Wallace multibut cool so let's select the wallet Phantom and there look at that guys it already works all right so I refreshed it right so now it says first it was false right but once I connected my wallet if you remember our context this becomes true and this should become true so now we're there right it's automatically going to connect and once it recognizes that there is a valid Phantom one connected the the flag will set all these buttons right and again at the moment these don't work but our goal is to make it Dynamic just like that all right so on to the next thing I'm gonna go back to our code and let's start setting up a use effect and if you didn't know use effect is a react hook that's basically going to do something when we load our app okay that is the simplest thing I can give you right now if you don't know what use effect is right but what we want to do is set that up so in our app provider I'm going to go over here and say use effect like this parentheses and this is how we can start using use effect takes in Anonymous function it's very similar to use memo right but what I want to do with this use effect is run a function called update State all right and again if you were to run this right here right now it would say update state is not a function because it doesn't exist yet okay but uh after this Anonymous function put comma and then uh kind of right here this is what we call dependency module and if you put program in here basically when we first load the app Run update state or when the program changes or this gets updated run this again okay so that's set up for later let's go ahead and Define what the hell what the hell update state is so let's start writing it that function const update state is equal to a sink it's going to be asynchronous and let's figure out what we want to do the first thing that we want to do is that if there is no program this shouldn't run so let's just put return this is a check okay but what we want to do is a try catch all right this is usually what you do when something's asynchronous you want to do a try catch um uh maybe it's fine we could just say error for now and then we can say console.log whatever Dot cool okay as I was saying I want to do a try catch and that first thing you want to check is if there's a master right so for whatever reason there is no master address that's what this is saying then we need to get the master address right so um how do we get the master address think back to our folder here in our program how did we get it right we need to call this function right we're getting it from its seed so we're going to call this function and we actually imported right here we're going to call this function um but then the next question is how do we save the master address because after we save after we get it how do we save it all right so that's where another hook called you state is going to come from and if you just remember the pot card that's where of this is what a new state is right it's basically saving the state that this variable is in is true is it false is an array is there stuff in that array all right you can do that by state so what we want to do is we're going to end up with a bunch of State variables in this app provider right one of the first things we can write is const Master address Master address set master address okay is equal to use state okay cool so there we go so now if there is no master address which that's true there's no master address right now we need to get the master address so how do we do that we can say const uh master address or you can call this variable the same name it's fine you can say await get mastered if it's a function right otherwise if I didn't make that function in my utils I would have to write out that function here this is so we can just organize it a little bit better cool so then how do we save the master address we can say set master address is Master address okay cool so now we have it right so that means this if block wouldn't run right so um another thing we can do is say cons master is equal to await program I remember I said when I say program gives you all the information we can get the actual object right so yes we got the master address we need to do now is fetch the object right so when you saw me do a fetch all oh yeah there's no Mastery but before there was something here right there was the master account you can fetch an individual account by just writing it right here so this is how you got the singular account you can say program dot account dot master fetch oops my master dot fetch and what we want to put inside here is the master address the public key that we get from here after we fetched it and or if it does if for whatever reason it's not there we can say await that Master address again and get it all right so that's what this question mark question mark is so if it's there this will run if whatever reason it's not there we can get it right here does that make sense so far um another thing that we should do is set initialized right so we need another state all right our states help us keep track so let's say const uh initialized and that shouldn't be Capital it should be lowercase initialized you can say set initialized and set that equal to use State and the default state of initialize is going to be false and check pocket yeah so that's essentially the same as this is the master initialized so if it's initialized we're good it's not false cool all right so uh if we there is a mat if we're able to fetch a master right we can set initialize to true awesome yep and this is just update state just going to run that it's going to do these checks it's console log it console log Master address because there shouldn't be in a master address okay say refresh select wallet Phantom oh yeah account does not exist so there is no master but because there's no master we shouldn't see these three buttons we should see initialized Master first all right so what we need to do is we need to pass something in this value here so to keep track of that state right so what was it called we call the is master initialized I mean yeah let's just skip that same naming we could say is master uh initialized and uh give it a new name Click put initialize here so whatever the value of this initialized is is going to be the same as is Master initialize basically um I'm giving it a nickname right if your nickname is Robert if your name is Robert here's Robert I'm gonna call you Bob that's basically what it says and the reason you see Scooby is because we need a comma here so this is the nickname of initialized right so let's bring it save it let's bring it here oh yeah we can erase this now because yeah we do have a wallet connected and we have this guy now so we can erase this in our context so let's get is Master initialized comma so let's hit save and let's see if it works select wallet connect hey all right that's true right there is no master account and there's proof in our backend right here no master account so now when I click initialize Master right we need to be able to create the master right so uh how did we do it when our cell on a playground right we fetched oh we fetched it we tested it by running it here we want to now run it in our front end code all right so that's exciting Okay so now how do we call it in our front end I'm glad you asked what you should do is let's go back to our context let's scroll to where the end of update state is right so underneath update State uh we can make another function called const init IAL right and here we're going to make a comment of um call Solana program instructions here so anytime we're calling something from our smart contract on the blockchain this is what we're going to call it from so it's going to be called Enid master equal to async and if you don't know what I'm saying basically over here we want to call our smart contract writes this one we want to call our smart contract from our front end so basically we're going to make a function in our context that talks to our smart contract that runs the function that will create a master okay so me just writing this function right now this this is not me calling it just yet and I'll show you what's calling the Solana instruction okay so first thing you want to do is a try catch catch right here error and we can say console.log error Dot message okay cool so yeah what do we want to try here well we want to say cons TX hash all right to transaction hash because every time you uh call something from the salonist program that counts as a transaction right and this TX hash is the variable that holds all the information so how do we call that Salon instruction you need to say wait program right because program is going to hold all the information it holds the accounts where we did I got accounts but it also holds all of the instructions and it's going to hold it in dot methods right so dot methods and then you want to say dot unit Master the name of the method right if you remember we called it init under a knit Master right here so get the same the name of the function if I want to call create Lottery we say create Lottery right this is init master and again it doesn't matter if I press enter here it's the same thing right then you want to get the dot accounts right so what am I doing by when I say dot accounts this is the context guys you understand all right so every here is where we put all the context so what's the context of this I don't know so all the testing practices coming in so the accounts that we need is a master and the payer right how do we get the master we got it from the seed right all right so what we can do here is say master and then underneath we can say payer right because I believe that's what we called it right pay oops payer all right so that's that's good payer and the system program all right so don't mind the squiglies we'll fix it in a second so if you want to tackle oops if we want to tackle the master here we have to say semicolon and then put semicolon and then put the publicly we're going to put a public key here right but we can't just write public key we want to write Master address wow why are we writing Master address here well if you remember where Master address comes from all right if there's no master address we're gonna get the master address right and how did we get the master address we're gonna put in the seeds right that's why I asked you to understand what this program.js does all right we're gonna put the master the the string and we'll get an address right that's the same as me doing this boom ja right cool so because we set up that program.js it's going to make our lives easier here so all you have to write is Master address here and we're good because the value of this is going to be the public key of the address that we generated from seed and now for the pair and now for the pair it's going to be the wallet Dot Public key another persistent program it's going to be system program dot program ID that's how you get the program ID we need I'm not sure why this is freaking out if I miss something oh I think I know uh sorry accounts should have an up it should be all in an object so put that all in here there you go no more squigglies we're good to go so yeah I'm giving our function Our Salon instruction the context which means Master pair System Program Master address generates it from seed I put in my authority the program ID is already here cool uh the only thing you need to do is make sure you type in RPC because we need that and then we can say oh wait confirm TX right because I want to confirm that my transaction went through right that's what uh is that here I think it's in a helper function yes all right because we want to validate that our transaction went through okay and by saying await confirm TX pass in the transaction hash and then we can say passing the connection cool and after that we can just update the state I remember we wanna we made a function called update state so it's going to initialize the master which will then update the state which will then do this check which will then set the master right and I'm trying to think if there's anything else I need in here um master master oh okay yeah we don't need to worry about this just yet but it should make this true right set initialize to true because the reason why it said uh account not found is because we got to this point and then it failed right you couldn't get a master address doesn't exist so it went to the catch and that's why we saw account fail but since it doesn't fail it's actually going to set this to true so let's see if that works let's go back to our app Moment of Truth select wallet Phantom inspect element console right count does not exist let's click initialize master oh okay set is Master initialized oh duh all right so the reason why it has failed is because yes we created the function but notice how it's kind of grayed out we need to pass it and not through our contacts and then plug it into that button I can't forget that step let's put a comma here let's say init master okay so now this shouldn't be grayed out pot card where is our contacts we say init master right and there's a function this is the static function right here unit Master we can get rid of that now right and we don't have to plug it to the button itself because it has the same name so right here on click in it master so now we should be good to go let's select wallet and now it's in the master oh okay all right I have to cross my fingers but if you see this approved transaction this is a very good sign and cool we can actually see how much soul that we use we can hit approve hey look how it automatically changed we made it Dynamic right and I forgot to put the toast but usually it'll be another notification here that says uh it was successful all right so now there's a master and the cool part is we can check it on this end too we can do a fetch all boom there it is all right last ID bam cool so now uh there's a couple things now I want to check all right we should see if there is a uh the lottery ID well actually now we can't see the lottery ID so let's work on creating a lottery next all right so you want to figure out how to make a lottery let's go back to our contacts right and let's set it up right so the side up we just have to make that function again so underneath the net Master let's go right create Lottery so we say const create Lottery all right is equal to an asynchronous function and the same way we did this it's going to be very similar right so um what else did I do here oh yeah we could say toast dot success so next time we'll see the notification uh master or initialize master initialized master cool and just in case it failed you say toast dot error you say error Dot message perfect Okay cool so that we just finished up the init Master but to create the lottery uh what did we do first we did a try catch error and we can console the log the error.message or we can also do a toaster error and put the error Dot message because it's going to disappear I don't want to disappear cool so for the try catch what are we doing well we want to set up the lottery address right so you want to say const Lottery address oops address foreign get lottery address but now the key is this we need to pass in the lottery ID right and again that's because this function is essentially doing this part right it's going to create Lottery it's going to this and we're going to generate from seed which is Lottery right now I'll caps but Lottery which is the oops and the last lottery ID plus one which would be one and we generate should be 4q right I don't think it actually does the plus one on the front end though let me check the control B and let's quickly go to our program and see how it works Okay cool so it takes in an ID right so we need that means we need to plus one before we pass it in so let's go back to contacts so basically we want to say Lottery ID plus one so how do we get the lottery ID the first thing I would say is Let's Make a state for it so let's go up the top and again like I said we're gonna end up with a bunch of States here guys so let's say const Lottery lost 3 lottery ID set Lottery ID set it equal to use State and we can uh we can leave a blank yeah we can leave a blank because we're gonna set it anyways cool so when do we get our first Lottery ID well if you remember why we set up the master we get it from master dot last ID right so do we have access to master right so we're checking if we don't have master we're getting it if we don't we're saving it or we can even erase this uh so then we get the master the reason why we stated it in this variable is because now we can say set Lottery ID to master and then how do we get the last ID from this you can say dot uh last let me see last ID so literally last ID so now after after this runs when I say Lottery ID this should hold the value of zero currently right so we'll always update so basically whatever the lottery ID is plus one right because this function is only going to run if there is a master so there goes that check so I think you're with me now so after we get the lottery address this would give us a public key okay that's the type it's not going to give us this Lottery just isn't going to hold a number it's going to hold the PDA okay so now that it's holding the PDA we can take that information and say cons TX hash because we want to confirm this later VX hash cool two await program dot methods and what method do we want to call guys we want to call oops dot create Lottery okay and we want to say new uh BN right cool why do you want to say Nubian because when we create a lottery we need to define the ticket price okay uh remember when we put the ticket price here we said we put nine zeros one two three four five six uh uh 6 79 and then we put one here this will cost one Soul right the price isn't hard coded on the contract we can actually determine the price right here right so if I put one here and say dot and that multiply uh new BN uh lamb ports per Soul this is the same thing this would generate the same number as this all right zero zero zero zero zero zero zero zero zero that should be nine zeros cool so this is one Soul this will give me one soul and you know what just like the demo let's up the ante let's give it five all right so how much does uh when I create a lottery by default it'll be five right if you want to make this Dynamic uh you wanna you can put an input field somewhere here set the state and when you create a lottery that's how much that Lottery price would cost all right but for now to keep things simpler uh we're gonna put five soul okay cool so after we create uh that argument let's pass in the context and what context does this function take in I'll tell you it takes in a Lottery account oops it takes in a master account takes in a Authority and takes in a system program of course cool so don't worry we're going to Define all this so lottery address we actually get it right here all right this is gonna generate it from seed and we're going to put in a variable of letter ID plus one and we're gonna say Larry dress cool so what is the master we should already have uh the master address it's in the state right so that's nice and easy The Authority is also easy we can say wallet right our wallet and get the public key and then persistent program security standard you say System Program dot program ID and then you can say dot RPC right here oops RPC and we want to confirm the transaction so we say confirm DX TX hash right and connection right so if you're coming from uh the todo app Airbnb or the blog app this is like the proper way to do everything right so and again there's more than one away I'm not saying there's a right or wrong way it's nice to confirm the transaction after it's done we then want to update the state and this time I want to see a nice message so we'll say toast that's success and we'll say Lottery create okay cool awesome so let's take this create Lottery it's grayed out and put it right here oh don't know oh I actually made the Whiteboard sorry about that cool so let's take it and put it right here you can say create Lottery and if we do that we need to bring it into pot card so we have the static create Lottery let's go ahead and erase that let's erase the static connect wallet all right this is basically our todo list right here um yep over here after a net Master you can say create Lottery and we don't need to plug it into the button because it has the same name I made a nice and simple Okay cool so let's go back to our app select the wallet and we want to create the lottery hey okay so again this is the first good sign that we can it's going to ask us to sign and approve and let's hit approve we wait a lottery created right so we made a lottery uh we can double check this on our back end by fetching and there we go we have the uh Lottery ID we don't know the winner we have the last ticket ID and we have the authority right so who has Authority 8T which is the one who created this Lottery right so a couple things here now this this is technically incorrect right lottery number three it should be zero right same thing with this this should be uh zero Soul because there's nothing in the pot so why don't we work on those two things okay so like I said we want to change these static variables into the actual variables other words make it Dynamic it's actually pretty simple right so if we go back to our code in the pop card this is the stack data we want to change all right right now it's three pots 50 right if we go to our context let's actually make those dates and the cool part is the first part's done we already got a lot already I just need to make const uh Lottery pot postpart and say set Lottery pot alright so we'll just set this temporarily State boom and yeah we cleaned that blank so let's start with Lottery ID the cool part is we already have that set up we're getting it from the master I'm gonna put all of our instructions at the bottom but for the lottery ID we'll say Lottery ID and comma and once we do that we can hit save and we can go to pot card let's bring that in Lottery ID and now notice how there's two Lottery IDs that can happen we can erase this now save and take a look guys lottery number one and is that accurate right because ID is one we got lottery number one so when I make a new Lottery this will automatically change when I update the state right so that's why I made an update State function so it just literally updates our front end uh with the correct State now let's work on the pot so yeah this is our static one go back to our context and uh you know what we can go to the top let's put it above unit master and let's make a get pot function right so that next should be pretty simple we can say const get pot is equal to async and we can say constant pot is equal to we have a function that doesn't get total prize I gave this to you and if you're curious on how it works um feel free to check it out in program all right good bye cool so get total prize we just gotta pass in the lottery all right what is the lottery okay so we that means it's a state that we have to set all right because we need the essentially the address of this so let's set up that state uh over here const foreign set Lottery is equal to use state and we can set this to empty I believe yep you can set it empty and another thing that we're going to need to do is first set what that lettering is because right now it's nothing so when we pass it into get pot it wouldn't work we gotta go to update State boys and girls and we need to go underneath set Lottery ID right we need to get that lottery address so how do we get the lottery address we can say cons lottery address is equal to a weight get lottery address and say we can get the lottery address by passing in the master that last ID there you go and we don't need to plus one here because we're not making a new one right we're just fetching the current one based on the last ID so from there we can say uh actually no this is getting a different state so we need two states actually so we need to say cons lottery address that's going to help us later set Lottery address is equal to use state cool awesome all right so yeah this first one uh we didn't really need quite yet but since I'm already here we want to set lottery address to that lottery address so the same thing with the master we can call this one instead because that's going to be the current lottery right so it's a lottery just and now for the real thing to get the lottery pot you can say cons Lottery goes await program dot account dot Lottery right because we're going to fetch a specific lottery so if we're going to fetch One account we want to fetch it by the lottery address so now that makes sense we want to get this first and then do this right so let me show you what I mean basically what we did with these two lines of code or this line of code specifically line 57 for me is we go to your app go to here um let's copy that public key and let's just uh do a little bit of this boom so notice how I'm not fetching anything I paste in that publicly this is lottery address right here this right here and I'm taking that address I'm pasting it here and fetching it and then it gives me a singular object right so again in our code we get the public key we fetch an account with that address and store that object here console Lottery and then to save it we say set Lottery his daughter Okay cool so now when we do get pot I mean get total prize we just have to say you should get a total prize Lottery and then set Lottery put and set it to the pot right so this is why we have so many states so I gotta keep track of all this not any not an easy build but if you guys made it this far I'm really proud of you so it gets but comma and why not get quite calm on my bed you can say uh Lottery pot yeah Lottery pot that's all we need and what did I say before I said I wanted to put all the functions there and all the data here cool so now we got Lottery pot in store so we can go here and say Lottery pot erase the static data all right so we can cross that off our todo list we only have this left and all these functions we can save and now what is our pot should be zero yeah should be zero Soul or nothing oh yeah that makes sense there's no there's nothing in there but if you did want to see a number right if it's zero Soul we can set our initial state to that so uh let's go to context all right there's literally no Solana in there so that's why it's literally nothing so let's do Lottery pot here zero I might change this actually all right now we're good zero soul Lottery pot oh I see why it's still saying zero because we didn't we didn't call get buttery pot and we have to call the function and we want to call the function we need to make another use effect that's what I'm thinking so let's make another one so this use effect right here this one is going to get pot all right so we're gonna get the pot and if it does work it'll set the state so now if I hit save here last ticket ID Lottery okay so it's not sure what Lottery is all right let's troubleshoot this so to troubleshoot this oh wait maybe you should have a check here if there's no Lottery return oops there you go yeah that's because uh we need to wait for it to fetch it and then there'll be a lottery otherwise it's gonna run that command before it's even there so that's why we need to check this first so it's going to keep running this code but once there is a lottery get the pot so now it's zero soul and that makes more sense it should be zero we don't have to initialize the state with zero and yeah there you go reset the lottery ID and the lottery pot all right so what's next guys well let's take a look if I go to my app we need to be able to enter and buy a ticket and our tickets are pretty expensive it's five Salon all right so in order to buy a ticket we have the button set up we just need the function so we can scroll all the way down to here and let's make a function uh buy ticket so we say const by ticket I can go a little bit faster now because you guys should start seeing the pattern but it's going to be a sync right what do we put here try catch all right error I'm not even gonna do the console log because we can just do the toast that error and say air Dot message and for the try you guys know we're buying TX hash equals a weight program dot methods okay and then what method do you want to call it's going to be buy ticket and then it's going to be a lottery ID right we have this state right and it should be uh one because that's what we're on and we could do another dot accounts this is our context expects an object and our context is what Lottery ticket Oops why can't I do ticket and not ticket seed sorry ticket and the buyer I believe right we call the buyer buyer and we need System Program all right these are the all the accounts we need all right just to prove it to you when I buy a ticket we have lottery ticket buyer System Program lottery ticket buyer System Program right okay so again we should have all of these we say lottery address because we have the state now which is so nice I don't have to say const uh lottery address and then fetch it here we already saved the inner state so we can reuse it so now the key part is ticket uh we don't have this saved but we can get it by saying oh wait get oops wait get ticket address right I set up a function in our utils and uh it's gonna take in two things I believe it's gonna be our lottery address which we have and the lottery or this is our object dot last ticket ID right plus one all right so this ticket ID will be id1 cool uh now we put a comma here after that function and we say the buyer is the same as us which is wallet our wallet Dot Public okay and the system program is capital System Program dot program ID I'm sorry if this is boring because it's the same thing over and over but this is really cool because once you understand how to do this pattern you can learn to make any app you want you can make Twitter all right we made Facebook together you can make a better version of that now right yeah yeah so then from there we can do dot RPC and we can say await confirm TX which is our helper function TX hash and we pass in our connection cool and we say toast.success and we say bot a ticket let's pick a capital for emphasis okay uh yeah we're good so this is our function by ticket let's go to the bottom here and say by ticket cool we bought the ticket we go to pop card we gotta bring them by ticket and you see this quickly because it already exists there's our static function you can erase that now we only got two static functions left right we don't need to put it in the button because it should already be there so back to our code we have one Lottery it's one all right let's hit refresh actually boom one uh we can't pick a winner yet we can't create a lottery right this doesn't mean anything but if I hit enter good sign and look at that it's literally gonna take five salon for me it tells me how much it's gonna take plus tax of course it's kind of like tax Network fee but um let's look yeah something went wrong there's our toast but let's look into our Phantom real quick I have 18 Souls so after this I should only have 13 so so let's see if it actually takes my money and that five Soul should be updated in our pot right because we're gonna update the states right so what we need to do is not forget um after we confirm the transaction we can say update state all right don't forget to call that we're going to call update state every time our transaction goes through because if we update the state our pot will get updated and anything else so let's select wallet let's hit enter 5 soul approve bought a ticket and look at the pot automatically updated we can check how much money we have report we spent 13. and just for fun um let's make it interesting and let's switch to my other wallet let's see this is my cozy wallet have anything we have seven soul okay so 50 50 shot will cause you win money I will lie with money right so let's make Kazi enter it's gonna cost him five sold tensile right so that means either I can win or cause you can win uh but who was able to pick a winner Kazi shouldn't be able to pick a winner because he didn't make the lottery only I should be able to pick a winner so yeah this pick winner thing should be us right it should only be us so maybe let's set that uh button before we create the functionality but other than that that's how we buy a ticket let's go well so how do we make it so only the person who created the lottery sees the pick winner button well if you remember how our plot card works we gotta figure out is Lottery Authority right because if this is false all right this is what Kazi should see all right but what I should see is this okay so how do we make this dynamic it's going to go into our context and let's figure that out the cool part is we don't need to make any special function we can actually just go in here underneath Lottery pot and we can say is Lottery Authority colon right and I'll hit enter here and we can say the they're going to give a nickname to something all right what are we going to give a nickname to and actually we can even just write it all in one line so it's not confusing we can say wallet and oops Lottery and oh make sure it's double double ampersand wallet Dot public key dot equals Lottery dot Authority okay I know that was a mouthful but basically um if there's a wallet and a lottery and the wallets like my address is equal to the lottery Authority right so let's check what the lottery Authority is if you don't know if my wallet address equals uh this Authority here at which it does a t we should be able to see the pick winner button so all of this will either be true or false and it's going to be in this name his Lottery Authority so if I hit save here let's bring it to a plot card underneath oh we should organize this Lottery pot shouldn't be here should be right here and we can say is Lottery Authority and we can get rid of this static guy right here static state is gone oh we can also erase this comma here nice all right we're making a lot of progress guys you still have static history here these two states these two functions all right we're almost done so it said save and now when I select wallet we can see the pick winner but what if I log in as qazi right so I'm going to switch wallets I'm going to do my cozy wallet boom you don't see it right it's all automatic it's not static anymore which is amazing so let's switch back to here my wallet number one and let's pick a winner and we can claim the prize right that's the next two things but again pick winner static let's make that function okay you know the drill where are we going guys we're going to context and uh underneath by ticket let's make pick winner so to pick winner I'll just say const pick winner okay pick winner is equal to a sink you say try catch okay error or error and we can say toast.air is error.message okay and but in this try catch we'll set up our TX hash it's equal to await program dot methods okay and what method are we calling we're calling pick winner and what uh arguments does pick winner take does it take any takes in Lottery ID aren't you glad you save it as a state otherwise you'd have to literally type in Lottery dot Lottery ID and if you didn't do that you'd have to fetch it here right so you want to pick a winner you want to set up your accounts this is an object this is your context so what do we need I'm not going to write all of it out anymore because you guys know the idea the first account that we need is the lottery which we have when I write lottery address saved in our state we have the authority then we can write wallet Dot Public key and uh that's it believe it or not that's it for pick winner and we can write dot part PC right all the the meat and bones was in that pseudorandom function I'll pick winner if you remember okay so the RPC and then we await confirm TX CTX hash and connection all right update state all right because we want to make sure after we confirm the hash we update the state and we give a nice little message that says hey picked a winner okay cool um awesome uh yeah so we have the function update state to success what we need to do now is make sure we pass that in here we say pick winner but there is one thing that we do need to do do you need to do is when we connect our wallet when we pick a winner we should see recent winner right here I should update this so that means we need to look in our updates State I believe I'm trying to think if users tickets yeah okay so I gotta do a couple things then let's go back into here and let's go back to our update State function right here cool so we got the lottery adjust we got the lottery object and now uh the first thing that we're gonna need to do is get the users tickets for the current lottery and you'll see why in a second right so just follow along with me that makes sense uh let's do a quick check here if there's no wallet and put a question mark here because it won't run if there's no wallet the public key then we're just going to return nothing right so basically if there's no wallets uh this shouldn't run at all okay just leave right but if there is I want to say const user tickets equal to how do we get all the tickets right basically what we want to do is uh go to this ticket here and do a fetch all right and it should be two but how do we do that in the front end code is this how you say await uh program program Dot account dot Lottery well not Lottery sorry we need a ticket yep dot all right and what you need to do is filter it by um there's a way to filter it and what I'm going to do is copy and paste this one so this is the only thing I'll copy and paste for you guys because uh there's a certain way to filter it you don't necessarily need to do this step if you remember the uh Airbnb I didn't necessarily put a filter here but what you want to do is something like this boom right yep a couple conversions here plugging in our wallets there you go this is the this is what we call the author filter okay so again you don't want to write out the pause the video copy this right here this is the filter for all um you can also switch to the other Branch get that piece of code there or go to our GitHub and find that solution in the main branch but basically it's going to filter the user tickets and once that's done store it in this variable okay we should so now that we have all the tickets we want to check whether any of the user tickets win all right so yep so to check if they won it's kind of complicated as well make a variable called user win set it equal to user tickets dot sum right and you're going to write t an anonymous function here all right T what's the name of that it's a t dot account the ID and T stands for ticket by the way you don't have to write T you can put ticket that makes more sense is equal equal to how do we know what id wins from that Lottery you say Lottery dot winner I because when we pick a winner this will have a value it's not going to be no all right because I believe right now if you look at it it's no but when we pick a winner like we just like we're about to do it's not gonna be null anymore it's gonna be something all right so check if there's something essentially if there's a winner and if there is a winner right so this means that if this is true set and save that user so I guess that means we need to make a state so I'm gonna go up the top here it's a const uh set is it winning ID yeah set winning ID yeah so we're gonna say fuser winning ID and set user winning ID and equals use State and this is going to be false by default because there shouldn't be a winner ID just yet um another thing you want to do is so winning a dress that we should set oh no this is it we can just use our winning ID set user winning ID cool all right so I think we're good so yeah if there is a user winner you want to set user winner and ID to that lottery winner idea all right so this is the check if there is a winner this is set it to that winner set the ID to that warning ID um then we can do else and say set user warning ID set that back to no okay and then there should just be a catch here and I think we're good okay um so what can we do with this with the winning ID well I can do a couple of things actually we can go down below here all right we have a lot of things already but we can go underneath in between internet master and create Lottery uh we can say is finished all right because when we pick a winner we should finish the lottery right so lottery so if there's a lottery and uh Lottery dot winner ID right because after that check on update State this shouldn't be null anymore it should be something okay and I believe in pot card we have is finished right if the winner is a winner can that winner claim the prize right so we need a can claim so can claim right it's going to be um Lottery if there's a lottery and uh there is not a lottery.cleaned right because remember this is true or false right and there needs to be a user winning ID okay so basically uh can they claim it right this will check if they claimed it or not so if it's false this would be true and if this is true like all three of these have to be true for Ken claim to be true otherwise it'll be false hope that made sense live checks so with that said we can get is finished and we can get can claimed oh wait I want to move put these guys right here is finished can claim and we got two squigglies because these are our last States so let's go ahead and erase those things so now there we go what was I doing again oh yeah I wanted to check this really quickly boom uh there's no recent winner yet so let's set this up so I want to set up the recent winner uh to do that we're gonna need Lottery history right so basically uh there's an array here and surprise 15. cool yeah so there's recent winner is coming from Lottery history we can get lottery history uh by looking through all the tickets and then checking if there's a winner in each of those tickets and once it finds that winner it'll take that winning address and put it here all right so basically looking through our history looking through the tickets and then saving it all right so let's make that function so we can say const get history is equal to async and say if there's no Lottery ID then there's no point we should return it's one of our edge cases next let's set up this history remember there's going to be an array right and it's going to hold um basically it could hold more than one object right but right now it's only holding one and it's basically all the recent winners all right so if we have multiple lotteries uh it's always going to have the last item in the lottery that gets pushed does that make sense so technically um if I had oops if I had this it would give me this public key right as the recent winner okay cool so we want to make this Dynamic now uh again this requires you to have a little bit of knowledge of for Loops so again if you don't know just follow along I'm just going to say four const I in oh this is a four in Loop and we're gonna make it a new array from the lottery ID and then we say dot fill no all right value to fill rate section with no and then oh yeah so now we're looping through this array and we want to say const ID is equal to Lottery ID minus parse hint I right so this is a this is a kind of like a coding problem here right that we're solving for so to get the history we're gonna need to do a couple things right if there's no ID we need to break but if there is an ID we can keep looping so we want to do a lottery address is equal to weight get lottery address and pass in the ID so again this is getting all the history of the recent winner so there's going to be multiple lotteries right so uh get me the the first Lottery give me the second Lottery the third but if there's no second or third break that's like the English translation cool so once we have the lottery addresses right we need to then get the lottery objects right so we can say program.account.lottery.fetch uh lottery address so this piece of these two pieces codes are going to be running multiple times all right so right now there's only one Lottery right so this is not going to run multiple times it's going to run once probably and from there we need to get the winner ID so it's going to be a lottery winner ID so it's going to go through all the lotteries it's gonna go through all the winners right and if there's no winner so let's say like Lottery one and Lottery two was done uh let's looking at lottery three but there's no winner yet we want to just skip that one so winner ID and continue because there's a chance lottery number four has a winner so Lottery one two not three four has a winner right so we're gonna continue skip this one go to lottery number four that's the way to look at it so continue and then after we do that we can get the ticket address because we want to know the winning ticket and set that equal to a weight get ticket address pass in the lottery address and the winning ID this is how we get the winning ticket uh the winning ticket address and to get the winning ticket uh you need to pass in that address so program Dot account.ticket.fetch ticket dress cool so after you do all that you want to do a history dot push and then you can push the object and what does the object look like we can generate it similar to this ID winner id address boom so we say Lottery ID is going to be the same as the ID that we're iterating on right now it's going to have the winning ticket ID and the winning winner address right so it's this is where you see the one one one you can get the public Key by saying ticket dot Authority and then we can say the prize and say get total prize in case you wanted to know how much uh was the prize of that Lottery like what it was okay cool yeah so uh after all that's said and done right here we can say Set uh Lottery to oh sorry set Lottery history to history okay so a lot set Lottery history is going to hold an array right so this is a state we haven't made just yet let's go ahead and hit save let's make that state say const Lottery history and say set Lottery history is equal to you state and we can say empty array it should be an empty array here and there's some things we want to do with this all right but the first thing I want to do is after get pot let's also get history so it's not grayed out anymore and the second thing we need to do is pass in that array all right so right here we can say Lottery is three cool and what we want to do with that Lottery history is bring it here right because how do we get the recent winner well after we have the lottery history right you're gonna get the last item in the array by doing Lottery history length minus one get the winner address we're going to shorten it with our function so it doesn't look like super long and let's bring it out here Lottery history take this out and guess what we don't have any more static data so we hit save and now let's finally test our function right so when recent winner is zero and that's interesting okay so we will pick a winner oh yeah we forgot to plug it in need to get pick winner here pick winner take out the static function save big winner okay oh uh shoes there's something here let's hit approve see what happens hey we picked the winner right so cause he's gonna win I won all that money so the pot's 10 that means sorry I was saying that that means I win the 10 Soul which is amazing and cool the recent winner is correct uh it should be yeah me right so again how much so am I going to end up with after I claim it it's gonna I'm gonna I'm gonna up with 23 so isn't that same so there we go and the same thing that you notice is that I can't enter a ticket and I also can't pick a winner again because there already is a winner so the only thing I do is create another Lottery right um another thing we can do is set up a can claim right we should be able to claim our prize which should be set up already it's console logar can claim oh can claim right here so instead of connected let's put can claim and put flame Stitch claim status so if I'm guessing it should be false right now oh it's not okay that's not good let's go to our contacts and let's figure this out so can claim there's a lottery claimed user winning ID Okay so it's null at some point it was false hmm okay so we could do here is literally check all these things so it's user winning ID yeah so it should never be false uh we can check here cancel that log there is a user link oh this should be a string see where I go wrong oh we disconnected whoops okay so that if statement isn't running so there must be something wrong in this update state that we update state with the pick winner we did okay let's check our back end on the lottery fetchall oh yeah winning ideas one okay so what did we set uh winning ID Lottery dot winner ID okay so I think it's something with this user win here user win hmm okay let's uh check if there's a user win this should have tests all right so you see this weird sentence should be something false what there should be tickets here there should be something okay well what about user tickets all right there should be two user tickets user tickets okay show me the tickets empty what all right but if we go to the playground there's two tickets all right um I have a theory that it's this filter so let's take out that filter and let's just get it as is all right yeah there's two tickets it's Phantom and now we can claim the prize oh my God okay so I forget do we need this filter I think there's a reason why we have this filter but for now like I said we'll just do an all here and we'll probably notice when the gets becomes a problem right but right now the way I'm doing this filter is wrong so I just removed it we're just going to do a DOT all just get all the tickets and now we should be able to claim the prize right and again this is not going to work because if we need to make that function but other than that we set it up so we have that and there's also this right here I want to see that as well so let's see how I do that pop card oh it's actually the table now let's go to the table table ah yes we have to bring Lottery history here too so we can say const Lottery history is equal to use app context erase this guy see what we get hey look at that so we also have our Lottery history here and now let's claim prize and we should be done okay so yes claim prize yep so to claim prize we need to go to the context alrighty so we are in the context now and what we want to do is claim price right so let's reap our rewards let's brag it in front of kazi's face that we got the tensile right so we can say uh down here const Flame prize equal to async Arrow and we could say try catch right at this point this should be straightforward you can say toast dot error is error.message and we can then say cons TX hash is equal to 08 program dot methods and what method would you like to call I'd like to call the claim prize one thank you and what do we need to pass in we pass in Lottery ID and the user winning ID which we set up all right so where do we set user winning ID again is there one name oops user winning ID right here set winning ID to that cool awesome all right so back to claim price all right we're gonna pass in the winning ID which was ticket number one which was me the dot accounts uh pass in the context which in the all the accounts that we need is Lottery we have that saved in lottery address we need the ticket uh this one we want to get because we want to get a specific ticket and through that we could say await get ticket address in lottery address pass in the winnering ID user warning ID comma we want to do our Authority which is simple wallet Dot Public key System Program let's say System Program Dot program ID and there you go dot RPC here a way to confirm the transaction pass in TX hash and connection and we want to update the state of course up to state and we can say toast.success here claiming uh good price or a claim the price to instead of say claiming claimed okay cool claim prize by ticket yeah I think we did all of it so we can say claim price let me just take one look at our update state is there anything else we need to do after setting the winning ID um no after that I think that's pretty much it so yeah it feels kind of weird that we made it this far guys but I'm really happy this is a really cool app so let's bring claim price from our contacts claim price right remove our final static function all right remove all these comments uh we can even get rid of this console log claim here save let's go back to our app select winner claim prize and again if I go to qazi's wallet should he be able to claim the 10 Solana let's go here right he shouldn't be able to all right because he shouldn't be able to claim the prize the other can claims should be false just to check I want to bring back that uh can claim it's true actually Claims can claim oh because can Claims can claim is one that should be something else I'm gonna look in context real quick can't claim should be true or false why isn't it true or false did I do this wrong come on this is a home stretch Clan claim okay let's try this again I'm going to select wallet and I should see claim prize there you go okay so we can claim the prize let's click this all right and again we should get 10 sold if I try to claim the prize as qazi uh we should run into that error that says hey uh invalid where is it yeah winner yeah the last lottery ticket ID doesn't match and already claim oh here we go invalid winner right so if you try to claim it as qazi we should get an error that says invalid winner but since I am the winner all right I get plus 10 Soul so from here we claim the prize we get 23 soul there we go we finished the app and again if you wanted to make a lottery you can all right create a lottery boom Lottery created we're good to go so I hope you enjoyed this this is an amazing app right we took everything we learned up to this point and we can make something cool like this so if you like the video drop a like down below leave a comment tell me that this was awesome and I'll see you guys in the next video peace
