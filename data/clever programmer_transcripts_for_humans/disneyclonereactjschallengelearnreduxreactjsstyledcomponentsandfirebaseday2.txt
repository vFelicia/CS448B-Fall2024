With timestamps:

00:00 - [Music]
00:00 - today the disney clone that
00:03 - you see right here we had day one
00:06 - in the previous video where we focus on
00:08 - building up the home page
00:10 - like this we focus on building the login
00:13 - page that looks
00:14 - like this right here login
00:18 - we also focus on building
00:21 - the the detail page it looks like this
00:25 - as well
00:29 - so right there and we have done all this
00:31 - yesterday and day one so if you're
00:33 - interested we have a video
00:35 - and down description below for you to go
00:36 - ahead and check
00:38 - out but other than that let's go ahead
00:40 - and continue with what we're doing so
00:42 - like i said
00:43 - our goal is to be able to get to this
00:44 - right we're building a disney clone
00:47 - we have a react slick for react slider
00:51 - which looks like this we are using
00:53 - firebase for authentication right here
00:56 - right we're using beautiful animations
00:57 - with css
00:59 - if you scroll down right here oh
01:02 - if you click on something to be able to
01:03 - get to the next page
01:05 - we are using react router dom right here
01:09 - beautiful right and if we go to login so
01:11 - let's go and sign out here for a second
01:13 - if i click log in again this is using
01:15 - firebase authentication
01:17 - beautiful and to keep to make all this
01:20 - work
01:20 - to keep the state managed we are using
01:24 - redux for state management
01:26 - coming together it's all working so
01:28 - beautiful so nicely it is
01:29 - user friendly it is mobile friendly and
01:32 - so we're just going to continue on with
01:35 - building this
01:36 - beautiful um from the last
01:40 - time from the last time what have we
01:43 - done
01:43 - from the last time we have our project
01:47 - that's
01:47 - basically like this right here right as
01:50 - our project we have a few files we have
01:53 - the main files let me go ahead and show
01:54 - it to you here
01:57 - detail home page right here home page
01:59 - header
02:00 - image slider login movies and viewers
02:03 - right
02:04 - and all this contribute to our
02:05 - application that is pretty much the way
02:07 - it is right now
02:08 - nothing crazy so far because right now
02:11 - our goal is very simple
02:12 - the number one goal i'm going to do is
02:15 - you see how these movies right now are
02:17 - just static
02:18 - files static images we're going to be
02:21 - grabbing them now from the database to
02:23 - make sure we have them
02:25 - basically from the databases what i'm
02:27 - trying to say right
02:29 - we want to have them dynamic right we
02:31 - don't want to have them static all the
02:32 - time
02:33 - all right okay to make that happen to
02:36 - make that happen
02:37 - we're going to be using firebase and db
02:40 - database from the from there
02:42 - right on top of that after we finish
02:44 - with that part two we're going to focus
02:46 - on
02:47 - is go to the detail page when i go to
02:49 - the detail page
02:51 - of course we don't want to see just
02:53 - static
02:54 - content we want to see content that
02:56 - changes based on the mood i click
02:58 - right that's part two part three is
03:01 - going to be login so we're focusing on
03:03 - the login
03:03 - which happens to be right here when i
03:05 - click on this we should be able to log
03:07 - out
03:07 - and i should be able to log in and
03:10 - honestly that is pretty much it for
03:12 - today
03:12 - and once we're done we will go ahead and
03:14 - host our application
03:16 - straight on firebase and you'll be able
03:18 - to play with it
03:20 - and use it and just be so proud of it to
03:22 - put in your portfolio and so forth
03:24 - all right so our project is here
03:27 - okay to do the whole
03:31 - firebase getting movies let's do the
03:34 - following
03:35 - let's go ahead and go to home.gs
03:38 - okay on the js i will make this a little
03:40 - bit larger home.js
03:44 - yes on home.gs we need to go ahead
03:48 - and grab the movies that's the
03:50 - functionality we're going to use
03:52 - now to grab those of course we're going
03:54 - to grab them from the firebase
03:56 - and right now we have nothing with
03:57 - firebase related
03:59 - that means we need to install firebase
04:01 - so create a new terminal
04:03 - right here inside inside your inside
04:07 - your
04:07 - what's called uh your views code and
04:10 - we'll do npm install
04:13 - npm install firebase
04:16 - done all right we will install that
04:20 - and then we will also add the
04:22 - configuration for the firebase
04:24 - so let's do npm install install
04:28 - safe install firebase
04:31 - dash tools boom voila
04:35 - firebase tools we got those
04:38 - so those two things npm install firebase
04:41 - right here and then npm install firebase
04:44 - tools both are needed for this to work
04:46 - all right awesome clear this out all
04:49 - right
04:51 - next thing we need to create a
04:54 - firebase.js file because we need the
04:55 - configuration
04:56 - now usually what i would do is i'll go
04:58 - ahead and actually show you
05:00 - how to go to firebase click your project
05:03 - and so forth
05:04 - but in our case we're not going to do
05:05 - that mainly because
05:07 - a lot of the data all this movie's data
05:09 - is already pre-populated in our database
05:12 - and so we'll just give you access to be
05:13 - able to
05:14 - pre-populate your data as well right so
05:17 - it just makes it easier for us and for
05:19 - you at the same time
05:20 - let's create a new file here
05:24 - new file will do firebase.js and very
05:27 - important
05:28 - make sure this firebase.js is not is not
05:30 - inside any of these folders like app or
05:31 - components
05:32 - or features or anything like that it
05:34 - needs to be inside the source
05:36 - folder very important next up as you
05:40 - know we
05:40 - down below we have a google drive folder
05:42 - that has images and it has a few
05:44 - different things
05:46 - below it let me see right here
05:49 - where's that finder folder
05:55 - let's go to downloads here and we had a
05:58 - disney clone challenge
06:00 - this was exactly the what's it called
06:03 - the
06:03 - the folder you can download down below
06:05 - in the description below okay
06:07 - download that and you have videos images
06:09 - and the next thing you have
06:10 - also is something called firebase.js
06:14 - okay i want you to go ahead and actually
06:16 - open this one up so it's going to open
06:18 - this one up either with sublime text
06:20 - or whatever the you use to open it up so
06:22 - i'm gonna open up inside the use code
06:26 - right here this is the fibers that gs
06:28 - we're going to use all right
06:30 - so copy this one command c go to
06:33 - firebase.js and paste it in there
06:36 - done right and honestly that's all you
06:38 - need
06:39 - and again it's inside the folder down
06:42 - below in the description
06:43 - okay inside that folder the firebase.js
06:46 - okay download that and then paste it in
06:50 - say here so what's going on here
06:53 - in this file uh a few things
06:56 - we are importing firebase part one next
06:59 - thing we have a firebase configuration
07:01 - file right there and this basically just
07:04 - gives us access to the actual database
07:07 - next thing we initialize the firebase
07:09 - app right here
07:11 - right and then what we do is we we need
07:13 - to tell firebase what are we going to be
07:15 - using well the first thing we're going
07:16 - to be using is firebase firestore
07:18 - so firestore is the actual database
07:20 - we're going to be using firebase
07:21 - authentication later on to be able to
07:23 - log in and log out
07:25 - we're going to be using google
07:26 - authentication because like i said
07:28 - firebase can have like yahoo
07:30 - notification there's like all these
07:31 - amazon to the kitchen facebook
07:32 - authentication
07:34 - in our cases it's just gonna be google
07:35 - auth okay
07:37 - and finally we're gonna be using
07:38 - firebase storage storage as well right
07:40 - so those three things is what we need to
07:42 - make sure to
07:43 - tell our project uh to use
07:47 - once we get that does everybody have
07:49 - that let me see that's everybody does
07:50 - everybody see the folder
07:52 - or see the file everybody has the file
07:53 - on the zoom there yes yes yes yes
07:56 - beautiful awesome
07:57 - all right next thing once we have that
08:00 - let's go
08:01 - back to now home dot gs all right
08:04 - on the gs and
08:08 - here we need to grab the movies from the
08:12 - database and first is a few things
08:16 - we need to use something called use
08:17 - effect to be able to grab those movies
08:19 - let's go and import use effect here
08:23 - use effect boom right there
08:26 - use effect which is right here now what
08:28 - this is going to be used for is use
08:30 - effect it says hey
08:31 - whenever i load my component whenever i
08:34 - load my page
08:35 - or all that i will be doing is basically
08:38 - just
08:39 - running whatever you tell me to do right
08:41 - so for example here if i say use effect
08:44 - if i say use effect boom and i say like
08:47 - this
08:48 - done okay good and i'm going to put
08:50 - nothing inside here
08:52 - check this out if i simply just do comma
08:55 - and i do console log
08:58 - okay console console.log
09:02 - okay hello all right
09:05 - check this out cancel little hello if i
09:08 - save that
09:09 - and if i refresh this all i had to do
09:11 - refresh this inspect element on this one
09:14 - call the console see hello so what this
09:17 - is telling me
09:18 - is this right here is being run whenever
09:21 - this component
09:22 - this whole component it gets loaded
09:25 - right this whole thing is being run
09:27 - that's the reason why we use use effect
09:29 - otherwise
09:30 - if we don't use effect it will be very
09:32 - messy
09:33 - a lot of calls getting being called if
09:36 - you want to avoid that
09:37 - all right next thing since we're using
09:39 - firebase database let's go ahead and
09:40 - import db
09:42 - db from firebase
09:45 - we need to use firebase like so so dot
09:48 - dot slash means go back
09:49 - up the folder because currently inside
09:51 - the components and then we need to go
09:53 - back
09:53 - up to the source folder to access
09:55 - firebase.js all right that's part one
09:57 - all right since we got that all right
10:00 - let's go ahead and take a look at how do
10:01 - we grab the data
10:02 - so we'll do db db dot
10:06 - collection collection dot
10:10 - well collection of what we have a
10:12 - collection called movies
10:13 - inside our database and
10:17 - we will say something called on snapshot
10:19 - what does this mean on snapshot
10:22 - means whenever it's not just kind of
10:24 - like a picture
10:25 - right you take a picture of whatever it
10:28 - is a landscape or you know
10:31 - yourself who knows i took a picture and
10:33 - it's a still picture
10:35 - right and it does not move but it's a
10:38 - certain point in time
10:40 - well what a snapshot does it says it's
10:41 - almost like taking a picture of the
10:42 - database and then returning that picture
10:45 - to you
10:46 - right at that point in time the you
10:48 - called it
10:49 - right the point in time that you called
10:51 - it and
10:52 - now what happens also with it is
10:55 - whenever
10:56 - the picture changes or whenever for
10:58 - example the database changes
10:59 - it will actually send a new picture to
11:02 - you every single time
11:04 - that's the cool thing about firebase is
11:06 - that's why it's called a live
11:07 - database all right on snapshot
11:11 - all right and we'll do like this
11:13 - snapshot
11:14 - called a function okay so it's gonna get
11:18 - a snapshot and then
11:19 - i will show it to you what we get from
11:21 - it
11:23 - snapshot oops let me go and type this
11:25 - quickly
11:27 - snapshot snip shot snapshot okay good
11:30 - good good good good and well
11:34 - let's go ahead and install log while we
11:35 - actually get it you'll see it's a little
11:37 - messy
11:39 - check this out snap shot
11:43 - okay done okay if i go ahead and right
11:46 - click this
11:47 - inspect down on this one console log
11:50 - what i get look at this this is what i
11:51 - get right here like i said it's really
11:53 - messy but what do we have here here we
11:54 - have docs
11:57 - we have empty metadata query and size
12:00 - right
12:00 - and the main thing we need to look into
12:02 - is docs you see look at this you see
12:03 - this right here
12:04 - it says array of 16 what do you think
12:06 - this means well this
12:08 - just means literally we have 16 items
12:11 - in our database right here look right 16
12:14 - movies
12:15 - but again you don't see them fully it's
12:18 - a little bit odd the way it's
12:19 - made but you'll see in a second here but
12:22 - we have the 16
12:24 - elements in the database and we just
12:26 - received them right
12:27 - once we received them well what's going
12:29 - to happen is let's
12:30 - let's go ahead and capture them we'll do
12:32 - let temp movies here
12:35 - 10 movies is equal to snapshot
12:39 - snapshot dot docs remember how we talk
12:41 - about the docs
12:42 - portion docs.map at that map we'll
12:45 - simply loop
12:46 - through every single snapshot and then
12:48 - we're going to return something from it
12:50 - check this out right here's a lower turn
12:54 - so for every single dock
12:57 - every single dock that we have i put
13:00 - this on the right hand side
13:04 - for every single doc that we
13:07 - that we are going to use we're going to
13:10 - grab the id
13:12 - and the data from it so return
13:15 - return boom id
13:20 - doc dot id
13:23 - comma dot dot
13:26 - dot dot data hold the phone as i
13:29 - understand what you're talking about
13:31 - this is very confusing what are we doing
13:33 - here let me show it to you
13:35 - console the log
13:39 - dot data
13:42 - all right so the log and check this one
13:45 - out okay
13:49 - inspect element on this go to console
13:52 - again
13:54 - look at this you see every single
13:55 - doc.data is
13:57 - is what is the object look at this right
13:59 - here
14:00 - boom you've got the background image the
14:03 - card image description subtitle title
14:05 - these are all movies stored in our
14:08 - database
14:10 - right and that's exactly what we are
14:12 - doing here
14:13 - and so we're capturing that by using
14:15 - docker data we're capturing that portion
14:17 - but also separately in order to capture
14:20 - the unique id so we can later on use it
14:22 - for the detail page
14:24 - or capture inside doc.id as well right
14:27 - and this dot dot send simply means
14:30 - basically
14:31 - let's go ahead and unpack this object
14:34 - and put
14:34 - this whole dot object inside this new
14:37 - object that we created
14:38 - which is simply just an object with a
14:40 - bracket right and then we're turning it
14:42 - back to the 10 movies
14:43 - so if we're doing this right here let's
14:45 - go ahead and stop console log here
14:49 - i will do console.log
14:52 - console.log temp movies
14:58 - okay save that
15:01 - all right boom right there look tab
15:03 - movies is exactly
15:04 - what we now need we have the id
15:08 - the id of the actual movie the id is
15:10 - used for
15:12 - identification inside the database we
15:15 - have the description the card image the
15:16 - background image
15:17 - pretty much everything we need for the
15:18 - detail page and also for
15:20 - this page as well and honestly that is
15:23 - it
15:24 - that is it my friends right but of
15:26 - course
15:28 - we're not done right we have these
15:30 - movies and that's great
15:31 - right how do we go ahead and show them
15:35 - now
15:35 - and here how do we do that well this
15:39 - is now where redux comes in and this is
15:42 - the interesting portion okay
15:44 - and i want you to pay attention to this
15:45 - really quickly here
15:47 - readings is basically what's going to
15:50 - manage all the data so if you imagine
15:51 - this right if you imagine the fact that
15:53 - if you have a rectangle here
15:54 - and if you imagine that this right here
15:56 - is state let me go ahead and make this
15:58 - of course this right here state okay
16:00 - this is called
16:02 - state and state is basically a database
16:05 - db for your app but
16:09 - internal app basically for your it's
16:10 - basically db for database inside chrome
16:12 - right
16:13 - and inside state we have what we have
16:16 - things like
16:17 - we have different um values maybe we
16:20 - have movies inside the state oops not
16:22 - here
16:25 - maybe we have movies maybe we have you
16:27 - know
16:28 - user maybe we have uh i don't know
16:32 - some kind of other list maybe right all
16:34 - of that is actually being saved
16:37 - so for example here let me say movies
16:39 - movies maybe for example we have user
16:41 - right the application state
16:45 - sees all that and so it manages all that
16:48 - right
16:48 - and because we save it in the global
16:50 - state in the application state
16:52 - we can access it everywhere that we we
16:54 - need
16:55 - that is the important part here this is
16:57 - why redux is so useful
16:59 - because otherwise if we don't do that
17:01 - then we have to pass down
17:03 - data from movies down to movies here
17:06 - and you're passing down data every
17:08 - single time and that's a lot
17:10 - right that is not very good that's not
17:12 - very useful
17:14 - and that's why rex is so important okay
17:17 - now at this point since we do have redux
17:19 - let's go ahead and take a look at what
17:20 - do we create with it well
17:23 - if you look at firebase and i'm sorry if
17:25 - you look at redux
17:28 - readers has a few things when we did the
17:31 - redux toolkit when we
17:32 - used the template redux template right
17:35 - here you see it created a temporary one
17:37 - called counter
17:39 - boom let me go remove some of me counter
17:42 - right here
17:43 - and if i click into it it has something
17:45 - called counter slice
17:47 - and we have the initial state here and
17:50 - so forth we're going to mock this up and
17:53 - i want to show you exactly how it works
17:55 - let's create a new file here a new
17:56 - folder actually we'll call it
17:58 - movie okay movie
18:02 - oh actually not inside here but inside
18:04 - the features so
18:05 - new folders at the features not bad
18:07 - we'll call it movie
18:08 - boom not inside the counter remove this
18:11 - one delete this one
18:12 - i don't want that boom okay
18:15 - counter movie inside here create new
18:17 - file called movie slice
18:20 - and i know you might be wondering how
18:21 - whoa what is movie slice why why is it
18:23 - called the slice
18:24 - i'll explain a little bit why all right
18:26 - and
18:27 - inside movie slice a few things we need
18:30 - to need to do
18:31 - is we need to import import
18:36 - create slice
18:40 - create slice
18:43 - slice there we go from
18:47 - redux toolkit so from at redux
18:51 - redux right js slash
18:55 - tool kit done all right so create sled
18:58 - for mutex slash
18:59 - tool kit and honestly that's it
19:03 - and so usually what we have with redux
19:05 - is a few things
19:07 - we always start out with initial state
19:08 - like when i say state is
19:10 - what do we have at first what we have in
19:12 - our data in in our chrome database or in
19:14 - our application database well
19:16 - we always start out with nothing so we
19:18 - say const
19:19 - initial state initial state
19:24 - is equal to boom initial state is equal
19:27 - to
19:27 - and we're going to give a movies key
19:31 - no right it's nothing right we start off
19:33 - with nothing initially
19:35 - okay once we have that
19:38 - we're actually going to create a slice
19:40 - for the movie so what does this mean so
19:41 - let's get let me take a look at this
19:43 - movie slice movie slice
19:46 - is equal to create slice
19:49 - and you're like holy this is so
19:51 - much i don't get it this is complicated
19:53 - this hack
19:54 - all right don't worry don't worry i'll
19:56 - explain this let's create let's name
19:57 - this slice here
19:59 - i'm going to name this slice called
20:02 - movie so
20:02 - name i'm going to name a movie
20:06 - boom comma and i'm going to pass the
20:08 - initial state that's going to be loaded
20:10 - with
20:10 - initial state boom comma
20:14 - and i'm going to give it a reducer now
20:17 - what is a reducer
20:18 - check this out okay um
20:22 - well very simple
20:25 - redux is made of a few things actions
20:31 - actions reducers
20:35 - users and state right
20:39 - actions reducers and state there's also
20:42 - something called sagas
20:43 - but we don't really care about that too
20:45 - much here that was previous redux
20:47 - okay actually sort of state an action is
20:51 - basically the actual you want to do
20:52 - so for example right if you want to i
20:55 - don't know
20:56 - create a movie if you want to set the
20:58 - new movie
20:59 - if you want to delete a movie if you
21:00 - want to log a user out you want to log a
21:02 - user in
21:03 - this is called the action this is called
21:07 - actions okay you want to log them in you
21:09 - want to log them out you want to sign
21:10 - them in
21:11 - you want to save the data that's called
21:12 - actions right
21:14 - now reducers reducer that basically is
21:17 - what takes an action and actually
21:19 - changes the state so kind of kind of
21:21 - goes
21:22 - kind of like it goes like this let me
21:23 - show you oh actions
21:27 - actions actions
21:31 - call reducers reducers change the state
21:34 - and so forth
21:35 - that's honestly what happens right and
21:37 - now it does not
21:38 - make it's nothing more complicated than
21:40 - that right
21:42 - one way i can show it to you is really
21:43 - cool like this on the right hand side
21:45 - you can see here
21:46 - that this right here is an action it's
21:47 - called a dispatch so we usually dispatch
21:49 - in action it's like you
21:50 - you're dispatching your driver right
21:52 - right you dispatch an action it goes to
21:55 - the action right here there's a type
21:57 - deposit it goes to the store
21:59 - the reducer the reducer right here
22:02 - changes the state to ten dollars see so
22:05 - again
22:06 - we click on something this patch is in
22:08 - action oh let me go
22:09 - right this patch is in action boom boom
22:12 - reducer changes the data
22:13 - the state now send dollars that's
22:16 - honestly
22:17 - this is the whole thing dispatch right
22:20 - reducer changes the data in the state
22:24 - and that is pretty much it and we change
22:26 - it in the ui
22:28 - and that's it the coolest part about
22:30 - this is because whenever i change the
22:32 - state here
22:33 - right basically the whole app knows
22:36 - about it
22:37 - the whole app right so let's say for
22:39 - example i have a home page that has some
22:40 - data
22:42 - i have a homepage that has some data
22:44 - right and
22:45 - the reducer said hey the movies changed
22:47 - right so
22:48 - we uploaded new movies or whatever it
22:50 - might be
22:52 - what will happen is every single
22:54 - component will get notified about that
22:56 - and so now you can make the changes
22:58 - really fast and really quickly and you
22:59 - don't have to listen on everything
23:01 - that's what makes it so powerful okay
23:04 - all right continuing on so does that
23:06 - make sense is this a better
23:08 - description of kind of what relax is
23:09 - this is a really nausea does that make
23:10 - sense raise your hand
23:11 - is that a little bit better to
23:12 - understand yeah a lot better okay good
23:14 - good good
23:14 - i know it's a little bit hard it's this
23:16 - one is usually a little bit hard to
23:17 - understand
23:18 - but all you have to know is we have
23:20 - actions that basically
23:22 - what you want to do so kind of what you
23:23 - want to do let's say i want to walk i
23:25 - want to walk so i'm walking walking
23:26 - walking
23:27 - and then maybe i want to for example buy
23:29 - something or i want to
23:30 - buy something then the reducer is what
23:32 - allows me to do that okay
23:34 - all right so we have initial state let's
23:37 - create those reducers
23:39 - boom let's create those reducers
23:43 - all right all right we're going to
23:45 - create a reducer called set movies
23:48 - movies and what this will do is we'll
23:51 - take
23:52 - a parameter called state so this is the
23:55 - current state
23:57 - comma action right
24:02 - comma action and this is a function
24:03 - right here pretty much right and what's
24:05 - going to happen
24:06 - is this is where we change the state so
24:08 - in the cyborgs function we're going to
24:09 - pass in new movies that we get
24:11 - from the database it's as simple as that
24:13 - so
24:14 - let's do that movies
24:18 - is equal to action
24:22 - dot payload
24:25 - actually that payload all it is is
24:27 - that's the actual
24:29 - parameter that we pass into the subways
24:30 - function you'll see that later on
24:32 - that's what pillow carries so if i pass
24:34 - in an array intercept movies
24:36 - i will get it here it's an
24:37 - action.payload that's what will happen
24:40 - next up in order to actually use the
24:41 - movie slides
24:43 - we have to export the actions because
24:44 - remember we dispatch
24:46 - actions right so i'm gonna say export
24:48 - const
24:50 - right here const and i'm gonna say here
24:54 - set movies right is equal to
24:58 - movie slice movie slice dot
25:02 - actions there right so this is the
25:05 - action
25:06 - that we're going to export next thing is
25:09 - we need to now export the
25:10 - actual movie state itself because
25:13 - remember
25:14 - how do we use a component to access our
25:16 - movie state where very simply
25:17 - we have to export it so export and
25:22 - the gist of it is we usually like to say
25:24 - something like for example select movies
25:27 - right that's kind of like the the
25:30 - the traditional tradition but that's the
25:32 - way you want to do it select something
25:34 - so
25:34 - what are you selecting from the state is
25:36 - it movies maybe there was something else
25:38 - here for example like i don't know
25:40 - uh horror movies right
25:43 - movies in here right well you would do
25:46 - select horror movies inside here
25:47 - whatever it might be right
25:49 - that's it okay so select movies
25:52 - is equal to here
25:55 - we'll take the state state and we'll say
25:58 - it's
25:59 - state all it is is state
26:04 - state dot what state well the movie
26:07 - state right
26:08 - movie state this is the reducer right
26:10 - state.movie
26:12 - dot movies done
26:17 - done so okay this will give us like the
26:20 - movies okay
26:21 - next okay we're going to export the
26:23 - actual slice itself so export the actual
26:25 - reducer export default
26:26 - so by default we're going to export the
26:28 - reducer movie slice
26:31 - dot reducer right the reason why we do
26:34 - that is because you tell the store
26:36 - we call the store the whole store that
26:39 - we have this
26:39 - right here reducer save that
26:43 - awesome sweet let's now go back to our
26:47 - app go to store.js and we need to now
26:50 - import that store actually right we need
26:52 - to import that store
26:54 - or input the reducer and we can do that
26:56 - very simply just by simply going
26:58 - okay let's do it like this so
27:02 - import we'll say movie reducer
27:07 - right movie reducer from
27:10 - voyager from tata features
27:13 - features dash movie dash
27:18 - movie slice okay
27:21 - and then instead of this counters
27:23 - because which came originally
27:24 - we just say movie is equal to the movie
27:27 - reducer
27:28 - and all you're telling the application
27:30 - is that we have this producer at our
27:31 - disposal
27:32 - that's it that is all you are saying my
27:35 - friends
27:38 - all right that's great let's actually
27:40 - see if this works
27:42 - i'm going to save this i'm going to save
27:44 - this
27:46 - refresh it all right so nothing's broken
27:48 - so far which is good
27:49 - that has broken so far the main thing is
27:52 - going to happen is when we actually use
27:53 - the movie reducer
27:55 - which we will do inside the home.gs
27:58 - basically
27:58 - whenever we are right whenever we are
28:02 - getting movies this is we will be able
28:04 - to set the movies for the whole
28:06 - state the whole state because then it
28:09 - can be accessed
28:10 - everywhere inside our application right
28:12 - so inside our homepage let's say we have
28:14 - a homepage here
28:15 - right that's the homepage the homepage
28:17 - and now we have for example the movies
28:19 - component right two different components
28:21 - we have component movies component and a
28:22 - home component
28:23 - so let me say here this is for example
28:25 - the home component this is the movies
28:28 - component right
28:30 - moves components well they both share
28:33 - they both share the same
28:34 - store right which contains
28:37 - movies right so what happens is that
28:41 - inside the home functionality
28:44 - okay it's at the home functionality
28:48 - all i do is i hey i set new movies
28:51 - right using this the reducer and then
28:54 - because of that i can actually
28:56 - get movies inside the movies component
28:57 - that's it that's all that happens
28:59 - all right boom awesome
29:02 - all right so let's go ahead and do that
29:04 - now to use the reducer we need to use
29:05 - something called dispatch so let's go
29:07 - ahead and do this
29:07 - we'll say import
29:11 - import right and we'll say use dispatch
29:15 - right there use dispatch
29:18 - okay from redux
29:22 - react dash redux all right
29:26 - and then we will import the set movies
29:30 - action so import right there
29:34 - set movies okay from
29:38 - what is it features
29:43 - dash what movie dash what
29:46 - movie slice right but there was a movie
29:50 - dash movie slice right
29:54 - there beautiful okay we got the action
29:56 - which is said movies we've got the use
29:57 - dispatch which
29:58 - we're going to use to dispatch that
30:00 - action so this is like
30:02 - basically calling it's like hey do this
30:04 - action
30:05 - that's what dispatch is used for all
30:07 - right and then
30:08 - honestly that is pretty pretty much it
30:12 - we've got dispatch we've got that right
30:15 - to use this patch we need to say that
30:17 - let me say const
30:18 - dispatch is equal to
30:21 - use dispatch oops not that one huh
30:24 - and this patch just patrol
30:28 - okay good good we got that
30:32 - now so let's think about this right once
30:34 - i get my movies
30:36 - inside you know in from the database
30:38 - what i need to do well it's very simple
30:40 - at this point now i need to dash
30:41 - this that that aspect dispatch an action
30:44 - right called set movies to set the
30:47 - movies for the whole store
30:48 - for the whole database that's what we
30:50 - need to do does that make sense and we
30:52 - have a question does that make sense
30:53 - yes yes yes would you dispatch in action
30:55 - saying hey you know what
30:56 - let's we got these moves from the
30:58 - database let's go ahead
31:00 - and then store them inside the whole
31:03 - state
31:03 - the global state okay this is where
31:06 - we'll do like this we'll say dispatch
31:08 - dispatch right dispatch and we'll say
31:12 - set movies right and
31:15 - this will have temp movies inside here
31:17 - temple movies
31:18 - again tap movies okay
31:23 - and let's go and check that make sure
31:24 - nothing's broken let's see now does
31:25 - anything break
31:26 - let's right click inspect element
31:28 - anything break oop i forgot to share
31:30 - here
31:30 - so here's what we did we did dispatch
31:33 - we did this patch right here okay
31:37 - and then with the dispatch said movies
31:39 - right here okay that's what we just did
31:41 - and we imported said movies and used
31:43 - dispatch beautiful
31:44 - all right all right so if we go to
31:46 - console here
31:50 - no bad errors just good this is a good
31:52 - sign nothing's
31:53 - nothing's going haywire which is a good
31:55 - sign right but of course we still don't
31:57 - know how
31:58 - is this working well let's actually now
32:01 - use the redux
32:02 - in terms of actual uses the state
32:04 - remember how i said
32:05 - that we can use the same state between
32:08 - the most component and the home
32:09 - component
32:10 - well go to movies okay
32:14 - go to movies and let's use select movies
32:18 - so we're going to say import
32:21 - import select movies that will get us
32:24 - the movies that we stored in the
32:25 - database select
32:27 - movies movies from
32:31 - from what well
32:34 - features slash oop slash what
32:38 - uh movie slash movie slice right
32:41 - movie slice again where is this coming
32:43 - from i mean
32:44 - go to movie slice here movie slice
32:47 - boom look at this see select movies so
32:50 - like movies all
32:51 - all that's doing is that's cool getting
32:53 - us the movie's state that's it that's
32:55 - all it's doing
32:56 - that's pretty much it right here
33:00 - that's all it's doing so let's now go
33:02 - back to uh
33:03 - where was i yet i was at movies
33:06 - component
33:07 - boom all right that's good
33:10 - next up is we need to actually to use
33:13 - the selector we need to use a use
33:14 - selector so import
33:16 - i know it's a little complicated guys
33:18 - there's so much to it right but once you
33:20 - know it for the first time or once you
33:22 - kind of realize how it works
33:23 - it's not that bad oh come on
33:27 - use selector from again
33:31 - react dash redux
33:35 - beautiful okay three ducks
33:38 - save that there we go you selector and
33:42 - let's now grab those movies okay
33:45 - we'll say constant movies this is what
33:46 - we're going together with so constant
33:48 - movies is equal to
33:49 - use selector the one we just imported
33:52 - from here react redux okay and
33:56 - the selector will be select movies
33:57 - that's on that's the one we need to use
34:00 - select movies okay
34:04 - and let's check this out i'm going to
34:06 - console the log here
34:08 - so the log right there
34:11 - right there i'm saying this is movies
34:14 - right comma i'm gonna say move just so
34:15 - you guys can see it okay
34:17 - oh no no no no not that boom
34:20 - all right save that inspect element
34:24 - console oh
34:27 - look at that this is movies array 16.
34:30 - we have the moves you see how it travel
34:32 - between the global state
34:34 - we have the global state right so what
34:37 - do we do here
34:38 - we went down to the home state home
34:40 - component
34:41 - right inside the home component we
34:43 - grabbed here
34:44 - so the home component we grabbed the
34:46 - data right here okay we grabbed the
34:48 - the data from the database we dispatched
34:52 - an
34:52 - action we used redux to save the movies
34:55 - inside basically the store right the
34:58 - react
34:59 - store right it's kind of like a store
35:00 - where you buy things right you can buy
35:02 - things you can put things in there you
35:04 - can buy things from there right
35:06 - we put the movies to the store right
35:09 - once we put that there if we now go back
35:12 - to movies component
35:14 - right we just now grab from the store
35:17 - we grab it from that store that is it
35:20 - that's happening here
35:22 - what do you guys think about that does
35:23 - that make sense does that make sense
35:24 - kind of
35:25 - iffy yes or no raise your hand if it
35:27 - kind of makes sense
35:29 - right yes yes yes okay good i know i
35:31 - know it's a little bit iffy
35:32 - to fully understand redux it takes a few
35:34 - days it takes a few i mean sometimes
35:36 - takes a week
35:36 - to fully understand it okay but we have
35:40 - the movies which is great
35:42 - all right we have those once we get
35:45 - those of course we need to replace the
35:46 - static images now
35:47 - right now how do we do that well that's
35:49 - pretty simple we can do that by doing
35:51 - a wrap a basically a loop through them
35:54 - so we'll do the following we'll do
35:56 - let's see this so we'll do movies
36:00 - movies so we'll check if the movies
36:02 - exist right
36:03 - and then if the moves exist we'll say
36:05 - like this movies and
36:07 - we'll say this movies.map
36:11 - check this out movies.map
36:16 - okay and this will take in a movie
36:22 - okay oh actually not not like that
36:24 - taking a movie
36:25 - and it will actually no come on there we
36:28 - go
36:29 - thank you all right and the wrap is
36:32 - actually the wrap which is
36:33 - currently directly the wrap is what the
36:35 - wrap is this right that's the whole
36:37 - thing right
36:38 - instead of doing it here we'll put it
36:39 - inside here
36:43 - okay all right there you go okay
36:48 - all right so what's going on here this
36:51 - functionality says hey if movies exist
36:54 - then you can go ahead and proceed with
36:55 - doing something about it right
36:57 - but if movies is null because in the
36:59 - beginning with the when the page
37:01 - load the movies is null right we haven't
37:03 - gotten it from the database yet
37:05 - once we did get it from the database we
37:07 - simply just loop through it right here
37:09 - that's it that's it all right and as we
37:12 - loop through it we use a map function to
37:14 - loop through it
37:15 - get the movie and let's now actually get
37:17 - the movie data right so we'll say the
37:19 - following
37:20 - the source image remember how we can so
37:22 - log the source image
37:23 - let's go ahead and remove this portion
37:25 - don't need this
37:27 - instead it will be what
37:31 - movie dot what card image
37:37 - okay let me go ahead and just oh
37:41 - do you see what just happened right here
37:42 - guys look at that
37:45 - look at that just like that
37:50 - it just worked right see right we loop
37:53 - the moves can you hear me jesse
37:55 - that's amazing yeah i can hear you
37:57 - beautiful
37:58 - beautiful right so it's just all working
38:01 - the way you should be let me make sure
38:04 - that i want to give it to you there we
38:05 - go awesome can you hear me jesse okay
38:06 - good you can hear me yeah i can hear you
38:08 - yeah yeah
38:08 - and what did we just do here like i said
38:10 - we grabbed the movie from here and i'm
38:12 - going to console the log
38:14 - it's all the log so the long movies
38:21 - okay like right click there's an aspect
38:23 - element
38:24 - right this can be oh no console
38:30 - oh something happened each child okay
38:32 - we'll take care of this a second
38:33 - but here are the movies right we have
38:35 - the id
38:37 - we have the subtitle right and what we
38:40 - use from the movie is we use the movie
38:41 - the card image right so if you look at
38:43 - it here
38:44 - the card image so that's what we used
38:45 - that's how we said card image right here
38:47 - card image you see
38:50 - that's exactly what we need to use right
38:52 - there all right
38:53 - and honestly that's that's pretty much
38:55 - it all right but of course we're not
38:57 - done yet so a few things i want to fix
38:58 - together here
38:59 - it says here you see how there's an
39:00 - error that says here well each
39:02 - child each child in a list should have a
39:06 - unique key prop
39:08 - what does that mean well redux
39:10 - underneath the hood
39:11 - tracks all of these components all these
39:13 - components right
39:14 - if there's any changes that happen to
39:16 - them but it tracks them through
39:18 - a key like a unique key and to give a
39:21 - unique key we need to do
39:22 - something like this we'll say key is
39:24 - equal to
39:25 - and we need to give a unique key and
39:26 - what's the most unique thing
39:28 - that we have about a movie what is it
39:31 - put in the chat what is the most unique
39:32 - thing that we have about a movie
39:34 - individual movie object it's the id
39:37 - that's correct
39:39 - so we'll say to get the id well actually
39:41 - we'll we'll grab the index here
39:42 - i mean you could do move that id so
39:44 - we'll say movie here
39:46 - movie dot id
39:50 - that's it so save that boom let's see
39:53 - inspect element
39:54 - and let's see if the error appears still
39:56 - let's see
39:58 - console okay that's the old ear so if i
40:00 - refresh this
40:04 - oh yeah no air you see no more ears now
40:06 - it's all working perfect the way it
40:07 - should
40:08 - all right so we have done that portion
40:10 - we've grabbed
40:11 - the movies from the database they're in
40:14 - our possession
40:15 - we have it all right only thing is left
40:18 - at this point
40:19 - is when i click on them i should be able
40:21 - to go to a detail page so i can see the
40:23 - evangel movie
40:24 - uh object basically that's the whole
40:26 - goal about this right
40:28 - right there and of course let's go ahead
40:30 - and remove all all these uh simpson's
40:31 - ones because it just looks like
40:33 - our disney clone is full of simpsons
40:35 - that which is not the case
40:37 - so let's go ahead and do this so rap
40:39 - let's remove all these simpsons don't
40:41 - need that
40:42 - bye-bye that's funny all right save that
40:46 - oh just happened i just removed all
40:48 - notes right here
40:49 - there you go all right save that okay
40:51 - good good good no more simpsons thank
40:53 - god
40:53 - i mean nothing is sepsis i love simpsons
40:56 - guys okay
40:59 - nothing in simpsons guys
41:03 - all right next up uh what do we have is
41:06 - let's go ahead and add our code here so
41:09 - add
41:10 - uh add grab movies
41:15 - from db we'll put that into our github
41:19 - save beautiful all right all right
41:22 - number two that we're going to work on
41:24 - is let's look at the detail page so
41:25 - we need to create a link here when i
41:27 - click on this specific thing i should be
41:29 - able to go to
41:30 - the detail page of the specific image of
41:32 - what i clicked on so the specific
41:34 - right movie uh won't be that hard
41:37 - we will use react router down for that
41:39 - as well and the way we do it is
41:41 - something called a link
41:42 - so we'll say a link here so import
41:45 - import link
41:46 - we've used previously but now we're
41:48 - going to use the link portion of it
41:51 - link right here okay from
41:55 - what react dash router
41:59 - router
42:05 - and really with a link is basically it
42:08 - surrounds the object with an a tag
42:10 - honestly that that's all it does we can
42:13 - do that here
42:15 - so i will say inside the wrap
42:18 - i will say let's link it
42:22 - we'll do link like so
42:25 - boom put the image inside the link of
42:28 - course
42:32 - okay save that put it like this
42:39 - okay and link to what specifically this
42:41 - is where we need to specify we'll link
42:43 - it to what well how do you think we're
42:44 - going to link it
42:46 - well we have the detail page let me go
42:49 - to the app.js
42:50 - right inside here we have detail page
42:53 - but what if we passed in a detail slash
42:55 - id a lot of times we will do
42:57 - detail slash and we'll do give an id
43:00 - like this
43:02 - oh come on rocket i don't need you right
43:03 - now
43:06 - right slash id and this id is going to
43:10 - be the parameter we pass in
43:11 - into our detail component all right
43:14 - let's go back to movie
43:16 - uh yes movies okay
43:19 - and we'll say link and link two
43:22 - link two and we'll give it the link so
43:24 - here's the link right so let's think
43:26 - about this right
43:27 - we'll say it's detail so slash detail
43:30 - right
43:31 - right detail slash what the id
43:35 - of the movie so right here we're going
43:38 - to use template literals
43:41 - then movie that id
43:44 - right there so all it will tell us is it
43:47 - will link us to the detail
43:48 - and then the video movie id right so
43:50 - we're going to loop to every single
43:51 - movie and get the id from the movie
43:53 - and then put inside the link towards the
43:55 - detail page
43:56 - and honest honestly that's that's it
43:58 - that's it we're done with that portion
44:00 - it's as simple as that let's go and
44:02 - right click this i want to show it to
44:03 - you guys right click on it
44:05 - inspect element look at this
44:08 - you see this ace draft tag right here
44:10 - look at this see this
44:12 - no this one here right there detail page
44:16 - and this 30a y is individual link to the
44:19 - movie
44:20 - if i go to a different movie the link
44:22 - will be different because of course the
44:23 - id is different right so this is
44:24 - 530 aui this is 5n and honestly that's
44:28 - pretty much it
44:29 - that's all we got to do that's it
44:31 - comprendo
44:32 - that's it right so if i go back to here
44:39 - we have our link right there beautiful
44:42 - okay
44:42 - say that
44:45 - okay save that right we have that
44:49 - all right so now if we click on it it
44:52 - should technically take us a detail page
44:54 - okay are you ready for this are you
44:55 - ready are you ready
44:57 - i hope you are let's go so click on it
45:01 - oh let's go look at that it took us
45:05 - directly the detail page but of course
45:06 - it's not the correct image still right
45:09 - so like it's not the correct one so it's
45:11 - just the same one but the reason why
45:12 - that's the case is because
45:14 - if we now go to the detail page what
45:16 - right of course it's all static
45:19 - content right but look at this it's
45:22 - starting to come together really nicely
45:24 - as you click on individual movie
45:26 - right there it takes you to the page
45:27 - that you want us to take it to and
45:29 - honestly that's it that's all we need to
45:31 - know specifically
45:32 - look at that that's so good guys what do
45:34 - you guys think so far
45:35 - give me a thumbs up in the comments
45:37 - below if you guys are liking what you're
45:39 - seeing so far give me a thumbs up there
45:40 - we go beautiful beautiful
45:42 - beautiful all right all right
45:45 - now let's focus on the detail page
45:48 - right here okay um a few things
45:52 - since we're passing the id you see how
45:54 - here
45:55 - we have the id that's the id okay
45:59 - all right we need to capture that id
46:00 - because we need to get grab all the data
46:02 - about the specific movie
46:04 - so here's what we'll do i'm going to say
46:06 - like this
46:07 - okay
46:12 - we're going to use use parameters from
46:14 - reagaradam so import
46:17 - import import
46:21 - use params use
46:24 - params from
46:28 - all right from what react dash router
46:32 - dom save it all right next one
46:36 - const and we'll grab the id this is the
46:39 - smart thing about
46:40 - react router dumb and knows this kind of
46:42 - stuff because
46:43 - we inside the app.js we told it that the
46:47 - what's going to happen after the detail
46:49 - link is the id
46:51 - it will save it actually in the
46:53 - parameter that's the cool part let's go
46:56 - back to the detail
47:00 - and we'll say use params use programs
47:03 - right there
47:04 - and we'll grab the id from it so now if
47:05 - i go go ahead and do console.log
47:09 - the log id it should technically
47:14 - that's it technically id
47:18 - let's go and inspect them on this one
47:22 - okay inspect them on this one let's go
47:24 - ahead and go to
47:25 - console where is it uh
47:29 - prop type the prop 2 is marked is
47:31 - required in link
47:32 - but its value isn't defined that's
47:34 - different okay
47:35 - there's the id right here that's all we
47:37 - gotta do see we got we grabbed the id
47:39 - that's it
47:40 - all right save it beautiful
47:43 - okay next up we need to again
47:47 - grab the data for this a specific movie
47:50 - right and we're going to use use effect
47:51 - so let's go ahead and go to react
47:53 - i'll say use effect here use effect
47:57 - okay again so let's do use effect
48:01 - because we need to grab the data
48:02 - individual data right
48:05 - right there and this needs to happen
48:08 - whenever we load
48:09 - the component the component the detail
48:12 - component specifically
48:14 - okay this empty bracket means
48:17 - call this functionality whenever you
48:19 - load the component i just want to make
48:20 - sure you understand that
48:22 - next thing inside here we need to grab
48:25 - grab the movies the movie
48:27 - movie info from db from
48:31 - database right there to do that let's
48:34 - let's
48:34 - import db from firebase import
48:39 - db from okay firebase
48:44 - okay and to grab the database the movies
48:48 - database
48:49 - we'll say db dot collection
48:52 - collection okay and with the collection
48:55 - we use is called movies
48:57 - right that's coming from a database
48:59 - directly
49:01 - okay beautiful we'll give it the
49:03 - specific
49:04 - dock we need to use so dot doc
49:07 - doc and the id that's it doc
49:10 - id right this is directly going to come
49:14 - back
49:14 - from here right it's kind of like
49:16 - telling you hey grab me the movie with
49:17 - this specific id
49:22 - right there dot then
49:26 - so once we get it we're going to grab it
49:28 - and then we're going to use it now
49:31 - right the dock is going to be inside the
49:34 - functionality here
49:36 - and what we need to do is we need to
49:37 - check if this dock exists
49:39 - so we'll say if doc
49:42 - doc dot exists meaning if found the
49:45 - specific document
49:47 - or the specific yeah the specific entry
49:50 - with that id we're going to use it now
49:53 - so if that exists
49:54 - we'll say what well we need to
49:58 - save the movie data save the movie data
50:01 - but how guys do you think we should see
50:04 - this inside do you think we should save
50:05 - inside the redux
50:06 - or do you think we should save it
50:07 - actually inside the state what do you
50:09 - guys think
50:10 - redux or state if you think it's going
50:12 - to be a redux raise your hand here
50:15 - okay everything is if you think it's
50:17 - going to be state raise your hand now
50:18 - what do you think or give a thumbs up
50:21 - it's actually going to be in state
50:22 - here's why because
50:25 - this changes for every single
50:28 - right page this changes right we're not
50:31 - going to reuse the movie data
50:34 - anywhere else besides on this page so we
50:36 - don't need to save inside
50:37 - you know the actual redux instead we're
50:40 - going to use state
50:41 - okay to use that we need to you do use
50:43 - state
50:45 - use state right there okay
50:48 - we're going to grab it so we'll say uh
50:50 - what is that what are we going to do
50:52 - uh do const right there
50:55 - const movie movie sub movie
50:59 - that's how we go ahead and then we'll
51:00 - say equal use state
51:03 - okay so you stay is basically like redux
51:07 - but for individual components
51:09 - okay for individual small components if
51:12 - redux
51:12 - is for the whole app okay and it's
51:15 - shared amongst all the components
51:18 - your state is basically for individual
51:19 - component so it's on a smaller scale
51:22 - okay and it was made for a few different
51:24 - reasons it just makes things easier
51:26 - sometimes okay
51:27 - and what we get here this is the movie
51:29 - that we will use and if we want to
51:31 - change the movie
51:32 - we use sub movie so in our case since we
51:34 - get the movie we'll do
51:36 - set movie right i will do
51:39 - doc dot data
51:42 - that's it save that all right
51:45 - okay and otherwise however if it does
51:48 - not exist for example let's just say
51:49 - that
51:50 - i don't know the movie does not exist
51:52 - we're going to
51:54 - basically redirect direct to home page
51:59 - for some reason let's just say it does
52:00 - not work out right
52:02 - well in our case let's go and check out
52:03 - what we do so i will say here consult
52:05 - the log
52:07 - console.log
52:10 - movie is movie is what
52:16 - movie right here okay save that all
52:19 - right check this out
52:20 - inspect them on this one let's go ahead
52:23 - and do console
52:25 - oh movie is object right there look at
52:27 - that boom
52:28 - right there so this id right
52:32 - this id give us a specific object we
52:34 - need right there this is the object we
52:35 - need
52:36 - holy moly that's so cool right
52:39 - wake up grab that oh oh that's not one
52:42 - okay i don't know what happened there
52:45 - so that's it once we have the movie
52:48 - right because again
52:49 - we use set movie to save inside the
52:52 - movie object right here once we have
52:53 - that
52:54 - now we need to use the that the uh the
52:57 - specific data right
52:59 - and now it's very simple inside here
53:01 - instead of doing
53:02 - a static image we'll replace that with a
53:04 - normal image
53:06 - so image source we'll say movie dot open
53:11 - movie dot what background
53:15 - image but background
53:18 - imager oh this
53:21 - save it oh look at that
53:25 - this is the exact movie that we clicked
53:27 - on guys the exact move we clicked on
53:29 - is that background image right next one
53:32 - image title
53:33 - will do movie right there
53:39 - right right we'll say what
53:43 - movie dot title
53:47 - image save that boom
53:50 - look at that guys now it's tangled
53:54 - you see how it's doing all right next up
53:59 - we need to change now this specific
54:01 - portion right this specific proportion
54:03 - so what does what is this going to be
54:05 - movie.what
54:06 - that subtitle grab it movie dot
54:10 - sub title boom right there
54:13 - okay oh wait wait wait wait wait wait
54:16 - wait wait wait wait wait i didn't spell
54:17 - right
54:18 - sub title which is going to be this one
54:19 - right here subtitle
54:21 - okay boom right there look fantasy
54:24 - animation and finally the last one's
54:25 - gonna be move the description
54:27 - so we'll say here movie
54:32 - right there movie
54:35 - the what description
54:38 - done that is it guys that's it our
54:41 - detail page is now
54:43 - premium is finished that's it look at
54:45 - and look at how beautiful
54:48 - it looks you see the steps we took
54:52 - we grabbed the id once we got the id we
54:55 - grabbed from the database right
54:58 - like i said so let me see look let me
55:00 - let's think about this
55:02 - here two we grabbed so here
55:05 - so here grab id
55:08 - grab id right then
55:12 - grab from db right and populate
55:16 - populate populate data
55:19 - or populate ui that's it
55:23 - that's all we did we grabbed the id from
55:25 - the top page
55:26 - we grab for you we used that to grab uh
55:30 - the data from database and then we
55:32 - populated you
55:33 - the ui that's all we did inside here
55:36 - honestly that's it beautiful that is all
55:39 - good
55:40 - guys are you still with me guys how cool
55:42 - is this you guys still with me
55:44 - that's pretty awesome huh you know with
55:45 - me yes yes yes yes yes yes
55:48 - beautiful beautiful beautiful beautiful
55:50 - all right
55:51 - next one let's go take a look at how
55:54 - this actually works let's go back to our
55:55 - homepage
55:58 - go back to our homepage
56:01 - i actually want to link the home page to
56:03 - it i should go back home because i'm
56:04 - getting tired of
56:05 - typing home i'll go incredibles
56:09 - oh can i help you back on the image of
56:11 - undefined let me go back to here
56:13 - let's try this here again
56:17 - oh interesting let's go to here
56:21 - i think i know this is happening
56:22 - actually i know what's going on
56:26 - okay i got it so here's what needs to
56:29 - happen here
56:30 - um in order to for this to fully fully
56:33 - work
56:34 - right again this use effect happens
56:36 - maybe a little bit later on of course
56:38 - right
56:38 - so basically it initially we don't
56:41 - actually have this data
56:43 - at first right this happens later on
56:45 - this is why
56:46 - we need to do a little bit a little bit
56:48 - differently and
56:49 - in the detail page we need to grab it
56:53 - with an id
56:54 - change so check this out now we have the
56:56 - id
56:58 - let's think about like this okay i'm
56:59 - gonna save that
57:06 - background movie that background image
57:13 - so here's a lot of times what i'll do
57:14 - for example the reason why it's yelling
57:16 - me is because the fact that we don't
57:18 - have the movie our disposal right now
57:20 - right
57:20 - we're trying to grab the movie
57:21 - background image but whenever we
57:23 - grab it from the database we're not
57:25 - actually getting it we're getting it
57:27 - a few seconds later that's kind of the
57:29 - issue here right so
57:30 - let me go ahead and look at this here
57:32 - for a second
57:34 - right there so so we're still grabbing
57:35 - these that's no problem
57:37 - right i think the probably comes when we
57:39 - go ahead and
57:40 - go this specific movie so let me go and
57:42 - click this again
57:46 - that's okay all right to fix that here's
57:49 - what i usually do
57:50 - it's a very simple fix i usually do like
57:52 - this i say
57:53 - if movie exists like this
57:57 - if movie then we say uh
58:02 - no no and end right there right there
58:05 - if movie exists only then do we get all
58:07 - this data
58:08 - look at this oh come on come on
58:12 - holy moly nas holy macaroni
58:16 - okay come on next only the movie exists
58:19 - do we actually
58:20 - show it in the database oh show it on
58:22 - the front
58:25 - right there we'll do it like this
58:29 - don't worry don't worry guys it's gonna
58:31 - be fixed
58:32 - okay save that oh come on
58:37 - give me a break
58:45 - okay save that um
58:49 - must be wrapped in enclosing tag you
58:52 - wanted jss
58:53 - i did want to do a sex fragment yes i
58:54 - did
58:56 - but oh i think i know why
59:04 - okay here let's do it like this
59:08 - and then this will be the closing tag
59:09 - right here
59:14 - there we go fixed
59:18 - there you go and i'll show you exactly
59:19 - what why this happened and what's going
59:21 - on and why we need to do this
59:24 - check this out okay good
59:28 - save that okay let's look at one
59:32 - oh look at that
59:36 - boom right there
59:40 - look at that
59:43 - boom boom
59:46 - boom oh let's go let's go let's go we
59:49 - fixed it guys
59:50 - we fixed this issue look at that that's
59:53 - awesome
59:54 - oh boom let's see we fixed the issue so
59:58 - what happened here guys very simple
60:00 - right well initially we got this errors
60:02 - because we tried to grab the background
60:04 - image
60:05 - for a movie that does not exist it's as
60:07 - simple as that right
60:08 - um does not exist because use effect
60:12 - it takes us a few seconds to actually
60:13 - grab the data from the database right so
60:15 - it takes a few seconds maybe like
60:17 - five seconds but to go to the actual
60:19 - page it takes as literally millisecond
60:21 - right
60:22 - and so when we actually are executing
60:24 - this while this is trying to get the
60:26 - data right here
60:27 - right this is already being pre-loaded
60:30 - and it's trying to move the background
60:33 - image which is now right because
60:34 - we don't have it yet unfortunately we
60:37 - don't have it so
60:38 - we're not going to do this will give us
60:40 - an error
60:41 - but what we did here is very simple we
60:44 - said
60:45 - if the movie object exists basically if
60:47 - it's this right here is not null
60:49 - right the movie object exists right then
60:52 - we will go ahead and execute and
60:53 - actually
60:54 - all put all this to your sex in place
60:57 - right
60:57 - and then we got all these errors because
60:59 - why because
61:01 - we need to put this into this is called
61:03 - like an um
61:04 - an empty like tag an empty tag i forgot
61:07 - what is called anonymous tag
61:09 - anonymous tag so it's not actually a div
61:10 - but it's kind of like a div right
61:12 - when you put it inside here you have to
61:15 - wrap it inside of one container and
61:17 - anything else can go inside it it's a
61:18 - little bit confusing on the react side
61:21 - but it's just some things like that you
61:23 - have to get used to unfortunately with
61:24 - react so
61:25 - uh yeah i know unfortunately that's just
61:27 - how the case it is you know
61:29 - but with it look we set the movies we
61:32 - save the data we got it
61:33 - if i go back to the home page boom right
61:36 - there
61:37 - oh oh so good oh
61:40 - oh so good look at that boom boom
61:43 - boom boom boom boom boom boom boom boom
61:47 - boom boom
61:48 - boom boom boom done guys how cool is
61:51 - this you guys still with me yes or no
61:53 - let's go yes you guys you are beautiful
61:56 - as always
61:57 - love you all very much now was that was
62:00 - understandable do you guys understand
62:01 - why we had all these issues do you guys
62:04 - get that
62:05 - yes yes or no give me a thumbs up for
62:07 - yes give a thumbs up for no
62:10 - okay all right and the comments as well
62:13 - guys on youtube as well too
62:15 - all right all right so we got that
62:18 - portion
62:19 - that's working now all fine no problem
62:21 - whatsoever let's now focus
62:23 - on the last part of our application
62:26 - which is going to be the login section
62:28 - this might be a little bit harder but
62:31 - i'm sure we'll be able to figure it out
62:32 - okay this is where now we have to use
62:35 - redux yet again
62:37 - okay we need to create a user kind of
62:40 - state management to be able to manage
62:41 - the user state and see
62:42 - if the user exists right if these exist
62:46 - we do this if it does not exist we do
62:48 - that right
62:49 - that's it okay let's go ahead and create
62:52 - a movie slice uh let's go ahead and
62:53 - create a user slice actually so a new
62:55 - folder inside
62:55 - features new folder let's call color
62:58 - user
62:59 - done right inside here we'll go ahead
63:01 - and do
63:02 - my bed we'll do user slice so new file
63:06 - new file user slice dot js
63:10 - done okay same thing here let's go ahead
63:13 - and import redux just how we did it
63:15 - inside the movie slice
63:17 - and by the way just a quick note the
63:18 - reason why it's called a slice is it's
63:20 - kind of like a slice of a pizza right
63:21 - you were creating all these reducer
63:24 - functionalities which are just slices of
63:25 - the big thing
63:26 - that's why it's called a slice yeah
63:28 - nothing complicated there
63:31 - import slice nice
63:35 - then create initial state so const
63:38 - initial state
63:40 - initial state all right and
63:44 - there are three things we're going to
63:45 - save first one's going to be name
63:48 - right okay and this is going to be empty
63:52 - and then we're going to save email
63:55 - right also nothing and then we're going
63:57 - to say photo
63:59 - right that's the photo of the person
64:03 - three things once we got that let's go
64:06 - ahead and create a slice so we'll say
64:08 - const user slice
64:11 - slice is equal to create slice
64:14 - create slicer create slice
64:18 - okay all right inside the create slice
64:22 - give it some values like name
64:26 - in our case it can be user cool and then
64:29 - we will go ahead
64:30 - and give the initial state right so our
64:33 - initial state is
64:34 - basically nothing nada okay
64:38 - bond done then we have reducers this is
64:42 - where
64:42 - we will get our reducers and a few
64:44 - things we need to do on here
64:46 - inside the reducers um few users the
64:48 - first one you need to create is called
64:50 - set user so site user login
64:54 - so we'll call it set user login
64:58 - and this will of course take state
65:03 - state comma what action
65:10 - there we go the second one is going to
65:12 - be which one which is going to be
65:13 - set sign out so set sign
65:16 - out because again when we sign out we
65:19 - want to be able to clear the state
65:21 - correct so we want to be able to clear
65:22 - everything here so let's say sign out
65:26 - right there we'll say state
65:29 - okay no action we're going to pass into
65:31 - here because nothing
65:32 - really happens and when we set to now
65:34 - what happens what do you think in the
65:35 - comments below
65:36 - what happens when we sat sign now it's
65:38 - very simple we say state
65:40 - dot name is equal to
65:43 - basically nothing again or no
65:46 - okay we say state
65:51 - state dot email
65:55 - is equal to null as well
65:58 - oh no boom and then we say state that
66:02 - state.photo.what
66:04 - photo is equal to what null 2 right
66:08 - beautiful now when we log in of course
66:10 - let's go and finish this one up
66:12 - again state.name is equal to what
66:15 - we're going to pass as i'm kind of
66:16 - action we'll say action.payload
66:20 - payload.name right there
66:23 - all right and then same thing is going
66:25 - to happen with these other ones right
66:26 - here
66:27 - so click there bump in this case
66:30 - email email
66:34 - and it will say payload.email
66:37 - right and then state.photo
66:44 - payload.photo
66:46 - right oh no that's not that one save
66:47 - that
66:49 - beautiful okay so a few things again
66:53 - sell user login to be able to log the
66:55 - user in
66:56 - we save the user data okay then we
66:59 - set user sign out so we should be able
67:01 - to sign the user out so that we don't
67:02 - have the date anymore
67:03 - and basically we can't show that
67:05 - application anymore that's it
67:07 - all right give me one second i need to
67:09 - go ahead and take a breath um
67:14 - so good so good okay
67:17 - okay after we've done that we need to
67:19 - grab all the actions
67:20 - right so we'll say here what i'm gonna
67:23 - do it like this so it's a little bit
67:25 - cleaner
67:26 - okay so again we need to export the
67:28 - actions because
67:29 - actions will allow us to dispatch them
67:32 - right
67:32 - so we'll do what set user login and then
67:36 - set sign out so
67:37 - here we'll say right there oh no that's
67:40 - not what i want come on
67:42 - no
67:47 - set user login comma set
67:51 - sign out is equal to what
67:54 - is equal to use or slice use a slice
67:58 - not what that actions actions
68:02 - right there beautiful actions
68:06 - action what actions are their actions
68:09 - make just measures plural
68:11 - all right after that okay
68:14 - we will go ahead and bring back the
68:17 - specific data so we'll say
68:18 - export right const
68:22 - and then this would be select select
68:27 - it's like what select user username
68:33 - user um i'll say username
68:37 - is equal to what
68:41 - state
68:46 - state
68:49 - state the user name
68:53 - right same thing is going to happen with
68:54 - these other ones
68:58 - but in our case we're going to do select
69:00 - user what user what do you think guys
69:02 - here
69:02 - user email here right because we need to
69:05 - select the email
69:06 - and we're going to grab the email from
69:08 - here boom
69:10 - and select user what do a photo right
69:13 - there
69:14 - and that's going to grab the user photo
69:18 - done all right and then at this point
69:20 - all we need to do is export the reducer
69:22 - so we'll say export
69:25 - export uh default so by default we
69:28 - export to reducer
69:29 - default default user slice
69:33 - that reducer done so
69:36 - okay all right and that's it we've
69:39 - created our react
69:40 - redux slice for just the user okay
69:44 - now let's tell the store that we have
69:46 - them so let's go to store the gs
69:48 - let's import it let's go ahead and
69:49 - remove this counter reducer because it's
69:50 - not useful at all
69:57 - there we go move this kind of reducer on
70:00 - unnecessary fully and let's do import
70:04 - user reducer
70:08 - from okay
70:11 - the features dash what
70:15 - user dash what user slice done
70:18 - okay and the same thing is going to
70:19 - happen here so say comma and then we'll
70:21 - give it a
70:23 - comma we'll say user here user
70:26 - user slice done all right
70:30 - so we were able to pass in all of that
70:31 - data
70:33 - and now if we look at here really no big
70:36 - error that's going on here we're pretty
70:37 - much all good on that aspect oh that's
70:39 - not what i want
70:41 - you sort you inspect element let's see
70:43 - yeah nothing crazy in terms of like
70:45 - actual areas that are going on here nope
70:46 - we're good
70:47 - beautiful that makes me so happy okay of
70:50 - course if i go to here
70:51 - it should be all good as well okay sweet
70:53 - sweet sweet soul
70:54 - so now in order to fully make this word
70:57 - we need
70:58 - to go let's think about how this works
71:00 - right we need to create a login
71:02 - button if we're not logged in right so
71:04 - let's think about this
71:06 - this will happen inside the header
71:07 - because remember if i go back to our app
71:09 - which
71:09 - is this app right here right let's go
71:12 - sign out
71:13 - you see the header changes right we have
71:15 - a login button right here
71:18 - right this right here and we need to be
71:20 - able to handle that so
71:21 - let's create the login button
71:24 - boom let's create the login button and
71:26 - that's going to happen inside the header
71:28 - header.gs oh right there okay
71:32 - all right let's see so what's going to
71:34 - happen
71:35 - we need to be able to grab the username
71:37 - the email photo and see if it exists if
71:40 - the user does not exist we show the
71:43 - login button however if it does exist
71:45 - we don't show the login button and
71:47 - instead we show the user circle does
71:49 - that make sense
71:50 - comprende all good yes yes yes yes yes
71:52 - comprende good
71:53 - all right all right let's make that
71:55 - happen in that case by the way let me
71:56 - see here
71:58 - all right beautiful wow so many comments
72:00 - are good going holy moly you guys
72:02 - insane all right beautiful right so
72:08 - login let's go ahead and create the
72:10 - login button in the case
72:11 - but first we need to of course need to
72:12 - import the select username all this kind
72:15 - of stuff
72:15 - so we can do that by doing like this
72:17 - import
72:19 - right here import select
72:23 - select user name
72:26 - comma select
72:29 - select user what user photo
72:33 - comma what select ah user photo
72:37 - do anything else username and user photo
72:39 - we don't need the email
72:40 - that's pretty much it okay okay
72:43 - from what from no that's not what i want
72:46 - from from
72:50 - the actual user slice so from the
72:53 - features features
72:56 - comma slash user
73:00 - slash user slice okay
73:03 - save that next thing of course we need
73:05 - to go ahead and import the
73:07 - the whole use selector thing so let's go
73:09 - ahead and do
73:10 - import import what
73:16 - use selector oh that's not what i want
73:19 - no use
73:20 - selector from what
73:24 - from oh my i forgot to show to you guys
73:27 - my bad my bad my bad on youtube
73:30 - how long was i on here i'm very curious
73:33 - well here's what we did guys
73:34 - i said i went to here uh all i did is i
73:36 - imported this right here so like
73:37 - username it's like user select user
73:39 - photo okay
73:40 - that's all pretty much done on youtube
73:41 - just so you guys know okay and then
73:43 - on the user slice i mean we did this
73:45 - whole user slide so hopefully you guys
73:46 - seen this i don't remember when i put it
73:48 - on here hopefully you guys seen that one
73:50 - that's the one we did create okay let's
73:53 - now go
73:54 - back to
73:55 - [Music]
73:57 - it was that long huh i don't think it
74:00 - was that long it was not
74:02 - no okay thank you just to use selector
74:05 - okay let's go back to hello yes
74:11 - from and we need to import that from
74:14 - react redux
74:17 - redux redux
74:22 - react dash redux
74:26 - that's pretty much it we had this redux
74:27 - we've imported that that's all we now
74:29 - need at this point
74:30 - okay let me see
74:33 - make sure it's all good here react you
74:35 - just use selector import that
74:37 - uh let's actually now use that right so
74:38 - we use selector let's go ahead and use
74:40 - that so we're going to grab the username
74:43 - so const user
74:47 - name is equal to use
74:50 - selector use selector and
74:54 - which one you're going to use well
74:55 - select username right here so select
74:58 - select user name right there
75:02 - beautiful and simply const user photo
75:07 - is equal to use selector
75:10 - no
75:11 - [Music]
75:13 - yeah so maybe on line eight
75:16 - yeah thank you jesse use selector
75:22 - okay we'll do a select
75:26 - user photo beautiful so i'll use your
75:29 - photo
75:30 - it's exactly what we need and now at
75:32 - this point
75:33 - a few things are going to happen so
75:35 - here's let's think about this
75:37 - if we don't have if we don't have
75:41 - basically like the you know the
75:44 - yeah if we don't have the user basically
75:46 - then
75:47 - we you know show login button and we can
75:50 - do that inside the nav
75:51 - menu so after the logo let's think about
75:54 - like this
75:55 - i'm going to create an if-else statement
75:59 - so basically if there is no username
76:03 - user name oh this one
76:07 - if there is no username right
76:10 - if it does not exist then
76:13 - we will go ahead and show the login
76:15 - button so i'm going to say
76:17 - login that's it right
76:20 - log in right here and i'm gonna say
76:23 - login right this could be that's gonna
76:24 - be a stock component we'll create
76:26 - otherwise otherwise
76:31 - otherwise or show the nav menu
76:37 - this one and the user image actually i
76:39 - feel like those two things are important
76:43 - okay otherwise we'll show the user menu
76:45 - and the login so
76:46 - to make that happen we need to make it
76:48 - again we need to use this
76:50 - call anonymous tag like this
76:54 - right
76:59 - boom right so we need to put in the user
77:02 - image
77:04 - right there and then the menu inside
77:06 - there
77:14 - so heading that menu in here user image
77:16 - in here of course right
77:18 - uh to make it fully work of course we
77:20 - can't do that so we have to do
77:22 - like this we have to do parentheses
77:26 - close parentheses right there then open
77:29 - velocities
77:30 - oh hold on that's not right it's
77:32 - not right question mark
77:34 - so again if this is true we do this
77:37 - otherwise we do this whole thing
77:40 - understand that's all happens that's it
77:43 - okay
77:44 - so now let's go ahead and try this out
77:45 - i'm going to save this let's go to our
77:47 - app
77:48 - it says login and login is not defined
77:50 - exactly perfect it's exactly what we
77:51 - need to do
77:52 - so let's go to our login button so we'll
77:54 - say const
77:56 - cons login is equal to
77:59 - basically a const uh
78:02 - login is equal to style
78:05 - dash dash huh we'll make it a uh
78:09 - i'm gonna say let's just say a deal for
78:11 - now
78:13 - okay a div
78:16 - okay okay there's locking button right
78:19 - there you see perfect
78:20 - all right all right so at this point to
78:24 - make this
78:24 - fully work what we'll do is the
78:26 - following so let's go ahead and do that
78:28 - uh but the login button will do
78:32 - we'll give it a border radius let's
78:34 - think about this
78:35 - where's our login button oh it has like
78:37 - a border
78:38 - so let's give it a border initially so
78:41 - we have border
78:42 - one pixel solid looks a little like this
78:46 - one pixel solid good
78:49 - let's think about this
78:53 - border one pixel solid beautiful all
78:55 - right
78:56 - then within that we're going to uh let's
78:59 - see
78:59 - border then let's go ahead and give it
79:01 - some padding so padding
79:04 - 8 pixels right 16 pixels
79:07 - so 16 pixels on the left and right hand
79:10 - side
79:11 - save that beautiful that's a little
79:12 - bigger bigger button which exactly what
79:14 - i like
79:15 - all right right so we stretch it out
79:16 - let's give it a border radius now
79:19 - border dash radius radius right here
79:23 - okay boys radius beautiful
79:26 - all right that's gonna be border radius
79:28 - off of four pixels
79:31 - four pixels i like that uh so much
79:34 - better all right
79:35 - we're going to go ahead and let's go
79:36 - ahead and do letter spacing so maybe
79:38 - fix the ladder spacing a little bit
79:41 - spacing
79:43 - right 1.5 pixels okay
79:46 - just make it a little bit bigger and
79:48 - let's do tax transform
79:49 - upper case to make sure it's all up okay
79:52 - text transform
79:55 - transform right here right there
79:58 - uppercase
79:59 - bro good all right beautiful nice nice
80:02 - nice nice then we is need to give it a
80:05 - background color
80:06 - so let's give it a background color a
80:07 - little bit more of a darker side but a
80:09 - transparent background color so let's
80:10 - try that
80:11 - right here voila
80:15 - okay so it's a little darker darker
80:17 - background color okay awesome
80:19 - next thing on the hover of this button
80:21 - of this div
80:22 - right so let's do the hover so we'll say
80:25 - hover right here so now hover what are
80:27 - we going to do well let's think about
80:29 - this right
80:29 - on the hover we're changing kind of
80:31 - number one to white
80:33 - so we're kind of flipping the black to
80:35 - white white to black right
80:36 - so let's try that right now okay
80:39 - hover let's change the background color
80:43 - background color background color
80:47 - it's going to be more of a whiter color
80:48 - so it's going to look a little bit like
80:50 - this
80:52 - awesome and then the color of the actual
80:54 - text is going to be now black so
80:56 - let's see black okay all right
81:00 - and then border color is gonna be
81:02 - transparent as well so border color
81:06 - border dash color will be transparent
81:11 - parent uh rent be transparent
81:15 - there we go so let's go go ahead and
81:17 - hover this oh let's go
81:19 - beautiful but we're not done yet because
81:21 - let's give it a small transition
81:23 - so we'll do a transition here transition
81:26 - all
81:27 - 0.2 seconds right here now
81:30 - oh let's go beautiful let's also get a
81:33 - cursor pointer
81:35 - cursor pointer nice
81:40 - oh look at that beautiful that's what
81:43 - i'm talking about now of course
81:44 - so we had the login now how do we make
81:47 - sure that this login is kind of all the
81:48 - way
81:49 - on the left slash the right-hand side
81:51 - that's actually a good question
81:52 - how do we make sure we do that how do we
81:53 - make sure that the login is all the way
81:55 - on the
81:56 - lot on the left and the right hand side
81:58 - what do you guys think
81:59 - because if you think about this right
82:00 - the login is here right
82:02 - i hit the logo here right is there
82:05 - anything we can do for example with i
82:07 - don't know
82:07 - uh with the nav what should we do
82:11 - what do you guys think we can do well
82:13 - here's my thoughts on this i think we
82:15 - should create a login container here
82:18 - a container here login container
82:21 - right here like this here's why i can
82:24 - put the lock inside here
82:26 - no problem whatsoever right
82:29 - but the login container look look what
82:32 - i'll do is i will go ahead and actually
82:35 - basically give it a flex of one that's
82:37 - the cool part i was able to do all right
82:38 - that's going to create long container
82:40 - underneath this one so we'll say
82:42 - okay const login container
82:45 - style.div okay check out this
82:49 - flex 1 lakhs one
82:54 - right no okay i know i know don't worry
82:56 - don't worry about this so here's what
82:57 - we'll do right
82:57 - it stretched out the whole div that's
82:59 - okay so here's what we'll do now display
83:01 - flex
83:03 - flex okay you see and then we'll do what
83:07 - justify content check this out justify
83:10 - content center
83:11 - or flex end justify
83:14 - justify content what flex
83:18 - end
83:22 - boom right there you see login now
83:24 - shifts right to the right hand side
83:25 - which is
83:26 - exactly what we need which is right here
83:28 - right there see
83:29 - just just i'm too good i'm too good
83:35 - so there we go we got we got that
83:37 - portion right there
83:40 - sorry
83:43 - i had to have fun you know i was proud
83:46 - of that it was pretty cool
83:47 - i did on the fly you know so
83:51 - okay so the login button is right there
83:53 - okay now what needs to happen
83:54 - is we need to go ahead on the click of
83:56 - this button we need to log ourselves
83:58 - in right now how does that work out well
84:01 - this
84:01 - gets a little bit more tougher guys all
84:03 - right so let's
84:04 - let's try this let's go ahead and create
84:06 - a sign-in function so we'll do
84:08 - const sign in
84:11 - sign in right here is equal to a
84:13 - function
84:16 - right and this is where firebase really
84:19 - it plays a big role here okay on the
84:21 - sign-in function
84:23 - uh well we need to import off here so
84:25 - let's go ahead and do that so this is
84:26 - where
84:27 - really we're going to use a lot of you
84:29 - know
84:30 - what does this react find render
84:32 - capability type i don't need that right
84:33 - here
84:34 - all right so let's go to import import
84:37 - we're going to use auth so import auth
84:40 - auth auth comma provider
84:46 - provider from firebase
84:49 - right from what
84:53 - firebase right there boom okay oh not
85:00 - import that from the from firebase okay
85:02 - now when we sign in the way it works is
85:04 - very simple
85:05 - i click on something and i will call a
85:08 - function that will sign me in basically
85:10 - so to make that happen i will say here
85:12 - off
85:13 - off dot sign in with pop-up
85:17 - sign in uh i'll have to do cleanly
85:20 - assign it
85:21 - in with no
85:24 - with oh this is one right right there
85:27 - send it with pop-up
85:28 - and the pop-up so biscuit is going to
85:30 - pop up something what provider right
85:32 - well we said in firebase we're going to
85:34 - use the google provider
85:36 - so we'll say provider here provider
85:40 - beautiful and then that then so when we
85:43 - say and assign ourselves in
85:45 - and it's successful we say we get the
85:47 - result and
85:48 - what result do we get well let's take a
85:49 - look at what we get here back
85:54 - okay we get a result and we actually
85:56 - let's go on the console log the result
85:57 - for now console.log
85:59 - the log result
86:04 - okay boom save that console.log result
86:07 - and of course we need to make that
86:08 - happen when you do unclick on here so on
86:10 - click
86:12 - on click is equal to what and we'll give
86:15 - the function the sign in function
86:17 - so sign in sign
86:21 - in sinai function okay so let's try that
86:24 - now so we have that portion done
86:26 - let's click log in oh
86:29 - would you look at that how cool is that
86:33 - ah guys
86:34 - holy moly right you click login pops up
86:37 - a button click classic level programmer
86:39 - right and let's see what we get back
86:42 - inspect them on this one
86:44 - what do we get back here let's go to
86:45 - console uh
86:47 - we get an object actually here look at
86:48 - this and this object has
86:51 - a user object let me show you so you
86:54 - guys can see it better
86:55 - right there we have a user object right
86:57 - here right there see
86:59 - and the user object has a lot of stuff
87:01 - including some ids
87:02 - but the coolest thing it has is right
87:04 - here display name
87:06 - email and there's a photo one here too
87:09 - for the url you see so we can actually
87:12 - use
87:12 - that fully we can fully use that to grab
87:15 - that data
87:17 - let's try it okay let's try it
87:20 - okay let's go back to here okay let's
87:23 - go back to here all right we have the
87:25 - specific portion
87:26 - all right so now let's go ahead and
87:29 - actually
87:30 - set the user data so we'll do of course
87:32 - console.log.user
87:34 - so the log uh user but um
87:37 - a few things we need to do because of
87:38 - the log no user is fine
87:41 - this is where you set the data in the
87:42 - redux to set the data in the redux to
87:45 - set all this username and photo and
87:46 - stuff like that
87:47 - of course we need to grab this from the
87:49 - user slice right here
87:51 - right because we need to grab the what
87:53 - the set user login so let's grab that
87:55 - right now
87:56 - set user login let's gonna grab that go
87:58 - back to our head.gs
88:01 - let's grab that from the user slice
88:03 - phone right there
88:04 - okay okay and then let's go ahead you
88:07 - need to dispatch it as well so let's go
88:09 - ahead and dispatch it too so that means
88:10 - me to
88:11 - import this patch that means we need to
88:14 - import
88:15 - use right here use dispatch
88:20 - use dispatch comma with use selector as
88:22 - well i want to
88:23 - use the dispatch so const dispatch is
88:26 - equal to what
88:27 - use dispatch use dispatch
88:32 - okay use this patch and then
88:35 - after that once we've once we imported
88:38 - this patch
88:39 - let's actually dispatch it so here we'll
88:40 - do dispatch
88:42 - right there right dispatch what well
88:44 - what
88:45 - we dispatch the set user login
88:49 - set what user login with what data
88:52 - was data right so we need dispatch so
88:54 - you should log in with
88:56 - some data about what did it be going to
88:57 - actually give it well
88:59 - that's going to be up to us to figure it
89:00 - out right let's do that right now
89:04 - we have name is equal to what let's do
89:10 - this right here say let user
89:12 - is equal to result.user right
89:16 - remember we got that from where from
89:18 - here you see
89:20 - right there right there so user resulta
89:23 - user is this right here specifically
89:25 - boom okay so now we do set user login
89:28 - okay and we say it's going to be name is
89:31 - equal to user dot
89:32 - display name boom again
89:35 - coming directly from the data here
89:38 - display name
89:39 - right here you see next up email
89:43 - okay user.what user dot
89:46 - email okay next up is gonna be photo so
89:50 - photo okay user
89:53 - that what photo url which is coming
89:56 - directly from where from here right
90:00 - there
90:00 - for the url right there so you see
90:02 - there's a reason for everything that
90:03 - we're doing
90:05 - okay boom so now if i sign in if i click
90:08 - sign in again
90:09 - technically i should have the nav menu
90:12 - appear in here technically okay
90:16 - let's go ahead and try that out so let's
90:18 - go ahead and see sign in
90:20 - all right so i should really kind of
90:23 - like
90:23 - what's going to happen is it's still
90:24 - going to dispatch the user login
90:27 - that's going to save it inside the
90:29 - global state
90:30 - once it saves the global state that
90:32 - means this will be right
90:34 - here updated automatically and once this
90:37 - is updated you see
90:38 - this becomes what not truthy
90:41 - but falsely and so it's going to show us
90:43 - a nav menu
90:45 - that is it let's go and try this out
90:47 - okay all right
90:48 - let's go and quickly log in
90:51 - boom qazi
90:55 - oh did you guys pay attention to that
90:58 - did you guys pay attention this look it
91:00 - just showed up
91:02 - oh let's go it's so good
91:05 - give me a round of applause everybody
91:07 - anybody
91:08 - am i just applausing for myself that's
91:09 - fine too
91:13 - that's fine too yeah there you go right
91:15 - so we got that portion working
91:17 - that's so good makes me really happy
91:20 - and honestly that is it that is
91:24 - it okay and once
91:27 - we have this let's go ahead and focus on
91:30 - the sign up feature so we need to be
91:32 - able to sign out as well right
91:33 - and the signup happens when i click on
91:35 - what when i click on
91:37 - this right here when i click on this i
91:39 - should technically sign out
91:41 - all right let's go ahead and do that
91:44 - okay
91:44 - so create a sign off function so we have
91:47 - consign in
91:48 - const sign out
91:51 - out is equal to right here
91:55 - right there it's always equals to a
91:56 - function
91:58 - all right and what's going to happen
92:01 - here is of course we'll remove
92:04 - we'll sign the user out and to do that
92:05 - we'll do auth
92:07 - ah dot sign out
92:10 - like so right and once that's successful
92:14 - we say that then
92:19 - function will dispatch a functionality
92:22 - will dispatch and it will dispatch
92:25 - what well user slice
92:28 - dispatch set sign out right that's the
92:31 - functionality you need to use
92:32 - that means we need to import it set
92:36 - sign out okay save that
92:39 - beautiful all right
92:43 - that's all good that sign out so this
92:46 - patch
92:46 - set sign out functionality and honestly
92:51 - that is it my friends and one small
92:53 - thing we can do is once you sign out all
92:55 - we have to do at this point is just
92:56 - simply
92:57 - redirect you back to the login page so
92:59 - let's try that right now
93:00 - now to do that we need to use something
93:02 - called history
93:04 - so we'll use here import import
93:07 - use history look
93:11 - use history this is part of react react
93:13 - router dom
93:15 - history from
93:18 - react dash router dom and the way you
93:22 - use this like this right
93:23 - i'm going to say cons history history
93:28 - is equal to use history
93:31 - history beautiful and all i do at this
93:34 - point is i say this history.push
93:36 - so basically after all is said and done
93:39 - i just do a history.push
93:41 - i had to say my friends let me see where
93:43 - is there was a reservoir where is it
93:45 - right there here i do history history
93:48 - that push basically and i push to
93:52 - the the login page so we'll say login
93:57 - that's it login page so if i sign out
94:00 - now we need to of course need to go
94:01 - ahead and click on sign now so let's go
94:02 - ahead and do on click on the user image
94:04 - so on the click of the user image we'll
94:07 - sign out the user
94:09 - so on click right there
94:12 - we're going to sign out the user
94:16 - and that is it i'm gonna click lose your
94:19 - image all right
94:20 - save this so we have sign in sign out
94:22 - that's all good
94:23 - okay let's try this now you guys ready
94:25 - for this are you guys ready for this
94:27 - all right boom
94:30 - something can run applause yay
94:34 - yay i'm pausing myself again dang it
94:41 - okay so log in
94:44 - all right kha'zix level programmer
94:49 - all right beautiful that's exactly what
94:52 - we just got right so
94:54 - okay now of course we we logged in now
94:57 - and what we can do
94:58 - is after you sign in right we can also
95:00 - after you sign in we can also
95:02 - dispatch you to a different page so
95:04 - let's go and do this so we'll say uh
95:05 - history.push
95:07 - now push what that push to where
95:10 - to the home page right that's it there
95:14 - we go
95:15 - so if i let's go ahead and sign out
95:16 - again okay i did that that's fine
95:19 - right let's do history that push to the
95:21 - home page which is this one log in
95:23 - causey clever programmer
95:28 - boom oh look at that you guys
95:32 - uh it's so awesome so look at that and
95:34 - then i click sign out again
95:36 - oh my god that's too good
95:40 - and then hey let's go
95:43 - so there is one issue here however and
95:45 - it's the fact that for example you see
95:47 - if i refresh this
95:48 - basically the user is gone that's that's
95:50 - the issue here
95:51 - and we can actually kind of fix that by
95:54 - by setting the user whenever we
95:56 - kind of like um on the header so the way
95:59 - to fix that is very simple
96:00 - and again the reason why this happens
96:02 - because the state is gone
96:04 - the state is gone once i refresh the
96:06 - page the state is gone that's it
96:08 - sayonara bye bye baby that's it we're
96:11 - done
96:12 - right so to fix it we're going to use
96:16 - off on state changed right and we're
96:18 - going to use use effect with this one
96:20 - too
96:20 - so look at this we'll say use effect
96:24 - use effect right here i'm going to say
96:26 - auth
96:29 - off on state changed so we'll say
96:33 - use effect use effect
96:37 - right there okay
96:40 - okay we'll say basically on the change
96:44 - of
96:45 - let me see
96:48 - when you first log into the page right
96:51 - here
96:52 - when you first log in we'll do the
96:54 - following we'll do
96:55 - off auth
96:59 - dot on odd state changed
97:03 - okay async
97:06 - we're gonna grab the user and basically
97:09 - it's gonna be really simple right all
97:10 - that happens here is the user exists
97:12 - right there right because here's the
97:14 - thing um
97:16 - firebase remembers the user in cookies
97:18 - in a cookie
97:19 - and so that's where we get this right
97:21 - here right it remembers the user in the
97:23 - cookie
97:24 - and so we say if user user
97:28 - then we do what then we do
97:32 - again we do
97:36 - dispatch like the site user login again
97:40 - dispatch site user login again and then
97:42 - we do
97:44 - history.push dot push
97:48 - dot push home page down there we go
97:53 - uh oh this is more important right there
97:56 - boom that's it there you go
98:00 - so you see let's think about it if i
98:01 - refresh now you see
98:04 - you see the user is actually being set
98:06 - right there you see when i refresh this
98:07 - over here
98:08 - the user is being set if i sign out i
98:11 - sign out i send it back again
98:12 - classical programmer
98:17 - let's go let's go here
98:21 - oh look at that guys
98:24 - that my friends is pretty much it we
98:27 - have finished with
98:28 - mo well all the functionality we wanted
98:30 - to get done
98:31 - in disney plus clone
98:34 - you can my friends you can sign out you
98:37 - can sign in
98:38 - anything you can do pretty much so sign
98:39 - out log in
98:42 - right kazia clever programmer beautiful
98:46 - right there click on individual movie
98:49 - watch the movie
98:50 - go back oh god
98:54 - let's go yay
99:02 - that's what i'm talking about we have
99:04 - one last thing to do that we're going to
99:05 - try right now is we're going to try and
99:07 - deploy it actually
99:09 - as well i think it's actually deployed
99:11 - it's deployed on our side
99:13 - if you want to go ahead and deploy it on
99:16 - your site if you want to try it out
99:17 - because
99:17 - anarchy has actually deployed already so
99:19 - um if you want to deploy it
99:21 - it's not that hard if you want to deploy
99:22 - it just go ahead and
99:24 - let me see let me show it to you on your
99:26 - side
99:28 - deploy it right do firebase deploy
99:30 - deploy
99:32 - deploy right with react
99:37 - right here right find that right here
99:40 - there's a really simple explanation how
99:41 - to deploy a firebase application
99:43 - right you do firebase login firebase in
99:47 - init do hosting that's all you got to do
99:51 - right from that point on all you have to
99:53 - do is when it says where is it was there
99:55 - is a
99:56 - default firebase project for this
99:57 - directory you select your project you
99:59 - created
100:00 - after that you do firebase deploy
100:03 - and honestly that's pretty pretty much
100:06 - it
100:07 - all right that's all you got to do uh so
100:08 - yeah that's how you deploy a bar than
100:10 - that guys
100:11 - that's it we are done we have our app
100:14 - fully built let's go ahead and
100:16 - log in yet again here kaiser cloud
100:18 - programmer
100:19 - so who's still with me who actually was
100:21 - able to kind of finish it with you was
100:22 - anybody able to finish the part
100:24 - partially with me anybody here
100:25 - anybody no anybody or you could oh
100:29 - giuliana you did let's go juliana
100:31 - beautiful
100:32 - beautiful beautiful beautiful so guys
100:34 - those who are on youtube let me go and
100:36 - bring you guys up
100:37 - on youtube i see all so many comments
100:39 - it's insane
100:40 - so many comments
100:45 - awesome thank you so much for the
100:47 - amazing amazing support
100:49 - i see all you guys on youtube right now
100:52 - holy moly we got a great crowd there
100:54 - great crowd there
100:55 - hello hello hello hello thank you so
100:59 - much
100:59 - guys that is it from us a very important
101:02 - let you want to let you guys know okay
101:04 - uh we went ahead and we just opened up
101:06 - cart
101:07 - for profit with javascript okay we just
101:11 - opened the card and we've actually
101:12 - lowered the price just for
101:14 - today okay just for today for profit
101:16 - javascript so
101:17 - if you're interested in joining okay we
101:20 - have a one-time deal
101:21 - literally happening right now and the
101:22 - price goes up in a little bit
101:25 - okay if you're interested we have a link
101:27 - down in the description
101:28 - we went ahead and we just opened it up
101:31 - link down the description
101:32 - if you're interested go ahead and join
101:33 - is this is for people who want to become
101:35 - serious this is where people who want to
101:36 - become developers
101:38 - if anybody you want any one of you here
101:40 - who want
101:41 - to become a reaction gs developer if you
101:44 - want to be a javascript developer
101:45 - if you want to be a full stack developer
101:47 - right this is the program that we have
101:49 - here
101:50 - with over 2 000 students we have
101:52 - students who are
101:53 - basically for example jen she got a job
101:56 - making 96 000
101:58 - 000 dollars at her new job we have for
102:01 - example
102:02 - rishi got a react gs developer job
102:04 - making 55k
102:05 - right after joining our program we have
102:07 - for example frank he got a
102:09 - react js contract for a hundred and
102:11 - fifty thousand dollars
102:12 - we have for example uh kelvin i got a
102:15 - reactions job
102:16 - making 60k right in one year or so
102:20 - so the list goes on and on and on and on
102:23 - and for those of you who are interested
102:25 - yes you on youtube if you're
102:27 - interested we have the link down below
102:29 - it is
102:30 - very very just for right now
102:33 - the price goes up very very soon okay
102:36 - so i highly recommend you join in while
102:38 - you can because
102:40 - the price almost never goes down to this
102:43 - price point never and i say it because
102:46 - we value our product so much and we
102:48 - love to give the community the way it is
102:50 - so if you're interested
102:51 - go ahead and join below link is down in
102:53 - the description below okay guys other
102:56 - than that
102:56 - that is pretty much from me on youtube
102:59 - uh let me see do i hear the link
103:01 - description i think i have the link
103:02 - description i'm not gonna get deadly
103:04 - description
103:04 - [Music]
103:07 - thank you awesome guys that is it for me
103:09 - guys other than that
103:11 - hope you guys have an amazing day
103:12 - hopefully you were able to follow along
103:14 - with me hopefully you're able to follow
103:18 - along me
103:19 - out of that that's it i'll see you guys
103:22 - in
103:23 - the next video this is fun this is a lot
103:26 - of fun
103:28 - [Music]
103:31 - oh it's so good oh my god
103:34 - [Music]
103:36 - it's all good mmm so good
103:40 - tacos are so the best i'm i'm so hungry
103:46 - oh yeah
103:55 - [Music]

Cleaned transcript:

today the disney clone that you see right here we had day one in the previous video where we focus on building up the home page like this we focus on building the login page that looks like this right here login we also focus on building the the detail page it looks like this as well so right there and we have done all this yesterday and day one so if you're interested we have a video and down description below for you to go ahead and check out but other than that let's go ahead and continue with what we're doing so like i said our goal is to be able to get to this right we're building a disney clone we have a react slick for react slider which looks like this we are using firebase for authentication right here right we're using beautiful animations with css if you scroll down right here oh if you click on something to be able to get to the next page we are using react router dom right here beautiful right and if we go to login so let's go and sign out here for a second if i click log in again this is using firebase authentication beautiful and to keep to make all this work to keep the state managed we are using redux for state management coming together it's all working so beautiful so nicely it is user friendly it is mobile friendly and so we're just going to continue on with building this beautiful um from the last time from the last time what have we done from the last time we have our project that's basically like this right here right as our project we have a few files we have the main files let me go ahead and show it to you here detail home page right here home page header image slider login movies and viewers right and all this contribute to our application that is pretty much the way it is right now nothing crazy so far because right now our goal is very simple the number one goal i'm going to do is you see how these movies right now are just static files static images we're going to be grabbing them now from the database to make sure we have them basically from the databases what i'm trying to say right we want to have them dynamic right we don't want to have them static all the time all right okay to make that happen to make that happen we're going to be using firebase and db database from the from there right on top of that after we finish with that part two we're going to focus on is go to the detail page when i go to the detail page of course we don't want to see just static content we want to see content that changes based on the mood i click right that's part two part three is going to be login so we're focusing on the login which happens to be right here when i click on this we should be able to log out and i should be able to log in and honestly that is pretty much it for today and once we're done we will go ahead and host our application straight on firebase and you'll be able to play with it and use it and just be so proud of it to put in your portfolio and so forth all right so our project is here okay to do the whole firebase getting movies let's do the following let's go ahead and go to home.gs okay on the js i will make this a little bit larger home.js yes on home.gs we need to go ahead and grab the movies that's the functionality we're going to use now to grab those of course we're going to grab them from the firebase and right now we have nothing with firebase related that means we need to install firebase so create a new terminal right here inside inside your inside your what's called uh your views code and we'll do npm install npm install firebase done all right we will install that and then we will also add the configuration for the firebase so let's do npm install install safe install firebase dash tools boom voila firebase tools we got those so those two things npm install firebase right here and then npm install firebase tools both are needed for this to work all right awesome clear this out all right next thing we need to create a firebase.js file because we need the configuration now usually what i would do is i'll go ahead and actually show you how to go to firebase click your project and so forth but in our case we're not going to do that mainly because a lot of the data all this movie's data is already prepopulated in our database and so we'll just give you access to be able to prepopulate your data as well right so it just makes it easier for us and for you at the same time let's create a new file here new file will do firebase.js and very important make sure this firebase.js is not is not inside any of these folders like app or components or features or anything like that it needs to be inside the source folder very important next up as you know we down below we have a google drive folder that has images and it has a few different things below it let me see right here where's that finder folder let's go to downloads here and we had a disney clone challenge this was exactly the what's it called the the folder you can download down below in the description below okay download that and you have videos images and the next thing you have also is something called firebase.js okay i want you to go ahead and actually open this one up so it's going to open this one up either with sublime text or whatever the you use to open it up so i'm gonna open up inside the use code right here this is the fibers that gs we're going to use all right so copy this one command c go to firebase.js and paste it in there done right and honestly that's all you need and again it's inside the folder down below in the description okay inside that folder the firebase.js okay download that and then paste it in say here so what's going on here in this file uh a few things we are importing firebase part one next thing we have a firebase configuration file right there and this basically just gives us access to the actual database next thing we initialize the firebase app right here right and then what we do is we we need to tell firebase what are we going to be using well the first thing we're going to be using is firebase firestore so firestore is the actual database we're going to be using firebase authentication later on to be able to log in and log out we're going to be using google authentication because like i said firebase can have like yahoo notification there's like all these amazon to the kitchen facebook authentication in our cases it's just gonna be google auth okay and finally we're gonna be using firebase storage storage as well right so those three things is what we need to make sure to tell our project uh to use once we get that does everybody have that let me see that's everybody does everybody see the folder or see the file everybody has the file on the zoom there yes yes yes yes beautiful awesome all right next thing once we have that let's go back to now home dot gs all right on the gs and here we need to grab the movies from the database and first is a few things we need to use something called use effect to be able to grab those movies let's go and import use effect here use effect boom right there use effect which is right here now what this is going to be used for is use effect it says hey whenever i load my component whenever i load my page or all that i will be doing is basically just running whatever you tell me to do right so for example here if i say use effect if i say use effect boom and i say like this done okay good and i'm going to put nothing inside here check this out if i simply just do comma and i do console log okay console console.log okay hello all right check this out cancel little hello if i save that and if i refresh this all i had to do refresh this inspect element on this one call the console see hello so what this is telling me is this right here is being run whenever this component this whole component it gets loaded right this whole thing is being run that's the reason why we use use effect otherwise if we don't use effect it will be very messy a lot of calls getting being called if you want to avoid that all right next thing since we're using firebase database let's go ahead and import db db from firebase we need to use firebase like so so dot dot slash means go back up the folder because currently inside the components and then we need to go back up to the source folder to access firebase.js all right that's part one all right since we got that all right let's go ahead and take a look at how do we grab the data so we'll do db db dot collection collection dot well collection of what we have a collection called movies inside our database and we will say something called on snapshot what does this mean on snapshot means whenever it's not just kind of like a picture right you take a picture of whatever it is a landscape or you know yourself who knows i took a picture and it's a still picture right and it does not move but it's a certain point in time well what a snapshot does it says it's almost like taking a picture of the database and then returning that picture to you right at that point in time the you called it right the point in time that you called it and now what happens also with it is whenever the picture changes or whenever for example the database changes it will actually send a new picture to you every single time that's the cool thing about firebase is that's why it's called a live database all right on snapshot all right and we'll do like this snapshot called a function okay so it's gonna get a snapshot and then i will show it to you what we get from it snapshot oops let me go and type this quickly snapshot snip shot snapshot okay good good good good good and well let's go ahead and install log while we actually get it you'll see it's a little messy check this out snap shot okay done okay if i go ahead and right click this inspect down on this one console log what i get look at this this is what i get right here like i said it's really messy but what do we have here here we have docs we have empty metadata query and size right and the main thing we need to look into is docs you see look at this you see this right here it says array of 16 what do you think this means well this just means literally we have 16 items in our database right here look right 16 movies but again you don't see them fully it's a little bit odd the way it's made but you'll see in a second here but we have the 16 elements in the database and we just received them right once we received them well what's going to happen is let's let's go ahead and capture them we'll do let temp movies here 10 movies is equal to snapshot snapshot dot docs remember how we talk about the docs portion docs.map at that map we'll simply loop through every single snapshot and then we're going to return something from it check this out right here's a lower turn so for every single dock every single dock that we have i put this on the right hand side for every single doc that we that we are going to use we're going to grab the id and the data from it so return return boom id doc dot id comma dot dot dot dot data hold the phone as i understand what you're talking about this is very confusing what are we doing here let me show it to you console the log dot data all right so the log and check this one out okay inspect element on this go to console again look at this you see every single doc.data is is what is the object look at this right here boom you've got the background image the card image description subtitle title these are all movies stored in our database right and that's exactly what we are doing here and so we're capturing that by using docker data we're capturing that portion but also separately in order to capture the unique id so we can later on use it for the detail page or capture inside doc.id as well right and this dot dot send simply means basically let's go ahead and unpack this object and put this whole dot object inside this new object that we created which is simply just an object with a bracket right and then we're turning it back to the 10 movies so if we're doing this right here let's go ahead and stop console log here i will do console.log console.log temp movies okay save that all right boom right there look tab movies is exactly what we now need we have the id the id of the actual movie the id is used for identification inside the database we have the description the card image the background image pretty much everything we need for the detail page and also for this page as well and honestly that is it that is it my friends right but of course we're not done right we have these movies and that's great right how do we go ahead and show them now and here how do we do that well this is now where redux comes in and this is the interesting portion okay and i want you to pay attention to this really quickly here readings is basically what's going to manage all the data so if you imagine this right if you imagine the fact that if you have a rectangle here and if you imagine that this right here is state let me go ahead and make this of course this right here state okay this is called state and state is basically a database db for your app but internal app basically for your it's basically db for database inside chrome right and inside state we have what we have things like we have different um values maybe we have movies inside the state oops not here maybe we have movies maybe we have you know user maybe we have uh i don't know some kind of other list maybe right all of that is actually being saved so for example here let me say movies movies maybe for example we have user right the application state sees all that and so it manages all that right and because we save it in the global state in the application state we can access it everywhere that we we need that is the important part here this is why redux is so useful because otherwise if we don't do that then we have to pass down data from movies down to movies here and you're passing down data every single time and that's a lot right that is not very good that's not very useful and that's why rex is so important okay now at this point since we do have redux let's go ahead and take a look at what do we create with it well if you look at firebase and i'm sorry if you look at redux readers has a few things when we did the redux toolkit when we used the template redux template right here you see it created a temporary one called counter boom let me go remove some of me counter right here and if i click into it it has something called counter slice and we have the initial state here and so forth we're going to mock this up and i want to show you exactly how it works let's create a new file here a new folder actually we'll call it movie okay movie oh actually not inside here but inside the features so new folders at the features not bad we'll call it movie boom not inside the counter remove this one delete this one i don't want that boom okay counter movie inside here create new file called movie slice and i know you might be wondering how whoa what is movie slice why why is it called the slice i'll explain a little bit why all right and inside movie slice a few things we need to need to do is we need to import import create slice create slice slice there we go from redux toolkit so from at redux redux right js slash tool kit done all right so create sled for mutex slash tool kit and honestly that's it and so usually what we have with redux is a few things we always start out with initial state like when i say state is what do we have at first what we have in our data in in our chrome database or in our application database well we always start out with nothing so we say const initial state initial state is equal to boom initial state is equal to and we're going to give a movies key no right it's nothing right we start off with nothing initially okay once we have that we're actually going to create a slice for the movie so what does this mean so let's get let me take a look at this movie slice movie slice is equal to create slice and you're like holy this is so much i don't get it this is complicated this hack all right don't worry don't worry i'll explain this let's create let's name this slice here i'm going to name this slice called movie so name i'm going to name a movie boom comma and i'm going to pass the initial state that's going to be loaded with initial state boom comma and i'm going to give it a reducer now what is a reducer check this out okay um well very simple redux is made of a few things actions actions reducers users and state right actions reducers and state there's also something called sagas but we don't really care about that too much here that was previous redux okay actually sort of state an action is basically the actual you want to do so for example right if you want to i don't know create a movie if you want to set the new movie if you want to delete a movie if you want to log a user out you want to log a user in this is called the action this is called actions okay you want to log them in you want to log them out you want to sign them in you want to save the data that's called actions right now reducers reducer that basically is what takes an action and actually changes the state so kind of kind of goes kind of like it goes like this let me show you oh actions actions actions call reducers reducers change the state and so forth that's honestly what happens right and now it does not make it's nothing more complicated than that right one way i can show it to you is really cool like this on the right hand side you can see here that this right here is an action it's called a dispatch so we usually dispatch in action it's like you you're dispatching your driver right right you dispatch an action it goes to the action right here there's a type deposit it goes to the store the reducer the reducer right here changes the state to ten dollars see so again we click on something this patch is in action oh let me go right this patch is in action boom boom reducer changes the data the state now send dollars that's honestly this is the whole thing dispatch right reducer changes the data in the state and that is pretty much it and we change it in the ui and that's it the coolest part about this is because whenever i change the state here right basically the whole app knows about it the whole app right so let's say for example i have a home page that has some data i have a homepage that has some data right and the reducer said hey the movies changed right so we uploaded new movies or whatever it might be what will happen is every single component will get notified about that and so now you can make the changes really fast and really quickly and you don't have to listen on everything that's what makes it so powerful okay all right continuing on so does that make sense is this a better description of kind of what relax is this is a really nausea does that make sense raise your hand is that a little bit better to understand yeah a lot better okay good good good i know it's a little bit hard it's this one is usually a little bit hard to understand but all you have to know is we have actions that basically what you want to do so kind of what you want to do let's say i want to walk i want to walk so i'm walking walking walking and then maybe i want to for example buy something or i want to buy something then the reducer is what allows me to do that okay all right so we have initial state let's create those reducers boom let's create those reducers all right all right we're going to create a reducer called set movies movies and what this will do is we'll take a parameter called state so this is the current state comma action right comma action and this is a function right here pretty much right and what's going to happen is this is where we change the state so in the cyborgs function we're going to pass in new movies that we get from the database it's as simple as that so let's do that movies is equal to action dot payload actually that payload all it is is that's the actual parameter that we pass into the subways function you'll see that later on that's what pillow carries so if i pass in an array intercept movies i will get it here it's an action.payload that's what will happen next up in order to actually use the movie slides we have to export the actions because remember we dispatch actions right so i'm gonna say export const right here const and i'm gonna say here set movies right is equal to movie slice movie slice dot actions there right so this is the action that we're going to export next thing is we need to now export the actual movie state itself because remember how do we use a component to access our movie state where very simply we have to export it so export and the gist of it is we usually like to say something like for example select movies right that's kind of like the the the traditional tradition but that's the way you want to do it select something so what are you selecting from the state is it movies maybe there was something else here for example like i don't know uh horror movies right movies in here right well you would do select horror movies inside here whatever it might be right that's it okay so select movies is equal to here we'll take the state state and we'll say it's state all it is is state state dot what state well the movie state right movie state this is the reducer right state.movie dot movies done done so okay this will give us like the movies okay next okay we're going to export the actual slice itself so export the actual reducer export default so by default we're going to export the reducer movie slice dot reducer right the reason why we do that is because you tell the store we call the store the whole store that we have this right here reducer save that awesome sweet let's now go back to our app go to store.js and we need to now import that store actually right we need to import that store or input the reducer and we can do that very simply just by simply going okay let's do it like this so import we'll say movie reducer right movie reducer from voyager from tata features features dash movie dash movie slice okay and then instead of this counters because which came originally we just say movie is equal to the movie reducer and all you're telling the application is that we have this producer at our disposal that's it that is all you are saying my friends all right that's great let's actually see if this works i'm going to save this i'm going to save this refresh it all right so nothing's broken so far which is good that has broken so far the main thing is going to happen is when we actually use the movie reducer which we will do inside the home.gs basically whenever we are right whenever we are getting movies this is we will be able to set the movies for the whole state the whole state because then it can be accessed everywhere inside our application right so inside our homepage let's say we have a homepage here right that's the homepage the homepage and now we have for example the movies component right two different components we have component movies component and a home component so let me say here this is for example the home component this is the movies component right moves components well they both share they both share the same store right which contains movies right so what happens is that inside the home functionality okay it's at the home functionality all i do is i hey i set new movies right using this the reducer and then because of that i can actually get movies inside the movies component that's it that's all that happens all right boom awesome all right so let's go ahead and do that now to use the reducer we need to use something called dispatch so let's go ahead and do this we'll say import import right and we'll say use dispatch right there use dispatch okay from redux react dash redux all right and then we will import the set movies action so import right there set movies okay from what is it features dash what movie dash what movie slice right but there was a movie dash movie slice right there beautiful okay we got the action which is said movies we've got the use dispatch which we're going to use to dispatch that action so this is like basically calling it's like hey do this action that's what dispatch is used for all right and then honestly that is pretty pretty much it we've got dispatch we've got that right to use this patch we need to say that let me say const dispatch is equal to use dispatch oops not that one huh and this patch just patrol okay good good we got that now so let's think about this right once i get my movies inside you know in from the database what i need to do well it's very simple at this point now i need to dash this that that aspect dispatch an action right called set movies to set the movies for the whole store for the whole database that's what we need to do does that make sense and we have a question does that make sense yes yes yes would you dispatch in action saying hey you know what let's we got these moves from the database let's go ahead and then store them inside the whole state the global state okay this is where we'll do like this we'll say dispatch dispatch right dispatch and we'll say set movies right and this will have temp movies inside here temple movies again tap movies okay and let's go and check that make sure nothing's broken let's see now does anything break let's right click inspect element anything break oop i forgot to share here so here's what we did we did dispatch we did this patch right here okay and then with the dispatch said movies right here okay that's what we just did and we imported said movies and used dispatch beautiful all right all right so if we go to console here no bad errors just good this is a good sign nothing's nothing's going haywire which is a good sign right but of course we still don't know how is this working well let's actually now use the redux in terms of actual uses the state remember how i said that we can use the same state between the most component and the home component well go to movies okay go to movies and let's use select movies so we're going to say import import select movies that will get us the movies that we stored in the database select movies movies from from what well features slash oop slash what uh movie slash movie slice right movie slice again where is this coming from i mean go to movie slice here movie slice boom look at this see select movies so like movies all all that's doing is that's cool getting us the movie's state that's it that's all it's doing that's pretty much it right here that's all it's doing so let's now go back to uh where was i yet i was at movies component boom all right that's good next up is we need to actually to use the selector we need to use a use selector so import i know it's a little complicated guys there's so much to it right but once you know it for the first time or once you kind of realize how it works it's not that bad oh come on use selector from again react dash redux beautiful okay three ducks save that there we go you selector and let's now grab those movies okay we'll say constant movies this is what we're going together with so constant movies is equal to use selector the one we just imported from here react redux okay and the selector will be select movies that's on that's the one we need to use select movies okay and let's check this out i'm going to console the log here so the log right there right there i'm saying this is movies right comma i'm gonna say move just so you guys can see it okay oh no no no no not that boom all right save that inspect element console oh look at that this is movies array 16. we have the moves you see how it travel between the global state we have the global state right so what do we do here we went down to the home state home component right inside the home component we grabbed here so the home component we grabbed the data right here okay we grabbed the the data from the database we dispatched an action we used redux to save the movies inside basically the store right the react store right it's kind of like a store where you buy things right you can buy things you can put things in there you can buy things from there right we put the movies to the store right once we put that there if we now go back to movies component right we just now grab from the store we grab it from that store that is it that's happening here what do you guys think about that does that make sense does that make sense kind of iffy yes or no raise your hand if it kind of makes sense right yes yes yes okay good i know i know it's a little bit iffy to fully understand redux it takes a few days it takes a few i mean sometimes takes a week to fully understand it okay but we have the movies which is great all right we have those once we get those of course we need to replace the static images now right now how do we do that well that's pretty simple we can do that by doing a wrap a basically a loop through them so we'll do the following we'll do let's see this so we'll do movies movies so we'll check if the movies exist right and then if the moves exist we'll say like this movies and we'll say this movies.map check this out movies.map okay and this will take in a movie okay oh actually not not like that taking a movie and it will actually no come on there we go thank you all right and the wrap is actually the wrap which is currently directly the wrap is what the wrap is this right that's the whole thing right instead of doing it here we'll put it inside here okay all right there you go okay all right so what's going on here this functionality says hey if movies exist then you can go ahead and proceed with doing something about it right but if movies is null because in the beginning with the when the page load the movies is null right we haven't gotten it from the database yet once we did get it from the database we simply just loop through it right here that's it that's it all right and as we loop through it we use a map function to loop through it get the movie and let's now actually get the movie data right so we'll say the following the source image remember how we can so log the source image let's go ahead and remove this portion don't need this instead it will be what movie dot what card image okay let me go ahead and just oh do you see what just happened right here guys look at that look at that just like that it just worked right see right we loop the moves can you hear me jesse that's amazing yeah i can hear you beautiful beautiful right so it's just all working the way you should be let me make sure that i want to give it to you there we go awesome can you hear me jesse okay good you can hear me yeah i can hear you yeah yeah and what did we just do here like i said we grabbed the movie from here and i'm going to console the log it's all the log so the long movies okay like right click there's an aspect element right this can be oh no console oh something happened each child okay we'll take care of this a second but here are the movies right we have the id we have the subtitle right and what we use from the movie is we use the movie the card image right so if you look at it here the card image so that's what we used that's how we said card image right here card image you see that's exactly what we need to use right there all right and honestly that's that's pretty much it all right but of course we're not done yet so a few things i want to fix together here it says here you see how there's an error that says here well each child each child in a list should have a unique key prop what does that mean well redux underneath the hood tracks all of these components all these components right if there's any changes that happen to them but it tracks them through a key like a unique key and to give a unique key we need to do something like this we'll say key is equal to and we need to give a unique key and what's the most unique thing that we have about a movie what is it put in the chat what is the most unique thing that we have about a movie individual movie object it's the id that's correct so we'll say to get the id well actually we'll we'll grab the index here i mean you could do move that id so we'll say movie here movie dot id that's it so save that boom let's see inspect element and let's see if the error appears still let's see console okay that's the old ear so if i refresh this oh yeah no air you see no more ears now it's all working perfect the way it should all right so we have done that portion we've grabbed the movies from the database they're in our possession we have it all right only thing is left at this point is when i click on them i should be able to go to a detail page so i can see the evangel movie uh object basically that's the whole goal about this right right there and of course let's go ahead and remove all all these uh simpson's ones because it just looks like our disney clone is full of simpsons that which is not the case so let's go ahead and do this so rap let's remove all these simpsons don't need that byebye that's funny all right save that oh just happened i just removed all notes right here there you go all right save that okay good good good no more simpsons thank god i mean nothing is sepsis i love simpsons guys okay nothing in simpsons guys all right next up uh what do we have is let's go ahead and add our code here so add uh add grab movies from db we'll put that into our github save beautiful all right all right number two that we're going to work on is let's look at the detail page so we need to create a link here when i click on this specific thing i should be able to go to the detail page of the specific image of what i clicked on so the specific right movie uh won't be that hard we will use react router down for that as well and the way we do it is something called a link so we'll say a link here so import import link we've used previously but now we're going to use the link portion of it link right here okay from what react dash router router and really with a link is basically it surrounds the object with an a tag honestly that that's all it does we can do that here so i will say inside the wrap i will say let's link it we'll do link like so boom put the image inside the link of course okay save that put it like this okay and link to what specifically this is where we need to specify we'll link it to what well how do you think we're going to link it well we have the detail page let me go to the app.js right inside here we have detail page but what if we passed in a detail slash id a lot of times we will do detail slash and we'll do give an id like this oh come on rocket i don't need you right now right slash id and this id is going to be the parameter we pass in into our detail component all right let's go back to movie uh yes movies okay and we'll say link and link two link two and we'll give it the link so here's the link right so let's think about this right we'll say it's detail so slash detail right right detail slash what the id of the movie so right here we're going to use template literals then movie that id right there so all it will tell us is it will link us to the detail and then the video movie id right so we're going to loop to every single movie and get the id from the movie and then put inside the link towards the detail page and honest honestly that's that's it that's it we're done with that portion it's as simple as that let's go and right click this i want to show it to you guys right click on it inspect element look at this you see this ace draft tag right here look at this see this no this one here right there detail page and this 30a y is individual link to the movie if i go to a different movie the link will be different because of course the id is different right so this is 530 aui this is 5n and honestly that's pretty much it that's all we got to do that's it comprendo that's it right so if i go back to here we have our link right there beautiful okay say that okay save that right we have that all right so now if we click on it it should technically take us a detail page okay are you ready for this are you ready are you ready i hope you are let's go so click on it oh let's go look at that it took us directly the detail page but of course it's not the correct image still right so like it's not the correct one so it's just the same one but the reason why that's the case is because if we now go to the detail page what right of course it's all static content right but look at this it's starting to come together really nicely as you click on individual movie right there it takes you to the page that you want us to take it to and honestly that's it that's all we need to know specifically look at that that's so good guys what do you guys think so far give me a thumbs up in the comments below if you guys are liking what you're seeing so far give me a thumbs up there we go beautiful beautiful beautiful all right all right now let's focus on the detail page right here okay um a few things since we're passing the id you see how here we have the id that's the id okay all right we need to capture that id because we need to get grab all the data about the specific movie so here's what we'll do i'm going to say like this okay we're going to use use parameters from reagaradam so import import import use params use params from all right from what react dash router dom save it all right next one const and we'll grab the id this is the smart thing about react router dumb and knows this kind of stuff because we inside the app.js we told it that the what's going to happen after the detail link is the id it will save it actually in the parameter that's the cool part let's go back to the detail and we'll say use params use programs right there and we'll grab the id from it so now if i go go ahead and do console.log the log id it should technically that's it technically id let's go and inspect them on this one okay inspect them on this one let's go ahead and go to console where is it uh prop type the prop 2 is marked is required in link but its value isn't defined that's different okay there's the id right here that's all we gotta do see we got we grabbed the id that's it all right save it beautiful okay next up we need to again grab the data for this a specific movie right and we're going to use use effect so let's go ahead and go to react i'll say use effect here use effect okay again so let's do use effect because we need to grab the data individual data right right there and this needs to happen whenever we load the component the component the detail component specifically okay this empty bracket means call this functionality whenever you load the component i just want to make sure you understand that next thing inside here we need to grab grab the movies the movie movie info from db from database right there to do that let's let's import db from firebase import db from okay firebase okay and to grab the database the movies database we'll say db dot collection collection okay and with the collection we use is called movies right that's coming from a database directly okay beautiful we'll give it the specific dock we need to use so dot doc doc and the id that's it doc id right this is directly going to come back from here right it's kind of like telling you hey grab me the movie with this specific id right there dot then so once we get it we're going to grab it and then we're going to use it now right the dock is going to be inside the functionality here and what we need to do is we need to check if this dock exists so we'll say if doc doc dot exists meaning if found the specific document or the specific yeah the specific entry with that id we're going to use it now so if that exists we'll say what well we need to save the movie data save the movie data but how guys do you think we should see this inside do you think we should save inside the redux or do you think we should save it actually inside the state what do you guys think redux or state if you think it's going to be a redux raise your hand here okay everything is if you think it's going to be state raise your hand now what do you think or give a thumbs up it's actually going to be in state here's why because this changes for every single right page this changes right we're not going to reuse the movie data anywhere else besides on this page so we don't need to save inside you know the actual redux instead we're going to use state okay to use that we need to you do use state use state right there okay we're going to grab it so we'll say uh what is that what are we going to do uh do const right there const movie movie sub movie that's how we go ahead and then we'll say equal use state okay so you stay is basically like redux but for individual components okay for individual small components if redux is for the whole app okay and it's shared amongst all the components your state is basically for individual component so it's on a smaller scale okay and it was made for a few different reasons it just makes things easier sometimes okay and what we get here this is the movie that we will use and if we want to change the movie we use sub movie so in our case since we get the movie we'll do set movie right i will do doc dot data that's it save that all right okay and otherwise however if it does not exist for example let's just say that i don't know the movie does not exist we're going to basically redirect direct to home page for some reason let's just say it does not work out right well in our case let's go and check out what we do so i will say here consult the log console.log movie is movie is what movie right here okay save that all right check this out inspect them on this one let's go ahead and do console oh movie is object right there look at that boom right there so this id right this id give us a specific object we need right there this is the object we need holy moly that's so cool right wake up grab that oh oh that's not one okay i don't know what happened there so that's it once we have the movie right because again we use set movie to save inside the movie object right here once we have that now we need to use the that the uh the specific data right and now it's very simple inside here instead of doing a static image we'll replace that with a normal image so image source we'll say movie dot open movie dot what background image but background imager oh this save it oh look at that this is the exact movie that we clicked on guys the exact move we clicked on is that background image right next one image title will do movie right there right right we'll say what movie dot title image save that boom look at that guys now it's tangled you see how it's doing all right next up we need to change now this specific portion right this specific proportion so what does what is this going to be movie.what that subtitle grab it movie dot sub title boom right there okay oh wait wait wait wait wait wait wait wait wait wait wait i didn't spell right sub title which is going to be this one right here subtitle okay boom right there look fantasy animation and finally the last one's gonna be move the description so we'll say here movie right there movie the what description done that is it guys that's it our detail page is now premium is finished that's it look at and look at how beautiful it looks you see the steps we took we grabbed the id once we got the id we grabbed from the database right like i said so let me see look let me let's think about this here two we grabbed so here so here grab id grab id right then grab from db right and populate populate populate data or populate ui that's it that's all we did we grabbed the id from the top page we grab for you we used that to grab uh the data from database and then we populated you the ui that's all we did inside here honestly that's it beautiful that is all good guys are you still with me guys how cool is this you guys still with me that's pretty awesome huh you know with me yes yes yes yes yes yes beautiful beautiful beautiful beautiful all right next one let's go take a look at how this actually works let's go back to our homepage go back to our homepage i actually want to link the home page to it i should go back home because i'm getting tired of typing home i'll go incredibles oh can i help you back on the image of undefined let me go back to here let's try this here again oh interesting let's go to here i think i know this is happening actually i know what's going on okay i got it so here's what needs to happen here um in order to for this to fully fully work right again this use effect happens maybe a little bit later on of course right so basically it initially we don't actually have this data at first right this happens later on this is why we need to do a little bit a little bit differently and in the detail page we need to grab it with an id change so check this out now we have the id let's think about like this okay i'm gonna save that background movie that background image so here's a lot of times what i'll do for example the reason why it's yelling me is because the fact that we don't have the movie our disposal right now right we're trying to grab the movie background image but whenever we grab it from the database we're not actually getting it we're getting it a few seconds later that's kind of the issue here right so let me go ahead and look at this here for a second right there so so we're still grabbing these that's no problem right i think the probably comes when we go ahead and go this specific movie so let me go and click this again that's okay all right to fix that here's what i usually do it's a very simple fix i usually do like this i say if movie exists like this if movie then we say uh no no and end right there right there if movie exists only then do we get all this data look at this oh come on come on holy moly nas holy macaroni okay come on next only the movie exists do we actually show it in the database oh show it on the front right there we'll do it like this don't worry don't worry guys it's gonna be fixed okay save that oh come on give me a break okay save that um must be wrapped in enclosing tag you wanted jss i did want to do a sex fragment yes i did but oh i think i know why okay here let's do it like this and then this will be the closing tag right here there we go fixed there you go and i'll show you exactly what why this happened and what's going on and why we need to do this check this out okay good save that okay let's look at one oh look at that boom right there look at that boom boom boom oh let's go let's go let's go we fixed it guys we fixed this issue look at that that's awesome oh boom let's see we fixed the issue so what happened here guys very simple right well initially we got this errors because we tried to grab the background image for a movie that does not exist it's as simple as that right um does not exist because use effect it takes us a few seconds to actually grab the data from the database right so it takes a few seconds maybe like five seconds but to go to the actual page it takes as literally millisecond right and so when we actually are executing this while this is trying to get the data right here right this is already being preloaded and it's trying to move the background image which is now right because we don't have it yet unfortunately we don't have it so we're not going to do this will give us an error but what we did here is very simple we said if the movie object exists basically if it's this right here is not null right the movie object exists right then we will go ahead and execute and actually all put all this to your sex in place right and then we got all these errors because why because we need to put this into this is called like an um an empty like tag an empty tag i forgot what is called anonymous tag anonymous tag so it's not actually a div but it's kind of like a div right when you put it inside here you have to wrap it inside of one container and anything else can go inside it it's a little bit confusing on the react side but it's just some things like that you have to get used to unfortunately with react so uh yeah i know unfortunately that's just how the case it is you know but with it look we set the movies we save the data we got it if i go back to the home page boom right there oh oh so good oh oh so good look at that boom boom boom boom boom boom boom boom boom boom boom boom boom boom boom done guys how cool is this you guys still with me yes or no let's go yes you guys you are beautiful as always love you all very much now was that was understandable do you guys understand why we had all these issues do you guys get that yes yes or no give me a thumbs up for yes give a thumbs up for no okay all right and the comments as well guys on youtube as well too all right all right so we got that portion that's working now all fine no problem whatsoever let's now focus on the last part of our application which is going to be the login section this might be a little bit harder but i'm sure we'll be able to figure it out okay this is where now we have to use redux yet again okay we need to create a user kind of state management to be able to manage the user state and see if the user exists right if these exist we do this if it does not exist we do that right that's it okay let's go ahead and create a movie slice uh let's go ahead and create a user slice actually so a new folder inside features new folder let's call color user done right inside here we'll go ahead and do my bed we'll do user slice so new file new file user slice dot js done okay same thing here let's go ahead and import redux just how we did it inside the movie slice and by the way just a quick note the reason why it's called a slice is it's kind of like a slice of a pizza right you were creating all these reducer functionalities which are just slices of the big thing that's why it's called a slice yeah nothing complicated there import slice nice then create initial state so const initial state initial state all right and there are three things we're going to save first one's going to be name right okay and this is going to be empty and then we're going to save email right also nothing and then we're going to say photo right that's the photo of the person three things once we got that let's go ahead and create a slice so we'll say const user slice slice is equal to create slice create slicer create slice okay all right inside the create slice give it some values like name in our case it can be user cool and then we will go ahead and give the initial state right so our initial state is basically nothing nada okay bond done then we have reducers this is where we will get our reducers and a few things we need to do on here inside the reducers um few users the first one you need to create is called set user so site user login so we'll call it set user login and this will of course take state state comma what action there we go the second one is going to be which one which is going to be set sign out so set sign out because again when we sign out we want to be able to clear the state correct so we want to be able to clear everything here so let's say sign out right there we'll say state okay no action we're going to pass into here because nothing really happens and when we set to now what happens what do you think in the comments below what happens when we sat sign now it's very simple we say state dot name is equal to basically nothing again or no okay we say state state dot email is equal to null as well oh no boom and then we say state that state.photo.what photo is equal to what null 2 right beautiful now when we log in of course let's go and finish this one up again state.name is equal to what we're going to pass as i'm kind of action we'll say action.payload payload.name right there all right and then same thing is going to happen with these other ones right here so click there bump in this case email email and it will say payload.email right and then state.photo payload.photo right oh no that's not that one save that beautiful okay so a few things again sell user login to be able to log the user in we save the user data okay then we set user sign out so we should be able to sign the user out so that we don't have the date anymore and basically we can't show that application anymore that's it all right give me one second i need to go ahead and take a breath um so good so good okay okay after we've done that we need to grab all the actions right so we'll say here what i'm gonna do it like this so it's a little bit cleaner okay so again we need to export the actions because actions will allow us to dispatch them right so we'll do what set user login and then set sign out so here we'll say right there oh no that's not what i want come on no set user login comma set sign out is equal to what is equal to use or slice use a slice not what that actions actions right there beautiful actions action what actions are their actions make just measures plural all right after that okay we will go ahead and bring back the specific data so we'll say export right const and then this would be select select it's like what select user username user um i'll say username is equal to what state state state the user name right same thing is going to happen with these other ones but in our case we're going to do select user what user what do you think guys here user email here right because we need to select the email and we're going to grab the email from here boom and select user what do a photo right there and that's going to grab the user photo done all right and then at this point all we need to do is export the reducer so we'll say export export uh default so by default we export to reducer default default user slice that reducer done so okay all right and that's it we've created our react redux slice for just the user okay now let's tell the store that we have them so let's go to store the gs let's import it let's go ahead and remove this counter reducer because it's not useful at all there we go move this kind of reducer on unnecessary fully and let's do import user reducer from okay the features dash what user dash what user slice done okay and the same thing is going to happen here so say comma and then we'll give it a comma we'll say user here user user slice done all right so we were able to pass in all of that data and now if we look at here really no big error that's going on here we're pretty much all good on that aspect oh that's not what i want you sort you inspect element let's see yeah nothing crazy in terms of like actual areas that are going on here nope we're good beautiful that makes me so happy okay of course if i go to here it should be all good as well okay sweet sweet sweet soul so now in order to fully make this word we need to go let's think about how this works right we need to create a login button if we're not logged in right so let's think about this this will happen inside the header because remember if i go back to our app which is this app right here right let's go sign out you see the header changes right we have a login button right here right this right here and we need to be able to handle that so let's create the login button boom let's create the login button and that's going to happen inside the header header.gs oh right there okay all right let's see so what's going to happen we need to be able to grab the username the email photo and see if it exists if the user does not exist we show the login button however if it does exist we don't show the login button and instead we show the user circle does that make sense comprende all good yes yes yes yes yes comprende good all right all right let's make that happen in that case by the way let me see here all right beautiful wow so many comments are good going holy moly you guys insane all right beautiful right so login let's go ahead and create the login button in the case but first we need to of course need to import the select username all this kind of stuff so we can do that by doing like this import right here import select select user name comma select select user what user photo comma what select ah user photo do anything else username and user photo we don't need the email that's pretty much it okay okay from what from no that's not what i want from from the actual user slice so from the features features comma slash user slash user slice okay save that next thing of course we need to go ahead and import the the whole use selector thing so let's go ahead and do import import what use selector oh that's not what i want no use selector from what from oh my i forgot to show to you guys my bad my bad my bad on youtube how long was i on here i'm very curious well here's what we did guys i said i went to here uh all i did is i imported this right here so like username it's like user select user photo okay that's all pretty much done on youtube just so you guys know okay and then on the user slice i mean we did this whole user slide so hopefully you guys seen this i don't remember when i put it on here hopefully you guys seen that one that's the one we did create okay let's now go back to it was that long huh i don't think it was that long it was not no okay thank you just to use selector okay let's go back to hello yes from and we need to import that from react redux redux redux react dash redux that's pretty much it we had this redux we've imported that that's all we now need at this point okay let me see make sure it's all good here react you just use selector import that uh let's actually now use that right so we use selector let's go ahead and use that so we're going to grab the username so const user name is equal to use selector use selector and which one you're going to use well select username right here so select select user name right there beautiful and simply const user photo is equal to use selector no yeah so maybe on line eight yeah thank you jesse use selector okay we'll do a select user photo beautiful so i'll use your photo it's exactly what we need and now at this point a few things are going to happen so here's let's think about this if we don't have if we don't have basically like the you know the yeah if we don't have the user basically then we you know show login button and we can do that inside the nav menu so after the logo let's think about like this i'm going to create an ifelse statement so basically if there is no username user name oh this one if there is no username right if it does not exist then we will go ahead and show the login button so i'm going to say login that's it right log in right here and i'm gonna say login right this could be that's gonna be a stock component we'll create otherwise otherwise otherwise or show the nav menu this one and the user image actually i feel like those two things are important okay otherwise we'll show the user menu and the login so to make that happen we need to make it again we need to use this call anonymous tag like this right boom right so we need to put in the user image right there and then the menu inside there so heading that menu in here user image in here of course right uh to make it fully work of course we can't do that so we have to do like this we have to do parentheses close parentheses right there then open velocities oh hold on that's not right it's not right question mark so again if this is true we do this otherwise we do this whole thing understand that's all happens that's it okay so now let's go ahead and try this out i'm going to save this let's go to our app it says login and login is not defined exactly perfect it's exactly what we need to do so let's go to our login button so we'll say const cons login is equal to basically a const uh login is equal to style dash dash huh we'll make it a uh i'm gonna say let's just say a deal for now okay a div okay okay there's locking button right there you see perfect all right all right so at this point to make this fully work what we'll do is the following so let's go ahead and do that uh but the login button will do we'll give it a border radius let's think about this where's our login button oh it has like a border so let's give it a border initially so we have border one pixel solid looks a little like this one pixel solid good let's think about this border one pixel solid beautiful all right then within that we're going to uh let's see border then let's go ahead and give it some padding so padding 8 pixels right 16 pixels so 16 pixels on the left and right hand side save that beautiful that's a little bigger bigger button which exactly what i like all right right so we stretch it out let's give it a border radius now border dash radius radius right here okay boys radius beautiful all right that's gonna be border radius off of four pixels four pixels i like that uh so much better all right we're going to go ahead and let's go ahead and do letter spacing so maybe fix the ladder spacing a little bit spacing right 1.5 pixels okay just make it a little bit bigger and let's do tax transform upper case to make sure it's all up okay text transform transform right here right there uppercase bro good all right beautiful nice nice nice nice then we is need to give it a background color so let's give it a background color a little bit more of a darker side but a transparent background color so let's try that right here voila okay so it's a little darker darker background color okay awesome next thing on the hover of this button of this div right so let's do the hover so we'll say hover right here so now hover what are we going to do well let's think about this right on the hover we're changing kind of number one to white so we're kind of flipping the black to white white to black right so let's try that right now okay hover let's change the background color background color background color it's going to be more of a whiter color so it's going to look a little bit like this awesome and then the color of the actual text is going to be now black so let's see black okay all right and then border color is gonna be transparent as well so border color border dash color will be transparent parent uh rent be transparent there we go so let's go go ahead and hover this oh let's go beautiful but we're not done yet because let's give it a small transition so we'll do a transition here transition all 0.2 seconds right here now oh let's go beautiful let's also get a cursor pointer cursor pointer nice oh look at that beautiful that's what i'm talking about now of course so we had the login now how do we make sure that this login is kind of all the way on the left slash the righthand side that's actually a good question how do we make sure we do that how do we make sure that the login is all the way on the lot on the left and the right hand side what do you guys think because if you think about this right the login is here right i hit the logo here right is there anything we can do for example with i don't know uh with the nav what should we do what do you guys think we can do well here's my thoughts on this i think we should create a login container here a container here login container right here like this here's why i can put the lock inside here no problem whatsoever right but the login container look look what i'll do is i will go ahead and actually basically give it a flex of one that's the cool part i was able to do all right that's going to create long container underneath this one so we'll say okay const login container style.div okay check out this flex 1 lakhs one right no okay i know i know don't worry don't worry about this so here's what we'll do right it stretched out the whole div that's okay so here's what we'll do now display flex flex okay you see and then we'll do what justify content check this out justify content center or flex end justify justify content what flex end boom right there you see login now shifts right to the right hand side which is exactly what we need which is right here right there see just just i'm too good i'm too good so there we go we got we got that portion right there sorry i had to have fun you know i was proud of that it was pretty cool i did on the fly you know so okay so the login button is right there okay now what needs to happen is we need to go ahead on the click of this button we need to log ourselves in right now how does that work out well this gets a little bit more tougher guys all right so let's let's try this let's go ahead and create a signin function so we'll do const sign in sign in right here is equal to a function right and this is where firebase really it plays a big role here okay on the signin function uh well we need to import off here so let's go ahead and do that so this is where really we're going to use a lot of you know what does this react find render capability type i don't need that right here all right so let's go to import import we're going to use auth so import auth auth auth comma provider provider from firebase right from what firebase right there boom okay oh not import that from the from firebase okay now when we sign in the way it works is very simple i click on something and i will call a function that will sign me in basically so to make that happen i will say here off off dot sign in with popup sign in uh i'll have to do cleanly assign it in with no with oh this is one right right there send it with popup and the popup so biscuit is going to pop up something what provider right well we said in firebase we're going to use the google provider so we'll say provider here provider beautiful and then that then so when we say and assign ourselves in and it's successful we say we get the result and what result do we get well let's take a look at what we get here back okay we get a result and we actually let's go on the console log the result for now console.log the log result okay boom save that console.log result and of course we need to make that happen when you do unclick on here so on click on click is equal to what and we'll give the function the sign in function so sign in sign in sinai function okay so let's try that now so we have that portion done let's click log in oh would you look at that how cool is that ah guys holy moly right you click login pops up a button click classic level programmer right and let's see what we get back inspect them on this one what do we get back here let's go to console uh we get an object actually here look at this and this object has a user object let me show you so you guys can see it better right there we have a user object right here right there see and the user object has a lot of stuff including some ids but the coolest thing it has is right here display name email and there's a photo one here too for the url you see so we can actually use that fully we can fully use that to grab that data let's try it okay let's try it okay let's go back to here okay let's go back to here all right we have the specific portion all right so now let's go ahead and actually set the user data so we'll do of course console.log.user so the log uh user but um a few things we need to do because of the log no user is fine this is where you set the data in the redux to set the data in the redux to set all this username and photo and stuff like that of course we need to grab this from the user slice right here right because we need to grab the what the set user login so let's grab that right now set user login let's gonna grab that go back to our head.gs let's grab that from the user slice phone right there okay okay and then let's go ahead you need to dispatch it as well so let's go ahead and dispatch it too so that means me to import this patch that means we need to import use right here use dispatch use dispatch comma with use selector as well i want to use the dispatch so const dispatch is equal to what use dispatch use dispatch okay use this patch and then after that once we've once we imported this patch let's actually dispatch it so here we'll do dispatch right there right dispatch what well what we dispatch the set user login set what user login with what data was data right so we need dispatch so you should log in with some data about what did it be going to actually give it well that's going to be up to us to figure it out right let's do that right now we have name is equal to what let's do this right here say let user is equal to result.user right remember we got that from where from here you see right there right there so user resulta user is this right here specifically boom okay so now we do set user login okay and we say it's going to be name is equal to user dot display name boom again coming directly from the data here display name right here you see next up email okay user.what user dot email okay next up is gonna be photo so photo okay user that what photo url which is coming directly from where from here right there for the url right there so you see there's a reason for everything that we're doing okay boom so now if i sign in if i click sign in again technically i should have the nav menu appear in here technically okay let's go ahead and try that out so let's go ahead and see sign in all right so i should really kind of like what's going to happen is it's still going to dispatch the user login that's going to save it inside the global state once it saves the global state that means this will be right here updated automatically and once this is updated you see this becomes what not truthy but falsely and so it's going to show us a nav menu that is it let's go and try this out okay all right let's go and quickly log in boom qazi oh did you guys pay attention to that did you guys pay attention this look it just showed up oh let's go it's so good give me a round of applause everybody anybody am i just applausing for myself that's fine too that's fine too yeah there you go right so we got that portion working that's so good makes me really happy and honestly that is it that is it okay and once we have this let's go ahead and focus on the sign up feature so we need to be able to sign out as well right and the signup happens when i click on what when i click on this right here when i click on this i should technically sign out all right let's go ahead and do that okay so create a sign off function so we have consign in const sign out out is equal to right here right there it's always equals to a function all right and what's going to happen here is of course we'll remove we'll sign the user out and to do that we'll do auth ah dot sign out like so right and once that's successful we say that then function will dispatch a functionality will dispatch and it will dispatch what well user slice dispatch set sign out right that's the functionality you need to use that means we need to import it set sign out okay save that beautiful all right that's all good that sign out so this patch set sign out functionality and honestly that is it my friends and one small thing we can do is once you sign out all we have to do at this point is just simply redirect you back to the login page so let's try that right now now to do that we need to use something called history so we'll use here import import use history look use history this is part of react react router dom history from react dash router dom and the way you use this like this right i'm going to say cons history history is equal to use history history beautiful and all i do at this point is i say this history.push so basically after all is said and done i just do a history.push i had to say my friends let me see where is there was a reservoir where is it right there here i do history history that push basically and i push to the the login page so we'll say login that's it login page so if i sign out now we need to of course need to go ahead and click on sign now so let's go ahead and do on click on the user image so on the click of the user image we'll sign out the user so on click right there we're going to sign out the user and that is it i'm gonna click lose your image all right save this so we have sign in sign out that's all good okay let's try this now you guys ready for this are you guys ready for this all right boom something can run applause yay yay i'm pausing myself again dang it okay so log in all right kha'zix level programmer all right beautiful that's exactly what we just got right so okay now of course we we logged in now and what we can do is after you sign in right we can also after you sign in we can also dispatch you to a different page so let's go and do this so we'll say uh history.push now push what that push to where to the home page right that's it there we go so if i let's go ahead and sign out again okay i did that that's fine right let's do history that push to the home page which is this one log in causey clever programmer boom oh look at that you guys uh it's so awesome so look at that and then i click sign out again oh my god that's too good and then hey let's go so there is one issue here however and it's the fact that for example you see if i refresh this basically the user is gone that's that's the issue here and we can actually kind of fix that by by setting the user whenever we kind of like um on the header so the way to fix that is very simple and again the reason why this happens because the state is gone the state is gone once i refresh the page the state is gone that's it sayonara bye bye baby that's it we're done right so to fix it we're going to use off on state changed right and we're going to use use effect with this one too so look at this we'll say use effect use effect right here i'm going to say auth off on state changed so we'll say use effect use effect right there okay okay we'll say basically on the change of let me see when you first log into the page right here when you first log in we'll do the following we'll do off auth dot on odd state changed okay async we're gonna grab the user and basically it's gonna be really simple right all that happens here is the user exists right there right because here's the thing um firebase remembers the user in cookies in a cookie and so that's where we get this right here right it remembers the user in the cookie and so we say if user user then we do what then we do again we do dispatch like the site user login again dispatch site user login again and then we do history.push dot push dot push home page down there we go uh oh this is more important right there boom that's it there you go so you see let's think about it if i refresh now you see you see the user is actually being set right there you see when i refresh this over here the user is being set if i sign out i sign out i send it back again classical programmer let's go let's go here oh look at that guys that my friends is pretty much it we have finished with mo well all the functionality we wanted to get done in disney plus clone you can my friends you can sign out you can sign in anything you can do pretty much so sign out log in right kazia clever programmer beautiful right there click on individual movie watch the movie go back oh god let's go yay that's what i'm talking about we have one last thing to do that we're going to try right now is we're going to try and deploy it actually as well i think it's actually deployed it's deployed on our side if you want to go ahead and deploy it on your site if you want to try it out because anarchy has actually deployed already so um if you want to deploy it it's not that hard if you want to deploy it just go ahead and let me see let me show it to you on your side deploy it right do firebase deploy deploy deploy right with react right here right find that right here there's a really simple explanation how to deploy a firebase application right you do firebase login firebase in init do hosting that's all you got to do right from that point on all you have to do is when it says where is it was there is a default firebase project for this directory you select your project you created after that you do firebase deploy and honestly that's pretty pretty much it all right that's all you got to do uh so yeah that's how you deploy a bar than that guys that's it we are done we have our app fully built let's go ahead and log in yet again here kaiser cloud programmer so who's still with me who actually was able to kind of finish it with you was anybody able to finish the part partially with me anybody here anybody no anybody or you could oh giuliana you did let's go juliana beautiful beautiful beautiful beautiful so guys those who are on youtube let me go and bring you guys up on youtube i see all so many comments it's insane so many comments awesome thank you so much for the amazing amazing support i see all you guys on youtube right now holy moly we got a great crowd there great crowd there hello hello hello hello thank you so much guys that is it from us a very important let you want to let you guys know okay uh we went ahead and we just opened up cart for profit with javascript okay we just opened the card and we've actually lowered the price just for today okay just for today for profit javascript so if you're interested in joining okay we have a onetime deal literally happening right now and the price goes up in a little bit okay if you're interested we have a link down in the description we went ahead and we just opened it up link down the description if you're interested go ahead and join is this is for people who want to become serious this is where people who want to become developers if anybody you want any one of you here who want to become a reaction gs developer if you want to be a javascript developer if you want to be a full stack developer right this is the program that we have here with over 2 000 students we have students who are basically for example jen she got a job making 96 000 000 dollars at her new job we have for example rishi got a react gs developer job making 55k right after joining our program we have for example frank he got a react js contract for a hundred and fifty thousand dollars we have for example uh kelvin i got a reactions job making 60k right in one year or so so the list goes on and on and on and on and for those of you who are interested yes you on youtube if you're interested we have the link down below it is very very just for right now the price goes up very very soon okay so i highly recommend you join in while you can because the price almost never goes down to this price point never and i say it because we value our product so much and we love to give the community the way it is so if you're interested go ahead and join below link is down in the description below okay guys other than that that is pretty much from me on youtube uh let me see do i hear the link description i think i have the link description i'm not gonna get deadly description thank you awesome guys that is it for me guys other than that hope you guys have an amazing day hopefully you were able to follow along with me hopefully you're able to follow along me out of that that's it i'll see you guys in the next video this is fun this is a lot of fun oh it's so good oh my god it's all good mmm so good tacos are so the best i'm i'm so hungry oh yeah
