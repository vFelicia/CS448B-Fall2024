With timestamps:

00:00 - hey guys what is up this is Kazi from
00:02 - clever programmer and you're watching
00:05 - code Khadem e part 5 okay so let's get
00:10 - started we left off at functions that's
00:14 - where we're gonna pick up from we just
00:16 - got done completing pig latin i got some
00:20 - coffee with me
00:20 - hopefully you have coffee with you as
00:23 - well or you've already had some food in
00:25 - you and you're ready to you know pound
00:28 - through this okay let's get going what
00:33 - good are functions right water basically
00:36 - functions used for and that's gonna be
00:39 - the thing that we're going to figure out
00:41 - in this section so they've already
00:46 - written up some code here but we're
00:48 - gonna hit save and submit and we're
00:50 - going to continue and figure out on our
00:53 - own why we use functions cool so let's
00:56 - get started okay so here i can tell you
01:02 - a little bit about what's going on okay
01:03 - so they have a function called tags and
01:05 - it does these things here it takes bill
01:11 - it multiplies it by 1.08 it prints out
01:15 - this stuff and then returns bill at the
01:19 - end it's also dependent on one input so
01:24 - here you can see it's dependent on an
01:26 - input bill and this other function so
01:30 - this function is called tax this
01:31 - function is called tip and then once
01:33 - we're finished defining these functions
01:35 - we later call them over here so you call
01:38 - this function tax right here you pass in
01:41 - one input meal cost so it goes to this
01:44 - function tax bill becomes meal cost and
01:49 - everywhere you see bill it's effectively
01:52 - meal cost and it does the math
01:55 - accordingly okay so we're going to
01:57 - explore this in more depth that was just
01:59 - a very very very ruffled review
02:04 - so in some simple way how I like to
02:06 - think about functions is let's say you
02:08 - want it to store a variable right you
02:11 - want it to store a bunch of numbers and
02:13 - save it as a variable what you would do
02:15 - is instead of always right I've
02:18 - explained this before writing this big
02:21 - number out what we can do is we can call
02:23 - it some variable and now we can just
02:27 - refer to V or that big number as V well
02:33 - what if you wrote a block of code right
02:37 - and you wanted to use that block of code
02:38 - over and over again
02:40 - you can't call it V and say print v um
02:46 - sit print seven plus eight and I don't
02:53 - know print hello right now you can't
02:57 - just go at the bottom and say print V
02:59 - and it's gonna output you know five what
03:03 - is 7 plus 8 15 and then hello you know
03:08 - you might think this is what it's going
03:10 - to output on that black screen to your
03:12 - right but that's not actually what's
03:14 - going to happen what's going to happen
03:15 - is it's going to give you an error
03:16 - because it's going to say you can't
03:18 - assign a block of code to one variable
03:21 - but if you were to do something like
03:25 - this right you said define V and it's
03:29 - not dependent on any inputs now if you
03:34 - actually did print V like this this is
03:39 - going to happen it's going to print out
03:41 - v and it's going to print out 15 and
03:42 - then it's going to print out hello
03:43 - okay so functions give us a way to name
03:48 - blocks of codes and there's much more
03:50 - that goes into functions but this is a
03:52 - very simple way to look at it okay all
03:56 - right now let's look at a little bit of
03:58 - their explanation function junction
04:00 - header parameters and comments and then
04:05 - okay so hetero parameters body cool all
04:10 - right let's see what they're talking
04:12 - about
04:13 - so we they want us to create a function
04:16 - call
04:17 - all spam and what it should do is print
04:19 - out eggs so let's do that I'm going to
04:21 - define spam and I'm going to say print
04:27 - eggs boom oh they want us to write a
04:34 - comment or a docstring here is what they
04:39 - call it prints eggs to the screen cool
04:51 - all right let's run it boom done okay so
04:55 - I'm going to be trying to get through
04:57 - this a little bit faster because the
05:01 - videos end up getting very long and this
05:04 - course is way longer than I expected
05:07 - when I initially took on the challenge
05:08 - to complete code Academy as fast as I
05:13 - could
05:15 - okay call-and-response so we named a
05:19 - function and then we call it okay that's
05:22 - really what we do with the function here
05:25 - we have a function called square it
05:28 - takes in an input n then we define a
05:32 - variable called squared it squares that
05:35 - input that we gave so it goes N squared
05:38 - these two asterisks mean this in math
05:41 - okay so it squares the number and then
05:44 - it does some string formatting here so
05:47 - and this percent D gets replaced by
05:50 - whatever this n was this percent D gets
05:52 - replaced by whatever squared was and
05:55 - then after we're done printing it out we
05:57 - return what the value squared was okay
06:02 - we've set up a function square call it
06:05 - on the number 10 by putting 10 between
06:08 - the parentheses so we're going to call
06:10 - it on the number 10 so here's how we're
06:12 - going to do it if we did Square and we
06:14 - ran it it's going to give you an error
06:16 - because it's going to go back up to the
06:18 - function and it's going to go okay
06:21 - square of n then it's going to go to
06:24 - line 3 and it's going to say wait you
06:26 - never gave us an an N so it's not
06:29 - getting able to square anything
06:30 - but now if I give it a 10 that's going
06:32 - to go in here it's going to be like 10
06:33 - squared beautiful and then it's going to
06:36 - say right here is 10 squared is 100
06:43 - right because that's the calculation
06:44 - over here squared and then it's going to
06:47 - return 100 okay
06:50 - return is one of those things that is
06:52 - sometimes a little confusing but I will
06:56 - show the difference between printing
06:58 - something back and returning something
07:01 - back right now to you guys ok I'm going
07:05 - to do that right away okay so let's say
07:08 - I define some function Bob or let's make
07:14 - it define some okay
07:18 - and effectively sum of a and B all right
07:21 - so some takes in two inputs a and B and
07:25 - it just adds them so I'm just going to
07:27 - do return a plus B when I use some I
07:31 - just do this and I get back whatever
07:33 - values right so this is 1 plus 5 you get
07:38 - 6 1 plus 7 you get 8 2 plus 7 9 how this
07:42 - works is you call some with inputs 1 and
07:44 - 5 it goes in here it makes a 1 it makes
07:47 - B 5 and it goes a plus B and that's how
07:52 - you get 6 8 and 9 right here okay we
07:54 - have we wanted to do was what's the
07:56 - difference between return and print well
07:58 - here I can do V is equal to sum of 1
08:02 - comma 5 and now V will be what what do
08:06 - you think V will be 6 okay but let's go
08:12 - back to our function we defined it and
08:14 - let's define it as print a plus B like
08:19 - this print a plus me instead of return
08:22 - right now if I do sum of 1 5 you still
08:25 - get the same looking answers if I do sum
08:27 - of 1 7 you still get 8 everything looks
08:30 - nice but if I do V is equal to sum of
08:34 - 1 comma 5 watch what happens if I do V
08:41 - now V doesn't have a value ok V it says
08:48 - is just V alright V is basically nothing
08:52 - so print just output something to the
08:56 - screen so this just output something to
08:59 - the screen whereas return actually
09:02 - returns a value that you can do
09:03 - something with right if it's a return
09:06 - you can also do something like plus 5 so
09:10 - this part will evaluate to 6 and then
09:13 - plus 5 will make it evaluate to 11
09:15 - whereas if you do it with with just a V
09:22 - and you say print it's this part is
09:27 - going to evaluate to pretty much nothing
09:29 - it's going to print out 6 to the screen
09:31 - and then this 5 is going to try to get
09:33 - added to a whole bunch of nothing okay
09:36 - so print is not going to help you there
09:39 - so that's a little difference between
09:41 - return and print cool let's keep going
09:47 - all right parameters and arguments so we
09:53 - are now learning about parameters I gave
09:55 - you guys a little sneak peek into
09:56 - parameters let's see what they want us
09:58 - to do replace this with parameters bass
10:02 - whoops and exponent a result is equal to
10:08 - base to the power of exponential here
10:32 - returns whatever you give it plus one
10:34 - deserves another takes an N adds two to
10:38 - it okay very simple now they're showing
10:42 - us how functions can call functions okay
10:45 - so let's take a look at there
10:48 - example so you can see fun too is
10:53 - calling function one with the input M
10:57 - and then adding seven to it so this
11:00 - function calls function M function one
11:03 - it goes right here it does n times five
11:06 - so it'll take this number multiply it by
11:09 - five return it and then add seven to it
11:12 - okay so if we put in five right here
11:14 - into function - it's going to go to
11:17 - function one is going to go five times
11:20 - five is going to get 25 twenty pot five
11:23 - plus seven that's going to give you 32
11:27 - okay so that's how that works so let's
11:35 - look at the functions editor one good
11:36 - turn which adds one which adds to change
11:39 - the body of deserves another so that it
11:41 - always adds two to the output of one
11:43 - good turn okay
11:50 - so add two to the output of one good
11:56 - turn boom simple practice makes perfect
11:59 - let's create a few more functions for
12:01 - good measure the example above is just
12:04 - to show you blah blah blah
12:06 - here is the example alright
12:09 - it defines of a function called shout
12:12 - and you should use like you should
12:15 - verbally say these things out loud
12:17 - because of terminology is very important
12:20 - to learn okay don't just say oh yeah
12:22 - it's the de f thing or the DEF thing
12:24 - right understand the de F stands for
12:27 - define shout is the name of the function
12:31 - phrase is a parameter okay the reason
12:34 - why I'm saying be so specific with your
12:36 - terminology and learn it really well is
12:38 - so later on you're going to see it in
12:41 - books people are going to refer to it
12:43 - like that and then when you have to
12:45 - search it up that's how you're gonna
12:47 - have to search it up right so know me so
12:49 - ghetto about it and lazy and just call
12:52 - it Oh a thingy majiggy are in the
12:54 - parentheses right that's going to throw
12:56 - you off try to actually learn what
12:59 - they're called
13:00 - and use it cool so you know pretty much
13:04 - define this to yourself
13:05 - use the correct terminology but I'm just
13:07 - going to do that for you guys right here
13:09 - so define a function call shout which
13:12 - takes in one parameter phrase if phrase
13:15 - is equal to the uppercase of phrase then
13:21 - return your shouting
13:22 - so if basically you write something in
13:24 - all caps it's going to say hey you're
13:27 - shouting otherwise it will say can you
13:29 - speak up and how you can use that
13:34 - function is here I'm interested in
13:36 - shouting so if you call that function
13:38 - shout by passing in the parameter which
13:42 - is I'm interested in shouting it's going
13:44 - to go to the definition of the function
13:45 - and it's going to go I'm interested in
13:47 - shouting is equal equal to I'm
13:50 - interested in shouting that upper that's
13:53 - going to evaluate to true and it's going
13:55 - to say hey you are shouting okay so if I
13:58 - took this whole thing and put it here
14:02 - you're going to see it's going to return
14:04 - you are shouting okay and that's the
14:06 - decision process that one goes through
14:09 - okay first define a function called cube
14:12 - so define cube which takes an argument
14:15 - call number
14:17 - don't forget the parentheses in the
14:19 - colon how I think of colon and then
14:21 - hitting enter after is that it's like
14:24 - then so I'm defining a function and then
14:27 - here's the block of code that comes next
14:29 - okay so : enter make the function return
14:33 - cube of the initial number so we're
14:35 - going to say cube reserge define a
14:39 - second function define a second function
14:43 - called by three that takes an argument
14:46 - called
14:47 - number if that number is number is
14:53 - divisible by three um that should call
14:59 - cube of that number and return its
15:05 - result otherwise by three should return
15:10 - false
15:12 - okay so let me take you through you guys
15:16 - to the logic of how I wrote this block
15:18 - of code right here okay so how did I
15:23 - figure out how to do if a number is
15:25 - divisible by three right how did I do
15:27 - this thing over here what does that mean
15:29 - let me show you if I did nine modulo 3 I
15:35 - get a remainder of zero that means 3
15:39 - goes perfectly into 9 right if I did 10
15:41 - modulo 3 I'll get a remainder of 1 3
15:44 - goes to 3 it goes to 6 it goes to 9 and
15:47 - then it's like ah but I can't go into 10
15:50 - so I have 1 left over
15:53 - that is called the remainder in math
15:56 - hopefully you've learned about it and if
16:00 - you did it with if you'd try to put 3
16:04 - into something you know that number is
16:06 - divisible by then you'll have a
16:09 - remainder of 0 right like 9 modulo 3 you
16:12 - get a remainder of 0
16:13 - so if you can see that the remainder is
16:17 - equal to 0 and you get a true that means
16:20 - that number is divisible by 3 that's how
16:22 - I got that line right so whatever I put
16:25 - it right if I put an 11 modulo 3 is 11
16:30 - divisible by 3
16:31 - no it's not right you get a remainder of
16:33 - 1 and so it returns false that's where I
16:36 - got that modulo 3 equal equals 0 so if
16:40 - it's divisible by 3 cube it otherwise
16:43 - return false all right um I didn't have
16:47 - to say else but I can I'll just say it
16:54 - just to be you know go along with what
16:59 - they're teaching but you don't have to
17:02 - actually say it importing modules
17:06 - importing modules is so fun you guys
17:09 - importing modules is amazing it's the
17:13 - concept of using somebody else's code
17:15 - that they have taken hundreds of
17:17 - hundreds of years and hours of time to
17:20 - write and you just use this command
17:23 - called
17:24 - part and all of a sudden you have a
17:26 - power of thousands of professional
17:29 - software developers who spent countless
17:31 - nights eating um you know what are they
17:36 - ramen noodles and writing this code for
17:38 - you and you got to use it by just using
17:41 - this extremely powerful command called
17:43 - import okay so learn about import this
17:47 - is going to be an important section
17:49 - effectively what this says is you just
17:52 - trying to use other people's code you
17:54 - don't want to reinvent the wheel every
17:56 - time if there's already some kind of
17:57 - mathematical crazy formula that does
18:00 - something you don't need to reinvent it
18:02 - that's partially the reason why you
18:04 - don't have to know all the math in the
18:06 - world to be a good programmer to be an
18:08 - effective programmer because somebody
18:10 - out there has already done the math you
18:12 - just need to steal it or use their code
18:15 - right don't plagiarize but try to use
18:17 - your code what did I say great
18:19 - programmers copy code or good
18:22 - programmers copy code great programmers
18:24 - steal code ok I'm not advertising for
18:30 - actually plagiarizing code but what I
18:33 - just mean is importing code and using
18:35 - libraries intelligently ok so they're
18:38 - giving an example of a square root ok so
18:40 - if you did the square root of 25 you're
18:43 - not going to get an answer back you're
18:45 - going to get an error what you have to
18:46 - do for that is import a module that uses
18:50 - a function square root okay square root
18:55 - right again let's go back to the
18:57 - terminology sq RT that's a function and
19:00 - it takes in as input one number so we
19:04 - gave it 25 so it takes in as input some
19:09 - number n but we can't use s to RT
19:12 - because we never defined it anywhere
19:14 - right we didn't do this stuff with DF s
19:18 - QRT it takes in some number and then you
19:22 - know return
19:24 - blah blah blah blah blah whatever right
19:27 - we never define this qrt so if we type
19:30 - this in now we're going to get an error
19:34 - so I'm going to do what they're telling
19:36 - me to do cs2 RT is not defined so now
19:42 - they're telling you how you can actually
19:44 - use import so we're going to say import
19:47 - math and here we're going to do math dot
19:51 - s QRT so this tells python not only to
19:58 - import math but to get the sq RT
20:00 - function from within meth
20:01 - so we're importing a library a giant
20:05 - library of functions which is called
20:08 - math and within that library we want to
20:12 - get the function s qrt that somebody has
20:15 - written and that's how we get it and
20:16 - then we just pass in 25 to it so the
20:19 - function is called s qrt we are passing
20:22 - 25 to it and the dot notation here is
20:26 - really telling us the path to that file
20:28 - ok so if I hit save and submit you can
20:31 - see that I get back 5 which is indeed
20:34 - the square root of 25 another way to get
20:36 - a square root without using this is just
20:39 - do something to the power of 1/2 okay
20:43 - that's another way it's a pretty cool
20:46 - way to get a square root of something
20:48 - all right start next lesson function
20:52 - imports so from module import blah so we
20:56 - could have said from math import sq RT
20:59 - and then just done sqr t 25 ok that's an
21:03 - example of a function import and that's
21:05 - exactly what they're telling us to do
21:07 - boom nailed it universal import this is
21:12 - saying import everything as a function
21:15 - so we can say from math import every
21:18 - single function and now we never have to
21:20 - say math dot strt or whatever we can
21:23 - just ask your T and we don't have to say
21:25 - math that tangent we can say tangent
21:28 - like this tangent of 9
21:30 - right I forgot what that is it's been a
21:32 - while since I took trig let's give this
21:37 - bad boy a try and pretty good okay here
21:42 - be dragons so basically be careful when
21:45 - you're doing this stuff this is an
21:47 - advanced concept and okay we should
21:51 - mention it but I don't want you guys to
21:52 - worry about it it's just a waste of your
21:54 - time if you're actually starting out so
21:57 - there's basically saying import it's
21:59 - better best to stick with either import
22:01 - module and type module name or just
22:04 - import specific variables and functions
22:06 - so effectively what they're saying is
22:08 - avoid this thing with the asterisk okay
22:16 - avoid it at all costs and why they're
22:18 - saying that is imagine you created your
22:21 - function called sq RT or let's say you
22:26 - created your function tan and maybe it
22:29 - was for you know I don't know
22:32 - tandem it was short for tandem there's a
22:34 - something called tandem chess so it was
22:37 - really for tandem and you know you said
22:42 - define tan and it prints out you know
22:46 - you are playing tandem chess right but
22:52 - now if you did from math import asterisk
22:55 - or whatever and you used ten of them you
23:00 - know ninety like you're going to start
23:02 - getting some errors it's going to be
23:03 - like hey do you want to use this
23:05 - function 10 that you define or you want
23:07 - to use the function 10 from the math
23:09 - module so it's just better to say maybe
23:13 - import math so now if you want to use
23:17 - your own 10 you can just say 10 or if
23:20 - you want to use the math 10 you can say
23:22 - math 10 which tells it that it has
23:26 - nothing to do with you know this tan
23:29 - over here okay hopefully that makes
23:31 - sense let's continue going forward
23:36 - ok biggest number smallest number
23:39 - distance from 0 beyond strings now that
23:42 - you understand
23:43 - it functions aren't how to import
23:44 - modules let's look at some functions
23:46 - that are built into Python no modules
23:49 - required so a lot of stuff comes
23:51 - built-in right like that up or down
23:54 - lower STR Len right a lot of those just
23:58 - come built-in these are great for doing
24:02 - work with strings but what about
24:03 - something a little bit more analytic so
24:09 - if we're trying to do something with
24:10 - math right like we're trying to find the
24:12 - biggest number out of all of these
24:14 - numbers so if I gave you a giant list of
24:17 - numbers how do you find the biggest
24:19 - number now sometimes people will look at
24:22 - it and be like these are just for
24:23 - numbers but think about it sometimes you
24:26 - could be maybe you could work as a data
24:28 - scientist and you could be dealing with
24:30 - a file with a couple of gigabytes and
24:32 - you have 10 million numbers right
24:36 - you can't visually scan and pick the
24:38 - best number and maybe a lot of
24:41 - software's are going to fail even Excel
24:44 - a lot of the times will fail with file
24:46 - size is so big so maybe you have to use
24:49 - something with Python and Python is
24:51 - gaining a tremendous amount of
24:53 - popularity and you might have to use a
24:57 - function from Python and so how are you
24:59 - going to use that to get the you know
25:03 - the biggest number from that or the
25:06 - smallest number or how far something is
25:08 - from zero so distance from zero right in
25:11 - math it's known as the absolute value
25:15 - okay cool so you can see the math
25:18 - library has all these functions a cosine
25:26 - ache cosh a sign you know all of the
25:31 - ceiling cosine degrees e factorial floor
25:36 - like these are all part of math so you
25:38 - could do math sq RT math that powa TN so
25:43 - on and so forth so here they're using
25:47 - defining your own functions to figure
25:49 - out things and you can see how you
25:52 - figure out the max number is just do
25:55 - acts of that okay so you just call the
25:57 - max function pretty simple so now
26:02 - they're going to take you step by step
26:03 - all right
26:05 - try out the max function on line three
26:07 - you can provide any number of integers
26:09 - or float arguments so if I gave max you
26:12 - know five comma 10 comma negative 15
26:15 - comma 20 comma negative seven what max
26:19 - does this function max right here is
26:22 - going to figure out which one the max is
26:23 - so you can see it's 20 and then it's
26:26 - going to print 20 okay this whole thing
26:30 - is going to turn to 20 that's what's
26:33 - going to happen it's not going to keep
26:34 - that tuple there anymore that thing in
26:37 - parentheses with a bunch of numbers
26:39 - right it's going to pick 20 the whole
26:43 - thing is going to convert to 20 and then
26:48 - it's going to print 20 okay all right
26:51 - minimum same deal right is going to pick
26:56 - negative 5 the whole thing is going to
26:58 - turn to negative 5 and then we're going
27:00 - to move on boom done absolutely we're
27:04 - going to use the ABS function and it's
27:07 - the same way right it just tells you how
27:10 - far something is from zero so if I did
27:12 - negative 100 is going to give me back
27:14 - 100 or they want us to use a specific
27:18 - value like negative 42 cool now they are
27:23 - telling you about this function called
27:25 - type which tells you to type the data
27:27 - type of something right so if I did type
27:30 - 1.4 it's going to tell me its type float
27:33 - if I did type of one it's going to tell
27:36 - me it's n and you should know these now
27:38 - it's an integer if I did hello this is
27:43 - and or not an N this is a this is the
27:48 - string cool okay so you can see there
27:54 - are examples integer float and spam int
27:57 - float and then string over here right
28:00 - string
28:02 - okay so have Python print out the type
28:06 - of an int float string value I'm just
28:09 - gonna save myself some time and copy
28:11 - those done review yes okay let's review
28:19 - functions so we define a function again
28:23 - try to speak this to yourself then hear
28:26 - me do it define a function call speak
28:30 - which takes in as a parameter or as an
28:33 - input a variable name message and it
28:38 - just returns message so it really
28:40 - doesn't do much it just returns message
28:43 - okay
28:44 - it just takes it and returns it doesn't
28:46 - really do anything and then this part is
28:49 - outside of the function so if you're
28:52 - happy you call the function speak and
28:56 - pass in I'm happy it goes to here and it
28:59 - just returns I'm happy if you're sad you
29:03 - used go to the function speak and return
29:05 - I'm sad otherwise call the function
29:08 - speak and go I don't know what I'm
29:10 - feeling okay so here a bunch of strong
29:13 - instructions and they want you to create
29:16 - your own function so let's get started
29:18 - define function and it's called shut
29:21 - down that takes in one argument s don't
29:25 - forget to put the parentheses or the
29:27 - colon
29:27 - then if shut down function receives and
29:32 - s equal to yes it should return shutting
29:39 - down make sure to put the capital S
29:42 - there otherwise you're going to get it
29:43 - wrong otherwise else if s is equal to no
29:53 - and there's a difference between one
29:55 - equal sign and two equal signs one equal
29:57 - sign is an assignment operator
29:59 - two equal signs is a comparator operator
30:03 - it compares two objects this equal sign
30:06 - will try to make a sequel to know this
30:09 - two equal signs checks if s is no okay
30:13 - big difference there
30:14 - then the function should return shut
30:19 - down boarded else I'm sending in the
30:25 - other than those inputs of function
30:27 - should return sorry okay fairly simple
30:31 - dawn next lesson modules review modules
30:35 - now let's see what you remember about
30:37 - importing modules import the module math
30:39 - and whatever wave so from math import sq
30:43 - RT s q RT function on the number three
30:47 - six eight nine I like to do it this way
30:50 - sometimes one three six eight nine
30:55 - crisis with it oh I didn't print it cool
31:01 - done review built-in functions perfect
31:05 - last but not least let's review some
31:07 - built-in functions so define a function
31:10 - called distance from zero with one
31:16 - argument let's call it number if the
31:20 - type of the argument so if type of the
31:23 - argument is equal equal to an ant or
31:31 - that type is equal equal to a float
31:36 - right the function let's do that um
31:46 - actually let's check something so let's
31:48 - do type of five equal equal to an int
31:53 - that gives you a true okay now so I was
31:56 - right
31:56 - string it right the function should
32:00 - return the absolute value of the
32:03 - function input done if right forgot to
32:11 - put the if there otherwise the function
32:12 - should return
32:15 - nope done bones okay
32:21 - so that was pretty great we didn't call
32:24 - that function so practice calling that
32:27 - function okay
32:28 - don't just leave that function they
32:30 - actually call it and I think that was
32:34 - pretty excellent I'm going to cut the
32:36 - video off here because it's already long
32:38 - enough and we just finished this entire
32:40 - section so I will see you guys in the
32:43 - next video in code Khadem e part six
32:46 - this is clever programmer
32:48 - over and out see you guys in the next
32:50 - video bye

Cleaned transcript:

hey guys what is up this is Kazi from clever programmer and you're watching code Khadem e part 5 okay so let's get started we left off at functions that's where we're gonna pick up from we just got done completing pig latin i got some coffee with me hopefully you have coffee with you as well or you've already had some food in you and you're ready to you know pound through this okay let's get going what good are functions right water basically functions used for and that's gonna be the thing that we're going to figure out in this section so they've already written up some code here but we're gonna hit save and submit and we're going to continue and figure out on our own why we use functions cool so let's get started okay so here i can tell you a little bit about what's going on okay so they have a function called tags and it does these things here it takes bill it multiplies it by 1.08 it prints out this stuff and then returns bill at the end it's also dependent on one input so here you can see it's dependent on an input bill and this other function so this function is called tax this function is called tip and then once we're finished defining these functions we later call them over here so you call this function tax right here you pass in one input meal cost so it goes to this function tax bill becomes meal cost and everywhere you see bill it's effectively meal cost and it does the math accordingly okay so we're going to explore this in more depth that was just a very very very ruffled review so in some simple way how I like to think about functions is let's say you want it to store a variable right you want it to store a bunch of numbers and save it as a variable what you would do is instead of always right I've explained this before writing this big number out what we can do is we can call it some variable and now we can just refer to V or that big number as V well what if you wrote a block of code right and you wanted to use that block of code over and over again you can't call it V and say print v um sit print seven plus eight and I don't know print hello right now you can't just go at the bottom and say print V and it's gonna output you know five what is 7 plus 8 15 and then hello you know you might think this is what it's going to output on that black screen to your right but that's not actually what's going to happen what's going to happen is it's going to give you an error because it's going to say you can't assign a block of code to one variable but if you were to do something like this right you said define V and it's not dependent on any inputs now if you actually did print V like this this is going to happen it's going to print out v and it's going to print out 15 and then it's going to print out hello okay so functions give us a way to name blocks of codes and there's much more that goes into functions but this is a very simple way to look at it okay all right now let's look at a little bit of their explanation function junction header parameters and comments and then okay so hetero parameters body cool all right let's see what they're talking about so we they want us to create a function call all spam and what it should do is print out eggs so let's do that I'm going to define spam and I'm going to say print eggs boom oh they want us to write a comment or a docstring here is what they call it prints eggs to the screen cool all right let's run it boom done okay so I'm going to be trying to get through this a little bit faster because the videos end up getting very long and this course is way longer than I expected when I initially took on the challenge to complete code Academy as fast as I could okay callandresponse so we named a function and then we call it okay that's really what we do with the function here we have a function called square it takes in an input n then we define a variable called squared it squares that input that we gave so it goes N squared these two asterisks mean this in math okay so it squares the number and then it does some string formatting here so and this percent D gets replaced by whatever this n was this percent D gets replaced by whatever squared was and then after we're done printing it out we return what the value squared was okay we've set up a function square call it on the number 10 by putting 10 between the parentheses so we're going to call it on the number 10 so here's how we're going to do it if we did Square and we ran it it's going to give you an error because it's going to go back up to the function and it's going to go okay square of n then it's going to go to line 3 and it's going to say wait you never gave us an an N so it's not getting able to square anything but now if I give it a 10 that's going to go in here it's going to be like 10 squared beautiful and then it's going to say right here is 10 squared is 100 right because that's the calculation over here squared and then it's going to return 100 okay return is one of those things that is sometimes a little confusing but I will show the difference between printing something back and returning something back right now to you guys ok I'm going to do that right away okay so let's say I define some function Bob or let's make it define some okay and effectively sum of a and B all right so some takes in two inputs a and B and it just adds them so I'm just going to do return a plus B when I use some I just do this and I get back whatever values right so this is 1 plus 5 you get 6 1 plus 7 you get 8 2 plus 7 9 how this works is you call some with inputs 1 and 5 it goes in here it makes a 1 it makes B 5 and it goes a plus B and that's how you get 6 8 and 9 right here okay we have we wanted to do was what's the difference between return and print well here I can do V is equal to sum of 1 comma 5 and now V will be what what do you think V will be 6 okay but let's go back to our function we defined it and let's define it as print a plus B like this print a plus me instead of return right now if I do sum of 1 5 you still get the same looking answers if I do sum of 1 7 you still get 8 everything looks nice but if I do V is equal to sum of 1 comma 5 watch what happens if I do V now V doesn't have a value ok V it says is just V alright V is basically nothing so print just output something to the screen so this just output something to the screen whereas return actually returns a value that you can do something with right if it's a return you can also do something like plus 5 so this part will evaluate to 6 and then plus 5 will make it evaluate to 11 whereas if you do it with with just a V and you say print it's this part is going to evaluate to pretty much nothing it's going to print out 6 to the screen and then this 5 is going to try to get added to a whole bunch of nothing okay so print is not going to help you there so that's a little difference between return and print cool let's keep going all right parameters and arguments so we are now learning about parameters I gave you guys a little sneak peek into parameters let's see what they want us to do replace this with parameters bass whoops and exponent a result is equal to base to the power of exponential here returns whatever you give it plus one deserves another takes an N adds two to it okay very simple now they're showing us how functions can call functions okay so let's take a look at there example so you can see fun too is calling function one with the input M and then adding seven to it so this function calls function M function one it goes right here it does n times five so it'll take this number multiply it by five return it and then add seven to it okay so if we put in five right here into function it's going to go to function one is going to go five times five is going to get 25 twenty pot five plus seven that's going to give you 32 okay so that's how that works so let's look at the functions editor one good turn which adds one which adds to change the body of deserves another so that it always adds two to the output of one good turn okay so add two to the output of one good turn boom simple practice makes perfect let's create a few more functions for good measure the example above is just to show you blah blah blah here is the example alright it defines of a function called shout and you should use like you should verbally say these things out loud because of terminology is very important to learn okay don't just say oh yeah it's the de f thing or the DEF thing right understand the de F stands for define shout is the name of the function phrase is a parameter okay the reason why I'm saying be so specific with your terminology and learn it really well is so later on you're going to see it in books people are going to refer to it like that and then when you have to search it up that's how you're gonna have to search it up right so know me so ghetto about it and lazy and just call it Oh a thingy majiggy are in the parentheses right that's going to throw you off try to actually learn what they're called and use it cool so you know pretty much define this to yourself use the correct terminology but I'm just going to do that for you guys right here so define a function call shout which takes in one parameter phrase if phrase is equal to the uppercase of phrase then return your shouting so if basically you write something in all caps it's going to say hey you're shouting otherwise it will say can you speak up and how you can use that function is here I'm interested in shouting so if you call that function shout by passing in the parameter which is I'm interested in shouting it's going to go to the definition of the function and it's going to go I'm interested in shouting is equal equal to I'm interested in shouting that upper that's going to evaluate to true and it's going to say hey you are shouting okay so if I took this whole thing and put it here you're going to see it's going to return you are shouting okay and that's the decision process that one goes through okay first define a function called cube so define cube which takes an argument call number don't forget the parentheses in the colon how I think of colon and then hitting enter after is that it's like then so I'm defining a function and then here's the block of code that comes next okay so enter make the function return cube of the initial number so we're going to say cube reserge define a second function define a second function called by three that takes an argument called number if that number is number is divisible by three um that should call cube of that number and return its result otherwise by three should return false okay so let me take you through you guys to the logic of how I wrote this block of code right here okay so how did I figure out how to do if a number is divisible by three right how did I do this thing over here what does that mean let me show you if I did nine modulo 3 I get a remainder of zero that means 3 goes perfectly into 9 right if I did 10 modulo 3 I'll get a remainder of 1 3 goes to 3 it goes to 6 it goes to 9 and then it's like ah but I can't go into 10 so I have 1 left over that is called the remainder in math hopefully you've learned about it and if you did it with if you'd try to put 3 into something you know that number is divisible by then you'll have a remainder of 0 right like 9 modulo 3 you get a remainder of 0 so if you can see that the remainder is equal to 0 and you get a true that means that number is divisible by 3 that's how I got that line right so whatever I put it right if I put an 11 modulo 3 is 11 divisible by 3 no it's not right you get a remainder of 1 and so it returns false that's where I got that modulo 3 equal equals 0 so if it's divisible by 3 cube it otherwise return false all right um I didn't have to say else but I can I'll just say it just to be you know go along with what they're teaching but you don't have to actually say it importing modules importing modules is so fun you guys importing modules is amazing it's the concept of using somebody else's code that they have taken hundreds of hundreds of years and hours of time to write and you just use this command called part and all of a sudden you have a power of thousands of professional software developers who spent countless nights eating um you know what are they ramen noodles and writing this code for you and you got to use it by just using this extremely powerful command called import okay so learn about import this is going to be an important section effectively what this says is you just trying to use other people's code you don't want to reinvent the wheel every time if there's already some kind of mathematical crazy formula that does something you don't need to reinvent it that's partially the reason why you don't have to know all the math in the world to be a good programmer to be an effective programmer because somebody out there has already done the math you just need to steal it or use their code right don't plagiarize but try to use your code what did I say great programmers copy code or good programmers copy code great programmers steal code ok I'm not advertising for actually plagiarizing code but what I just mean is importing code and using libraries intelligently ok so they're giving an example of a square root ok so if you did the square root of 25 you're not going to get an answer back you're going to get an error what you have to do for that is import a module that uses a function square root okay square root right again let's go back to the terminology sq RT that's a function and it takes in as input one number so we gave it 25 so it takes in as input some number n but we can't use s to RT because we never defined it anywhere right we didn't do this stuff with DF s QRT it takes in some number and then you know return blah blah blah blah blah whatever right we never define this qrt so if we type this in now we're going to get an error so I'm going to do what they're telling me to do cs2 RT is not defined so now they're telling you how you can actually use import so we're going to say import math and here we're going to do math dot s QRT so this tells python not only to import math but to get the sq RT function from within meth so we're importing a library a giant library of functions which is called math and within that library we want to get the function s qrt that somebody has written and that's how we get it and then we just pass in 25 to it so the function is called s qrt we are passing 25 to it and the dot notation here is really telling us the path to that file ok so if I hit save and submit you can see that I get back 5 which is indeed the square root of 25 another way to get a square root without using this is just do something to the power of 1/2 okay that's another way it's a pretty cool way to get a square root of something all right start next lesson function imports so from module import blah so we could have said from math import sq RT and then just done sqr t 25 ok that's an example of a function import and that's exactly what they're telling us to do boom nailed it universal import this is saying import everything as a function so we can say from math import every single function and now we never have to say math dot strt or whatever we can just ask your T and we don't have to say math that tangent we can say tangent like this tangent of 9 right I forgot what that is it's been a while since I took trig let's give this bad boy a try and pretty good okay here be dragons so basically be careful when you're doing this stuff this is an advanced concept and okay we should mention it but I don't want you guys to worry about it it's just a waste of your time if you're actually starting out so there's basically saying import it's better best to stick with either import module and type module name or just import specific variables and functions so effectively what they're saying is avoid this thing with the asterisk okay avoid it at all costs and why they're saying that is imagine you created your function called sq RT or let's say you created your function tan and maybe it was for you know I don't know tandem it was short for tandem there's a something called tandem chess so it was really for tandem and you know you said define tan and it prints out you know you are playing tandem chess right but now if you did from math import asterisk or whatever and you used ten of them you know ninety like you're going to start getting some errors it's going to be like hey do you want to use this function 10 that you define or you want to use the function 10 from the math module so it's just better to say maybe import math so now if you want to use your own 10 you can just say 10 or if you want to use the math 10 you can say math 10 which tells it that it has nothing to do with you know this tan over here okay hopefully that makes sense let's continue going forward ok biggest number smallest number distance from 0 beyond strings now that you understand it functions aren't how to import modules let's look at some functions that are built into Python no modules required so a lot of stuff comes builtin right like that up or down lower STR Len right a lot of those just come builtin these are great for doing work with strings but what about something a little bit more analytic so if we're trying to do something with math right like we're trying to find the biggest number out of all of these numbers so if I gave you a giant list of numbers how do you find the biggest number now sometimes people will look at it and be like these are just for numbers but think about it sometimes you could be maybe you could work as a data scientist and you could be dealing with a file with a couple of gigabytes and you have 10 million numbers right you can't visually scan and pick the best number and maybe a lot of software's are going to fail even Excel a lot of the times will fail with file size is so big so maybe you have to use something with Python and Python is gaining a tremendous amount of popularity and you might have to use a function from Python and so how are you going to use that to get the you know the biggest number from that or the smallest number or how far something is from zero so distance from zero right in math it's known as the absolute value okay cool so you can see the math library has all these functions a cosine ache cosh a sign you know all of the ceiling cosine degrees e factorial floor like these are all part of math so you could do math sq RT math that powa TN so on and so forth so here they're using defining your own functions to figure out things and you can see how you figure out the max number is just do acts of that okay so you just call the max function pretty simple so now they're going to take you step by step all right try out the max function on line three you can provide any number of integers or float arguments so if I gave max you know five comma 10 comma negative 15 comma 20 comma negative seven what max does this function max right here is going to figure out which one the max is so you can see it's 20 and then it's going to print 20 okay this whole thing is going to turn to 20 that's what's going to happen it's not going to keep that tuple there anymore that thing in parentheses with a bunch of numbers right it's going to pick 20 the whole thing is going to convert to 20 and then it's going to print 20 okay all right minimum same deal right is going to pick negative 5 the whole thing is going to turn to negative 5 and then we're going to move on boom done absolutely we're going to use the ABS function and it's the same way right it just tells you how far something is from zero so if I did negative 100 is going to give me back 100 or they want us to use a specific value like negative 42 cool now they are telling you about this function called type which tells you to type the data type of something right so if I did type 1.4 it's going to tell me its type float if I did type of one it's going to tell me it's n and you should know these now it's an integer if I did hello this is and or not an N this is a this is the string cool okay so you can see there are examples integer float and spam int float and then string over here right string okay so have Python print out the type of an int float string value I'm just gonna save myself some time and copy those done review yes okay let's review functions so we define a function again try to speak this to yourself then hear me do it define a function call speak which takes in as a parameter or as an input a variable name message and it just returns message so it really doesn't do much it just returns message okay it just takes it and returns it doesn't really do anything and then this part is outside of the function so if you're happy you call the function speak and pass in I'm happy it goes to here and it just returns I'm happy if you're sad you used go to the function speak and return I'm sad otherwise call the function speak and go I don't know what I'm feeling okay so here a bunch of strong instructions and they want you to create your own function so let's get started define function and it's called shut down that takes in one argument s don't forget to put the parentheses or the colon then if shut down function receives and s equal to yes it should return shutting down make sure to put the capital S there otherwise you're going to get it wrong otherwise else if s is equal to no and there's a difference between one equal sign and two equal signs one equal sign is an assignment operator two equal signs is a comparator operator it compares two objects this equal sign will try to make a sequel to know this two equal signs checks if s is no okay big difference there then the function should return shut down boarded else I'm sending in the other than those inputs of function should return sorry okay fairly simple dawn next lesson modules review modules now let's see what you remember about importing modules import the module math and whatever wave so from math import sq RT s q RT function on the number three six eight nine I like to do it this way sometimes one three six eight nine crisis with it oh I didn't print it cool done review builtin functions perfect last but not least let's review some builtin functions so define a function called distance from zero with one argument let's call it number if the type of the argument so if type of the argument is equal equal to an ant or that type is equal equal to a float right the function let's do that um actually let's check something so let's do type of five equal equal to an int that gives you a true okay now so I was right string it right the function should return the absolute value of the function input done if right forgot to put the if there otherwise the function should return nope done bones okay so that was pretty great we didn't call that function so practice calling that function okay don't just leave that function they actually call it and I think that was pretty excellent I'm going to cut the video off here because it's already long enough and we just finished this entire section so I will see you guys in the next video in code Khadem e part six this is clever programmer over and out see you guys in the next video bye
