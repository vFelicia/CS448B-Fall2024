With timestamps:

00:00 - hey guys what is up this is kazy from
00:03 - clever program.com and you are watching
00:07 - code academy part
00:10 - 15 I'm running out of creative things to
00:12 - do so I'm just now calling it as it is
00:15 - part
00:17 - 15 um yeah so today has been a pretty
00:22 - good day it's been pretty productive
00:24 - it's a nice Sunday morning hopefully you
00:27 - are having a good time as well wherever
00:29 - you are in the world and watching this I
00:32 - hope you're just relaxed and focused and
00:35 - you can enjoy this as well as learn
00:38 - enjoyment and learning at the same
00:41 - time right that's what a university
00:43 - Professor would say but not me I think
00:46 - those two things go hand in hand and I
00:48 - think it's almost impossible to truly
00:50 - learn something without actually
00:52 - enjoying it because when you enjoy it
00:54 - you
00:55 - experiment on all of the wise and all of
00:59 - the fundamental
01:00 - basic understanding of a certain concept
01:02 - and until you question the basics of
01:05 - something you won't truly understand it
01:07 - and the only way you'll question those
01:09 - things is if you like it so much that
01:11 - you are playing around with it your
01:12 - brain will wander and you'll naturally
01:14 - ask those questions right and then you
01:17 - pick up those Concepts and learn those
01:19 - things so while you're watching these
01:20 - videos you guys are actually getting a
01:22 - lot better than 99.9% of the people who
01:26 - are taking this course kind of just
01:28 - brain dead and following the
01:29 - instructions on the left hand side
01:31 - because trust me that doesn't help you
01:34 - and almost everybody that I know
01:35 - personally who's taken this they just go
01:38 - for some reason I just took this code
01:39 - academy course and I don't remember any
01:42 - of it well that's cuz you were working
01:44 - on muscle memory then you're actual
01:46 - memory and understanding okay so true
01:49 - memory the reason why you won't forget
01:51 - these things is if you truly understand
01:53 - them cool let's just take a look at
01:56 - where we are and where we need to go so
01:59 - I'm going to going to go back to course
02:03 - page and we are at 50% completion good
02:07 - job if you made it this far like
02:09 - actually go and pat yourself on the back
02:12 - you know just breathe in and breathe out
02:14 - and relax yeah just relax cuz we're
02:18 - doing
02:19 - amazing and we are making a lot of
02:23 - progress so we're more than halfway done
02:25 - on unit 7 list and functions and then
02:27 - we're going to go on to Battleship
02:29 - that's going to be a really fun part so
02:31 - let's get to
02:32 - it all right let's continue moving on
02:36 - printing out a item by item in a
02:39 - function or sorry printing out a list
02:41 - item by item in a function so what does
02:44 - this mean let's give it a
02:47 - try what they're saying is we're going
02:49 - through each item and printing out that
02:51 - item now I'm going to show you a simple
02:53 - way and then I'm going to show you the
02:54 - way they're doing it okay
02:57 - so let's do it the simple way first I
03:01 - will say for item in an
03:05 - print item right so n is this list right
03:12 - here and item first time going through
03:15 - is going to be three is going to be
03:16 - three right here it's going to print
03:17 - three and spit it out to the
03:20 - screen
03:22 - right so I think you already know that
03:25 - then item is going to be five then item
03:26 - is going to be seven you got that part
03:28 - of the loop right that's the easier and
03:31 - much nicer way to do it but the way
03:34 - they're going to show you is more
03:35 - computer sciency and it applies to other
03:39 - languages than just python so it's a
03:41 - very common way to do it in Java and C
03:44 - C++ that's how they do loops there most
03:47 - of the times okay so that's how they're
03:49 - showing
03:51 - you okay so what they're doing is I'll
03:54 - actually call this index instead of
03:57 - I and then we'll abbreviate to it later
04:00 - to I so it makes more sense so here's
04:03 - how this Loop
04:05 - Works let's break it down step by step
04:08 - so first of all I'm going to comment out
04:10 - these lines and I'm going to go here
04:13 - okay what is this part and what does
04:15 - that mean and what the heck is range
04:18 - right range essentially creates a list
04:21 - on the fly so let me show you in Python
04:26 - 2 okay uh you can use the terminal or
04:29 - you can use your idle so let's use the
04:31 - idle because if you installed python you
04:33 - might have this idle right here so I'm
04:36 - going to create you can also just do it
04:38 - on this website that I have up there
04:41 - reel.it okay you can do it anywhere you
04:44 - want I'm just showing you in multiple
04:46 - places so you know that you have
04:48 - different
04:49 - options range of five let's see what
04:53 - that gives us it basically created a
04:55 - list on the fly so instead of having to
04:58 - do creating a list like 0 1 2 3 4 You
05:03 - can just say range of five how will you
05:06 - create a list of 10
05:09 - elements you would say it range of
05:12 - 10 but quick quiz of your understanding
05:15 - of range if I do range of
05:19 - 10 will 10 exist in the list or not if
05:24 - you said no good job it'll actually be
05:26 - from z0 to 9 so what you give
05:30 - range is up to but not including that
05:33 - point that's how a lot of the things
05:35 - work in Python but how are they passing
05:38 - this function range to arguments they're
05:41 - passing this function to arguments you
05:43 - see that
05:44 - comma so they're passing it two
05:46 - arguments so here's how it actually
05:48 - works range takes in a start argument
05:52 - and a stop
05:53 - argument okay and so I can say start at
05:58 - one and and go up to 11 which means go
06:02 - up to but not including
06:04 - 11 this part one it says include one
06:08 - okay so start from one and go up to 10
06:11 - is how I would rate
06:14 - it so here we start from one go up to
06:18 - 10 so if I wanted to make a loop that
06:21 - ran 11 or however many times that is
06:24 - right I can say for I in
06:28 - range um
06:30 - right for item in range 1 through 11
06:36 - print
06:37 - item you see that it goes 1 2 3 4 5 6 7
06:41 - 8 and same way I can do five through 11
06:46 - if I
06:48 - wanted okay so pretty simple you saw it
06:52 - looping through and goes 5 6 7 8 9 10
06:55 - and done
06:57 - essentially what it really is is is that
07:00 - range is nothing really that special
07:02 - this part just evaluates to an actual
07:05 - list 5 6 7 8 9 and 10 okay that's the
07:10 - part I want you to understand it's not
07:12 - some magical thing that part actually
07:15 - evaluates to a known data structure
07:17 - called a list and then item just keeps
07:20 - becoming each item in that list range
07:22 - all it does is creates a list on the
07:25 - Fly okay so here's how they're looping
07:30 - for index in range so let's create some
07:33 - list like how they have it n is equal to
07:37 - 3 comma 5 comma 7 right and now I say
07:41 - for index in range 0 comma Len of n Len
07:47 - of n is just a cool way of saying
07:51 - three but we don't want to hard code
07:53 - three because what if it was a list of a
07:56 - different size so we're going to use the
07:57 - Len function on n
07:59 - lens short for length actually tells you
08:04 - how long the list n is and here it will
08:08 - count all the elements in the list n
08:10 - well how many elements does the list n
08:12 - have three so this part effectively just
08:15 - evaluates to three okay so for index in
08:18 - range 0 to three in your head imagine
08:22 - this
08:23 - part uh turns
08:25 - into 0 1 2
08:30 - got it that's what that part actually
08:32 - turns into
08:34 - okay so actually I'm going to just write
08:36 - the loop with that 01 and two and I'm
08:39 - going to say print n of index and you'll
08:43 - see what
08:44 - happens so what did it
08:47 - do let's apply this code right
08:51 - here
08:57 - 012 okay
08:59 - and
09:00 - let's do
09:03 - this and let's run it let's see what it
09:06 - actually does it prints out 357 it
09:08 - printed out each item in the list right
09:12 - what we wrote is the equivalent of for
09:14 - item in N
09:17 - print
09:19 - item both of those are equivalent you'll
09:22 - see 357 and then 357 being printed again
09:25 - 357 that's our first for Loop this one
09:29 - here and our second for Loop gives us
09:31 - 357 as well so they're both equivalent
09:34 - just going to leave that here for
09:36 - notes and I'm going to come down here so
09:40 - what is this part actually doing well
09:42 - index the first time is zero what's n of
09:45 - zero the zeroth element of n that's
09:48 - three so this part actually evaluates to
09:50 - a
09:51 - three okay what's uh next time we Loop
09:55 - through n of one n of one is just a
09:57 - second element so it's five
09:59 - and then that's why you have three and
10:02 - five and then at the end you have
10:05 - seven and so n of
10:09 - two right CU this is a two n of two
10:13 - evaluates to a seven and then you get
10:17 - back seven out right there
10:20 - okay so this is just you're looping and
10:24 - you're getting access to that element in
10:26 - the list by using its index so you're
10:30 - using its
10:32 - position to access that element rather
10:35 - than access that element directly right
10:37 - in our loop from Line 6 to 7 item is
10:40 - directly the element three and it's
10:42 - directly the element five but
10:46 - index is actually the position so if I
10:50 - did range how they wrote it was range
10:53 - Len
10:55 - of um n right this whole part in our
11:00 - case evaluates to 0a 1 comma 2 but now
11:03 - I'm going to leave it like this and
11:05 - you'll see that it actually just prints
11:07 - out what we said earlier
11:09 - 357 cuz it's actually zero it's a list
11:14 - 012 right it starts from zero and goes
11:17 - up to
11:18 - three and then same thing so here we're
11:23 - in using index to get access to the
11:25 - element here we're getting access to the
11:27 - element access to the element directly
11:30 - okay so just in case sometimes you want
11:32 - to know the position this is a better
11:34 - way and if you just want access to the
11:37 - element directly without having to know
11:39 - what position it's at just do uh you
11:42 - know get access to that item directly
11:45 - rather than doing
11:47 - range okay hopefully that makes sense
11:50 - and let's move on and so instead of the
11:51 - whole variable index they're just using
11:53 - I so that's what you're going to see
11:55 - that's why there's an i a lot of people
11:58 - just go some mysterious ey you know you
12:00 - can call it whatever you want it's an
12:03 - arbitrary looping
12:06 - variable however by convention if you're
12:08 - getting the index you just say by I
12:10 - because it's such a common operation so
12:12 - we have to create a function called
12:14 - print list now so we're going to define
12:16 - a function
12:18 - called print list and it's going to take
12:21 - in some list so I'm just going to say
12:25 - LST and
12:27 - for um um I in
12:31 - range zero through and you don't have to
12:34 - say zero because it starts from zero so
12:37 - I'm just going to say
12:38 - range of
12:42 - n
12:45 - print or I'm sorry not n cuz in this
12:47 - function I I'm defining a list here LST
12:51 - of
12:53 - I and that should be good if I give this
12:57 - function a list it'll figure out what to
12:59 - do so let's try it
13:03 - here now I'm going to run this and
13:06 - you're going to see it's not going to do
13:07 - anything cuz we're defining a function
13:10 - and we're not calling it so I'm going to
13:12 - call Print list and I'm going to give it
13:15 - that list n that we created at the top
13:18 - and let's see what
13:20 - happens and it just did that 357 now if
13:24 - I changed n to anything
13:27 - else
13:32 - it's going to figure out what to do and
13:34 - it's going to print out line by line
13:35 - every element in that list okay so it's
13:39 - a smart
13:41 - function let's hit save and submit the
13:44 - body of your function should not contain
13:46 - any references to n so I think I have to
13:50 - delete
13:53 - this it looks like you either didn't
13:55 - call Print okay I should just read the
13:57 - instructions right I'm trying to get a
13:58 - ahead of myself
14:00 - here Define a function called print list
14:03 - that has one argument X okay so they
14:05 - want me to call it X terrible variable
14:08 - naming but that's okay inside that
14:11 - function print out each element one by
14:14 - one use the existing code as a scaffold
14:17 - then call your function with the
14:18 - argument n so what we did in the reppel
14:21 - pretty much print list and I'm going to
14:24 - pass
14:25 - It Or List n right and how it works is
14:31 - 357 gets passed here for n it goes to
14:34 - the definition of function passes 357
14:36 - right there this x turns into
14:39 - 357 Len of 357 turns to three range of
14:44 - three turns into 0 comma 1 comma 2 I the
14:49 - first time you're looping is zero and X
14:53 - of
14:55 - zero um X is that list so zeroth element
15:00 - of that
15:02 - list is
15:04 - three and then it Loops again and we
15:06 - have uh and we
15:08 - have one so you get X of one well X is
15:14 - simply that list three five and 7 so X
15:18 - of one is
15:20 - actually five right it's this list right
15:24 - here and it prints out five and then the
15:27 - same way and it works for seven as well
15:30 - okay just want to give you an idea of
15:31 - what's happening let's go next
15:36 - list modifying each element in a list in
15:39 - a function so here they're taking each
15:42 - element and just modifying it modifying
15:45 - each element okay so what they're
15:50 - effectively doing and this is a nice
15:52 - reason to use it is they're just
15:53 - doubling each element by two so I will
15:57 - get the index right so if the list has
16:00 - 10 elements this range is going to turn
16:03 - into 0 through 9 giving you the position
16:06 - of each of those elements it's going to
16:07 - be 0 1 2 3 4 five n that's going to give
16:11 - you the position of each element then
16:14 - you can keep pulling out each element
16:15 - like that and then on line four what
16:17 - you're saying is hey the new value of
16:21 - that element should be what that element
16:25 - was times
16:27 - 2 so you're doubling you're looping
16:29 - through and getting access to each
16:31 - element and then doubling it okay so
16:33 - let's run it on the thing
16:37 - 357 print double list so I have to put
16:40 - parentheses here Python
16:44 - 3 double list is not defined
16:48 - okay don't forget to return your new
16:54 - list return
16:57 - n and and this function should be called
17:00 - double list okay so I'm going to say
17:03 - Define double list it takes
17:09 - in nope right here let's see if that
17:12 - works inconsistent use of tabs and
17:16 - spaces so sometimes tabs and spaces act
17:21 - funny it's better to use spaces rather
17:24 - than tabs so four spaces is a convention
17:27 - and it just doubl that list you see this
17:29 - list was
17:30 - 357 and now 3 * 2 gave you 6 5 * 2 gave
17:35 - you 10 and 7 * 2 give you 14 so that
17:38 - list effectively has been doubled let's
17:41 - just go through that algorithm and how
17:42 - it
17:43 - works uh we gave 357 to the function
17:46 - double list it put 357 right up here uh
17:51 - it did Len of 357 it parentheses right
17:54 - so you got to go inner and outer so the
17:56 - first thing that happens is the Len of
17:59 - 357 well the L of 357 is three so now
18:03 - this range goes from 0 to three that
18:05 - just means 0 1 and two it goes zero up
18:08 - to but not including three so you get 0
18:10 - 1 and two the first time this eye Loops
18:13 - through it's actually zero zero reality
18:18 - like Gary vaynerchuck
18:20 - you have the new end of zero so it's
18:23 - saying the new this guy right here right
18:27 - it's in the process of being find the
18:29 - new guy in the zeroth position of that
18:31 - list or this list right here is actually
18:35 - what that guy was so 3 * 2 so now this
18:39 - guy is actually six so this part
18:42 - effectively changes to a
18:45 - six oh I'm
18:49 - sorry then it
18:51 - goes or sorry not the outer part okay
18:54 - the inner part that's important to
18:56 - remember cuz this is different than
18:57 - theone function argument so uh six then
19:02 - it goes through the loop again it goes
19:05 - one now it's everywhere it goes n of one
19:08 - n of 1 * 2 so n of one well that's five
19:13 - in our case and 5 * 2 gives us a 10 so
19:18 - now it turns this guy into a
19:21 - 10 right that's 10 and then it goes for
19:24 - the second position and it goes n of two
19:28 - is n of 2 * 2 N of 2 evaluates to 7 and
19:33 - 7 * 2 gives you 14 so this part turns to
19:37 - 14 and we have created the list the loop
19:40 - goes and sees that it it went through 0
19:43 - 1 and two so this Loop has ended now it
19:46 - goes to the next statement which is
19:48 - return n and n is 6 10 and 14 at this
19:53 - point it returns that so this call gets
19:57 - evaluated to 610 and 4 and then it gets
20:01 - sent to the print function and print
20:03 - function simply spits it out to the
20:06 - screen which is why you see it right
20:08 - here if you didn't use the print
20:09 - function it wouldn't get printed out to
20:11 - the
20:12 - screen
20:13 - cool okay let's move on or sorry let's
20:17 - see actually what they're telling us to
20:19 - do so they want us to create a
20:26 - function uh Define double list it takes
20:30 - in a single argument X multiplies each
20:32 - other by two and returns that list use
20:35 - the existing code as a scaffold so
20:37 - they're saying use this existing code as
20:39 - a scaffold um meaning as an example or
20:43 - building
20:44 - blocks so I'm going to say um X of
20:49 - I * 2 oh I'm being cool right instead of
20:54 - using the long hand notation and doing X
20:56 - is equal to X of I * 2 I'm going to be
20:59 - I'm going to choose to be a cool guy and
21:02 - I'm just going to say x of I * equal 2
21:05 - that's Shand for increment me right if
21:09 - you do this that's not going to do
21:10 - anything so you got to make sure that
21:11 - you put the equal sign there as well and
21:14 - then I'm going to return the actual list
21:16 - X so let's give this bad boy a
21:20 - try list index out of
21:23 - range why did okay
21:27 - obviously
21:29 - for I in range I will say 0 to L of Len
21:35 - of
21:39 - X
21:43 - okay that
21:45 - should be good yeah there you go the
21:49 - reason why I got that list index out of
21:51 - Ranger instead of I is undefined is
21:54 - actually a complicated thing it has to
21:57 - do with with how closures work so I'm
22:00 - not going to get into that but you know
22:02 - look into that if you're interested
22:04 - start next lesson passing a range into a
22:09 - function so you can also pass a range
22:12 - into a function that just
22:14 - means passing a list into the
22:17 - function okay effectively you're telling
22:20 - it maybe how many times to
22:23 - run so range works like
22:26 - this
22:30 - if you give it one argument that just
22:32 - means stop at this point and by default
22:35 - stop start at zero if you give it this
22:39 - argum if you give it two arguments it
22:41 - automatically assumes the first argument
22:43 - is a start and the second argument is a
22:45 - stop if you give it three arguments it
22:47 - assumes the first is a start second is a
22:49 - stop up to but not including type of
22:52 - stop and then it assumes that the last
22:54 - part is step so I can say range range of
22:59 - 0 through 100 or let's say 101 that
23:03 - means that that's going to go up like
23:05 - including 100 uh but not 101 obviously
23:09 - and I'm going to say step by one and I'm
23:11 - going to print this out to the
23:13 - screen well now you get okay this is
23:17 - Python 3 so I have to call a list
23:19 - function on this so I'm not going to do
23:21 - it here it's going to make things
23:22 - slightly more okay you know what I'm
23:24 - just going to do it there just to show
23:26 - you guys
23:28 - but I'm going to do it in idle to keep
23:30 - things simple and
23:33 - how python 2
23:35 - works so I'm going to call range of 0
23:38 - comma 101 comma 1 and you can see that
23:41 - it's created a list from 0 to
23:44 - 100 that's a total of 101
23:48 - elements and um it steps by
23:51 - one so if I do step by two now you get
23:55 - all the even numbers for pretty cool
23:58 - right so you get all the evid numbers
24:00 - and you can if you're if you're thinking
24:02 - like you're like feeling kind of like
24:06 - Aristotle you can go hm what is the sum
24:11 - of all the even numbers from 0 to 100
24:14 - well how can you do that
24:19 - simple just call the sum function on
24:22 - that range and that gives you the sum of
24:24 - all the even numbers from 0 to 100 right
24:27 - isn't that cool
24:30 - okay if you did three you get the idea
24:32 - right now you get every
24:35 - third
24:36 - number okay so it's kind of nice how it
24:40 - works and if you wanted to get the odd
24:42 - numbers well you can says start from one
24:45 - and then step by two and now you'll get
24:46 - all the odd numbers so 1 3 5 7 9 11 all
24:50 - up to 99 and if you wanted to get their
24:53 - sum you could do the same
24:55 - trick so effectively all range does is
24:58 - create a list the first argument is
25:00 - start the second one is stop and the
25:02 - third one is
25:04 - Step you can also step by um well in
25:10 - this case you can't step by a negative
25:11 - number but I'll show you guys certain
25:13 - things you can
25:14 - do uh let's see if we can create it
25:18 - backwards what do you think will happen
25:20 - if I actually change the numbers right
25:22 - what happens
25:24 - then right so here if I go go from 101
25:30 - all the way to two but step backwards by
25:32 - two that's what you get so it steps
25:35 - backwards and it goes 101 99 97 so on
25:38 - and so forth okay so if you're a if
25:41 - you're younger or you get in punishment
25:43 - midieval style and they go right from 0
25:46 - to 100 simply open up python do this and
25:49 - then send it
25:51 - in not like it's a thing anymore but hey
25:54 - back in the day would have helped
25:56 - you cool
25:58 - in all cases the range function Returns
26:00 - the list this is the most important part
26:02 - to remember guys it returns a list okay
26:04 - just understand whenever you see range
26:06 - don't leave it like that in your mind
26:08 - because it's going to complicate you
26:10 - understand that it turns into a list
26:12 - which is a very familiar data structure
26:14 - in our in our minds right we've worked
26:16 - with it quite a bit each item increases
26:18 - by step if emitted start def Falls to
26:21 - zero and step defaults to one okay on
26:24 - line six uh yeah step defaults to one
26:28 - because it steps by one element by
26:30 - default remember when we weren't passing
26:32 - in the step argument it was just going
26:34 - up by one every time so if we said range
26:36 - of 0 through 11 it would go 0 1 2 3 4 5
26:39 - 6 7 8 9
26:40 - 10 but if we pass in Step then it will
26:44 - change the amount of steps it takes all
26:46 - right on line six replace the blank with
26:48 - the range that returns a list containing
26:51 - 012 so I'm going to pass in range 0 to
26:55 - three right this evaluates to 0 1 and 2
27:00 - it's the same thing as putting that in
27:02 - but it's just in a cooler way so now
27:05 - we're passing it in a list of three
27:08 - elements first being zero second being
27:10 - one third being two and then what it
27:13 - does is it passes that in right here
27:16 - right so it goes Z one and two and
27:20 - everywhere it sees X it's essentially 0
27:22 - one and two Len of 0 1 and two will give
27:26 - us three 0 to three will give us again 0
27:30 - 1 and
27:31 - two x of for I right I is first time Z
27:36 - that's zero that's zero that says make
27:40 - the first element in the list x equal to
27:44 - what it was and then times two so here
27:48 - our list originally was actually just 0
27:50 - 0 * 2 this gives you zero so that stays
27:53 - at zero but one will become two and two
27:55 - will become four so at the end will
27:57 - return a list like this okay make make
28:01 - sure to keep uh making it a habit of
28:03 - stepping through algorithms kind of like
28:05 - I'm doing here trust me it make you so
28:08 - much better and the reason why you
28:10 - should do this practice over and over
28:12 - again is your brain doesn't have to
28:14 - think of really menial tasks like these
28:16 - small tasks and spend uh time processing
28:19 - it because it'll stop you from thinking
28:21 - about bigger ideas right if you're
28:23 - trying to develop an app or you're
28:24 - trying to build something bigger you you
28:27 - don't want to get bogged down by very
28:29 - simple things like computational
28:31 - algorithmic basic steps oh X goes into
28:35 - the x of second X of two will give me
28:38 - the third Element no it'll give me the
28:39 - second element you don't want to be
28:41 - confused by such basic things so
28:44 - practice this so much that your brain
28:47 - gets these instantly so you can focus on
28:50 - HM should I use a recursive algorithm
28:52 - here or should I use this what arguments
28:55 - is my function going to depend on you
28:56 - want to be able to to think at you want
28:58 - to relieve your brain to think at a
28:59 - higher level that's the reason why you
29:01 - should practice it Okay and that's why
29:03 - you shouldn't take pride in oh I'm just
29:06 - getting to 100% completion yes you
29:08 - should take pride in um really churning
29:11 - this out and really learning the
29:13 - fundamentals
29:15 - okay cool start next
29:18 - lesson iterating over a list in a
29:22 - function
29:24 - um okay so I think this is video has uh
29:28 - went on for a little bit so I'm going to
29:30 - stop right here I keep forgetting to uh
29:33 - say it but I'm going to say it I I find
29:36 - those YouTubers annoying but I think I'm
29:38 - going to say it cuz it helps me reach
29:40 - more people so please if you guys like
29:42 - the video you know just give it a little
29:44 - thumbs up takes two seconds and if you
29:47 - uh really enjoyed and you want to see
29:48 - future videos please subscribe down
29:51 - there somewhere other than that this was
29:54 - kazy from clever program.com and and I
29:58 - will see you in code academy part
30:01 - 15 okay so see you there

Cleaned transcript:

hey guys what is up this is kazy from clever program.com and you are watching code academy part 15 I'm running out of creative things to do so I'm just now calling it as it is part 15 um yeah so today has been a pretty good day it's been pretty productive it's a nice Sunday morning hopefully you are having a good time as well wherever you are in the world and watching this I hope you're just relaxed and focused and you can enjoy this as well as learn enjoyment and learning at the same time right that's what a university Professor would say but not me I think those two things go hand in hand and I think it's almost impossible to truly learn something without actually enjoying it because when you enjoy it you experiment on all of the wise and all of the fundamental basic understanding of a certain concept and until you question the basics of something you won't truly understand it and the only way you'll question those things is if you like it so much that you are playing around with it your brain will wander and you'll naturally ask those questions right and then you pick up those Concepts and learn those things so while you're watching these videos you guys are actually getting a lot better than 99.9% of the people who are taking this course kind of just brain dead and following the instructions on the left hand side because trust me that doesn't help you and almost everybody that I know personally who's taken this they just go for some reason I just took this code academy course and I don't remember any of it well that's cuz you were working on muscle memory then you're actual memory and understanding okay so true memory the reason why you won't forget these things is if you truly understand them cool let's just take a look at where we are and where we need to go so I'm going to going to go back to course page and we are at 50% completion good job if you made it this far like actually go and pat yourself on the back you know just breathe in and breathe out and relax yeah just relax cuz we're doing amazing and we are making a lot of progress so we're more than halfway done on unit 7 list and functions and then we're going to go on to Battleship that's going to be a really fun part so let's get to it all right let's continue moving on printing out a item by item in a function or sorry printing out a list item by item in a function so what does this mean let's give it a try what they're saying is we're going through each item and printing out that item now I'm going to show you a simple way and then I'm going to show you the way they're doing it okay so let's do it the simple way first I will say for item in an print item right so n is this list right here and item first time going through is going to be three is going to be three right here it's going to print three and spit it out to the screen right so I think you already know that then item is going to be five then item is going to be seven you got that part of the loop right that's the easier and much nicer way to do it but the way they're going to show you is more computer sciency and it applies to other languages than just python so it's a very common way to do it in Java and C C++ that's how they do loops there most of the times okay so that's how they're showing you okay so what they're doing is I'll actually call this index instead of I and then we'll abbreviate to it later to I so it makes more sense so here's how this Loop Works let's break it down step by step so first of all I'm going to comment out these lines and I'm going to go here okay what is this part and what does that mean and what the heck is range right range essentially creates a list on the fly so let me show you in Python 2 okay uh you can use the terminal or you can use your idle so let's use the idle because if you installed python you might have this idle right here so I'm going to create you can also just do it on this website that I have up there reel.it okay you can do it anywhere you want I'm just showing you in multiple places so you know that you have different options range of five let's see what that gives us it basically created a list on the fly so instead of having to do creating a list like 0 1 2 3 4 You can just say range of five how will you create a list of 10 elements you would say it range of 10 but quick quiz of your understanding of range if I do range of 10 will 10 exist in the list or not if you said no good job it'll actually be from z0 to 9 so what you give range is up to but not including that point that's how a lot of the things work in Python but how are they passing this function range to arguments they're passing this function to arguments you see that comma so they're passing it two arguments so here's how it actually works range takes in a start argument and a stop argument okay and so I can say start at one and and go up to 11 which means go up to but not including 11 this part one it says include one okay so start from one and go up to 10 is how I would rate it so here we start from one go up to 10 so if I wanted to make a loop that ran 11 or however many times that is right I can say for I in range um right for item in range 1 through 11 print item you see that it goes 1 2 3 4 5 6 7 8 and same way I can do five through 11 if I wanted okay so pretty simple you saw it looping through and goes 5 6 7 8 9 10 and done essentially what it really is is is that range is nothing really that special this part just evaluates to an actual list 5 6 7 8 9 and 10 okay that's the part I want you to understand it's not some magical thing that part actually evaluates to a known data structure called a list and then item just keeps becoming each item in that list range all it does is creates a list on the Fly okay so here's how they're looping for index in range so let's create some list like how they have it n is equal to 3 comma 5 comma 7 right and now I say for index in range 0 comma Len of n Len of n is just a cool way of saying three but we don't want to hard code three because what if it was a list of a different size so we're going to use the Len function on n lens short for length actually tells you how long the list n is and here it will count all the elements in the list n well how many elements does the list n have three so this part effectively just evaluates to three okay so for index in range 0 to three in your head imagine this part uh turns into 0 1 2 got it that's what that part actually turns into okay so actually I'm going to just write the loop with that 01 and two and I'm going to say print n of index and you'll see what happens so what did it do let's apply this code right here 012 okay and let's do this and let's run it let's see what it actually does it prints out 357 it printed out each item in the list right what we wrote is the equivalent of for item in N print item both of those are equivalent you'll see 357 and then 357 being printed again 357 that's our first for Loop this one here and our second for Loop gives us 357 as well so they're both equivalent just going to leave that here for notes and I'm going to come down here so what is this part actually doing well index the first time is zero what's n of zero the zeroth element of n that's three so this part actually evaluates to a three okay what's uh next time we Loop through n of one n of one is just a second element so it's five and then that's why you have three and five and then at the end you have seven and so n of two right CU this is a two n of two evaluates to a seven and then you get back seven out right there okay so this is just you're looping and you're getting access to that element in the list by using its index so you're using its position to access that element rather than access that element directly right in our loop from Line 6 to 7 item is directly the element three and it's directly the element five but index is actually the position so if I did range how they wrote it was range Len of um n right this whole part in our case evaluates to 0a 1 comma 2 but now I'm going to leave it like this and you'll see that it actually just prints out what we said earlier 357 cuz it's actually zero it's a list 012 right it starts from zero and goes up to three and then same thing so here we're in using index to get access to the element here we're getting access to the element access to the element directly okay so just in case sometimes you want to know the position this is a better way and if you just want access to the element directly without having to know what position it's at just do uh you know get access to that item directly rather than doing range okay hopefully that makes sense and let's move on and so instead of the whole variable index they're just using I so that's what you're going to see that's why there's an i a lot of people just go some mysterious ey you know you can call it whatever you want it's an arbitrary looping variable however by convention if you're getting the index you just say by I because it's such a common operation so we have to create a function called print list now so we're going to define a function called print list and it's going to take in some list so I'm just going to say LST and for um um I in range zero through and you don't have to say zero because it starts from zero so I'm just going to say range of n print or I'm sorry not n cuz in this function I I'm defining a list here LST of I and that should be good if I give this function a list it'll figure out what to do so let's try it here now I'm going to run this and you're going to see it's not going to do anything cuz we're defining a function and we're not calling it so I'm going to call Print list and I'm going to give it that list n that we created at the top and let's see what happens and it just did that 357 now if I changed n to anything else it's going to figure out what to do and it's going to print out line by line every element in that list okay so it's a smart function let's hit save and submit the body of your function should not contain any references to n so I think I have to delete this it looks like you either didn't call Print okay I should just read the instructions right I'm trying to get a ahead of myself here Define a function called print list that has one argument X okay so they want me to call it X terrible variable naming but that's okay inside that function print out each element one by one use the existing code as a scaffold then call your function with the argument n so what we did in the reppel pretty much print list and I'm going to pass It Or List n right and how it works is 357 gets passed here for n it goes to the definition of function passes 357 right there this x turns into 357 Len of 357 turns to three range of three turns into 0 comma 1 comma 2 I the first time you're looping is zero and X of zero um X is that list so zeroth element of that list is three and then it Loops again and we have uh and we have one so you get X of one well X is simply that list three five and 7 so X of one is actually five right it's this list right here and it prints out five and then the same way and it works for seven as well okay just want to give you an idea of what's happening let's go next list modifying each element in a list in a function so here they're taking each element and just modifying it modifying each element okay so what they're effectively doing and this is a nice reason to use it is they're just doubling each element by two so I will get the index right so if the list has 10 elements this range is going to turn into 0 through 9 giving you the position of each of those elements it's going to be 0 1 2 3 4 five n that's going to give you the position of each element then you can keep pulling out each element like that and then on line four what you're saying is hey the new value of that element should be what that element was times 2 so you're doubling you're looping through and getting access to each element and then doubling it okay so let's run it on the thing 357 print double list so I have to put parentheses here Python 3 double list is not defined okay don't forget to return your new list return n and and this function should be called double list okay so I'm going to say Define double list it takes in nope right here let's see if that works inconsistent use of tabs and spaces so sometimes tabs and spaces act funny it's better to use spaces rather than tabs so four spaces is a convention and it just doubl that list you see this list was 357 and now 3 * 2 gave you 6 5 * 2 gave you 10 and 7 * 2 give you 14 so that list effectively has been doubled let's just go through that algorithm and how it works uh we gave 357 to the function double list it put 357 right up here uh it did Len of 357 it parentheses right so you got to go inner and outer so the first thing that happens is the Len of 357 well the L of 357 is three so now this range goes from 0 to three that just means 0 1 and two it goes zero up to but not including three so you get 0 1 and two the first time this eye Loops through it's actually zero zero reality like Gary vaynerchuck you have the new end of zero so it's saying the new this guy right here right it's in the process of being find the new guy in the zeroth position of that list or this list right here is actually what that guy was so 3 * 2 so now this guy is actually six so this part effectively changes to a six oh I'm sorry then it goes or sorry not the outer part okay the inner part that's important to remember cuz this is different than theone function argument so uh six then it goes through the loop again it goes one now it's everywhere it goes n of one n of 1 * 2 so n of one well that's five in our case and 5 * 2 gives us a 10 so now it turns this guy into a 10 right that's 10 and then it goes for the second position and it goes n of two is n of 2 * 2 N of 2 evaluates to 7 and 7 * 2 gives you 14 so this part turns to 14 and we have created the list the loop goes and sees that it it went through 0 1 and two so this Loop has ended now it goes to the next statement which is return n and n is 6 10 and 14 at this point it returns that so this call gets evaluated to 610 and 4 and then it gets sent to the print function and print function simply spits it out to the screen which is why you see it right here if you didn't use the print function it wouldn't get printed out to the screen cool okay let's move on or sorry let's see actually what they're telling us to do so they want us to create a function uh Define double list it takes in a single argument X multiplies each other by two and returns that list use the existing code as a scaffold so they're saying use this existing code as a scaffold um meaning as an example or building blocks so I'm going to say um X of I * 2 oh I'm being cool right instead of using the long hand notation and doing X is equal to X of I * 2 I'm going to be I'm going to choose to be a cool guy and I'm just going to say x of I * equal 2 that's Shand for increment me right if you do this that's not going to do anything so you got to make sure that you put the equal sign there as well and then I'm going to return the actual list X so let's give this bad boy a try list index out of range why did okay obviously for I in range I will say 0 to L of Len of X okay that should be good yeah there you go the reason why I got that list index out of Ranger instead of I is undefined is actually a complicated thing it has to do with with how closures work so I'm not going to get into that but you know look into that if you're interested start next lesson passing a range into a function so you can also pass a range into a function that just means passing a list into the function okay effectively you're telling it maybe how many times to run so range works like this if you give it one argument that just means stop at this point and by default stop start at zero if you give it this argum if you give it two arguments it automatically assumes the first argument is a start and the second argument is a stop if you give it three arguments it assumes the first is a start second is a stop up to but not including type of stop and then it assumes that the last part is step so I can say range range of 0 through 100 or let's say 101 that means that that's going to go up like including 100 uh but not 101 obviously and I'm going to say step by one and I'm going to print this out to the screen well now you get okay this is Python 3 so I have to call a list function on this so I'm not going to do it here it's going to make things slightly more okay you know what I'm just going to do it there just to show you guys but I'm going to do it in idle to keep things simple and how python 2 works so I'm going to call range of 0 comma 101 comma 1 and you can see that it's created a list from 0 to 100 that's a total of 101 elements and um it steps by one so if I do step by two now you get all the even numbers for pretty cool right so you get all the evid numbers and you can if you're if you're thinking like you're like feeling kind of like Aristotle you can go hm what is the sum of all the even numbers from 0 to 100 well how can you do that simple just call the sum function on that range and that gives you the sum of all the even numbers from 0 to 100 right isn't that cool okay if you did three you get the idea right now you get every third number okay so it's kind of nice how it works and if you wanted to get the odd numbers well you can says start from one and then step by two and now you'll get all the odd numbers so 1 3 5 7 9 11 all up to 99 and if you wanted to get their sum you could do the same trick so effectively all range does is create a list the first argument is start the second one is stop and the third one is Step you can also step by um well in this case you can't step by a negative number but I'll show you guys certain things you can do uh let's see if we can create it backwards what do you think will happen if I actually change the numbers right what happens then right so here if I go go from 101 all the way to two but step backwards by two that's what you get so it steps backwards and it goes 101 99 97 so on and so forth okay so if you're a if you're younger or you get in punishment midieval style and they go right from 0 to 100 simply open up python do this and then send it in not like it's a thing anymore but hey back in the day would have helped you cool in all cases the range function Returns the list this is the most important part to remember guys it returns a list okay just understand whenever you see range don't leave it like that in your mind because it's going to complicate you understand that it turns into a list which is a very familiar data structure in our in our minds right we've worked with it quite a bit each item increases by step if emitted start def Falls to zero and step defaults to one okay on line six uh yeah step defaults to one because it steps by one element by default remember when we weren't passing in the step argument it was just going up by one every time so if we said range of 0 through 11 it would go 0 1 2 3 4 5 6 7 8 9 10 but if we pass in Step then it will change the amount of steps it takes all right on line six replace the blank with the range that returns a list containing 012 so I'm going to pass in range 0 to three right this evaluates to 0 1 and 2 it's the same thing as putting that in but it's just in a cooler way so now we're passing it in a list of three elements first being zero second being one third being two and then what it does is it passes that in right here right so it goes Z one and two and everywhere it sees X it's essentially 0 one and two Len of 0 1 and two will give us three 0 to three will give us again 0 1 and two x of for I right I is first time Z that's zero that's zero that says make the first element in the list x equal to what it was and then times two so here our list originally was actually just 0 0 * 2 this gives you zero so that stays at zero but one will become two and two will become four so at the end will return a list like this okay make make sure to keep uh making it a habit of stepping through algorithms kind of like I'm doing here trust me it make you so much better and the reason why you should do this practice over and over again is your brain doesn't have to think of really menial tasks like these small tasks and spend uh time processing it because it'll stop you from thinking about bigger ideas right if you're trying to develop an app or you're trying to build something bigger you you don't want to get bogged down by very simple things like computational algorithmic basic steps oh X goes into the x of second X of two will give me the third Element no it'll give me the second element you don't want to be confused by such basic things so practice this so much that your brain gets these instantly so you can focus on HM should I use a recursive algorithm here or should I use this what arguments is my function going to depend on you want to be able to to think at you want to relieve your brain to think at a higher level that's the reason why you should practice it Okay and that's why you shouldn't take pride in oh I'm just getting to 100% completion yes you should take pride in um really churning this out and really learning the fundamentals okay cool start next lesson iterating over a list in a function um okay so I think this is video has uh went on for a little bit so I'm going to stop right here I keep forgetting to uh say it but I'm going to say it I I find those YouTubers annoying but I think I'm going to say it cuz it helps me reach more people so please if you guys like the video you know just give it a little thumbs up takes two seconds and if you uh really enjoyed and you want to see future videos please subscribe down there somewhere other than that this was kazy from clever program.com and and I will see you in code academy part 15 okay so see you there
