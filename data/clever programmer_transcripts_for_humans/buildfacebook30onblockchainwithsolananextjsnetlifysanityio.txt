With timestamps:

00:00 - in this video you'll build the facebook
00:02 - web 3.0 dap with nexjs you'll style this
00:05 - app using kelman css so why i'm so
00:07 - excited about this particular project
00:10 - specifically is because we've been doing
00:11 - all of our projects on the ethereum
00:13 - network this is going to be our first
00:15 - project on the solana network why i like
00:17 - solana a lot is because they have the
00:20 - fastest user experience their user
00:22 - experience is phenomenal the
00:23 - transactions are super cheap i mean
00:26 - something that'll cost you 100 or 200 in
00:28 - ethereum on solano will cost you one
00:30 - cent or two cents so it's literally the
00:32 - cheapest network and then it's very very
00:34 - fast and recently i even had justin khan
00:36 - on who was the founder of twitch he
00:38 - built his own gaming marketplace using
00:41 - solana because it has a wonderful user
00:43 - experience why this is one of my
00:44 - favorite builds is your data is actually
00:46 - going to be stored on chain so we're not
00:48 - going to need a back end for this we're
00:50 - going to be storing data on the
00:52 - blockchain you'll learn how to create
00:53 - your own program on the solana
00:55 - blockchain using rus framework called
00:58 - anchor so in other words basically
01:00 - you'll be building a fully decentralized
01:02 - database using solana you'll be using
01:05 - cargo to compile and deploy your smart
01:07 - contract think of cargo like hard hat
01:09 - we'll use phantom wallet to authenticate
01:12 - the users that actually sign up onto
01:14 - this app we'll use the solana web3
01:16 - package to interact with our smart
01:18 - contract and the blockchain we'll use
01:20 - the context api inside of react.js to
01:22 - store and manage our state at any given
01:25 - point we'll use sanity as our database
01:28 - to store our users and their profiles
01:30 - you'll be able to view and confirm these
01:32 - transactions over on the solana explorer
01:34 - to verify that they are indeed 100
01:38 - percent real will then deploy this app
01:41 - using netlify and host your facebook web
01:44 - 3.0 blockchain app onto the internet
01:48 - with that said i hope you are excited
01:50 - this is going to be one of the best
01:52 - blockchain apps that are out there on
01:54 - the internet right before we continue
01:55 - please do me a huge favor smash that
01:58 - like button turn it blue or white or
02:00 - whatever youtube color it turns into we
02:02 - want to break a thousand likes so that i
02:04 - could keep my job and lance who is going
02:07 - to also help you out as one of the
02:08 - instructors of this build he gets to
02:10 - keep his job with that said let's get
02:12 - right into it
02:20 - right before we get started and start
02:22 - coding i just want to let you know that
02:23 - we're doing a collab with buildspace
02:25 - which is one of the best website
02:27 - education platforms in the world and you
02:29 - guys are going to be getting nft that
02:32 - proves you completed this project and
02:34 - it's going to be in collab with bill
02:35 - space and clever programmer it's gonna
02:36 - look sick build space also has an
02:39 - incredible community of web three
02:40 - developers who you can learn together
02:42 - with in their discord and they're very
02:44 - active last but not least build space is
02:46 - also helping new web3 developers like
02:49 - yourself get matched up with top tier
02:51 - companies like adidas or alchemy for
02:54 - premium high contracts and i'm talking
02:56 - about ten to twenty thousand dollars a
02:58 - month contracts and their vision is
03:00 - amazing i even met their ceo farza and
03:02 - he's just an incredible amazing human
03:04 - being so i'm really excited about this
03:05 - collab and the best part for you guys
03:07 - it's completely free all you have to do
03:09 - is just go down below click the link in
03:11 - the description it's going to take you
03:12 - to a landing page and it's going to ask
03:13 - you to connect your wallet and once you
03:15 - connect your wallet you're good to go
03:16 - and then when you do this build and you
03:17 - complete it that wallet will be able to
03:19 - verify you did it you'll get your own
03:20 - nft and you'll get the entire community
03:22 - and everything that goes with it okay so
03:24 - again it's completely free go ahead sign
03:25 - up for that right now and with that said
03:27 - let's just jump right into the video all
03:28 - right so let's just demo this app right
03:31 - now so i hope it blows your mind so over
03:33 - here i can see that i'm on my facebook
03:36 - page boom that's all good i can also go
03:38 - ahead and connect my wallet so i'm gonna
03:40 - go ahead click that and connect it with
03:43 - my phantom wallet boom okay beautiful
03:45 - now that my wallet is connected i'm
03:47 - logged in and now i'm actually inside of
03:49 - the app so now you can see it has given
03:51 - me image at the top and i have a
03:53 - username and i can go ahead and write a
03:55 - post on the solana blockchain app okay
03:58 - i'm just gonna go ahead and type that in
03:59 - beautiful it's posting so let's give it
04:01 - a few seconds because remember this is
04:03 - being stored on the blockchain so it can
04:05 - take a little bit of time for it to show
04:08 - up so we'll just wait for a couple of
04:09 - seconds boom looks like it's good to go
04:12 - it's showing up that's awesome why this
04:14 - is so freaking crazy is that is on the
04:16 - blockchain that is not a database that
04:18 - is on the decentralized blockchain
04:20 - that's freaking insane you can even
04:22 - reply to that comment so let's go ahead
04:24 - click reply so click reply let's add in
04:26 - a reply boom let's hit enter let's wait
04:28 - for that reply to go through boom look
04:29 - at that that reply just went through
04:32 - that reply is also stored onto the
04:34 - blockchain there's no server side there
04:36 - are no databases that's the freaking
04:39 - crazy part all of this information is
04:41 - stored on decentralized nodes it's
04:43 - literally stored on the solana
04:44 - blockchain that's just to me one of the
04:46 - coolest freaking things and it can't be
04:48 - deleted or removed it's permanently out
04:50 - there
04:51 - so you know be careful what you post on
04:53 - there because it won't ever go away you
04:55 - won't be able to delete it but that said
04:56 - that's the demo of the app i think this
04:58 - would be great for your portfolio and
04:59 - for your resume so when you build this
05:01 - out definitely put it on there you know
05:02 - if you go especially try to apply to
05:04 - solana jobs or rush jobs and they're
05:06 - looking for a lot of solana engineers
05:08 - this would definitely help you a lot
05:10 - with that said we're now going to start
05:12 - coding it up let's go all right let's
05:14 - start coding this up i'm going to open
05:16 - up my command line whoops it looks a
05:19 - little bit too big so we're going to
05:20 - make it a little bit smaller that's what
05:22 - she said just kidding here we go so i'm
05:24 - going to go npx create next and i'm
05:27 - going to pass it this e flag and i'm
05:29 - going to say with tailwind css and the
05:33 - project we're going to name it facebook
05:36 - solana let's hit enter and let's
05:39 - wait for this project to completely
05:40 - install okay and then once this project
05:43 - is installed what i can do is i can go
05:45 - ahead and open this project up all right
05:48 - so let's do ls i'm going to cd into this
05:50 - project so i'm just going to say cd
05:52 - facebook solana just like this now i'm
05:55 - here and i'm just going to go ahead and
05:56 - do code and do period okay and that's
05:59 - going to open this up in visual studio
06:01 - code if you don't have this code period
06:04 - functionality just open up your visual
06:06 - studio code and you can open it up
06:08 - manually as well and i'll show you that
06:10 - in just a second so my visual studio
06:12 - code has opened up right here okay so
06:15 - what you could do is if you couldn't
06:16 - open it up in that cool way you could
06:17 - just hit open and then find where you
06:20 - put this file all right and then you can
06:22 - just so see in here rafikaze facebook
06:24 - solana and you can just hit open so
06:26 - that's another way of doing it now what
06:28 - we're going to do is just we're just
06:29 - going to make sure our app and
06:30 - everything is running so i'm going to go
06:32 - ahead to my index file here and hit
06:35 - command j and i will simply just do yarn
06:38 - dev here and that will start up the
06:40 - server and then we're just going to go
06:42 - ahead on the right hand side open up
06:44 - chrome so we can see it okay and let's
06:46 - go to our local host 3000 and boom there
06:49 - you go our server and our app is up and
06:53 - running i'm going to make this one-third
06:55 - and make this two-third of the screen so
06:57 - you guys can see the code and the app
06:59 - better so this is our just basic setup
07:02 - to just get started and see the app
07:03 - running now we're going to start setting
07:05 - up all of the things that we need like
07:07 - sanity netlify solana and then once
07:10 - we're done setting up that whole thing
07:12 - we're then going to start jumping in
07:14 - coding and hacking this app up so i'm
07:16 - excited i'll see you there in a second
07:18 - all right so let's go ahead and install
07:20 - phantom wallet this is going to be very
07:23 - important we're going to need that for
07:24 - the rest of the build any solana related
07:27 - thing that you're going to need to do
07:28 - you're going to need to use phantom so
07:30 - let's just install it okay and get it
07:32 - over with all right phantom wallet it's
07:34 - the most beautiful the ui ux of this is
07:37 - like 100 times better than anything i've
07:39 - seen um i personally like this a lot
07:42 - more than a meta mask and yeah just a
07:44 - wonderful experience and then their app
07:46 - is phenomenal too as you can see here so
07:48 - just go here and install their chrome
07:50 - app and you can also download this on
07:52 - your on your ios device as well so let's
07:54 - hit download and then we'll scroll down
07:56 - here it says phantom for desktop and
07:58 - since i'm on chrome i'm going to go
07:59 - ahead and hit chrome here install okay
08:02 - so this came up we're going to hit add
08:04 - to chrome and we're going to say add
08:05 - extension all right here we go crypto
08:07 - wallet reimagined let's assume you don't
08:10 - have a wallet yet so let's just hit
08:11 - create new wallet we're gonna set our
08:13 - password we're gonna say i agree to the
08:15 - terms and service uh here's our secret
08:18 - recovery phrase which you should not
08:20 - show to anybody because then anybody can
08:23 - get your wallet so really bad do not
08:25 - show it to anybody keep it safe okay put
08:28 - it in a dashlane type of app or put it
08:30 - in a notes app and lock that notes um so
08:33 - you can always recover your wallet i'm
08:35 - gonna show it because i'm just making a
08:37 - dummy wallet here so it doesn't matter
08:39 - and then just go ahead and say i saved
08:41 - my secret recovery phrase hit continue
08:43 - okay and then you can open it up with
08:44 - this keyboard shortcut option shift p
08:47 - okay so we're done that's it now we
08:49 - should have a phantom wallet where is it
08:51 - it's in our extensions right there we're
08:53 - gonna pin it so it's top here so now i
08:55 - can actually just click this phantom
08:57 - wallet here
08:58 - and it should basically show that you
09:00 - have zero dollars worth of anything in
09:02 - here and your wallet is up and running
09:03 - you can send this wallet address to
09:05 - somebody you can actually send solana to
09:07 - this you know receive solana or whatever
09:10 - you want here you can also buy things
09:12 - like usdc uh if you buy nfts they're
09:15 - gonna go in your collectibles here so
09:17 - it's pretty freaking awesome wallet and
09:19 - you can create new wallets too and name
09:21 - them but for now we're just going to
09:23 - leave this as is this is just part of
09:24 - the setup and congratulations you've
09:26 - installed phantom all right so one more
09:28 - thing we're going to do here with our
09:30 - wallet is uh settings at the bottom
09:32 - right so right there hit settings and
09:34 - scroll down we're going to go over
09:36 - change network so let's click that and
09:38 - we're going to choose devnet here so
09:40 - let's go ahead and select devnet so
09:42 - we're going to be kind of in developer
09:44 - mode okay so just make sure you're on
09:46 - devnet and then you should be good
09:48 - alright and the next thing we're going
09:49 - to do so on devnet you you're not going
09:51 - to be dealing with real money you're
09:53 - going to be dealing with fake money okay
09:55 - and that's perfect for when you're
09:57 - developing in test mode because you
09:58 - don't want to be using real money yet
10:00 - we're also going to go to soulfaucet.com
10:02 - here and uh here we're gonna get our
10:05 - wallet address so i'm gonna go ahead uh
10:07 - copy this wallet address i'm gonna paste
10:09 - it and basically let's just say i want
10:11 - like i don't know 12 sold to my devnet
10:13 - so i'm going to say 12 and i'm going to
10:15 - choose devnet here oh it says too large
10:18 - no problem let's go ahead pick nine go
10:19 - ahead and hit devnet successful airdrop
10:22 - successfully dropped and was it so i'm
10:25 - imagining that we'll soon see it here
10:28 - okay so it's probably gonna take like
10:29 - between 10 to 20 seconds and then
10:32 - it should pop up and we should have it
10:34 - okay so let's keep an eye out on that
10:36 - you know what while i'm here i might as
10:38 - well just send one more and view this
10:40 - transaction on solana just to see on
10:42 - soul explorer takes for this so the
10:44 - second one was apparently successful
10:47 - perfect do we have it yet so while i was
10:49 - waiting um because it was taking too
10:51 - long i just decided to go ahead send
10:52 - myself like two airdrop and then hit
10:55 - devnet and then that actually came to my
10:57 - wallet pretty quickly so now i have uh
11:00 - two and now i have four so like when i
11:02 - was sending myself the big chunks it
11:04 - wasn't coming through but when i sent
11:05 - myself like small amounts it actually
11:07 - comes through like almost
11:08 - instantaneously which is kind of nuts
11:11 - but yeah so now we have four sole 534
11:14 - just more than enough to do what we need
11:16 - to do we're not going to need that much
11:17 - really but uh this should be a good
11:19 - start now we're up to six soul so just
11:21 - keep sending yourself twos if the nines
11:23 - and the tens or the sevens are not
11:25 - working for you okay with that said now
11:27 - your phantom wallet is set up it's on
11:29 - the devnet and you have money to play
11:32 - with so this is great our wallet is not
11:34 - set up let's move on all right now what
11:36 - we're gonna get ready to do is we're
11:37 - gonna get ready to deploy this app and
11:40 - we're going to deploy it with netlify so
11:43 - we're just going to set that up even
11:44 - though we're going to deploy it later
11:46 - we're just going to finish doing the
11:47 - setup right now so what i want you to do
11:50 - is click the link in the description
11:51 - below that we have for netlify okay
11:54 - we'll pop up the link on the screen here
11:56 - as well so you could see it so basically
11:58 - just go to ntl dot fyi slash clever hit
12:02 - enter okay now i'll bring you to this
12:05 - page which is netlify's landing page
12:08 - okay and then what i want you to do is
12:09 - just simply go ahead and hit get started
12:12 - for free and then just sign up okay so
12:14 - if you have github i like to just sign
12:16 - up with github you can also sign up with
12:18 - email and it'll ask you for your
12:19 - username and password put that in you
12:21 - can use this method for future logins so
12:23 - you can click that and for me because i
12:25 - have a mobile app on github it sent me a
12:28 - request a notification on my phone so
12:30 - i'm gonna go ahead and authorize the app
12:32 - with two factor authentication with the
12:34 - github app on my mobile phone now i'm
12:36 - simply just going to choose approve here
12:38 - on my app and look at that boom i am
12:41 - absolutely invisible and blurred out of
12:44 - my freaking mind i apologize about that
12:47 - and we're logged in to netlify right so
12:50 - i'm on the netlify homepage everything
12:52 - looks beautiful and ready to go i am
12:54 - completely set up to rock and roll so
12:57 - this will come back to later so in terms
12:59 - of the basic bare bones set up for
13:01 - netlify we are done right now what's up
13:03 - guys lance from the future here and i
13:05 - wanted to walk you guys through on how
13:06 - to set up and install sanity so you guys
13:08 - just finished installing phantom what
13:10 - you guys need to do next after you have
13:12 - your whole next app and tailwind
13:14 - installed you want to also make sure you
13:17 - make a new folder oops you also want to
13:18 - make sure you make a new folder within
13:20 - your project and you want to studio the
13:23 - studio folder is where sanity where our
13:26 - sanity is going to be initialized so
13:28 - what you want to do next is cd into the
13:30 - studio and head over to sanity.io
13:33 - cleverprogrammer so that you can use
13:34 - their nice code so i have that over here
13:36 - head over to this website what you'll
13:38 - see is these two instructions to get the
13:40 - free boosted plan and all you have to do
13:42 - is just copy this so for me i already
13:44 - have extended the sanity cli tool
13:46 - installed all we need to do now is just
13:49 - copy this coupon send it the init
13:51 - coupon clever programmer if you do that
13:53 - you get the free boosted plan okay
13:56 - awesome so i'm gonna put that into the
13:57 - terminal hit enter awesome i already
14:00 - have a sanity account and i'm going to
14:01 - call my project amazon clone blockchain
14:04 - i'm sorry not amazon i'm going to call
14:06 - my project facebook clone blockchain go
14:08 - ahead and hit enter we can use the
14:10 - default data that's our project output
14:12 - and we can select clean project with no
14:15 - predefined all right there we go it
14:17 - looks like it's done it's done
14:19 - initializing i think if i log in to log
14:22 - in real quick there it is you can see
14:23 - the facebook clone blockchain because we
14:26 - have sanity setup and we're good to go
14:28 - all you need to do now is to run our
14:30 - studio you can just say sanity start
14:33 - okay so now it's done every time you
14:35 - want to look at your sanity studio all
14:36 - you have to do is go to localhost and go
14:38 - instead of 3000 it's going to be 333.
14:42 - this is the port that they use and if
14:43 - you connect to it google
14:45 - awesome cool and it's empty which makes
14:48 - sense so let's actually take this moment
14:50 - to set up those schemas so i'm gonna go
14:52 - into the studio folder as you can see we
14:53 - have all the files now that it's
14:54 - initialized what we need to do is go
14:56 - into your schemas.js if you look here we
14:59 - let's go ahead and clean a lot of these
15:00 - comments out cool so now it's cleaned
15:02 - out the idea here is to create the
15:05 - actual user schema and then add it in
15:09 - this array so what does that mean we're
15:11 - gonna have to make a new file in this
15:13 - folder and say user scheme dot js yeah
15:17 - user schema.js okay cool and to set up
15:21 - your own schema you can say export const
15:24 - the name of it and set it equal to an
15:26 - object and remember this is the schema
15:29 - file for a user so that means the name
15:32 - of this will be users the type will be
15:34 - just document title can be users that
15:37 - will be and here are the fields or
15:39 - essentially the what we'll call like the
15:41 - keys of the object or the document so
15:45 - i'll save fields here and the first one
15:47 - the first thing that we want to keep
15:48 - track of when we're talking about a user
15:50 - document is going to be the name what is
15:52 - that user's name so i want to say name
15:54 - the name of the name will be name and
15:55 - then for the type it will be a string
15:58 - and then the title be capital cool so we
16:01 - have another another field that we care
16:02 - about and this one will be that person's
16:05 - wallet address remember we're going to
16:07 - be using phantom later on in this
16:08 - project you guys just installed this is
16:10 - where we also need to store their wallet
16:12 - address and that will be stored as a
16:13 - string so make sure you specify the type
16:15 - okay and the title is usually just the
16:17 - same thing as name but just with the
16:18 - capital letter that's more for our
16:20 - studio i'll say wallet okay and last but
16:22 - not least i want to be able to save the
16:25 - image url with the user so i'll do that
16:29 - by saying name is profile image and the
16:32 - title will be capital file okay cool go
16:36 - ahead and hit save and make sure you're
16:38 - doing export cons because what you can
16:39 - do now is when you go to your schema.js
16:42 - we can do an import user schema from
16:46 - user schema so if we save our studio
16:48 - shouldn't be empty now it should
16:50 - actually show up the users rebuild
16:52 - bundle see where we're able to add it oh
16:55 - that's right we also have to make sure
16:56 - in order to do that we have to put a
16:58 - user scheme in here and since there's
17:00 - one i'll just format it like that nope
17:02 - not all caps there we go now that should
17:04 - do it we're importing user schema and
17:07 - passing it in here someone with this
17:08 - load i'll be right back hey there we go
17:10 - guys so now we have user obviously we
17:12 - don't have any users yet but later on in
17:14 - this video i'm going to show you guys
17:15 - how to set up those routes and create a
17:18 - user for each one that logs in sounds
17:19 - good we have the user schemas done last
17:22 - thing for this setup we're just gonna
17:23 - need to create a new folder this is what
17:25 - we usually call our lib folder and
17:27 - within that lib folder we're gonna have
17:29 - our sanity yep and our other sanity.js
17:32 - this is where we're going to import that
17:33 - client
17:34 - import sanity client from at sanity
17:38 - client if you don't see that you just
17:40 - make sure you have to ins at sanity and
17:42 - you might be missing a package but if
17:44 - you do you're good to go and now that
17:46 - i'm thinking about it while we're here
17:47 - you guys might have done this with kazi
17:49 - but for me i have to set up a dot env so
17:52 - in my.emv this is where in my.vnb this
17:55 - is where i'm going to put my project id
17:57 - and sanity token so that's what i'll
17:59 - call it sandy sanity project underscore
18:01 - id and set it equal to whatever it is
18:04 - then we do sanity underscore token and
18:07 - to get these two things all to do is go
18:08 - to your sanity you can click that
18:10 - project which is facebook blockchain and
18:12 - look at that project id is already there
18:14 - so i'm gonna click paste there's the
18:15 - project id to get the token you actually
18:17 - need to go to api and add an api token
18:20 - you can name this whatever you want you
18:21 - just name it token make sure you click
18:23 - editor hit save boom it's gonna generate
18:26 - a unique api token yours will look
18:28 - completely different from but just go
18:29 - ahead and paste it on there save and go
18:32 - back to your standard insanity.js let's
18:34 - finish building this up so to finish
18:36 - building it out you just say export
18:37 - const client we're going to be using
18:39 - this client later on in the video to set
18:41 - up our to create a user and get a user
18:44 - but for now what we want to do here is
18:46 - set up the client so we say the project
18:48 - of id is going to be the process dot env
18:51 - dot sanity project underscore id cool
18:54 - the data set we said we'll set it to
18:56 - production and the api version you can
18:58 - set that to b1 okay from there we can
19:00 - just set up the token which will be
19:02 - similar process.enb dot sanity believe
19:05 - it's underscore token okay last but not
19:07 - least use cdn this will be set to false
19:09 - cool make sure you're exporting the con
19:11 - and we are good to go with sanity i'll
19:13 - be sending it back to qazi and i'll see
19:15 - you guys later for the next part all
19:17 - right so now we're gonna install solana
19:20 - and russ on our computer and get that
19:22 - whole thing set up so here's what i'm
19:23 - going to just let's just go to google
19:25 - we're just going to type in install
19:27 - solana anchor okay and
19:29 - anchor is something i'll talk about in a
19:31 - second but basically it think of think
19:35 - of javascript and react and how react
19:37 - makes javascript easier when you're
19:39 - writing solana code you have to write in
19:41 - a language called rust rust is pretty
19:44 - painful to write in so it's better to
19:46 - actually use a framework called anchor
19:48 - anchor will make writing rust easier
19:51 - okay and don't worry we'll learn this
19:53 - together and do this all together okay
19:54 - so don't freak out yes it's a new
19:56 - language but it's very popular and why
19:59 - we're choosing the solana chain for this
20:00 - project is solana chain is the fastest
20:03 - experience if we did this on solidity
20:05 - good luck you'd be waiting like five
20:07 - minutes for each comment to show up with
20:09 - solana it shows up fast it's the fastest
20:12 - chain and i think it's the best user
20:13 - experience by far so here we go now we
20:16 - gotta install rust so i'm gonna go ahead
20:18 - i'm going to copy this and i'm just
20:20 - going to open up my command line okay so
20:21 - let's open up command line and i'm just
20:23 - going to go back to like my home page
20:25 - okay and we're going to start installing
20:27 - all right now we're just basically going
20:28 - to write these lines that we see here on
20:30 - the right hand side and we're going to
20:32 - write them one by one so we're gonna
20:33 - start off with this curl one okay so uh
20:35 - let's go ahead highlight it and i'm
20:37 - gonna copy it do not hit the copy button
20:40 - just copy it manually or right click and
20:42 - copy whichever one you want and then
20:43 - we're gonna go to my command line and
20:45 - i'm just gonna hit paste and let's hit
20:47 - end okay so that should be downloading
20:49 - it
20:50 - now let's make this a little bit smaller
20:52 - all right we're gonna go ahead and
20:54 - choose the first one so we're gonna
20:56 - proceed with installation which is gonna
20:58 - be the default installation okay so
21:00 - let's go ahead and hit one on this and
21:02 - hit enter okay it's installing it make
21:04 - this a little bit smaller
21:06 - okay so this installation is gonna take
21:08 - some time but once this is done
21:11 - the next commands that we're gonna be
21:12 - looking at are our source
21:15 - and then rust up component okay so
21:17 - perfect so to configure your current
21:19 - shell run this so just copy this exact
21:22 - thing oh actually copy this entire thing
21:25 - right here and we're just gonna hit
21:26 - enter okay so perfect then the last line
21:28 - we're going to write is that one rest up
21:30 - component addressed fmt and hit enter
21:33 - perfect so it says component russ smt
21:35 - for target blah blah is up to so
21:38 - this means we're done installing rust on
21:41 - our computer all right now so to prove
21:44 - that we have rust installed and it's
21:47 - working here's what we want to do
21:49 - essentially we want to be able to write
21:50 - the simplest hello world program in rust
21:53 - then we're just going to try running it
21:54 - okay so i'm going to just do vi main.rs
21:58 - okay you could also just make a new file
22:00 - called main.rs from your visual studio
22:02 - code if you feel more comfortable i feel
22:04 - comfortable being able to do it from vim
22:06 - so i'm gonna do that but if that's
22:08 - annoying for you and you don't know how
22:09 - to use them it's okay just literally
22:11 - make this file
22:12 - with
22:13 - visual studio code and you should be
22:15 - fine i'm gonna go in here i'm just gonna
22:17 - write this okay we're gonna say print
22:20 - line and we're gonna say
22:22 - hello
22:23 - youtube instead of hello world okay and
22:26 - that's i'm going to close it out and i'm
22:27 - going to exit with shift zz and then um
22:30 - then the next step next thing that i
22:32 - need to do is uh write this command here
22:35 - rust
22:36 - main.rs rustymain.rs actually compile it
22:39 - i'm going to go
22:41 - russcmain.rs and i compile this file
22:43 - that i created now it's compiled and now
22:46 - i can actually just do dot slash main
22:49 - and actually just run it and say hello
22:51 - youtube perfect if you've gone this far
22:54 - great job that means you have rust
22:56 - actually installed on your computer and
22:57 - it's fully working fantastic with that
23:00 - said we're gonna keep going so now we're
23:03 - gonna go back and we're gonna go ahead
23:05 - and actually install solana here so i'm
23:07 - just going to copy this you can hit that
23:08 - copy clipboard button too here that's
23:10 - fine line over there and i'm simply
23:12 - going to paste it and let's hit enter
23:15 - this will install solana on
23:18 - mac os and linux okay look at the
23:21 - instructions on how to do it for windows
23:23 - as well but i believe that you should be
23:25 - able to do it in a similar similar way
23:27 - okay it's installing here it's
23:29 - extracting everything once we have salon
23:32 - installed we're gonna start working and
23:35 - to get our anchor and everything
23:37 - installed because we're going to need
23:38 - that for our project okay there we go
23:41 - alana is
23:42 - called adding export path
23:45 - users
23:46 - okay great close and reopen your
23:48 - terminal
23:49 - so basically what we're going to do is
23:51 - instructions it says run the following
23:53 - in your existing shell
23:55 - so i'm going to go ahead copy this
23:57 - paste it and i'm going to hit enter now
24:00 - it's added the things that it needed to
24:02 - add to the path that way whenever run
24:04 - these files or i need to look for these
24:06 - files my terminal and my command line
24:08 - tools are able to find it because it's
24:10 - in my path and it's a known path
24:14 - now what we're going to do is we're
24:15 - going to go ahead and install anchor so
24:17 - let's go ahead copy this line here go
24:19 - over to my command line paste it hit
24:21 - enter
24:22 - run the same command but just add the
24:25 - word sudo at the start type in your
24:27 - computer password and just try
24:29 - installing it again boom this time it
24:31 - looks like it installed without a
24:33 - problem so that's a great sign thing
24:34 - we're gonna need is we're gonna now add
24:37 - a cargo
24:39 - let's go ahead copy this here
24:41 - paste and hit enter and it should work
24:43 - installing this
24:45 - if you're on
24:46 - you're gonna also need to add and run
24:49 - this command next okay um anything else
24:52 - you don't need to run this command okay
24:54 - this is just for linux
24:56 - for us if you're on a mac like after
24:58 - this you're going to be done and pretty
25:00 - much ready to rock and roll look at that
25:02 - serum decks auction house metaplex
25:05 - and all kinds of useful stuff here with
25:07 - anchor that's going to make our
25:08 - development much much much easier and
25:10 - really the purpose behind the anchor is
25:12 - it makes your development a lot simpler
25:15 - so there's a bunch of stuff with solana
25:17 - and rust that worry about especially
25:20 - with native rust like serialization and
25:22 - deserialization of your code that's not
25:24 - fun
25:25 - a lot of them in the solana community
25:27 - call it like eating class but if you do
25:30 - it with anchor it's going to simplify
25:31 - and handle a lot of that for you so
25:34 - basically it's going to make your life a
25:35 - heck of a lot easier so you're not going
25:38 - to really need to worry about all of
25:39 - that stuff so art is compiling and our
25:42 - installation is
25:44 - done
25:45 - here so let's wait for that
25:47 - looks like that was installed perfectly
25:49 - now all we need to do is just go ahead
25:52 - check out which
25:54 - version of anchor we have
25:56 - and that will verify if we have
25:58 - installed
25:59 - this properly it looks like the anchor
26:02 - cli is indeed installed correctly okay
26:06 - so we have verified that and that is
26:08 - perfect let's also go ahead and verify
26:11 - that we have installed solana the exact
26:13 - same way and we have installed it
26:14 - correctly so let's take a look i'm just
26:16 - going to do solana
26:18 - version here boom looks like solana and
26:21 - anchor were both actually installed
26:24 - completely correctly but that's a great
26:26 - sign
26:26 - all right so now what we want to do
26:28 - after we have everything installed with
26:30 - solana is we need to go ahead and set up
26:32 - our own wallet so what i'm going to do
26:34 - in order to do this is we're just going
26:36 - to go ahead say solana and i'm going to
26:38 - say kegen new and what this will do is
26:41 - actually generate a new wallet for me
26:43 - and uh let's see what it says here this
26:45 - wallet by the way we're making because
26:48 - we're going to need this to sign off our
26:50 - contracts like for example when
26:52 - somebody's making a facebook post so
26:53 - this is for a coding side okay so i'm
26:55 - gonna just leave this empty and i'm
26:56 - gonna hit enter cool so boom it just
26:58 - gave me a public key which you can copy
27:00 - if you want all right save this seed
27:02 - phrase and your to recover your new key
27:04 - pair you can also save this here as well
27:07 - okay so i'm just going to go ahead copy
27:08 - this you could put it wherever you want
27:10 - okay i'm just going to kind of do it in
27:11 - a really stupid way right now and i'm
27:13 - just going to put it in my coding file
27:16 - right here okay but please do not do
27:18 - that do not put this in your code file
27:20 - put this somewhere safe okay so let's go
27:22 - here boom and i'm going to put that
27:24 - right there just so i have it so keep
27:26 - these safe next thing that we want to do
27:28 - is we want to connect this wallet that
27:30 - we created to the devnet okay because we
27:33 - don't want right now this one is not
27:34 - going to be on the main net this one
27:36 - needs to be on the devnet what i want to
27:37 - do here is i'm just a solana config and
27:39 - it says set url and here's https
27:44 - api.devnet.solana.com make sure you have
27:46 - the https colon slash uh written out
27:48 - correctly here and then just hit enter
27:50 - boom there we go just gave us our pc url
27:53 - a websocket url and it says commitment
27:55 - level confirmed so it's confirmed that
27:57 - this happened and it actually even gave
27:59 - me a key pair path which is in my config
28:01 - solana id.json so this is actually
28:04 - stored on my local computer perfect
28:06 - config file it tells me where it's at
28:08 - it's a yaml file uh yml at the end all
28:11 - right now you can actually do look at
28:13 - this solana makes it so freaking clean
28:15 - look at this i can actually check my
28:17 - balance by doing salona balance look at
28:19 - that i get zero soul it's telling me
28:21 - exactly what i have and then i can also
28:22 - do solana address and this will actually
28:25 - tell me uh what my wallet address is
28:28 - right so boom this is my public address
28:29 - of the wallet what's so nice about this
28:32 - is whenever i'm working with any other
28:34 - tool or whatever their command line
28:36 - tools are really bad or you have to pass
28:37 - some weird flags and things like that
28:39 - this is just so clean so on a balance
28:41 - salon address and boom it just shows you
28:43 - everything so far from a developer
28:45 - experience perspective i mean i'm really
28:47 - enjoying it i hope that you are as well
28:49 - from watching this let's keep going now
28:51 - the last thing i need to do is i need to
28:53 - like airdrop some amount of soul so i
28:56 - want to airdrop some fake soul into this
28:58 - okay and just so you guys don't know
29:00 - clearly what solana is solana offers a
29:02 - really beautiful user experience and
29:05 - it's really fast it's one of the fastest
29:07 - blockchains in the world that's why
29:09 - we're using solana just because it makes
29:11 - a really seamless amazing experience and
29:14 - if you were to go on coin market cap or
29:15 - something like that you'll see it's one
29:16 - of the top 10 coins it has been for a
29:19 - while now and it's one of the fastest
29:20 - growing i think right now in the
29:22 - developer world it's probably right
29:24 - behind ethereum and maybe one day who
29:26 - knows it might catch up and actually win
29:28 - so we'll see um let's go ahead and get
29:31 - some fake soul air dropped so i'm gonna
29:34 - go ahead and say solana airdrop one and
29:37 - let's hit enter requesting airdrop of
29:40 - one sole finalizing and so beautiful
29:42 - right with the solidity you have to do
29:45 - all kinds of weird stuff to create a
29:47 - wallet to airdrop it here so nice and
29:50 - easy with two lines of code we have it
29:52 - we have this air drop so i'm gonna say
29:53 - solana balance and uh it actually does
29:56 - tell me that i have one balance and if i
29:59 - wanted more i can just air drop it again
30:02 - i wish i could do this on the main net
30:03 - that would be nice i'd become very rich
30:05 - very very quickly so there we go we have
30:07 - to sold whoops what the heck did i just
30:09 - do there we got two sole so we're good
30:11 - our wallet is ready to go uh and now
30:14 - we're gonna go ahead from here all right
30:16 - now what we're gonna do is we're
30:17 - actually gonna initialize this project
30:20 - using anchor so we're ready to rock and
30:21 - roll okay so going over i'm going to
30:23 - create a new folder i'm going to call it
30:25 - call it whatever you want like for
30:27 - solidity normally we would call it like
30:29 - smart contract you could still kind of
30:31 - call it here i'm just going to call it
30:32 - programs because in solana that's kind
30:34 - of how they name things now what i'm
30:35 - going to do for my command line is i'm
30:38 - going to cd into programs and then in
30:41 - here i'm just going to say anchor init
30:43 - and then do period because i want to be
30:45 - initializing that anchor right here so
30:47 - just hit enter now we're going to start
30:49 - the installation process so we got this
30:51 - error let's fix this real quick all
30:52 - right actually so with anchor you
30:54 - actually have to give it a project name
30:56 - you can't just say period here so what
30:59 - i'm going to do is i'm going to go ahead
31:01 - delete this folder i just created in
31:03 - programs and we'll back out or oops
31:06 - that's annoying okay so i'm just going
31:08 - to go to facebook solana all right the
31:10 - main folder that the project is in and
31:12 - then here i'm just going to say anchor
31:13 - in it and we're just going to say
31:14 - programs and hit enter all right so if
31:16 - it was giving you errors like it was
31:18 - giving me apparently my command line
31:20 - that i installed with here was detecting
31:23 - when i wrote solana but when i was
31:25 - writing solana in my vs code command
31:27 - line it was not detecting it i tried
31:29 - restarting and opening up visual studio
31:31 - code again it still didn't work so what
31:33 - i decided to do is in my visual studio
31:35 - code command line i just went ahead and
31:37 - installed rust from scratch then copied
31:40 - and pasted this command source then the
31:42 - rest up command but then that installed
31:44 - rust for me then i installed solana by
31:46 - copying this command pasting it in and
31:48 - writing it here that installs solana so
31:50 - now when i write solana it does pull it
31:52 - up perfect and now solana is working
31:54 - solana balance is working and now we're
31:56 - good to go so what we're gonna do now is
31:58 - we're gonna just go ahead and say inet
32:01 - and i'm just gonna say programs
32:02 - basically it just created this folder
32:04 - right here if you can see it boom it's
32:07 - called programs it's initializing it
32:09 - with anchor and now when i go inside
32:11 - look at that how nice that is anchor
32:13 - just made all of these nice things for
32:16 - us so that was super easy all right now
32:18 - that installed everything let's click
32:20 - programs here and inside of programs
32:23 - you'll see i have a folder called
32:24 - programs go inside there inside there's
32:26 - another program and then click source
32:28 - and go to lib.rs
32:31 - okay this is where we're going to be
32:32 - writing our smart contract so think of
32:34 - it like this the entire thing is your
32:35 - app okay or at least this is your front
32:37 - end and then this program thing that's
32:39 - your smart contract portion now that
32:41 - we're inside of this lib.rs we're going
32:44 - to go ahead and make a structure for our
32:47 - app okay but here's what i'm going to do
32:48 - i'm going to create a post account
32:50 - structure okay and we're going to be
32:52 - using something called struct which is
32:54 - just like think of it kind of like
32:55 - you're defining the shape of an object
32:57 - in javascript you have these objects
32:59 - right things go inside of them so this
33:01 - here is you're just defining the shape
33:03 - of it what that object would look like
33:04 - so now i'm going to do account and
33:06 - whenever you're trying to store data or
33:09 - information on chain on solana do
33:11 - something like this where you're gonna
33:12 - do hashtag this weird bracket thing and
33:14 - then account you're just letting it know
33:16 - this is an account okay cool let's go
33:18 - down and let's write our our code oh wow
33:21 - that is super cool that github autopilot
33:23 - can even understand rust code and solana
33:26 - code which is super nice but um yeah
33:28 - we're not going to be making this but
33:30 - this is what ours will kind of look like
33:32 - what we're about to do so we're going to
33:33 - say pub struct and we're going to say
33:35 - post account all right and then the
33:37 - first thing is going to be our signer
33:39 - address so i'm going to say we're just
33:41 - going to call it authority so who has
33:43 - authority of this post we're going to
33:44 - say pub key so just to understand what a
33:46 - post account would be is hey what is the
33:49 - account that made this post on facebook
33:52 - who made this post this is what this is
33:54 - gonna uh host and again what's so
33:56 - freaking cool about this you know we
33:57 - haven't talked about this but this is
33:58 - the first freaking project where we're
34:00 - gonna store the data on a blockchain so
34:03 - literally you don't even have a back end
34:05 - anymore you don't have a database yet
34:06 - you can store all your information that
34:08 - is freaking cool right you have to pay
34:10 - for anything you have to sign up for
34:11 - anything you can store this data on this
34:13 - worldwide ledger all right next thing
34:15 - we're going to need is we're going to
34:16 - need text so i'm going to say text and
34:18 - this is going to be of type string so
34:20 - the first thing is type hub key which is
34:22 - your public key next up we're going to
34:24 - have poster name and then we're also
34:27 - going to have a poster url this is going
34:29 - to be a string and we're going to go
34:31 - ahead and go comment count and i'm gonna
34:34 - go use six four on this right we're
34:37 - gonna need a post index and i'm gonna
34:40 - need a post time so when the post
34:42 - happens we're gonna say i six four when
34:44 - it comes to the post accounts truck
34:46 - that's all this is the information
34:48 - that's going to be stored so we're just
34:49 - kind of defining a data structure here
34:51 - next up what we're going to be building
34:53 - is one more after this okay so let's go
34:55 - ahead and work on that all right now
34:56 - what we're going to do guys is i'm going
34:58 - to go ahead delete this right now okay
35:00 - we're going to write this from scratch
35:01 - so remember when i'm making something
35:04 - like this right so i'm gonna have this
35:05 - like this is just a struct simple stuff
35:07 - so i'm literally just going to say
35:08 - account up here when i have something
35:10 - more complicated that i need to do i'm
35:12 - actually gonna say derive accounts like
35:15 - this okay and then now underneath here
35:17 - i'm gonna make a struct and i'm gonna
35:19 - create state i'm gonna pass an info here
35:21 - and then we're gonna do the following so
35:23 - i need to create count block okay and
35:25 - this account block is gonna have init i
35:27 - will give it a couple of things so let's
35:29 - go here let's go like this i'll give it
35:32 - i'll initialize it i'm going to give it
35:34 - certain seeds so the seeds that i'm
35:36 - going to give it i'm going to put it in
35:37 - bytes so i'm going to say state and then
35:39 - i'm just going to say turn that to ref
35:42 - like this okay but there we go so that's
35:44 - gonna automatically generate a random
35:46 - seed every time like this state variable
35:49 - is created so imagine like i want to
35:51 - create a state that's unique every
35:52 - single time well if for whatever reason
35:55 - my state ends up being the same as your
35:57 - state bump is this algorithm that'll
35:59 - just like uh make it unique when it
36:01 - matches the same it'll just go nope this
36:03 - is the same one so give me just another
36:06 - number or another code so that it
36:08 - doesn't match the previous one so
36:10 - essentially it'll allow me to always
36:12 - have a unique id okay kind of like in
36:14 - databases i also need to give it a pair
36:17 - and so for pair i'm just gonna say it's
36:18 - gonna be the authority okay and then
36:20 - we'll go here and space is going to be
36:23 - we're gonna use size of okay for this
36:26 - and we're going to say it's going to be
36:27 - the size of the state account so we
36:30 - haven't made the state account yet but
36:32 - we will make it soon so we have a post
36:34 - account but we'll also make a state
36:36 - account soon and i'm just going to say
36:37 - plus 8. going underneath here this is
36:40 - gonna be the state variable and this is
36:42 - gonna have the special thing called
36:43 - account which is gonna have info and
36:46 - then we're gonna say state account if
36:48 - some of this stuff doesn't make sense to
36:50 - you right now just totally okay this has
36:52 - to do with lifetimes inside of russ and
36:54 - anchor this will make more sense as we
36:56 - go along for now just trust me and just
36:59 - go along these things will get clear as
37:01 - we move on this whole account thing i'm
37:04 - just going to move it to one line just
37:05 - to show you something for now this
37:07 - entire account thing right here is just
37:09 - for this specific variable state here
37:12 - i'm giving i'm saying initialize the
37:14 - state this state should have the
37:16 - specific seed here the state should have
37:18 - this bump algorithm and a pair so that's
37:21 - where that's being used okay so i just
37:22 - wanted to clarify that this block of
37:24 - code goes along with this so we got our
37:27 - state now let's go down the other thing
37:29 - that we're going to need is the
37:30 - authority okay so the authority this is
37:32 - the signer who has actually paid the
37:35 - transaction fee so let's move this let's
37:37 - go down here let's move this back i'm
37:39 - going to say account okay we're going to
37:41 - go mute here and then i'm going to go
37:43 - authority like that and the signer is a
37:45 - special reserved word that we have and
37:48 - that allows us to get access to the
37:49 - signer and info is the lifetime thing
37:52 - that i mentioned okay so we're just
37:53 - gonna pass that right there so this is
37:55 - the authority variable that we're using
37:57 - here as well okay and this mute here
37:59 - that i wrote that just means this is
38:01 - immutable meaning that we can change
38:03 - authority authority can be me and then
38:06 - next time it could be somebody else and
38:07 - next time it could be somebody else so
38:08 - it's it's something that's mutable it's
38:10 - some it's something that's changeable
38:12 - all right let's put a comma here let's
38:14 - go down now we're gonna make our system
38:16 - program so don't really need to have
38:17 - this comment here that's just for for
38:19 - you we're gonna say system program
38:22 - things need to be snake cased in when
38:24 - you're writing in rust in an anchor so
38:26 - we're gonna do system underscore program
38:28 - and uh here for system program i'm just
38:30 - gonna say unchecked account and leave
38:33 - that as this now i do know that
38:35 - unchecked accounts can be a security
38:36 - risk but this is where just doing this
38:38 - as a demo educational purpose is
38:40 - building this so for one of your first
38:42 - solana apps it should be fine when you
38:44 - want to move it to production you need
38:46 - to make it more secure and then we'll
38:48 - have our token program portion okay so
38:50 - basically here i'm going to make our
38:52 - token program and we're just going to be
38:54 - a program take an info and it's going to
38:56 - be of type token and right above this
38:59 - i'm going to say this is going to be an
39:00 - account it's going to have a constraint
39:03 - and that constraint is going to be the
39:05 - token program where the token program
39:07 - key is
39:09 - this token this token's id so i've put
39:12 - this constraint and now i have my token
39:14 - program set up is uh now done and we
39:16 - just got to make a couple of more things
39:19 - and then we should be done with this
39:20 - entire slana or this rust
39:23 - smart contract and this is really going
39:25 - to be one of the most difficult and kind
39:27 - of confusing parts but just hang in
39:29 - there with me we're going to build it
39:30 - out step by step and once you're done
39:32 - with this the rest of the project's
39:33 - going to be smooth sailing from there
39:35 - all right so now we're just going to
39:36 - make the state account that we created
39:38 - over here so i'm going to just scroll
39:40 - down right over here we're gonna go and
39:42 - say this is gonna be an account block
39:44 - gonna be simple so i'm just gonna do my
39:46 - hashtag bracket and then i'm gonna have
39:48 - a pub struct and we're gonna say it's
39:50 - gonna be a state account just like this
39:52 - and i'm gonna say that first this is
39:55 - gonna be the signer address so we're
39:56 - gonna just say authority i'm gonna give
39:59 - it a pub key so that's great and then
40:01 - we're gonna also have our post account
40:04 - so how many posts are here so i'm gonna
40:06 - say post count and it's gonna be a
40:08 - u64 and for those of you who are nerdy
40:11 - and want to know exactly what this is
40:13 - this is just an unsigned integer that's
40:15 - 64-bit so basically you're just gonna
40:17 - store numbers in here and we're just
40:20 - creating the struct um we're defining
40:22 - state account here okay and we're sorry
40:24 - we're using state account here but we're
40:26 - defining this struct right there all
40:28 - right guys so we just finished up our
40:31 - create state our state account let's go
40:33 - ahead and build our create post so this
40:36 - one is gonna also have some more
40:38 - complicated functions inside of it so
40:40 - we're going to basically say this is
40:41 - going to be a derived accounts block and
40:44 - uh here i'm going to create it as a
40:46 - struct i'm going to do create post so
40:48 - i'm going to create my state variable
40:51 - here and it's going to be account info
40:53 - and then it'll be state account so i'm
40:55 - basically telling my account that you're
40:57 - going to be of the state account type
41:00 - okay so this struct that we created here
41:02 - is going to be of the same type here i'm
41:03 - going to say accounts will go and this
41:06 - is going to be our standard stuff so
41:08 - this is going to be of type account the
41:10 - state and it's going to be the same as
41:11 - the one that we did before already so
41:13 - it's going to be mute it's going to
41:14 - mutable seeds is going to be
41:17 - bytes of state i'm going to say as ref
41:20 - and then let's get out of this
41:23 - right there i'm going to get out of the
41:24 - seeds and then we're going to pass in
41:26 - bump okay no need to add pair for this
41:29 - and we also don't need to initialize
41:31 - this so our state is good to go this
41:33 - will authent this here will authenticate
41:36 - our state account the next thing that we
41:38 - actually need to do is we need to
41:40 - authenticate the post account okay so
41:42 - how we're going to actually do that oops
41:44 - let's bring that in here so how we're
41:46 - going to do that is we're going to say
41:48 - it's going to be an account we'll
41:50 - initialize this break it up onto new
41:53 - lines i will say seeds and we're going
41:55 - to do post as ref and we're going to do
41:57 - state and just before we continue on
41:59 - this guys but i want you to understand
42:02 - is uh we're just gonna be using seeds is
42:04 - always used to create a unique seed okay
42:08 - so it's like think of it like a unique
42:10 - id in a database so we're basically
42:12 - using anchors like built-in mechanisms
42:14 - to create a unique seed for us and the
42:17 - logic that we're using behind this
42:19 - specific seed is um we're going to be
42:21 - using
42:22 - um the post okay so we're going to be
42:25 - using the post as a seed and index of
42:29 - post as seed okay so all that basically
42:33 - means is we're using the specific post
42:35 - and where that post happens as a seed
42:38 - and this will just give us something
42:39 - unique every single day perfect so i'm
42:42 - just gonna go ahead write that out we're
42:44 - going to go post count say 2 b
42:48 - bytes and then we're just going to go
42:49 - ahead and say as ref just like that and
42:52 - put a comma here at the end so that
42:54 - should handle our seeds for this one
42:56 - we're also going to do bump pair is
42:59 - going to be the authority so it's the
43:01 - actual user so whenever you're
43:03 - initializing you're always going to need
43:05 - to pay we're going to create the space
43:07 - so for this space what i'm going to be
43:09 - doing is i'm going to be using size of
43:11 - i'm gonna be saying hey uh it's gonna be
43:13 - of type post account but instead of plus
43:16 - eight on this what we're gonna be doing
43:18 - is um we wanna give this post a specific
43:21 - size so this space here i want you to
43:24 - kind of imagine it like this okay kind
43:26 - of like imagine it's like la okay and uh
43:29 - you have you have these blocks that you
43:31 - can purchase where you're gonna build
43:33 - all right so whatever thing you're
43:34 - building you're building literally
43:36 - imagine it like
43:37 - a real estate except this is like
43:39 - digital real estate on the blockchain so
43:41 - you're going to be finding the specific
43:44 - block that you want to build on and you
43:46 - get to choose the size is it like a tiny
43:48 - block that you want a big one and the
43:51 - bigger that block is right the more it's
43:53 - going to cost you so that's why you want
43:55 - to actually that's the benefit of lower
43:57 - level uh programming languages unlike
44:00 - javascript you know programming
44:01 - languages like rust you can define the
44:04 - size of the block that you want that way
44:06 - your code will be more efficient you'll
44:08 - also be paying much less prices than
44:10 - anybody else so we're gonna go ahead and
44:13 - uh come up with the size of our
44:16 - hours okay and uh how we're gonna come
44:19 - up with the size is in the following
44:21 - manner okay so let's go all the way to
44:22 - the top i'm just going to declare a
44:24 - couple of things okay i'm going to say
44:26 - my text length and we can just make it
44:28 - uppercase like this and i'm going to
44:29 - give it 1024. okay so the text length
44:32 - would mean hey if i'm making a post on
44:34 - facebook how many characters can i have
44:37 - so this is like 1024 bytes and that
44:40 - roughly translates to about 1024 you
44:43 - know you can make you can make a post
44:45 - that has maybe a thousand 24 characters
44:48 - the next thing i need is what should be
44:50 - the length of the username right because
44:53 - everybody who's making a post is also
44:55 - going to have a username so for example
44:57 - that might be clever programmer or
44:59 - rafikaze making a post on facebook so
45:01 - what's the size of this i'm going to say
45:02 - the size of this uh we're going to go
45:05 - length u size and for this we're just
45:08 - going to go and say 100 and then we're
45:10 - going to make the last one which is
45:11 - going to be the url for my image and we
45:15 - will say use size of this is gonna be
45:17 - 255. so these are the three
45:20 - variables we're gonna use to uh define
45:23 - our size right over here we're basically
45:25 - gonna go user url length plus text
45:28 - length plus user not user url length but
45:32 - name length okay this is going to
45:34 - basically ensure that that block of land
45:36 - we're purchasing will always have enough
45:38 - space for one post okay and that within
45:41 - that post you'll be able to store the
45:43 - user's username the actual
45:46 - you know text body of that post and the
45:49 - url image so if it says this post was
45:52 - made by clever programmer then i need to
45:54 - actually be able to store the space of
45:56 - the url that represents my my profile
45:59 - image my post body and my username
46:01 - length of clever programmer so we're
46:03 - purchasing that small land on the
46:05 - blockchain that's what space is for
46:07 - going down i'm gonna basically say this
46:09 - is post uh we're gonna pass info and
46:12 - we're gonna say it's gonna be of type
46:13 - post account all of this here applies to
46:16 - the specific variable post it's just for
46:19 - post so we're initializing our post
46:21 - we're buying a piece of land for that
46:23 - specific post that post will have a pair
46:26 - okay and that post will have this seed
46:27 - right here so a lot going on here but i
46:30 - hope that this is beginning to make
46:31 - somewhat sense and you know at least
46:33 - there's some pattern recognition stuff
46:35 - involved here i'll definitely say that
46:37 - so some of this stuff you're new to
46:38 - solana it's going to look kind of
46:40 - confusing but the more and more we do
46:41 - this we're gonna start building some
46:43 - pattern recognition here and hopefully
46:44 - it's gonna start making some more sense
46:46 - uh next up we're just gonna need a
46:48 - signer so for designer i'm gonna do
46:50 - essentially the same thing that i did
46:51 - above so i'll just pretty much copy that
46:53 - code come down here and i can paste that
46:56 - right there so i need a mutable
46:58 - authority here and that's going to be
47:00 - signer okay i also i'm going to do the
47:02 - same thing with my system program i can
47:05 - just copy this right here let's go down
47:08 - and let's paste it perfect uh program
47:10 - and then for my token program i'm gonna
47:12 - do the same uh thing as well you can
47:14 - just copy that from the top come down
47:16 - and paste it and just to explain a tiny
47:18 - bit more about this constraint is um
47:21 - we're basically saying hey if we make
47:23 - this facebook app and let's say we
47:24 - initialize it with uh solana
47:27 - solana usdc the person that has to uh
47:30 - make their post has to also pay in
47:32 - solana usdc to actually put their posts
47:35 - on this chain if we in turn make this
47:37 - solana sole when the user has to pay
47:40 - they have to pay in seoul if you wanted
47:42 - to make it let's say johnny token you
47:44 - could initialize your app with johnny
47:46 - token and the person who's using your
47:48 - app would literally need to have the
47:49 - johnny token in order to be able to make
47:51 - posts and if they don't they can't make
47:53 - any posts on your app super cool um i i
47:56 - feel like a lot of creators can use this
47:58 - right if mayweather had an app or
47:59 - mcgregor had an app like you would need
48:00 - the mcgregor token in order to be able
48:02 - to post on that app so there's a lot of
48:04 - if garyvee had an app you could only
48:06 - post on it maybe
48:07 - with garyvee tokens um v friends or
48:10 - whatever all right perfect so that's
48:12 - just this is that part cons regarding
48:14 - the constraint and last thing that we
48:16 - actually need to finish up or create
48:17 - post is gonna be a time or just
48:20 - timestamp okay so we're just going to go
48:22 - ahead and say clock and we're going to
48:23 - get our cis var okay and oh it's going
48:26 - to be of type clock perfect so that's
48:29 - this this far is kind of built in and
48:30 - this over here is going to be our
48:32 - timestamp all right guys so now we're
48:34 - going to make our first function inside
48:37 - of rust and anchor so i hope that you're
48:39 - excited now we're getting the fun parts
48:40 - because up until now we're just defining
48:42 - the data structures kind of doing some
48:44 - of the boring parts but that are
48:46 - important so let's go ahead and do this
48:48 - so i'm going to come inside of my
48:50 - programs uh that that i have written
48:52 - here okay and what we're going to do
48:54 - here is i'm going to leave the super the
48:56 - super is basically just saying hey like
48:58 - the scope is everything okay so i don't
49:00 - want you to limit the scope um i'm going
49:02 - to come here okay and this is going to
49:04 - be my first function it's a public
49:06 - function and in instead of calling this
49:08 - function initialize what i'm going to
49:09 - say is create state so this is going to
49:11 - be our initialization for the ctx part
49:14 - i'm going to say context and i'm going
49:15 - to give it a specific context so i'm
49:18 - going to give it the create state one
49:20 - let's go ahead where we created the
49:21 - create state perfect let's copy that
49:23 - we're going to paste that right there
49:24 - okay so that's going to be the context
49:26 - here let's put it on its own line let's
49:29 - go boom boom right we're gonna say comma
49:31 - cool and there are no more arguments
49:33 - that we have here okay and then we're
49:34 - just gonna basically return a result and
49:37 - you could leave these here or you could
49:39 - leave it just like this totally up to
49:40 - you okay whatever we're returning we're
49:42 - gonna return we're gonna just name this
49:44 - as a result perfect this is the most
49:46 - basic function you can kind of have in
49:49 - rust because this function will run and
49:50 - it will just basically say okay like
49:52 - this function ran and it was okay there
49:54 - were no problems there were no errors if
49:56 - there are errors then it's not going to
49:57 - run this um okay line right there so
49:59 - let's go down and we're going to make
50:01 - this a little bit more complicated and
50:02 - add more things to it so i'm going to
50:04 - say let's state equals and state is
50:06 - going to be our accounts okay so this
50:09 - function here is going to be passed in
50:11 - from our front end all right we're going
50:13 - to basically be able to create a state
50:15 - at any given time and then we're going
50:17 - to be able to access that specific
50:19 - states or that specific context accounts
50:22 - and the state okay so now what i want to
50:25 - do is i want to make sure that i can
50:27 - actually mutate this so i'm going to
50:29 - pass basically say this here amp percent
50:31 - and mute which means whatever a state
50:33 - that i pull from here i want it to be
50:35 - mutatable okay something i could change
50:38 - i could change its values and now we're
50:40 - going to go ahead and do just that so
50:41 - let's put a semicolon here and let's go
50:43 - down now we're going to save the
50:45 - authority to the state so i'm going to
50:46 - say i'm going to grab the authority here
50:49 - and i will just say make it the
50:51 - authority
50:52 - of whoever is currently the authority
50:55 - the current person who's like let's say
50:57 - logged in with their wallet so that's
50:59 - who the state's authority is going to be
51:01 - set to okay and because we allow this
51:03 - mutation here now we can do something
51:05 - like state that authority and change its
51:08 - value so the other thing that we're
51:09 - gonna do is we're gonna set the post
51:11 - count to zero because we're literally
51:14 - just starting and creating our post for
51:16 - the very first time okay so let's go
51:18 - ahead and do
51:20 - state.postcount and we're gonna set that
51:22 - to zero and then we're just gonna simply
51:23 - pass okay so this is our create state
51:26 - function and we're done with that the
51:28 - next function we're gonna need is going
51:30 - to be our um create post function wow
51:34 - look at that my github autopilot already
51:37 - putting in work so let's go create post
51:40 - right there and i'm gonna do ctx context
51:44 - so every time i'm making these functions
51:46 - i'm just gonna pass in my ctx okay every
51:47 - time you make a function you say ctx and
51:50 - then you give it the data type that you
51:51 - want it to kind of uh be serialized here
51:54 - so i'm going to just say create post um
51:56 - this struck we made it earlier so let's
51:59 - go ahead and look boom right there i
52:01 - have create post okay so it's the type
52:03 - create post let's go down i'm going to
52:05 - give this text text is going to be of
52:08 - type string whoa
52:10 - strum what the heck is that string
52:12 - poster name is going to be of type
52:15 - string as well and poster url poster url
52:18 - is going to be string as well perfect
52:22 - and then last thing we want to do here
52:24 - is of course just say hey this is going
52:26 - to be program result or result whatever
52:28 - you want to call this all right and then
52:29 - let's go down and now we'll start
52:32 - setting up our state and we'll say hey
52:33 - this state is uh mutatable we're going
52:35 - to say
52:38 - ctx.accounts.state just like this so
52:40 - first we're going to get the state so
52:42 - this is allowing us to get the current
52:43 - state next up what we're going to do is
52:45 - we're going to get the get the post post
52:48 - equals this is going to be also
52:50 - mutatable or mutable non-mutatable
52:52 - mutable post then we're going to set the
52:55 - authority and that's going to be the key
52:57 - of whoever's currently in then we're
52:59 - going to set the text to whatever the
53:01 - text that was passed in uh poster name
53:04 - is going to be the poster name that was
53:05 - passed in then the poster url is going
53:07 - to poster url those passed in um and
53:10 - then we're going to set the comments
53:11 - comment count and index
53:14 - and then let's go ahead and do our post
53:17 - time so when was this post made so we're
53:20 - going to go post.clock so we're going to
53:21 - grab it from the clock and we're going
53:23 - to perfect and then last thing that
53:25 - we're going to do is we're going to
53:26 - increment the post count by one okay so
53:28 - every single time that we create a post
53:30 - we're gonna increment the post count by
53:32 - one hopefully that makes sense and then
53:34 - that way we can keep track of that post
53:36 - so again this is so freaking cool right
53:38 - because where all of this data is
53:40 - actually being stored on the blockchain
53:43 - and we don't need a database and we can
53:45 - actually increment and we can retrieve
53:47 - this information just pretty cool
53:49 - because you know we don't have a back
53:51 - end here we're just storing all of this
53:53 - on the blockchain web 3 is our backend
53:56 - so super cool perfect and then last
53:57 - thing we're going to do here is we're
53:59 - just going to say okay and it's double
54:02 - open parentheses and then double close
54:05 - parentheses perfect all right that was a
54:08 - lot of smart contract work we're going
54:10 - to be doing some more of it but i'm
54:12 - going to be passing it over to lance in
54:14 - just a second who's our amazing
54:16 - instructor he's done some of the
54:18 - previous bills like robin hood and
54:20 - tinder that you guys have enjoyed so
54:22 - freaking much he's our front-end master
54:24 - so he's gonna be bringing in some of the
54:26 - front-end side but here's what i want to
54:28 - leave you with a lot of this stuff is
54:30 - new so it can be challenging it can feel
54:32 - intimidating it can feel scary like oh
54:34 - my god what is going on trust me this
54:36 - i'm like new to rust and solana and
54:39 - anchor as well so like for me this was
54:41 - it felt kind of intimidating but once
54:43 - you get used to it and you start doing
54:45 - this it will start becoming easier and
54:47 - easier like we were joking right before
54:48 - this with uh
54:50 - david who's on our team and uh some of
54:52 - you guys know him from a lot of the
54:53 - bills like the mern bills and you guys
54:56 - call him dr mert and uh you know he was
54:58 - like oh this is starting to make sense
55:00 - now you know and i think it's just
55:02 - because he was looking at the rust code
55:04 - for so long started making sense and
55:06 - initially to me this looked like
55:07 - complete
55:08 - egyptian right gibberish and i'm like
55:10 - what the hell is going on i don't
55:11 - understand but hang in there this will
55:14 - start making sense we're going to be
55:15 - moving to the javascript portion now
55:17 - which lance is going to be jumping into
55:19 - and building out the front end and once
55:21 - the front end starts getting put
55:22 - together you're going to start going ah
55:24 - the pieces are making more and more
55:25 - sense okay and then in the future we're
55:27 - going to have some more hopefully salon
55:29 - ups coming through so it's going to make
55:30 - even more sense then so i hope you're
55:32 - excited i'm gonna be switching it over
55:34 - to lance lance go ahead take it over and
55:36 - crush it what's up guys it's lance here
55:38 - again so what we're gonna need to do
55:40 - before we get started with the front end
55:41 - i need to walk you guys through a couple
55:43 - things one of the first things is head
55:44 - over to your cargo tunnel and double
55:47 - check that you have the same version
55:49 - that i have if you're watching this from
55:50 - a future there might be a newer version
55:52 - that's out like for example 0.23 is out
55:55 - and if you do update to that you might
55:56 - run into some bugs with this build so if
55:59 - you want to make sure you're doing the
56:00 - same thing that we're doing make sure
56:02 - you have the same version so once that's
56:03 - done you can go ahead and you see your
56:05 - target folder go ahead and delete it but
56:08 - don't worry it's going to come back and
56:09 - i'll show you i'll show you guys how to
56:10 - get it back so hop over to your terminal
56:12 - and just write anchor build as you're
56:15 - running anchor build you're gonna notice
56:16 - that it's compiling because that's
56:17 - exactly what's happening here so with
56:19 - solana we don't really call them smart
56:21 - contracts we call them programs and when
56:23 - you do anchor build it's gonna compile
56:25 - your program and then the next step
56:26 - would be to deploy it and after you
56:29 - deploy it you should get back a program
56:30 - id i'll let this thing build and i'll
56:32 - show you guys how to deploy your program
56:34 - awesome so it looks like it finished
56:35 - compiling and look at that our target
56:37 - folder is back and like i said the next
56:38 - step in your terminal is to say anchor
56:41 - deploy this step will also take a couple
56:43 - minutes and at the end of it all you
56:45 - should see your program id all right
56:47 - let's go do you see that that's your
56:48 - program id you can look at it like a
56:50 - contract address if you're coming from
56:51 - solidity so go ahead and copy that and
56:54 - remember where it says declare id in
56:56 - your lib.rs we want to replace it with
56:59 - our new so i'll go ahead and hit paste
57:01 - and that's not the only place we want to
57:03 - the only place where you want to update
57:05 - the id go ahead and go to your
57:06 - anchor.tamul and copy this and paste
57:10 - your new id oops take your new id and
57:13 - paste it there we go cool so now that
57:15 - we've updated our rust folder our rust
57:17 - file and our tamil file let's go ahead
57:20 - and run an anchor build again and this
57:21 - time we won't delete the target cool so
57:23 - it's finished compiling now and we just
57:25 - have to deploy it one more time with our
57:27 - updated program id so let's do anchor
57:30 - deploy awesome so the deployment is
57:32 - successful and you should see we didn't
57:34 - get a new program id everything's all
57:36 - good let's move on to the next section
57:38 - all right everybody we're gonna get
57:39 - started with the front end i already
57:40 - started up i'm using netlify dev that's
57:43 - why we're on
57:44 - localhost8888 and head over to your
57:47 - index.js so again this is the the reason
57:50 - why you see all this stuff is because
57:51 - it's the starter next js code so we
57:54 - don't need a lot of it so what i'm going
57:55 - to do is erase everything within that
57:58 - dit you can also go ahead and erase all
58:00 - of these stuff right here and from here
58:02 - we're going to be building it up so
58:03 - instead of styles.container
58:05 - we're going to do
58:06 - styles.wrap okay so i'm going to build
58:09 - out the divs first then we can make our
58:11 - styles object with tailwind to get
58:13 - everything set up so the first div is
58:15 - going to be the styles.wrapper from
58:17 - there we're going to have a component
58:19 - that doesn't exist yet but i like to set
58:20 - it up so we have an idea of what we're
58:22 - building so i'm going to call it header
58:23 - okay so keep it in mind after that i
58:26 - know i'm going to need to do some
58:27 - conditional rendering here so if the
58:29 - user is registered so we don't have this
58:31 - variable yet so i'm going to put it in
58:33 - for now registered question mark okay
58:35 - cool and if registered is true we're
58:37 - going to make this div we're just going
58:39 - to have the class name style dot wait
58:42 - sorry that styles that wrapper it's
58:44 - going to be home right because it's
58:44 - going to have the two of the same okay
58:46 - of course we need the closing div to
58:48 - this the important part is what goes in
58:50 - between which is another component that
58:52 - we're going to be making later on which
58:54 - is the sidebar very nice so in the next
58:56 - line within that home wrapper make
58:58 - another div and this one's going to be
58:59 - called style dot me inside that main div
59:02 - we're gonna have a
59:04 - feed component and there's gonna be a
59:06 - bunch of heavy things in here so i'm
59:08 - gonna comment it out because it doesn't
59:10 - exist just yet so going outside of the
59:13 - main div but still in the home wrapper
59:16 - we're gonna need a right sidebar
59:18 - component okay so i'm just gonna be
59:19 - setting up that component and then
59:21 - copying it out again let's see i'm
59:22 - missing something all right okay and
59:24 - just to close off the register thing if
59:26 - the user is not registered we're gonna
59:29 - load up the sign up component so i'm
59:31 - going to put that whole component in div
59:33 - and all i have to do is call that div
59:35 - with the class name of sign up okay from
59:38 - there we're going to have a sign up
59:40 - component so typically this is how we
59:42 - can see it be planned out and let's see
59:44 - what else am i missing so typically this
59:46 - is how i like to have it planned out and
59:48 - just to keep it consistent with my other
59:50 - names i'm going to keep call this dial
59:53 - down wrapper and to get started using
59:54 - tailwind until you stop seeing this
59:56 - annoying all you have to do is come to
59:57 - the top here and let's make a variable
59:59 - called style and this is how we can set
60:01 - up tailwind i'm calling that wrapper
60:03 - class and from here you can give it the
60:05 - css that you want so for me i'm just
60:07 - going to call the background and give it
60:09 - this color then i'm going to say min
60:11 - height screen and duration of it will be
60:14 - 0.5 next let's start styling the home
60:17 - div the home wrapper div the only thing
60:19 - that this the only thing that this is
60:20 - going to have is a flex property from
60:22 - there we're going to target the center
60:24 - and we'll say flex dash one okay next
60:26 - let's do the main which is going to be
60:28 - similar flex dash one flex and give it a
60:30 - justify center okay then we have sign of
60:33 - container oh then we got flex give it an
60:35 - items center as well as a justify
60:38 - content center or justify center and
60:40 - tailwind with screen height of 70 ph
60:44 - cool so that should cover everything oh
60:47 - and that's right because we don't have
60:48 - registered yet we can just hard code it
60:50 - for now and replace it later registered
60:52 - is equal to false awesome cool and if
60:55 - you don't see any errors we're good to
60:56 - go but if you wanted to see how this
60:58 - conditional rendering works you can say
61:00 - you can type in something like sign up
61:03 - now see if that shows up yep sign up now
61:05 - and if there is a registered we can have
61:08 - this is the home feed right because if
61:10 - registered is false we should see sign
61:12 - up now and if i set registered equal to
61:15 - true we shouldn't see sign up now we
61:17 - should see this is the home feed and
61:18 - that's the same idea that's why i
61:20 - structured it this way if registered is
61:23 - false we should see the signup component
61:25 - and a user should be able to sign up if
61:27 - registered is true the user is already
61:30 - logged in they should just see the home
61:31 - feed that's all we're doing here next
61:32 - thing we should do is let's set up the
61:34 - signup component cool so to get started
61:36 - with the sign up part of this i'm gonna
61:38 - go ahead and uncomment it we're gonna be
61:40 - passing a couple things to sign up so
61:42 - what we can do is format it like so come
61:45 - underneath sign up and a couple things
61:46 - that we're gonna pass into sign up is
61:49 - for one set
61:51 - third equals set register and if it
61:54 - doesn't make much sense to you why i'm
61:55 - writing stuff registered that's because
61:56 - that doesn't exist just yet it will in a
61:58 - moment so for name it's gonna equal name
62:01 - which will just be the name of the user
62:03 - then we'll have set name so that people
62:05 - can set up their name okay second why is
62:07 - this not going back so set name equal
62:10 - set name url equals url and set url
62:14 - equals set up cool and what we can do is
62:18 - we can create variables for these and
62:20 - pass those down but i think it would be
62:21 - smarter to put all of these as a state
62:23 - what we're going to need to do is come
62:25 - to the top here and let's import the use
62:27 - state hook and since we're here let's
62:29 - also get use effect because we're going
62:30 - to need to add that in later cool and we
62:32 - can only use hooks within the function
62:34 - component itself so i'll set that up
62:35 - here instead of having that registered
62:37 - variable i'm going to put that
62:38 - registered variable in a state and this
62:41 - is where the set register comes from it
62:43 - makes sense so let me say equals use
62:45 - state and if i want to set it by default
62:48 - false we can by saying false if i want
62:50 - it to be defaulted to true i can put it
62:52 - to true so since i want to play with
62:54 - sign up next we should have this as
62:56 - false so we can take that out let's set
62:58 - the next state which is going to be
63:00 - const name and the standard convention
63:02 - is if you name
63:03 - it something you should say set the name
63:05 - that you just created state quotes const
63:08 - url set the url is mostly for the images
63:11 - that the use that the user wants for
63:13 - their picture okay and we also have cons
63:16 - users later on we're gonna make a query
63:18 - to get the list of users on our app so
63:20 - for now we can just add an empty one and
63:22 - just do an empty array as the initial
63:24 - state cool go ahead and hit save oh yeah
63:26 - because you see sign up is not defined
63:28 - because you haven't created that
63:28 - component in it like i mentioned before
63:30 - let's go ahead and make a components
63:32 - folder so i want to make a save new file
63:34 - then we'll say signup.js
63:37 - don't forget to make a camel case and
63:39 - now we're good awesome all right so now
63:41 - it's set up i have an extension called
63:42 - react code snippets where you can just
63:44 - do something like that hold on let me
63:46 - redo this part again because it's
63:47 - glitching out cool so after we make our
63:49 - components folder let's make the actual
63:51 - component itself so we can say sign up
63:54 - camelcase.js and do raf there we go and
63:56 - if you're still seeing the error that's
63:58 - because whenever you create a component
64:00 - you must also export and then import it
64:03 - so what i'll do here is import a sign up
64:06 - from components and this actually should
64:08 - be capital u don't know what's lowercase
64:10 - u probably because my component itself
64:12 - that i wrote is lowercase and let's make
64:15 - everything match amazing cool so that
64:17 - means you also don't need this text sign
64:18 - up now because the sign up component is
64:20 - while we're here let's also make the
64:22 - feed component okay so we got sign up
64:24 - and we also have feed you can auto
64:26 - import it cool so as you can see if i
64:28 - initialize my state with false we should
64:31 - see the up but if whatever reason our
64:33 - register is true we should see this is
64:35 - the home feed and also feed because the
64:37 - component is loaded which means they're
64:38 - logged in so we'll head back to false
64:40 - since we're working on sign up now and
64:41 - let's head over to sign up dot js
64:44 - awesome so we're in sign up now the
64:46 - first thing i'll do is let's set up the
64:48 - jsx for it so i'm going to quickly
64:50 - format it and we're good to go as you
64:52 - notice with a lot of our video the
64:53 - convention of the outer div is usually
64:55 - the same which is just going to be style
64:57 - dot wrapper hope not style sheet style
65:00 - then within style.wrapper we're going to
65:01 - have another div with the class name
65:04 - style dot logo and all right because
65:06 - this div is gonna hold that facebook
65:08 - logo and i guess technically it's also
65:10 - called meta right now but we're making
65:11 - facebook okay and we're gonna have we're
65:13 - gonna import image from next.js so i did
65:16 - an auto import which will add this
65:18 - import state and then i'm gonna close it
65:19 - like so then we can add all the other
65:21 - properties so i can say source equals
65:23 - and i have the url i want to use which
65:27 - is this which is just a facebook logo
65:29 - just the facebook logo and then the next
65:30 - thing you need to do is just give it
65:32 - some attributes of a height you can just
65:34 - say 40 and the width will be the exact
65:36 - same to make it a nice square like thing
65:38 - so it's like the similar and then for
65:40 - the alt just call it facebook look
65:43 - amazing there we go that's the image all
65:45 - right and that's the logo container so
65:47 - outside the logo and container but still
65:49 - inside the wrapper div but still inside
65:51 - the wrapper div we want to make another
65:53 - one this one i'll call
65:54 - style
65:55 - dot type and for this div style the
65:57 - title actually don't need to format what
65:59 - i can do is a please sign up to us sign
66:03 - up to use facebook okay from there i'm
66:06 - going to be creating a form this is
66:07 - where the user will be able to sign up
66:10 - by passing in all the input and we're
66:12 - going to put up in a function for this
66:13 - later we don't have to worry about that
66:14 - for now so i'm going to say style. okay
66:16 - next i want to start working on the
66:17 - field so i'm going to give this div
66:18 - class name style dot field contain which
66:22 - will then have another which is just
66:24 - going to have name as the text but for
66:26 - the name oops but for the name i'll have
66:29 - class name style dot input okay then
66:32 - another div this one's going to be
66:33 - called style dot input container because
66:35 - just like the how the name sounds this
66:37 - is going to contain the actual input
66:40 - field so if i write input here make it
66:42 - self closing and for the attributes we
66:44 - can say the value is equal to the name
66:47 - and if you remember name is some is a
66:49 - state that we created that we passed in
66:50 - so we need to bring that in our
66:52 - parameters then there's going to be an
66:53 - on change here or we can say event or
66:56 - sometimes we can say e set name oops
66:58 - which again is a function that we're
66:59 - bringing in as a prop that's not what i
67:01 - want set name event dot target value and
67:04 - what we can do is add a required here
67:06 - and last but not least let's give our
67:08 - input field a class name call mind style
67:10 - dot input field all right so closing div
67:14 - but still in our form we want to make
67:16 - the rest of these things all right so
67:18 - what i'm going to do is actually copy it
67:19 - one more time but the difference we want
67:21 - to make here is instead of name this
67:22 - should actually be profile image url and
67:25 - instead of set name it will be set ur
67:28 - also within here there's also going to
67:30 - be a div oops also within here there's
67:33 - there's going to be a div it's going to
67:34 - have class name random url which is the
67:37 - random url that it's going to generate
67:38 - we're going to have a function for that
67:40 - but i'm gonna make it a little bit later
67:42 - for now we can just add a text field of
67:44 - random so we have div closing div
67:47 - closing div it's the field container
67:49 - next we'll have a button because in our
67:51 - form we should have a submit button that
67:53 - will help the user sign up passing down
67:56 - all the fields that they wrote submit
67:58 - button and then you can get out of there
67:59 - and just do it equals from there all you
68:01 - gotta do is write sign up and if i hit
68:03 - save we should see an error because of
68:04 - all the styles so let's set that up next
68:07 - i'm gonna say it up here con style
68:09 - object and i'll be going through these
68:11 - very quickly but the wrapper is just
68:13 - going to have flex with flex direction
68:16 - of column write p4 here oops justify
68:19 - center items center h w
68:23 - and let's see what did i have again w
68:25 - dash it's gonna have a background of
68:27 - hashtag two
68:29 - five
68:30 - two five two six with minimum width i'm
68:34 - in height h min rounded dash two awesome
68:38 - cool so again at any point you guys need
68:40 - the css go ahead and pause the video so
68:42 - you don't miss out on typing if i'm
68:44 - moving too fast so from there the title
68:46 - is just gonna have the text of this font
68:49 - semi-bullet text large for the form it's
68:51 - just going to have flex property flex
68:53 - column hide up center all my field
68:54 - containers in here will have my four
68:57 - input title has this text and the font
68:59 - semi bolt input container will have flex
69:02 - item center i hit save accidentally
69:04 - still going to be a problem we got the
69:05 - input field the random url is going to
69:07 - have all of this height full background
69:10 - this color hover
69:11 - background will look like that text
69:12 - white px-2 py hover and last but not
69:17 - least we have the submit button which
69:20 - will just have this hit save and that
69:21 - should be all of that oh you might see
69:23 - an error for undefined that's because we
69:25 - also need to destructures those props
69:26 - that we're passing in here which if i
69:28 - remember correctly should be reset
69:29 - registered name set name url and set
69:33 - invalid source prop oh because we have
69:36 - to go to our next config and we have to
69:39 - make sure that it has the hostname of
69:41 - this so i forgot to do that so let's go
69:43 - to our next.config and we're going to
69:45 - add an images key which also which has
69:47 - the value of an object which has a
69:49 - domains key which will then be an array
69:52 - of all the links that we're using to
69:54 - speed up process it should look a little
69:56 - something like this so these are all the
69:59 - urls that we're going to be using for
70:01 - our images so take a moment pause the
70:03 - video make sure you have a cool so now
70:05 - that you have all this we should be able
70:07 - to go back to sign up hit save let's see
70:10 - if it works now oh oh we might have to
70:12 - restart a terminal that's not a terminal
70:14 - okay netflix
70:16 - let's see if this works so it looks like
70:18 - it's running servers ready piling let's
70:20 - go there it is that's our sign up she's
70:22 - beautiful but don't worry she'll have a
70:24 - prettier face as we keep working on it
70:26 - so that's going to be the front end for
70:28 - the sign up for now let's see let me do
70:30 - that part again norman or david who was
70:32 - ever editing but if you hit no we did
70:34 - notify dev there she is awesome there
70:36 - she is she's beautiful she can be way
70:38 - more beautiful and that's because we
70:40 - need to set up tailwind i have all the
70:42 - css it's not really showing up because
70:44 - we need to do just that so to help one
70:46 - thing you'll see me do a lot is tailwind
70:48 - make made some really nice documentation
70:50 - on how to set it up with next js so all
70:53 - we need to do is do an npm install
70:56 - like this okay and for us we're actually
70:58 - gonna do a yarn add instead of npm
71:01 - install add there you go and notice how
71:03 - we're getting three things we're getting
71:04 - tailwind css post css and auto prefixing
71:07 - all right let that install and i'll walk
71:09 - you guys to the next step okay cool so
71:11 - it looks like it's done installing oh
71:13 - nevermind it's not done still let it
71:14 - keep installing no it's not lagging all
71:16 - right beautiful it says it's done so
71:18 - what we need to do is this step which is
71:20 - to initialize tailwind npx tailwind css
71:23 - init p all this does is initializes
71:26 - tailwind and it also creates the
71:27 - tailwind css config file and the post
71:30 - css config file what we care about at
71:32 - the moment is the tailwind.config and
71:34 - what we need to do is add to the content
71:37 - array these two things okay i'm gonna go
71:40 - in the content array paste save so we
71:43 - should be good to go with that the next
71:45 - thing we need to do is go to our
71:46 - tailwind css go to the
71:49 - global globals what you can do is copy
71:53 - all those three things you can actually
71:54 - delete everything in here because it's
71:56 - just boilerplate code and you just have
71:58 - the three tailwind direct save that do a
72:00 - nice dev again and we should see a
72:02 - beautiful transformation the glow up of
72:04 - our facebook page because now we got
72:06 - tailwind involved damn this is slow and
72:09 - that's crazy oh there we go it's
72:10 - compiling hey look at that that's
72:13 - starting to look a little bit better
72:14 - this is the sign up component doesn't
72:17 - look like a very old website anymore
72:19 - let's go okay and start it from here
72:21 - norman all right did netlify dev and
72:25 - let's go there she is she looks way
72:27 - better now it doesn't look like uh 90s
72:29 - websites anymore and there you go that's
72:31 - the sign of components front end let's
72:32 - move on to the next part all right cool
72:34 - so like i said we have our beautiful
72:36 - sign up page and just to double check uh
72:38 - i to get it fully looking like this make
72:40 - sure you have the same css as i do i
72:42 - might have had some spelling errors if
72:44 - it doesn't look like this so double
72:45 - check your index and your sign up so
72:48 - with that said going to the fjs there's
72:50 - a couple things we need to set up here
72:52 - the first thing that we need to do is
72:53 - install a couple different packages so
72:56 - what i'll do is temporarily stop my
72:59 - terminal and let's see what we need to
73:01 - install so what we need to install we're
73:03 - going to do a yarn and i'm going to do
73:05 - something like this we're going to get
73:06 - at project
73:08 - serum slash anchor and because we can
73:11 - get multiple things let's just do that
73:13 - i'll get at solana slash spl token and
73:18 - space at actually not doing the next set
73:20 - so let's get these two first the serum
73:22 - and the spl token all right cool so we
73:23 - got those two installed let's do the
73:25 - next set which is just going to be yarn
73:27 - add at slash wallet slash adapter oops
73:32 - dash react okay i'm going to speed run
73:34 - the next few which is going to be next
73:36 - one is going to be selena slash wallet
73:38 - dash adapter to react dash ui and the
73:40 - last one for this set is going to be the
73:42 - solana slash wallet adapter dash wallets
73:46 - so these are the three for now hit enter
73:48 - all right that batch is done and there
73:50 - only should be one more for now which is
73:52 - just going to be a yarn add atlanta
73:55 - slash web3.js
73:58 - oh and i forgot one more we also need
73:59 - react hot there you go we're going to be
74:02 - adding more packages as we go but these
74:03 - are the ones that we're going to need
74:04 - for these js so let's get them right in
74:08 - let's go we're all set so come back to
74:10 - your pjs and let's import everything
74:13 - we're going to need at the top here i'm
74:14 - going to do an import toast comma
74:17 - toaster from react toast this is going
74:20 - to let us make little notifications
74:22 - let's say like the form was submitted so
74:25 - i want to set it up like that next thing
74:26 - i want to do is import token program id
74:29 - from solana spl token which is just one
74:32 - of the packages that we installed so
74:33 - that's where it's coming from okay and
74:35 - next we're gonna do import use wallet
74:37 - and you'll see like a suggestion here
74:39 - that's where we're getting it from the
74:40 - wallet adapter dash react cool and this
74:43 - is just standard things at the top here
74:46 - where we have the import react from
74:47 - react we can just get our usual states
74:49 - our usual hooks i mean which is just use
74:52 - state and use effect okay next thing i
74:55 - want to do is import solana and this one
74:59 - is actually going to come from utils
75:01 - folder which is going to get a const.js
75:04 - file which doesn't exist yet but i'm
75:06 - going to set it up and then we're going
75:07 - to make it right away so i'm going to
75:08 - hit save and let's go ahead now and make
75:11 - a utils folder and inside that utils
75:13 - folder we are going to have a constant
75:16 - beautiful so now we're working on the
75:17 - cons.js we got to set up a couple things
75:19 - in here as well which is going to be an
75:21 - import statement that's going to grab
75:23 - the cluster api url from the solana
75:27 - web3.js which we added with yarn then we
75:30 - also want to get the public key from
75:32 - there cool from there we want to import
75:34 - facebook underscore solana from the next
75:37 - thing you want to import before we do
75:39 - that we actually need to go into our
75:42 - target folder which is inside my
75:43 - facebook dashlana and look under idl
75:46 - we're going to need this idl so i'm
75:48 - going to click on it copy it and copy it
75:50 - into your utils folder so going into my
75:53 - utils i'm gonna go ahead and hit paste
75:55 - oh so we have the facebook underscore
75:57 - soul dot json in there so going to your
76:00 - cons.js let's import that we can say
76:03 - import facebook underscore solana or
76:06 - soul quotes dot forward slash facebook
76:08 - sold touches awesome all right so let's
76:10 - set up our cluster so what we could do
76:12 - for our cluster is export cons and then
76:14 - this should be capital actually cluster
76:16 - set that equal to the devnet because
76:17 - that's what we're going to be working on
76:19 - and then in the next line we're going to
76:20 - do an export const salana underscore
76:23 - host equals solana host equals this
76:27 - httpsapi.devnet.celana.com
76:31 - i'm just getting this from my facebook
76:32 - soulful cool and i think that's actually
76:34 - should be we should label this alana
76:36 - host underscore so solana host equals
76:39 - this next thing let's do is let's set up
76:41 - the stable pool program underscore id
76:45 - right i remember that public key that we
76:47 - imported from solana web 3 we're going
76:49 - to create a new public key you're going
76:52 - to put quotes here and remember that
76:54 - program id that we got at the very
76:56 - beginning when you saw me let's go ahead
76:57 - and grab that so that like that should
76:59 - be in my facebook soul under programs
77:02 - anchor we need to grab this little thing
77:05 - copy that add back to your const and
77:07 - that should go inside the public key
77:10 - from there we're just gonna do an export
77:12 - const and say that the stable
77:15 - pool idl is going to be equal to the
77:19 - facebook because that is the json file
77:22 - that we imported that's going to be
77:23 - equal to stable pool idl cool so that's
77:26 - our cons folder now we can head back to
77:27 - feed.js and now the solana host is going
77:30 - to make sense all right solano host is
77:32 - essentially this right here okay we're
77:34 - going to be using it soon so the next
77:35 - thing i want to do is the get program
77:38 - instance and this is going to come from
77:40 - something that doesn't exist just yet
77:42 - but we'll make so i'm gonna do from dot
77:44 - dot util slash get dash pro so like i
77:47 - said this doesn't exist yet but what we
77:49 - could do is go into our utils and let's
77:51 - get that set up all right so going to my
77:52 - utils i'm gonna make a new file and i'm
77:54 - gonna call it get program it's gonna do
77:57 - exactly what it sounds like and from
77:59 - here we can do an import star as anchor
78:03 - from the at project serum that we had
78:06 - cool there we're going to get a
78:07 - connection and we're going to get this
78:09 - from solano web 3 then we're going to
78:11 - import the wallet not connected error
78:15 - got a spell wallet now connected error
78:17 - from ad solana wallet adapter cool so
78:20 - like i said this should be salon
78:22 - adsolana wallet actually adapter dash
78:26 - base oh yeah there's a suggestion and it
78:27 - should be wallet not connected error
78:29 - cool all right remember the stuff we set
78:32 - up in cons let's import some of that
78:33 - today in here so sable pool idl from
78:37 - const and while we're here we should
78:39 - also get this stable underscore pool
78:42 - underscore program let me just go ahead
78:44 - you guys got that cool so let me just
78:46 - double check that's what i wrote yep
78:47 - stable pool program underscore id
78:49 - awesome next we're gonna set up a
78:51 - function i'm gonna say export function
78:53 - get program instance and it's gonna take
78:55 - two parameters connection wallet and
78:58 - we're just gonna set up a nice condition
78:59 - here that says if there is no wallet dot
79:02 - pub key i'm gonna throw a new wallet not
79:06 - connected error and then parentheses to
79:08 - call it cool awesome after that if
79:10 - statement we're going to do a const
79:11 - provider and set this equal to oops and
79:14 - set this equal to new right which we're
79:16 - getting from my
79:17 - provider inside the curly brackets of
79:19 - this provider we need to pass in
79:20 - connection wallet and anchor provider
79:24 - dot default options mate okay what's
79:28 - this oh and this actually shouldn't be
79:29 - curly bracket this should be parentheses
79:32 - there you go that's a lot better and put
79:34 - up one more comma here and then
79:35 - underneath that let's set up the idl and
79:39 - that's just going to be equal to what we
79:40 - set up at the const which is the stable
79:42 - pool ideal which i know is just the
79:45 - facebook underscore so jason awesome
79:48 - then let's set up the program id as well
79:50 - which is essentially just the address of
79:52 - the deployed program that we set up way
79:54 - in the beginning which is a stable pool
79:56 - program id okay then let's do a const
79:58 - program equal to new anchor dot
80:05 - dot program idl program id comma okay
80:10 - from there let's do a return program and
80:12 - hit save cool and with that get program
80:14 - is actually feed is more now i can go
80:17 - back into feed but that should be it for
80:19 - the initial setup all right continuing
80:21 - on with the feed.js go ahead and in your
80:23 - components folder let's create two new
80:25 - components that would be the create
80:28 - post.js as well as another file called
80:31 - justpost.js awesome so i'm just going to
80:34 - set up the component really quickly
80:35 - using rafs okay going back to feed now
80:37 - that they exist we can import them by
80:39 - saying import create post from create
80:42 - post and then import post from post i
80:45 - want to come down and skip a line and
80:47 - then go ahead and write a variable
80:48 - called anchor so equal to require
80:51 - project serum slash anchor and then from
80:55 - that anchor variable we're going to
80:56 - deconstruct it
80:57 - by getting the bn from there and web3
81:01 - from anchor okay next we're going to
81:02 - make a variable called utf8 and i'm
81:04 - going to say anchor dot utils
81:07 - bytes.3tf8 cool next thing i'm going to
81:09 - do is i want to destructure web3 and i
81:11 - want to get the system program okay and
81:14 - the last thing we'll do at the top will
81:16 - be make a variable called default
81:18 - accounts and set it equal to token
81:21 - program set it equal to an object with
81:23 - the key of token program and the value
81:26 - of token program id which we got from
81:29 - solana spl token next i want to set up
81:31 - this clock here which is going to be
81:32 - anchor dot web3 dot sis bar clock pub
81:37 - key awesome last key that i'm going to
81:39 - make here is a system program which has
81:42 - the value of system program which we're
81:44 - getting from web3 dot program id amazing
81:47 - so like i said feed is going to be a
81:49 - very dense component there's going to be
81:51 - a couple different functions on here
81:53 - that we're going to need to set up
81:54 - because it holds a lot of the logic
81:56 - we're gonna do today so one of the first
81:58 - ones one of the first functions i want
81:59 - to make is a function called get all
82:02 - posts so this function like i said it's
82:04 - called get all posts it does exactly
82:06 - what it sounds like when in facebook we
82:08 - want to be able to grab all the posts we
82:11 - made and remember all these are going to
82:13 - be and if you remember in our lib.rs we
82:16 - have a function that creates posts what
82:18 - we need to do now after we create them
82:20 - is to get all of them so that's the job
82:22 - of this function so we're going to make
82:24 - it a synchronous and we're going to do a
82:26 - try catch and we're going to have a try
82:28 - here catch which will just be error
82:31 - console.error actually and then pass in
82:33 - cool but in the try that's going to be
82:35 - the important part here we're going to
82:36 - do a cons post data because every post
82:39 - that i get i want to store it in a
82:40 - variable and i want to say await program
82:43 - count
82:47 - program.account.postcount.org
82:48 - essentially we're going to go into the
82:49 - program and get all we're going to go
82:51 - into the program access the account and
82:54 - then access the post account the post
82:56 - accounts which essentially just getting
82:58 - all the posts so that's what we're going
82:59 - to do with that from there i want to
83:01 - take my variable posts data and do a dot
83:04 - sort okay inside of that sort we'll have
83:06 - an arrow function which is going to have
83:08 - a b so that we can sort all the posts by
83:11 - time and to do that i need to access the
83:13 - post time turn that to a number that we
83:16 - can easily use and then put minus a dot
83:19 - account.post time to number amazing all
83:22 - right so setting up the sort like this
83:23 - we'll sort it by the post time okay cool
83:25 - it's over so now that then we just need
83:27 - to do a set posts and pass in that post
83:30 - data which will be the sorted post cool
83:33 - save that and that's the get all posts
83:35 - awesome next function we're going to
83:36 - make let's make the saved post function
83:39 - so coming down to line 38 i'm going to
83:42 - say const save post equal to an
83:45 - asynchronous function once again and
83:47 - inside so if you think about it when
83:48 - you're on facebook you're writing up
83:50 - your post you're gonna need to save the
83:52 - post to the actual app itself this
83:55 - function is going to handle that so one
83:57 - of the first things that we need to do
83:58 - is get the program the program address
84:01 - all right so to do that i want to set up
84:03 - a let state sign that's essentially what
84:06 - we want to get so that's what i'm going
84:07 - to call it so i'm going to say await
84:09 - anchor dot three dot
84:11 - public oops public key dot find program
84:16 - address like i said we want to forget
84:17 - the program address of the state
84:19 - parentheses here and i'm just going to
84:21 - do i'm just going to encode it with
84:22 - utf-8 code state because that's what
84:25 - we're looking for go ahead and do a
84:27 - comma and you also want to get
84:29 - dot program id okay underneath that
84:32 - closing parenthesis let's set up a
84:34 - variable called state info which i'm
84:35 - going to use in a second and all this is
84:37 - doing is getting the state address from
84:38 - our program this is just a variable that
84:41 - i'm going to use and i'm going to use it
84:42 - in this try catch that i'm going to set
84:44 - up and in this try catch i'm going to do
84:46 - i'm going to take my state info variant
84:47 - and set it equal to an await
84:49 - program.account.statecount.fetch
84:53 - state signing let's go cool all this is
84:56 - doing is fetching the state and storing
84:59 - it in a variable state info from there
85:01 - in the catch let's do a
85:02 - program.rpc.createstate
85:05 - so if you remember what you guys did
85:06 - with kazi if you look at lib.rs we are
85:09 - going to call that create state function
85:12 - and that makes sense because if if we're
85:14 - doing this and we don't have a state we
85:16 - should create one so we're going to do
85:18 - rpc.createstate and pass in these
85:20 - parameters which is just going to be key
85:23 - accounts it's going to be have the value
85:25 - of an object so the state is going to be
85:27 - the state signer that we set up before
85:29 - and the authority is going to be the
85:31 - wallet dot public key not the anchor
85:34 - wallet dot public key just the wallet
85:36 - the public key okay this should actually
85:37 - be lowercase as well cool and we also
85:39 - want to spread out the rest of the
85:41 - default accounts okay and let's do a
85:43 - return awesome cool so now we're out of
85:45 - that try catch block in the next line
85:47 - but still in the save post function we
85:49 - want to do a let post signer all right
85:52 - it's going to be similar to what we did
85:53 - with the state signer this time we're
85:55 - going to be getting the posts so we're
85:58 - going to set that equal to await anchor
86:00 - dot web 3 publicly then this one is the
86:02 - web 3. public key dot find program
86:05 - address and again very similar to the
86:07 - last time which is just utf-8
86:10 - dot code uh this time we're looking for
86:12 - a post oops in code this time we want to
86:15 - put post here comma state info post dot
86:19 - to array buffer be comma then there's a
86:23 - comma here enter and we also want to do
86:26 - something similar like program dot
86:27 - program so that's the post signer set up
86:29 - another try catch block okay so now that
86:31 - we have the post signer we can actually
86:33 - fetch the state that we want so we can
86:35 - do await that program dot account dot
86:39 - post dot fetch and then yeah so what
86:41 - we're going to be fetching is what we
86:43 - got with the post sign cool then in the
86:45 - catch this is going to update the state
86:47 - which is thisprogram.rpc.com
86:51 - text name url and also pass in the
86:54 - object of the account which has a value
86:58 - object which has the state signer post
87:01 - post and again this isn't making any
87:03 - sense to you that's okay as we keep
87:05 - doing this over and over you're going to
87:06 - notice start to notice patterns and it's
87:08 - going to start to click real soon so
87:09 - authority is going to be the same as
87:10 - before which is wallet.publicky hit
87:12 - comma and then we do
87:15 - that default cool so now let's update
87:18 - our local posts so i'm going to say set
87:20 - posts comma weight program count dot
87:24 - post count dot all to grab all of those
87:28 - post accounts cool and that should be
87:31 - the save post cool so if you're still
87:33 - watching this that was the fun amazing
87:35 - solana stuff time to go to our usual
87:37 - bread and butter of the jsx of the feed
87:40 - component and just to remind you this is
87:42 - the feed of the facebook right all the
87:45 - posts that you see so in this return i'm
87:47 - just going to clean it up a bit and for
87:49 - the div let's give it our classic name
87:52 - of style awesome all right so that's the
87:54 - outer div we want to do next is remember
87:58 - the toast that we imported we can get
88:00 - toaster now and this is self-closing and
88:03 - the attributes that it has is position
88:05 - bottom left that's where i want it and
88:08 - then we want the reverse equal to false
88:11 - okay so now that our toaster is set up
88:12 - now that those are set up next line we
88:14 - want to set up another div this one
88:16 - doesn't need a class name because we're
88:18 - gonna do some conditional rendering here
88:20 - so i'm gonna make my curly black
88:22 - brackets and i'm gonna say again this
88:23 - variable doesn't exist yet but if
88:25 - loading is true what we want to happen
88:28 - is we should have a div and we should
88:30 - have this little like loading text that
88:32 - comes up say if loading is true we
88:34 - should see the loading text okay i'm
88:36 - going to do the colon here because if
88:39 - loading is false then there's nothing
88:41 - loading we should just see you should
88:43 - just see a div that has the create post
88:47 - component so i'm just going to set it up
88:48 - and we're actually importing it i
88:50 - believe we're already importing it so it
88:51 - does exist we're just going to be
88:53 - passing down a couple of things as props
88:55 - so we want to do save post equals save
88:58 - post all posts equals equals get all
89:01 - post and remember the name and you also
89:03 - want the url right because there should
89:06 - be a name and the picture url associated
89:09 - with the post that's not all we should
89:10 - also be able to map through posts do a
89:12 - post map and for every single post in
89:16 - that array we should make a post
89:18 - component which we also set up okay and
89:20 - each post component is gonna have these
89:22 - props passed in which is gonna be post
89:24 - equals post.account post equals
89:26 - post.account view detail equal to get
89:31 - comments on post we need a create
89:35 - comment equals save comment and key
89:40 - equals post countdown index and of
89:43 - course color pause the index then again
89:45 - we also want to pass every single name
89:48 - so we can associate it with the post
89:50 - then we're going to do url equals eu
89:52 - okay closing div parentheses closing
89:56 - bracket dip cool so that should be it
89:58 - for the front and that should be it for
90:00 - the jsx next let's do the styling and
90:02 - the styling is going to be all the way
90:03 - at the top here okay and the styling for
90:05 - this isn't intensive at all it's just
90:08 - gonna be our wrapper which will have a
90:11 - flex one oops flex one nope not that
90:15 - with two one dash one cool and again
90:18 - loading doesn't exist yet so let's set
90:20 - up our states so what we can do is take
90:23 - advantage of our use date and at the top
90:25 - underneath our style we can do a cons
90:27 - loading and set loading is equal to use
90:29 - state true then we can do a const posts
90:32 - comma set post and set that equal to use
90:36 - state all right cool all right so that
90:38 - is the styling and the jsx and we also
90:40 - set up the use date cool so let's hop
90:42 - into the create post component that we
90:44 - made and one thing we actually need to
90:46 - do is stop your terminal and let's just
90:50 - get yarn let's just add another package
90:53 - which is just gonna be a yarn add react
90:56 - dash icons all right because for the
90:58 - create post we're gonna be using a
90:59 - couple icons from there cool once that's
91:01 - done we have react icons now so what we
91:04 - can do is come to the top here and let's
91:05 - get started so the first thing we can do
91:07 - is set up our hook which is just going
91:09 - to be just use state for a create post
91:11 - nice and let's also import image from
91:15 - next image and let's import all the
91:17 - icons that i want to use which is just
91:18 - the bs file image fill comma bs fill
91:24 - camera video react icons slash bs cool
91:28 - then there's another react icon not from
91:29 - bs but fi which is just fi refresh cw
91:34 - this little refresh symbol that we're
91:35 - going to use to refresh our posts so we
91:37 - can see the updated comments so we can
91:39 - do quotes react icons slash fi all right
91:43 - so that's going to be all the imports
91:44 - that we're going to need for create post
91:46 - i'm going to go ahead and hit and let's
91:48 - work out the jsx so cleaning up the div
91:50 - can you guys guess what would be the
91:52 - class name for this you guys got it
91:53 - right exactly it is style.wrapper
91:56 - awesome after style that wrapper i don't
91:58 - think you guys will be able to guess it
92:00 - but we should have a some sort of form
92:01 - container because this is the component
92:04 - that's gonna let a user create a post so
92:06 - it should be a form but the first thing
92:07 - we need to do first is get the image
92:09 - let's get the image good thing we
92:10 - already imported it because the next
92:12 - step is just to add the source which is
92:14 - going to equal the url and we can add
92:16 - the prop which is just quotes profile
92:19 - okay from there we have class name of
92:22 - this image is style dot profile image
92:25 - let's give it a height width kind of
92:27 - similar what we did before with the last
92:29 - image which is just height of 40 with
92:30 - the four all right so we got the form
92:32 - let's give the form a class name the
92:34 - forms class name is gonna be
92:37 - style.style.form
92:40 - and the very first thing in this form is
92:42 - an input what's going to be self-closing
92:44 - let's work on the attributes which will
92:46 - just be value equals input which doesn't
92:49 - exist just yet then we have and change
92:51 - equal to event set input event dot dot
92:56 - value basically whatever i type in the
92:59 - input field is going to then update the
93:02 - input state so if i type h updating the
93:04 - state unchanged e updating the input
93:07 - state now it says a g all right and so
93:09 - forth cool so now the function's set up
93:11 - then we can have the class name for this
93:13 - input field which will be style.input
93:15 - it'll be a good idea to put it in the
93:16 - bracket so let's do style.input and
93:18 - there's a placeholder which you know
93:20 - what if you guys use facebook at all
93:21 - it's that little cute message that says
93:23 - what's on your mind what's on your mind
93:25 - hassam so if some there's assam's
93:27 - watching this what's on your mind okay
93:29 - cool so that's the input field the only
93:31 - thing we need now is a button which is
93:32 - essentially just submitting the post and
93:34 - this can actually just be self closing
93:36 - style dot hidden submit submit and we're
93:39 - going to have an on click and it's going
93:41 - to run a function called handle submit
93:43 - which we're going to be making soon cool
93:45 - cool i'm going to take a moment to stop
93:47 - right here because i want to set up the
93:49 - state as well as the function that we're
93:51 - going to be making so let's just set up
93:53 - the state really quickly so come down at
93:54 - the top here and i'll just say const
93:56 - array input comma set input now it
93:59 - exists so we can say equals use state
94:02 - quotes and then you can also set the
94:05 - function which is the handle submit one
94:07 - this should be asynchronous with the
94:09 - event and we want to do an event.prevent
94:12 - default because anytime we submit a form
94:15 - it's actually going to refresh the page
94:16 - and you don't want to do that when
94:17 - working with states because it's going
94:19 - to clear them so we don't want the
94:21 - refresh so we do prevent default and
94:23 - anytime we press submit we should clear
94:25 - the input field so we have to do a set
94:28 - input 2 and then we're going to do an
94:30 - await save post cool amazing and now
94:34 - that i'm looking at this i think i'm
94:35 - forgetting one thing which is actually a
94:38 - form container so in between the wrapper
94:40 - and the image let's make another div
94:42 - here and this is our should be our form
94:45 - container that should be its own form
94:47 - container and don't forget to put styled
94:49 - up container if you want to have your
94:51 - tailwind working and we can take this
94:53 - little guy and put it right here okay
94:56 - which means we can actually shift it
94:58 - over one nice okay cool this is making
95:00 - more sense now and underneath this div
95:02 - we want to make an actions container
95:05 - right so the actions would be that
95:07 - little part of facebook where it says
95:09 - live video photos video or a refresh
95:12 - post button so we want to set that up by
95:14 - making a div and i said earlier it's
95:16 - going to be class name style dot actions
95:19 - contain okay we have a div class name do
95:22 - a style dot action and here we go let's
95:24 - start using our react icons in here
95:26 - we're going to do the bs fill camera
95:29 - video that's a mouthful then do a class
95:31 - name of style dot
95:34 - video cam icon and so nice okay and then
95:37 - in the very next line we want actually
95:38 - another div here and that div is
95:40 - responsible for being the title so give
95:43 - it the appropriate name style dot action
95:46 - button title okay you essentially want
95:48 - to just repeat this process but have
95:50 - different things so i'm going to copy
95:52 - this and paste it twice okay but let's
95:54 - make sure let's be sure to you know mess
95:56 - me around with the content here instead
95:58 - of having bs video camera fill what we
96:01 - want to have is bss file image fill and
96:05 - this instead of video cam icon let's do
96:07 - photo icon and instead of live video
96:10 - this should actually say photo slash
96:12 - video well i'm happy with that going on
96:14 - to the next and final action button this
96:17 - should just be the fi one which is fi
96:19 - refresh cw change the name of the icon
96:22 - to refresh icon fresh icon and then we
96:24 - have a style the action button title
96:27 - with refresh posts nice okay and then it
96:29 - should be closing div closing div
96:31 - closing okay cool all that's left now is
96:34 - to do a bunch of the styling this one
96:36 - has a lot more styling than the previous
96:37 - ones so bear with me so coming at the
96:39 - top here i'm gonna say const style
96:41 - equals object and let's define all the
96:44 - styles that we need all right first one
96:46 - start from top down which is just a
96:48 - wrapper i'm gonna move through these
96:50 - fairly quickly it's going to be with 100
96:53 - flex and then we do mt dash
96:56 - 1 rem and if you're ever confused at all
96:58 - about what i'm writing here there is
96:59 - actually documentation on a conversion
97:01 - of what tailwind css is to regular css
97:04 - and that definitely helped me a lot when
97:06 - i first started doing tailwind so be
97:07 - sure to check that out so there's flex
97:09 - column i want to do a rounded dash
97:12 - let's see let's do 0.6 on the m and
97:15 - pg dash let me see what the color is for
97:18 - this again it's going to be hashtag two
97:20 - five
97:22 - two five two six again like three did
97:24 - before p
97:25 - two p t
97:27 - four p b
97:28 - zero and shadow dash zero pixels five
97:33 - pixels seven pixels negative seven tools
97:36 - and an rgb a oh zero zero zero zero
97:41 - point seventy five cool told you there's
97:43 - gonna be a lot so this is just the
97:44 - wrapper i'm gonna hit comma and now i'm
97:46 - gonna select moving through these faster
97:48 - be sure to pause the video if you ever
97:50 - need to stop so i'm also going to do an
97:51 - alt c here so you can see it on my
97:54 - screen so next thing i'm going to do is
97:55 - the form container which is just going
97:57 - to be flex pb-3 and b-2 border dash b
98:01 - the border of this color okay profile
98:04 - image rounded full object cover for the
98:06 - image for the form itself flex1 and you
98:09 - want to do a item center on that
98:11 - followed by the input which would be
98:13 - something like this okay we then have a
98:16 - hidden submit class and that one's
98:18 - actually pretty easy it's just going to
98:19 - be invisible okay now let's dial our
98:22 - actions container which looks just like
98:24 - that yep actions container followed by
98:27 - the actions button which has a lot more
98:29 - why is it the whole thing oh i think i
98:31 - highlighted again followed by the
98:32 - actions button which contains a lot more
98:34 - css this we got the action button title
98:38 - and the all the icons are going to have
98:40 - very similar styling they're just going
98:42 - to have a text read text green text blue
98:44 - for the respective ones so hold on cool
98:46 - and that should be it for the style and
98:48 - that's the create post component awesome
98:51 - all right so one of the things that we
98:53 - need to do still is accept the props
98:55 - that we're passing down and destructure
98:57 - them so if you remember going back to
98:59 - our feed scrolling all the way down we
99:01 - have save posts get out posts name and
99:04 - url so that's what we're gonna do
99:05 - structure so i'm gonna get save post get
99:08 - all posts i think it's like that yep
99:10 - name and url awesome we'll go ahead and
99:13 - hit save and let's just actually take a
99:14 - look what this would look like so to do
99:16 - that we want to go back to feed and
99:18 - remember how we have sorry go back to
99:20 - index and remember how we have the
99:22 - register to false let's go see what it
99:24 - looks like when i set it to true but of
99:26 - course don't forget to magnify that
99:28 - compiling there is an error okay it
99:30 - looks like we got an error oh yeah so
99:34 - going in my const it's actually going to
99:35 - be curly bracket should be just regular
99:37 - parentheses so let's see if it likes
99:38 - that okay i'm going to try it again okay
99:41 - compiling and see if there's any errors
99:43 - with the code we have so far it doesn't
99:45 - like the
99:46 - solana web3.js
99:49 - of course we've got another error
99:51 - expected from god string literal let's
99:54 - take a look it's in get program okay
99:56 - it's right here you just have to add it
99:58 - from here why don't you guys tell me
99:59 - about it it's gonna be a front let's
100:01 - save this can you compile again okay
100:03 - this one is it coming from the same spot
100:05 - acquire stack from facebook okay this
100:08 - looks like something we already fixed so
100:11 - let's see if i refresh it there we go
100:13 - beautiful cool so like i was saying
100:14 - earlier going back to the index.js
100:17 - remember that if we are registered and
100:19 - it's false we see this beautiful sign up
100:21 - screen but if it's true we should see
100:23 - field so let's we haven't got take a
100:24 - chance to look at all the code we've
100:25 - written so let's see if this breaks our
100:27 - code so i'm gonna hit save what does our
100:29 - app have to say okay looks like nothing
100:32 - which is interesting let's take a look
100:35 - let's do a quick inspect element let's
100:36 - see what's going on in here oh it's
100:38 - right here this is the home feed and
100:39 - it's loading okay i'm going to the
100:41 - feed.js this is all the style for it i
100:44 - guess in the meantime guys let's take
100:45 - out the this is the home feed and i
100:48 - believe we're seeing loading because
100:50 - we're setting loading to
100:52 - true but if it was false let's see what
100:55 - happens now there we go something url
100:57 - equals url it's undefined yep that would
100:59 - be smart we should actually go to the
101:01 - feed and accept those props and
101:03 - destruction cool so let's actually get
101:05 - the name and url that we're passing in
101:07 - name url restructure them first name url
101:10 - and i believe we should be passing one
101:12 - more thing in here let's see we should
101:14 - be passing name that's gonna equal name
101:17 - and is going to equal url still url is
101:20 - not defined let's see should be i'll
101:23 - figure that in a second one thing that
101:24 - we also need to add is a connected prop
101:27 - so going to feed i'm going to add
101:29 - connected equals wallet.connected
101:33 - all right and it's not capital w
101:35 - lowercase and then if you're wondering
101:36 - where wallet is coming from we need to
101:37 - go up under our states and let's use oh
101:42 - and if you're wondering where wallet is
101:43 - coming from we also need to import a
101:44 - couple more things in the index now that
101:46 - i remember it let's do that cool and i
101:48 - added this by accident when i wrote
101:50 - capital wallet we don't need this what
101:51 - we do need though is to import
101:54 - use wallet and we want to get it from
101:57 - solano wallet adapter react and once we
102:00 - do get that this is where wallet is
102:01 - coming from we can say const wallet is
102:04 - equal to use awesome so now while it
102:07 - exists if we scroll down it makes more
102:09 - sense and we're going to get url is
102:11 - undefined let's just temporarily put a
102:13 - variable here or actually it's going to
102:15 - say url is undefined let's go to feed
102:18 - it's also passed down connected okay
102:20 - this is good because now we're getting
102:21 - rid of all the bugs before we move
102:23 - forward image is missing a source
102:25 - property now where's this image coming
102:27 - from nope not that one where's this
102:29 - coming from well that's typo over there
102:31 - okay saving it says image is missing
102:34 - source property it's probably because
102:37 - there is no url so let's just get a
102:39 - temporary one i have one in my notes
102:41 - it's just gonna be this make sure it's
102:43 - in quotes i'm gonna hit save there we go
102:46 - awesome so it works this is exactly what
102:48 - we should see and there's this nice
102:50 - hover effect to it too cool all right
102:53 - guys so now we had our little bug fix
102:54 - break let's work on the post component
102:57 - so the first thing i want to do is at
102:59 - the top here where it says import react
103:01 - from react we can just say use state
103:03 - comma use effect and let's also import
103:07 - the image from next image and there's
103:09 - also a couple of react icons that i'd
103:11 - like to get that i have ready for you
103:13 - guys it's going to be the bi like for
103:16 - reg common alt ri share forward line and
103:20 - fi refresh cw awesome okay cool then
103:23 - there's also going to be a comment
103:25 - section import oh sorry then there's
103:27 - going to be a component called comment
103:29 - section which doesn't exist yet so let's
103:31 - go ahead and just make it blank for now
103:34 - i'm going to say new file say comment
103:36 - section js okay there it is rfac
103:41 - okay so we have the comments section now
103:43 - i can import it okay there it is cool
103:45 - all right and then before we go forward
103:46 - we also have to download javascript time
103:49 - go it's another package that we're gonna
103:50 - need so that's going to be an error
103:52 - because i'm stopping the terminal i'm
103:53 - going to do a yarn add
103:55 - javascript dash time dash or go yep so
104:00 - i'm going to wait for this to install
104:01 - and we'll be right back cool so now we
104:03 - have that package installed we need to
104:05 - what we need to do next is import i'll
104:08 - go from javascript time ago then we also
104:11 - want to import en from same place but
104:14 - this time forward slash local slash
104:16 - pn.json cool and if you miss our
104:20 - beautiful page you can just go into
104:21 - terminal and just say
104:23 - netlifedev again all right while that's
104:25 - loading add default locale and then
104:27 - within here you can just type en to pass
104:29 - in pass it in there we go next we can
104:32 - make a variable call it const time go
104:34 - and then set it equal to a new instance
104:36 - of time and inside the parentheses here
104:39 - we want to say en
104:40 - us awesome okay we should be able to
104:43 - refresh our page now there you go cool
104:45 - so remember how we imported you state go
104:48 - into your function based component here
104:50 - and let's just set up our use states
104:52 - which is going to simply just be these
104:55 - two the first one is going to be is the
104:57 - comments section opened and set is
104:59 - common section open the default will be
105:00 - set to false and the next one is going
105:03 - to be clients comments and then set
105:04 - comments because we want to be updating
105:06 - the comments of each post okay we will
105:08 - be adding use effect much later but for
105:10 - now it's not nearly necessary what i do
105:12 - want to do next is create a function and
105:13 - that's going to be called clock to date
105:16 - string and it's going to take oops and
105:17 - it's going to be a function that takes
105:19 - in a timestamp as the parameter and here
105:22 - we can play with this variable that we
105:24 - made and we can say time ago dot format
105:27 - new date and then we can pass in their
105:30 - timestamp dot to number times 1000
105:34 - quotes twitter twitter dash now okay and
105:38 - then within the same function you want
105:39 - to do cons post detail it's a variable
105:42 - that's gonna lead kant's postdetail
105:44 - which is going to be an asynchronous
105:46 - function and con's result equals wait
105:50 - post index post and then we want to do a
105:52 - set comments it's gonna just wait that
105:55 - result cool okay and if you remember
105:58 - inside feed we have a post component
106:01 - that's going to be created every for
106:02 - every single post and we're passing in
106:04 - post equals post dot account so we need
106:07 - to be do it this is in line 24 post that
106:10 - index comma post we need to be accepting
106:12 - all these props so that's going to be
106:14 - post detail create comment so i'm going
106:16 - to start accepting those props and
106:17 - destructuring them it's going to be post
106:20 - view detail let's see what else great
106:22 - comment key name url create comment key
106:26 - name and i believe that's all it's
106:28 - looking good awesome so there's also
106:30 - more functions for this but i think this
106:32 - is good for now we have our function to
106:34 - convert our timestamp and format it all
106:37 - right i guess the next thing we should
106:38 - do is let's work on the front end of the
106:40 - post component so i'm gonna clean it up
106:42 - and the class name is going to be style
106:44 - dot okay there we're gonna have another
106:47 - div within that which is just gonna be
106:49 - the post publisher so it's gonna have
106:51 - that name style
106:52 - dot post publisher and inside it's going
106:56 - to contain an image which will be
106:58 - self-closing inside that image it's
107:00 - going to have a source property post dot
107:03 - poster url okay then we have the class
107:06 - name which will be styled at avatar
107:08 - that's what this image is supposed to be
107:10 - every time you comment on a post you
107:12 - should see your avatar right on the left
107:14 - side of it and that's what we're setting
107:15 - up right now and the height of it is
107:17 - going to be 44 with the width equaling
107:20 - to 44 as well last but not least we need
107:23 - an alt which is just going to be
107:25 - publishers profile makes sense cool
107:28 - directly following the image in the next
107:30 - line we have another div this one's
107:32 - going to be called the publisher details
107:33 - this is going to include who's ever
107:35 - leaving the comment and the time that
107:38 - they left it so that's why it's going to
107:40 - have a class name of style dot publish
107:43 - your details publisher okay and it's
107:45 - just going to attain all the dips for
107:47 - each one which is going to be class
107:49 - style dot name which will contain you
107:52 - guessed it the posts poster name all
107:55 - right next line what we need here is the
107:58 - timestamp style.timestamp
108:01 - which will make use of that function
108:03 - that we just created which is the clock
108:05 - to date string and we pass in the post
108:08 - time cool which will format it to how we
108:10 - want it to look on the comments nice all
108:12 - right so after you do that we have
108:14 - closing div closing div closing div then
108:17 - in here in between these two we're gonna
108:19 - have another div no class name but with
108:21 - the div inside of this though we'll have
108:23 - a class name which is just gonna be
108:25 - style dot text all right and within it
108:27 - it's gonna be the post doc yeah now i
108:30 - was saying comments earlier all this
108:31 - stuff should be the posters details not
108:34 - the commenter so like when you make a
108:35 - post which will show up on the feed
108:36 - right here let's be a nice square you
108:38 - should see a little profile picture with
108:40 - whoever made that post and the time set
108:42 - of when it happened as well as their
108:43 - name so that's what we're setting up now
108:45 - this right here div is controlling what
108:47 - the content of said post cool and then
108:50 - from there we'll have a div which is in
108:53 - charge of holding the reactions so it's
108:57 - going to be div class name style dot
108:59 - reactions cool these are where all our
109:02 - icons are going to come in we're going
109:03 - to have another div that's going to hold
109:05 - the reaction item itself style dot
109:07 - reaction i know and this one's going to
109:09 - have the by like with some text that
109:12 - accompanies it which will be class name
109:14 - style dot reactions sex and we like
109:17 - inside so it's gonna be a similar
109:19 - pattern with the other reaction so i'm
109:21 - just gonna fast forward get all the
109:22 - reaction items to typing them all out so
109:24 - make sure you go out of this div and
109:26 - still inside reactions container and
109:28 - then you can add everything else okay
109:30 - the key point that i want to drive home
109:32 - is that this specific has it has the on
109:36 - click of is comment section opened and
109:39 - whatever it is before if it's true it
109:41 - will switch it to the opposite which is
109:43 - false if it's false this knot will
109:44 - switch it to true okay that's all that's
109:46 - happening there and it's gonna have the
109:48 - five reg common alt icon as well as the
109:50 - comment from there we also have the
109:52 - another reaction item of the fi refresh
109:54 - cw which is to refresh the post itself
109:58 - so it will refresh the comments itself
110:00 - on the post cool and then the last thing
110:02 - here in between these two divs the last
110:04 - thing we need to write is some
110:06 - conditional rendering of is comment
110:09 - section open if that is true we should
110:12 - see the comments section which is again
110:14 - the component that we set up earlier and
110:16 - the comment section all it is if you
110:17 - remember the posts on facebook there's
110:19 - gonna be a little box underneath it
110:21 - which is gonna hold all the comments
110:22 - we're gonna make a component for that
110:24 - and pass in certain props which is just
110:26 - gonna be the actual comments that we
110:28 - have itself okay so after write comments
110:30 - equals comments next thing we can do is
110:32 - set up the view detail that also
110:34 - function
110:36 - nope the view detail is going to equal
110:38 - the view detail okay then we have the
110:41 - name is going to be the name and the url
110:43 - is going to be the url awesome all right
110:47 - view detail is something that we're
110:48 - getting from post and the create comment
110:51 - and key haven't been sorry not key i
110:54 - actually don't need key here now i'm
110:55 - thinking about it but as i was saying
110:56 - the create comment hasn't been set up
110:58 - yet okay with that said that should be
111:00 - the post front end and one of the
111:03 - functions cool all right guys now that
111:05 - we have our post component done i want
111:07 - to start being able to test all this
111:09 - functionality but before we do that
111:11 - we're going to need to set up our
111:12 - contacts folder so what i'll do is i'm
111:14 - going to make a new folder and i'll just
111:16 - call it context all right because we're
111:18 - going to be using the context api of
111:20 - react so that any variable or function
111:22 - that we're creating there can be used
111:24 - anywhere in my app because it's global
111:26 - so in the context folder let's make a
111:28 - new file and let's say it is the use
111:32 - wallet balance js okay from there there
111:35 - is a couple imports that we have to do
111:38 - which is going to be import use wallet
111:41 - from at salon wallet adapter react hope
111:45 - these aren't the suggestions adapter
111:47 - react boom cool next line import we're
111:50 - going to import something from solana
111:51 - web 3.js which is just going to be lan
111:55 - ports per soul and it's going to be from
111:57 - solano web 3.js next step let's import
112:00 - all the react hooks that we're going to
112:02 - use for this file which is going to be
112:04 - create context use the context we create
112:07 - and use effect and use state and it's
112:10 - all going to be from react cool and we
112:13 - also need a t for create context nice
112:15 - okay we're going to do another import
112:17 - which is import star as anchor from at
112:20 - project
112:21 - serum slash anchor import solana
112:25 - underscore post from the utils slash
112:29 - cons cool from here let's do a cons
112:31 - balance context equals create context
112:35 - and we'll pass in no cool from there
112:37 - let's do a cons connection and the
112:38 - connection is going to equal new anchor
112:41 - dot web3.connection
112:44 - so lana underscore host okay then we can
112:46 - do an export default function use wallet
112:50 - balance all right and again before i
112:52 - continue on this function this is
112:53 - getting the connection of the devnet and
112:56 - storing into the variable and then on
112:58 - this next line here we're actually
112:59 - creating a function called use wallet
113:02 - balance which believe is going to make a
113:04 - variable balance and we're going to set
113:06 - that equal to our use context we're
113:08 - going to be using this function later on
113:10 - in our front end of the header so that
113:12 - we can see that while that user's
113:14 - wallets balance you can pass in balance
113:16 - contacts within here cool all right now
113:18 - that's done we're just going to return
113:20 - the balance and the set balance itself
113:22 - okay cool now for the important part
113:25 - this one is for actually connecting the
113:28 - user's wallet i'm going to say the const
113:30 - wallet balance provider which is an
113:32 - important part of the constant the
113:34 - context it's going to equal arrow
113:36 - function and inside the parentheses here
113:39 - object and put in children cool so
113:41 - that's the provider next thing you want
113:43 - to do is return return the balance
113:45 - context dot provider and in between it's
113:49 - actually going to take in children and
113:51 - within the opening tag and let me just
113:53 - fix this up real quick and then with the
113:55 - opening tag of the first provider we're
113:56 - gonna put value equals curly bracket and
114:00 - then square bracket anything i put in
114:02 - between these curly brackets is going to
114:05 - be global throughout my whole app so
114:07 - what i want to do is put balance and sit
114:10 - down let me explain that again so
114:12 - everything that i put in between these
114:14 - curly brackets is going to be global
114:16 - anywhere inside my application okay so
114:18 - now we set up the provider one important
114:20 - step that we have to do is go into your
114:22 - pages and then go into underscoreapp.js
114:25 - and let's actually set up our provider
114:28 - and wrap it around our app okay let's
114:30 - import it first and say import wallet
114:33 - balance provider from dot context
114:37 - forward slash use wallet balance so now
114:39 - we imported the provider all we have to
114:41 - do now is wrap it around our app so i'm
114:43 - just going to format it like so enter
114:45 - tab put this guy down here and let's
114:48 - format this so what i want to do is call
114:50 - that wallet balance provider and in
114:52 - between simply place the app cool so now
114:55 - that you wrap the provider around our
114:57 - app anything we put in value becomes
114:59 - global so going back into our context
115:02 - let's set up the rest of the wall the
115:04 - balance provider which at the top here
115:06 - we can say const const wallet is going
115:09 - to equal use wallet and use while all it
115:11 - does is uses the user's wall and sets it
115:14 - in a variable then we're going to
115:15 - balance set balance equals use state
115:18 - because remember this is for the wallet
115:20 - connection the other one is for the
115:21 - front end so you got to spell balance
115:23 - correctly all right we're almost done
115:24 - with this guys let's do a simple use
115:26 - effect which again takes an arrow
115:28 - function and within that function you're
115:30 - just going to do a semicolon async
115:32 - semicolon parentheses async arrow
115:35 - function if wallet question mark dot
115:39 - public key i'm going to do a const
115:41 - balanced equals await connection dot get
115:45 - balance parentheses wallet dot public
115:48 - key again it's coming from this variable
115:51 - we're grabbing the publicly from there
115:52 - and setting it equal to getting the
115:54 - we're getting the wallets public key
115:56 - getting the balance of that and setting
115:58 - it equal to our balance variable which
116:01 - we can then do set balance pass in
116:03 - balance the variable then do this four
116:07 - slash and do the lamb parts per sole
116:10 - okay once that's done i'm gonna put
116:12 - parentheses here then do a comma and
116:14 - let's set up the dependency module and
116:17 - put pass in the wallet and the
116:19 - connection because that's the
116:20 - dependencies that i want to look out for
116:22 - because if the wallet changes or if the
116:23 - connection changes at all then we should
116:25 - run the use effect once again okay that
116:28 - said whole thing you need to do now is
116:29 - pass in the balance so now it's not
116:31 - grayed out anymore comma set balance and
116:34 - make those two things global okay cool
116:36 - now that's done that should be the use
116:37 - wallet balance all right so now that our
116:40 - user's wallet balance is done i set this
116:42 - up because it's going to help us create
116:44 - our next component so our next component
116:47 - is going to be the header component so
116:49 - let's go ahead in their components
116:51 - folder new file
116:52 - header.js cool test audio all right
116:55 - we're good cool header.js inside header
116:57 - it's pretty standard rf r-a-f-c-e
117:01 - boom and if you remember where's header
117:03 - located in terms of our app you have to
117:06 - look no further than the feed.js sorry
117:08 - not the feed.js look no further than the
117:10 - index.js so coming up here we have the
117:13 - header we are safe to import it now so
117:16 - we can say import header from components
117:19 - header cool so now we have the header
117:21 - component in there as well and you can
117:22 - see it's over here so going to the
117:24 - header.js let's set up all the imports
117:26 - that we're going to need one thing i
117:28 - know for sure is that we're going to
117:29 - need our assets folder which we can also
117:32 - provide to you you guys won't have this
117:33 - but these are the images that we're
117:35 - going to be using for i'm going to copy
117:36 - it into here okay cool and at the top
117:39 - here let's at the top here let's get our
117:42 - react hooks that we'll need which is
117:43 - just going to be used for this component
117:45 - and in the next line let's import image
117:48 - from next okay okay next up we have a
117:50 - couple different react icons we're going
117:52 - to use i'm just going to speed through
117:53 - them it's just going to be these over
117:55 - here from here i'm going to do another
117:57 - import and let's get the wallet multi
118:00 - button right and that's going to come
118:02 - from slash wallet slash oops forward
118:06 - dash dash ui cool that's the wallet
118:08 - multi button i think i spelled it right
118:10 - and then if we do that we're also going
118:12 - to need to require we're going to need
118:14 - to require at solana wallet adapter
118:16 - react ui flash styles that's css cool
118:21 - okay from there let's get the solana
118:22 - logo from our assets folder excellent
118:24 - logo from assets slash soul png okay
118:28 - from there we could do import use wallet
118:31 - balance and this is actually what we set
118:32 - up literally a couple minutes ago which
118:34 - is just the context slash use while of
118:38 - balance this is our custom hook that we
118:40 - set up inside our contacts here so that
118:43 - we don't have to import use context to
118:45 - use it in our header js all right cool
118:48 - at the top here i'm going to say balance
118:50 - equals use wallet balance because i'm
118:52 - going to get i'm just destructuring
118:54 - balance from use while balance and then
118:55 - from there let's set up some front end
118:58 - setting it up i'm going to do a class
118:59 - name and i feel like i can hear you guys
119:01 - predicting on what the name of this
119:03 - class is it's going to be style.wrapper
119:05 - yes you're right okay inside that div i
119:07 - want to have a header remember the
119:09 - header is this top part of facebook
119:11 - there's like a left side and then
119:12 - there's the right side left side should
119:13 - have the logo so what i'll do is i'll
119:16 - call it style.headerleft
119:19 - and then inside that div we'll have the
119:21 - image that we're getting from next.js
119:23 - which is going to let us use which we
119:26 - can name it classname style.facebook.com
119:30 - okay and the source it's gonna be this
119:32 - link and remember we set that up in the
119:35 - next js config it's gonna be this long
119:38 - one right here which essentially it's
119:39 - just the facebook logo it's gonna equal
119:42 - fb logo height is just going to be 30
119:45 - and typically the width will be the same
119:47 - so it will also be 30. cool so that's
119:49 - the image in the next line we need
119:51 - another div in the next line we're going
119:52 - to need another div because in the
119:54 - middle of the header you should have
119:55 - some sort of search container so that's
119:58 - exactly what i'll call it style dots
120:00 - search container okay let's use one of
120:02 - our icons which is the little search
120:05 - magnifying thing and it will have input
120:07 - field where the type is going to equal
120:10 - text oops text and the class name is
120:13 - going to equal
120:15 - style dot search input with placeholder
120:18 - going to be search facebook okay cool
120:21 - that's the input closing closing div and
120:24 - here we're gonna have a couple other
120:26 - things which is gonna be the div for the
120:29 - header center part so i'm gonna give it
120:32 - a class name of style dot header center
120:36 - container style dot header center
120:39 - wrapper style
120:41 - dot
120:42 - center icon empty cool and inside here
120:46 - it's going to be an ai fill home and
120:48 - this one will actually have a class name
120:49 - of its own oops this one will have a
120:51 - class name of its own which is going to
120:52 - be class name style dot center nab icon
120:56 - amazing so it should be a closing div
120:58 - there and now we have to make the rest
121:01 - of the icon which is going to be very
121:03 - similar so i'm going to copy this and
121:04 - paste it a couple times i think we need
121:06 - to do this three times so that's one two
121:09 - three we do got to change is the type of
121:11 - icon that we're seeing so instead of a i
121:14 - feel home it should actually be bs
121:16 - display for this and the class name
121:18 - should be the same next is going to be
121:20 - the group two line and this one's gonna
121:23 - be the s i facebook gaming okay closing
121:27 - div closing with cool and since we did
121:30 - the header left the headers let's
121:32 - finally do the header right so class
121:33 - name style.header right so this header
121:35 - right it's gonna have some conditional
121:37 - rendering as well i'm just gonna be
121:38 - named and parentheses if name exists
121:42 - then we wanna do a d that shows that
121:45 - user's name if you log in it would be
121:46 - nice to see the user that's logged in if
121:48 - you're not logged in you shouldn't see
121:49 - it at all so div class name it's going
121:51 - to be oops div class name this one's a
121:54 - little special it's going to have
121:55 - backticks in it with a dollar sign a
121:58 - template literal which is style dot user
122:00 - info and another dollar sign here for
122:03 - the template literal again and then
122:04 - we're gonna do style dot header right
122:07 - okay cool looks good so far let's add an
122:10 - image and this image should contain our
122:12 - profile picture that we've been using
122:14 - this whole time and don't worry about
122:15 - godzilla because it wants a source
122:17 - property for the source all we need to
122:18 - do is use that url again non-empty
122:21 - expression oh no it's fine cool so it's
122:23 - fine source equals url we're good to go
122:26 - and let's just give that image a nice
122:28 - height of 20 pixels and a width of the
122:31 - same length cool give it a nice class
122:33 - name of style user image and for the alt
122:37 - give it the same name of user space
122:40 - image cool and we're not done yet
122:42 - because along with the image we also
122:43 - want to have the user's name which
122:45 - should be dynamic so in between these
122:48 - divs we can put class name oops not like
122:50 - that in between these divs we can give
122:52 - it a class name of
122:54 - style.username and in between it just
122:57 - pass in name and that should actually be
122:59 - in curly brackets cool and yeah so if
123:02 - the user has a name then we're gonna
123:03 - render this div with the user's image
123:06 - and their name that they have all right
123:08 - so after that we can use that wallet
123:10 - multi button we passed in then we're
123:13 - going to have a div with the class name
123:15 - of balance container and this one's
123:18 - special too because it has backticks
123:20 - because we're going to have a template
123:21 - literal and it's going to be style dot
123:24 - balance container and then also another
123:26 - template liberal style dot header but i
123:29 - believe yeah awesome and then when in
123:31 - this div it should also have an image
123:34 - and it's just going to contain a nice
123:36 - solana logo because i want a salon logo
123:38 - and then how much solano we have and
123:40 - then how much soul we have so let's give
123:43 - this image class name of style dot
123:46 - balance icon nsrc equal to solana logo
123:50 - which i set up in the import statements
123:52 - up above height 20 pixels with 20. okay
123:55 - then i'm going to say alt and it's just
123:57 - solana very cool that's the image lastly
124:01 - we just need to have this div here which
124:02 - is going to show us how much of soul how
124:05 - much soul do we actually have so i'll
124:07 - call this style balanced text which will
124:10 - contain curly brac curly brackets let's
124:13 - use that balance that we got from our
124:14 - custom hook balance dot to fit two and
124:19 - whatever that amount comes out to and
124:21 - then let's put soul here so it would say
124:22 - oh you have two point three three three
124:25 - so for example okay and it should be
124:27 - closing dave closing awesome so that's
124:29 - the header and we should get error
124:30 - because there's no styles yet so let's
124:32 - set up the styles yep there's the error
124:34 - but your hero is coming i'm gonna make
124:37 - the style object cool and there's a lot
124:39 - of css for this so i'm going to be
124:40 - moving fairly quickly feel free to pause
124:42 - the video to not miss a thing for the
124:44 - wrapper i'm going to have some flex
124:46 - properties item center with full height
124:49 - with 4 rem justify around px-1 rem and
124:54 - all of this stuff i can't read out all
124:55 - the css or this video will be 10 hours
124:57 - long so let's keep on right next css
125:00 - header left which is that main div that
125:02 - holds all the stuff that we need on the
125:04 - left side of the header which is pretty
125:05 - much just the logo this is what we want
125:06 - to add to it some flex with the justify
125:09 - center and a gap of 0.6 rem okay next up
125:12 - we're actually styling that facebook
125:14 - logo giving it item center and object
125:16 - contain i'm going to do a two for one
125:18 - next which is going to be the search
125:19 - container and the search input okay cool
125:22 - then we got a header center container
125:24 - which has just these three flex one flex
125:27 - item center justify center h full and
125:30 - head center wrapper which has pretty
125:31 - much similar things except for the py
125:34 - dash 2. another two it's gonna be center
125:36 - nav icon has a cursor pointer to it so
125:39 - that whenever we hover over it it's
125:40 - gonna have a different background and
125:42 - it's gonna have a rounded of 10 pixels
125:43 - here's the center nav icon those are the
125:46 - all the icons inside that container it's
125:48 - gonna be all of these guys cool from
125:50 - there we're gonna do the header and the
125:52 - header right button this is for all the
125:54 - user info which is pretty
125:55 - self-explanatory this is the background
125:57 - when i hover over it this will be the
125:58 - new background this has a bold font text
126:00 - color black format the image like and
126:02 - the rest of the css is for the balance
126:04 - which is just going to be bounce
126:06 - container bounce icon balance text so
126:08 - i've hit save let's hope it all matches
126:10 - up even if it doesn't check render
126:12 - method of header that's interesting oh
126:15 - because name is not defined we can't
126:16 - forget to pass that in so i'm going to
126:19 - take name and url and if we do that we
126:22 - also have to go to index and pass it in
126:25 - as well just double check real quick and
126:27 - if we pass that down we have to pass it
126:29 - down in index as well so i'm going to go
126:31 - to name going to equal name and url
126:34 - simply cool okay and let's go back to
126:37 - that component which was and save this
126:40 - expected a string let's take a look this
126:43 - is a capital u that might not fix it and
126:46 - might but that definitely shouldn't be a
126:48 - capital e let's hit save and there it is
126:50 - there is our wonderful header with how
126:53 - much soul which should just be zero by
126:55 - default and then we can select the
126:57 - wallet too awesome that looks good to me
127:00 - okay cool so that's the header.js is
127:02 - there anything else i need no i think
127:04 - we're good that's the mediaheader.js all
127:06 - right guys this would be a good point to
127:08 - create the rest of our contacts what
127:10 - we're going to need is a wallet
127:12 - connection provider so we can start
127:14 - selecting the wallet that we want so go
127:17 - to your contacts folder i'm going to say
127:18 - new file and i'll literally call this
127:20 - one wallet connection provide.js cool
127:24 - now that you're in here let's import a
127:26 - couple things like the connection
127:29 - provider and we also need a wallet
127:32 - provider as well let's do it from solana
127:35 - slash wallet adapter dash cool so we
127:38 - want the connection provider and the
127:39 - wallet provider from the cell now wallet
127:42 - adapter react from there there's a
127:44 - couple other providers that we need well
127:46 - just one more really which is just the
127:48 - wallet model provider and that's going
127:50 - to come from the solana wall adapter
127:53 - react ui and let's also import the
127:56 - phantom wallet adapter because i'm going
127:58 - to be using my phantom wallet for this
127:59 - project at salona slash wallet adapter
128:03 - dash wallets finally using that package
128:06 - and we're actually gonna use a used
128:07 - memory let's actually use the use memo
128:09 - hook from react awesome so that's pretty
128:12 - much all the imports let's actually set
128:13 - up the provider itself which is going to
128:15 - be const wallet connection provider
128:19 - equal to children oops not capital c
128:21 - children and inside the provider we're
128:23 - going to need to have a return and
128:25 - remember all those providers that we did
128:27 - import wrap them up in here so the first
128:29 - one is the connection provider this one
128:31 - actually has a attribute of an endpoint
128:33 - which is just going to equal endpoint
128:35 - and then within that provider we have
128:37 - the wallet and inside of that we have
128:39 - wallets equals wallets and auto then
128:43 - let's set up our modal so let's do the
128:44 - wallet modal provider which in between
128:46 - them it's going to take children and we
128:49 - can't forget to do an export connection
128:51 - provider hit save don't forget to do an
128:53 - export default wallet connection
128:56 - provider so at the top here let's set up
128:58 - where endpoint is so it's going to be
129:00 - variable that's going to equal that use
129:03 - memo that we were to use use memo we're
129:05 - going to have an arrow function we're
129:07 - going to have an anonymous function that
129:08 - just has quotes to the https
129:12 - colon slash api dot deb and
129:16 - solana.com and comma array cool that's
129:19 - the end point next we gotta set up the
129:21 - wallets that we will use which will
129:24 - again equal use memo another anonymous
129:26 - function here and inside is an array
129:28 - with new phantom wallet adapter so
129:31 - that's where that comes in open the
129:32 - parentheses outside that array you need
129:35 - the comma and then another one cool this
129:37 - is looking good i think that's it for
129:39 - the wallet connection provider of course
129:41 - if we're going to set up a provider like
129:42 - this we need to wrap our app around it
129:45 - so going back to the underscore app js
129:48 - one thing i want to do is at the top
129:50 - import dynamic from next slash dynamic
129:54 - oops it would help to spell this
129:56 - correctly there you go and essentially
129:59 - i'm getting dynamics so that i can split
130:00 - my code into dynamic chunks let's do a
130:03 - const wallet connection pro 5 equals
130:06 - that dynamic parentheses and inside
130:09 - those parentheses we have functioning
130:11 - with an import parenthesis of
130:15 - dot dot four slash contacts slash wallet
130:18 - connection provider cool and just take
130:20 - out that little c that i have there
130:22 - wallet connection provider equals this
130:25 - we're importing that context from the
130:27 - provider and i want to do is wrap this
130:29 - whole thing in that so enter let's type
130:32 - it in wallet connection provider okay
130:35 - copying everything inside here pasting
130:37 - it save refresh all right let's see
130:40 - what's going on so it's back in here
130:41 - let's do an inspect element see what's
130:43 - going everything seems to be fine so far
130:45 - camera just died again all right so it's
130:47 - loaded in it looks like there's no real
130:49 - errors let me just make this bigger
130:51 - inspect element all right yeah no big
130:53 - errors which means if we did everything
130:55 - right i should be able to click select
130:57 - wallet and there it is phantom is
130:59 - detected i do have phantom installed
131:01 - that's the wallet that we're going to be
131:02 - using and if i hit click enter my
131:06 - password new wallet pads activity
131:08 - request proof of direction sure hey
131:10 - there we go nice this is super cool
131:12 - because before we were just using
131:14 - metamask authentication to log in and we
131:16 - just started using morales now we're
131:18 - experimenting we're working on rust and
131:21 - we have phantom wallets set setup too
131:23 - which is cool so now just to move
131:26 - forward let's update our signup.js let's
131:29 - update our signup.js and let's make a
131:32 - function called create user okay const
131:35 - create user is going to be an
131:37 - asynchronous type of function and it's
131:39 - going to take an event and all it's
131:41 - going to do for now is going to be a set
131:43 - registered to true right because after
131:46 - we sign up we should be able to create a
131:48 - user and once we do create that user we
131:51 - should see the feed instead of the
131:52 - signup page okay and what we want to do
131:54 - with this function is put it onto the so
131:57 - going back to the form we should have an
132:00 - on submit here on submit equals create
132:04 - user all right so it's going to equal
132:05 - that function it's going to call it that
132:07 - hit save and we should also go back to
132:10 - the index because remember how we set a
132:12 - default to true we can set this back to
132:14 - false hitting refresh here after setting
132:17 - this to false so it should lead me to
132:19 - the sign up page cool and it's wanting
132:21 - me it wants me to sign up with it wants
132:23 - me to sign in with my phantom wallet
132:24 - again so let's just unlock it cool so
132:27 - let's test out if the sign up works and
132:30 - if this works we should get to the feed
132:32 - so i'm going to say the name is lance
132:33 - and the profile image url oh don't know
132:36 - what happened one second again so we're
132:38 - back in the sign up page and i just want
132:40 - to double check something before moving
132:42 - on going to sign up again i do remember
132:45 - for there's two input fields this one
132:46 - was named and yes this one should be url
132:51 - so i'm gonna hit save which will
132:52 - probably reload this once that's done i
132:54 - think we're good to go to actually sign
132:56 - up and see if this works there it is
132:58 - there's the url that was passed down and
133:00 - for the name it's just going to be lance
133:02 - so i'm going to click sign up which will
133:04 - take us to this point because of the
133:06 - conditional rendering and now what we
133:08 - need to do is make a post we did all
133:10 - this code to create a post let's see if
133:12 - it works so i'm going to say hello world
133:15 - and be very basic ah okay so we have a
133:17 - uft8 is not defined i just remembered i
133:21 - think it's because i spelled it wrong
133:22 - try this again i'm gonna say hello world
133:24 - hit enter oh now it says program is not
133:27 - defined all right yep this is why we
133:29 - test stuff running into some bugs saying
133:31 - that program is not defined that's
133:33 - probably because if you go to my feed
133:35 - there's a couple of things we can set up
133:36 - now so i can say cons wallet is going to
133:39 - equal use and that's just coming from an
133:40 - import at the top and then i'm going to
133:42 - do a const connection equal new anchor
133:45 - dot web three dot connection and this
133:48 - makes more sense why this was grayed out
133:50 - we also i forgot to do this we're gonna
133:52 - do okay and then from there now we can
133:54 - define program by saying khan's program
133:56 - tools get program instance connection
134:01 - comma wallet cool so we're gonna get the
134:04 - actual rpc and set that equal to a
134:07 - variable called program cool so there
134:09 - you go program is now defined we
134:10 - shouldn't see that error again let's see
134:12 - what other bugs there are hello world
134:15 - take two or take three ah default
134:17 - accounts is not defined that's why this
134:20 - should be default accounts with s
134:22 - awesome let's try this again lens sign
134:24 - up let's make a post hello world oh it's
134:27 - gonna have to ask me to sign which is
134:30 - pretty cool okay so we want to improve
134:31 - the transaction because oh all right i'm
134:34 - an idiot guys i forgot i'm trying to
134:37 - create a post without any solana myself
134:39 - so let's have actually go to the faucet
134:41 - and get some salon we can actually get
134:44 - solana from going into solana faucet.com
134:47 - so i'm gonna go into there so this is
134:49 - the solana faucet where we can actually
134:51 - get tests uh it's a lot like tests alana
134:53 - for our apps that we can use so we're
134:55 - gonna need to enter our salad account
134:57 - address and one cool way to get your
134:59 - account address is remember those
135:00 - providers that we set up you can go
135:02 - ahead and click this and you can
135:03 - actually copy the address isn't that
135:05 - awesome so go to self faucet in the end
135:07 - fill just paste it in there and i'll
135:08 - just airdrop myself so let's see how
135:10 - much salon i have now we got eight you
135:12 - know what i think i'll be cool with
135:14 - eight and go back on to here and let me
135:16 - just refresh this to make sure i have
135:18 - the right solana right oops click
135:21 - disconnect cool so now we refreshed it
135:23 - and you can see it's updated it's
135:25 - accurate i have a solana i have eight
135:27 - soul so i'm gonna go put in my name
135:29 - again to sign up and then let's try this
135:32 - bad boy out okay that's a good sign we
135:34 - want to approve transaction i'm going to
135:36 - hit approve nothing immediate so i just
135:38 - want to double check that so if you
135:40 - click refresh post it should actually
135:42 - refresh it and get all posts again so
135:44 - coming down to refresh post oh that
135:47 - makes a lot of sense we also need to
135:49 - have an on click here we got something
135:52 - program the rpc.createpost is not a
135:54 - function oh i see i think i know the
135:57 - issue let's send feed in line 82 and we
136:00 - can fix it by putting a lowercase up
136:02 - nice alright so we just recently passed
136:05 - in the get all posts because i want to
136:08 - see and i want to get this button
136:09 - working so that i can just constantly
136:11 - click this button instead of refreshing
136:12 - the whole thing and signing up so what
136:14 - i'm going to have to do is go into here
136:15 - and do an on click and it's going to run
136:19 - the get all posts function once it's
136:21 - clicked so i'm gonna do this and do a
136:23 - get all posts i'm gonna hit save and
136:25 - just to double check is there anything
136:26 - going on at the moment okay no errors
136:29 - yet so i know that if i do this and i do
136:32 - get an error we're going to run it
136:33 - through so i'm going to say world you
136:34 - got the transaction ah get comments on
136:38 - post is not defined so let's double
136:40 - check what that is get comments on post
136:42 - this doesn't exist yet i haven't made
136:44 - this so for now let's just take it out
136:46 - i'll hit save cool let's just try this
136:48 - one more time and do again with plants
136:50 - so none of the common stuff should be
136:51 - working so that's why we're getting all
136:53 - these errors that's line 114 yeah this
136:55 - also doesn't exist yet we have we've
136:57 - only worked on the post things and
136:58 - that's what we want to test right now so
137:00 - i'll just comment that out as well am i
137:02 - using it nope cool nothing immediate is
137:04 - popping up that's from before save
137:07 - comment errors from before oh let's go
137:09 - there's an array okay we got accounts
137:11 - this is coming from my console and line
137:14 - 46 all right so just to make sure this
137:17 - these arrays are coming from my console
137:19 - of the posts in line 37 and i believe we
137:22 - have three posts we have three hello
137:23 - world so what i'll do next is let's
137:25 - close this console i'm gonna make this
137:27 - bigger let's see if a fresh post works
137:29 - and if not we're just gonna have to
137:30 - refresh the page okay i clicked it it
137:32 - wasn't doing anything so let's just
137:34 - refresh it so this is progress guys
137:36 - we're able to actually see the post in
137:38 - our console the next step is let's see
137:40 - if it can actually get populated now
137:41 - okay
137:42 - and nada refreshed it so i want to just
137:46 - see my console still empty oh it's empty
137:48 - again interesting right it's empty shot
137:51 - refresh post fresh post isn't running
137:54 - let's see if this on click is even
137:55 - working let me just do that now so let's
137:57 - see the refresh post should come from
138:00 - here but i'll post a console.log all
138:03 - right guys i want to check if this
138:04 - function is even running oh i got it so
138:06 - i refreshed it and it got the array with
138:09 - an extra hello world now interesting
138:10 - okay so it looks like we're actually
138:12 - getting the posts but there's nothing
138:14 - rendering we just need to add a return
138:16 - here because if we're gonna put curly
138:17 - brackets you're gonna need to have a
138:18 - return if we didn't have the curly
138:20 - brackets we can make it a nice one-liner
138:22 - and that doesn't need to return so if i
138:24 - said save how to compile this might take
138:26 - a second and we should get something new
138:28 - style is undefined all right so let's
138:31 - just do that really quick and let's work
138:32 - on the style for the post alright so
138:34 - that's going to be an important issue we
138:36 - just need to add the styling to our
138:38 - posts so what we can do is come to this
138:41 - line right here and let's just do a
138:43 - constant style equals that and the
138:45 - wrapper the most outer div is going to
138:48 - have all of this let me do a whole z
138:50 - cool yep with 100
138:52 - mt one rem rounded 0.6 with this
138:54 - background color and a white text and p
138:57 - 0.4 am so that's the wrapper the next
139:00 - part and again i'm going to move in very
139:01 - this next part is the post publisher div
139:04 - which is going to be the next day inside
139:06 - it's just going to have a flex position
139:07 - relative and up center i'm going to do
139:09 - two for one and this one which is just
139:11 - the avatar it just has rounded full for
139:13 - the css and publish detail publisher
139:16 - details it will just have a flex on flex
139:18 - column and ml
139:20 - 0.5 rem next thing i want to do is let's
139:23 - set up the name and time stamp which is
139:25 - just going to be these two text small
139:27 - text small and text with that color
139:30 - speaking of text there should be css for
139:32 - it which is just going to be those two
139:34 - properties these two are pretty long
139:36 - it's going to be the reactions container
139:38 - and the reactions item which just has a
139:40 - border like so text that is 18 pixels
139:43 - flex justify evenly text of this color
139:45 - and a cursor pointer pin py-1 here's the
139:48 - reaction item which is going to be we're
139:50 - just going to have flex proper flex of
139:52 - one atom center justify center and
139:54 - rounded 0.4 bm along with a nice hover
139:58 - effect with that background color cool
140:00 - last two are pretty simple and it's just
140:02 - gonna be the reactions text and the
140:05 - refresh icon so that looks a lot better
140:08 - we actually have some css for the post
140:09 - itself and after all that our phantom
140:11 - wants me to reconnect don't worry fandom
140:13 - i'll reconnect with you cool let's hit
140:16 - lance sign up okay getting post hey
140:19 - let's go finally look at that all my
140:21 - hello worlds that i set up they're
140:23 - finally showing up okay cool i think
140:25 - it's because i wasn't directly clicking
140:26 - the icon that might have been it or
140:28 - either the page was still loading but
140:30 - there we go we're able to get posts now
140:32 - now the real thing that we need to start
140:34 - working on is how can i start adding
140:36 - comments creating them and then getting
140:38 - all the comments right so i think that's
140:40 - the next thing i'm going to tackle but
140:42 - this is cool guys we can actually make
140:44 - posts for facebook and all these posts
140:46 - are being stored on the blockchain
140:48 - amazing cool so before i move on to
140:50 - creating comments one thing i'm noticing
140:53 - is there's no timestamp so i just want
140:55 - to double check that in my post
140:56 - component so scrolling down we're
140:58 - getting the timestamp from clock to date
141:00 - string but am i calling it yes i am so
141:02 - it's not returning anything let me just
141:05 - double check this function the first
141:07 - thing is the post detail it shouldn't
141:09 - actually be in the clock to date string
141:11 - should be its own thing and
141:13 - now that i'm seeing it i could make this
141:15 - a one-liner that's probably why it's not
141:17 - returning anything so if i hit save now
141:19 - hey there we go so 32 minutes ago 33
141:21 - minutes go to 35 42 nice so we got the
141:24 - timestamps for it let's go ahead and
141:26 - start making the create comments
141:28 - functionality cool so one of the first
141:30 - things we have to do is hop into your
141:32 - facebook soul and go into your programs
141:37 - and go into your source in your source
141:39 - you're going to do a lib.rs before we
141:41 - can even create the function to create
141:43 - comments let's create the context and
141:45 - the structure of what a comment might
141:47 - look like so here we have the create
141:49 - state struct the struct for create post
141:52 - let's do one for comments and it's going
141:54 - to be this what kaz explained earlier is
141:56 - all going to apply for this one as well
141:59 - so at the bottom here first thing i'm
142:00 - going to do to start creating the create
142:02 - comment context we need to do a hashtag
142:05 - derive accounts just like what we did
142:07 - earlier and then from there we can do
142:10 - the pub struck now obstruct create
142:13 - comment and we're going to do this okay
142:16 - and then we're going to do info here
142:17 - then we can put the cool so now to carry
142:20 - on we need to authenticate the post
142:22 - account so to do that we're going to do
142:24 - a hashtag brackets account mutable say
142:27 - that it's mutable and for the seeds it's
142:30 - going to equal this array so i'm going
142:32 - to type this carefully it's going to be
142:34 - b post as ref then it's going to be
142:37 - comma post dot indexed dot sub b bytes
142:41 - dot
142:42 - as underscore ref parentheses and then
142:45 - the square bracket and then all i have
142:46 - to do next is a comma and bump awesome
142:49 - and then in the next line we have to do
142:50 - a pub post and set the value of that to
142:53 - be a count with the info comma post
142:57 - count comma there we go okay that's the
142:59 - first part of that from there we're
143:01 - gonna need to authenticate the comment
143:03 - account so to do that we must set it up
143:05 - like this again which will be the
143:07 - account parentheses here and there's
143:09 - going to be a couple of things in here
143:10 - which is going to be init let's get the
143:12 - seeds the common dot as ref comma and
143:15 - it's going to be similar to what we had
143:16 - set up over here so we're just gonna put
143:18 - the same thing which is just post dot
143:20 - indexed dot two underscore b square
143:23 - bytes parenthesis dot as underscore ref
143:27 - then we're gonna do a comma here's where
143:28 - it gets a little bit different this one
143:30 - should speed post dot comment underscore
143:33 - count dot 2 b bytes and then this should
143:37 - be inside the brackets of that as
143:39 - underscore wrap now what does it do so
143:40 - let's go here let's see if you can see
143:42 - the whole thing then it should be payer
143:45 - equals authority and space we have to
143:48 - determine the exact space in rest so
143:50 - it's going to be space is equal to the
143:52 - size of the comment account and then we
143:56 - also have to add the other stuff because
143:57 - i'm literally telling him that the space
143:59 - of the comment will be however long the
144:02 - text is so it's that length we could
144:04 - pull that here over along the username
144:06 - link plus the user url down which we set
144:10 - up at the top of this okay and then
144:12 - under this we have to do the pub comment
144:15 - there we go next i want to set up the
144:17 - authority which the authority this is
144:18 - the signer who paid the church the
144:20 - transaction fee so that's going to be
144:23 - set up hashtag count mute and next line
144:26 - that's all we're gonna need for the
144:27 - authority so we're gonna do pub
144:28 - authority signer okay let's do one for
144:31 - the system program so i'm gonna say pub
144:33 - system underscore program it's gonna be
144:36 - the unchecked account info okay then we
144:39 - have count this is for the token program
144:42 - so i'm going to do count this one will
144:44 - be constrained it's going to equal the
144:47 - token underscore program equal to end
144:51 - token it's essentially a check to make
144:53 - sure that the key of the program is the
144:55 - same and we have the id here just need
144:58 - to add the pub token program which will
145:00 - have the value of program info i believe
145:04 - token makes sense cool last one we just
145:06 - need to get set up the clock to save
145:08 - time which is going to be
145:10 - pub clock sis bar info cool and again if
145:14 - this is still not making sense to you
145:16 - don't worry we're going to have more and
145:17 - more videos in the future which will go
145:19 - more to each aspect of the programs in
145:22 - salon okay awesome but for now bear with
145:24 - me we're almost there so this is the
145:26 - structure for the comments all right so
145:29 - i'm gonna hit save all right so we
145:30 - finished the context and you're gonna
145:32 - see a couple errors because we need to
145:34 - create the structure of the comment okay
145:36 - and if you're wondering what that is you
145:38 - can think of it as an object with keys
145:41 - and values describing what in a comment
145:43 - account would have so that's going to be
145:45 - the commenter's name his url which is
145:47 - his profile picture and his public key
145:49 - these are all information that so let's
145:51 - create that comment account structure so
145:54 - to do that you can just say hashtag
145:56 - account bracket account and then from
145:58 - there we can say pub and let's define
146:00 - the structure so comments count cool so
146:02 - i'm basically saying every comment
146:04 - account will have a key of authority so
146:08 - i can say pub authority which is just
146:09 - the assigner address okay and it's going
146:11 - to have colon here it will also have a
146:14 - text key and here is going to have the
146:16 - value of whatever text we pass in in the
146:18 - create comment function which i'm going
146:20 - to do next okay then i need to know who
146:22 - is the commentary what is his name
146:24 - that's going to be important information
146:25 - commenter name string comma okay the
146:28 - commenter's url so we can get the nice
146:30 - profile picture along with the comment
146:32 - which i'll say string as well then from
146:34 - there we need let's get an index
146:36 - property in there and the type of that
146:38 - will be a u64 nope not u128 u64 okay and
146:44 - i would also like a post time because i
146:47 - need to keep track of that so this one's
146:48 - actually going to be i64 cost so that's
146:51 - the structure of the comment account
146:53 - okay hitting save and just gotta add
146:56 - comma here see let's say boom so no more
146:59 - squiggly lines pro comment account is in
147:01 - the scope now we so just to recap we
147:04 - created the context we have the
147:06 - structure of our comment account now we
147:08 - just need a function that's gonna create
147:10 - the comment itself okay so it's gonna go
147:13 - all the way to the top here where before
147:16 - we started creating structs to these
147:18 - functions these are all the functions
147:20 - should go i'm going to make another one
147:22 - so i'll say pub fn for function and this
147:25 - one will be create underscore comment
147:28 - now putting parentheses here because
147:29 - these are all the parameters that i want
147:31 - for this create comment and what we're
147:33 - going to pass in is the context that we
147:35 - to let them know you guys are going to
147:36 - be getting a comment so i'll say context
147:39 - create comment cool and now we also have
147:42 - to pass in the parameters because when
147:44 - you create a comment you're going to
147:45 - need to pass in a couple things and then
147:48 - add it to the structure itself so what i
147:51 - mean is for the text we're going to get
147:53 - text as a parameter we also have to
147:54 - define the type here so it's going to be
147:56 - a string we're also going to pass in the
147:58 - name of the person that is creating the
148:00 - comment so i'll say string as well
148:02 - commenters url their profile picture
148:05 - essentially and i think that's it for
148:07 - now and of course we're going to do this
148:09 - arrow here and let's talk about what the
148:11 - result of this function would look like
148:13 - so program result i believe it's like
148:16 - that so let's do it that post is going
148:18 - to be go to and mute ctx.accounts.post
148:23 - so if you're so this is what we need to
148:25 - do let the post be equal to this
148:28 - context.accounts.post
148:31 - if you're panicking about this little
148:32 - variable here you're gonna need to have
148:33 - the okay which we have and all the other
148:35 - functions and then i'll go away cool
148:37 - awesome so i'll just leave that for the
148:38 - very bottom but let's set up the rest of
148:40 - these variables so i want to say let
148:42 - comment equals and mute this one will be
148:46 - the ctx dot accounts dot comment okay
148:50 - and of course you're gonna need to have
148:51 - a semicolon on this okay cool hitting
148:53 - save that all goes away cool so remember
148:55 - how we made the comment account data
148:58 - structure of what it would look like now
149:00 - we're just going to add values to each
149:02 - of those things so if that makes sense
149:04 - to you you can move right along so down
149:06 - below here let's talk about the comment
149:09 - dot authority so what we want to do when
149:11 - we create a comment is for the value of
149:13 - the authority it should be the actual
149:16 - authority of the account that's leaving
149:19 - the comments so that to get that we can
149:20 - do ctx.accounts.authority
149:23 - and we'll pass in the key by doing dot
149:26 - key parentheses okay cool so now we need
149:28 - to set the text of the comment and the
149:30 - text will be whatever is passed in for
149:32 - the text so you can just say comment dot
149:34 - text equals text all right this isn't
149:35 - scary you guys have been following us
149:37 - this should be a piece of cake commenter
149:39 - underscore name we can do equals
149:41 - commenter underscore name all right so
149:44 - then we're gonna do a comment dot com
149:45 - enter underscore url because i believe
149:48 - that's how i named it equals common url
149:50 - right this is just the parameter that's
149:52 - best so then you do a comment dot index
149:55 - and the index is going to be based off
149:57 - the posts comment count smart how we do
150:00 - this because indexes start from zero
150:03 - onwards but the count starts from one so
150:05 - there'll be one ahead and we can use
150:07 - that as the index
150:08 - okay from there we can do a comment.post
150:11 - underscore time and that's just gonna be
150:13 - the ctx.accounts clock to get the time
150:17 - that unix underscore timestamp okay cool
150:20 - and of course if we're going to be using
150:22 - that index and then last but not least
150:25 - we also need to increase the
150:27 - post.comment count over here because
150:30 - otherwise every comment going forward
150:32 - would be at the same index right this
150:34 - fancy little trick is not going to work
150:36 - so we're going to do a not comment
150:38 - actually it should be a post all right
150:40 - that's why we set it up earlier post dot
150:42 - comment underscore count we're grabbing
150:44 - the count and let's just increment it by
150:47 - we can just simply do a plus equals one
150:49 - semicolon beautiful and there you go
150:51 - that should be all the common stuff for
150:53 - this program there's a triple equals
150:55 - here this should just be double equals
150:57 - save i should be fine for now the
150:59 - important thing to note is that we just
151:01 - created a new function that set up
151:03 - context and created a new struct we're
151:04 - gonna have to redeploy the program again
151:06 - so that was the step that you guys did
151:08 - with me at the beginning let's go ahead
151:09 - and get that done all right so in this
151:11 - section we're gonna be redeploying our
151:13 - program because we just updated it with
151:16 - all the functionality of creating
151:17 - comments so to get started you gotta
151:19 - make sure you have some solana inside
151:21 - your terminal so just to make sure i'm
151:23 - gonna do a salon airdrop okay so make
151:25 - sure you have enough i have about nine
151:27 - i'll just do one more and you can do
151:29 - this if you have the solana cli tool
151:31 - downloaded cool it looks like we have
151:33 - enough that should be fine and again
151:36 - when we transitioned we're gonna do
151:37 - those same steps we're coming full
151:38 - circle guys so going into facebook soul
151:42 - go ahead and delete the target folder
151:44 - because we need to generate a new
151:46 - program id so i'm going to delete target
151:48 - folder all right all right there we go
151:50 - target folders deleted let's go ahead
151:52 - and do an anchor build to compile our
151:54 - updated program okay and you guys know
151:56 - this process takes a couple minutes so
151:58 - we finally deleted the target folder
152:00 - make sure you see the facebook and then
152:03 - from here we want to do the anchor build
152:05 - to compile our updated program all right
152:08 - we're getting an error from our anchor
152:10 - build something and create comment
152:12 - program there you go that was it cool
152:14 - yes just double check the spelling is
152:16 - good if you have that end in there
152:17 - that's probably why so let's try this
152:19 - again anchor awesome that's what we like
152:21 - to see a successful compiling of our
152:24 - anchor build next let's just deploy okay
152:27 - so i'm gonna do anchor deploy and this
152:29 - should generate us a new id that we're
152:31 - gonna update our build with all right
152:33 - guys we're two for two we got a new
152:35 - program id which means we can finally
152:38 - replace it so copy that new program id
152:40 - it's going to be different from then
152:41 - what i have so just take yours and your
152:43 - declare id here because now this is
152:45 - reflective of our updated program and
152:47 - you want to take that same id head over
152:49 - to your anchor tamil and change this as
152:52 - well but you guys need that at this
152:53 - point we are deep in so let's save and
152:56 - if we do this we have to do an anchor
152:58 - build and anchor deploy again so anchor
153:01 - build first but remember this time you
153:03 - don't have to delete the target folder
153:04 - we have to do an anchor build all right
153:06 - anchor builds done just do an anchor
153:08 - deploy and if this and this should spit
153:09 - out the same program id because we
153:11 - didn't delete the target folder and once
153:13 - that's done beautiful okay now that it's
153:15 - deployed let's move on to the next step
153:17 - all right so now that we updated our
153:19 - program with all the comments
153:21 - functionality let's start working on the
153:24 - front end so just a quick recap this
153:26 - comment section component is coming from
153:28 - the post one because for every post
153:30 - they're gonna have a little comment
153:32 - section makes sense so going into the
153:34 - comment section the first thing i'll
153:35 - have you do is let's import our hooks
153:38 - that we'll use we're going to use date
153:40 - from react and there's going to be two
153:42 - components that we're going to get from
153:43 - here they don't exist yet but we can
153:45 - create them so in this comment section
153:47 - there lives a comment.js
153:50 - which i'll set up real quick as well as
153:52 - the actual create comment component okay
153:55 - oops too fast boom great comment awesome
153:58 - so now those components exist we're free
154:00 - to import them so i'll say import
154:02 - comment from comment let's also get the
154:04 - create comment cool that's done that's
154:06 - all the imports we're actually going to
154:07 - need for now so let's accept those props
154:09 - that we are passing which for now is
154:11 - just comments view detail and name and
154:14 - url yep cool and then from there we can
154:17 - set up the rest of our dibs now so let's
154:19 - get started okay so first div
154:21 - style.wrapper not stashy after that we
154:23 - want to take the comments that we are
154:25 - passing down and then map through them
154:27 - so i'm gonna do common staff map and we
154:29 - want function within here and we want to
154:31 - say for every comment we'll also get
154:33 - index involved in here and pass that as
154:35 - the key and then we want to do next is
154:38 - something like this where we can say
154:40 - comment comment and pass down those
154:42 - props so the comment will be comment the
154:45 - key will be just index cool then we can
154:48 - close it also awesome so for every
154:49 - comment we're going to create a comment
154:51 - passing in what that comment is as long
154:53 - as along with a key with an index that
154:56 - just gets generated and increments for
154:58 - every comment makes sense cool so from
155:00 - there we also have the create comment
155:03 - component so i'll say create comment
155:05 - nope it is actually self closing and
155:07 - within here we also need to pass in a
155:09 - couple of things which will just be the
155:11 - rest of the name equal name of the name
155:13 - and the url being the url cool and that
155:16 - should be it now think about it we're
155:17 - not really using view detail here so we
155:19 - can actually remove it which means we
155:21 - can go back to post and remove your
155:24 - detail here because we're gonna be using
155:26 - it for something else okay awesome that
155:28 - is the create comment i think the next
155:30 - step that i'll do is let's set up the
155:32 - comment component itself so i'll be
155:34 - going into here and for the comment
155:36 - section this is just gonna control the
155:39 - quite literally the comments underneath
155:41 - there will be a common component for
155:42 - that so the first thing we should do is
155:45 - import image from next image okay we
155:48 - also want to use time ago because along
155:50 - with the the common component we should
155:52 - see a little image of the person leaving
155:54 - the comment as well as a little time
155:56 - stamp of when they so we say time ago
155:58 - from javascript time ago import n from
156:02 - javascript time go slash local slash
156:06 - okay cool then we want to do a time go
156:08 - dot we did add default locale and that
156:11 - gave us an error let's just do an add
156:13 - loco and pass an en then we're going to
156:15 - do the exact same thing as last time
156:17 - which is make a variable called const
156:19 - time go equals new time go say n e
156:23 - u s cool and what did we pass down into
156:25 - comment probably just comment just
156:27 - comment so we can say we'll take that
156:30 - comment and now we can set up and we'll
156:32 - come back for the style in the comment
156:33 - section in a bit so coming down below
156:35 - here all that we're gonna need to do for
156:37 - this is let's actually set up an empty
156:40 - fragment empty fragment and then we can
156:42 - put our comment wrapper it's not just
156:45 - wrapper anymore style dot comment
156:47 - wrapper dave class name this one i'll
156:49 - call it the profile image container and
156:52 - judging on the name you guys could
156:54 - probably tell that we're going to have
156:55 - an image here all right i'm going to
156:56 - give my little image a name as well
156:58 - which will just be style.profile the src
157:02 - will be equal to the comma dot commenter
157:05 - url so i'm just taking advantage of the
157:08 - value of the comment i'm taking
157:10 - advantage of one of the keys inside the
157:12 - comments which will have the url in it
157:14 - already so i can say height equals 240
157:17 - the width equals 240 as well cool and
157:20 - then they're going to be a sibling div
157:22 - to that which is going to have its own
157:24 - class name as well which will be the
157:26 - actual comment container itself so there
157:29 - was a container for the image making a
157:30 - container for the comment let's say
157:32 - style dot comment okay awesome so let's
157:35 - make another div within the comment
157:37 - container and this one is simply going
157:39 - to be called style.name because it's
157:41 - just going to contain the commenter's
157:43 - name so we can just pass down the
157:45 - comment object with the and get the
157:48 - commenter's name using the key there we
157:50 - go that would make it dynamic from here
157:52 - we just have a normal div no class name
157:54 - we can just say comment dot text okay
157:57 - closing div closing div and then there's
157:59 - like a little section here which is
158:00 - something of the common wrapper which is
158:02 - why we're using a fragment because it
158:03 - needs all these guys need at least one
158:04 - parent this one this one is going to be
158:07 - style dot comment actions container
158:10 - right because in the comments itself
158:12 - there's going to be a couple actions
158:14 - that you can take or it looks like that
158:15 - you can take and reply that's exactly
158:17 - the that's the actions that i'm talking
158:19 - about the like and reply so make a div
158:21 - for that and let's set up those action
158:23 - items so i'm going to say div class name
158:25 - style dot action and we do a like and we
158:28 - need two of these because there's n
158:30 - reply one all right be sure to change
158:31 - the text inside the second one but it
158:33 - will have the same div cool and the last
158:35 - one here is going to be a div for the
158:38 - time stamp so i'm gonna say div class
158:40 - name time stamp okay time go format
158:43 - let's get a new date object date will be
158:46 - comment dot post time and we gotta
158:48 - convert it to number times a thousand we
158:51 - did this similar it's similar to what we
158:52 - did before you then have to do a comma
158:55 - and the format of this one is going to
158:57 - be twitter now okay cool and that's
158:59 - actually just the comment section so
159:01 - what i'm going to do is now add all the
159:02 - styling on top of it so since we're
159:04 - already in comment let's add the style
159:07 - so coming at the top over here i'm gonna
159:09 - say const style equals here we go so
159:12 - styling the wrapper first and it's not
159:14 - called wrapper i've been saying we've
159:16 - been using wrapper so much guys let's do
159:18 - a comment wrapper and let's give it a
159:20 - flex property cool so next i'll have a
159:22 - profile image container this one will
159:26 - have an object cover or of two okay file
159:29 - image uh i wanted it to be rounded and
159:32 - i'll say full rounded dash full there we
159:34 - go we have the comment container then we
159:36 - have common contain which will just be a
159:38 - background of i have here hashtag three
159:42 - a three b c let me see cool then we have
159:45 - rounded two x one handed text white p y
159:50 - dash two and a p x okay that looks good
159:53 - to me common container and like i said i
159:55 - want to start moving a lot more faster
159:57 - with the css because there is a lot of
159:59 - it so i'm going to quickly go through
160:01 - the next ones so this is the remaining
160:02 - css it's going to be the name with this
160:05 - text color it's going to be going to the
160:07 - text is going to be small with the
160:08 - semi-bold font and for the common action
160:11 - center we'll have the flex item center a
160:13 - gap of 1 rem ml 3.4 rem and b1 rem mt1
160:18 - and here is the action item which has a
160:20 - cursor pointer effect that's the only
160:21 - notable thing and a time stamp with this
160:23 - format alright now let's do the styling
160:25 - for the comment section itself and it's
160:28 - gonna be super intense it's just gonna
160:29 - be one thing just the wrapper so let's
160:32 - do let's make this style object and do
160:34 - con style equals and our really
160:36 - intensive styling will be just wrapper
160:39 - and it's just going to be with full
160:41 - rounded oops rounded dash beat large
160:44 - then space p dash 5 pixels flex justify
160:49 - center and just five center you want
160:52 - flux direction column border
160:54 - t border gray give it that gray color of
160:58 - 300 and the border itself will have this
161:03 - three a three b three e cool and last
161:06 - one is pt awesome so that's it for the
161:08 - wrapper and let's see the create
161:10 - comments next okay so now i'm in the
161:13 - create comment section to set it up
161:15 - let's get any hooks that we're going to
161:16 - use which is just going to be the use
161:18 - date use state and it shouldn't be that
161:21 - should be a comma there we go that's
161:23 - also good let's also get the image from
161:25 - next from next image and there's a
161:27 - couple of react icons that i have for
161:29 - you guys which is all of these and we're
161:31 - just passing in name and url for now so
161:33 - let's set that up name comma url yeah so
161:35 - this is the create comment field so
161:37 - there's gonna be a little input field
161:38 - where we can type in our comment and
161:40 - then we should be able to hit enter so
161:42 - let's make a state that keeps track of
161:44 - the input variable and we can come down
161:46 - below and start making the jsx so to get
161:50 - start with the jsx i just quickly
161:51 - formatted it and let's just give this a
161:54 - class name so i'll do div class name
161:57 - equals style.wrap from here we're going
161:58 - to have a div and that's just going to
162:00 - hold the image i want to give my image a
162:03 - name of style.profile
162:05 - image the source will be the url that i
162:08 - passed in height will be 44 and with b
162:11 - also 44 okay and the equal the profile
162:15 - image all right so let's get to the fun
162:17 - stuff which is going to be the input
162:18 - container itself so that's exactly what
162:21 - i'm going to call this one so i'll say
162:22 - div class name style input and inside
162:26 - this input container we first need to
162:28 - set up the form so i'll say form the
162:30 - form has a couple things inside of it
162:31 - which is going to be class name of
162:33 - style.form and we'll also have a on
162:36 - submit but i'll set that up in a bit i
162:38 - will just finish the rest of the gsx
162:40 - let's say so for the input field the
162:42 - type will be text the placeholder will
162:45 - be right comment and the class name will
162:48 - be style oops no quotes style input and
162:53 - the value will be input okay and there's
162:56 - like a function on here but i'm going to
162:58 - set it up there's also a function on
162:59 - here which will be an on change because
163:02 - every time we write on the input there's
163:04 - a change we want to update our input
163:06 - state so i'm going to say e set input
163:08 - and then we do like e dot target dot
163:11 - value nice cool that's the form
163:13 - underneath there's these input icons
163:15 - i'll call them so we'll do a div class
163:18 - name and call this one actually input
163:21 - icons all right so from there this is
163:23 - where we're going to insert all of the
163:25 - react icons which i already have prepped
163:27 - out which are just going to be these all
163:29 - right let me climb them up so it looks
163:30 - nicer there we go cool all right and as
163:32 - you saw we're going to have uh on change
163:34 - but we also have an unsubmit for the
163:37 - form which is going to have a post
163:39 - comment okay and let's create that post
163:41 - comment function which will be at the
163:43 - top here above the return let's go so to
163:45 - make the function you're going to say
163:46 - cons post comment equals async and we'll
163:49 - do an event with an arrow and we want to
163:53 - make sure we do event that prevent
163:55 - default because when you're working with
163:57 - the form every time you press or submit
163:59 - the form it actually refreshes the page
164:00 - we don't want to do that for our app
164:02 - because that would reset a lot of our
164:03 - states and it would make you have to
164:05 - import input a lot of the information so
164:07 - we want to do it wait create comment for
164:11 - post one second all right cool yeah so
164:13 - we want it inside the post comment after
164:15 - we event that prevent default we want to
164:17 - do this function create comment for post
164:20 - and if you guys are unfamiliar of what
164:22 - this is it's essentially a function that
164:24 - we were supposed to make earlier and
164:26 - we're going to pass it all the way down
164:27 - we haven't made it yet because it didn't
164:28 - make much sense so for now i'll actually
164:31 - just comment it and we'll work on the
164:33 - full common functionality in the next
164:35 - part so comment that up clear the input
164:38 - after we type it in there you go so that
164:40 - is all the front end portions of this
164:43 - but before we finish off actually we
164:45 - should do some of the styling cool so
164:47 - coming at the top above this function
164:49 - let's do a cons style equals and do a
164:53 - wrapper with the flex items okay then
164:56 - we're going to do a profile image
164:58 - rounded dash and the there's the input
165:01 - to container this one's a bit of a long
165:03 - one it's going to be flex 1 h10 this
165:06 - background color round and full px of 1
165:08 - are you cool the rest aren't too bad
165:10 - it's just going to be a flux give it a
165:12 - flex 1 items center and let's style the
165:15 - input now so we're just going to give it
165:17 - with full make the background of it
165:19 - transparent by saying bg transparent and
165:22 - give the outline none and for the input
165:25 - icons let's do a flex and item center as
165:29 - well and let's give it a nice gap of
165:31 - 0.4 are you okay icon which will then be
165:35 - cursor dash pointer text will then be
165:38 - hashtag 9689ae
165:42 - this is all the front-end styling for
165:44 - each component for the comments let's
165:47 - work on the functionality now okay in
165:49 - this section we'll be updating our feed
165:52 - with all of the comment functionality
165:55 - for our app itself okay so the first
165:57 - thing we're going to need to do is go
165:59 - back to your feed and let's make a
166:01 - function and it's going to be called a
166:02 - get comments on post so coming down here
166:06 - and a new line one second let's make
166:08 - that function so i'll say cons get
166:10 - comments on post it does exactly what it
166:12 - sounds like which is fetching all the
166:15 - associated with that post so we're gonna
166:17 - do something like this there you go and
166:18 - make sure it's asynchronous let's insert
166:20 - a try catch block and for the catch it's
166:23 - just going to be an error and a
166:25 - console.error and pass in the air cool
166:28 - so now for the fun part when they get
166:29 - comments in this try block let's get the
166:32 - postages so let's say let the post
166:34 - address equals await anchor web3 dot key
166:39 - this is the capital one public key dot
166:41 - find program address and then from there
166:44 - we're gonna do the
166:46 - utf-8
166:48 - code this time i'm gonna make sure it's
166:49 - spelled it correctly utf-8 yep and we'll
166:51 - do a post index dot 2 array and we'll do
166:56 - a buffer oops for e and just do an 8
166:59 - here awesome and we also want program
167:02 - dot program id because the first step to
167:04 - getting all the comments we also need to
167:06 - get the post and get i'll then get the
167:08 - comments within that post so there you
167:10 - go then we can say khan's post equals
167:12 - await program
167:14 - dot count dot post got and we'll say
167:17 - post address so just like before i was
167:19 - explaining this like a signer this is
167:20 - really just the address of the post so
167:23 - we're going to do a let comment
167:25 - addresses right because there will be
167:27 - multiple comments associated to it with
167:29 - the post and all of this is stored on
167:31 - the chain at different spots common
167:33 - addresses let's initialize an empty
167:35 - array and we're going to populate it
167:36 - with all the comments so in here we're
167:38 - going to make a for loop so say for the
167:41 - i equals zero i is less than post dot
167:44 - comment count alright because if you
167:46 - remember when you're the post structure
167:49 - it keeps track of how many comments
167:51 - there are so we want to take use of that
167:53 - and do a nice two number here and so
167:55 - essentially for every comment we want to
167:58 - loop through each so if there's three
167:59 - we're gonna loop through all three and
168:01 - make it to number two i plus awesome and
168:04 - then we wanna read the state on chain so
168:06 - let's also get the comment addresses by
168:09 - saying comment signer equals await
168:12 - anchor dot web dot public key and then
168:15 - we want to find program address put the
168:18 - parentheses and again put in that array
168:20 - where we do the
168:22 - utf-8 code again this time we put in
168:25 - comment and we say new b with the index
168:29 - dot two already like i'm gonna do a
168:31 - buffer e okay i'm gonna do a new bn i
168:35 - dot two hurray like and the same thing
168:38 - we're gonna do a buffer again be in an a
168:40 - yeah bn is just a serialized big number
168:42 - that's all you need to know don't worry
168:44 - about too much and then after that we
168:46 - can just do the comma program.program id
168:48 - again okay and for every comment that we
168:52 - do get and in code we want to be pushing
168:55 - so we want to do a comment addresses
168:57 - which is that empty array that we set up
168:59 - and we'll do a push method here and
169:01 - comment signer all right so essentially
169:03 - we're just pushing all the common
169:05 - addresses that we get into this array
169:08 - okay and that's it for the for loop but
169:10 - there's still a couple more pieces of
169:11 - code i want to make a variable called
169:13 - const common equals and wait for the
169:16 - programs count because for every program
169:19 - there's like an account storage i want
169:21 - to get the comment count and fetch
169:25 - multiple and then you can put a comment
169:28 - addresses in here and it's all going to
169:29 - be put into that variable we can do from
169:31 - there is similar what we did when we
169:33 - grabbed all the posts is actually sort
169:35 - all of them and we want to sort it in
169:37 - order so a dot post time dot number
169:41 - minus b the same thing b dot post time
169:44 - to number and after it's sorted we can
169:47 - just return comment the sorted comments
169:50 - and it should just be the catch and
169:52 - there we go oh yeah this is spelling an
169:54 - error nice and that is the get comments
169:56 - on post function awesome so the next
169:58 - thing i want to do is another function
170:00 - called save comment all right so this
170:03 - one's going to be asynchronous as well
170:05 - and it's going to take in a couple
170:06 - parameters which is going to be the text
170:08 - the index and the count we'll just do an
170:10 - equals arrow and let's get the post
170:12 - addressed again so i'll call post
170:14 - assigner equals wait anchor with public
170:18 - key find program address okay here we're
170:20 - going to do the utf-8 code again and we
170:23 - want post i want to put post there we do
170:25 - the indexed to array like again with the
170:28 - same parameters of buffer be and eight
170:31 - then outside the bracket comma
170:33 - program.program id from here we can do
170:35 - the try catch block catch we'll do error
170:38 - and then console.error again amazing now
170:41 - in the try block the purpose of this
170:43 - function is to save the comment so let's
170:44 - first get the comment address so i'll
170:46 - say comment signer is equal to await
170:50 - anchor dot web three dot public dots
170:54 - find the program address okay this is
170:56 - very similar to literally to what we
170:58 - just did and it's a post we want comment
171:01 - here then do the index dot to array like
171:04 - the three parameters eight comma here
171:06 - and we want to count that two and eight
171:08 - then a comma and program dot program id
171:12 - okay there we go next thing we want to
171:14 - do inside this try block is let's have
171:16 - in the weight take that program then do
171:18 - a rpc dot create comment so we're
171:22 - actually talking to the function we made
171:25 - which is to create a comment now okay
171:27 - it's to create a comment right so if you
171:30 - remember that function that we made
171:32 - earlier it's going to take three
171:33 - parameters text the url and then there
171:36 - is the context part of it that's what
171:38 - this is and that's why i'm going to say
171:40 - an object
171:41 - comma object and for the first key it's
171:43 - account and for post we do the post
171:46 - signer or post address comment which is
171:48 - the comment signer that we got and for
171:50 - the authority that could just be while
171:52 - it's public key so we can actually write
171:54 - a wallet.public key then comma and then
171:57 - you want to just spread out default
171:58 - accounts cool after that you want to do
172:01 - an
172:01 - awaitprogram.account.commentcommentacount.fetch
172:07 - and get that comment okay and after
172:09 - that's pretty much it so that's all the
172:11 - functions that we're going to need for
172:12 - the feed one thing i would like to do
172:14 - now that we have everything is set up
172:16 - all my use effects so if you remember
172:18 - use effect is a hook from react that's
172:20 - going to run different side effects at
172:22 - different stages of the component's life
172:23 - cycle so what we want to do here is set
172:25 - up the first one which is going to be a
172:27 - use effect and the use effect takes two
172:29 - parameters the side effect that you want
172:31 - to perform as well as the dependency
172:33 - module which i'll just initialize is
172:34 - empty for now and within the use effect
172:36 - let's set up an interval all right this
172:38 - is just that interval to constantly get
172:40 - all the posts because if you remember
172:42 - before when i made the post it's not
172:44 - actually getting them until i clicked
172:45 - the refresh post button this user effect
172:48 - is going to get it i'm just going to
172:49 - make another call to get a post after
172:51 - the certain time of the interval so
172:53 - let's do a set interval here and it's
172:54 - doing async and we're gonna do an await
172:56 - get all posts all right so now we don't
172:59 - always have to click the button and
173:00 - let's give it two thousand
173:03 - four that's how long it will go for and
173:05 - then get all posts just to get the
173:07 - initial get all posts out the way then
173:09 - we can do a return to clean up the
173:11 - interval that we set up to clear the
173:13 - interval and pass in that variable cool
173:16 - but our dependency module we want to we
173:18 - care if the connected state has changed
173:21 - and if the get all posts is run okay so
173:24 - those are the two things you want to put
173:25 - for the dependency module so with that
173:27 - in my get all posts there should be a
173:30 - set loading here and turn that to false
173:33 - alright because once we get the post it
173:35 - shouldn't be loading anymore all right
173:37 - so then when you set this set loading
173:38 - defaults after we get all posts and
173:41 - we're about to set our data we'll set
173:44 - the loading to false so that we won't
173:46 - see this like loading div that we have
173:47 - set up in our conditional rendering we
173:49 - would see the posts that are there and
173:52 - the create component awesome all right
173:54 - cool so that's that first use effect i
173:56 - think there is one more and that's going
173:58 - to be ah yeah the use effect for the
174:01 - actual toast itself so coming to over
174:03 - here let's make another use effect and
174:05 - here we'll get toast and what we want to
174:07 - say is post refreshed and and then for
174:11 - the icon it's actually going to be an
174:12 - emoji so i have that over here
174:15 - and for the style it will something like
174:17 - this where we have a border radius 10
174:20 - pixels background hashtag two five
174:26 - two five two six and the color is going
174:29 - to be hashtag
174:31 - fffcf okay cool and like i said use
174:34 - effect takes two parameters second one
174:36 - being the dependency module and this is
174:39 - gonna run when post style length is
174:42 - updated or changed okay and it's not
174:44 - posted to posts with an s hit save there
174:46 - you go so that's all the functionality
174:48 - for the feed only thing that's left now
174:50 - is to actually pass everything down so
174:52 - if we come here we can comment these out
174:54 - now so we have get comments on post
174:56 - function that we made at the top here
174:58 - and we're passing it as view detail for
175:02 - the save common function we created
175:04 - we're passing that as create comment
175:06 - okay cool so if we're passing this down
175:09 - into post we should head there so i'm
175:10 - gonna do this and let's get to the post
175:13 - and then in post let's come up to the
175:15 - top we have the view detail and create
175:17 - comment and the create comment okay it
175:20 - looks like we're not using the create
175:21 - comment yet in the post so that's set up
175:24 - that means we have to set up a couple
175:26 - things in the post component now so we
175:28 - have something called clock to date
175:30 - string that's good we have the post
175:32 - detail and we also need to make another
175:36 - function here so let's do a cons create
175:39 - comment
175:40 - for post that's what this function is
175:42 - and it's going to be asynchronous i'll
175:43 - have text and this is where we're going
175:46 - to call the create comment and we're
175:48 - going to say text post dot index and
175:51 - post a comment account okay cool so
175:54 - that's the function for there and while
175:57 - we're here let's also do the use effects
175:59 - which is going to be a use effect over
176:01 - here and for this use effect all i'm
176:03 - going to do is just call post detail
176:04 - because we weren't calling it yet that's
176:06 - calling post detail and for the
176:07 - dependency module it's just post detail
176:10 - right that's important so now this
176:11 - function is actually running and we're
176:13 - actually using view detail here as well
176:15 - okay let's use effect is done second one
176:18 - that i want to do is if the comments dot
176:20 - length is greater than zero so if what i
176:23 - want to do if the comments that length
176:24 - is greater than zero is user make use of
176:27 - our state which is comment section
176:29 - opened set that to true okay and we're
176:32 - going to constantly check that depending
176:33 - on how many comments there so if the
176:35 - comments state is updated or changed it
176:38 - will then run the check to see how many
176:41 - comments there are and the length of it
176:42 - cool so that's the use effects then we
176:44 - have a create comment for post this is
176:46 - going to come down to the comment
176:48 - section and this will be the last thing
176:50 - we passed down comments for post set
176:52 - that equal to the same thing now it
176:55 - should start to make sense with what i
176:56 - did earlier when i didn't await create
176:58 - comments for posts so i'm gonna hit save
177:00 - and let's head over to the comment
177:02 - section i think i see it right here
177:04 - let's accept the create comments for
177:05 - post create comment or post you can say
177:09 - create comment for post equal to create
177:11 - comment post then let's head over there
177:14 - to the
177:15 - create comment aha there we go it came
177:18 - it's all coming together now create
177:20 - comment or
177:22 - cool so this shouldn't be grayed out
177:23 - anymore we did a create comment for post
177:26 - let's see there it is awesome all right
177:28 - so i'm noticing we're not using name so
177:30 - i think it's safe to just get rid of it
177:32 - cool and then if we go back outer
177:34 - component we don't need to pass down
177:35 - name we just need the url and create
177:37 - comment for post awesome all right with
177:40 - that said i think that is all the
177:42 - functionality for the comments we
177:44 - updated a lot of our components with
177:47 - their use effects and we should be good
177:48 - to go all right so the only thing left
177:50 - to do now is to test out the comments so
177:54 - which means we're gonna have to start
177:55 - our server up again okay i just did an
177:57 - ntl dev where it looks like we're
177:58 - already getting an error in my feed i
178:01 - think i know what it is already we
178:02 - should have a comma there so line one
178:05 - six okay oh that's the same error as
178:07 - before let's just hit a refresh there
178:09 - you go it's all loaded now no errors and
178:11 - phantom wants me to log in again so
178:13 - there you go nice and updated for name
178:16 - lance sign up so let's go to that use
178:19 - effect and that's in post all right so
178:21 - it's saying doesn't know what comments
178:23 - dot length is this shouldn't be square
178:25 - brackets guys it should be curly
178:28 - brackets okay now let's see if that's
178:30 - good could still be reading the length
178:31 - because we initialized it with an empty
178:33 - array see what we got there we go
178:35 - awesome so now let's take a look stu
178:37 - lance sign up and
178:40 - again cannot read properties of define
178:42 - reading length let me just comment this
178:44 - out then and let's just count to log
178:45 - what comment should be an empty array
178:47 - and we should be able to see the length
178:49 - of that so now let's try this again as i
178:51 - was saying we need to get to our utils
178:53 - folder and if you remember in our const
178:55 - this is why this is the old program id
178:58 - so let's give it the new one and if i
179:00 - remember correctly you can find that in
179:02 - the anchor here's the new program id
179:05 - copy back to my utils and if you do this
179:09 - make sure you update the facebook
179:12 - underscore soul.json because this is
179:13 - from the old one so what we're going to
179:15 - need to do is get into programs go to
179:19 - target yep literally go in the idl
179:22 - folder and let's copy that guy and what
179:24 - we're going to do is paste it into oh we
179:26 - can delete this one the old one delete
179:28 - that one paste in the new one and i also
179:31 - want to just reset my terminal all right
179:34 - mix these guys up yeah there we go so we
179:35 - updated our idl we also updated our
179:38 - constant js we just got to hit save and
179:40 - now when we log in we shouldn't see the
179:42 - hello world post that i set up because
179:44 - this is a whole new program so in this
179:47 - program they don't have any posts or
179:50 - comments stored on chain so there you go
179:51 - so if you ever wondered how to reset
179:53 - your post because you can't delete them
179:54 - you'd have to just redeploy your program
179:57 - now let's do a netlifedev and let's try
179:58 - this again all right here we go it's
180:00 - loaded back up again let's make this
180:02 - bigger we can actually select our wallet
180:04 - there we go connected our wallet lance
180:06 - and let's see what happens click sign up
180:08 - post refresh there should be nothing
180:10 - nice let me just check my console if
180:13 - there's anything that's not showing up
180:14 - let's go we have a brand new app right
180:17 - new app because there's no post from
180:19 - left over so let's just take this time
180:21 - to use a checkpoint if you guys are
180:22 - still watching the video you guys are
180:24 -  crushing it so leave a comment
180:26 - down below something like this let's say
180:28 - let's say golden whatever you say golden
180:30 - i know you're watching this if i don't
180:31 - see golden i know you haven't made it
180:32 - this far so i'm actually gonna make that
180:34 - a post as well so let's hit enter right
180:36 - we got the phantom wall because we're
180:38 - gonna be storing that post on chain this
180:40 - is the network be super cheap since it's
180:43 - so let's approve and let's wait oh
180:46 - there we go let's go this is actually
180:49 - really cool guys like we're actually
180:50 - writing to the solana blockchain and
180:53 - storing our posts on there so now the
180:55 - fun part let's do a comment let's see if
180:57 - this works now oh cool so yeah it popped
181:00 - up let's see where is my post it's right
181:03 - there so let's hit enter we see errors
181:05 - because that means we just have to fix
181:06 - it all right create comment for post is
181:09 - not a function because i'm taking it as
181:11 - a lower case you create comment four
181:13 - post become four post yup it's really
181:15 - case sensitive awesome so i hit save
181:17 - here so i did some testing it looks like
181:20 - it's a function here and that's because
181:22 - this is also lowercase f okay that saved
181:25 - me the headache let's go with that i'm
181:26 - logged in as kevin it's right there
181:28 - enter nice okay that's that makes me
181:30 - happy we're actually seeing an approved
181:32 - transaction sign to let this load i'll
181:34 - hit approve and see if anything comes up
181:37 - so it seems when i refresh the page it
181:40 - works and i was wrong before this
181:41 - actually isn't set up yet so i think
181:43 - what we'll do next is let's set this up
181:45 - that's going to be inside post there's a
181:46 - refresh comments button here i just need
181:48 - to add an on click to it okay yeah so i
181:50 - want it so that if i click the refresh
181:52 - comments it should be able to refresh
181:54 - and i pointed out that it actually
181:56 - doesn't because there's no on click
181:58 - setup to it so we're gonna add the on
181:59 - click of post detail here okay remember
182:03 - post detail was up here and it's gonna
182:05 - set the comment state awesome so i'm
182:07 - gonna hit save and let's just do some
182:08 - more testing so i'm gonna hit refresh
182:10 - all right let's make this one fun i'm
182:12 - just gonna do i'll be causing for this
182:13 - one and let's change this from lance to
182:17 - causal quasi i know there you go we're a
182:18 - different person now and all rights
182:20 - right if you go into
182:23 - the use effect i commented out so we
182:24 - should bring this back in there you go
182:26 - so now with this commented back in it
182:28 - should load the comments if there are
182:30 - one just for fun let's make a post let's
182:32 - do shout out build space so they do a
182:34 - bunch of cool stuff there as well as we
182:36 - are partnering with them to make these
182:38 - cool builds together with you guys so
182:40 - let's see if kazi can make this post
182:42 - let's do a fresh post there you go there
182:45 - it is shout out build space awesome so
182:47 - as quasi i'm going to put some comments
182:48 - to continue testing this let's see hey i
182:51 - think i approved and usually takes a
182:52 - couple minutes as well but this is so
182:54 - far so good let's hit refresh comments
182:57 - see what's going on so this is just the
182:59 - first two comments still there it is
183:01 - just took a second there's the hey we
183:03 - got the comments and we got the post
183:05 - functions working this is super exciting
183:07 - guys there's not much more left so if
183:09 - you made it this far you have an amazing
183:11 - app on your hands all we have to do now
183:13 - is let's work on the right sidebar and
183:15 - the sidebar itself all right guys i'm
183:17 - getting super excited we have the
183:18 - functionality the core functionality of
183:21 - our app working we can make it look even
183:23 - better because the reason why it's all
183:24 - stretched out is because we should have
183:26 - these sidebars in here so if you
183:28 - remember long long time ago we made that
183:31 - in the index so let's go ahead and work
183:33 - on so temporarily i'm going to make this
183:36 - smaller and this one bigger so that we
183:38 - can work on it so in the index we have
183:40 - this sidebar here let's create that
183:43 - component say
183:45 - sidebar.js this is the sidebar for the
183:47 - left we can say rafce and while we're
183:50 - here let's also get the right sidebar
183:53 - right sidewalk.js okay then we can do an
183:56 - rafce cool okay now that we have that
183:59 - done going back to index we can start
184:01 - importing them so i'm gonna comment this
184:03 - guy back out you can actually get an
184:05 - auto import by doing something like this
184:07 - okay and i can also do the auto import
184:09 - for this if you delete the first two
184:12 - type in the r and there's a suggestion i
184:14 - hit tab go close it and if you look it's
184:16 - all imported it's nice cool and you can
184:18 - see that it is taking up space here with
184:21 - the right sidebar on the left sidebar
184:22 - let's go ahead and code this out now so
184:24 - going to the components let's do just
184:27 - the sidebar and let's get set up all
184:29 - right for the sidebar it's actually not
184:31 - much it's literally just front end all
184:33 - the imports that we're going to use is
184:35 - the next image as well as the stuff from
184:38 - the assets folder so this is everything
184:41 - right here so it's just image from next
184:42 - image all these icons that i have set up
184:45 - and there we go okay another thing i'm
184:48 - gonna do here is const sidebar data
184:52 - equal to an array and it's going to be
184:54 - an array of objects which is going to
184:56 - have each one is going to have an icon
184:58 - that holds one of the icons like icon as
185:00 - well as a title for friends okay the
185:03 - idea here is that we're gonna map
185:04 - through this data and for every single
185:06 - object in this data generate a component
185:08 - for it sorry not generate a component
185:10 - we're gonna generate some jsx for it
185:12 - there it is that is the friends one and
185:14 - it's not title's not friends icon it
185:16 - actually should just be friends with
185:18 - quotes nice okay so that's it for the
185:20 - first object same thing for the rest so
185:22 - let me include a comment here and we'll
185:25 - copy this about five times one
185:28 - two
185:28 - three
185:29 - four
185:30 - five and be sure to change each one
185:32 - don't leave them in there so let's do a
185:34 - friends let's do eight groups and this
185:37 - one is called groups then we have the
185:40 - marketplace icon marketplace icon and
185:44 - this one is just
185:45 - place we got the watch icon which will
185:48 - just be watch you got memories memories
185:51 - and we have the drop down icon with the
185:54 - see more and this is just completely
185:56 - static data awesome so we're using all
185:58 - of this now just to come down here okay
186:00 - let's set up our jsx div class name
186:03 - style.wrapper div class name and in here
186:07 - we'll have the image style.profile
186:11 - for the src it's going to equal you and
186:14 - the height will give it 30. 30 for 30.
186:16 - and for the all it's just simply profile
186:19 - image again if you're wondering where
186:20 - this url is coming from we're going to
186:22 - be passing it down with the class name
186:24 - of sidebar item style dot sidebar item
186:28 - with okay and my voice had saved it's
186:30 - because there's no style property that
186:32 - makes sense i'm gonna just quickly put
186:34 - this in here before i forget the
186:36 - structure name and url and i have to
186:38 - pass that down later all right so this
186:39 - is the fun part we're gonna go to we're
186:41 - gonna do a sidebar data right that's the
186:45 - variable we created earlier yeah sidebar
186:47 - data and like i said previously we need
186:49 - to map through and then let's put
186:51 - parentheses here and for every sidebar
186:54 - data item and we also want to do a
186:56 - comment we want to generate some jsx for
186:59 - so actually don't need curly brackets
187:02 - you can do something like this and here
187:04 - we can put the div that we want to
187:05 - generate just going to be class name
187:08 - style dot sidebar
187:10 - bro with the key of index because each
187:13 - generated item from here should have its
187:16 - own unique key prop okay and then inside
187:18 - this div i want an image and that image
187:21 - should contain the image of the object
187:23 - that we passed in so class name is
187:25 - simply just going to be style.sidebar
187:28 - icon src will just be the sidebar data
187:33 - item icon and height 30 and width 30 as
187:36 - well okay all is just sidebar awesome
187:40 - last but not least we have another div
187:42 - here this one's going to be class name
187:44 - style there you go so much the one
187:46 - that's literally the same as the one
187:47 - before except the what goes in here is
187:49 - going to be the sidebar data item dot
187:52 - title so that's the friends the groups
187:54 - the memories the c-more that's what it
187:56 - is and so we can stop seeing this error
187:59 - we just have to add our style object and
188:01 - just to go through it really quickly
188:03 - this will be the css for it since the
188:05 - fun functionality is mostly done let's
188:07 - do an alt b and c and there you go so
188:10 - this is the wrapper the sidebar row it's
188:12 - really long we have the profile image
188:14 - sidebar item nice okay we can't really
188:17 - see the sidebar one thing that would
188:18 - help it is to actually pass down the
188:21 - name and url so here student name equals
188:24 - name and url equals you there you go let
188:28 - that compile and let's see if we can
188:30 - make this bigger oh it's asking me to
188:32 - connect my wallet again and then like i
188:34 - said let's be causey again and i think i
188:37 - put that here as well oh sidebar it's
188:39 - not defined let's see style yeah i just
188:42 - forgot to put style in front of that
188:43 - there you go hey okay so again quasi i
188:46 - am using this dice bear thing and all i
188:48 - have to do is just change this and you
188:49 - can get a different profile picture hey
188:52 - that's nice okay now i think it's just
188:54 - the text color that i need white that's
188:56 - not the right color see what's going on
188:58 - okay and then it should be white is it
189:01 - even there i'm highlighting it oh so
189:03 - it's not even there that's because this
189:05 - should be sidebar data item dot title
189:08 - and now it should work there we go now
189:10 - it's looking amazing so this is the
189:12 - sidebar we hover over it has this nice
189:14 - effect cool so now i just need the right
189:17 - sidebar and that's going to be all the
189:19 - front-end functionality so let's work on
189:21 - that all right so we'll be working on
189:22 - the right sidebar now and one of the
189:24 - first things that i'll do is get my
189:26 - import stuff ready so i'm going to
189:27 - import image next image import so
189:31 - there's going to be another component
189:32 - here and it's going to be called contact
189:33 - and before i can actually import it i
189:35 - need to create it so i'm just going to
189:37 - go components new file contact dot js
189:40 - rafc
189:41 - did it too fast there you go there's the
189:43 - contact now i can import it so let's do
189:46 - import contact from contact and that
189:49 - should be it from now what i want to do
189:51 - next is set up the jsx and for this one
189:55 - i will have the use which is just style
189:58 - okay div class name oops this one will
190:00 - be called title and it'll be the title
190:02 - will be sponsored style dot ads
190:05 - container this will be the actual ad
190:07 - itself so you'll say styled ad then for
190:10 - the class name will be a style dot and
190:12 - then within the add div we also want to
190:14 - have the add image container which will
190:18 - host our image and the image just to
190:20 - keep with the theme this all right
190:22 - excited for you guys to see that one so
190:24 - you'll see it in a second so that's the
190:26 - source and just format it so it looks
190:28 - nicer there you go yeah for you it could
190:29 - be whatever you want i'm going to do a
190:31 - height 100 a width of 100 okay and then
190:33 - for the class name i'll call it add
190:35 - image and you're going to guess what it
190:37 - is from the alt that i'm gonna write it
190:39 - is good old cp logo okay cool all right
190:43 - so that's the image for our cp logo we
190:45 - got closing div here close off that
190:48 - image container but we still have to do
190:50 - the rest of the and my quick ad for you
190:52 - today is going to be we are the number
190:55 - one channel for blockchain development
190:59 - let's go yeah where else are you going
191:00 - to see a huge project like this where we
191:02 - get on chain comments on the solana
191:04 - blockchain so shout out to solana and
191:06 - thank you to the cp team that worked
191:08 - really hard on this project so let's do
191:10 - a class name for style and if you're
191:12 - interested in more of our stuff head
191:14 - over to cleverprogrammer.com just did an
191:16 - ad while i was coding so that's two
191:18 - closing divs and then we also have
191:20 - another one here alright so we're gonna
191:21 - have another ad and it's gonna be pretty
191:23 - much the same convention so i'm gonna go
191:25 - down below here and hit paste the only
191:28 - thing that's different is the image and
191:32 - the little description that i have so
191:33 - let me get the image for you guys okay
191:35 - this is the image awesome and the alt is
191:38 - not the cp logo because this ad is
191:41 - brought to you by salon and then for
191:43 - solana they have this little nice
191:44 - tagline that is awesome which is going
191:47 - to be powerful for developers and fast
191:50 - for everyone password and we just put
191:52 - for their link it's solano.com okay cool
191:55 - those are the ads closing day of closing
191:57 - so those are the ads that we have the
191:59 - next thing that i want to do is set up
192:01 - this really cool thing so the first
192:03 - thing i'll make is this self-closing div
192:06 - called and i'll call it and i'm just
192:08 - using this div essentially as a divider
192:10 - so that's what i'll call it style dot
192:13 - divider cool okay let's do another one
192:16 - with the class name this one will just
192:17 - be the title and it's going to say
192:19 - context all right because we can do this
192:20 - cool thing where we can set up sanity to
192:23 - grab all the users and those will
192:25 - display as our contacts on the right
192:27 - sidebar okay so let's make a container
192:28 - for those contacts call it class name
192:31 - contacts okay and here we're gonna have
192:34 - to stop for a second because we're gonna
192:36 - need to create a user's object let's
192:39 - make a static set for now so i'm gonna
192:41 - make a variable top here say const users
192:43 - equals and let's set up that array of
192:46 - users so it's an array with an object
192:49 - and each object will have a their wallet
192:51 - address and it will be just the user
192:54 - which should just be their name let's
192:56 - put we got kevin we got kazi get david
192:58 - in here we're all gonna have the same
193:00 - user let me just double check real quick
193:02 - okay so like i said we're gonna make a
193:04 - static object of users which will just
193:06 - be an array objects and we can give the
193:09 - same keys and values for all of them so
193:11 - for the wallet address you can give that
193:14 - the value mine they're all going to have
193:16 - the same wallet address okay and then
193:18 - there's just the url right so what's
193:20 - their profile picture i'm going to make
193:21 - it nice i have a random one that i could
193:23 - use and this guy just have a name one
193:26 - second i'm actually going to call this
193:28 - profile image and keep that his name and
193:31 - the name i did kevin and the kazi we
193:33 - also should get david in here and we
193:35 - can't forget about mana and cool but
193:37 - they're all going to have the same
193:38 - picture i won't go that that far for
193:40 - them so let's go yeah so now that's done
193:43 - we just got to set up the users and map
193:44 - through it so i'm going to do users dot
193:47 - map user ray and we'll do a return
193:50 - contact with the key equal to that
193:53 - user's wallet address we set that up and
193:57 - we can pass in the actual object itself
193:59 - because we're going to be mapping it out
194:01 - later cool so that is that mapping
194:04 - through the users don't hit save yet
194:05 - because we'll get ugly error what you
194:07 - want to do now is set up the styles so
194:10 - again i'm starting to go through all the
194:11 - styles fast so let's do a con style and
194:14 - these are all the css that we're gonna
194:16 - need for the right sidebar this is the
194:18 - wrapper the title the ads the ad the
194:20 - image container and everything else cool
194:23 - so from there let's just work out the
194:25 - contact and we'll be all done with the
194:28 - right sidebar okay for the contact let's
194:31 - import image because for every contact i
194:34 - want to use the image so let's do from
194:36 - next there we go and import image from
194:38 - next image i'm going to destructure the
194:40 - user from it and just to set up the jsx
194:43 - and do one of these the first div will
194:45 - be called contact nope style dot contact
194:49 - inside that div this is where the image
194:50 - will go the source will equal the user
194:53 - and i believe i called it profile image
194:56 - then we did a height 40 and a width 40.
195:00 - then we got class name equals
195:03 - style.contact image okay and then last
195:06 - but not least the last thing inside this
195:08 - contact div will be another div which is
195:10 - just going to hold the username so i'll
195:12 - call this contact user or contact name
195:15 - for short and it'll just hold user done
195:17 - all right cool so we can save this and
195:18 - we just need to get the styles and again
195:21 - here you go this one's short again feel
195:23 - free to pause the video if you need to
195:24 - catch up on the styles here's the one
195:25 - for contact don't worry i'm going back
195:27 - here's the one for the right sidebar got
195:30 - it cool so once you got it let's hit
195:32 - save should be no errors but of course
195:34 - there is one and it's because it's on
195:36 - the right sidebar we just need to close
195:37 - this off save let's make this bigger for
195:39 - the presentation while it's connected
195:41 - let's go as quasi again and again this
195:43 - is the default profile useful a url that
195:45 - i set up i'm just going to change it hey
195:47 - there we go the whole team is in the app
195:50 - garkaze lance kevin and david monathan
195:53 - frankie and there's our two ads it looks
195:55 - like just like the real thing shout out
195:56 - to solana and shout out to the team so
195:59 - there you go that is all the front
196:00 - front-end functionality of our app the
196:03 - only thing left to do is to connect
196:05 - sanity to the whole thing which we
196:07 - installed earlier so let's do that all
196:09 - right so now that we're almost done
196:11 - let's finally go and set up our sanity
196:14 - routes and make calls to that database
196:17 - because we had it set up way back but
196:20 - now we're going to come back to it so
196:21 - what we want to do is go to our pages
196:23 - folder and under api we have a hello.js
196:26 - here we don't need that we're going to
196:27 - be setting up new ones so delete
196:29 - hello.js
196:30 - let's make a new file and let's call it
196:33 - create
196:34 - user.js because this should actually
196:36 - create a user on sanity when we set it
196:38 - up so first thing we have to do is on
196:41 - the way back when we
196:42 - set up the client let's actually set it
196:44 - up so import client from that dot
196:47 - forward slash dot dot forward slash lib
196:50 - slash there you go so we're importing
196:52 - the client then we're gonna do a const
196:54 - the name of this is gonna be create user
196:56 - on sandy equals async do a wreck res and
197:00 - then from there we can do a try catch
197:02 - okay try catch is gonna have and if
197:04 - there is an error we're gonna do a
197:06 - res.status of 500 which means internal
197:09 - server error then we can send them a
197:11 - message
197:12 - with an object as a parameter and the
197:14 - message
197:15 - key with the value error comma and the
197:18 - data value will be error dot message now
197:22 - for the try if we're going to be
197:24 - creating a user on sanity we want to be
197:25 - creating a user document so let's set up
197:28 - that user document by saying const user
197:31 - doc actually because we can call it that
197:32 - and put in the keys and values we need
197:35 - which is the type of document this is a
197:37 - users i want to talk to that part and
197:40 - the id we just have to get the user's
197:44 - wallet address for the id okay and then
197:46 - now we can actually fill out the fields
197:48 - or the field the fields of the user
197:50 - which was believe name the name we can
197:53 - just do rec body.name and do a wallet
197:56 - address user wallet smaller you can do a
197:58 - wreck body that user wallet address same
198:00 - as the id then we can do the profile
198:02 - image of that user and let's just grab
198:05 - that person's profile so recta body
198:07 - profile cool and that's not all in the
198:10 - next line so we want to have an await so
198:13 - that is initializing the user doc here
198:15 - we're actually going to create that doc
198:16 - so we'll say create if not exist sanity
198:19 - has this cool method that if the
198:21 - document does not exist it will create
198:23 - that document it automatically checks
198:25 - for us and if it doesn't exist create it
198:27 - if it does just leave it alone cool and
198:30 - last but not least we have to do the
198:32 - res.status here so that we can send a
198:33 - status of 200 which is okay and for the
198:37 - message and just say success cool so
198:40 - let's create user pretty standard stuff
198:42 - next thing you want to do is make an api
198:44 - route to fetch the users right after a
198:46 - while we want to be fetching every user
198:48 - in our database and then in our context
198:50 - that's how we have this static david
198:52 - mona frankie so you can visualize it so
198:54 - in the api folder i'm gonna make a new
198:56 - file and say fetch users yes same
198:59 - procedure as the create one we're gonna
199:01 - import the client so we got the client
199:04 - next we're going to do const get user
199:06 - info and that make that into an
199:08 - asynchronous function and then make that
199:10 - one secret yes i did this one will be
199:12 - rick and rez just like the last and we
199:15 - have to catch is literally the same as
199:17 - the one before so i'll just type it out
199:19 - cool that's the catch for the try to get
199:21 - all the users in our database we need to
199:24 - query for them so we can say const query
199:27 - equals something like this and what we
199:29 - want to put in here i have the query
199:31 - saved up in my it's going to look
199:33 - something like this yep this is what
199:35 - we're going for we want the users and
199:38 - their names well addresses and profile
199:40 - image cool that said that is the query
199:42 - now let's put these into use because
199:44 - this is just the api we need at some
199:46 - point in our components we're going to
199:47 - be using all right so now that we made
199:49 - that let's actually start using them oh
199:51 - so now we made it don't forget to
199:53 - actually export them that's what i was
199:55 - thinking if you had to export default
199:57 - get user info so we can actually use
199:59 - them in other places and same thing with
200:02 - the create user we want to do a export
200:05 - default create user on sanity awesome
200:08 - yep cool so make sure you export them
200:10 - and then to actually start using them
200:12 - we're going gonna head to the sign up
200:14 - component believe this is where it was
200:17 - yes
200:17 - cool so we have this create user
200:19 - function that we set up a while back and
200:21 - all it does is set register is true but
200:23 - what it really should do is make a fetch
200:26 - call to the api we said what we need to
200:27 - do is make a variable called resp and
200:31 - it's going to equal late window dot
200:33 - solana connect
200:36 - solana.connect that's what we want all
200:38 - right so yeah if you're wondering what
200:39 - this is doing we're making we're getting
200:41 - a response from phantom so that in this
200:44 - next line we can say const wallet
200:46 - address and use that response dot public
200:49 - key to string so this is how we can get
200:50 - access to our phantom wallets address so
200:54 - i'm gonna store it in a very because
200:55 - we're going to be using it later we're
200:56 - going to be using it to create a user so
200:58 - from there you want to do a try catch
201:01 - and the error i'll just make it now it's
201:03 - just going to be console. pass in here
201:05 - okay and for the try this is where it
201:07 - will fetch that api route so what i'm
201:09 - going to do is do an await fetch and
201:11 - let's call it and say api slash create
201:15 - user yep it should be the same name that
201:17 - we called it there you go awesome just
201:18 - wanted to double check now we're good to
201:20 - keep on coding and before that closing
201:22 - parentheses put these curly brackets
201:24 - because now we need to put the method
201:26 - which will be post some of the headers
201:29 - content type and application slash json
201:32 - it's pretty standard and there we go
201:34 - that's the headers next part we want the
201:37 - body json
201:38 - dot cool and here this is where in our
201:41 - create user on sandy we had the rec.body
201:45 - and we got the user wallet address the
201:46 - name and the profile image we're going
201:47 - to set that up here so we're going to
201:49 - say user wallet address this has the
201:52 - value of wallet address name his name
201:54 - profile image is going to be
202:00 - event.target.url.value that's how you
202:01 - get the image amazing cool so whenever
202:04 - now when we sign up it's going to create
202:06 - a user on sanity okay and while we're
202:09 - here let's go to our index so let's do
202:12 - one of these awesome and for our index
202:15 - we should actually have a use effect
202:16 - setup okay and yeah like i was saying
202:19 - we're gonna have to use effect here but
202:20 - before we can make the use effect we
202:22 - should make request users data this is
202:26 - going to be and this is going to be an
202:28 - asynchronous function with active
202:31 - account as a parameter because we want
202:33 - to grab all the users but we don't want
202:35 - to grab the user that's currently active
202:37 - if lance is logged in we shouldn't see
202:39 - lance in the contacts so then if you
202:41 - watched our tinder app we did something
202:42 - similar to that as well so let's do a
202:44 - try catch i'll finish out the catch
202:46 - first which is just error and the usual
202:49 - okay but in the try though we want to do
202:51 - a constant response equals the weight
202:54 - fetch and then the api wrap okay and the
202:57 - const data is going to equal a weight
203:00 - response.js
203:02 - and we're finally going to be able to
203:03 - use our user state to say set users as
203:07 - data then console.log users and then
203:10 - show me the data that data just so i can
203:12 - see it and that's it request users data
203:14 - from there we just need to set up the
203:16 - user effect now that we have the
203:17 - function it's pretty small it just looks
203:19 - like this it's a use effect that has an
203:21 - asynchronous function inside and in that
203:23 - by synchronous function it's an await to
203:25 - request users data and it's only going
203:27 - to one just one that's interesting okay
203:29 - one of the last things i want to do too
203:31 - is oops one of the last things i want to
203:33 - do too is create our function which is
203:35 - the general which is the something's
203:37 - happening oh it's the api to fetch you
203:39 - oh i see it's because if i go to control
203:43 - p and then do fetch users let's see yep
203:46 - forgot the arrow function here go hit
203:48 - save and
203:49 - one thing i wanted to do here okay and
203:51 - as that's loading one thing i want to do
203:53 - that or just remembered underneath
203:54 - create user
203:56 - underneath create user i want to be able
203:57 - to
203:58 - generate a random url that's how this
204:00 - random button works do it it's pretty
204:02 - simple i have the code snippet for it
204:05 - it's just this it's just generate random
204:07 - image raw and you just want to set the
204:09 - url to be just a random avatar from dice
204:13 - bear right and we're making it random by
204:14 - just using math.random we can add on
204:16 - click into here let's do on click equals
204:18 - and then we'll say the general profile
204:20 - image so i'm just going to refresh this
204:22 - one more time and also i think i can
204:24 - actually make my url blank now so as i
204:27 - was saying now that we have the generate
204:29 - random profile image we can probably
204:32 - make this url blank again so go to your
204:34 - index and make it blank and before i hit
204:36 - save what i want to do next is pass down
204:39 - request user data all the way down to my
204:42 - right sidebar so let's go down to right
204:44 - sidebar so then for the right side we
204:45 - can finally pass down stuff into it and
204:48 - what i want to pass down is just get
204:50 - users and that's going to be equal to
204:52 - request users data function we also want
204:55 - to be passing down the list of users and
204:58 - then we also want to pass down set users
205:00 - okay there we go and that means we can
205:03 - go into the right sidebar and pause it
205:05 - for a second okay cool so now i'm in
205:07 - right sidebar and let's actually accept
205:09 - the props that we're passing down which
205:11 - is now get users and users and i had set
205:16 - users but now i'm thinking about it we
205:18 - don't need to pass that down so i'm
205:20 - gonna go here we can take it out just
205:21 - two things for the right side bar and
205:23 - going to here now that we have get user
205:26 - which is really just request users data
205:28 - what i want to do is set up a nice use
205:30 - effect underneath my style and we're
205:32 - going to call that function so i'm going
205:34 - to say use effect and did i import you
205:37 - because i did i didn't import it like
205:38 - that though so i could just do this
205:40 - there you go that's the use effect
205:42 - inside we can make an arrow function and
205:45 - i want to run an asynchronous one and
205:48 - all we're going to do within here is
205:49 - just use the get all users make sure you
205:51 - have get and a way to get all users cool
205:54 - this little guy right here put a
205:55 - dependency module cool and then we have
205:58 - users we are now passing them down and
206:01 - if i save this and go to
206:04 - i believe contact oh no it wasn't
206:07 - contact i remember making a list of
206:08 - users we actually don't need that
206:10 - anymore now that we are passing it down
206:12 - and we're getting them straight from
206:13 - sanity let's see so saving all that now
206:15 - it's just left to test it let's test up
206:18 - all our routes and see if they work so
206:20 - another thing that i'm going to need to
206:21 - do go into my terminal and if you guys
206:24 - remember we have the cd to studio and
206:26 - then we can do a sanity start okay let's
206:28 - compile cut the camera that oh one
206:30 - second all right so it looks like it
206:32 - finished loading up sandy's started so
206:35 - we can go to localhost and instead of
206:37 - 3000 3833 and we haven't made any new
206:40 - users because we just set up those reps
206:42 - so if we sign in or sign up this should
206:44 - get populated with a user cool so let's
206:47 - give this a try i'm going to say lance
206:49 - already in there image with the missing
206:51 - source property one second all right
206:53 - we're getting this error when i start
206:55 - typing it in my guess would be that it
206:58 - has something to do with the header and
207:01 - if we scroll yep i think it has
207:03 - something to do with this because if
207:05 - name exists which there was when i press
207:07 - l there should be a url and remember we
207:09 - remove the initial one so we want to say
207:11 - or and hold on what was i saying again
207:15 - oh yeah so saying this is trying to
207:17 - generate url that doesn't exist so what
207:19 - we can do is url or put a default one
207:23 - like this okay let's hit save frame time
207:25 - is asking me to connect they're all
207:27 - connected if i type in something here
207:29 - with die nope cool so it just generated
207:31 - the random image that i have there
207:33 - that's what the or is doing but what we
207:35 - can do is put in my name right now we
207:37 - have a different logo just a random logo
207:39 - and you can just cycle through them and
207:40 - change it if you don't like it let's
207:41 - just pick this one i can't really see it
207:43 - i'm gonna pick sign up now is our wrap
207:45 - broken probably oh now time for the
207:47 - debugging part undefined reading map
207:50 - sidebar okay oh so in the right sidebar
207:53 - there's no users yet so i guess what i
207:56 - want to do is take this list of users
207:59 - and go to where i got this from which is
208:02 - index and i can actually make that the
208:03 - default list of users so if i put this
208:06 - in here i don't have to say const
208:08 - anymore this is the default list of
208:10 - users that will load okay i just
208:12 - finished refresh refreshing we set up
208:15 - the default users let's try this again
208:17 - lance random picture sign up users.map
208:21 - so we're passing it to the sidebar in
208:23 - the sidebar we're getting the users i
208:25 - guess before we map stuff out let's
208:27 - console.log what users okay hit refresh
208:29 - i commented out the map for now let's
208:31 - just see if we can get a user created
208:33 - let's just do lance random site amazing
208:36 - okay so that works let's go that's a
208:38 - really funny picture let's go to see
208:40 - what is loaded if i press refresh
208:42 - there's a new user created no no new
208:44 - user created which is weird api resolve
208:47 - without sending a response this may
208:49 - result install request oh that's for
208:51 - fetch users but where is my create user
208:54 - let me just double check my create user
208:56 - i believe that's in sign up i'll be
208:58 - smart to probably call create user so
209:00 - let me just do that let's do okay let's
209:02 - try something i just want to make sure
209:04 - it's grown in create user when we do on
209:07 - submit create user yep okay so it's
209:09 - running on submit what i want to know is
209:12 - if it's actually running this what we
209:14 - could do is
209:16 - go to the api route console.log in
209:18 - console.log here creating and i can also
209:21 - do this one also.log signing up this one
209:24 - will be lowercase signing up so if i see
209:26 - this one that means the create user is
209:28 - running if i see the other one that
209:30 - means this means we're actually creating
209:33 - one so let's see if that works i'll just
209:35 - refresh this one more time try again
209:37 - random sign up did we create a user i
209:39 - don't know let me check my console okay
209:41 - we got signing up we got two undefined
209:44 - cannot read properties of reading value
209:47 - let's go check out what this means we
209:48 - didn't see our console up for creating a
209:50 - user so maybe there's something here
209:52 - cannot read property or reading value is
209:55 - there any about there's no value here so
209:56 - it's probably within this so we have
209:59 - this value here but this should be
210:01 - coming from the event okay maybe as a
210:03 - temporary solution we should put this as
210:06 - just url because we have access to it so
210:08 - i'll just hit save and let's try this
210:10 - again all right so one more time let's
210:13 - random sign up let's take a look okay we
210:15 - got didn't see my console log again
210:18 - failed with the status of internal
210:20 - server error that's interesting so we
210:22 - weren't able to create a user for some
210:24 - reason all right so i'll just double
210:25 - check the spelling and make sure that
210:28 - the schema is the same i put this back
210:30 - to event target url that value let me
210:33 - just try one more time so let me hit
210:35 - refresh okay so it's asking me to log in
210:37 - once again plants here random sign up oh
210:42 - oh might know the id i might see the
210:44 - problem now whoops we have a content
210:47 - type here let's see if that fixes it
210:48 - okay did that do that somewhere else no
210:51 - but that will definitely help our issue
210:53 - so let's try that let's give that a try
210:55 - and i think one more thing that i wanted
210:56 - to do in the api route itself we have
210:59 - the signing up touch user create user
211:02 - let's put a console log right here okay
211:05 - cool one more time let's do lance random
211:08 - sign up inspect element shift of those
211:11 - from before or after but we can just
211:12 - always check here nope no documents of
211:14 - this type all right back to the drawing
211:16 - board all right so after a couple of
211:17 - testing i console logged url and that's
211:20 - known to be working so i don't see why
211:23 - not this shouldn't be working because
211:24 - when i console.log the
211:26 - event.target.url.value i got undefined
211:28 - so let's just try url save that i'll
211:30 - save it like this take out the
211:32 - console.log and now let's try this again
211:34 - and while i'm here i think what i want
211:36 - to do too is let's find that index so
211:39 - i'm going to do index and the reason why
211:42 - user is undefined is because this
211:43 - doesn't have an s so there we go that's
211:45 - another thing all right let's try it so
211:47 - i want to do lance signup inspect
211:49 - element fail to load okay so there's no
211:51 - value error anymore but we're still
211:53 - seeing a status of 500 which means we
211:56 - have to go to create user and let's just
211:58 - see what's going on here all right so i
212:00 - took this some time to just read every
212:02 - line and fix up any typos so if i
212:05 - refresh this we should be good to go now
212:07 - so let's just do this for old time sake
212:09 - profile image random sign up crossing my
212:12 - fingers let's take a look okay no 500
212:15 - error so far fetch users isn't working
212:17 - because i took that out okay hey there
212:20 - we go finally so we have the users and
212:22 - let's see that's me yep my wall address
212:25 - and my profile picture
212:26 - very nice cool so it looks like our
212:29 - routes are finally starting to work guys
212:30 - all i need to do now is go into i
212:33 - believe it's the right side yep so i'm
212:35 - going to be right sidebar we're console
212:37 - logging users and we're getting three
212:39 - users that's the default we need to
212:42 - be running get users and i'm actually
212:45 - going to go back what was i saying right
212:47 - sidebar get users all right so to get
212:50 - started with this go into the right
212:52 - sidebar and i think i took out the map i
212:54 - did and if i were to bring this back out
212:56 - and then save there we go so there's
212:57 - that's our static one but we should see
212:59 - something for this so it says api
213:02 - resolved without sending a response for
213:04 - api fetch users so let's take a look at
213:06 - that oh that makes a lot of sense i need
213:08 - to set up the status for this i got too
213:09 - excited guys so what we're going to do
213:11 - is after the query we want to store this
213:14 - sanity you want to store this in a
213:15 - variable i'm going to call it sanity
213:17 - response
213:18 - equals await client dot fetch query okay
213:22 - let's put this over here and essentially
213:25 - we made the query variable and what i
213:27 - want to query but i didn't fetch the
213:30 - actual query itself so let's do that
213:32 - let's do res.status 200 dot send then do
213:36 - a message of success and for data we put
213:39 - the sanity response in there cool all
213:41 - right i think that should be it we
213:43 - actually have a response now so let's
213:45 - try this setup again let's make another
213:47 - user test one two three four let's do
213:49 - lance again and it shouldn't actually
213:50 - make another user because it's gonna
213:52 - depend on my wallet account and there's
213:54 - my contacts there we go so the context
213:56 - is working we're actually querying all
213:58 - the users as our contacts there's me
214:01 - nice all right guys how do you like that
214:03 - all of our sanity database is up and
214:05 - running we're able to generate new users
214:08 - we can pull all the users in your
214:09 - contacts you can even set up a query if
214:11 - you don't want to see your to not get
214:12 - yourself and get everybody else but
214:14 - other than that this is the full app
214:16 - like you're able to create posts and
214:18 - comments on chain and we are in one
214:20 - thing that's left to do now is i'm gonna
214:22 - show you guys how to deploy to netlify
214:24 - so let's open up our terminal and what
214:26 - we can do here is do a netlify init give
214:29 - this a couple seconds all right and we
214:31 - want to create and configure a new site
214:33 - i'm going to do that site name facebook
214:36 - hands do dash so is that available nice
214:39 - cool and we should do a yarn run build
214:42 - because we are using yarn and the
214:44 - current directory is the local one okay
214:47 - press enter yep we have to install the
214:49 - next js plugin and let's say yes to this
214:52 - cool so we got our deploy key i already
214:54 - linked to my netlify to github right
214:56 - before now we can just do a git push so
214:59 - we can get trigger the new site build
215:00 - okay what we can do now is actually go
215:02 - on to netlify there's our facebook soul
215:04 - deployed see it's building and let's
215:06 - just take a look i'm let this build out
215:08 - and i'll show you guys what's up and the
215:10 - cool thing about notify you can also
215:11 - preview your deployments but it looks
215:13 - like it's already live so what we can do
215:15 - scroll to the top click on the site
215:17 - overview and you're done look at this we
215:19 - got the facebook it's all there and
215:21 - deployed you can literally send this
215:23 - link to your friends and they can create
215:24 - users and they can create posts and
215:26 - leave comments as long as they have a
215:28 - phantom wallet and some solana you can
215:31 - do it and store those posts on chain so
215:33 - that's gonna be it for this video hope
215:35 - you guys enjoy and be sure to be on the
215:36 - lookout for more solana videos and more
215:38 - ethereum videos and click on that build
215:40 - space link and claim your nft to prove
215:43 - that you completed your project with us
215:45 - and build space and if you guys are
215:47 - wondering how to do that when you click
215:48 - the link you're going to sign up with
215:49 - their email and go ahead and connect
215:51 - your metamask account and make sure it's
215:53 - connected to the polygon mainnet once
215:55 - you do just hit the mid button sign that
215:57 - transaction and there you go so that's
215:59 - gonna be it for this video i'll see you
216:01 - guys in the next one bye

Cleaned transcript:

in this video you'll build the facebook web 3.0 dap with nexjs you'll style this app using kelman css so why i'm so excited about this particular project specifically is because we've been doing all of our projects on the ethereum network this is going to be our first project on the solana network why i like solana a lot is because they have the fastest user experience their user experience is phenomenal the transactions are super cheap i mean something that'll cost you 100 or 200 in ethereum on solano will cost you one cent or two cents so it's literally the cheapest network and then it's very very fast and recently i even had justin khan on who was the founder of twitch he built his own gaming marketplace using solana because it has a wonderful user experience why this is one of my favorite builds is your data is actually going to be stored on chain so we're not going to need a back end for this we're going to be storing data on the blockchain you'll learn how to create your own program on the solana blockchain using rus framework called anchor so in other words basically you'll be building a fully decentralized database using solana you'll be using cargo to compile and deploy your smart contract think of cargo like hard hat we'll use phantom wallet to authenticate the users that actually sign up onto this app we'll use the solana web3 package to interact with our smart contract and the blockchain we'll use the context api inside of react.js to store and manage our state at any given point we'll use sanity as our database to store our users and their profiles you'll be able to view and confirm these transactions over on the solana explorer to verify that they are indeed 100 percent real will then deploy this app using netlify and host your facebook web 3.0 blockchain app onto the internet with that said i hope you are excited this is going to be one of the best blockchain apps that are out there on the internet right before we continue please do me a huge favor smash that like button turn it blue or white or whatever youtube color it turns into we want to break a thousand likes so that i could keep my job and lance who is going to also help you out as one of the instructors of this build he gets to keep his job with that said let's get right into it right before we get started and start coding i just want to let you know that we're doing a collab with buildspace which is one of the best website education platforms in the world and you guys are going to be getting nft that proves you completed this project and it's going to be in collab with bill space and clever programmer it's gonna look sick build space also has an incredible community of web three developers who you can learn together with in their discord and they're very active last but not least build space is also helping new web3 developers like yourself get matched up with top tier companies like adidas or alchemy for premium high contracts and i'm talking about ten to twenty thousand dollars a month contracts and their vision is amazing i even met their ceo farza and he's just an incredible amazing human being so i'm really excited about this collab and the best part for you guys it's completely free all you have to do is just go down below click the link in the description it's going to take you to a landing page and it's going to ask you to connect your wallet and once you connect your wallet you're good to go and then when you do this build and you complete it that wallet will be able to verify you did it you'll get your own nft and you'll get the entire community and everything that goes with it okay so again it's completely free go ahead sign up for that right now and with that said let's just jump right into the video all right so let's just demo this app right now so i hope it blows your mind so over here i can see that i'm on my facebook page boom that's all good i can also go ahead and connect my wallet so i'm gonna go ahead click that and connect it with my phantom wallet boom okay beautiful now that my wallet is connected i'm logged in and now i'm actually inside of the app so now you can see it has given me image at the top and i have a username and i can go ahead and write a post on the solana blockchain app okay i'm just gonna go ahead and type that in beautiful it's posting so let's give it a few seconds because remember this is being stored on the blockchain so it can take a little bit of time for it to show up so we'll just wait for a couple of seconds boom looks like it's good to go it's showing up that's awesome why this is so freaking crazy is that is on the blockchain that is not a database that is on the decentralized blockchain that's freaking insane you can even reply to that comment so let's go ahead click reply so click reply let's add in a reply boom let's hit enter let's wait for that reply to go through boom look at that that reply just went through that reply is also stored onto the blockchain there's no server side there are no databases that's the freaking crazy part all of this information is stored on decentralized nodes it's literally stored on the solana blockchain that's just to me one of the coolest freaking things and it can't be deleted or removed it's permanently out there so you know be careful what you post on there because it won't ever go away you won't be able to delete it but that said that's the demo of the app i think this would be great for your portfolio and for your resume so when you build this out definitely put it on there you know if you go especially try to apply to solana jobs or rush jobs and they're looking for a lot of solana engineers this would definitely help you a lot with that said we're now going to start coding it up let's go all right let's start coding this up i'm going to open up my command line whoops it looks a little bit too big so we're going to make it a little bit smaller that's what she said just kidding here we go so i'm going to go npx create next and i'm going to pass it this e flag and i'm going to say with tailwind css and the project we're going to name it facebook solana let's hit enter and let's wait for this project to completely install okay and then once this project is installed what i can do is i can go ahead and open this project up all right so let's do ls i'm going to cd into this project so i'm just going to say cd facebook solana just like this now i'm here and i'm just going to go ahead and do code and do period okay and that's going to open this up in visual studio code if you don't have this code period functionality just open up your visual studio code and you can open it up manually as well and i'll show you that in just a second so my visual studio code has opened up right here okay so what you could do is if you couldn't open it up in that cool way you could just hit open and then find where you put this file all right and then you can just so see in here rafikaze facebook solana and you can just hit open so that's another way of doing it now what we're going to do is just we're just going to make sure our app and everything is running so i'm going to go ahead to my index file here and hit command j and i will simply just do yarn dev here and that will start up the server and then we're just going to go ahead on the right hand side open up chrome so we can see it okay and let's go to our local host 3000 and boom there you go our server and our app is up and running i'm going to make this onethird and make this twothird of the screen so you guys can see the code and the app better so this is our just basic setup to just get started and see the app running now we're going to start setting up all of the things that we need like sanity netlify solana and then once we're done setting up that whole thing we're then going to start jumping in coding and hacking this app up so i'm excited i'll see you there in a second all right so let's go ahead and install phantom wallet this is going to be very important we're going to need that for the rest of the build any solana related thing that you're going to need to do you're going to need to use phantom so let's just install it okay and get it over with all right phantom wallet it's the most beautiful the ui ux of this is like 100 times better than anything i've seen um i personally like this a lot more than a meta mask and yeah just a wonderful experience and then their app is phenomenal too as you can see here so just go here and install their chrome app and you can also download this on your on your ios device as well so let's hit download and then we'll scroll down here it says phantom for desktop and since i'm on chrome i'm going to go ahead and hit chrome here install okay so this came up we're going to hit add to chrome and we're going to say add extension all right here we go crypto wallet reimagined let's assume you don't have a wallet yet so let's just hit create new wallet we're gonna set our password we're gonna say i agree to the terms and service uh here's our secret recovery phrase which you should not show to anybody because then anybody can get your wallet so really bad do not show it to anybody keep it safe okay put it in a dashlane type of app or put it in a notes app and lock that notes um so you can always recover your wallet i'm gonna show it because i'm just making a dummy wallet here so it doesn't matter and then just go ahead and say i saved my secret recovery phrase hit continue okay and then you can open it up with this keyboard shortcut option shift p okay so we're done that's it now we should have a phantom wallet where is it it's in our extensions right there we're gonna pin it so it's top here so now i can actually just click this phantom wallet here and it should basically show that you have zero dollars worth of anything in here and your wallet is up and running you can send this wallet address to somebody you can actually send solana to this you know receive solana or whatever you want here you can also buy things like usdc uh if you buy nfts they're gonna go in your collectibles here so it's pretty freaking awesome wallet and you can create new wallets too and name them but for now we're just going to leave this as is this is just part of the setup and congratulations you've installed phantom all right so one more thing we're going to do here with our wallet is uh settings at the bottom right so right there hit settings and scroll down we're going to go over change network so let's click that and we're going to choose devnet here so let's go ahead and select devnet so we're going to be kind of in developer mode okay so just make sure you're on devnet and then you should be good alright and the next thing we're going to do so on devnet you you're not going to be dealing with real money you're going to be dealing with fake money okay and that's perfect for when you're developing in test mode because you don't want to be using real money yet we're also going to go to soulfaucet.com here and uh here we're gonna get our wallet address so i'm gonna go ahead uh copy this wallet address i'm gonna paste it and basically let's just say i want like i don't know 12 sold to my devnet so i'm going to say 12 and i'm going to choose devnet here oh it says too large no problem let's go ahead pick nine go ahead and hit devnet successful airdrop successfully dropped and was it so i'm imagining that we'll soon see it here okay so it's probably gonna take like between 10 to 20 seconds and then it should pop up and we should have it okay so let's keep an eye out on that you know what while i'm here i might as well just send one more and view this transaction on solana just to see on soul explorer takes for this so the second one was apparently successful perfect do we have it yet so while i was waiting um because it was taking too long i just decided to go ahead send myself like two airdrop and then hit devnet and then that actually came to my wallet pretty quickly so now i have uh two and now i have four so like when i was sending myself the big chunks it wasn't coming through but when i sent myself like small amounts it actually comes through like almost instantaneously which is kind of nuts but yeah so now we have four sole 534 just more than enough to do what we need to do we're not going to need that much really but uh this should be a good start now we're up to six soul so just keep sending yourself twos if the nines and the tens or the sevens are not working for you okay with that said now your phantom wallet is set up it's on the devnet and you have money to play with so this is great our wallet is not set up let's move on all right now what we're gonna get ready to do is we're gonna get ready to deploy this app and we're going to deploy it with netlify so we're just going to set that up even though we're going to deploy it later we're just going to finish doing the setup right now so what i want you to do is click the link in the description below that we have for netlify okay we'll pop up the link on the screen here as well so you could see it so basically just go to ntl dot fyi slash clever hit enter okay now i'll bring you to this page which is netlify's landing page okay and then what i want you to do is just simply go ahead and hit get started for free and then just sign up okay so if you have github i like to just sign up with github you can also sign up with email and it'll ask you for your username and password put that in you can use this method for future logins so you can click that and for me because i have a mobile app on github it sent me a request a notification on my phone so i'm gonna go ahead and authorize the app with two factor authentication with the github app on my mobile phone now i'm simply just going to choose approve here on my app and look at that boom i am absolutely invisible and blurred out of my freaking mind i apologize about that and we're logged in to netlify right so i'm on the netlify homepage everything looks beautiful and ready to go i am completely set up to rock and roll so this will come back to later so in terms of the basic bare bones set up for netlify we are done right now what's up guys lance from the future here and i wanted to walk you guys through on how to set up and install sanity so you guys just finished installing phantom what you guys need to do next after you have your whole next app and tailwind installed you want to also make sure you make a new folder oops you also want to make sure you make a new folder within your project and you want to studio the studio folder is where sanity where our sanity is going to be initialized so what you want to do next is cd into the studio and head over to sanity.io cleverprogrammer so that you can use their nice code so i have that over here head over to this website what you'll see is these two instructions to get the free boosted plan and all you have to do is just copy this so for me i already have extended the sanity cli tool installed all we need to do now is just copy this coupon send it the init coupon clever programmer if you do that you get the free boosted plan okay awesome so i'm gonna put that into the terminal hit enter awesome i already have a sanity account and i'm going to call my project amazon clone blockchain i'm sorry not amazon i'm going to call my project facebook clone blockchain go ahead and hit enter we can use the default data that's our project output and we can select clean project with no predefined all right there we go it looks like it's done it's done initializing i think if i log in to log in real quick there it is you can see the facebook clone blockchain because we have sanity setup and we're good to go all you need to do now is to run our studio you can just say sanity start okay so now it's done every time you want to look at your sanity studio all you have to do is go to localhost and go instead of 3000 it's going to be 333. this is the port that they use and if you connect to it google awesome cool and it's empty which makes sense so let's actually take this moment to set up those schemas so i'm gonna go into the studio folder as you can see we have all the files now that it's initialized what we need to do is go into your schemas.js if you look here we let's go ahead and clean a lot of these comments out cool so now it's cleaned out the idea here is to create the actual user schema and then add it in this array so what does that mean we're gonna have to make a new file in this folder and say user scheme dot js yeah user schema.js okay cool and to set up your own schema you can say export const the name of it and set it equal to an object and remember this is the schema file for a user so that means the name of this will be users the type will be just document title can be users that will be and here are the fields or essentially the what we'll call like the keys of the object or the document so i'll save fields here and the first one the first thing that we want to keep track of when we're talking about a user document is going to be the name what is that user's name so i want to say name the name of the name will be name and then for the type it will be a string and then the title be capital cool so we have another another field that we care about and this one will be that person's wallet address remember we're going to be using phantom later on in this project you guys just installed this is where we also need to store their wallet address and that will be stored as a string so make sure you specify the type okay and the title is usually just the same thing as name but just with the capital letter that's more for our studio i'll say wallet okay and last but not least i want to be able to save the image url with the user so i'll do that by saying name is profile image and the title will be capital file okay cool go ahead and hit save and make sure you're doing export cons because what you can do now is when you go to your schema.js we can do an import user schema from user schema so if we save our studio shouldn't be empty now it should actually show up the users rebuild bundle see where we're able to add it oh that's right we also have to make sure in order to do that we have to put a user scheme in here and since there's one i'll just format it like that nope not all caps there we go now that should do it we're importing user schema and passing it in here someone with this load i'll be right back hey there we go guys so now we have user obviously we don't have any users yet but later on in this video i'm going to show you guys how to set up those routes and create a user for each one that logs in sounds good we have the user schemas done last thing for this setup we're just gonna need to create a new folder this is what we usually call our lib folder and within that lib folder we're gonna have our sanity yep and our other sanity.js this is where we're going to import that client import sanity client from at sanity client if you don't see that you just make sure you have to ins at sanity and you might be missing a package but if you do you're good to go and now that i'm thinking about it while we're here you guys might have done this with kazi but for me i have to set up a dot env so in my.emv this is where in my.vnb this is where i'm going to put my project id and sanity token so that's what i'll call it sandy sanity project underscore id and set it equal to whatever it is then we do sanity underscore token and to get these two things all to do is go to your sanity you can click that project which is facebook blockchain and look at that project id is already there so i'm gonna click paste there's the project id to get the token you actually need to go to api and add an api token you can name this whatever you want you just name it token make sure you click editor hit save boom it's gonna generate a unique api token yours will look completely different from but just go ahead and paste it on there save and go back to your standard insanity.js let's finish building this up so to finish building it out you just say export const client we're going to be using this client later on in the video to set up our to create a user and get a user but for now what we want to do here is set up the client so we say the project of id is going to be the process dot env dot sanity project underscore id cool the data set we said we'll set it to production and the api version you can set that to b1 okay from there we can just set up the token which will be similar process.enb dot sanity believe it's underscore token okay last but not least use cdn this will be set to false cool make sure you're exporting the con and we are good to go with sanity i'll be sending it back to qazi and i'll see you guys later for the next part all right so now we're gonna install solana and russ on our computer and get that whole thing set up so here's what i'm going to just let's just go to google we're just going to type in install solana anchor okay and anchor is something i'll talk about in a second but basically it think of think of javascript and react and how react makes javascript easier when you're writing solana code you have to write in a language called rust rust is pretty painful to write in so it's better to actually use a framework called anchor anchor will make writing rust easier okay and don't worry we'll learn this together and do this all together okay so don't freak out yes it's a new language but it's very popular and why we're choosing the solana chain for this project is solana chain is the fastest experience if we did this on solidity good luck you'd be waiting like five minutes for each comment to show up with solana it shows up fast it's the fastest chain and i think it's the best user experience by far so here we go now we gotta install rust so i'm gonna go ahead i'm going to copy this and i'm just going to open up my command line okay so let's open up command line and i'm just going to go back to like my home page okay and we're going to start installing all right now we're just basically going to write these lines that we see here on the right hand side and we're going to write them one by one so we're gonna start off with this curl one okay so uh let's go ahead highlight it and i'm gonna copy it do not hit the copy button just copy it manually or right click and copy whichever one you want and then we're gonna go to my command line and i'm just gonna hit paste and let's hit end okay so that should be downloading it now let's make this a little bit smaller all right we're gonna go ahead and choose the first one so we're gonna proceed with installation which is gonna be the default installation okay so let's go ahead and hit one on this and hit enter okay it's installing it make this a little bit smaller okay so this installation is gonna take some time but once this is done the next commands that we're gonna be looking at are our source and then rust up component okay so perfect so to configure your current shell run this so just copy this exact thing oh actually copy this entire thing right here and we're just gonna hit enter okay so perfect then the last line we're going to write is that one rest up component addressed fmt and hit enter perfect so it says component russ smt for target blah blah is up to so this means we're done installing rust on our computer all right now so to prove that we have rust installed and it's working here's what we want to do essentially we want to be able to write the simplest hello world program in rust then we're just going to try running it okay so i'm going to just do vi main.rs okay you could also just make a new file called main.rs from your visual studio code if you feel more comfortable i feel comfortable being able to do it from vim so i'm gonna do that but if that's annoying for you and you don't know how to use them it's okay just literally make this file with visual studio code and you should be fine i'm gonna go in here i'm just gonna write this okay we're gonna say print line and we're gonna say hello youtube instead of hello world okay and that's i'm going to close it out and i'm going to exit with shift zz and then um then the next step next thing that i need to do is uh write this command here rust main.rs rustymain.rs actually compile it i'm going to go russcmain.rs and i compile this file that i created now it's compiled and now i can actually just do dot slash main and actually just run it and say hello youtube perfect if you've gone this far great job that means you have rust actually installed on your computer and it's fully working fantastic with that said we're gonna keep going so now we're gonna go back and we're gonna go ahead and actually install solana here so i'm just going to copy this you can hit that copy clipboard button too here that's fine line over there and i'm simply going to paste it and let's hit enter this will install solana on mac os and linux okay look at the instructions on how to do it for windows as well but i believe that you should be able to do it in a similar similar way okay it's installing here it's extracting everything once we have salon installed we're gonna start working and to get our anchor and everything installed because we're going to need that for our project okay there we go alana is called adding export path users okay great close and reopen your terminal so basically what we're going to do is instructions it says run the following in your existing shell so i'm going to go ahead copy this paste it and i'm going to hit enter now it's added the things that it needed to add to the path that way whenever run these files or i need to look for these files my terminal and my command line tools are able to find it because it's in my path and it's a known path now what we're going to do is we're going to go ahead and install anchor so let's go ahead copy this line here go over to my command line paste it hit enter run the same command but just add the word sudo at the start type in your computer password and just try installing it again boom this time it looks like it installed without a problem so that's a great sign thing we're gonna need is we're gonna now add a cargo let's go ahead copy this here paste and hit enter and it should work installing this if you're on you're gonna also need to add and run this command next okay um anything else you don't need to run this command okay this is just for linux for us if you're on a mac like after this you're going to be done and pretty much ready to rock and roll look at that serum decks auction house metaplex and all kinds of useful stuff here with anchor that's going to make our development much much much easier and really the purpose behind the anchor is it makes your development a lot simpler so there's a bunch of stuff with solana and rust that worry about especially with native rust like serialization and deserialization of your code that's not fun a lot of them in the solana community call it like eating class but if you do it with anchor it's going to simplify and handle a lot of that for you so basically it's going to make your life a heck of a lot easier so you're not going to really need to worry about all of that stuff so art is compiling and our installation is done here so let's wait for that looks like that was installed perfectly now all we need to do is just go ahead check out which version of anchor we have and that will verify if we have installed this properly it looks like the anchor cli is indeed installed correctly okay so we have verified that and that is perfect let's also go ahead and verify that we have installed solana the exact same way and we have installed it correctly so let's take a look i'm just going to do solana version here boom looks like solana and anchor were both actually installed completely correctly but that's a great sign all right so now what we want to do after we have everything installed with solana is we need to go ahead and set up our own wallet so what i'm going to do in order to do this is we're just going to go ahead say solana and i'm going to say kegen new and what this will do is actually generate a new wallet for me and uh let's see what it says here this wallet by the way we're making because we're going to need this to sign off our contracts like for example when somebody's making a facebook post so this is for a coding side okay so i'm gonna just leave this empty and i'm gonna hit enter cool so boom it just gave me a public key which you can copy if you want all right save this seed phrase and your to recover your new key pair you can also save this here as well okay so i'm just going to go ahead copy this you could put it wherever you want okay i'm just going to kind of do it in a really stupid way right now and i'm just going to put it in my coding file right here okay but please do not do that do not put this in your code file put this somewhere safe okay so let's go here boom and i'm going to put that right there just so i have it so keep these safe next thing that we want to do is we want to connect this wallet that we created to the devnet okay because we don't want right now this one is not going to be on the main net this one needs to be on the devnet what i want to do here is i'm just a solana config and it says set url and here's https api.devnet.solana.com make sure you have the https colon slash uh written out correctly here and then just hit enter boom there we go just gave us our pc url a websocket url and it says commitment level confirmed so it's confirmed that this happened and it actually even gave me a key pair path which is in my config solana id.json so this is actually stored on my local computer perfect config file it tells me where it's at it's a yaml file uh yml at the end all right now you can actually do look at this solana makes it so freaking clean look at this i can actually check my balance by doing salona balance look at that i get zero soul it's telling me exactly what i have and then i can also do solana address and this will actually tell me uh what my wallet address is right so boom this is my public address of the wallet what's so nice about this is whenever i'm working with any other tool or whatever their command line tools are really bad or you have to pass some weird flags and things like that this is just so clean so on a balance salon address and boom it just shows you everything so far from a developer experience perspective i mean i'm really enjoying it i hope that you are as well from watching this let's keep going now the last thing i need to do is i need to like airdrop some amount of soul so i want to airdrop some fake soul into this okay and just so you guys don't know clearly what solana is solana offers a really beautiful user experience and it's really fast it's one of the fastest blockchains in the world that's why we're using solana just because it makes a really seamless amazing experience and if you were to go on coin market cap or something like that you'll see it's one of the top 10 coins it has been for a while now and it's one of the fastest growing i think right now in the developer world it's probably right behind ethereum and maybe one day who knows it might catch up and actually win so we'll see um let's go ahead and get some fake soul air dropped so i'm gonna go ahead and say solana airdrop one and let's hit enter requesting airdrop of one sole finalizing and so beautiful right with the solidity you have to do all kinds of weird stuff to create a wallet to airdrop it here so nice and easy with two lines of code we have it we have this air drop so i'm gonna say solana balance and uh it actually does tell me that i have one balance and if i wanted more i can just air drop it again i wish i could do this on the main net that would be nice i'd become very rich very very quickly so there we go we have to sold whoops what the heck did i just do there we got two sole so we're good our wallet is ready to go uh and now we're gonna go ahead from here all right now what we're gonna do is we're actually gonna initialize this project using anchor so we're ready to rock and roll okay so going over i'm going to create a new folder i'm going to call it call it whatever you want like for solidity normally we would call it like smart contract you could still kind of call it here i'm just going to call it programs because in solana that's kind of how they name things now what i'm going to do for my command line is i'm going to cd into programs and then in here i'm just going to say anchor init and then do period because i want to be initializing that anchor right here so just hit enter now we're going to start the installation process so we got this error let's fix this real quick all right actually so with anchor you actually have to give it a project name you can't just say period here so what i'm going to do is i'm going to go ahead delete this folder i just created in programs and we'll back out or oops that's annoying okay so i'm just going to go to facebook solana all right the main folder that the project is in and then here i'm just going to say anchor in it and we're just going to say programs and hit enter all right so if it was giving you errors like it was giving me apparently my command line that i installed with here was detecting when i wrote solana but when i was writing solana in my vs code command line it was not detecting it i tried restarting and opening up visual studio code again it still didn't work so what i decided to do is in my visual studio code command line i just went ahead and installed rust from scratch then copied and pasted this command source then the rest up command but then that installed rust for me then i installed solana by copying this command pasting it in and writing it here that installs solana so now when i write solana it does pull it up perfect and now solana is working solana balance is working and now we're good to go so what we're gonna do now is we're gonna just go ahead and say inet and i'm just gonna say programs basically it just created this folder right here if you can see it boom it's called programs it's initializing it with anchor and now when i go inside look at that how nice that is anchor just made all of these nice things for us so that was super easy all right now that installed everything let's click programs here and inside of programs you'll see i have a folder called programs go inside there inside there's another program and then click source and go to lib.rs okay this is where we're going to be writing our smart contract so think of it like this the entire thing is your app okay or at least this is your front end and then this program thing that's your smart contract portion now that we're inside of this lib.rs we're going to go ahead and make a structure for our app okay but here's what i'm going to do i'm going to create a post account structure okay and we're going to be using something called struct which is just like think of it kind of like you're defining the shape of an object in javascript you have these objects right things go inside of them so this here is you're just defining the shape of it what that object would look like so now i'm going to do account and whenever you're trying to store data or information on chain on solana do something like this where you're gonna do hashtag this weird bracket thing and then account you're just letting it know this is an account okay cool let's go down and let's write our our code oh wow that is super cool that github autopilot can even understand rust code and solana code which is super nice but um yeah we're not going to be making this but this is what ours will kind of look like what we're about to do so we're going to say pub struct and we're going to say post account all right and then the first thing is going to be our signer address so i'm going to say we're just going to call it authority so who has authority of this post we're going to say pub key so just to understand what a post account would be is hey what is the account that made this post on facebook who made this post this is what this is gonna uh host and again what's so freaking cool about this you know we haven't talked about this but this is the first freaking project where we're gonna store the data on a blockchain so literally you don't even have a back end anymore you don't have a database yet you can store all your information that is freaking cool right you have to pay for anything you have to sign up for anything you can store this data on this worldwide ledger all right next thing we're going to need is we're going to need text so i'm going to say text and this is going to be of type string so the first thing is type hub key which is your public key next up we're going to have poster name and then we're also going to have a poster url this is going to be a string and we're going to go ahead and go comment count and i'm gonna go use six four on this right we're gonna need a post index and i'm gonna need a post time so when the post happens we're gonna say i six four when it comes to the post accounts truck that's all this is the information that's going to be stored so we're just kind of defining a data structure here next up what we're going to be building is one more after this okay so let's go ahead and work on that all right now what we're going to do guys is i'm going to go ahead delete this right now okay we're going to write this from scratch so remember when i'm making something like this right so i'm gonna have this like this is just a struct simple stuff so i'm literally just going to say account up here when i have something more complicated that i need to do i'm actually gonna say derive accounts like this okay and then now underneath here i'm gonna make a struct and i'm gonna create state i'm gonna pass an info here and then we're gonna do the following so i need to create count block okay and this account block is gonna have init i will give it a couple of things so let's go here let's go like this i'll give it i'll initialize it i'm going to give it certain seeds so the seeds that i'm going to give it i'm going to put it in bytes so i'm going to say state and then i'm just going to say turn that to ref like this okay but there we go so that's gonna automatically generate a random seed every time like this state variable is created so imagine like i want to create a state that's unique every single time well if for whatever reason my state ends up being the same as your state bump is this algorithm that'll just like uh make it unique when it matches the same it'll just go nope this is the same one so give me just another number or another code so that it doesn't match the previous one so essentially it'll allow me to always have a unique id okay kind of like in databases i also need to give it a pair and so for pair i'm just gonna say it's gonna be the authority okay and then we'll go here and space is going to be we're gonna use size of okay for this and we're going to say it's going to be the size of the state account so we haven't made the state account yet but we will make it soon so we have a post account but we'll also make a state account soon and i'm just going to say plus 8. going underneath here this is gonna be the state variable and this is gonna have the special thing called account which is gonna have info and then we're gonna say state account if some of this stuff doesn't make sense to you right now just totally okay this has to do with lifetimes inside of russ and anchor this will make more sense as we go along for now just trust me and just go along these things will get clear as we move on this whole account thing i'm just going to move it to one line just to show you something for now this entire account thing right here is just for this specific variable state here i'm giving i'm saying initialize the state this state should have the specific seed here the state should have this bump algorithm and a pair so that's where that's being used okay so i just wanted to clarify that this block of code goes along with this so we got our state now let's go down the other thing that we're going to need is the authority okay so the authority this is the signer who has actually paid the transaction fee so let's move this let's go down here let's move this back i'm going to say account okay we're going to go mute here and then i'm going to go authority like that and the signer is a special reserved word that we have and that allows us to get access to the signer and info is the lifetime thing that i mentioned okay so we're just gonna pass that right there so this is the authority variable that we're using here as well okay and this mute here that i wrote that just means this is immutable meaning that we can change authority authority can be me and then next time it could be somebody else and next time it could be somebody else so it's it's something that's mutable it's some it's something that's changeable all right let's put a comma here let's go down now we're gonna make our system program so don't really need to have this comment here that's just for for you we're gonna say system program things need to be snake cased in when you're writing in rust in an anchor so we're gonna do system underscore program and uh here for system program i'm just gonna say unchecked account and leave that as this now i do know that unchecked accounts can be a security risk but this is where just doing this as a demo educational purpose is building this so for one of your first solana apps it should be fine when you want to move it to production you need to make it more secure and then we'll have our token program portion okay so basically here i'm going to make our token program and we're just going to be a program take an info and it's going to be of type token and right above this i'm going to say this is going to be an account it's going to have a constraint and that constraint is going to be the token program where the token program key is this token this token's id so i've put this constraint and now i have my token program set up is uh now done and we just got to make a couple of more things and then we should be done with this entire slana or this rust smart contract and this is really going to be one of the most difficult and kind of confusing parts but just hang in there with me we're going to build it out step by step and once you're done with this the rest of the project's going to be smooth sailing from there all right so now we're just going to make the state account that we created over here so i'm going to just scroll down right over here we're gonna go and say this is gonna be an account block gonna be simple so i'm just gonna do my hashtag bracket and then i'm gonna have a pub struct and we're gonna say it's gonna be a state account just like this and i'm gonna say that first this is gonna be the signer address so we're gonna just say authority i'm gonna give it a pub key so that's great and then we're gonna also have our post account so how many posts are here so i'm gonna say post count and it's gonna be a u64 and for those of you who are nerdy and want to know exactly what this is this is just an unsigned integer that's 64bit so basically you're just gonna store numbers in here and we're just creating the struct um we're defining state account here okay and we're sorry we're using state account here but we're defining this struct right there all right guys so we just finished up our create state our state account let's go ahead and build our create post so this one is gonna also have some more complicated functions inside of it so we're going to basically say this is going to be a derived accounts block and uh here i'm going to create it as a struct i'm going to do create post so i'm going to create my state variable here and it's going to be account info and then it'll be state account so i'm basically telling my account that you're going to be of the state account type okay so this struct that we created here is going to be of the same type here i'm going to say accounts will go and this is going to be our standard stuff so this is going to be of type account the state and it's going to be the same as the one that we did before already so it's going to be mute it's going to mutable seeds is going to be bytes of state i'm going to say as ref and then let's get out of this right there i'm going to get out of the seeds and then we're going to pass in bump okay no need to add pair for this and we also don't need to initialize this so our state is good to go this will authent this here will authenticate our state account the next thing that we actually need to do is we need to authenticate the post account okay so how we're going to actually do that oops let's bring that in here so how we're going to do that is we're going to say it's going to be an account we'll initialize this break it up onto new lines i will say seeds and we're going to do post as ref and we're going to do state and just before we continue on this guys but i want you to understand is uh we're just gonna be using seeds is always used to create a unique seed okay so it's like think of it like a unique id in a database so we're basically using anchors like builtin mechanisms to create a unique seed for us and the logic that we're using behind this specific seed is um we're going to be using um the post okay so we're going to be using the post as a seed and index of post as seed okay so all that basically means is we're using the specific post and where that post happens as a seed and this will just give us something unique every single day perfect so i'm just gonna go ahead write that out we're going to go post count say 2 b bytes and then we're just going to go ahead and say as ref just like that and put a comma here at the end so that should handle our seeds for this one we're also going to do bump pair is going to be the authority so it's the actual user so whenever you're initializing you're always going to need to pay we're going to create the space so for this space what i'm going to be doing is i'm going to be using size of i'm gonna be saying hey uh it's gonna be of type post account but instead of plus eight on this what we're gonna be doing is um we wanna give this post a specific size so this space here i want you to kind of imagine it like this okay kind of like imagine it's like la okay and uh you have you have these blocks that you can purchase where you're gonna build all right so whatever thing you're building you're building literally imagine it like a real estate except this is like digital real estate on the blockchain so you're going to be finding the specific block that you want to build on and you get to choose the size is it like a tiny block that you want a big one and the bigger that block is right the more it's going to cost you so that's why you want to actually that's the benefit of lower level uh programming languages unlike javascript you know programming languages like rust you can define the size of the block that you want that way your code will be more efficient you'll also be paying much less prices than anybody else so we're gonna go ahead and uh come up with the size of our hours okay and uh how we're gonna come up with the size is in the following manner okay so let's go all the way to the top i'm just going to declare a couple of things okay i'm going to say my text length and we can just make it uppercase like this and i'm going to give it 1024. okay so the text length would mean hey if i'm making a post on facebook how many characters can i have so this is like 1024 bytes and that roughly translates to about 1024 you know you can make you can make a post that has maybe a thousand 24 characters the next thing i need is what should be the length of the username right because everybody who's making a post is also going to have a username so for example that might be clever programmer or rafikaze making a post on facebook so what's the size of this i'm going to say the size of this uh we're going to go length u size and for this we're just going to go and say 100 and then we're going to make the last one which is going to be the url for my image and we will say use size of this is gonna be 255. so these are the three variables we're gonna use to uh define our size right over here we're basically gonna go user url length plus text length plus user not user url length but name length okay this is going to basically ensure that that block of land we're purchasing will always have enough space for one post okay and that within that post you'll be able to store the user's username the actual you know text body of that post and the url image so if it says this post was made by clever programmer then i need to actually be able to store the space of the url that represents my my profile image my post body and my username length of clever programmer so we're purchasing that small land on the blockchain that's what space is for going down i'm gonna basically say this is post uh we're gonna pass info and we're gonna say it's gonna be of type post account all of this here applies to the specific variable post it's just for post so we're initializing our post we're buying a piece of land for that specific post that post will have a pair okay and that post will have this seed right here so a lot going on here but i hope that this is beginning to make somewhat sense and you know at least there's some pattern recognition stuff involved here i'll definitely say that so some of this stuff you're new to solana it's going to look kind of confusing but the more and more we do this we're gonna start building some pattern recognition here and hopefully it's gonna start making some more sense uh next up we're just gonna need a signer so for designer i'm gonna do essentially the same thing that i did above so i'll just pretty much copy that code come down here and i can paste that right there so i need a mutable authority here and that's going to be signer okay i also i'm going to do the same thing with my system program i can just copy this right here let's go down and let's paste it perfect uh program and then for my token program i'm gonna do the same uh thing as well you can just copy that from the top come down and paste it and just to explain a tiny bit more about this constraint is um we're basically saying hey if we make this facebook app and let's say we initialize it with uh solana solana usdc the person that has to uh make their post has to also pay in solana usdc to actually put their posts on this chain if we in turn make this solana sole when the user has to pay they have to pay in seoul if you wanted to make it let's say johnny token you could initialize your app with johnny token and the person who's using your app would literally need to have the johnny token in order to be able to make posts and if they don't they can't make any posts on your app super cool um i i feel like a lot of creators can use this right if mayweather had an app or mcgregor had an app like you would need the mcgregor token in order to be able to post on that app so there's a lot of if garyvee had an app you could only post on it maybe with garyvee tokens um v friends or whatever all right perfect so that's just this is that part cons regarding the constraint and last thing that we actually need to finish up or create post is gonna be a time or just timestamp okay so we're just going to go ahead and say clock and we're going to get our cis var okay and oh it's going to be of type clock perfect so that's this this far is kind of built in and this over here is going to be our timestamp all right guys so now we're going to make our first function inside of rust and anchor so i hope that you're excited now we're getting the fun parts because up until now we're just defining the data structures kind of doing some of the boring parts but that are important so let's go ahead and do this so i'm going to come inside of my programs uh that that i have written here okay and what we're going to do here is i'm going to leave the super the super is basically just saying hey like the scope is everything okay so i don't want you to limit the scope um i'm going to come here okay and this is going to be my first function it's a public function and in instead of calling this function initialize what i'm going to say is create state so this is going to be our initialization for the ctx part i'm going to say context and i'm going to give it a specific context so i'm going to give it the create state one let's go ahead where we created the create state perfect let's copy that we're going to paste that right there okay so that's going to be the context here let's put it on its own line let's go boom boom right we're gonna say comma cool and there are no more arguments that we have here okay and then we're just gonna basically return a result and you could leave these here or you could leave it just like this totally up to you okay whatever we're returning we're gonna return we're gonna just name this as a result perfect this is the most basic function you can kind of have in rust because this function will run and it will just basically say okay like this function ran and it was okay there were no problems there were no errors if there are errors then it's not going to run this um okay line right there so let's go down and we're going to make this a little bit more complicated and add more things to it so i'm going to say let's state equals and state is going to be our accounts okay so this function here is going to be passed in from our front end all right we're going to basically be able to create a state at any given time and then we're going to be able to access that specific states or that specific context accounts and the state okay so now what i want to do is i want to make sure that i can actually mutate this so i'm going to pass basically say this here amp percent and mute which means whatever a state that i pull from here i want it to be mutatable okay something i could change i could change its values and now we're going to go ahead and do just that so let's put a semicolon here and let's go down now we're going to save the authority to the state so i'm going to say i'm going to grab the authority here and i will just say make it the authority of whoever is currently the authority the current person who's like let's say logged in with their wallet so that's who the state's authority is going to be set to okay and because we allow this mutation here now we can do something like state that authority and change its value so the other thing that we're gonna do is we're gonna set the post count to zero because we're literally just starting and creating our post for the very first time okay so let's go ahead and do state.postcount and we're gonna set that to zero and then we're just gonna simply pass okay so this is our create state function and we're done with that the next function we're gonna need is going to be our um create post function wow look at that my github autopilot already putting in work so let's go create post right there and i'm gonna do ctx context so every time i'm making these functions i'm just gonna pass in my ctx okay every time you make a function you say ctx and then you give it the data type that you want it to kind of uh be serialized here so i'm going to just say create post um this struck we made it earlier so let's go ahead and look boom right there i have create post okay so it's the type create post let's go down i'm going to give this text text is going to be of type string whoa strum what the heck is that string poster name is going to be of type string as well and poster url poster url is going to be string as well perfect and then last thing we want to do here is of course just say hey this is going to be program result or result whatever you want to call this all right and then let's go down and now we'll start setting up our state and we'll say hey this state is uh mutatable we're going to say ctx.accounts.state just like this so first we're going to get the state so this is allowing us to get the current state next up what we're going to do is we're going to get the get the post post equals this is going to be also mutatable or mutable nonmutatable mutable post then we're going to set the authority and that's going to be the key of whoever's currently in then we're going to set the text to whatever the text that was passed in uh poster name is going to be the poster name that was passed in then the poster url is going to poster url those passed in um and then we're going to set the comments comment count and index and then let's go ahead and do our post time so when was this post made so we're going to go post.clock so we're going to grab it from the clock and we're going to perfect and then last thing that we're going to do is we're going to increment the post count by one okay so every single time that we create a post we're gonna increment the post count by one hopefully that makes sense and then that way we can keep track of that post so again this is so freaking cool right because where all of this data is actually being stored on the blockchain and we don't need a database and we can actually increment and we can retrieve this information just pretty cool because you know we don't have a back end here we're just storing all of this on the blockchain web 3 is our backend so super cool perfect and then last thing we're going to do here is we're just going to say okay and it's double open parentheses and then double close parentheses perfect all right that was a lot of smart contract work we're going to be doing some more of it but i'm going to be passing it over to lance in just a second who's our amazing instructor he's done some of the previous bills like robin hood and tinder that you guys have enjoyed so freaking much he's our frontend master so he's gonna be bringing in some of the frontend side but here's what i want to leave you with a lot of this stuff is new so it can be challenging it can feel intimidating it can feel scary like oh my god what is going on trust me this i'm like new to rust and solana and anchor as well so like for me this was it felt kind of intimidating but once you get used to it and you start doing this it will start becoming easier and easier like we were joking right before this with uh david who's on our team and uh some of you guys know him from a lot of the bills like the mern bills and you guys call him dr mert and uh you know he was like oh this is starting to make sense now you know and i think it's just because he was looking at the rust code for so long started making sense and initially to me this looked like complete egyptian right gibberish and i'm like what the hell is going on i don't understand but hang in there this will start making sense we're going to be moving to the javascript portion now which lance is going to be jumping into and building out the front end and once the front end starts getting put together you're going to start going ah the pieces are making more and more sense okay and then in the future we're going to have some more hopefully salon ups coming through so it's going to make even more sense then so i hope you're excited i'm gonna be switching it over to lance lance go ahead take it over and crush it what's up guys it's lance here again so what we're gonna need to do before we get started with the front end i need to walk you guys through a couple things one of the first things is head over to your cargo tunnel and double check that you have the same version that i have if you're watching this from a future there might be a newer version that's out like for example 0.23 is out and if you do update to that you might run into some bugs with this build so if you want to make sure you're doing the same thing that we're doing make sure you have the same version so once that's done you can go ahead and you see your target folder go ahead and delete it but don't worry it's going to come back and i'll show you i'll show you guys how to get it back so hop over to your terminal and just write anchor build as you're running anchor build you're gonna notice that it's compiling because that's exactly what's happening here so with solana we don't really call them smart contracts we call them programs and when you do anchor build it's gonna compile your program and then the next step would be to deploy it and after you deploy it you should get back a program id i'll let this thing build and i'll show you guys how to deploy your program awesome so it looks like it finished compiling and look at that our target folder is back and like i said the next step in your terminal is to say anchor deploy this step will also take a couple minutes and at the end of it all you should see your program id all right let's go do you see that that's your program id you can look at it like a contract address if you're coming from solidity so go ahead and copy that and remember where it says declare id in your lib.rs we want to replace it with our new so i'll go ahead and hit paste and that's not the only place we want to the only place where you want to update the id go ahead and go to your anchor.tamul and copy this and paste your new id oops take your new id and paste it there we go cool so now that we've updated our rust folder our rust file and our tamil file let's go ahead and run an anchor build again and this time we won't delete the target cool so it's finished compiling now and we just have to deploy it one more time with our updated program id so let's do anchor deploy awesome so the deployment is successful and you should see we didn't get a new program id everything's all good let's move on to the next section all right everybody we're gonna get started with the front end i already started up i'm using netlify dev that's why we're on localhost8888 and head over to your index.js so again this is the the reason why you see all this stuff is because it's the starter next js code so we don't need a lot of it so what i'm going to do is erase everything within that dit you can also go ahead and erase all of these stuff right here and from here we're going to be building it up so instead of styles.container we're going to do styles.wrap okay so i'm going to build out the divs first then we can make our styles object with tailwind to get everything set up so the first div is going to be the styles.wrapper from there we're going to have a component that doesn't exist yet but i like to set it up so we have an idea of what we're building so i'm going to call it header okay so keep it in mind after that i know i'm going to need to do some conditional rendering here so if the user is registered so we don't have this variable yet so i'm going to put it in for now registered question mark okay cool and if registered is true we're going to make this div we're just going to have the class name style dot wait sorry that styles that wrapper it's going to be home right because it's going to have the two of the same okay of course we need the closing div to this the important part is what goes in between which is another component that we're going to be making later on which is the sidebar very nice so in the next line within that home wrapper make another div and this one's going to be called style dot me inside that main div we're gonna have a feed component and there's gonna be a bunch of heavy things in here so i'm gonna comment it out because it doesn't exist just yet so going outside of the main div but still in the home wrapper we're gonna need a right sidebar component okay so i'm just gonna be setting up that component and then copying it out again let's see i'm missing something all right okay and just to close off the register thing if the user is not registered we're gonna load up the sign up component so i'm going to put that whole component in div and all i have to do is call that div with the class name of sign up okay from there we're going to have a sign up component so typically this is how we can see it be planned out and let's see what else am i missing so typically this is how i like to have it planned out and just to keep it consistent with my other names i'm going to keep call this dial down wrapper and to get started using tailwind until you stop seeing this annoying all you have to do is come to the top here and let's make a variable called style and this is how we can set up tailwind i'm calling that wrapper class and from here you can give it the css that you want so for me i'm just going to call the background and give it this color then i'm going to say min height screen and duration of it will be 0.5 next let's start styling the home div the home wrapper div the only thing that this the only thing that this is going to have is a flex property from there we're going to target the center and we'll say flex dash one okay next let's do the main which is going to be similar flex dash one flex and give it a justify center okay then we have sign of container oh then we got flex give it an items center as well as a justify content center or justify center and tailwind with screen height of 70 ph cool so that should cover everything oh and that's right because we don't have registered yet we can just hard code it for now and replace it later registered is equal to false awesome cool and if you don't see any errors we're good to go but if you wanted to see how this conditional rendering works you can say you can type in something like sign up now see if that shows up yep sign up now and if there is a registered we can have this is the home feed right because if registered is false we should see sign up now and if i set registered equal to true we shouldn't see sign up now we should see this is the home feed and that's the same idea that's why i structured it this way if registered is false we should see the signup component and a user should be able to sign up if registered is true the user is already logged in they should just see the home feed that's all we're doing here next thing we should do is let's set up the signup component cool so to get started with the sign up part of this i'm gonna go ahead and uncomment it we're gonna be passing a couple things to sign up so what we can do is format it like so come underneath sign up and a couple things that we're gonna pass into sign up is for one set third equals set register and if it doesn't make much sense to you why i'm writing stuff registered that's because that doesn't exist just yet it will in a moment so for name it's gonna equal name which will just be the name of the user then we'll have set name so that people can set up their name okay second why is this not going back so set name equal set name url equals url and set url equals set up cool and what we can do is we can create variables for these and pass those down but i think it would be smarter to put all of these as a state what we're going to need to do is come to the top here and let's import the use state hook and since we're here let's also get use effect because we're going to need to add that in later cool and we can only use hooks within the function component itself so i'll set that up here instead of having that registered variable i'm going to put that registered variable in a state and this is where the set register comes from it makes sense so let me say equals use state and if i want to set it by default false we can by saying false if i want it to be defaulted to true i can put it to true so since i want to play with sign up next we should have this as false so we can take that out let's set the next state which is going to be const name and the standard convention is if you name it something you should say set the name that you just created state quotes const url set the url is mostly for the images that the use that the user wants for their picture okay and we also have cons users later on we're gonna make a query to get the list of users on our app so for now we can just add an empty one and just do an empty array as the initial state cool go ahead and hit save oh yeah because you see sign up is not defined because you haven't created that component in it like i mentioned before let's go ahead and make a components folder so i want to make a save new file then we'll say signup.js don't forget to make a camel case and now we're good awesome all right so now it's set up i have an extension called react code snippets where you can just do something like that hold on let me redo this part again because it's glitching out cool so after we make our components folder let's make the actual component itself so we can say sign up camelcase.js and do raf there we go and if you're still seeing the error that's because whenever you create a component you must also export and then import it so what i'll do here is import a sign up from components and this actually should be capital u don't know what's lowercase u probably because my component itself that i wrote is lowercase and let's make everything match amazing cool so that means you also don't need this text sign up now because the sign up component is while we're here let's also make the feed component okay so we got sign up and we also have feed you can auto import it cool so as you can see if i initialize my state with false we should see the up but if whatever reason our register is true we should see this is the home feed and also feed because the component is loaded which means they're logged in so we'll head back to false since we're working on sign up now and let's head over to sign up dot js awesome so we're in sign up now the first thing i'll do is let's set up the jsx for it so i'm going to quickly format it and we're good to go as you notice with a lot of our video the convention of the outer div is usually the same which is just going to be style dot wrapper hope not style sheet style then within style.wrapper we're going to have another div with the class name style dot logo and all right because this div is gonna hold that facebook logo and i guess technically it's also called meta right now but we're making facebook okay and we're gonna have we're gonna import image from next.js so i did an auto import which will add this import state and then i'm gonna close it like so then we can add all the other properties so i can say source equals and i have the url i want to use which is this which is just a facebook logo just the facebook logo and then the next thing you need to do is just give it some attributes of a height you can just say 40 and the width will be the exact same to make it a nice square like thing so it's like the similar and then for the alt just call it facebook look amazing there we go that's the image all right and that's the logo container so outside the logo and container but still inside the wrapper div but still inside the wrapper div we want to make another one this one i'll call style dot type and for this div style the title actually don't need to format what i can do is a please sign up to us sign up to use facebook okay from there i'm going to be creating a form this is where the user will be able to sign up by passing in all the input and we're going to put up in a function for this later we don't have to worry about that for now so i'm going to say style. okay next i want to start working on the field so i'm going to give this div class name style dot field contain which will then have another which is just going to have name as the text but for the name oops but for the name i'll have class name style dot input okay then another div this one's going to be called style dot input container because just like the how the name sounds this is going to contain the actual input field so if i write input here make it self closing and for the attributes we can say the value is equal to the name and if you remember name is some is a state that we created that we passed in so we need to bring that in our parameters then there's going to be an on change here or we can say event or sometimes we can say e set name oops which again is a function that we're bringing in as a prop that's not what i want set name event dot target value and what we can do is add a required here and last but not least let's give our input field a class name call mind style dot input field all right so closing div but still in our form we want to make the rest of these things all right so what i'm going to do is actually copy it one more time but the difference we want to make here is instead of name this should actually be profile image url and instead of set name it will be set ur also within here there's also going to be a div oops also within here there's there's going to be a div it's going to have class name random url which is the random url that it's going to generate we're going to have a function for that but i'm gonna make it a little bit later for now we can just add a text field of random so we have div closing div closing div it's the field container next we'll have a button because in our form we should have a submit button that will help the user sign up passing down all the fields that they wrote submit button and then you can get out of there and just do it equals from there all you gotta do is write sign up and if i hit save we should see an error because of all the styles so let's set that up next i'm gonna say it up here con style object and i'll be going through these very quickly but the wrapper is just going to have flex with flex direction of column write p4 here oops justify center items center h w and let's see what did i have again w dash it's gonna have a background of hashtag two five two five two six with minimum width i'm in height h min rounded dash two awesome cool so again at any point you guys need the css go ahead and pause the video so you don't miss out on typing if i'm moving too fast so from there the title is just gonna have the text of this font semibullet text large for the form it's just going to have flex property flex column hide up center all my field containers in here will have my four input title has this text and the font semi bolt input container will have flex item center i hit save accidentally still going to be a problem we got the input field the random url is going to have all of this height full background this color hover background will look like that text white px2 py hover and last but not least we have the submit button which will just have this hit save and that should be all of that oh you might see an error for undefined that's because we also need to destructures those props that we're passing in here which if i remember correctly should be reset registered name set name url and set invalid source prop oh because we have to go to our next config and we have to make sure that it has the hostname of this so i forgot to do that so let's go to our next.config and we're going to add an images key which also which has the value of an object which has a domains key which will then be an array of all the links that we're using to speed up process it should look a little something like this so these are all the urls that we're going to be using for our images so take a moment pause the video make sure you have a cool so now that you have all this we should be able to go back to sign up hit save let's see if it works now oh oh we might have to restart a terminal that's not a terminal okay netflix let's see if this works so it looks like it's running servers ready piling let's go there it is that's our sign up she's beautiful but don't worry she'll have a prettier face as we keep working on it so that's going to be the front end for the sign up for now let's see let me do that part again norman or david who was ever editing but if you hit no we did notify dev there she is awesome there she is she's beautiful she can be way more beautiful and that's because we need to set up tailwind i have all the css it's not really showing up because we need to do just that so to help one thing you'll see me do a lot is tailwind make made some really nice documentation on how to set it up with next js so all we need to do is do an npm install like this okay and for us we're actually gonna do a yarn add instead of npm install add there you go and notice how we're getting three things we're getting tailwind css post css and auto prefixing all right let that install and i'll walk you guys to the next step okay cool so it looks like it's done installing oh nevermind it's not done still let it keep installing no it's not lagging all right beautiful it says it's done so what we need to do is this step which is to initialize tailwind npx tailwind css init p all this does is initializes tailwind and it also creates the tailwind css config file and the post css config file what we care about at the moment is the tailwind.config and what we need to do is add to the content array these two things okay i'm gonna go in the content array paste save so we should be good to go with that the next thing we need to do is go to our tailwind css go to the global globals what you can do is copy all those three things you can actually delete everything in here because it's just boilerplate code and you just have the three tailwind direct save that do a nice dev again and we should see a beautiful transformation the glow up of our facebook page because now we got tailwind involved damn this is slow and that's crazy oh there we go it's compiling hey look at that that's starting to look a little bit better this is the sign up component doesn't look like a very old website anymore let's go okay and start it from here norman all right did netlify dev and let's go there she is she looks way better now it doesn't look like uh 90s websites anymore and there you go that's the sign of components front end let's move on to the next part all right cool so like i said we have our beautiful sign up page and just to double check uh i to get it fully looking like this make sure you have the same css as i do i might have had some spelling errors if it doesn't look like this so double check your index and your sign up so with that said going to the fjs there's a couple things we need to set up here the first thing that we need to do is install a couple different packages so what i'll do is temporarily stop my terminal and let's see what we need to install so what we need to install we're going to do a yarn and i'm going to do something like this we're going to get at project serum slash anchor and because we can get multiple things let's just do that i'll get at solana slash spl token and space at actually not doing the next set so let's get these two first the serum and the spl token all right cool so we got those two installed let's do the next set which is just going to be yarn add at slash wallet slash adapter oops dash react okay i'm going to speed run the next few which is going to be next one is going to be selena slash wallet dash adapter to react dash ui and the last one for this set is going to be the solana slash wallet adapter dash wallets so these are the three for now hit enter all right that batch is done and there only should be one more for now which is just going to be a yarn add atlanta slash web3.js oh and i forgot one more we also need react hot there you go we're going to be adding more packages as we go but these are the ones that we're going to need for these js so let's get them right in let's go we're all set so come back to your pjs and let's import everything we're going to need at the top here i'm going to do an import toast comma toaster from react toast this is going to let us make little notifications let's say like the form was submitted so i want to set it up like that next thing i want to do is import token program id from solana spl token which is just one of the packages that we installed so that's where it's coming from okay and next we're gonna do import use wallet and you'll see like a suggestion here that's where we're getting it from the wallet adapter dash react cool and this is just standard things at the top here where we have the import react from react we can just get our usual states our usual hooks i mean which is just use state and use effect okay next thing i want to do is import solana and this one is actually going to come from utils folder which is going to get a const.js file which doesn't exist yet but i'm going to set it up and then we're going to make it right away so i'm going to hit save and let's go ahead now and make a utils folder and inside that utils folder we are going to have a constant beautiful so now we're working on the cons.js we got to set up a couple things in here as well which is going to be an import statement that's going to grab the cluster api url from the solana web3.js which we added with yarn then we also want to get the public key from there cool from there we want to import facebook underscore solana from the next thing you want to import before we do that we actually need to go into our target folder which is inside my facebook dashlana and look under idl we're going to need this idl so i'm going to click on it copy it and copy it into your utils folder so going into my utils i'm gonna go ahead and hit paste oh so we have the facebook underscore soul dot json in there so going to your cons.js let's import that we can say import facebook underscore solana or soul quotes dot forward slash facebook sold touches awesome all right so let's set up our cluster so what we could do for our cluster is export cons and then this should be capital actually cluster set that equal to the devnet because that's what we're going to be working on and then in the next line we're going to do an export const salana underscore host equals solana host equals this httpsapi.devnet.celana.com i'm just getting this from my facebook soulful cool and i think that's actually should be we should label this alana host underscore so solana host equals this next thing let's do is let's set up the stable pool program underscore id right i remember that public key that we imported from solana web 3 we're going to create a new public key you're going to put quotes here and remember that program id that we got at the very beginning when you saw me let's go ahead and grab that so that like that should be in my facebook soul under programs anchor we need to grab this little thing copy that add back to your const and that should go inside the public key from there we're just gonna do an export const and say that the stable pool idl is going to be equal to the facebook because that is the json file that we imported that's going to be equal to stable pool idl cool so that's our cons folder now we can head back to feed.js and now the solana host is going to make sense all right solano host is essentially this right here okay we're going to be using it soon so the next thing i want to do is the get program instance and this is going to come from something that doesn't exist just yet but we'll make so i'm gonna do from dot dot util slash get dash pro so like i said this doesn't exist yet but what we could do is go into our utils and let's get that set up all right so going to my utils i'm gonna make a new file and i'm gonna call it get program it's gonna do exactly what it sounds like and from here we can do an import star as anchor from the at project serum that we had cool there we're going to get a connection and we're going to get this from solano web 3 then we're going to import the wallet not connected error got a spell wallet now connected error from ad solana wallet adapter cool so like i said this should be salon adsolana wallet actually adapter dash base oh yeah there's a suggestion and it should be wallet not connected error cool all right remember the stuff we set up in cons let's import some of that today in here so sable pool idl from const and while we're here we should also get this stable underscore pool underscore program let me just go ahead you guys got that cool so let me just double check that's what i wrote yep stable pool program underscore id awesome next we're gonna set up a function i'm gonna say export function get program instance and it's gonna take two parameters connection wallet and we're just gonna set up a nice condition here that says if there is no wallet dot pub key i'm gonna throw a new wallet not connected error and then parentheses to call it cool awesome after that if statement we're going to do a const provider and set this equal to oops and set this equal to new right which we're getting from my provider inside the curly brackets of this provider we need to pass in connection wallet and anchor provider dot default options mate okay what's this oh and this actually shouldn't be curly bracket this should be parentheses there you go that's a lot better and put up one more comma here and then underneath that let's set up the idl and that's just going to be equal to what we set up at the const which is the stable pool ideal which i know is just the facebook underscore so jason awesome then let's set up the program id as well which is essentially just the address of the deployed program that we set up way in the beginning which is a stable pool program id okay then let's do a const program equal to new anchor dot dot program idl program id comma okay from there let's do a return program and hit save cool and with that get program is actually feed is more now i can go back into feed but that should be it for the initial setup all right continuing on with the feed.js go ahead and in your components folder let's create two new components that would be the create post.js as well as another file called justpost.js awesome so i'm just going to set up the component really quickly using rafs okay going back to feed now that they exist we can import them by saying import create post from create post and then import post from post i want to come down and skip a line and then go ahead and write a variable called anchor so equal to require project serum slash anchor and then from that anchor variable we're going to deconstruct it by getting the bn from there and web3 from anchor okay next we're going to make a variable called utf8 and i'm going to say anchor dot utils bytes.3tf8 cool next thing i'm going to do is i want to destructure web3 and i want to get the system program okay and the last thing we'll do at the top will be make a variable called default accounts and set it equal to token program set it equal to an object with the key of token program and the value of token program id which we got from solana spl token next i want to set up this clock here which is going to be anchor dot web3 dot sis bar clock pub key awesome last key that i'm going to make here is a system program which has the value of system program which we're getting from web3 dot program id amazing so like i said feed is going to be a very dense component there's going to be a couple different functions on here that we're going to need to set up because it holds a lot of the logic we're gonna do today so one of the first ones one of the first functions i want to make is a function called get all posts so this function like i said it's called get all posts it does exactly what it sounds like when in facebook we want to be able to grab all the posts we made and remember all these are going to be and if you remember in our lib.rs we have a function that creates posts what we need to do now after we create them is to get all of them so that's the job of this function so we're going to make it a synchronous and we're going to do a try catch and we're going to have a try here catch which will just be error console.error actually and then pass in cool but in the try that's going to be the important part here we're going to do a cons post data because every post that i get i want to store it in a variable and i want to say await program count program.account.postcount.org essentially we're going to go into the program and get all we're going to go into the program access the account and then access the post account the post accounts which essentially just getting all the posts so that's what we're going to do with that from there i want to take my variable posts data and do a dot sort okay inside of that sort we'll have an arrow function which is going to have a b so that we can sort all the posts by time and to do that i need to access the post time turn that to a number that we can easily use and then put minus a dot account.post time to number amazing all right so setting up the sort like this we'll sort it by the post time okay cool it's over so now that then we just need to do a set posts and pass in that post data which will be the sorted post cool save that and that's the get all posts awesome next function we're going to make let's make the saved post function so coming down to line 38 i'm going to say const save post equal to an asynchronous function once again and inside so if you think about it when you're on facebook you're writing up your post you're gonna need to save the post to the actual app itself this function is going to handle that so one of the first things that we need to do is get the program the program address all right so to do that i want to set up a let state sign that's essentially what we want to get so that's what i'm going to call it so i'm going to say await anchor dot three dot public oops public key dot find program address like i said we want to forget the program address of the state parentheses here and i'm just going to do i'm just going to encode it with utf8 code state because that's what we're looking for go ahead and do a comma and you also want to get dot program id okay underneath that closing parenthesis let's set up a variable called state info which i'm going to use in a second and all this is doing is getting the state address from our program this is just a variable that i'm going to use and i'm going to use it in this try catch that i'm going to set up and in this try catch i'm going to do i'm going to take my state info variant and set it equal to an await program.account.statecount.fetch state signing let's go cool all this is doing is fetching the state and storing it in a variable state info from there in the catch let's do a program.rpc.createstate so if you remember what you guys did with kazi if you look at lib.rs we are going to call that create state function and that makes sense because if if we're doing this and we don't have a state we should create one so we're going to do rpc.createstate and pass in these parameters which is just going to be key accounts it's going to be have the value of an object so the state is going to be the state signer that we set up before and the authority is going to be the wallet dot public key not the anchor wallet dot public key just the wallet the public key okay this should actually be lowercase as well cool and we also want to spread out the rest of the default accounts okay and let's do a return awesome cool so now we're out of that try catch block in the next line but still in the save post function we want to do a let post signer all right it's going to be similar to what we did with the state signer this time we're going to be getting the posts so we're going to set that equal to await anchor dot web 3 publicly then this one is the web 3. public key dot find program address and again very similar to the last time which is just utf8 dot code uh this time we're looking for a post oops in code this time we want to put post here comma state info post dot to array buffer be comma then there's a comma here enter and we also want to do something similar like program dot program so that's the post signer set up another try catch block okay so now that we have the post signer we can actually fetch the state that we want so we can do await that program dot account dot post dot fetch and then yeah so what we're going to be fetching is what we got with the post sign cool then in the catch this is going to update the state which is thisprogram.rpc.com text name url and also pass in the object of the account which has a value object which has the state signer post post and again this isn't making any sense to you that's okay as we keep doing this over and over you're going to notice start to notice patterns and it's going to start to click real soon so authority is going to be the same as before which is wallet.publicky hit comma and then we do that default cool so now let's update our local posts so i'm going to say set posts comma weight program count dot post count dot all to grab all of those post accounts cool and that should be the save post cool so if you're still watching this that was the fun amazing solana stuff time to go to our usual bread and butter of the jsx of the feed component and just to remind you this is the feed of the facebook right all the posts that you see so in this return i'm just going to clean it up a bit and for the div let's give it our classic name of style awesome all right so that's the outer div we want to do next is remember the toast that we imported we can get toaster now and this is selfclosing and the attributes that it has is position bottom left that's where i want it and then we want the reverse equal to false okay so now that our toaster is set up now that those are set up next line we want to set up another div this one doesn't need a class name because we're gonna do some conditional rendering here so i'm gonna make my curly black brackets and i'm gonna say again this variable doesn't exist yet but if loading is true what we want to happen is we should have a div and we should have this little like loading text that comes up say if loading is true we should see the loading text okay i'm going to do the colon here because if loading is false then there's nothing loading we should just see you should just see a div that has the create post component so i'm just going to set it up and we're actually importing it i believe we're already importing it so it does exist we're just going to be passing down a couple of things as props so we want to do save post equals save post all posts equals equals get all post and remember the name and you also want the url right because there should be a name and the picture url associated with the post that's not all we should also be able to map through posts do a post map and for every single post in that array we should make a post component which we also set up okay and each post component is gonna have these props passed in which is gonna be post equals post.account post equals post.account view detail equal to get comments on post we need a create comment equals save comment and key equals post countdown index and of course color pause the index then again we also want to pass every single name so we can associate it with the post then we're going to do url equals eu okay closing div parentheses closing bracket dip cool so that should be it for the front and that should be it for the jsx next let's do the styling and the styling is going to be all the way at the top here okay and the styling for this isn't intensive at all it's just gonna be our wrapper which will have a flex one oops flex one nope not that with two one dash one cool and again loading doesn't exist yet so let's set up our states so what we can do is take advantage of our use date and at the top underneath our style we can do a cons loading and set loading is equal to use state true then we can do a const posts comma set post and set that equal to use state all right cool all right so that is the styling and the jsx and we also set up the use date cool so let's hop into the create post component that we made and one thing we actually need to do is stop your terminal and let's just get yarn let's just add another package which is just gonna be a yarn add react dash icons all right because for the create post we're gonna be using a couple icons from there cool once that's done we have react icons now so what we can do is come to the top here and let's get started so the first thing we can do is set up our hook which is just going to be just use state for a create post nice and let's also import image from next image and let's import all the icons that i want to use which is just the bs file image fill comma bs fill camera video react icons slash bs cool then there's another react icon not from bs but fi which is just fi refresh cw this little refresh symbol that we're going to use to refresh our posts so we can see the updated comments so we can do quotes react icons slash fi all right so that's going to be all the imports that we're going to need for create post i'm going to go ahead and hit and let's work out the jsx so cleaning up the div can you guys guess what would be the class name for this you guys got it right exactly it is style.wrapper awesome after style that wrapper i don't think you guys will be able to guess it but we should have a some sort of form container because this is the component that's gonna let a user create a post so it should be a form but the first thing we need to do first is get the image let's get the image good thing we already imported it because the next step is just to add the source which is going to equal the url and we can add the prop which is just quotes profile okay from there we have class name of this image is style dot profile image let's give it a height width kind of similar what we did before with the last image which is just height of 40 with the four all right so we got the form let's give the form a class name the forms class name is gonna be style.style.form and the very first thing in this form is an input what's going to be selfclosing let's work on the attributes which will just be value equals input which doesn't exist just yet then we have and change equal to event set input event dot dot value basically whatever i type in the input field is going to then update the input state so if i type h updating the state unchanged e updating the input state now it says a g all right and so forth cool so now the function's set up then we can have the class name for this input field which will be style.input it'll be a good idea to put it in the bracket so let's do style.input and there's a placeholder which you know what if you guys use facebook at all it's that little cute message that says what's on your mind what's on your mind hassam so if some there's assam's watching this what's on your mind okay cool so that's the input field the only thing we need now is a button which is essentially just submitting the post and this can actually just be self closing style dot hidden submit submit and we're going to have an on click and it's going to run a function called handle submit which we're going to be making soon cool cool i'm going to take a moment to stop right here because i want to set up the state as well as the function that we're going to be making so let's just set up the state really quickly so come down at the top here and i'll just say const array input comma set input now it exists so we can say equals use state quotes and then you can also set the function which is the handle submit one this should be asynchronous with the event and we want to do an event.prevent default because anytime we submit a form it's actually going to refresh the page and you don't want to do that when working with states because it's going to clear them so we don't want the refresh so we do prevent default and anytime we press submit we should clear the input field so we have to do a set input 2 and then we're going to do an await save post cool amazing and now that i'm looking at this i think i'm forgetting one thing which is actually a form container so in between the wrapper and the image let's make another div here and this is our should be our form container that should be its own form container and don't forget to put styled up container if you want to have your tailwind working and we can take this little guy and put it right here okay which means we can actually shift it over one nice okay cool this is making more sense now and underneath this div we want to make an actions container right so the actions would be that little part of facebook where it says live video photos video or a refresh post button so we want to set that up by making a div and i said earlier it's going to be class name style dot actions contain okay we have a div class name do a style dot action and here we go let's start using our react icons in here we're going to do the bs fill camera video that's a mouthful then do a class name of style dot video cam icon and so nice okay and then in the very next line we want actually another div here and that div is responsible for being the title so give it the appropriate name style dot action button title okay you essentially want to just repeat this process but have different things so i'm going to copy this and paste it twice okay but let's make sure let's be sure to you know mess me around with the content here instead of having bs video camera fill what we want to have is bss file image fill and this instead of video cam icon let's do photo icon and instead of live video this should actually say photo slash video well i'm happy with that going on to the next and final action button this should just be the fi one which is fi refresh cw change the name of the icon to refresh icon fresh icon and then we have a style the action button title with refresh posts nice okay and then it should be closing div closing div closing okay cool all that's left now is to do a bunch of the styling this one has a lot more styling than the previous ones so bear with me so coming at the top here i'm gonna say const style equals object and let's define all the styles that we need all right first one start from top down which is just a wrapper i'm gonna move through these fairly quickly it's going to be with 100 flex and then we do mt dash 1 rem and if you're ever confused at all about what i'm writing here there is actually documentation on a conversion of what tailwind css is to regular css and that definitely helped me a lot when i first started doing tailwind so be sure to check that out so there's flex column i want to do a rounded dash let's see let's do 0.6 on the m and pg dash let me see what the color is for this again it's going to be hashtag two five two five two six again like three did before p two p t four p b zero and shadow dash zero pixels five pixels seven pixels negative seven tools and an rgb a oh zero zero zero zero point seventy five cool told you there's gonna be a lot so this is just the wrapper i'm gonna hit comma and now i'm gonna select moving through these faster be sure to pause the video if you ever need to stop so i'm also going to do an alt c here so you can see it on my screen so next thing i'm going to do is the form container which is just going to be flex pb3 and b2 border dash b the border of this color okay profile image rounded full object cover for the image for the form itself flex1 and you want to do a item center on that followed by the input which would be something like this okay we then have a hidden submit class and that one's actually pretty easy it's just going to be invisible okay now let's dial our actions container which looks just like that yep actions container followed by the actions button which has a lot more why is it the whole thing oh i think i highlighted again followed by the actions button which contains a lot more css this we got the action button title and the all the icons are going to have very similar styling they're just going to have a text read text green text blue for the respective ones so hold on cool and that should be it for the style and that's the create post component awesome all right so one of the things that we need to do still is accept the props that we're passing down and destructure them so if you remember going back to our feed scrolling all the way down we have save posts get out posts name and url so that's what we're gonna do structure so i'm gonna get save post get all posts i think it's like that yep name and url awesome we'll go ahead and hit save and let's just actually take a look what this would look like so to do that we want to go back to feed and remember how we have sorry go back to index and remember how we have the register to false let's go see what it looks like when i set it to true but of course don't forget to magnify that compiling there is an error okay it looks like we got an error oh yeah so going in my const it's actually going to be curly bracket should be just regular parentheses so let's see if it likes that okay i'm going to try it again okay compiling and see if there's any errors with the code we have so far it doesn't like the solana web3.js of course we've got another error expected from god string literal let's take a look it's in get program okay it's right here you just have to add it from here why don't you guys tell me about it it's gonna be a front let's save this can you compile again okay this one is it coming from the same spot acquire stack from facebook okay this looks like something we already fixed so let's see if i refresh it there we go beautiful cool so like i was saying earlier going back to the index.js remember that if we are registered and it's false we see this beautiful sign up screen but if it's true we should see field so let's we haven't got take a chance to look at all the code we've written so let's see if this breaks our code so i'm gonna hit save what does our app have to say okay looks like nothing which is interesting let's take a look let's do a quick inspect element let's see what's going on in here oh it's right here this is the home feed and it's loading okay i'm going to the feed.js this is all the style for it i guess in the meantime guys let's take out the this is the home feed and i believe we're seeing loading because we're setting loading to true but if it was false let's see what happens now there we go something url equals url it's undefined yep that would be smart we should actually go to the feed and accept those props and destruction cool so let's actually get the name and url that we're passing in name url restructure them first name url and i believe we should be passing one more thing in here let's see we should be passing name that's gonna equal name and is going to equal url still url is not defined let's see should be i'll figure that in a second one thing that we also need to add is a connected prop so going to feed i'm going to add connected equals wallet.connected all right and it's not capital w lowercase and then if you're wondering where wallet is coming from we need to go up under our states and let's use oh and if you're wondering where wallet is coming from we also need to import a couple more things in the index now that i remember it let's do that cool and i added this by accident when i wrote capital wallet we don't need this what we do need though is to import use wallet and we want to get it from solano wallet adapter react and once we do get that this is where wallet is coming from we can say const wallet is equal to use awesome so now while it exists if we scroll down it makes more sense and we're going to get url is undefined let's just temporarily put a variable here or actually it's going to say url is undefined let's go to feed it's also passed down connected okay this is good because now we're getting rid of all the bugs before we move forward image is missing a source property now where's this image coming from nope not that one where's this coming from well that's typo over there okay saving it says image is missing source property it's probably because there is no url so let's just get a temporary one i have one in my notes it's just gonna be this make sure it's in quotes i'm gonna hit save there we go awesome so it works this is exactly what we should see and there's this nice hover effect to it too cool all right guys so now we had our little bug fix break let's work on the post component so the first thing i want to do is at the top here where it says import react from react we can just say use state comma use effect and let's also import the image from next image and there's also a couple of react icons that i'd like to get that i have ready for you guys it's going to be the bi like for reg common alt ri share forward line and fi refresh cw awesome okay cool then there's also going to be a comment section import oh sorry then there's going to be a component called comment section which doesn't exist yet so let's go ahead and just make it blank for now i'm going to say new file say comment section js okay there it is rfac okay so we have the comments section now i can import it okay there it is cool all right and then before we go forward we also have to download javascript time go it's another package that we're gonna need so that's going to be an error because i'm stopping the terminal i'm going to do a yarn add javascript dash time dash or go yep so i'm going to wait for this to install and we'll be right back cool so now we have that package installed we need to what we need to do next is import i'll go from javascript time ago then we also want to import en from same place but this time forward slash local slash pn.json cool and if you miss our beautiful page you can just go into terminal and just say netlifedev again all right while that's loading add default locale and then within here you can just type en to pass in pass it in there we go next we can make a variable call it const time go and then set it equal to a new instance of time and inside the parentheses here we want to say en us awesome okay we should be able to refresh our page now there you go cool so remember how we imported you state go into your function based component here and let's just set up our use states which is going to simply just be these two the first one is going to be is the comments section opened and set is common section open the default will be set to false and the next one is going to be clients comments and then set comments because we want to be updating the comments of each post okay we will be adding use effect much later but for now it's not nearly necessary what i do want to do next is create a function and that's going to be called clock to date string and it's going to take oops and it's going to be a function that takes in a timestamp as the parameter and here we can play with this variable that we made and we can say time ago dot format new date and then we can pass in their timestamp dot to number times 1000 quotes twitter twitter dash now okay and then within the same function you want to do cons post detail it's a variable that's gonna lead kant's postdetail which is going to be an asynchronous function and con's result equals wait post index post and then we want to do a set comments it's gonna just wait that result cool okay and if you remember inside feed we have a post component that's going to be created every for every single post and we're passing in post equals post dot account so we need to be do it this is in line 24 post that index comma post we need to be accepting all these props so that's going to be post detail create comment so i'm going to start accepting those props and destructuring them it's going to be post view detail let's see what else great comment key name url create comment key name and i believe that's all it's looking good awesome so there's also more functions for this but i think this is good for now we have our function to convert our timestamp and format it all right i guess the next thing we should do is let's work on the front end of the post component so i'm gonna clean it up and the class name is going to be style dot okay there we're gonna have another div within that which is just gonna be the post publisher so it's gonna have that name style dot post publisher and inside it's going to contain an image which will be selfclosing inside that image it's going to have a source property post dot poster url okay then we have the class name which will be styled at avatar that's what this image is supposed to be every time you comment on a post you should see your avatar right on the left side of it and that's what we're setting up right now and the height of it is going to be 44 with the width equaling to 44 as well last but not least we need an alt which is just going to be publishers profile makes sense cool directly following the image in the next line we have another div this one's going to be called the publisher details this is going to include who's ever leaving the comment and the time that they left it so that's why it's going to have a class name of style dot publish your details publisher okay and it's just going to attain all the dips for each one which is going to be class style dot name which will contain you guessed it the posts poster name all right next line what we need here is the timestamp style.timestamp which will make use of that function that we just created which is the clock to date string and we pass in the post time cool which will format it to how we want it to look on the comments nice all right so after you do that we have closing div closing div closing div then in here in between these two we're gonna have another div no class name but with the div inside of this though we'll have a class name which is just gonna be style dot text all right and within it it's gonna be the post doc yeah now i was saying comments earlier all this stuff should be the posters details not the commenter so like when you make a post which will show up on the feed right here let's be a nice square you should see a little profile picture with whoever made that post and the time set of when it happened as well as their name so that's what we're setting up now this right here div is controlling what the content of said post cool and then from there we'll have a div which is in charge of holding the reactions so it's going to be div class name style dot reactions cool these are where all our icons are going to come in we're going to have another div that's going to hold the reaction item itself style dot reaction i know and this one's going to have the by like with some text that accompanies it which will be class name style dot reactions sex and we like inside so it's gonna be a similar pattern with the other reaction so i'm just gonna fast forward get all the reaction items to typing them all out so make sure you go out of this div and still inside reactions container and then you can add everything else okay the key point that i want to drive home is that this specific has it has the on click of is comment section opened and whatever it is before if it's true it will switch it to the opposite which is false if it's false this knot will switch it to true okay that's all that's happening there and it's gonna have the five reg common alt icon as well as the comment from there we also have the another reaction item of the fi refresh cw which is to refresh the post itself so it will refresh the comments itself on the post cool and then the last thing here in between these two divs the last thing we need to write is some conditional rendering of is comment section open if that is true we should see the comments section which is again the component that we set up earlier and the comment section all it is if you remember the posts on facebook there's gonna be a little box underneath it which is gonna hold all the comments we're gonna make a component for that and pass in certain props which is just gonna be the actual comments that we have itself okay so after write comments equals comments next thing we can do is set up the view detail that also function nope the view detail is going to equal the view detail okay then we have the name is going to be the name and the url is going to be the url awesome all right view detail is something that we're getting from post and the create comment and key haven't been sorry not key i actually don't need key here now i'm thinking about it but as i was saying the create comment hasn't been set up yet okay with that said that should be the post front end and one of the functions cool all right guys now that we have our post component done i want to start being able to test all this functionality but before we do that we're going to need to set up our contacts folder so what i'll do is i'm going to make a new folder and i'll just call it context all right because we're going to be using the context api of react so that any variable or function that we're creating there can be used anywhere in my app because it's global so in the context folder let's make a new file and let's say it is the use wallet balance js okay from there there is a couple imports that we have to do which is going to be import use wallet from at salon wallet adapter react hope these aren't the suggestions adapter react boom cool next line import we're going to import something from solana web 3.js which is just going to be lan ports per soul and it's going to be from solano web 3.js next step let's import all the react hooks that we're going to use for this file which is going to be create context use the context we create and use effect and use state and it's all going to be from react cool and we also need a t for create context nice okay we're going to do another import which is import star as anchor from at project serum slash anchor import solana underscore post from the utils slash cons cool from here let's do a cons balance context equals create context and we'll pass in no cool from there let's do a cons connection and the connection is going to equal new anchor dot web3.connection so lana underscore host okay then we can do an export default function use wallet balance all right and again before i continue on this function this is getting the connection of the devnet and storing into the variable and then on this next line here we're actually creating a function called use wallet balance which believe is going to make a variable balance and we're going to set that equal to our use context we're going to be using this function later on in our front end of the header so that we can see that while that user's wallets balance you can pass in balance contacts within here cool all right now that's done we're just going to return the balance and the set balance itself okay cool now for the important part this one is for actually connecting the user's wallet i'm going to say the const wallet balance provider which is an important part of the constant the context it's going to equal arrow function and inside the parentheses here object and put in children cool so that's the provider next thing you want to do is return return the balance context dot provider and in between it's actually going to take in children and within the opening tag and let me just fix this up real quick and then with the opening tag of the first provider we're gonna put value equals curly bracket and then square bracket anything i put in between these curly brackets is going to be global throughout my whole app so what i want to do is put balance and sit down let me explain that again so everything that i put in between these curly brackets is going to be global anywhere inside my application okay so now we set up the provider one important step that we have to do is go into your pages and then go into underscoreapp.js and let's actually set up our provider and wrap it around our app okay let's import it first and say import wallet balance provider from dot context forward slash use wallet balance so now we imported the provider all we have to do now is wrap it around our app so i'm just going to format it like so enter tab put this guy down here and let's format this so what i want to do is call that wallet balance provider and in between simply place the app cool so now that you wrap the provider around our app anything we put in value becomes global so going back into our context let's set up the rest of the wall the balance provider which at the top here we can say const const wallet is going to equal use wallet and use while all it does is uses the user's wall and sets it in a variable then we're going to balance set balance equals use state because remember this is for the wallet connection the other one is for the front end so you got to spell balance correctly all right we're almost done with this guys let's do a simple use effect which again takes an arrow function and within that function you're just going to do a semicolon async semicolon parentheses async arrow function if wallet question mark dot public key i'm going to do a const balanced equals await connection dot get balance parentheses wallet dot public key again it's coming from this variable we're grabbing the publicly from there and setting it equal to getting the we're getting the wallets public key getting the balance of that and setting it equal to our balance variable which we can then do set balance pass in balance the variable then do this four slash and do the lamb parts per sole okay once that's done i'm gonna put parentheses here then do a comma and let's set up the dependency module and put pass in the wallet and the connection because that's the dependencies that i want to look out for because if the wallet changes or if the connection changes at all then we should run the use effect once again okay that said whole thing you need to do now is pass in the balance so now it's not grayed out anymore comma set balance and make those two things global okay cool now that's done that should be the use wallet balance all right so now that our user's wallet balance is done i set this up because it's going to help us create our next component so our next component is going to be the header component so let's go ahead in their components folder new file header.js cool test audio all right we're good cool header.js inside header it's pretty standard rf rafce boom and if you remember where's header located in terms of our app you have to look no further than the feed.js sorry not the feed.js look no further than the index.js so coming up here we have the header we are safe to import it now so we can say import header from components header cool so now we have the header component in there as well and you can see it's over here so going to the header.js let's set up all the imports that we're going to need one thing i know for sure is that we're going to need our assets folder which we can also provide to you you guys won't have this but these are the images that we're going to be using for i'm going to copy it into here okay cool and at the top here let's at the top here let's get our react hooks that we'll need which is just going to be used for this component and in the next line let's import image from next okay okay next up we have a couple different react icons we're going to use i'm just going to speed through them it's just going to be these over here from here i'm going to do another import and let's get the wallet multi button right and that's going to come from slash wallet slash oops forward dash dash ui cool that's the wallet multi button i think i spelled it right and then if we do that we're also going to need to require we're going to need to require at solana wallet adapter react ui flash styles that's css cool okay from there let's get the solana logo from our assets folder excellent logo from assets slash soul png okay from there we could do import use wallet balance and this is actually what we set up literally a couple minutes ago which is just the context slash use while of balance this is our custom hook that we set up inside our contacts here so that we don't have to import use context to use it in our header js all right cool at the top here i'm going to say balance equals use wallet balance because i'm going to get i'm just destructuring balance from use while balance and then from there let's set up some front end setting it up i'm going to do a class name and i feel like i can hear you guys predicting on what the name of this class is it's going to be style.wrapper yes you're right okay inside that div i want to have a header remember the header is this top part of facebook there's like a left side and then there's the right side left side should have the logo so what i'll do is i'll call it style.headerleft and then inside that div we'll have the image that we're getting from next.js which is going to let us use which we can name it classname style.facebook.com okay and the source it's gonna be this link and remember we set that up in the next js config it's gonna be this long one right here which essentially it's just the facebook logo it's gonna equal fb logo height is just going to be 30 and typically the width will be the same so it will also be 30. cool so that's the image in the next line we need another div in the next line we're going to need another div because in the middle of the header you should have some sort of search container so that's exactly what i'll call it style dots search container okay let's use one of our icons which is the little search magnifying thing and it will have input field where the type is going to equal text oops text and the class name is going to equal style dot search input with placeholder going to be search facebook okay cool that's the input closing closing div and here we're gonna have a couple other things which is gonna be the div for the header center part so i'm gonna give it a class name of style dot header center container style dot header center wrapper style dot center icon empty cool and inside here it's going to be an ai fill home and this one will actually have a class name of its own oops this one will have a class name of its own which is going to be class name style dot center nab icon amazing so it should be a closing div there and now we have to make the rest of the icon which is going to be very similar so i'm going to copy this and paste it a couple times i think we need to do this three times so that's one two three we do got to change is the type of icon that we're seeing so instead of a i feel home it should actually be bs display for this and the class name should be the same next is going to be the group two line and this one's gonna be the s i facebook gaming okay closing div closing with cool and since we did the header left the headers let's finally do the header right so class name style.header right so this header right it's gonna have some conditional rendering as well i'm just gonna be named and parentheses if name exists then we wanna do a d that shows that user's name if you log in it would be nice to see the user that's logged in if you're not logged in you shouldn't see it at all so div class name it's going to be oops div class name this one's a little special it's going to have backticks in it with a dollar sign a template literal which is style dot user info and another dollar sign here for the template literal again and then we're gonna do style dot header right okay cool looks good so far let's add an image and this image should contain our profile picture that we've been using this whole time and don't worry about godzilla because it wants a source property for the source all we need to do is use that url again nonempty expression oh no it's fine cool so it's fine source equals url we're good to go and let's just give that image a nice height of 20 pixels and a width of the same length cool give it a nice class name of style user image and for the alt give it the same name of user space image cool and we're not done yet because along with the image we also want to have the user's name which should be dynamic so in between these divs we can put class name oops not like that in between these divs we can give it a class name of style.username and in between it just pass in name and that should actually be in curly brackets cool and yeah so if the user has a name then we're gonna render this div with the user's image and their name that they have all right so after that we can use that wallet multi button we passed in then we're going to have a div with the class name of balance container and this one's special too because it has backticks because we're going to have a template literal and it's going to be style dot balance container and then also another template liberal style dot header but i believe yeah awesome and then when in this div it should also have an image and it's just going to contain a nice solana logo because i want a salon logo and then how much solano we have and then how much soul we have so let's give this image class name of style dot balance icon nsrc equal to solana logo which i set up in the import statements up above height 20 pixels with 20. okay then i'm going to say alt and it's just solana very cool that's the image lastly we just need to have this div here which is going to show us how much of soul how much soul do we actually have so i'll call this style balanced text which will contain curly brac curly brackets let's use that balance that we got from our custom hook balance dot to fit two and whatever that amount comes out to and then let's put soul here so it would say oh you have two point three three three so for example okay and it should be closing dave closing awesome so that's the header and we should get error because there's no styles yet so let's set up the styles yep there's the error but your hero is coming i'm gonna make the style object cool and there's a lot of css for this so i'm going to be moving fairly quickly feel free to pause the video to not miss a thing for the wrapper i'm going to have some flex properties item center with full height with 4 rem justify around px1 rem and all of this stuff i can't read out all the css or this video will be 10 hours long so let's keep on right next css header left which is that main div that holds all the stuff that we need on the left side of the header which is pretty much just the logo this is what we want to add to it some flex with the justify center and a gap of 0.6 rem okay next up we're actually styling that facebook logo giving it item center and object contain i'm going to do a two for one next which is going to be the search container and the search input okay cool then we got a header center container which has just these three flex one flex item center justify center h full and head center wrapper which has pretty much similar things except for the py dash 2. another two it's gonna be center nav icon has a cursor pointer to it so that whenever we hover over it it's gonna have a different background and it's gonna have a rounded of 10 pixels here's the center nav icon those are the all the icons inside that container it's gonna be all of these guys cool from there we're gonna do the header and the header right button this is for all the user info which is pretty selfexplanatory this is the background when i hover over it this will be the new background this has a bold font text color black format the image like and the rest of the css is for the balance which is just going to be bounce container bounce icon balance text so i've hit save let's hope it all matches up even if it doesn't check render method of header that's interesting oh because name is not defined we can't forget to pass that in so i'm going to take name and url and if we do that we also have to go to index and pass it in as well just double check real quick and if we pass that down we have to pass it down in index as well so i'm going to go to name going to equal name and url simply cool okay and let's go back to that component which was and save this expected a string let's take a look this is a capital u that might not fix it and might but that definitely shouldn't be a capital e let's hit save and there it is there is our wonderful header with how much soul which should just be zero by default and then we can select the wallet too awesome that looks good to me okay cool so that's the header.js is there anything else i need no i think we're good that's the mediaheader.js all right guys this would be a good point to create the rest of our contacts what we're going to need is a wallet connection provider so we can start selecting the wallet that we want so go to your contacts folder i'm going to say new file and i'll literally call this one wallet connection provide.js cool now that you're in here let's import a couple things like the connection provider and we also need a wallet provider as well let's do it from solana slash wallet adapter dash cool so we want the connection provider and the wallet provider from the cell now wallet adapter react from there there's a couple other providers that we need well just one more really which is just the wallet model provider and that's going to come from the solana wall adapter react ui and let's also import the phantom wallet adapter because i'm going to be using my phantom wallet for this project at salona slash wallet adapter dash wallets finally using that package and we're actually gonna use a used memory let's actually use the use memo hook from react awesome so that's pretty much all the imports let's actually set up the provider itself which is going to be const wallet connection provider equal to children oops not capital c children and inside the provider we're going to need to have a return and remember all those providers that we did import wrap them up in here so the first one is the connection provider this one actually has a attribute of an endpoint which is just going to equal endpoint and then within that provider we have the wallet and inside of that we have wallets equals wallets and auto then let's set up our modal so let's do the wallet modal provider which in between them it's going to take children and we can't forget to do an export connection provider hit save don't forget to do an export default wallet connection provider so at the top here let's set up where endpoint is so it's going to be variable that's going to equal that use memo that we were to use use memo we're going to have an arrow function we're going to have an anonymous function that just has quotes to the https colon slash api dot deb and solana.com and comma array cool that's the end point next we gotta set up the wallets that we will use which will again equal use memo another anonymous function here and inside is an array with new phantom wallet adapter so that's where that comes in open the parentheses outside that array you need the comma and then another one cool this is looking good i think that's it for the wallet connection provider of course if we're going to set up a provider like this we need to wrap our app around it so going back to the underscore app js one thing i want to do is at the top import dynamic from next slash dynamic oops it would help to spell this correctly there you go and essentially i'm getting dynamics so that i can split my code into dynamic chunks let's do a const wallet connection pro 5 equals that dynamic parentheses and inside those parentheses we have functioning with an import parenthesis of dot dot four slash contacts slash wallet connection provider cool and just take out that little c that i have there wallet connection provider equals this we're importing that context from the provider and i want to do is wrap this whole thing in that so enter let's type it in wallet connection provider okay copying everything inside here pasting it save refresh all right let's see what's going on so it's back in here let's do an inspect element see what's going everything seems to be fine so far camera just died again all right so it's loaded in it looks like there's no real errors let me just make this bigger inspect element all right yeah no big errors which means if we did everything right i should be able to click select wallet and there it is phantom is detected i do have phantom installed that's the wallet that we're going to be using and if i hit click enter my password new wallet pads activity request proof of direction sure hey there we go nice this is super cool because before we were just using metamask authentication to log in and we just started using morales now we're experimenting we're working on rust and we have phantom wallets set setup too which is cool so now just to move forward let's update our signup.js let's update our signup.js and let's make a function called create user okay const create user is going to be an asynchronous type of function and it's going to take an event and all it's going to do for now is going to be a set registered to true right because after we sign up we should be able to create a user and once we do create that user we should see the feed instead of the signup page okay and what we want to do with this function is put it onto the so going back to the form we should have an on submit here on submit equals create user all right so it's going to equal that function it's going to call it that hit save and we should also go back to the index because remember how we set a default to true we can set this back to false hitting refresh here after setting this to false so it should lead me to the sign up page cool and it's wanting me it wants me to sign up with it wants me to sign in with my phantom wallet again so let's just unlock it cool so let's test out if the sign up works and if this works we should get to the feed so i'm going to say the name is lance and the profile image url oh don't know what happened one second again so we're back in the sign up page and i just want to double check something before moving on going to sign up again i do remember for there's two input fields this one was named and yes this one should be url so i'm gonna hit save which will probably reload this once that's done i think we're good to go to actually sign up and see if this works there it is there's the url that was passed down and for the name it's just going to be lance so i'm going to click sign up which will take us to this point because of the conditional rendering and now what we need to do is make a post we did all this code to create a post let's see if it works so i'm going to say hello world and be very basic ah okay so we have a uft8 is not defined i just remembered i think it's because i spelled it wrong try this again i'm gonna say hello world hit enter oh now it says program is not defined all right yep this is why we test stuff running into some bugs saying that program is not defined that's probably because if you go to my feed there's a couple of things we can set up now so i can say cons wallet is going to equal use and that's just coming from an import at the top and then i'm going to do a const connection equal new anchor dot web three dot connection and this makes more sense why this was grayed out we also i forgot to do this we're gonna do okay and then from there now we can define program by saying khan's program tools get program instance connection comma wallet cool so we're gonna get the actual rpc and set that equal to a variable called program cool so there you go program is now defined we shouldn't see that error again let's see what other bugs there are hello world take two or take three ah default accounts is not defined that's why this should be default accounts with s awesome let's try this again lens sign up let's make a post hello world oh it's gonna have to ask me to sign which is pretty cool okay so we want to improve the transaction because oh all right i'm an idiot guys i forgot i'm trying to create a post without any solana myself so let's have actually go to the faucet and get some salon we can actually get solana from going into solana faucet.com so i'm gonna go into there so this is the solana faucet where we can actually get tests uh it's a lot like tests alana for our apps that we can use so we're gonna need to enter our salad account address and one cool way to get your account address is remember those providers that we set up you can go ahead and click this and you can actually copy the address isn't that awesome so go to self faucet in the end fill just paste it in there and i'll just airdrop myself so let's see how much salon i have now we got eight you know what i think i'll be cool with eight and go back on to here and let me just refresh this to make sure i have the right solana right oops click disconnect cool so now we refreshed it and you can see it's updated it's accurate i have a solana i have eight soul so i'm gonna go put in my name again to sign up and then let's try this bad boy out okay that's a good sign we want to approve transaction i'm going to hit approve nothing immediate so i just want to double check that so if you click refresh post it should actually refresh it and get all posts again so coming down to refresh post oh that makes a lot of sense we also need to have an on click here we got something program the rpc.createpost is not a function oh i see i think i know the issue let's send feed in line 82 and we can fix it by putting a lowercase up nice alright so we just recently passed in the get all posts because i want to see and i want to get this button working so that i can just constantly click this button instead of refreshing the whole thing and signing up so what i'm going to have to do is go into here and do an on click and it's going to run the get all posts function once it's clicked so i'm gonna do this and do a get all posts i'm gonna hit save and just to double check is there anything going on at the moment okay no errors yet so i know that if i do this and i do get an error we're going to run it through so i'm going to say world you got the transaction ah get comments on post is not defined so let's double check what that is get comments on post this doesn't exist yet i haven't made this so for now let's just take it out i'll hit save cool let's just try this one more time and do again with plants so none of the common stuff should be working so that's why we're getting all these errors that's line 114 yeah this also doesn't exist yet we have we've only worked on the post things and that's what we want to test right now so i'll just comment that out as well am i using it nope cool nothing immediate is popping up that's from before save comment errors from before oh let's go there's an array okay we got accounts this is coming from my console and line 46 all right so just to make sure this these arrays are coming from my console of the posts in line 37 and i believe we have three posts we have three hello world so what i'll do next is let's close this console i'm gonna make this bigger let's see if a fresh post works and if not we're just gonna have to refresh the page okay i clicked it it wasn't doing anything so let's just refresh it so this is progress guys we're able to actually see the post in our console the next step is let's see if it can actually get populated now okay and nada refreshed it so i want to just see my console still empty oh it's empty again interesting right it's empty shot refresh post fresh post isn't running let's see if this on click is even working let me just do that now so let's see the refresh post should come from here but i'll post a console.log all right guys i want to check if this function is even running oh i got it so i refreshed it and it got the array with an extra hello world now interesting okay so it looks like we're actually getting the posts but there's nothing rendering we just need to add a return here because if we're gonna put curly brackets you're gonna need to have a return if we didn't have the curly brackets we can make it a nice oneliner and that doesn't need to return so if i said save how to compile this might take a second and we should get something new style is undefined all right so let's just do that really quick and let's work on the style for the post alright so that's going to be an important issue we just need to add the styling to our posts so what we can do is come to this line right here and let's just do a constant style equals that and the wrapper the most outer div is going to have all of this let me do a whole z cool yep with 100 mt one rem rounded 0.6 with this background color and a white text and p 0.4 am so that's the wrapper the next part and again i'm going to move in very this next part is the post publisher div which is going to be the next day inside it's just going to have a flex position relative and up center i'm going to do two for one and this one which is just the avatar it just has rounded full for the css and publish detail publisher details it will just have a flex on flex column and ml 0.5 rem next thing i want to do is let's set up the name and time stamp which is just going to be these two text small text small and text with that color speaking of text there should be css for it which is just going to be those two properties these two are pretty long it's going to be the reactions container and the reactions item which just has a border like so text that is 18 pixels flex justify evenly text of this color and a cursor pointer pin py1 here's the reaction item which is going to be we're just going to have flex proper flex of one atom center justify center and rounded 0.4 bm along with a nice hover effect with that background color cool last two are pretty simple and it's just gonna be the reactions text and the refresh icon so that looks a lot better we actually have some css for the post itself and after all that our phantom wants me to reconnect don't worry fandom i'll reconnect with you cool let's hit lance sign up okay getting post hey let's go finally look at that all my hello worlds that i set up they're finally showing up okay cool i think it's because i wasn't directly clicking the icon that might have been it or either the page was still loading but there we go we're able to get posts now now the real thing that we need to start working on is how can i start adding comments creating them and then getting all the comments right so i think that's the next thing i'm going to tackle but this is cool guys we can actually make posts for facebook and all these posts are being stored on the blockchain amazing cool so before i move on to creating comments one thing i'm noticing is there's no timestamp so i just want to double check that in my post component so scrolling down we're getting the timestamp from clock to date string but am i calling it yes i am so it's not returning anything let me just double check this function the first thing is the post detail it shouldn't actually be in the clock to date string should be its own thing and now that i'm seeing it i could make this a oneliner that's probably why it's not returning anything so if i hit save now hey there we go so 32 minutes ago 33 minutes go to 35 42 nice so we got the timestamps for it let's go ahead and start making the create comments functionality cool so one of the first things we have to do is hop into your facebook soul and go into your programs and go into your source in your source you're going to do a lib.rs before we can even create the function to create comments let's create the context and the structure of what a comment might look like so here we have the create state struct the struct for create post let's do one for comments and it's going to be this what kaz explained earlier is all going to apply for this one as well so at the bottom here first thing i'm going to do to start creating the create comment context we need to do a hashtag derive accounts just like what we did earlier and then from there we can do the pub struck now obstruct create comment and we're going to do this okay and then we're going to do info here then we can put the cool so now to carry on we need to authenticate the post account so to do that we're going to do a hashtag brackets account mutable say that it's mutable and for the seeds it's going to equal this array so i'm going to type this carefully it's going to be b post as ref then it's going to be comma post dot indexed dot sub b bytes dot as underscore ref parentheses and then the square bracket and then all i have to do next is a comma and bump awesome and then in the next line we have to do a pub post and set the value of that to be a count with the info comma post count comma there we go okay that's the first part of that from there we're gonna need to authenticate the comment account so to do that we must set it up like this again which will be the account parentheses here and there's going to be a couple of things in here which is going to be init let's get the seeds the common dot as ref comma and it's going to be similar to what we had set up over here so we're just gonna put the same thing which is just post dot indexed dot two underscore b square bytes parenthesis dot as underscore ref then we're gonna do a comma here's where it gets a little bit different this one should speed post dot comment underscore count dot 2 b bytes and then this should be inside the brackets of that as underscore wrap now what does it do so let's go here let's see if you can see the whole thing then it should be payer equals authority and space we have to determine the exact space in rest so it's going to be space is equal to the size of the comment account and then we also have to add the other stuff because i'm literally telling him that the space of the comment will be however long the text is so it's that length we could pull that here over along the username link plus the user url down which we set up at the top of this okay and then under this we have to do the pub comment there we go next i want to set up the authority which the authority this is the signer who paid the church the transaction fee so that's going to be set up hashtag count mute and next line that's all we're gonna need for the authority so we're gonna do pub authority signer okay let's do one for the system program so i'm gonna say pub system underscore program it's gonna be the unchecked account info okay then we have count this is for the token program so i'm going to do count this one will be constrained it's going to equal the token underscore program equal to end token it's essentially a check to make sure that the key of the program is the same and we have the id here just need to add the pub token program which will have the value of program info i believe token makes sense cool last one we just need to get set up the clock to save time which is going to be pub clock sis bar info cool and again if this is still not making sense to you don't worry we're going to have more and more videos in the future which will go more to each aspect of the programs in salon okay awesome but for now bear with me we're almost there so this is the structure for the comments all right so i'm gonna hit save all right so we finished the context and you're gonna see a couple errors because we need to create the structure of the comment okay and if you're wondering what that is you can think of it as an object with keys and values describing what in a comment account would have so that's going to be the commenter's name his url which is his profile picture and his public key these are all information that so let's create that comment account structure so to do that you can just say hashtag account bracket account and then from there we can say pub and let's define the structure so comments count cool so i'm basically saying every comment account will have a key of authority so i can say pub authority which is just the assigner address okay and it's going to have colon here it will also have a text key and here is going to have the value of whatever text we pass in in the create comment function which i'm going to do next okay then i need to know who is the commentary what is his name that's going to be important information commenter name string comma okay the commenter's url so we can get the nice profile picture along with the comment which i'll say string as well then from there we need let's get an index property in there and the type of that will be a u64 nope not u128 u64 okay and i would also like a post time because i need to keep track of that so this one's actually going to be i64 cost so that's the structure of the comment account okay hitting save and just gotta add comma here see let's say boom so no more squiggly lines pro comment account is in the scope now we so just to recap we created the context we have the structure of our comment account now we just need a function that's gonna create the comment itself okay so it's gonna go all the way to the top here where before we started creating structs to these functions these are all the functions should go i'm going to make another one so i'll say pub fn for function and this one will be create underscore comment now putting parentheses here because these are all the parameters that i want for this create comment and what we're going to pass in is the context that we to let them know you guys are going to be getting a comment so i'll say context create comment cool and now we also have to pass in the parameters because when you create a comment you're going to need to pass in a couple things and then add it to the structure itself so what i mean is for the text we're going to get text as a parameter we also have to define the type here so it's going to be a string we're also going to pass in the name of the person that is creating the comment so i'll say string as well commenters url their profile picture essentially and i think that's it for now and of course we're going to do this arrow here and let's talk about what the result of this function would look like so program result i believe it's like that so let's do it that post is going to be go to and mute ctx.accounts.post so if you're so this is what we need to do let the post be equal to this context.accounts.post if you're panicking about this little variable here you're gonna need to have the okay which we have and all the other functions and then i'll go away cool awesome so i'll just leave that for the very bottom but let's set up the rest of these variables so i want to say let comment equals and mute this one will be the ctx dot accounts dot comment okay and of course you're gonna need to have a semicolon on this okay cool hitting save that all goes away cool so remember how we made the comment account data structure of what it would look like now we're just going to add values to each of those things so if that makes sense to you you can move right along so down below here let's talk about the comment dot authority so what we want to do when we create a comment is for the value of the authority it should be the actual authority of the account that's leaving the comments so that to get that we can do ctx.accounts.authority and we'll pass in the key by doing dot key parentheses okay cool so now we need to set the text of the comment and the text will be whatever is passed in for the text so you can just say comment dot text equals text all right this isn't scary you guys have been following us this should be a piece of cake commenter underscore name we can do equals commenter underscore name all right so then we're gonna do a comment dot com enter underscore url because i believe that's how i named it equals common url right this is just the parameter that's best so then you do a comment dot index and the index is going to be based off the posts comment count smart how we do this because indexes start from zero onwards but the count starts from one so there'll be one ahead and we can use that as the index okay from there we can do a comment.post underscore time and that's just gonna be the ctx.accounts clock to get the time that unix underscore timestamp okay cool and of course if we're going to be using that index and then last but not least we also need to increase the post.comment count over here because otherwise every comment going forward would be at the same index right this fancy little trick is not going to work so we're going to do a not comment actually it should be a post all right that's why we set it up earlier post dot comment underscore count we're grabbing the count and let's just increment it by we can just simply do a plus equals one semicolon beautiful and there you go that should be all the common stuff for this program there's a triple equals here this should just be double equals save i should be fine for now the important thing to note is that we just created a new function that set up context and created a new struct we're gonna have to redeploy the program again so that was the step that you guys did with me at the beginning let's go ahead and get that done all right so in this section we're gonna be redeploying our program because we just updated it with all the functionality of creating comments so to get started you gotta make sure you have some solana inside your terminal so just to make sure i'm gonna do a salon airdrop okay so make sure you have enough i have about nine i'll just do one more and you can do this if you have the solana cli tool downloaded cool it looks like we have enough that should be fine and again when we transitioned we're gonna do those same steps we're coming full circle guys so going into facebook soul go ahead and delete the target folder because we need to generate a new program id so i'm going to delete target folder all right all right there we go target folders deleted let's go ahead and do an anchor build to compile our updated program okay and you guys know this process takes a couple minutes so we finally deleted the target folder make sure you see the facebook and then from here we want to do the anchor build to compile our updated program all right we're getting an error from our anchor build something and create comment program there you go that was it cool yes just double check the spelling is good if you have that end in there that's probably why so let's try this again anchor awesome that's what we like to see a successful compiling of our anchor build next let's just deploy okay so i'm gonna do anchor deploy and this should generate us a new id that we're gonna update our build with all right guys we're two for two we got a new program id which means we can finally replace it so copy that new program id it's going to be different from then what i have so just take yours and your declare id here because now this is reflective of our updated program and you want to take that same id head over to your anchor tamil and change this as well but you guys need that at this point we are deep in so let's save and if we do this we have to do an anchor build and anchor deploy again so anchor build first but remember this time you don't have to delete the target folder we have to do an anchor build all right anchor builds done just do an anchor deploy and if this and this should spit out the same program id because we didn't delete the target folder and once that's done beautiful okay now that it's deployed let's move on to the next step all right so now that we updated our program with all the comments functionality let's start working on the front end so just a quick recap this comment section component is coming from the post one because for every post they're gonna have a little comment section makes sense so going into the comment section the first thing i'll have you do is let's import our hooks that we'll use we're going to use date from react and there's going to be two components that we're going to get from here they don't exist yet but we can create them so in this comment section there lives a comment.js which i'll set up real quick as well as the actual create comment component okay oops too fast boom great comment awesome so now those components exist we're free to import them so i'll say import comment from comment let's also get the create comment cool that's done that's all the imports we're actually going to need for now so let's accept those props that we are passing which for now is just comments view detail and name and url yep cool and then from there we can set up the rest of our dibs now so let's get started okay so first div style.wrapper not stashy after that we want to take the comments that we are passing down and then map through them so i'm gonna do common staff map and we want function within here and we want to say for every comment we'll also get index involved in here and pass that as the key and then we want to do next is something like this where we can say comment comment and pass down those props so the comment will be comment the key will be just index cool then we can close it also awesome so for every comment we're going to create a comment passing in what that comment is as long as along with a key with an index that just gets generated and increments for every comment makes sense cool so from there we also have the create comment component so i'll say create comment nope it is actually self closing and within here we also need to pass in a couple of things which will just be the rest of the name equal name of the name and the url being the url cool and that should be it now think about it we're not really using view detail here so we can actually remove it which means we can go back to post and remove your detail here because we're gonna be using it for something else okay awesome that is the create comment i think the next step that i'll do is let's set up the comment component itself so i'll be going into here and for the comment section this is just gonna control the quite literally the comments underneath there will be a common component for that so the first thing we should do is import image from next image okay we also want to use time ago because along with the the common component we should see a little image of the person leaving the comment as well as a little time stamp of when they so we say time ago from javascript time ago import n from javascript time go slash local slash okay cool then we want to do a time go dot we did add default locale and that gave us an error let's just do an add loco and pass an en then we're going to do the exact same thing as last time which is make a variable called const time go equals new time go say n e u s cool and what did we pass down into comment probably just comment just comment so we can say we'll take that comment and now we can set up and we'll come back for the style in the comment section in a bit so coming down below here all that we're gonna need to do for this is let's actually set up an empty fragment empty fragment and then we can put our comment wrapper it's not just wrapper anymore style dot comment wrapper dave class name this one i'll call it the profile image container and judging on the name you guys could probably tell that we're going to have an image here all right i'm going to give my little image a name as well which will just be style.profile the src will be equal to the comma dot commenter url so i'm just taking advantage of the value of the comment i'm taking advantage of one of the keys inside the comments which will have the url in it already so i can say height equals 240 the width equals 240 as well cool and then they're going to be a sibling div to that which is going to have its own class name as well which will be the actual comment container itself so there was a container for the image making a container for the comment let's say style dot comment okay awesome so let's make another div within the comment container and this one is simply going to be called style.name because it's just going to contain the commenter's name so we can just pass down the comment object with the and get the commenter's name using the key there we go that would make it dynamic from here we just have a normal div no class name we can just say comment dot text okay closing div closing div and then there's like a little section here which is something of the common wrapper which is why we're using a fragment because it needs all these guys need at least one parent this one this one is going to be style dot comment actions container right because in the comments itself there's going to be a couple actions that you can take or it looks like that you can take and reply that's exactly the that's the actions that i'm talking about the like and reply so make a div for that and let's set up those action items so i'm going to say div class name style dot action and we do a like and we need two of these because there's n reply one all right be sure to change the text inside the second one but it will have the same div cool and the last one here is going to be a div for the time stamp so i'm gonna say div class name time stamp okay time go format let's get a new date object date will be comment dot post time and we gotta convert it to number times a thousand we did this similar it's similar to what we did before you then have to do a comma and the format of this one is going to be twitter now okay cool and that's actually just the comment section so what i'm going to do is now add all the styling on top of it so since we're already in comment let's add the style so coming at the top over here i'm gonna say const style equals here we go so styling the wrapper first and it's not called wrapper i've been saying we've been using wrapper so much guys let's do a comment wrapper and let's give it a flex property cool so next i'll have a profile image container this one will have an object cover or of two okay file image uh i wanted it to be rounded and i'll say full rounded dash full there we go we have the comment container then we have common contain which will just be a background of i have here hashtag three a three b c let me see cool then we have rounded two x one handed text white p y dash two and a p x okay that looks good to me common container and like i said i want to start moving a lot more faster with the css because there is a lot of it so i'm going to quickly go through the next ones so this is the remaining css it's going to be the name with this text color it's going to be going to the text is going to be small with the semibold font and for the common action center we'll have the flex item center a gap of 1 rem ml 3.4 rem and b1 rem mt1 and here is the action item which has a cursor pointer effect that's the only notable thing and a time stamp with this format alright now let's do the styling for the comment section itself and it's gonna be super intense it's just gonna be one thing just the wrapper so let's do let's make this style object and do con style equals and our really intensive styling will be just wrapper and it's just going to be with full rounded oops rounded dash beat large then space p dash 5 pixels flex justify center and just five center you want flux direction column border t border gray give it that gray color of 300 and the border itself will have this three a three b three e cool and last one is pt awesome so that's it for the wrapper and let's see the create comments next okay so now i'm in the create comment section to set it up let's get any hooks that we're going to use which is just going to be the use date use state and it shouldn't be that should be a comma there we go that's also good let's also get the image from next from next image and there's a couple of react icons that i have for you guys which is all of these and we're just passing in name and url for now so let's set that up name comma url yeah so this is the create comment field so there's gonna be a little input field where we can type in our comment and then we should be able to hit enter so let's make a state that keeps track of the input variable and we can come down below and start making the jsx so to get start with the jsx i just quickly formatted it and let's just give this a class name so i'll do div class name equals style.wrap from here we're going to have a div and that's just going to hold the image i want to give my image a name of style.profile image the source will be the url that i passed in height will be 44 and with b also 44 okay and the equal the profile image all right so let's get to the fun stuff which is going to be the input container itself so that's exactly what i'm going to call this one so i'll say div class name style input and inside this input container we first need to set up the form so i'll say form the form has a couple things inside of it which is going to be class name of style.form and we'll also have a on submit but i'll set that up in a bit i will just finish the rest of the gsx let's say so for the input field the type will be text the placeholder will be right comment and the class name will be style oops no quotes style input and the value will be input okay and there's like a function on here but i'm going to set it up there's also a function on here which will be an on change because every time we write on the input there's a change we want to update our input state so i'm going to say e set input and then we do like e dot target dot value nice cool that's the form underneath there's these input icons i'll call them so we'll do a div class name and call this one actually input icons all right so from there this is where we're going to insert all of the react icons which i already have prepped out which are just going to be these all right let me climb them up so it looks nicer there we go cool all right and as you saw we're going to have uh on change but we also have an unsubmit for the form which is going to have a post comment okay and let's create that post comment function which will be at the top here above the return let's go so to make the function you're going to say cons post comment equals async and we'll do an event with an arrow and we want to make sure we do event that prevent default because when you're working with the form every time you press or submit the form it actually refreshes the page we don't want to do that for our app because that would reset a lot of our states and it would make you have to import input a lot of the information so we want to do it wait create comment for post one second all right cool yeah so we want it inside the post comment after we event that prevent default we want to do this function create comment for post and if you guys are unfamiliar of what this is it's essentially a function that we were supposed to make earlier and we're going to pass it all the way down we haven't made it yet because it didn't make much sense so for now i'll actually just comment it and we'll work on the full common functionality in the next part so comment that up clear the input after we type it in there you go so that is all the front end portions of this but before we finish off actually we should do some of the styling cool so coming at the top above this function let's do a cons style equals and do a wrapper with the flex items okay then we're going to do a profile image rounded dash and the there's the input to container this one's a bit of a long one it's going to be flex 1 h10 this background color round and full px of 1 are you cool the rest aren't too bad it's just going to be a flux give it a flex 1 items center and let's style the input now so we're just going to give it with full make the background of it transparent by saying bg transparent and give the outline none and for the input icons let's do a flex and item center as well and let's give it a nice gap of 0.4 are you okay icon which will then be cursor dash pointer text will then be hashtag 9689ae this is all the frontend styling for each component for the comments let's work on the functionality now okay in this section we'll be updating our feed with all of the comment functionality for our app itself okay so the first thing we're going to need to do is go back to your feed and let's make a function and it's going to be called a get comments on post so coming down here and a new line one second let's make that function so i'll say cons get comments on post it does exactly what it sounds like which is fetching all the associated with that post so we're gonna do something like this there you go and make sure it's asynchronous let's insert a try catch block and for the catch it's just going to be an error and a console.error and pass in the air cool so now for the fun part when they get comments in this try block let's get the postages so let's say let the post address equals await anchor web3 dot key this is the capital one public key dot find program address and then from there we're gonna do the utf8 code this time i'm gonna make sure it's spelled it correctly utf8 yep and we'll do a post index dot 2 array and we'll do a buffer oops for e and just do an 8 here awesome and we also want program dot program id because the first step to getting all the comments we also need to get the post and get i'll then get the comments within that post so there you go then we can say khan's post equals await program dot count dot post got and we'll say post address so just like before i was explaining this like a signer this is really just the address of the post so we're going to do a let comment addresses right because there will be multiple comments associated to it with the post and all of this is stored on the chain at different spots common addresses let's initialize an empty array and we're going to populate it with all the comments so in here we're going to make a for loop so say for the i equals zero i is less than post dot comment count alright because if you remember when you're the post structure it keeps track of how many comments there are so we want to take use of that and do a nice two number here and so essentially for every comment we want to loop through each so if there's three we're gonna loop through all three and make it to number two i plus awesome and then we wanna read the state on chain so let's also get the comment addresses by saying comment signer equals await anchor dot web dot public key and then we want to find program address put the parentheses and again put in that array where we do the utf8 code again this time we put in comment and we say new b with the index dot two already like i'm gonna do a buffer e okay i'm gonna do a new bn i dot two hurray like and the same thing we're gonna do a buffer again be in an a yeah bn is just a serialized big number that's all you need to know don't worry about too much and then after that we can just do the comma program.program id again okay and for every comment that we do get and in code we want to be pushing so we want to do a comment addresses which is that empty array that we set up and we'll do a push method here and comment signer all right so essentially we're just pushing all the common addresses that we get into this array okay and that's it for the for loop but there's still a couple more pieces of code i want to make a variable called const common equals and wait for the programs count because for every program there's like an account storage i want to get the comment count and fetch multiple and then you can put a comment addresses in here and it's all going to be put into that variable we can do from there is similar what we did when we grabbed all the posts is actually sort all of them and we want to sort it in order so a dot post time dot number minus b the same thing b dot post time to number and after it's sorted we can just return comment the sorted comments and it should just be the catch and there we go oh yeah this is spelling an error nice and that is the get comments on post function awesome so the next thing i want to do is another function called save comment all right so this one's going to be asynchronous as well and it's going to take in a couple parameters which is going to be the text the index and the count we'll just do an equals arrow and let's get the post addressed again so i'll call post assigner equals wait anchor with public key find program address okay here we're going to do the utf8 code again and we want post i want to put post there we do the indexed to array like again with the same parameters of buffer be and eight then outside the bracket comma program.program id from here we can do the try catch block catch we'll do error and then console.error again amazing now in the try block the purpose of this function is to save the comment so let's first get the comment address so i'll say comment signer is equal to await anchor dot web three dot public dots find the program address okay this is very similar to literally to what we just did and it's a post we want comment here then do the index dot to array like the three parameters eight comma here and we want to count that two and eight then a comma and program dot program id okay there we go next thing we want to do inside this try block is let's have in the weight take that program then do a rpc dot create comment so we're actually talking to the function we made which is to create a comment now okay it's to create a comment right so if you remember that function that we made earlier it's going to take three parameters text the url and then there is the context part of it that's what this is and that's why i'm going to say an object comma object and for the first key it's account and for post we do the post signer or post address comment which is the comment signer that we got and for the authority that could just be while it's public key so we can actually write a wallet.public key then comma and then you want to just spread out default accounts cool after that you want to do an awaitprogram.account.commentcommentacount.fetch and get that comment okay and after that's pretty much it so that's all the functions that we're going to need for the feed one thing i would like to do now that we have everything is set up all my use effects so if you remember use effect is a hook from react that's going to run different side effects at different stages of the component's life cycle so what we want to do here is set up the first one which is going to be a use effect and the use effect takes two parameters the side effect that you want to perform as well as the dependency module which i'll just initialize is empty for now and within the use effect let's set up an interval all right this is just that interval to constantly get all the posts because if you remember before when i made the post it's not actually getting them until i clicked the refresh post button this user effect is going to get it i'm just going to make another call to get a post after the certain time of the interval so let's do a set interval here and it's doing async and we're gonna do an await get all posts all right so now we don't always have to click the button and let's give it two thousand four that's how long it will go for and then get all posts just to get the initial get all posts out the way then we can do a return to clean up the interval that we set up to clear the interval and pass in that variable cool but our dependency module we want to we care if the connected state has changed and if the get all posts is run okay so those are the two things you want to put for the dependency module so with that in my get all posts there should be a set loading here and turn that to false alright because once we get the post it shouldn't be loading anymore all right so then when you set this set loading defaults after we get all posts and we're about to set our data we'll set the loading to false so that we won't see this like loading div that we have set up in our conditional rendering we would see the posts that are there and the create component awesome all right cool so that's that first use effect i think there is one more and that's going to be ah yeah the use effect for the actual toast itself so coming to over here let's make another use effect and here we'll get toast and what we want to say is post refreshed and and then for the icon it's actually going to be an emoji so i have that over here and for the style it will something like this where we have a border radius 10 pixels background hashtag two five two five two six and the color is going to be hashtag fffcf okay cool and like i said use effect takes two parameters second one being the dependency module and this is gonna run when post style length is updated or changed okay and it's not posted to posts with an s hit save there you go so that's all the functionality for the feed only thing that's left now is to actually pass everything down so if we come here we can comment these out now so we have get comments on post function that we made at the top here and we're passing it as view detail for the save common function we created we're passing that as create comment okay cool so if we're passing this down into post we should head there so i'm gonna do this and let's get to the post and then in post let's come up to the top we have the view detail and create comment and the create comment okay it looks like we're not using the create comment yet in the post so that's set up that means we have to set up a couple things in the post component now so we have something called clock to date string that's good we have the post detail and we also need to make another function here so let's do a cons create comment for post that's what this function is and it's going to be asynchronous i'll have text and this is where we're going to call the create comment and we're going to say text post dot index and post a comment account okay cool so that's the function for there and while we're here let's also do the use effects which is going to be a use effect over here and for this use effect all i'm going to do is just call post detail because we weren't calling it yet that's calling post detail and for the dependency module it's just post detail right that's important so now this function is actually running and we're actually using view detail here as well okay let's use effect is done second one that i want to do is if the comments dot length is greater than zero so if what i want to do if the comments that length is greater than zero is user make use of our state which is comment section opened set that to true okay and we're going to constantly check that depending on how many comments there so if the comments state is updated or changed it will then run the check to see how many comments there are and the length of it cool so that's the use effects then we have a create comment for post this is going to come down to the comment section and this will be the last thing we passed down comments for post set that equal to the same thing now it should start to make sense with what i did earlier when i didn't await create comments for posts so i'm gonna hit save and let's head over to the comment section i think i see it right here let's accept the create comments for post create comment or post you can say create comment for post equal to create comment post then let's head over there to the create comment aha there we go it came it's all coming together now create comment or cool so this shouldn't be grayed out anymore we did a create comment for post let's see there it is awesome all right so i'm noticing we're not using name so i think it's safe to just get rid of it cool and then if we go back outer component we don't need to pass down name we just need the url and create comment for post awesome all right with that said i think that is all the functionality for the comments we updated a lot of our components with their use effects and we should be good to go all right so the only thing left to do now is to test out the comments so which means we're gonna have to start our server up again okay i just did an ntl dev where it looks like we're already getting an error in my feed i think i know what it is already we should have a comma there so line one six okay oh that's the same error as before let's just hit a refresh there you go it's all loaded now no errors and phantom wants me to log in again so there you go nice and updated for name lance sign up so let's go to that use effect and that's in post all right so it's saying doesn't know what comments dot length is this shouldn't be square brackets guys it should be curly brackets okay now let's see if that's good could still be reading the length because we initialized it with an empty array see what we got there we go awesome so now let's take a look stu lance sign up and again cannot read properties of define reading length let me just comment this out then and let's just count to log what comment should be an empty array and we should be able to see the length of that so now let's try this again as i was saying we need to get to our utils folder and if you remember in our const this is why this is the old program id so let's give it the new one and if i remember correctly you can find that in the anchor here's the new program id copy back to my utils and if you do this make sure you update the facebook underscore soul.json because this is from the old one so what we're going to need to do is get into programs go to target yep literally go in the idl folder and let's copy that guy and what we're going to do is paste it into oh we can delete this one the old one delete that one paste in the new one and i also want to just reset my terminal all right mix these guys up yeah there we go so we updated our idl we also updated our constant js we just got to hit save and now when we log in we shouldn't see the hello world post that i set up because this is a whole new program so in this program they don't have any posts or comments stored on chain so there you go so if you ever wondered how to reset your post because you can't delete them you'd have to just redeploy your program now let's do a netlifedev and let's try this again all right here we go it's loaded back up again let's make this bigger we can actually select our wallet there we go connected our wallet lance and let's see what happens click sign up post refresh there should be nothing nice let me just check my console if there's anything that's not showing up let's go we have a brand new app right new app because there's no post from left over so let's just take this time to use a checkpoint if you guys are still watching the video you guys are crushing it so leave a comment down below something like this let's say let's say golden whatever you say golden i know you're watching this if i don't see golden i know you haven't made it this far so i'm actually gonna make that a post as well so let's hit enter right we got the phantom wall because we're gonna be storing that post on chain this is the network be super cheap since it's so let's approve and let's wait oh there we go let's go this is actually really cool guys like we're actually writing to the solana blockchain and storing our posts on there so now the fun part let's do a comment let's see if this works now oh cool so yeah it popped up let's see where is my post it's right there so let's hit enter we see errors because that means we just have to fix it all right create comment for post is not a function because i'm taking it as a lower case you create comment four post become four post yup it's really case sensitive awesome so i hit save here so i did some testing it looks like it's a function here and that's because this is also lowercase f okay that saved me the headache let's go with that i'm logged in as kevin it's right there enter nice okay that's that makes me happy we're actually seeing an approved transaction sign to let this load i'll hit approve and see if anything comes up so it seems when i refresh the page it works and i was wrong before this actually isn't set up yet so i think what we'll do next is let's set this up that's going to be inside post there's a refresh comments button here i just need to add an on click to it okay yeah so i want it so that if i click the refresh comments it should be able to refresh and i pointed out that it actually doesn't because there's no on click setup to it so we're gonna add the on click of post detail here okay remember post detail was up here and it's gonna set the comment state awesome so i'm gonna hit save and let's just do some more testing so i'm gonna hit refresh all right let's make this one fun i'm just gonna do i'll be causing for this one and let's change this from lance to causal quasi i know there you go we're a different person now and all rights right if you go into the use effect i commented out so we should bring this back in there you go so now with this commented back in it should load the comments if there are one just for fun let's make a post let's do shout out build space so they do a bunch of cool stuff there as well as we are partnering with them to make these cool builds together with you guys so let's see if kazi can make this post let's do a fresh post there you go there it is shout out build space awesome so as quasi i'm going to put some comments to continue testing this let's see hey i think i approved and usually takes a couple minutes as well but this is so far so good let's hit refresh comments see what's going on so this is just the first two comments still there it is just took a second there's the hey we got the comments and we got the post functions working this is super exciting guys there's not much more left so if you made it this far you have an amazing app on your hands all we have to do now is let's work on the right sidebar and the sidebar itself all right guys i'm getting super excited we have the functionality the core functionality of our app working we can make it look even better because the reason why it's all stretched out is because we should have these sidebars in here so if you remember long long time ago we made that in the index so let's go ahead and work on so temporarily i'm going to make this smaller and this one bigger so that we can work on it so in the index we have this sidebar here let's create that component say sidebar.js this is the sidebar for the left we can say rafce and while we're here let's also get the right sidebar right sidewalk.js okay then we can do an rafce cool okay now that we have that done going back to index we can start importing them so i'm gonna comment this guy back out you can actually get an auto import by doing something like this okay and i can also do the auto import for this if you delete the first two type in the r and there's a suggestion i hit tab go close it and if you look it's all imported it's nice cool and you can see that it is taking up space here with the right sidebar on the left sidebar let's go ahead and code this out now so going to the components let's do just the sidebar and let's get set up all right for the sidebar it's actually not much it's literally just front end all the imports that we're going to use is the next image as well as the stuff from the assets folder so this is everything right here so it's just image from next image all these icons that i have set up and there we go okay another thing i'm gonna do here is const sidebar data equal to an array and it's going to be an array of objects which is going to have each one is going to have an icon that holds one of the icons like icon as well as a title for friends okay the idea here is that we're gonna map through this data and for every single object in this data generate a component for it sorry not generate a component we're gonna generate some jsx for it there it is that is the friends one and it's not title's not friends icon it actually should just be friends with quotes nice okay so that's it for the first object same thing for the rest so let me include a comment here and we'll copy this about five times one two three four five and be sure to change each one don't leave them in there so let's do a friends let's do eight groups and this one is called groups then we have the marketplace icon marketplace icon and this one is just place we got the watch icon which will just be watch you got memories memories and we have the drop down icon with the see more and this is just completely static data awesome so we're using all of this now just to come down here okay let's set up our jsx div class name style.wrapper div class name and in here we'll have the image style.profile for the src it's going to equal you and the height will give it 30. 30 for 30. and for the all it's just simply profile image again if you're wondering where this url is coming from we're going to be passing it down with the class name of sidebar item style dot sidebar item with okay and my voice had saved it's because there's no style property that makes sense i'm gonna just quickly put this in here before i forget the structure name and url and i have to pass that down later all right so this is the fun part we're gonna go to we're gonna do a sidebar data right that's the variable we created earlier yeah sidebar data and like i said previously we need to map through and then let's put parentheses here and for every sidebar data item and we also want to do a comment we want to generate some jsx for so actually don't need curly brackets you can do something like this and here we can put the div that we want to generate just going to be class name style dot sidebar bro with the key of index because each generated item from here should have its own unique key prop okay and then inside this div i want an image and that image should contain the image of the object that we passed in so class name is simply just going to be style.sidebar icon src will just be the sidebar data item icon and height 30 and width 30 as well okay all is just sidebar awesome last but not least we have another div here this one's going to be class name style there you go so much the one that's literally the same as the one before except the what goes in here is going to be the sidebar data item dot title so that's the friends the groups the memories the cmore that's what it is and so we can stop seeing this error we just have to add our style object and just to go through it really quickly this will be the css for it since the fun functionality is mostly done let's do an alt b and c and there you go so this is the wrapper the sidebar row it's really long we have the profile image sidebar item nice okay we can't really see the sidebar one thing that would help it is to actually pass down the name and url so here student name equals name and url equals you there you go let that compile and let's see if we can make this bigger oh it's asking me to connect my wallet again and then like i said let's be causey again and i think i put that here as well oh sidebar it's not defined let's see style yeah i just forgot to put style in front of that there you go hey okay so again quasi i am using this dice bear thing and all i have to do is just change this and you can get a different profile picture hey that's nice okay now i think it's just the text color that i need white that's not the right color see what's going on okay and then it should be white is it even there i'm highlighting it oh so it's not even there that's because this should be sidebar data item dot title and now it should work there we go now it's looking amazing so this is the sidebar we hover over it has this nice effect cool so now i just need the right sidebar and that's going to be all the frontend functionality so let's work on that all right so we'll be working on the right sidebar now and one of the first things that i'll do is get my import stuff ready so i'm going to import image next image import so there's going to be another component here and it's going to be called contact and before i can actually import it i need to create it so i'm just going to go components new file contact dot js rafc did it too fast there you go there's the contact now i can import it so let's do import contact from contact and that should be it from now what i want to do next is set up the jsx and for this one i will have the use which is just style okay div class name oops this one will be called title and it'll be the title will be sponsored style dot ads container this will be the actual ad itself so you'll say styled ad then for the class name will be a style dot and then within the add div we also want to have the add image container which will host our image and the image just to keep with the theme this all right excited for you guys to see that one so you'll see it in a second so that's the source and just format it so it looks nicer there you go yeah for you it could be whatever you want i'm going to do a height 100 a width of 100 okay and then for the class name i'll call it add image and you're going to guess what it is from the alt that i'm gonna write it is good old cp logo okay cool all right so that's the image for our cp logo we got closing div here close off that image container but we still have to do the rest of the and my quick ad for you today is going to be we are the number one channel for blockchain development let's go yeah where else are you going to see a huge project like this where we get on chain comments on the solana blockchain so shout out to solana and thank you to the cp team that worked really hard on this project so let's do a class name for style and if you're interested in more of our stuff head over to cleverprogrammer.com just did an ad while i was coding so that's two closing divs and then we also have another one here alright so we're gonna have another ad and it's gonna be pretty much the same convention so i'm gonna go down below here and hit paste the only thing that's different is the image and the little description that i have so let me get the image for you guys okay this is the image awesome and the alt is not the cp logo because this ad is brought to you by salon and then for solana they have this little nice tagline that is awesome which is going to be powerful for developers and fast for everyone password and we just put for their link it's solano.com okay cool those are the ads closing day of closing so those are the ads that we have the next thing that i want to do is set up this really cool thing so the first thing i'll make is this selfclosing div called and i'll call it and i'm just using this div essentially as a divider so that's what i'll call it style dot divider cool okay let's do another one with the class name this one will just be the title and it's going to say context all right because we can do this cool thing where we can set up sanity to grab all the users and those will display as our contacts on the right sidebar okay so let's make a container for those contacts call it class name contacts okay and here we're gonna have to stop for a second because we're gonna need to create a user's object let's make a static set for now so i'm gonna make a variable top here say const users equals and let's set up that array of users so it's an array with an object and each object will have a their wallet address and it will be just the user which should just be their name let's put we got kevin we got kazi get david in here we're all gonna have the same user let me just double check real quick okay so like i said we're gonna make a static object of users which will just be an array objects and we can give the same keys and values for all of them so for the wallet address you can give that the value mine they're all going to have the same wallet address okay and then there's just the url right so what's their profile picture i'm going to make it nice i have a random one that i could use and this guy just have a name one second i'm actually going to call this profile image and keep that his name and the name i did kevin and the kazi we also should get david in here and we can't forget about mana and cool but they're all going to have the same picture i won't go that that far for them so let's go yeah so now that's done we just got to set up the users and map through it so i'm going to do users dot map user ray and we'll do a return contact with the key equal to that user's wallet address we set that up and we can pass in the actual object itself because we're going to be mapping it out later cool so that is that mapping through the users don't hit save yet because we'll get ugly error what you want to do now is set up the styles so again i'm starting to go through all the styles fast so let's do a con style and these are all the css that we're gonna need for the right sidebar this is the wrapper the title the ads the ad the image container and everything else cool so from there let's just work out the contact and we'll be all done with the right sidebar okay for the contact let's import image because for every contact i want to use the image so let's do from next there we go and import image from next image i'm going to destructure the user from it and just to set up the jsx and do one of these the first div will be called contact nope style dot contact inside that div this is where the image will go the source will equal the user and i believe i called it profile image then we did a height 40 and a width 40. then we got class name equals style.contact image okay and then last but not least the last thing inside this contact div will be another div which is just going to hold the username so i'll call this contact user or contact name for short and it'll just hold user done all right cool so we can save this and we just need to get the styles and again here you go this one's short again feel free to pause the video if you need to catch up on the styles here's the one for contact don't worry i'm going back here's the one for the right sidebar got it cool so once you got it let's hit save should be no errors but of course there is one and it's because it's on the right sidebar we just need to close this off save let's make this bigger for the presentation while it's connected let's go as quasi again and again this is the default profile useful a url that i set up i'm just going to change it hey there we go the whole team is in the app garkaze lance kevin and david monathan frankie and there's our two ads it looks like just like the real thing shout out to solana and shout out to the team so there you go that is all the front frontend functionality of our app the only thing left to do is to connect sanity to the whole thing which we installed earlier so let's do that all right so now that we're almost done let's finally go and set up our sanity routes and make calls to that database because we had it set up way back but now we're going to come back to it so what we want to do is go to our pages folder and under api we have a hello.js here we don't need that we're going to be setting up new ones so delete hello.js let's make a new file and let's call it create user.js because this should actually create a user on sanity when we set it up so first thing we have to do is on the way back when we set up the client let's actually set it up so import client from that dot forward slash dot dot forward slash lib slash there you go so we're importing the client then we're gonna do a const the name of this is gonna be create user on sandy equals async do a wreck res and then from there we can do a try catch okay try catch is gonna have and if there is an error we're gonna do a res.status of 500 which means internal server error then we can send them a message with an object as a parameter and the message key with the value error comma and the data value will be error dot message now for the try if we're going to be creating a user on sanity we want to be creating a user document so let's set up that user document by saying const user doc actually because we can call it that and put in the keys and values we need which is the type of document this is a users i want to talk to that part and the id we just have to get the user's wallet address for the id okay and then now we can actually fill out the fields or the field the fields of the user which was believe name the name we can just do rec body.name and do a wallet address user wallet smaller you can do a wreck body that user wallet address same as the id then we can do the profile image of that user and let's just grab that person's profile so recta body profile cool and that's not all in the next line so we want to have an await so that is initializing the user doc here we're actually going to create that doc so we'll say create if not exist sanity has this cool method that if the document does not exist it will create that document it automatically checks for us and if it doesn't exist create it if it does just leave it alone cool and last but not least we have to do the res.status here so that we can send a status of 200 which is okay and for the message and just say success cool so let's create user pretty standard stuff next thing you want to do is make an api route to fetch the users right after a while we want to be fetching every user in our database and then in our context that's how we have this static david mona frankie so you can visualize it so in the api folder i'm gonna make a new file and say fetch users yes same procedure as the create one we're gonna import the client so we got the client next we're going to do const get user info and that make that into an asynchronous function and then make that one secret yes i did this one will be rick and rez just like the last and we have to catch is literally the same as the one before so i'll just type it out cool that's the catch for the try to get all the users in our database we need to query for them so we can say const query equals something like this and what we want to put in here i have the query saved up in my it's going to look something like this yep this is what we're going for we want the users and their names well addresses and profile image cool that said that is the query now let's put these into use because this is just the api we need at some point in our components we're going to be using all right so now that we made that let's actually start using them oh so now we made it don't forget to actually export them that's what i was thinking if you had to export default get user info so we can actually use them in other places and same thing with the create user we want to do a export default create user on sanity awesome yep cool so make sure you export them and then to actually start using them we're going gonna head to the sign up component believe this is where it was yes cool so we have this create user function that we set up a while back and all it does is set register is true but what it really should do is make a fetch call to the api we said what we need to do is make a variable called resp and it's going to equal late window dot solana connect solana.connect that's what we want all right so yeah if you're wondering what this is doing we're making we're getting a response from phantom so that in this next line we can say const wallet address and use that response dot public key to string so this is how we can get access to our phantom wallets address so i'm gonna store it in a very because we're going to be using it later we're going to be using it to create a user so from there you want to do a try catch and the error i'll just make it now it's just going to be console. pass in here okay and for the try this is where it will fetch that api route so what i'm going to do is do an await fetch and let's call it and say api slash create user yep it should be the same name that we called it there you go awesome just wanted to double check now we're good to keep on coding and before that closing parentheses put these curly brackets because now we need to put the method which will be post some of the headers content type and application slash json it's pretty standard and there we go that's the headers next part we want the body json dot cool and here this is where in our create user on sandy we had the rec.body and we got the user wallet address the name and the profile image we're going to set that up here so we're going to say user wallet address this has the value of wallet address name his name profile image is going to be event.target.url.value that's how you get the image amazing cool so whenever now when we sign up it's going to create a user on sanity okay and while we're here let's go to our index so let's do one of these awesome and for our index we should actually have a use effect setup okay and yeah like i was saying we're gonna have to use effect here but before we can make the use effect we should make request users data this is going to be and this is going to be an asynchronous function with active account as a parameter because we want to grab all the users but we don't want to grab the user that's currently active if lance is logged in we shouldn't see lance in the contacts so then if you watched our tinder app we did something similar to that as well so let's do a try catch i'll finish out the catch first which is just error and the usual okay but in the try though we want to do a constant response equals the weight fetch and then the api wrap okay and the const data is going to equal a weight response.js and we're finally going to be able to use our user state to say set users as data then console.log users and then show me the data that data just so i can see it and that's it request users data from there we just need to set up the user effect now that we have the function it's pretty small it just looks like this it's a use effect that has an asynchronous function inside and in that by synchronous function it's an await to request users data and it's only going to one just one that's interesting okay one of the last things i want to do too is oops one of the last things i want to do too is create our function which is the general which is the something's happening oh it's the api to fetch you oh i see it's because if i go to control p and then do fetch users let's see yep forgot the arrow function here go hit save and one thing i wanted to do here okay and as that's loading one thing i want to do that or just remembered underneath create user underneath create user i want to be able to generate a random url that's how this random button works do it it's pretty simple i have the code snippet for it it's just this it's just generate random image raw and you just want to set the url to be just a random avatar from dice bear right and we're making it random by just using math.random we can add on click into here let's do on click equals and then we'll say the general profile image so i'm just going to refresh this one more time and also i think i can actually make my url blank now so as i was saying now that we have the generate random profile image we can probably make this url blank again so go to your index and make it blank and before i hit save what i want to do next is pass down request user data all the way down to my right sidebar so let's go down to right sidebar so then for the right side we can finally pass down stuff into it and what i want to pass down is just get users and that's going to be equal to request users data function we also want to be passing down the list of users and then we also want to pass down set users okay there we go and that means we can go into the right sidebar and pause it for a second okay cool so now i'm in right sidebar and let's actually accept the props that we're passing down which is now get users and users and i had set users but now i'm thinking about it we don't need to pass that down so i'm gonna go here we can take it out just two things for the right side bar and going to here now that we have get user which is really just request users data what i want to do is set up a nice use effect underneath my style and we're going to call that function so i'm going to say use effect and did i import you because i did i didn't import it like that though so i could just do this there you go that's the use effect inside we can make an arrow function and i want to run an asynchronous one and all we're going to do within here is just use the get all users make sure you have get and a way to get all users cool this little guy right here put a dependency module cool and then we have users we are now passing them down and if i save this and go to i believe contact oh no it wasn't contact i remember making a list of users we actually don't need that anymore now that we are passing it down and we're getting them straight from sanity let's see so saving all that now it's just left to test it let's test up all our routes and see if they work so another thing that i'm going to need to do go into my terminal and if you guys remember we have the cd to studio and then we can do a sanity start okay let's compile cut the camera that oh one second all right so it looks like it finished loading up sandy's started so we can go to localhost and instead of 3000 3833 and we haven't made any new users because we just set up those reps so if we sign in or sign up this should get populated with a user cool so let's give this a try i'm going to say lance already in there image with the missing source property one second all right we're getting this error when i start typing it in my guess would be that it has something to do with the header and if we scroll yep i think it has something to do with this because if name exists which there was when i press l there should be a url and remember we remove the initial one so we want to say or and hold on what was i saying again oh yeah so saying this is trying to generate url that doesn't exist so what we can do is url or put a default one like this okay let's hit save frame time is asking me to connect they're all connected if i type in something here with die nope cool so it just generated the random image that i have there that's what the or is doing but what we can do is put in my name right now we have a different logo just a random logo and you can just cycle through them and change it if you don't like it let's just pick this one i can't really see it i'm gonna pick sign up now is our wrap broken probably oh now time for the debugging part undefined reading map sidebar okay oh so in the right sidebar there's no users yet so i guess what i want to do is take this list of users and go to where i got this from which is index and i can actually make that the default list of users so if i put this in here i don't have to say const anymore this is the default list of users that will load okay i just finished refresh refreshing we set up the default users let's try this again lance random picture sign up users.map so we're passing it to the sidebar in the sidebar we're getting the users i guess before we map stuff out let's console.log what users okay hit refresh i commented out the map for now let's just see if we can get a user created let's just do lance random site amazing okay so that works let's go that's a really funny picture let's go to see what is loaded if i press refresh there's a new user created no no new user created which is weird api resolve without sending a response this may result install request oh that's for fetch users but where is my create user let me just double check my create user i believe that's in sign up i'll be smart to probably call create user so let me just do that let's do okay let's try something i just want to make sure it's grown in create user when we do on submit create user yep okay so it's running on submit what i want to know is if it's actually running this what we could do is go to the api route console.log in console.log here creating and i can also do this one also.log signing up this one will be lowercase signing up so if i see this one that means the create user is running if i see the other one that means this means we're actually creating one so let's see if that works i'll just refresh this one more time try again random sign up did we create a user i don't know let me check my console okay we got signing up we got two undefined cannot read properties of reading value let's go check out what this means we didn't see our console up for creating a user so maybe there's something here cannot read property or reading value is there any about there's no value here so it's probably within this so we have this value here but this should be coming from the event okay maybe as a temporary solution we should put this as just url because we have access to it so i'll just hit save and let's try this again all right so one more time let's random sign up let's take a look okay we got didn't see my console log again failed with the status of internal server error that's interesting so we weren't able to create a user for some reason all right so i'll just double check the spelling and make sure that the schema is the same i put this back to event target url that value let me just try one more time so let me hit refresh okay so it's asking me to log in once again plants here random sign up oh oh might know the id i might see the problem now whoops we have a content type here let's see if that fixes it okay did that do that somewhere else no but that will definitely help our issue so let's try that let's give that a try and i think one more thing that i wanted to do in the api route itself we have the signing up touch user create user let's put a console log right here okay cool one more time let's do lance random sign up inspect element shift of those from before or after but we can just always check here nope no documents of this type all right back to the drawing board all right so after a couple of testing i console logged url and that's known to be working so i don't see why not this shouldn't be working because when i console.log the event.target.url.value i got undefined so let's just try url save that i'll save it like this take out the console.log and now let's try this again and while i'm here i think what i want to do too is let's find that index so i'm going to do index and the reason why user is undefined is because this doesn't have an s so there we go that's another thing all right let's try it so i want to do lance signup inspect element fail to load okay so there's no value error anymore but we're still seeing a status of 500 which means we have to go to create user and let's just see what's going on here all right so i took this some time to just read every line and fix up any typos so if i refresh this we should be good to go now so let's just do this for old time sake profile image random sign up crossing my fingers let's take a look okay no 500 error so far fetch users isn't working because i took that out okay hey there we go finally so we have the users and let's see that's me yep my wall address and my profile picture very nice cool so it looks like our routes are finally starting to work guys all i need to do now is go into i believe it's the right side yep so i'm going to be right sidebar we're console logging users and we're getting three users that's the default we need to be running get users and i'm actually going to go back what was i saying right sidebar get users all right so to get started with this go into the right sidebar and i think i took out the map i did and if i were to bring this back out and then save there we go so there's that's our static one but we should see something for this so it says api resolved without sending a response for api fetch users so let's take a look at that oh that makes a lot of sense i need to set up the status for this i got too excited guys so what we're going to do is after the query we want to store this sanity you want to store this in a variable i'm going to call it sanity response equals await client dot fetch query okay let's put this over here and essentially we made the query variable and what i want to query but i didn't fetch the actual query itself so let's do that let's do res.status 200 dot send then do a message of success and for data we put the sanity response in there cool all right i think that should be it we actually have a response now so let's try this setup again let's make another user test one two three four let's do lance again and it shouldn't actually make another user because it's gonna depend on my wallet account and there's my contacts there we go so the context is working we're actually querying all the users as our contacts there's me nice all right guys how do you like that all of our sanity database is up and running we're able to generate new users we can pull all the users in your contacts you can even set up a query if you don't want to see your to not get yourself and get everybody else but other than that this is the full app like you're able to create posts and comments on chain and we are in one thing that's left to do now is i'm gonna show you guys how to deploy to netlify so let's open up our terminal and what we can do here is do a netlify init give this a couple seconds all right and we want to create and configure a new site i'm going to do that site name facebook hands do dash so is that available nice cool and we should do a yarn run build because we are using yarn and the current directory is the local one okay press enter yep we have to install the next js plugin and let's say yes to this cool so we got our deploy key i already linked to my netlify to github right before now we can just do a git push so we can get trigger the new site build okay what we can do now is actually go on to netlify there's our facebook soul deployed see it's building and let's just take a look i'm let this build out and i'll show you guys what's up and the cool thing about notify you can also preview your deployments but it looks like it's already live so what we can do scroll to the top click on the site overview and you're done look at this we got the facebook it's all there and deployed you can literally send this link to your friends and they can create users and they can create posts and leave comments as long as they have a phantom wallet and some solana you can do it and store those posts on chain so that's gonna be it for this video hope you guys enjoy and be sure to be on the lookout for more solana videos and more ethereum videos and click on that build space link and claim your nft to prove that you completed your project with us and build space and if you guys are wondering how to do that when you click the link you're going to sign up with their email and go ahead and connect your metamask account and make sure it's connected to the polygon mainnet once you do just hit the mid button sign that transaction and there you go so that's gonna be it for this video i'll see you guys in the next one bye
