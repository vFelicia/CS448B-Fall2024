With timestamps:

00:00 - uh like timeout people that's there
00:03 - yeah yeah i'm going there i'm gonna do
00:06 - it i'm gonna go
00:06 - there give me one second guys give me
00:08 - one second
00:10 - yo what is going on guys welcome to a
00:13 - another
00:13 - video today we're gonna be actually
00:15 - hosting our live call
00:17 - from profit with javascript inside of
00:19 - youtube so you guys can go ahead and get
00:20 - a sneak peek as to what we teach inside
00:22 - the course
00:23 - but without further ado i'm going to
00:24 - pretty much drop all the value
00:26 - for our students inside today's lesson
00:29 - so
00:29 - let's go ahead and meet today's students
00:31 - let me go ahead and
00:33 - how do i actually unmute everyone in one
00:35 - go uh
00:37 - or allow participants to um boom
00:40 - and then everyone if you want to there
00:42 - we go go ahead and unmute yourself guys
00:44 - and say
00:45 - what's up guys
00:58 - [Laughter]
01:02 - we have literally 184 people in this
01:06 - zoom core right now which is insane
01:07 - okay now um i see some messages from
01:11 - atul saying dear sonny it's my first
01:12 - time i'd like to know
01:14 - it's wednesday so the agenda for today
01:17 - guys
01:18 - is i'm going to go ahead and mute
01:19 - everyone and you can unmute yourselves
01:22 - if needed but what i'm going to do now
01:24 - guys is pretty much
01:25 - go through today's agenda so that way we
01:27 - get a rough idea about what we're going
01:28 - to be covering
01:29 - in today's course okay so first thing
01:32 - that we're going to firstly i want to
01:33 - say
01:33 - also oh yeah so so people are saying my
01:35 - voice is resonating it's because i'm in
01:37 - a different room now so i'm going to fix
01:38 - that soon
01:39 - but it's because right now there's a bit
01:41 - of echo in this room so i apologize for
01:42 - that
01:43 - but thank you so much everyone for the
01:45 - kind birthday messages i saw so
01:47 - many of them on on instagram it's insane
01:50 - i saw so many dms
01:51 - really really appreciate and love every
01:52 - single one of you so thank you before we
01:54 - start to every single one of you
01:56 - uh for that um and yeah so today we're
01:58 - going to be talking about some high
01:59 - level stuff
02:00 - so we're going to be pretty much
02:01 - covering loads of high level content so
02:04 - pretty much always react i guess and
02:06 - kind of go into at that depth and that
02:08 - detail
02:08 - answering some of your questions um any
02:11 - sort of questions that students have
02:12 - we're going to go ahead and cover that
02:14 - and then like like the title says we're
02:16 - going to be covering the
02:17 - uh redux today so i want to do a deep
02:20 - dive on redux because redux is something
02:22 - that in in a production environment
02:24 - redux is going to be super
02:26 - valuable okay so it's going to be a
02:28 - skill that you guys are going to be able
02:29 - to if you
02:30 - if you know redux it's going to be
02:32 - something which is going to boost your
02:34 - your worth to accompany a huge huge
02:36 - amount okay
02:38 - now with that said redux is kind of
02:41 - complicated so i haven't actually used
02:42 - redux in quite a while
02:44 - and now what i'm going to be doing is
02:46 - actually going ahead and show you so i'm
02:48 - going to be using the react context api
02:50 - first to go ahead and show you guys how
02:53 - the react uh this sort of redux pattern
02:55 - works
02:56 - and then i'm going to take it a level up
02:59 - and i'm pretty much going to show you
03:00 - how to implement redux now the
03:02 - interesting part about today's call
03:04 - is going to be that because i haven't
03:06 - used redux in a long time
03:08 - it's going to be an experience where i
03:11 - will
03:11 - show you because i've actually forgotten
03:14 - how to implement redux which is awesome
03:16 - for you guys because i've used it a ton
03:17 - in the past but i've forgotten how to
03:19 - implement it right so i'm going to show
03:20 - you
03:20 - for exactly how i go about if i forget
03:23 - something if i haven't worked on
03:25 - something in a while
03:26 - my exact sort of mind and workflow and
03:28 - how i'm going to do it
03:29 - and then hopefully that'll give you guys
03:31 - confidence boost and sort of like that
03:33 - realistic sort of understanding as to
03:34 - how you're going to be doing it when it
03:36 - comes to that practical
03:37 - use case okay so let's go ahead and jump
03:40 - in
03:41 - firstly let's go ahead and ask does
03:43 - anyone have
03:45 - any questions because i'm going to take
03:46 - two questions before
03:48 - we get started okay so i have i have one
03:50 - sony go for it joe
03:52 - so when you when you say redux are we
03:54 - talking postgres sql
03:56 - or are we talking mysql sql server
04:00 - so when we're talking about redux uh no
04:02 - redux is actually purely a reacting so
04:05 - you know how we have the react context
04:07 - api which so basically inside of a react
04:09 - app we're gonna have to
04:10 - manage our data somehow throughout the
04:12 - app right
04:13 - redux is basically think of it as the
04:15 - commercial
04:16 - level solution to handling data flow
04:19 - within an application right
04:20 - okay so without it i'll explain it and
04:23 - we'll get a very visual breakdown of how
04:25 - we sort of do this stuff
04:26 - but um yeah it's going to be sort of the
04:28 - professional stuff so
04:30 - today is actually going to be really
04:31 - important for a lot of you guys because
04:33 - it's going to help you guys
04:34 - go ahead and sort of level up your
04:36 - understanding from react context api
04:38 - to redux and as far as i'm aware i think
04:40 - this is the first redux
04:42 - call or like stream on the channel right
04:45 - so this is awesome and even for the live
04:47 - course yeah
04:48 - so um awesome yes sunny i have a
04:51 - question
04:51 - shoot dude go for it yeah like we did
04:55 - the amazon clone
04:56 - and now we are we have started already
04:59 - with the react.js
05:00 - so i was reading about the react.js and
05:02 - there was a part
05:03 - which uh i read about jsx okay
05:06 - so we i did not notice anywhere like
05:10 - we have used it like any syntax or
05:12 - something so
05:13 - yeah yeah i wanted to know about that
05:16 - okay
05:16 - so you're wondering what jsx is right
05:19 - right
05:20 - yeah so jsx is essentially whenever we
05:23 - call them react right
05:24 - notice how it reacts so i'm going to go
05:26 - ahead and actually show you an example
05:27 - so it's a lot easier for you guys to see
05:29 - i'm going to share my screen as well
05:30 - so i don't know if you let me know if
05:32 - you guys can see this
05:34 - all you need to do guys if you can see
05:35 - this just please go ahead and
05:37 - wave your hand yeah i can see that yeah
05:40 - okay awesome
05:41 - um let me go ahead and actually share my
05:44 - um give me one sec guys
05:48 - zoom why do they do this all right zoom
05:51 - upgraded everything and i can't find
05:52 - anything sorry guys
05:53 - here one sec yeah and also a question in
05:56 - the meantime sony isn't redux like
05:58 - uh made from a different company like
06:01 - it's not inside react like
06:03 - react context api is yeah so good good
06:06 - point actually so redux
06:07 - is sort of think of it as like a
06:09 - community built a solution right so it
06:11 - was built by the community
06:13 - um oh god sake okay yeah it was built by
06:16 - the community
06:17 - um and it's i'm not sure who built redux
06:20 - but
06:20 - to answer your question the react
06:21 - context api was built
06:23 - by the guys over at facebook and
06:26 - that's uh that's why it's pretty much
06:29 - heavily used now it's kind of getting
06:30 - more and more heavily used
06:31 - um but there is something else uh it's
06:34 - not called relay i think
06:35 - is it called a relay or um recoil i
06:38 - think it's called
06:39 - uh so if we type in react recoil i think
06:42 - is it recoil or relay
06:43 - one of them yeah recoil recoil is
06:45 - another state management library that
06:47 - has come into play so
06:48 - i'm gonna check out this stuff but uh
06:51 - right now the one that's mostly used
06:53 - is um is um is the uh
06:57 - react uh readout sorry yeah so redox
07:00 - okay so with that said let's go yeah
07:04 - redux is basically a framework
07:08 - yeah react is a library this is a
07:10 - difference
07:11 - no no so redux is a module that you just
07:15 - pull into
07:16 - react which reacts as a library and
07:18 - redux is just like an npm module that
07:20 - you just pull in
07:21 - you'll pretty much go ahead and install
07:22 - redux into your
07:24 - uh into your react project and then you
07:25 - can use it um
07:27 - okay so now jsx to answer your question
07:30 - earlier i can't remember who asked the
07:32 - question but
07:32 - um uh to answer your question yeah
07:36 - awesome so to answer your question you
07:38 - know in react we have this return block
07:40 - okay we have this nice little return
07:42 - block here now
07:43 - notice how it returns um let's just go
07:46 - to
07:47 - maybe here for example okay so this is
07:49 - basically what gets returned
07:50 - now inside of um
07:53 - inside of this return block you can
07:55 - actually go ahead and have so let's go
07:57 - ahead and do
07:58 - like here for example ignore the if
08:00 - statements and things like that
08:02 - but here for example if we have a return
08:04 - block
08:05 - david please man the chat um and admit
08:07 - everyone in the waiting room
08:09 - yep so here if we have a return block
08:12 - you see these curly brackets yeah
08:15 - so these curly brackets are pretty much
08:18 - going to allow you to have javascript
08:20 - code inside of this html
08:21 - return okay so basically think of jsx as
08:24 - like
08:25 - a way of merging html and javascript
08:27 - together
08:28 - and that's what we use that's why you
08:30 - don't have a html file
08:32 - and the javascript file in react you
08:33 - just use a jsx file
08:35 - because it allows you to do both okay
08:37 - and then you basically return
08:39 - um you basically go ahead and return um
08:42 - this the sort of the output that you
08:44 - want okay
08:46 - so with that said and to be honest this
08:48 - will make a lot of sense when we
08:49 - actually jump into the code
08:51 - so with that said what we're going to do
08:53 - now is i'm going to go ahead and just
08:54 - break down some some concepts for you
08:56 - guys so
08:57 - just let me know if you guys can see
08:58 - this excuse me sonny yep
09:01 - i have a question on the jsx okay
09:04 - like uh in in past we have created like
09:08 - uh javascript components within the html
09:11 - and we
09:12 - we mentioned the file extension as js
09:15 - yep
09:15 - instead of jsx okay uh it still worked
09:18 - right like
09:20 - uh yeah so the reason why it works is
09:23 - javascript out of the box is because
09:26 - when you could use create react app
09:29 - what it's actually doing is you're
09:31 - actually going it kind of has like
09:34 - when you use create reactive it has like
09:35 - a special clever compiler underneath
09:37 - which changes javascript files to jsx
09:40 - okay so so you know some extensions on
09:42 - some tutorials are
09:43 - jsx um it doesn't matter because
09:46 - honestly
09:47 - you when you're using it will be it will
09:49 - be you don't need to write jsx just
09:51 - think of it
09:52 - when you use create react app you can
09:53 - just use dot js and it works
09:55 - oh okay so i know it can get a bit
09:57 - confusing when it kind of overlaps like
09:59 - that but
10:00 - to answer your question they're not sure
10:01 - that's how you do it um
10:03 - okay also if i'm sorry if i didn't admit
10:06 - anyone who just
10:06 - jumped in um okay so now what we're
10:10 - gonna do
10:10 - is let's go ahead and just dive into
10:13 - some
10:13 - of this so right now so imagine
10:17 - you have react right so i'm going to go
10:19 - ahead and freeze it so imagine you've
10:20 - got react
10:22 - yeah and now for many of you that don't
10:24 - understand what react is
10:25 - it's a library so if you're new to
10:28 - profit with javascript
10:29 - then react is the library that basically
10:32 - supercharges your apps
10:33 - okay so this allows you to build apps
10:35 - like netflix tinder
10:37 - uber like as and you can pretty much
10:39 - build like any kind of app with react
10:41 - right so frankly i did a massive
10:43 - contract with sonos sonos
10:45 - building like a new like sort of radio
10:46 - app and pretty much using react for that
10:49 - now you can do loads of things with
10:51 - react and it's very very powerful and it
10:52 - allows you to build something called a
10:53 - progressive web app okay
10:55 - so a progressive web app stands
10:57 - basically think of a progressive web app
10:59 - as something which is which is basically
11:03 - has the power of a native app okay
11:06 - so it has the power of a native app
11:09 - so there's a power of a native app but
11:11 - it runs on the browsers
11:12 - okay so it just runs in a browser which
11:15 - means
11:16 - if it's running on a browser it means it
11:18 - doesn't matter if it's on ios
11:20 - android iphone tablet desktop
11:23 - wherever it is it's going to be working
11:25 - okay
11:26 - so at that point it really doesn't
11:28 - matter where you're sort of
11:29 - running it but that's why it's
11:30 - beneficial to use something like react
11:33 - now before you can jump into react i
11:35 - would recommend
11:36 - you do go ahead and learn the
11:38 - fundamentals so the fundamentals
11:40 - are essentially just going to be html so
11:44 - html javascript
11:47 - oops oh no okay javascript um
11:51 - i don't know why that's there but you
11:53 - know anyway here's your javascript and
11:55 - css ignore that little bracket i can't
11:58 - can't seem to get rid of it um but yeah
12:00 - so that's pretty much
12:01 - what you need to go ahead and learn just
12:03 - roughly okay so just if you can get
12:04 - a little project working with these
12:07 - three things
12:08 - right and you can pretty much get it
12:09 - working to a very minimal scale so
12:11 - imagine you have a web page with a
12:12 - button click and things like that
12:14 - at that point i would say honestly just
12:15 - just shoot your luck just go ahead and
12:17 - try and give
12:18 - react a try okay and now remember like
12:20 - there's no
12:21 - condition of or at which point do i make
12:24 - the jump or like
12:26 - am i ready for it like don't worry about
12:28 - it just literally the more
12:30 - if you code in if you start using the
12:31 - react library um
12:33 - it's very very lightweight which means
12:35 - you only need to use what you need
12:37 - to basically go ahead and you only use
12:39 - what you need
12:40 - and it will allow you to sort of it will
12:43 - build your understanding of this
12:44 - as you're using react okay so i just
12:47 - want to get rid of something i've got
12:48 - some
12:49 - some annoying screen i use flux to
12:52 - protect
12:53 - sort of my eyes as it gets later but i'm
12:55 - going to go ahead and quit because my
12:56 - screen looks all brown
12:58 - and it's kind of messing me up um okay
13:01 - there we go
13:02 - so now with that said we have react okay
13:06 - now react is something
13:07 - so it has i'm going to draw a line here
13:10 - so let's go ahead and join so that's
13:11 - basically our intro
13:13 - now react it uses something called
13:15 - component
13:16 - based design okay now component based
13:20 - design
13:20 - is something that you have to become
13:22 - familiar with why is it important
13:25 - because it allows you to basically go
13:27 - ahead and write a piece of code once
13:30 - and reuse it many times okay so what do
13:32 - i mean by this so imagine
13:34 - i've got a web page so here's my web
13:35 - page uh let's make it very big
13:38 - right so this is my web page now on this
13:41 - web page
13:42 - okay imagine it has like um a header
13:45 - okay so it has a header at the top and
13:48 - this is where you have like the nav bar
13:49 - and all that sort of stuff
13:51 - imagine it has a footer at the bottom
13:53 - okay and then
13:54 - imagine you have like a bunch of
13:56 - products so imagine this is like amazon
13:58 - or ebay or something okay so this is a
13:59 - product
14:00 - uh this is a product and then you've got
14:02 - another product here
14:03 - okay now on a typical website what we
14:06 - tend to do is we'll code up
14:08 - the the we'll sort of add some code for
14:10 - this bit we'll then add up the same code
14:12 - for this bit
14:13 - and then we'll sort of copy and paste it
14:15 - and add up for this bit and we'll just
14:16 - change this sort of into it like details
14:18 - inside
14:19 - now why is that a bad idea because let's
14:21 - say i want let's say like
14:22 - a designer comes in and says hey guys
14:25 - we're going to change
14:26 - all of the design so all of these
14:27 - product tiles are going to look
14:28 - different okay
14:29 - now i need to go here here and here and
14:32 - change
14:32 - everything which means i don't i don't
14:34 - have to just change one piece of
14:35 - like of code i have to change this one i
14:37 - then have to go ahead and change this
14:38 - one i have to go ahead and change this
14:40 - one
14:40 - and if i forget or say if i change one
14:42 - thing in this one so i managed to make
14:44 - it a little bit different
14:45 - now my code doesn't look the same so the
14:48 - middle one's gonna be different when it
14:49 - shouldn't be like that everything should
14:50 - be uniform
14:52 - okay so let's imagine this is called the
14:54 - product component
14:55 - so imagine this is just called the um
14:58 - make it smaller imagine this is called
15:00 - the product dot js component okay so
15:03 - this is like a product component
15:06 - dot js oh god who's that um let me
15:09 - let me go ahead good everybody mute
15:11 - everybody let me mute the chat
15:13 - um i'm going to go ahead and uh
15:17 - let me go ahead okay you all there we go
15:20 - all right
15:21 - now here we go imagine we got another
15:24 - one which is product.js okay
15:26 - so we have three products now why is
15:28 - this so powerful
15:29 - because we literally code the product
15:31 - once right
15:32 - and then we pretty much reuse this thing
15:35 - so i can code it once
15:36 - i have this one file product.js then how
15:38 - do i reuse it we use something called
15:40 - props
15:41 - okay oops um oh wow why does that change
15:44 - why is today all of a sudden all my
15:47 - stuff has changed okay
15:48 - but we use this props okay now props
15:51 - is something like imagine you have you
15:53 - pass in props so you can pass in
15:54 - something like the title
15:56 - the price the
16:00 - picture right so these are just props
16:02 - now what does prop stands for
16:04 - it stands for properties these are just
16:06 - different properties and you can pass it
16:08 - into a product and then it renders out
16:10 - the final product
16:11 - this is awesome right this allows us to
16:13 - pretty much re
16:14 - code up our product.js once and then
16:16 - based on the props that we pass in
16:18 - we render out the final product which
16:19 - means that every single time
16:21 - each one comes out looking the exact
16:23 - same right
16:25 - except with different details so that
16:27 - means that we if
16:28 - if a designer comes along and says hey
16:29 - we need to update all the products
16:32 - it's so easy to go ahead and do that
16:34 - because all we have to do is go ahead
16:35 - and change
16:36 - one of the what we have to do is change
16:38 - this one file
16:40 - and then everything gets updated
16:41 - accordingly so
16:43 - that's something to bear in mind now
16:45 - this is the first
16:46 - principle okay so we have props so
16:49 - number
16:50 - one is props and then
16:53 - basically here i'm just going to write
16:55 - the two
16:57 - principles you must
17:01 - understand in react okay
17:04 - so one one is props and now number two
17:08 - is going to be state
17:12 - now state is something imagine it's just
17:15 - like a short term memory okay
17:17 - so state i refer to as short-term memory
17:20 - so that's what i like to kind of refer
17:22 - to as
17:22 - i just call this the short-term memory
17:24 - of a component now why do i call it
17:26 - short-term
17:27 - because if you are to basically go ahead
17:30 - and get rid of
17:32 - the if you're going to go ahead and
17:33 - refresh the page the state will always
17:36 - return to its original value which means
17:38 - that say for example i have
17:40 - a a counter button okay so let's say i
17:42 - had a component here
17:44 - and let's say this count this this was
17:46 - like a
17:47 - let's imagine we've got like uh at the
17:50 - bottom of a product right so imagine at
17:51 - the bottom of a product
17:53 - i've got like a counter and inside of
17:56 - this counter
17:57 - it pretty much says like it says zero
18:01 - or and then it has a a plus and a minus
18:03 - okay so it has a zero
18:05 - and then it has a plus and then here it
18:07 - has a minus
18:08 - okay so imagine like i had this sort of
18:12 - ticker thing right so basically if i go
18:14 - ahead and i'm like clicking on this one
18:16 - so imagine i'm like clicking so i go
18:19 - ahead and click plus a few times
18:20 - this will change to like one two three
18:22 - four five so the end
18:23 - afterwards this would go ahead and be
18:25 - like four for example now when i refresh
18:27 - the page
18:28 - this will go back to zero because memory
18:31 - state is short term which means
18:32 - it doesn't persist which means when we
18:34 - refresh it goes back to zero
18:36 - now obviously we want to keep track of
18:38 - this state but why do we need state it
18:40 - allows us to do things like this
18:42 - where basically if i go ahead and click
18:44 - like plus plus plus
18:45 - it will allow us to go ahead and have
18:47 - that functionality
18:48 - whereas if i didn't and also state is
18:51 - isolated so
18:52 - if i had this in this component then
18:54 - inside of this component
18:57 - for example here oops
19:01 - so for example in here we would have the
19:03 - same thing and this one could be a
19:05 - completely different value so this one
19:06 - could even have like something like 20
19:08 - in
19:08 - right so each each component has its own
19:11 - state
19:12 - so these two things are crucial for our
19:14 - understanding of react so
19:16 - props and state okay
19:19 - now we need to know this um and we need
19:21 - to sort of like understand props and
19:23 - state
19:24 - very well because it's going to be
19:26 - crucial in building out an application
19:28 - so
19:29 - with that said do we have any questions
19:31 - on this at this point
19:33 - so either about props or state so feel
19:35 - free to unmute yourself
19:36 - and we can pretty much answer any
19:37 - questions anyone has at this point yes
19:40 - funny
19:40 - yeah just one simple question uh so uh
19:44 - so actually the props is um almost
19:47 - relates to the object-oriented concept
19:49 - right so in javascript or
19:51 - in any other different uh programming
19:53 - language we have classes right
19:55 - so uh it's almost made it is made the
19:58 - same way right
20:00 - yeah so think of it like
20:03 - this way so think of it like um
20:07 - oh sorry by the way i saw that some
20:08 - people say can i move the camera but
20:10 - uh it's fine so think of it this way so
20:13 - yes
20:14 - so firstly okay
20:17 - the reason why i'm hesitant to say yes
20:19 - is because we're trying to move away
20:21 - from class-based components right we're
20:24 - trying to move away from class-based
20:25 - components to functional components
20:27 - because functional commerce a lot easier
20:29 - to sort of read and understand
20:31 - now your understanding of it is correct
20:34 - so
20:34 - uh the reason why it's correct is
20:36 - because class-based components
20:38 - yes are they have their own kind of
20:41 - memory so they kind of have this dot so
20:44 - you have like an instance
20:45 - some objects imagine you had like the
20:46 - product object project
20:48 - a product class then you would say like
20:50 - new product and you'd pass in some
20:51 - values
20:52 - and then you'd have that product right
20:54 - now the values inside that product will
20:56 - belong to that object
20:58 - right so yes in in that in that way of
21:00 - thinking about it does
21:02 - it does make sense um the reason why
21:05 - this is kind of a whole other sort of
21:07 - discussion and it comes around
21:09 - class-based versus um
21:12 - functional okay so like but the main
21:14 - thing is the main thing that we need to
21:15 - understand
21:16 - is that every component just has their
21:18 - own state
21:19 - okay so every component has their own
21:21 - state now i see some people saying did
21:23 - you erase everything on the whiteboard
21:25 - nope so if you want to go ahead and just
21:27 - you can take a screenshot of this now
21:29 - um remember that the entire session is
21:31 - going to be recorded so
21:33 - it will be uploaded afterwards but uh
21:35 - feel free to take a screenshot now
21:39 - yeah when we talk about state right we
21:43 - make
21:43 - it's kind of a short-term memory so is
21:46 - there any
21:47 - kind of a standard practice how much
21:49 - amount of data you should keep that's if
21:51 - you're getting some
21:52 - amount of data from api or something um
22:01 - so to answer your question you're saying
22:03 - is there a kind of um
22:06 - a kind of limit to the amount of size
22:09 - limit or something like
22:11 - this much amount of data no no no so so
22:14 - state just think of it as
22:15 - just think of state as variables inside
22:17 - of an object
22:18 - so it really at this point it could be
22:20 - huge right like you could literally pull
22:22 - an
22:22 - entire database into a variable if you
22:24 - want in i'm not saying it's good
22:26 - practice but you could go ahead and do
22:27 - that
22:28 - right you can definitely go ahead and do
22:29 - that um
22:31 - but what i would go ahead and say is um
22:34 - thank you so much frank for dropping a
22:36 - donation on youtube hey
22:39 - um yeah so what i would say is pretty
22:41 - much
22:43 - yeah it doesn't there is no spacing
22:45 - limit you can pull in and
22:46 - you could literally but what i would say
22:47 - is what if you're considering pulling in
22:50 - an
22:50 - entire database into a component
22:54 - then you might be wanting to put it not
22:55 - into the component but into something
22:57 - like
22:58 - react context api or redux so that way
23:01 - you can pretty much go ahead and
23:04 - save it to like a global state or global
23:07 - store or global value
23:08 - and then any component can go ahead and
23:10 - access it but we'll get into that in
23:11 - just a sec
23:12 - but um but if that will happen then uh
23:16 - it will make our app
23:18 - more heavier right and it is not good
23:20 - yeah so
23:21 - so there's a lot of considerations
23:22 - around like do you want to have your app
23:25 - um
23:25 - you know like do you want to have your
23:26 - components heavy pulling things in do
23:29 - every time something changes should it
23:31 - refetch all the data again
23:33 - you have to kind of think about all of
23:34 - these things when you're building an app
23:36 - but
23:36 - try and keep it simple for now guys and
23:39 - only
23:39 - that what my advice to you would be keep
23:42 - it simple because
23:43 - it will get to a point where you will
23:44 - have so much
23:46 - um like you you'll you'll get so many
23:49 - natural questions that will just come up
23:50 - right and what i would say is
23:52 - make sure like just just build things as
23:54 - you need it because you're always going
23:55 - to have a curious question you're always
23:56 - going to have some kind of question as
23:58 - to like
23:58 - should i do this or should i not do this
24:00 - or should i do that or should i do this
24:02 - it kind of becomes a bit kind of like yo
24:03 - you're going to forever be asking
24:05 - questions as opposed to actually going
24:06 - ahead and coding
24:07 - i would say just go ahead and code go
24:09 - ahead and build things as you need it
24:11 - and then you'll run into those questions
24:12 - as answers naturally
24:14 - right otherwise even if i told you an
24:16 - answer right now
24:17 - you'll you'll forget it by the time it
24:18 - comes to actually implementing it
24:20 - right all right so that yeah one last
24:23 - question i have
24:24 - yeah okay so i wanted to ask like how do
24:28 - you exactly
24:29 - pass props how do you pass props
24:34 - uh i will i will be showing you uh i'll
24:36 - show you a light demo
24:37 - before very soon as to how we set up
24:40 - props and things like that
24:41 - um because we're gonna need to know how
24:42 - to do it but basically it's like
24:44 - uh when you render out a a um let me go
24:47 - ahead and share the screen
24:50 - so imagine you like when you when you
24:52 - render out a component
24:54 - you pretty much render it out like this
24:55 - it'll be product like this okay
24:57 - now if you want to pass in the title
24:59 - it'll be something like this
25:01 - let's just call it amazon echo or
25:02 - something oh god damn it why does it
25:04 - always do that amazon echo
25:06 - right so you see what i just did there
25:08 - right so
25:11 - and one more thing yep
25:14 - uh so so you see you pass in as an
25:17 - attribute
25:19 - yeah yeah yeah so i was watching this
25:22 - david video uh
25:24 - the other day about straightening props
25:25 - and he said something about crops that
25:27 - you can't pass
25:28 - them like from top to bottom or
25:29 - something i didn't understand that
25:32 - right oh isn't you you can't pass them
25:34 - yeah so that's what we're going to come
25:36 - to
25:36 - now right so uh i'll explain that in a
25:38 - sec but yeah you can you can pass
25:40 - okay props down but you can't pass props
25:42 - up and that i will explain exactly what
25:44 - we did i had no idea about
25:46 - that so i got confused with that no
25:48 - worries i'll explain yeah
25:50 - i just have a great question um who's
25:53 - who said it first
25:54 - because one question and then we're
25:55 - moving on i did i
25:57 - i started at the before pre on shoe
26:01 - okay so is it is that shrika or
26:04 - srika oh it's okay yeah shrieker
26:07 - okay srika go for it yeah thanks
26:11 - uh so have you ever coded in python
26:14 - before because i was just trying to make
26:17 - um
26:18 - a connection to
26:21 - um to react so like whenever you
26:25 - import things is it kind of like how it
26:27 - is in python like you import
26:29 - different modules in order for or like
26:31 - libraries in order for it to work
26:33 - yes so it's exactly the same you pretty
26:35 - much install something so in python you
26:37 - install with pip
26:38 - uh in in javascript using npm or yarn
26:41 - so it's pretty much the same thing you
26:43 - install a module and you go ahead and
26:45 - use the module so the same thing yeah
26:48 - so that might that might actually have
26:49 - helped a lot of people out so that's a
26:50 - good question yeah
26:52 - um okay so now guys i'm gonna go ahead
26:55 - and do the same thing so i'm gonna mute
26:56 - allow you to unmute yourselves if you
26:58 - need it
26:59 - uh and then pretty much we can go ahead
27:00 - and jump into the next so
27:02 - we talked about state and props okay so
27:04 - we had we have our understanding of why
27:05 - this is important why this is important
27:08 - now let's go ahead and carry on with
27:11 - that so
27:12 - okay so imagine we've got an app okay so
27:14 - this is like let's just call it the
27:16 - the next facebook
27:20 - app right and it's built with react okay
27:24 - and this is our case study so this is
27:26 - the one that we're going to be building
27:27 - okay
27:27 - now when you use create react app what
27:30 - it does is it
27:31 - it builds out you can see your
27:37 - [Music]
27:39 - there we go thank you guys so you can
27:42 - see it now right
27:45 - yeah yep so so imagine we have the next
27:48 - facebook app
27:49 - right so it's going to be a massive
27:50 - million dollar app and we're building
27:51 - with the react okay
27:53 - when we use create react app what we
27:56 - will see is that we actually go ahead
27:58 - and it will build something called
27:59 - app.js
28:01 - now app.js is simply just like a it's a
28:03 - component right so it says you you get
28:04 - app.js whenever you use it now app.js
28:07 - all it does is it will give you a little
28:09 - spinny sort of react
28:11 - icon okay so to show you guys what i
28:14 - mean by this i'm going to
28:15 - literally put into practice so i'm going
28:16 - to open up a terminal
28:18 - i'm going to go full screen on this i'm
28:20 - going to make this huge so you guys can
28:22 - see it
28:23 - and then what i'm going to do is i'm
28:25 - going to go into my desktop so
28:27 - i'm going to desktop and then i'm going
28:30 - to do
28:30 - mpx so i'm going to mpx create react app
28:34 - and let me go ahead and do so here i'm
28:37 - going to say
28:38 - um coach let's just call it why does it
28:41 - keep changing taking my focus
28:42 - let's go ahead and do like um demo
28:46 - redux app okay so basically i'll explain
28:49 - what this is
28:49 - so mpx is basically a node package
28:52 - i i can i think of it as node package
28:55 - executor
28:56 - right and what it does it goes to the
28:58 - node like registry on the internet
29:00 - and it will basically go ahead and get
29:02 - the latest create reactor which is
29:04 - something which with the guys over at
29:05 - facebook created to allow us to you we
29:07 - can use this
29:08 - and it will go ahead and build the um
29:11 - like a template
29:13 - starting react app for us right and then
29:15 - here we put the name of the app in so
29:17 - we're going to do demo relax up so if i
29:19 - hit enter
29:20 - uh what it should do is it starts to
29:22 - create the react app
29:23 - okay so we can pretty much leave that
29:24 - running and once this goes ahead
29:27 - and um starts once this goes
29:30 - and starts we'll come back to it so
29:32 - while this is running
29:34 - this will create something called app.js
29:35 - so this was like one component
29:37 - and then what we can do is imagine on
29:39 - facebook you have loads of things on
29:41 - facebook right you have like a feed
29:43 - so there's some you have a header you
29:44 - have a feed so let's go ahead and build
29:46 - some components so here
29:47 - imagine we've got like a header
29:51 - component
29:52 - so imagine we build a header component
29:55 - so here we're just going to say header
29:58 - dot js
30:00 - and um i'll make this a rainbow again
30:04 - i like it when it does the it changes
30:07 - the color itself
30:12 - a little circle yeah that's it i found
30:15 - it yeah
30:15 - there we go thank you okay it's just
30:17 - more colorful for you guys to see then
30:19 - imagine you've got header.js and then
30:20 - imagine we create a feed
30:22 - so like here we've got a feed so this
30:24 - would be like feed dot js
30:26 - and then imagine we had another one so
30:29 - and this could be like
30:30 - um let's just say okay and then imagine
30:33 - we have a bunch of posts
30:35 - right so post like imagine you've got a
30:37 - post
30:39 - suggest because like on facebook you've
30:41 - got a feed and then you've got a bunch
30:42 - of posts okay
30:43 - so why is it like a tree because on in
30:47 - app.js we'll render the feed
30:49 - and we'll render the header and that'll
30:51 - create a page so you have a header at
30:52 - the top of the page
30:53 - so you'd have a header on top of the
30:55 - page and then you have your feed and
30:56 - then inside your feed
30:57 - you might have a post right so you might
30:59 - have like a post you might as might not
31:01 - be able to see that
31:01 - very clearly so i use this one you have
31:03 - a post now you might not just have one
31:05 - post you have several posts okay so
31:07 - you're going to have like a few
31:08 - different posts
31:09 - um so we pretty much can reuse the same
31:11 - component so
31:12 - post dot js okay now
31:16 - so this will render out several posts
31:19 - now
31:20 - what happens is so this is actually goes
31:21 - to pre-entry's question
31:23 - so app.js imagine we had i said think of
31:26 - it this way so imagine we had another
31:28 - component called login
31:30 - right so i'm going to go ahead and
31:31 - create a component over here this one's
31:33 - called the login.js component
31:34 - and the purpose of this one
31:38 - is to basically the only purpose of this
31:41 - is going to be a login screen
31:42 - okay so just think of this as like
31:45 - levels
31:46 - just just to make it very simple for now
31:48 - think of this as level zero
31:49 - level one and level two okay
31:53 - now at level zero we have the app
31:56 - level one we start rendering the page so
31:58 - you can pretty much put things like the
32:00 - header the feed login
32:01 - and imagine the user goes to login and
32:03 - then once you've logged in i get the
32:05 - user object at this point
32:07 - so now i have the user the object right
32:10 - so imagine like i log in and i've
32:11 - successfully got the user's object
32:13 - okay that's cool but i need the user
32:16 - object when i'm at post
32:17 - when i'm over here so i kind of need the
32:19 - user
32:20 - over here but i get the user object
32:25 - over here so how the hell do i get my
32:28 - user over here
32:29 - right so what we could do
32:32 - is we could have a piece of state here
32:35 - called user
32:37 - and basically in react you can you can
32:40 - pass your you so this
32:42 - by default would be no you can pass the
32:45 - user and the sort of
32:46 - there's something called a set user
32:49 - right so
32:50 - in inside of react you'll have something
32:51 - like this where you've got a hook
32:53 - and then it'll say use state right and
32:56 - then by default you could have no
32:58 - as the value so this means inside of
33:00 - react you have a user
33:01 - where the default value is no okay and
33:04 - what you can do is you can actually pass
33:06 - set user down to login.js and what this
33:10 - does is you can pass that down as a prop
33:12 - so you can pass
33:13 - uh like props down so if i need the user
33:16 - down here i can pass it through here and
33:19 - then from feed to post i can pass it
33:21 - through here
33:22 - and then this is how the user will get
33:23 - here right
33:25 - now i can also so preemptively you asked
33:28 - about it's one direction right it's
33:30 - it's only one direction you can go now
33:32 - that's because imagine we have the user
33:34 - up here
33:34 - right i can pass set user down here
33:38 - and then basically when they log in i
33:40 - can say set the user to this
33:41 - which means that this user gets updated
33:44 - okay
33:45 - so i can do that so which means in some
33:47 - sense
33:48 - i can kind of go back up the tree but
33:52 - it's not a good practice to do it like
33:53 - that
33:54 - right which means that the user gets
33:56 - this one more
33:57 - or one question while you're doing
33:58 - asking or telling what is yeah so how do
34:01 - i exactly know which is the top most
34:03 - component and which is the
34:04 - most component um i'll show you in just
34:07 - a sec once uh our thing
34:09 - once the app gets running yeah but
34:12 - so so think of it this is app.js is
34:14 - going to be your top most component in
34:15 - the start
34:16 - we have the login.js and then basically
34:18 - the user is here right now what we need
34:20 - to do is we kind of need to set the user
34:22 - so we kind of then at this point this
34:24 - gets populated and then we need to if i
34:26 - need the user over here
34:28 - i need to pass it over here and i need
34:30 - to pass it down here
34:32 - and i need to also pass it over this one
34:34 - and imagine if i had another component
34:36 - over here
34:37 - for example let's say we had a component
34:39 - called um
34:41 - let's just call it a video post right so
34:44 - imagine we've got like a
34:45 - video post component so this one
34:49 - what i'm gonna then need to do is pass
34:52 - it over here
34:52 - because i need the user so i need to go
34:54 - ahead and pass it over here
34:56 - now you can already see there's so much
34:57 - passing around right there's this
34:59 - there's just endless arrows
35:00 - okay and and this is what we call this a
35:03 - problem right as soon as you see this
35:05 - i kind of it screams something called
35:07 - prop drilling
35:10 - oops something i want to say something
35:12 - yeah
35:13 - go for it you know like the amazing part
35:15 - of it is
35:16 - last night i just finished developing
35:18 - facebook clone with you you know
35:20 - following your youtube
35:22 - was the name you know the youtube video
35:23 - you made yep and i understood nothing
35:26 - about this uh
35:27 - you know reducer and who all that i just
35:30 - copied the code and it worked
35:32 - right and now i'm getting there i
35:33 - understand it thank you very much
35:35 - awesome man that's i love that dude
35:38 - thank you so much i can't see anyone
35:40 - right now but what was your name
35:42 - who was that they said that i'm here man
35:46 - yeah awesome abdul that's amazing man oh
35:49 - that's awesome to hear that dude
35:51 - uh and i'm really really glad that i
35:52 - hoped you understand so
35:54 - um because yeah like you see we have
35:56 - this kind of tree and we call this
35:58 - property because you're like
35:59 - oh i kind of need to pass the user down
36:02 - and down here and then
36:03 - down it and basically this leads to code
36:06 - which is coupled
36:07 - right now what does coupled mean it
36:09 - means that like if i change something
36:11 - over here i should
36:12 - be confident that i don't break
36:13 - something over here
36:15 - but in this case with all these like
36:16 - connected arrows
36:18 - yes the app might work but it might
36:20 - break if i change something over here
36:22 - if i change feed.js so that it no longer
36:24 - passes the user in so imagine if i it no
36:27 - longer does this it no longer does this
36:29 - then i'm kind of i'm kind of screwed
36:31 - because i'm like oh god the user just
36:33 - broke which means that this
36:34 - component doesn't render the user
36:36 - anymore right
36:37 - so how do we get past all of this
36:40 - headache okay
36:41 - so before first before we kind of solve
36:43 - this i'm going to show you guys
36:45 - the actual app itself so let's go ahead
36:47 - and do cd
36:48 - demo redux app so now i'm inside of the
36:51 - component
36:52 - and then here i'm going to go ahead and
36:53 - do code so it's a little neat trick so
36:55 - you can say code
36:56 - inside for you guys it'll be code dot
36:59 - dot but mine's going to be coding
37:00 - it keeps taking the focus away from my
37:03 - my mouse it's really annoying um
37:05 - okay and this opens up vs code now
37:10 - what i'm going to do is also if you're
37:11 - in the waiting room sorry guys
37:13 - um i'm going to actually give joe do you
37:16 - mind being do you want to be a co-host
37:18 - yep awesome i'm going to make you a
37:20 - co-host
37:21 - nice nice okay so
37:25 - now sonia just have a question cover
37:28 - what's this chord dot for
37:29 - right so i'll show you first how to
37:31 - install it and then i'll explain it
37:33 - so here you want to do command shift p
37:36 - and you see if you type in shell command
37:39 - it will say
37:39 - i'm using the beta version of vs code so
37:42 - i get like the additional features and
37:43 - stuff but
37:44 - in your one it will say install code
37:46 - command in path right
37:47 - so to to you want to do command shift p
37:50 - to get that up so quantity of p
37:52 - shell and then you should see install
37:54 - pokemon now the reason why this is
37:55 - really useful is because
37:56 - remember when i went back here to this
37:59 - bit right
38:01 - for you guys all you're going to have to
38:03 - do is so imagine like i'm inside of the
38:05 - right directory if i just do code
38:07 - dot right what it will do is it opens up
38:11 - so imagine i'm gonna show you guys
38:12 - against the code insiders
38:15 - dot but for you lot it will be code dot
38:18 - and then what that did is it opened up
38:19 - vs code
38:21 - with the with the files and everything
38:23 - on my left you see that
38:25 - sounds good all right so it's a very
38:27 - quick start
38:28 - to go ahead and open up vs code right
38:30 - perfect
38:31 - um also we crazy enough have half a
38:34 - thousand people watching on youtube
38:35 - right now
38:35 - and facebook so guys smash the thumbs up
38:37 - if you're enjoying that that's
38:39 - that's dope um that means there's 700
38:41 - people yeah
38:42 - there's like 700 people watching this
38:44 - right now that's awesome um
38:46 - okay so um right now
38:50 - what we're gonna do is we've got source
38:54 - so here so this is the app that you're
38:55 - gonna get so if you hit command j
38:57 - pull it up like this then you should get
38:59 - the little terminal pop up
39:00 - here and i'm going to go ahead and move
39:01 - myself you guys so we've got to come on
39:03 - j
39:04 - and then what you're going to do is
39:07 - you're going to have i'm going to make
39:08 - this super big for you guys
39:10 - can you you guys can still see my screen
39:12 - right yep yeah okay
39:14 - so npm stop npm start and then it will
39:17 - go ahead and spin up the app
39:18 - so give this a second also while this is
39:21 - doing this
39:22 - you see it will pop up the localhost
39:23 - 3000 um
39:25 - give this just a sec and then let me go
39:28 - ahead and check the our chat to see if
39:30 - there's any
39:30 - chat come through so we see props okay
39:32 - awesome
39:34 - right now you get this spinning thing so
39:36 - if you get this like awesome job
39:37 - right you already made some progress and
39:39 - you're in the right direction
39:40 - okay now what we're gonna do is
39:44 - we're gonna go back to our code so here
39:47 - and
39:48 - we're gonna go ahead and delete a few
39:49 - files we're gonna delete app.test.js
39:52 - so boom it's gone logo.svj
39:56 - svg sorry boom gone set up tests boom
39:58 - gone
39:59 - and then app.js is what started off so
40:02 - app.js
40:04 - is this point so remember priyanshu
40:07 - you're asking
40:08 - uh how do we know the tree right so this
40:11 - is where we start it's called app.js
40:13 - here so this is where
40:14 - the app kind of gets rendered now we're
40:16 - going to go into detail as to like
40:17 - where things get uh sort of pop like
40:20 - where things
40:21 - how it all works and stuff like that you
40:22 - can read the react docs for that
40:24 - but at this point this is where the app
40:26 - sort of starts off so to get started
40:28 - we're going to go into header go ahead
40:29 - and do h1 i'm going to say
40:31 - this is my fancy
40:35 - facebook app okay
40:38 - hashtag fancy down hey
40:42 - save okay and then we're going to go
40:44 - ahead and change this to a lowercase a
40:47 - right and then i'm going to because if
40:48 - we like to follow something called the
40:50 - bem
40:51 - convention them naming convention let's
40:53 - go to app.css just delete everything
40:56 - right save it all index.css go here
41:00 - and basically you get this like annoying
41:02 - hidden space so
41:03 - just go ahead and add this one liner
41:05 - code so basically just
41:06 - defeats all the margins uh by default
41:10 - given you don't really want by default
41:12 - margins applied to your stuff so
41:14 - that'll get rid of it so there we go
41:15 - there go back to apple just save it
41:18 - and then we go back to our um our code
41:22 - over here and now oops here we go
41:26 - now we should be able to see if we need
41:28 - to get rid of the logo
41:30 - save it go back to our code this is my
41:32 - fancy facebook app hashtag fancy dinner
41:34 - hey
41:35 - all right now everything's pretty good
41:37 - it's working
41:38 - so apparently to answer your question
41:42 - um here we had app.js so the next layer
41:45 - header feed login
41:47 - they would go here so imagine you had
41:49 - like login
41:50 - you had header you had
41:54 - oh now i'm starting to get it now i'm
41:56 - getting the three
41:57 - yeah like so if this is like this so the
42:00 - inside of the login will be
42:01 - like say i am passing over prop inside
42:02 - of the login uh component like instead
42:04 - of the login file
42:05 - so the prompt that will that will be
42:08 - passed inside of the login file will be
42:09 - below
42:10 - uh below login right yeah so it would be
42:14 - um so we're not doing page ruling today
42:17 - right so just so one thing to bear in
42:18 - mind right now imagine we only have like
42:21 - one page on the website if you want to
42:23 - have multiple pages
42:24 - use something called react rooter and
42:26 - and if you do the clones
42:28 - you'll be able to see how we use it i i
42:30 - i know about it i know
42:31 - okay awesome so in this case uh imagine
42:34 - the login right so
42:35 - if we wanted to have like imagine we
42:37 - dived into the login component
42:39 - and then inside the so imagine just
42:41 - pretend i'm inside the login component
42:42 - here i'm nested in
42:44 - and then you'd have some kind of like i
42:45 - don't know user i don't know
42:48 - i wouldn't really have a user input i
42:49 - just have an input but the point is that
42:51 - inside of here i might collect the user
42:52 - right so what we might do is have a user
42:56 - variable at the top here and then we
42:59 - sort of prepare it with use state
43:01 - so we can go ahead and do use state i'm
43:03 - going to auto import it
43:05 - and i'm going to do no okay so now we
43:07 - have the user here
43:08 - now what you're going to see is i'm
43:09 - going to pass the user in at this point
43:12 - and obviously this wouldn't work because
43:13 - i don't have these components built it's
43:15 - going to freak out but if i just do this
43:17 - so imagine i needed the user all of
43:19 - these different things right
43:20 - now already when something
43:24 - starts to feel wrong right it's probably
43:27 - wrong
43:28 - trust me when i say that when something
43:30 - starts to feel
43:31 - like it's like oh this doesn't feel
43:33 - right it feels like messy
43:35 - then chances are it's probably wrong
43:37 - okay
43:38 - so like at this point you're like okay
43:40 - why am i passing it in three times
43:42 - it i feel like i could do something a
43:44 - little bit better
43:45 - right so at this point what you could do
43:48 - is introduce something like the react
43:50 - context a um react context api or redux
43:52 - now in this case uh if we did this like
43:55 - imagine so we had the video post and
43:57 - posted yes so imagine we had the feed
43:59 - and inside the feed so i'm just going to
44:01 - pretend this is inside of feed okay i
44:02 - know it's not a good example but it's
44:04 - just
44:04 - so we can see it in one page so imagine
44:06 - i had post like the post itself so
44:10 - post and then imagine you had another
44:12 - one you had a bunch of other ones so
44:13 - they're inside a post that means you're
44:15 - going to have to drill the user
44:18 - inside of there as well so you're going
44:20 - to have to do you're gonna have to pass
44:21 - the user from this
44:22 - component inside and you see your user
44:25 - just gets thrown around
44:26 - your app and it looks like it looks
44:27 - horrible so this isn't good coding
44:29 - right so what we're gonna do now
44:33 - is we're gonna go ahead and
44:37 - create we're going to go ahead and
44:39 - basically change our structure so rather
44:41 - than doing this prop drilling right we
44:43 - don't want this
44:44 - so we're going to go ahead and cut all
44:45 - this crap out so we're going to go ahead
44:46 - and get rid of all this
44:48 - don't want any of this stuff okay so i'm
44:50 - going to go ahead completely get rid of
44:51 - it
44:54 - and this will make life a little bit
44:56 - easier so now
44:57 - boom okay so what we're going to do now
44:59 - is instead
45:00 - imagine like we basically kind of add a
45:02 - wrapper around the app so imagine like
45:04 - i'm kind of like
45:05 - wrapping the entire app
45:08 - with like a global state
45:11 - right so imagine like we wrap it in
45:16 - something like this so oops let me go
45:19 - ahead and put it here
45:20 - so imagine we've got this and we've got
45:21 - like a global
45:24 - state right now what what lives inside
45:26 - the global state
45:28 - i might imagine it's just like global
45:29 - variables right
45:31 - so an example of a global variable could
45:33 - be the user
45:34 - right that means think of it this way
45:36 - now so obviously we still have this
45:38 - renders this
45:39 - this renders this this renders this and
45:42 - then
45:43 - this might render these things this one
45:45 - might render this
45:46 - oh no no i mean the video is not going
45:48 - to render here but the feed could render
45:50 - video post or normal post okay now
45:52 - imagine
45:53 - inside of the login.js we
45:56 - we get the user's data yeah so what we
45:59 - can do at this point
46:00 - is imagine let me just go ahead and
46:01 - write the user over here for a sec
46:04 - and i'm going to cut this one so imagine
46:05 - the users inside of our global state
46:08 - right now what i can do is when the user
46:10 - logs in i can push
46:12 - the user oops so much multitasking it's
46:15 - insane when we do this all right so
46:18 - i can push the user into the global
46:20 - state
46:21 - right so now the user is sitting inside
46:23 - of a global sort of wrapper
46:25 - think of it that way yeah now what's
46:27 - awesome about this is i need the post of
46:29 - i need the user over here
46:31 - so all i can do is i can just pretty
46:33 - much grab it
46:35 - from the uh from the global state and
46:38 - use it inside of post.js
46:42 - yeah so you see like how simple that is
46:45 - so rather than having all those extra
46:47 - additional arrows
46:48 - now if i need it inside of video.post i
46:51 - can pretty much go ahead
46:52 - and do that as well so i can do the same
46:55 - thing
46:55 - where i can go ahead and do um is it
46:57 - just
46:58 - like slide changing yeah so i can go
47:00 - ahead and do video post.js now
47:02 - okay so you see it's very very slick
47:05 - in how we do this right so and then say
47:08 - if i need it inside of the header.js
47:10 - i can do the same thing i can pretty
47:11 - much go ahead and just
47:13 - pop it in there right so the user can be
47:16 - pretty much we can push anything into
47:18 - the global state
47:20 - and we can use it anywhere in the app so
47:22 - this
47:23 - completely eradicates the prop drilling
47:25 - problem
47:26 - right now there's two global state
47:29 - libraries that we're going to talk about
47:31 - one is the most famous redux right so
47:35 - redux is something that we've probably
47:37 - heard of if you haven't you will put
47:38 - higher hero by at some point
47:40 - redux is like the think of it as the
47:43 - the pro sort of solution right so it's
47:46 - kind of like
47:47 - the the one that they use mostly in
47:49 - production
47:50 - right they're going to use that in
47:51 - production and um
47:56 - we're gonna they're gonna use that in
47:57 - production uh and then you've got the
47:59 - react context api
48:00 - right so the react context
48:03 - api now this one is the sort of easy
48:07 - easy one to implement so you've got two
48:09 - different libraries here redux and your
48:11 - react context api
48:12 - now don't be don't think that just
48:16 - because it's easier
48:18 - it's not as powerful the react context
48:20 - api is extremely powerful
48:23 - right so it's a very very simple like
48:25 - simple pattern
48:26 - but it's very very like once you
48:27 - understand the react context api it
48:29 - allows you to use this global state
48:30 - mechanism
48:31 - and still have everything working as you
48:33 - need it
48:34 - and redux however is a lot more
48:37 - difficult to implement
48:38 - but it uses the same pattern but it's
48:40 - very powerful which is why we use it
48:42 - in in industry while loads of companies
48:44 - use redux now
48:46 - what should you do my advice is you
48:48 - learn react context api
48:50 - use it in all of your side projects and
48:52 - everything because the pattern
48:54 - that you use in the react context api is
48:56 - the same pattern that you end up using
48:58 - in redux
48:59 - so if you learn it in the react context
49:00 - api when the
49:02 - basically the easy way then pretty much
49:04 - you you hack the system
49:06 - and you kind of shortcut the sort of
49:08 - learning curve and learning redux is a
49:10 - breeze
49:11 - so that's my advice and we're going to
49:12 - do that today i'm going to show you guys
49:14 - how we go ahead and implement this so
49:16 - i'm going to create a very very simple
49:18 - experience here so the first thing i'm
49:19 - going to do
49:20 - is i'm actually going to go ahead and
49:23 - create
49:24 - a login.js so i'm going to go ahead and
49:26 - do login.js
49:28 - and here i'm going to do rfce boom like
49:31 - this
49:31 - and rfc so this is my login component so
49:33 - here i'm going to say i
49:34 - am the login component okay
49:38 - and imagine in here we just have a
49:39 - button and this button just says login
49:41 - and
49:41 - i'm going to really exaggerate this
49:43 - example for a second guys yeah
49:45 - um so uh i'll see you later patch
49:48 - awesome dude um he's gotta run i'll chat
49:52 - with you tomorrow yeah
49:53 - yeah cool stuff dude oh yeah we're gonna
49:54 - be doing a session tomorrow so
49:56 - yeah cool come in yep see you then bro
49:58 - uh
50:00 - uh so now we have the logging component
50:03 - patch does one on one sessions with me
50:04 - that's what he was talking about as well
50:05 - if anyone wants to do that just give me
50:07 - a shout
50:07 - and we can we can arrange something um
50:10 - so login
50:11 - so now um we have the
50:15 - login component now we're going to keep
50:16 - it so simple i'm not even going to have
50:17 - an input file i'm just going to kind of
50:19 - fake the login all right so imagine when
50:21 - you log in
50:22 - it fires off a function so here we have
50:24 - on click um
50:26 - let me go ahead and admit so we have on
50:28 - click and then
50:30 - imagine this fires off a login uh log
50:32 - into your app function
50:34 - so we'll need to create that function up
50:35 - here so i'm gonna go ahead and say const
50:38 - log into app
50:41 - this is an arrow function and then here
50:43 - basically
50:45 - do i hate the new zoom update honestly
50:50 - if you if the zoom team are watching
50:52 - this you guys
50:52 - always ruin stuff so don't keep touching
50:55 - it
50:56 - do some login stuff because oh god it's
51:00 - so annoying
51:00 - um okay so login to app now here we do
51:04 - some login stuff right so in app.js
51:06 - i'm going to show you guys the first way
51:08 - which is the bad way okay
51:09 - and then i'm going to go ahead and
51:10 - explain it and then show how we refactor
51:12 - it i think that'll be the most easy way
51:14 - to for you guys to understand okay
51:16 - so user set user what we're going to do
51:18 - now is i'm going to pass
51:19 - through the set user right so i'm going
51:22 - to pass through set user
51:24 - so this is the modifier function which
51:26 - allows us to change the user so here i'm
51:28 - going to pass through that modifier
51:30 - here right so if i go into my login oh
51:32 - and also
51:33 - right now it's not imported so a little
51:35 - cool trick if you press ctrl spacebar
51:38 - you get this pop-up auto import boom i
51:40 - got the import
51:42 - now i am the login component shows up
51:44 - okay
51:46 - so um i saw a comment from delete b
51:49 - saying
51:49 - react context api is easy but some
51:51 - companies are needing redux yes
51:54 - but my advice to you guys is learn
51:57 - the react context api first and then
52:00 - picking up redux is a breeze
52:02 - so it's a little trick
52:05 - trust me do it that way because um i
52:07 - remember when i was learning
52:09 - i didn't i didn't even and this is a
52:11 - little story for you guys i didn't even
52:12 - know
52:13 - uh redux when i first landed my land in
52:16 - my first job i literally
52:18 - landed the job and i was like i used
52:19 - something called flux which is kind of
52:21 - similar
52:22 - right and then i said like but look but
52:25 - listen like i'm willing to learn this
52:27 - right i'm really willing to learn this
52:29 - and then
52:31 - what i did is honestly i kid you not for
52:33 - the entire first week of my job
52:35 - i pretty much went into work and on i
52:38 - literally downloaded a redux tutorial
52:40 - on youtube off youtube and i literally
52:42 - watched the tutorial
52:44 - um uh on the train to work every day and
52:47 - then i pretty much just like
52:48 - i just went with it and i went with i
52:50 - failed a bunch of times and eventually i
52:51 - just
52:52 - got it right um corey says sonny you
52:55 - literally have helped me gain
52:57 - years back with all these hacks honestly
52:59 - the the little hacks
53:00 - really and i appreciate that dude the
53:02 - little hacks really do
53:04 - make such a difference right they really
53:06 - do make such a difference and they do
53:08 - save you a lot of time
53:09 - so here we have the login component
53:11 - right
53:12 - now what i'm going to say now is imagine
53:15 - the user right so here on the
53:17 - on the app.js so at this top level
53:20 - right i'm going to have this is the
53:22 - fancy facebook app
53:24 - you are logged you are
53:28 - you i'm just going to say you might be
53:30 - logged in right you might be logged in
53:32 - actually i'll show you guys i'll show
53:33 - you guys the proper way
53:34 - we'll do some jsx and i'm going to say
53:36 - if you if there is a user
53:38 - oh man it keeps taking my focus if you
53:40 - are a user
53:42 - then we're going to say the
53:46 - i'm going to use backticks say the user
53:49 - logged in is and then i'll render the
53:53 - user
53:54 - otherwise if there is no user so this is
53:56 - something called a ternary
53:58 - uh then go ahead and do the following so
54:00 - we're going to say
54:01 - backticks we're going to say i don't
54:04 - really need a backtick
54:05 - say no user is logged in
54:08 - okay save it um back to the boom
54:12 - so now if we go to our app it says no
54:14 - user is logged in
54:16 - okay so i'm going to go ahead and zoom
54:17 - in so it says no user is logged in right
54:19 - now
54:21 - so but when i click login
54:24 - so priyanshu asked earlier where do i
54:26 - pass in the props
54:27 - so whenever you render create a function
54:29 - the props come through as a as an
54:31 - argument here
54:32 - right so okay yeah so here i pass
54:35 - something in a set user
54:37 - the name was set user so here to access
54:40 - it
54:40 - all i need to do is say props props.user
54:43 - yep
54:44 - exactly or you can do the es6 standard
54:47 - and you kind of like destructure here
54:49 - and you just get the set user out of it
54:52 - so this means that you're kind of
54:54 - breaking apart the object at this point
54:56 - and you you don't so now i don't know
54:58 - that's cool yeah so you could just do
54:59 - that
55:01 - that's like something which is kind of
55:02 - cool you can definitely go ahead and do
55:04 - that
55:05 - yeah um so but the reason why when i'm
55:08 - teaching it the reason why i don't like
55:10 - to do is because
55:10 - those people who don't know
55:12 - destructuring may not know that
55:14 - like what i'm talking about so that's
55:15 - why i did this right so imagine when we
55:18 - click the log into that button i do
55:19 - props dot set user and then here i say
55:21 - let's just say sunny
55:22 - okay or i'm gonna do a little cloud
55:25 - shout out go ahead and follow my
55:27 - instagram
55:28 - okay so sssanga um
55:31 - there we go so you got that right so now
55:33 - when i log in
55:34 - it should this is what this is the
55:36 - theory right now okay
55:38 - we're going to go ahead and we pass
55:40 - insert user
55:41 - and then when i click login it should go
55:43 - ahead and set the user to
55:46 - sanger and then it will basically go
55:48 - ahead and it should now re-render and
55:49 - say the user logged in
55:50 - is anger okay so go back and if i go
55:54 - back refresh
55:55 - then i'm going to click log in okay
55:59 - the user logged in is this is anger
56:02 - okay which is awesome if we're
56:05 - destructing it yeah it would just be
56:08 - uh set user and then parentheses and
56:11 - then like
56:13 - yes whatever you want to put in it right
56:15 - exactly
56:16 - yeah exactly uh somebody else was about
56:19 - to ask a question what was that one
56:22 - no it's not a question i just asked what
56:25 - is your full name
56:26 - oh sergeant sunny sings anger
56:29 - yeah okay
56:33 - okay dope um sunny can you please
56:36 - explain the condition again yeah so
56:39 - i'll explain this condition yeah so this
56:43 - is something we call a ternary
56:44 - right so here user is basically
56:48 - uh so here we're saying if the user
56:51 - exists
56:52 - so yeah so if this if this uh user
56:54 - exists
56:55 - then we're basically going to go ahead
56:58 - and say
56:59 - the user logged in is this so basically
57:02 - this is like
57:02 - this can be any kind of boolean right so
57:05 - if this is true
57:06 - it will go here and if it's false it
57:09 - will go here
57:11 - all right now if you're not familiar
57:13 - with turn of ternary
57:14 - i keep calling it tertiary thank you
57:16 - leaf uh for explaining that
57:18 - but yeah um i i always forget that i
57:21 - always call it ternary
57:22 - tertiary whatever it is but ternary
57:24 - opera yeah and this is really handy in
57:26 - jsx
57:28 - so this will make your your stuff really
57:30 - clean and very concise
57:32 - um so that's going to help you out a lot
57:36 - so so sunny the javascript version of
57:38 - that would be if
57:39 - user yeah blah blah blah exactly
57:42 - the user logged in as blah blah blah yes
57:45 - so literally you have this
57:46 - this is a compressed notation exactly
57:49 - you have something like this like the
57:54 - conditional class simple way in one
57:56 - sentence conditional clause
57:58 - yeah try not to to to use the word class
58:00 - the reason being is because class can
58:02 - get thrown around and
58:03 - react and it kind of froze everyone
58:04 - around you said clause not class
58:06 - oh oh sorry sorry yeah close yeah
58:10 - i mean we cannot use this statement in
58:12 - the jsx right
58:13 - yeah exactly so so in jsx you can't use
58:16 - this which is why i use ternary
58:18 - plus i mean like look at the chunk of
58:20 - this compared to this like
58:22 - it's very clean so um try and get used
58:25 - to that but yeah that's a good question
58:27 - um so now guys what we're going to show
58:30 - i'm going to show you so the reason why
58:31 - that works
58:33 - in the jsx can you do multiple levels of
58:36 - ternaries like uh
58:38 - if this then another uh instead of true
58:41 - add another condition
58:42 - so you can you can you go level down how
58:44 - many levels down can you go
58:46 - you can so imagine like if there's a
58:48 - user um
58:51 - okay if there's a user and the user is
58:53 - equal to
58:56 - sasanga then
58:59 - you see it can it can get a bit messy
59:01 - now though okay okay
59:02 - then you can say that okay sonny is
59:05 - logged in
59:07 - yeah else
59:10 - someone else is logged in
59:14 - else no user is like this
59:18 - all right so you can get confused have i
59:21 - logged in
59:21 - sonny is logged in yeah your board that
59:24 - whiteboard
59:25 - uh no i wasn't doing the whiteboard uh i
59:28 - was just showing this one
59:38 - you might need to but don't
59:41 - yeah don't don't do it like honestly i
59:43 - wouldn't say i would just try
59:44 - there might be some other ways to do
59:45 - that yeah and to be honest if you find
59:48 - yourself doing that
59:49 - remember your code should be uh somewhat
59:52 - of like
59:52 - very very easy to maintain and sort of
59:54 - you know um
59:55 - [Music]
59:56 - uh like read and if you do that it kind
59:59 - of becomes like
60:00 - uh you know like it gets so nested and
60:03 - messy it kind of gets a bit annoying to
60:04 - read
60:05 - so i would i would avoid doing that but
60:07 - now we've got the set user so that's how
60:08 - so i hope that made sense for you guys
60:10 - so now when we use set user we're
60:12 - basically
60:12 - that was the first way right that's the
60:14 - first way of doing it
60:15 - now what i'm going to do is i'm going to
60:17 - implement the react context api very
60:19 - quickly
60:20 - i'm not going to jump too far into it
60:21 - because i just want to show you guys
60:24 - the sort of um a quick breakdown of how
60:27 - to do it so
60:28 - uh and this is my advice to you i never
60:30 - remember off the top of my head
60:33 - the files i need to do okay i literally
60:35 - would i don't know i do it once
60:37 - and then i just fall back to an old file
60:39 - so literally right now i'm gonna go
60:40 - ahead and
60:41 - go ahead and say open i'm going to say
60:43 - clone which clone have i got on my
60:45 - computer
60:46 - uh i've got so many clones let's go
60:48 - ahead and go open up the amazon clone
60:50 - okay so boom and open up the amazon
60:52 - clone
60:53 - and then here in the amazon clone i'm
60:56 - going to go down and i'm basically just
60:57 - going to go ahead and drag some
60:58 - code into my workspace go add folder to
61:01 - workspace
61:02 - and now what i'm going to do is rather
61:03 - than remembering every time
61:05 - i just go ahead i know i need this file
61:08 - i need state provider so i'm going to go
61:09 - ahead
61:10 - copy the state provider.js here
61:13 - right so this again all you need to do
61:16 - i'll explain this in a sec but you need
61:18 - the state provider
61:19 - i need a reducer so i'm going to go
61:21 - ahead and grab a reducer.js
61:23 - i'm going to paste it inside and then
61:25 - i'm going to go ahead
61:26 - and grab a in index.js
61:30 - so you see here we need to wrap our
61:33 - components so i need to go inside of
61:34 - index.js
61:35 - and basically i'm going to go into my
61:37 - index.js and
61:38 - just wrap it from amazon right yeah so
61:41 - this is just from the amazon clone but
61:43 - honestly like
61:43 - all you need to do is you don't need to
61:46 - stress about like oh man
61:47 - didn't actually catch what he did there
61:49 - i'll quickly show you guys how i
61:51 - wired it and look honestly this is
61:54 - um uh let me go ahead and
61:58 - god some people are super annoying on
62:00 - youtube uh
62:01 - okay so now what we're going to do is
62:03 - i'm going to pretty much remove this
62:05 - file
62:05 - actually i'll keep it in there for now a
62:07 - little bit but the point is
62:08 - so a few changes happened here we've got
62:10 - one and we've got state provider.js now
62:13 - this one
62:14 - is basically preparing the data layer so
62:16 - this global state
62:17 - okay this is basically preparing the
62:19 - global state and
62:21 - what we're going to do is we're going to
62:23 - go ahead and
62:25 - um here we do a bunch of imports and
62:28 - then
62:28 - here we say export con state context
62:31 - equals create context
62:33 - right so here what we're doing is we're
62:35 - basically this is using
62:36 - this is basically preparing the concept
62:39 - the context
62:40 - so this one which in the context in this
62:42 - case is just think of it as the global
62:44 - state
62:44 - okay then this is basically what allows
62:47 - us to wrap
62:48 - app.js see inside of index
62:51 - here so this is basically so literally
62:54 - think of it as
62:55 - this wrapper is the state provider see
62:58 - that
62:59 - because it's literally providing the
63:01 - state
63:02 - the global state to the app so it
63:04 - literally wraps it
63:06 - right so i hope that makes sense because
63:09 - it's literally just sitting around it
63:10 - right
63:10 - now this takes two things it takes an
63:12 - initial state and something called a
63:13 - reducer
63:14 - now if i go inside of the reducer
63:18 - so here i'm going to i'm going to
63:19 - simplify this code
63:21 - because we don't need any of this right
63:23 - now so i don't need this
63:26 - i don't need any of this
63:30 - all i need is that okay um and now this
63:34 - is
63:34 - an example of a reducer now what the
63:36 - hell is a reducer
63:38 - right so like if we have a reducer or
63:41 - something where
63:42 - remember when i said we pushed something
63:44 - from so imagine we're inside the
63:45 - login.js component
63:47 - and we log in and then we pop we push
63:50 - the user into the global store
63:52 - right so in order to push the user into
63:54 - the global store
63:55 - we use something called um we dispatch
63:59 - like an action
64:00 - right so in this case i would dispatch
64:02 - like something like like a
64:03 - set user action right
64:06 - and this would basically just contain an
64:09 - object which basically has the user
64:11 - inside of it
64:12 - right so imagine this kind of is like a
64:14 - message
64:15 - or so you're basically sending like a
64:17 - message to
64:19 - the data like this this global state
64:21 - saying hey go ahead and set the user
64:24 - and and this is the user i want you to
64:25 - set it to and then what happens is is
64:28 - the reducer
64:29 - imagine like there's this thing there's
64:30 - this magical thing called the reducer
64:33 - which basically just sits on the data
64:34 - there so think of it that way
64:36 - it literally just sits on the data there
64:38 - right so i'm going to use different
64:40 - color because that's pretty confusing
64:41 - but imagine we had like this and let's
64:43 - go ahead and do reducer
64:46 - you guys can see over here okay so we
64:48 - have the reducer
64:49 - now this reducer is just always
64:51 - listening
64:52 - so imagine like it's just listening
64:54 - around the entire data and then here
64:56 - it says whoa whoa i just got a message
64:58 - thing to set the user
65:00 - and this is what i'm saying it to you so
65:02 - inside the reducer
65:04 - here we have a switch which is basically
65:07 - saying
65:08 - set the user so here it's saying
65:11 - um return and
65:15 - um it's basically saying return whatever
65:18 - the original state looked like
65:20 - so remember like this is the global
65:24 - state so this is called a spread
65:25 - operator i'm not going to dive too much
65:27 - into a spread
65:28 - but basically you want to make sure that
65:30 - you keep whatever the state currently
65:32 - was
65:32 - and then then we're going to just change
65:35 - the user and then remember it passed an
65:36 - action which is this thing
65:38 - and then action.user allows us to get
65:40 - this thing
65:41 - this little message right so now what
65:44 - we're saying is
65:44 - okay we push the message and it pretty
65:47 - much goes ahead and changes the user and
65:48 - then if it doesn't say for example i
65:50 - passed in
65:51 - a message like uh update user to someone
65:54 - and we don't have that listen nothing's
65:57 - listening to it here so
65:58 - by default we just return the original
66:00 - state it doesn't break anything
66:01 - right now um thank you
66:05 - as well because i saw loads of people
66:06 - said they liked that explanation
66:08 - um inside of inside of youtube so that's
66:11 - awesome
66:12 - uh okay so now yes
66:15 - honey just a quick question cover so how
66:18 - do you know which is local state and
66:20 - which is global state insider code
66:22 - editor i don't like i can't
66:23 - differentiate
66:24 - between a global and local one okay so
66:27 - [Music]
66:28 - i'll show you the way to look at it is
66:32 - imagine we're inside of app.js right
66:35 - here
66:36 - this is like you can see this is local
66:38 - state because i'm literally declaring it
66:39 - here
66:40 - the variable's here and this is being
66:42 - used here yeah
66:44 - now the way i would pull it from the
66:46 - global state
66:47 - so imagine i've got my reducer the store
66:50 - by
66:50 - the initial state is this right the user
66:54 - and then if i go ahead and i've got a
66:55 - snippet of code somewhere here
66:57 - i think it's this one yeah oh okay so if
67:00 - it's outside a function
67:02 - like then it's global uh no no i'll show
67:04 - you how it works now so
67:06 - uh back to our code so forget the amazon
67:08 - code for now so
67:10 - uh to so i can pull the user from our
67:12 - local state here
67:14 - right so by default this is pretty much
67:16 - where i define it
67:17 - where i use it everything like that now
67:20 - here if i want to pull it from the
67:22 - global state
67:23 - i basically need to say this right so
67:26 - this is how we do it
67:27 - so you say const and then you basically
67:30 - get two or two things so let's just
67:32 - comment out the local one
67:34 - we basically get the state and then we
67:35 - get this special thing called dispatch
67:37 - right okay so we get
67:41 - a state and then something called
67:42 - dispatch now um
67:45 - here we have use state value so i need
67:47 - to import this
67:48 - and this is from the state provider so
67:50 - that file that we created earlier
67:51 - this one here right and what this is
67:54 - doing
67:54 - is it's basically going ahead and it
67:56 - gives you two things it gives you the
67:57 - global state and it gives you a dispatch
67:59 - now if i want to get it from here
68:00 - i can say state.user right
68:04 - and then this will basically go ahead
68:05 - and say state.user so now it's getting
68:07 - it from the global state
68:12 - yeah but remember you can do es6 you can
68:14 - also
68:15 - break it down like this pretend she
68:17 - loves that so you can pretty much go
68:18 - ahead and do this
68:20 - and then boom yeah but you see
68:26 - uh in one of your clones you name the
68:28 - file state provider you named it that
68:31 - layer
68:31 - yeah yeah because i was trying to test
68:33 - if it was easier for you guys to
68:34 - understand with data layer
68:36 - um because basically essentially just
68:38 - think of this this is the state provider
68:40 - right it's kind of like this thing uh
68:42 - but think of it also as the data layer
68:44 - that's how i kind of explain it
68:46 - and you can get more complicated you can
68:48 - have different layers
68:49 - of the data layer and then in redux you
68:51 - call that slices of state
68:53 - so you can have different reducers and
68:54 - and stuff like that but whenever i
68:56 - asked because i wanted you i wanted to
68:58 - ask you what's the
68:59 - standard like which would be better to
69:02 - use
69:03 - so right now i would just use state
69:05 - provider um
69:07 - again it doesn't matter too much at this
69:09 - point um
69:10 - just learn the pattern right so
69:13 - i have a question yeah
69:18 - i think the reducer acts as a switch
69:20 - between the data layer and the
69:21 - components is that right
69:23 - yeah um so okay so imagine this is the
69:26 - reducer right yes so it does
69:27 - it has a switch inside of it because
69:29 - it's listening to different actions
69:30 - right it's trying to like
69:32 - say hey like what kind of action came in
69:35 - right so what kind of action came in
69:39 - um and then think of it in a way that so
69:41 - i'm going to go ahead and pull up a
69:42 - diagram quickly because i think this
69:44 - might actually help us out so
69:45 - let's go ahead and type in redux or
69:47 - something like that all right so redux
69:49 - has the exact same pattern
69:50 - as um the sort of
69:54 - so let's go ahead and go here i'm going
69:56 - to go ahead and make this bigger
69:58 - so i would highly recommend that you all
70:01 - go ahead and read some stuff about like
70:03 - uh redux and stuff like that so
70:06 - okay so here so imagine now i've got
70:10 - uh so this is react and redux okay so
70:12 - imagine it's the same as react context
70:14 - api
70:14 - so we have the view this is the
70:16 - component okay
70:17 - the subscribe all that's saying is
70:20 - essentially
70:21 - uh just like we have here this is
70:22 - subscribing basically we're just pulling
70:24 - the user
70:25 - right so imagine when we had the old one
70:27 - so it's a state
70:28 - here we're basically subscribing that's
70:30 - that the dispatch i haven't showed you
70:32 - guys in exact use case but i'll show you
70:34 - right now
70:35 - so what we can do is i can copy this
70:37 - line of code go into login
70:39 - rather than doing this set user crap
70:41 - like this rubbish i don't want to pass
70:42 - this for
70:43 - every time no i want it to be clean i
70:45 - don't want to have
70:46 - like things passed through and all that
70:48 - stuff so i'm going to go ahead pull in
70:50 - this magic line of code here
70:52 - and the reason why i call this magic is
70:53 - because honestly once you get used to
70:56 - doing this it becomes very simple to go
70:58 - ahead and um
71:00 - it gets very simple to go ahead and
71:03 - reuse it right so this gives you the
71:04 - state and this dispatch
71:06 - dispatch is like a gun that allows you
71:08 - to basically
71:09 - shoot actions into the data layer so
71:11 - remember i showed you guys
71:12 - here so where we shoot the action into
71:14 - the data now right
71:16 - so here what i can do now is rather than
71:18 - prop start set user
71:20 - i can do dispatch and i basically just
71:23 - pass
71:24 - an object into dispatch and i basically
71:26 - say the type
71:27 - is remember inside the reducer we had
71:30 - set user so the type is a set user
71:33 - uh type of action and i'm passing a user
71:35 - in and in this case i'm going to make
71:36 - the user
71:37 - ursus anger right so
71:41 - now i've dispatched when i click the
71:43 - login button
71:45 - then when then that gets picked up
71:47 - inside the reducer
71:49 - so when i click the login button it's
71:51 - going to dispatch this action that gets
71:52 - picked up inside a reducer
71:54 - and then it goes and manipulates the
71:57 - store
71:58 - so here remember the store or state
72:00 - doesn't really matter
72:02 - store or state right um so now you've
72:05 - got the state and then here it will go
72:07 - ahead and basically
72:08 - change the user
72:11 - okay so it changes the user now
72:15 - this then because because we're
72:17 - subscribed it will actually update and
72:19 - re-render
72:20 - so now just give me one sec so now here
72:23 - what i can do is because we're mapped to
72:25 - the state here
72:27 - now everything if we've done it
72:28 - correctly should be working so let's go
72:29 - ahead it says state provider is not
72:31 - defined on index.js
72:32 - so here i need to go ahead and import
72:34 - state provider
72:36 - so i'm just going to say import state
72:39 - provider
72:41 - from state provider
72:45 - there you go and then go back refresh
72:49 - state provider does not contain default
72:51 - okay means to
72:52 - explicit and there we go okay so this is
72:55 - my fancy facebook app hashtag fancy
72:57 - dinner i'm looking component login
73:00 - oh something happened right let's check
73:04 - out what happened
73:04 - so what i do is when i debug this
73:08 - i'll show you guys i'm going to open up
73:09 - my inspector
73:12 - and i'm going to click the console and
73:14 - nothing seemed to happen
73:15 - right it just kind of went disappeared
73:17 - so the first thing to debug
73:19 - right what i like to do is i like to go
73:22 - to producer.js
73:23 - and inside here i like to do console.log
73:26 - i always log out my action
73:28 - so this shows me did this action
73:30 - actually get fired off this one right
73:32 - here
73:33 - right so let's check it out so i'm gonna
73:36 - go ahead and click login
73:38 - okay so if i actually fired off the
73:40 - action
73:41 - type was set user the user was sssanger
73:45 - okay so what i can do now is i can go
73:47 - ahead go back to my code check it out
73:49 - and say okay
73:50 - action.user cool um
73:54 - yep this is cool and then i can go back
73:56 - to my
73:57 - app and here it says state.user so
74:01 - really
74:02 - i mean at this point oh okay so remember
74:04 - this one we didn't actually change it so
74:07 - we had that double tertiary and that's
74:08 - again a bad reason another reason why
74:11 - you shouldn't do that so
74:12 - i'm gonna say logged in as
74:17 - state dot user so save let's go back
74:20 - and now refresh login
74:23 - oh nice so you see it just flew through
74:27 - the entire cycle there
74:29 - okay so literally the entire redux cycle
74:32 - this entire cycle just processed and
74:34 - then it re-rendered
74:35 - so here logged in as and to prove that
74:37 - i'm not lying to you guys
74:38 - if i go into login.js and i type in like
74:41 - uh let's just say like priyanshu
74:44 - so let's say like he's about to log in
74:46 - so now if i go refresh and i go
74:48 - boom logged in as pre-entry right so
74:52 - dispatch the action set user and shoe i
74:54 - hope i spot it right um
74:56 - and then yeah and there you go yeah so
74:59 - you see
74:59 - like this whole cycle works really
75:01 - really nice okay
75:03 - um
75:04 - [Music]
75:20 - yes yes exactly so you see what he's
75:23 - saying here guys
75:24 - you see i passed in uh an action and
75:27 - then here was user right
75:29 - um and i'm sorry in login i dispatched a
75:32 - type
75:32 - and then a user and then here you have
75:35 - to match
75:36 - action.user to that to that exact same
75:39 - key so if i change this to like username
75:42 - then this in the reducer would have to
75:44 - be action.username
75:46 - even if i mapped it to user the action
75:49 - dot would have to be the same so you
75:50 - want to keep it consistent to be simple
75:53 - okay right now this
75:56 - is awesome yeah yeah just
75:59 - one quick question i have worked with
76:01 - flux in the past
76:02 - so there we used to have lots of
76:06 - stores right yeah but in uh redux as
76:09 - yeah you showed the diagram we had only
76:11 - one store so
76:12 - is it like uh in redux we only have one
76:15 - store
76:16 - is that the limitation or something that
76:18 - is created for say
76:20 - so good question to answer it the first
76:22 - thing
76:23 - is i also learned flux so uh
76:27 - if you are doing flux it's going to be
76:29 - really kind of easy for you to move
76:30 - across
76:32 - to answer your question though this is
76:33 - the react context api
76:36 - being used in a uh redux like fashion
76:39 - um we are going to be covering redux i
76:41 - see so many people asking about it
76:42 - in in chats yes but we are going to be
76:44 - covering it now um so this is
76:46 - the react context api okay and also jose
76:49 - says is it redux hooks
76:50 - anything with hooks is not redux it's
76:53 - react hooks is react um
76:57 - yeah so now to answer your question
77:01 - inside of the direct context api you can
77:03 - have multiple stores but in this case
77:05 - i've only used one and now sort of maybe
77:08 - might not teach that
77:09 - just yet but in redux you can actually
77:12 - have the practice is to break it up
77:14 - into multiple stores yes so you would
77:17 - have like the user store
77:19 - the basket store the products
77:22 - yeah i mean it depends how granularly
77:24 - you want to get but
77:26 - to answer your question the practice is
77:28 - yes to split your code up into different
77:30 - stores
77:32 - okay yes so sorry you just went through
77:35 - the redux flow right you just
77:38 - demonstrated the redux pattern between
77:40 - no
77:41 - yeah this one right there yep did you
77:43 - just demonstrate this
77:44 - so there is is there is there anything
77:47 - more to redux than this i mean where is
77:49 - the where does the
77:50 - integration with postgres sequel or
77:52 - sequel where does that is that
77:53 - downstream upstream
77:55 - um so so don't that's just completely
77:58 - forget about
77:59 - uh postgres and sequel and stuff because
78:01 - that's a whole different
78:02 - department okay as such uh to do that
78:06 - you you
78:06 - need to start doing requests and that
78:08 - kind of is completely separate from what
78:10 - we're doing here um
78:12 - so try and think of it separate to that
78:14 - but yes
78:16 - we we kind of ran through the same
78:17 - pattern that redux uses
78:19 - uh but right now what we're going to be
78:21 - doing thank you so much calvin kopanda
78:22 - by the way five
78:23 - uh dollar donation he goes i'm a simple
78:25 - man it's here live session with sonny i
78:27 - click i appreciate all the value keep
78:28 - giving us feeling more comfortable thank
78:29 - you so much dude
78:30 - um but yeah what i was going to say is
78:32 - um joe to
78:34 - to answer your question you in redux you
78:36 - have things like middlewares
78:37 - right so imagine every time you went
78:40 - through this flow right so imagine you
78:41 - went through this flow
78:42 - you can have something middle west and
78:44 - then for example you can have a
78:45 - middleware
78:46 - uh i can't remember which point it is i
78:48 - think it might be like here
78:49 - or here but basically you can have an
78:51 - action that dispatches every time the
78:53 - middleweight could be simple thing it
78:54 - could be like logging out every action
78:56 - and it can also be something which is
78:58 - super like uh
79:00 - sort of technical like check if the user
79:02 - is logged in
79:03 - every time this cycle runs but that
79:06 - could be a separate like a node.js kind
79:08 - of an interaction
79:09 - uh separate independent of of this
79:12 - pattern basically uh you can you can
79:15 - really customize it to do whatever you
79:17 - want honestly you can have a middleware
79:18 - which
79:19 - makes a request i wouldn't say it's a
79:20 - good idea because every time
79:23 - you change anything it might go ahead
79:25 - and make a request
79:26 - to your network which isn't the best
79:28 - thing to do but uh
79:29 - i think what we'll do now is i'll show
79:31 - you how to implement redux because we've
79:32 - never done that
79:33 - on a on a stream or core or anything and
79:36 - i think that would be really handy for
79:37 - you guys so
79:39 - uh you guys saw now right like it was
79:41 - actually pretty simple
79:42 - like i know it may not seem 100 simple
79:45 - but
79:46 - in reality with a little bit of practice
79:48 - this would be you'll get very
79:50 - comfortable with this right uh you get i
79:53 - never thought about that idea said
79:54 - reduce plus flux equals redux
79:56 - or maybe yeah um sunny
80:01 - [Music]
80:02 - yep
80:04 - uh okay i'm gonna answer both questions
80:06 - just one of you drum
80:07 - jump in first okay i'll go first then
80:10 - um so could i see your index.js file
80:14 - yep okay so why
80:18 - did we add the state state provider here
80:21 - okay so remember here we have the
80:24 - wrapper right
80:27 - so yeah this kind of wrapper around the
80:29 - index imagine what is it what it's
80:30 - actually kind of doing is
80:32 - you're kind of wrapping uh so yeah think
80:34 - of it like this because
80:35 - what you're doing is you're providing
80:37 - the entire state so that global state
80:40 - to the entire app so that's why it's
80:42 - kind of nested inside of it you see that
80:44 - right yeah now we call this something
80:46 - called a higher order component so this
80:48 - if you want to look into it more this is
80:50 - called a higher
80:52 - order component as in i'm referring to
80:54 - state provider
80:55 - and the reason why it's called a higher
80:56 - order complex i would recommend maybe
80:58 - reading into higher order components
81:00 - that they're usually called hlc and they
81:02 - are kind of confusing at first i
81:03 - remember when i first learned about i
81:04 - was like what the hell how the hell do
81:06 - you use this
81:06 - they made sense afterwards and basically
81:08 - the whole point is it just
81:10 - enhances this so now by wrapping it
81:13 - inside
81:14 - of this it means that any level below
81:17 - so app or anything underneath app
81:20 - so like login for example means that i
81:23 - can use things like the stake
81:25 - without providing state for the app
81:27 - right um
81:29 - providing state things like yeah yeah
81:31 - yes yes yes you're providing state for
81:33 - the app exactly so it's literally
81:35 - providing state for the app yeah uh
81:38 - i sony i have a question yeah for the
81:40 - straight providers state provider for
81:42 - example
81:43 - we have uh a sudden uh let's say group
81:46 - where we only want to pass certain
81:47 - parameters to a certain
81:48 - component so do we then wrap that
81:51 - component
81:51 - in a different state provider or it's
81:53 - gonna be the same for the
81:55 - you know whole app thing for example
81:57 - let's say for header we want to
81:59 - only pass certain things to header but
82:01 - no other part of the app can access that
82:03 - component
82:04 - those values right so you can you could
82:08 - i mean what you could do right is you
82:10 - can create rather than a state provider
82:11 - you could provide something like a
82:13 - a user provider right and then what you
82:16 - would do is inside of here
82:18 - you would basically only wrap this with
82:20 - the user
82:22 - provider right so you'd do everything
82:23 - but then you would have a user reducer
82:26 - in that case as well
82:27 - right so you would have user provider
82:29 - like this and yes that's actually a
82:31 - really good that kind of
82:32 - like clicked something in my head as
82:33 - well actually there's a good question um
82:35 - it's warmer down there
82:36 - yeah so you could do this and this would
82:38 - mean that only the um
82:40 - the login would get the user provider
82:43 - values
82:44 - and capabilities okay right so that's
82:47 - actually a really good question yeah
82:48 - thank you for that and before i answered
82:51 - shrieker's question somebody else jumped
82:53 - in who was uh
82:57 - yeah funny i was just looking for the
82:59 - state provider explanation
83:01 - what we are doing in this gateway okay
83:04 - we are creating context api and
83:06 - something else okay awesome so that
83:08 - makes sense now
83:11 - yeah okay perfect all right so i have a
83:14 - question
83:15 - right now last question and then we'll
83:18 - move on yep
83:20 - can you summarize the flow again
83:24 - between classes yeah so between you mean
83:28 - explain the flow here
83:32 - no in the code okay yeah so
83:36 - the way i understand this
83:42 - be careful dude uh try not to have an
83:43 - echo
83:46 - i'm gonna go ahead and mute everyone
83:47 - just unmute yourself
83:49 - if you uh whoever was asking the
83:51 - question
83:52 - okay so to explain it again very quickly
83:55 - um
83:56 - we have index.js this state provider
83:58 - provides state to app
84:00 - right inside of app we can pull values
84:03 - from the state with this line of code
84:05 - right inside of login and then we can
84:07 - use the value like this state.user
84:09 - inside of login
84:10 - we pretty much when we click the login
84:11 - button we can have this dispatch and we
84:14 - basically dispatch an action now the
84:16 - reducer
84:17 - is always listening to actions so in
84:19 - this case it picked up the set user
84:20 - action
84:21 - okay what this does is it modifies the
84:23 - state when we hear set user it modifies
84:25 - the state
84:26 - like so and then in login.js app.js this
84:29 - is where
84:30 - it gets re-rendered so that's the entire
84:31 - state
84:34 - uh funny just like in amazon clone we
84:37 - have created a reducer for
84:39 - products right here we created a
84:42 - reducer for user so for different
84:46 - uh we have to create different routines
84:49 - so so right now it's one i didn't create
84:52 - a user reducer
84:54 - i created one reducer for everything
84:56 - here we haven't done any sort of
84:57 - separation
84:58 - um so here um this would go ahead
85:02 - and we can say uh like say for example
85:06 - you had products or basket right
85:08 - here you could have a basket which is an
85:09 - empty basket right
85:12 - um so but it depends you can have
85:15 - different providers we're not going to
85:16 - go into that right now
85:17 - i do kind of want to get into redux
85:19 - right now because i think it's going to
85:20 - benefit the most people so
85:22 - let's kind of put a hole in questions
85:24 - for now and move on to redux because
85:26 - that's going to be the most invaluable
85:28 - part of this right
85:29 - so i want you guys to take a mental sort
85:31 - of like maybe you can pause the video so
85:33 - i have a screenshot or something but you
85:34 - guys can go ahead and
85:36 - and snap this but the point is is that
85:38 - this
85:39 - is you saw in terms of the code itself
85:42 - it's extremely clean
85:44 - um and believe me i've been in like
85:46 - production environments and huge
85:48 - production environments
85:49 - this is pretty clean code like as and
85:51 - i'll say i'll tell you that like yes you
85:52 - can always make code cleaner and neater
85:54 - and
85:55 - like this can be like an object see it's
85:57 - no longer like
85:59 - you can do you can always improve
86:00 - something but in this case um
86:03 - yeah we can so neha says uh we should
86:06 - have joined earlier can you please let
86:07 - us know the agenda to me sir
86:08 - yes i'll try my best um i did mention in
86:11 - the beginning of the call but maybe
86:12 - earlier
86:13 - inside the announcement i could do that
86:14 - as well so uh
86:16 - now but now we're going to go ahead and
86:19 - learn redux so i'm going to show you
86:21 - guys i'm pretty much going to get rid of
86:23 - all of the react context api stuff and
86:26 - to show you
86:27 - how quick it was pretty much look i get
86:29 - rid of that
86:30 - i go inside my login i'm going to get
86:32 - rid of that i'm actually going to just
86:34 - get rid of the login stuff and say
86:37 - logins
86:38 - happens here and then go here boom get
86:41 - rid of this
86:42 - get rid of this go back to here and then
86:45 - i'm just going to give this and say
86:48 - the user is this is kind of like dummy
86:51 - code right now
86:52 - it's not really doing anything got rid
86:54 - of
86:55 - state provider and
86:58 - get rid of the reducer and now we're
87:01 - back to square one
87:03 - so inside my react app state provider is
87:05 - still being run
87:06 - pulled in from
87:10 - here there we go so now we have
87:14 - the fancy facebook dinner hashtag fancy
87:16 - dinner app so this login component
87:18 - doesn't do anything now okay um
87:22 - a question will state provider and
87:23 - reduce the path redux or context api
87:25 - flow
87:25 - um so don to answer your question state
87:28 - provider and reducer was part of the
87:29 - context api flow
87:30 - but the pattern is consistent amongst
87:34 - redux and react context api so if you
87:37 - are confused
87:38 - just remember learn the pattern um
87:42 - through the react context api because
87:45 - it's easier to do that
87:46 - and then shift and use that knowledge on
87:49 - redux that's going to be the most
87:51 - beneficial way of learning redux
87:53 - it's going to be the most easy way of
87:54 - learning redux if i could
87:56 - put it this way if i could have had
87:58 - someone sort of give me a
88:00 - cheat right like a cheat code to sort of
88:02 - like shortcut all the headache and all
88:03 - that sort of stuff
88:04 - i would have pretty much gone ahead and
88:06 - done um
88:08 - i would have pretty much gone ahead and
88:10 - made it so that let me go ahead and do
88:11 - this
88:12 - i would have made it so that um i
88:15 - actually
88:15 - learned the react context api
88:17 - unfortunately wasn't available when i
88:18 - started learning the first time
88:20 - but i would have learned the react
88:21 - context api and then i would have
88:23 - shifted my knowledge over to redux
88:24 - because
88:25 - it made it super easy to understand
88:29 - right um okay so
88:32 - now what we're gonna do guys is i'm
88:34 - gonna share my screen again
88:36 - um boom okay so now
88:39 - so this is a really awesome example
88:41 - because i forgot how to implement redux
88:43 - so you guys are gonna see it completely
88:45 - from scratch non-biased
88:47 - nice fresh slate okay so
88:51 - what we're gonna do now is i'm gonna go
88:52 - to redux
88:54 - and here i'm going to go ahead and
88:57 - uh type in so i'm not going to google
88:59 - image i'm just going to type in redux
89:01 - boom getting started with redux okay so
89:04 - this will be interesting
89:05 - because i can't remember how to do it so
89:07 - it'll be pretty cool so
89:09 - npm in store so pretty much and this is
89:12 - make sure like you guys really like sort
89:14 - of like i want you to pay attention to a
89:16 - few things when we have this sort of
89:17 - tutorial right now because
89:19 - one thing is going to be the sort of
89:23 - experience the um the natural sort of
89:27 - like okay so he's a developer he's been
89:29 - coding for ages too but he also gets
89:30 - stuck
89:31 - like kind of normalize that right
89:33 - because it's not like i know the answer
89:34 - to everything
89:35 - it's kind of like okay you know um
89:38 - it will go ahead and it will make it a
89:40 - lot easier for you to do this
89:42 - this is dope by the way i just saw um it
89:45 - says here
89:45 - create react app actually has a template
89:47 - now for redux so i mean we could go
89:49 - ahead and do that
89:51 - let's go ahead and try that in a sec but
89:52 - i'll show you guys
89:54 - um actually not let's go ahead and do it
89:55 - let's do that because that might be
89:56 - really cool for you guys to go ahead and
89:58 - learn so
89:59 - um also for everyone on youtube saying
90:03 - um it's already developed up they're
90:05 - showing today no it's this is
90:06 - uh this is fresh code dude so you're
90:09 - going in timeout
90:12 - so now what i'm going to do is i'm going
90:14 - to go ahead and um
90:16 - i'm going to cut the app that's running
90:18 - and basically i'm going to go out of
90:19 - this
90:20 - folder and i'm going to create another
90:22 - one so i'm going to say mpx
90:23 - and you see here it says mpx create
90:25 - react app my apps are the name
90:27 - and i'm going to use this this special
90:29 - option now okay so you guys can see here
90:32 - right so i've got oops all right
90:35 - then the mpx create react app i'm going
90:37 - to change the name
90:38 - i'm going to say this is called the
90:40 - redux example
90:44 - right and then i'm going to say template
90:45 - redux right
90:47 - now this is really cool because i
90:48 - haven't when i made when i first used
90:50 - redux they didn't have this template
90:51 - okay
90:52 - so i'm gonna go ahead and hit enter and
90:55 - let's go ahead and see what that does
90:56 - so while that's doing any questions guys
91:06 - uh just one question
91:11 - when how to decide like when to use
91:14 - context api and
91:16 - flux and litex i know that the flux is
91:19 - not being used in production environment
91:21 - on large apps but
91:24 - as for context api as you told a relay
91:28 - is also coming up so
91:29 - keeping that aside how to decide
91:32 - for which should we go right so good
91:35 - question
91:36 - uh to answer your question in a nutshell
91:38 - what i would say
91:39 - is um you want to basically go ahead and
91:44 - use so don't use flux
91:47 - because you have two better solutions i
91:50 - would use react context api
91:52 - personally if it was a personal project
91:54 - i'd use react context api
91:56 - i would then jump on to the uh
92:01 - the um if if needed or it feels like a
92:04 - professional job
92:06 - so put it this way i've used so many
92:07 - i've done so many professional
92:09 - jobs and freelancing jobs with the react
92:11 - context api
92:12 - because it's simple it does the job why
92:14 - am i i don't need to over complicate the
92:16 - build if i don't need to
92:17 - so i would use that right now if i'm in
92:20 - a pro like a commercial environment so
92:22 - i'm in a job and things like that and
92:24 - chances are they're going to be using
92:25 - redux because and there's for obvious
92:26 - reasons why
92:28 - um you'll pretty much experience that
92:30 - yourself when you start using it
92:31 - um but yeah so to answer your question
92:33 - very shortly
92:34 - um i would use i wouldn't use flux i
92:37 - would use
92:38 - react context api and then use um
92:43 - the uh then use redux yes yep
92:46 - okay okay yeah yeah which one is any
92:54 - yeah sunny i just wanted to uh go
92:56 - through that explanation of context ap
92:58 - again just wanted to tell you my
92:59 - understanding and in case if it's
93:02 - wrong if you can just correct it yeah uh
93:05 - um so i will say to that is
93:08 - i'll give you a quick breakdown on the
93:10 - on the um
93:12 - let me go ahead and share my screen so
93:13 - i'll give you uh oh god damn it
93:15 - uh here we go so i'll give you a quick
93:18 - breakdown
93:18 - on the diagram but beyond that what i
93:21 - would say is re-watch the video
93:23 - go through the build again and kind of
93:25 - watch it that way because that way it
93:26 - will benefit the most people on the core
93:27 - right now
93:28 - so the purpose is is that it provides a
93:30 - data layer so you have this entire data
93:32 - layer around the app okay
93:34 - now it basically this is going to be
93:37 - your component
93:38 - uh for example the logging component
93:40 - when you click the login button it
93:41 - dispatches
93:42 - a login sort of set user action
93:45 - at this point the producer is always
93:46 - listening to any actions that get
93:48 - dispatched
93:49 - so it basically goes ahead and modifies
93:51 - the state so it sets the new user
93:53 - the new user because it's changed and
93:55 - because we've subscribed to it inside
93:57 - the component
93:58 - causes react to re-render right and
94:00 - that's basically the flow of what
94:02 - happens
94:02 - now i would say if you're still stuck
94:06 - make sure you just go ahead and play
94:08 - with it because honestly as much as i
94:10 - will explain it now
94:13 - oh guys please watch the mics because
94:16 - it's like
94:17 - got some i've got some really crystal
94:19 - clear headphones and that really just
94:21 - chewed my eye off
94:22 - sunny i have a question uh regarding the
94:24 - comm and you wrote
94:26 - uh so so to have redux uh
94:29 - in our project we need to have a dash
94:32 - dash template redux
94:33 - yeah i'm still i'm getting back to that
94:35 - now so we're going to jump into that in
94:36 - a sec
94:38 - yep uh guys i'm going to mute everyone
94:40 - again because the mic so
94:42 - nope that's not happening damn it yeah
94:44 - okay that literally was creeping up on
94:46 - my ear
94:47 - uh so careful guys because you meet
94:49 - yourself sony
94:50 - oh man i made it yourself sonny
94:53 - yeah now we're good yeah yes
94:57 - very good all right so gonna carry on
94:59 - now guys so
95:01 - uh here so we have the redux example
95:04 - okay so i'm going to go cd
95:05 - redux example boom we're inside code
95:08 - insiders
95:09 - dot and then what we'll do is open up
95:11 - another window so i can go ahead and
95:12 - close my old one i don't want to save
95:14 - this one i don't care about that
95:15 - uh and i'm going to make it full screen
95:18 - i'm going to zoom out a bit because i
95:19 - can't see anything
95:20 - and you guys can see my screen right now
95:23 - yeah
95:25 - yes okay so it's got a bunch of things
95:28 - now so this is this looks a little bit
95:29 - different right
95:30 - so and you can see i've got loads of
95:32 - stuff here so i'm going to go ahead and
95:33 - spin this up so i'm going to say
95:34 - npm start and go ahead and do it so
95:44 - right so now rather than this isn't the
95:47 - old app we don't have this anymore
95:49 - um once it goes okay so now it's
95:53 - compiled
95:54 - so you see okay let me zoom back out
95:56 - there we go okay this is kind of cool
95:58 - actually
95:58 - all right so you get this as your
95:59 - starter template uh and then what we can
96:01 - do is that plus
96:03 - boom add amount okay so this adds like
96:06 - two to each if i had like 10
96:08 - add amount 18 28. okay awesome
96:11 - add async oh nice okay so that
96:15 - asynchronously adds 10 to it
96:17 - so anyone that doesn't know what async
96:19 - is it means that it's not a media
96:20 - it's kind of like asynchronously so
96:22 - asynchronous just means there's a delay
96:24 - so usually when you do a network course
96:25 - asynchronous because
96:27 - you kind of say you fetch some
96:29 - information from google
96:30 - it's going to take like 15 minutes on 50
96:33 - minutes like
96:34 - like a few milliseconds to come back so
96:36 - you're going to have that little delay
96:37 - so if i go ahead and do async imagine i
96:38 - clicked it and then boom it comes back
96:41 - right
96:42 - this is kind of cool actually so now
96:44 - what we'll do is we'll dive into the
96:45 - code and we'll explain what's going on
96:46 - so
96:47 - um what i'm gonna do is we've got this
96:50 - special counter component
96:52 - so in features that's where they've made
96:53 - the counter component
96:55 - so i'm going to hide that for a second
96:57 - you can see there's loads of
96:59 - code running around here right so
97:02 - we're going to go ahead and make sense
97:05 - of this for you guys
97:07 - counter.module.css so this is just css
97:09 - file
97:10 - counter slice is um again so you see
97:14 - redux right redux
97:18 - looks a lot more complicated right it
97:20 - looks a lot more complicated
97:22 - um but the truth is it's not as
97:25 - complicated as you think
97:27 - right so what i would say is
97:30 - my my my biggest advice to you guys
97:33 - is to go ahead and
97:36 - do exactly what i did now so install the
97:38 - template and then go to
97:41 - here for example right go to getting
97:43 - started with redux
97:45 - and pretty much you can go ahead and
97:46 - look and you see you've got the basic
97:47 - example
97:48 - where you can pretty much go ahead and
97:50 - see like
97:52 - think of it this way look so this is
97:54 - that producer that we saw in the react
97:55 - context api
97:56 - remember it had a switch a case and a
97:59 - case
98:00 - and then a default right and then you
98:02 - created the store
98:04 - and then basically you can subscribe to
98:05 - the store and you can dispatch actions
98:07 - from the store
98:09 - which is basically when we did login and
98:11 - it we went
98:12 - we wanted to go ahead and do um uh
98:15 - set user right so it did that now
98:18 - uh let's go here to learn redux
98:22 - okay so now we don't need to care about
98:24 - this so i'm gonna go ahead and dive into
98:25 - the code now so
98:27 - let's go back here so now what i'm going
98:29 - to do is i'm just going to grasp on
98:31 - what's going on so i'm going to delete
98:32 - everything i don't need so app.test.js
98:36 - i'm going to go to logo.svg delete setup
98:38 - test.js boom delete
98:40 - okay now index.js can you see
98:43 - the same thing we have a provider right
98:46 - provider surrounds app.js
98:48 - okay so i want you guys to first notice
98:51 - how the
98:52 - the approach is the same we have like a
98:55 - component which surrounds app
98:57 - right and then that injects basically
98:59 - the the store
99:00 - into the app okay now i'm gonna go to
99:03 - app
99:03 - i'm gonna go to store.js now you can see
99:07 - and this one the store is very simple
99:09 - okay so the store is very very simple
99:11 - it's very clean
99:12 - we don't really have much in here so i'm
99:14 - gonna go ahead and just i'm just opening
99:15 - up the chat in case anyone's saying
99:17 - um okay so brandon d is it just me or
99:19 - zoom flickering it's because i'm running
99:21 - quite a lot of um like screen sharing
99:24 - stuff
99:24 - going on at one time so it can kind of
99:27 - flicker a little bit
99:28 - at times uh see you later cory as well
99:30 - thank you for joining bro
99:32 - um okay so here
99:35 - what i'm doing is i'm configuring the
99:37 - store so basically
99:39 - redux has changed a lot actually since i
99:41 - used it last so
99:42 - now they have this toolkit okay so this
99:45 - toolkit is basically saying configure
99:46 - store
99:47 - and it's just exporting it so here we
99:48 - can pretty much say export default
99:50 - configure store
99:51 - and then you're passing in a reducer and
99:53 - this reducer has a counter
99:56 - and then you're basically saying the
99:57 - counter reducer now the reason why this
99:59 - this actually makes a lot of sense it's
100:00 - kind of cool actually so now let's go
100:02 - ahead and look at this
100:04 - so inside of features counter
100:07 - counter slice so let's go inside of here
100:10 - so this
100:10 - so basically inside of uh redux
100:13 - the way i want you to think of it right
100:15 - is in redux
100:17 - imagine this is the data layer okay
100:20 - and inside of it we have the app right
100:23 - and then obviously inside of app.js
100:25 - you have everything else okay so imagine
100:27 - this is app.js
100:30 - oops oh
100:33 - app.js there we go all right so imagine
100:36 - we have and then obviously everything
100:37 - renders inside of app.js
100:39 - right so that's why i'm doing this now
100:42 - previously
100:42 - we just saw it as one layer right so
100:45 - it's like imagine like
100:46 - layers of an onion right you just had
100:48 - one layer right
100:50 - but what redux does is it gives you
100:52 - several layers
100:53 - so you can actually have like several
100:54 - different layers and you and these would
100:56 - just be like different stores
100:57 - now why would we want several layers uh
101:00 - the reason is because you might want one
101:02 - layer
101:03 - which is primarily going to hold the
101:05 - user
101:07 - stuff right so this one could be called
101:09 - uh the user
101:10 - just think of it right now as like the
101:12 - user layer right
101:14 - and another one could be like the basket
101:16 - layer
101:17 - right so another one could be the basket
101:18 - layer so basically the user layer would
101:21 - only have information about the user
101:23 - right so it will basically all the
101:25 - logging here and all that stuff would
101:26 - only happen in the user layer
101:27 - the basket layer would be everything
101:29 - that's inside the basket so it would be
101:31 - like
101:31 - add to basket remove from basket that's
101:33 - what the reducer
101:34 - it would have its own reducer the user
101:36 - would have the its own reducer
101:38 - so in redux we now have concept of
101:40 - multiple layers and you can do that in
101:42 - react context api but it's more
101:45 - you see it happen more in um inside of
101:48 - redux so now and what we call guys
101:52 - is these um these layers we call them
101:55 - slices
101:56 - okay so this is called a slice of state
102:00 - or slice of the store and it makes sense
102:03 - because you're basically slicing
102:06 - a slice like you're basically slicing a
102:08 - piece of the store
102:09 - right so you're basically like slicing
102:10 - it up into layers okay so we call this
102:12 - so it says create slice
102:14 - so in this case we've got the counter
102:15 - slice and this one is purely responsible
102:17 - for just that counter
102:19 - okay now it has a name
102:22 - okay it has an initial state so remember
102:25 - it's it's a very similar so remember in
102:27 - the reducer of
102:28 - react context api we had an initial
102:31 - state so here we have an initial state
102:33 - um and then we have a value of zero and
102:36 - then here
102:38 - inside of reducers we have an increment
102:40 - function we have a decrement function
102:42 - and we have an increment by amount so
102:44 - these are basically those actions that
102:46 - we spoke about before
102:47 - okay and we basically export this into
102:51 - this counter slice to action so let's go
102:54 - ahead
102:54 - and go over to um sonny i had a question
102:58 - go for it can you go back to your
103:00 - diagram
103:01 - yep so uh the
103:05 - is it uh okay to
103:10 - believe that the basket the user layer
103:12 - would have
103:13 - everything that the basket layer has
103:15 - plus more
103:16 - or are there two independent layers that
103:19 - have nothing to do with each other
103:21 - it's totally isolated compartments very
103:24 - that's a really good question and to
103:26 - answer it they're completely
103:27 - independent so they're isolated from one
103:30 - another
103:32 - and the reason why they're isolated from
103:34 - one another is to reduce complexity so
103:36 - anything like logging in
103:38 - um anything to do with the user goes in
103:40 - the user layer anything to do with
103:41 - basket stuff goes into basket and now
103:43 - this is really important because imagine
103:45 - you had a huge app
103:46 - right you've got thousands of like
103:48 - hundreds of developers working on one
103:50 - app
103:51 - you need this kind of isolation
103:53 - otherwise like
103:54 - if if they're all interlinked it would
103:57 - get so crazy
103:58 - so fast and it would be so chaotic to be
104:00 - able to do anything
104:01 - because then stuff that happens in here
104:03 - is gonna break stuff that happens
104:05 - elsewhere
104:06 - and it just starts to get really kind of
104:07 - you know a bit crazy
104:09 - and then how do i if i need to access
104:12 - the other layer do i still use the props
104:14 - way to to get it around uh i'll actually
104:17 - show you how we create two layers okay
104:20 - yeah because
104:20 - because i can't remember as well so it'd
104:22 - be awesome to go ahead and do that
104:23 - yeah sorry that's basically follows the
104:26 - react
104:27 - react component design pattern right
104:30 - yes so it splits into components don't
104:33 - think of it as components
104:35 - think of this as a sort of a concept
104:38 - because this is yeah the concept yeah
104:40 - this is kind of a con this is a
104:41 - component app.js header.js
104:44 - post.js they're components this is kind
104:46 - of just like think of it as like
104:48 - layers which kind of go around the
104:50 - components and the reason the easiest
104:52 - way is in index suggest this is
104:53 - basically the layer
104:55 - that has all of those slices in and then
104:57 - it just gets provided to our component
104:58 - app
104:59 - which then renders to several other
105:00 - components underneath it
105:03 - uh sunny i have a question for you since
105:06 - you're talking about the layer slices
105:08 - and the first slice will be login right
105:12 - if i don't have an access to the login
105:14 - then i cannot go further right
105:16 - so i wouldn't do a login i would do a
105:18 - user layer oh i'll do
105:19 - it yes yeah i'd have a user slice yeah
105:22 - yeah user uh so it is uh
105:25 - an in encapsulated
105:29 - uh this other slices in store
105:32 - uh in user layer right no so so just
105:36 - think of it as like
105:37 - so the user layer would just have a user
105:39 - object inside of it it would have a few
105:41 - it would reduce the user reducer would
105:43 - have like actions which listen to you
105:45 - like logging in
105:45 - logging out basket will have the the
105:48 - basket
105:49 - array inside of it it would have actions
105:51 - for adding item to basket removing item
105:52 - from basket
105:53 - and then in any other components i can
105:55 - just pull from whatever i need to
105:58 - no i think what he's trying to do what
105:59 - he's trying to ask is whether they
106:00 - whether the user layer
106:02 - the other layers have dependency on the
106:04 - user layer which
106:05 - no no no so they're completely separate
106:08 - just they're completely separate layers
106:10 - they don't know yeah uh so you're saying
106:14 - uh like in a uh like in a amazon
106:18 - um kind of clone uh without login i can
106:22 - add into the basket
106:24 - it is a separate layer and when i logged
106:26 - in then it will be stored in
106:28 - into my account right no so okay but try
106:31 - and
106:31 - separate so this is a question i get
106:33 - quite a lot try and really separate your
106:36 - understanding of the layers with
106:38 - with like um because what can tend to
106:41 - happen is
106:42 - you're right now you're mixing
106:44 - understanding of
106:46 - of um like the apps or the amazon app
106:49 - like storing things in your basket
106:51 - and your account being stored in your
106:52 - account with concepts with concepts of
106:55 - like
106:56 - of programming and remember yes to
107:00 - amazon you might be
107:01 - storing things on your account or inside
107:02 - your account but
107:04 - that's because you you make a network
107:06 - request to push data to a database
107:09 - you see that there's a whole nother
107:11 - thing to to approach
107:12 - right so absolutely yes i would say try
107:15 - and try and keep them separate
107:16 - um yeah okay so
107:20 - sonny um can we do the same thing
107:23 - what we are doing in redux in using uh
107:27 - context api yeah so you mean
107:30 - the layers like yeah yeah yeah yeah we
107:33 - can we can do it um
107:34 - i'll figure out how to do it and then
107:36 - i'll show you guys how to do it but
107:38 - the point is is that honestly i would
107:41 - recommend doing the single layer
107:43 - approach with
107:44 - with the react context api and then
107:47 - using it and guys the reason why i'm
107:49 - saying this yeah is because
107:50 - i've made a serious like a decent amount
107:53 - of money like when
107:54 - when with freelancing just using one
107:56 - layer with the react context api and it
107:59 - served the purpose for many jobs
108:01 - now sure when i've gone into production
108:03 - environments and i've been hired as a
108:04 - developer
108:05 - they've been redux environments where
108:07 - it's gonna it gets really
108:10 - nested it gets quite integrated it kind
108:12 - of gets a bit
108:13 - you know it gets quite involved in that
108:15 - sort of stuff now
108:16 - i would say my my main thing here is is
108:20 - just understand the pattern um with the
108:22 - react context api and then just practice
108:24 - the slices in redux
108:26 - uh and then and then whatever you decide
108:28 - to do you can pretty much go ahead and
108:30 - mix and match
108:30 - pursue whatever you want to do but that
108:32 - would be my main advice here for
108:35 - how to approach you know like what what
108:37 - you should be working on and what you
108:39 - shouldn't be wanting and that sort of
108:40 - stuff
108:41 - so so somebody asked a question like
108:43 - when do we use
108:44 - react context api and when do we
108:48 - use redux so redux is for like when the
108:50 - application
108:51 - gets very complicated so it's better to
108:54 - use redux because we can
108:56 - make use of this multiple data layers
108:58 - and all these things
109:00 - and for simple applications like you
109:02 - know which doesn't
109:03 - involve uh much data and everything so
109:06 - we can use context api is that
109:08 - is that true yeah so i would say keep it
109:10 - very simple
109:11 - so keep it very um keep it like super
109:15 - simple in the sense of like
109:18 - and then put it this way i would always
109:21 - vouch for using the react context api
109:23 - first
109:24 - and then i would about then i would kind
109:26 - of move to redux only if needed
109:29 - right um like i wouldn't honestly relax
109:32 - is heavy
109:32 - like like you see like the code here is
109:35 - it's it's quite heavy code like is in
109:37 - this is quite a lot of code whereas
109:39 - react context api i didn't have to do
109:40 - much
109:41 - but i had like a crazy amount of code
109:43 - right um
109:44 - so my advice would be to maybe just
109:48 - focus on
109:49 - whatever the simplest option is right
109:51 - now bear in mind if you've got a
109:53 - contract for a year
109:54 - and um so muhammad imran says why
109:58 - are you only comparing easy to be even
110:00 - better that's not what i'm saying i'm
110:02 - not saying pick the easy one to be
110:04 - better i'm saying be smart
110:05 - if you're if you have a job which has
110:07 - like you know there's going to be 30
110:09 - developers it's a startup company it
110:10 - needs to grow
110:11 - yeah then maybe the decision to think
110:13 - about is maybe it's better to implement
110:15 - redux from the get-go
110:16 - but don't always think that just because
110:18 - redux is the one that's used more than
110:20 - one that's sort of like in practice
110:22 - that's the better one because right
110:23 - things come along and are better in time
110:26 - just like the improved redux now so that
110:28 - now you've got all this sort of create
110:29 - slices and things like that
110:31 - but um try not to get sort of carried
110:34 - away with
110:35 - just whatever's um it's not always
110:38 - whatever's
110:38 - but in my opinion keep it as simple as
110:41 - it needs to be until
110:42 - needed until you need the complexity
110:45 - yeah
110:46 - so i can actually went down that same
110:48 - route and i
110:49 - uh when i learned it yeah what they said
110:52 - the difference was
110:54 - is if you're using redux that's for uh
110:56 - data that's constantly being updated
110:59 - over and over and integrating versus use
111:02 - context is more or less
111:04 - if you're not really updating the data
111:06 - as much or it's a simple application
111:08 - yes exactly so simple application
111:11 - because uh
111:11 - is so so actually the way we use the
111:14 - context api is different to how a lot of
111:16 - people use it they usually use it for
111:18 - like
111:18 - themes or dark mode or things like that
111:21 - so so options which aren't going to get
111:22 - updated much
111:23 - but i kind of modified it so it kind of
111:25 - follows the redux pattern
111:27 - and i teach it in that way so we kind of
111:29 - get redux functionality
111:31 - but not with so much you know um
111:33 - somebody said nazim said
111:35 - something can you simplify clean up the
111:36 - code for better understanding to get the
111:37 - same pattern as read context api
111:39 - the pattern is already the same with
111:41 - this code uh nazim it's just the case of
111:44 - you can't clean up code remember yes
111:46 - just because there was less code
111:48 - doesn't mean it's this is actually
111:50 - extremely clean code
111:51 - this is actually really really clean
111:52 - code which is why this is my first time
111:55 - looking at this new implementation and i
111:56 - can i can understand what's going on
111:58 - so um well i'll show you let's jump into
112:01 - the code
112:02 - and i think it'll make a lot more sense
112:03 - so before you go
112:05 - go to the code i have one small question
112:07 - for you final question yeah
112:10 - any place where i can get into
112:13 - react context api what do you mean any
112:16 - uh tutorial another tutorial where i can
112:20 - i would i would say honestly go ahead
112:21 - and just just look at the react docs
112:24 - okay yeah thank you the react docs are
112:26 - the best yeah
112:28 - okay um okay so here we have the reduce
112:31 - with increment decrement and let's just
112:32 - find where this is used so right so
112:34 - let's go to our
112:35 - counter and here we can see uh increment
112:38 - set increment um no this is increment
112:40 - amount but you can see we're pulling all
112:42 - the actions
112:43 - from counter slice right so we're
112:44 - pulling like increment from counter
112:46 - slice and then here you can see
112:47 - a dispatch and increment action right
112:50 - and dispatch this and this this and then
112:52 - you can hear set increment amount and
112:54 - then
112:55 - increment by amount and then here
112:57 - they're doing some special but
112:59 - the point is is that what we're going to
113:00 - do now is i don't like
113:02 - how they've done all this they're kind
113:03 - of over complicated some stuff but
113:05 - what i'm going to do is i'm going to
113:07 - make another folder right so i'm going
113:08 - to show you guys okay another folder and
113:10 - this one's going to be called
113:11 - let's call it the user so now we're
113:13 - going to try and recreate what we did
113:14 - yeah so again like i'm going to try and
113:16 - sort of
113:18 - do this from the beginning so we're
113:19 - going to say user and
113:21 - here i'm going to have a login component
113:24 - say login.js
113:26 - rfce boom and this is gonna say h2
113:29 - i am the login component
113:33 - okay um and now
113:36 - what we're gonna do is unlocking
113:39 - components there we go and then
113:44 - inside of
113:47 - inside of my app.js i think i'm
113:50 - rendering out
113:51 - logo there we go get rid of that save it
113:54 - and
113:55 - you also have to get rid of the image
113:57 - tag yeah
113:59 - so it's new oh yeah nice
114:02 - thank you and then here we go back and
114:04 - now you can see we've got this right
114:06 - now obviously at the top i'm just for
114:08 - now i'm going to keep it super simple
114:09 - above everything i'm going to render
114:10 - our login component this is the one that
114:13 - we just created
114:14 - boom now we have i'm logging component
114:16 - at the top yeah
114:17 - so we're all familiar with this one
114:19 - right so ignore the stuff at the bottom
114:21 - for now we're going to use it as
114:22 - reference
114:23 - this is my truth be told right
114:26 - try and get used to being familiar with
114:30 - the unfamiliar now that
114:31 - that kind of like doesn't make sense at
114:33 - first but what i mean by this is for
114:35 - example
114:36 - right now i forgot how to code in redux
114:38 - no not forgot how to call it arenas but
114:39 - i forgot
114:40 - the exact sort i mean you don't need to
114:42 - memorize this you just need to know the
114:44 - pattern so i can
114:45 - get all of this working but i don't need
114:47 - to remember
114:48 - every single line of code and everything
114:51 - all i need to know is how it works and
114:52 - then you pretty much can go ahead
114:54 - uh and build it so try and get used to
114:57 - being in that situation
114:58 - and and and working in that way and then
115:00 - it will make your life a lot easier
115:02 - because you'll be able to pick up on
115:03 - especially when you go into a production
115:04 - environment um
115:07 - you're pretty much gonna understand um
115:11 - uh you're pretty much gonna you're gonna
115:13 - be able to move into a new environment
115:14 - which is very intimidating very sort of
115:16 - like
115:17 - oh my god i have no idea what's going on
115:19 - here but you're going to
115:20 - be better at understanding that right
115:22 - because then you're going to be able to
115:24 - dive into anything and sort of learn
115:25 - build that that um
115:28 - build that that sort of skill so yeah
115:30 - get familiar with the unfamiliar
115:32 - um uh also ganesh from uk manchester
115:36 - awesome dude
115:37 - nice um so login so now we're gonna
115:40 - basically go ahead go into our login
115:41 - component
115:42 - and i'm gonna look at the counter.js
115:44 - right so let's see how they've done it
115:45 - so
115:46 - they created this counter slice so
115:48 - inside of user i'm going to create a
115:50 - user slice
115:51 - so i'm going to create a user slice and
115:53 - what i'm going to do
115:55 - is i'm going to literally going to copy
115:57 - the code from counter slice
115:58 - into user slice i'm going to rename
116:00 - everything that i want so the name is
116:02 - going to be
116:02 - user it's not going to be you counter
116:05 - slice it's going to be user slice
116:06 - the initial state is not going to be
116:08 - value it's going to be a user
116:09 - with no right here is the reducer
116:13 - so i don't need any of this stuff what
116:15 - i'm going to have is i'm going to have
116:16 - something like
116:18 - set user which takes the state
116:21 - and it basically goes ahead and says
116:24 - it's going to take a state
116:25 - and an action so this is the same
116:27 - pattern we did before and it's basically
116:29 - going to go ahead and say
116:33 - state dot user
116:37 - is equal to action dot user
116:40 - so i think that's how you do it and then
116:43 - we can also make another action called
116:45 - log out oops
116:48 - let's make one called log out and this
116:51 - one is basically going to say state.user
116:53 - is equal to no so these are two actions
116:56 - right
116:57 - and i'm going to go ahead and get rid of
116:58 - this and then we need to go ahead and
117:00 - export these so export that one export
117:03 - that one
117:04 - delete this one and you can see it says
117:07 - counter size this is not the counter
117:08 - slice this is the user slice
117:11 - and i go down and i don't need any of
117:13 - this
117:16 - select count
117:17 - [Music]
117:19 - selectors right selectors are really
117:21 - cool
117:22 - selectors exist both in um
117:26 - in react context api and in redux and
117:29 - the selector
117:30 - is basically just a piece of code that's
117:33 - for example here we can say
117:34 - select count so this one because i
117:36 - select user basically it just goes into
117:38 - the state
117:39 - and in this case we're just going to go
117:40 - ahead and return the user now this is a
117:42 - very basic version
117:44 - but imagine you had select basket lens
117:47 - right then you would have it will
117:48 - basically have a reduced hair which
117:50 - basically go ahead and tell you oil to
117:52 - be like
117:53 - state.basket.length it's just something
117:56 - which is
117:56 - you might not see the value in it now
117:58 - but just know that they exist
118:00 - okay know that they exist and that my
118:04 - pedro says something then the class can
118:05 - you make the final code available to
118:06 - download
118:07 - uh for this one i could yeah
118:10 - for the redux stuff i definitely could i
118:13 - would say maybe
118:14 - try and give it a go and try and do it
118:17 - again
118:18 - alongside that might be the best way for
118:20 - you to learn it um
118:21 - because all i used was the create react
118:23 - app with the dash dash template redux
118:25 - and i got this up and running um but
118:27 - yeah so now we're going to do is we're
118:28 - going to say
118:29 - like we do we have to follow exactly
118:32 - what they do
118:33 - or you can modify or change different
118:35 - stuff like without following the same
118:36 - pattern
118:38 - um wait say that again sorry like uh
118:41 - what i'm seeing here is like you are
118:42 - just changing the names
118:44 - yeah and then like we follow the same
118:47 - pattern yeah
118:48 - so we have to put the same pattern is it
118:50 - the mask or we can change it like
118:52 - no so remember so this is just the way
118:55 - that redux is
118:56 - sort of written in this case this is
118:57 - kind of different to even how i use
118:59 - redux but
119:00 - the point is is that like it will uh so
119:03 - so keep watching and then i i'm pretty
119:05 - sure it'll answer your question in just
119:06 - a sec
119:07 - uh well yeah so here i'm going to change
119:09 - this to counter size to user size
119:11 - and i'm basically exporting the reducer
119:13 - right here right so export reducer
119:15 - save it i'm going to go into counter
119:17 - size here and let's see
119:18 - where they so now this going to our
119:20 - store
119:22 - and then here what i'm going to do is
119:25 - i'm going to import my user
119:27 - reducer from
119:31 - user forward slash
119:34 - user slice and then here uh configure
119:38 - store i wonder how we do this i wonder
119:39 - if it's the same thing
119:41 - and you just do it like user is
119:44 - a user reducer like this
119:48 - and then let's wonder cfo
119:52 - okay so apps loading and you can
119:54 - actually install something called the
119:55 - redux devtools
119:56 - so i think i have them installed and
119:59 - let's go ahead and check
120:01 - so i've got the redux devtools here and
120:04 - if we go to the state
120:06 - um is this is this right what is this
120:12 - open in a panel open open in the panel
120:17 - this is not right
120:21 - okay ignore that let's just we'll touch
120:23 - on that another session
120:25 - have i got them in here redox okay
120:29 - yeah yeah okay there we go so download
120:31 - redux
120:32 - uh dev tools and then right click go to
120:34 - your thing go here
120:36 - type hit redux and then you go to state
120:38 - and now you can see that the counter is
120:39 - there the user
120:41 - is here so redux is really cool because
120:43 - once you implement there
120:44 - here you'll be able to see all the
120:45 - actions that get dispatched right
120:48 - and you'll also be able to see you can
120:50 - actually rewind in time
120:51 - different things so i'll show you how
120:53 - that works right so we have i am logging
120:55 - component
120:56 - now what we're going to do is let's go
120:59 - to
121:00 - the login component and here now how do
121:03 - i use
121:04 - the user like before obviously we have
121:06 - that magic line which is why i love the
121:08 - react context api i don't know how to
121:10 - i don't remember how to do redux so well
121:12 - i'm going to go into counter digest and
121:14 - see how they do it
121:15 - so they they import everything that they
121:18 - need so i'm going to go ahead and push
121:19 - this code to the right
121:20 - and i'm going to go ahead and do the
121:21 - same thing i'm going to go ahead and
121:22 - import
121:24 - uh it was set user and it was logout
121:27 - these were the actions and they were
121:30 - from
121:31 - and let's go ahead and do it from the
121:32 - user slice okay so i'm going to go ahead
121:34 - and pull them actions in
121:36 - um and then i'm going to go ahead and
121:39 - pull in the use dispatch and the use
121:42 - selector i don't need to use this
121:44 - selector i just need to always get set
121:46 - use it instead of user
121:48 - oh thank you nice see that's the kind of
121:51 - dude that's the kind of laser vision you
121:53 - need that's awesome yeah
121:55 - um so that's good and then what we're
121:58 - gonna do is
121:59 - to get hold of the dispatch which is
122:01 - that little gun that sort of allows us
122:03 - to shoot into the data layer
122:04 - i can go here and go const dispatch
122:06 - equals use dispatch
122:08 - so i'm just remember literally i'm
122:10 - looking at how they've used it here
122:11 - and i'm pretty much going ahead and
122:12 - reusing it okay then here
122:15 - we don't need the increment amount blah
122:16 - blah and
122:18 - now i guess all we can do is pretty much
122:20 - go ahead and say
122:22 - um let's go ahead and try out this kind
122:25 - of a button
122:25 - which says log me in okay
122:28 - and on click
122:33 - here i'm going to do an inline function
122:36 - oh let's just do it we'll keep it simple
122:37 - as i say log in
122:39 - um to app so same thing that we did last
122:41 - time so that way you guys are a bit more
122:42 - familiar so we can say const
122:44 - login to app
122:48 - it's an arrow function and then here
122:50 - we're going to go ahead and say
122:52 - dispatch and i'm going to say set user
122:56 - which is an action and it takes a
122:58 - payload and the payload in this case
123:00 - would be a user
123:02 - and the user is just let's go ahead and
123:04 - say um
123:06 - sss anger okay now
123:09 - let's see if that works i mean if it
123:12 - might work so let's go ahead and log me
123:13 - in
123:14 - whoa okay so it's set the user
123:18 - now what i can do is i can click this go
123:20 - to action and i can see
123:22 - if i click this the type is user set
123:24 - user
123:25 - payload is a user this is anger
123:28 - and then i can see in the state now but
123:31 - look the state didn't get updated
123:33 - correctly
123:34 - so this is where we need to check what's
123:35 - going on okay
123:37 - so the state didn't get updated
123:38 - correctly so
123:40 - whereas if i do this so you see when i
123:42 - increment
123:43 - it shoots off the increment value right
123:46 - and you see what what's awesome here
123:47 - guys i want to show you something
123:48 - quickly
123:49 - if i go ahead and just focus on this
123:51 - increment once if i hit increment
123:53 - decrement yeah now check this out guys
123:56 - so let's go ahead and increment a bunch
123:57 - of times
123:58 - i can actually go ahead and rewind
124:01 - the app so i can go back to this point
124:05 - and it rewinds the app how sick is that
124:07 - so you can actually rewind the app
124:10 - damn that is so cool that's cool
124:13 - you can do that crazy so you see like
124:15 - this is why
124:16 - like you can actually rewind the app so
124:18 - like and what it's doing is it's just
124:20 - dispatching
124:20 - the actions as you see like they're kind
124:22 - of highlighted and what you can kind of
124:24 - has a database like
124:26 - we can call it like a local storage
124:27 - database kind of thing yeah
124:29 - and this is more like a debugging tool
124:31 - but what you can actually do is you can
124:32 - skip an action so if i skip an action
124:34 - look
124:35 - it skipped an increment so now it's nine
124:37 - i skipped this one
124:39 - i used from a long time i never knew
124:42 - this happens
124:42 - yeah it's awesome right you can do a lot
124:44 - of stuff you can even do like
124:46 - some kind of uh i don't know what this
124:48 - is but uh you can actually even gives
124:49 - you some testing
124:50 - code it actually gives you the testing
124:53 - code
124:54 - which is insane as well like it actually
124:56 - gives you testing code
124:57 - um so you can actually go ahead and add
124:58 - this in the test and it will go ahead
125:00 - and like adjust respect to redux yeah
125:03 - and it will let you down
125:04 - redux and devtools just basically makes
125:07 - redux
125:07 - way more easier to visualize and
125:10 - understand
125:11 - exactly so now if i click log me in so
125:13 - now for debugging right i saw this one
125:15 - got fired off i click on the action i
125:16 - saw that okay
125:17 - it's got the payload this looks good but
125:19 - something isn't working because if i
125:21 - check the state
125:22 - i haven't got the user in the state so
125:24 - now let's go and check out why so
125:26 - let me see why because this is even sort
125:28 - of for me this is kind of interesting
125:31 - so state dot value equals this okay
125:34 - so now what we can do is let's go to our
125:38 - uh user slice and here i say state dot
125:41 - yeah so we've got this one i'm going to
125:42 - push this over here and
125:45 - here we get action.payload ah okay
125:48 - so remember when we looked at this
125:51 - the action said payload
125:54 - right so my um
125:58 - so now you can see payload user right
126:01 - so here what we're going to do is we're
126:03 - going to say
126:04 - uh payload dot so now this is where i
126:08 - made the mistake so action dot payload
126:12 - dot user okay and then i'm going to go
126:15 - ahead and do it now
126:16 - so now if i do this log me in okay why
126:19 - is it
126:20 - okay there you go log me in oh okay so
126:22 - now this is where it gets really cool
126:24 - so i just hit the the user set user
126:27 - right
126:28 - and it says it shows me a diff now this
126:31 - is the this is the awesome
126:32 - right now uh thank you so much abdul uh
126:34 - he says
126:35 - you're the best i'm getting it now um
126:37 - and you also troy thank you so much uh
126:40 - really glad that you guys are actually
126:41 - following along with this it's really
126:43 - awesome to see that so
126:44 - we got the action and here we set a
126:46 - payload user right
126:48 - so this is this tool is really good
126:50 - because
126:51 - you see it wasn't even a hard debug step
126:53 - but when i did it in react context api
126:55 - it was kind of
126:56 - like this is why you can see why it's
126:58 - used in production environments
127:00 - as opposed to not being used right so
127:02 - now if we go to the state
127:03 - and i check it hey there we go and the
127:05 - reason why it shows in the diff now is
127:07 - because when i hit like this is when i
127:08 - initialize the app for some
127:10 - this is why it fires up by default then
127:12 - when i do user
127:13 - this is a set user and also redux
127:16 - groups things in the easy to understand
127:18 - way for example this is inside the user
127:20 - slice and it's a set user action if i do
127:22 - this one
127:23 - it's inside the counter slice increment
127:25 - action
127:27 - so it's very friendly you see that and
127:28 - then here the diff shows that okay this
127:30 - action
127:31 - changed the user from no to says anger
127:34 - now what i'm gonna do
127:35 - is to show you even how powerful this is
127:38 - we've got the log out
127:39 - okay so now the log out actually and you
127:41 - know what this is actually they've
127:42 - changed redux to make it a lot easier
127:44 - now
127:44 - this is actually a lot easier than it
127:46 - used to be um it's not inside of
127:48 - login.js
127:49 - um it's tempting me to kind of use it
127:51 - again so now if we go to button and here
127:54 - what i'll say is log
127:55 - out okay and here i'm going to do on
127:58 - click
127:58 - like this i'm going to have an inline
128:00 - function because i just want to show you
128:02 - both
128:02 - uh and then here what i'm going to say
128:04 - is thank you so much to our
128:06 - sony you're teaching is really good that
128:07 - makes it too easier to learn thank you
128:08 - dude
128:09 - um on click here i'm going to say uh
128:12 - log out okay so log out and it's just
128:16 - pretty much it has no uh like here is
128:18 - the logout
128:19 - uh i'm not passing anything along with
128:20 - it state automatically gets passed
128:23 - um so right now that's it now
128:26 - let's check it out so log me in boom
128:29 - set user okay log out so
128:33 - okay interesting nothing happened it
128:36 - needs to be a dispatch
128:37 - hey i was i was hoping somebody shot i
128:40 - promised you i was hoping somebody shut
128:41 - down nice
128:42 - okay awesome so dispatch there you go
128:46 - and you'd basically go ahead and
128:47 - dispatch because you remember
128:49 - in order to do that that sort of you
128:51 - need to dispatch it into the data layer
128:53 - so we can do that now if i go ahead
128:56 - and log in and
128:59 - um log out boom and you see
129:03 - if we go to set user uh it shows that we
129:06 - set the user to sanger log out boom it
129:09 - went back to no
129:10 - now how do we use the actual information
129:14 - right how do we actually go ahead and
129:16 - use it so let's see how they use it
129:17 - inside a counter
129:18 - so here dude
129:22 - where'd they pull it they've got the
129:25 - they've got the actual increment count
129:28 - so account they pull from they use a
129:31 - selector
129:32 - to pull the account okay so i wonder how
129:35 - we can do it so we can go ahead and do a
129:36 - select
129:37 - selector okay so i'll show you guys how
129:40 - to do it from a selector
129:41 - um and then i think i'm not sure
129:44 - there's a there's another way to do it
129:46 - as well but i'm going to show you the
129:47 - selector wave
129:49 - practice but let's go to counter slice
129:51 - and here is the select count
129:53 - this one will go no i don't want this
129:55 - one on the user slice
129:57 - here i'm going to say select the user
129:58 - this will go ahead and give me back the
129:59 - user
130:00 - all right so this is a selector and
130:02 - basically it's a it's a controlled way
130:05 - of going up going into your store and
130:08 - getting what you want
130:09 - because remember the controlled way of
130:12 - doing this stuff is going to allow you
130:13 - to actually go ahead and
130:15 - uh and work in this sort of like a more
130:18 - a more functional maintainable way so
130:20 - here select user
130:22 - um so here state.user now what i'm going
130:25 - to do is i'm going to go into
130:27 - login.js login.js yeah i'm going to
130:30 - basically
130:31 - so again like i'm using an example of
130:33 - the counter app
130:34 - and this is what i'm saying the
130:35 - templates are really good guys because
130:37 - you can pretty much just use it as like
130:39 - a reference point
130:40 - and remember like i said i hadn't coded
130:42 - in redux for a very long time but coming
130:44 - back
130:44 - i literally used the reference they gave
130:46 - and pretty much is easy to pick up on
130:48 - because i know the pattern
130:49 - right so here i'm rather than the count
130:51 - i'm getting the user
130:52 - and this is not select count and select
130:54 - user and i'm just
130:56 - going to go ahead and import it from
130:58 - here so i'm going to say
130:59 - select user there we go
131:02 - and now what i can do is i can pretty
131:03 - much just use the user so i can pretty
131:05 - much at this point say i am the login
131:07 - so i am the login component and then i
131:10 - can say
131:11 - if there is a user then i want to render
131:14 - out
131:14 - a h2 tag
131:18 - which says the user is
131:22 - user and then here i'm going to say
131:26 - else render out a h2 tag which says
131:30 - nobody is signed in
131:34 - boom okay let's go back and it says use
131:36 - selector is not defined because we need
131:38 - to go ahead and
131:39 - import the use selector save it
131:42 - go back and it says oh okay it says
131:45 - objects not valid there's a react chart
131:47 - now
131:48 - the reason why this is happening is
131:50 - because
131:51 - the actual user is a um
131:54 - oh come on what's happening
131:58 - let's go back here oh my mouse is
132:01 - bugging out
132:02 - one sec guys
132:06 - okay we're good one second guys
132:11 - my mouse is freaking out
132:14 - okay
132:17 - oh man i think my i think my mouse just
132:20 - finally died
132:26 - okay you know what i think we're gonna
132:28 - have to go back to
132:29 - no mouse okay
132:33 - right there we go back to old school
132:36 - track pad okay so now what we have is
132:40 - the um objects are not valid as a react
132:43 - chart so
132:44 - what i would do at this point to debug
132:46 - this is i'll comment this out and here i
132:48 - would do console.log
132:49 - user to see what i'm pulling in from the
132:52 - user
132:53 - all right let's go ahead and do that so
132:55 - now if i go to my console
132:57 - i can see i've got the user but it's no
132:59 - okay if i log in
133:01 - i can see i get the user now why was it
133:03 - freaking out
133:04 - because um
133:08 - console.log user and then here i was
133:10 - saying the user is user
133:12 - so user i think it's
133:16 - because it's got user inside of user so
133:18 - if we do use a dot user is that
133:19 - is that right or am i being a bit where
133:21 - no log me in
133:23 - yes okay so i was actually this is kind
133:26 - of what you've got to be careful of
133:28 - because remember inside of the
133:31 - inside of the selector here see i done
133:35 - state.user
133:36 - but it's actually the user slice is the
133:39 - thing so here we need to say
133:41 - state.user.user
133:42 - because if we go into counter size it's
133:44 - state dot counter
133:45 - dot value and value is the the the
133:48 - initial state so here it's like
133:50 - this is the state the overall global
133:52 - object
133:53 - and then it's the slice that we're
133:54 - talking about so in this case it's the
133:56 - user
133:57 - and then it's the object and in this
133:59 - case it is then it reaches this point
134:02 - right so you wanna you need to be
134:03 - careful of that bit right um so now
134:06 - let's go back and we go back to our
134:08 - login
134:09 - and here we can say user and now it says
134:12 - no no
134:13 - okay login done now we can go back
134:16 - get rid of this this should now be fixed
134:19 - so if i undo this save it
134:21 - it says nobody is signed in log me in
134:24 - boom log out boom awesome
134:27 - let's go to redux and have a look what
134:28 - happened if i now this is what this is
134:30 - what's cool guys if i go ahead and jump
134:32 - back to sign in
134:33 - see that the user is ssng so i'm going
134:35 - to jump back to sign out
134:37 - and i can pretty much test the actions
134:38 - here
134:41 - so really and i'm already super pumped
134:44 - like 2 am now
134:47 - cool right uh sonny it means that
134:51 - we don't need a automation tools it will
134:53 - eliminate
134:54 - automation tools uh no there is a time
134:58 - and place for an automation tool which
134:59 - is separate to this
135:01 - yeah there there is a a a time base so
135:04 - automation tools could be used for
135:06 - testing they could be used for
135:09 - other other use cases i wouldn't rule
135:12 - out automation tools to be honest i
135:13 - would i would um
135:16 - cyprus for example is an amazing
135:18 - automation tool
135:19 - because because you have different types
135:22 - of testing you have unit testing which
135:23 - is basically where you test at the code
135:25 - level
135:26 - you have something called automated
135:27 - testing which is like or like
135:28 - integration testing which is basically
135:30 - where
135:31 - you run like an automation sort of uh i
135:33 - guess
135:34 - framework or software like cyprus and
135:36 - basically cyprus is like say if i ran a
135:38 - test
135:39 - it would basically would do an automated
135:40 - test of like it would log into the app
135:42 - it would place an order it would
135:43 - check that this this this happened and
135:45 - then it will go back and it does all of
135:47 - that automatically
135:48 - so so there is there is a place for
135:50 - automation um that's separate to this
135:52 - try not to get this confused if anything
135:54 - this would be
135:56 - uh unit testing because here you can
135:59 - basically say
135:59 - when i click the login this is the test
136:02 - that needs to run
136:04 - for example okay and here it's saying
136:06 - expect
136:07 - the this to be the state when you just
136:09 - did this
136:10 - right so like but try we're not going to
136:12 - talk too much about testing because it
136:14 - can get very very
136:15 - deep into that uh there's testing
136:17 - frameworks like puppeteer i think one uh
136:19 - selenium is another one but cyprus is a
136:21 - really good new one
136:22 - uh i've used cyprus before it's really
136:24 - really fast um
136:27 - [Music]
136:31 - okay so um yeah so
136:34 - uh this uh in your slice dot js
136:37 - your user can we use the same spread
136:40 - operator like how you were doing in the
136:41 - context api also like
136:43 - for the previous values um so say that
136:46 - again sorry
136:48 - like in the uh context api you are
136:51 - storing the previous values also
136:53 - previous values on dispatch of an action
136:58 - so whenever i dispatch some action yeah
137:01 - so for example
137:02 - yeah so you you were actually saving
137:03 - some information like the previous
137:05 - the initial values of the state
137:09 - and then you were adding adding the
137:10 - object oh you were saying okay yeah so
137:13 - let's spread this yeah he's talking
137:14 - about the spread
137:15 - operator so very very good question
137:18 - right
137:18 - now what's really clever about redux is
137:21 - the way they've built it and the way
137:23 - they have this sort of
137:24 - toolkit that they have i say let's go
137:26 - inside the user you see this redux.js
137:28 - toolkit right
137:29 - now the clever thing is the way that
137:32 - it's built
137:33 - right is that this is um
137:36 - is something called an immutable change
137:38 - so even though it looks like i'm
137:40 - changing it directly right
137:42 - um but the redux toolkit actually
137:46 - it it cleverly does it behind the scenes
137:50 - without us having to do things like um
137:53 - um so that this is basically what it's
137:55 - saying so
137:56 - let me go ahead and make this a bit
137:57 - bigger so it says redux toolkit allows
137:59 - us to write mutating logic in reducers
138:01 - which means that it looks like i'm just
138:02 - changing the state.user right
138:04 - but under the hood what it's doing is
138:07 - it's detecting the change that i want to
138:09 - make
138:10 - and then it's doing it in a way that
138:11 - basically preserves the original state
138:14 - and it basically creates a new state
138:16 - right
138:17 - and it just updates only the things that
138:19 - needed to be changed
138:20 - but you can code it like this right
138:23 - which is
138:24 - easier and it's more safer than doing
138:25 - the spread right so redux talk it back
138:28 - in
138:28 - before you this wasn't actually
138:30 - supported so before you would have had
138:32 - something like this
138:33 - you would have had something like this
138:35 - you would have state
138:37 - dot user
138:40 - and then you would have user is like
138:43 - this
138:44 - you'd have something like that before
138:47 - right but they've upgraded the react
138:49 - the toolkit now so that you can pretty
138:50 - much just go ahead and write very
138:52 - simple code like this you can just
138:54 - pretty much say change the state.user
138:56 - to the action.payload.user when we set
138:58 - the user
138:59 - to be fair i automatically have the
139:01 - access to the earlier values also
139:04 - so remember the earlier values that
139:06 - you're talking about
139:08 - everything is actually inside of this so
139:10 - if you need the earlier values you can
139:12 - get them with state
139:13 - you can just say state dot user that's
139:15 - the earlier value
139:17 - action.payload.user is the new value
139:22 - yeah so here if i was to do and we can
139:25 - test this we can say console.log
139:28 - let's just say check me and here i'm
139:31 - going to say state
139:32 - let's see what it gives us back inside
139:34 - the state here right so now
139:36 - if i go into set user so let's go ahead
139:38 - and refresh this to
139:39 - console let's do set you so check me
139:42 - look he's got a bunch of all this widget
139:44 - you see we don't really they they
139:46 - protect you and and trust me it's
139:48 - very good that they protect you against
139:50 - this stuff because
139:52 - it's you don't so
139:55 - so this there's a principle in in like
139:58 - functional programming called
139:59 - immutability
140:00 - and the whole point of immutability is
140:02 - so you
140:03 - you never want to actually mutate
140:06 - a an object and say
140:10 - yeah like you never you never want to
140:11 - say like this object should now be this
140:14 - new object
140:14 - like because what you're doing is you're
140:16 - kind of overwriting the object
140:18 - so we do we try to stay away from that
140:20 - and we use something cool
140:22 - uh guys please use your mic mute your
140:26 - mic
140:26 - if you're not talking um yeah so
140:30 - okay somebody uh sonny you made it
140:33 - yourself yeah you did
140:35 - right okay yeah so uh
140:38 - uh yeah so so pretty much what we do is
140:40 - we we do something called immutable
140:42 - changes i would recommend reading up on
140:43 - immutability because i'm not going to
140:44 - cover it too much now
140:46 - but put it this way it does it updates
140:48 - the state in a
140:49 - very clever way okay
140:53 - so what if your console stayed that user
140:55 - would that have worked
140:57 - uh i mean we could try we different try
140:59 - console.userconsole.com
141:01 - to be honest i don't think so i think it
141:02 - will show you some kind of proxying
141:04 - stuff
141:05 - um okay no it did it did work yeah so if
141:10 - you do
141:10 - log me in so but this remember the
141:12 - initial value before i clicked this was
141:14 - no
141:15 - so that's why you saw this but it's
141:17 - changed now
141:18 - but the action.payload would have been
141:20 - the one so so if i now do this and i say
141:22 - um so let's just do it like this
141:24 - previous
141:26 - previous value previous value
141:30 - is i think this will answer your
141:32 - question previous value is this
141:36 - new value is action
141:40 - dot payload dot user
141:43 - okay now let's try it out so log me in
141:47 - previous value is no new value is ss
141:50 - anger
142:03 - [Music]
142:04 - and actually add the previous value and
142:07 - the action.
142:10 - i mean firstly why would you want to do
142:12 - that secondly
142:13 - you shouldn't do that um because you
142:16 - shouldn't you as in
142:17 - you i mean in a case like say i'm adding
142:20 - products
142:21 - right like into the cart and i've added
142:23 - like one by one
142:24 - why okay so if you so imagine we had
142:27 - like uh
142:28 - let me just go ahead and obviously we
142:30 - shouldn't have it here
142:31 - right but what i'm going to say is this
142:32 - is imagine we had a basket like an array
142:34 - okay what you could do is you could say
142:36 - like let's just say add to
142:38 - basket right so we had some kind of add
142:40 - to basket
142:41 - which took a state took an action and it
142:44 - did this
142:44 - right then here what we're going to say
142:46 - is we're going to say state dot basket
142:49 - equals um here i would do this i'll do
142:52 - whatever the state right right yeah plus
142:55 - i got it i got it
142:56 - yeah thanks thank you now that's a
142:57 - really good question actually because i
142:59 - think that would have helped a lot of
143:00 - other people
143:01 - um and then you can say action dot
143:02 - payload that's a really good question
143:04 - dude
143:04 - and you can say action i'll pay off the
143:05 - item and that's how i would do it
143:08 - thanks for clearing it out yeah yeah
143:10 - that's really that's a really good
143:11 - question actually yeah because i think
143:13 - because even uh i mean that actually
143:15 - made a lot of sense yeah you could do
143:16 - that
143:16 - and then that would be also um sonny
143:19 - about
143:19 - the action.payload.user
143:23 - do you get the metadot user there on the
143:25 - payload because of the name you said
143:28 - right at the beginning of the user slice
143:30 - constant you see you have a name there
143:32 - which you set the user this one oh no
143:34 - this
143:35 - upper okay this is this is the the name
143:38 - of the slice
143:40 - so remember this this level so the
143:43 - actual so imagine if we go back to
143:45 - um store so you see this slice
143:49 - this is where we name the slice so
143:51 - remember like those
143:52 - that onion pill like that sort of sort
143:54 - of layers
143:55 - all right this is the name of the set so
143:57 - for example if we go to the counter size
143:59 - the name would be counter
144:02 - right but here but that's what triggers
144:05 - the payload that's what i'm saying it's
144:06 - the method for payload i just
144:08 - tested it um no so it's actually
144:11 - where we do the method for the payload
144:13 - is actually
144:15 - inside of login here this one you see
144:17 - that
144:19 - that's okay that's the one so if i
144:21 - change this to username
144:22 - i'll show you so now if i go to the user
144:24 - slice if i change this
144:26 - to username now i have to change the
144:28 - payload here to username
144:30 - and if i do this and i save this now now
144:33 - if i go ahead and do
144:34 - log me in see it works like that oh but
144:37 - the new value is undefined
144:39 - so let's go to redux and just check why
144:41 - because it says user
144:43 - okay let's go to action the
144:45 - action.payload.username
144:48 - action.payload.username uh
144:50 - username and then
144:52 - [Music]
144:54 - state.user equals actually in console
144:56 - log you have to change the user to
144:58 - username
144:58 - yes most likely yeah yeah yes yes yes
145:01 - yes
145:02 - perfect yeah they love the username
145:03 - that's it
145:05 - so it's funny uh so so it's easier than
145:08 - the
145:08 - api uh context api it's less
145:12 - uh less code than the
145:15 - you know what dude i i have to admit
145:17 - with you like i
145:18 - i hadn't played with it before they done
145:20 - all this upgrade stuff like with the
145:22 - toolkit
145:23 - um it's actually really good like i said
145:26 - i i would actually recommend that we all
145:28 - try and
145:28 - and do this now because you saw and and
145:30 - i will actually
145:31 - i will i will actually say that as in
145:33 - they've upgraded it so well
145:35 - that this is awesome like because in
145:37 - like as if you guys can learn this
145:39 - this is actually really powerful now
145:42 - bear in mind there are things like
145:44 - map state to props map props dispatch
145:46 - you're going to see because in
145:47 - production this is the
145:48 - new this is very new this way yeah
145:51 - now the way that you're gonna see it in
145:53 - in sort of typical environments may not
145:54 - look like this this is using like hooks
145:57 - and it's using this hook and it's using
145:59 - a special kind of hook
146:00 - the way you would do it is um i think i
146:04 - think what i might do
146:05 - is is is next time
146:09 - show you guys a sort of redux project
146:11 - like an old-school way of doing the
146:13 - redux way
146:14 - um because that's what you might get
146:15 - into over in a project right
146:18 - i'm just gonna go ahead yeah that would
146:19 - really help yeah that's right
146:21 - you know like some kind of get some kind
146:23 - of big um
146:25 - like a big old school project and we
146:27 - kind of build on it like that so i'm
146:28 - going to go ahead and
146:32 - mute him yep so i'm gonna go ahead and
146:34 - um
146:37 - uh joe i think that's you actually is
146:40 - that yeah i try to mute everyone
146:42 - wait okay no sorry
146:46 - sorry joe it's not you i accidentally
146:49 - yeah
146:49 - yeah go for it yeah so basically when i
146:52 - want to store the values in the session
146:54 - like how can we
146:56 - communicate between context api or redux
146:58 - with a session
146:59 - so that i don't need to store every time
147:01 - in the cookie basically
147:02 - so that uh for this like there is no
147:05 - communication between cookie and map
147:08 - even the context api or the reducer or
147:10 - three depths
147:11 - so so cookies and so opposite you're
147:14 - talking about persistence
147:16 - so you basically mean when i write yeah
147:18 - so when i refresh the page
147:19 - like how do we keep track of what the
147:21 - count was on basically or something like
147:23 - that
147:23 - right um there's loads of ways you can
147:26 - do it
147:27 - uh there's like redux offline so there's
147:29 - something called redox offline
147:31 - there's redux persist you see like build
147:34 - offline first apps
147:37 - there's probably a really new one redux
147:39 - persist
147:43 - persist reducer you see like this but i
147:45 - would i'd keep looking around and maybe
147:47 - find the most
147:48 - modern one i guess um but you could do
147:51 - it you could do it loads of ways i mean
147:53 - i don't feel like i don't think it's a
147:54 - good idea to jump too much into this
147:56 - right now but um let's just try to use
148:00 - persist let's see if we can use it like
148:01 - relaxing any reference would be okay
148:03 - like i'm
148:03 - doing this for a project basically okay
148:07 - so what you want to do is it's called
148:09 - hydration
148:10 - okay so it's like what you're trying to
148:12 - do is called um
148:14 - basically what what we refer to it as
148:16 - like so i'd recommend looking at this
148:18 - kind of thing
148:18 - like as in like redux persist or redux
148:21 - offline
148:22 - right okay and what it will do is
148:25 - they're built in such
148:26 - a way that they will use either local
148:27 - storage or they'll use like a cookie or
148:30 - something like that so and then what you
148:31 - do is basically you see like we've got
148:32 - the provider here
148:34 - and then you have another thing which
148:35 - basically wraps so the root component
148:37 - would be your app
148:38 - but then here persist gate would be
148:40 - something that like
148:41 - basically goes ahead and you know it
148:43 - will provide like the persistence layer
148:45 - so provide
148:46 - the local storage layer um but let's
148:48 - click on basic usage and let's see how
148:51 - the systole um but long story short
148:55 - you're gonna need
148:55 - either one of these it'll be redux
148:57 - persist or read that's offline and the
148:58 - whole point is that
149:00 - uh what's gonna happen is when your app
149:01 - loads up again so
149:03 - imagine like if i refresh now it goes to
149:05 - zero so let's say i do this and i
149:07 - implement something like redux per
149:08 - sister redux offline
149:10 - then what happens is when i refresh the
149:11 - app it does something called hydration
149:14 - so it rehydrates which means
149:16 - imagine the app starts blank and then it
149:19 - rehydrates
149:20 - and it pushes the values that it had in
149:22 - local store
149:23 - back into the app which means that it
149:25 - basically goes back to 5.
149:27 - okay so there is some time game between
149:30 - them
149:30 - um what happens super quick like you
149:33 - won't see it
149:34 - um okay but you mean you could do that i
149:37 - think i have a question based on that
149:38 - like last night i developed uh
149:40 - the facebook app but whenever i refresh
149:44 - the page
149:44 - you know like the person who is logged
149:46 - in immediately
149:48 - so it will bring me back to the login
149:49 - page for me to log in again
149:51 - is it because of this persistent stuff
149:53 - yeah so
149:54 - the facebook the facebook app used
149:57 - um google login google yeah
150:01 - so two things to consider if you use the
150:04 - email and password implementation which
150:05 - we've done with the amazon build i think
150:08 - yeah if you do that then it actually
150:11 - firebase have built it under the hood so
150:13 - it will persist by default so as soon as
150:15 - you go back on it'll check if they're
150:16 - logged in it will grab the user and
150:17 - they'll basically throw you back in to
150:18 - where you're at
150:19 - but with the google one uh i would i
150:22 - would
150:23 - recommend that you research on uh
150:25 - because i i mean i didn't implement it
150:26 - for that one but i think it'll be google
150:28 - firebase uh user god's sake
150:32 - oh sorry that was someone again google
150:34 - user
150:35 - um authentication
150:39 - so firebase google user authentication
150:41 - persistence is what you're looking for
150:44 - and basically what you can do see
150:45 - authenticating state persistence
150:47 - right so again that's a skill guys to
150:51 - literally learning how to google the
150:52 - right things just
150:54 - practicing that skill is going to help
150:55 - you like dial in that sort of you know
150:57 - that ability to sort of find what you're
150:59 - searching for
151:00 - um so here
151:03 - you can basically look you can store it
151:05 - in local you can store it in session
151:07 - or you can sort in none now here this is
151:10 - awesome because what you can do is
151:12 - you can actually go ahead new sign will
151:14 - be persisted with session so remember
151:16 - set persistence okay so what you might
151:19 - need to do
151:20 - is before you actually go ahead and do
151:22 - that um
151:24 - you need to basically go ahead and call
151:25 - the firebase.org
151:27 - set persistence method so this one here
151:30 - and then basically that will go ahead
151:32 - and persist the login session
151:34 - um on your computer so here we should
151:37 - have
151:38 - here's well here's what you wanted to do
151:39 - yeah so this is exactly what you need to
151:42 - do
151:42 - so basically you most likely in your
151:45 - code have at some point
151:46 - here new firebase auth you basically
151:48 - there is a snippet of code i remember i
151:50 - remember exactly
151:51 - in where it says sign up with pop-up
151:53 - sign up with redirect provider
151:55 - right that bit all you need to do is
151:58 - before you
151:59 - um call that make sure you do
152:04 - the auth dot set persistence and then
152:06 - you do this but change
152:07 - dot none change it from dot none to
152:11 - um dot session
152:14 - so this one yeah so what i'm going to do
152:16 - is i'm going to drop this for you guys
152:17 - in the zoom chat
152:19 - and you guys can actually go ahead and
152:20 - read that but
152:22 - go ahead and play that out because uh
152:24 - give that a try and uh you can see that
152:26 - suraj said sunny how did you gain such
152:28 - enormous knowledge through a lot of
152:29 - practice or enormous reading
152:31 - um honestly it's a mix it's a mix of
152:34 - throwing yourself in deep end
152:36 - it's a mix of just uh when you're in in
152:39 - production environment you get a lot of
152:42 - practice
152:42 - also guys if you're watching this on
152:44 - youtube please smash the thumbs up if
152:45 - you're enjoying it
152:46 - uh we really appreciate that um but yeah
152:48 - what i would say is
152:49 - if you if you like in production
152:52 - environments just by being around
152:53 - other developers who have all sorts of
152:56 - like experience and kind of like
152:58 - have that knowledge just literally act
153:00 - like a sponge
153:02 - right so which means that like literally
153:03 - if you're never go into coding with the
153:06 - mindset of i know this
153:07 - even today i went in with the mindset of
153:10 - i don't remember how to code redux so
153:12 - i'm going to keep an open mind
153:14 - i'm going to keep myself like quite
153:15 - flexible to it but we're going to go
153:17 - ahead and um we're gonna go ahead and
153:21 - start with a fresh mindset so muhammad
153:24 - says how can we inject redux module to
153:26 - our projects
153:26 - if you go to the redux so literally just
153:29 - type in redux
153:30 - um and go to getting started with redux
153:34 - you said you wanted to post you know the
153:36 - link to the persistent stuff google
153:38 - firebase on oh i did i did do it i'll
153:40 - put it here again one sec
153:42 - um so just point up there we
153:47 - yeah go i had a question yeah like
153:49 - suppose in an application where you know
153:52 - uh we route from one page to other page
153:55 - so suppose i am
153:56 - reporting one page and i have used grid
153:59 - data like some about
154:00 - 1500 records yep and then if i click on
154:04 - a particular
154:04 - like row and then it will redirect me to
154:07 - that
154:08 - particular build round report yeah and
154:10 - then i have a
154:11 - back button which will take me back to
154:13 - all that records
154:14 - yeah so will redux be beneficial over
154:17 - there
154:17 - like i don't want to pull all that
154:19 - records again from the database like
154:21 - it's just a back
154:22 - routing from one page to other so
154:26 - okay so in that case okay you need to be
154:28 - careful of two things now
154:30 - um i would say um
154:33 - so one thing would be
154:36 - right so one thing you you you'll have a
154:38 - problem with possible stale data
154:40 - so you need to think about that from
154:41 - architecture's perspective you like
154:43 - you might have put stale there so
154:44 - imagine you poured in a bunch of um
154:48 - uh ab abduces did sunny possibly on
154:50 - slack over here
154:51 - so this is the link guys i'm gonna post
154:53 - it in oh
154:54 - everyone in the waiting room sorry sorry
154:56 - sorry sorry uh
154:58 - i don't know everyone in meeting
155:01 - okay oh man i hate this there we go it's
155:04 - sunny there's no one waiting because
155:06 - there's no no no no no no no no no no no
155:08 - no no no i meant in the chat yeah and
155:09 - that
155:09 - in the zoom did some weird update i just
155:12 - dropped the uh the link like five times
155:14 - in the chat so sorry guys you can go
155:16 - ahead and check it out
155:16 - sorry about that that's why i didn't
155:18 - make i thought i'd sent it before
155:20 - um just to add to what tushar said is to
155:23 - show referring to like a kpi
155:25 - scenario on a dashboard where you can
155:27 - click and you can go to the
155:29 - show are you referring to that something
155:31 - yeah no it's like a master suppose i'm
155:33 - having distributors like all
155:34 - distributors for one country
155:36 - and then i'm clicking on distributor and
155:38 - it will take me to new page and it will
155:40 - show all clients of that distributor
155:42 - okay there is a back button so if i
155:44 - click on back it will take me back to
155:46 - all distributors
155:47 - so yeah i don't want to yeah i don't
155:49 - want to reload that data again from
155:50 - database
155:51 - so it's like yeah so what i would
155:54 - recommend is
155:54 - have some kind of you could use
155:56 - something called redux offline um
155:57 - redux offline the benefit of that would
155:59 - be once you pull in some information
156:02 - for example into the app it would
156:03 - basically like kind of like cache it
156:05 - okay so it will kind of store it into it
156:07 - into your local sort of uh
156:08 - local storage but you you would have to
156:12 - remember whenever you do that you have
156:14 - to think about the architecture you have
156:16 - to think about that right
156:18 - is it going to be stale data like are
156:20 - the the sort of um you just said there's
156:22 - manufacturers or something right
156:24 - like is it important that that that's
156:26 - always up to date right if it is
156:29 - then you need to check right is the cash
156:31 - version less than
156:32 - five like five um five minutes old or is
156:35 - it like less than five fifteen minutes
156:37 - old
156:37 - if and then it would be only just for
156:39 - that phase you know like
156:41 - if if he's on that report like the url
156:45 - of if he is going to that report
156:47 - and if that's an internal drill down
156:49 - like from
156:50 - that distributor yeah but if he's going
156:53 - back to other menu rolls and if he comes
156:55 - back
156:56 - he needs to reload it again yeah so you
156:58 - can do that don't you don't get me wrong
157:00 - you can do it but remember
157:02 - what you what what seems like a very
157:04 - natural experience to us
157:06 - as a human is is on the computer side
157:09 - you have to think of it in terms of an
157:11 - architecture it's like building a house
157:12 - you have to kind of build things with
157:14 - the support underneath it so that it
157:16 - supports that functionality from the
157:18 - get-go
157:19 - or you have to implement something like
157:20 - redux offline so it allows you to
157:22 - to enhance the app so it has that
157:24 - functionality otherwise
157:26 - you will run into a problem where you
157:28 - have some kind of logical gap
157:29 - where you're like uh how that why is it
157:32 - refreshing here and not refreshing here
157:34 - and what can happen and i'm just kind of
157:36 - giving you my advice on this
157:37 - based on experience is you can kind of
157:39 - build very
157:41 - nasty sort of solutions right various on
157:44 - tricky nasty solutions which
157:46 - which work but then are a nightmare to
157:48 - to touch
157:49 - like and you don't want to get into that
157:51 - position so um
157:53 - make sure you're in a position where you
157:55 - you think about those things from
157:57 - the get-go but honestly dude what i
157:58 - would say is um is is just making sure
158:01 - that you have uh
158:02 - um make sure you just have have an open
158:05 - mind and just practice it honestly just
158:06 - practice it and uh
158:08 - if you don't get it right the first time
158:09 - don't worry about it just keep doing it
158:10 - until you get it right every time
158:12 - honestly that i've done so many
158:14 - solutions where if i look back i'm like
158:15 - that was
158:16 - the crappiest solution ever but
158:18 - truth be told like it worked
158:20 - and i learned from it and now i can
158:22 - pretty much go ahead and improve
158:24 - my sort of the next time i do it that's
158:26 - it you know
158:27 - so don't beat yourself up about it but
158:29 - um i just saw some comments now
158:31 - cheyenne says the redux data layer where
158:33 - is it stored is it browser storage you
158:34 - know it's actually sort of uh
158:36 - it's local so remember it's
158:37 - non-persistence um which means that if
158:39 - you're refresh you're still going to
158:41 - lose
158:41 - so you can you would have to implement
158:43 - something like redux offline or redux
158:44 - persist or something like that
158:46 - to go ahead and push it into browser
158:47 - storage um
158:49 - [Music]
158:50 - huda rahman says as my first time in
158:53 - redux i stayed till now trying to
158:54 - understand your nice explanation thank
158:56 - you so much thank you
158:57 - so much for for watching uh troy says
159:00 - sunny is very organic teacher nice
159:01 - experience and skill and open attitude
159:03 - to training others that's going good
159:04 - thank you very much dude
159:05 - uh awani says huge respect for sunny
159:07 - thank you so much thank you
159:10 - soon
159:14 - uh one at a time guys okay
159:18 - uh sony uh i just started a question so
159:21 - uh you mentioned about uh two sort of
159:24 - states
159:24 - state user and payload.user right
159:29 - so these are like uh the initial and the
159:31 - last state
159:32 - if in case you wanted to uh get states
159:35 - that are in between
159:36 - like version states that you can sort of
159:39 - use it as a fetch dot
159:40 - command sometimes you can it doesn't
159:43 - substitute postmen and
159:45 - things that you can use within the
159:47 - browser to
159:49 - analyze data you remove stale data
159:52 - things like that
159:52 - um do you mind repeating again because i
159:56 - kind of lost a bit halfway so just
159:58 - repeat that one more time
160:00 - yeah so what i was saying is uh does
160:03 - uh redux uh solve the issue with
160:07 - sometimes
160:07 - uh analyzing data taking up uh data's
160:11 - that are stale
160:12 - uh analyzing them just the same purpose
160:14 - as postman
160:16 - what it does is fetching the data
160:18 - analyzing it maybe you can remove it
160:20 - from the
160:21 - state uh so remember this remember try
160:24 - and
160:25 - think of everything individually so
160:27 - firstly postman doesn't do that postman
160:29 - is literally a client that can just make
160:31 - a request you can make a post request to
160:33 - get request it doesn't analyze it just
160:35 - literally
160:36 - can make the request to get the data
160:37 - right um thank you so much patrice
160:40 - um so it only makes the request right
160:42 - now redux
160:43 - is allows you to pretty much go ahead
160:45 - and
160:47 - it allows you to go ahead just just
160:50 - literally
160:51 - store the data in some way right like
160:52 - you literally all you can do is like it
160:54 - just
160:54 - it's a it's a state management sort of a
160:57 - tool
160:58 - right think of it that way so when it
161:00 - comes to
161:01 - analyzing stale data you can have
161:03 - something like a middleware
161:04 - so redux supports something called
161:06 - middleware um
161:08 - you could do that and basically you
161:09 - could check if the data that you're
161:11 - fetching for example the selector this
161:13 - could be like where you enhance the
161:14 - selector
161:15 - you can pretty much go ahead and enhance
161:16 - the selector so that you can say
161:18 - if i grab the user and the user's
161:21 - timestamp
161:22 - is like more than five minutes ago go
161:25 - ahead and fetch the user
161:27 - i mean this little example you know um
161:30 - that's kind of a sort of quick example
161:32 - of that
161:33 - uh cheyenne says sonny can you give a
161:35 - little bit more info about redux saga
161:37 - so redux saga is something that we use
161:41 - when um react target is actually
161:43 - something we use whenever
161:44 - that's all right dude welcome so redux
161:46 - software is something that we use when
161:48 - uh
161:49 - we want to do anything asynchronous so i
161:50 - mentioned asynchronous stuff before
161:52 - is pretty much a case of when you make a
161:54 - request
161:56 - right and it's got like a delay because
161:57 - you're pretty much going across the
161:58 - network and then you're coming back
162:00 - right so it's kind of a little bit of a
162:01 - delay redux saga is a very popular
162:04 - library in redux
162:05 - to do that um there's also a redux thunk
162:08 - so
162:08 - two options i would recommend sort of
162:11 - this consider this kind of homework to
162:13 - go away have a look at
162:14 - redux stunk and redux saga they're two
162:17 - things which are going to allow you
162:18 - to handle asynchronous actions and side
162:21 - effects
162:22 - so side effects are basically put this
162:24 - way imagine i sent
162:25 - i went ahead and um my target says he
162:28 - uses thunk
162:29 - imagine you went ahead and you pretty
162:31 - much um
162:32 - sent a request to go ahead and fetch
162:35 - some records from google
162:37 - right let's just say you did that for
162:38 - some reason and then let's go ahead and
162:40 - imagine that you
162:42 - um it it came back fine right but they
162:46 - say a side effect of that was that the
162:48 - data failed to load or the network
162:50 - dropped or something like that
162:51 - how does your app account for that right
162:53 - so redux stunk redux saga
162:55 - they all allow you to handle side
162:57 - effects of asynchronous actions
162:59 - so because remember when you're doing an
163:00 - asynchronous action you can sometimes
163:02 - have
163:03 - it can go successful it can fail loads
163:05 - of things can happen because of that
163:06 - network call
163:08 - right asynchronous can also mean if
163:09 - there's a time delay so let's say you
163:11 - want to do
163:12 - uh it takes like five minutes for
163:14 - something to calculate after you click a
163:15 - button that's asynchronous because it's
163:17 - not
163:17 - immediately sync you don't immediately
163:19 - see a synchronized result
163:21 - which is why we call it an asynchronous
163:22 - action anything with the delay think of
163:24 - it as asynchronous so redux think
163:26 - funk and react saga are things to look
163:28 - into for that
163:29 - um just going to take a few questions
163:32 - and then we're going to wrap
163:32 - up today's session um uh sunny
163:36 - yep so could you use like firebase
163:40 - or mongodb with redux like i mean for
163:43 - the
163:43 - counter right here so like whenever even
163:46 - if you do
163:47 - reload the um the amount would be saved
163:50 - like you could retrieve the most recent
163:52 - amount that was
163:54 - yeah so good question uh remember so if
163:57 - you're using something like firestore
163:59 - i wouldn't even say i would maybe just
164:01 - say directly mapped to the database
164:03 - because firestore makes it so easy to go
164:05 - ahead and do that
164:06 - and they account for offline which means
164:08 - that um if you was to go offline
164:10 - change some stuff and then you got an
164:12 - internet connection again it goes ahead
164:13 - and syncs everything
164:15 - so i wouldn't even bother enhancing it
164:16 - but to answer your question
164:18 - i'm going to quickly share my screen and
164:20 - show you that there are libraries
164:22 - um like this you can do redux firebase
164:26 - uh and here you can see react redux
164:29 - firebase react bindings for firebase so
164:31 - there's
164:32 - loads of libraries uh this one has a
164:34 - decent number of stars
164:36 - um so here you can pretty much see how
164:38 - you can use it you can see like
164:40 - how they've implemented it and basically
164:42 - what this will do is
164:44 - you see like the where we had the
164:45 - reducer stuff
164:47 - right you pretty much have a firebase
164:48 - reducer and then what that does is
164:51 - um you have this hook here inside of
164:53 - your functional component so imagine
164:55 - this is our component
164:56 - say cons firebase equals uh use firebase
165:00 - and then here you can pretty much push
165:01 - things into like the firebase collection
165:04 - so to do and and you can do things like
165:06 - that now
165:07 - am i a fan of this sometimes i've used
165:12 - it
165:12 - but i found it can also make things kind
165:14 - of over complicated
165:16 - um so i've kind of like could just ask
165:19 - we just we could just add the firebase
165:21 - object to the redux state and it will
165:23 - still work
165:24 - yes and you could do it that way um but
165:27 - there's no reason to do that
165:28 - i mean no no i i wouldn't say there's no
165:30 - reason um
165:32 - because that it could integrate nicely
165:36 - it i mean just be the setup is difficult
165:39 - yes
165:40 - and i'm against it because i i see the
165:42 - simplicity of just doing it directly
165:44 - but they do give you things like is
165:46 - loaded is empty
165:48 - uh which help you out because for
165:49 - example is loaded is going to help you
165:51 - uh have like a piece of state not a
165:54 - piece of state but it's going to allow
165:55 - you to basically go ahead and um
165:57 - have like some kind of loading right so
166:00 - like imagine like if it takes a second
166:02 - for that asynchronous action
166:03 - you can have a little spinner loading or
166:05 - something like that right you could do
166:06 - that
166:07 - um which is kind of cool um but there's
166:10 - uh there's many
166:11 - different things you can use like even
166:12 - here react reader oh this is pretty cool
166:15 - so this is actually um an official
166:18 - looking react redux firebase
166:20 - um look you see this this is pretty cool
166:22 - so i recommend maybe go have a check of
166:23 - this
166:24 - firestore um i'll drop this in the chat
166:27 - now guys
166:27 - uh check this out
166:32 - that's so sony uh there you go i just
166:35 - dropped it in the chat
166:36 - yep yeah what was that dude
166:41 - yeah uh sony so isn't this just like uh
166:44 - uh is like a mini uh query
166:48 - for uh for uh for those for the state
166:51 - that is currently running
166:53 - is it isn't this like uh what was that
166:56 - like a query
166:57 - language like you can uh literally
167:00 - go through the data and uh no so
167:03 - so guys try not to like honestly like
167:07 - what we tend to do naturally as
167:09 - developers thank you so much pedro
167:11 - um may and i think we can definitely
167:13 - advance more in redux next time maybe
167:15 - like
167:15 - some kind of example of like an old
167:17 - school redux app and
167:18 - that kind of thing would be cool um yeah
167:20 - so try to not
167:22 - overlap principle so in coding to be a
167:25 - good developer
167:26 - you get get really good at kind of
167:28 - keeping things simple
167:30 - right because like what we tend to do is
167:31 - we naturally really over complicate
167:34 - and and and all that naturally be like
167:36 - i've heard of this principle is this
167:38 - part of this and is this part of this
167:39 - and is this like
167:40 - is this where we like do you like data
167:42 - mining and things like that you know
167:44 - everyone kind of like overlaps
167:45 - principles and stuff like keep it so
167:47 - simple
167:48 - and just remember all redux is doing
167:51 - is managing state within an app that's
167:54 - it
167:55 - that's literally all it does right it
167:57 - can then you kind of plug in things on
167:59 - top
168:00 - like redux offline redux persist redux
168:03 - saga
168:04 - all that sort of stuff it all just plugs
168:06 - in on top
168:07 - right building and functionalities on
168:10 - top of it
168:11 - yeah yeah thanks
168:14 - no worries dude i had a question yeah
168:19 - sunny yeah i had a question okay uh
168:22 - in context api who has we have created
168:24 - separate uh
168:25 - state provider file and reducer files
168:29 - for
168:30 - login basket something like that is that
168:32 - creating separate data layers or we are
168:35 - using in
168:36 - them in the same data layer uh say that
168:39 - again sorry
168:41 - instead in context shape way we have
168:45 - created files state provider for
168:47 - different
168:48 - purposes for login for baskets and
168:51 - things like that is that creating
168:52 - different data layers are using in the
168:54 - same data layer
168:56 - um so in this case what i was doing was
168:58 - i created two
169:00 - slices of state one i created for
169:04 - uh don't ignore the basket option and
169:06 - that was that's just
169:07 - me demoing something in this case we had
169:09 - let's go to our store
169:10 - here we had a counter slice and a user
169:12 - slice right now
169:14 - imagine if i had a basket inside of my
169:15 - app i would probably create a basket
169:17 - slice and then i'd have a basket reducer
169:19 - to listen and manipulate the
169:22 - the app based on that stuff now um
169:26 - what i would say is it's re like for
169:29 - example i would have a basket and a
169:31 - basket producer and then
169:32 - i would only use firebase or when at the
169:35 - point in which
169:36 - i actually processed the order right so
169:38 - like when i actually push the order
169:40 - into the the user sort of like um and i
169:43 - actually
169:44 - sort of handled the payment and stuff
169:45 - then i would go ahead and use firebase
169:47 - and say like hey like
169:48 - or if you really want to get your app
169:49 - super like sort of souped up i guess
169:51 - you're gonna have like um their their
169:53 - basket
169:54 - in firebase so it's always kind of there
169:56 - so i guess if they come back to the
169:58 - website
169:58 - they've still got their basket you can
170:00 - do that um but the main thing is right
170:02 - is
170:03 - try and keep your yours your store
170:06 - sliced up into slices which
170:08 - which are which makes sense right like
170:10 - have a
170:12 - a basket slice for the purple and that's
170:14 - the only purpose of that basket size to
170:16 - be
170:16 - to basically manipulate the basket which
170:18 - means that you actually reduce the
170:19 - complexity a massive amount
170:21 - by doing that right um also i see those
170:24 - questions
170:25 - yeah same data sorry
170:30 - slice in the same data
170:36 - yeah so remember you you have like uh
170:40 - you have this global store and it's
170:42 - sliced up into different slices you have
170:44 - like the user the counter the basket
170:46 - right
170:47 - that sort of stuff uh that's that's all
170:49 - you need to sort of think of it from
170:51 - uh also guys please meet your mics if
170:53 - you're not talking yep
170:57 - thanks honey yeah always dude uh
171:00 - i'm gonna take one more question and
171:02 - then we're gonna
171:04 - before you say that we should get
171:05 - familiar with the unfamiliar
171:07 - i'm just getting familiar with the state
171:09 - and props
171:11 - who you propose that we get familiar
171:13 - with the unfamiliar
171:15 - yeah so uh good question and i think a
171:18 - lot of people would benefit from this
171:19 - answer so
171:20 - my answer to this would be uh remember
171:23 - everyone is always going to be at
171:24 - different points right they're always
171:26 - going to be like someone else can be
171:27 - more ahead of others and things like
171:28 - that now
171:29 - what i would say is if you are like new
171:32 - to react if you're new to sort of like
171:34 - and you're not completely familiar with
171:36 - it
171:36 - focus on the fundamentals focus on that
171:38 - com building your first component focus
171:40 - on getting that thing to load on the
171:42 - screen
171:42 - but then move on to state and props
171:44 - state and props are going to be the most
171:46 - important fundamentals if you don't know
171:47 - state and props
171:49 - everything else is not going to make
171:51 - sense okay
171:52 - um uh everything is oh is oh you
171:56 - are you pinned to the screen dude oh
172:00 - all right sorry oh my god has it been
172:02 - pinned the entire time
172:04 - yeah yeah oh my god on the chat
172:09 - am i teaching yeah yeah sorry guys
172:14 - don was like oh damn did sonny pin me
172:19 - now yeah sorry about that guys i
172:20 - honestly on my screen i don't see that
172:24 - if that ever happens yeah so sonny
172:27 - if you if you had to rebuild amazon
172:30 - clone can we do it with the
172:31 - redux the way you demonstrate it
172:35 - for sure yeah in fact when i create um
172:37 - the module i'm obviously i'm i'm working
172:40 - like
172:40 - so i'm i'm working on the react basics
172:43 - modules now for you guys so that will be
172:45 - dropping inside the course that i'll
172:46 - help all of you guys out
172:48 - from learning the fundamentals and stuff
172:49 - like that really trying hard to work on
172:51 - that and film it and do everything to
172:53 - get that out to you guys
172:54 - um and then i'm going to basically be
172:56 - enhancing things like um
172:59 - the the the builds that we have so
173:01 - imagine we had the who
173:02 - we have the hulu build
173:07 - we we have
173:15 - [Laughter]
173:23 - guys and then i'm going to be bringing
173:24 - like things like the hulu clone but like
173:26 - upgraded version with redox with
173:28 - other functionalities and stuff so that
173:29 - way you guys can take it to that next
173:31 - level
173:31 - practice it with stuff like that also
173:33 - thank you shrikha for the kind words
173:35 - um yeah no problem so suddenly
173:39 - when we approach uh like
173:42 - any project that involves redux so you
173:45 - think like
173:46 - when someone like you know people are
173:48 - involved in developing like the
173:49 - developers they do like a
173:51 - the whole wireframe to the in the
173:53 - individual
173:54 - components level how they will interact
173:57 - and then they kind of divvy it out
174:00 - is that is that the way like a you know
174:02 - major project would
174:03 - go about in implementation-wise so
174:07 - it depends like put it this way when i
174:09 - was in a like a start-up company
174:12 - um we would you basically have
174:15 - the way it works in a professional
174:17 - environment is you usually have someone
174:18 - called a product owner
174:20 - right or like a product manager or a
174:22 - product owner yeah stakeholder right
174:23 - basically
174:24 - yeah so so try and think of it as
174:26 - stakeholder but product owner is just
174:27 - literally like a manager
174:29 - right like it's literally like you have
174:30 - scrum teams typically if you're doing
174:32 - like an agile sort of working
174:33 - environment right so you have like a
174:34 - team of like i don't know maybe four of
174:36 - you
174:36 - developers you have like a product owner
174:38 - who sits on top of it that kind of
174:40 - manages
174:40 - and then you have like a designer maybe
174:42 - in that group now the way it works is
174:44 - the product owner
174:45 - pretty much goes ahead and goes to like
174:46 - the stakeholders and stuff like that and
174:48 - says like hey guys
174:49 - what what features do we want on the app
174:51 - and then the stakeholders are gonna be
174:52 - like all right everyone's asking for
174:54 - um the chat functionality to be finally
174:57 - be built out and everyone's asking for
174:58 - google login right
174:59 - so between the four developers then you
175:01 - basically in a two-week sprint you would
175:03 - basically the product owner would say
175:04 - all right out let's
175:05 - here's the user stories like here the
175:07 - users want to be able to log in with
175:09 - google
175:09 - users want to be able to have chat
175:11 - functionality then you would basically
175:13 - go ahead and your designer would provide
175:15 - design maybe they'll provide like some
175:17 - designs for that um
175:18 - and then basically there's no set way
175:21 - right so put it this way whenever i had
175:23 - to do like a login thing
175:24 - if i got stuck and i was kind of like
175:26 - okay i have a way that i think
175:28 - might work but i'm going to need some
175:30 - help on understanding
175:31 - the way things are currently built
175:32 - because remember you're going into an
175:34 - environment which has already been built
175:36 - in most cases right so what i would what
175:38 - i would say on that front is
175:41 - in most cases i found myself kind of
175:43 - sitting with a bunch of other developers
175:45 - on a whiteboard and kind of just saying
175:46 - like hey guys
175:47 - do you mind just running me through like
175:48 - the current architecture and then pretty
175:50 - much i will i have a solution that i'm
175:52 - going to propose to you guys and we kind
175:53 - of like literally just draw it out and
175:54 - he's like okay so currently we have
175:56 - three slices of state which all
175:57 - basically are responsible for this
175:59 - and okay maybe we could use this part in
176:02 - this part as our data for this
176:04 - functionality and um and then and you
176:07 - see like you kind of just literally
176:09 - you just literally just kind of
176:10 - brainstorm it so you're saying basically
176:12 - try and reuse whatever is there first
176:14 - rather than reinventing the wheel it's
176:16 - not yeah honestly it'll be it'll be a
176:17 - case of like
176:18 - it's not even reusing it's you're gonna
176:20 - your solution in most cases
176:22 - won't be like this where you have a
176:24 - fresh canvas right
176:26 - it's going to be like you're going to
176:27 - have to integrate a solution into an
176:29 - existing software right
176:30 - sort of like a retrofit or something
176:32 - yeah it's like you're a retrofit and in
176:33 - most cases like a good developer
176:35 - when when i really sort of like shine
176:38 - started to shine in my sort of like
176:40 - like career early on is when i kind of
176:43 - went from junior
176:44 - upward really quick is when i sort of
176:45 - like i took
176:47 - i i wasn't just kind of saying like okay
176:49 - this is what we need
176:51 - um to change so this is basically what
176:53 - i'm gonna i'm only gonna do my job and
176:54 - i'm gonna leave
176:55 - right i would basically start
176:56 - implementing things like okay i'm gonna
176:58 - i'm gonna
176:59 - implement this feature and also i
177:01 - touched four files
177:02 - each of those files were class-based
177:04 - components i just changed all of them to
177:06 - functional components
177:07 - and also we were doing some bad
177:08 - practices here here and here
177:10 - and i know about these practices because
177:12 - i follow this newsletter and this is
177:13 - like the most
177:14 - up-to-date standards so i think we
177:16 - should be using this
177:17 - uh whilst i was at i may be like i
177:19 - changed a few bits and bobs here
177:21 - and then they're like holy like
177:23 - what the like and then when you ask
177:24 - for a perry rise at that point they
177:26 - don't really care they're just like okay
177:27 - i mean we're not going to lose you
177:28 - like so do you see what i mean like over
177:31 - deliver right
177:32 - over deliver and then when it comes to
177:33 - like asking about salary and that's not
177:36 - then there's kind of like we don't want
177:37 - to lose this guy because this oh this
177:39 - girl
177:39 - because it's just literally a case of
177:41 - like you're just going above and beyond
177:42 - and you're just over delivering
177:44 - yeah and don't ever feel like there's no
177:46 - silly questions
177:47 - there's no such thing as being like
177:50 - don't be reserved like literally like
177:52 - dive in offer to implement things which
177:54 - you have no idea how to build
177:56 - because you put yourself in a position
177:57 - where you don't know how to build it
177:59 - because i promise you
178:01 - if there's money behind it and you're
178:02 - getting paid you're going to find out
178:04 - how to build it you're going to pull on
178:06 - the resources that
178:07 - stress is a good stress it's a scary
178:09 - place but it's the reason why i'm the
178:11 - developer i am today because i literally
178:12 - just threw myself
178:13 - head first into the deep end to the
178:15 - point where i had no idea how to build
178:17 - half the stuff and then you just
178:19 - you literally like i was literally going
178:21 - to other offices in the building
178:23 - where i knew the other startup companies
178:24 - were and i was like hey have you worked
178:25 - on
178:26 - um react native and then
178:29 - and then let me go ahead and yeah
178:32 - i was literally walking into other
178:34 - offices in the building and i would
178:35 - literally ask them like hey is anyone in
178:36 - here coding in react native
178:38 - and i would literally find someone and
178:40 - then would pretty much go ahead and
178:41 - and you know uh break it down and
178:44 - they'll be like yeah actually that's the
178:45 - reason why you're having that problem
178:47 - and you it forces you to really go
178:49 - outside your comfort zone to solve a
178:50 - problem
178:51 - um so that's my advice on that front
178:53 - yeah
178:54 - cool keep our open mindset as well guys
178:57 - yeah
178:59 - and when joe is talking about uh the
179:02 - distribution of a work
179:04 - when when you are working in a uh
179:08 - in a team for example if you are
179:10 - starting a fresh new project
179:12 - then how you approach how you divide
179:14 - your work
179:15 - into the team and uh i'm
179:19 - talking about the coding perspective so
179:21 - that nobody
179:22 - should be able to step on others work
179:26 - so okay so you use so
179:29 - the main things is is just the main way
179:31 - to sort of overcome that
179:33 - is learn github learn how to make like
179:35 - pull requests and learn how to sort of
179:37 - get involved in that side of things
179:39 - uh nars is actually pretty good i mean
179:41 - he organized some kind of like uh coding
179:43 - competition where everyone was pushing
179:45 - code and teams
179:46 - uh that was a cool thing we can do more
179:47 - of that if that helps out but what i
179:49 - would say is github is going to be
179:50 - essential in understanding your
179:53 - understanding how teams work together
179:55 - um and also it's going to be thank you
179:57 - so much arsene
179:59 - um it's going to be very very important
180:02 - in terms of you
180:03 - because trust me once you know how to
180:04 - use github you very quickly answer the
180:06 - questions like how do many people work
180:08 - on code together
180:09 - it pretty much goes ahead and and it
180:10 - answers a lot of of those questions
180:12 - right
180:13 - now um you
180:17 - very rarely are you going to be in a
180:18 - position i have been in the position
180:20 - two or three times where we're starting
180:23 - a new product
180:24 - right or i've been in part of a team and
180:25 - they want to start a new app or
180:27 - something
180:28 - in which case like you do have a lot of
180:29 - opinionated battles
180:31 - because developers are heavily
180:32 - opinionated it's like no i want to use
180:34 - this and i want to use that and
180:36 - i had a huge debate with the senior
180:38 - developer when i was junior
180:39 - about why we should use typescript
180:41 - instead of something called flow
180:42 - and i and and you would think that the
180:45 - the senior developer win but i pretty
180:47 - much like yeah we ended up using
180:48 - typescript
180:49 - because i was like no but like this is
180:51 - the reason why we should use it
180:52 - and went back and forth for ages and it
180:54 - was a heavy it actually got really heavy
180:57 - debate between the two of us and then we
180:58 - literally ended up having
181:00 - loads of back and forth but the point is
181:01 - that it doesn't matter like you
181:02 - literally you just overcome those
181:04 - problems and never feel like just
181:05 - because you're a junior
181:06 - you can't say something to a senior
181:08 - developer because in the end of the day
181:10 - like it's
181:11 - it's trust me when i say i've worked
181:12 - with junior developers who
181:14 - have blown my mind in terms of how smart
181:16 - and
181:17 - quick learners they are and things like
181:18 - that so uh never sort of take your like
181:21 - lack of experience as a sort of hit or i
181:24 - can't do that because i haven't really
181:25 - coded in that before
181:26 - just always assume like but always keep
181:28 - an open mind so it's a balance between
181:30 - the two
181:32 - and the other question is because uh
181:35 - when i used to work in a
181:38 - in a financial client when i worked with
181:40 - the financial client
181:42 - they don't allow to use a github so what
181:45 - is your recommendation to use
181:47 - they didn't they don't allow no
181:50 - they don't want even to go to the
181:52 - firebase or any
181:53 - uh external websites to grab anything
181:56 - they have their own
181:57 - uh databases they have their own uh
182:01 - local environment so what tool yeah so
182:04 - could it be useful they probably i mean
182:08 - so they had no form of source control
182:12 - yes not like a github github is we
182:15 - used uh you know we can use it
182:18 - in other companies but when you're
182:19 - working for a financial client
182:21 - they don't allow to use any external
182:25 - resources because of the security
182:27 - dude i'd say that company
182:34 - [Laughter]
182:40 - there is a github enterprise edition
182:42 - right i mean you can i know financial
182:44 - clients that
182:45 - like the insurance companies they still
182:48 - use github but it's
182:49 - it's more within their dmz kind of you
182:51 - know it's an enterprise version
182:53 - where only they can only people within
182:55 - the
182:56 - organization can interact not uh like
182:59 - any romney can hide it from outside
183:00 - yeah there is a lab lab is for
183:04 - internal use where it's not external
183:07 - yeah and to be honest like
183:08 - i know i made a joke but the truth is
183:11 - that there's
183:12 - always a way of doing it securely even
183:14 - github get up remember guys
183:15 - github is literally where probably
183:18 - really yes
183:19 - yeah just making it clear guys yeah make
183:21 - it private is it literally a billion
183:23 - dollar companies hosts their code
183:25 - like like no joke billion dollar
183:27 - companies host their code on github get
183:29 - labs
183:29 - like if if if security was a concern
183:33 - um then then they would have been
183:35 - bankrupt by now yeah then everyone like
183:38 - everyone all of these billion dollar
183:40 - companies would be hacked by now
183:41 - i mean they probably most of them are
183:43 - but the truth is like is in the it's the
183:45 - stat the best you're going to get is on
183:46 - is on that kind of thing but if they do
183:48 - have
183:48 - i was not allowed to use even a gmail or
183:50 - any external
183:52 - any application outside the scope of the
183:55 - company
183:56 - i mean i hope you're still not with the
183:59 - client
184:03 - uh yes i mean you do get you do get
184:05 - cases where people are extreme
184:07 - you do you do definitely get cases where
184:09 - people are very extreme with security
184:10 - i mean in the end of the day if you're
184:12 - getting paid and and it's
184:13 - and that's what they want uh i mean i
184:16 - would go with it i mean
184:18 - but depend if if you're working
184:20 - somewhere for a long
184:21 - period of time and they're not using any
184:23 - source control
184:24 - i don't think it's a good place that
184:26 - you're gonna i mean the chances are
184:28 - they're probably not following other
184:30 - standards or other
184:31 - practices were they literally like
184:34 - copying and pasting code or like did
184:36 - they have like a usb that
184:37 - i was i would imagine too how the hell
184:40 - do you maintain
184:41 - source yeah because the reason why
184:43 - github is really good
184:45 - and so think of it this way because
184:46 - github is essentially a source
184:47 - controller which means that say
184:49 - for example every single person on here
184:51 - had a feature that they wanted to work
184:53 - on
184:53 - right on an app that we're all going to
184:55 - build together yeah
184:56 - now what can happen is we can all make
184:59 - like a branch and we can all work on a
185:01 - separate branch
185:02 - and then we could all come together and
185:04 - then we will merge it yeah and then we
185:05 - can like merge it together and things
185:07 - like that now
185:08 - the bit where github really shines is
185:09 - when you have like say for example me
185:11 - and priyanchu both coded
185:13 - the header right and we were like oh
185:14 -  like i didn't realize preachy i did
185:17 - that icon i added this one
185:18 - you can do that i'm coding with you yeah
185:20 - and then exactly you have something
185:22 - called a
185:23 - like a clash right or like a collision
185:24 - or something like that and yeah
185:26 - and a conflict is called and then github
185:28 - and other sort of clients allow you to
185:30 - do something called conflict resolution
185:32 - where it shows me it shows both co once
185:34 - i did it shows both pieces of code
185:36 - and you can pretty much very very nicely
185:39 - choose which lines to keep which eyes to
185:41 - remove and then you resolve the conflict
185:43 - emerge
185:44 - right so that's good yeah so that's how
185:46 - you do it so okay uh what were you going
185:47 - to ask brian
185:49 - no i just i was just going to tell one
185:51 - thing that there's an amazing video by
185:53 - uh nars on the live stream so yeah
185:58 - yeah on that resolving conflicts
186:01 - in php storm you have a way to resolve
186:03 - conflicts from the editor do you have
186:05 - the same in visual studio code
186:07 - like can you see the branches yeah it's
186:09 - a beautiful way of doing it yeah you can
186:11 - really do it nicely
186:12 - and uh and in fact what we'll do one day
186:14 - is i'll purposely
186:15 - kind of set up a scenario where we can
186:18 - sort of have a collision and we can do
186:20 - it together and we can kind of overcome
186:21 - it
186:22 - use i think a whole session on github
186:23 - might be pretty cool
186:25 - um yeah yeah he has
186:28 - yeah already has one he put okay
186:32 - he's done a video it's in the live calls
186:34 - from nas about
186:35 - get what is it oh dog yeah if you guys
186:39 - if you guys don't mind
186:40 - dropping the slides yeah if you guys
186:42 - don't mind drop that in the slack
186:43 - channel and let everyone know
186:44 - that will help everyone out yeah awesome
186:46 - doing that right now
186:47 - nice sony i had one question regarding
186:50 - uh
186:51 - react native okay this will be the last
186:53 - question guys
186:54 - yeah yeah yeah yeah so suppose now uh
186:57 - you know
186:58 - like uh we have an app which is on uh
187:01 - older version of react native
187:02 - and we had used some libraries and now
187:05 - uh
187:06 - as due to ios 14 our it's been released
187:09 - so when we code it so many of the
187:11 - libraries has been depreciated
187:14 - so what we should do like look out for
187:16 - some new resource or
187:17 - just stick to the old version or
187:19 - something like that
187:21 - um one second um
187:24 - [Music]
187:25 - just give me two sorry dude give me just
187:28 - give me one second yeah
187:29 - um and then i will get back to you i
187:31 - just need a link quickly
187:33 - um okay
187:36 - uh do you mind just sorry just repeat
187:39 - that one more time so react native
187:41 - yeah yeah we have used some uh libraries
187:43 - for some
187:44 - uh gesture controls okay so now for ios
187:47 - 14 now
187:48 - uh when we compile it uh it gives us
187:50 - like these libraries has been
187:52 - depreciated like they are not been taken
187:55 - forward
187:55 - like they have not been updated yeah so
187:58 - most probably it gives some errors or
188:00 - some you know
188:01 - users while uh publishing it yeah so
188:03 - what we should do we should look for a
188:05 - replacement
188:06 - or stick to the old version so this is
188:08 - something which kind of does become a
188:10 - bit of a tricky situation so
188:12 - when you whenever you have any kind of
188:15 - um whenever you're handling
188:18 - upgrades right upgrades can cause brakes
188:20 - they can cause things like they can
188:22 - break things they can kind of mess
188:23 - things up
188:24 - um you need to be careful
188:28 - what you need to look for is a minor
188:31 - upgrade versus a major upgrade now a
188:33 - major upgrade
188:34 - is like for example say we had version
188:37 - 2.3.5 of react
188:38 - right now if it went from 2.3.5 to 2.3.6
188:43 - it doesn't really matter right that's
188:44 - that's not considered a breaking change
188:46 - right that's considered a minor change i
188:49 - think even if it went from 2.3 to 2.4
188:52 - you can actually get away with a lot
188:54 - right but the minute you go to a major
188:57 - change
188:57 - right so you have things like you have a
188:59 - you have um a major a minor
189:02 - and then you have like a smaller one i
189:03 - can't remember what it's called but you
189:04 - have like a
189:05 - different apache that's it yeah nice
189:08 - thank you anand
189:09 - yeah so you have major minor patch right
189:11 - if it's a patch
189:12 - really won't affect much if it's a minor
189:15 - chances i
189:16 - won't affect much if it's a major it has
189:18 - breaking changes
189:19 - right so a major if you go from version
189:21 - three to version four
189:23 - then you you have to like i would
189:25 - recommend you read the documentation
189:27 - you would thoroughly test your app you
189:29 - that's this is where automation testing
189:30 - comes in
189:31 - because automation testing if you stay
189:33 - up properly so usually you have a qa
189:35 - team
189:36 - right here's a here's a top tip guys if
189:38 - you can actually go ahead
189:39 - and get really good at automation you
189:41 - can save a company
189:43 - so much money on qa right because you
189:46 - can build automations which basically
189:48 - are much quicker than qa they run every
189:50 - single time code is pushed
189:52 - now imagine if you can think of it this
189:55 - way if you can
189:56 - go ahead and save a company um let's
189:59 - just say
189:59 - a qa of two more like two employees
190:03 - right and let's say they were paying
190:04 - them employees like 30k or 25k or
190:06 - something each
190:07 - right now if you ask for a bonus or like
190:10 - a boost in your your salary
190:12 - of 15k because now you're handling all
190:13 - the automations or 20k
190:15 - they're they're going to be like whoa we
190:17 - we actually saved money on two employees
190:19 - and he's actually doing a better job at
190:20 - some point like uh
190:22 - and and he's covering all the stuff and
190:25 - like i'm not saying
190:26 - it's that easy but the point is that you
190:28 - can do that like there's power to do
190:30 - that
190:30 - if you get good at that but the main
190:33 - thing to look at is yeah the major
190:34 - changes
190:35 - so you always want to read the
190:36 - documentation the major changes
190:38 - also whenever you do dependency upgrades
190:41 - be careful because things can break and
190:43 - i've been in situations where
190:44 - it's you have to figure out what brook
190:46 - and it is a nightmare i'm not gonna lie
190:47 - to you is
190:48 - it can become really like a headache and
190:52 - i've had i've been in situations where
190:53 - i've spent like an entire week trying to
190:55 - debug something because something
190:57 - got upgraded and then it can get very
191:00 - messy
191:00 - yeah thank you awani uh last question
191:04 - awani
191:05 - because you message i think is somebody
191:07 - messaging a chat so that'll be the last
191:08 - one and then we're we're going to wrap
191:10 - up there guys
191:11 - um firebase
191:14 - i mean you said like firebase this
191:17 - actually
191:18 - make things easy for us and we can use
191:20 - it for like hosting our
191:22 - application so uh what if like uh
191:27 - the client we are working for doesn't
191:30 - use firebase or you
191:31 - like he or she the client has uh some
191:34 - his own hosting uh thing
191:36 - so but what's the solution for that like
191:40 - i wish so um
191:43 - very good question and the truth is um
191:46 - wow thank you firstly thank you so much
191:48 - andre he says this lesson
191:50 - alone was worth more than three years of
191:51 - computer science college thank you so
191:53 - much
191:54 - dude i loved it thank you thank you so
191:56 - much dude i
191:57 - really appreciate that um yeah so i
192:00 - wanted to
192:00 - answer your question um also whose mic
192:03 - is that um
192:04 - i just want onion
192:12 - joe comes in you're coming in yeah yeah
192:15 - there we go
192:16 - joanie so basically um yeah the way you
192:19 - want what you want to do is most in most
192:20 - cases you're going to a company they
192:22 - probably won't have firebase that's
192:23 - that's the reality of it they're going
192:24 - to have either azure
192:26 - or like um some kind of aws
192:30 - or like some kind of like cloud
192:32 - infrastructure or something like some
192:34 - implementation because it saves their
192:35 - money in a big scale
192:37 - so that's you have to be prepared to be
192:40 - um flexible around that stuff right now
192:43 - what i would say is it depends on what
192:44 - position you're going in for
192:45 - so you can uh you could literally be a
192:48 - um
192:49 - [Music]
192:50 - you could be a front-end developer so
192:51 - you could pretty much be up front and
192:53 - you don't have to worry about the
192:53 - back-end as much
192:54 - the back-end team will pretty much go
192:56 - ahead and deliver their sort of the
192:58 - response and that sort of stuff to you
192:59 - and you pretty much just render it on
193:00 - the front
193:01 - full stack developer is a skill i would
193:03 - recommend you do pick up if possible
193:05 - because it is going to help you in the
193:06 - long run
193:07 - um especially if you want to kind of
193:09 - branch off and do your own thing at some
193:10 - point or you want to freelance or do
193:12 - something it kind of gives you the whole
193:14 - full focused uh sort of skill set to go
193:16 - ahead and focus on that now
193:18 - um you uh i think i've went off track
193:20 - but what was the actual question it was
193:21 - like how do we how do we overcome that
193:23 - was it yeah if you are not using fire
193:26 - fire waste then uh what's the solution i
193:29 - mean i my
193:30 - case is i need to make one website it's
193:32 - a social media website for one ngo
193:34 - yeah and it's like um so like they don't
193:38 - they won't be using firebase at all yeah
193:40 - so so all this stuff
193:42 - kind of comes under devops which means
193:43 - that like if they've
193:45 - implemented it with like azure or
193:46 - they've done aws then you you're gonna
193:49 - have to figure out how you do that and
193:50 - there's gonna be people on the team that
193:51 - can help you or
193:52 - if you you do have to do it then you're
193:54 - gonna have to like kind of learn the new
193:56 - stuff to do it but i reckon the reason
193:58 - why we teach firebase is because if
193:59 - you're doing your
194:00 - if for personal projects i always go
194:02 - with firebase i literally it's the
194:04 - easiest thing
194:04 - if i have a freelancing project firebase
194:06 - boom done like um but if the reality is
194:11 - in the commercial environment
194:12 - you probably won't be getting that you
194:15 - definitely want yeah
194:16 - that freelancing project i mean so i can
194:18 - suggest them to use
194:20 - firebase is it like will it i mean thing
194:23 - is like it's it's in
194:24 - india and like they can't afford that
194:25 - much money i mean uh
194:27 - i'm like i'm doing volunteering there
194:29 - and it's like the minimum amount they
194:31 - can
194:32 - they can be doing like they will be able
194:34 - to do it did you say don't use firebase
194:39 - was that i think she said that it's it's
194:41 - for a non-government organization
194:43 - and i think they're they have budget
194:45 - restrictions yes so they they can't
194:48 - afford so
194:49 - i'm guessing it would be a good idea to
194:51 - use firebase because that's it's free
194:53 - yeah to a certain point yeah yeah i
194:55 - would i would actually say use firebase
194:57 - yeah
194:57 - completely but if the company has their
195:01 - own databases
195:02 - then she has to go through a
195:04 - connectivity with the
195:05 - database and push the data there yes
195:10 - even if they have authentication even if
195:13 - they have their own database i guess
195:15 - they have the documentation to how to
195:17 - use it like they want to have it you're
195:18 - gonna have either
195:20 - so i would so you're either gonna have a
195:22 - developer who's gonna be able to help
195:23 - you out
195:24 - um if you don't and they just have a
195:26 - database
195:27 - then if it's a sql database you're gonna
195:29 - have to pick up some sql and pretty much
195:31 - learn how to like kind of do that
195:33 - it will be like uh i mean it's like a
195:35 - completely new thing
195:36 - just like instagram and all so the for
195:39 - the
195:39 - idea is like they want like all the ng
195:42 - ngo to talk with each other like they
195:44 - want one
195:45 - uh social media website for all the ngo
195:48 - uh working around
195:49 - all over the india uh and they're
195:51 - basically they're not getting any fun
195:53 - from government so it's like new thing
195:55 - for them for them and they
195:57 - they want like through that website they
195:59 - want to earn some money so they don't
196:01 - have any database nothing yet
196:02 - i would say go with firebase yeah the
196:04 - reason being is because
196:06 - and if they kind of question you on it i
196:08 - would say look if
196:09 - if the idea hasn't been tested and this
196:10 - kind of comes from a business
196:12 - perspective as well because
196:13 - uh the lesson is like good software com
196:17 - i worked in a lot of startups and the
196:18 - ones that succeed are the ones that do
196:20 - iterate like
196:21 - iterative builds which means that like
196:23 - they do small incremental builds
196:25 - which means that like if they have a new
196:27 - product like you're saying they want to
196:28 - get all the ngos talking to each other
196:29 - right
196:30 - build the simplest product to test the
196:32 - idea right
196:33 - and i would actually even pitch that
196:34 - across to them and say look firebase is
196:36 - going to allow us to power the entire
196:37 - thing
196:38 - have real-time functionality we barely
196:40 - have to do much to get the entire chat
196:42 - functionality working
196:43 - if they want to send pictures across to
196:45 - each other firebase storage will support
196:46 - it
196:47 - we can host the app we can do rollbacks
196:49 - we can deploy it
196:50 - everything is supported by firebase out
196:52 - of the box now even language support
196:55 - is is supported out of the box with the
196:57 - ex firebase extensions
196:58 - it will literally translate it to a
197:00 - bunch of different um languages
197:02 - in a like literally you just click a
197:04 - button and it does it all
197:05 - um so i would recommend pitching that
197:08 - across
197:09 - um it was good for proof of concept
197:11 - right yeah literally just show them
197:12 - proof
197:13 - and my best advice here would be like
197:15 - yeah like just like joe said
197:16 - if they kind of say to you like hey but
197:18 - why should we do that i would literally
197:20 - go and build it
197:21 - and be like i'll build a very simple
197:23 - clone of it and be like look this
197:24 - is it like it didn't take me long to do
197:26 - it and
197:27 - then uh like on instagram you you have
197:30 - uploaded in
197:31 - like youtube on youtube yeah there is
197:34 - one on instagram yeah
197:36 - yeah so we actually climbed instagram
197:38 - already uh so you can pretty much check
197:39 - that and also facebook we did
197:42 - um it's crazy now that's always the
197:44 - first that i did
197:45 - yeah yeah i put it with you but i did
197:48 - not finish it
197:49 - i want to see you finish that dude
197:51 - that's it i will
197:55 - uh you're saying like you are saying
197:57 - like uh
197:58 - fi we can use firebase right like but
198:01 - firebase doesn't have
198:02 - like uh will it have like limitations on
198:04 - it memory limitations like so let's say
198:06 - ngo yeah so i mean
198:08 - remember that everything will have a
198:10 - limitation on right like is in
198:12 - nothing is free like i said firebase is
198:14 - actually considerably free for a lot of
198:16 - it so you get a huge
198:18 - amount of stuff for free um but remember
198:22 - guys like all this stuff like like
198:24 - rather like honestly i'm not this is not
198:26 - like a dig to questions or anything but
198:28 - like
198:28 - whenever it comes to a pricing question
198:30 - or something like that just type in
198:32 - firebase
198:32 - pricing or like literally aws pricing
198:35 - and do a comparison of the two now
198:37 - firebase is literally free for so much
198:40 - like it's in like i've never hit a
198:41 - pricing plan on firebase
198:43 - uh until it's completely needed but um i
198:46 - would say
198:46 - that that you can just pretty much yeah
198:49 - my my opinion would be
198:50 - proof of concept is more important than
198:52 - a few different
198:53 - a bit of differences in pounds here and
198:55 - there right yeah
198:57 - with that for ngo yeah firebases
199:00 - uh you have to hardly pay anything for
199:03 - ngos i believe
199:05 - yeah just inquire about that exactly so
199:08 - i would suggest avani to keep in front
199:11 - like
199:11 - in the uh to client that there will be a
199:14 - price
199:14 - for specific data yeah but remember like
199:18 - any database is going to cost nothing is
199:20 - free right like
199:21 - it's more about can you prove that it's
199:23 - valuable remember and it was what we
199:25 - talked about on coaching calls and
199:26 - everything before
199:29 - least expensive i mean making
199:32 - it when we compare like but guys
199:35 - remember like what what i'm trying to
199:36 - say here is that like
199:38 - that you need to remember in terms of
199:40 - like we're considering things like yes
199:42 - it could be like
199:44 - when you hit a million messages it's
199:46 - probably going to be a couple of pounds
199:48 - like which is still pennies like is it i
199:51 - i know it's like it may sound like a lot
199:53 - but like it's nothing
199:55 - compared to like yeah and yes aws you
199:57 - could probably get a bigger scale but
199:59 - the implementation is going to be harder
200:00 - the developer cost will actually be huge
200:04 - compared to
200:05 - the if you just quickly build the thing
200:06 - on firebase like so that's why if i have
200:08 - even if you are even reaching a million
200:11 - messages
200:12 - you might already have the budget to do
200:14 - that i guess like
200:15 - yeah if yeah of course then if they're
200:18 - reaching there then of course
200:19 - yeah exactly so you would have proof you
200:21 - would approve the concept
200:23 - yeah guys i'm gonna wrap up one question
200:25 - i'm gonna
200:26 - i'm gonna wrap up here but but uh okay
200:29 - okay yeah
200:30 - just purely because uh otherwise it's
200:31 - gonna keep on going so it's apprehensive
200:34 - yeah just send me a message and uh i can
200:36 - answer that when i get a chance but
200:38 - i hope you guys found it useful today it
200:41 - was amazing sunday it was so
200:42 - almost going down i learned so much
200:44 - awesome like i hope you guys
200:46 - enjoyed that and uh yeah i think i over
200:50 - ended it i didn't think about the
200:53 - reduction
200:57 - what was that your guys are doing very
201:00 - very hard work to provide the content in
201:02 - the form of youtube
201:04 - and coaching calls i think this course
201:06 - is more than a money when compared to
201:07 - hard work money is this course is
201:09 - priceless thank you so much
201:12 - yes there is no doubt about it yeah
201:14 - there is no doubt about it i want to
201:15 - sing for you
201:16 - oh now he's gonna be singing thank you
201:19 - so much guys
201:20 - uh no i really really appreciate that
201:22 - and uh even my friend
201:24 - just came in the youtube chat jay he
201:26 - does he just had his birthday lol
201:28 - and uh thank you so much guys for for
201:30 - turning up and showing up as always and
201:32 - uh for everyone on youtube if you
201:34 - enjoyed it smash the thumbs up button
201:36 - um and yeah as always guys i'll see you
201:38 - next week
201:39 - and um keep on crushing and make sure
201:41 - you all
201:42 - give the rea a redux template a try
201:45 - right so create react
201:46 - app dash dash template redux and yeah
201:49 - and an
201:49 - awesome session and i will see you all
201:52 - next week

Cleaned transcript:

uh like timeout people that's there yeah yeah i'm going there i'm gonna do it i'm gonna go there give me one second guys give me one second yo what is going on guys welcome to a another video today we're gonna be actually hosting our live call from profit with javascript inside of youtube so you guys can go ahead and get a sneak peek as to what we teach inside the course but without further ado i'm going to pretty much drop all the value for our students inside today's lesson so let's go ahead and meet today's students let me go ahead and how do i actually unmute everyone in one go uh or allow participants to um boom and then everyone if you want to there we go go ahead and unmute yourself guys and say what's up guys [Laughter] we have literally 184 people in this zoom core right now which is insane okay now um i see some messages from atul saying dear sonny it's my first time i'd like to know it's wednesday so the agenda for today guys is i'm going to go ahead and mute everyone and you can unmute yourselves if needed but what i'm going to do now guys is pretty much go through today's agenda so that way we get a rough idea about what we're going to be covering in today's course okay so first thing that we're going to firstly i want to say also oh yeah so so people are saying my voice is resonating it's because i'm in a different room now so i'm going to fix that soon but it's because right now there's a bit of echo in this room so i apologize for that but thank you so much everyone for the kind birthday messages i saw so many of them on on instagram it's insane i saw so many dms really really appreciate and love every single one of you so thank you before we start to every single one of you uh for that um and yeah so today we're going to be talking about some high level stuff so we're going to be pretty much covering loads of high level content so pretty much always react i guess and kind of go into at that depth and that detail answering some of your questions um any sort of questions that students have we're going to go ahead and cover that and then like like the title says we're going to be covering the uh redux today so i want to do a deep dive on redux because redux is something that in in a production environment redux is going to be super valuable okay so it's going to be a skill that you guys are going to be able to if you if you know redux it's going to be something which is going to boost your your worth to accompany a huge huge amount okay now with that said redux is kind of complicated so i haven't actually used redux in quite a while and now what i'm going to be doing is actually going ahead and show you so i'm going to be using the react context api first to go ahead and show you guys how the react uh this sort of redux pattern works and then i'm going to take it a level up and i'm pretty much going to show you how to implement redux now the interesting part about today's call is going to be that because i haven't used redux in a long time it's going to be an experience where i will show you because i've actually forgotten how to implement redux which is awesome for you guys because i've used it a ton in the past but i've forgotten how to implement it right so i'm going to show you for exactly how i go about if i forget something if i haven't worked on something in a while my exact sort of mind and workflow and how i'm going to do it and then hopefully that'll give you guys confidence boost and sort of like that realistic sort of understanding as to how you're going to be doing it when it comes to that practical use case okay so let's go ahead and jump in firstly let's go ahead and ask does anyone have any questions because i'm going to take two questions before we get started okay so i have i have one sony go for it joe so when you when you say redux are we talking postgres sql or are we talking mysql sql server so when we're talking about redux uh no redux is actually purely a reacting so you know how we have the react context api which so basically inside of a react app we're gonna have to manage our data somehow throughout the app right redux is basically think of it as the commercial level solution to handling data flow within an application right okay so without it i'll explain it and we'll get a very visual breakdown of how we sort of do this stuff but um yeah it's going to be sort of the professional stuff so today is actually going to be really important for a lot of you guys because it's going to help you guys go ahead and sort of level up your understanding from react context api to redux and as far as i'm aware i think this is the first redux call or like stream on the channel right so this is awesome and even for the live course yeah so um awesome yes sunny i have a question shoot dude go for it yeah like we did the amazon clone and now we are we have started already with the react.js so i was reading about the react.js and there was a part which uh i read about jsx okay so we i did not notice anywhere like we have used it like any syntax or something so yeah yeah i wanted to know about that okay so you're wondering what jsx is right right yeah so jsx is essentially whenever we call them react right notice how it reacts so i'm going to go ahead and actually show you an example so it's a lot easier for you guys to see i'm going to share my screen as well so i don't know if you let me know if you guys can see this all you need to do guys if you can see this just please go ahead and wave your hand yeah i can see that yeah okay awesome um let me go ahead and actually share my um give me one sec guys zoom why do they do this all right zoom upgraded everything and i can't find anything sorry guys here one sec yeah and also a question in the meantime sony isn't redux like uh made from a different company like it's not inside react like react context api is yeah so good good point actually so redux is sort of think of it as like a community built a solution right so it was built by the community um oh god sake okay yeah it was built by the community um and it's i'm not sure who built redux but to answer your question the react context api was built by the guys over at facebook and that's uh that's why it's pretty much heavily used now it's kind of getting more and more heavily used um but there is something else uh it's not called relay i think is it called a relay or um recoil i think it's called uh so if we type in react recoil i think is it recoil or relay one of them yeah recoil recoil is another state management library that has come into play so i'm gonna check out this stuff but uh right now the one that's mostly used is um is um is the uh react uh readout sorry yeah so redox okay so with that said let's go yeah redux is basically a framework yeah react is a library this is a difference no no so redux is a module that you just pull into react which reacts as a library and redux is just like an npm module that you just pull in you'll pretty much go ahead and install redux into your uh into your react project and then you can use it um okay so now jsx to answer your question earlier i can't remember who asked the question but um uh to answer your question yeah awesome so to answer your question you know in react we have this return block okay we have this nice little return block here now notice how it returns um let's just go to maybe here for example okay so this is basically what gets returned now inside of um inside of this return block you can actually go ahead and have so let's go ahead and do like here for example ignore the if statements and things like that but here for example if we have a return block david please man the chat um and admit everyone in the waiting room yep so here if we have a return block you see these curly brackets yeah so these curly brackets are pretty much going to allow you to have javascript code inside of this html return okay so basically think of jsx as like a way of merging html and javascript together and that's what we use that's why you don't have a html file and the javascript file in react you just use a jsx file because it allows you to do both okay and then you basically return um you basically go ahead and return um this the sort of the output that you want okay so with that said and to be honest this will make a lot of sense when we actually jump into the code so with that said what we're going to do now is i'm going to go ahead and just break down some some concepts for you guys so just let me know if you guys can see this excuse me sonny yep i have a question on the jsx okay like uh in in past we have created like uh javascript components within the html and we we mentioned the file extension as js yep instead of jsx okay uh it still worked right like uh yeah so the reason why it works is javascript out of the box is because when you could use create react app what it's actually doing is you're actually going it kind of has like when you use create reactive it has like a special clever compiler underneath which changes javascript files to jsx okay so so you know some extensions on some tutorials are jsx um it doesn't matter because honestly you when you're using it will be it will be you don't need to write jsx just think of it when you use create react app you can just use dot js and it works oh okay so i know it can get a bit confusing when it kind of overlaps like that but to answer your question they're not sure that's how you do it um okay also if i'm sorry if i didn't admit anyone who just jumped in um okay so now what we're gonna do is let's go ahead and just dive into some of this so right now so imagine you have react right so i'm going to go ahead and freeze it so imagine you've got react yeah and now for many of you that don't understand what react is it's a library so if you're new to profit with javascript then react is the library that basically supercharges your apps okay so this allows you to build apps like netflix tinder uber like as and you can pretty much build like any kind of app with react right so frankly i did a massive contract with sonos sonos building like a new like sort of radio app and pretty much using react for that now you can do loads of things with react and it's very very powerful and it allows you to build something called a progressive web app okay so a progressive web app stands basically think of a progressive web app as something which is which is basically has the power of a native app okay so it has the power of a native app so there's a power of a native app but it runs on the browsers okay so it just runs in a browser which means if it's running on a browser it means it doesn't matter if it's on ios android iphone tablet desktop wherever it is it's going to be working okay so at that point it really doesn't matter where you're sort of running it but that's why it's beneficial to use something like react now before you can jump into react i would recommend you do go ahead and learn the fundamentals so the fundamentals are essentially just going to be html so html javascript oops oh no okay javascript um i don't know why that's there but you know anyway here's your javascript and css ignore that little bracket i can't can't seem to get rid of it um but yeah so that's pretty much what you need to go ahead and learn just roughly okay so just if you can get a little project working with these three things right and you can pretty much get it working to a very minimal scale so imagine you have a web page with a button click and things like that at that point i would say honestly just just shoot your luck just go ahead and try and give react a try okay and now remember like there's no condition of or at which point do i make the jump or like am i ready for it like don't worry about it just literally the more if you code in if you start using the react library um it's very very lightweight which means you only need to use what you need to basically go ahead and you only use what you need and it will allow you to sort of it will build your understanding of this as you're using react okay so i just want to get rid of something i've got some some annoying screen i use flux to protect sort of my eyes as it gets later but i'm going to go ahead and quit because my screen looks all brown and it's kind of messing me up um okay there we go so now with that said we have react okay now react is something so it has i'm going to draw a line here so let's go ahead and join so that's basically our intro now react it uses something called component based design okay now component based design is something that you have to become familiar with why is it important because it allows you to basically go ahead and write a piece of code once and reuse it many times okay so what do i mean by this so imagine i've got a web page so here's my web page uh let's make it very big right so this is my web page now on this web page okay imagine it has like um a header okay so it has a header at the top and this is where you have like the nav bar and all that sort of stuff imagine it has a footer at the bottom okay and then imagine you have like a bunch of products so imagine this is like amazon or ebay or something okay so this is a product uh this is a product and then you've got another product here okay now on a typical website what we tend to do is we'll code up the the we'll sort of add some code for this bit we'll then add up the same code for this bit and then we'll sort of copy and paste it and add up for this bit and we'll just change this sort of into it like details inside now why is that a bad idea because let's say i want let's say like a designer comes in and says hey guys we're going to change all of the design so all of these product tiles are going to look different okay now i need to go here here and here and change everything which means i don't i don't have to just change one piece of like of code i have to change this one i then have to go ahead and change this one i have to go ahead and change this one and if i forget or say if i change one thing in this one so i managed to make it a little bit different now my code doesn't look the same so the middle one's gonna be different when it shouldn't be like that everything should be uniform okay so let's imagine this is called the product component so imagine this is just called the um make it smaller imagine this is called the product dot js component okay so this is like a product component dot js oh god who's that um let me let me go ahead good everybody mute everybody let me mute the chat um i'm going to go ahead and uh let me go ahead okay you all there we go all right now here we go imagine we got another one which is product.js okay so we have three products now why is this so powerful because we literally code the product once right and then we pretty much reuse this thing so i can code it once i have this one file product.js then how do i reuse it we use something called props okay oops um oh wow why does that change why is today all of a sudden all my stuff has changed okay but we use this props okay now props is something like imagine you have you pass in props so you can pass in something like the title the price the picture right so these are just props now what does prop stands for it stands for properties these are just different properties and you can pass it into a product and then it renders out the final product this is awesome right this allows us to pretty much re code up our product.js once and then based on the props that we pass in we render out the final product which means that every single time each one comes out looking the exact same right except with different details so that means that we if if a designer comes along and says hey we need to update all the products it's so easy to go ahead and do that because all we have to do is go ahead and change one of the what we have to do is change this one file and then everything gets updated accordingly so that's something to bear in mind now this is the first principle okay so we have props so number one is props and then basically here i'm just going to write the two principles you must understand in react okay so one one is props and now number two is going to be state now state is something imagine it's just like a short term memory okay so state i refer to as shortterm memory so that's what i like to kind of refer to as i just call this the shortterm memory of a component now why do i call it shortterm because if you are to basically go ahead and get rid of the if you're going to go ahead and refresh the page the state will always return to its original value which means that say for example i have a a counter button okay so let's say i had a component here and let's say this count this this was like a let's imagine we've got like uh at the bottom of a product right so imagine at the bottom of a product i've got like a counter and inside of this counter it pretty much says like it says zero or and then it has a a plus and a minus okay so it has a zero and then it has a plus and then here it has a minus okay so imagine like i had this sort of ticker thing right so basically if i go ahead and i'm like clicking on this one so imagine i'm like clicking so i go ahead and click plus a few times this will change to like one two three four five so the end afterwards this would go ahead and be like four for example now when i refresh the page this will go back to zero because memory state is short term which means it doesn't persist which means when we refresh it goes back to zero now obviously we want to keep track of this state but why do we need state it allows us to do things like this where basically if i go ahead and click like plus plus plus it will allow us to go ahead and have that functionality whereas if i didn't and also state is isolated so if i had this in this component then inside of this component for example here oops so for example in here we would have the same thing and this one could be a completely different value so this one could even have like something like 20 in right so each each component has its own state so these two things are crucial for our understanding of react so props and state okay now we need to know this um and we need to sort of like understand props and state very well because it's going to be crucial in building out an application so with that said do we have any questions on this at this point so either about props or state so feel free to unmute yourself and we can pretty much answer any questions anyone has at this point yes funny yeah just one simple question uh so uh so actually the props is um almost relates to the objectoriented concept right so in javascript or in any other different uh programming language we have classes right so uh it's almost made it is made the same way right yeah so think of it like this way so think of it like um oh sorry by the way i saw that some people say can i move the camera but uh it's fine so think of it this way so yes so firstly okay the reason why i'm hesitant to say yes is because we're trying to move away from classbased components right we're trying to move away from classbased components to functional components because functional commerce a lot easier to sort of read and understand now your understanding of it is correct so uh the reason why it's correct is because classbased components yes are they have their own kind of memory so they kind of have this dot so you have like an instance some objects imagine you had like the product object project a product class then you would say like new product and you'd pass in some values and then you'd have that product right now the values inside that product will belong to that object right so yes in in that in that way of thinking about it does it does make sense um the reason why this is kind of a whole other sort of discussion and it comes around classbased versus um functional okay so like but the main thing is the main thing that we need to understand is that every component just has their own state okay so every component has their own state now i see some people saying did you erase everything on the whiteboard nope so if you want to go ahead and just you can take a screenshot of this now um remember that the entire session is going to be recorded so it will be uploaded afterwards but uh feel free to take a screenshot now yeah when we talk about state right we make it's kind of a shortterm memory so is there any kind of a standard practice how much amount of data you should keep that's if you're getting some amount of data from api or something um so to answer your question you're saying is there a kind of um a kind of limit to the amount of size limit or something like this much amount of data no no no so so state just think of it as just think of state as variables inside of an object so it really at this point it could be huge right like you could literally pull an entire database into a variable if you want in i'm not saying it's good practice but you could go ahead and do that right you can definitely go ahead and do that um but what i would go ahead and say is um thank you so much frank for dropping a donation on youtube hey um yeah so what i would say is pretty much yeah it doesn't there is no spacing limit you can pull in and you could literally but what i would say is what if you're considering pulling in an entire database into a component then you might be wanting to put it not into the component but into something like react context api or redux so that way you can pretty much go ahead and save it to like a global state or global store or global value and then any component can go ahead and access it but we'll get into that in just a sec but um but if that will happen then uh it will make our app more heavier right and it is not good yeah so so there's a lot of considerations around like do you want to have your app um you know like do you want to have your components heavy pulling things in do every time something changes should it refetch all the data again you have to kind of think about all of these things when you're building an app but try and keep it simple for now guys and only that what my advice to you would be keep it simple because it will get to a point where you will have so much um like you you'll you'll get so many natural questions that will just come up right and what i would say is make sure like just just build things as you need it because you're always going to have a curious question you're always going to have some kind of question as to like should i do this or should i not do this or should i do that or should i do this it kind of becomes a bit kind of like yo you're going to forever be asking questions as opposed to actually going ahead and coding i would say just go ahead and code go ahead and build things as you need it and then you'll run into those questions as answers naturally right otherwise even if i told you an answer right now you'll you'll forget it by the time it comes to actually implementing it right all right so that yeah one last question i have yeah okay so i wanted to ask like how do you exactly pass props how do you pass props uh i will i will be showing you uh i'll show you a light demo before very soon as to how we set up props and things like that um because we're gonna need to know how to do it but basically it's like uh when you render out a a um let me go ahead and share the screen so imagine you like when you when you render out a component you pretty much render it out like this it'll be product like this okay now if you want to pass in the title it'll be something like this let's just call it amazon echo or something oh god damn it why does it always do that amazon echo right so you see what i just did there right so and one more thing yep uh so so you see you pass in as an attribute yeah yeah yeah so i was watching this david video uh the other day about straightening props and he said something about crops that you can't pass them like from top to bottom or something i didn't understand that right oh isn't you you can't pass them yeah so that's what we're going to come to now right so uh i'll explain that in a sec but yeah you can you can pass okay props down but you can't pass props up and that i will explain exactly what we did i had no idea about that so i got confused with that no worries i'll explain yeah i just have a great question um who's who said it first because one question and then we're moving on i did i i started at the before pre on shoe okay so is it is that shrika or srika oh it's okay yeah shrieker okay srika go for it yeah thanks uh so have you ever coded in python before because i was just trying to make um a connection to um to react so like whenever you import things is it kind of like how it is in python like you import different modules in order for or like libraries in order for it to work yes so it's exactly the same you pretty much install something so in python you install with pip uh in in javascript using npm or yarn so it's pretty much the same thing you install a module and you go ahead and use the module so the same thing yeah so that might that might actually have helped a lot of people out so that's a good question yeah um okay so now guys i'm gonna go ahead and do the same thing so i'm gonna mute allow you to unmute yourselves if you need it uh and then pretty much we can go ahead and jump into the next so we talked about state and props okay so we had we have our understanding of why this is important why this is important now let's go ahead and carry on with that so okay so imagine we've got an app okay so this is like let's just call it the the next facebook app right and it's built with react okay and this is our case study so this is the one that we're going to be building okay now when you use create react app what it does is it it builds out you can see your there we go thank you guys so you can see it now right yeah yep so so imagine we have the next facebook app right so it's going to be a massive million dollar app and we're building with the react okay when we use create react app what we will see is that we actually go ahead and it will build something called app.js now app.js is simply just like a it's a component right so it says you you get app.js whenever you use it now app.js all it does is it will give you a little spinny sort of react icon okay so to show you guys what i mean by this i'm going to literally put into practice so i'm going to open up a terminal i'm going to go full screen on this i'm going to make this huge so you guys can see it and then what i'm going to do is i'm going to go into my desktop so i'm going to desktop and then i'm going to do mpx so i'm going to mpx create react app and let me go ahead and do so here i'm going to say um coach let's just call it why does it keep changing taking my focus let's go ahead and do like um demo redux app okay so basically i'll explain what this is so mpx is basically a node package i i can i think of it as node package executor right and what it does it goes to the node like registry on the internet and it will basically go ahead and get the latest create reactor which is something which with the guys over at facebook created to allow us to you we can use this and it will go ahead and build the um like a template starting react app for us right and then here we put the name of the app in so we're going to do demo relax up so if i hit enter uh what it should do is it starts to create the react app okay so we can pretty much leave that running and once this goes ahead and um starts once this goes and starts we'll come back to it so while this is running this will create something called app.js so this was like one component and then what we can do is imagine on facebook you have loads of things on facebook right you have like a feed so there's some you have a header you have a feed so let's go ahead and build some components so here imagine we've got like a header component so imagine we build a header component so here we're just going to say header dot js and um i'll make this a rainbow again i like it when it does the it changes the color itself a little circle yeah that's it i found it yeah there we go thank you okay it's just more colorful for you guys to see then imagine you've got header.js and then imagine we create a feed so like here we've got a feed so this would be like feed dot js and then imagine we had another one so and this could be like um let's just say okay and then imagine we have a bunch of posts right so post like imagine you've got a post suggest because like on facebook you've got a feed and then you've got a bunch of posts okay so why is it like a tree because on in app.js we'll render the feed and we'll render the header and that'll create a page so you have a header at the top of the page so you'd have a header on top of the page and then you have your feed and then inside your feed you might have a post right so you might have like a post you might as might not be able to see that very clearly so i use this one you have a post now you might not just have one post you have several posts okay so you're going to have like a few different posts um so we pretty much can reuse the same component so post dot js okay now so this will render out several posts now what happens is so this is actually goes to preentry's question so app.js imagine we had i said think of it this way so imagine we had another component called login right so i'm going to go ahead and create a component over here this one's called the login.js component and the purpose of this one is to basically the only purpose of this is going to be a login screen okay so just think of this as like levels just just to make it very simple for now think of this as level zero level one and level two okay now at level zero we have the app level one we start rendering the page so you can pretty much put things like the header the feed login and imagine the user goes to login and then once you've logged in i get the user object at this point so now i have the user the object right so imagine like i log in and i've successfully got the user's object okay that's cool but i need the user object when i'm at post when i'm over here so i kind of need the user over here but i get the user object over here so how the hell do i get my user over here right so what we could do is we could have a piece of state here called user and basically in react you can you can pass your you so this by default would be no you can pass the user and the sort of there's something called a set user right so in inside of react you'll have something like this where you've got a hook and then it'll say use state right and then by default you could have no as the value so this means inside of react you have a user where the default value is no okay and what you can do is you can actually pass set user down to login.js and what this does is you can pass that down as a prop so you can pass uh like props down so if i need the user down here i can pass it through here and then from feed to post i can pass it through here and then this is how the user will get here right now i can also so preemptively you asked about it's one direction right it's it's only one direction you can go now that's because imagine we have the user up here right i can pass set user down here and then basically when they log in i can say set the user to this which means that this user gets updated okay so i can do that so which means in some sense i can kind of go back up the tree but it's not a good practice to do it like that right which means that the user gets this one more or one question while you're doing asking or telling what is yeah so how do i exactly know which is the top most component and which is the most component um i'll show you in just a sec once uh our thing once the app gets running yeah but so so think of it this is app.js is going to be your top most component in the start we have the login.js and then basically the user is here right now what we need to do is we kind of need to set the user so we kind of then at this point this gets populated and then we need to if i need the user over here i need to pass it over here and i need to pass it down here and i need to also pass it over this one and imagine if i had another component over here for example let's say we had a component called um let's just call it a video post right so imagine we've got like a video post component so this one what i'm gonna then need to do is pass it over here because i need the user so i need to go ahead and pass it over here now you can already see there's so much passing around right there's this there's just endless arrows okay and and this is what we call this a problem right as soon as you see this i kind of it screams something called prop drilling oops something i want to say something yeah go for it you know like the amazing part of it is last night i just finished developing facebook clone with you you know following your youtube was the name you know the youtube video you made yep and i understood nothing about this uh you know reducer and who all that i just copied the code and it worked right and now i'm getting there i understand it thank you very much awesome man that's i love that dude thank you so much i can't see anyone right now but what was your name who was that they said that i'm here man yeah awesome abdul that's amazing man oh that's awesome to hear that dude uh and i'm really really glad that i hoped you understand so um because yeah like you see we have this kind of tree and we call this property because you're like oh i kind of need to pass the user down and down here and then down it and basically this leads to code which is coupled right now what does coupled mean it means that like if i change something over here i should be confident that i don't break something over here but in this case with all these like connected arrows yes the app might work but it might break if i change something over here if i change feed.js so that it no longer passes the user in so imagine if i it no longer does this it no longer does this then i'm kind of i'm kind of screwed because i'm like oh god the user just broke which means that this component doesn't render the user anymore right so how do we get past all of this headache okay so before first before we kind of solve this i'm going to show you guys the actual app itself so let's go ahead and do cd demo redux app so now i'm inside of the component and then here i'm going to go ahead and do code so it's a little neat trick so you can say code inside for you guys it'll be code dot dot but mine's going to be coding it keeps taking the focus away from my my mouse it's really annoying um okay and this opens up vs code now what i'm going to do is also if you're in the waiting room sorry guys um i'm going to actually give joe do you mind being do you want to be a cohost yep awesome i'm going to make you a cohost nice nice okay so now sonia just have a question cover what's this chord dot for right so i'll show you first how to install it and then i'll explain it so here you want to do command shift p and you see if you type in shell command it will say i'm using the beta version of vs code so i get like the additional features and stuff but in your one it will say install code command in path right so to to you want to do command shift p to get that up so quantity of p shell and then you should see install pokemon now the reason why this is really useful is because remember when i went back here to this bit right for you guys all you're going to have to do is so imagine like i'm inside of the right directory if i just do code dot right what it will do is it opens up so imagine i'm gonna show you guys against the code insiders dot but for you lot it will be code dot and then what that did is it opened up vs code with the with the files and everything on my left you see that sounds good all right so it's a very quick start to go ahead and open up vs code right perfect um also we crazy enough have half a thousand people watching on youtube right now and facebook so guys smash the thumbs up if you're enjoying that that's that's dope um that means there's 700 people yeah there's like 700 people watching this right now that's awesome um okay so um right now what we're gonna do is we've got source so here so this is the app that you're gonna get so if you hit command j pull it up like this then you should get the little terminal pop up here and i'm going to go ahead and move myself you guys so we've got to come on j and then what you're going to do is you're going to have i'm going to make this super big for you guys can you you guys can still see my screen right yep yeah okay so npm stop npm start and then it will go ahead and spin up the app so give this a second also while this is doing this you see it will pop up the localhost 3000 um give this just a sec and then let me go ahead and check the our chat to see if there's any chat come through so we see props okay awesome right now you get this spinning thing so if you get this like awesome job right you already made some progress and you're in the right direction okay now what we're gonna do is we're gonna go back to our code so here and we're gonna go ahead and delete a few files we're gonna delete app.test.js so boom it's gone logo.svj svg sorry boom gone set up tests boom gone and then app.js is what started off so app.js is this point so remember priyanshu you're asking uh how do we know the tree right so this is where we start it's called app.js here so this is where the app kind of gets rendered now we're going to go into detail as to like where things get uh sort of pop like where things how it all works and stuff like that you can read the react docs for that but at this point this is where the app sort of starts off so to get started we're going to go into header go ahead and do h1 i'm going to say this is my fancy facebook app okay hashtag fancy down hey save okay and then we're going to go ahead and change this to a lowercase a right and then i'm going to because if we like to follow something called the bem convention them naming convention let's go to app.css just delete everything right save it all index.css go here and basically you get this like annoying hidden space so just go ahead and add this one liner code so basically just defeats all the margins uh by default given you don't really want by default margins applied to your stuff so that'll get rid of it so there we go there go back to apple just save it and then we go back to our um our code over here and now oops here we go now we should be able to see if we need to get rid of the logo save it go back to our code this is my fancy facebook app hashtag fancy dinner hey all right now everything's pretty good it's working so apparently to answer your question um here we had app.js so the next layer header feed login they would go here so imagine you had like login you had header you had oh now i'm starting to get it now i'm getting the three yeah like so if this is like this so the inside of the login will be like say i am passing over prop inside of the login uh component like instead of the login file so the prompt that will that will be passed inside of the login file will be below uh below login right yeah so it would be um so we're not doing page ruling today right so just so one thing to bear in mind right now imagine we only have like one page on the website if you want to have multiple pages use something called react rooter and and if you do the clones you'll be able to see how we use it i i i know about it i know okay awesome so in this case uh imagine the login right so if we wanted to have like imagine we dived into the login component and then inside the so imagine just pretend i'm inside the login component here i'm nested in and then you'd have some kind of like i don't know user i don't know i wouldn't really have a user input i just have an input but the point is that inside of here i might collect the user right so what we might do is have a user variable at the top here and then we sort of prepare it with use state so we can go ahead and do use state i'm going to auto import it and i'm going to do no okay so now we have the user here now what you're going to see is i'm going to pass the user in at this point and obviously this wouldn't work because i don't have these components built it's going to freak out but if i just do this so imagine i needed the user all of these different things right now already when something starts to feel wrong right it's probably wrong trust me when i say that when something starts to feel like it's like oh this doesn't feel right it feels like messy then chances are it's probably wrong okay so like at this point you're like okay why am i passing it in three times it i feel like i could do something a little bit better right so at this point what you could do is introduce something like the react context a um react context api or redux now in this case uh if we did this like imagine so we had the video post and posted yes so imagine we had the feed and inside the feed so i'm just going to pretend this is inside of feed okay i know it's not a good example but it's just so we can see it in one page so imagine i had post like the post itself so post and then imagine you had another one you had a bunch of other ones so they're inside a post that means you're going to have to drill the user inside of there as well so you're going to have to do you're gonna have to pass the user from this component inside and you see your user just gets thrown around your app and it looks like it looks horrible so this isn't good coding right so what we're gonna do now is we're gonna go ahead and create we're going to go ahead and basically change our structure so rather than doing this prop drilling right we don't want this so we're going to go ahead and cut all this crap out so we're going to go ahead and get rid of all this don't want any of this stuff okay so i'm going to go ahead completely get rid of it and this will make life a little bit easier so now boom okay so what we're going to do now is instead imagine like we basically kind of add a wrapper around the app so imagine like i'm kind of like wrapping the entire app with like a global state right so imagine like we wrap it in something like this so oops let me go ahead and put it here so imagine we've got this and we've got like a global state right now what what lives inside the global state i might imagine it's just like global variables right so an example of a global variable could be the user right that means think of it this way now so obviously we still have this renders this this renders this this renders this and then this might render these things this one might render this oh no no i mean the video is not going to render here but the feed could render video post or normal post okay now imagine inside of the login.js we we get the user's data yeah so what we can do at this point is imagine let me just go ahead and write the user over here for a sec and i'm going to cut this one so imagine the users inside of our global state right now what i can do is when the user logs in i can push the user oops so much multitasking it's insane when we do this all right so i can push the user into the global state right so now the user is sitting inside of a global sort of wrapper think of it that way yeah now what's awesome about this is i need the post of i need the user over here so all i can do is i can just pretty much grab it from the uh from the global state and use it inside of post.js yeah so you see like how simple that is so rather than having all those extra additional arrows now if i need it inside of video.post i can pretty much go ahead and do that as well so i can do the same thing where i can go ahead and do um is it just like slide changing yeah so i can go ahead and do video post.js now okay so you see it's very very slick in how we do this right so and then say if i need it inside of the header.js i can do the same thing i can pretty much go ahead and just pop it in there right so the user can be pretty much we can push anything into the global state and we can use it anywhere in the app so this completely eradicates the prop drilling problem right now there's two global state libraries that we're going to talk about one is the most famous redux right so redux is something that we've probably heard of if you haven't you will put higher hero by at some point redux is like the think of it as the the pro sort of solution right so it's kind of like the the one that they use mostly in production right they're going to use that in production and um we're gonna they're gonna use that in production uh and then you've got the react context api right so the react context api now this one is the sort of easy easy one to implement so you've got two different libraries here redux and your react context api now don't be don't think that just because it's easier it's not as powerful the react context api is extremely powerful right so it's a very very simple like simple pattern but it's very very like once you understand the react context api it allows you to use this global state mechanism and still have everything working as you need it and redux however is a lot more difficult to implement but it uses the same pattern but it's very powerful which is why we use it in in industry while loads of companies use redux now what should you do my advice is you learn react context api use it in all of your side projects and everything because the pattern that you use in the react context api is the same pattern that you end up using in redux so if you learn it in the react context api when the basically the easy way then pretty much you you hack the system and you kind of shortcut the sort of learning curve and learning redux is a breeze so that's my advice and we're going to do that today i'm going to show you guys how we go ahead and implement this so i'm going to create a very very simple experience here so the first thing i'm going to do is i'm actually going to go ahead and create a login.js so i'm going to go ahead and do login.js and here i'm going to do rfce boom like this and rfc so this is my login component so here i'm going to say i am the login component okay and imagine in here we just have a button and this button just says login and i'm going to really exaggerate this example for a second guys yeah um so uh i'll see you later patch awesome dude um he's gotta run i'll chat with you tomorrow yeah yeah cool stuff dude oh yeah we're gonna be doing a session tomorrow so yeah cool come in yep see you then bro uh uh so now we have the logging component patch does one on one sessions with me that's what he was talking about as well if anyone wants to do that just give me a shout and we can we can arrange something um so login so now um we have the login component now we're going to keep it so simple i'm not even going to have an input file i'm just going to kind of fake the login all right so imagine when you log in it fires off a function so here we have on click um let me go ahead and admit so we have on click and then imagine this fires off a login uh log into your app function so we'll need to create that function up here so i'm gonna go ahead and say const log into app this is an arrow function and then here basically do i hate the new zoom update honestly if you if the zoom team are watching this you guys always ruin stuff so don't keep touching it do some login stuff because oh god it's so annoying um okay so login to app now here we do some login stuff right so in app.js i'm going to show you guys the first way which is the bad way okay and then i'm going to go ahead and explain it and then show how we refactor it i think that'll be the most easy way to for you guys to understand okay so user set user what we're going to do now is i'm going to pass through the set user right so i'm going to pass through set user so this is the modifier function which allows us to change the user so here i'm going to pass through that modifier here right so if i go into my login oh and also right now it's not imported so a little cool trick if you press ctrl spacebar you get this popup auto import boom i got the import now i am the login component shows up okay so um i saw a comment from delete b saying react context api is easy but some companies are needing redux yes but my advice to you guys is learn the react context api first and then picking up redux is a breeze so it's a little trick trust me do it that way because um i remember when i was learning i didn't i didn't even and this is a little story for you guys i didn't even know uh redux when i first landed my land in my first job i literally landed the job and i was like i used something called flux which is kind of similar right and then i said like but look but listen like i'm willing to learn this right i'm really willing to learn this and then what i did is honestly i kid you not for the entire first week of my job i pretty much went into work and on i literally downloaded a redux tutorial on youtube off youtube and i literally watched the tutorial um uh on the train to work every day and then i pretty much just like i just went with it and i went with i failed a bunch of times and eventually i just got it right um corey says sonny you literally have helped me gain years back with all these hacks honestly the the little hacks really and i appreciate that dude the little hacks really do make such a difference right they really do make such a difference and they do save you a lot of time so here we have the login component right now what i'm going to say now is imagine the user right so here on the on the app.js so at this top level right i'm going to have this is the fancy facebook app you are logged you are you i'm just going to say you might be logged in right you might be logged in actually i'll show you guys i'll show you guys the proper way we'll do some jsx and i'm going to say if you if there is a user oh man it keeps taking my focus if you are a user then we're going to say the i'm going to use backticks say the user logged in is and then i'll render the user otherwise if there is no user so this is something called a ternary uh then go ahead and do the following so we're going to say backticks we're going to say i don't really need a backtick say no user is logged in okay save it um back to the boom so now if we go to our app it says no user is logged in okay so i'm going to go ahead and zoom in so it says no user is logged in right now so but when i click login so priyanshu asked earlier where do i pass in the props so whenever you render create a function the props come through as a as an argument here right so okay yeah so here i pass something in a set user the name was set user so here to access it all i need to do is say props props.user yep exactly or you can do the es6 standard and you kind of like destructure here and you just get the set user out of it so this means that you're kind of breaking apart the object at this point and you you don't so now i don't know that's cool yeah so you could just do that that's like something which is kind of cool you can definitely go ahead and do that yeah um so but the reason why when i'm teaching it the reason why i don't like to do is because those people who don't know destructuring may not know that like what i'm talking about so that's why i did this right so imagine when we click the log into that button i do props dot set user and then here i say let's just say sunny okay or i'm gonna do a little cloud shout out go ahead and follow my instagram okay so sssanga um there we go so you got that right so now when i log in it should this is what this is the theory right now okay we're going to go ahead and we pass insert user and then when i click login it should go ahead and set the user to sanger and then it will basically go ahead and it should now rerender and say the user logged in is anger okay so go back and if i go back refresh then i'm going to click log in okay the user logged in is this is anger okay which is awesome if we're destructing it yeah it would just be uh set user and then parentheses and then like yes whatever you want to put in it right exactly yeah exactly uh somebody else was about to ask a question what was that one no it's not a question i just asked what is your full name oh sergeant sunny sings anger yeah okay okay dope um sunny can you please explain the condition again yeah so i'll explain this condition yeah so this is something we call a ternary right so here user is basically uh so here we're saying if the user exists so yeah so if this if this uh user exists then we're basically going to go ahead and say the user logged in is this so basically this is like this can be any kind of boolean right so if this is true it will go here and if it's false it will go here all right now if you're not familiar with turn of ternary i keep calling it tertiary thank you leaf uh for explaining that but yeah um i i always forget that i always call it ternary tertiary whatever it is but ternary opera yeah and this is really handy in jsx so this will make your your stuff really clean and very concise um so that's going to help you out a lot so so sunny the javascript version of that would be if user yeah blah blah blah exactly the user logged in as blah blah blah yes so literally you have this this is a compressed notation exactly you have something like this like the conditional class simple way in one sentence conditional clause yeah try not to to to use the word class the reason being is because class can get thrown around and react and it kind of froze everyone around you said clause not class oh oh sorry sorry yeah close yeah i mean we cannot use this statement in the jsx right yeah exactly so so in jsx you can't use this which is why i use ternary plus i mean like look at the chunk of this compared to this like it's very clean so um try and get used to that but yeah that's a good question um so now guys what we're going to show i'm going to show you so the reason why that works in the jsx can you do multiple levels of ternaries like uh if this then another uh instead of true add another condition so you can you can you go level down how many levels down can you go you can so imagine like if there's a user um okay if there's a user and the user is equal to sasanga then you see it can it can get a bit messy now though okay okay then you can say that okay sonny is logged in yeah else someone else is logged in else no user is like this all right so you can get confused have i logged in sonny is logged in yeah your board that whiteboard uh no i wasn't doing the whiteboard uh i was just showing this one you might need to but don't yeah don't don't do it like honestly i wouldn't say i would just try there might be some other ways to do that yeah and to be honest if you find yourself doing that remember your code should be uh somewhat of like very very easy to maintain and sort of you know um uh like read and if you do that it kind of becomes like uh you know like it gets so nested and messy it kind of gets a bit annoying to read so i would i would avoid doing that but now we've got the set user so that's how so i hope that made sense for you guys so now when we use set user we're basically that was the first way right that's the first way of doing it now what i'm going to do is i'm going to implement the react context api very quickly i'm not going to jump too far into it because i just want to show you guys the sort of um a quick breakdown of how to do it so uh and this is my advice to you i never remember off the top of my head the files i need to do okay i literally would i don't know i do it once and then i just fall back to an old file so literally right now i'm gonna go ahead and go ahead and say open i'm going to say clone which clone have i got on my computer uh i've got so many clones let's go ahead and go open up the amazon clone okay so boom and open up the amazon clone and then here in the amazon clone i'm going to go down and i'm basically just going to go ahead and drag some code into my workspace go add folder to workspace and now what i'm going to do is rather than remembering every time i just go ahead i know i need this file i need state provider so i'm going to go ahead copy the state provider.js here right so this again all you need to do i'll explain this in a sec but you need the state provider i need a reducer so i'm going to go ahead and grab a reducer.js i'm going to paste it inside and then i'm going to go ahead and grab a in index.js so you see here we need to wrap our components so i need to go inside of index.js and basically i'm going to go into my index.js and just wrap it from amazon right yeah so this is just from the amazon clone but honestly like all you need to do is you don't need to stress about like oh man didn't actually catch what he did there i'll quickly show you guys how i wired it and look honestly this is um uh let me go ahead and god some people are super annoying on youtube uh okay so now what we're going to do is i'm going to pretty much remove this file actually i'll keep it in there for now a little bit but the point is so a few changes happened here we've got one and we've got state provider.js now this one is basically preparing the data layer so this global state okay this is basically preparing the global state and what we're going to do is we're going to go ahead and um here we do a bunch of imports and then here we say export con state context equals create context right so here what we're doing is we're basically this is using this is basically preparing the concept the context so this one which in the context in this case is just think of it as the global state okay then this is basically what allows us to wrap app.js see inside of index here so this is basically so literally think of it as this wrapper is the state provider see that because it's literally providing the state the global state to the app so it literally wraps it right so i hope that makes sense because it's literally just sitting around it right now this takes two things it takes an initial state and something called a reducer now if i go inside of the reducer so here i'm going to i'm going to simplify this code because we don't need any of this right now so i don't need this i don't need any of this all i need is that okay um and now this is an example of a reducer now what the hell is a reducer right so like if we have a reducer or something where remember when i said we pushed something from so imagine we're inside the login.js component and we log in and then we pop we push the user into the global store right so in order to push the user into the global store we use something called um we dispatch like an action right so in this case i would dispatch like something like like a set user action right and this would basically just contain an object which basically has the user inside of it right so imagine this kind of is like a message or so you're basically sending like a message to the data like this this global state saying hey go ahead and set the user and and this is the user i want you to set it to and then what happens is is the reducer imagine like there's this thing there's this magical thing called the reducer which basically just sits on the data there so think of it that way it literally just sits on the data there right so i'm going to use different color because that's pretty confusing but imagine we had like this and let's go ahead and do reducer you guys can see over here okay so we have the reducer now this reducer is just always listening so imagine like it's just listening around the entire data and then here it says whoa whoa i just got a message thing to set the user and this is what i'm saying it to you so inside the reducer here we have a switch which is basically saying set the user so here it's saying um return and um it's basically saying return whatever the original state looked like so remember like this is the global state so this is called a spread operator i'm not going to dive too much into a spread but basically you want to make sure that you keep whatever the state currently was and then then we're going to just change the user and then remember it passed an action which is this thing and then action.user allows us to get this thing this little message right so now what we're saying is okay we push the message and it pretty much goes ahead and changes the user and then if it doesn't say for example i passed in a message like uh update user to someone and we don't have that listen nothing's listening to it here so by default we just return the original state it doesn't break anything right now um thank you as well because i saw loads of people said they liked that explanation um inside of inside of youtube so that's awesome uh okay so now yes honey just a quick question cover so how do you know which is local state and which is global state insider code editor i don't like i can't differentiate between a global and local one okay so i'll show you the way to look at it is imagine we're inside of app.js right here this is like you can see this is local state because i'm literally declaring it here the variable's here and this is being used here yeah now the way i would pull it from the global state so imagine i've got my reducer the store by the initial state is this right the user and then if i go ahead and i've got a snippet of code somewhere here i think it's this one yeah oh okay so if it's outside a function like then it's global uh no no i'll show you how it works now so uh back to our code so forget the amazon code for now so uh to so i can pull the user from our local state here right so by default this is pretty much where i define it where i use it everything like that now here if i want to pull it from the global state i basically need to say this right so this is how we do it so you say const and then you basically get two or two things so let's just comment out the local one we basically get the state and then we get this special thing called dispatch right okay so we get a state and then something called dispatch now um here we have use state value so i need to import this and this is from the state provider so that file that we created earlier this one here right and what this is doing is it's basically going ahead and it gives you two things it gives you the global state and it gives you a dispatch now if i want to get it from here i can say state.user right and then this will basically go ahead and say state.user so now it's getting it from the global state yeah but remember you can do es6 you can also break it down like this pretend she loves that so you can pretty much go ahead and do this and then boom yeah but you see uh in one of your clones you name the file state provider you named it that layer yeah yeah because i was trying to test if it was easier for you guys to understand with data layer um because basically essentially just think of this this is the state provider right it's kind of like this thing uh but think of it also as the data layer that's how i kind of explain it and you can get more complicated you can have different layers of the data layer and then in redux you call that slices of state so you can have different reducers and and stuff like that but whenever i asked because i wanted you i wanted to ask you what's the standard like which would be better to use so right now i would just use state provider um again it doesn't matter too much at this point um just learn the pattern right so i have a question yeah i think the reducer acts as a switch between the data layer and the components is that right yeah um so okay so imagine this is the reducer right yes so it does it has a switch inside of it because it's listening to different actions right it's trying to like say hey like what kind of action came in right so what kind of action came in um and then think of it in a way that so i'm going to go ahead and pull up a diagram quickly because i think this might actually help us out so let's go ahead and type in redux or something like that all right so redux has the exact same pattern as um the sort of so let's go ahead and go here i'm going to go ahead and make this bigger so i would highly recommend that you all go ahead and read some stuff about like uh redux and stuff like that so okay so here so imagine now i've got uh so this is react and redux okay so imagine it's the same as react context api so we have the view this is the component okay the subscribe all that's saying is essentially uh just like we have here this is subscribing basically we're just pulling the user right so imagine when we had the old one so it's a state here we're basically subscribing that's that the dispatch i haven't showed you guys in exact use case but i'll show you right now so what we can do is i can copy this line of code go into login rather than doing this set user crap like this rubbish i don't want to pass this for every time no i want it to be clean i don't want to have like things passed through and all that stuff so i'm going to go ahead pull in this magic line of code here and the reason why i call this magic is because honestly once you get used to doing this it becomes very simple to go ahead and um it gets very simple to go ahead and reuse it right so this gives you the state and this dispatch dispatch is like a gun that allows you to basically shoot actions into the data layer so remember i showed you guys here so where we shoot the action into the data now right so here what i can do now is rather than prop start set user i can do dispatch and i basically just pass an object into dispatch and i basically say the type is remember inside the reducer we had set user so the type is a set user uh type of action and i'm passing a user in and in this case i'm going to make the user ursus anger right so now i've dispatched when i click the login button then when then that gets picked up inside the reducer so when i click the login button it's going to dispatch this action that gets picked up inside a reducer and then it goes and manipulates the store so here remember the store or state doesn't really matter store or state right um so now you've got the state and then here it will go ahead and basically change the user okay so it changes the user now this then because because we're subscribed it will actually update and rerender so now just give me one sec so now here what i can do is because we're mapped to the state here now everything if we've done it correctly should be working so let's go ahead it says state provider is not defined on index.js so here i need to go ahead and import state provider so i'm just going to say import state provider from state provider there you go and then go back refresh state provider does not contain default okay means to explicit and there we go okay so this is my fancy facebook app hashtag fancy dinner i'm looking component login oh something happened right let's check out what happened so what i do is when i debug this i'll show you guys i'm going to open up my inspector and i'm going to click the console and nothing seemed to happen right it just kind of went disappeared so the first thing to debug right what i like to do is i like to go to producer.js and inside here i like to do console.log i always log out my action so this shows me did this action actually get fired off this one right here right so let's check it out so i'm gonna go ahead and click login okay so if i actually fired off the action type was set user the user was sssanger okay so what i can do now is i can go ahead go back to my code check it out and say okay action.user cool um yep this is cool and then i can go back to my app and here it says state.user so really i mean at this point oh okay so remember this one we didn't actually change it so we had that double tertiary and that's again a bad reason another reason why you shouldn't do that so i'm gonna say logged in as state dot user so save let's go back and now refresh login oh nice so you see it just flew through the entire cycle there okay so literally the entire redux cycle this entire cycle just processed and then it rerendered so here logged in as and to prove that i'm not lying to you guys if i go into login.js and i type in like uh let's just say like priyanshu so let's say like he's about to log in so now if i go refresh and i go boom logged in as preentry right so dispatch the action set user and shoe i hope i spot it right um and then yeah and there you go yeah so you see like this whole cycle works really really nice okay um yes yes exactly so you see what he's saying here guys you see i passed in uh an action and then here was user right um and i'm sorry in login i dispatched a type and then a user and then here you have to match action.user to that to that exact same key so if i change this to like username then this in the reducer would have to be action.username even if i mapped it to user the action dot would have to be the same so you want to keep it consistent to be simple okay right now this is awesome yeah yeah just one quick question i have worked with flux in the past so there we used to have lots of stores right yeah but in uh redux as yeah you showed the diagram we had only one store so is it like uh in redux we only have one store is that the limitation or something that is created for say so good question to answer it the first thing is i also learned flux so uh if you are doing flux it's going to be really kind of easy for you to move across to answer your question though this is the react context api being used in a uh redux like fashion um we are going to be covering redux i see so many people asking about it in in chats yes but we are going to be covering it now um so this is the react context api okay and also jose says is it redux hooks anything with hooks is not redux it's react hooks is react um yeah so now to answer your question inside of the direct context api you can have multiple stores but in this case i've only used one and now sort of maybe might not teach that just yet but in redux you can actually have the practice is to break it up into multiple stores yes so you would have like the user store the basket store the products yeah i mean it depends how granularly you want to get but to answer your question the practice is yes to split your code up into different stores okay yes so sorry you just went through the redux flow right you just demonstrated the redux pattern between no yeah this one right there yep did you just demonstrate this so there is is there is there anything more to redux than this i mean where is the where does the integration with postgres sequel or sequel where does that is that downstream upstream um so so don't that's just completely forget about uh postgres and sequel and stuff because that's a whole different department okay as such uh to do that you you need to start doing requests and that kind of is completely separate from what we're doing here um so try and think of it separate to that but yes we we kind of ran through the same pattern that redux uses uh but right now what we're going to be doing thank you so much calvin kopanda by the way five uh dollar donation he goes i'm a simple man it's here live session with sonny i click i appreciate all the value keep giving us feeling more comfortable thank you so much dude um but yeah what i was going to say is um joe to to answer your question you in redux you have things like middlewares right so imagine every time you went through this flow right so imagine you went through this flow you can have something middle west and then for example you can have a middleware uh i can't remember which point it is i think it might be like here or here but basically you can have an action that dispatches every time the middleweight could be simple thing it could be like logging out every action and it can also be something which is super like uh sort of technical like check if the user is logged in every time this cycle runs but that could be a separate like a node.js kind of an interaction uh separate independent of of this pattern basically uh you can you can really customize it to do whatever you want honestly you can have a middleware which makes a request i wouldn't say it's a good idea because every time you change anything it might go ahead and make a request to your network which isn't the best thing to do but uh i think what we'll do now is i'll show you how to implement redux because we've never done that on a on a stream or core or anything and i think that would be really handy for you guys so uh you guys saw now right like it was actually pretty simple like i know it may not seem 100 simple but in reality with a little bit of practice this would be you'll get very comfortable with this right uh you get i never thought about that idea said reduce plus flux equals redux or maybe yeah um sunny yep uh okay i'm gonna answer both questions just one of you drum jump in first okay i'll go first then um so could i see your index.js file yep okay so why did we add the state state provider here okay so remember here we have the wrapper right so yeah this kind of wrapper around the index imagine what is it what it's actually kind of doing is you're kind of wrapping uh so yeah think of it like this because what you're doing is you're providing the entire state so that global state to the entire app so that's why it's kind of nested inside of it you see that right yeah now we call this something called a higher order component so this if you want to look into it more this is called a higher order component as in i'm referring to state provider and the reason why it's called a higher order complex i would recommend maybe reading into higher order components that they're usually called hlc and they are kind of confusing at first i remember when i first learned about i was like what the hell how the hell do you use this they made sense afterwards and basically the whole point is it just enhances this so now by wrapping it inside of this it means that any level below so app or anything underneath app so like login for example means that i can use things like the stake without providing state for the app right um providing state things like yeah yeah yes yes yes you're providing state for the app exactly so it's literally providing state for the app yeah uh i sony i have a question yeah for the straight providers state provider for example we have uh a sudden uh let's say group where we only want to pass certain parameters to a certain component so do we then wrap that component in a different state provider or it's gonna be the same for the you know whole app thing for example let's say for header we want to only pass certain things to header but no other part of the app can access that component those values right so you can you could i mean what you could do right is you can create rather than a state provider you could provide something like a a user provider right and then what you would do is inside of here you would basically only wrap this with the user provider right so you'd do everything but then you would have a user reducer in that case as well right so you would have user provider like this and yes that's actually a really good that kind of like clicked something in my head as well actually there's a good question um it's warmer down there yeah so you could do this and this would mean that only the um the login would get the user provider values and capabilities okay right so that's actually a really good question yeah thank you for that and before i answered shrieker's question somebody else jumped in who was uh yeah funny i was just looking for the state provider explanation what we are doing in this gateway okay we are creating context api and something else okay awesome so that makes sense now yeah okay perfect all right so i have a question right now last question and then we'll move on yep can you summarize the flow again between classes yeah so between you mean explain the flow here no in the code okay yeah so the way i understand this be careful dude uh try not to have an echo i'm gonna go ahead and mute everyone just unmute yourself if you uh whoever was asking the question okay so to explain it again very quickly um we have index.js this state provider provides state to app right inside of app we can pull values from the state with this line of code right inside of login and then we can use the value like this state.user inside of login we pretty much when we click the login button we can have this dispatch and we basically dispatch an action now the reducer is always listening to actions so in this case it picked up the set user action okay what this does is it modifies the state when we hear set user it modifies the state like so and then in login.js app.js this is where it gets rerendered so that's the entire state uh funny just like in amazon clone we have created a reducer for products right here we created a reducer for user so for different uh we have to create different routines so so right now it's one i didn't create a user reducer i created one reducer for everything here we haven't done any sort of separation um so here um this would go ahead and we can say uh like say for example you had products or basket right here you could have a basket which is an empty basket right um so but it depends you can have different providers we're not going to go into that right now i do kind of want to get into redux right now because i think it's going to benefit the most people so let's kind of put a hole in questions for now and move on to redux because that's going to be the most invaluable part of this right so i want you guys to take a mental sort of like maybe you can pause the video so i have a screenshot or something but you guys can go ahead and and snap this but the point is is that this is you saw in terms of the code itself it's extremely clean um and believe me i've been in like production environments and huge production environments this is pretty clean code like as and i'll say i'll tell you that like yes you can always make code cleaner and neater and like this can be like an object see it's no longer like you can do you can always improve something but in this case um yeah we can so neha says uh we should have joined earlier can you please let us know the agenda to me sir yes i'll try my best um i did mention in the beginning of the call but maybe earlier inside the announcement i could do that as well so uh now but now we're going to go ahead and learn redux so i'm going to show you guys i'm pretty much going to get rid of all of the react context api stuff and to show you how quick it was pretty much look i get rid of that i go inside my login i'm going to get rid of that i'm actually going to just get rid of the login stuff and say logins happens here and then go here boom get rid of this get rid of this go back to here and then i'm just going to give this and say the user is this is kind of like dummy code right now it's not really doing anything got rid of state provider and get rid of the reducer and now we're back to square one so inside my react app state provider is still being run pulled in from here there we go so now we have the fancy facebook dinner hashtag fancy dinner app so this login component doesn't do anything now okay um a question will state provider and reduce the path redux or context api flow um so don to answer your question state provider and reducer was part of the context api flow but the pattern is consistent amongst redux and react context api so if you are confused just remember learn the pattern um through the react context api because it's easier to do that and then shift and use that knowledge on redux that's going to be the most beneficial way of learning redux it's going to be the most easy way of learning redux if i could put it this way if i could have had someone sort of give me a cheat right like a cheat code to sort of like shortcut all the headache and all that sort of stuff i would have pretty much gone ahead and done um i would have pretty much gone ahead and made it so that let me go ahead and do this i would have made it so that um i actually learned the react context api unfortunately wasn't available when i started learning the first time but i would have learned the react context api and then i would have shifted my knowledge over to redux because it made it super easy to understand right um okay so now what we're gonna do guys is i'm gonna share my screen again um boom okay so now so this is a really awesome example because i forgot how to implement redux so you guys are gonna see it completely from scratch nonbiased nice fresh slate okay so what we're gonna do now is i'm gonna go to redux and here i'm going to go ahead and uh type in so i'm not going to google image i'm just going to type in redux boom getting started with redux okay so this will be interesting because i can't remember how to do it so it'll be pretty cool so npm in store so pretty much and this is make sure like you guys really like sort of like i want you to pay attention to a few things when we have this sort of tutorial right now because one thing is going to be the sort of experience the um the natural sort of like okay so he's a developer he's been coding for ages too but he also gets stuck like kind of normalize that right because it's not like i know the answer to everything it's kind of like okay you know um it will go ahead and it will make it a lot easier for you to do this this is dope by the way i just saw um it says here create react app actually has a template now for redux so i mean we could go ahead and do that let's go ahead and try that in a sec but i'll show you guys um actually not let's go ahead and do it let's do that because that might be really cool for you guys to go ahead and learn so um also for everyone on youtube saying um it's already developed up they're showing today no it's this is uh this is fresh code dude so you're going in timeout so now what i'm going to do is i'm going to go ahead and um i'm going to cut the app that's running and basically i'm going to go out of this folder and i'm going to create another one so i'm going to say mpx and you see here it says mpx create react app my apps are the name and i'm going to use this this special option now okay so you guys can see here right so i've got oops all right then the mpx create react app i'm going to change the name i'm going to say this is called the redux example right and then i'm going to say template redux right now this is really cool because i haven't when i made when i first used redux they didn't have this template okay so i'm gonna go ahead and hit enter and let's go ahead and see what that does so while that's doing any questions guys uh just one question when how to decide like when to use context api and flux and litex i know that the flux is not being used in production environment on large apps but as for context api as you told a relay is also coming up so keeping that aside how to decide for which should we go right so good question uh to answer your question in a nutshell what i would say is um you want to basically go ahead and use so don't use flux because you have two better solutions i would use react context api personally if it was a personal project i'd use react context api i would then jump on to the uh the um if if needed or it feels like a professional job so put it this way i've used so many i've done so many professional jobs and freelancing jobs with the react context api because it's simple it does the job why am i i don't need to over complicate the build if i don't need to so i would use that right now if i'm in a pro like a commercial environment so i'm in a job and things like that and chances are they're going to be using redux because and there's for obvious reasons why um you'll pretty much experience that yourself when you start using it um but yeah so to answer your question very shortly um i would use i wouldn't use flux i would use react context api and then use um the uh then use redux yes yep okay okay yeah yeah which one is any yeah sunny i just wanted to uh go through that explanation of context ap again just wanted to tell you my understanding and in case if it's wrong if you can just correct it yeah uh um so i will say to that is i'll give you a quick breakdown on the on the um let me go ahead and share my screen so i'll give you uh oh god damn it uh here we go so i'll give you a quick breakdown on the diagram but beyond that what i would say is rewatch the video go through the build again and kind of watch it that way because that way it will benefit the most people on the core right now so the purpose is is that it provides a data layer so you have this entire data layer around the app okay now it basically this is going to be your component uh for example the logging component when you click the login button it dispatches a login sort of set user action at this point the producer is always listening to any actions that get dispatched so it basically goes ahead and modifies the state so it sets the new user the new user because it's changed and because we've subscribed to it inside the component causes react to rerender right and that's basically the flow of what happens now i would say if you're still stuck make sure you just go ahead and play with it because honestly as much as i will explain it now oh guys please watch the mics because it's like got some i've got some really crystal clear headphones and that really just chewed my eye off sunny i have a question uh regarding the comm and you wrote uh so so to have redux uh in our project we need to have a dash dash template redux yeah i'm still i'm getting back to that now so we're going to jump into that in a sec yep uh guys i'm going to mute everyone again because the mic so nope that's not happening damn it yeah okay that literally was creeping up on my ear uh so careful guys because you meet yourself sony oh man i made it yourself sonny yeah now we're good yeah yes very good all right so gonna carry on now guys so uh here so we have the redux example okay so i'm going to go cd redux example boom we're inside code insiders dot and then what we'll do is open up another window so i can go ahead and close my old one i don't want to save this one i don't care about that uh and i'm going to make it full screen i'm going to zoom out a bit because i can't see anything and you guys can see my screen right now yeah yes okay so it's got a bunch of things now so this is this looks a little bit different right so and you can see i've got loads of stuff here so i'm going to go ahead and spin this up so i'm going to say npm start and go ahead and do it so right so now rather than this isn't the old app we don't have this anymore um once it goes okay so now it's compiled so you see okay let me zoom back out there we go okay this is kind of cool actually all right so you get this as your starter template uh and then what we can do is that plus boom add amount okay so this adds like two to each if i had like 10 add amount 18 28. okay awesome add async oh nice okay so that asynchronously adds 10 to it so anyone that doesn't know what async is it means that it's not a media it's kind of like asynchronously so asynchronous just means there's a delay so usually when you do a network course asynchronous because you kind of say you fetch some information from google it's going to take like 15 minutes on 50 minutes like like a few milliseconds to come back so you're going to have that little delay so if i go ahead and do async imagine i clicked it and then boom it comes back right this is kind of cool actually so now what we'll do is we'll dive into the code and we'll explain what's going on so um what i'm gonna do is we've got this special counter component so in features that's where they've made the counter component so i'm going to hide that for a second you can see there's loads of code running around here right so we're going to go ahead and make sense of this for you guys counter.module.css so this is just css file counter slice is um again so you see redux right redux looks a lot more complicated right it looks a lot more complicated um but the truth is it's not as complicated as you think right so what i would say is my my my biggest advice to you guys is to go ahead and do exactly what i did now so install the template and then go to here for example right go to getting started with redux and pretty much you can go ahead and look and you see you've got the basic example where you can pretty much go ahead and see like think of it this way look so this is that producer that we saw in the react context api remember it had a switch a case and a case and then a default right and then you created the store and then basically you can subscribe to the store and you can dispatch actions from the store which is basically when we did login and it we went we wanted to go ahead and do um uh set user right so it did that now uh let's go here to learn redux okay so now we don't need to care about this so i'm gonna go ahead and dive into the code now so let's go back here so now what i'm going to do is i'm just going to grasp on what's going on so i'm going to delete everything i don't need so app.test.js i'm going to go to logo.svg delete setup test.js boom delete okay now index.js can you see the same thing we have a provider right provider surrounds app.js okay so i want you guys to first notice how the the approach is the same we have like a component which surrounds app right and then that injects basically the the store into the app okay now i'm gonna go to app i'm gonna go to store.js now you can see and this one the store is very simple okay so the store is very very simple it's very clean we don't really have much in here so i'm gonna go ahead and just i'm just opening up the chat in case anyone's saying um okay so brandon d is it just me or zoom flickering it's because i'm running quite a lot of um like screen sharing stuff going on at one time so it can kind of flicker a little bit at times uh see you later cory as well thank you for joining bro um okay so here what i'm doing is i'm configuring the store so basically redux has changed a lot actually since i used it last so now they have this toolkit okay so this toolkit is basically saying configure store and it's just exporting it so here we can pretty much say export default configure store and then you're passing in a reducer and this reducer has a counter and then you're basically saying the counter reducer now the reason why this this actually makes a lot of sense it's kind of cool actually so now let's go ahead and look at this so inside of features counter counter slice so let's go inside of here so this so basically inside of uh redux the way i want you to think of it right is in redux imagine this is the data layer okay and inside of it we have the app right and then obviously inside of app.js you have everything else okay so imagine this is app.js oops oh app.js there we go all right so imagine we have and then obviously everything renders inside of app.js right so that's why i'm doing this now previously we just saw it as one layer right so it's like imagine like layers of an onion right you just had one layer right but what redux does is it gives you several layers so you can actually have like several different layers and you and these would just be like different stores now why would we want several layers uh the reason is because you might want one layer which is primarily going to hold the user stuff right so this one could be called uh the user just think of it right now as like the user layer right and another one could be like the basket layer right so another one could be the basket layer so basically the user layer would only have information about the user right so it will basically all the logging here and all that stuff would only happen in the user layer the basket layer would be everything that's inside the basket so it would be like add to basket remove from basket that's what the reducer it would have its own reducer the user would have the its own reducer so in redux we now have concept of multiple layers and you can do that in react context api but it's more you see it happen more in um inside of redux so now and what we call guys is these um these layers we call them slices okay so this is called a slice of state or slice of the store and it makes sense because you're basically slicing a slice like you're basically slicing a piece of the store right so you're basically like slicing it up into layers okay so we call this so it says create slice so in this case we've got the counter slice and this one is purely responsible for just that counter okay now it has a name okay it has an initial state so remember it's it's a very similar so remember in the reducer of react context api we had an initial state so here we have an initial state um and then we have a value of zero and then here inside of reducers we have an increment function we have a decrement function and we have an increment by amount so these are basically those actions that we spoke about before okay and we basically export this into this counter slice to action so let's go ahead and go over to um sonny i had a question go for it can you go back to your diagram yep so uh the is it uh okay to believe that the basket the user layer would have everything that the basket layer has plus more or are there two independent layers that have nothing to do with each other it's totally isolated compartments very that's a really good question and to answer it they're completely independent so they're isolated from one another and the reason why they're isolated from one another is to reduce complexity so anything like logging in um anything to do with the user goes in the user layer anything to do with basket stuff goes into basket and now this is really important because imagine you had a huge app right you've got thousands of like hundreds of developers working on one app you need this kind of isolation otherwise like if if they're all interlinked it would get so crazy so fast and it would be so chaotic to be able to do anything because then stuff that happens in here is gonna break stuff that happens elsewhere and it just starts to get really kind of you know a bit crazy and then how do i if i need to access the other layer do i still use the props way to to get it around uh i'll actually show you how we create two layers okay yeah because because i can't remember as well so it'd be awesome to go ahead and do that yeah sorry that's basically follows the react react component design pattern right yes so it splits into components don't think of it as components think of this as a sort of a concept because this is yeah the concept yeah this is kind of a con this is a component app.js header.js post.js they're components this is kind of just like think of it as like layers which kind of go around the components and the reason the easiest way is in index suggest this is basically the layer that has all of those slices in and then it just gets provided to our component app which then renders to several other components underneath it uh sunny i have a question for you since you're talking about the layer slices and the first slice will be login right if i don't have an access to the login then i cannot go further right so i wouldn't do a login i would do a user layer oh i'll do it yes yeah i'd have a user slice yeah yeah user uh so it is uh an in encapsulated uh this other slices in store uh in user layer right no so so just think of it as like so the user layer would just have a user object inside of it it would have a few it would reduce the user reducer would have like actions which listen to you like logging in logging out basket will have the the basket array inside of it it would have actions for adding item to basket removing item from basket and then in any other components i can just pull from whatever i need to no i think what he's trying to do what he's trying to ask is whether they whether the user layer the other layers have dependency on the user layer which no no no so they're completely separate just they're completely separate layers they don't know yeah uh so you're saying uh like in a uh like in a amazon um kind of clone uh without login i can add into the basket it is a separate layer and when i logged in then it will be stored in into my account right no so okay but try and separate so this is a question i get quite a lot try and really separate your understanding of the layers with with like um because what can tend to happen is you're right now you're mixing understanding of of um like the apps or the amazon app like storing things in your basket and your account being stored in your account with concepts with concepts of like of programming and remember yes to amazon you might be storing things on your account or inside your account but that's because you you make a network request to push data to a database you see that there's a whole nother thing to to approach right so absolutely yes i would say try and try and keep them separate um yeah okay so sonny um can we do the same thing what we are doing in redux in using uh context api yeah so you mean the layers like yeah yeah yeah yeah we can we can do it um i'll figure out how to do it and then i'll show you guys how to do it but the point is is that honestly i would recommend doing the single layer approach with with the react context api and then using it and guys the reason why i'm saying this yeah is because i've made a serious like a decent amount of money like when when with freelancing just using one layer with the react context api and it served the purpose for many jobs now sure when i've gone into production environments and i've been hired as a developer they've been redux environments where it's gonna it gets really nested it gets quite integrated it kind of gets a bit you know it gets quite involved in that sort of stuff now i would say my my main thing here is is just understand the pattern um with the react context api and then just practice the slices in redux uh and then and then whatever you decide to do you can pretty much go ahead and mix and match pursue whatever you want to do but that would be my main advice here for how to approach you know like what what you should be working on and what you shouldn't be wanting and that sort of stuff so so somebody asked a question like when do we use react context api and when do we use redux so redux is for like when the application gets very complicated so it's better to use redux because we can make use of this multiple data layers and all these things and for simple applications like you know which doesn't involve uh much data and everything so we can use context api is that is that true yeah so i would say keep it very simple so keep it very um keep it like super simple in the sense of like and then put it this way i would always vouch for using the react context api first and then i would about then i would kind of move to redux only if needed right um like i wouldn't honestly relax is heavy like like you see like the code here is it's it's quite heavy code like is in this is quite a lot of code whereas react context api i didn't have to do much but i had like a crazy amount of code right um so my advice would be to maybe just focus on whatever the simplest option is right now bear in mind if you've got a contract for a year and um so muhammad imran says why are you only comparing easy to be even better that's not what i'm saying i'm not saying pick the easy one to be better i'm saying be smart if you're if you have a job which has like you know there's going to be 30 developers it's a startup company it needs to grow yeah then maybe the decision to think about is maybe it's better to implement redux from the getgo but don't always think that just because redux is the one that's used more than one that's sort of like in practice that's the better one because right things come along and are better in time just like the improved redux now so that now you've got all this sort of create slices and things like that but um try not to get sort of carried away with just whatever's um it's not always whatever's but in my opinion keep it as simple as it needs to be until needed until you need the complexity yeah so i can actually went down that same route and i uh when i learned it yeah what they said the difference was is if you're using redux that's for uh data that's constantly being updated over and over and integrating versus use context is more or less if you're not really updating the data as much or it's a simple application yes exactly so simple application because uh is so so actually the way we use the context api is different to how a lot of people use it they usually use it for like themes or dark mode or things like that so so options which aren't going to get updated much but i kind of modified it so it kind of follows the redux pattern and i teach it in that way so we kind of get redux functionality but not with so much you know um somebody said nazim said something can you simplify clean up the code for better understanding to get the same pattern as read context api the pattern is already the same with this code uh nazim it's just the case of you can't clean up code remember yes just because there was less code doesn't mean it's this is actually extremely clean code this is actually really really clean code which is why this is my first time looking at this new implementation and i can i can understand what's going on so um well i'll show you let's jump into the code and i think it'll make a lot more sense so before you go go to the code i have one small question for you final question yeah any place where i can get into react context api what do you mean any uh tutorial another tutorial where i can i would i would say honestly go ahead and just just look at the react docs okay yeah thank you the react docs are the best yeah okay um okay so here we have the reduce with increment decrement and let's just find where this is used so right so let's go to our counter and here we can see uh increment set increment um no this is increment amount but you can see we're pulling all the actions from counter slice right so we're pulling like increment from counter slice and then here you can see a dispatch and increment action right and dispatch this and this this and then you can hear set increment amount and then increment by amount and then here they're doing some special but the point is is that what we're going to do now is i don't like how they've done all this they're kind of over complicated some stuff but what i'm going to do is i'm going to make another folder right so i'm going to show you guys okay another folder and this one's going to be called let's call it the user so now we're going to try and recreate what we did yeah so again like i'm going to try and sort of do this from the beginning so we're going to say user and here i'm going to have a login component say login.js rfce boom and this is gonna say h2 i am the login component okay um and now what we're gonna do is unlocking components there we go and then inside of inside of my app.js i think i'm rendering out logo there we go get rid of that save it and you also have to get rid of the image tag yeah so it's new oh yeah nice thank you and then here we go back and now you can see we've got this right now obviously at the top i'm just for now i'm going to keep it super simple above everything i'm going to render our login component this is the one that we just created boom now we have i'm logging component at the top yeah so we're all familiar with this one right so ignore the stuff at the bottom for now we're going to use it as reference this is my truth be told right try and get used to being familiar with the unfamiliar now that that kind of like doesn't make sense at first but what i mean by this is for example right now i forgot how to code in redux no not forgot how to call it arenas but i forgot the exact sort i mean you don't need to memorize this you just need to know the pattern so i can get all of this working but i don't need to remember every single line of code and everything all i need to know is how it works and then you pretty much can go ahead uh and build it so try and get used to being in that situation and and and working in that way and then it will make your life a lot easier because you'll be able to pick up on especially when you go into a production environment um you're pretty much gonna understand um uh you're pretty much gonna you're gonna be able to move into a new environment which is very intimidating very sort of like oh my god i have no idea what's going on here but you're going to be better at understanding that right because then you're going to be able to dive into anything and sort of learn build that that um build that that sort of skill so yeah get familiar with the unfamiliar um uh also ganesh from uk manchester awesome dude nice um so login so now we're gonna basically go ahead go into our login component and i'm gonna look at the counter.js right so let's see how they've done it so they created this counter slice so inside of user i'm going to create a user slice so i'm going to create a user slice and what i'm going to do is i'm going to literally going to copy the code from counter slice into user slice i'm going to rename everything that i want so the name is going to be user it's not going to be you counter slice it's going to be user slice the initial state is not going to be value it's going to be a user with no right here is the reducer so i don't need any of this stuff what i'm going to have is i'm going to have something like set user which takes the state and it basically goes ahead and says it's going to take a state and an action so this is the same pattern we did before and it's basically going to go ahead and say state dot user is equal to action dot user so i think that's how you do it and then we can also make another action called log out oops let's make one called log out and this one is basically going to say state.user is equal to no so these are two actions right and i'm going to go ahead and get rid of this and then we need to go ahead and export these so export that one export that one delete this one and you can see it says counter size this is not the counter slice this is the user slice and i go down and i don't need any of this select count selectors right selectors are really cool selectors exist both in um in react context api and in redux and the selector is basically just a piece of code that's for example here we can say select count so this one because i select user basically it just goes into the state and in this case we're just going to go ahead and return the user now this is a very basic version but imagine you had select basket lens right then you would have it will basically have a reduced hair which basically go ahead and tell you oil to be like state.basket.length it's just something which is you might not see the value in it now but just know that they exist okay know that they exist and that my pedro says something then the class can you make the final code available to download uh for this one i could yeah for the redux stuff i definitely could i would say maybe try and give it a go and try and do it again alongside that might be the best way for you to learn it um because all i used was the create react app with the dash dash template redux and i got this up and running um but yeah so now we're going to do is we're going to say like we do we have to follow exactly what they do or you can modify or change different stuff like without following the same pattern um wait say that again sorry like uh what i'm seeing here is like you are just changing the names yeah and then like we follow the same pattern yeah so we have to put the same pattern is it the mask or we can change it like no so remember so this is just the way that redux is sort of written in this case this is kind of different to even how i use redux but the point is is that like it will uh so so keep watching and then i i'm pretty sure it'll answer your question in just a sec uh well yeah so here i'm going to change this to counter size to user size and i'm basically exporting the reducer right here right so export reducer save it i'm going to go into counter size here and let's see where they so now this going to our store and then here what i'm going to do is i'm going to import my user reducer from user forward slash user slice and then here uh configure store i wonder how we do this i wonder if it's the same thing and you just do it like user is a user reducer like this and then let's wonder cfo okay so apps loading and you can actually install something called the redux devtools so i think i have them installed and let's go ahead and check so i've got the redux devtools here and if we go to the state um is this is this right what is this open in a panel open open in the panel this is not right okay ignore that let's just we'll touch on that another session have i got them in here redox okay yeah yeah okay there we go so download redux uh dev tools and then right click go to your thing go here type hit redux and then you go to state and now you can see that the counter is there the user is here so redux is really cool because once you implement there here you'll be able to see all the actions that get dispatched right and you'll also be able to see you can actually rewind in time different things so i'll show you how that works right so we have i am logging component now what we're going to do is let's go to the login component and here now how do i use the user like before obviously we have that magic line which is why i love the react context api i don't know how to i don't remember how to do redux so well i'm going to go into counter digest and see how they do it so they they import everything that they need so i'm going to go ahead and push this code to the right and i'm going to go ahead and do the same thing i'm going to go ahead and import uh it was set user and it was logout these were the actions and they were from and let's go ahead and do it from the user slice okay so i'm going to go ahead and pull them actions in um and then i'm going to go ahead and pull in the use dispatch and the use selector i don't need to use this selector i just need to always get set use it instead of user oh thank you nice see that's the kind of dude that's the kind of laser vision you need that's awesome yeah um so that's good and then what we're gonna do is to get hold of the dispatch which is that little gun that sort of allows us to shoot into the data layer i can go here and go const dispatch equals use dispatch so i'm just remember literally i'm looking at how they've used it here and i'm pretty much going ahead and reusing it okay then here we don't need the increment amount blah blah and now i guess all we can do is pretty much go ahead and say um let's go ahead and try out this kind of a button which says log me in okay and on click here i'm going to do an inline function oh let's just do it we'll keep it simple as i say log in um to app so same thing that we did last time so that way you guys are a bit more familiar so we can say const login to app it's an arrow function and then here we're going to go ahead and say dispatch and i'm going to say set user which is an action and it takes a payload and the payload in this case would be a user and the user is just let's go ahead and say um sss anger okay now let's see if that works i mean if it might work so let's go ahead and log me in whoa okay so it's set the user now what i can do is i can click this go to action and i can see if i click this the type is user set user payload is a user this is anger and then i can see in the state now but look the state didn't get updated correctly so this is where we need to check what's going on okay so the state didn't get updated correctly so whereas if i do this so you see when i increment it shoots off the increment value right and you see what what's awesome here guys i want to show you something quickly if i go ahead and just focus on this increment once if i hit increment decrement yeah now check this out guys so let's go ahead and increment a bunch of times i can actually go ahead and rewind the app so i can go back to this point and it rewinds the app how sick is that so you can actually rewind the app damn that is so cool that's cool you can do that crazy so you see like this is why like you can actually rewind the app so like and what it's doing is it's just dispatching the actions as you see like they're kind of highlighted and what you can kind of has a database like we can call it like a local storage database kind of thing yeah and this is more like a debugging tool but what you can actually do is you can skip an action so if i skip an action look it skipped an increment so now it's nine i skipped this one i used from a long time i never knew this happens yeah it's awesome right you can do a lot of stuff you can even do like some kind of uh i don't know what this is but uh you can actually even gives you some testing code it actually gives you the testing code which is insane as well like it actually gives you testing code um so you can actually go ahead and add this in the test and it will go ahead and like adjust respect to redux yeah and it will let you down redux and devtools just basically makes redux way more easier to visualize and understand exactly so now if i click log me in so now for debugging right i saw this one got fired off i click on the action i saw that okay it's got the payload this looks good but something isn't working because if i check the state i haven't got the user in the state so now let's go and check out why so let me see why because this is even sort of for me this is kind of interesting so state dot value equals this okay so now what we can do is let's go to our uh user slice and here i say state dot yeah so we've got this one i'm going to push this over here and here we get action.payload ah okay so remember when we looked at this the action said payload right so my um so now you can see payload user right so here what we're going to do is we're going to say uh payload dot so now this is where i made the mistake so action dot payload dot user okay and then i'm going to go ahead and do it now so now if i do this log me in okay why is it okay there you go log me in oh okay so now this is where it gets really cool so i just hit the the user set user right and it says it shows me a diff now this is the this is the awesome right now uh thank you so much abdul uh he says you're the best i'm getting it now um and you also troy thank you so much uh really glad that you guys are actually following along with this it's really awesome to see that so we got the action and here we set a payload user right so this is this tool is really good because you see it wasn't even a hard debug step but when i did it in react context api it was kind of like this is why you can see why it's used in production environments as opposed to not being used right so now if we go to the state and i check it hey there we go and the reason why it shows in the diff now is because when i hit like this is when i initialize the app for some this is why it fires up by default then when i do user this is a set user and also redux groups things in the easy to understand way for example this is inside the user slice and it's a set user action if i do this one it's inside the counter slice increment action so it's very friendly you see that and then here the diff shows that okay this action changed the user from no to says anger now what i'm gonna do is to show you even how powerful this is we've got the log out okay so now the log out actually and you know what this is actually they've changed redux to make it a lot easier now this is actually a lot easier than it used to be um it's not inside of login.js um it's tempting me to kind of use it again so now if we go to button and here what i'll say is log out okay and here i'm going to do on click like this i'm going to have an inline function because i just want to show you both uh and then here what i'm going to say is thank you so much to our sony you're teaching is really good that makes it too easier to learn thank you dude um on click here i'm going to say uh log out okay so log out and it's just pretty much it has no uh like here is the logout uh i'm not passing anything along with it state automatically gets passed um so right now that's it now let's check it out so log me in boom set user okay log out so okay interesting nothing happened it needs to be a dispatch hey i was i was hoping somebody shot i promised you i was hoping somebody shut down nice okay awesome so dispatch there you go and you'd basically go ahead and dispatch because you remember in order to do that that sort of you need to dispatch it into the data layer so we can do that now if i go ahead and log in and um log out boom and you see if we go to set user uh it shows that we set the user to sanger log out boom it went back to no now how do we use the actual information right how do we actually go ahead and use it so let's see how they use it inside a counter so here dude where'd they pull it they've got the they've got the actual increment count so account they pull from they use a selector to pull the account okay so i wonder how we can do it so we can go ahead and do a select selector okay so i'll show you guys how to do it from a selector um and then i think i'm not sure there's a there's another way to do it as well but i'm going to show you the selector wave practice but let's go to counter slice and here is the select count this one will go no i don't want this one on the user slice here i'm going to say select the user this will go ahead and give me back the user all right so this is a selector and basically it's a it's a controlled way of going up going into your store and getting what you want because remember the controlled way of doing this stuff is going to allow you to actually go ahead and uh and work in this sort of like a more a more functional maintainable way so here select user um so here state.user now what i'm going to do is i'm going to go into login.js login.js yeah i'm going to basically so again like i'm using an example of the counter app and this is what i'm saying the templates are really good guys because you can pretty much just use it as like a reference point and remember like i said i hadn't coded in redux for a very long time but coming back i literally used the reference they gave and pretty much is easy to pick up on because i know the pattern right so here i'm rather than the count i'm getting the user and this is not select count and select user and i'm just going to go ahead and import it from here so i'm going to say select user there we go and now what i can do is i can pretty much just use the user so i can pretty much at this point say i am the login so i am the login component and then i can say if there is a user then i want to render out a h2 tag which says the user is user and then here i'm going to say else render out a h2 tag which says nobody is signed in boom okay let's go back and it says use selector is not defined because we need to go ahead and import the use selector save it go back and it says oh okay it says objects not valid there's a react chart now the reason why this is happening is because the actual user is a um oh come on what's happening let's go back here oh my mouse is bugging out one sec guys okay we're good one second guys my mouse is freaking out okay oh man i think my i think my mouse just finally died okay you know what i think we're gonna have to go back to no mouse okay right there we go back to old school track pad okay so now what we have is the um objects are not valid as a react chart so what i would do at this point to debug this is i'll comment this out and here i would do console.log user to see what i'm pulling in from the user all right let's go ahead and do that so now if i go to my console i can see i've got the user but it's no okay if i log in i can see i get the user now why was it freaking out because um console.log user and then here i was saying the user is user so user i think it's because it's got user inside of user so if we do use a dot user is that is that right or am i being a bit where no log me in yes okay so i was actually this is kind of what you've got to be careful of because remember inside of the inside of the selector here see i done state.user but it's actually the user slice is the thing so here we need to say state.user.user because if we go into counter size it's state dot counter dot value and value is the the the initial state so here it's like this is the state the overall global object and then it's the slice that we're talking about so in this case it's the user and then it's the object and in this case it is then it reaches this point right so you wanna you need to be careful of that bit right um so now let's go back and we go back to our login and here we can say user and now it says no no okay login done now we can go back get rid of this this should now be fixed so if i undo this save it it says nobody is signed in log me in boom log out boom awesome let's go to redux and have a look what happened if i now this is what this is what's cool guys if i go ahead and jump back to sign in see that the user is ssng so i'm going to jump back to sign out and i can pretty much test the actions here so really and i'm already super pumped like 2 am now cool right uh sonny it means that we don't need a automation tools it will eliminate automation tools uh no there is a time and place for an automation tool which is separate to this yeah there there is a a a time base so automation tools could be used for testing they could be used for other other use cases i wouldn't rule out automation tools to be honest i would i would um cyprus for example is an amazing automation tool because because you have different types of testing you have unit testing which is basically where you test at the code level you have something called automated testing which is like or like integration testing which is basically where you run like an automation sort of uh i guess framework or software like cyprus and basically cyprus is like say if i ran a test it would basically would do an automated test of like it would log into the app it would place an order it would check that this this this happened and then it will go back and it does all of that automatically so so there is there is a place for automation um that's separate to this try not to get this confused if anything this would be uh unit testing because here you can basically say when i click the login this is the test that needs to run for example okay and here it's saying expect the this to be the state when you just did this right so like but try we're not going to talk too much about testing because it can get very very deep into that uh there's testing frameworks like puppeteer i think one uh selenium is another one but cyprus is a really good new one uh i've used cyprus before it's really really fast um okay so um yeah so uh this uh in your slice dot js your user can we use the same spread operator like how you were doing in the context api also like for the previous values um so say that again sorry like in the uh context api you are storing the previous values also previous values on dispatch of an action so whenever i dispatch some action yeah so for example yeah so you you were actually saving some information like the previous the initial values of the state and then you were adding adding the object oh you were saying okay yeah so let's spread this yeah he's talking about the spread operator so very very good question right now what's really clever about redux is the way they've built it and the way they have this sort of toolkit that they have i say let's go inside the user you see this redux.js toolkit right now the clever thing is the way that it's built right is that this is um is something called an immutable change so even though it looks like i'm changing it directly right um but the redux toolkit actually it it cleverly does it behind the scenes without us having to do things like um um so that this is basically what it's saying so let me go ahead and make this a bit bigger so it says redux toolkit allows us to write mutating logic in reducers which means that it looks like i'm just changing the state.user right but under the hood what it's doing is it's detecting the change that i want to make and then it's doing it in a way that basically preserves the original state and it basically creates a new state right and it just updates only the things that needed to be changed but you can code it like this right which is easier and it's more safer than doing the spread right so redux talk it back in before you this wasn't actually supported so before you would have had something like this you would have had something like this you would have state dot user and then you would have user is like this you'd have something like that before right but they've upgraded the react the toolkit now so that you can pretty much just go ahead and write very simple code like this you can just pretty much say change the state.user to the action.payload.user when we set the user to be fair i automatically have the access to the earlier values also so remember the earlier values that you're talking about everything is actually inside of this so if you need the earlier values you can get them with state you can just say state dot user that's the earlier value action.payload.user is the new value yeah so here if i was to do and we can test this we can say console.log let's just say check me and here i'm going to say state let's see what it gives us back inside the state here right so now if i go into set user so let's go ahead and refresh this to console let's do set you so check me look he's got a bunch of all this widget you see we don't really they they protect you and and trust me it's very good that they protect you against this stuff because it's you don't so so this there's a principle in in like functional programming called immutability and the whole point of immutability is so you you never want to actually mutate a an object and say yeah like you never you never want to say like this object should now be this new object like because what you're doing is you're kind of overwriting the object so we do we try to stay away from that and we use something cool uh guys please use your mic mute your mic if you're not talking um yeah so okay somebody uh sonny you made it yourself yeah you did right okay yeah so uh uh yeah so so pretty much what we do is we we do something called immutable changes i would recommend reading up on immutability because i'm not going to cover it too much now but put it this way it does it updates the state in a very clever way okay so what if your console stayed that user would that have worked uh i mean we could try we different try console.userconsole.com to be honest i don't think so i think it will show you some kind of proxying stuff um okay no it did it did work yeah so if you do log me in so but this remember the initial value before i clicked this was no so that's why you saw this but it's changed now but the action.payload would have been the one so so if i now do this and i say um so let's just do it like this previous previous value previous value is i think this will answer your question previous value is this new value is action dot payload dot user okay now let's try it out so log me in previous value is no new value is ss anger and actually add the previous value and the action. i mean firstly why would you want to do that secondly you shouldn't do that um because you shouldn't you as in you i mean in a case like say i'm adding products right like into the cart and i've added like one by one why okay so if you so imagine we had like uh let me just go ahead and obviously we shouldn't have it here right but what i'm going to say is this is imagine we had a basket like an array okay what you could do is you could say like let's just say add to basket right so we had some kind of add to basket which took a state took an action and it did this right then here what we're going to say is we're going to say state dot basket equals um here i would do this i'll do whatever the state right right yeah plus i got it i got it yeah thanks thank you now that's a really good question actually because i think that would have helped a lot of other people um and then you can say action dot payload that's a really good question dude and you can say action i'll pay off the item and that's how i would do it thanks for clearing it out yeah yeah that's really that's a really good question actually yeah because i think because even uh i mean that actually made a lot of sense yeah you could do that and then that would be also um sonny about the action.payload.user do you get the metadot user there on the payload because of the name you said right at the beginning of the user slice constant you see you have a name there which you set the user this one oh no this upper okay this is this is the the name of the slice so remember this this level so the actual so imagine if we go back to um store so you see this slice this is where we name the slice so remember like those that onion pill like that sort of sort of layers all right this is the name of the set so for example if we go to the counter size the name would be counter right but here but that's what triggers the payload that's what i'm saying it's the method for payload i just tested it um no so it's actually where we do the method for the payload is actually inside of login here this one you see that that's okay that's the one so if i change this to username i'll show you so now if i go to the user slice if i change this to username now i have to change the payload here to username and if i do this and i save this now now if i go ahead and do log me in see it works like that oh but the new value is undefined so let's go to redux and just check why because it says user okay let's go to action the action.payload.username action.payload.username uh username and then state.user equals actually in console log you have to change the user to username yes most likely yeah yeah yes yes yes yes perfect yeah they love the username that's it so it's funny uh so so it's easier than the api uh context api it's less uh less code than the you know what dude i i have to admit with you like i i hadn't played with it before they done all this upgrade stuff like with the toolkit um it's actually really good like i said i i would actually recommend that we all try and and do this now because you saw and and i will actually i will i will actually say that as in they've upgraded it so well that this is awesome like because in like as if you guys can learn this this is actually really powerful now bear in mind there are things like map state to props map props dispatch you're going to see because in production this is the new this is very new this way yeah now the way that you're gonna see it in in sort of typical environments may not look like this this is using like hooks and it's using this hook and it's using a special kind of hook the way you would do it is um i think i think what i might do is is is next time show you guys a sort of redux project like an oldschool way of doing the redux way um because that's what you might get into over in a project right i'm just gonna go ahead yeah that would really help yeah that's right you know like some kind of get some kind of big um like a big old school project and we kind of build on it like that so i'm going to go ahead and mute him yep so i'm gonna go ahead and um uh joe i think that's you actually is that yeah i try to mute everyone wait okay no sorry sorry joe it's not you i accidentally yeah yeah go for it yeah so basically when i want to store the values in the session like how can we communicate between context api or redux with a session so that i don't need to store every time in the cookie basically so that uh for this like there is no communication between cookie and map even the context api or the reducer or three depths so so cookies and so opposite you're talking about persistence so you basically mean when i write yeah so when i refresh the page like how do we keep track of what the count was on basically or something like that right um there's loads of ways you can do it uh there's like redux offline so there's something called redox offline there's redux persist you see like build offline first apps there's probably a really new one redux persist persist reducer you see like this but i would i'd keep looking around and maybe find the most modern one i guess um but you could do it you could do it loads of ways i mean i don't feel like i don't think it's a good idea to jump too much into this right now but um let's just try to use persist let's see if we can use it like relaxing any reference would be okay like i'm doing this for a project basically okay so what you want to do is it's called hydration okay so it's like what you're trying to do is called um basically what what we refer to it as like so i'd recommend looking at this kind of thing like as in like redux persist or redux offline right okay and what it will do is they're built in such a way that they will use either local storage or they'll use like a cookie or something like that so and then what you do is basically you see like we've got the provider here and then you have another thing which basically wraps so the root component would be your app but then here persist gate would be something that like basically goes ahead and you know it will provide like the persistence layer so provide the local storage layer um but let's click on basic usage and let's see how the systole um but long story short you're gonna need either one of these it'll be redux persist or read that's offline and the whole point is that uh what's gonna happen is when your app loads up again so imagine like if i refresh now it goes to zero so let's say i do this and i implement something like redux per sister redux offline then what happens is when i refresh the app it does something called hydration so it rehydrates which means imagine the app starts blank and then it rehydrates and it pushes the values that it had in local store back into the app which means that it basically goes back to 5. okay so there is some time game between them um what happens super quick like you won't see it um okay but you mean you could do that i think i have a question based on that like last night i developed uh the facebook app but whenever i refresh the page you know like the person who is logged in immediately so it will bring me back to the login page for me to log in again is it because of this persistent stuff yeah so the facebook the facebook app used um google login google yeah so two things to consider if you use the email and password implementation which we've done with the amazon build i think yeah if you do that then it actually firebase have built it under the hood so it will persist by default so as soon as you go back on it'll check if they're logged in it will grab the user and they'll basically throw you back in to where you're at but with the google one uh i would i would recommend that you research on uh because i i mean i didn't implement it for that one but i think it'll be google firebase uh user god's sake oh sorry that was someone again google user um authentication so firebase google user authentication persistence is what you're looking for and basically what you can do see authenticating state persistence right so again that's a skill guys to literally learning how to google the right things just practicing that skill is going to help you like dial in that sort of you know that ability to sort of find what you're searching for um so here you can basically look you can store it in local you can store it in session or you can sort in none now here this is awesome because what you can do is you can actually go ahead new sign will be persisted with session so remember set persistence okay so what you might need to do is before you actually go ahead and do that um you need to basically go ahead and call the firebase.org set persistence method so this one here and then basically that will go ahead and persist the login session um on your computer so here we should have here's well here's what you wanted to do yeah so this is exactly what you need to do so basically you most likely in your code have at some point here new firebase auth you basically there is a snippet of code i remember i remember exactly in where it says sign up with popup sign up with redirect provider right that bit all you need to do is before you um call that make sure you do the auth dot set persistence and then you do this but change dot none change it from dot none to um dot session so this one yeah so what i'm going to do is i'm going to drop this for you guys in the zoom chat and you guys can actually go ahead and read that but go ahead and play that out because uh give that a try and uh you can see that suraj said sunny how did you gain such enormous knowledge through a lot of practice or enormous reading um honestly it's a mix it's a mix of throwing yourself in deep end it's a mix of just uh when you're in in production environment you get a lot of practice also guys if you're watching this on youtube please smash the thumbs up if you're enjoying it uh we really appreciate that um but yeah what i would say is if you if you like in production environments just by being around other developers who have all sorts of like experience and kind of like have that knowledge just literally act like a sponge right so which means that like literally if you're never go into coding with the mindset of i know this even today i went in with the mindset of i don't remember how to code redux so i'm going to keep an open mind i'm going to keep myself like quite flexible to it but we're going to go ahead and um we're gonna go ahead and start with a fresh mindset so muhammad says how can we inject redux module to our projects if you go to the redux so literally just type in redux um and go to getting started with redux you said you wanted to post you know the link to the persistent stuff google firebase on oh i did i did do it i'll put it here again one sec um so just point up there we yeah go i had a question yeah like suppose in an application where you know uh we route from one page to other page so suppose i am reporting one page and i have used grid data like some about 1500 records yep and then if i click on a particular like row and then it will redirect me to that particular build round report yeah and then i have a back button which will take me back to all that records yeah so will redux be beneficial over there like i don't want to pull all that records again from the database like it's just a back routing from one page to other so okay so in that case okay you need to be careful of two things now um i would say um so one thing would be right so one thing you you you'll have a problem with possible stale data so you need to think about that from architecture's perspective you like you might have put stale there so imagine you poured in a bunch of um uh ab abduces did sunny possibly on slack over here so this is the link guys i'm gonna post it in oh everyone in the waiting room sorry sorry sorry sorry uh i don't know everyone in meeting okay oh man i hate this there we go it's sunny there's no one waiting because there's no no no no no no no no no no no no no no i meant in the chat yeah and that in the zoom did some weird update i just dropped the uh the link like five times in the chat so sorry guys you can go ahead and check it out sorry about that that's why i didn't make i thought i'd sent it before um just to add to what tushar said is to show referring to like a kpi scenario on a dashboard where you can click and you can go to the show are you referring to that something yeah no it's like a master suppose i'm having distributors like all distributors for one country and then i'm clicking on distributor and it will take me to new page and it will show all clients of that distributor okay there is a back button so if i click on back it will take me back to all distributors so yeah i don't want to yeah i don't want to reload that data again from database so it's like yeah so what i would recommend is have some kind of you could use something called redux offline um redux offline the benefit of that would be once you pull in some information for example into the app it would basically like kind of like cache it okay so it will kind of store it into it into your local sort of uh local storage but you you would have to remember whenever you do that you have to think about the architecture you have to think about that right is it going to be stale data like are the the sort of um you just said there's manufacturers or something right like is it important that that that's always up to date right if it is then you need to check right is the cash version less than five like five um five minutes old or is it like less than five fifteen minutes old if and then it would be only just for that phase you know like if if he's on that report like the url of if he is going to that report and if that's an internal drill down like from that distributor yeah but if he's going back to other menu rolls and if he comes back he needs to reload it again yeah so you can do that don't you don't get me wrong you can do it but remember what you what what seems like a very natural experience to us as a human is is on the computer side you have to think of it in terms of an architecture it's like building a house you have to kind of build things with the support underneath it so that it supports that functionality from the getgo or you have to implement something like redux offline so it allows you to to enhance the app so it has that functionality otherwise you will run into a problem where you have some kind of logical gap where you're like uh how that why is it refreshing here and not refreshing here and what can happen and i'm just kind of giving you my advice on this based on experience is you can kind of build very nasty sort of solutions right various on tricky nasty solutions which which work but then are a nightmare to to touch like and you don't want to get into that position so um make sure you're in a position where you you think about those things from the getgo but honestly dude what i would say is um is is just making sure that you have uh um make sure you just have have an open mind and just practice it honestly just practice it and uh if you don't get it right the first time don't worry about it just keep doing it until you get it right every time honestly that i've done so many solutions where if i look back i'm like that was the crappiest solution ever but truth be told like it worked and i learned from it and now i can pretty much go ahead and improve my sort of the next time i do it that's it you know so don't beat yourself up about it but um i just saw some comments now cheyenne says the redux data layer where is it stored is it browser storage you know it's actually sort of uh it's local so remember it's nonpersistence um which means that if you're refresh you're still going to lose so you can you would have to implement something like redux offline or redux persist or something like that to go ahead and push it into browser storage um huda rahman says as my first time in redux i stayed till now trying to understand your nice explanation thank you so much thank you so much for for watching uh troy says sunny is very organic teacher nice experience and skill and open attitude to training others that's going good thank you very much dude uh awani says huge respect for sunny thank you so much thank you soon uh one at a time guys okay uh sony uh i just started a question so uh you mentioned about uh two sort of states state user and payload.user right so these are like uh the initial and the last state if in case you wanted to uh get states that are in between like version states that you can sort of use it as a fetch dot command sometimes you can it doesn't substitute postmen and things that you can use within the browser to analyze data you remove stale data things like that um do you mind repeating again because i kind of lost a bit halfway so just repeat that one more time yeah so what i was saying is uh does uh redux uh solve the issue with sometimes uh analyzing data taking up uh data's that are stale uh analyzing them just the same purpose as postman what it does is fetching the data analyzing it maybe you can remove it from the state uh so remember this remember try and think of everything individually so firstly postman doesn't do that postman is literally a client that can just make a request you can make a post request to get request it doesn't analyze it just literally can make the request to get the data right um thank you so much patrice um so it only makes the request right now redux is allows you to pretty much go ahead and it allows you to go ahead just just literally store the data in some way right like you literally all you can do is like it just it's a it's a state management sort of a tool right think of it that way so when it comes to analyzing stale data you can have something like a middleware so redux supports something called middleware um you could do that and basically you could check if the data that you're fetching for example the selector this could be like where you enhance the selector you can pretty much go ahead and enhance the selector so that you can say if i grab the user and the user's timestamp is like more than five minutes ago go ahead and fetch the user i mean this little example you know um that's kind of a sort of quick example of that uh cheyenne says sonny can you give a little bit more info about redux saga so redux saga is something that we use when um react target is actually something we use whenever that's all right dude welcome so redux software is something that we use when uh we want to do anything asynchronous so i mentioned asynchronous stuff before is pretty much a case of when you make a request right and it's got like a delay because you're pretty much going across the network and then you're coming back right so it's kind of a little bit of a delay redux saga is a very popular library in redux to do that um there's also a redux thunk so two options i would recommend sort of this consider this kind of homework to go away have a look at redux stunk and redux saga they're two things which are going to allow you to handle asynchronous actions and side effects so side effects are basically put this way imagine i sent i went ahead and um my target says he uses thunk imagine you went ahead and you pretty much um sent a request to go ahead and fetch some records from google right let's just say you did that for some reason and then let's go ahead and imagine that you um it it came back fine right but they say a side effect of that was that the data failed to load or the network dropped or something like that how does your app account for that right so redux stunk redux saga they all allow you to handle side effects of asynchronous actions so because remember when you're doing an asynchronous action you can sometimes have it can go successful it can fail loads of things can happen because of that network call right asynchronous can also mean if there's a time delay so let's say you want to do uh it takes like five minutes for something to calculate after you click a button that's asynchronous because it's not immediately sync you don't immediately see a synchronized result which is why we call it an asynchronous action anything with the delay think of it as asynchronous so redux think funk and react saga are things to look into for that um just going to take a few questions and then we're going to wrap up today's session um uh sunny yep so could you use like firebase or mongodb with redux like i mean for the counter right here so like whenever even if you do reload the um the amount would be saved like you could retrieve the most recent amount that was yeah so good question uh remember so if you're using something like firestore i wouldn't even say i would maybe just say directly mapped to the database because firestore makes it so easy to go ahead and do that and they account for offline which means that um if you was to go offline change some stuff and then you got an internet connection again it goes ahead and syncs everything so i wouldn't even bother enhancing it but to answer your question i'm going to quickly share my screen and show you that there are libraries um like this you can do redux firebase uh and here you can see react redux firebase react bindings for firebase so there's loads of libraries uh this one has a decent number of stars um so here you can pretty much see how you can use it you can see like how they've implemented it and basically what this will do is you see like the where we had the reducer stuff right you pretty much have a firebase reducer and then what that does is um you have this hook here inside of your functional component so imagine this is our component say cons firebase equals uh use firebase and then here you can pretty much push things into like the firebase collection so to do and and you can do things like that now am i a fan of this sometimes i've used it but i found it can also make things kind of over complicated um so i've kind of like could just ask we just we could just add the firebase object to the redux state and it will still work yes and you could do it that way um but there's no reason to do that i mean no no i i wouldn't say there's no reason um because that it could integrate nicely it i mean just be the setup is difficult yes and i'm against it because i i see the simplicity of just doing it directly but they do give you things like is loaded is empty uh which help you out because for example is loaded is going to help you uh have like a piece of state not a piece of state but it's going to allow you to basically go ahead and um have like some kind of loading right so like imagine like if it takes a second for that asynchronous action you can have a little spinner loading or something like that right you could do that um which is kind of cool um but there's uh there's many different things you can use like even here react reader oh this is pretty cool so this is actually um an official looking react redux firebase um look you see this this is pretty cool so i recommend maybe go have a check of this firestore um i'll drop this in the chat now guys uh check this out that's so sony uh there you go i just dropped it in the chat yep yeah what was that dude yeah uh sony so isn't this just like uh uh is like a mini uh query for uh for uh for those for the state that is currently running is it isn't this like uh what was that like a query language like you can uh literally go through the data and uh no so so guys try not to like honestly like what we tend to do naturally as developers thank you so much pedro um may and i think we can definitely advance more in redux next time maybe like some kind of example of like an old school redux app and that kind of thing would be cool um yeah so try to not overlap principle so in coding to be a good developer you get get really good at kind of keeping things simple right because like what we tend to do is we naturally really over complicate and and and all that naturally be like i've heard of this principle is this part of this and is this part of this and is this like is this where we like do you like data mining and things like that you know everyone kind of like overlaps principles and stuff like keep it so simple and just remember all redux is doing is managing state within an app that's it that's literally all it does right it can then you kind of plug in things on top like redux offline redux persist redux saga all that sort of stuff it all just plugs in on top right building and functionalities on top of it yeah yeah thanks no worries dude i had a question yeah sunny yeah i had a question okay uh in context api who has we have created separate uh state provider file and reducer files for login basket something like that is that creating separate data layers or we are using in them in the same data layer uh say that again sorry instead in context shape way we have created files state provider for different purposes for login for baskets and things like that is that creating different data layers are using in the same data layer um so in this case what i was doing was i created two slices of state one i created for uh don't ignore the basket option and that was that's just me demoing something in this case we had let's go to our store here we had a counter slice and a user slice right now imagine if i had a basket inside of my app i would probably create a basket slice and then i'd have a basket reducer to listen and manipulate the the app based on that stuff now um what i would say is it's re like for example i would have a basket and a basket producer and then i would only use firebase or when at the point in which i actually processed the order right so like when i actually push the order into the the user sort of like um and i actually sort of handled the payment and stuff then i would go ahead and use firebase and say like hey like or if you really want to get your app super like sort of souped up i guess you're gonna have like um their their basket in firebase so it's always kind of there so i guess if they come back to the website they've still got their basket you can do that um but the main thing is right is try and keep your yours your store sliced up into slices which which are which makes sense right like have a a basket slice for the purple and that's the only purpose of that basket size to be to basically manipulate the basket which means that you actually reduce the complexity a massive amount by doing that right um also i see those questions yeah same data sorry slice in the same data yeah so remember you you have like uh you have this global store and it's sliced up into different slices you have like the user the counter the basket right that sort of stuff uh that's that's all you need to sort of think of it from uh also guys please meet your mics if you're not talking yep thanks honey yeah always dude uh i'm gonna take one more question and then we're gonna before you say that we should get familiar with the unfamiliar i'm just getting familiar with the state and props who you propose that we get familiar with the unfamiliar yeah so uh good question and i think a lot of people would benefit from this answer so my answer to this would be uh remember everyone is always going to be at different points right they're always going to be like someone else can be more ahead of others and things like that now what i would say is if you are like new to react if you're new to sort of like and you're not completely familiar with it focus on the fundamentals focus on that com building your first component focus on getting that thing to load on the screen but then move on to state and props state and props are going to be the most important fundamentals if you don't know state and props everything else is not going to make sense okay um uh everything is oh is oh you are you pinned to the screen dude oh all right sorry oh my god has it been pinned the entire time yeah yeah oh my god on the chat am i teaching yeah yeah sorry guys don was like oh damn did sonny pin me now yeah sorry about that guys i honestly on my screen i don't see that if that ever happens yeah so sonny if you if you had to rebuild amazon clone can we do it with the redux the way you demonstrate it for sure yeah in fact when i create um the module i'm obviously i'm i'm working like so i'm i'm working on the react basics modules now for you guys so that will be dropping inside the course that i'll help all of you guys out from learning the fundamentals and stuff like that really trying hard to work on that and film it and do everything to get that out to you guys um and then i'm going to basically be enhancing things like um the the the builds that we have so imagine we had the who we have the hulu build we we have [Laughter] guys and then i'm going to be bringing like things like the hulu clone but like upgraded version with redox with other functionalities and stuff so that way you guys can take it to that next level practice it with stuff like that also thank you shrikha for the kind words um yeah no problem so suddenly when we approach uh like any project that involves redux so you think like when someone like you know people are involved in developing like the developers they do like a the whole wireframe to the in the individual components level how they will interact and then they kind of divvy it out is that is that the way like a you know major project would go about in implementationwise so it depends like put it this way when i was in a like a startup company um we would you basically have the way it works in a professional environment is you usually have someone called a product owner right or like a product manager or a product owner yeah stakeholder right basically yeah so so try and think of it as stakeholder but product owner is just literally like a manager right like it's literally like you have scrum teams typically if you're doing like an agile sort of working environment right so you have like a team of like i don't know maybe four of you developers you have like a product owner who sits on top of it that kind of manages and then you have like a designer maybe in that group now the way it works is the product owner pretty much goes ahead and goes to like the stakeholders and stuff like that and says like hey guys what what features do we want on the app and then the stakeholders are gonna be like all right everyone's asking for um the chat functionality to be finally be built out and everyone's asking for google login right so between the four developers then you basically in a twoweek sprint you would basically the product owner would say all right out let's here's the user stories like here the users want to be able to log in with google users want to be able to have chat functionality then you would basically go ahead and your designer would provide design maybe they'll provide like some designs for that um and then basically there's no set way right so put it this way whenever i had to do like a login thing if i got stuck and i was kind of like okay i have a way that i think might work but i'm going to need some help on understanding the way things are currently built because remember you're going into an environment which has already been built in most cases right so what i would what i would say on that front is in most cases i found myself kind of sitting with a bunch of other developers on a whiteboard and kind of just saying like hey guys do you mind just running me through like the current architecture and then pretty much i will i have a solution that i'm going to propose to you guys and we kind of like literally just draw it out and he's like okay so currently we have three slices of state which all basically are responsible for this and okay maybe we could use this part in this part as our data for this functionality and um and then and you see like you kind of just literally you just literally just kind of brainstorm it so you're saying basically try and reuse whatever is there first rather than reinventing the wheel it's not yeah honestly it'll be it'll be a case of like it's not even reusing it's you're gonna your solution in most cases won't be like this where you have a fresh canvas right it's going to be like you're going to have to integrate a solution into an existing software right sort of like a retrofit or something yeah it's like you're a retrofit and in most cases like a good developer when when i really sort of like shine started to shine in my sort of like like career early on is when i kind of went from junior upward really quick is when i sort of like i took i i wasn't just kind of saying like okay this is what we need um to change so this is basically what i'm gonna i'm only gonna do my job and i'm gonna leave right i would basically start implementing things like okay i'm gonna i'm gonna implement this feature and also i touched four files each of those files were classbased components i just changed all of them to functional components and also we were doing some bad practices here here and here and i know about these practices because i follow this newsletter and this is like the most uptodate standards so i think we should be using this uh whilst i was at i may be like i changed a few bits and bobs here and then they're like holy like what the like and then when you ask for a perry rise at that point they don't really care they're just like okay i mean we're not going to lose you like so do you see what i mean like over deliver right over deliver and then when it comes to like asking about salary and that's not then there's kind of like we don't want to lose this guy because this oh this girl because it's just literally a case of like you're just going above and beyond and you're just over delivering yeah and don't ever feel like there's no silly questions there's no such thing as being like don't be reserved like literally like dive in offer to implement things which you have no idea how to build because you put yourself in a position where you don't know how to build it because i promise you if there's money behind it and you're getting paid you're going to find out how to build it you're going to pull on the resources that stress is a good stress it's a scary place but it's the reason why i'm the developer i am today because i literally just threw myself head first into the deep end to the point where i had no idea how to build half the stuff and then you just you literally like i was literally going to other offices in the building where i knew the other startup companies were and i was like hey have you worked on um react native and then and then let me go ahead and yeah i was literally walking into other offices in the building and i would literally ask them like hey is anyone in here coding in react native and i would literally find someone and then would pretty much go ahead and and you know uh break it down and they'll be like yeah actually that's the reason why you're having that problem and you it forces you to really go outside your comfort zone to solve a problem um so that's my advice on that front yeah cool keep our open mindset as well guys yeah and when joe is talking about uh the distribution of a work when when you are working in a uh in a team for example if you are starting a fresh new project then how you approach how you divide your work into the team and uh i'm talking about the coding perspective so that nobody should be able to step on others work so okay so you use so the main things is is just the main way to sort of overcome that is learn github learn how to make like pull requests and learn how to sort of get involved in that side of things uh nars is actually pretty good i mean he organized some kind of like uh coding competition where everyone was pushing code and teams uh that was a cool thing we can do more of that if that helps out but what i would say is github is going to be essential in understanding your understanding how teams work together um and also it's going to be thank you so much arsene um it's going to be very very important in terms of you because trust me once you know how to use github you very quickly answer the questions like how do many people work on code together it pretty much goes ahead and and it answers a lot of of those questions right now um you very rarely are you going to be in a position i have been in the position two or three times where we're starting a new product right or i've been in part of a team and they want to start a new app or something in which case like you do have a lot of opinionated battles because developers are heavily opinionated it's like no i want to use this and i want to use that and i had a huge debate with the senior developer when i was junior about why we should use typescript instead of something called flow and i and and you would think that the the senior developer win but i pretty much like yeah we ended up using typescript because i was like no but like this is the reason why we should use it and went back and forth for ages and it was a heavy it actually got really heavy debate between the two of us and then we literally ended up having loads of back and forth but the point is that it doesn't matter like you literally you just overcome those problems and never feel like just because you're a junior you can't say something to a senior developer because in the end of the day like it's it's trust me when i say i've worked with junior developers who have blown my mind in terms of how smart and quick learners they are and things like that so uh never sort of take your like lack of experience as a sort of hit or i can't do that because i haven't really coded in that before just always assume like but always keep an open mind so it's a balance between the two and the other question is because uh when i used to work in a in a financial client when i worked with the financial client they don't allow to use a github so what is your recommendation to use they didn't they don't allow no they don't want even to go to the firebase or any uh external websites to grab anything they have their own uh databases they have their own uh local environment so what tool yeah so could it be useful they probably i mean so they had no form of source control yes not like a github github is we used uh you know we can use it in other companies but when you're working for a financial client they don't allow to use any external resources because of the security dude i'd say that company [Laughter] there is a github enterprise edition right i mean you can i know financial clients that like the insurance companies they still use github but it's it's more within their dmz kind of you know it's an enterprise version where only they can only people within the organization can interact not uh like any romney can hide it from outside yeah there is a lab lab is for internal use where it's not external yeah and to be honest like i know i made a joke but the truth is that there's always a way of doing it securely even github get up remember guys github is literally where probably really yes yeah just making it clear guys yeah make it private is it literally a billion dollar companies hosts their code like like no joke billion dollar companies host their code on github get labs like if if if security was a concern um then then they would have been bankrupt by now yeah then everyone like everyone all of these billion dollar companies would be hacked by now i mean they probably most of them are but the truth is like is in the it's the stat the best you're going to get is on is on that kind of thing but if they do have i was not allowed to use even a gmail or any external any application outside the scope of the company i mean i hope you're still not with the client uh yes i mean you do get you do get cases where people are extreme you do you do definitely get cases where people are very extreme with security i mean in the end of the day if you're getting paid and and it's and that's what they want uh i mean i would go with it i mean but depend if if you're working somewhere for a long period of time and they're not using any source control i don't think it's a good place that you're gonna i mean the chances are they're probably not following other standards or other practices were they literally like copying and pasting code or like did they have like a usb that i was i would imagine too how the hell do you maintain source yeah because the reason why github is really good and so think of it this way because github is essentially a source controller which means that say for example every single person on here had a feature that they wanted to work on right on an app that we're all going to build together yeah now what can happen is we can all make like a branch and we can all work on a separate branch and then we could all come together and then we will merge it yeah and then we can like merge it together and things like that now the bit where github really shines is when you have like say for example me and priyanchu both coded the header right and we were like oh like i didn't realize preachy i did that icon i added this one you can do that i'm coding with you yeah and then exactly you have something called a like a clash right or like a collision or something like that and yeah and a conflict is called and then github and other sort of clients allow you to do something called conflict resolution where it shows me it shows both co once i did it shows both pieces of code and you can pretty much very very nicely choose which lines to keep which eyes to remove and then you resolve the conflict emerge right so that's good yeah so that's how you do it so okay uh what were you going to ask brian no i just i was just going to tell one thing that there's an amazing video by uh nars on the live stream so yeah yeah on that resolving conflicts in php storm you have a way to resolve conflicts from the editor do you have the same in visual studio code like can you see the branches yeah it's a beautiful way of doing it yeah you can really do it nicely and uh and in fact what we'll do one day is i'll purposely kind of set up a scenario where we can sort of have a collision and we can do it together and we can kind of overcome it use i think a whole session on github might be pretty cool um yeah yeah he has yeah already has one he put okay he's done a video it's in the live calls from nas about get what is it oh dog yeah if you guys if you guys don't mind dropping the slides yeah if you guys don't mind drop that in the slack channel and let everyone know that will help everyone out yeah awesome doing that right now nice sony i had one question regarding uh react native okay this will be the last question guys yeah yeah yeah yeah so suppose now uh you know like uh we have an app which is on uh older version of react native and we had used some libraries and now uh as due to ios 14 our it's been released so when we code it so many of the libraries has been depreciated so what we should do like look out for some new resource or just stick to the old version or something like that um one second um just give me two sorry dude give me just give me one second yeah um and then i will get back to you i just need a link quickly um okay uh do you mind just sorry just repeat that one more time so react native yeah yeah we have used some uh libraries for some uh gesture controls okay so now for ios 14 now uh when we compile it uh it gives us like these libraries has been depreciated like they are not been taken forward like they have not been updated yeah so most probably it gives some errors or some you know users while uh publishing it yeah so what we should do we should look for a replacement or stick to the old version so this is something which kind of does become a bit of a tricky situation so when you whenever you have any kind of um whenever you're handling upgrades right upgrades can cause brakes they can cause things like they can break things they can kind of mess things up um you need to be careful what you need to look for is a minor upgrade versus a major upgrade now a major upgrade is like for example say we had version 2.3.5 of react right now if it went from 2.3.5 to 2.3.6 it doesn't really matter right that's that's not considered a breaking change right that's considered a minor change i think even if it went from 2.3 to 2.4 you can actually get away with a lot right but the minute you go to a major change right so you have things like you have a you have um a major a minor and then you have like a smaller one i can't remember what it's called but you have like a different apache that's it yeah nice thank you anand yeah so you have major minor patch right if it's a patch really won't affect much if it's a minor chances i won't affect much if it's a major it has breaking changes right so a major if you go from version three to version four then you you have to like i would recommend you read the documentation you would thoroughly test your app you that's this is where automation testing comes in because automation testing if you stay up properly so usually you have a qa team right here's a here's a top tip guys if you can actually go ahead and get really good at automation you can save a company so much money on qa right because you can build automations which basically are much quicker than qa they run every single time code is pushed now imagine if you can think of it this way if you can go ahead and save a company um let's just say a qa of two more like two employees right and let's say they were paying them employees like 30k or 25k or something each right now if you ask for a bonus or like a boost in your your salary of 15k because now you're handling all the automations or 20k they're they're going to be like whoa we we actually saved money on two employees and he's actually doing a better job at some point like uh and and he's covering all the stuff and like i'm not saying it's that easy but the point is that you can do that like there's power to do that if you get good at that but the main thing to look at is yeah the major changes so you always want to read the documentation the major changes also whenever you do dependency upgrades be careful because things can break and i've been in situations where it's you have to figure out what brook and it is a nightmare i'm not gonna lie to you is it can become really like a headache and i've had i've been in situations where i've spent like an entire week trying to debug something because something got upgraded and then it can get very messy yeah thank you awani uh last question awani because you message i think is somebody messaging a chat so that'll be the last one and then we're we're going to wrap up there guys um firebase i mean you said like firebase this actually make things easy for us and we can use it for like hosting our application so uh what if like uh the client we are working for doesn't use firebase or you like he or she the client has uh some his own hosting uh thing so but what's the solution for that like i wish so um very good question and the truth is um wow thank you firstly thank you so much andre he says this lesson alone was worth more than three years of computer science college thank you so much dude i loved it thank you thank you so much dude i really appreciate that um yeah so i wanted to answer your question um also whose mic is that um i just want onion joe comes in you're coming in yeah yeah there we go joanie so basically um yeah the way you want what you want to do is most in most cases you're going to a company they probably won't have firebase that's that's the reality of it they're going to have either azure or like um some kind of aws or like some kind of like cloud infrastructure or something like some implementation because it saves their money in a big scale so that's you have to be prepared to be um flexible around that stuff right now what i would say is it depends on what position you're going in for so you can uh you could literally be a um you could be a frontend developer so you could pretty much be up front and you don't have to worry about the backend as much the backend team will pretty much go ahead and deliver their sort of the response and that sort of stuff to you and you pretty much just render it on the front full stack developer is a skill i would recommend you do pick up if possible because it is going to help you in the long run um especially if you want to kind of branch off and do your own thing at some point or you want to freelance or do something it kind of gives you the whole full focused uh sort of skill set to go ahead and focus on that now um you uh i think i've went off track but what was the actual question it was like how do we how do we overcome that was it yeah if you are not using fire fire waste then uh what's the solution i mean i my case is i need to make one website it's a social media website for one ngo yeah and it's like um so like they don't they won't be using firebase at all yeah so so all this stuff kind of comes under devops which means that like if they've implemented it with like azure or they've done aws then you you're gonna have to figure out how you do that and there's gonna be people on the team that can help you or if you you do have to do it then you're gonna have to like kind of learn the new stuff to do it but i reckon the reason why we teach firebase is because if you're doing your if for personal projects i always go with firebase i literally it's the easiest thing if i have a freelancing project firebase boom done like um but if the reality is in the commercial environment you probably won't be getting that you definitely want yeah that freelancing project i mean so i can suggest them to use firebase is it like will it i mean thing is like it's it's in india and like they can't afford that much money i mean uh i'm like i'm doing volunteering there and it's like the minimum amount they can they can be doing like they will be able to do it did you say don't use firebase was that i think she said that it's it's for a nongovernment organization and i think they're they have budget restrictions yes so they they can't afford so i'm guessing it would be a good idea to use firebase because that's it's free yeah to a certain point yeah yeah i would i would actually say use firebase yeah completely but if the company has their own databases then she has to go through a connectivity with the database and push the data there yes even if they have authentication even if they have their own database i guess they have the documentation to how to use it like they want to have it you're gonna have either so i would so you're either gonna have a developer who's gonna be able to help you out um if you don't and they just have a database then if it's a sql database you're gonna have to pick up some sql and pretty much learn how to like kind of do that it will be like uh i mean it's like a completely new thing just like instagram and all so the for the idea is like they want like all the ng ngo to talk with each other like they want one uh social media website for all the ngo uh working around all over the india uh and they're basically they're not getting any fun from government so it's like new thing for them for them and they they want like through that website they want to earn some money so they don't have any database nothing yet i would say go with firebase yeah the reason being is because and if they kind of question you on it i would say look if if the idea hasn't been tested and this kind of comes from a business perspective as well because uh the lesson is like good software com i worked in a lot of startups and the ones that succeed are the ones that do iterate like iterative builds which means that like they do small incremental builds which means that like if they have a new product like you're saying they want to get all the ngos talking to each other right build the simplest product to test the idea right and i would actually even pitch that across to them and say look firebase is going to allow us to power the entire thing have realtime functionality we barely have to do much to get the entire chat functionality working if they want to send pictures across to each other firebase storage will support it we can host the app we can do rollbacks we can deploy it everything is supported by firebase out of the box now even language support is is supported out of the box with the ex firebase extensions it will literally translate it to a bunch of different um languages in a like literally you just click a button and it does it all um so i would recommend pitching that across um it was good for proof of concept right yeah literally just show them proof and my best advice here would be like yeah like just like joe said if they kind of say to you like hey but why should we do that i would literally go and build it and be like i'll build a very simple clone of it and be like look this is it like it didn't take me long to do it and then uh like on instagram you you have uploaded in like youtube on youtube yeah there is one on instagram yeah yeah so we actually climbed instagram already uh so you can pretty much check that and also facebook we did um it's crazy now that's always the first that i did yeah yeah i put it with you but i did not finish it i want to see you finish that dude that's it i will uh you're saying like you are saying like uh fi we can use firebase right like but firebase doesn't have like uh will it have like limitations on it memory limitations like so let's say ngo yeah so i mean remember that everything will have a limitation on right like is in nothing is free like i said firebase is actually considerably free for a lot of it so you get a huge amount of stuff for free um but remember guys like all this stuff like like rather like honestly i'm not this is not like a dig to questions or anything but like whenever it comes to a pricing question or something like that just type in firebase pricing or like literally aws pricing and do a comparison of the two now firebase is literally free for so much like it's in like i've never hit a pricing plan on firebase uh until it's completely needed but um i would say that that you can just pretty much yeah my my opinion would be proof of concept is more important than a few different a bit of differences in pounds here and there right yeah with that for ngo yeah firebases uh you have to hardly pay anything for ngos i believe yeah just inquire about that exactly so i would suggest avani to keep in front like in the uh to client that there will be a price for specific data yeah but remember like any database is going to cost nothing is free right like it's more about can you prove that it's valuable remember and it was what we talked about on coaching calls and everything before least expensive i mean making it when we compare like but guys remember like what what i'm trying to say here is that like that you need to remember in terms of like we're considering things like yes it could be like when you hit a million messages it's probably going to be a couple of pounds like which is still pennies like is it i i know it's like it may sound like a lot but like it's nothing compared to like yeah and yes aws you could probably get a bigger scale but the implementation is going to be harder the developer cost will actually be huge compared to the if you just quickly build the thing on firebase like so that's why if i have even if you are even reaching a million messages you might already have the budget to do that i guess like yeah if yeah of course then if they're reaching there then of course yeah exactly so you would have proof you would approve the concept yeah guys i'm gonna wrap up one question i'm gonna i'm gonna wrap up here but but uh okay okay yeah just purely because uh otherwise it's gonna keep on going so it's apprehensive yeah just send me a message and uh i can answer that when i get a chance but i hope you guys found it useful today it was amazing sunday it was so almost going down i learned so much awesome like i hope you guys enjoyed that and uh yeah i think i over ended it i didn't think about the reduction what was that your guys are doing very very hard work to provide the content in the form of youtube and coaching calls i think this course is more than a money when compared to hard work money is this course is priceless thank you so much yes there is no doubt about it yeah there is no doubt about it i want to sing for you oh now he's gonna be singing thank you so much guys uh no i really really appreciate that and uh even my friend just came in the youtube chat jay he does he just had his birthday lol and uh thank you so much guys for for turning up and showing up as always and uh for everyone on youtube if you enjoyed it smash the thumbs up button um and yeah as always guys i'll see you next week and um keep on crushing and make sure you all give the rea a redux template a try right so create react app dash dash template redux and yeah and an awesome session and i will see you all next week
