With timestamps:

00:00 - hey what's up guys this is Ann from
00:02 - clever programmer and today I just want
00:04 - to talk about a cute little function of
00:06 - Python called zip so this isn't the kind
00:09 - of zip that you would see when you are
00:10 - zipping or unzipping a file in Python
00:13 - but it's actually a function that you
00:17 - have in the language that allows you to
00:21 - glue things together to make things
00:24 - easier to deal with that might have made
00:26 - no sense but I'm about to explain it in
00:27 - code right now so let's get right into
00:29 - it
00:30 - [Music]
00:35 - alright so go to rep politey
00:38 - ripple it as usual I'll create a new rep
00:40 - will here go down to Python wherever it
00:43 - happens to be in the list create ripple
00:46 - and alright we are ready to go
00:49 - so zip I might give a little bit of an
00:53 - explanation before I start actually so
00:54 - zip what it does is it will take any
00:58 - iterables in python so an iterable is
01:01 - just something you can iterate over in a
01:02 - for loop
01:03 - that'd be a list tuple I believe it can
01:05 - iterate over a dictionary you just can't
01:07 - go in any specific order it's just gonna
01:09 - iterate in any random order and other
01:12 - things like that like iterables or
01:13 - things you can go or but if you have
01:14 - been iterable then you can actually map
01:16 - um I might be wrong there an iterable I
01:19 - think it has to be I know for sure for
01:21 - lists and tuples if it's an in order
01:23 - then what it does is it takes
01:24 - corresponding elements and it will glue
01:26 - them together so the first element from
01:28 - two lists it'll put those together into
01:30 - a two element tuple and put that into
01:32 - the first element of one list and then
01:34 - so on it'll take the second element of
01:36 - both lists and then stick them in a two
01:39 - element tuple and put that in the second
01:41 - element of the list and it'll just keep
01:43 - doing that until everything has been
01:44 - paired up or even if you have three
01:46 - lists then they will keep doing that -
01:47 - everything's tripled up it might be
01:49 - easier to understand if it's in code but
01:51 - that's the best I could do verbally
01:52 - let's just get right into it so if we
01:54 - have a list one here which is just going
01:58 - to have very simple numbers like this
02:00 - list I forgot two equal sign
02:03 - um it's better looking nice and clean
02:08 - and then let's just do something like
02:12 - this but one-two-three-and-four-and-five
02:24 - cool so now we have our two lists now as
02:28 - you can see both of these lists are the
02:30 - same length which is important not
02:32 - required but very it makes things easier
02:37 - or cleaner I should say it makes things
02:40 - cleaner when you're using zip it's not
02:42 - required but it makes things definitely
02:43 - cleaner so we'll start with this example
02:46 - if we have list one and list two then
02:48 - I'm just going to call this final list
02:50 - we are going to make a new list here
02:51 - called zipped and all it's going to do
02:55 - is it's going to call the function zip
02:58 - which is literally just zip just like
03:00 - that zi p and then all you need to do is
03:03 - just put in the two lists in here just
03:06 - like that so this will actually work in
03:09 - Python - this is something I came across
03:12 - um I didn't realize that it didn't work
03:16 - in Python 3 this will work in Python 2
03:18 - but in Python 3 you actually need to
03:20 - cast this to a list so before I run this
03:21 - just be aware that there's a little
03:24 - change here whenever you're calling zip
03:26 - sometimes if you want to print it out
03:27 - you need to cast it to a list first
03:29 - before you print it out so zipped now is
03:32 - a list but we zipped together list one
03:33 - and list two so remember this is list 1
03:35 - here the numbers 1 through 5 integers 1
03:38 - through 5 and list 2 is these five
03:40 - strings 1 through 5 when I run it when
03:43 - you see it you understand exactly what
03:45 - it's doing stupid me I didn't put in the
03:47 - print statement print zipped now let's
03:50 - run it so as you can see here what
03:53 - happened is it took the corresponding
03:55 - elements of each list and it stuck them
03:57 - in pairs and then put each of these
03:59 - pairs in its own list so this list
04:01 - itself is of length 5 just like the
04:03 - original two lists but each element is
04:05 - actually corresponding elements from the
04:07 - other two lists pretty cool right umm
04:10 - one thing I want to point out is that if
04:14 - the lists are not the same length
04:17 - so let's add a six to this list and then
04:20 - try it again then this six seems to be
04:23 - ignored so what what's going on there
04:25 - actually what's going on there is Python
04:29 - will always truncate truncate is just a
04:31 - fancy word we use in the programming
04:32 - community to say cut off just ignore you
04:36 - truncate it off like you're cutting a
04:37 - tree trunk chop it off like a finger if
04:41 - it's there then it'll just truncate
04:42 - anything that that is excessive so the
04:45 - the shorter list will take precedence so
04:47 - the six is ignored but if this was five
04:50 - and then we say we added an element here
04:52 - and we put six here then this six here
04:55 - and the second list will actually be
04:56 - truncated will be cut off of your finger
04:59 - as you can see it's it's ignored both
05:01 - times the the six number pops up but
05:03 - then of course as you guys have probably
05:04 - guessed and expected if I put in a six
05:06 - then voila
05:07 - it pops up there same thing goes if
05:10 - there's three lists if you actually have
05:11 - a third list here and then you have with
05:13 - some other things and these become
05:14 - tuples of length three then whichever
05:17 - one of the three is shortest that will
05:19 - be the one of what determines this final
05:22 - list okay so that's how that works when
05:25 - you have different length lists but
05:27 - we're just gonna stick to same length
05:28 - list because it's just a little bit
05:30 - easier to understand I'm gonna go back
05:31 - to five because I don't want these going
05:32 - off the screen like they are right now I
05:34 - want to fit everything here so you guys
05:36 - can see everything nice and clearly
05:37 - because when people don't do that it
05:40 - pisses me off
05:41 - continuing on I already showed you guys
05:43 - how to zip stuff together that is a very
05:46 - handy now another thing you can do is
05:48 - actually unzip things so okay let's
05:50 - let's say we went from these two lists
05:53 - these two long lists to one long list of
05:56 - little pairs which is another way you
05:58 - can think about it you're going from two
05:59 - long lists to one long list of little
06:02 - pairs or three long lists to one long
06:05 - list of little trios and so on and so
06:07 - forth but if you want to go in the
06:08 - opposite direction you want to go from
06:10 - one long list of little pairs of little
06:12 - trios and then to go back to two long
06:14 - lists or three long lists then that's
06:18 - called unzipping but there isn't a
06:21 - function called unzipped in Python
06:24 - actually what you do is you still use
06:26 - the zip function but you use a little
06:28 - special character
06:29 - before the argument you give to the
06:32 - function to actually reverse the order
06:34 - of the zip so you're zipping and
06:36 - unzipping with this tiny little start
06:37 - asterik I'll show you that now so we
06:41 - have this zipped variable here Zi pped
06:44 - and it is a list it has to be a list I
06:48 - realized in Python 3 you have to make it
06:51 - a list for it to work on there are some
06:53 - weird changes from Python to the Python
06:55 - 3 but in Python 3 you need to make sure
06:59 - it's a list to be able to unzip it so
07:01 - the way you can unzip it is I'm just
07:03 - going to name it unzipped to be very
07:05 - clear this is called self-documenting
07:08 - code by the way I may have not mentioned
07:10 - it before but soft documenting code is
07:13 - just using function names and variable
07:14 - names that explain themselves so
07:16 - actually using I and a for loop for I in
07:18 - range 10 or something it's usually not
07:21 - that good you want to not use I and use
07:23 - something else and it's just better to
07:27 - be descript this this list is going to
07:29 - be an unzip list just throw the same way
07:30 - that this is list became a zipless so
07:32 - unzipped is just going to be this zip
07:35 - list but unzipped so literally all we do
07:38 - is just we're gonna have to because of
07:41 - Python 3 you got to put the list in
07:42 - there again that looked like a nipple
07:46 - inappropriate sorry if you're under an
07:48 - appropriate age we're gonna just call
07:50 - zip again here and then originally you
07:53 - might think okay like wouldn't just be
07:54 - like unzip and then you stick zipped in
07:56 - here and it's nice and done but no it's
07:58 - actually the same function zip but all
08:00 - you do is before this thing I mentioned
08:02 - early you put an asterisk a little star
08:05 - just like that almost c-style
08:08 - like like dereferencing a pointer if you
08:10 - know what the heck that means if you do
08:11 - you're cool if not you can be cool oh
08:15 - well I'm pretty sure we'll get you there
08:17 - well we'll get you there at some point
08:18 - just take a little star there in front
08:19 - of the zipped list here and this will
08:21 - actually unzip this list and give us
08:23 - from this output bring it bring us back
08:25 - to this output so let's just see what
08:26 - the heck happens
08:27 - first let's check if there's any errors
08:28 - no errors and then print this out just
08:31 - like I printed the zipped like that and
08:34 - click run and magic you see I went from
08:37 - this I we went from two separate lists
08:39 - here okay two separate lists
08:42 - and then we got this and zipped it
08:44 - together to get one long list of little
08:46 - pairs and then we went from this long
08:47 - list of little pairs back to two
08:50 - separate lists or actually tuples in
08:52 - this case I mean you can cast them to
08:53 - other things if you like but in this
08:54 - case there are cat Nam putting tuples
08:56 - one list of two long two poles these
08:58 - which is equivalent to these two
09:01 - original lists so that's basically what
09:03 - the zip and inverse of zip the inverse
09:06 - function a functionality of zip can do
09:08 - so it's like a dual function you can
09:09 - kind of do two things with it it's two
09:11 - functions in one kind of cool you can do
09:12 - that with zipped but another thing that
09:14 - I want to mention is the the primary
09:17 - time zip is actually used so though I
09:20 - noticed that whenever I'm using the zip
09:21 - function most often it's to be able to
09:25 - get enough lists or variables in a scope
09:29 - if that made sense to you good if not
09:31 - let me explain if you are inside of an
09:34 - if statement or inside of a for loop you
09:36 - know that the variables you have inside
09:38 - there are actually local to that little
09:40 - that little indented area if you have a
09:42 - chunk of code it's indented out or like
09:44 - if you're in java or c plus plus or
09:46 - something you have brackets anything in
09:48 - that chunk of code it's like one unified
09:49 - whole all the code in there um can share
09:52 - all the variables and anything outside
09:53 - of it but if you had a variable inside
09:56 - the if statement or the for loop and
09:58 - then you tried to read into into the if
10:01 - statement or into the for loop you
10:02 - wouldn't actually be able to read those
10:03 - variables a little bit tricky to
10:05 - understand but it makes sense if you've
10:07 - been coding long enough it it makes
10:09 - sense on the on a on a technological
10:11 - level so it's just something you have to
10:12 - accept um you don't really understand
10:14 - why it works but you understand how it
10:16 - works
10:16 - understanding why is very fascinating
10:18 - you can go into that if you want at some
10:20 - future point there's a lot of resources
10:21 - just google it it's pretty cool but
10:23 - going back to scope using zip is very
10:26 - handy if you want to get a bunch of
10:28 - things into a different scope let's see
10:35 - so for let's just try to have a for loop
10:38 - so let's say I have these two lists up
10:39 - here and then I want to actually iterate
10:41 - over on both of these lists within the
10:45 - for loop so that besides just like
10:47 - having an ugly for I in range I in range
10:54 - five
10:56 - and then indexing list one at AI and
10:59 - indexing list two I actually this might
11:05 - not even be a scope thing I might have
11:06 - had a little brain fart there but that
11:08 - scope thing is still a very relevant
11:10 - piece of information to programming in
11:11 - general so definitely hold on to that
11:13 - but I might have fussed up there a
11:15 - little bit you actually don't need that
11:17 - because you're just trying to read here
11:18 - but if you actually want to get multiple
11:20 - things into a scope without avoiding
11:23 - this gross syntax here um you can
11:26 - actually use the zip function instead so
11:29 - instead of having four I and range of
11:31 - having this index a very C style kind of
11:32 - way of doing it we can get rid of this
11:34 - crap okay and do it the Python way which
11:37 - is the arguably cooler way so you can
11:40 - just say for list one list two in there
11:55 - we go yeah and zip actually we shouldn't
11:58 - call this that let's call it l1 and l2
12:01 - okay so this is actually tuple let me
12:04 - put it in parenthesis just to be clear
12:06 - cuz it'll make more sense so this is
12:09 - actually a two-part tuple if you know
12:11 - what if you don't know what this is look
12:12 - it up it's it's a way to unpack tuples
12:17 - automatically just google that and then
12:19 - see what that means in Python it's kind
12:21 - of a cool little thing the safe space
12:22 - you can do multiple things on one line
12:23 - so we're just going to zip together
12:25 - these two lists and what happens here is
12:27 - now in this in this loop I now have
12:30 - access to whatever iteration I'm on I
12:33 - have access to both this variable and
12:35 - this variable or this element and this
12:38 - element the same time by using l1 and l2
12:40 - so let's just do that so I'm gonna print
12:43 - l1 and I'm going to print l2 just like
12:47 - that and print it and as you can see
12:49 - each iteration it actually prints one
12:52 - and then one the number one and then the
12:55 - string one the number two and then the
12:56 - string two in each iteration so this is
12:58 - the first iteration it's the second
12:59 - iteration the third iteration for the
13:00 - dishes so on and so forth
13:02 - however many times you want to go but
13:03 - the point I'm trying to make here is you
13:05 - can actually zip together a bunch of
13:06 - different lists and have access to all
13:09 - of those course
13:09 - elements in each list within the for
13:12 - loop so let's say I had I had 20 lists
13:14 - and I wanted to zip all 20 together and
13:16 - then I had a tuple of length 20 I could
13:17 - actually use all 20 of those variables
13:19 - in the for loop to actually do
13:21 - interesting calculations and whatnot a
13:23 - very cool very handy so now I want to go
13:25 - through an actual example
13:26 - besides this very simplistic one so
13:28 - let's just delete this I have a nice
13:30 - little nice little example printed out
13:33 - for you guys and it's going to be called
13:35 - sentences we're going to be creating
13:39 - sentences from different lists I forgot
13:47 - to actually okay so we're going to have
13:48 - we're gonna be creating sentences from
13:50 - different lists so items what does I put
13:57 - here items equals pool banana and brunch
14:09 - and then also this is a little shopping
14:12 - cart example it's coming back to me now
14:13 - I should have looked at this before I
14:15 - started the video that is a shame on me
14:19 - oops but now I have items we're gonna
14:22 - have different items we're gonna have
14:23 - different counts and then we're going to
14:26 - have different prices so you kind of see
14:29 - how these different elements in each
14:32 - list is going to correspond so if you
14:34 - bought three apples if you bought an
14:36 - apple you bought three of them and then
14:37 - the price was i don't know 99 cents and
14:41 - then bananas are 25 cents and then
14:44 - oranges are 50 cents something like that
14:47 - okay these this is the quart three
14:50 - corresponding lists now we want to
14:51 - access be able to access this first
14:53 - element first element first element all
14:55 - at the same time in the same iteration
14:57 - of a for loop so we can construct the
14:59 - sentence on the sentences I'm gonna try
15:01 - to create our I bought three apples at
15:03 - $0.99 and I bought six bananas I bought
15:07 - six bananas at 25 cents and so on that's
15:09 - kind of the idea that I want to
15:11 - implement here so let's start the for
15:14 - loop up so it's going to be remember you
15:17 - can do those that cool little tuple
15:18 - unpacking thing I'm gonna have item I'm
15:20 - gonna have count and I'm going to have
15:21 - price
15:23 - so that's how I access these so this is
15:26 - an item in the items list so that's
15:28 - going to be put in here this is a count
15:30 - in the counts list so that's gonna be
15:32 - put in here and this is a price this
15:34 - double this floating-point number is
15:36 - gonna be the price in this prices list
15:38 - that's going to be stuck in here okay so
15:40 - this is gonna be Apple this is gonna be
15:42 - three and this is gonna be $0.99 in the
15:44 - first iteration and then in the second
15:46 - or third iteration it'll be the same
15:47 - thing for banana and orange okay um you
15:50 - can sold of course we're gonna have to
15:52 - zip these three together so items counts
15:56 - prices I forgot to mention if you are
15:58 - doing this cool little trick with zip
16:00 - here you might have already notice that
16:02 - you might have been injecting objecting
16:03 - earlier like what the heck here and you
16:04 - got you didn't cast it to a list you I
16:06 - thought you said on Python three you
16:07 - always have to cast it to a list that is
16:09 - only if you're trying to print it the
16:10 - thing is this zip object that is
16:12 - returned from this function can actually
16:15 - be put in this for loop like this and
16:17 - you do not need to cast it to a list
16:20 - because we're not actually printing this
16:21 - zip function return data so you can just
16:28 - leave it like that just leave it as zip
16:29 - and it'll actually just automatically
16:31 - zip it together and automatically pick
16:33 - out this nice unpacked triple tuple for
16:35 - you so that's all clean it that is all
16:37 - done in one line and now we have access
16:38 - to these three variables in each
16:40 - iteration these three then those three
16:42 - then these then those three I might as
16:45 - screw that up again but you guys are
16:48 - probably getting used to me screwing up
16:49 - I hope if you're still there so what I
16:52 - want to do here is actually create some
16:54 - sentences so the sentence I wanted to
16:57 - create was um sentences dot append so
17:02 - we're gonna have to add to the sentences
17:03 - list of course we're actually let's make
17:05 - this a little bit cleaner
17:08 - let's put sentence making changes on the
17:11 - fly here so sentence is going to be
17:14 - we're just gonna glue some strings
17:16 - together
17:16 - I bought space count space or a plus
17:24 - space I bought count space
17:30 - I'd Tom no sorry
17:35 - item and then add there if you don't
17:44 - know what's happening here just wait Tom
17:45 - didn't coating this line and I'll
17:46 - explain it real quick if you do know
17:47 - what's going on then just put it on two
17:49 - times and zip through this real quick at
18:02 - there we go I always get confused when
18:04 - I'm concocting these strings like this
18:06 - it's so easy it's so easy to make an
18:09 - error I think I did this right though so
18:11 - what's happening here is you can add
18:12 - strings together right and when you add
18:13 - two strings then they are just added
18:16 - together into one big string so what
18:18 - this should output is I bought for the
18:22 - first iteration it should be I bought
18:23 - three space apples because I added this
18:26 - s here at space $0.99
18:34 - actually let's go like that since cents
18:38 - each and don't forget the space there
18:41 - okay so that's what's happening there
18:44 - I'm constructing this this this string
18:46 - here and then I want to append this
18:47 - sentence to the list okay that's what's
18:51 - going on however when we get these three
18:54 - elements here this is still a string
18:56 - this is still an integer and this is
18:58 - still a floating point a double a
19:00 - decimal point number okay so what we
19:01 - have to do is is convert all these to
19:04 - two strings by casting them so we could
19:06 - just go like this I stick it in like
19:09 - that which is what you could do on all
19:11 - three but I might do it like this
19:13 - because it just seems a little bit more
19:18 - less messy I think that was a weird
19:22 - contradiction they're a lot more or less
19:24 - messy but but you I'm pretty sure you
19:27 - guys got the point we are going to do
19:30 - this this is another little cool thing
19:32 - you can do with unpacking so as you can
19:35 - see these corresponding elements here
19:37 - are all going to be casted and then put
19:39 - into new new names where the same names
19:42 - whether they're just
19:42 - be overwritten so pretty much what i'm
19:44 - doing here is i'm taking item count in
19:45 - price these three and then i want to
19:47 - make them all string so i just stick
19:48 - them in here and now i don't count in
19:50 - price or all strings technically i don't
19:52 - have to make this item string because
19:54 - it's already a string but just to keep
19:55 - it consistent and make it easier on the
19:58 - eyes i'm gonna leave it like this so
19:59 - let's see what happens when i print out
20:01 - sentences now because we went through it
20:04 - we zipped all these three things
20:05 - together
20:06 - we converted all the items to strings in
20:08 - everything we constructed a sentence
20:10 - using one little element from each of
20:12 - these lists and then we stuck one of the
20:13 - sentences in the sentence list and we
20:15 - did that three times so there should be
20:16 - three sentences in this list that we're
20:18 - about to print out let's print it out
20:20 - right now go over here so you can see it
20:22 - and see what happens perfect oh i
20:25 - thought i i drag this over the perfect
20:28 - amount look at that yeah things work out
20:30 - sometimes don't they right mom
20:33 - so as you can see we have three
20:36 - sentences here it says I bought three
20:38 - apples and ninety-nine cents each I
20:39 - bought six bananas at 25 cents each and
20:42 - I bought four oranges at five fifty
20:45 - cents each or point five cents each I
20:47 - guess that that's screwed up I this is
20:49 - probably not right but I mean it the
20:51 - code worked the way it was supposed to
20:52 - I'm pretty sure you guys get the idea if
20:54 - you want to be able to zip together a
20:55 - bunch of things into a for-loop word in
20:57 - its statement or I'm not sure if you can
21:00 - to an if statement have to think about
21:01 - it but definitely for a for loop I use
21:02 - it a lot for for loops zipping fuse
21:04 - together into four loops this is a very
21:06 - very handy function um don't forget what
21:07 - the unzip thing the little star thing
21:09 - you can put before if you ever need to
21:10 - do that you can actually get really
21:11 - crafty with these getting zipping a
21:13 - bunch of big tuple lists together and
21:15 - when you're doing data analysis very
21:17 - very useful but that pretty much wraps
21:19 - up the zipped foam function they're one
21:22 - of my favorite functions in Python for
21:23 - sure just because it makes everything so
21:24 - nice and clean but this is very useful
21:28 - for like I said going over a large data
21:31 - doing data analysis and whatnot those
21:33 - kind of statistics things and that
21:35 - actually ties us into something I want
21:36 - to talk about we actually have a brand
21:38 - new course coming out in the next month
21:39 - or two called how to automate stuff with
21:42 - Python that is going to be going over
21:44 - similar things to this how to handle and
21:46 - analyze large amounts of texts large
21:48 - amount of files and all those kind of
21:50 - things in dealing with like really large
21:51 - big data
21:52 - rays and datasets and graphs and all
21:54 - that good technical nerdy crap yeah I
21:58 - guess you can say some people like it
22:00 - some people don't
22:01 - I think it's great but yeah we have that
22:02 - course coming out called how to automate
22:04 - stuff with Python which is gonna be
22:06 - really cool so stay tuned I'm gonna have
22:08 - a bunch of videos coming out that are
22:09 - somewhat related to it some might not be
22:11 - but some will be and then but in that
22:13 - course should be going to a lot of depth
22:15 - about all the different cool things you
22:16 - can do with Python regarding big data
22:19 - analysis analyzing datasets doing web
22:21 - scraping like those kind of things is
22:23 - very very cool even even image
22:25 - manipulation but yeah just a bunch of
22:27 - cool stuff that we're gonna be going
22:28 - over I can't remember all of it just
22:30 - because there's so much but those are
22:31 - just a few things that came to the top
22:32 - of my mind but yeah definitely stay
22:34 - tuned you guys thank you so much for
22:36 - watching that is the end of this long
22:37 - drawn-out video as usual that's my
22:39 - signature and um yeah I'll see you guys
22:42 - next time
22:42 - good bye
22:49 - [Music]
23:03 - [Music]

Cleaned transcript:

hey what's up guys this is Ann from clever programmer and today I just want to talk about a cute little function of Python called zip so this isn't the kind of zip that you would see when you are zipping or unzipping a file in Python but it's actually a function that you have in the language that allows you to glue things together to make things easier to deal with that might have made no sense but I'm about to explain it in code right now so let's get right into it alright so go to rep politey ripple it as usual I'll create a new rep will here go down to Python wherever it happens to be in the list create ripple and alright we are ready to go so zip I might give a little bit of an explanation before I start actually so zip what it does is it will take any iterables in python so an iterable is just something you can iterate over in a for loop that'd be a list tuple I believe it can iterate over a dictionary you just can't go in any specific order it's just gonna iterate in any random order and other things like that like iterables or things you can go or but if you have been iterable then you can actually map um I might be wrong there an iterable I think it has to be I know for sure for lists and tuples if it's an in order then what it does is it takes corresponding elements and it will glue them together so the first element from two lists it'll put those together into a two element tuple and put that into the first element of one list and then so on it'll take the second element of both lists and then stick them in a two element tuple and put that in the second element of the list and it'll just keep doing that until everything has been paired up or even if you have three lists then they will keep doing that everything's tripled up it might be easier to understand if it's in code but that's the best I could do verbally let's just get right into it so if we have a list one here which is just going to have very simple numbers like this list I forgot two equal sign um it's better looking nice and clean and then let's just do something like this but onetwothreeandfourandfive cool so now we have our two lists now as you can see both of these lists are the same length which is important not required but very it makes things easier or cleaner I should say it makes things cleaner when you're using zip it's not required but it makes things definitely cleaner so we'll start with this example if we have list one and list two then I'm just going to call this final list we are going to make a new list here called zipped and all it's going to do is it's going to call the function zip which is literally just zip just like that zi p and then all you need to do is just put in the two lists in here just like that so this will actually work in Python this is something I came across um I didn't realize that it didn't work in Python 3 this will work in Python 2 but in Python 3 you actually need to cast this to a list so before I run this just be aware that there's a little change here whenever you're calling zip sometimes if you want to print it out you need to cast it to a list first before you print it out so zipped now is a list but we zipped together list one and list two so remember this is list 1 here the numbers 1 through 5 integers 1 through 5 and list 2 is these five strings 1 through 5 when I run it when you see it you understand exactly what it's doing stupid me I didn't put in the print statement print zipped now let's run it so as you can see here what happened is it took the corresponding elements of each list and it stuck them in pairs and then put each of these pairs in its own list so this list itself is of length 5 just like the original two lists but each element is actually corresponding elements from the other two lists pretty cool right umm one thing I want to point out is that if the lists are not the same length so let's add a six to this list and then try it again then this six seems to be ignored so what what's going on there actually what's going on there is Python will always truncate truncate is just a fancy word we use in the programming community to say cut off just ignore you truncate it off like you're cutting a tree trunk chop it off like a finger if it's there then it'll just truncate anything that that is excessive so the the shorter list will take precedence so the six is ignored but if this was five and then we say we added an element here and we put six here then this six here and the second list will actually be truncated will be cut off of your finger as you can see it's it's ignored both times the the six number pops up but then of course as you guys have probably guessed and expected if I put in a six then voila it pops up there same thing goes if there's three lists if you actually have a third list here and then you have with some other things and these become tuples of length three then whichever one of the three is shortest that will be the one of what determines this final list okay so that's how that works when you have different length lists but we're just gonna stick to same length list because it's just a little bit easier to understand I'm gonna go back to five because I don't want these going off the screen like they are right now I want to fit everything here so you guys can see everything nice and clearly because when people don't do that it pisses me off continuing on I already showed you guys how to zip stuff together that is a very handy now another thing you can do is actually unzip things so okay let's let's say we went from these two lists these two long lists to one long list of little pairs which is another way you can think about it you're going from two long lists to one long list of little pairs or three long lists to one long list of little trios and so on and so forth but if you want to go in the opposite direction you want to go from one long list of little pairs of little trios and then to go back to two long lists or three long lists then that's called unzipping but there isn't a function called unzipped in Python actually what you do is you still use the zip function but you use a little special character before the argument you give to the function to actually reverse the order of the zip so you're zipping and unzipping with this tiny little start asterik I'll show you that now so we have this zipped variable here Zi pped and it is a list it has to be a list I realized in Python 3 you have to make it a list for it to work on there are some weird changes from Python to the Python 3 but in Python 3 you need to make sure it's a list to be able to unzip it so the way you can unzip it is I'm just going to name it unzipped to be very clear this is called selfdocumenting code by the way I may have not mentioned it before but soft documenting code is just using function names and variable names that explain themselves so actually using I and a for loop for I in range 10 or something it's usually not that good you want to not use I and use something else and it's just better to be descript this this list is going to be an unzip list just throw the same way that this is list became a zipless so unzipped is just going to be this zip list but unzipped so literally all we do is just we're gonna have to because of Python 3 you got to put the list in there again that looked like a nipple inappropriate sorry if you're under an appropriate age we're gonna just call zip again here and then originally you might think okay like wouldn't just be like unzip and then you stick zipped in here and it's nice and done but no it's actually the same function zip but all you do is before this thing I mentioned early you put an asterisk a little star just like that almost cstyle like like dereferencing a pointer if you know what the heck that means if you do you're cool if not you can be cool oh well I'm pretty sure we'll get you there well we'll get you there at some point just take a little star there in front of the zipped list here and this will actually unzip this list and give us from this output bring it bring us back to this output so let's just see what the heck happens first let's check if there's any errors no errors and then print this out just like I printed the zipped like that and click run and magic you see I went from this I we went from two separate lists here okay two separate lists and then we got this and zipped it together to get one long list of little pairs and then we went from this long list of little pairs back to two separate lists or actually tuples in this case I mean you can cast them to other things if you like but in this case there are cat Nam putting tuples one list of two long two poles these which is equivalent to these two original lists so that's basically what the zip and inverse of zip the inverse function a functionality of zip can do so it's like a dual function you can kind of do two things with it it's two functions in one kind of cool you can do that with zipped but another thing that I want to mention is the the primary time zip is actually used so though I noticed that whenever I'm using the zip function most often it's to be able to get enough lists or variables in a scope if that made sense to you good if not let me explain if you are inside of an if statement or inside of a for loop you know that the variables you have inside there are actually local to that little that little indented area if you have a chunk of code it's indented out or like if you're in java or c plus plus or something you have brackets anything in that chunk of code it's like one unified whole all the code in there um can share all the variables and anything outside of it but if you had a variable inside the if statement or the for loop and then you tried to read into into the if statement or into the for loop you wouldn't actually be able to read those variables a little bit tricky to understand but it makes sense if you've been coding long enough it it makes sense on the on a on a technological level so it's just something you have to accept um you don't really understand why it works but you understand how it works understanding why is very fascinating you can go into that if you want at some future point there's a lot of resources just google it it's pretty cool but going back to scope using zip is very handy if you want to get a bunch of things into a different scope let's see so for let's just try to have a for loop so let's say I have these two lists up here and then I want to actually iterate over on both of these lists within the for loop so that besides just like having an ugly for I in range I in range five and then indexing list one at AI and indexing list two I actually this might not even be a scope thing I might have had a little brain fart there but that scope thing is still a very relevant piece of information to programming in general so definitely hold on to that but I might have fussed up there a little bit you actually don't need that because you're just trying to read here but if you actually want to get multiple things into a scope without avoiding this gross syntax here um you can actually use the zip function instead so instead of having four I and range of having this index a very C style kind of way of doing it we can get rid of this crap okay and do it the Python way which is the arguably cooler way so you can just say for list one list two in there we go yeah and zip actually we shouldn't call this that let's call it l1 and l2 okay so this is actually tuple let me put it in parenthesis just to be clear cuz it'll make more sense so this is actually a twopart tuple if you know what if you don't know what this is look it up it's it's a way to unpack tuples automatically just google that and then see what that means in Python it's kind of a cool little thing the safe space you can do multiple things on one line so we're just going to zip together these two lists and what happens here is now in this in this loop I now have access to whatever iteration I'm on I have access to both this variable and this variable or this element and this element the same time by using l1 and l2 so let's just do that so I'm gonna print l1 and I'm going to print l2 just like that and print it and as you can see each iteration it actually prints one and then one the number one and then the string one the number two and then the string two in each iteration so this is the first iteration it's the second iteration the third iteration for the dishes so on and so forth however many times you want to go but the point I'm trying to make here is you can actually zip together a bunch of different lists and have access to all of those course elements in each list within the for loop so let's say I had I had 20 lists and I wanted to zip all 20 together and then I had a tuple of length 20 I could actually use all 20 of those variables in the for loop to actually do interesting calculations and whatnot a very cool very handy so now I want to go through an actual example besides this very simplistic one so let's just delete this I have a nice little nice little example printed out for you guys and it's going to be called sentences we're going to be creating sentences from different lists I forgot to actually okay so we're going to have we're gonna be creating sentences from different lists so items what does I put here items equals pool banana and brunch and then also this is a little shopping cart example it's coming back to me now I should have looked at this before I started the video that is a shame on me oops but now I have items we're gonna have different items we're gonna have different counts and then we're going to have different prices so you kind of see how these different elements in each list is going to correspond so if you bought three apples if you bought an apple you bought three of them and then the price was i don't know 99 cents and then bananas are 25 cents and then oranges are 50 cents something like that okay these this is the quart three corresponding lists now we want to access be able to access this first element first element first element all at the same time in the same iteration of a for loop so we can construct the sentence on the sentences I'm gonna try to create our I bought three apples at $0.99 and I bought six bananas I bought six bananas at 25 cents and so on that's kind of the idea that I want to implement here so let's start the for loop up so it's going to be remember you can do those that cool little tuple unpacking thing I'm gonna have item I'm gonna have count and I'm going to have price so that's how I access these so this is an item in the items list so that's going to be put in here this is a count in the counts list so that's gonna be put in here and this is a price this double this floatingpoint number is gonna be the price in this prices list that's going to be stuck in here okay so this is gonna be Apple this is gonna be three and this is gonna be $0.99 in the first iteration and then in the second or third iteration it'll be the same thing for banana and orange okay um you can sold of course we're gonna have to zip these three together so items counts prices I forgot to mention if you are doing this cool little trick with zip here you might have already notice that you might have been injecting objecting earlier like what the heck here and you got you didn't cast it to a list you I thought you said on Python three you always have to cast it to a list that is only if you're trying to print it the thing is this zip object that is returned from this function can actually be put in this for loop like this and you do not need to cast it to a list because we're not actually printing this zip function return data so you can just leave it like that just leave it as zip and it'll actually just automatically zip it together and automatically pick out this nice unpacked triple tuple for you so that's all clean it that is all done in one line and now we have access to these three variables in each iteration these three then those three then these then those three I might as screw that up again but you guys are probably getting used to me screwing up I hope if you're still there so what I want to do here is actually create some sentences so the sentence I wanted to create was um sentences dot append so we're gonna have to add to the sentences list of course we're actually let's make this a little bit cleaner let's put sentence making changes on the fly here so sentence is going to be we're just gonna glue some strings together I bought space count space or a plus space I bought count space I'd Tom no sorry item and then add there if you don't know what's happening here just wait Tom didn't coating this line and I'll explain it real quick if you do know what's going on then just put it on two times and zip through this real quick at there we go I always get confused when I'm concocting these strings like this it's so easy it's so easy to make an error I think I did this right though so what's happening here is you can add strings together right and when you add two strings then they are just added together into one big string so what this should output is I bought for the first iteration it should be I bought three space apples because I added this s here at space $0.99 actually let's go like that since cents each and don't forget the space there okay so that's what's happening there I'm constructing this this this string here and then I want to append this sentence to the list okay that's what's going on however when we get these three elements here this is still a string this is still an integer and this is still a floating point a double a decimal point number okay so what we have to do is is convert all these to two strings by casting them so we could just go like this I stick it in like that which is what you could do on all three but I might do it like this because it just seems a little bit more less messy I think that was a weird contradiction they're a lot more or less messy but but you I'm pretty sure you guys got the point we are going to do this this is another little cool thing you can do with unpacking so as you can see these corresponding elements here are all going to be casted and then put into new new names where the same names whether they're just be overwritten so pretty much what i'm doing here is i'm taking item count in price these three and then i want to make them all string so i just stick them in here and now i don't count in price or all strings technically i don't have to make this item string because it's already a string but just to keep it consistent and make it easier on the eyes i'm gonna leave it like this so let's see what happens when i print out sentences now because we went through it we zipped all these three things together we converted all the items to strings in everything we constructed a sentence using one little element from each of these lists and then we stuck one of the sentences in the sentence list and we did that three times so there should be three sentences in this list that we're about to print out let's print it out right now go over here so you can see it and see what happens perfect oh i thought i i drag this over the perfect amount look at that yeah things work out sometimes don't they right mom so as you can see we have three sentences here it says I bought three apples and ninetynine cents each I bought six bananas at 25 cents each and I bought four oranges at five fifty cents each or point five cents each I guess that that's screwed up I this is probably not right but I mean it the code worked the way it was supposed to I'm pretty sure you guys get the idea if you want to be able to zip together a bunch of things into a forloop word in its statement or I'm not sure if you can to an if statement have to think about it but definitely for a for loop I use it a lot for for loops zipping fuse together into four loops this is a very very handy function um don't forget what the unzip thing the little star thing you can put before if you ever need to do that you can actually get really crafty with these getting zipping a bunch of big tuple lists together and when you're doing data analysis very very useful but that pretty much wraps up the zipped foam function they're one of my favorite functions in Python for sure just because it makes everything so nice and clean but this is very useful for like I said going over a large data doing data analysis and whatnot those kind of statistics things and that actually ties us into something I want to talk about we actually have a brand new course coming out in the next month or two called how to automate stuff with Python that is going to be going over similar things to this how to handle and analyze large amounts of texts large amount of files and all those kind of things in dealing with like really large big data rays and datasets and graphs and all that good technical nerdy crap yeah I guess you can say some people like it some people don't I think it's great but yeah we have that course coming out called how to automate stuff with Python which is gonna be really cool so stay tuned I'm gonna have a bunch of videos coming out that are somewhat related to it some might not be but some will be and then but in that course should be going to a lot of depth about all the different cool things you can do with Python regarding big data analysis analyzing datasets doing web scraping like those kind of things is very very cool even even image manipulation but yeah just a bunch of cool stuff that we're gonna be going over I can't remember all of it just because there's so much but those are just a few things that came to the top of my mind but yeah definitely stay tuned you guys thank you so much for watching that is the end of this long drawnout video as usual that's my signature and um yeah I'll see you guys next time good bye
