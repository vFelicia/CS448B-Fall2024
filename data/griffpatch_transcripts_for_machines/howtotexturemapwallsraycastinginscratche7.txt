hello fellow scratchers when i began this simple raycasting series i intended it to be no more than two episodes i was very clear there was no way we would be adding textures to these walls it's too complex and well bitmap raycasting in scratch is far too slow to handle it well here we are now in episode 7 of this epic series and yes today we are adding textured walls oh man i will not be able to live this down but guys you should never underestimate what is possible in scratch right so what changed my mind well firstly we made huge progress on boosting the speed of our raycaster in the previous episode six faster passing my expectations and secondly the recent breakthrough in fast image scanning see last week's ultra fast scanning tutorial with this in hand the final obstacle was out of the way and so here we are but before we dive into coding let's have a quick chat about how texture mapping works in a raycaster like ours so what is a texture okay so here's our lovely level that we drew in scratch this is a top down view but if we were to angle it and heighten the walls that's a little bit too much but well bear with me the little square up here is a texture and when placed end to end it produces a seamless repeating pattern perfect for plastering all over the walls of our game wow that looks cool but obviously the walls in our game are not this tall there let's go for this height now to apply the same texture to this wall we need to repeat it many more times in the same space so the takeaway from that is that the wall height will be very important to us but how do we decide where on a wall the texture should start and end for this we are going to use the simplest method possible we'll divide the map up into a grid of squares each square is the size of the height of our walls to match the size of the texture now we raycast as a ray collides with a wall rather than just recording how far away the wall is and its colour we now want to record the texture at this point too in this example we work out how this point maps to our texture we simply find out how far across a grid square the collision occurred and this gives us an index into the texture and tells us which vertical slice of texture we are going to need to paint this index is therefore the data we need to store in our raycasting list so that when later on we begin drawing our scene we can look up each texture line in our textured list and color by color draw out a slice of texture one at a time and that's pretty much everything you need to know to get started so i am dead excited to go come on let's get scratching to begin texture mapping what we need are some textures right and a way of scanning those textures into a list well haha luckily the last tutorial i made was on ultra fast image scanning a coincidence i think not now i don't know if all of you have managed to code that little project up but if not then don't panic because for your convenience i have released a project named raycaster episode 7 assets on my tutor account you'll find a link in the description under the video and not only does it contain some fine example texture assets but it also includes the completed scanning scripts all ready to go so if you want to use your own scanning scripts then go ahead just note i've made a couple of changes so let me just go over them quickly now firstly when the scanner is used the first thing we do is switch to a new costume texture 32 this is the costume that contains our textures look at these beauties cool right and this is left on screen using a second clone that wasn't in our original scanning scripts then rather than triggering the actual scan off the space key i have just added a weight zero and then gone directly into the scan scripts right away the next change is the addition of a delete this clone under the scan complete event receiver this way after the scanner is complete we tidy up any clones that are hanging around and lastly if we head over to the define initial scan script we are setting x now to negative 239 one more than the original minus 240. it turns out that this is the preferred starting position for pixel perfect scanning and yes we do need to do the same in the second scan script too cool so that is all the changes that i've made feel free to do the same in yours or if you want to continue with my scripts then just open up your backpack and drag the entire scanning sprite into there you'll then get the textures for free too so now we can open our raycasting projects and we will continue from where we left off in episode six but before we begin to ensure we don't lose any of our hard work make sure to first save this as a new copy for this is episode seven yeah next open up your backpack and drag out the scanner sprite into your sprites panel as you know this sprite comes with a number of textures already in place so to scan these textures into the scan list all we need to do is click this begin scan event block and there it goes you can see the screen scanning in progress this should take just around 10 seconds to complete thanks to this awesome new scanning scripts once done we can check out the scan list content and you'll see it scanned 172 800 colored pixels that's a full 480 by 360 scratch screen cool next bring up the costume we just scanned here it is in the costume editor now don't hesitate to try your own textures in here i only provided these so that you had something to get started with all my textures are 32 by 32 pixel squares just make sure they all line up like mine and you'll be rocking what you might notice if i zoom back out is that i'm only using the top portion of the canvas for this textures as such all the rest of the area will end up wasted space in our scan list since this is such a big list it will be worth reducing the size of the scan to save on memory so in this scanner sprite make a new variable naming it texture size keeping it for all sprites and we will set this to 32 before we begin our next scan all my textures as i had said were 32 by 32 pixels but if you're using your own textures then this can of course be any size you need next up scroll across to the define initial scan script the full screen height is 360 pixels but now i'm going to reduce the scan to only scan the height of two texture squares that is two multiplied by texture size and the same must be copied into the define scan script too cool we are set so come back over and click the begin scan script again perfect this now scans faster and the result in the scan list is only onefifth of the size good job now that we have our textures all scribbled away in the scan list we can shift our attention to creating our texture mapping grid click into the raycaster sprite and find the define single ray script as we all should know by now this is where we fire off a ray across our level and by the time we get to setting the distance here the ray will have collided with a wall so now we need to calculate this sprite's position relative to the texture grid split off the if touching level color and then make a new variable naming it texture offset for this sprite only and for starters just set texture offset to the x position of the collision cool return the if touching script so previously we were setting the entire wall to just one of two colors these colors being defined just here and here obviously these color values will no longer apply if we are adding textures to our walls as the texture gives the wall color so instead of storing the color here we will now store the texture offset but remembering the first nine or more numbers are reserved for enemies and collectibles not walls so how about we add 100 to each okay here we go then let's run the project and see what we've got oh wow look at this we are in rainbow land the color of each vertical slice of wall is now governed by its x position on the level so the further east to west we travel the bigger its colour value that's pretty neat and oh gosh you'll notice we have walls of ranks this is because i forgot we'd be having negative x positions being added to our list so that the plus 100 was not quite enough to stop this happening not to worry the important thing is that we can see the position of the collision as a color so what we are going to do next is take this x position and place it in a mod operator block this will give us the remainder of the x position after dividing it by the right hand number in this case 25 and here is the result a beautiful repetition of gradient squares the length of these squares is 25 pixels on our level costume so for a perfect square the height of the wall must be a matching 25 pixels right and yes that is correct look in our pen sprite we calculate the wall height here the top wall is positioned at 1.5 multiplied by height above the middle of the screen and the bottom is one height below add these two lengths together and we get two and a half multiplied by height but then finally we notice that we are already multiplying height by 10 up here so 10 times two and a half is you guessed it 25 the height of our walls cool so back in our raycaster sprite and this mod block why does modding by 25 give us this nice repeating pattern well the mod operator returns the remainder after division so with an exposition of 60 and a grid size of 25 60 divided by 25 gives us 2 remainder 10 but this is great 10 tells us just how far across this grid square we have gone yes indeed mod is exactly what we need for our texture mapping but before we continue you may have noticed this nice repeating pattern is not continuing on every wall do you know why it's because we are only calculating this offset using the x position of the collision this gives us the texture on walls running east to west but not north to south those would require the y position well easy fix bring in an addition operator and sum the x and y positions together then pop that back into the mod operator and check this out oh yeah now we are really tripping the entire level is pasted with multicolored squares that's quite amazing so that's almost done but there is one problem the texture offset value return from this mod will be a value between 0 and 25 the height of our walls but our textures are 32 pixels wide to render correctly we are going to have to translate from one scale to the other the maths is easy enough we begin by dividing by 25 the wall height we can be a little clever here and just divide the x y positions first because then we can mod by one since the left side is already 25 times smaller great now we just need to multiply the number back up by 32 our texture size so set texture offset 2 but be careful here to ensure all our numbers work out we should use a floor block to round the number down to the nearest whole number and then drop in the current texture offset multiplied by texture size and that's it our texture will have been scaled to the correct texture size we can run that again and you should find that our colours are just a little bit more vibrant now as the colour range has been increased so we are practically ready to begin coding the texture rendering now but just before we do it would be good to consider this touching level color check this was designed to let us change the color of the walls that face different directions well even when texture mapped it will be useful to see this distinction so for the second draw let's add one million and one that's one with five zeros and another one on the end i use this large number because our scan this can in theory contain 172 thousand items so to be safe i'm using an offset of 1 million the extra 1 on the end is because the texture data in our scan list begins with 1 not 0. the draw above we set to two million and one two with five zeros and a one cool we can work with this looking at the running project things are looking fine to me so on we go click into the pen sprite and find the define draw row block it's time to do some texture painting scroll down to where we are setting the pen color now we're really going to pull this script apart now firstly we won't be needing either the set pen color or brightness blocks so move them out of the way but keep the go to xy the blocks below are responsible for actually drawing our wall we pen down move the sprite and pen up to complete our simple coloured line but our textured walls are made up of 32 equally sized sections of colour so instead of drawing them from top to bottom in one go we must split the journey up into 32 pieces and draw them one at a time for each color in the texture we'll begin with the pen down as before to begin our line then repeat for texture size iterations are 32 pieces yeah and then we pen up now we want to gradually change y so instead of this set y we use a change y by right next problem is now how far to move by let's calculate the actual height of the full line we want to draw under the go to x y set height to height multiply by 2.5 that accounts for the 1.5 up and one down that we draw then to account for the extra pen width res we subtract res that's the full height of the line then but we want to break this up into 32 smaller steps we'll make a new variable to hold this naming it d y for this sprite only and because we are drawing downwards set d y to zero subtract and then we divide height into texture size pieces that's 32 equal pieces great because if we now change y by d y then after 32 repeats we will have moved the full distance again yeah but just before we draw each line in our loop we now need to decide each line's color bring back the set pen color so type used to be a color but now we have switched it to be a texture offset the one currently giving us the nice tiled gradient so how do we map this to the texture stored in our scan list well we'll need to set the color using an item of scan list for sure but what item number make a new variable naming it scan index or idx for short for this sprite only so the type variable holds our texture offset but remember we added one million and one to it we need to get back our original offset without the millions so set scan index to type mod 1 million one with six zeros easy gotta love that mod block right let's explain how this offset is going to work with our scan list here is our scanned costume and all of the colors are stored in the scan list from top left as item 1 running across and then starting again on the next row as item 481 since there are 480 pixels in a full row the scan index variable will be a value between 1 and 32 representing how far across the texture we need to reference so we begin with the color at scan index and then to find the color below this one we just need to add 480 to the scan index simple this process repeats down the texture until we have picked out all the colors one at a time cool we are close to being able to test this but one word of warning you'll note we didn't set the pen color before we did a pen down at the start that is a little dangerous as it could lead to a dot of the wrong color so let's get around that by setting the pen transparency before the pen down oh my look at the stage something exciting is going on over there so yeah they set the transparency to 100 fully invisible the initial pen down will then do nothing at all but hmm look at this the walls have mysteriously all gone transparent now so something is wrong and you know what i know exactly what the problem is it's our set pen color block here this is not the right one i just used the previous one look it takes a color number so this one just sets the color hue leaving the transparency as it was which is why it's now invisible but we wanted to set the entire red green blue color value and for that we need the other set pen color 2 block with the color swatch this one also sets the transparency back to nontransparent as well as the color so drop the item of scan in there and throw away the old set pen color block yeah but guys are you seeing what i am seeing over here in the project window this is so amazing let's have a walk around wow it just blows me away that we could have something like this working the texture is mapped beautifully onto our level walls shrinking off into the distance and with a frame rate of 20 even now and that is quite something wow perhaps the only thing missing is that we've lost our lovely darkening of the walls as they move into the distance this set pen brightness block over here is how we used to achieve this but if we were to drop that in after the set color you'll find the results are very unsatisfactory we do get the darkening effect but all our colors are messed up now and that's because the red green blue color we set has a brightness built into it after all some shades of a texture are naturally lighter or darker than the others but if we use the set pen brightness block we override this and all shades become a uniform brightness across the entire texture double yuck so to fix that we use the change pen brightness block yeah it's not quite a straight swap in though we need to change the 120 down to be 35 and the divide by to be divided by say 2 there that's pretty cool perhaps a little too dark if you think so you may want to try dividing by 3 instead yeah i'm liking that what do you think okay we can optimize this a tiny bit see how we are calculating this brightness value each time around this repeat loop let's just do it once before the loop begins make a new variable named right for this sprite only and set it to our 35 subtract distance divided by 3. we do this before our repeat loop and then drop the right variable into the set brightness block excellent that should work just the same yeah cool so how about we also restore that extra feature that darkens the walls facing in different directions to show up these corners better we recorded the wall direction by adding a million or two million to our type variable in the raycaster sprite remember so back in the pen sprite check if type is greater than two million two with six zeros and if it is change the right variable by negative 15 to darken it just a little drop that in just after the set right block and you can see the right hand wall is now just that little bit darker and the corner is much more visible nice feel free to play with this value to find the brightness that you are happy with walking around the level i found that negative 15 is a good compromise not too distinct but enough to make the corners stand out okay this next one is interesting the texture mapping works great like this but we are doing too much work look at this faroff wall ahead if we zoom in on it you can see that we are still drawing our texture by splitting the wall height into 32 pieces regardless of how tiny the wall becomes if i zoom back out and adjust res so that our pen lines are 10 pixels wide would we not expect the height of these walls bands to roughly match the same width 10 pixels high yeah i think so too the benefit of this is that it will make the whole engine run faster less looping faster engine plus this is a common feature in 3d engines swapping out a high res texture with a lower quality texture as it moves further away is called mipmapping now we aren't going to be implementing things to that degree but instead we'll stick to a simple pixel skipping in powers of two that is 2 4 8 16 32 etcetera so our aim is to be able to scale back the number of times we repeat here make a new variable named scaled texture size for this sprite only and we'll now be repeating by the scaled size instead to set this value up temporarily move off the repeat loop into some space so this scale texture size is the number of coloured segments we want to paint we could work that out by dividing the wall height by res our pen width then bring in an if else because we need this value to be a power of 2. so if the scaled size is less than say 12 then we set it to 8. that's the power of 2 less than 12. now duplicate that if and put it inside the else branch this time checking if size is less than 24 that's double the 12. if it is then we set it to 16 the next power of 2. duplicate again checking size being less than 48 and set it back to 32 and lastly if it's not less than 48 then just set it to texture size and let it be full resolution that's fine cool we have our desired scaled texture size then now if the scale texture size is smaller than our actual texture size we will need to know how many pixels we are skipping each time around the repeat loop make a new variable named skip for this sprite only and set skip to the result of dividing texture size by the new scaled texture size but just in case your textures are not sized in powers of two wrap the divide in a floor to round it down to the nearest whole number great now that we have skip everything we do can be multiplied by this starting with d y the distance we move by setting it to d y multiplied by skip also this scan index this 2 needs to now increase by 480 multiplied by skip but we can save having to do this here by instead multiplying skip by 480 outside of this loop set skip to the result of multiplying skip by 480 and then finally we can replace the 480 here with our new skip value before stuffing the repeat loop back on the end down here oh that was hard work well it's done our textures now scale notice how the far away wall is now constructed from far fewer pen lines speed wise we've gained perhaps an extra five frames per second it's not a huge deal but it's something and i'll leave it up to you to decide if this last optimization was worth the extra effort for you as we walk around you can see how the texture gain resolution as we move towards them that's so cool increasing res to a wider pen width and the vertical texture changes in line and that feels more consistent now hold on a moment did you see that this is rather disturbing to see when we get close to a wall the textures suddenly go mad warping horribly this is caused by us relying on scratch to position our pen and not remembering that scratch will try to prevent us drawing off screen to fix it scroll up in our scripts to where we first position the pen with a go to xy we're going to stuff this y value into a new variable naming it simply y for this sprite only then before we go to x y set y variable 2 and move the expression from the go to y below into the y variable above like so now we can use this y variable in the go to super but we still have the same rendering problem okay hold your horses scroll back down to our repeat loop and instead of changing y by d y drop in a change variable y instead changing that by d y then we can once more replace the change y position block with a set y position and pop in the new y variable and aha a miraculous change our terrible wall warping has been fixed nice one well done that's so much better walking around this maze now is really quite something we've come a long way since our episode two days of course i know what you'll be asking next what if we want to use different wall textures you read my mind shall we click into the raycasting sprite and find the single ray script of course we set our texture offset just here and this if you remember is just an offset into the scan list now then if we want to use the next texture don't we just have to add 32 to this number yes of course any multiple of the texture width so easy so change the texture offset by the result of multiplying texture size by well try one did you see that texture change amazing how about number two oh yeah this is fun number three oh man this is a really cool texture thanks to opengameart.org for these amazing textures by the way what an amazing resource yeah so nice it even looks good at lower resolutions too there are simply loads of these to have a look through so if you look at the texture costumes how do we get access to this second row of textures ah no problem just a little maths we need an addition block on the left is the column number of the texture then on the right a multiplication by 480 and the number on the left of the multiply is the row number so now we can access the next row row number one as well see and if we wanted this tnt well that's row one and column one two three four five six seven and there it is woohoo we are unstoppable now i guess that must be the end of the episode what what's that you you want to know if it's possible to have more than one texture on the same level at once oh man what do you like okay so yes it's possible let me quickly show you how it can be done the best bet is for us to start by duplicating the level sprite again yes i know we are getting quite a lot of these aren't we and we'll rename it texture 2. now in the costume editor using the rectangle tool i'll draw a fill shape over all the parts of the level that i want to be the new texture as a hint you may want to group the entire level before doing this as it will make the next step easier ha because now you must delete everything else that is not to be in the new texture see this would have been so much easier if i'd grouped it to begin with right with that done come back into the raycaster sprites code and here we are in the single ray script once more now locate the change texture offset block this is us choosing our texture so we need a new ifelse block and we'll check whether or not we are touching the new texture 2 sprite then we can duplicate the change texture offset block into both the then and the else branches of the if and you see we can now choose between the two textures depending on whether the wall is within the texture 2 area or not and now i'll keep the special texture the same and change the default texture numbers in the else and there i have two different textures visible in game at the same time amazing this is just too good let's find that pillow room oh sweet would you look at that right i gotta try a few more combinations oh nice that's quite alien isn't it and with this back wall texture man wow i'm digging this pairing i think we just need to play with the floor and ceiling colors a bit and this would be amazing i can only begin to imagine what you guys are going to do with this and how awesome your raycasters are going to look once you have texture mapping in there like this one as always you'll find a link to the raycasting studio in the description under the video so that you can share your projects there i can't wait to see them but i am afraid we've come to the end of another epic episode if you enjoyed watching then please smash the like button and if you haven't already subscribe to the channel before i cry you know you want to if you are a keen fan or an educator then please consider joining my channel membership you get all sorts of perks including if you want it access to the finished projects themselves so cool it just remains though for me to thank you for watching i hope you have a great week ahead and scratch on guys you