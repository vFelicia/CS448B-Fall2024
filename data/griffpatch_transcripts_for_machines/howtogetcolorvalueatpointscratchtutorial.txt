hello fellow scratchers question how do we detect the color of a pixel in scratch now sure if we know the color we are looking for we can just ask scratch directly using a tiny costume as a color detector position it at the mouse pointer when the space is pressed and then if we are touching the exact orange color we say orange otherwise excellent that works a treat and we can extend it to add in many more colors but what if we do not know what colors to expect did you know that scratch can display over 16 million unique colors i don't suppose you fancy adding an if check for each and every one right no me neither but there are times when we could really do with being able to do this like if i wanted to pick a color from an image and draw with it we'll be coding that up later today or if you want to scan and manipulate not a single pixel of color but an entire screen now things start to get wild just wait until episode 2 where i will show you some amazing new ideas that have recently revolutionized full screen image scanning in scratch it's mindblowing but we must start simple are you ready for this great let's get scratching so a little bit of red green blue color theory take a look at this little pen project feel free to copy it and have a play i'll put a link to it in the video description you'll see we have these three sliders one for each of the red green and blue color values now when mixed together we can create any one of the 16 million different colors that scratch is capable of displaying you'll see the maths expression for calculating the combined color value is given here we add together the three values of red green and blue but ensure the first multiply red by 65 536 that happens to be 256 squared and green by 256 and the blue stays as it is once summed the resultant colour value can be used in the set pen colour block as we have here or as it happens in a touching colour block too and that is going to be very handy indeed so back to our color detection project we have this tiny sprite its costume is just a simple two by two pixel square centered on the drawing canvas when the space key is pressed this tiny costume goes to the mouse pointer ready to check for touching colors now we can use an if touching color block but instead of using the color picker to choose the color we can create a new variable named color for this sprite only and drop it right into the touching color block like that funky we start by setting this color to zero and then use a repeat loop to cycle through all possible colors 16 million right but we need to be accurate here multiply together the 256 shades of red with the 256 shades of green and the 256 shades of blue gosh yes 16 million 777 thousand 216 colors to test against wow well here goes nothing drop in the touching color check and each time around this loop we change color by one so as to keep trying the next color that's the loop sorted let's drop in a say block for when we find the matching color why not just say the colour value for now and to finish it off we stop this script there's no point continuing this huge loop if the desired colour has already been found okay shall we give this a test mouse over the red hat and press space and it's off you can see the color variable simply flying through the possible colour values nothing has matched yet okay i'm skipping the video forwards and there success this was colour value 15 million seven hundred and thirty eight thousand eight hundred and ninety six haha and it took scratch a whole 59 seconds to find it gotta say i'm very pleased we did find the color but a little disappointed at how long it took but gosh what could we do to speed this up well knowing how scratch's color detection works can guide us to some sweet optimizations it turns out that although scratch can display 16 million colors it cannot actually detect all 16 million of them at all it's not that sensitive therefore testing every color is actually wasteful and unnecessary to show this you'll find that we can still detect every color even if we skip along by 16 at a time let's give that a go trying a green oh wow did you see how fast that was perhaps i was lucky with the color try again with a bright red okay yeah do you think that was like four seconds or whatever it was it was much faster than the full minute it took last time so skipping is good for us so with that initial success and before we go any further let's make our scripts a little more official make a new custom block naming it get color and make sure to tick the run without screen refresh box we'll drop everything from the set color block under the new define script and drop the new get color block from where they came splendid and now that we are getting color values back from our get color script it would be nice to be able to see the color that we've picked we can do this by enabling the pen extension usefully the set pen color block accepts the same color values as the touching color block so we drop that variable in here to match the found color so we can set the pen size to 50. i want to draw a circle at the top right of the screen using the picked color go to x of 210 and a y of 150 should be good then we pen down to draw and straight away pen up so if i click the script there there we go it's drawn in the color we last picked and since we can now see that color we don't need this say block any longer whoops don't forget to join up these scripts and then let's give that a test ah super cool we can click around and yeah the colors are definitely the right ones it's nice to be able to confirm that now so back to our get color script when we skip by 16 here what we are doing is actually skipping just the blue color channel but the green and red channels are just as viable for skipping so i'm really positive we can get this running faster still but skipping the other channels is not quite so straightforward to explain without perhaps starting this script over again so create three new variables red for this sprite only green for this bright only and blue also for this sprite only we begin by setting red to zero and then we're going to loop through all 256 values of red with a change read by one cool we can do the same for green and again for blue great so let's put these together begin with the red outer loop then the green loop goes inside but above the change red block and blue inside that again above the change green block a loop within a loop within a loop if we run that we can see scratch blasting through all possible values of red green and blue and this will be once more cycling through all 16.7 million combinations of the three colors but the color variable is not yet being calculated we need this for our color checks so we need that color maths start by setting color to blue to this we then add green multiplied by 256 and lastly to that we add the red variable multiplied by 256 multiplied by 256 that's 256 squared or 65 536 if you like and that's it that will give us our color value so this will test the color as it was before but note we were previously skipping by 16 and now we've gone back to adding only one to our blue variable so this is why i said previously we were only skipping blue values blue is the innermost color in this loop once again then we should change blue by 16 and of course if we are skipping by 16 each time we don't want to be repeating 256 times any longer work out how many times to repeat by by dividing this 286 by the skip value 16 and safely drop the detection script in before we change blue cool let's run the project now pressing space on a red color and we wait see the red green and blue variables spinning and there we found the color and you can certainly see it as expected that the red component of the color is much greater than the blue and green channels sweet let's try it on blue wow blue is always a lot quicker isn't it it's also nice seeing the color breakdowns so now that we have split apart the different color channels it's easier to put in the separate skips for each of the different colors i have a good feeling that this will really speed things up so i'm going to put in a stopwatch timer so that we can tell exactly how long it's taken just reset timer when key is pressed and then with a new variable time set time to timer at the end let's just confirm the speed for the color red yeah four and a half seconds so can we beat this by adding further skits come down to the bottom of the get color script so simple now we just need to change these two skips but be careful unlike the blue channel the red and green skips must be set to eight scratch is a little more sensitive to these colors than the blue as it turns out and we scroll back up and adjust the repeat loops these are now both 256 divided by eight skips yeah excited to give this a try so can this beat a time of four and a half seconds i'll press space on red and we wait for it wait hold on wait it's already finished uh i think i actually missed it the time is reading zero what the this is outrageous now don't get too excited this doesn't necessarily mean that it's running instantaneously it is still taking some time only the time of reporter is not detailed enough to give us the real speed readout however wow it is so much faster than before right so cool right then um let's talk further optimizations i guess everything we do in scratch takes a little time so these divisions we can simplify 256 divided by 8 is 32. same for this one and 256 divided by 16 is 16. then we have a 256 multiplied by 256 here that ends up being 65 536. who could be careful to put the right number in there 65536 now you may have already thought using the change color by blocks here wasn't that efficient we can replace these with additions the only reason i code them like this is to prevent my lines getting too long we'll need two new additions and then color is red multiplied by that 65 536 and then the green is multiplied by 256 and then finally we add on the blue so that's a little long but not too bad i guess stuff it back into the main script there so that's a little neater but i suspect it won't make it a whole lot faster to get this as fast as possible perhaps we could rearrange these loops to avoid having to do all this maths in the first place it may not be quite so obvious what it's doing but it's worth seeing so we'll go back to resetting the color variable at the top of this script next we bring in each of the three loops a repeat 32 another repeat 32 and a repeat 16. then the color check comes next but instead of changing the blue variable we are going right back to changing the color variable again this is again by 16 so as we now know this will be updating the blueness of the color now to be able to skip greens we will change color by and because greens are multiplied by 256 this would be the skip value of 8 multiplied by 256 except we've already changed color by 16 16 that's 256 already so taking that into account we only move on by seven 256's splendid we can do just the same for the red channel too change color by 7 multiply by sixty five thousand five hundred and thirty six if we test that now yeah that works just as well and it's far more conciser script without the need for any of the red green and blue variables pretty neat so that is our completed script it's perfect for coding up paint packages i'll quickly add some painting scripts now in fact just to show you what i mean we'll just have a when green flag clicked forever loop waiting for the mouse down and then we'll set the pen color to the color yep set the pen size and then pen down we are drawing we will now repeat until the mouse is no longer down and keep moving the mouse around to draw the lines then after the mouse button is released we pin up just before we test this though you may want to stuff a hide block at the top here to avoid accidentally dragging this sprite around the stage anyhow let's test full screen for now here we go i can paint in the current pen color and then pressing a space on a red color and now i can draw in red yay and blue yep any color we can see we can paint with kinda means we can touch up a photo by using our color matching like this it's very fun very fun indeed why don't you drop me a comment under the video to let me know what you could imagine doing with this get color block better still if you create something awesome then there's a scratch studio linked under the video description please comment your project in there and then we can all enjoy seeing what you have made so fun sadly that is where i need to finish this episode now that we have a working color detector we are all set to begin looking at image scanning taking the color of every pixel on the screen and storing it for use later on the problem is image scanning requires us to detect the color of every pixel on the stage and that's 172 000 screen pixels so even a fast color detector like this one will take a long long time to scan the whole screen but fear not we have some amazingly clever scripting ahead of us that will make scanning so much faster you will not believe it well i hope you enjoyed this episode it was really just a grounding and as i say the real fun is yet to come but if you're excited for part two then smash that like button and subscribe and why not click that bell icon so you don't miss the next episode the moment it comes out if like many other scratches you just can't wait to see what's next then you can join the early access channel membership there's all sorts of perks to be had and we'd love to have you on board with us okay that's it from me today i hope you have a great week ahead and scratch on guys you