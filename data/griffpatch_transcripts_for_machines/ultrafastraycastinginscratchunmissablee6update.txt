hello fellow scratchers i tell you what it's crazy what i've been up to this week i've said it before but the best breakthroughs in scratch coding happen when you're just having fun you asked me for image scanning and texture mapping and i said no we cannot do that with a bitmap raycaster well that was so last week this week we're blazing on all cylinders so how is this suddenly possible well stay with me and i'll reveal all with not one but two epic breakthroughs in one video your vaycasters will never have run so fast am i excited you have no idea guys let's get scratching right so load up our raycasting projects it doesn't matter if you're still at episode 2 or you've made it all the way through to episode 5 you can add in the following script enhancements at any point so let's begin by saving this project as a fresh copy for me that is episode six okay so this is all about speed i have quite a powerful pc here so this looks to be running pretty good right well don't forget that we have set the resolution of this project to eight that's quite chunky hold on if i make the res slider visible then we can drop this down to level four right now you can see things are slowing down i don't even let us set res lower than this but the level walls do look better for it it'd be nice if we could run this faster though right hey i wonder what how fast or slow i should say will it run at even better resolutions oh heck looks great but not so fast but better not to be subjective what would help is if we added a quick fps counter so as to get a good measure of the actual render speed in frames per second in the player sprite we need three new variables the first one tick 30 this will keep track of the current time in 30th of a second scratch's default refresh rate make it for this sprite only next up another variable named delta leaving it for all sprites this will record the time it takes to render one frame and finally fps or frames per second also for all sprites this will be our readout of the final frame rate excellent we need to initialize these values setting delta to 1 and set tick 30 to 0 that's the start time just pop these in under the initial green flag script okay scrolling down here's our main game loop we'll add our fps scripts here but in a new custom block we'll name this fps frames per second and add a nice new input named last tick 30 and check the run without screen refresh why not just pop the new fps block in at the top of the forever loop and the input just takes the current tick 30 value super so let's manhandle that into some free space and code up the new fps counter scripts this is nice and easy we calculate our current game time set tick 32 the multiple of timer that's the current time and 30. this value will now increase by 30 every second keeping in time with our desired frame rate now we calculate the delta that's the time between the last frame and this one so set delta to take 30 subtract the last tick 30 value cool hey we can see this working when the project is running at full speed this delta should read one that's because it's taking exactly one frame to draw the screen but if i up the resolution ah now we can see it's taking over four screen update cycles to draw each screen now it's just a simple step to convert this into frames per second we set fps to the round of dividing 30 by delta sweet and there now we have a way of measuring our game's speed hold on did you notice this at some resolutions our walls are mysteriously appearing seethrough to be specific this happens at a res of one and three three and one so if we hope to work at these resolutions and i am super optimistic about the fantastic improvements in speed we're gonna get then we should fix this it's caused by a quirk of the pen extension and luckily there is a quick fix come into the raycaster sprite and find the define raycast script it's all to do with where we begin our first vertical line this x value the glitch occurs at pen widths less than four in these cases we must begin drawing at only whole numbers of x so if res is less than four set x to the round of x simple if we test that now i'll get some enemies behind this wall and wiggle that red slider yes solid as solid as a solid thing smashing but do you feel we are getting distracted from making our uber fast raycasting no no not at all this is all part of the ride so hold on tight there's just one more nugget of code to fix before we dive into the meat of this explosive episode when the frame rate of our project drops have you noticed that not only does a screen update slow down but ah the player's movement also slows down with it man it's like wading through thick to recall in any decent first person game the player's movements have to be completely independent of the frame rate when my game is running half speed this delta value rises to 2. this tells us that we should be moving twice as fast to compensate for the slow frame rate useful so armed with this value find with me the define player tick script here are all our player movement values mostly turns and move blocks we are just going to multiply all these values then by delta turn left by 3 multiplied by delta turn right by 3 multiplied by delta move forward by two multiplied by delta okay this one's negative move by negative two multiplied by delta now watch out on these drafting scripts leave the turn 90s as they are just multiply the move blocks again two multiplied by delta and two multiplied by yes delta yay let's give that a test shall we now normal movement feels about the same that's good we don't want any unexpected choppy movement or to be moving too fast now let's drop the res so our frame rate has indeed dropped but the player's speed is no longer slowed down but we keep on running around even so that's cool of course you may now feel a bit sorry for these enemies in the game as they have not benefited from the same delta speed boost if you have enemies then we can fix this in the same way click into the entity sprite and find the when i start as clone script and we just replace the move 0.5 with 0.5 multiplied by delta so standing back here they come and pull down the res and do the enemies care no they do not they remain coming at me at full speed independent of the frame rate so good but this frame rate come on guys i've promised so much and thus far we are still lagging like bright yellow banana slugs so how would you like to see an absurdly quick win for this we need to be in the raycaster sprite if you look at the costumes you can see we have the single hitbox costume and it's a 4x4 pixels in size this is the costume we fling across the level over and over again as we raycast and each time we ask are we touching the level are we touching a level are we touching the level scratch needs to check all 4x4 that's 16 pixels underneath to see if any of them are indeed touching the level so interesting question what if we reduce the size of this scanner would it have a big difference on the array casting speed but forget trying to size this by hand no no no no i have an awesome trick that i only just learnt while working on image scanning of all things make a new costume and we need a large filled rectangle i'm just going to switch to bitmap and fill it all in i'll name this costume big now in the code tab when the flag is clicked we need a new switch to costume block switching to the new big costume doing this will let us set the size of the sprite to one percent that's really small careful now though drop this script in before you switch back to the hitbox costume okay so this will result in our already small hitbox costume being shrunk down to as absolutely small as possible and then when we use a touching sprite or color block now scratch will always do just that single pixel check that is so sought after genius but does shrinking down the scanner have a positive effect on frame rate let's drop the reds to 4 and c oh wow guys i am still able to maintain 30 frames per second at a reserv4 that's bonkers and even a res of one is still hitting six to seven frames per second that's almost double what we were getting just moments ago now does this come at any cost you may ask and the answer is yes by shrinking our raycasting costume our rays are thinner but also if we skip too fast potentially gappy and gaps lead to rendering errors around sharp corners in our level but the speed hold on though the enemies are always getting in the way i'm going to remove them temporarily just click into the entity's sprite and reduce the spawn counts to zero so even at a resolution of one things are not looking absolutely hopeless speed wise and the res of two is incredibly playable for me but i want it faster is that even possible hey look my famous pillow room is looking different the pillars are so much thinner than they used to be do you know why well this is actually the correct width of the pillars showing up for the first time a side effect of shrinking down the size of the scanning ray costume is that it can now slip past the edges of the level far more accurately so well that's a boon but where was i yes speed the question is what in general makes bitmap raycasting so slow well it's because we are doing so much work at a resolution of one we are firing out 480 rays each on every game cycle and each ray has to travel hundreds of pixels potentially wow well that's like 48 000 pixels to scan each and every game tick crazy no wonder it runs slowly we previously tried to mitigate this by casting less rays using a res of six or eight but this isn't ideal the only other option is to get the rays to travel faster by skipping more pixels perfect for speed but alas resulting in rays skipping over walls and corrupted rendering of our scene but man look at all this wasted scanning in the middle of the room and corridors all this space that we know is empty and yet we still have to scan across it all the time well hold on what if we just used another sprite costume to highlight areas where nothing is happening and then allow our rays to skip fast across these if we are careful to guarantee this area is always at least 10 pixels away from any wall then we can always move by 10 pixels at a time in this area and never hit a wall oh my word that sounds amazing but drawing this floor area could be time consuming except no not at all how about we flip this concept and just add a thick outline to the level costume and that gives us the very proximity we need we've got to try this and we start by duplicating the level sprite again name it level proximity then in the costume editor select all the shapes that make up the level you can do this by dragging a box around them or by pressing ctrl and a on your keyboard now we can simply set the outline width to 20. so just how wide a perimeter has this added to each shape well pen outlines are measured in half pixels so it will be 10 pixels wide and since it's 10 pixels across but the line is centered on the edge of the shape then that's actually only five pixel offset to our perimeter definitely worth bearing that in mind great so into our code we can delete this toggle map script no need for that in this sprite and now we want to code up the special ray skipping scripts click into the raycaster sprite and find the define single ray script yeah here it is and this is the simple repeat loop that scans forward two pixels at a time until it hits a wall right then make a new custom block and name it fast proximity ray and we tick the run without screen refresh okay so it's this little repeat loop we are replacing so we'll pull that out into the new define block replacing it with a call to the fast proximity ray script itself yeah we can test that to confirm it works just the same as before cool that's fine time for some real fun to ensure we get the minimum touching checks we'll rework this script using a forever loop so the logic is this if the ray is not currently touching our proximity sprite then we are safe to move forward by a full 10 pixels now why 10 and not 5 well even if we overshoot a wall by 5 pixels we will still be guaranteed to be within the perimeter of the actual wall if a collision should occur that's handy so if we were not touching the proximity sprite let's repeat until we are touching it that's right the proximity sprite and we continue to move fast 10 steps at a time oh yeah this is what dreams are made of now finally this repeat will end when we have hit the proximity sprite so what do we do we need to back off a little i'm opting for a move of negative six steps this is just in case we have overshot and now we do the detailed scan of the real level but we must remember it's possible we won't find a wall we could just be passing by so we'll repeat for a fixed number of tries say eight times each time we move forward we move by just one step then check if we are touching the real level sprite and if we are then splendid we want to stop this script we are done now if after eight tries we are still not touching the level we can assume we were just passing by a wall and we'd loop around and start fast skipping across the level again yeah i really really like that i am stoked to give it a test so off we go looking fine at resolution eight and now dropping the res down to two oh wow are you seeing this amazing 25 frames per second is that possible this is madness if you'd shown me this a week ago i would have said speeds like this could not be achieved with a bitmap raycaster even at a res of 1 15 frames per second in scratch houses you see what's so great about this is that not only does it give us much smoother walls or the opportunity to run our projects on slower pcs at reasonable frame rates but more than that it means we have the power left over to finally look at adding extra features like textured walls texture mapping something that looked impossible just last week is now looking very very possible in fact yes i've already done it just look at what we've got to look forward to it looks amazing in scratch which is unbelievable but you should see it in turbo warp oh wow this is insanity so yeah i might have gone a bit far with the animating textures and floor reflections but seriously it's just been so much fun our next step in getting here will be to learn how to do the fast full color image scanning that's gonna be serious fun and then after that we will be able to make episode 7 of the raycaster where we will add in the scan engine and implement the wall texturing yeah even animating ones if we want to what a treat are you excited oh yes so please smash that like button and don't forget to subscribe to the channel so as not to miss the next crazy cool episode it's going to be epic if you want to catch it early or need the scripts then why not consider joining the channel membership which also includes priority replies to comments and the fabulous custom channel emoji well that's it from me thanks for watching have a great week ahead and scratch on guys