foreign scratchers and welcome to this fun tutorial on data serialization did someone say safe codes ah yes so useful allowing players to save their progress and enjoy our scratch games for longer also data civilization unlocks the key to adding multiple scenes to our tilebased RPG 2. now to understand what this is all about take a look at this oddly familiar platforming game hi guy to create a safe game we'd need it to take a record of all data values at one point in tons right positions count Live Score whatever is subject to change and here comes serialization where the values are translated and combined into a single long value also sometimes called a data stream and in scratch we might refer to it as a Stave code the most important thing about serialization is that the process is also reversible and will allow us to reconstruct our game at just the same point that we saved it so in this tutorial we're going to learn how to build two very useful custom blocks the right value and read value very cool and you may already have noticed that the save code that we've created is a csva comma separated value except we don't need to use commas we haven't here I've used pipes and you'll often also see spaces used too when appropriate and I say when appropriate because look at this example where we join two values hello and then fellow scratches and if we try separating them with a space delimiter then oh man we can't tell any longer that this was two values at all it looks like three but easily solved right we just pick a better delimiter like a pipe the rule would be never to choose a delimiter that will appear within any of our values but that is not as easy as it sounds and no matter what letter or symbol we choose as a delimiter there's always a chance that it might get used in one of our game variables and completely break our game but don't throw your keyboards out of the window quite yet for escape characters come to our rescue I'll explain more on these shortly so keep watching until the end of the video for the complete picture but gosh I think we'd do well to begin coding this up guys let's get scratching this is going to be very backpackable so we'll create a brand new project for it and the Sprite we will name save code the first thing we need is available to hold the save code for this Sprite only and set it to the empty value good now we make a new custom block named write value and it has an input named text and we can definitely run without screen refresh for this has to be very fast then to join the value of the text input onto the end of the existing save code we set save code to itself save code joined with the new text input value but don't forget to add the delimiter to our pipe character duplicate the line and join that with a pipe now let's see this in action we'll Begin by setting save code to the empty value and then write the value hello if we give that a click you can see that we've added Hello and then a pipe delimiter to the end great so following that by fellow scratches and the number one two three and we see all three values serialized appropriately very good however although this is an okay way of serializing values we will run into trouble trying to write values that contain that pipe character themselves but we'll come back to that shortly for now let's move on we need that read value block to deserialize our values back out of the save code once more make a new custom block named read value and again run without screen refresh now each time we run this it wants to return a value so make a new variable for that named value for this Sprite only and this must start empty we'll want to Loop through the safe code building up this value variable a letter at a time we don't know how many times to repeat yet so Loop forever because we can always break out of it later now let's get the first letter of the safe code except we need to be able to Loop through this A letter at a time so we need a variable to say where we are up to name it save index or idx for short for this Sprite only we begin at the first letter set save index to 1 and then we can get letter save index of save code so that should begin as H perfect hello fellow scratchers we'll store this H in a new variable naming it C for character and that's for this Sprite only too and then we set it okay now we have the letter at position one we change save index by one already for the next loop around but before we go ahead and add this to our value available what if the letter we just found in variable C is equal to a pipe well then we would have found the end of the next value and we could stop this script breaking out of the forever Loop right here and if it's not a pipe then swell set value to the result of joining itself value to our letter in variable C I'm loving that because after adding that letter this repeat goes around again and now we are looking at letter two and three and four building up this value until we hit a pipe shall we give that a test start by setting save index to 1 with a click and then drop in a read value block and click that and there we go value has become the word hello exactly five letters long and perfectly formed if we click the read value block again we get fellow scratches and then again one two three I love that don't you but now that we've reached the end of the save code who wants me to click this block again to see what happens next and boom scratch has gone into meltdown this script is running forever stop the project if you can okay this is not the best result when there are no more values to read out of the safe code it would be preferable to just return an empty value and not carry on running forever how would we do that well rather than just stopping when C is equal to a bar we could also stop when save index is greater than the length of the save code that would make sense right we've gone past the end great well we could do that and it works but that's a bit of an expensive long way to do it it just so happens that any letter after the end of a value will equal the empty value so we can just compare C to the empty value instead see it still works a treat but did you think that that was the best we could do you see apple contains an a yep no surprise there and bar contains a bar yep apparently so that's good good so tell me does bar contain the empty value hmm well that's a tricky one maybe yes it does interesting so I guess every value also contains the empty value so instead of checking whether C is the pipe or the empty value we can just check if bar contains C and that means C is a bar or the empty value perfect so guys everything is working great we can happily serialize and deserialize values so are we done well we could be if we are happy to take responsibility that no value written to this save code will contain a pipe if unfortunately we can't guarantee that then well let's see what happens shall we we wrote three values into the save code so there should be three coming out good uhoh fellow colon hmm scratches and one two three that was four values and we all knew it was going to happen so how do we fix this the answer is using escaping how this works is whenever we ask to write a value containing a pipe we escape the pipe by preceding it with a backslash this tells our serializer to treat the next letter as part of the value and not a delimiter right we're going to require some space to work on this write value script as we'll now need to process it a letter at a time looking out for the pipes sound familiar we'll start at letter 1 reusing the save index for the job and this time we know how many letters to Loop through so we can use a repeat for the length of the text input next up we get a letter so set C to letter save index of but not of the safe code this time we are looking through the text input value okay so now is the time to watch out for that pipe character if C is equal to pipe then this needs escaping and that's as simple as adding a backslash to the save code just set it to itself joined with a backslash followed by the actual character but put that outside the if this way we add every letter to the save code but the pipes are always preceded by a backslash does that make sense finally we mustn't forget to add on the last pipe to finish off wonderful I think that should do it smash that test script up here what the we've got loads of H's F's and ones and this is not hello fellow anything I wonder what I did wrong if you fancy a challenge can you figure out what it was just pause the video and take a look at the scripts if you got it then dropper fixed it in the comments so I can applaud you so why would we be getting the same letter over and over again perhaps because we never updated the save index variable it stays on letter one simply drop in a change save index by one at the end of this repeat Loop right this time we are in for a treat our three values have been serialized Bogue squashed and this time the emoticon pipe is preceded by a backslash nice only problem is now we need to be able to handle reading back these backslashes if I scroll down to the read value script you'll see that the second value we read still breaks at the pipe but worse that extra backslash is showing as part of the value and that's not right we need to catch those backslashes before they are added put and if before the last set value and check if C is a backslash if it is then we throw it away because it's the next character that we're interested in now top two lines in this forever Loop do that job so duplicate them and pop them in this if so if we find a backslash get the next letter instead and join that to our value in its place solid let's give it a test set save index to 1 and then read value good read value again oh boy now this is more like it we've successfully read the correct value including the pipe and the escaping has gone I love it when a plan comes together we are almost done then but are you thinking what I'm thinking we solved being able to include pipes by escaping them with a backslash symbol but doesn't that mean that we have to be careful not to add backslashes to our written values too yes indeed it appears we have just swapped one problem for another yep the backslash is missing but luckily this has a simple solution that fixes everything under the right value script we currently only Escape pipes but what if we escape backslashes too simple as adding an or here but I'm going to do them both using my favorite contains block again if pipe or backslash contains C then c is either a backslash or a pipe interesting so what does that now look like after it's serialized well the backslash has as we expected also been escaped by adding a backslash before it remember any letter after a backslash will make it into the red value so I'm expecting the second one won't be skipped this time around set save index to one and read hello fellow colon backslash scratches so awesome a perfectly accurate result and that is it we've created a very robust data serializer and if I were you I would make a copy of these scripts just as they are in a separate project because they will come in very handy or multiple projects in the future including the next episode of my popular RPG Series in that episode I will demonstrate how to create backwards compatible save codes and efficiently serialize a complex grid list map but just as we end let's just review how we can use these two blocks to create a set code we set save code to the empty value and then write each value to that in turn and then to load these values back out and save code we set save index to 1 and then use three read values one for each of the right values of course it doesn't make much sense unless you actually have some variables to save so let me create some as a demonstration player X and Y and lives each of these I write to the save code then to restore each of these we need to pop in a set block after each read to assign the read value to the correct variable just watch this I'll make these into sliders and then set them to some random values now click here to create our save code then I can switch the slides around but if I click to load from the Save code all three sliders returned to their saved locations awesome often to allow a player to download a safe code We'll add the safe code to a visible list we do this because it's the only way to make the text copyable by our users show list then to make that visible and then to load a save code back just pop it in the ask block finally set save code to the user's answer and hey Presto we can restore our games well I hope you enjoyed this video if you did then please smash that like button and subscribe to the channel so as not to miss the next exciting episode when it drops I look forward to continuing this series with a detailed look of how to construct backwards compatible save codes in the next episode of the RPG series however this technique is super useful for all sorts of projects and I'd love to hear from you in the comments what you have planned for it and that though is the end of this video thanks for watching have a great week ahead and scratch on guys thank you