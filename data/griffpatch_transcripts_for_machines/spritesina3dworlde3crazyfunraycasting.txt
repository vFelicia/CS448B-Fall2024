hello fellow 3d scratchers wow this is contagious there's a real buzz around our raycasting tutorial and i've been inundated with questions on how we can extend it well how about we look at adding sprite entities into the game these come in the form of collectibles and npcs nonplayable characters and are the perfect addition to our already awesome 3d engine i mean look at this cute little guy oh what's not to love there are however two main problems to be solved before we can get results that look like these first we need a little new maths to project a sprite into our 3d world but in doing so we will need to calibrate our raycaster to ensure that everything will line up perfectly this will be our main task for this episode but then in episode 4 we'll move on to support partial and full occlusion of the entity sprites as they move behind walls so important and wow that's wacky cool right but how is it done well you'll have to keep watching to find out so here we go guys let's get scratching we begin where we left off in episode two i'd recommend you make a copy of your project this is episode three and we'll start by tidying up some things come into the raycaster sprite and separate off the setfov and res variables i want all the game setup code to be moved into the player sprite so drag it in there and delete them from this raycaster sprite okay click back into the player sprite and there they are so drag them under the when green flag clicked script while we are here i have a small fix to make i want to set the sprite size to 150. this will avoid us getting weird raycasting issues when the player gets too close to a wall i know a number of you have been having this problem now our game loop this forever loop has become too long i want to split it up so that's easier to manage this is mostly player movement code so make a new custom block naming it player tick checking the run without screen refresh block i use tick to represent the tick of a clock we handle the player movement one tiny tick at a time now pop a new player tick block in the forever loop and stuff the entire player movement scripts under the new defined block however hold on there is one exception come down to the bottom of that script this broadcast raycast is not part of the player movement so separate it off and bring it back up into the forever loop above splendid that's much better now going forward we are going to need to use the player's direction a lot more we already created a variable in the raycaster for this reason but now we'll make it official make a new custom block initialize raycaster and run without screen refresh we'll make use of it before broadcasting raycast this means anything we need to do before the raycast can be put in here for now that will be to set our direction variable so make a new variable naming it camera dir dir for direction for all sprites and simply set it to the direction of this sprite that is the player so as i said we already kind of did this last episode so click into the raycaster sprite here we first set the direction of the player so we can replace that with our new camera der variable and then and here we go this dir dir variable is the one we set up last episode we can remove that and scrolling to the define single ray script all the dir variables can also be replaced by camera der right you know what let's give that a quick test it's always good to see that everything is still in working order before we continue and yes it is phew that's always a relief so can we start bringing in other sprites to our game well not quite yet since the project is running come over to a wall and i'll show you why now remember how we fixed the problem where the walls would warp away from us at the edges of the screen well do you see what i am seeing with the fov the field of view slider pushed to the max we can clearly see that the walls are now warping towards us did we go too far with our fix no no this is actually a completely different yet similar looking type of level distortion but until we fix it we will not be able to accurately place our entity sprites into the scene so what is going on here well here's our player and we happily begin raycasting firing out our rays each one evenly spaced out from the one before it also it appears until we extend these rays onwards to collide with the wall ahead and behold the rays do not hit the wall evenly spaced at all the gaps between the middle rays are far smaller than the gaps between the outer rays this gradual spacing out of rays is what causes our straight lines in our level to appear curved to fix this we need to recalculate the direction each ray is fired out such that the rays become equally spaced as they reach this wall if we think back to our raycaster scripts you'll remember we have a variable x that starts at negative 240 the far left of the screen and as we raycast it moves right across to 240 the far right this will be very useful take this rightmost ray we know that when x is 240 the angle of our ray is at its maximum value and that is set by 5 divided by 2. okay great because given this using trigonometry again thank you wikipedia we can calculate the distance to the wall it will be dv equals 240 divided by tan the tangent of fov divided by two but hold on there didn't i just make up this wall how can we be calculating the distance to it and so what exactly is this dv distance we have calculated this imaginary wall has a special property in our 3d scene remember how perspective causes objects to appear smaller the further away they become well there is a point where the size of a wall in pixels on our level would be exactly the same size in a 3d scene a one pixel to one pixel ratio the magic perfect distance away and that is exactly what we just calculated dv is that distance this is super useful to know because it finally will allow us to size objects precisely without calling for guessing numbers like the large 4000 value we used for wall heights you'll see soon enough but i digress right now what we can do is to take any other value of x like 120 for example and use a little more trigonometry angle equals the arctan of x divided by dv that's a tan and now we've calculated the direction required to fire out array to hit the x value perfect you see those math lessons really were super useful okay let's do it click into the player sprite and find our initialize raycaster script we need that new variable dv making it for all sprites then following the math we just went over set dv to 240 divided by the tan of fov divided by two great now click into the raycaster sprite and find the when i receive raycast event since our direction will now be calculated from x we can remove the point in direction block from here and scrolling down to the define vaca script we can also remove the initial turn left block and the turn right block these are all going to be replaced by a new calculated point in direction block start with an addition and we point the same way as the player with the camera der variable and here we go using our clever maths the arctan atan of and a division block we divide x by dv oh wow so much explaining for such a little bit of code right but that should be it shall we test it out well the good news is the scene is still drawing even though we completely changed the angles of the projection what's more the walls are looking pretty straight don't you think let's change that field of view variable to really check this out oh my word that is amazing what a change the lines are now completely straight no warping in sight trigonometry saves the day that's beautiful and that brings us to an interesting point why does changing the field of view cause all the walls to come closer together without also affecting the height of the walls well that's a good question because it should so let's fix it scroll over to the define single ray script and down to where we are setting the height variable here remember we added this 4000 value to represent the height of the walls i said it was a large value and it was tricky to explain why well this value is related to the new dv variable we just calculated if we drop dv in on the left this now will result in a wall with the same height as a one pixel wide wall drawn in the level costume and that's too small though so let's multiply it by 10 10 pixels and now width and height are linked so i'm dead excited to show you how that changes how the raycaster looks here we go find a wall and then slide the field of view up and now suddenly things make so much more sense wow what the field of view slider now does is control the zoom of the camera it can go from wide angle to telephoto in the blink of an eye and that's crazy cool don't you think this opens up lots of opportunities for exciting game mechanics i can just imagine it being used for binoculars or a telescopic lens wow that's so fun more importantly though this now means we can move on and try to bring entities into our game yeah delay the foundation click into the player sprite and find our forever loop after the broadcast raycast add another broadcast with the new message entity tick yeah so this will run after we've done our raycasting so just as we have one sprite to represent the player on the level map and another to do the 3d drawing so we will now do the same with the new entity click to paint a new sprite and name it entities and just like the player we need that little hitbox costume click into the player sprite and drag a copy of the hitbox costume into the new entities sprite oh man that scratch gooey does jump around a lot sometimes back into the entities sprite again we can delete costume one that's the only costume we need right now so click back into the coding tab when flag clicked let's keep things stable with a set rotation style two don't rotate then size the entity up with a set size to two to five to twenty five percent that will stop them clipping into walls later on now to position the entity on our level i'm just going to quickly start and stop the project there now the entity is sized and we can easily drag it around the stage a good place to put it would be right in front of the player so that it will be visible as soon as the game starts up once positioned drag in a go to xy block and that will fix the entity in place great that's the setup done now let's handle the entity tick event when i receive entity tick this is broadcast after the raycaster has drawn the level what we need to do next is take the entity positioned on our stage and somehow project it into our 3d scene doing this requires nothing but a small amount of clever maths but luckily each step is quite logical and so let's break it down step one we want to view the entity from the player's point of view we do this by subtracting the player's position from the entity's position and that places the player right at the center of the action next we rotate the view so that the player is facing directly forward nice because that gives us everything we need to redraw the sprite using the same 3d maths used for our raycaster that is an x position and a distance but just rewind one step how exactly do we rotate the scene ah you notice that okay another visit to wikipedia needed so we have a point at x and y we want to rotate it by degrees counterclockwise around the origin that is the player the new position nx ny is given by the following awesome formula nx is equal to x multiplied by the cosine of der minus y multiplied by the sine of der and ny is equal to x multiplied by the sine of der plus y multiplied by the cosine of der brilliant a little scary but brilliant okay then let's try and plug this all together make two new variables vx for this point only and v y also for this sprite only we begin by calculating the position of the entity offset from the player so set vx2 subtract x position subtract the x position of the player and similarly set v y to y position subtract the y position of the player okay now for that rotation maths make a new custom block for the job we'll name it rotate view and add a numeric input of x and another one of y ensure to tick the run without screen refresh now pop in the rotate view block here and feed it with the vx and vy variables great so now we can concentrate on rotating these x and y inputs by the camera der variable we'll reuse the vx and vy to hold the rotated position so set vx2 and here we go subtract and we need the cos block this will be x multiplied by the cosine of camera de next duplicate the math so that we can write y multiplied by the sine of camera der that's it x multiplied by the cosine of camera subtract y multiplied by the sine of camera wow that's exciting now we need to do something very similar for v y so set v y to and this time drop in now careful now not a subtraction but an addition block this time now we can duplicate the cosine and sine blocks and pop them down below into this addition finally we change the left cos for a sine and the right sign for a cosine because oh man it would be too easy to get this bit wrong so check over this a few times once you're done to ensure we get it right well we are close now all we need to do is apply the perspective maths to visualize this in 3d but hold on there we don't want to do that in this sprite it's important for this sprite to live on as the entity positioned on the 2d level we'll use a completely new sprite to do the final 3d drawing so make a new sprite now this is going to be such fun what costume will represent this entity in our level i'm thinking um nano might be a fine character because they have such a great range of expressions why so serious nano if you want you could choose a sprite that is a collectible or an npc or whatever you want to bring into your game it's just too fun so now making sure this sprite is just the right size will help us no end when bringing them into the game to do this first we'll make sure to group the whole sprite select the whole costume and click the group button next use the rectangle tool and draw while holding down the shift key a largish square that completely covers nano like so this will be our sizing guide check the resultant size over here and now simply resize the large square until you get the size to read roughly 200 by 200 pixels slightly bigger is better than smaller there we go perfect now pay attention here once sized we must drag the square until it snaps perfectly into the center of the drawing canvas this is very important if you want your sprites to appear at the right location in the game click to send the square to the back there you are nano sorry about all that right the idea of this purple box is to inform us where the floor and the ceiling is in relation to nano we should therefore move nano so that their feet are on the floor that is the bottom of this square and then we can size them as you see fit it's worth noting that the middle point of the canvas represents our player's eye level so that gives us a way of judging size better i want nano to appear smaller than us so i'm sizing them below this midpoint and after resizing always reposition the entity to be in the center and touching the floor splendid this is going to be so cool now rather than deleting this square afterwards just select it and change its fill color to transparent so that it's still there if we need it cool delete costume one to tidy up and oops i never named this sprite sorry about that give it the name pen okay let's code when i receive a new message paint i like the sound of that first we need the distance from the camera so make a new variable distance for this sprite only and set distance to yeah we need that of block from the sensing category select entities on the right and then we choose v y on the left this is the rotated position of the entity specifically the distance from this we can use perspective maths to calculate how tall the entity needs to be drawn on the screen make a new variable height for this sprite only we use the exact same mass that we use for drawing the raycast walls here so set height to 10 this is the same height we use for the walls multiply that by dv divided by distance there that's our perspective calculation done we can just pop that into a set size block there set size to height next up we position the sprite on the screen go to x y the x position needs scaling for perspective too so duplicate the maths from the set height block but we need to change the 10 for the vx variable of the entity pop it in on the left and make sure it's referencing the vx variable this time are you still with me it's a bit fiddly but i'm sure you can do it lastly the y position that's always zero since we have no up and down movement at this present time and hey that's all the maths all that's left to do is to make sure we broadcast this paint event click into the player sprite and find the game loop under the green flag block bring in a broadcast block and broadcast paint as the last event in this forever loop perfect we are ready to test run the project haha there's nano that's an awesome site and they're right where i'd expect them let's try looking around oh yeah they appear to be holding their position very well let's move around a bit oh guys this is really awesome the position is spot on all that work fixing the camera projection has really paid off this is terrific i cannot understand why this hasn't brought a smile to nano's face because to me this is really fantastic stuff hey watch this you'll like it if we click into the player sprite i want to make the 2d player visible so alter the set ghost effect to be zero and now we do the same on the level sprite ghost effect to zero now in the entity sprite under the sensing category use a set drag mode block to set the entity sprite to draggable what does this do for us well run the project and now when we're running full screen we can drag the entity on the stage and watch them get moved around in the 3d scene oh man this is fun we can put them anywhere we want and then go and take a look to see if it all matches up which of course it does yay you can start to see how we're gonna be able to make these entities move around the level right but i guess you've seen our next stumbling block haven't you although positioned correctly this entity is always drawn in front of all the level walls even when they should actually be fully or partially hidden behind them somehow we're going to need to bring some of these walls in front of nano and that that is sadly a task we will have to put off until episode 4. and wow it's going to be awesome we'll not only be integrating the entities and raycasting code together but we'll add depth sorting to the mix we'll give the entities their correct brightness and of course ramp up the number of entities to really fill this level with fun if you enjoyed this episode and are pumped for part four then smash that like button and subscribe to the channel so that you don't miss out on the notification bell when the next episode goes public and of course if you can't wait then there's the option of joining my early access channel membership where members get to see the videos as soon as they are made before everyone else well that's it though thank you for watching have a great week ahead and scratch on guys you