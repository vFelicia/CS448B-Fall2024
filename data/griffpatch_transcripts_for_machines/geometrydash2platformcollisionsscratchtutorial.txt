hello fellow scratchers I'm griffpatch welcome back to part two of our how to recreate John 2 Dash in scratch series whereas episode 1 focused on creating that scrolling level this episode is where it gets really fun as we introduce multilevel platforming me working the players jumping mechanic support for Gravity find out how we handle collisions with the floor ceiling and walls and how to avoid those unexpected scratch glitches oops no problem we will fix that too yes I've got oodles to teach you today so I hope you are ready for some serious fun guys let's get scratching start by loading up our completed projects from episode 1. but before we add anything new it's worth going to the file menu and saving this project as a new copy now I'll rename the new copy as episode 2. we do this before every new episode so that if we make a mistake we always have a backup of our work from episode one to go back to excellent and here we go let's begin by adding some platforms to our level these want to look something like this a grid of black squares now how I create these is to click into the level Sprite making the Sprite visible on the stage and then in the costume tab make a brand new costume this means we can see the exact size of the costume that we draw set the fill color to Black and the outline color to Pure White now that's important as white will be our solid Collision color now keep the width set to 4. then we use the rectangle tool to drag out a square while holding the shift key that is nine by nine grid squares so size then adjust the result until it reads 38 by 38 pixels perfect let's place it into our level click copy next duplicate the first level costume and we click paste and there it is we can bring it down to sit on the ground by dragging or nudging it with the arrow keys on our keyboard to change this into a grid of black tiles make sure we click on the selection tool and then hold down alt and shift before dragging the platform to make a perfectly aligned copy refining the position afterwards using the up and down arrow keys now what's really cool is that if we select both of these shapes together by dragging around them then the alt shift trick still works and duplicates both at once aha this trick can be repeated on a bigger and bigger scale allowing us to build up very large platforms really quickly cool right okay so that should do for now let's delete that last costume and let's see how this platform looks in the game smash that green flag here it comes ah well of course what did you think would happen our jumping code from episode 1 has no concept of a platform or what to do with it should we Collide so the game continues as if it didn't exist not a problem stop the project then make sure to make the level Sprite visible on the stage because we're now going to talk about jumping and gravity our previous jumping scripts can be found in the player Sprite over here and this really was the most basic jumping script ever we can press space right now and see the player move up and then down on the project stage but everyone knows that when we jump the motion the player is expected to follow is an arc the colliding with a platform should then break the fall well okay then delete that old jumping code there to allow us to simulate gravity we need to keep track of how fast our player is falling so make a new variable name it speed Y and declare it for this Sprite only that is the player Sprite okay let's have some fun and simulate a jump bring in a set variable block setting the new speed y variable to 28. now that should represent quite a fast upwards movement but over time they should be pulled down by gravity so separately we change speed y by and let's try a value of negative four as the gravity in Geometry Dash is really quite strong finally we actually move the Sprite using a change y by block and drop in that updated speed y variable great now we can test this by clicking the second change y script to run it oh wait okay so that didn't jump and that was my fault as we should have clicked the set speed y script first to actually set speed y to 28 to initiate that jump whoops and then clicking the update script launches the player upwards so keep clicking the update script and we can watch there go up slow and return to the ground in a smooth Arc very exciting all we need to do now is prevent them from passing through the level when they touch it first off we need to detect if a collision has occurred if we are touching a color and the color that we chose for solid collisions is pure white then great we have collided we don't want to stay this way so we should lift the player Sprite up until they are no longer colliding with the level we can do this with a repeat until block repeating until we are not that is we are no longer touching the color white and all we do is move the player upwards a little at a time using a change y by one pixel this will repeat over and over until we are no longer touching white it's the perfect time then for a quick test so hit that change y script again click and there you go do you see the player drifting slowly upwards until they are no longer in contact with the floor yeah of course after a collision we really want to reset the player's speed y to zero since the down with velocity has been stopped by a collision well not a couple of times and you'll see the speed wise now more under control great well we can try a small jump set speed y to 28 and here we go up and down oh dear I clicked the script again while it was still running and doing that actually stops the script rather than starting a new one let me try that again up and down and good the Collision is fixed but this is still a little ugly I mean who wants to see the player dipping below the ground like this actually in the game not me it would be much nicer if all this fixing up of collisions could be done without the player of the game seeing it happen at all the problem is that whenever we loop around like this scratch assumes we are creating an animation and it refreshes the screen here each and every time we loop around what we want to do is tell scratch that this bit of code is to be run without refreshing the screen and it just so happens under the my blocks category if we make a new block let's call it move out of level we have the option to run without screen refresh well how about that so click OK and then we can attach this new defined block to the top of the code we don't want to animate then having defined these scripts as move out of level we can simply drop the new block inside that if here to have it run whenever we detect a collision let's see how that looks just click once to set speed wide 28 for a new Jump and then start tapping the change speed y script up and down and boom we no longer see any overlap or the dreaded rising up of the player it all happens in a single screen refresh so in effect it's instant now that is cool we can also try it elsewhere on the screen and yeah it just works as long as we are touching the color white okay then let's see if we can get this gravity into our game if we look at this when flag clicked script we currently have a wait until touching color block now this is waiting for the player to hit Spike what we want now is to run some scripts while we are waiting so we'll split the script here and first we'll make sure to reset the player's speed y not 28 but to zero this ensures we don't begin the game jumping or falling and then we'll make our game Loop repeat until and again we repeat until we are touching the spikes color that isn't white it's the offwhite yellowish color if you recall that means we no longer need that wait until block and then we can reattach those end of game scripts below the repeat cool right these gravity scripts now we could bring them directly into this Loop here but for clarity I'm going to make another custom block to keep our code nice and readable we'll name it player movement and we might as well tick the run without screen refresh as this all wants to run in a single animation frame so these scripts are the player movement scripts and we can make use of that block in our game Loop here perfect it's testing time then so hit the green flag and off we go okay wow let's play that again so this is good the player is sitting on the floor and he's not falling through it but when we smash into a wall boom we are teleported up onto the top now that's actually expected as we coded all our collisions to be fixed by raising the player up until it was no longer colliding what's really sweet though is how the player neatly falls off the platform at the end that looks awesome and yeah spikes still work too great now did I mention we can't jump anymore yeah we did delete the old jump script after all right first question when should the player be able to jump obviously not while they're in the air yep it's when they touch the ground or we could say just after we detect a floor collision and that code is here so after moving back out of the level drop in an if check and we'll look for when the space key is pressed I've had a lot of people asking how to make this project mobile friendly so let's also bring in a mouse down check that's true when the mouse button is clicked or this screen is tapped on a mobile device we'll need an or block as we don't mind which of these is pressed either will make us jump and then set speed y to 28 just like we did before when testing gravity Let's test it squish that green flag and woohoo we are able to bounce off the floor and off platforms to ha can't say I've got any better at avoiding those bikes actually with the new Gravity and jumping mechanic it's way more of a challenge jumping the triple spikes I'm not even sure it's possible ah challenge accepted oh my gosh much too early yeah too late early again come on oh man I've got to nail this one yes yes I knew it I am the master or perhaps I'm just too easily pleased okay though enough of that we've sorted floor collisions but what about ceiling collisions now if I click into the level costumes and just temporarily move our platforms higher up watch what happens if we jump into them from Below yeah rather than bumping our head you fly up through the platform instead and we can't be having that now obviously it's the same problem again that every Collision is fixed by moving the player upwards until they no longer are colliding the solution then would be to switch things around when we are traveling up into a collision and that is when the player speed y Sy is greater than zero and then instead we move out of the Collision downwards sounds simple enough okay so this existing code is handling a downwards Collision we can surround them with an if else block like so and the condition is that speed Y is less than if speed Y is less than zero a downward Collision therefore we can move out of the level upwards as before but if we are not moving down then we must have been moving up into the Collision now rather than rewriting lots of similar code we'll reuse the same move out of level block again but we won't include the jumping code on the end since we don't want to allow jumping after colliding with the ceiling not in this game mode anyhow we just need a way to tell the move out of level block which way we want it to move out of the level upwards or downwards right click on the Define block or long press it if you're using mobile and then choose edit then we can add a numeric input and give it the name d y That's the amount to move in the y direction and so rather than changing y by one we can now replace that with the new Dy input variable then looking back at where we use this move outer level block the first one can be told to move upwards out of a collision by setting the input value to 1. and the second one when we bump our heads can move downwards with a value of negative one does that make sense pretty neat right so watch this ground collisions are working and bumper guy head no longer bounces us through but sends us smashing right back to the ground excellent that is a relief you know I feel like we are making really good progress here the collisions are almost done so where do we still have a problem yep it's with face on collisions in this scenario we don't want to try to pop them up or down out of the level no this should be game over right there but telling the difference between wall ceiling and floor collisions is not actually so straightforward for example this Collision is it a floor Collision or a wall Collision I guess it all depends on how we got here and usefully our speed y variable can tell us just that so in this example if we are able to move the player out of a collision within the previous speed y range then all is good it's a platform Collision but if we can't move them out within that Speedway range then we can assume this was a wall collision and it's game over dude now before we fly into trying to code this up there's one more gotcha that I have to mention sometimes we'll find that our hand drawn levels can be how should I say it a little wonky oh God forbid scratch itself rasterizes our perfect platforms misaligned yes that does happen too well this kind of collision also ends in here game over not cool weird do well then to widen the allowed safe Zone just a tad Say by 4 pixels above and below and this extra leg room will allow us to safely skip over these small problems and make our games far less frustrating for the player nice let's do this okay find the Define move out of level Block it's going to be easier if we start over first allow for that 4 pixel safe Zone by moving into the collision by 4 pixels that's a change y by and then we multiply change y by negative 4 multiplied by d y then we begin our Loop this time with a repeat block we need an addition and the speed y now that's the distance we need to cover the safe Zone except hold on this can be a positive or negative value depending on if we're moving up or down luckily though we have the ABS block for this situation this stands for absolute and it happily flips any negative values back to positive ones negative eight becomes eight and positive 4 stays as four very useful indeed so drop the speed Y into that and in turn that goes into the addition now we just need to extend this y Distance by the four above and four below that's totals to eight pixels great within the loop we continue to change y by d y as we did before but need a new if to check for when we are no longer touching the color white simply we use the not touching color on the previous script well now if this is true we must be out of the Collision hurray so set speed y to zero and we are done so conclude here with a stop block choosing to stop this script that will break out of this repeat Loop and end the entire custom block however if we don't find a point of no Collision within this repeat well then that is our game over now I don't want us ending the game sunk slightly into the floor so we can tidy this up just a little by duplicating the change y script from the top of this and dropping it down here at the bottom negative four multiplied by d y there and lastly broadcast a new message game over nice I'll just discard what's left of the previous script as this one is done almost ready to test we just need to handle the game over event so scroll over to our main game Loop here it is the script below the repeat are the existing game over scripts to run these from two places Spike collisions and wall collisions we can separate them off and then reattach them under a when I receive hap lock for the game over event finally drop another broadcast to game over after the main game Loop ends here and we are done this is super exciting guys smash that green flag here we go straight into a wall and oh boy yes that was most certainly game over and that too brilliant floor and platform collisions are still working fine and jumping down into walls is detected correctly oh but hold on do you see that on game over the player should stop in their tracks as the level scrolling slows but now that seems to be a little off as the player Glides out of sync with the level nasty now this has been caused by us moving the game over scripts from the main green flag script into a separate broadcast receiver I shan't go into the details now exactly why this is but to fix it all we need to do is move the change Y block up above the change scroll speed block within this repeat Loop and the problem should magically go away and yes that's it much better no more sliding around on death hey if there's any of you scratches out there who would like a stab at explaining why this fix work then I'd love to see your answers so drop your comment under the video script execution order is probably one of the hardest things to grasp in scratch and once mastered really frees you up to finally take control of your scratch games oh my I even managed that triple jump again woohoo well I'm sad to say we are drawing to a close on this episode we've reached a point where given a bit of time and effort we could actually start to build some pretty neat Geometry Dash levels but why we might even try to recreate the beginning of the famous stereo Madness but wait with patch I hear you say there's still so much left to do yes I know we need to add those beautiful traveling particle effects get the player rotating how could we have not covered that yet not to mention creating a start screen and a method of restarting the game when we die he has much to do but wow haven't we come a long way in just two short episodes guys if you enjoyed this video please would you carefully and respectfully feed that mini thumbshaped creature lurking under my video it's incredibly hungry and a simple clip will do them the world of good also so as not to miss my next exciting episode please consider subscribing to this Channel and checking that cheeky Bell icon to ensure you are the first to know when a new video drops let me know how you're getting on in the comments under the video and be sure to have the project added to the official scratch studio also linked under this video that just leaves me to say thanks for watching have a great week ahead and scratch on guys