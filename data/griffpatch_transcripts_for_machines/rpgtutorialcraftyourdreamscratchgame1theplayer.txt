hello fellow scratchers do you want to make a zelda style rpg in scratch well this is the place to be if you've managed to catch any of my rpg devlog videos then you'll know what's in store and i can tell you it's really really exciting not only do we have scrolling tiled maps but the tiles are layered support height and depth we have a fully animated player sprite as well as animated tiles to bring your levels to life we'll implement clever per tile collision regions so that we can get up close to our levels and also allow us to move in front and behind tiles how cool is that and wow don't get me started on the awesome builtin level designer that's just crazy cool have you ever seen anything like it in scratch before and look at all these beautiful tile costumes we have over 500 of them what that's crazy a huge shout out to the pixel artist oh lobster for these and you can find all of them in a scratch starter project linked in the description under this video however if you prefer to use your own costumes or source them from elsewhere then that is just great everything will work just fine now obviously we have a lot of fun things to cover in this series but we have to start somewhere and today in episode one we will be focusing on the player specifically adding a solid game loop to carry us through the entire series and then player controls and movement getting that diagonal movement to work just right not too fast and not too slow is the real trick stay tuned to learn how we fix that and finally we'll add in that lovely player animation getting things looking really pro costume naming is key so make sure to stick around until the end of the video to learn my clean and concise coding tricks are you ready for this i know i am guys let's get scratching we'll begin by checking out the starter asset project click the link in the description under this video or you can find it by visiting my griffbatch tutor account on scratch the first time you visit the page you'll need to give it time to load as it's got lots of assets and i mean a lot of assets in there this time if we look inside we have a player sprite no scripts but plenty of very cool costumes these ones i downloaded from opengameart.org and all the credit goes to the user virial veriel very l you'll find all the costumes are designed to face in four directions up down left and right and they are all animated beautifully yeah really cool these we'll be using today but there's a lot more in this asset project to look forward to the tile sprite alone contains 500 costumes wowzers each 16x16 tile was hand drawn by the awesome pixel artist oh lobster and wow is he good so a huge shout out to him for making this resource available to us thank you man moving on you'll find i've made a pleasant pretiled background sprite full of grass yep useful then we have a neat font sprite you can refer to my text engine tutorials to learn how we are going to make use of this later on in the series lastly we have the asset project thumbnail yeah we won't be needing that right so let's hit remix and we're ready to go this is the scratch rpg episode one the first thing i'm going to do is just click on the thumbnail sprite and hide it oh wow look at the size of that player sprite click back into the player now shall we do some coding when green flag clicked we want to set things up so start by setting the sprite size to 200 and then click that script here we go so the first thing you'll notice is that all the graphics in my rpg have that retro pixel art vibe a size of 200 means that we see all the details that's so cool next up we'll make the player face us switch costume 2. so now is probably a good time to talk about how we've named these costumes the first part of the name indicates the action being performed by the player idle means they are just standing still the next number indicates the direction they are facing i've used the standard scratch directions here so 0 is up or north if you like 90 is right 180 is down and negative 90 is left just the same as the direction numbers here so to face the camera we want the idle 180 costume back in the code switch to the idle 180 costume so that covers size and costume next up we need to talk about the sprite's position for single screen games we have the luxury of only having to consider a sprite's position on the scratch stage but for scrolling games we need to keep track of the player's x and y position on the entire level map for this reason we have to create two new variables player x full sprites now as a helpful hint you might notice that i always use fully uppercase letters in my variables that are for all sprites and now we need to create another variable player y also for all sprites we'll start the game by setting player x to zero and set player y also to zero great for now that's the setup done next up we want to begin our main game loop this is where all the action takes place the controls are checked and the player is moved and then we update the screen one thing you learn real fast when coding game engines is that we'll always need a way to start pause stop and restart these game loops so broadcast a new message start hyphen game loop it's nice when the event name is pretty selfexplanatory i'll drop in a when i receive start game loop in preparation for all our coding but before we go on let's consider the stop game loop code when i receive a new message stop game loop and we can simply drop in from the controls category a stop block and we want to stop other scripts in sprite if ever we broadcast stop game loop we can be sure this will do the job cool so let's build the main game loop bring in a forever block the only thing that will stop this loop is that stop game loop event now we are going to use the same broadcast system we've used in many of my other tutorials here the first broadcast is a new message of tick player and the second is for paint player in summary this will run the tick player scripts first and then the paint player script next before scratch then hits the end of this forever loop and the frame is complete at this point the game screen updates to show the changes before this loop starts all over again the benefit of using this broadcast system is that it also allows us to synchronize our game loop across all the sprites in our game right now we are only working with the player sprite but later on we'll be adding the tiles npcs and who knows what else so we can look forward to all of that in future episodes quickly tidy up then and we'll begin by coding the when i receive paint player it would be hard to work on the rest of the scripts if we can't see the player painted to the screen and for now until we actually have a scrolling level we'll use a motion set x position 2 and the variable player x and we have a set y 2 and the variable player y what this means is if we were to switch the player x reporter to be a slider variable then we can run the project and tada the player's position is linked to the player x variable this shows that the game loop is working perfectly we can do the same with the player y to check that it's working too that's great also if we stop the project without the game loop running you'll see that the sprite's position is no longer updating so our next job will be to add keyboard controls for our player when i receive tick player and yes first we detect the keyboard controls so make a new custom block to keep our scripts tidy name it player controls and tick to run without screen refresh have you seen my crazy cool joysticks tutorial if not then it may be worth giving that a watch you may even want to add it to this project the reason i ask is that we need to implement fourway movement and this is best described by the movement of a joystick a joystick has two axes of movement joystick x is for left or right and joystick y is for up and down we'll replicate that in scratch using two new variables joy x joystick x for this sprite only and joy y also for this sprite only for starters let's set joy x2 from the sensing category key pressed we need to look for the right arrow key if you run the project here you'll find that the joy x variable now toggles to true when the right arrow is pressed and false when it's not now many times players will want to support the wazz keys wasd as well as the arrow keys for that we can use the or block and set joy x to key right i repressed or key d pressed now pressing either of these keys causes joy x to become true that's excellent so how about the left key duplicate the or block and change the keys to left arrow and the a key and here comes the fun bit we change joy x by zero subtract the left or a key presses the interesting thing about these true and false key presses or in fact any true or false values is that as soon as you use them in calculations the true value gets counted as a 1 and the false values become 0 so if we press the left arrow only then this second change will subtract 1 from joy x looking at the running project pressing right gives a value of 1 and left minus 1. perfect let's do the same for joy y set joy y to the key up arrow or the w key changing joy y by zero subtract the down arrow or the s key great we can just test that works okay by slapping that green flag and confirm we can toggle the left right up and down keys and the w a s and d keys nice work it won't be hard to get our player moving around from this come back to the when i received tick player script and we'll make a new custom block naming it try move with an input named dx and another d y this is the distance we want to move in tick to run without screen refresh so we'll make use of this new block right away right after checking the player's control keys and pass in the resultant joy x and joy y values now this define try move script later on we will need to perform collision detection and the like in here but for now let's simply move the player without worrying about such things change player x by the dx input and of course change player y by the d y input splendid smash that green flag holding down any of our direction keys should now send a player well it's fair to say they are hardly hurtling around the screen but it's fantastic that we've got movement in all eight directions that including diagonals now do check each direction of movement if any key moves the player in an unexpected way then now is the time to double check your scripts before moving on if you want a bit more speed to your player's movement and i certainly do then we'll do this in the tick player script just multiply joy x by 5 and multiply joy y by 5. now here's an interesting thing you may have noticed while playing other top down games on scratch that moving diagonally can make your player move considerably faster than just moving left or right alone this is because if we consider our joy x and y values before we added our multiply by 5 moving up or right individually moves at a distance of one pixel but when we move both up and right at the same time the distance traveled is actually closer to 1.4 pixels and that is 40 faster to fix this we need to normalize the joystick movement speed to account for these diagonals and the way we do this is to divide the joystick x and y by the distance a spot of pythagoras will give us that and there that looks perfect back in our code then make a new variable joy dist for distance and for this sprite only then set joy dist to the square root of and bring in a sum operator and two multiply blocks and we want joy x multiplied by joy x and joy y multiplied by joy y cool pop these in either side of the addition that gives us the true distance and we can test that by running the project and checking what values appear when we move around the screen we should see zeros and ones and 1.414214 for the diagonals also see how the distance is never negative even when moving left or down that's quite useful actually so come back to when i receive tick player script bring in and if else around the try move there's no point now trying to move the player if no key has been pressed and now we can easily check for this when joy distance is greater than zero why not just give that a quick play through to ensure that nothing has gone awry and yes i can still move around just fine okay so next up we are going to be dividing the joystick movement by this distance the great thing about normalizing is that whenever you divide something by itself it always comes out as one so before we move set joy x to the result of dividing the existing joy x by joy distance and we do the same for joy y setting joy y to the result of dividing joy y by joy distance right that's how we normalize shall we give it a test oh this is great the normal x and y movement is unchanged but the diagonal speed has been rained right in and we can travel at a very consistent pace what do you think it's funny though but many people can actually find this change feels like it's gone too far i guess we are so used to the faster diagonal movement that the reduced pace can feel a little bit sluggish so much so that even games like zelda actually implement a special diagonal speed that is just that little bit faster than what we have here we can do the same if you like just by popping in an if block before the set joy x here check if joy dist is greater than one and if it is then it's definitely a diagonal so to compensate we set joy dist to 1.25 that's instead of the 1.4 value give that a test and see what you think now yeah see the diagonals are just a little bit more speedy if it's good enough for nintendo it's good enough for me okay we are making great progress what would be cool though is for us to next begin using our players costumes if you look in the costumes tab the first four costumes are for our player idly facing north east south and west their costume names begin with the word idle followed by the direction 0 90 180 and minus 90. the next costumes are for walking and no surprise we find walk 90 as the first costume name for walking right this is followed by five more costumes six in all to animate our players walk cycle so to make use of these sprites we will need to know what direction the player is facing back to the code then we'll need more space to code this in so take those movement scripts out of the tick player receiver and wrap them in a new custom block player movement and tick the run without screen refresh block pop those scripts in the define block and make use of the block from where we pulled it great so to tell what direction we are facing use an if else block and check if joy x is less than zero that means we're facing to the left make a new variable player der for direction for all sprites and set player der to negative 90. that is left next up duplicate that if and check for joy x being greater than zero and set player der to 90. that's to the right okay so duplicate the whole thing and switch to look for joy y being less than zero that means we can set player der to 180 because that's the down direction and then well if none of the above it has to be up so we can scrap the last if check and simply set playerder to zero that's up those last ifs go inside the else here cool give the green flag a tap and confirm that the player die is being set to each of the four values 0 90 180 and negative 90 as we move around the screen that's wonderful because that means we are free now to set our costume switch costume 2 now remember our costume starts with the word walk so we need a join block and enter the word walk in the left lefthand side and on the right drop in the newly set player der variable and i can't wait to see this smash the green flag oh yes this is really starting to take shape that makes a huge difference but you wait until we add the actual player animation their walk cycle that will be the icing on the cake well for player animation we almost always resort to using a frame variable this is by far the easiest way to keep track of things so make a new variable named frame for this sprite only and we change frame here in the player movement script this means it doesn't change unless we are moving but rather than changing by 1 to go on to the next frame directly that would just be too fast change frame by 0.3 instead this means it will take roughly three ticks of our game loop before we change costumes feel free to play around with this value as you see fit now we can't go adding this frame number to a costume name but if we switch to the first costume like we already have then we can now get back the costume number using this block see and that means we can now add the frame to this to create our animation we need a new variable to hold the current costume number call it bass costume as it's the base costume that we'll animate from make it for this bright only so right after switching to the new costume we can set base costume to the new costume number if we run the project you can see that the base costume number is being set along with the frame variable increasing and increasing but i don't want to actually set the final costume in here the final costume change can be done in the when i receive paint player script up here so make a bit of space and we then switch costume 2. we'll need to sum the costume with the frame so drop in an addition block and on the left the base costume variable on the right yes we want the frame variable but guys it's not enough to drop it directly in there otherwise you'll find your player dancing around like a crazy thing and that's because there are only six costumes per animation but frame is increasing way further and trundling through all the costumes this sprite has available to it we need to constrain this loop to just six frames the block for this is called mod and however many costumes you have in your character animation that is a number you place on the right of the modblock that's six if you're using my starter asset project on the left we would drop in frame but first we need to ensure we ignored the fractional part of this number if you look frame currently is 231.6000 goodness knows where all that imposition came from so drop frame into a floor operator and now the number gets rounded down to 231 oh that's much better drop that in turn into the mod six and now we'll only get values between zero and five out of this which is perfect and we can plonk it carefully into the right hand side of the switch costume here and here goes nothing green flag time sweet animation look at that this guy's got a very satisfying bob to his walk don't you think it's so cool that we can now animate this player in all directions by using a bit of clever costume naming so we are almost done for this episode but you may notice that although the walking animation is now working great when the player comes to a halt things are not so good the player just freezes midwalk and some of those animation frames do look really weird when caught midwalk cycle what we need to finish with is adding in those idle costumes and as luck would have it if you look at the when i receive tick player script we already know the player is idle when the joystick is not pressed and that would be in this empty else condition so if you like we can duplicate the switch costume blocks from the define player movement script down here as they are very similar to what we need here bring them back up to the tick player script and into that empty else branch only rather than switching a costume to walk we now switch to idle the direction we leave as is whichever direction the player was last facing and now this change frame our player has no idle animation cycle so for me instead of changing frame let's set frame to zero instead now that's not a change frame that's a set frame to zero cool that should be it click the green flag with me one last time and now after we finish walking the player should return to their idle standing pose yeah that looks sweet i can do little shuffle movements and the animation plays along perfectly isn't that great let me just hide those available reporters and we are done well i hope you enjoyed this video if you did then please please smash that like button and don't forget to subscribe to this channel because the next episode will be here before you know it and man it is going to be awesome as we begin to build our tile stamping engines if you want to get these episodes earlier then you can consider joining the channel membership not only does that directly support the making of these videos but you get membership perks like channel emoji priority replies to comments early access to videos and if you want access to the projects themselves how cool is that but i'm afraid that's all i've got time for today so have a great week ahead and scratch on guys you