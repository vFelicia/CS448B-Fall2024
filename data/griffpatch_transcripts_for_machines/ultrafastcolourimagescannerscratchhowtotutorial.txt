hello fellow scratchers coding a project in scratch that can capture or scan an image of the screen is so much harder than it should be and if it's not hard then it's slow but there's so many cool projects just begging to be made that would make use of this i myself need it to scan in textures to my upcoming raycasting tutorial but it's also super cool for making paint programs with save and loading of pictures for warping or changing screen colors or even for dabbling in advanced graphic processing effects there's really no limit to the ideas out there but there is a real problem although color scanning can be done simply enough once you know how to detect a single pixel of color scanning the full 172 000 pixels that make up the scratch screen takes way way too long man is there nothing that can be done well until a few weeks ago i would have said no but some very clever scratches a huge shout out to geotail in particular have pioneered a brand new approach to scanning with astonishing results promising to reduce our scanning times down from an eyewatering 20 minutes all the way down to well how fast do you think this could get have a guess in the comments below and then keep watching and i will reveal all as we step through how to code this marvel ourselves and there's a bonus no it's not a lemon although that would be rather cool later on in this video i'm going to reveal a super fun project i have been working on that also makes the most of this new scanning technique with hilarious results so don't go anywhere guys are you ready let's get scratching if you haven't yet watched my previous video on colour detection in scratch then you may want to quickly watch that now because i'm going to begin where we left off in that episode this is the complete color detection project you see here but so as not to lose our progress let's save the project as a copy and name it something like full screen scanning so here we go we don't need everything we have here though sorry scratchy you can leave the party then rename the remaining sprite from sprite1 to scanner cool that's better we also added some simple mouse drawing scripts again not needed drag off the when flag clicked script and lastly we have the when space key pressed script pressing space will detect the colour under the mouse pointer we can keep the key press but change it to scan the entire page delete all the scripts underneath except the reset timer block so we can still keep track of the time it takes to complete brilliant so full screen scanning the way this is always done is to simply position our sprite at the top left of the screen detect the color stuff the value in a list and then repeat this process for an entire row and then do the same for every other row of pixels zigzagging down the entire screen until all the pixel colors have been captured no problem let's do it make a new custom block scan and make sure to tick the run without screen refresh block we'll begin a scan right after resetting the timer and of course return the set time to timer after that to calculate how long the scan took to complete just throw away the rest of the all detached scripts right our scan begins at the top of the screen set y to 179 that's the top row then repeat 360 times changing y by negative one each time around this will loop us from the top to the bottom one row at a time perfect we want a similar loop to take us from left to right so starting by setting x to negative 240 the far left and then we repeat by 480 changing x by positive this time one now place the second loop within the first one just before the change y this should produce that zigzag movement pattern we were after and we'll visit all 172 000 screen pixels scary because now when we drop our get color block here the number of touching color instructions this script will potentially run will explode into the billions that's right we are talking seriously big numbers here gosh how long will this take to run before we can find out though let's just finish off the script by making a new list to record the scan results in so name it scan for all sprites then we simply use the add to list block to add the colour value to the scan list splendid that's practically it just a bit of housekeeping scroll up and make sure to reset the scan list before we begin we do that with a delete all of scan then as this will take some time to run set time here to please wait this will ensure we know the scan is in progress lastly in some free space add back a when green flag clicked and set time to press space to scan just in case we forget what to do right and drop in a hide block and erase all to clean up the pen canvas cool that is pretty much all a basic scanner needs to do shall we see if it works click the green flag and then as instructed press the space key to begin our full screen scan and it is off can you see the new colour values simply flying into the scan list and you might be impressed by how fast it's going until you remember we are expecting 172 000 items to be added to this list once it completes and we've only just reached 1 000. oh gosh so this is clearly going to take some time to complete and that's not a good thing when we haven't even verified that the scan is actually working as intended it would be awful to wait until the end and be disappointed perhaps we should stop it here and confirm the scan data is legit for this we'll create a new sprite naming it render let's paint out the contents of the scan list using pen in which case return to the scanner sprite momentarily and we're going to copy this script under the define scan block into our render sprite after all scanning and painting follow the exact same movements okay then back in the render sprite what we don't need is the get color or the add to list blocks but do make sure to keep the change x by 1 in this loop next make a new custom block named render and tick the run without screen refresh block as this render script must run as fast as possible so attach the scripts and begin by erasing all previous pen drawings we want a clean canvas next set pen size to one a thin pen size is paramount to preserving as much detail as possible in our drawn image we want to put the pen down just before we begin repeating by a 480 this will allow us to paint across the screen as we change colours but make sure to pen up again after the line is complete lastly we need to correctly set the pen color do be careful to use the correct block here it's the one with the actual color showing in the right of the block but rather than choosing a colour by hand the value will come from the scan list using the item of scan block but hold on what item number do we use we need a new variable to keep track of that name it scan index or idx for short this can be for this sprite only begin by setting it to 1 the very first item in the scan list and then use the same variable as the item number in our scan list cool lastly we change scan index by 1. this will now loop through all 170 000 items changing the color of the pen as it goes excellent we can call forth a render block to test this script are you ready i certainly am click the render block hmm do you see anything ah wait look up here if i'm not mistaken there's a little color to be found behind these pesky variable reporters well we certainly didn't get very far with scanning the full screen did we anyhow the real question is does this small area match the original scanned image we just erase all to remove the pen and see the original image behind and yes you can see that this white patch is the part we were seeing click render again and yep you can also see the tops of yoshi's eyes brilliant this confirms both scanning works and also that we are able to draw it back to the screen afterwards but it also confirms just how slow this method is crazy slow so is there anything we can do about that well even without any new techniques there is one improvement to be had if we look at the list of scanned colors do you notice how often the numbers seem to repeat themselves this is because often in an image similar colors do group together okay then in the scanner sprite come back into the define scan block and consider that rather than jumping right in and using the expensive get color block we might first check whether the next color was the same as the last one after all it only takes one check to do that compared to the seventeen thousand checks that getcolor has to do what if we to lose so only if we are not touching the color given by our previous color value then we go ahead and use the get color block to scan for the next color nice little optimization time for another test i'll make the timer visible so that we can see how long it takes smash the green flag and pop that space key oh nice notice that we passed the 1000 item mark in no time and 10 000 is just around the corner that little change has indeed made quite a difference in speed but as things progress it's still clear that this scan is still going to take quite a long time just how long well hold on while i do the long wait on your behalf and i'll meet you on the other side and it's done we that took forever a whole 21 minutes of my life is gone man but was it worth it let's click into the vendor sprite and check out the scan results click so this is okay the entire image scanned this time 21 minutes but the render quality is a little off the edges are not smooth and we have a definite loss in detail i can switch back and forth so you can see so why is this and can we do better well take a look at the costume used in the scanner sprite if you remember we used a simple 2x2 costume to scan for touching colors that's very small but not really small enough after all we are trying to detect the colour of a single screen pixel with a costume that overlaps four pixels the problem is if we make this costume smaller you'll find that your scanner may well stop working altogether well that's no good luckily there is a simple fix that gives amazing results let's start by naming the existing costume as dot appropriate i think and then click to paint a new costume and name this one black screen what we are after is a huge black rectangle that fills the entire screen and for this i just click on the convert to bitmap select the fill tool and then we want the fill color to be pure black more on y later and then just click on the canvas to fill it black that's the way excellent so with this new costume in hand return to the code and find the when flag clicked script so the trick to getting our small costume even smaller is to set its size to one percent but scratch doesn't want us to do that because it already knows that the costume is small so to get around this we first switch to the black screen costume with this one costume selected scratch will allow us to set size to one percent it's not an issue and then right away we cunningly switch back to our dot costume and aha scratch doesn't notice and we have a micro sized costume for scanning wonderful let's test oh wait i forgot this still takes 20 minutes oh fine fine i'll go and put the kettle on 20 minutes later and the results are in click that render block and oh my word it's perfect absolutely perfect isn't that crazy wow what a difference that simple costume sizing trick can make that's one to remember right man are we great at scanning now with simply stunning results but yeah it's still taking an age to complete how can we possibly do better though well i'm glad you asked up until now nothing we have done has not been done before in the world of scratch but what follows this is brand new cuttingedge stuff and is seriously rather exciting i think we can all agree what is slowing our scan down is that given a single point on an image our colour detector still has to test against 16 000 different color variations to identify the color that it actually is that's far too much work is there not some way of working towards the right color more progressively right to help explain this new technique for simplicity's sake we'll limit our search to just shades of red after all there are only 32 shades of red that scratch can detect and these are them the current way of finding out what shade of red this point on our image matches is to check through each shade one at a time till scratch says yep we are touching this shade but that took us 27 checks but look what happens if we first darken the image we are scanning making it exactly half as bright now if we try to check its color we only need to check 14 shades until scratch says we have a match now that is clever then we rebrighten the image and we also double the brightness of the detected color ah hold on though we are not quite at the right answer yet can you see how this darker shade could map to either of these two more accurate shades of red the only way to tell which one is the right one is to check these two shades again with the test color at full brightness and there now we have the correct answer with just 16 color checks and that is much better than the original 27. impressive but we don't have to stop there oh no we can continue halving the brightness of the image over and over until the numbers of possible shades to scan drops right down to only two options so now at each brightness level we scan for just two possible color options which then lets us brighten the image and do the same again each time brightening the image until after 10 checks we will have found the correct color wow okay then that was for shades of red how does this work when we combine it with green and blue too well it works in a very similar way except at each level of brightness rather than having to choose two shades of red we have to try out all eight combinations of two reds two greens and two blues and that's it everything else works just the same if you do the maths we'd need a total of 40 color checks to find any color value at all now guys think about that our previous best color scan was doing 16 000 color checks and now we are saying we can do it in 40 color checks this new method could be up to 400 times faster now that is astonishing sign me up let's code so we need a way to make the image darker to let us darken everything and not just one sprite we'll use a dark overlay on top of everything else we already have the large dark filled costume remember so that will do perfectly and also i like to keep the scanner all in one sprite so it's easier to backpack and move between projects later on so in the scanning sprite under the green flag script just here after we switch to the blank screen costume drag in a great clone of myself block then with a when i start as clone hat block we can set it up firstly we bring the clone to the front this is very important not only so that it covers over everything else but also so that it receives any broadcasts first before the original scanner sprite more on that soon too next set size to 100 it must cover the entire screen and position it at the center with a go to x y of zero zero we can double check it's working by dropping in a show block and hit the green flag boom and then there was darkness splendid and if you like that see how setting a ghost effect 50 does indeed let us use this in a way to darken the screen do make sure to use ghost not the brightness effect and we can keep halving the number in the ghost effect to cause the image to get darker and darker cool but you may be wondering don't we only need to darken the one pixel that we are checking the color of as we scan it why darken the entire image well here's the thing darkening a pixel testing the color and then changing the brightness again is actually not possible on a large scale in scratch without having the screen refresh and that would slow things down immeasurably but instead if we scan the entire image at a given brightness before then doing it all again at the next brightness level well then then we would have a workable solution okie dokie took away the show and ghost effects we don't need them in here when we run the project now we can be sure that the dark overlay clone is there but it's just hidden for now right scroll over to the when space key pressed script one complexity of having this clone hanging around is that events like this key press will now run on both this sprite and the clone together to avoid running the script twice we can add in an if here at the top checking whether the costume number is greater than one if it is then this is the black clone see then we can drop in a stop this script there now only the original scanning sprite will initiate a new scan we need a way to keep track of the current brightness level we are scanning make a new variable named scan pass making it for all sprites so that the clone can see it too we will refer to each scan of the screen at a given brightness as a full pass of the scanner and we expect there to be five of these start off setting scan pass to zero we won't use the old scan block this time we need something new to be able to synchronize the dark clone brightness and the scanner together we'll instead use a broadcast and wait block with a new event name scan pass cool when i receive scan pass both the clone and the original sprite will receive this event but since the dark clone layer is in front of the scan sprite that one will receive the event first and consequently run first good to know we need to identify first if this is the clone duplicate the if check above from our keypress script so in this if we know this is the front black costume so we change scan pass by one this will increase with each broadcast to this event and now we show the dark clone sprite before then setting the ghost effect setting it not changing it but ah what values do we use in here to make the brightness of our screen go to the right level in theory we should be able to calculate these values by dividing 100 which is fully bright by two to half it over and over again but those numbers don't actually work out as the best values to use i did extensive testing and have come up with the best values for each pass that produce the least scanning errors so let's make a new list named ghost values and make it for this sprite only set the ghost effect to item of ghost values and pop the scan pass variable in there brilliant shall we populate those five items for the five scan passes start by adding five items to this new list the last pass is easy it's 100 that's fully bright the one above is 50 half of 100 nice and easy but the third that's where it goes a little off rather than 25 we use 24 24.7 the one above is 12.1 and item 1 5.9 cool i'd advise you try to keep these values as i have them here as i spent quite a bit of time testing to make sure these worked as accurately as possible plus too much variance and things will stop working brilliant i'll hide the list now and run the project pressing space and it goes dark very dark but not actually black can you see the image trust me it is still there if i screen capture it and bring it into photoshop the levels adjustment tool can pull the dark colors back up it's still there notice how having first darkened the image we have now got colour banding visible where the image lost precision and that's the very effect we are to take advantage of to speed up our scanning that's exciting okay back to scratch so that's the ghosted layer done and its scripts will end here so everything below is now the scanner sprite scripts we can code that up next now the first scan pass needs to be a little different to the others so with an if else block check if scan pass is equal to one make a new custom block named initial scan and tick run without screen refresh and we'll run it when pass is equal to one great so it will help if you move the new define block over next to the old define scan script it'll roughly follow the same pattern so duplicate the scan script into here what does need to change though is the inner if just move it over here for a moment so we have the repeats and moves to position our scanner sprite ready to detect the next color and since the image is now so very dark we understand that there is only eight possible color values that this color could be that's cool but what are they tell you what let's assume we have them in a list in which case first make a new variable i for this sprite only set it to 1 and then repeat until we are touching color but not the color available no we need this new list for the possible colors make a new list naming it colors for this sprite only this will contain all the possible colors that we are expecting at this point then we check if we are touching item of colors and the item number is the i variable sweet all we need to do then is keep changing i by one in this repeat until the color matches and finally when it does this repeat ends so to store the results away we need this old add to scan block and don't forget to attach change x by one two very important to keep us moving and just be careful though this isn't the color we detected this time around we need to replace it with the item i of colors there wow we are so close to being able to run this script but gosh we haven't yet determined what the list of possible colors we are matching against are now these values will not change it's always the same set of possible colors but rather than entering them by hand i'd prefer we create a script to generate them for us so let's move over to the far left of the scripting area make a new custom block named setup colors list and tick the run without screen refresh we are going to begin with the color black that's zero so set the color variable to zero and now we loop around the two reds two greens and two blue color options just two of each making up the possible eight color combinations right then in the innermost loop we add to the colors list the value in our color verbal oh man my english american spellings are really getting confused sorry about that now it gets a little fiddly we change color by now usually we would change the blue channel first as that is the easiest number to change being the one we don't need to multiply by but now i'll let you in on a little secret do you remember how scratch can detect 32 shades of red and green but only 16 shades of blue well that means when we darken the image to the fifth level we only have an option of red and green to choose from as such we will make sure that those are the first ones in our list so that they get priority red first then from the previous color detection tutorial red is the value 256 multiplied by 256 yes that's 65 536 better to plug the value in directly so change color by 65 536 multiplied by the minimum change of the red color and that's eight which gives us five hundred and twenty four thousand two hundred and eighty eight you know what let's fill that number in two five two four two eight eight double check it's correct yep cool right as soon as we've completed the red channel we need to reset the color back to what it was before to do this we subtract from it using a change color by the amount of red we just added that's 524 288 but in this repeat we added it twice so we need to multiply that by two okay then we also now want to progress the amount of green for this repeat block green is 256 again multiplied by eight skips gives us 2048 hooray and as you can guess one more for the outer blue repeat step back the green using a subtract 2048 multiplied by two and the skip for blue is not eight but sixteen because it's less detailed than the red and green sorted this may have felt like a lot of hard work but it will pay off shortly don't try to simplify these maths further yet as there's a reason i left them like this watch this space we can click this script to run it and have a quick look over the resultant eight numbers to confirm yours are the same as mine here they are how do you do are yours the same i hope so we are almost ready to test just a few scripts to tidy hide the list and then scroll over to the when space key pressed script we need to hide the black clone sprite once the scan is complete otherwise we won't see anything pop a broadcast and wait block on the end here and introduce the new message scan complete we use a broadcast so that we can hide both this sprite and the large black clone then when i receive scan complete we simply hide right time to smash that green flag and then do as the text says press the space key to start that initial scan and wow it's done already in just 1.8 seconds for the initial pass that sounds pretty good to me but i won't be happy until i can see some results is that possible after just one scan you bet it is we need to click into the render sprite now we could just click render but the result of the initial scan is simply too dark to make out no problem then let's brighten it up simply multiply the pen color by 16 to boost its brightness this only works because we know all of the red green and blues are dark enough to allow it and here goes click the render block again oh yes look at this i simply love it can you see how we have only got four colors black red green and yellow yellow being a mixture of the red and green light when combined now at this stage we have not introduced any blue so obviously mario shorts appear black but this will change when we add in the next scanning pass but wow so cool i'm getting hyped now to build on what we've started and get the second scanning pass implemented i don't think it will be too much work so click with me back into the scanning sprite and here under the when i receive scan pass we see the initial scan block what we'll do is borrow our old scan block and use this for all subsequent scans with modifications of course the first scan is always a special case because it has to initially fill the scan list whereas the following scan passes must update the previous scan values from the time before only with more detail before we work on the define scan script further scroll up because we need to broadcast more scan pass events before we'll ever reach the second pass temporarily detach the scripts under the first broadcast and surround the broadcast with a repeat block setting it to repeat two times finally we attach the other scripts below perfect that will initiate the second scan pass okay we are on make sure we can see the define scan script but keeping the initial scan scripts handy too so focusing on the define scan script on the right we can keep all the repeat blocks and also the nice not touching color that will still save us lots of time not having to scan the same color again we do need to ditch the get color block though no way do we want it to be scanning sixteen thousand colors now oh no instead from the initial scan script we'll duplicate the scripts from the set i to one and below and for now detach the add to list down below this top part is for scanning the eight possible colors we use this then only when the previous color test failed but it's not that simple at this point we've already scanned an initial color value in the first scan pass and now we are just refining it in this second scan pass so first we'll need to retrieve that previous color set the color variable to item of our scan list now we must keep track of which item we are up to so make a new variable naming it again scan index idx for short for this sprite only yeah this is just the same as the one we did for the render sprite initialize it again to 1 at the top of this script before any repeat loop begins then we can pop it into the item of scan down here but wait up don't pop the result into the color available as it is no because the previous scanned color was scanned at half the brightness compared to what it will be now so as such we must double it to find its current expected value set color to 2 multiplied by item scan index of scan yeah that makes perfect sense and now for the magic we need to add together the previous color value with each of the possible colour values to test against and just pop that back into the touching colour block amazing we are almost there once this repeat until has found a matching color we need to make sure we store it in the color variable we could set color to color plus item of colors but that's the same thing as just changing color by item i of colors right so we'll just do that then there's this add to scan we can't use an ad block now as the items already exist in scan list instead we need to replace the values that are already there so we use a replace item block the item number is scan index and change the list to be scan finally the value is the color variable sweet we can get rid of this ad block and the other two redundant blocks and oops i almost forgot wow we most certainly need a change scan index by one after replacing the item then so that moves us on to the next item in the scan list yeah and that is that look here is the complete scan script so i'm ready to give this a test come on click the green flag and smash the space key and done three seconds very cool if it worked of course to check we need to enter the render sprite but we're going to update the pen color multiple to be just 8 as 16 would be too bright after the second pass now clicking the render block oh yes i can see some awesome results here look at this so much more color is coming through now look at the blues have shown up and overall there is much more variety of shades that's crazy on the first pass we detected up to four colors and with the second we bumped that right up to 32 so how many did you get with a third scan pass click into the scanner sprite and find the when space key press script we can simply up this repeat from two to three to enable the third pass this will broadcast scan pass now three times and each time we brighten the image and then scan the screen so yes with three passes we can expect to see up to 256 different colors but it's at the third pass that we encounter our first problem with our scanning strategy oh no yes it's true watch this run the project and smash the space key and we wait we've reached scan past 3 and we are still waiting and well we can wait here forever because this is never gonna finish why well the problem lies in the define scan script we are stuck in this repeat until loop here the problem is that if we never match any of the colors made up from the list of possible colors then there is nothing to ever stop this repeat loop from ending look at it it only ends when we touch the correct color well why hasn't this been a problem before well it just so happens that the ghosting values i gave us for darkening the background allow every color to scan accurately for the first and second passes but not so on the third and fourth on these scans scratch cannot accurately capture every color but for a few very small edge cases we miss detect and are taken down the wrong color branch this is very unfortunate but that's life i'm afraid we must live with this and find a way to fix it what we will do is make sure that when we find no color combinations that match that we then widen our search to include all the colors just around the previously matched color that way we cover our bases and we should not get into trouble again cool so the simplest way to widen our search is to extend our existing color list here so that once the eight expected colors have been tried we then go on to check the other 48 possible neighboring colors yeah that's how many there will be so scoot over to the left and find the define setup colors list script now i told you we would come back to this we must keep the initial eight items in the same order as they are now so to simplify this we'll want to run this script twice once for the narrow two possible red green and blues and then again for the wider four possible red green and blues in which case let's edit this custom block so that we can specify the first color add an input named color and then add another label depth and an input also named depth this signifies the number of shades of each color channel we are looking through so the depth is replacing all these repeat twos and these multiply by twos good look we can bring out an instance of this setup colors block and fill in the depth of two we want this to work as before for those first eight colors so of course we also want this set color to zero to be replaced by the starting color input and so pop zero in the from input up here splendid i'll just move that down and make sure to reset the colors list with a delete all of colors block before the setup runs if i make the colors list visible then clicking the delete and setup should in theory reset the list and set it back up exactly as it was without air change yes perfect but if we try a color depth of four and click the script again now look we have 64 values in the list that's four times four times four combinations of red green and blue that's great but it's not the right values or the correct order so return the depth to two for the initial values and then duplicate the setup colors block and now we fill out the depth of four but hold on that will cause us to have duplicate colors in the list since we are adding overlapping shades of red green and blue here okay we can't have that it will slow down our scan let's stop that from happening by adding an if around the add to colors block make sure to keep the change color block below outside that new if and now we only add a color to the list if the colors list does not already contain the color value we are about to add there neat that will prevent the same color being added twice we can check that by running the setup script again and yep only 64 colours so that is working but this is still not quite right we need to make sure the second set of possible colours includes the colours to the left and right of the current shades at present we are only checking items further to the right we need to shift the whole check one shade of red green and blue to the left to do this we adjust our starting color let's do the maths bring in two addition blocks and three multiplications spreading them out evenly in the additions now we want to move by eight skips of red that's 65 536 plus eight skips of green that's 256 and oh no don't need to multiply here my bad just 16 skips of blue what does this all add up to 526 352 but don't forget we are moving left with this color so enter negative five two six three five two just double check yep that's the one perfect click to run the setup color script and just double check your 64 list values look just like mine i do hope so because that was the last of the hard work it's time to try and run the project again click the green flag and tentatively press the space key will it hang like before one two three and yes it is finished in 4.5 seconds excellent news so we must see the fruit of our labor click into the render sprite and drop the multiply down to four before clicking the render block oh my word would you look at that i told you it was going to be a real step up the banding on mario's hat is practically gone and everything is looking more colorful the great news though is that now that we've got this far there is nothing stopping us now performing the last two additional scan passes so let's first make this scan render kick off automatically when the scan is complete just drop in our when i receive scan complete easy now we need to click into the scanner sprite and find our when space key press script finally we can perform the full five scan passes oh yes come on and lastly return to the render sprite with all five passes complete we will no longer need to artificially brighten the resultant image so remove the multiply and simply return the item of scan to our pen color this is it oh my goodness i'm so excited and just so you know the results we are getting here are not even as fast as they can be since the very act of me recording the video slows things down and i'm going to press the space pass one two three four and five and it's done eight and a half seconds and man just look at that render it's gorgeous and oh so so quick it's ridiculous isn't it not only do i not have enough time to make a cup of tea i could hardly even make it to the door and back and so a new era in scratch scanning dawns and there you are yoda i really love the detail that the scanner manages to keep in his cloak it's stunning i am dead excited by this and i would love to know what you are going to use these amazing scripts for whether it be to flip an image's polarity turning yoda to the dark side or something altogether more awesome leave me your comments under this video you probably already know that i'm going to be putting these scripts to good use in my upcoming raycasting episode with wall texturing but i also have released a crazy adaption of this project called griff patch's blue line filter that performs realtime warping on your scratch webcam so wacky and altogether too freaky i'll leave a link to the new project in the description under the video so i hope you enjoyed this video if you did then smash the like button and don't forget to subscribe to the channel so as not to miss the next exciting episode this one has been a bit of a marathon but it's just so fun and i don't want you to miss out on knowing all about it well until next time have a great week ahead and scratch on guys you