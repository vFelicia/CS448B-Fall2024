hello fellow scratchers i'm grifbatch and this is part two of our classic scratch platformer tutorial in which we are aiming to make something pretty special yep just look at this love it and we sure made a strong start last episode building out the basic movement and a clever robust collision detection system today we are going to start fleshing out our level adding multiple scenes to visit and addressing common bugs we scratch his face when things don't quite line up as required just so you know there's no need for you to make your levels exactly the same as mine you are free to design them any way you like and it won't stop you from following this tutorial same is true for the variables at the top of the scripts this episode i'm going to up my acceleration to two so i can move just a little bit faster as we test our code so as we begin why not save your episode one project as a copy and we'll begin episode 2. okay guys let's get scratching we began this project by drawing our level as a backdrop costume this was a cool way to get fast results and makes for easier scripting but it also has its limitations say we wanted to introduce more color to our level i could for example make each step a different color all too many scratch projects have boring levels without much color because they are limited to using the touching color blocks and we'll soon see why as you can see here none of the steps are counted as part of the level and our player can walk and jump right through them only the floor and the floating platforms are now considered as solid areas to be walked on click into the player sprite and let's look at the define move in step script first can i just note if your project has been lagging just make sure that this custom block was set to run without screen refresh okay so here we are checking for collisions just with the color purple the problem with touching color blocks is that this will only detect collisions with the precise color that is chosen in the color block so if we wanted the player to also collide with another color in our level we need to go ahead and combine the sensing blocks together with an or operator that is we are colliding if we are touching the first color or touching this second color make sure to use the or and not an and operator otherwise a collision would only be detected when the player is touching both the colors at the same time not one or the other that's not what we're after here so we need to duplicate this test into the second check below for vertical collisions 2. let's give it a test now we find we can collide happily with both the floor color and the first step's color but still have two step colors that are uncolliding man so what do we need to add them all you can see why this can become a headache and what's more the more colours we need to detect the slower our project will run well there is an alternative we could switch to using sprite collisions instead of color based collisions this has its advantages a sprite sensing is both considerably faster and allows for any number of colours to be used in a costume without a need for extra checks also unlike with colour sensing blocks sprite collisions are not prone to missing collisions when multiple sprites overlap there are downsides of course as every color will now be solid making it more tricky to design simple one costume levels with colors for lava spikes and other actions but well that's for another episode entirely so let's take the plunge and begin by making a new sprite naming it level then click into the stage backdrop and drag the level costume right across into the new level sprite like so from this point we no longer want this backdrop costume so making sure nothing is selected we can click the delete button to clear the entire backdrop great click back into our new level sprite and oh yes we can click on the first empty costume and delete it leaving us with just the level costume itself move into the code tab so because this level is now a sprite not a backdrop it isn't positioned correctly on the stage we should address that first when green flag clicked go to an x y of 0 0 and then for good measure we'll send it behind all the other sprites go to back layer a quick test should show that this color sensing works just as well with sprites as with backgrounds okay in the player sprite find the player sensing blocks now that we have the level drawn as a sprite costume we can substitute all the touching color blocks with a simple touching block and from the drop down choose the level sprite nice this can fully replace both touching colors here and here now this is exciting we've made a quick switch from color to sprite collisions if we run the project this is looking like normal but hey look we are colliding with all the stair colors that's not bad right not bad at all okay so this is the way i want to proceed with the collision detection in the platformer but it doesn't have to be done this way you can choose to keep on using the colour sensing if that suits you better as we continue to enhance this project there will be even more colors and sprites to collide with like moving platforms and other sprite costumes therefore to avoid us making the same checks in many places let's make a custom block naming it check touching solid and make it run without screen refresh using an if else block check if we are touching the level i want this to be the only place that we check for actual collisions in the entire sprite replacing both the other two checks here and replacing any future collision checks too this bit of code will then be the only place we need to update to add new collision sprites or colors to we'll need a new variable name it touching for this sprite only set it to 1 when we are touching the level and zero when we are not so it would be nice if scratch just let us drop this new block into the if condition here but sadly we don't yet have that functionality in scratch a feature many scratches look wistfully forward to anyhow for now drop the new custom block just before the if condition and then we simply check for the variable touching being greater than zero we do the same for the second touching block indeed this will be the pattern we use for all collision checks from now on use the check touching solid block and follow it up with an if touching greater than zero to check for solid collisions between the sprite and the level it would be a good idea to give this a quick test ensure it's all running as expected great before we begin adding more scenes to our level let's look back at the player code from episode one okay nice this is pretty much everything it's concise but it's not very well laid out we have a few long scripts that are doing everything and that will make it hard for us as we continue to build the project up we need to break it up into events and custom blocks with names then in future when i ask to find a certain script i can simply tell you its name and we can find it together let's start with the contents of this forever loop this is our main game loop and the scripts inside run once every frame of the game pop in a broadcast block and make a new message tick player i use the name tick because it reminds me of the ticking of a clock the scripts in this event need to run in just a single tick of the game just a single tiny movement of the player but with 30 ticks running every second this produces the game's animation all the scripts we detached here can now be hooked up under a when i receive tick player hat block so now let's split this long tick script into its component parts the first is the check for the jump key the up arrow key in my case make a new custom block naming it controls up and down run without screen refresh these jump scripts can be attached to the define block and then make use of the actual custom block under the tick receiver here next up are the left and right arrow key checks i'll make a similar custom block for these naming it controls left and right again run without screen refresh we'll use this block after the previous one there that's nice it's getting much easier to see what scripts do what okay this last move in steps block can be moved back onto the end now if i just tidy this up uh please note i'm using the scratch addons here and it's my scratch dev tools extension that provides us with the clean up blocks plus feature and this keeps the scripts in tidy columns there's a link to the extensions under the video if you don't have it already i know a lot of scratches do oh hold on you see this change speed y block here in the left right control script this should be moved up into the controls up and down script instead as it's to do with movement in the up and down direction is it all working yep excellent okay so scroll to the start of the project the when green flag clicked these first four set blocks are the project settings and everything underneath it is for resetting the level and beginning the game loop we can create a new custom block named reset and begin level however be careful to not tick the run without screen refresh that's right i know it's crazy right but some of the things we do in here don't run over a single game frame bring in the new block and use it here then the rest of the scripts go under the new define block finally we are going to separate off the forever loop itself this time we'll use a broadcast and name it game loop a receiver for this can go above the forever loop like so super that's our code all named and reordered that's much tidier before we continue though we should be good coders and ensure we have truly reset everything in the reset and begin script we should add in a set speed x to zero and also a set falling to 99 the reason to set falling to a big number is to ensure we can't jump right away until we have touched the ground okay final test yeah it's always worth ensuring things haven't got broken after all that moving scripts around the scripts are also looking much cleaner i think i might just take this when i receive tick player script up to the top of the second column as it's rather wide it's time finally to make a new screen for our level we want to be able to walk off the right hand side of the level and get to the next screen to do this we'll begin by going to the costume editor of the level sprite duplicate the first costume and now what i want to do is flip the whole screen horizontally left to right that's a really quick way to ensure everything lines up however watch this if we click the flip horizontal button we have a problem scratch flips the entire sprite as expected but it's no longer centered on the canvas see how the extra space on the left and the floor is overlapping on the right bother this is because scratch flips the costume around the costume's middle point not the middle point of the canvas here well don't fret i have a trick to get around this which i use all the time undo that last flip and then select the rectangle tool zooming out and draw the biggest rectangle you can it must be bigger than the costume you are trying to flip next drag the rectangle to ensure it snaps into the middle of the canvas this is a crucial step so don't skip it and now if we select all the objects on the canvas using the selection tool then click the flip horizontal button everything is flipped around the middle of the canvas this time finally unselect everything and then select and delete the big rectangle leaving us just with our flipped level all nicely lined up yay isn't that useful now that we have two screens for our level let's make sure to give the costumes good names this will be important so make sure you write exactly the same as me i'm going to name each one as seen with a capital s and then immediately after that with no space the number one the second costume will be scene two and so on if you want more scenes well done now in the code tab of the level sprite we can add some new scripts to control the changing of these socalled scenes this can be done through a broadcast so when i receive and a new message of change scene would be quite appropriate don't you think when this occurs we switch costumes too and obviously we don't know which to choose but it has to start with the word scene so we'll use a join entering scene on the left but obviously banana is not going to cut it so let's make a new variable named scene and i'll put a hash on the end here that means c number making it for all sprites this time and drop it in the right hand side here this means by setting the scene variable to say 1 click it and then clicking the change scene our level will then change scene as appropriate okay enough of that delete it and click into the player sprite find the define reset and begin level script and now we have a scene variable to reset so set it to 1 right at the top but setting this variable alone is not enough we also need to broadcast change scene make sure to do that just before broadcasting game loop so that the level is already when the game begins give it the test and of course i can check that changing the starting scene does in fact change where we begin and it does super but we still can't get to the next level by walking off the right hand edge of the screen so that's next exciting find the when i receive game loop script we already have the broadcast tick player this handles the player's movement we are now going to introduce another event that handles the player moving screens broadcast a new message tick last why last well it's simply because i want this to be the last event broadcast in the game loop before the screen updates simple as that the good thing about putting a list of broadcasts in a loop like this is that they will all get run in one frame together but importantly they get run in the order you broadcast them so this new one will run last so when i receive tick last we'll check for an x position greater than 235 yeah 240 is actually the far right of the screen but you may find if your player is too small that they can't go that far off screen so let's stick with 235 5 pixels less what do we do if the player goes off the right well we add one to the scene hash variable using a change scene hash by one then broadcast change scene to make it happen let's give that a test run along and cool yeah the scene has changed in fact the scene number is going a bit haywire but just ignore that for a second what we are really needing to address is that even though the scene changed our player stayed on the right side of the screen but we really would have expected them to appear now on the left we can do that easy enough just set x to minus 235 that's right negative two three five the left side of the screen run the project here we go oh man that looked good now we just need a way to be able to do the same to move back onto the first screen again right well no problem at all duplicate the if check and we swap the greater than for a less than and check for when x position is less than negative 235 that will be off the left side of the screen then of course we change scene by negative one to make it go to the previous scene number don't forget to also set x to positive 235 to get the player to move to the right hand edge of the screen too run it again off i go to the right and then coming back here we are back at scene one superb this is already a lot of fun so does the fun have to end in just two scenes absolutely not as we go off the right again we enter scene 3 but we don't yet have a scene 3 so let's quickly make one click into the level sprite and duplicate costume 2. notice the costume name has been automatically set to scene three so that's rather nice i'll just change this costume around a bit to make it different and then here we go scene one scene two and now scene three wasn't that easy i love it well this has all been smooth sailing thus far what was all the fuss about well i don't know if you've been designing your levels just like me or if you did things your own way it's possible you may have already discovered where things get tricky let me give you a clue i'm back into the level sprite and i'll switch to the second scene remember how we carefully duplicated this costume from the first and flipped it this was very purposeful to ensure that the right hand side of the first scene lined up perfectly with the left hand side of the second scene so what happens if this is not the case let's find out select all the elements on the canvas and move them down by a few pixels do make sure to unselect them before running the project otherwise the arrow keys can keep on changing the position of the selected shapes i hate it when that happens okay moving off the right is no problem at all so how about moving back to scene 1 to our left oh no disaster we have become stuck in the ground do you see why this has happened the floor of scene 2 is now lower than scene 1. when we appear back on the right of scene 1 we are therefore still slightly overlapping the ground this is fatal to our game engine and causes the player to become permanently trapped unable to move very unpleasant and no fun at all for the now very sad player of your otherwise epic game what's more we may not only get stuck in the floor for example if we place a platform here above the ground and then jump across to the next screen ah stuck again so with the second example it's basic good level design that we don't put in unavoidable collisions like this however the first example that is a legitimate problem that we should try to address in code not only because it makes our lives easier when designing levels as we don't have to be pixel perfect at lining up our costumes but also because in scratch nothing is ever pixel perfect when it comes to sprite collision detection so we better be prepared to handle it ourselves what we will do therefore is detect the collisions after changing scenes and then move the player up and down moving further and further away from the original location until we find the closest position where we no longer collide then stop there we are out of the collision simple enough right so let's code that up in the player sprite find the when i receive tick last script so notice we have a bit of repetition here the scripts for moving off the right side of the screen and moving off the left side of the screen are very similar and since we are now going to add more code to these let's make a new custom block to wrap up this functionality naming it begin scene hash with a numeric input of cnhash a text label go to x and another numeric input named x please note we are again not using the run without screen refresh option we mustn't as changing a scene takes more than one frame to complete okay so move the script from one of these ifs into the new custom block definition in its place we put our new block now the scene input needs to be set to the actual scene number we want to move to rather than just a one or minus one this will allow the begin scene block to be used in more ways but it does mean we need to pass in the full scene hash plus one here the x position wants to be the same negative two three five that we had before now let's update the custom block scripts hook up the set x with the pink x input variable but we need to make sure to replace the change scene with a set scene and then set it to the pink scene input variable cool we can duplicate this block for the left hand edge transition setting x to positive 2 3 5 and change the one to a negative one quick test yeah it's working just the same so what are we going to do differently this time to check for the player getting stuck firstly we need to ensure to stop the main game loop to do this drop in a stop other scripts in sprite right after the broadcast change scene we can test that and yeah the scene changes and the project has stopped running you can see that because the red stop sign has gone dim the reason we stop things is that we want to check for and fix collisions before the game loop continues to run next i'm going to move the setx block up to before we broadcast the change scene just to make it clear that this occurs before the scene changes okay so we want to check whether the player is now colliding with the level after we change scene right but not so fast when using a broadcast change scene without a wait the event is not actually run right away but instead queued up to run later but we do need it to happen before doing any collision checks so the simplest way is to drop in a wait for zero seconds after the broadcast this way the level will have a moment to update and we are now ready to detect collisions we'll make a new custom block named fix collisions in direction with a numeric input meaning direction this time please do tick the run without screen refresh as this needs to run fast use it right away after the weight block and set the direction the dir to zero this means up as we want it to begin by searching up and down to get out of any collisions finally after the new block remember that we stopped the main game loop so we'll start it up again using a broadcast game loop i think it's worth another quick test to ensure things are still holding together as planned i just need to walk off the screen and yep the game loop is working again but the bug is still not fixed so let's shake things up and get unstuck we're going to be moving turning moving and turning to get the player out of the ground so we'll make a note of the direction they are currently facing by creating a new variable temp that stands for temporary making it for this sprite only and set temp to the player's direction to restore their direction again at the end we'll use a pointing direction temp like that now make another new variable naming it distance for this sprite only this will keep track of how far we should move looking for noncollisions begin by setting it to 1. next we point in direction and use the input variable der this is the direction we want to begin moving in to get unstuck so we are going to need a repeat loop and let's opt for 64 attempts to get free next up before we've even moved anywhere we'll look to see if we're actually colliding with the level use our check touching solid block and then if touching is less than one then no collision is occurring so we are good use that pointing direction temp to restore our direction to what it was before and then stop this script to break out of this repeat loop we are done but if we are still touching we have work to do to get free we move forward by the value of our distance variable that would be one pixel to begin with then we turn around 180 degrees ready to move back and check the opposite side lastly change distance by one so the next time we move we will move further and that's basically it because now this repeat loop will run over and over moving us further each time until the player is no longer colliding or that is until we've tried 64 times without a maximum number of tries we can get into an infinite loop that lags out our scratch project horribly the good news is that we can test this custom block super easily this is really fun so simply position the player overlapping the level like so and click on the custom block now because we ran the custom block by clicking on it it doesn't run without screen refresh so we get to see it in action wiggling up and down further and further until the player is no longer colliding i love it it's so cool and it works for both collisions below and above the player so how does it look when run at full speed just drop in a fixed collision block and test it by clicking that instead pow the player instantly jumps to the surface and as before it works for both upper and lower collisions finding whichever is the nearest free space excellent so we've already plugged this into our begin scene script so we can give this an official test run the project and let's see can we come in from the right now yes we can celebration time this is awesome news i wonder if we can also jump into the floating platform jumping now and yes it appears to be working moving me both up and down as needed yes i guess we might as well hide all these available reporters i'll leave a scene number as that's quite useful to see so just before we finish what would happen if i made a bad level design and blocked the player more severely with a large wall well of course no problem coming in along the ground but jumping and boom i am stuck again well that's quite inevitable bad level design will lead to a bad platformer so do think carefully about where you put your walls however we could still be a little more tolerant of these collisions if we wished simply find the fixed collisions in direction script and up this 64 to a bigger number like 128. now if we test again we find that even this wall is handled in a very acceptable manner another consideration is that we should also need to prevent the player walking off the level to the scenes that don't exist to the far right but also to the far left you see how we get to scene zero to prevent this it might be a good idea to draw in a left hand wall on scene one of your level sprite okay this is just so cool we're creating a whole little world for our guy and it feels so nice to play and to explore now you may be happy with your platformer only changing scenes left and right but in a future episode we'll also look at allowing the scene to change up and down too i'm really looking forward to that as well as all the other super cool features that you see here like animating player costumes wall jumping moving platforms and so much more that sadly is all we have time for today but i do hope you've enjoyed this episode if you have then please squish the like button and if you haven't subscribed yet then you must do so right away we don't want you missing part 3 when it comes out do we if you want to support this channel or want to catch episodes early then you can join the channel membership you can also get privatized comments with super cool custom emojis or access to the tutorial scratch projects themselves this channel wouldn't be here without your support so thank you so much and until next time have a great week ahead and scratch on guys