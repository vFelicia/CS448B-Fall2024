foreign scratchers today in our epic scratch RPG tutorial series we will finally be coding up the player to level collisions beginning simple with basic Square colliders and then gradually adding in support for the awesome Collision pins that we put in place in the previous episode did you finish setting yours up now you might assume that we'll be smashing the player hitbox into these Collision pins watching for when they Collide but since our level Grid is stationary we'll shrink the player hitbox back to a point while expanding the tile pin hitboxes outwards these changes actually cancel each other out and lead to exactly the same Collision responses but as it turns out this is far more easy to code now notice how the Collision pins form a simple grid layout and simple is good because we then have to deal with neighboring tiles where Collision squares overlap oh and did I mention we also have to consider we've got three layers of tiles these days too in overload well hopefully not it's a lot of fun honest so stay tuned until the end of this video to see how it all comes together I'm excited are you enough talk guys let's get scratching open up your episode 7 projects and before we do anything else from the file menu save them as a new copy for this is episode 8. so here we are able to walk over any tile we want well not for much longer right firstly we'll simply prevent our player from walking over the tiles that we've painted on layer one that's these ones all the coding today is going to be within the player Sprite and within the movement code that's down here in the Define try move custom block we coded this up way back in episode one and it simply moves the player by DX and d y so we want to test whether this movement is possible whether we Collide and if we do then not let them move after all but just before we do let's just consider that we don't want any wall collisions when we are in the level editor mode so duplicate the change player X and Y so that we can code up both modes independently check whether the level editor is active if editor is greater than zero and if it is then change the player's position and stop this script exactly what it currently does if you want to test that then smash the green flag and you'll find that when not in the editor we can no longer move at all but when the editor is open well there you go we can move just fine great now that we are splitting the editor in game movement this does open up another opportunity for us to accelerate the editor movement with bigger levels this can be super useful so just multiply the DX and ey by 2 each next up we'll consider the X and Y movements independently for the normal game so split them apart doing this will prevent us getting caught on walls okay make a new custom block naming it check solid all around with an input of X and another input y run without screen refresh this will eventually be used to check for collisions all around us on all layers but right now just the single tile collisions we'll store whether we touch something solid by making a new variable naming it solid for this Sprite only for starters we'll just set solid to zero meaning no Collision detected and leave that as it is while we finish off the try move script so we check solid all around player X and player y but we want to add DX to player X to test the movement along the xaxis first we will know this movement is safe if solid comes back less than one which it always will right now and so we are free to then change player X by DX to do the actual movement great so the yaxis movement is just the same duplicate the check solid and scripts below changing it to B player X on the left and this time player y plus and be careful to switch the DX for the d y input as we are moving up and down this time if there was no solid Collision then we Chuck away the change player X and replace it with a change player why perfect that's the pattern of things we are just missing any actual Collision detection in our check solid script but not to worry let's give this a test to reassure us everything is still working and good news then because I'm able to walk around again while not in the editor for you oh and for those curious yep I can now Dash super fast when the editor is open oh yeah but enough of that we want to test for basic tile collisions right so back in the code it's this check solid allaround script that we need to work on and before we can do any Collision checks we need to know which grid tile is actually at position x y make a new custom block naming it get grid index with two inputs X and Y run without yeah you know what then make three variables sorry there's going to be a lot of these in this episode grid X or GX for short for this Sprite only grid y or do y for this Sprite only and grid index G idx also for this Sprite only we get the grid X by dividing X by 32 that's our tile size but remember to round the result down using a floor operator calculate grid y in the same way setting gy to the floor of Y divided by 32 instead and finally to calculate our grid index we set G idx to the result of summing one with grid X that's GX and finally we take g y and multiply that by G Max to move up a grid row to time and then we sum that all together if that doesn't seem familiar then you can always rewatch my gridless tutorial to refresh your memory so under the check solid all around script make use of the new get grid index block feeding it with the X and Y inputs that we are to check for fantastic a good point to test our scripts click the green flag and move the player around we should find the player's grid position and the resultant grid index is now calculating moving left and right changes the grid index by 1 and up and down by a whole grid Max which is counting in hundreds on my level could be different for you though cool because with that we are ready to look for simple collisions we'll get the tile under the player a new variable to store that in call it tile for this Sprite only and we set tile to item of grid and the item is our calculated G idx of course nice it all plugs together right so the absolute simplest Collision check we can do is to see if there is a tile under the player at all if tile is greater than zero if it is we count it as solid so set solid to one oh yeah this is it after seven full episodes without any collisions This Is The Moment of Truth here we go and up boom would you look at that these full tiles are rock solid there's no getting through these on any sides that is so satisfying right yeah even the fence looks reasonable from the side the other side well a little overlappy you might start to wonder though did we need pin collisions at all okay so this is perhaps where it starts to get a little bit off looking we don't want to get this close to a wall and oh man there's no walking through this Gap at all I can skip over this with the level editor but it turns out flowers are also solid so we are stuck okay uh delete these and look at this these are the real gotchas for full tile collisions we really need to use those pins to let us get right up close to these edges but let's not get ahead of ourselves right now we can't even walk over a flower or a road indeed any tile placed on layer 1 of our level is impassable and solid a quick win would be to look in our tile pin data and say only tiles with pins are solid all others we can walk through with no problem set rate off the if tile is greater than zero check and we'll get the pin values for this title make a new variable pin string for this Sprite only setting it to item of tile pins nice and we want the pin layout for the tile under the player and that is our tile variable so lastly we will look at the resulting pin string and just check if it is greater than zero any pin layout with a 1 in it will be considered solid now this is exciting smash that green flag right you can see the pin string is empty as we are not over any tiles right now so let's walk over to the path okay nice I can walk on it and that is a huge Improvement already and check out the pinstring and you can see it has an all zero string pattern that means there is a tile present but it has no solid pins defined and lastly if we walk into something solid From Below we can see the pin string contains once and so we are blocked because it's now counted as fully solid so cool we are making progress and just before we continue can I ask if you're enjoying the video so far please remember to hit the like button below doing so helps me no end thank you guys right what's the next step well although we can collide with tiles on layer one not all tiles are on this layer some are also on Layer Two okay well the script responsible for detecting the solidity of a tile on the grid is these four scripts starting with the set tile here let's separate them off we want to now do this twice once for layer 1 and again for layer 2 we'll ignore layer 3 because it tends to sit above us in the game anyhow it makes sense to pop this in a new custom block naming it check solid at with an input of grid index gidx and we run without screen refresh the set tile scripts can go under this new Define and then place the call to check solid at from where those scripts came then we need to bring the grid index variable out from our custom block passing it in as the input which means we can make the check solid script use the GI DX input as its new item number like so okay that's good this should work just the same except now we can duplicate the Czech solid block to check the tile in the layer above this one we do that by simply adding gmull to G index that's the number of items in a full grid layer now if either of these check solid blocks find a solid tile they will set solid to one let's give this a try I'll first just walk into a standard layer 1 tile they seem just as solid as before so where's that layer 2 Bush hooray we have success both layers of tiles are now solid when they are found to contain pins well you know what that means all that's left to implement is the full pin collisions are you ready for this okay we have the player and a tile to collide with tile has five solid Collision pins which I explained earlier would be represented as a grid of nine Collision zones like so these are numbered from one to nine in the same order as a standard grid list the first problem we face is that the Collision grid is not aligned with our tile grid this makes it hard to detect collisions outside of the tile they are defined Within to fix this we offset the player and the tiles up and to the right by quarter of a tile this brings the Collision Grid in line with the tile grid and yet maintains the same collisions you may have noticed this brings the top and right hand colliders outside the main tile now that will be a problem but it's one for later right now we have enough to go on to get coding these pin collisions we'll start then by offsetting our player by 8 pixels under the Define check solid around when getting the grid index we first add 8 pixels to X and 8 pixels to y funnily enough we already observe the additional effect of this by running the project and colliding with solid tiles from the left we are no longer able to get as close to these blocks as before this is the desired effect making it feel like our player has width of course as things stand the opposite applies to collision's walking left where now we can actually overlap even more than before just ignore that for now we are not finished coding the next step is to work out which of the four pin squares the player is within we'll code this within our get grid index script and now we might as well duplicate the entire script as getting the Collision grid index is very similar to getting the original grid index firstly the Collision grid split the tile grid into the two by two so we must half the tile size to divide not by 32 but by 16 in both cases however this will tell us how many half tiles across the entire level the player is located so to switch to return 0 or 1 for this tile we mod the result by two keeping it cycling around from zero to one to zero and back to one again do the same now for gy right lastly the pin Collision index we need a new variable to store this in naming it just pin for this Sprite only and switch the set grid index for a set pin nearly there this Collision pin layout has just three pins in a row so the row multiplier at the end here should be changed from gmax to the plain old number three let's give that a quick sanity check run the project and with GX and gy and pin variables visible we can see after we begin moving the GX toggles between 0 and 1 great as does gy when we move up and down and the pin value is only ever matching pin one two four and five this is the number of the pin under our player so exciting now if you see anything other than pin one two four or five after you've moved then something is up go back and check your script again but if all is good then yay we are going to code up the first actual pin Collision Now find the Define check solid app Block this is no longer quite fit for purpose as rather than looking for entire solid tiles it needs to now apply to only a specific pin of a tile therefore rightclick the Define block and choose edit and we'll add a text label at the end at pin and a new input pin hash cool just before we code that up let's see where this block was used here in the check solid all around that's where and see these empty inputs so we just calculated which pin we'll be checking so drop the pin variable into both the solid checks both layer 1 and layer 2. great go back now to the Czech solid at script let's implement the actual pin lookup and it's quite straightforward luckily we've already got the pin string all we need to do to access the individual pin values is use the letter of pin string and the letter number is given by the new PIN hash input we've just passed in here Splendid so if the pin value is greater than zero we set solid to one now this is perfectly good for now but looking ahead let's make a small change as we check through the pins and layers of this potential Collision we want to keep track of the most solid Collision not just the one value here instead then check if greater than the value already in the solid variable and then if the new PIN is greater set solid to the value of the pin letter pin hash of pin string cool I like that it will keep track of the largest pin Collision value from our pin string guys we've completed the first part of the pin collisions excitedly smashing that green flag now I'm going to try a simple Collision to begin with these fullsize tiles seem to work just the same we are now nicely far away that's great news but where things get fresh is when we try to collide with a half tile like this leftfacing fence over here goes nothing oh my goodness look at that it works a half tile Collision I'm so happy sometimes the math befuddles my mind but somehow it all falls into place yes and collisions From Below are also correctly handled so we are oh so close now the pin collisions that work are the ones that lie in regions one two four and five it's a shame then that the pins we need for right hand collisions like this one are currently excluded from our Collision scripts as such we can walk right through them let's just back this up a moment though the solution to this problem is not as complex as it may seem let's look at the tile next to this one hit 2 is divided into four Collision pin regions one two four and five what you might see though is that PIN number one on the new tile sits perfectly on top of the elusive pin number three of the tile to its left likewise pin 4 sits over pin 6 of the tile to its left and this is the key whenever we check any pin one or four that is the left side of a tile we automatically also need to look at the corresponding pin three and six of the tile to its left simple wanna try this out let's code find the Define check solid all around after we get the grid index we currently check for solid pins on layer 1 and 2. separate these off and we'll place them in a new custom block naming it appropriately check solid across layers with an input grid index gidx a label pin and a final input pin hash run without screen refresh great pop those two blocks in there and make use of it right away dropping it back from where we took the blocks from and now the inputs need matching up the gidx variable comes up here and the pin variable drops into that pin input then back down in a new block the G idx input goes in first and pin hash second just need to do the same for the block below 2 replacing them both and cleaning those old ones away cool make a little space we want to check if we are looking at pins one or four but since GX will always equal zero in these cases we might as well just check that instead if GX is equal to zero in that case we then want to check solid across layers again this time for the tile to our left that's gidx subtract 1. and the pin number we need to move from one to three and from four to six that's just adding two to the pin right so drop in a pin plus two okay so here we go right collisions should work as before but left Legends and look at that what an awesome sight after all this work it's perfect next up then we need to do the same for the top row of pins pin 7 and 8 follow a very similar line to three and six you'll find pin 1 always sits on top of pin 7 and pin two sits on top of pin eight so we are looking for any collisions on the bottom row now here we go then duplicate that if check and we can switch to look for the bottom row of pins if g y is equal to zero then instead of looking at the tile to the left we look at the tile below us to get that we subtract a full grid width G Max lastly we switch pins up two rows of pins from one to seven and from two to eight that's just adding six right exciting let's give it a test left Legions check upward collisions two so downwards man this is sweet we are simply rocking now are we done well not quite there's this one little corner case remaining literally see how we can sneak into the corner here so we have this one final pin unaccounted for pin number nine and this one sits also under pin number one wow pin one sure does overlap a lot of other pins come on then duplicate the last if and drop it inside the first if like this when both GX and gy is equal to zero we are looking at the bottom left pin pin number one so now as well as subtracting gmax from grid index we also need to subtract another one to move diagonally down and to the left by a tile and the pin number this is always going to move to pin number nine so forget all the pin pluses and just enter the number nine guys believe it or not that was the last script of the episode smash that green flag because we are going to play go on try and get into that corner now it's not having it I can tell you and that is great news indeed wow all these collisions are working just great how about this little entrance oh yes we can get in at last that's awesome so how about these thin walls we neatly hug the outside it's Lamppost yeah we hug that too this looks too cool the outside of this what what's going on here is this house on the wrong layer or something no apparently not it's on layer one so how come we are not colliding oh wait if I press the E over the house it's not selecting in the palette this means this house was drawn before I coded up the Sprite palette fencing so it's probably set to a negative costume number or something on my map I need to redraw it with the correct costume numbers from the palette and then yeah there we go collisions repaired it wasn't our Collision code at all any other problems ah here's one the black needs to be a collision until we create actual doorways so I'll find that black tile on layer one pressing e to identify it there we go and then toggle the pins with the peaky and fill it out with pins with that right back into the game and the collisions are updated really Nifty and that my friends brings us to the end of another episode if you enjoyed watching then please take the time to smash that like button to show your appreciation and then if you haven't already there's no better time to subscribe to this channel clicking the Bell notification to ensure you don't miss the next exciting episode when it drops if you just can't wait then there's also my Early Access Channel membership which also comes with added perks like trial 2 replies to comments and custom Channel Emoji lastly I want to give a shout out to my awesome YouTube channel members and supporters over at patreon this channel wouldn't be the same without you so that's it for today thank you for watching have a great week ahead and scratch on guys foreign