With timestamps:

00:00 - in this video we're going to start
00:01 - coding in redux now redux is extremely
00:05 - extremely simple
00:07 - what gets complicated about redux is
00:09 - when you start looking at all the pieces
00:11 - moving in say an example that you find
00:14 - on github some example code somewhere it
00:16 - actually looks very very complicated
00:18 - because it's hard to figure out what is
00:20 - actually making the thing work
00:22 - so we're going to start with really
00:24 - simple examples you're going to see the
00:26 - beautiful simplicity of redux and then
00:28 - we'll build out all the extra pieces to
00:30 - that full working example and you'll
00:32 - understand how everything works
00:34 - so i am in the source code repo that i
00:36 - have on github i'll put the link in the
00:38 - description and i'm in the for redux
00:40 - folder which at this point is a copy
00:43 - paste of the one basic react folder it's
00:46 - just a simple
00:47 - welcome and you can kind of change that
00:49 - title to whatever you want
00:51 - hello world so now let's go ahead and
00:53 - just install redux
00:56 - which i've already done so this will
00:58 - just kind of flip by quickly
01:00 - or it will do it all over again and now
01:02 - we can run npm run dev
01:03 - which will give us that dev server on
01:05 - localhost 8080. okay so i'm just going
01:08 - to open this client.js and we're going
01:09 - to scrap it all we're not going to use
01:11 - this application at all i'm actually
01:13 - just going to use the developer tools
01:15 - because we're just going to console log
01:17 - we're not going to use react at all
01:19 - because redux is not actually a part of
01:23 - react or plugin to react redux is its
01:26 - own way of managing application state
01:28 - you can use it on any application it
01:30 - just happens to work awesome with react
01:32 - because react is very functional and
01:34 - we'll see why that is in a little bit so
01:37 - we just have to import one thing to get
01:38 - rolling and that's create store from
01:40 - redux
01:46 - there you go create stores imported and
01:48 - to start up a redux store you really
01:51 - just need one thing you need a reducer
01:53 - so let's just make a generic function
01:55 - right now
02:00 - function
02:03 - there we go so we have a reducer
02:04 - function we'll fill that in a minute and
02:06 - now we can create our store
02:09 - create store
02:11 - and then all you need to do is pass it
02:12 - that reducer and then you give it any
02:15 - kind of initial state so we can just say
02:16 - the initial state is zero we'll just
02:18 - make this do an increment for now so our
02:20 - initial state is not an object i mean
02:23 - normally that would be an object that
02:24 - has all the values of your actual
02:27 - application state but for now we'll keep
02:29 - it really simple and just make it an
02:31 - integer
02:32 - so there we go that's our redux
02:34 - bootstrapping process you need a reducer
02:36 - you need a store and now we can listen
02:38 - to this store so we can subscribe
02:43 - and we'll just make a little function
02:44 - here so when anything changes to the
02:47 - store we can console.log hey store
02:49 - changed
02:54 - and then we can console log the store's
02:56 - current state
02:59 - there we go so when anything changes on
03:01 - the store we're just going to drop a
03:02 - little console log there
03:04 - and you see if i go ahead and
03:06 - save there i don't have any logs at all
03:09 - and then i can actually dispatch events
03:11 - to that store as well so store dispatch
03:15 - let's say
03:16 - our type will be increment
03:19 - and
03:20 - payload
03:22 - i will increment it by one
03:25 - there you go let's hit save you can see
03:27 - that the store changed and there's
03:29 - really no state nothing happened the
03:31 - state is undefined that's because it ran
03:33 - through the reducer and the reducer
03:35 - receives two things it receives the
03:37 - state
03:38 - and then it also receives an action and
03:41 - then whatever returns is the new state
03:43 - for the store so in this case we
03:45 - returned undefined so nothing happened
03:47 - if we return foo
03:49 - then the state will always be food no
03:51 - matter what action happens there you go
03:53 - store changed and the value is fuel so
03:56 - the reducer basically gets to change
03:58 - that state we make changes to this state
04:01 - based off of what the action tells us to
04:04 - do so to make this really simple we can
04:06 - just go
04:07 - if action
04:09 - dot type equals inc
04:12 - well then we're just gonna do something
04:14 - state
04:15 - equals
04:17 - state plus one
04:20 - and that will actually just return state
04:22 - plus one
04:23 - otherwise let's just return state
04:29 - so now we go store changed and the value
04:31 - is one let's do a few more increments
04:33 - here
04:36 - and you'll see store change one two
04:38 - three four awesome now we can add a
04:40 - decrement decrement
04:43 - there we go and then we could do this
04:45 - exact same thing
04:47 - if action type equals d e c
04:50 - let's return state minus one
04:53 - so there you go one two three four three
04:56 - and that is redux in a nutshell now
04:59 - obviously you don't want your state to
05:01 - be just this and we can actually do some
05:04 - more with this action let's say we want
05:06 - to increment this payload by one and
05:08 - let's increment it by two and then it's
05:11 - coming down by 22 let's increment it
05:14 - by a thousand then we can actually do
05:17 - state plus action.payload
05:20 - and state minus action.payload
05:24 - way we're actually using that payload
05:27 - there you go so it goes from one to
05:28 - three to 25 26 negative 974
05:31 - it's completely unopinionated with what
05:34 - you pass in and how you pass it in with
05:36 - the exception of type so i can change
05:39 - type here to be command
05:42 - so i'm calling the command now an
05:44 - action.command
05:46 - and that's not going to work so the
05:48 - action does have to have a type value
05:51 - given to it now i could change payload
05:53 - to be anything else this could be value
05:56 - and that's still going to work or i
05:58 - could call it
05:59 - a number
06:01 - and that's going to work so you can
06:03 - completely
06:04 - change the other values in here you can
06:06 - pass two or three values in but as a
06:09 - standard you want to call it payload
06:11 - and if you have more than one value to
06:13 - pass into a payload then you just pass
06:15 - in an object instead of just a single
06:17 - value say a payload might have four or
06:20 - five different pieces of information to
06:22 - it then you still probably just want to
06:24 - pass in a payload and give it an object
06:25 - that's a standard way of doing things so
06:28 - there you go that's redux you create a
06:31 - reducer
06:32 - you create a store and then whenever you
06:35 - dispatch events the reducer or multiple
06:38 - reducers act upon that store so let's go
06:41 - ahead and take this thing a step further
06:42 - and let's combine multiple reducers into
06:45 - one so we can actually break these up
06:46 - into files that make sense

Cleaned transcript:

in this video we're going to start coding in redux now redux is extremely extremely simple what gets complicated about redux is when you start looking at all the pieces moving in say an example that you find on github some example code somewhere it actually looks very very complicated because it's hard to figure out what is actually making the thing work so we're going to start with really simple examples you're going to see the beautiful simplicity of redux and then we'll build out all the extra pieces to that full working example and you'll understand how everything works so i am in the source code repo that i have on github i'll put the link in the description and i'm in the for redux folder which at this point is a copy paste of the one basic react folder it's just a simple welcome and you can kind of change that title to whatever you want hello world so now let's go ahead and just install redux which i've already done so this will just kind of flip by quickly or it will do it all over again and now we can run npm run dev which will give us that dev server on localhost 8080. okay so i'm just going to open this client.js and we're going to scrap it all we're not going to use this application at all i'm actually just going to use the developer tools because we're just going to console log we're not going to use react at all because redux is not actually a part of react or plugin to react redux is its own way of managing application state you can use it on any application it just happens to work awesome with react because react is very functional and we'll see why that is in a little bit so we just have to import one thing to get rolling and that's create store from redux there you go create stores imported and to start up a redux store you really just need one thing you need a reducer so let's just make a generic function right now function there we go so we have a reducer function we'll fill that in a minute and now we can create our store create store and then all you need to do is pass it that reducer and then you give it any kind of initial state so we can just say the initial state is zero we'll just make this do an increment for now so our initial state is not an object i mean normally that would be an object that has all the values of your actual application state but for now we'll keep it really simple and just make it an integer so there we go that's our redux bootstrapping process you need a reducer you need a store and now we can listen to this store so we can subscribe and we'll just make a little function here so when anything changes to the store we can console.log hey store changed and then we can console log the store's current state there we go so when anything changes on the store we're just going to drop a little console log there and you see if i go ahead and save there i don't have any logs at all and then i can actually dispatch events to that store as well so store dispatch let's say our type will be increment and payload i will increment it by one there you go let's hit save you can see that the store changed and there's really no state nothing happened the state is undefined that's because it ran through the reducer and the reducer receives two things it receives the state and then it also receives an action and then whatever returns is the new state for the store so in this case we returned undefined so nothing happened if we return foo then the state will always be food no matter what action happens there you go store changed and the value is fuel so the reducer basically gets to change that state we make changes to this state based off of what the action tells us to do so to make this really simple we can just go if action dot type equals inc well then we're just gonna do something state equals state plus one and that will actually just return state plus one otherwise let's just return state so now we go store changed and the value is one let's do a few more increments here and you'll see store change one two three four awesome now we can add a decrement decrement there we go and then we could do this exact same thing if action type equals d e c let's return state minus one so there you go one two three four three and that is redux in a nutshell now obviously you don't want your state to be just this and we can actually do some more with this action let's say we want to increment this payload by one and let's increment it by two and then it's coming down by 22 let's increment it by a thousand then we can actually do state plus action.payload and state minus action.payload way we're actually using that payload there you go so it goes from one to three to 25 26 negative 974 it's completely unopinionated with what you pass in and how you pass it in with the exception of type so i can change type here to be command so i'm calling the command now an action.command and that's not going to work so the action does have to have a type value given to it now i could change payload to be anything else this could be value and that's still going to work or i could call it a number and that's going to work so you can completely change the other values in here you can pass two or three values in but as a standard you want to call it payload and if you have more than one value to pass into a payload then you just pass in an object instead of just a single value say a payload might have four or five different pieces of information to it then you still probably just want to pass in a payload and give it an object that's a standard way of doing things so there you go that's redux you create a reducer you create a store and then whenever you dispatch events the reducer or multiple reducers act upon that store so let's go ahead and take this thing a step further and let's combine multiple reducers into one so we can actually break these up into files that make sense
