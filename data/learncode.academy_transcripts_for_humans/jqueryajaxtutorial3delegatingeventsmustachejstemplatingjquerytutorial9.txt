With timestamps:

00:01 - all right here we go with our third and
00:03 - final jQuery ajax tutorial uh our our
00:06 - app is in the place where we can now
00:08 - load up all the orders When we arrive
00:10 - and we can add new orders
00:13 - Lauren wants a
00:15 - latte there we go so we can add new
00:17 - orders we can refresh our app and our
00:19 - orders exist because they're coming from
00:21 - the back end so what we need to do now
00:22 - is we need to add a delete button so we
00:24 - can remove orders and we also want to
00:26 - fix this right here this is kind of a
00:29 - messy hacky way of piecing together a
00:32 - string um in order for us to build out a
00:34 - template it works totally fine with
00:36 - something this small but if we want to
00:38 - add three or four elements and a lot
00:40 - more markup that's going to be messy
00:41 - really really fast so we've got to do a
00:43 - better way of doing that we're going to
00:45 - use the mustash JS templating engine uh
00:48 - so let's go and add mustache JS onto our
00:50 - page done that's easy uh and let's go
00:53 - ahead and create our template
00:56 - um all all a template is is a string
01:01 - and so we can go
01:04 - Li uh name and then what you'll do is
01:07 - double curly braces anytime you want to
01:10 - insert a value so instead of doing
01:12 - order- name we're going to pass order
01:15 - into our template and we can do name
01:17 - right there so it's going to look in
01:19 - order for the value of name and spit it
01:21 - out right
01:23 - there and so that would be the same as
01:26 - order. drink so that's our template for
01:28 - what we have right now let me close that
01:30 - Li
01:31 - tag um and let's go ahead instead of
01:34 - doing this we're going to go
01:36 - mustache. render and you pass it two
01:39 - things you pass it your template and
01:40 - then your object of values so we're
01:42 - going to go order template and then
01:45 - we're going to go order which is our
01:47 - object right here which has all our
01:49 - values in it let's go ahead and refresh
01:50 - and it should look exactly the same
01:52 - excellent no change at all uh but what
01:55 - we've done now is we've given ourselves
01:56 - the ability to add a lot more
01:58 - complicated templating to this this um
02:01 - and so what you can actually do is a
02:02 - sneaky way if you have a template that's
02:04 - not too big and bad you can build it by
02:07 - adding you know a bunch of plus signs
02:08 - and as long as you start off with an
02:09 - empty string you can do new line breaks
02:12 - so I'm going to go
02:14 - Li I'm going to go strong I'll actually
02:18 - do a paragraph
02:18 - [Music]
02:21 - P
02:23 - strong
02:26 - name is my
02:28 - name
02:32 - there you
02:33 - go and I'll add some more do another
02:40 - paragraph strong let's capitalize
02:48 - those and I'm also going to add a remove
02:53 - button U and this is actually a pretty
02:55 - annoying way to do a template this big
02:58 - uh there are many there's run plugins
03:00 - there's a lot of ways to make a better
03:03 - template that's in an actual HTML file
03:06 - and import it in and use mush Das to
03:07 - render it but for now this will this
03:10 - will have to do for our example and
03:12 - let's do a
03:14 - button and we're going to go data ID we
03:17 - want to print the ID and I'll show you
03:19 - why in a little
03:21 - bit
03:27 - ID there we go so let's put an X here in
03:30 - this button we could style that a lot
03:32 - better with CSS but we don't have to for
03:34 - this video and let's give it a class of
03:38 - um
03:38 - remove let just call it remove so there
03:41 - we go let this should work fine now and
03:44 - now we have our larger order and we have
03:47 - our x button which CSS should put over
03:49 - there or something but whatever it's
03:50 - good for now and when we click this we
03:52 - want it to remove it so let's go ahead
03:54 - and look at our backend teams update and
03:57 - it says to delete an order just send a
03:58 - delete request to API orders SL and then
04:02 - your ID of your order that you're
04:04 - wanting to delete uh so that's why we're
04:06 - printing this ID here let's look at what
04:08 - HTML we're actually creating
04:11 - is we're adding a paragraph tag with
04:14 - name paragraph tag with that and then a
04:16 - button with the ID of three and a class
04:19 - of remove so now we can
04:28 - do click or we can do on click I like to
04:30 - do on click I feel like it's more
04:35 - consistent on our click
04:38 - function we simply want to do
04:43 - ajax type is
04:46 - delete and then our URL is going to
04:49 - be API
04:53 - orders and then
04:55 - plus now I can get the attribute out
05:00 - was that data ID I think I was calling
05:02 - yep data ID I can grab the data ID so
05:04 - this will be if I click here on ID
05:06 - number one it'll be API
05:10 - orders1 so that's grabbing that
05:12 - attribute out and this will not work and
05:15 - I'm going to tell you why so here we go
05:17 - I'm going to do this and uh oh
05:19 - something's broken I probably have
05:20 - something bad in my code
05:22 - somewhere unexpected token online 58 oh
05:26 - yeah there we
05:27 - go got that
05:30 - okay so this button will not fire any
05:33 - requests let me show you let's go to the
05:35 - network tab click this all I want and no
05:38 - requests are firing why are no requests
05:40 - firing this is one of the most
05:42 - complicated things to figure out if
05:44 - you're new to JavaScript and jQuery is I
05:46 - have the selector right I have this
05:49 - remove selector correct but when I'm
05:51 - firing this when I'm running this
05:53 - JavaScript there have not been any
05:55 - things added to my page yet cuz my page
05:57 - loads up with no orders
06:00 - my page loads up it starts a get request
06:04 - that's in process let's go get the
06:06 - orders remember I said it's asynchronous
06:08 - JavaScript and XML uh it's asynchronous
06:11 - meaning it doesn't block your code so it
06:13 - starts that git request and then it
06:15 - starts these other things going and then
06:18 - it looks for all the remove items and it
06:22 - tells to listen to those but there's no
06:24 - remove items added yet those are going
06:26 - to get added 3 or 4 milliseconds later
06:29 - on this success function so how do we
06:31 - make it listen to the remove items that
06:34 - aren't there yet what we do is we listen
06:37 - to a click on remove items within the
06:39 - parent container so my parent container
06:42 - is my orders
06:44 - ul and I've already cached that right
06:46 - here orders equals that so what I can do
06:49 - is instead of listening to remove I can
06:52 - listen to
06:53 - orders uh and I instead of on I'm going
06:56 - to go
06:58 - delegate
07:00 - delegate
07:02 - remove click so this is going to listen
07:05 - to any click events on the orders thing
07:08 - and it's going to only fire if it's a
07:11 - part of a remove class it's going to
07:13 - listen for any clicks on any remove
07:15 - elements to come both now or in the
07:17 - future and it's going to fire them all
07:20 - now our JavaScript will work if I
07:22 - refresh let's refresh there's my get
07:25 - request this should fire a delete
07:27 - request there we go a delete request to
07:30 - API
07:31 - orders1 and now this is still there but
07:35 - if I refresh my page my order is gone
07:38 - awesome so now we need to do is on
07:41 - success of that we need to remove that
07:47 - element okay so you'll notice a couple
07:49 - of my items are gone it's because I had
07:51 - a code error and I needed to fix it real
07:52 - quick uh but what we need to do now is
07:54 - we need to delete these items um from
07:57 - the list once our delete request is
08:00 - successful so we need to hit the X it
08:02 - makes the successful delete request to
08:04 - the back end and now we need to remove
08:06 - this from the list so we don't have to
08:08 - refresh our page to see our changes so
08:11 - what we need to do is we need to on
08:13 - success we need to get the parent Li
08:16 - from this button that was clicked so I
08:18 - can store that
08:23 - here uh this
08:26 - closest Li so that's going to start
08:28 - going up the chain till it finds An Li
08:31 - it's going to be this button it's going
08:33 - to go up and it's going to grab it
08:35 - really quick so I've stored that and now
08:40 - on success I can go li.
08:43 - remove let's see if that works refresh
08:46 - yay it's gone and it's gone let's add a
08:49 - new
08:51 - order let's add that let's add a few
08:53 - more whe coffees refresh make sure
08:55 - they're there make sure they all go away
08:57 - it's gone let's refresh it's still gone
09:00 - it's gone and it's gone let's actually
09:02 - make that a little cleaner let's go Li
09:04 - Fade
09:05 - Out
09:07 - 300 and then on call back to that fade
09:10 - out let's remove
09:16 - it there we go let's do that add some
09:19 - orders
09:20 - [Music]
09:24 - again ah the Fade Out ah the Fade Out
09:28 - much better so there we go we have built
09:30 - a complete application now a few things
09:32 - that I need to specify that are very
09:34 - very very important is you cannot use
09:38 - this inside of a success function uh let
09:40 - me tell you what I mean is see how I did
09:42 - this closest Li uh if I did this closest
09:45 - Li in here that would not do anything
09:48 - because this no longer refers to the
09:51 - remove button that was clicked this now
09:53 - refers to the Ajax operation that is in
09:57 - progress so what I actually have have to
09:59 - do here is I have to grab the LI up here
10:02 - I have to refer to this at when I'm
10:04 - inside of this function and now I can
10:08 - pull the Ali here if that made sense I I
10:11 - have no way of knowing which element I'm
10:14 - in when I'm inside of this when I'm
10:16 - inside of the success function I cannot
10:19 - use this to find out the element that
10:20 - was clicked I have to use this when I'm
10:23 - in here and now I can store it as a
10:26 - variable and then I can access it later
10:29 - on if you need to use this inside of
10:31 - success the way you do that is you go
10:33 - ver
10:34 - self equals this and so now I'm saving a
10:38 - reference to self calling it this and
10:41 - now I can do
10:44 - self so it's accessing a variable it's
10:46 - going to look up my scope and find a
10:48 - variable if it looks for this this
10:51 - already exists inside of the Ajax item
10:53 - so it's going to pull the wrong this um
10:55 - if I do self there's no such thing
10:57 - called self yet so it's going to start
10:58 - looking up my scope and it's going to
11:00 - find something called self which refers
11:03 - to this I know that was a tongue twister
11:06 - for you but that's why I did it the way
11:08 - I did it right there it's a scoping
11:11 - issue it's one of the trickier issues of
11:13 - JavaScript I really need to do a whole
11:14 - video on it but this is about Ajax so
11:17 - I'll leave you where we are have a great
11:19 - day and uh good luck Ajax
11:22 - thing

Cleaned transcript:

all right here we go with our third and final jQuery ajax tutorial uh our our app is in the place where we can now load up all the orders When we arrive and we can add new orders Lauren wants a latte there we go so we can add new orders we can refresh our app and our orders exist because they're coming from the back end so what we need to do now is we need to add a delete button so we can remove orders and we also want to fix this right here this is kind of a messy hacky way of piecing together a string um in order for us to build out a template it works totally fine with something this small but if we want to add three or four elements and a lot more markup that's going to be messy really really fast so we've got to do a better way of doing that we're going to use the mustash JS templating engine uh so let's go and add mustache JS onto our page done that's easy uh and let's go ahead and create our template um all all a template is is a string and so we can go Li uh name and then what you'll do is double curly braces anytime you want to insert a value so instead of doing order name we're going to pass order into our template and we can do name right there so it's going to look in order for the value of name and spit it out right there and so that would be the same as order. drink so that's our template for what we have right now let me close that Li tag um and let's go ahead instead of doing this we're going to go mustache. render and you pass it two things you pass it your template and then your object of values so we're going to go order template and then we're going to go order which is our object right here which has all our values in it let's go ahead and refresh and it should look exactly the same excellent no change at all uh but what we've done now is we've given ourselves the ability to add a lot more complicated templating to this this um and so what you can actually do is a sneaky way if you have a template that's not too big and bad you can build it by adding you know a bunch of plus signs and as long as you start off with an empty string you can do new line breaks so I'm going to go Li I'm going to go strong I'll actually do a paragraph P strong name is my name there you go and I'll add some more do another paragraph strong let's capitalize those and I'm also going to add a remove button U and this is actually a pretty annoying way to do a template this big uh there are many there's run plugins there's a lot of ways to make a better template that's in an actual HTML file and import it in and use mush Das to render it but for now this will this will have to do for our example and let's do a button and we're going to go data ID we want to print the ID and I'll show you why in a little bit ID there we go so let's put an X here in this button we could style that a lot better with CSS but we don't have to for this video and let's give it a class of um remove let just call it remove so there we go let this should work fine now and now we have our larger order and we have our x button which CSS should put over there or something but whatever it's good for now and when we click this we want it to remove it so let's go ahead and look at our backend teams update and it says to delete an order just send a delete request to API orders SL and then your ID of your order that you're wanting to delete uh so that's why we're printing this ID here let's look at what HTML we're actually creating is we're adding a paragraph tag with name paragraph tag with that and then a button with the ID of three and a class of remove so now we can do click or we can do on click I like to do on click I feel like it's more consistent on our click function we simply want to do ajax type is delete and then our URL is going to be API orders and then plus now I can get the attribute out was that data ID I think I was calling yep data ID I can grab the data ID so this will be if I click here on ID number one it'll be API orders1 so that's grabbing that attribute out and this will not work and I'm going to tell you why so here we go I'm going to do this and uh oh something's broken I probably have something bad in my code somewhere unexpected token online 58 oh yeah there we go got that okay so this button will not fire any requests let me show you let's go to the network tab click this all I want and no requests are firing why are no requests firing this is one of the most complicated things to figure out if you're new to JavaScript and jQuery is I have the selector right I have this remove selector correct but when I'm firing this when I'm running this JavaScript there have not been any things added to my page yet cuz my page loads up with no orders my page loads up it starts a get request that's in process let's go get the orders remember I said it's asynchronous JavaScript and XML uh it's asynchronous meaning it doesn't block your code so it starts that git request and then it starts these other things going and then it looks for all the remove items and it tells to listen to those but there's no remove items added yet those are going to get added 3 or 4 milliseconds later on this success function so how do we make it listen to the remove items that aren't there yet what we do is we listen to a click on remove items within the parent container so my parent container is my orders ul and I've already cached that right here orders equals that so what I can do is instead of listening to remove I can listen to orders uh and I instead of on I'm going to go delegate delegate remove click so this is going to listen to any click events on the orders thing and it's going to only fire if it's a part of a remove class it's going to listen for any clicks on any remove elements to come both now or in the future and it's going to fire them all now our JavaScript will work if I refresh let's refresh there's my get request this should fire a delete request there we go a delete request to API orders1 and now this is still there but if I refresh my page my order is gone awesome so now we need to do is on success of that we need to remove that element okay so you'll notice a couple of my items are gone it's because I had a code error and I needed to fix it real quick uh but what we need to do now is we need to delete these items um from the list once our delete request is successful so we need to hit the X it makes the successful delete request to the back end and now we need to remove this from the list so we don't have to refresh our page to see our changes so what we need to do is we need to on success we need to get the parent Li from this button that was clicked so I can store that here uh this closest Li so that's going to start going up the chain till it finds An Li it's going to be this button it's going to go up and it's going to grab it really quick so I've stored that and now on success I can go li. remove let's see if that works refresh yay it's gone and it's gone let's add a new order let's add that let's add a few more whe coffees refresh make sure they're there make sure they all go away it's gone let's refresh it's still gone it's gone and it's gone let's actually make that a little cleaner let's go Li Fade Out 300 and then on call back to that fade out let's remove it there we go let's do that add some orders again ah the Fade Out ah the Fade Out much better so there we go we have built a complete application now a few things that I need to specify that are very very very important is you cannot use this inside of a success function uh let me tell you what I mean is see how I did this closest Li uh if I did this closest Li in here that would not do anything because this no longer refers to the remove button that was clicked this now refers to the Ajax operation that is in progress so what I actually have have to do here is I have to grab the LI up here I have to refer to this at when I'm inside of this function and now I can pull the Ali here if that made sense I I have no way of knowing which element I'm in when I'm inside of this when I'm inside of the success function I cannot use this to find out the element that was clicked I have to use this when I'm in here and now I can store it as a variable and then I can access it later on if you need to use this inside of success the way you do that is you go ver self equals this and so now I'm saving a reference to self calling it this and now I can do self so it's accessing a variable it's going to look up my scope and find a variable if it looks for this this already exists inside of the Ajax item so it's going to pull the wrong this um if I do self there's no such thing called self yet so it's going to start looking up my scope and it's going to find something called self which refers to this I know that was a tongue twister for you but that's why I did it the way I did it right there it's a scoping issue it's one of the trickier issues of JavaScript I really need to do a whole video on it but this is about Ajax so I'll leave you where we are have a great day and uh good luck Ajax thing
