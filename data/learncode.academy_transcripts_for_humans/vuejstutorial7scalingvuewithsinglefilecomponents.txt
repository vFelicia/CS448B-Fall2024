With timestamps:

00:00 - at this point we're going to start
00:01 - talking about how to scale a vue.js
00:03 - application into a full scale
00:05 - application now there are several pain
00:07 - points we would run into if we started
00:09 - taking those
00:10 - manual components that we were just
00:12 - creating inside of a main.js file it
00:14 - would be very frustrating so obviously
00:16 - we want to go towards a webpack build
00:18 - system and we also want to start
00:20 - defining our view components in a single
00:22 - file component structure i'll show you
00:24 - what that is and to help us get started
00:26 - let's go ahead and install the view cli
00:29 - which we can do by installing npm
00:31 - globally view cli i've already done that
00:34 - so i will not run that install so now we
00:36 - have the view command
00:39 - and if you do view list you'll see that
00:41 - there's a set of templates that we can
00:42 - pick and webpack is going to be the one
00:45 - that we want to start off with so we're
00:46 - going to want to go view in it
00:49 - webpack
00:50 - and then you can also give it a folder
00:52 - if you wanted it to create it into a
00:53 - different folder but we're going to say
00:54 - do it in the folder we're now
00:57 - and we're just going to say yes to
00:58 - almost all these defaults runtime plus
01:00 - compiler yes we do want that and let's
01:03 - say no to all the add-ons so no view
01:05 - router we will get to that in the next
01:06 - video and no to all the other editions
01:09 - so now we can just run npm install and
01:12 - npm run dev also open this in code
01:17 - so this will get us all going here
01:20 - so when this is done installing it's
01:22 - going to open up my project in visual
01:23 - studio code and then start npm run dev
01:26 - and we will be rolling
01:31 - all right so about a minute later and
01:33 - here's our application that we've
01:34 - created and we're just going to go ahead
01:36 - and you can see the index file is pretty
01:38 - much what we've been working with we
01:40 - just have an id of app and our entire
01:41 - application renders into there and then
01:44 - the rest is going to happen in the
01:45 - source if you want to look more at
01:46 - what's going on in the build you can see
01:48 - there's quite a few build files
01:50 - that you can kind of sort through
01:52 - but the short of it is is we're running
01:54 - webpack now and we are having webpack
01:56 - compile down what are called view files
01:59 - dot view files now you'll want to on
02:01 - your editor also install an extension
02:03 - that allows you to work with dot view
02:05 - files on visual studio code that's
02:07 - called v2r
02:09 - v-e-t-u-r
02:11 - i don't know why it's not called
02:12 - something more straightforward but
02:14 - v-e-t-u-r is the extension you want for
02:16 - visual studio code
02:18 - and this is basically the anatomy of a
02:20 - single file component you break out your
02:22 - template your script and your style into
02:26 - three separate tag based structures
02:29 - syntax highlighting works great this way
02:31 - for both your html and your javascript
02:34 - well also for your css so that's a lot
02:36 - cleaner and also things are broken out
02:39 - um you can see here that we can import a
02:41 - hello world component
02:43 - register that component
02:45 - and then we can spit it out in our
02:46 - template and you can arrange these
02:48 - however you want if you like your
02:49 - template down lower which is actually
02:50 - what i prefer
02:52 - or however you like it you can arrange
02:53 - it so let's go and look at this hello
02:55 - world component let's work with these uh
02:58 - single file components a little bit more
03:00 - here let's click in this whole world
03:02 - component you can see we're inserting
03:03 - all these links that we have here let's
03:05 - just erase some stuff and clean this up
03:08 - so here's our hello world component all
03:11 - we have to do is export default
03:14 - and object and that's our component
03:16 - configuration one important thing to
03:18 - note here in view is whenever you're
03:21 - using a child component the data cannot
03:24 - return just an object
03:26 - like you can do on the top level
03:28 - component on the top level component you
03:30 - say data you give it an object and
03:32 - that's all your values child components
03:35 - cannot do that
03:36 - there are some problems with pointers
03:40 - that you'll run into so if you don't
03:41 - really understand what those problems
03:43 - would be just know as a practice any
03:46 - child component anything that is not
03:47 - your very top level component
03:50 - when you define data run a function that
03:52 - returns an object of your data that's
03:55 - very very important so that's the
03:56 - pattern we're going to be using going
03:57 - forward
03:58 - so let's say we want to create
04:00 - two more components to add to this page
04:02 - i'm going to go ahead save here cleaned
04:04 - it out a little bit
04:05 - let's go ahead add two component files
04:07 - let's say new file
04:09 - we'll just call it module1.view
04:12 - and let's do a template
04:14 - and let's do a script tag
04:16 - and let's also do a style
04:18 - so our template is just going to spit
04:20 - out um
04:22 - h1
04:24 - module one
04:26 - and then here's my script tag you can
04:28 - see when i have that
04:29 - feature set up then it automatically did
04:31 - the export default for me i'm going to
04:33 - leave that there that's all i need i'm
04:35 - not going to do anything smart with data
04:37 - for right now so there's my module 1
04:39 - and let's save this as module 2 as well
04:43 - so now we have module 1 and module 2.
04:44 - we'll call that module 2.
04:46 - so now we want to run our hello world
04:48 - import those components
04:51 - let's go and import
04:54 - and now i can register those components
04:56 - components are going to be
04:59 - module one which is the same as doing
05:02 - module one since we're using
05:04 - es6 here
05:06 - make sure i add my comma so now i've
05:08 - registered module one and i can now use
05:10 - module one
05:14 - and i get that h1 that appears right
05:16 - there i can also pull in module two just
05:18 - the same
05:19 - let's pull in module two it's import
05:21 - module two
05:23 - and now we're scaling out our components
05:26 - pretty quickly and easily now we have to
05:29 - do is spit it out on the page so i can
05:31 - go module two
05:34 - now module one and module two are on our
05:36 - page nothing really magical happening
05:38 - there let's take a look at how the style
05:40 - works now so i can now define a style
05:43 - that has to do with my module i can go
05:45 - h1
05:48 - color red and this is going to break i'm
05:49 - going to show you in a minute why
05:51 - so h1 is red for module 1
05:54 - and h1 is
05:57 - pink for module 2.
06:00 - you'll notice that module 2 just
06:02 - overwrote module 1 and our app level
06:05 - module
06:06 - and that's because if you don't tell
06:08 - this to be scoped style it's going to be
06:10 - global style let's go and inspect this
06:12 - real quick you'll see what i mean
06:15 - you can see that
06:16 - we have h1 pink
06:18 - and h1 red they're overriding each other
06:21 - they're just standard styles so we do
06:23 - not want that uh instead what we want to
06:26 - do is we want to actually do a scoped
06:28 - style that's just for our component and
06:31 - all you do is add the scoped html
06:33 - attribute and so we're going to add that
06:35 - scoped there
06:37 - scoped there
06:38 - and now everything works exactly as
06:40 - we've expected so let's go ahead and
06:42 - look what's different now
06:44 - you can see that that rule is actually
06:46 - h1 for
06:49 - our object for just our module this
06:52 - module right here let's inspect this
06:53 - html you can see we have this data v and
06:56 - then some hash
06:58 - attribute which is being added so only
07:01 - h1s on our components get this style
07:03 - it's a really great rule so you can
07:05 - scope style very very easily
07:08 - and that's really really nice so don't
07:10 - forget about that scoped attribute
07:13 - and then again the other gotcha is you
07:14 - always want to make sure if you're
07:16 - defining data
07:18 - that you define data as a function that
07:20 - returns an object that's kind of your
07:22 - introduction to single file components
07:25 - one more thing to add and we can really
07:26 - start scaling out our application and
07:29 - that is how we handle routing with view
07:31 - router we'll do that next

Cleaned transcript:

at this point we're going to start talking about how to scale a vue.js application into a full scale application now there are several pain points we would run into if we started taking those manual components that we were just creating inside of a main.js file it would be very frustrating so obviously we want to go towards a webpack build system and we also want to start defining our view components in a single file component structure i'll show you what that is and to help us get started let's go ahead and install the view cli which we can do by installing npm globally view cli i've already done that so i will not run that install so now we have the view command and if you do view list you'll see that there's a set of templates that we can pick and webpack is going to be the one that we want to start off with so we're going to want to go view in it webpack and then you can also give it a folder if you wanted it to create it into a different folder but we're going to say do it in the folder we're now and we're just going to say yes to almost all these defaults runtime plus compiler yes we do want that and let's say no to all the addons so no view router we will get to that in the next video and no to all the other editions so now we can just run npm install and npm run dev also open this in code so this will get us all going here so when this is done installing it's going to open up my project in visual studio code and then start npm run dev and we will be rolling all right so about a minute later and here's our application that we've created and we're just going to go ahead and you can see the index file is pretty much what we've been working with we just have an id of app and our entire application renders into there and then the rest is going to happen in the source if you want to look more at what's going on in the build you can see there's quite a few build files that you can kind of sort through but the short of it is is we're running webpack now and we are having webpack compile down what are called view files dot view files now you'll want to on your editor also install an extension that allows you to work with dot view files on visual studio code that's called v2r vetur i don't know why it's not called something more straightforward but vetur is the extension you want for visual studio code and this is basically the anatomy of a single file component you break out your template your script and your style into three separate tag based structures syntax highlighting works great this way for both your html and your javascript well also for your css so that's a lot cleaner and also things are broken out um you can see here that we can import a hello world component register that component and then we can spit it out in our template and you can arrange these however you want if you like your template down lower which is actually what i prefer or however you like it you can arrange it so let's go and look at this hello world component let's work with these uh single file components a little bit more here let's click in this whole world component you can see we're inserting all these links that we have here let's just erase some stuff and clean this up so here's our hello world component all we have to do is export default and object and that's our component configuration one important thing to note here in view is whenever you're using a child component the data cannot return just an object like you can do on the top level component on the top level component you say data you give it an object and that's all your values child components cannot do that there are some problems with pointers that you'll run into so if you don't really understand what those problems would be just know as a practice any child component anything that is not your very top level component when you define data run a function that returns an object of your data that's very very important so that's the pattern we're going to be using going forward so let's say we want to create two more components to add to this page i'm going to go ahead save here cleaned it out a little bit let's go ahead add two component files let's say new file we'll just call it module1.view and let's do a template and let's do a script tag and let's also do a style so our template is just going to spit out um h1 module one and then here's my script tag you can see when i have that feature set up then it automatically did the export default for me i'm going to leave that there that's all i need i'm not going to do anything smart with data for right now so there's my module 1 and let's save this as module 2 as well so now we have module 1 and module 2. we'll call that module 2. so now we want to run our hello world import those components let's go and import and now i can register those components components are going to be module one which is the same as doing module one since we're using es6 here make sure i add my comma so now i've registered module one and i can now use module one and i get that h1 that appears right there i can also pull in module two just the same let's pull in module two it's import module two and now we're scaling out our components pretty quickly and easily now we have to do is spit it out on the page so i can go module two now module one and module two are on our page nothing really magical happening there let's take a look at how the style works now so i can now define a style that has to do with my module i can go h1 color red and this is going to break i'm going to show you in a minute why so h1 is red for module 1 and h1 is pink for module 2. you'll notice that module 2 just overwrote module 1 and our app level module and that's because if you don't tell this to be scoped style it's going to be global style let's go and inspect this real quick you'll see what i mean you can see that we have h1 pink and h1 red they're overriding each other they're just standard styles so we do not want that uh instead what we want to do is we want to actually do a scoped style that's just for our component and all you do is add the scoped html attribute and so we're going to add that scoped there scoped there and now everything works exactly as we've expected so let's go ahead and look what's different now you can see that that rule is actually h1 for our object for just our module this module right here let's inspect this html you can see we have this data v and then some hash attribute which is being added so only h1s on our components get this style it's a really great rule so you can scope style very very easily and that's really really nice so don't forget about that scoped attribute and then again the other gotcha is you always want to make sure if you're defining data that you define data as a function that returns an object that's kind of your introduction to single file components one more thing to add and we can really start scaling out our application and that is how we handle routing with view router we'll do that next
