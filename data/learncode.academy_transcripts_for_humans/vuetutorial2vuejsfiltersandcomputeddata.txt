With timestamps:

00:00 - in this video we are going to use view
00:02 - filters and computed data to work with
00:04 - our data even more
00:05 - so here we've been spitting out just
00:07 - plain information but let's say name was
00:10 - actually set as first last
00:14 - first is bobby
00:21 - and then same here for john
00:30 - we go i think i changed his last name
00:31 - but that's okay obviously our
00:32 - application will break now we don't have
00:34 - john.name anymore uh so instead of
00:37 - having to spit out
00:39 - john first space john last and bobby
00:42 - first space bobby last we could make a
00:45 - computed value here
00:48 - we can make an object and any of these
00:51 - will be computed values they will be
00:52 - treated just like data even though they
00:54 - are really a derivative of our data set
00:57 - so let's say
00:58 - bobby full name
01:05 - we can return this
01:07 - i'll use a template string for it
01:19 - so we have that's bobby's full name so
01:22 - now down here i can say bobby full name
01:31 - and then i can also create john full
01:34 - name
01:36 - and obviously this is more work than it
01:38 - would be to just create their name down
01:40 - here but computed values are very very
01:43 - useful in many other situations so john
01:46 - full name would be
01:49 - john's first and last name and now i can
01:51 - go john full name
01:55 - and i'm spitting out computed values i
01:57 - could also say john age in a year
02:09 - plus one
02:17 - so in one year johnny's going to be 36.
02:20 - now computed values are great in a lot
02:22 - of cases but in a lot of cases we can do
02:24 - this in a reusable fashion using filters
02:27 - so we can create a filters object here
02:33 - and we can just call this one full name
02:38 - and full name will get any value
02:43 - and it will return
02:46 - value.first
02:48 - space
02:50 - value dot last
02:54 - and so now what i can do is i can spit
02:56 - out the entire object john at a pipe and
02:59 - say full name and there you see we get
03:01 - the exact same results so now i can also
03:03 - go bobby full name
03:06 - and i can use that full name filter that
03:08 - exact same full name filter to return
03:10 - bobby's full name uh what's also great
03:13 - about this is let's say later on we
03:14 - decide now we want to return last comma
03:17 - first
03:23 - then that can apply to everybody in our
03:24 - list as well now boon john and boon
03:27 - comma bobby we do the exact same thing
03:30 - for age in one year
03:33 - so we return age in one so in this case
03:35 - we'll go age age in one year
03:39 - actually john.age
03:44 - bobby.age age
03:49 - in one year
03:50 - and so now this will bump up to that 36
03:52 - and bobby just became 26 as well so
03:55 - that's how you can use filters to create
03:57 - reusable computed values
04:00 - and then computed values can also be
04:02 - used to just make computations that are
04:05 - one-off computations against your data
04:07 - set
04:14 - you

Cleaned transcript:

in this video we are going to use view filters and computed data to work with our data even more so here we've been spitting out just plain information but let's say name was actually set as first last first is bobby and then same here for john we go i think i changed his last name but that's okay obviously our application will break now we don't have john.name anymore uh so instead of having to spit out john first space john last and bobby first space bobby last we could make a computed value here we can make an object and any of these will be computed values they will be treated just like data even though they are really a derivative of our data set so let's say bobby full name we can return this i'll use a template string for it so we have that's bobby's full name so now down here i can say bobby full name and then i can also create john full name and obviously this is more work than it would be to just create their name down here but computed values are very very useful in many other situations so john full name would be john's first and last name and now i can go john full name and i'm spitting out computed values i could also say john age in a year plus one so in one year johnny's going to be 36. now computed values are great in a lot of cases but in a lot of cases we can do this in a reusable fashion using filters so we can create a filters object here and we can just call this one full name and full name will get any value and it will return value.first space value dot last and so now what i can do is i can spit out the entire object john at a pipe and say full name and there you see we get the exact same results so now i can also go bobby full name and i can use that full name filter that exact same full name filter to return bobby's full name uh what's also great about this is let's say later on we decide now we want to return last comma first then that can apply to everybody in our list as well now boon john and boon comma bobby we do the exact same thing for age in one year so we return age in one so in this case we'll go age age in one year actually john.age bobby.age age in one year and so now this will bump up to that 36 and bobby just became 26 as well so that's how you can use filters to create reusable computed values and then computed values can also be used to just make computations that are oneoff computations against your data set you
