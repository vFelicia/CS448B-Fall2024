With timestamps:

00:00 - so immutability and mutation is
00:02 - something that JavaScript developers
00:04 - have been talking about a lot recently
00:07 - it's not at all A New Concept in
00:08 - programming but in JavaScript and on the
00:10 - browser we've realized that even though
00:12 - JavaScript doesn't really handle
00:13 - immutability very well by default we can
00:17 - write immutable data and it really helps
00:19 - our programs a lot so let me kind of
00:21 - immutable basically means a piece of
00:23 - data that we don't ever want to change
00:25 - if it's immutable we don't ever want to
00:26 - change it we simply create a new piece
00:28 - of data based off of its values and we
00:30 - change the new piece of data uh you know
00:32 - so we were to go over a equals name Will
00:36 - let's say we want to a mutation would be
00:39 - just changing the name to will it's a
00:40 - Fred there we go I just mutated it now a
00:44 - has changed um a an immutable change
00:48 - would mean that a still is name equals
00:50 - will where B uh is now this new object
00:54 - with a change um to kind of show you why
00:57 - immutability is not kind of baked into
00:59 - JavaScript by default there's really two
01:01 - types in JavaScript there's primitive
01:03 - types and there's reference types
01:06 - primitive types would be the number one
01:08 - or they'd be a string
01:10 - trest or they would be true false AB
01:13 - Boolean so if I were to go ver a equals
01:17 - 1 and ver b equals a b took on the value
01:22 - of a but if I were to change B um a
01:25 - still equals one so they're their own
01:27 - variable they're their own piece of data
01:30 - whereas objects and arrays which are
01:32 - really just objects objects always
01:34 - create a reference so if I were to say
01:36 - ver a equals name
01:39 - Will ver b equals a well now they're
01:42 - both pointing to the same object so if B
01:44 - were to
01:46 - change then a changed as well A's name
01:49 - is Fred and B's name is Fred they're the
01:51 - exact same object so we actually want to
01:53 - be able to create a new object and if
01:56 - you're in a recent browser you're going
01:58 - to have object assign which is exactly
02:00 - what you use for this object assign is
02:02 - not really new Jake's had it forever
02:05 - which is
02:06 - extend or underscore or low Dash
02:10 - extend can't type extend um or it's
02:13 - actually called assign now in low Dash
02:15 - to match the new object assign so we'd
02:18 - simply say ver a equals name
02:21 - will uh let's actually give it another
02:23 - piece of information age
02:25 - 35 now let's say ver b equals we're
02:28 - actually going to go object assign
02:30 - and we're going to start with a brand
02:32 - new object then we're going to pass in a
02:34 - and anything else B C D and what it's
02:37 - going to do is it's going to start with
02:38 - this brand new object and that is B then
02:40 - it's going to take all the values of a
02:42 - and apply them overwriting values of B
02:45 - overwriting values of c overwriting
02:47 - values of D overwriting until you're
02:49 - left with your final object so if we
02:51 - basically want to change a we're going
02:53 - to make a brand new object so B is now
02:55 - pointing to this guy and then it's going
02:58 - to take all the values of a and then
03:00 - we're going to change something let's
03:01 - change name to
03:02 - Fred there we go now B has the name of
03:05 - Fred age 35 a is untouched we didn't
03:08 - change a at all we merely stole its
03:11 - values well what do you do for arrays
03:13 - arrays are very similar uh you just
03:15 - simply use
03:16 - concat and use filter uh so you're just
03:19 - going to go ver a
03:22 - equals
03:24 - 012 ver b equals a. concat we're going
03:28 - to add a new value so that's going to
03:30 - leave a untouched and we're going to add
03:31 - a new value onto the end a is there and
03:35 - B has an extra value and then for filter
03:37 - let's say we want to strip a out um well
03:40 - a is untouched so a is 012 ver b equals
03:44 - a. filter and then filter is going to go
03:47 - through each item put the value
03:50 - through and we're going to see if value
03:53 - is not equal to two we're going to keep
03:58 - it in what I mess up
04:02 - V there you go so now B has filtered out
04:05 - anything that's not equal to two we keep
04:08 - in there so that's kind of how Filter
04:10 - Works and that's how you'll change an
04:11 - array so a is still unchanged and B's
04:15 - got the new values excellent so that's
04:17 - kind of how we're going to work on stuff
04:18 - and let's say you've got an object that
04:20 - is has both data and an array ver a
04:23 - equals
04:25 - name and things is 0 1 2 well we might
04:30 - have to two-stage this one then so we
04:33 - might have to go ver b equals object
04:36 - assign first thing we're going to do is
04:38 - get B pointing to a brand new object
04:41 - let's pull all the values of a and then
04:43 - let's do name equals
04:46 - Fred now we need to be careful right now
04:48 - because B do things is still pointing to
04:51 - the exact same thing as a. things
04:54 - because this is an object if we were to
04:55 - change B do
04:57 - things uh push
05:01 - so now b. things has that and a. things
05:04 - has it as well uh oh that doesn't work
05:06 - let's go back and try that
05:09 - again go away okay let's go back to a
05:14 - there we go a name Will things 012 ver b
05:18 - equals object
05:21 - assign a and then we're going to go name
05:23 - equals Fred so we've changed Fred we're
05:26 - still referencing a do things so then
05:29 - we're going to go b. things equals a.
05:32 - things
05:34 - concat add our new one in there so now a
05:38 - do things completely untouched B do
05:40 - things completely new object B is
05:43 - completely new ground up so that's kind
05:45 - of how you're going to do immutability
05:47 - in JavaScript uh again you're just using
05:49 - object
05:50 - assign and then you're using concat to
05:53 - add stuff to an array and you're using
05:55 - filter to pull stuff out of an array and
05:58 - there's other things you can do you can
05:59 - use map to change all the items in an
06:01 - array and return a new one what's great
06:04 - about filter and map and reduce is
06:06 - they're always going to return a brand
06:08 - new array object concat filter map
06:11 - reduce and object assign they're always
06:13 - going to return a brand new array object
06:15 - um because object assign is going to
06:17 - return a brand new object object uh and
06:20 - so that's how you do immutability and
06:21 - that's how you keep your data pristine
06:23 - that's you can keep a full record of
06:25 - history as data changes

Cleaned transcript:

so immutability and mutation is something that JavaScript developers have been talking about a lot recently it's not at all A New Concept in programming but in JavaScript and on the browser we've realized that even though JavaScript doesn't really handle immutability very well by default we can write immutable data and it really helps our programs a lot so let me kind of immutable basically means a piece of data that we don't ever want to change if it's immutable we don't ever want to change it we simply create a new piece of data based off of its values and we change the new piece of data uh you know so we were to go over a equals name Will let's say we want to a mutation would be just changing the name to will it's a Fred there we go I just mutated it now a has changed um a an immutable change would mean that a still is name equals will where B uh is now this new object with a change um to kind of show you why immutability is not kind of baked into JavaScript by default there's really two types in JavaScript there's primitive types and there's reference types primitive types would be the number one or they'd be a string trest or they would be true false AB Boolean so if I were to go ver a equals 1 and ver b equals a b took on the value of a but if I were to change B um a still equals one so they're their own variable they're their own piece of data whereas objects and arrays which are really just objects objects always create a reference so if I were to say ver a equals name Will ver b equals a well now they're both pointing to the same object so if B were to change then a changed as well A's name is Fred and B's name is Fred they're the exact same object so we actually want to be able to create a new object and if you're in a recent browser you're going to have object assign which is exactly what you use for this object assign is not really new Jake's had it forever which is extend or underscore or low Dash extend can't type extend um or it's actually called assign now in low Dash to match the new object assign so we'd simply say ver a equals name will uh let's actually give it another piece of information age 35 now let's say ver b equals we're actually going to go object assign and we're going to start with a brand new object then we're going to pass in a and anything else B C D and what it's going to do is it's going to start with this brand new object and that is B then it's going to take all the values of a and apply them overwriting values of B overwriting values of c overwriting values of D overwriting until you're left with your final object so if we basically want to change a we're going to make a brand new object so B is now pointing to this guy and then it's going to take all the values of a and then we're going to change something let's change name to Fred there we go now B has the name of Fred age 35 a is untouched we didn't change a at all we merely stole its values well what do you do for arrays arrays are very similar uh you just simply use concat and use filter uh so you're just going to go ver a equals 012 ver b equals a. concat we're going to add a new value so that's going to leave a untouched and we're going to add a new value onto the end a is there and B has an extra value and then for filter let's say we want to strip a out um well a is untouched so a is 012 ver b equals a. filter and then filter is going to go through each item put the value through and we're going to see if value is not equal to two we're going to keep it in what I mess up V there you go so now B has filtered out anything that's not equal to two we keep in there so that's kind of how Filter Works and that's how you'll change an array so a is still unchanged and B's got the new values excellent so that's kind of how we're going to work on stuff and let's say you've got an object that is has both data and an array ver a equals name and things is 0 1 2 well we might have to twostage this one then so we might have to go ver b equals object assign first thing we're going to do is get B pointing to a brand new object let's pull all the values of a and then let's do name equals Fred now we need to be careful right now because B do things is still pointing to the exact same thing as a. things because this is an object if we were to change B do things uh push so now b. things has that and a. things has it as well uh oh that doesn't work let's go back and try that again go away okay let's go back to a there we go a name Will things 012 ver b equals object assign a and then we're going to go name equals Fred so we've changed Fred we're still referencing a do things so then we're going to go b. things equals a. things concat add our new one in there so now a do things completely untouched B do things completely new object B is completely new ground up so that's kind of how you're going to do immutability in JavaScript uh again you're just using object assign and then you're using concat to add stuff to an array and you're using filter to pull stuff out of an array and there's other things you can do you can use map to change all the items in an array and return a new one what's great about filter and map and reduce is they're always going to return a brand new array object concat filter map reduce and object assign they're always going to return a brand new array object um because object assign is going to return a brand new object object uh and so that's how you do immutability and that's how you keep your data pristine that's you can keep a full record of history as data changes
