With timestamps:

00:00 - in this video we are going to set up
00:01 - continuous testing for node.js project
00:04 - using sema4ci now semaphore is one of my
00:07 - favorite continuous testing platforms of
00:09 - all time because they really excel at
00:11 - speed which is one of my number one
00:13 - concerns when it comes to continuous
00:15 - testing i want it to test fast and from
00:18 - the moment you push code to github to
00:20 - the moment your tests run and complete
00:22 - in my experience sema 4ci is by far the
00:25 - fastest continuous integration platform
00:27 - out there so here's my project it's the
00:30 - simple react plus mobx app that i've
00:32 - been using for my last two videos and
00:34 - i've since added some tests to it that i
00:36 - can now run using the jest command and
00:38 - the tests run in pass so if i run jest
00:41 - here then there's my three test suites
00:44 - they run and they pass now if you want
00:46 - to see what i did to get the tests up
00:47 - and running you can look at the source
00:49 - code or even better i wrote an article
00:50 - on it on some force community tutorials
00:54 - and so it basically covers everything i
00:55 - did and why so those are up and running
00:59 - the only thing i want to do at this
01:00 - point is i want to add that jest command
01:03 - to my npm test script so when i run npm
01:06 - test it also runs just there this isn't
01:09 - something you have to do but it does
01:10 - make your life ever so slightly easier
01:13 - so this is push to github and now i just
01:15 - want to get this thing continuously
01:17 - testing so when i create a pull request
01:19 - it adds those pretty little badges that
01:21 - testing is underway and testing is
01:23 - complete and whenever i make changes to
01:25 - master or any branch it's going to test
01:27 - those so let's go over to semaphore ci i
01:30 - have a brand new account here and i'm
01:32 - going to go ahead and add a new project
01:34 - i'm going to pick my account and i'm
01:37 - going to connect it to github this is an
01:39 - extremely simple process you can choose
01:41 - public or private since this is a public
01:43 - project i'm just going to do public i'm
01:45 - never going to test private projects
01:47 - here
01:48 - and i've gone ahead and i've authorized
01:49 - that application so i can go back to my
01:51 - account
01:52 - and i can see all my github projects so
01:54 - i can see this sem test semaphore
01:58 - test there we go semtest
02:01 - and i can start building off the master
02:03 - branch let's go and do that and it's
02:05 - going to kind of analyze my project and
02:07 - determine hey this is a node.js project
02:09 - let's kind of pull in some sane defaults
02:11 - for you and get things started so i
02:14 - should have that here in just a moment
02:17 - okay there we go language is javascript
02:19 - hey you're right on that let's go ahead
02:21 - pick my node.js version i'm using the
02:23 - latest and then is the setup npm install
02:26 - yes it is is the job npm test yep that's
02:29 - my job i could change that to jest but
02:31 - i'll leave it npm test just in case i
02:33 - switch to mocha later on one day
02:36 - let's go ahead and build with these
02:38 - settings so there we go and it's
02:40 - starting my build now for context if i
02:42 - were to run npm install on my local
02:45 - macbook pro
02:47 - npm install and then run npm test with
02:49 - this project it takes about 45 seconds
02:53 - so let's see what semaphore does
02:57 - okay check that out i skipped ahead and
02:59 - one minute on the dot which if you've
03:01 - used continuous testing before one
03:03 - minute is really fast for it to set up a
03:06 - testing environment
03:08 - with nodejs installed the correct
03:10 - version do an npm install and run the
03:13 - test if it takes me 45 seconds on my
03:15 - machine to run that a minute is really
03:18 - really fast but prepare to have your
03:20 - mind blown because it actually gets
03:22 - better let's go ahead and change our
03:24 - repo and see this thing retest i'm going
03:26 - to go ahead and get this badge here for
03:28 - my readme that seems nice let's go ahead
03:30 - and add that so now this cool build
03:32 - status
03:33 - and let's add our readme
03:39 - and push that so and
03:41 - push is complete let's go back to stem
03:43 - tests
03:46 - oh it already noticed it and queued it
03:48 - and it already started running the build
03:49 - so that was pretty much instantaneous
03:52 - which is really nice and let's see how
03:54 - long it takes to build this time around
03:56 - i'll give you a hint it's a lot faster
03:59 - there you go
04:00 - 16 seconds i cut a couple seconds of
04:02 - blank space out there for you but most
04:05 - likely due to npm caching that they've
04:07 - done on their side this thing created an
04:10 - environment for my test to run it did
04:13 - npm install it ran the test in 16
04:16 - seconds which is just incredibly fast
04:20 - continuous integration incredibly fast
04:23 - test cases happening now obviously my
04:26 - tests happen really fast i'm doing them
04:28 - in node.js node.js is blazing fast for
04:31 - unit tests and even functional tests so
04:34 - i've got my act together with my project
04:37 - and semaphore has their act together
04:38 - it's a great combination tests are just
04:41 - flying through before we wrap things up
04:43 - let's go ahead and check out a pull
04:45 - request let's go back over to my repo
04:48 - you can see there we are build status
04:49 - passed awesome let's go and make a new
04:52 - branch and pull request that
04:56 - new branch
04:57 - and then let's go ahead and make some
04:58 - kind of change to something let's say
05:00 - i'll just change the readme again test
05:04 - we'll do the same thing get out readme
05:07 - we'll commit that and we'll get push so
05:09 - that's going up there
05:11 - there's my new branch let's go ahead
05:14 - pull request this
05:16 - let's go create that pull request and we
05:18 - can see that semaphore is now testing
05:20 - that okay sema4ci is
05:23 - running the build and we're going to get
05:25 - to see how long it takes for that to
05:26 - show up again to the pull request and
05:28 - it's going to happen really fast
05:31 - so there we go i cut out eight seconds
05:34 - and the tests have passed so again 15
05:38 - seconds later i can see that this pull
05:40 - request is good to go let's go ahead and
05:42 - merge it confirm that merge and we are
05:44 - done i can go back to master you can see
05:47 - that it says it's pending because it's
05:49 - running tests against the master branch
05:50 - now and if i were to refresh
05:52 - then i will see this to be
05:54 - passed here any second
06:00 - there we are my tests have passed on
06:02 - master again so i can see that the pr
06:04 - worked fine and master obviously worked
06:06 - fine so there you have it that is
06:08 - sema4ci in an extremely fast nutshell it
06:12 - is a great platform and just darn fast
06:17 - and a huge thanks to sema4ci i reached
06:19 - out told them i'd be doing a video and
06:20 - they were willing to sponsor this as
06:21 - well which i was going to bring you guys
06:23 - this content regardless because i think
06:25 - they're a great platform but huge shout
06:27 - out of thanks
06:28 - to semaphore for being willing to
06:30 - sponsor it as well hope this helped you
06:32 - out and have an excellent day

Cleaned transcript:

in this video we are going to set up continuous testing for node.js project using sema4ci now semaphore is one of my favorite continuous testing platforms of all time because they really excel at speed which is one of my number one concerns when it comes to continuous testing i want it to test fast and from the moment you push code to github to the moment your tests run and complete in my experience sema 4ci is by far the fastest continuous integration platform out there so here's my project it's the simple react plus mobx app that i've been using for my last two videos and i've since added some tests to it that i can now run using the jest command and the tests run in pass so if i run jest here then there's my three test suites they run and they pass now if you want to see what i did to get the tests up and running you can look at the source code or even better i wrote an article on it on some force community tutorials and so it basically covers everything i did and why so those are up and running the only thing i want to do at this point is i want to add that jest command to my npm test script so when i run npm test it also runs just there this isn't something you have to do but it does make your life ever so slightly easier so this is push to github and now i just want to get this thing continuously testing so when i create a pull request it adds those pretty little badges that testing is underway and testing is complete and whenever i make changes to master or any branch it's going to test those so let's go over to semaphore ci i have a brand new account here and i'm going to go ahead and add a new project i'm going to pick my account and i'm going to connect it to github this is an extremely simple process you can choose public or private since this is a public project i'm just going to do public i'm never going to test private projects here and i've gone ahead and i've authorized that application so i can go back to my account and i can see all my github projects so i can see this sem test semaphore test there we go semtest and i can start building off the master branch let's go and do that and it's going to kind of analyze my project and determine hey this is a node.js project let's kind of pull in some sane defaults for you and get things started so i should have that here in just a moment okay there we go language is javascript hey you're right on that let's go ahead pick my node.js version i'm using the latest and then is the setup npm install yes it is is the job npm test yep that's my job i could change that to jest but i'll leave it npm test just in case i switch to mocha later on one day let's go ahead and build with these settings so there we go and it's starting my build now for context if i were to run npm install on my local macbook pro npm install and then run npm test with this project it takes about 45 seconds so let's see what semaphore does okay check that out i skipped ahead and one minute on the dot which if you've used continuous testing before one minute is really fast for it to set up a testing environment with nodejs installed the correct version do an npm install and run the test if it takes me 45 seconds on my machine to run that a minute is really really fast but prepare to have your mind blown because it actually gets better let's go ahead and change our repo and see this thing retest i'm going to go ahead and get this badge here for my readme that seems nice let's go ahead and add that so now this cool build status and let's add our readme and push that so and push is complete let's go back to stem tests oh it already noticed it and queued it and it already started running the build so that was pretty much instantaneous which is really nice and let's see how long it takes to build this time around i'll give you a hint it's a lot faster there you go 16 seconds i cut a couple seconds of blank space out there for you but most likely due to npm caching that they've done on their side this thing created an environment for my test to run it did npm install it ran the test in 16 seconds which is just incredibly fast continuous integration incredibly fast test cases happening now obviously my tests happen really fast i'm doing them in node.js node.js is blazing fast for unit tests and even functional tests so i've got my act together with my project and semaphore has their act together it's a great combination tests are just flying through before we wrap things up let's go ahead and check out a pull request let's go back over to my repo you can see there we are build status passed awesome let's go and make a new branch and pull request that new branch and then let's go ahead and make some kind of change to something let's say i'll just change the readme again test we'll do the same thing get out readme we'll commit that and we'll get push so that's going up there there's my new branch let's go ahead pull request this let's go create that pull request and we can see that semaphore is now testing that okay sema4ci is running the build and we're going to get to see how long it takes for that to show up again to the pull request and it's going to happen really fast so there we go i cut out eight seconds and the tests have passed so again 15 seconds later i can see that this pull request is good to go let's go ahead and merge it confirm that merge and we are done i can go back to master you can see that it says it's pending because it's running tests against the master branch now and if i were to refresh then i will see this to be passed here any second there we are my tests have passed on master again so i can see that the pr worked fine and master obviously worked fine so there you have it that is sema4ci in an extremely fast nutshell it is a great platform and just darn fast and a huge thanks to sema4ci i reached out told them i'd be doing a video and they were willing to sponsor this as well which i was going to bring you guys this content regardless because i think they're a great platform but huge shout out of thanks to semaphore for being willing to sponsor it as well hope this helped you out and have an excellent day
