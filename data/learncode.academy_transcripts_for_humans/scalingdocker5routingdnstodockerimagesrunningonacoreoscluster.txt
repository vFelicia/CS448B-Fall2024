With timestamps:

00:00 - okay we're on the home stretch we
00:01 - basically have our whole App working the
00:03 - way we want to within the coros cluster
00:06 - uh these guys are we can run as many web
00:08 - instances as we want Dynamic load
00:10 - balancing is taking place we have one
00:12 - problem left to solve and that's that
00:14 - just like our app instances we don't
00:16 - know the IP addresses and the port
00:18 - numbers of our enginex load balancers
00:20 - because they're going to change all the
00:21 - time if we need to run three of them or
00:24 - if this one dies and gets scheduled over
00:26 - here it's going to have a new IP address
00:27 - and a new port number uh so we need to
00:30 - add two other things to complete the
00:31 - picture we need something static we need
00:34 - a fixed IP address that we can run DNS
00:37 - to so let's say we're doing mysite.com
00:39 - um I added a host entry for subdomains
00:43 - on mysite.com to point to this IP
00:47 - address right here uh which is this IP
00:50 - address this is going to be a DNS so in
00:52 - digital ocean my DNS for my site.com is
00:54 - going to point to this IP address um and
00:58 - then this guy port 80 which is HTTP and
01:01 - Port 443 for S uh for SSL are going to
01:05 - automatically load balance between all
01:07 - of our enginex instances we're going to
01:09 - create subdomains so say some app can be
01:12 - accessible by some app. my.com and if we
01:16 - add I don't know say a forms app then
01:19 - forms. then we all our forms load
01:21 - balancers will be accessible by forms.
01:24 - mysite.com or maybe there will be a path
01:27 - so mysite.com form fors will
01:30 - automatically point to our forms load
01:32 - balancers so that's what's going to
01:34 - happen up here and we're going to
01:35 - basically do the same fix we did for our
01:37 - app service Discovery is we're going to
01:41 - have our enginex load balancers register
01:43 - themselves to an etsd registry that this
01:47 - guy can watch with confd and reload
01:49 - himself so the exact same thing uh just
01:52 - a slightly different take on it um what
01:54 - we're doing is we're going to create our
01:55 - own ETD registry a new one because it's
01:58 - a bad practice for any anything outside
02:00 - of this core cluster to reference the
02:03 - internal ETD registry that's a bad
02:05 - practice so we don't want to use this
02:07 - one we want to use one that's outside of
02:09 - our core cluster uh that our engine X
02:12 - load balancers can watch so we're going
02:15 - to create ideally you'd create a cluster
02:17 - of them so there's failover you know
02:19 - three five or seven uh in this case I'm
02:21 - just going to do one and then also
02:24 - ideally you don't want one copy of
02:26 - engine X being your gateway to your
02:27 - whole app because if that goes down your
02:29 - whole app goes down um the ways around
02:32 - that is you'll share the same IP address
02:36 - uh with keep alived so you actually run
02:38 - two copies of this and uh one guy gets
02:41 - the IP traffic and if he goes down that
02:43 - IP address points to the fail over one
02:46 - um on AWS on Amazon that's called I
02:48 - believe a elastic IP because everything
02:51 - to Amazon is elastic uh they call it a
02:55 - oh what do they call it for digital
02:57 - ocean flexible IP or something like that
03:00 - um so they've got different names for
03:02 - all the services almost everybody except
03:04 - for Rackspace has that uh virtual IP
03:07 - that you can share um and you can look
03:09 - up how to do it on each of those
03:11 - services for this example to make it
03:13 - really
03:14 - easy um I'm going to create this
03:16 - registry and I'm going to make it public
03:18 - so we can actually look at it with our
03:19 - web browser you do not want this
03:21 - publicly accessible though uh because
03:23 - you don't want anybody to be able to
03:25 - write files to your ETD registry and
03:27 - have your application load balancer try
03:29 - to reconfigure itself that's a really
03:32 - terrible idea um but I'm going to
03:33 - actually make it public so we can watch
03:35 - it um so what I did is I spun up a core
03:38 - OS machine that's kind of act as our ET
03:41 - and our engine X for this example we'll
03:43 - just make it really quick and dirty uh
03:45 - let's go SSN core
03:48 - at uh Docker PS I ran ETD I just kind of
03:53 - ran the the docker Etsy image and so
03:56 - that automatically is publicly exposed
03:58 - to Port 2 379 so I can go to this IP
04:02 - address Port
04:04 - 2379 that's my IP
04:06 - address uh and then V2 keys and you see
04:10 - I've got a subdomains kind of key folder
04:12 - set up right there so any subdomains
04:14 - that show up in there I want to create
04:15 - an engine X that load balances between
04:17 - them we've kind of already solved that
04:20 - problem with conf d for engin X load
04:22 - balancer uh Docker image that we've
04:25 - created so we're going to copy this
04:27 - we're just going to make a couple little
04:28 - changes to it one in our uh in our
04:31 - engine X toml we're going to watch a
04:33 - different key structure cuz we're
04:35 - talking to a different eted registry
04:37 - we're not talking to this registry now
04:39 - we're going to talk to this registry uh
04:41 - so we're going to instead of looking at
04:44 - Services some app Upstream we're just
04:46 - going to watch subdomains and that's it
04:49 - and for our example our engine X
04:50 - template looks a little different
04:51 - whereas before we always just proxied
04:55 - into app which was an upstream of
04:57 - multiple servers which is what you
04:59 - should be doing um we're just always
05:02 - going to in this case just proxy pass to
05:04 - one fixed server cuz again for my
05:07 - example here I'm assuming you never have
05:09 - one more than one load balancer for each
05:12 - app now for this example so there we go
05:15 - do a Docker build do a Docker push uh in
05:19 - this case I did a Docker build and dock
05:21 - Docker push I called it will
05:24 - r/ engin X DNS there we go and so that's
05:28 - going to get one thing all I need to do
05:31 - is I just need to give it my etsd um let
05:34 - me show you confd watch only only
05:37 - variable I need is where how do I access
05:39 - eted as long as I know how to access ETD
05:42 - everything else is kind of configured in
05:43 - the toml here I'm watching the
05:45 - subdomains key uh so let's go ahead and
05:49 - run this container and we should be good
05:51 - so Docker run we're going to run it as a
05:54 - Damon in the
05:55 - background we're going to expose Port 80
05:58 - internal to a fix Port 80 external
06:01 - because it's getting HTTP traffic uh and
06:04 - then we can also do Port 443 if we're
06:06 - doing supporting
06:08 - SSL um I'm giving it
06:11 - ETD and ETD is running in this case on
06:14 - my same machine IP address which is this
06:17 - guy here so that would be a cluster
06:19 - somewhere else but
06:23 - 2379 and name is
06:26 - DNS and we're just going to run will R
06:28 - Stern if I could spell my own name
06:31 - engine X DNS there you go so that's
06:34 - running it's configuring itself right
06:36 - now
06:38 - um and now all we need to do is we just
06:41 - need to uh now have our load balancer
06:45 - register itself because remember uh this
06:47 - guy's got to register itself to the ETD
06:50 - registry so to do that is very simple I
06:53 - just added an exec start post we can
06:55 - really do two things we can either um
06:58 - add a sidekick service
07:00 - that does this for us just like we did
07:01 - with our SU app service or you can do it
07:04 - this way which is the sidekick service
07:06 - would be a better way of doing it but to
07:08 - show you the other way I can just do an
07:10 - exec start post so after my load
07:13 - balancer starts up I'm going to do a put
07:16 - to that there's my IP address again I'm
07:17 - going to put to etsd I'm going to
07:20 - register myself as some app and I'm
07:24 - going to give it my public IP address
07:26 - and my public Docker port and these are
07:28 - kind of those clunky commands to sniff
07:31 - out my IP address and to sniff out my
07:34 - Docker Port there might be cleaner ways
07:35 - of doing these I'm not the most awesome
07:38 - person in the world at gripping stuff
07:40 - out but these two commands are basically
07:42 - going to send my port number and my IP
07:45 - address um I'm not registering you
07:48 - remember from flannel everybody has this
07:50 - internal IP address that's not going to
07:52 - work because that's going to be internal
07:54 - to the coreos cluster um what I've got
07:57 - to do is I've got to do an IP address
07:58 - that is internal to um that is my
08:01 - publicly accessible IP address um so I'm
08:04 - going to do this IP address here and
08:07 - then I'm also going to do the docker
08:08 - Port that that's exposed to now if this
08:11 - is on the same subnet that I might be
08:14 - able to do that flannel IP address and
08:16 - automatically do Port 80 uh but in this
08:19 - instance I'm just going to do the IP
08:20 - address of the coreos node I'm on and
08:23 - then the automatically created Docker
08:26 - Port gosh that's a mouthful I'm register
08:29 - in myself that's all it is people I'm
08:31 - registering myself and here's the
08:33 - command look into it more if you want so
08:36 - I've actually already submitted this new
08:39 - service definition to Fleet and I've
08:41 - restarted that so if I actually go Keys
08:44 - recursive true you can see there's my
08:47 - submission and what I used 15 sentences
08:50 - to tell you is I submitted the IP
08:52 - address and the port number so I could
08:53 - go straight to this if I wanted
08:56 - to and you can see it's load balancing
08:58 - between 1 2 three and four excellent so
09:01 - that's the direct IP address and port
09:03 - number to this guy and then he should
09:05 - have picked up on that by now and
09:07 - created a subdomain called I think I
09:11 - called it sua yep he should have created
09:12 - a subdomain called
09:14 - sua Su app. mysite.com
09:18 - there we go that is now automatically
09:22 - generated DNS again I have a host entry
09:24 - on my computer I added so every
09:26 - subdomain from mysite.com
09:29 - comes to this IP address so there you go
09:32 - that's it we've wrapped it up we have
09:33 - completed the circle um and that's it so
09:37 - this is the only guy that actually has
09:38 - any kind of public IP address everything
09:41 - else is hidden we don't need to access
09:42 - etsd in the browser like I just did um
09:46 - and there you go hopefully the series
09:47 - helped you out um love to hear any
09:50 - feedback on it there are services that
09:52 - you can use in place a lots of these
09:54 - things you don't have to use core OS you
09:57 - can use um Apache mesos you don't have
10:00 - to use eted you can use uh gosh what's
10:04 - hashy corpse got console there's many
10:06 - other ways to do that there's other ways
10:08 - to do the DNS portion but this is a way
10:11 - to do it so have a great day and enjoy
10:13 - docker

Cleaned transcript:

okay we're on the home stretch we basically have our whole App working the way we want to within the coros cluster uh these guys are we can run as many web instances as we want Dynamic load balancing is taking place we have one problem left to solve and that's that just like our app instances we don't know the IP addresses and the port numbers of our enginex load balancers because they're going to change all the time if we need to run three of them or if this one dies and gets scheduled over here it's going to have a new IP address and a new port number uh so we need to add two other things to complete the picture we need something static we need a fixed IP address that we can run DNS to so let's say we're doing mysite.com um I added a host entry for subdomains on mysite.com to point to this IP address right here uh which is this IP address this is going to be a DNS so in digital ocean my DNS for my site.com is going to point to this IP address um and then this guy port 80 which is HTTP and Port 443 for S uh for SSL are going to automatically load balance between all of our enginex instances we're going to create subdomains so say some app can be accessible by some app. my.com and if we add I don't know say a forms app then forms. then we all our forms load balancers will be accessible by forms. mysite.com or maybe there will be a path so mysite.com form fors will automatically point to our forms load balancers so that's what's going to happen up here and we're going to basically do the same fix we did for our app service Discovery is we're going to have our enginex load balancers register themselves to an etsd registry that this guy can watch with confd and reload himself so the exact same thing uh just a slightly different take on it um what we're doing is we're going to create our own ETD registry a new one because it's a bad practice for any anything outside of this core cluster to reference the internal ETD registry that's a bad practice so we don't want to use this one we want to use one that's outside of our core cluster uh that our engine X load balancers can watch so we're going to create ideally you'd create a cluster of them so there's failover you know three five or seven uh in this case I'm just going to do one and then also ideally you don't want one copy of engine X being your gateway to your whole app because if that goes down your whole app goes down um the ways around that is you'll share the same IP address uh with keep alived so you actually run two copies of this and uh one guy gets the IP traffic and if he goes down that IP address points to the fail over one um on AWS on Amazon that's called I believe a elastic IP because everything to Amazon is elastic uh they call it a oh what do they call it for digital ocean flexible IP or something like that um so they've got different names for all the services almost everybody except for Rackspace has that uh virtual IP that you can share um and you can look up how to do it on each of those services for this example to make it really easy um I'm going to create this registry and I'm going to make it public so we can actually look at it with our web browser you do not want this publicly accessible though uh because you don't want anybody to be able to write files to your ETD registry and have your application load balancer try to reconfigure itself that's a really terrible idea um but I'm going to actually make it public so we can watch it um so what I did is I spun up a core OS machine that's kind of act as our ET and our engine X for this example we'll just make it really quick and dirty uh let's go SSN core at uh Docker PS I ran ETD I just kind of ran the the docker Etsy image and so that automatically is publicly exposed to Port 2 379 so I can go to this IP address Port 2379 that's my IP address uh and then V2 keys and you see I've got a subdomains kind of key folder set up right there so any subdomains that show up in there I want to create an engine X that load balances between them we've kind of already solved that problem with conf d for engin X load balancer uh Docker image that we've created so we're going to copy this we're just going to make a couple little changes to it one in our uh in our engine X toml we're going to watch a different key structure cuz we're talking to a different eted registry we're not talking to this registry now we're going to talk to this registry uh so we're going to instead of looking at Services some app Upstream we're just going to watch subdomains and that's it and for our example our engine X template looks a little different whereas before we always just proxied into app which was an upstream of multiple servers which is what you should be doing um we're just always going to in this case just proxy pass to one fixed server cuz again for my example here I'm assuming you never have one more than one load balancer for each app now for this example so there we go do a Docker build do a Docker push uh in this case I did a Docker build and dock Docker push I called it will r/ engin X DNS there we go and so that's going to get one thing all I need to do is I just need to give it my etsd um let me show you confd watch only only variable I need is where how do I access eted as long as I know how to access ETD everything else is kind of configured in the toml here I'm watching the subdomains key uh so let's go ahead and run this container and we should be good so Docker run we're going to run it as a Damon in the background we're going to expose Port 80 internal to a fix Port 80 external because it's getting HTTP traffic uh and then we can also do Port 443 if we're doing supporting SSL um I'm giving it ETD and ETD is running in this case on my same machine IP address which is this guy here so that would be a cluster somewhere else but 2379 and name is DNS and we're just going to run will R Stern if I could spell my own name engine X DNS there you go so that's running it's configuring itself right now um and now all we need to do is we just need to uh now have our load balancer register itself because remember uh this guy's got to register itself to the ETD registry so to do that is very simple I just added an exec start post we can really do two things we can either um add a sidekick service that does this for us just like we did with our SU app service or you can do it this way which is the sidekick service would be a better way of doing it but to show you the other way I can just do an exec start post so after my load balancer starts up I'm going to do a put to that there's my IP address again I'm going to put to etsd I'm going to register myself as some app and I'm going to give it my public IP address and my public Docker port and these are kind of those clunky commands to sniff out my IP address and to sniff out my Docker Port there might be cleaner ways of doing these I'm not the most awesome person in the world at gripping stuff out but these two commands are basically going to send my port number and my IP address um I'm not registering you remember from flannel everybody has this internal IP address that's not going to work because that's going to be internal to the coreos cluster um what I've got to do is I've got to do an IP address that is internal to um that is my publicly accessible IP address um so I'm going to do this IP address here and then I'm also going to do the docker Port that that's exposed to now if this is on the same subnet that I might be able to do that flannel IP address and automatically do Port 80 uh but in this instance I'm just going to do the IP address of the coreos node I'm on and then the automatically created Docker Port gosh that's a mouthful I'm register in myself that's all it is people I'm registering myself and here's the command look into it more if you want so I've actually already submitted this new service definition to Fleet and I've restarted that so if I actually go Keys recursive true you can see there's my submission and what I used 15 sentences to tell you is I submitted the IP address and the port number so I could go straight to this if I wanted to and you can see it's load balancing between 1 2 three and four excellent so that's the direct IP address and port number to this guy and then he should have picked up on that by now and created a subdomain called I think I called it sua yep he should have created a subdomain called sua Su app. mysite.com there we go that is now automatically generated DNS again I have a host entry on my computer I added so every subdomain from mysite.com comes to this IP address so there you go that's it we've wrapped it up we have completed the circle um and that's it so this is the only guy that actually has any kind of public IP address everything else is hidden we don't need to access etsd in the browser like I just did um and there you go hopefully the series helped you out um love to hear any feedback on it there are services that you can use in place a lots of these things you don't have to use core OS you can use um Apache mesos you don't have to use eted you can use uh gosh what's hashy corpse got console there's many other ways to do that there's other ways to do the DNS portion but this is a way to do it so have a great day and enjoy docker
