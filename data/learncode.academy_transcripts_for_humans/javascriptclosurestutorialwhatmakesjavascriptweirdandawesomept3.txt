With timestamps:

00:01 - all right let's get into some of the
00:02 - weightier issues of JavaScript here um
00:05 - now that you kind of know about the
00:07 - first class functions and why code looks
00:09 - the way it does event driven environment
00:11 - these are all kind of things that are
00:13 - created because of the event driven
00:15 - environment and so let's go ahead and
00:18 - look into uh what closures are in this
00:21 - video this is a very misunderstood and
00:24 - and oftentimes perceived as very complex
00:27 - thing to JavaScript that really isn't
00:29 - that complex of an idea if you if you
00:31 - think about it from the right
00:32 - perspective um let's look at it from an
00:34 - event driven environment perspective so
00:38 - um here we go on document ready function
00:40 - we want to alert a I'm going to go there
00:43 - a equals 1 so this function runs when
00:48 - the document is ready sets up this
00:50 - listener and this is going to be the
00:52 - only guy running when the button is
00:54 - clicked the problem is is this function
00:58 - already ran created a and it's done the
01:01 - function is finished but we don't want a
01:03 - to disappear because this function has
01:06 - to access it in order to alert it
01:08 - JavaScript notices this it notices that
01:11 - there's what's called a reference to
01:13 - something that is in a different scope
01:16 - um and so it keeps uh it keeps this
01:19 - variable a alive uh the textbook
01:22 - definition of a closure is something
01:24 - that retains State and scope after it
01:29 - executes
01:30 - so after this function executes it's
01:33 - going to remember the state I.E it's
01:35 - going to remember that variable a exists
01:37 - and that variable a equals 1 um and
01:40 - scope which we'll get into in the next
01:42 - one because that's a video all on its
01:43 - own but it's going to remember that this
01:46 - exists so anytime later on this function
01:49 - that references a has access to it um
01:53 - and so let's go ahead and see if this
01:54 - works here I'm going to go save every
01:57 - time I click it it's able to alert one
02:00 - and it's also able to modify it I can go
02:03 - A++ which if you're new is a fancy way
02:05 - of saying AAL a +
02:08 - 1 um so now it should alert to yep so
02:12 - now a exists it's been modified a now
02:15 - equals two if I click it again it's
02:18 - going to change a to three and it's
02:19 - going to alert it again so this a is in
02:23 - a closure this whole function ran uh but
02:27 - then all the variables of the function
02:30 - are saved off in memory land um and
02:33 - they're accessible by this guy as long
02:36 - as I exist so as long as this event
02:40 - listener for button exists a is stored
02:43 - in JavaScript memory it's a closure that
02:46 - JavaScript will not let go of as long as
02:49 - there is a reference to a so this is
02:52 - also where the JavaScript is really good
02:55 - at taking care of memory and the garbage
02:58 - collection cleaning it up but this is
03:00 - kind of your first introduction to what
03:01 - a memory leak is a memory leak is when
03:05 - you have maybe say a lot of variables in
03:08 - memory that you don't need anymore uh
03:11 - let's say this button is gone we don't
03:14 - need this button click event to happen
03:16 - anymore uh then we're actually going to
03:18 - want to go
03:20 - button off click that's going to unbind
03:25 - it that listener is gone there's no more
03:28 - no longer a reference
03:30 - uh this function is gone it's removed
03:32 - there's no longer a reference to a and
03:35 - so JavaScript will garbage collect this
03:38 - entire function this whole area here all
03:42 - the variables everything can now get
03:44 - trashed the memory can be freed up
03:46 - because JavaScript is smart enough to
03:47 - know that it's not necessary anymore
03:49 - there's no more code listening to it it
03:51 - can be garbage collected um and unless
03:54 - you do that I mean it's really not a big
03:56 - deal in most applications unless you get
03:58 - to really huge huge JavaScript
04:01 - applications uh because honestly
04:03 - remembering that a equals 1 is nothing
04:05 - uh you can do that a thousand times over
04:07 - and chrome does not care your browser is
04:10 - not going to get bogged down by a
04:12 - thousand tiny little
04:14 - variables um but that is what it means
04:16 - that's what a closure is a function ran
04:19 - uh the function executed it's done
04:21 - executing it's not ever going to execute
04:23 - again um and then is going to remember
04:27 - that there are references to certain VAR
04:29 - variables so it will keep those
04:31 - variables alive in a memory place that
04:35 - is called a closure if that makes sense
04:38 - that's what a closure is and let's get
04:40 - on now to scope and
04:43 - context

Cleaned transcript:

all right let's get into some of the weightier issues of JavaScript here um now that you kind of know about the first class functions and why code looks the way it does event driven environment these are all kind of things that are created because of the event driven environment and so let's go ahead and look into uh what closures are in this video this is a very misunderstood and and oftentimes perceived as very complex thing to JavaScript that really isn't that complex of an idea if you if you think about it from the right perspective um let's look at it from an event driven environment perspective so um here we go on document ready function we want to alert a I'm going to go there a equals 1 so this function runs when the document is ready sets up this listener and this is going to be the only guy running when the button is clicked the problem is is this function already ran created a and it's done the function is finished but we don't want a to disappear because this function has to access it in order to alert it JavaScript notices this it notices that there's what's called a reference to something that is in a different scope um and so it keeps uh it keeps this variable a alive uh the textbook definition of a closure is something that retains State and scope after it executes so after this function executes it's going to remember the state I.E it's going to remember that variable a exists and that variable a equals 1 um and scope which we'll get into in the next one because that's a video all on its own but it's going to remember that this exists so anytime later on this function that references a has access to it um and so let's go ahead and see if this works here I'm going to go save every time I click it it's able to alert one and it's also able to modify it I can go A++ which if you're new is a fancy way of saying AAL a + 1 um so now it should alert to yep so now a exists it's been modified a now equals two if I click it again it's going to change a to three and it's going to alert it again so this a is in a closure this whole function ran uh but then all the variables of the function are saved off in memory land um and they're accessible by this guy as long as I exist so as long as this event listener for button exists a is stored in JavaScript memory it's a closure that JavaScript will not let go of as long as there is a reference to a so this is also where the JavaScript is really good at taking care of memory and the garbage collection cleaning it up but this is kind of your first introduction to what a memory leak is a memory leak is when you have maybe say a lot of variables in memory that you don't need anymore uh let's say this button is gone we don't need this button click event to happen anymore uh then we're actually going to want to go button off click that's going to unbind it that listener is gone there's no more no longer a reference uh this function is gone it's removed there's no longer a reference to a and so JavaScript will garbage collect this entire function this whole area here all the variables everything can now get trashed the memory can be freed up because JavaScript is smart enough to know that it's not necessary anymore there's no more code listening to it it can be garbage collected um and unless you do that I mean it's really not a big deal in most applications unless you get to really huge huge JavaScript applications uh because honestly remembering that a equals 1 is nothing uh you can do that a thousand times over and chrome does not care your browser is not going to get bogged down by a thousand tiny little variables um but that is what it means that's what a closure is a function ran uh the function executed it's done executing it's not ever going to execute again um and then is going to remember that there are references to certain VAR variables so it will keep those variables alive in a memory place that is called a closure if that makes sense that's what a closure is and let's get on now to scope and context
