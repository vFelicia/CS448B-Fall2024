With timestamps:

00:00 - one of the first questions you'll get
00:02 - when people are learning flux is with
00:04 - actions well this seems great for all
00:06 - these synchronous actions that happen
00:08 - inside of the application how do I
00:10 - handle asynchronous actions like let's
00:12 - say I want to load data from another
00:14 - page and then create an action when
00:17 - that's done that actually is a lot
00:19 - simpler than it may seem at first let's
00:21 - change this I've got this web app here
00:23 - with a create button that just creates a
00:25 - Tim stamp to do um you see every time I
00:28 - hit create create it creates a new one
00:29 - so let's change this button to load or
00:33 - reload let's say that's going to
00:35 - actually reload
00:39 - to-dos reload
00:42 - to-dos and we'll go to-do actions reload
00:47 - to-dos and we don't really need to pass
00:49 - it any
00:50 - information so now we just need to
00:51 - create this reload Tod
00:58 - action so reload Tod do is would
01:01 - normally do something like say you know
01:03 - it's going to call axios or you know
01:05 - jQuery ajax if you're using that still
01:08 - um axios and we're just going to get
01:11 - some
01:14 - URL some url.com some data end
01:20 - point okay so it's going to do that and
01:26 - then data it's going to have all of our
01:29 - data here
01:33 - so we want this to kind of notify my app
01:37 - when all the data comes through how do
01:38 - we do that uh to fake this I can just
01:41 - use a set timeout and really all you do
01:43 - is you just dispatch multiple events so
01:45 - we're going to go
01:48 - dispatcher when we first start loading
01:50 - our
01:52 - event I'm going to say fetching or
01:56 - fetch to-dos so I'm going to fire off a
01:58 - fetch to-dos event
02:00 - just in case anybody cares about that
02:02 - maybe there's a loader that's going to
02:03 - start loading uh maybe my to-dos is
02:06 - going to listen to that and change
02:08 - to-dos this state. loading to true so
02:12 - then we can now spit out a loader on the
02:14 - page um like I said maybe maybe I can
02:17 - listen to more than uh just the to-do
02:19 - store change event maybe I can listen to
02:21 - something else um so we're going to
02:23 - start off by firing a fetch to-dos event
02:26 - and then we're going to go ahead and
02:27 - start our Ajax operation which I'll just
02:30 - pretend by doing a set
02:34 - timeout and let's say a second later
02:38 - which is a long time but it helps to
02:39 - visually see it second later we've got
02:41 - our data awesome uh so now we just
02:43 - dispatch a second
02:46 - event type
02:48 - is
02:50 - receive Tod
02:53 - do and let me say there's some data in
02:56 - here so this will come with some data um
02:59 - maybe that you know Ajax returned some
03:01 - data for us let me go to that to-do
03:03 - store and kind of snatch this out and
03:06 - we'll make this thing receive some new
03:08 - to-dos after one second so a second
03:11 - after you hit the button it's going to
03:12 - pull in some other mumbo jumbo let's
03:14 - create some fake IDs
03:17 - here and we're going to go shopping
03:20 - again we're going to hug your
03:24 - wife not your wife hug your own wife um
03:27 - and let's say that that one's true
03:30 - um because we should do that often good
03:32 - husband uh so there we go so we're going
03:34 - to dispatch the event that we fetched
03:35 - our to-dos and then we're going to fetch
03:37 - our other event when we receive to-dos
03:40 - let's say there was some sort of
03:41 - problem if something goes wrong then you
03:44 - can actually dispatch a receive to-do's
03:47 - error and this will be like uh what goes
03:50 - wrong or fetch to-do's error probably
03:53 - makes more sense so we didn't receive
03:54 - anything fetch to-do's error so we could
03:57 - respond to the fetch to-do error uh
03:59 - let's go and load this up to-dos save it
04:02 - all so again I'm going to hit this
04:04 - reload button and when reload button
04:06 - fires we're going to call to-do actions
04:09 - reload to-dos at the very beginning
04:11 - we're going to fire fetch to-dos we're
04:13 - going to dispatch that and then one
04:15 - second later when we've loaded them up
04:17 - we're going to fire receive to-dos now
04:19 - the store doesn't have a receive to-dos
04:21 - method yet so we need to do something uh
04:24 - when receive to-dos comes through so
04:25 - receive
04:28 - to-dos we're going to rece reive
04:36 - to-dos and you could actually just go
04:38 - this to-dos I'll just hack this in here
04:39 - this to-dos equals action
04:44 - to-dos I think that's what I called it
04:46 - didn't I type I didn't give it a name
04:50 - there we go so I'm dispatching a type of
04:52 - receive to-dos and a to-dos value will
04:54 - be the array of new
04:56 - to-dos so there we go if you're if we're
04:59 - receiving to-do let's just wipe the
05:00 - whole thing and let's fire this
05:03 - dot emit change got to make sure we emit
05:07 - that change so our component knows to
05:10 - update no errors that's good reload and
05:14 - a second later we've got new to-dos
05:16 - let's try that again let's refresh our
05:18 - page so we've got go shopping and pay
05:20 - water bill if you reload goes to the
05:21 - server and a second later we've got our
05:24 - updated to-dos so that's how you handle
05:26 - your async operations in flux

Cleaned transcript:

one of the first questions you'll get when people are learning flux is with actions well this seems great for all these synchronous actions that happen inside of the application how do I handle asynchronous actions like let's say I want to load data from another page and then create an action when that's done that actually is a lot simpler than it may seem at first let's change this I've got this web app here with a create button that just creates a Tim stamp to do um you see every time I hit create create it creates a new one so let's change this button to load or reload let's say that's going to actually reload todos reload todos and we'll go todo actions reload todos and we don't really need to pass it any information so now we just need to create this reload Tod action so reload Tod do is would normally do something like say you know it's going to call axios or you know jQuery ajax if you're using that still um axios and we're just going to get some URL some url.com some data end point okay so it's going to do that and then data it's going to have all of our data here so we want this to kind of notify my app when all the data comes through how do we do that uh to fake this I can just use a set timeout and really all you do is you just dispatch multiple events so we're going to go dispatcher when we first start loading our event I'm going to say fetching or fetch todos so I'm going to fire off a fetch todos event just in case anybody cares about that maybe there's a loader that's going to start loading uh maybe my todos is going to listen to that and change todos this state. loading to true so then we can now spit out a loader on the page um like I said maybe maybe I can listen to more than uh just the todo store change event maybe I can listen to something else um so we're going to start off by firing a fetch todos event and then we're going to go ahead and start our Ajax operation which I'll just pretend by doing a set timeout and let's say a second later which is a long time but it helps to visually see it second later we've got our data awesome uh so now we just dispatch a second event type is receive Tod do and let me say there's some data in here so this will come with some data um maybe that you know Ajax returned some data for us let me go to that todo store and kind of snatch this out and we'll make this thing receive some new todos after one second so a second after you hit the button it's going to pull in some other mumbo jumbo let's create some fake IDs here and we're going to go shopping again we're going to hug your wife not your wife hug your own wife um and let's say that that one's true um because we should do that often good husband uh so there we go so we're going to dispatch the event that we fetched our todos and then we're going to fetch our other event when we receive todos let's say there was some sort of problem if something goes wrong then you can actually dispatch a receive todo's error and this will be like uh what goes wrong or fetch todo's error probably makes more sense so we didn't receive anything fetch todo's error so we could respond to the fetch todo error uh let's go and load this up todos save it all so again I'm going to hit this reload button and when reload button fires we're going to call todo actions reload todos at the very beginning we're going to fire fetch todos we're going to dispatch that and then one second later when we've loaded them up we're going to fire receive todos now the store doesn't have a receive todos method yet so we need to do something uh when receive todos comes through so receive todos we're going to rece reive todos and you could actually just go this todos I'll just hack this in here this todos equals action todos I think that's what I called it didn't I type I didn't give it a name there we go so I'm dispatching a type of receive todos and a todos value will be the array of new todos so there we go if you're if we're receiving todo let's just wipe the whole thing and let's fire this dot emit change got to make sure we emit that change so our component knows to update no errors that's good reload and a second later we've got new todos let's try that again let's refresh our page so we've got go shopping and pay water bill if you reload goes to the server and a second later we've got our updated todos so that's how you handle your async operations in flux
