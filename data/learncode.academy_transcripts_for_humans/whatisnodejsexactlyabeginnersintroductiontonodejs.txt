With timestamps:

00:01 - hey there so I've got a lot of node.js
00:03 - videos coming up uh I've already
00:05 - recorded some videos on how to do
00:06 - deployments with node.js automated
00:08 - deployments fun stuff but first I wanted
00:11 - to answer the question uh with an
00:13 - introductory video of what is node.js
00:14 - I've had a lot of people ask me this
00:16 - people are saying stuff like hey I've
00:18 - been doing PHP for a lot of years uh but
00:20 - I don't exactly get what node.js is
00:23 - sounds confusing seems like it means a
00:24 - lot of different things and it kind of
00:26 - does to some people so we're going to
00:28 - answer that uh the simple question is or
00:32 - the simple answer is is the makers of
00:34 - node.js took JavaScript which is
00:37 - normally confined to a browser and they
00:39 - allowed it to run on your computer so
00:42 - normally you know JavaScript runs in the
00:45 - browser it can only access your web page
00:48 - uh but when you allow it to run when you
00:50 - give it a an environment to run on the
00:52 - machine they took Google Chrome's V8
00:55 - engine which is an awesome JavaScript
00:56 - engine and now V8 runs on your machine
01:00 - and so this whole new world opens up now
01:02 - you can access the files on your
01:04 - computer which you normally can't do
01:05 - with JavaScript you can listen to
01:07 - Network traffic on your computer you can
01:10 - listen to http requests your machine
01:12 - gets and send back a file you can access
01:15 - databases directly all sorts of great
01:16 - stuff basically anything you could do
01:18 - with PHP or Ruby on Rails you can now do
01:20 - with JavaScript in node.js and so
01:23 - there's basically two categories of what
01:25 - people are doing with node they're
01:27 - building utilities on the machine which
01:30 - is like utilities for your day in day
01:32 - out development that would be gulp grunt
01:35 - yman you know uh you know things that
01:39 - you'll concatenate and build JavaScript
01:41 - files with or it'll listen to file
01:43 - system changes and it'll do live reload
01:46 - or you know whenever you save a SAS file
01:48 - it will automatically convert a CSS file
01:50 - utilities on your machine if you say a
01:52 - job description if you see a job
01:54 - description that says you know front end
01:56 - developer no js's in there somewhere
01:59 - they probably referring to this kind of
02:01 - node.js if you see a job description
02:04 - that says node.js engineer node.js
02:06 - developer they're probably talking to
02:08 - the other use case which is let's build
02:09 - a web server a web application with node
02:12 - instead of using Ruby on Rails PHP
02:15 - python we're going to use Express
02:20 - framework for node.js or COA framework
02:22 - for nodejs or whatever and we're going
02:24 - to build our web application in this and
02:27 - so that's kind of what the other use
02:28 - case is so so let's do some super Basics
02:31 - on how this node.js thing works well for
02:33 - one if you go to nodejs.org you can
02:35 - install it on your machine then you can
02:37 - type node DV there you go I've got a
02:39 - version I can actually just type node
02:41 - right now and now I'm running a process
02:43 - a process you know kind of a program
02:45 - that's running on your computer I've now
02:47 - created a new process I can type
02:49 - JavaScript ver a equals 1 and type A A
02:52 - equals 1 just like I would normally do
02:54 - on a console but what's different about
02:57 - this is this process right here runs
03:00 - within window so if I go ver a equals 1
03:04 - then window. a equals 1 because window
03:08 - is my Global scope there is no window
03:11 - object on a node.js process because
03:13 - there's no window uh what there is is a
03:16 - global
03:17 - object Global a equals 1 and then
03:20 - there's also no document object uh
03:23 - JavaScript has a global document object
03:25 - which is my HTML document that this
03:27 - thing's built upon well this isn't tied
03:30 - to an HTML document it's tied to a
03:32 - process uh which is the actual program
03:35 - process that's running right now so I
03:37 - have a process object and that's kind of
03:40 - two differences I'm going to control C
03:42 - twice to get out of that uh and you can
03:45 - also I have my module 1js right here you
03:47 - can also run
03:49 - node module one um and I don't have to
03:52 - put JS but I can and so it runs this and
03:55 - exits cuz nothing's happening so I can
03:57 - go console log High
04:00 - and then I can run that again hi now you
04:03 - can do ver a equals 1 console log
04:08 - a and then run that again says hi it
04:11 - says one so that's kind of how you'll
04:13 - actually execute files just like you
04:15 - would execute PHP files or something
04:17 - like that on your machine and how they
04:21 - let's get into modules real quick um how
04:23 - modules work within node because this is
04:25 - going to apply either way and I'm
04:28 - probably I'm pretty much only going to
04:29 - get into two modules npm and a basic web
04:32 - server and then we're done and that's
04:34 - kind of going to give you the overall
04:36 - scope of how you program in node.js so
04:39 - modules are how you basically load one
04:43 - file into another if you've used
04:45 - required JS you already get the concept
04:47 - let's go there to uh M2 equals require
04:52 - module 2 so that's saying before I do
04:55 - any more code I need to load in module 2
04:57 - so here's my module 2 I actually have to
05:00 - do this which means I'm looking for a
05:02 - file in the same directory or I could go
05:07 - uh you know if there was other folders
05:08 - going on here I could go folder 2/m
05:12 - module 2 it basically assumes JS is
05:15 - added just like you know if you were
05:17 - running a file over here so in this case
05:19 - it's in the same directory I'm just
05:20 - going to require. module 2 and let's
05:23 - console log this
05:25 - M2 run it and module 2 is a function
05:29 - let's delete that that's from earlier
05:31 - stuff that I was testing the video
05:34 - module 2 is an empty object because
05:36 - module 2 is not exporting anything at
05:38 - all I can go ver a equals 1 run it still
05:43 - nothing I've defined ver a in here but
05:46 - I'm not exporting that to get this from
05:48 - module 2 into module one it's whatever
05:50 - is exporting from module 2 is what will
05:53 - get passed into this M2 variable so if I
05:56 - go module
05:58 - exports a equal a so now I'm assigning a
06:02 - to module exports a there you go now the
06:05 - value of a is
06:08 - one I can go module exports b equals 2
06:12 - and now you see I'm just basically
06:13 - building a whole object uh you can also
06:16 - shorthand this you can just go exports
06:19 - exports a equals that same thing works
06:21 - just fine or you can override the entire
06:24 - module exports
06:26 - object and make it a function
06:34 - so module two so now I can actually go
06:37 - M2 equals require module 2 and I can run
06:41 - M2 because it's a function now so there
06:43 - you go when I run function module 2 it's
06:46 - going to console log it so that's kind
06:48 - of how modules work uh that's kind of
06:50 - how your separation of files Works in
06:52 - node.js
06:53 - and what they've also built is this node
06:56 - package manager which is npm it comes
06:59 - with with node and that allows you to
07:01 - actually download um and manage packages
07:04 - which is really cool so I can go npm
07:07 - install underscore it's pretty popular
07:12 - module so now it made a node modules
07:15 - folder and it added underscore in there
07:18 - and so now I can
07:19 - actually go
07:22 - there equals require
07:25 - underscore no no file path no Dot SL
07:29 - just underscore and so that's going to
07:32 - look in my node modules folder for the
07:33 - underscore module and the
07:37 - underscore package will tell me what
07:39 - file that loads and that is by default
07:41 - just going to load underscore so now I
07:45 - can
07:48 - go uh C console log my underscore
07:56 - character and when I run module one you
07:58 - see that's the whole under _ Library
08:00 - awesome super cool so npm is a super
08:03 - easy way of installing common
08:06 - things um and then the other piece to
08:10 - npm is ideally you want to save them in
08:12 - a package if you're working on a project
08:15 - and you have 15 different node modules
08:17 - you don't want to have you don't want to
08:19 - have to run npm install every time
08:21 - somebody downloads your you know GitHub
08:24 - repository and needs these dependencies
08:27 - you want to be able to save the many
08:29 - dependencies you have so you'll actually
08:31 - run npm and nit and we're actually going
08:33 - to start an npm package here real quick
08:36 - name what is node sure sure sure sure
08:39 - sure sure sure um and so I just said
08:43 - okay to everything and it made a package
08:45 - Json file for me and so it's called what
08:48 - is node has a version blah blah blah and
08:50 - you see it already added underscore as a
08:52 - dependency for me because I've already
08:54 - installed that so now I can
08:58 - do npm
09:00 - install
09:04 - backbone if I run npm install backbone
09:07 - it added to my node modules as well but
09:09 - it did not add to my package Json
09:11 - because I didn't do the flash s or slash
09:14 - dash s flag so now if i do- s that's for
09:18 - save you can see that it now added
09:21 - Backbone in here into my package Json as
09:24 - well um and so now I've got the two
09:27 - going on let's say I delete this node
09:30 - modules folder Al together bye-bye go
09:33 - away you don't want to keep the node
09:35 - modules in so now my my whole node
09:37 - project consists of this one package
09:39 - Json file and all I have to do is go npm
09:43 - install npm install is going to look
09:46 - through all the dependencies and it's
09:47 - going to get them
09:49 - all there you go now I've got all my
09:51 - node modules and now everything's going
09:53 - to work I can require UND underscore
09:56 - again so that's kind of if that made
09:59 - sense that's how npm Works npm allows
10:02 - you to maintain all your dependencies
10:04 - one of the awesome things about node is
10:08 - there's thousands and thousands of
10:09 - dependencies that people are building
10:11 - all the time that allow you to do cool
10:14 - things like uh you know access web
10:17 - services or log into Google with your
10:19 - Google email address there's packages
10:21 - out there for all this stuff so in node
10:24 - you can just load in a package real time
10:26 - the package will do the dirty work for
10:28 - you and you can focus on building your
10:30 - application let's look at the HTTP
10:33 - package which is what we use to make a
10:34 - basic web server we don't have to
10:37 - install this with npm because it comes
10:39 - built into
10:41 - node
10:44 - HTTP and we can go HTTP create
10:48 - server and let's give that a
10:50 - function whoops and we'll go ver server
10:53 - equals that returns a
10:56 - server and that server can listen to
10:59 - Port 3002 normally run node stuff on
11:02 - Port 3000 actually so we'll do Port
11:05 - 3000 makes this a little bigger here so
11:08 - now I'm going to create a web server and
11:12 - that web server will get
11:14 - request
11:16 - response and so whenever I get an
11:18 - incoming request on Port 3000 this
11:21 - function will fire and I get to access
11:24 - what they're requesting and I get to
11:25 - actually make a little response so I'm
11:27 - going to do is I'm going to console log
11:29 - got a
11:31 - request and I'm going to do
11:35 - response
11:37 - dot
11:39 - WR hi and I'm going to
11:45 - response.end there we go and now let's
11:48 - run
11:50 - this so you notice it runs and it keeps
11:53 - running it doesn't stop because there is
11:55 - an open server running that's listening
11:58 - to any request on Port 3000 so if I go
12:00 - to Port 3000 it says hi and it says hey
12:04 - I got a request let's do it again nice
12:07 - got another request it's sent back high
12:09 - if I keep doing this it's going to keep
12:12 - saying hey I got a request I got a
12:14 - request let's send high back every time
12:16 - super cool it's super awesome and so
12:19 - that's kind of how you build a basic web
12:21 - server um you could listen to if I went
12:24 - Local Host 3000 slash give me a file
12:29 - then it's still just going to say hey
12:30 - because there's no smart code in here
12:32 - listening to what the path is and what
12:35 - we're going to do with that path and so
12:39 - but we could listen to the path and if
12:40 - the path is image. jpeg we could go get
12:44 - image. JPEG and respond back with that
12:47 - so that's kind of what node.js is from
12:50 - here on out you get to mess around with
12:52 - it if you want to learn how to build an
12:54 - Express web app then I have a video on
12:57 - that already I'm going to put that video
12:59 - the description and that's an
13:00 - introduction to
13:03 - nodejs

Cleaned transcript:

hey there so I've got a lot of node.js videos coming up uh I've already recorded some videos on how to do deployments with node.js automated deployments fun stuff but first I wanted to answer the question uh with an introductory video of what is node.js I've had a lot of people ask me this people are saying stuff like hey I've been doing PHP for a lot of years uh but I don't exactly get what node.js is sounds confusing seems like it means a lot of different things and it kind of does to some people so we're going to answer that uh the simple question is or the simple answer is is the makers of node.js took JavaScript which is normally confined to a browser and they allowed it to run on your computer so normally you know JavaScript runs in the browser it can only access your web page uh but when you allow it to run when you give it a an environment to run on the machine they took Google Chrome's V8 engine which is an awesome JavaScript engine and now V8 runs on your machine and so this whole new world opens up now you can access the files on your computer which you normally can't do with JavaScript you can listen to Network traffic on your computer you can listen to http requests your machine gets and send back a file you can access databases directly all sorts of great stuff basically anything you could do with PHP or Ruby on Rails you can now do with JavaScript in node.js and so there's basically two categories of what people are doing with node they're building utilities on the machine which is like utilities for your day in day out development that would be gulp grunt yman you know uh you know things that you'll concatenate and build JavaScript files with or it'll listen to file system changes and it'll do live reload or you know whenever you save a SAS file it will automatically convert a CSS file utilities on your machine if you say a job description if you see a job description that says you know front end developer no js's in there somewhere they probably referring to this kind of node.js if you see a job description that says node.js engineer node.js developer they're probably talking to the other use case which is let's build a web server a web application with node instead of using Ruby on Rails PHP python we're going to use Express framework for node.js or COA framework for nodejs or whatever and we're going to build our web application in this and so that's kind of what the other use case is so so let's do some super Basics on how this node.js thing works well for one if you go to nodejs.org you can install it on your machine then you can type node DV there you go I've got a version I can actually just type node right now and now I'm running a process a process you know kind of a program that's running on your computer I've now created a new process I can type JavaScript ver a equals 1 and type A A equals 1 just like I would normally do on a console but what's different about this is this process right here runs within window so if I go ver a equals 1 then window. a equals 1 because window is my Global scope there is no window object on a node.js process because there's no window uh what there is is a global object Global a equals 1 and then there's also no document object uh JavaScript has a global document object which is my HTML document that this thing's built upon well this isn't tied to an HTML document it's tied to a process uh which is the actual program process that's running right now so I have a process object and that's kind of two differences I'm going to control C twice to get out of that uh and you can also I have my module 1js right here you can also run node module one um and I don't have to put JS but I can and so it runs this and exits cuz nothing's happening so I can go console log High and then I can run that again hi now you can do ver a equals 1 console log a and then run that again says hi it says one so that's kind of how you'll actually execute files just like you would execute PHP files or something like that on your machine and how they let's get into modules real quick um how modules work within node because this is going to apply either way and I'm probably I'm pretty much only going to get into two modules npm and a basic web server and then we're done and that's kind of going to give you the overall scope of how you program in node.js so modules are how you basically load one file into another if you've used required JS you already get the concept let's go there to uh M2 equals require module 2 so that's saying before I do any more code I need to load in module 2 so here's my module 2 I actually have to do this which means I'm looking for a file in the same directory or I could go uh you know if there was other folders going on here I could go folder 2/m module 2 it basically assumes JS is added just like you know if you were running a file over here so in this case it's in the same directory I'm just going to require. module 2 and let's console log this M2 run it and module 2 is a function let's delete that that's from earlier stuff that I was testing the video module 2 is an empty object because module 2 is not exporting anything at all I can go ver a equals 1 run it still nothing I've defined ver a in here but I'm not exporting that to get this from module 2 into module one it's whatever is exporting from module 2 is what will get passed into this M2 variable so if I go module exports a equal a so now I'm assigning a to module exports a there you go now the value of a is one I can go module exports b equals 2 and now you see I'm just basically building a whole object uh you can also shorthand this you can just go exports exports a equals that same thing works just fine or you can override the entire module exports object and make it a function so module two so now I can actually go M2 equals require module 2 and I can run M2 because it's a function now so there you go when I run function module 2 it's going to console log it so that's kind of how modules work uh that's kind of how your separation of files Works in node.js and what they've also built is this node package manager which is npm it comes with with node and that allows you to actually download um and manage packages which is really cool so I can go npm install underscore it's pretty popular module so now it made a node modules folder and it added underscore in there and so now I can actually go there equals require underscore no no file path no Dot SL just underscore and so that's going to look in my node modules folder for the underscore module and the underscore package will tell me what file that loads and that is by default just going to load underscore so now I can go uh C console log my underscore character and when I run module one you see that's the whole under _ Library awesome super cool so npm is a super easy way of installing common things um and then the other piece to npm is ideally you want to save them in a package if you're working on a project and you have 15 different node modules you don't want to have you don't want to have to run npm install every time somebody downloads your you know GitHub repository and needs these dependencies you want to be able to save the many dependencies you have so you'll actually run npm and nit and we're actually going to start an npm package here real quick name what is node sure sure sure sure sure sure sure um and so I just said okay to everything and it made a package Json file for me and so it's called what is node has a version blah blah blah and you see it already added underscore as a dependency for me because I've already installed that so now I can do npm install backbone if I run npm install backbone it added to my node modules as well but it did not add to my package Json because I didn't do the flash s or slash dash s flag so now if i do s that's for save you can see that it now added Backbone in here into my package Json as well um and so now I've got the two going on let's say I delete this node modules folder Al together byebye go away you don't want to keep the node modules in so now my my whole node project consists of this one package Json file and all I have to do is go npm install npm install is going to look through all the dependencies and it's going to get them all there you go now I've got all my node modules and now everything's going to work I can require UND underscore again so that's kind of if that made sense that's how npm Works npm allows you to maintain all your dependencies one of the awesome things about node is there's thousands and thousands of dependencies that people are building all the time that allow you to do cool things like uh you know access web services or log into Google with your Google email address there's packages out there for all this stuff so in node you can just load in a package real time the package will do the dirty work for you and you can focus on building your application let's look at the HTTP package which is what we use to make a basic web server we don't have to install this with npm because it comes built into node HTTP and we can go HTTP create server and let's give that a function whoops and we'll go ver server equals that returns a server and that server can listen to Port 3002 normally run node stuff on Port 3000 actually so we'll do Port 3000 makes this a little bigger here so now I'm going to create a web server and that web server will get request response and so whenever I get an incoming request on Port 3000 this function will fire and I get to access what they're requesting and I get to actually make a little response so I'm going to do is I'm going to console log got a request and I'm going to do response dot WR hi and I'm going to response.end there we go and now let's run this so you notice it runs and it keeps running it doesn't stop because there is an open server running that's listening to any request on Port 3000 so if I go to Port 3000 it says hi and it says hey I got a request let's do it again nice got another request it's sent back high if I keep doing this it's going to keep saying hey I got a request I got a request let's send high back every time super cool it's super awesome and so that's kind of how you build a basic web server um you could listen to if I went Local Host 3000 slash give me a file then it's still just going to say hey because there's no smart code in here listening to what the path is and what we're going to do with that path and so but we could listen to the path and if the path is image. jpeg we could go get image. JPEG and respond back with that so that's kind of what node.js is from here on out you get to mess around with it if you want to learn how to build an Express web app then I have a video on that already I'm going to put that video the description and that's an introduction to nodejs
