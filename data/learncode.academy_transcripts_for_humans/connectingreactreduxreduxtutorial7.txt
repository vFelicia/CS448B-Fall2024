With timestamps:

00:01 - at this point we're pretty much ready to
00:03 - tie in redux to our react application
00:05 - and it's going to be really simple to do
00:07 - first of all let me show you how i've
00:09 - gone ahead and broken up my redux code
00:11 - here's my client js and currently
00:13 - there's nothing redux happening in this
00:15 - it's simply importing react and
00:17 - rendering my layout components my layout
00:19 - component
00:20 - is returning null it's not doing
00:21 - anything so i have an empty web page
00:23 - let's go and look at the store.js this
00:25 - is where all of the redux logic is
00:27 - living and it should look completely
00:29 - familiar i'm exporting a create store an
00:32 - instantiated store so anyone who
00:34 - imports store requires store basically
00:37 - gets that same instantiated store every
00:39 - time and that of course is firing our
00:41 - one reducer which is all of our combined
00:43 - reducers
00:44 - and it's also giving it some middleware
00:46 - which is adding promise thunk and logger
00:49 - so that should look completely familiar
00:50 - to you at this point let's go and look
00:52 - at how i broke out those reducers again
00:55 - we're importing reducer from reducers so
00:57 - that's going to import this index.js
00:59 - file
00:59 - all i'm doing here is doing that
01:01 - familiar combine reducers command so i'm
01:03 - importing the tweets reducer the user
01:05 - reducer and i'm combining the two and
01:08 - that's what i'm exporting and the tweets
01:10 - reducer and the user reducers are just a
01:12 - giant switch statement exactly as you've
01:14 - seen before so it's completely simple
01:17 - i'm defining my default state up here
01:19 - using es6 default arguments
01:22 - and everything else is just a switch
01:24 - statement making sure that i
01:26 - don't mutate any values always return
01:28 - brand new objects and it's all going to
01:30 - work just fine now as far as actions are
01:33 - concerned i've gone ahead and i've made
01:35 - a few sets of actions here now redux
01:37 - isn't really opinionated on how you fire
01:39 - actions what the format of those is you
01:43 - just make sure every action has a type
01:45 - right so i like to do it by exporting a
01:48 - different function for each action here
01:50 - you have my export function fetch user
01:52 - export function set user name
01:54 - and the reason i like to do it like this
01:56 - is i always know in my react application
01:59 - i'm going to fire a function and
02:02 - whatever returns is what i'm actually
02:03 - dispatching this gives me a lot of
02:05 - freedom and continuity on the react side
02:08 - of things i know i'm just going to
02:10 - dispatch this fetch user function and
02:12 - whatever returns if it's an object
02:14 - describing a function
02:15 - in this case fetch user just replies hey
02:19 - fetch user fulfilled i didn't even do an
02:20 - ajax thing i kind of faked it in right
02:22 - here
02:23 - or over here for tweets actions i'm
02:25 - actually loading tweets from a restful
02:28 - api
02:29 - and i'm returning a thunk so i'm
02:31 - dispatching thunk middleware here it
02:33 - doesn't really matter on the user side
02:35 - whenever i change fetch user to a real
02:38 - ajax action
02:40 - the react side doesn't care it's still
02:42 - going to execute a function and return
02:43 - whatever i'm returning so that's kind of
02:46 - why i like to go with this export a
02:48 - function for each action type of syntax
02:51 - and also you can import them in a couple
02:53 - different ways on the react side of
02:54 - things i can import
02:56 - star as
02:58 - user
03:00 - from
03:01 - some path and then user actions so let's
03:04 - just say it's in the same folder
03:07 - so then in my say i'm in a component
03:09 - right here i'm importing all of the user
03:11 - actions so then i can dispatch something
03:13 - like user fetch user
03:15 - i can dispatch it like that
03:17 - or i can also dispatch user dot set user
03:21 - name to be will
03:23 - so that's kind of how i would use those
03:25 - or if you just have to use one action in
03:27 - a component you can just import that one
03:31 - import fetch username from user actions
03:33 - and then i can
03:34 - uh actually set user name is that that b
03:37 - there we go so then i can dispatch that
03:39 - somewhere else it gives you several
03:41 - options on how you want to do it from
03:42 - the react side of things so that's how i
03:44 - like to set up my action files export a
03:46 - function for each action so now let's
03:48 - get into the actual tie-in portion and
03:51 - the tie-in's going to be really simple
03:52 - because we're going to use react redux
03:54 - for that let's go ahead cancel this and
03:56 - install react redux
04:05 - there we go the react redux module is
04:07 - installed go back to npm run dev get my
04:09 - watcher going
04:11 - and so there's two steps to actually
04:12 - tying this in the first step is you want
04:14 - to wrap your top level component with
04:17 - react redux's provider so let's go and
04:20 - import that
04:26 - so my provider is pulled in and if this
04:29 - is your router for using react router
04:31 - basically whatever you would normally be
04:33 - rendering you render the provider
04:34 - instead
04:42 - simple enough and i'm just going to
04:44 - inject my store into the provider the
04:46 - provider requires and expects you to
04:48 - give it a store because after all it's
04:50 - the react redux provider so let's go and
04:53 - import our store
04:57 - there's our store and we just call it
04:58 - store
05:02 - okay so now our application is tied into
05:05 - redux any component anywhere down the
05:07 - chain can import data from the redux
05:11 - store it can also dispatch store actions
05:13 - so let's go do an importing portion of
05:16 - that let's go to our component
05:17 - our layout component that is returning
05:19 - null and for this we're going to import
05:21 - the connect portion of react redux
05:30 - and i have a semicolon there let's make
05:32 - sure we stay consistent
05:35 - and i can actually use it right here
05:38 - that is assuming that you're actually
05:39 - transplanting with es6 i'll show you my
05:42 - package json i'm transforming decorators
05:45 - right here and in my webpack config i'm
05:48 - importing that package and then webpack
05:50 - config is transforming decorators so
05:52 - assuming you're transpiling decorators
05:54 - decorators are a great way to wrap a
05:57 - component so basically connect is going
05:59 - to wrap it when you load the layout
06:01 - component you're actually going to get
06:02 - the connect component which renders the
06:05 - layout component and injects props into
06:07 - it
06:08 - so it's a really really simple way to
06:10 - inject props into layout and not mess
06:12 - with your layout component at all so the
06:14 - connect is going to run two functions
06:16 - it's going to run function a and
06:17 - function b
06:18 - not v a and b they're going to do two
06:21 - different things function a is for
06:23 - getting store values in as props so it
06:26 - gives you a store
06:29 - and then it expects you to return an
06:30 - object
06:32 - and whatever you return gets set as
06:34 - props so if i were to say hey return foo
06:36 - equals one now this.props.foo would
06:39 - equal one down in my layout component so
06:41 - whatever you return gets mapped as props
06:44 - what's great about that is it allows me
06:46 - to slice off portions of the store
06:48 - let's say i want to grab user
06:51 - store.user
06:52 - now i can go this.props.user
06:56 - and i have the user set from the value
06:59 - of the store which is really really nice
07:01 - but if you'll check out my user reducer
07:03 - i'm actually user.user is the user and
07:06 - then i have user.fetching
07:07 - user.fetch.user.air
07:09 - so let's say i just want this
07:10 - user.uservalue
07:13 - now this.props.user is actually the user
07:17 - itself so i can console.log this.props
07:22 - let's see what happens on reload there
07:24 - we go this.props is now user is set and
07:26 - also dispatch is set for me excellent so
07:29 - i can make some actions i can dispatch
07:31 - some actions so i could get user there
07:33 - and i could do fetched
07:36 - or i could call it user fetched
07:44 - and now on reload you can see i've got
07:45 - user fetched false and user is an object
07:48 - full of default values excellent so
07:50 - that's kind of how you'll pull props in
07:52 - let's do one more thing let's pull in
07:54 - tweets
07:58 - so tweets is now pulled in tweets will
08:00 - just be an empty array for now because
08:02 - there's nothing yep there we go tweets
08:03 - an empty array we'll do something with
08:05 - that in just a moment and let's say that
08:07 - we actually want to fetch the user now
08:10 - if you remember on my user actions here
08:14 - this is synchronous i'm kind of faking
08:15 - in that the user is fulfilled i'm
08:17 - passing in a payload right away it's
08:19 - never calling ajax never doing any of
08:20 - that so let's just go ahead and call
08:22 - that real quick component will mounts
08:29 - we're going to go ahead and dispatch
08:31 - something
08:34 - we're going to dispatch we need to pull
08:36 - in an action don't we let's go ahead and
08:37 - pull in one of those actions like i
08:38 - showed before
08:41 - i believe that action is called fetch
08:43 - user yeah fetch user there we go
08:47 - so let's go to import fetch user
08:50 - from
08:53 - user actions
08:56 - and then i can just dispatch fetch user
08:59 - there we are and now that user will
09:01 - fetch and second time around i've got a
09:04 - username
09:06 - name will age 35 so let's go ahead just
09:08 - print that username out so we feel
09:09 - successful in life
09:21 - excellent that simulates that we've
09:22 - loaded something from the back end and
09:24 - we're now printing it out let's go ahead
09:25 - and actually do an asynchronous action
09:27 - on my tweets actions i'm actually using
09:29 - axios to make a for real xhr request to
09:32 - rest learn code academy and get some
09:34 - tweets so let's go ahead and dispatch
09:36 - that action but let's take this up a
09:38 - notch let's say that if tweets are not
09:40 - loaded we want to give us a button that
09:42 - can actually load those tweets so let's
09:45 - go ahead and clean this up a little bit
09:52 - let's grab those and clean that up there
09:59 - if there's no tweets length let's return
10:01 - a button instead
10:09 - and that button will on click
10:17 - we'll fetch us some tweets let's go to
10:19 - add that fetch tweets
10:21 - handler
10:26 - same thing this is just going to
10:28 - dispatch a fetch tweets action
10:33 - let's go ahead pull in that fetch tweets
10:35 - action up here
10:42 - okay there we go so if there's no tweets
10:44 - length at all we're going to return a
10:45 - button instead that fetches the tweets
10:47 - for us let's go and click on this
10:49 - tweets are fetched and we're moving on
10:51 - with the actual render of the page so
10:53 - now that we've fetched those tweets we
10:55 - can actually map them to i don't know
10:57 - say list
11:00 - let's do that
11:01 - a ul
11:02 - let's put we'll put all our tweets in
11:04 - here
11:08 - so let's go and map those tweets
11:11 - tweets
11:23 - so there you go for every tweet we have
11:25 - in our array we're going to spit out an
11:27 - li with the tweet content
11:30 - map it here
11:36 - there we are so we have no tweets let's
11:38 - load them up boom we have tweet text of
11:40 - course because i forgot the curly braces
11:42 - haha let's print that out some of you
11:44 - guys were probably yelling at your
11:45 - screen stop
11:47 - you forgot the curly braces
11:50 - load them up this time and boom we have
11:53 - teenager tweets so there you have it
11:55 - that's kind of how you're going to tie
11:57 - in your redux store
11:59 - to your react application it's really
12:01 - really simple every component pulls in
12:04 - just what pieces of the store you want
12:05 - because as you guys know you tend to
12:07 - want to use redux when you have a really
12:09 - big or more complicated data so each
12:13 - component just pulls in what it needs i
12:15 - just care about the user and the tweets
12:16 - i don't care about all the rest of the
12:18 - store it could have a bajillion pieces
12:20 - of data in it i don't care just give me
12:22 - the tweets
12:23 - and just give me two actions here i
12:24 - don't care if we have 5 000 actions
12:26 - going on this thing is going to scale
12:28 - really really well give me two actions
12:31 - i'll dispatch those two actions and i
12:33 - don't care what happens after i dispatch
12:34 - them whenever my pieces of the store are
12:37 - updated i'm going to go ahead and
12:39 - re-render and that's kind of now
12:40 - hopefully you're able to see a lot of
12:42 - the beauty of redux is it really at the
12:44 - component level keeps things extremely
12:47 - simple so let's talk about maybe to wrap
12:49 - this up how much and when and where do i
12:52 - actually want to use this connect that's
12:54 - a big question with redux there's kind
12:56 - of two trains of thought here is you
12:58 - have smart components and dumb
13:00 - components
13:01 - the smart components use connect
13:03 - and then they pass everything down as
13:05 - props to all the dumb components the
13:07 - dumb components are not aware of redux
13:09 - at all
13:10 - they just get
13:12 - their stuff from connect and then
13:14 - they'll also usually even pass down as
13:16 - props dispatch actions so those
13:19 - components are so dumb they're not even
13:21 - aware of
13:22 - this.props.dispatch they simply receive
13:24 - something like a fetch user prop and
13:26 - that fetch user prop will fetch all the
13:29 - users and so
13:31 - it's kind of this toss up you want to
13:33 - have as few smart components as possible
13:36 - but you also want to avoid passing props
13:39 - 10 levels down just so they can get used
13:42 - that's kind of an anti-pattern as well
13:44 - in my experience i'd rather have more
13:46 - smart components and less prop passing
13:49 - because it's just frustrating to pass
13:50 - props past props past props
13:53 - however also the the more you pass props
13:56 - the harder it is to unit test your react
13:58 - components so that's something to be
14:00 - aware of the dumber a component is
14:02 - the easier it is to unit test that
14:04 - component so you want to keep as as
14:06 - little
14:08 - uh redux tie in as possible going on
14:10 - with your components while making sure
14:12 - you're not miserable as a developer
14:14 - passing props all over the place that's
14:16 - kind of my two cents on that hope you
14:18 - enjoyed this slightly longer than normal
14:20 - video on how to tie redux in with react

Cleaned transcript:

at this point we're pretty much ready to tie in redux to our react application and it's going to be really simple to do first of all let me show you how i've gone ahead and broken up my redux code here's my client js and currently there's nothing redux happening in this it's simply importing react and rendering my layout components my layout component is returning null it's not doing anything so i have an empty web page let's go and look at the store.js this is where all of the redux logic is living and it should look completely familiar i'm exporting a create store an instantiated store so anyone who imports store requires store basically gets that same instantiated store every time and that of course is firing our one reducer which is all of our combined reducers and it's also giving it some middleware which is adding promise thunk and logger so that should look completely familiar to you at this point let's go and look at how i broke out those reducers again we're importing reducer from reducers so that's going to import this index.js file all i'm doing here is doing that familiar combine reducers command so i'm importing the tweets reducer the user reducer and i'm combining the two and that's what i'm exporting and the tweets reducer and the user reducers are just a giant switch statement exactly as you've seen before so it's completely simple i'm defining my default state up here using es6 default arguments and everything else is just a switch statement making sure that i don't mutate any values always return brand new objects and it's all going to work just fine now as far as actions are concerned i've gone ahead and i've made a few sets of actions here now redux isn't really opinionated on how you fire actions what the format of those is you just make sure every action has a type right so i like to do it by exporting a different function for each action here you have my export function fetch user export function set user name and the reason i like to do it like this is i always know in my react application i'm going to fire a function and whatever returns is what i'm actually dispatching this gives me a lot of freedom and continuity on the react side of things i know i'm just going to dispatch this fetch user function and whatever returns if it's an object describing a function in this case fetch user just replies hey fetch user fulfilled i didn't even do an ajax thing i kind of faked it in right here or over here for tweets actions i'm actually loading tweets from a restful api and i'm returning a thunk so i'm dispatching thunk middleware here it doesn't really matter on the user side whenever i change fetch user to a real ajax action the react side doesn't care it's still going to execute a function and return whatever i'm returning so that's kind of why i like to go with this export a function for each action type of syntax and also you can import them in a couple different ways on the react side of things i can import star as user from some path and then user actions so let's just say it's in the same folder so then in my say i'm in a component right here i'm importing all of the user actions so then i can dispatch something like user fetch user i can dispatch it like that or i can also dispatch user dot set user name to be will so that's kind of how i would use those or if you just have to use one action in a component you can just import that one import fetch username from user actions and then i can uh actually set user name is that that b there we go so then i can dispatch that somewhere else it gives you several options on how you want to do it from the react side of things so that's how i like to set up my action files export a function for each action so now let's get into the actual tiein portion and the tiein's going to be really simple because we're going to use react redux for that let's go ahead cancel this and install react redux there we go the react redux module is installed go back to npm run dev get my watcher going and so there's two steps to actually tying this in the first step is you want to wrap your top level component with react redux's provider so let's go and import that so my provider is pulled in and if this is your router for using react router basically whatever you would normally be rendering you render the provider instead simple enough and i'm just going to inject my store into the provider the provider requires and expects you to give it a store because after all it's the react redux provider so let's go and import our store there's our store and we just call it store okay so now our application is tied into redux any component anywhere down the chain can import data from the redux store it can also dispatch store actions so let's go do an importing portion of that let's go to our component our layout component that is returning null and for this we're going to import the connect portion of react redux and i have a semicolon there let's make sure we stay consistent and i can actually use it right here that is assuming that you're actually transplanting with es6 i'll show you my package json i'm transforming decorators right here and in my webpack config i'm importing that package and then webpack config is transforming decorators so assuming you're transpiling decorators decorators are a great way to wrap a component so basically connect is going to wrap it when you load the layout component you're actually going to get the connect component which renders the layout component and injects props into it so it's a really really simple way to inject props into layout and not mess with your layout component at all so the connect is going to run two functions it's going to run function a and function b not v a and b they're going to do two different things function a is for getting store values in as props so it gives you a store and then it expects you to return an object and whatever you return gets set as props so if i were to say hey return foo equals one now this.props.foo would equal one down in my layout component so whatever you return gets mapped as props what's great about that is it allows me to slice off portions of the store let's say i want to grab user store.user now i can go this.props.user and i have the user set from the value of the store which is really really nice but if you'll check out my user reducer i'm actually user.user is the user and then i have user.fetching user.fetch.user.air so let's say i just want this user.uservalue now this.props.user is actually the user itself so i can console.log this.props let's see what happens on reload there we go this.props is now user is set and also dispatch is set for me excellent so i can make some actions i can dispatch some actions so i could get user there and i could do fetched or i could call it user fetched and now on reload you can see i've got user fetched false and user is an object full of default values excellent so that's kind of how you'll pull props in let's do one more thing let's pull in tweets so tweets is now pulled in tweets will just be an empty array for now because there's nothing yep there we go tweets an empty array we'll do something with that in just a moment and let's say that we actually want to fetch the user now if you remember on my user actions here this is synchronous i'm kind of faking in that the user is fulfilled i'm passing in a payload right away it's never calling ajax never doing any of that so let's just go ahead and call that real quick component will mounts we're going to go ahead and dispatch something we're going to dispatch we need to pull in an action don't we let's go ahead and pull in one of those actions like i showed before i believe that action is called fetch user yeah fetch user there we go so let's go to import fetch user from user actions and then i can just dispatch fetch user there we are and now that user will fetch and second time around i've got a username name will age 35 so let's go ahead just print that username out so we feel successful in life excellent that simulates that we've loaded something from the back end and we're now printing it out let's go ahead and actually do an asynchronous action on my tweets actions i'm actually using axios to make a for real xhr request to rest learn code academy and get some tweets so let's go ahead and dispatch that action but let's take this up a notch let's say that if tweets are not loaded we want to give us a button that can actually load those tweets so let's go ahead and clean this up a little bit let's grab those and clean that up there if there's no tweets length let's return a button instead and that button will on click we'll fetch us some tweets let's go to add that fetch tweets handler same thing this is just going to dispatch a fetch tweets action let's go ahead pull in that fetch tweets action up here okay there we go so if there's no tweets length at all we're going to return a button instead that fetches the tweets for us let's go and click on this tweets are fetched and we're moving on with the actual render of the page so now that we've fetched those tweets we can actually map them to i don't know say list let's do that a ul let's put we'll put all our tweets in here so let's go and map those tweets tweets so there you go for every tweet we have in our array we're going to spit out an li with the tweet content map it here there we are so we have no tweets let's load them up boom we have tweet text of course because i forgot the curly braces haha let's print that out some of you guys were probably yelling at your screen stop you forgot the curly braces load them up this time and boom we have teenager tweets so there you have it that's kind of how you're going to tie in your redux store to your react application it's really really simple every component pulls in just what pieces of the store you want because as you guys know you tend to want to use redux when you have a really big or more complicated data so each component just pulls in what it needs i just care about the user and the tweets i don't care about all the rest of the store it could have a bajillion pieces of data in it i don't care just give me the tweets and just give me two actions here i don't care if we have 5 000 actions going on this thing is going to scale really really well give me two actions i'll dispatch those two actions and i don't care what happens after i dispatch them whenever my pieces of the store are updated i'm going to go ahead and rerender and that's kind of now hopefully you're able to see a lot of the beauty of redux is it really at the component level keeps things extremely simple so let's talk about maybe to wrap this up how much and when and where do i actually want to use this connect that's a big question with redux there's kind of two trains of thought here is you have smart components and dumb components the smart components use connect and then they pass everything down as props to all the dumb components the dumb components are not aware of redux at all they just get their stuff from connect and then they'll also usually even pass down as props dispatch actions so those components are so dumb they're not even aware of this.props.dispatch they simply receive something like a fetch user prop and that fetch user prop will fetch all the users and so it's kind of this toss up you want to have as few smart components as possible but you also want to avoid passing props 10 levels down just so they can get used that's kind of an antipattern as well in my experience i'd rather have more smart components and less prop passing because it's just frustrating to pass props past props past props however also the the more you pass props the harder it is to unit test your react components so that's something to be aware of the dumber a component is the easier it is to unit test that component so you want to keep as as little uh redux tie in as possible going on with your components while making sure you're not miserable as a developer passing props all over the place that's kind of my two cents on that hope you enjoyed this slightly longer than normal video on how to tie redux in with react
