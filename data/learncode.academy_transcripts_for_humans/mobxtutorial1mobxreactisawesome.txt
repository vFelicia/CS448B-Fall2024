With timestamps:

00:00 - in this video we are going to cover mob
00:01 - x which is a fun and i do mean fun and
00:04 - simple simple simple way to put a data
00:07 - layer to your react application because
00:10 - after all react really shines the
00:11 - brightest when it is nothing really more
00:14 - than a functional reactive ui
00:17 - view layer to all the data in the state
00:19 - of your application which lives outside
00:21 - of react so mobx plus react and you
00:24 - basically have a framework
00:26 - and it's extremely simple again
00:27 - extremely fun to use the work that it
00:29 - takes to get started with something like
00:31 - redux or relay or even flux
00:33 - is sometimes daunting and unnecessary i
00:36 - didn't realize just how unnecessary it
00:38 - was
00:39 - until learning mob x so we're just going
00:40 - to have fun with this here's what we
00:42 - have going on so far is we're just
00:43 - rendering a to-do list component
00:46 - and that to-do list components just
00:47 - saying mob x that's all that's going on
00:49 - now to work with mob x you're going to
00:51 - need two babel transformers well you
00:53 - won't need them you can do it without
00:54 - them but it's a lot easier and much more
00:57 - enjoyable and that's decorators which is
00:59 - called decorators legacy since the spec
01:02 - is potentially still in flux but it's
01:04 - safe to use a transformer no problem
01:07 - and then you'll want to do transform
01:09 - class properties as well you'll also
01:11 - want to be using react 15 or newer so
01:14 - let's go ahead and install mob x
01:18 - and mob x react
01:21 - so those are installing and once those
01:23 - are done i can just do npm start again
01:25 - to get my hot reloading back up and
01:27 - going
01:29 - okay that's running my application is
01:31 - hot reloading again so i have mob x
01:33 - installed let's go ahead and start
01:35 - around with our actual data layer so we
01:37 - can have some fun with this i'm going to
01:39 - go to main js and just start importing
01:41 - that
01:42 - let's import store
01:45 - from to do store
01:48 - so you can see we have main.js to do
01:51 - list js which is our actual to-do list
01:53 - component and the to-do store i'm going
01:55 - to go ahead and close that now to give
01:56 - us a little bit more screen space
01:58 - and let's go ahead and open up this to
02:00 - do store and have some fun with mob x
02:02 - the one thing we need to import to get
02:04 - started is observable from mob x
02:09 - now if we were going to go the simplest
02:12 - not necessarily the most stable but the
02:14 - simplest route with data we'd do an
02:16 - object literal we'd do something like
02:17 - store equals and then we'd say oh we've
02:20 - got our to-do's
02:22 - our to-do's are an array and then we
02:23 - might do create to do this is what we
02:25 - did back in the day right so we'd have
02:27 - this create to do method that would push
02:29 - something onto the to do state we
02:31 - couldn't really react to it from the ui
02:34 - we couldn't really notice when changes
02:36 - happened we had to build all that in
02:37 - manually but it sure was a simple way to
02:39 - code out a store
02:41 - with mob x we basically get to code in
02:43 - the same manner we just get all those
02:46 - reactive functional features and it's
02:48 - much more enjoyable and much more
02:50 - powerful so we're basically going to
02:52 - make a class
02:55 - there's class to do store and we can go
02:58 - to do's
02:59 - equals that except for we're simply
03:00 - going to make them observable
03:04 - and let's say we also want to have a
03:05 - filter so we can filter these to do's
03:07 - again observable
03:09 - and there's no filter on there right now
03:11 - let's go ahead punch in some to-do's
03:12 - let's say we're going to get milk
03:15 - we're going to buy milk and we're going
03:16 - to buy eggs
03:18 - two things we're going to buy very
03:20 - important to have
03:21 - and then let's say when you actually
03:23 - require this it exports a to do store
03:25 - surveyor to do their store equals
03:29 - new to do store and that's what we're
03:30 - going to export as defaults
03:34 - and then i did it this way so i can
03:36 - actually expose it as window.store as
03:38 - well
03:39 - and play around with it in the terminal
03:41 - completely unnecessary except for
03:43 - debugging so now stores available here
03:45 - in the terminal
03:47 - and if i want to see that my changes are
03:50 - actually reacting i want to import auto
03:52 - run this is something we're just going
03:54 - to do for messing around and debugging
03:56 - here but i can do auto run
03:59 - and give it a function
04:01 - and then this will run whenever the
04:02 - store changes so i can console log
04:05 - let's see store dot filter
04:08 - and i can also console.log
04:10 - store dot to do's
04:13 - zero
04:14 - so this will run the first time because
04:16 - it changed we have no filter which is
04:18 - right there i know some people with no
04:20 - filter anyway and then we can also buy
04:22 - milk and you remember i exposed store to
04:25 - window.store so i can actually change
04:26 - this and we'll see that auto run fire
04:30 - let's say store filter equals milk only
04:32 - things that say milk ah now my filter
04:34 - has changed and store to do zero is
04:37 - still by milk well let's change the to
04:39 - do
04:42 - equals by cheese we're gonna go with a
04:44 - different dairy product
04:47 - there we go now reloaded the filter is
04:49 - milk and store to do zero is by cheese
04:53 - if i were just to look at store dot to
04:55 - do's it's not just an array it's an
04:57 - observable array when you change things
05:00 - it's actually firing off all these
05:02 - change events or if i were to look at
05:03 - store to do's i'm sorry store filter
05:07 - you can see that it looks like it's just
05:09 - a simple string how are they firing off
05:12 - all those change events they're using
05:14 - getters and setters so you can look up
05:16 - es6 getters and setters if you want to
05:18 - learn more about the technology behind
05:20 - mobx now for those of you who are
05:22 - familiar with react you're probably
05:24 - already thinking your mind oh my
05:26 - goodness i see how this works i simply
05:28 - instead of doing an auto run have react
05:30 - render whenever something changes and
05:32 - that's exactly what we're going to do
05:34 - let's go ahead and get rid of this
05:35 - autorun here
05:37 - and we're going to automatically update
05:38 - when things change so let's just pass
05:40 - this in as a prop
05:44 - and that's there and let's go to our
05:46 - to-do list here and then all we have to
05:48 - do in order to be able to work with this
05:51 - is we just need to bring in from mobex
05:54 - react
05:56 - observer
05:59 - and then we just add the observer
06:01 - decorator to our component
06:03 - now that we've added that observer
06:05 - decorator we can go ahead and print any
06:07 - values straight here in our render
06:09 - method of our component so i can go this
06:11 - dot props dot store
06:13 - to do's zero let's look at to do zero
06:17 - and there we go buy milk hmm what if i
06:19 - want to change that remember i'm still
06:21 - setting store as windows store so i can
06:23 - play around with that here
06:26 - store to do 0 equals
06:28 - get milk
06:30 - there we go it automatically changed
06:32 - beautiful let's change it again
06:34 - get cheese change that dairy product
06:37 - excellent so instantly we have this
06:39 - extremely simple data layer working to
06:43 - where we can just change stuff and our
06:45 - react ui layer will automatically change
06:47 - to reflect the changes in our state so
06:50 - in the next video we're going to go
06:52 - ahead and build out us really simple to
06:53 - do list with filtering and clearing
06:55 - anything that's checked it will only
06:57 - take a few minutes to build out an
06:59 - entire to-do list

Cleaned transcript:

in this video we are going to cover mob x which is a fun and i do mean fun and simple simple simple way to put a data layer to your react application because after all react really shines the brightest when it is nothing really more than a functional reactive ui view layer to all the data in the state of your application which lives outside of react so mobx plus react and you basically have a framework and it's extremely simple again extremely fun to use the work that it takes to get started with something like redux or relay or even flux is sometimes daunting and unnecessary i didn't realize just how unnecessary it was until learning mob x so we're just going to have fun with this here's what we have going on so far is we're just rendering a todo list component and that todo list components just saying mob x that's all that's going on now to work with mob x you're going to need two babel transformers well you won't need them you can do it without them but it's a lot easier and much more enjoyable and that's decorators which is called decorators legacy since the spec is potentially still in flux but it's safe to use a transformer no problem and then you'll want to do transform class properties as well you'll also want to be using react 15 or newer so let's go ahead and install mob x and mob x react so those are installing and once those are done i can just do npm start again to get my hot reloading back up and going okay that's running my application is hot reloading again so i have mob x installed let's go ahead and start around with our actual data layer so we can have some fun with this i'm going to go to main js and just start importing that let's import store from to do store so you can see we have main.js to do list js which is our actual todo list component and the todo store i'm going to go ahead and close that now to give us a little bit more screen space and let's go ahead and open up this to do store and have some fun with mob x the one thing we need to import to get started is observable from mob x now if we were going to go the simplest not necessarily the most stable but the simplest route with data we'd do an object literal we'd do something like store equals and then we'd say oh we've got our todo's our todo's are an array and then we might do create to do this is what we did back in the day right so we'd have this create to do method that would push something onto the to do state we couldn't really react to it from the ui we couldn't really notice when changes happened we had to build all that in manually but it sure was a simple way to code out a store with mob x we basically get to code in the same manner we just get all those reactive functional features and it's much more enjoyable and much more powerful so we're basically going to make a class there's class to do store and we can go to do's equals that except for we're simply going to make them observable and let's say we also want to have a filter so we can filter these to do's again observable and there's no filter on there right now let's go ahead punch in some todo's let's say we're going to get milk we're going to buy milk and we're going to buy eggs two things we're going to buy very important to have and then let's say when you actually require this it exports a to do store surveyor to do their store equals new to do store and that's what we're going to export as defaults and then i did it this way so i can actually expose it as window.store as well and play around with it in the terminal completely unnecessary except for debugging so now stores available here in the terminal and if i want to see that my changes are actually reacting i want to import auto run this is something we're just going to do for messing around and debugging here but i can do auto run and give it a function and then this will run whenever the store changes so i can console log let's see store dot filter and i can also console.log store dot to do's zero so this will run the first time because it changed we have no filter which is right there i know some people with no filter anyway and then we can also buy milk and you remember i exposed store to window.store so i can actually change this and we'll see that auto run fire let's say store filter equals milk only things that say milk ah now my filter has changed and store to do zero is still by milk well let's change the to do equals by cheese we're gonna go with a different dairy product there we go now reloaded the filter is milk and store to do zero is by cheese if i were just to look at store dot to do's it's not just an array it's an observable array when you change things it's actually firing off all these change events or if i were to look at store to do's i'm sorry store filter you can see that it looks like it's just a simple string how are they firing off all those change events they're using getters and setters so you can look up es6 getters and setters if you want to learn more about the technology behind mobx now for those of you who are familiar with react you're probably already thinking your mind oh my goodness i see how this works i simply instead of doing an auto run have react render whenever something changes and that's exactly what we're going to do let's go ahead and get rid of this autorun here and we're going to automatically update when things change so let's just pass this in as a prop and that's there and let's go to our todo list here and then all we have to do in order to be able to work with this is we just need to bring in from mobex react observer and then we just add the observer decorator to our component now that we've added that observer decorator we can go ahead and print any values straight here in our render method of our component so i can go this dot props dot store to do's zero let's look at to do zero and there we go buy milk hmm what if i want to change that remember i'm still setting store as windows store so i can play around with that here store to do 0 equals get milk there we go it automatically changed beautiful let's change it again get cheese change that dairy product excellent so instantly we have this extremely simple data layer working to where we can just change stuff and our react ui layer will automatically change to reflect the changes in our state so in the next video we're going to go ahead and build out us really simple to do list with filtering and clearing anything that's checked it will only take a few minutes to build out an entire todo list
