With timestamps:

00:01 - hey so this screencast is going to be
00:03 - shortcutting you into building a web
00:06 - application with node.js and we're going
00:08 - to be using the expressjs framework
00:10 - which is kind of the most popular
00:12 - framework and one of the easiest to
00:13 - learn uh it's really a tremendous
00:15 - combination and so we're going to be
00:17 - getting into it I've done a video on
00:19 - this before and a lot of people have
00:20 - done some great videos on this but
00:22 - Express really here mid 2014 made some
00:25 - changes t' be really difficult to follow
00:28 - along to previous videos cuz there just
00:30 - a few key things that are different so
00:31 - we're going to be getting into those
00:33 - right now um in this 2014 updated video
00:36 - on how to get started with node.js if
00:38 - it's not on your machine you're going to
00:39 - want to go to nodejs.org and install it
00:42 - um and you'll know that that is working
00:44 - if you go node DV and you've got a
00:46 - version I'm running 0.1.2 two looks like
00:50 - they're up to 10.26 so I need to upgrade
00:53 - um and then you should also be able to
00:54 - go npm DV and have a ver version of node
00:58 - package manager uh npm comes with node
01:01 - and that's basically how you install
01:04 - dependencies and you know do package
01:06 - management and all that stuff it's
01:07 - really really truly great so let's go
01:10 - ahead we have those both there so let's
01:12 - get into it let's install our first
01:13 - package we're going to go npm
01:16 - install DG for Global Express
01:20 - generator um this is going to get us
01:22 - building Express apps right really quick
01:24 - it's going to generate the scaffolding
01:26 - for us um and we have to do dasg uh
01:30 - because it's got to be a global cuzz we
01:32 - want to be able to execute it and it's G
01:34 - because it has nothing to do with our
01:35 - project we're installing this globally
01:38 - um and you may get an error there that
01:40 - you don't have read write permissions uh
01:43 - so you might have to do pseudo on that
01:44 - mpm install G uh and then enter your
01:47 - password but the way I've installed it I
01:49 - don't have to do that um so I can
01:52 - actually now run Express as a command
01:55 - and then give myself an app name I'll
01:57 - just call this XP 2014
02:00 - so there we go I've actually generated
02:02 - an app now an expressjs application and
02:05 - you see all I have to do is go CD Space
02:08 - X X 2014 and do npm install before I do
02:12 - npm install though I want to show you
02:15 - what's actually taken place here let me
02:16 - open this in Sublime
02:18 - Text um show you what they've done for
02:21 - us they've built out the whole
02:23 - application uh but they haven't loaded
02:25 - all the dependencies yet instead they've
02:27 - just put a package.json file which is
02:30 - all that we're going to check into our
02:31 - GitHub repo anyway um and then it's just
02:34 - a list of the dependencies that we need
02:36 - uh you can see it's running Jade for
02:37 - templates which I'm not actually a huge
02:40 - fan of Jade templates so I'm going to
02:41 - redo this um and then once we run npm
02:45 - install you'll see that it starts adding
02:48 - all the dependencies into the node
02:49 - modules folder and now we're good to go
02:52 - it's installed Express for our
02:54 - application locally uh it's installed
02:56 - Jade it's installed all the stuff that
02:58 - we need so I'm I'm going to actually go
03:01 - up a
03:03 - level and go ahead and remove that and
03:06 - let's generate one
03:08 - again and this will be exp 2014 and I'm
03:12 - also going to go-- Hogan uh because I
03:15 - want to use Hogan templating which is
03:17 - basically mustache um and then I also
03:19 - want to go C for CSS and do less they
03:22 - support less and they also support
03:24 - stylus why they don't support SAS I have
03:27 - no idea but they support less than
03:28 - stylus so there we go now I can actually
03:31 - do it again CD space Express 2014 do npm
03:35 - install let's go ahead and do
03:37 - that and so now you can see that my
03:40 - package includes Hogan JS and less
03:42 - middleware yippe so now I'm going to
03:45 - scroll back up before I did that and it
03:47 - said if you want to run your app just
03:48 - run this command here debug my
03:52 - application and then you're going to run
03:54 - the bin www file you can run that and it
03:58 - says it's listening on Port 3000 so now
04:01 - I can go Local Host colon 3000 and there
04:04 - you go there's my Express and you can
04:05 - see as I'm refreshing it keeps loading
04:07 - up stuff so now I'm running a web server
04:10 - and I'm running a very very basic web
04:13 - application on my machine uh one of the
04:15 - cool things about Express is it runs as
04:18 - the web server itself so it's really
04:21 - different from PHP or any of these uh
04:25 - other Technologies and that it loads
04:27 - your whole application in memory and
04:29 - then it sits as the server waiting for
04:33 - HTTP HTTP requests to come through and
04:36 - then it responds to those it never
04:38 - touches your file system again unless
04:40 - you have to access new images or write
04:42 - images it sits in memory the whole time
04:45 - which is why it's so blazingly fast um
04:47 - I'm going and cancel this out real quick
04:50 - and show you this bin www file you can
04:53 - see that the my application it comes
04:55 - from right there so I'm actually going
04:57 - to simplify that I'm going to call call
04:59 - it debug equals app now which is a lot
05:03 - easier to
05:04 - remember
05:06 - bun there you go and so now I can well I
05:08 - forgot to hit save didn't I it runs just
05:11 - fine but you won't see any debugging
05:13 - because it's looking for a different
05:14 - debugging name so I've saved this file
05:17 - and now I can run that command again
05:18 - there we go I'm seeing app I'm debugging
05:22 - excellent good to go um so it runs the
05:25 - debugger and then it also requires my
05:28 - app.js file
05:30 - and then it starts up the web server
05:31 - listening on Port 3000 if I wanted to
05:34 - run multiple Express applications at
05:35 - once I could simply change this to Port
05:37 - 9,000 let me cancel this start it up
05:41 - again and now I can go Port 9,000 and
05:44 - there we go we're running on Port
05:46 - 9,000 uh you'll also notice whenever I
05:49 - make a change I have to cancel and
05:51 - reboot this application that's pretty
05:54 - annoying and it's going to get old
05:55 - really quick uh so there's this great
05:58 - utility called node mod that we can use
06:01 - uh you can go npm install G
06:04 - nodemon which is going to monitor your
06:07 - folder structure for changes and as you
06:10 - make file changes it's automatically
06:12 - going to cancel and reload your app
06:14 - which is great so now I can go node
06:18 - Monon and then bin www so there you go
06:23 - I'm going to listen any file changes if
06:24 - I hit save uh let me go ahead hit save
06:27 - here and you'll notice it started my
06:30 - server save save so if I had a console
06:33 - log
06:37 - here then it now is going to log
06:39 - whenever I hit file save so that's kind
06:41 - of nodon is really great for that so now
06:43 - we're running nodemon as we hit save
06:45 - it's going to automatically restart our
06:47 - app uh and that's going to be a lot
06:49 - nicer for us so let's get into building
06:51 - out our Express app it's scaffolded in
06:54 - it's working great uh let's actually
06:57 - look at this appjs once again www this
06:59 - is just the server has nothing to do
07:01 - with our application all it does is load
07:04 - the debugger and load in our app and now
07:07 - we're good to go so let's look at appjs
07:09 - here and see what all is going on uh the
07:11 - first thing we're doing is we're
07:13 - requiring some dependencies um into our
07:16 - file and then we're requiring some
07:18 - routes but we're not using those
07:20 - routings yet we're just kind of
07:21 - requiring them and then we're creating
07:24 - our app here by running Express so this
07:26 - is where our app actually gets started
07:29 - uh and then we're setting our def
07:31 - default views to the Views directory um
07:34 - there we go views directory and so all
07:36 - our views are in here you can see they
07:38 - look pretty much like HTML we're just
07:39 - using that Hogan
07:42 - templating and then we're setting our
07:44 - view engine to use
07:46 - hjs so then we also load our debugger
07:48 - and some other stuff and then we use our
07:50 - routes right here this is how we tell
07:52 - our routes to get used and then it
07:54 - awesome it also gives us our 404
07:56 - handling and stuff like that so let's
08:00 - get into building our first routes I'm
08:02 - going to go ahead and N the users for
08:04 - now and I'm going to kill this users one
08:07 - for now as well so we've required routes
08:09 - index which is this file and then we are
08:13 - using it for all our request paths this
08:16 - slash just means we're going to use it
08:18 - on everything so let's look at this
08:20 - index file right now and so I don't
08:23 - confuse you I'll actually kill that and
08:25 - we're just going to start a new one
08:27 - we've required Express and then we've
08:29 - actually created our router file and
08:32 - then we've exported this file module
08:35 - exports is what the return value of this
08:38 - whole file is going to be so when I hit
08:41 - require route SL index I'm actually
08:44 - going to pass the module exports from
08:47 - this file into this variable so that's
08:50 - kind of what this module exports is the
08:52 - router here gets adjusted by all our
08:55 - routes and then I'm returning it as
08:56 - module exports if that makes sense if
08:59 - not you might want to just look into it
09:00 - a little bit more um but here's what
09:02 - we're going to do you're going to go
09:04 - router doget because we're going to be
09:06 - responding to a git request and then I'm
09:09 - going to do my uh my actual route which
09:12 - is just the index the root and then I'm
09:14 - going to give it a function with my
09:16 - request object my response object and
09:20 - then the function that I want to do when
09:22 - a user hits that that default pathway
09:26 - and I have two options here I can go re
09:28 - which is my response op object I can go
09:30 - res. send which is just going to send
09:33 - text or you can send a Json
09:37 - object um or you can send a number for
09:40 - an HTTP code that's just a 200 response
09:43 - let's actually start messing with res
09:44 - send or I can go res render which is
09:47 - going to actually do a templating I can
09:49 - find the file which this is going to
09:51 - look for my index
09:54 - file um and then I pass as my second
09:57 - argument a Json object of all the values
10:01 - that I want to send to that templating
10:03 - object uh so let's start with res send
10:06 - here let's pretend I'm making an API
10:08 - let's just say
10:10 - okay so now I can hit there and I've got
10:13 - okay and let me go and refresh it you'll
10:15 - notice that I'm getting an automatically
10:17 - it made my type text
10:19 - HTML um and then my status is
10:22 - automatically going to be a 200 code for
10:25 - the first time I save it and then a 304
10:28 - if it's not modified
10:29 - so automatically it set my type text
10:32 - HTML so let's go ahead and make a 200
10:36 - here now it's going to always give me a
10:38 - 200 status or I can go a
10:42 - 400 and that's going to give me a 400
10:44 - status so that's always going to get a
10:47 - 400 there or once again 404 4 500 um if
10:51 - you just give it a first argument and
10:53 - it's a number then that's going to be
10:54 - your HTTP status if I want to start
10:56 - giving an ajon object
11:06 - there we go so now I can just do that
11:09 - and automatically I'm going to get Json
11:11 - and my type on my response is going to
11:14 - be application SL Json which is super
11:17 - great so it's as you can see it's really
11:19 - Nimble really light for doing um an API
11:23 - um and then I can also do res.
11:27 - render and let's look at our index file
11:30 - here and see we're getting a title looks
11:32 - like title is the only argument it's
11:34 - expecting or the only piece of data I'm
11:40 - expecting so there we go that will now
11:43 - render my index file with the my app
11:46 - let's go ahead and add a second
11:49 - value wh not sure what key I hit age 33
11:53 - and let's put in here
12:01 - oh I can't type when I do these things
12:04 - man I'm the worst at it so there you go
12:06 - my app 33 years old CU I'm passing a
12:08 - title and age and you guys can figure
12:09 - out the rest as you go along so that's
12:12 - pretty much how you're going to render
12:14 - your templates and how you're going to
12:16 - send your responses um and so what we've
12:18 - done is we've we've kind of built our
12:21 - router we've added a get request let's
12:24 - say we wanted to respond to an API post
12:28 - I can do Post right there um and then I
12:31 - can access all the post variables by
12:33 - going rec.
12:35 - query. name let's say their name came in
12:39 - or um anything like that query will be
12:43 - the all the prams that came through um
12:47 - here let me actually do a get
12:53 - here so there we go let me uh console
12:56 - log
13:02 - see there my query object is showing age
13:05 - of
13:08 - 33 name equals will so that's how I
13:11 - access my Rec query object um another
13:14 - thing that I can do is I can go get
13:17 - users and so that will be
13:22 - users um not found because I didn't save
13:24 - my
13:26 - file um and if you don't do a respon
13:29 - send of any
13:31 - kind then it's just going to spin
13:33 - forever there is no response taking
13:35 - place so there we go 200 okay um let me
13:39 - go ahead
13:41 - and so that's responding to my users
13:43 - let's say I wanted to be able to get an
13:45 - ID off of here I can go
13:48 - ID and that's going to be request
13:53 - pams so now whatever my second Pam is
13:56 - going to be is going to show up as pam.
13:58 - ID so let me go users
14:00 - 33 and you can see that ID 33 is coming
14:04 - in right there I'll just
14:11 - send so I'm going to send a 200 request
14:15 - uh so it doesn't confuse it with my
14:16 - number um there you go so now it's going
14:18 - to say
14:19 - 33 34 and that's how we're going to do
14:23 - that routing um and so then that gets
14:25 - passed through nothing happens and now
14:27 - I'm using that on any and all routes on
14:30 - my page you can also namespace that and
14:32 - just go
14:34 - users um and then if I'm namespacing
14:37 - this to users then I don't have to add
14:41 - users I can just go
14:43 - slid and it will be the exact same thing
14:46 - so if I actually did Slash users here it
14:49 - would not work because it'd be looking
14:50 - for users slash
14:53 - users um and that would be what happens
14:56 - if I namespace it uh to a particular
14:59 - ular routing so that's pretty much your
15:01 - introduction to node.js if I flew
15:04 - through too quickly um then you might
15:06 - just want to rewatch the video I try to
15:08 - be as quick as possible um I do have
15:10 - another video that I will link to in the
15:12 - description on how to implement a mongod
15:14 - DB database using Mongoose um and I'll
15:17 - also add an annotation for that
15:18 - somewhere around here if you're not on
15:20 - mobile you'll see that and have yourself
15:22 - a great day

Cleaned transcript:

hey so this screencast is going to be shortcutting you into building a web application with node.js and we're going to be using the expressjs framework which is kind of the most popular framework and one of the easiest to learn uh it's really a tremendous combination and so we're going to be getting into it I've done a video on this before and a lot of people have done some great videos on this but Express really here mid 2014 made some changes t' be really difficult to follow along to previous videos cuz there just a few key things that are different so we're going to be getting into those right now um in this 2014 updated video on how to get started with node.js if it's not on your machine you're going to want to go to nodejs.org and install it um and you'll know that that is working if you go node DV and you've got a version I'm running 0.1.2 two looks like they're up to 10.26 so I need to upgrade um and then you should also be able to go npm DV and have a ver version of node package manager uh npm comes with node and that's basically how you install dependencies and you know do package management and all that stuff it's really really truly great so let's go ahead we have those both there so let's get into it let's install our first package we're going to go npm install DG for Global Express generator um this is going to get us building Express apps right really quick it's going to generate the scaffolding for us um and we have to do dasg uh because it's got to be a global cuzz we want to be able to execute it and it's G because it has nothing to do with our project we're installing this globally um and you may get an error there that you don't have read write permissions uh so you might have to do pseudo on that mpm install G uh and then enter your password but the way I've installed it I don't have to do that um so I can actually now run Express as a command and then give myself an app name I'll just call this XP 2014 so there we go I've actually generated an app now an expressjs application and you see all I have to do is go CD Space X X 2014 and do npm install before I do npm install though I want to show you what's actually taken place here let me open this in Sublime Text um show you what they've done for us they've built out the whole application uh but they haven't loaded all the dependencies yet instead they've just put a package.json file which is all that we're going to check into our GitHub repo anyway um and then it's just a list of the dependencies that we need uh you can see it's running Jade for templates which I'm not actually a huge fan of Jade templates so I'm going to redo this um and then once we run npm install you'll see that it starts adding all the dependencies into the node modules folder and now we're good to go it's installed Express for our application locally uh it's installed Jade it's installed all the stuff that we need so I'm I'm going to actually go up a level and go ahead and remove that and let's generate one again and this will be exp 2014 and I'm also going to go Hogan uh because I want to use Hogan templating which is basically mustache um and then I also want to go C for CSS and do less they support less and they also support stylus why they don't support SAS I have no idea but they support less than stylus so there we go now I can actually do it again CD space Express 2014 do npm install let's go ahead and do that and so now you can see that my package includes Hogan JS and less middleware yippe so now I'm going to scroll back up before I did that and it said if you want to run your app just run this command here debug my application and then you're going to run the bin www file you can run that and it says it's listening on Port 3000 so now I can go Local Host colon 3000 and there you go there's my Express and you can see as I'm refreshing it keeps loading up stuff so now I'm running a web server and I'm running a very very basic web application on my machine uh one of the cool things about Express is it runs as the web server itself so it's really different from PHP or any of these uh other Technologies and that it loads your whole application in memory and then it sits as the server waiting for HTTP HTTP requests to come through and then it responds to those it never touches your file system again unless you have to access new images or write images it sits in memory the whole time which is why it's so blazingly fast um I'm going and cancel this out real quick and show you this bin www file you can see that the my application it comes from right there so I'm actually going to simplify that I'm going to call call it debug equals app now which is a lot easier to remember bun there you go and so now I can well I forgot to hit save didn't I it runs just fine but you won't see any debugging because it's looking for a different debugging name so I've saved this file and now I can run that command again there we go I'm seeing app I'm debugging excellent good to go um so it runs the debugger and then it also requires my app.js file and then it starts up the web server listening on Port 3000 if I wanted to run multiple Express applications at once I could simply change this to Port 9,000 let me cancel this start it up again and now I can go Port 9,000 and there we go we're running on Port 9,000 uh you'll also notice whenever I make a change I have to cancel and reboot this application that's pretty annoying and it's going to get old really quick uh so there's this great utility called node mod that we can use uh you can go npm install G nodemon which is going to monitor your folder structure for changes and as you make file changes it's automatically going to cancel and reload your app which is great so now I can go node Monon and then bin www so there you go I'm going to listen any file changes if I hit save uh let me go ahead hit save here and you'll notice it started my server save save so if I had a console log here then it now is going to log whenever I hit file save so that's kind of nodon is really great for that so now we're running nodemon as we hit save it's going to automatically restart our app uh and that's going to be a lot nicer for us so let's get into building out our Express app it's scaffolded in it's working great uh let's actually look at this appjs once again www this is just the server has nothing to do with our application all it does is load the debugger and load in our app and now we're good to go so let's look at appjs here and see what all is going on uh the first thing we're doing is we're requiring some dependencies um into our file and then we're requiring some routes but we're not using those routings yet we're just kind of requiring them and then we're creating our app here by running Express so this is where our app actually gets started uh and then we're setting our def default views to the Views directory um there we go views directory and so all our views are in here you can see they look pretty much like HTML we're just using that Hogan templating and then we're setting our view engine to use hjs so then we also load our debugger and some other stuff and then we use our routes right here this is how we tell our routes to get used and then it awesome it also gives us our 404 handling and stuff like that so let's get into building our first routes I'm going to go ahead and N the users for now and I'm going to kill this users one for now as well so we've required routes index which is this file and then we are using it for all our request paths this slash just means we're going to use it on everything so let's look at this index file right now and so I don't confuse you I'll actually kill that and we're just going to start a new one we've required Express and then we've actually created our router file and then we've exported this file module exports is what the return value of this whole file is going to be so when I hit require route SL index I'm actually going to pass the module exports from this file into this variable so that's kind of what this module exports is the router here gets adjusted by all our routes and then I'm returning it as module exports if that makes sense if not you might want to just look into it a little bit more um but here's what we're going to do you're going to go router doget because we're going to be responding to a git request and then I'm going to do my uh my actual route which is just the index the root and then I'm going to give it a function with my request object my response object and then the function that I want to do when a user hits that that default pathway and I have two options here I can go re which is my response op object I can go res. send which is just going to send text or you can send a Json object um or you can send a number for an HTTP code that's just a 200 response let's actually start messing with res send or I can go res render which is going to actually do a templating I can find the file which this is going to look for my index file um and then I pass as my second argument a Json object of all the values that I want to send to that templating object uh so let's start with res send here let's pretend I'm making an API let's just say okay so now I can hit there and I've got okay and let me go and refresh it you'll notice that I'm getting an automatically it made my type text HTML um and then my status is automatically going to be a 200 code for the first time I save it and then a 304 if it's not modified so automatically it set my type text HTML so let's go ahead and make a 200 here now it's going to always give me a 200 status or I can go a 400 and that's going to give me a 400 status so that's always going to get a 400 there or once again 404 4 500 um if you just give it a first argument and it's a number then that's going to be your HTTP status if I want to start giving an ajon object there we go so now I can just do that and automatically I'm going to get Json and my type on my response is going to be application SL Json which is super great so it's as you can see it's really Nimble really light for doing um an API um and then I can also do res. render and let's look at our index file here and see we're getting a title looks like title is the only argument it's expecting or the only piece of data I'm expecting so there we go that will now render my index file with the my app let's go ahead and add a second value wh not sure what key I hit age 33 and let's put in here oh I can't type when I do these things man I'm the worst at it so there you go my app 33 years old CU I'm passing a title and age and you guys can figure out the rest as you go along so that's pretty much how you're going to render your templates and how you're going to send your responses um and so what we've done is we've we've kind of built our router we've added a get request let's say we wanted to respond to an API post I can do Post right there um and then I can access all the post variables by going rec. query. name let's say their name came in or um anything like that query will be the all the prams that came through um here let me actually do a get here so there we go let me uh console log see there my query object is showing age of 33 name equals will so that's how I access my Rec query object um another thing that I can do is I can go get users and so that will be users um not found because I didn't save my file um and if you don't do a respon send of any kind then it's just going to spin forever there is no response taking place so there we go 200 okay um let me go ahead and so that's responding to my users let's say I wanted to be able to get an ID off of here I can go ID and that's going to be request pams so now whatever my second Pam is going to be is going to show up as pam. ID so let me go users 33 and you can see that ID 33 is coming in right there I'll just send so I'm going to send a 200 request uh so it doesn't confuse it with my number um there you go so now it's going to say 33 34 and that's how we're going to do that routing um and so then that gets passed through nothing happens and now I'm using that on any and all routes on my page you can also namespace that and just go users um and then if I'm namespacing this to users then I don't have to add users I can just go slid and it will be the exact same thing so if I actually did Slash users here it would not work because it'd be looking for users slash users um and that would be what happens if I namespace it uh to a particular ular routing so that's pretty much your introduction to node.js if I flew through too quickly um then you might just want to rewatch the video I try to be as quick as possible um I do have another video that I will link to in the description on how to implement a mongod DB database using Mongoose um and I'll also add an annotation for that somewhere around here if you're not on mobile you'll see that and have yourself a great day
