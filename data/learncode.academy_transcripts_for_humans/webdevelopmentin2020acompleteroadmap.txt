With timestamps:

00:00 - hey everybody this is the video where we
00:01 - cover web development in the year 2020.
00:05 - i'm always excited about this video i do
00:06 - it every one to two years whenever
00:08 - enough has changed in the technology
00:10 - landscape to warrant a new video that's
00:12 - different enough from the last one and
00:13 - we are at that point and i'm very
00:14 - excited to do this video
00:16 - also important to note some people miss
00:18 - this huge important fact is this mind
00:21 - map is available online on koggle i will
00:23 - put the link in the description because
00:25 - lots of these are links to videos that i
00:27 - have covering the topics so you will
00:30 - want to keep that link and follow up if
00:32 - you're learning a different area of this
00:34 - so i've if you've not seen the videos
00:35 - before i break this into several
00:37 - different areas basic front end which is
00:39 - a first skill set
00:41 - uh then advanced front end back end
00:44 - and dev ops those are kind of your main
00:46 - skill sets that you'll learn
00:47 - all the way covering from beginner
00:49 - beginner i'm wanting to learn web
00:51 - development which is this page we're on
00:52 - right now all the way through hey i want
00:54 - to advance and get really really good
00:55 - and continue getting really really good
00:57 - even if i am so this is also made to
00:59 - keep people up to date and current if
01:01 - you're already an awesome software
01:02 - engineer so let's dive into it with
01:05 - basic front end basic front end is what
01:07 - you learn if you're wanting to learn web
01:09 - development right now as a new beginner
01:11 - and the building blocks of basic front
01:13 - end are the same that they have been for
01:14 - a long time they have just changed in
01:16 - what you have to learn those building
01:17 - blocks are you're going to learn basic
01:19 - html and css
01:21 - and then you're going to start learning
01:22 - javascript as your first programming
01:24 - language so html is the content of the
01:27 - web think of it as text pictures links
01:30 - and that's it but they are ugly html has
01:33 - no way of looking making things look
01:34 - good that's where css comes in it stands
01:36 - for cascading style sheets so as soon as
01:40 - you learn just a little bit of html you
01:42 - know how to start putting content into a
01:44 - web page
01:45 - immediately start learning html and css
01:47 - together so you can learn how to inject
01:49 - content into a page that looks really
01:51 - really good
01:53 - so how you learn css has changed a lot
01:56 - in the last couple years you're gonna do
01:58 - this if you're learning css you're gonna
01:59 - learn the basics like hey how do i
02:01 - actually add css to a page how do i
02:04 - actually make this link blue or red
02:06 - right we're super basics and as soon as
02:08 - you learn those you're going to start
02:11 - learning layouts and grids not everyone
02:14 - teaches this as the very first step but
02:16 - this is believe me you want to learn how
02:18 - to do layouts in grids first using css
02:21 - grid and css flexbox so once you learn
02:25 - those the rest of the page is easy easy
02:28 - easy because all you have to do is take
02:30 - your little content areas that you made
02:31 - with your grids
02:33 - and add pieces of content into it if you
02:35 - can learn to think of web design as
02:37 - building grids
02:39 - for your content and then adding content
02:41 - inside your journey just became really
02:44 - really easy
02:45 - so i cover a decent bit of that in this
02:47 - course that i have already
02:48 - that i have some links to and then
02:50 - you'll move on to javascript javascript
02:52 - is the coding language of the web and
02:53 - honestly it's the most popular coding
02:55 - language of all time there's almost
02:57 - nothing you cannot do with javascript so
03:00 - it's definitely the one you want to
03:01 - learn first
03:03 - and there's some links to the different
03:04 - uh kind of steps that you want to go
03:06 - through top to bottom in learning basic
03:08 - javascript so when you've got those you
03:10 - can actually build web pages they're
03:13 - like brochure style web pages where they
03:15 - might not be like twitter where people
03:17 - can post tweets to a database and you
03:19 - can log in and load all your tweets from
03:21 - a database and at all your friends
03:23 - but you can actually build brochure
03:25 - style web websites and actually make
03:27 - money for small businesses
03:29 - from small businesses by doing their
03:30 - websites for them so this is a really
03:32 - all-inclusive website skill set that can
03:35 - start making you money right away even
03:37 - if you don't have a full-time job as a
03:39 - web developer but there are people with
03:40 - this skill set
03:42 - that get decent at it and do have
03:43 - full-time jobs as web developers so
03:45 - really all you need to wrap that up is
03:47 - you need to know how to take that
03:48 - website you've built and put it online
03:50 - so if you're new
03:52 - and you know how to build a website but
03:54 - you don't know things like ssh and
03:55 - github and command line you're going to
03:58 - look for something like hostgator which
04:00 - is the easiest place to dump
04:02 - web websites online it's absolutely the
04:05 - simplest place i have a video where you
04:07 - can in about five or six minutes go from
04:09 - having code on your computer to having a
04:11 - website up and running with your own
04:12 - domain name hostgator is the easiest and
04:16 - fastest for doing that
04:17 - some people give it a hard time because
04:19 - they're more advanced and they like to
04:21 - look down on things they're more
04:22 - advanced than but it is absolutely the
04:24 - best and there's some deals there that
04:26 - some of these are affiliate deals that i
04:27 - have affiliate codes they might get me a
04:29 - buck if you use those codes but feel
04:31 - free to try these different coupon codes
04:32 - because you can save a lot of money with
04:34 - hostgator with these codes
04:36 - um once you've learned more things that
04:38 - are over here that i'll cover in a
04:39 - minute netlify is kind of the next best
04:42 - place to deploy your stuff on
04:45 - if you're confident with github skill
04:47 - set command line skill set
04:49 - committing your code to source control
04:51 - netlify becomes
04:53 - superior to this but you also have to
04:54 - know more about domains and there's
04:56 - there's more manual connection points
04:58 - you have to do to deploy on netlify so
05:01 - that's your step two and then step three
05:03 - we cover that more in the back end and
05:05 - devops stuff so
05:07 - uh digitalocean in aws is pretty much my
05:09 - recommendations there in a nutshell so
05:12 - you can build a website you can deploy a
05:14 - website uh where do you go from there
05:16 - well whether you go front end up here
05:18 - and become a master of front end code or
05:21 - back end down here and become a master
05:22 - of end code you've got to learn a couple
05:25 - things and these actually haven't
05:26 - changed at all over multiple years
05:29 - because they're just kind of
05:30 - fundamentals of how the internet works
05:32 - you need to learn the terminal on your
05:34 - windows or mac computer you need to
05:35 - learn the command line learn the basic
05:37 - commands of how to move into folders
05:40 - uh and you know list the files it's
05:43 - really not that bad people avoid it
05:45 - because everybody's used to clicking a
05:47 - drop down menu file open instead of
05:50 - typing the command open file name it's
05:53 - it really is mentally
05:55 - annoying for people at first when
05:57 - they're used to visual menus to actually
05:58 - have to type commands
06:01 - but it's honestly not that big of a deal
06:02 - learn the terminal you will hold
06:03 - yourself back and no matter what area
06:05 - you go into if you do not just take the
06:07 - little bit of time to learn the terminal
06:09 - you don't want to learn basic ssh this
06:11 - hasn't changed i have an old video on it
06:12 - that still is honestly as current as it
06:14 - gets because ssh never changes and then
06:17 - you're set up to learn github github is
06:20 - really what's going to lock in your next
06:22 - level of your skill set to be able to
06:24 - check your code into a repository that
06:26 - keeps your code safe
06:28 - keeps a list of all the code changes
06:30 - allows you to collaborate with teams to
06:32 - build code bases
06:33 - a whole lot of things so that's kind of
06:35 - your next grouping of three things you
06:37 - want to learn
06:38 - and then learn how the client and server
06:40 - talk to each other learn about uh
06:43 - restful web services and and kind of the
06:45 - types of requests you can make to a
06:47 - server
06:48 - domain name and dns basics are also
06:50 - important how do i set up a domain name
06:52 - how do i set up a subdomain name what's
06:54 - the difference between an a record a
06:56 - cname record an mx record these are
06:58 - really really easy easy easy things to
07:00 - learn but they're helpful to learn and a
07:02 - lot of people will go years without
07:04 - learning kind of these little things
07:06 - because no one gave them a list and said
07:08 - hey you'll learn that learn this it's
07:09 - important to know so you want to learn
07:11 - those things and from there you're
07:14 - basically equipped to either go uh
07:16 - towards learning front end more heavily
07:18 - or start venturing into back end and
07:21 - servers i would recommend front end is
07:24 - the place to go so let's journey on here
07:27 - so i'm going to pause real quick and say
07:28 - what kind of job titles you can actually
07:30 - look for
07:31 - once you're learning or have learned the
07:33 - front end skill set basically learning a
07:35 - front end skill set apply allows you to
07:37 - apply for software developer jobs react
07:40 - developer or view developer job
07:42 - sometimes they're called that sometimes
07:44 - they're just called web developer or
07:45 - front-end developer or front-end
07:47 - engineer or javascript javascript
07:50 - engineer there's really no standardized
07:52 - way that companies will post these job
07:55 - descriptions for people who know the
07:56 - skill set so you want to make sure if
07:58 - you're looking for a first-time job or
08:00 - if you're looking for a new job that you
08:02 - search along all these lines and don't
08:04 - miss out on any opportunities okay i'm
08:06 - about to show you an overwhelming list
08:08 - of things but it's actually really
08:09 - really simple so don't get overwhelmed
08:11 - bear with me as i explained the big
08:12 - pieces that you have to learn and then
08:14 - explain why all the little things are
08:16 - added onto this list okay
08:18 - so to go towards a master of front end
08:20 - you really need to learn
08:22 - i'm going to tell you two things you
08:24 - want to learn react js
08:26 - you want to learn npm
08:29 - and you want to learn webpack you do
08:30 - that you're good okay so that that's it
08:32 - that's your big big
08:33 - uh let's call them complex pieces you
08:36 - want to learn react.js which is a
08:37 - javascript framework you want to learn
08:39 - webpack
08:40 - to bundle up all your code into one file
08:43 - or multiple files and you want to learn
08:44 - how npm works uh which is node.js on
08:48 - your machine so that's your big moving
08:50 - pieces let's go into all these little
08:51 - things and why i added them on here and
08:54 - lots of these will be useful for people
08:55 - who already kind of either know react
08:57 - webpack and npm these will help you keep
09:00 - your skill set current know what you
09:01 - should be learning this year all that
09:03 - stuff so if you haven't heard of
09:04 - jamstack man that's a really cool way of
09:07 - building your applications
09:10 - jekyll gatsby and next js are all really
09:13 - cool jam stack frameworks
09:16 - jekyll is centered a little bit more
09:18 - around html css development
09:21 - gatsby is centered a little bit more
09:24 - around react
09:25 - kind of like jekyll and nextjs is a
09:27 - react framework
09:29 - that also supports jam stack so uh
09:31 - jekyll would be the simplest then gatsby
09:34 - then next my favorite one out of all of
09:36 - them is next but that's if you're doing
09:38 - a lot of react work so jam stack if you
09:40 - haven't learned it super super cool jam
09:43 - stack on netlify is actually really
09:46 - awesome it allows you to totally replace
09:47 - wordpress if you're working for a
09:49 - company that still uses wordpress you
09:51 - probably don't need to be using
09:52 - wordpress these days use jam stack
09:54 - instead i'll leave that be and all the
09:56 - wordpress people can get angry at me
09:58 - over here we're going to talk css so
10:00 - there's a few tools and skill sets you
10:01 - need to for css management these days
10:04 - although it's a lot less than you used
10:05 - to need you used to need
10:08 - uh just to do a lot more css stuff to
10:10 - make css work because css was so bad but
10:13 - css keeps getting better and better and
10:15 - better pretty much uh the only thing i
10:17 - say you need on this list is to know how
10:20 - to use sas
10:21 - use sas which is basically add some
10:23 - extra features to css that you don't get
10:25 - these days
10:26 - honestly that's it used to be i'd say
10:28 - you really need to know a css framework
10:30 - to help you do a lot
10:31 - easily but with css grid and css flexbox
10:35 - getting really great you don't really
10:37 - need a framework anymore honestly you
10:39 - need a framework if you're looking for a
10:41 - lot of ui components already built for
10:44 - you that you can just drag into an admin
10:46 - backend or something to get drop-downs
10:49 - and menus and stuff they can look
10:50 - generic and that's okay it helps you go
10:52 - really fast that's honestly all
10:54 - frameworks are
10:56 - really really good for these days
10:57 - tailwind css is a really cool css
11:00 - utility framework that allows you to
11:02 - work more on design almost like
11:05 - some of the utility classes that
11:06 - bootstrap has without all the component
11:09 - heavier stuff tailwind is actually my
11:11 - favorite of all these it's the one that
11:13 - i would actually end up using the most
11:14 - these days if i went to a css framework
11:17 - because it's the most lightweight and
11:18 - you just don't need all the bulk of
11:20 - these other ones anymore
11:22 - so that's pretty cool css organization
11:24 - you really only need this if you're
11:26 - doing heavy lifting html css they're
11:28 - good to know if you don't know what
11:29 - these are look into them at least
11:32 - but unless you're doing a lot of heavy
11:33 - html css coding you don't really need to
11:35 - know those
11:36 - so front end build tools has gotten a
11:38 - lot simpler there's a whole lot of
11:40 - contenders all fighting for their space
11:42 - and front-end build tools over the last
11:43 - couple years for me it's really
11:45 - simplified down to three things do your
11:47 - basic build jobs using just npm scripts
11:50 - that's it npm scripts can do a whole lot
11:54 - for you webpack is the definitive uh
11:57 - bundler for all of your css and
11:59 - javascript code these days um although
12:02 - you might not need that so much in the
12:03 - future with http 2 really becoming big
12:06 - and imports becoming now supported in
12:09 - every browser except for ie11
12:11 - you might not even need webpack anymore
12:14 - which is a wild world to think about
12:17 - but that's a really really cool thing
12:18 - that's happened in the last year with
12:20 - web development but i'd say parcel if
12:23 - you're not doing complex build systems
12:24 - parcel is drastically simpler than
12:27 - webpack like saves hours and hours of
12:30 - time you're just up and running with
12:31 - like a react website
12:34 - um instantly i have a video on parcel
12:36 - that is phenomenal i absolutely
12:38 - absolutely love parcel and unless i'm
12:40 - doing complex work would use that
12:42 - instead of webpack so that's kind of how
12:43 - you build your stuff up together
12:45 - so let's move on to javascript
12:46 - frameworks
12:48 - again react being one of those big
12:49 - pieces you should learn
12:51 - react is the definitive framework to
12:53 - learn vue is really the only other
12:54 - contender out there angular still exists
12:56 - but you shouldn't be using it you learn
12:59 - react there's no good reason you
13:01 - shouldn't learn react
13:03 - as the first framework you learn
13:06 - vue is great and competes with react and
13:09 - a lot of things but react has such a
13:11 - bigger ecosystem in following an
13:13 - adoption that there's there's no good
13:15 - reason to go learn vue instead of react
13:18 - these days if you're awesome at react
13:19 - look into view but everyone i've known
13:22 - that's awesome react and looks into view
13:23 - like it's very very rare for people to
13:25 - say vue is so much better for all these
13:27 - huge deal breaker reasons that i
13:29 - couldn't use react anymore so i'm
13:32 - strongly opinionated about that because
13:33 - i would i'd be steering you wrong if i
13:35 - said learn view first no no no learn
13:38 - react first
13:39 - um on that topic since i'm react uh
13:42 - suggesting react so strongly
13:44 - if you're good at react already here's
13:45 - some newer or advanced react topics
13:47 - basically just a list if you don't know
13:49 - what these are google them they're good
13:50 - things to know
13:52 - good things to know to keep you learning
13:53 - more about react
13:54 - the most popular frameworks are tools
13:56 - that you want to learn with your react
13:58 - coding
13:59 - react router
14:02 - oh look at that i put it in there twice
14:04 - sweet react router or react router learn
14:07 - either one that's awesome
14:09 - create react app is a great way to get
14:11 - started with a react project parcel is
14:14 - also a great way to get started with
14:15 - your react project i can i parcel kind
14:18 - of can replace create react app in a lot
14:20 - of ways
14:21 - apollo for graphql it's a great
14:23 - alternative to rest if you're going to
14:25 - do graphql do apollo that's pretty
14:27 - standard these days
14:28 - next js is an awesome framework for
14:31 - doing server-side rendered apps with
14:33 - react or really just for doing full
14:36 - applications with react next.js is
14:39 - pretty awesome it just keeps getting
14:40 - better and better
14:41 - react storybook is really great for
14:43 - documentation testing individual
14:45 - components and for developing individual
14:47 - components as well so storybook is super
14:50 - really cool to look into there's another
14:52 - one called doc z or docs i don't know
14:54 - how you pronounce it that's kind of a
14:56 - competitor to that but i think storybook
14:57 - is kind of the better one to turn to
14:59 - still these days
15:01 - and then for css in react
15:03 - emotion is kind of the number one way to
15:07 - look at putting your css into your react
15:10 - side of things styled components is also
15:12 - a very popular library for that so if
15:14 - you are not familiar or have at least
15:17 - looked into everything on this list you
15:18 - should look into everything on this list
15:20 - if you are a react developer
15:23 - and then as far as state management how
15:25 - do you actually manage state in react
15:27 - this won't make sense if you don't know
15:29 - react but you will want to know this
15:30 - when you're learning it
15:32 - redux is the most popular state
15:34 - management tool
15:35 - right now but really mob x needs to be
15:38 - the most popular one and is growing in
15:40 - popularity for the simple reason of mobx
15:42 - is way way way way simpler there's a lot
15:46 - of ceremony
15:47 - to working with redux that makes it
15:49 - slower for development ultimately makes
15:52 - it more stable when you're working with
15:53 - really complex data and really complex
15:56 - actions and action sequences but modbx
15:58 - is so much simpler and most of the time
16:01 - you don't need all that
16:03 - complexity and intense stability that
16:05 - redux provides
16:06 - my go to is always mob x for any project
16:10 - always mobx all the developers i know
16:12 - their go to is mob x and they bring in
16:14 - redux when they really need something
16:17 - more complex that can do a lot more data
16:19 - heavy lifting mobx state tree is also a
16:21 - great alternative to redux really really
16:24 - cool uh tool and utility as well but mob
16:27 - x first then redux for managing state
16:30 - believe me you'll thank me when you're
16:31 - older
16:32 - if you do redux as a go-to for
16:34 - everything i would really encourage you
16:36 - learn mob x and use that on your next
16:38 - app especially if there's nothing super
16:40 - complex and heavy data lifting
16:42 - man you're just going to enjoy your
16:43 - developer life a whole lot more using
16:45 - mobx over redux next thing you want to
16:47 - learn is you want to learn documentation
16:50 - and testing these are pretty
16:51 - straightforward these are all just
16:52 - things to be familiar with
16:54 - great ways to learn how to test and add
16:57 - add stability tests to your react code
16:59 - keep hitting that making that circle
17:01 - thing pop up forgive me for that popping
17:03 - up on the screen
17:04 - um some important js skills to learn
17:06 - typescript is getting more and more and
17:08 - more popular there used to be a
17:09 - competitor called flow that's pretty
17:10 - much out of the running now learn
17:12 - typescript if you want to add strong
17:14 - static typing to your javascript
17:17 - projects
17:18 - people either love it or don't really
17:20 - find a huge need for it i'm kind of on
17:22 - the fence i can swing either way i'd be
17:24 - happy never using typescript for the
17:25 - rest of my life and i'd be happy using
17:27 - typescript for the rest of my life uh
17:29 - it's just got its pros and cons
17:32 - functional programming with javascript
17:33 - really really something that will make
17:35 - you a much better javascript programmer
17:39 - definitely something good to look into
17:41 - and then some performance and
17:43 - optimization things progressive web apps
17:46 - and google's amp are out there now
17:48 - google's amp actually gets a lot of
17:50 - criticism because it basically makes
17:52 - google own more of the internet which a
17:55 - lot of people don't like but that being
17:57 - said if if you're working on a project
17:58 - that has to rank as high as possible on
18:00 - mobile
18:02 - search engine traffic uh you need to at
18:04 - least be aware of amp and what you might
18:07 - be trading off if you don't make use of
18:09 - amp
18:10 - progressive web apps are also something
18:12 - that are just getting more and more and
18:13 - more popular they're a good thing to
18:14 - look into
18:15 - a lot of people don't need to know them
18:17 - and a lot of people really do need to
18:19 - know about progressive web apps and i
18:21 - won't go into the detail around that so
18:23 - that's your front end skill set learn
18:25 - react learn how to package react up with
18:28 - webpack and npm
18:30 - and then all these little tools will
18:31 - help you get better and better and
18:32 - better at react as you go that's front
18:34 - end
18:35 - and then we will move on to back end
18:40 - okay so the job titles you're looking
18:42 - for as a back-end engineer are listed
18:45 - here again i'm sorry there's no more
18:47 - standardization for back-end engineers
18:49 - than there are for front-end engineers
18:50 - you could you could be called an
18:52 - engineer a developer
18:53 - a back-end developer back-end engineer
18:56 - you might be called a node.js engineer
18:58 - or a ruby engineer depending on what
19:00 - framework you lose
19:02 - lose or use uh and so basically those
19:05 - are the job titles that you're looking
19:06 - for oh my goodness i just keep messing
19:08 - up everything with my mouse today so
19:11 - my recommendations are getting even
19:13 - stronger and stronger there's there's
19:15 - even more stability that's come to back
19:16 - end languages over the last year or two
19:19 - here's essentially what you want to do
19:20 - if you're starting off you want to learn
19:21 - node.js and you want to learn go or go
19:24 - lang just that's the two recommendations
19:26 - that i'm recommending extremely strongly
19:29 - i'm seeing a huge trend around both of
19:32 - these languages they're going to be
19:33 - popular and in demand for a very very
19:36 - very very long time i will say one
19:39 - exception if you want to go data science
19:41 - become a data scientist which is labeled
19:43 - as the sexiest career path of 2020
19:46 - then python is actually something you'll
19:48 - want to learn because python language is
19:50 - just much better for data managing large
19:53 - pieces of data
19:55 - when you know python you know why
19:57 - there's just a whole lot of baked in
19:58 - things that make python and and it's
20:00 - also just the language of choice for
20:02 - data scientists it's it's the the
20:03 - community is built around python so
20:05 - while you can do all those things in
20:07 - other languages
20:08 - python is the go-to language for data
20:10 - science so if you want to be a data
20:11 - scientist and you love things like
20:13 - auditing and accounting
20:15 - and science and statistics then go with
20:19 - python go a data science background uh
20:21 - data science track uh that that's
20:24 - definitely the recommendation aside from
20:25 - that
20:26 - node.js is the absolute first thing you
20:28 - want to learn for two reasons one you
20:29 - probably already know basic javascript
20:31 - you will learn node.js way faster two it
20:34 - is about the most popular thing out
20:37 - there right now so you're gonna have a
20:38 - lot of job opportunity and three node.js
20:40 - is just outstanding at io which is why
20:43 - it's most popular i o meaning uh input
20:46 - output uh if most back-end applications
20:49 - these days do most of their work
20:51 - fetching information from a database and
20:53 - returning that to the requester
20:56 - and that's pretty much where node.js
20:58 - shines better than anything else it can
21:00 - at the same time just without even
21:02 - batting an eye make thousands and
21:04 - thousands of requests to databases and
21:07 - cache layers all at once and run them
21:09 - together and send them out to the client
21:11 - it's just extraordinary at that so go
21:13 - with node.js um there's two frameworks
21:16 - for node.js the tiny ones uh they're
21:19 - that uptick means they're micro
21:20 - frameworks
21:22 - um and so node.js with express is the
21:25 - thing you'd want to learn first
21:26 - absolutely a great thing to learn golang
21:28 - is the thing you'd want to learn next go
21:30 - is becoming more and more popular it's a
21:32 - great high performance language it's not
21:34 - the most high performance language but
21:37 - it's high performance enough and simple
21:39 - enough to really just get a great
21:42 - adoptability people really like using go
21:45 - rust is an alternative if you need to
21:46 - just squeeze the maximum performance
21:49 - juice out of whatever machine you're
21:50 - running on
21:52 - but
21:53 - go is growing in popularity faster than
21:55 - rust is
21:56 - in my opinion uh so learn node
21:58 - learn go
22:00 - uh learning a functional language is
22:01 - more about stretching yourself as a
22:03 - programmer than hey everybody's looking
22:05 - for people that are awesome at
22:06 - functional languages uh it's really the
22:08 - hipster lang the hipster
22:10 - section of the coder community is the
22:11 - functional languages um the artisans so
22:15 - to speak languages but it'll really
22:17 - stretch and challenge the way you think
22:19 - about code to learn a functional
22:20 - language so those are pick one on there
22:22 - and learn it it's going to be really
22:23 - cool for you to learn it and notable
22:25 - others are java and csharp.net
22:29 - these are huge these were the big boys
22:31 - of yesteryear have not gone away so many
22:34 - businesses and jobs are built on not
22:36 - java or csharp.net so i never say these
22:39 - are terrible technologies don't learn
22:41 - them i don't recommend newbies ever
22:43 - learn them because there's old java and
22:45 - there's new java there's bad java
22:47 - there's good java and it can be really
22:49 - tricky to figure out
22:51 - which java you should learn
22:53 - to be a modern developer you can
22:55 - definitely be a modern java developer
22:57 - it's gotten a lot better in the last few
22:58 - years actually
23:00 - but
23:01 - it's tricky to find out what java to
23:04 - learn so that's that's something
23:06 - important for you to know that's why i
23:07 - say no js go lang that's gonna be
23:10 - awesome and then basically as you know
23:12 - learn one of these languages in one of
23:14 - these frameworks you immediately go
23:17 - through these lists right here
23:20 - how do i work with mysql or postgres or
23:22 - redis or cassandra with those data with
23:25 - those uh frameworks
23:28 - so essentially you'll say hey i'm
23:29 - learning node.js how do i connect
23:30 - node.js to a postgres data database
23:33 - and postgres is basically the relational
23:36 - one you should go to these days my
23:37 - sequel is
23:38 - really really similar but pick postgres
23:40 - if you're going to learn just one
23:42 - database in the whole wide world learn
23:44 - postgres and then learn redis as your
23:46 - next one that's going to be an awesome
23:48 - next one to learn and then learn mongodb
23:51 - if you're going to learn a third one
23:53 - learn elasticsearch if you're going to
23:54 - learn a fourth one learn a rongodb if
23:56 - you're going to learn a fifth one that's
23:58 - kind of your order of databases that you
24:00 - want to go
24:01 - each of these are kind of competition
24:02 - from the first but go top to bottom
24:05 - learn the one on the left hand side when
24:07 - as you're learning kind of what
24:08 - databases to to use but you can do an
24:11 - awful lot just knowing postgres for the
24:13 - rest of your life too so don't feel like
24:15 - you have to know this whole list by any
24:17 - means i don't know all the databases on
24:19 - this whole list well
24:20 - those are just kind of all
24:22 - a sampling of the many many popular
24:24 - databases out there so learn those and
24:27 - then for the languages you'll know
24:29 - you'll basically want to learn
24:31 - these things on the punch this is kind
24:33 - of your learning punch list for each
24:36 - language and framework how do i manage
24:38 - packages in node.js or how do i manage
24:40 - packages in golang how do i do unit
24:42 - function testing in golang or node.js
24:45 - how do i create an api graphql or
24:48 - restful in node.js or golang what are
24:51 - some security best practices these are
24:52 - all basically google searches that you
24:55 - can do node.js security best practices
24:58 - no js authentication authentication
25:01 - authorization blah blah blah so these
25:03 - are basically what you learn to learn
25:06 - the language of your choice up here and
25:08 - that is your backend skill set learn a
25:11 - language or two get good at them and
25:13 - learn a database or two that's pretty
25:15 - much it at that point that's what people
25:17 - know who do this stuff all day every day
25:20 - in the backend landscape it's not really
25:22 - that complex learn a language or two
25:24 - learn some databases and go build great
25:26 - stuff so now we move on to dev ops which
25:29 - is the farthest down the rabbit hole you
25:31 - can really go and still call it
25:33 - engineering or
25:35 - software development
25:36 - devops is basically the art of deploying
25:39 - your applications well
25:41 - it used to be there were opt-ops teams
25:43 - that just did all this but we've really
25:45 - learned in the last decade or so that
25:47 - developers need to be heavily connected
25:49 - to this and so you should always have
25:50 - developer operations guys that kind of
25:53 - bridge that gap or ideally an entire
25:55 - culture that is both development and
25:58 - operations both building and deploying
26:00 - applications so if you're a devops
26:01 - engineer that's a really great engineer
26:03 - to be
26:04 - coming into the devops world you the
26:06 - first thing you want to learn is docker
26:08 - uh docker rules and runs the entire
26:12 - devops world basically it is the de
26:14 - facto way that you deploy an application
26:16 - no matter how or where or when you
26:18 - deploy it you're gonna use docker to
26:20 - containerize that application and deploy
26:22 - it there are exceptions but there aren't
26:24 - many exceptions to it basically you have
26:27 - this node.js application you're going to
26:29 - package it up with docker and then that
26:31 - docker image you just packaged can run
26:33 - anywhere it can run on digital ocean it
26:35 - can run on aws it can run on kubernetes
26:38 - and these are kind of the different
26:39 - places to turn for different scale if if
26:41 - you're deploying on a small scale and
26:43 - just spin up some digital ocean docker
26:45 - servers and run your docker containers
26:47 - it's fast it's simple and you can get a
26:49 - long ways with that digitalocean has
26:51 - actually continued to amaze me they're
26:53 - coming out with better and better and
26:54 - better stuff all the time
26:56 - uh yeah digitalocean is awesome if
26:58 - you're going at more of a medium scale
27:01 - rancher is a really cool solution that
27:03 - basically is a a simplified layer over
27:06 - kubernetes that makes it a lot easier to
27:08 - work with because kubernetes is very
27:10 - hands-on and very low level so it's a
27:12 - lot of work to work with kubernetes aws
27:14 - fargate if you're in aws is basically a
27:17 - way that you can just say hey run my
27:18 - containers i don't even care what the
27:20 - servers are you're running them on just
27:21 - run them fargate's pretty awesome it
27:24 - takes the entire server layer out of
27:26 - your control and out of your worry and
27:28 - care
27:29 - so it's also a really great place to
27:31 - turn so that's docker that's my favorite
27:33 - ways to deploy with docker
27:35 - now you're going to learn operational
27:37 - visibility this is really really huge
27:38 - and really you should know this and care
27:40 - about this if you're a software
27:41 - developer
27:42 - but the devops guys really care about
27:44 - the most how do i watch my application
27:46 - running in the wild and know if there's
27:48 - problems how do i know if the users are
27:49 - getting slow responses or errors
27:52 - these are all very important things new
27:53 - relic is absolutely my favorite tool for
27:55 - this of all time
27:57 - it's expensive but it is super super
28:00 - super super great offers some phenomenal
28:02 - features that it's just gotten really
28:04 - good in the last i'd say five years new
28:06 - relic is is really just the dominator in
28:09 - terms of how much it gives you out of
28:10 - the box to see your applications running
28:13 - in production and see how they're
28:15 - working with databases and if the
28:17 - database connections are slow and all
28:19 - that kind of stuff all out of the box
28:22 - logging also you'll want to make sure
28:24 - that all the containers that are running
28:26 - your logs and your error logs go
28:27 - somewhere where you can search them and
28:29 - find them easily because you should
28:30 - never have to ssh or open a shell into a
28:33 - container or a live server anymore
28:34 - that's like so
28:36 - old to have to do that you should never
28:38 - have to open your shell onto a server or
28:40 - a container you should have a better
28:41 - place to access all that information as
28:44 - far as where you deploy stuff uh
28:46 - digitalocean aws are pretty much my two
28:49 - main ones azure and google cloud are
28:52 - obviously really big if you're in the
28:53 - microsoft world and you're deploying on
28:55 - microsoft servers azure is better for
28:57 - that
28:59 - google cloud is a little bit simpler
29:00 - than aws because aws handles any and
29:03 - every enterprise possibility which is
29:05 - why so many places use aws and digital
29:09 - ocean is just simple simple simple
29:10 - simple but they've added a lot of new
29:12 - features that allow you to use them in a
29:14 - professional capacity that really
29:16 - prevented them from being great business
29:18 - solutions in the past so digitalocean
29:20 - has really come a long ways in the last
29:22 - two years specifically and i strongly
29:25 - recommend them for small and
29:26 - medium-sized businesses actually they're
29:28 - really great you just won't have to
29:30 - worry as much about hiring a whole bunch
29:32 - of ops guys to manage all your
29:33 - infrastructure
29:34 - so uh that's pretty much where i'd
29:36 - recommend deploying stuff
29:38 - uh again i kind of already covered this
29:40 - the way you actually configure stuff
29:42 - docker and terraform terraform form
29:45 - basically allows you to spin up any of
29:46 - this infrastructure as code you
29:48 - absolutely should learn terraform docker
29:51 - and terraform are the two technologies
29:53 - you learn more than anything else to be
29:55 - great at devops these days
29:58 - and then hosted solutions these are some
30:00 - ways that you'll actually create ci
30:01 - pipelines ci pipelines are continuous
30:04 - integration or continuous deployment to
30:06 - where as code gets pushed and merged it
30:08 - automatically builds your docker
30:10 - containers pushes them someplace and
30:12 - deploys those across digitalocean or aws
30:15 - or whatever so circleci is probably my
30:17 - favorite one of all these these days
30:20 - codechip is also really great
30:22 - github actions is a newer one i don't
30:24 - have a lot of production experience with
30:26 - i don't know that really anybody does
30:27 - have a lot of production experience with
30:29 - github actions yet but it seems to be
30:31 - very promising and very cool
30:33 - so these are some really these are
30:35 - probably the top three that i pick on
30:37 - hosted solutions and if you're going to
30:39 - go with something internal
30:40 - git lab or drone ci are my favorite
30:42 - although jenkins has been around a long
30:44 - time and is still very very popular
30:47 - oh my goodness that is quite a big
30:48 - breath i might have even distorted my
30:50 - microphone by yelling but that is what
30:52 - you learned today in 2020 to go all the
30:54 - way down the rabbit hole with web
30:56 - development
30:57 - uh hopefully you found this video
30:59 - helpful oh my goodness if you made it
31:00 - this far you must have found something
31:01 - helpful because you stuck with me for a
31:03 - long time
31:04 - um uh it's been a pleasure to put this
31:06 - together and show this to you guys i
31:08 - hope you enjoyed it have yourselves an
31:09 - awesome
31:10 - 2020 and go learn something new and
31:13 - enjoy learning it alright see ya

Cleaned transcript:

hey everybody this is the video where we cover web development in the year 2020. i'm always excited about this video i do it every one to two years whenever enough has changed in the technology landscape to warrant a new video that's different enough from the last one and we are at that point and i'm very excited to do this video also important to note some people miss this huge important fact is this mind map is available online on koggle i will put the link in the description because lots of these are links to videos that i have covering the topics so you will want to keep that link and follow up if you're learning a different area of this so i've if you've not seen the videos before i break this into several different areas basic front end which is a first skill set uh then advanced front end back end and dev ops those are kind of your main skill sets that you'll learn all the way covering from beginner beginner i'm wanting to learn web development which is this page we're on right now all the way through hey i want to advance and get really really good and continue getting really really good even if i am so this is also made to keep people up to date and current if you're already an awesome software engineer so let's dive into it with basic front end basic front end is what you learn if you're wanting to learn web development right now as a new beginner and the building blocks of basic front end are the same that they have been for a long time they have just changed in what you have to learn those building blocks are you're going to learn basic html and css and then you're going to start learning javascript as your first programming language so html is the content of the web think of it as text pictures links and that's it but they are ugly html has no way of looking making things look good that's where css comes in it stands for cascading style sheets so as soon as you learn just a little bit of html you know how to start putting content into a web page immediately start learning html and css together so you can learn how to inject content into a page that looks really really good so how you learn css has changed a lot in the last couple years you're gonna do this if you're learning css you're gonna learn the basics like hey how do i actually add css to a page how do i actually make this link blue or red right we're super basics and as soon as you learn those you're going to start learning layouts and grids not everyone teaches this as the very first step but this is believe me you want to learn how to do layouts in grids first using css grid and css flexbox so once you learn those the rest of the page is easy easy easy because all you have to do is take your little content areas that you made with your grids and add pieces of content into it if you can learn to think of web design as building grids for your content and then adding content inside your journey just became really really easy so i cover a decent bit of that in this course that i have already that i have some links to and then you'll move on to javascript javascript is the coding language of the web and honestly it's the most popular coding language of all time there's almost nothing you cannot do with javascript so it's definitely the one you want to learn first and there's some links to the different uh kind of steps that you want to go through top to bottom in learning basic javascript so when you've got those you can actually build web pages they're like brochure style web pages where they might not be like twitter where people can post tweets to a database and you can log in and load all your tweets from a database and at all your friends but you can actually build brochure style web websites and actually make money for small businesses from small businesses by doing their websites for them so this is a really allinclusive website skill set that can start making you money right away even if you don't have a fulltime job as a web developer but there are people with this skill set that get decent at it and do have fulltime jobs as web developers so really all you need to wrap that up is you need to know how to take that website you've built and put it online so if you're new and you know how to build a website but you don't know things like ssh and github and command line you're going to look for something like hostgator which is the easiest place to dump web websites online it's absolutely the simplest place i have a video where you can in about five or six minutes go from having code on your computer to having a website up and running with your own domain name hostgator is the easiest and fastest for doing that some people give it a hard time because they're more advanced and they like to look down on things they're more advanced than but it is absolutely the best and there's some deals there that some of these are affiliate deals that i have affiliate codes they might get me a buck if you use those codes but feel free to try these different coupon codes because you can save a lot of money with hostgator with these codes um once you've learned more things that are over here that i'll cover in a minute netlify is kind of the next best place to deploy your stuff on if you're confident with github skill set command line skill set committing your code to source control netlify becomes superior to this but you also have to know more about domains and there's there's more manual connection points you have to do to deploy on netlify so that's your step two and then step three we cover that more in the back end and devops stuff so uh digitalocean in aws is pretty much my recommendations there in a nutshell so you can build a website you can deploy a website uh where do you go from there well whether you go front end up here and become a master of front end code or back end down here and become a master of end code you've got to learn a couple things and these actually haven't changed at all over multiple years because they're just kind of fundamentals of how the internet works you need to learn the terminal on your windows or mac computer you need to learn the command line learn the basic commands of how to move into folders uh and you know list the files it's really not that bad people avoid it because everybody's used to clicking a drop down menu file open instead of typing the command open file name it's it really is mentally annoying for people at first when they're used to visual menus to actually have to type commands but it's honestly not that big of a deal learn the terminal you will hold yourself back and no matter what area you go into if you do not just take the little bit of time to learn the terminal you don't want to learn basic ssh this hasn't changed i have an old video on it that still is honestly as current as it gets because ssh never changes and then you're set up to learn github github is really what's going to lock in your next level of your skill set to be able to check your code into a repository that keeps your code safe keeps a list of all the code changes allows you to collaborate with teams to build code bases a whole lot of things so that's kind of your next grouping of three things you want to learn and then learn how the client and server talk to each other learn about uh restful web services and and kind of the types of requests you can make to a server domain name and dns basics are also important how do i set up a domain name how do i set up a subdomain name what's the difference between an a record a cname record an mx record these are really really easy easy easy things to learn but they're helpful to learn and a lot of people will go years without learning kind of these little things because no one gave them a list and said hey you'll learn that learn this it's important to know so you want to learn those things and from there you're basically equipped to either go uh towards learning front end more heavily or start venturing into back end and servers i would recommend front end is the place to go so let's journey on here so i'm going to pause real quick and say what kind of job titles you can actually look for once you're learning or have learned the front end skill set basically learning a front end skill set apply allows you to apply for software developer jobs react developer or view developer job sometimes they're called that sometimes they're just called web developer or frontend developer or frontend engineer or javascript javascript engineer there's really no standardized way that companies will post these job descriptions for people who know the skill set so you want to make sure if you're looking for a firsttime job or if you're looking for a new job that you search along all these lines and don't miss out on any opportunities okay i'm about to show you an overwhelming list of things but it's actually really really simple so don't get overwhelmed bear with me as i explained the big pieces that you have to learn and then explain why all the little things are added onto this list okay so to go towards a master of front end you really need to learn i'm going to tell you two things you want to learn react js you want to learn npm and you want to learn webpack you do that you're good okay so that that's it that's your big big uh let's call them complex pieces you want to learn react.js which is a javascript framework you want to learn webpack to bundle up all your code into one file or multiple files and you want to learn how npm works uh which is node.js on your machine so that's your big moving pieces let's go into all these little things and why i added them on here and lots of these will be useful for people who already kind of either know react webpack and npm these will help you keep your skill set current know what you should be learning this year all that stuff so if you haven't heard of jamstack man that's a really cool way of building your applications jekyll gatsby and next js are all really cool jam stack frameworks jekyll is centered a little bit more around html css development gatsby is centered a little bit more around react kind of like jekyll and nextjs is a react framework that also supports jam stack so uh jekyll would be the simplest then gatsby then next my favorite one out of all of them is next but that's if you're doing a lot of react work so jam stack if you haven't learned it super super cool jam stack on netlify is actually really awesome it allows you to totally replace wordpress if you're working for a company that still uses wordpress you probably don't need to be using wordpress these days use jam stack instead i'll leave that be and all the wordpress people can get angry at me over here we're going to talk css so there's a few tools and skill sets you need to for css management these days although it's a lot less than you used to need you used to need uh just to do a lot more css stuff to make css work because css was so bad but css keeps getting better and better and better pretty much uh the only thing i say you need on this list is to know how to use sas use sas which is basically add some extra features to css that you don't get these days honestly that's it used to be i'd say you really need to know a css framework to help you do a lot easily but with css grid and css flexbox getting really great you don't really need a framework anymore honestly you need a framework if you're looking for a lot of ui components already built for you that you can just drag into an admin backend or something to get dropdowns and menus and stuff they can look generic and that's okay it helps you go really fast that's honestly all frameworks are really really good for these days tailwind css is a really cool css utility framework that allows you to work more on design almost like some of the utility classes that bootstrap has without all the component heavier stuff tailwind is actually my favorite of all these it's the one that i would actually end up using the most these days if i went to a css framework because it's the most lightweight and you just don't need all the bulk of these other ones anymore so that's pretty cool css organization you really only need this if you're doing heavy lifting html css they're good to know if you don't know what these are look into them at least but unless you're doing a lot of heavy html css coding you don't really need to know those so front end build tools has gotten a lot simpler there's a whole lot of contenders all fighting for their space and frontend build tools over the last couple years for me it's really simplified down to three things do your basic build jobs using just npm scripts that's it npm scripts can do a whole lot for you webpack is the definitive uh bundler for all of your css and javascript code these days um although you might not need that so much in the future with http 2 really becoming big and imports becoming now supported in every browser except for ie11 you might not even need webpack anymore which is a wild world to think about but that's a really really cool thing that's happened in the last year with web development but i'd say parcel if you're not doing complex build systems parcel is drastically simpler than webpack like saves hours and hours of time you're just up and running with like a react website um instantly i have a video on parcel that is phenomenal i absolutely absolutely love parcel and unless i'm doing complex work would use that instead of webpack so that's kind of how you build your stuff up together so let's move on to javascript frameworks again react being one of those big pieces you should learn react is the definitive framework to learn vue is really the only other contender out there angular still exists but you shouldn't be using it you learn react there's no good reason you shouldn't learn react as the first framework you learn vue is great and competes with react and a lot of things but react has such a bigger ecosystem in following an adoption that there's there's no good reason to go learn vue instead of react these days if you're awesome at react look into view but everyone i've known that's awesome react and looks into view like it's very very rare for people to say vue is so much better for all these huge deal breaker reasons that i couldn't use react anymore so i'm strongly opinionated about that because i would i'd be steering you wrong if i said learn view first no no no learn react first um on that topic since i'm react uh suggesting react so strongly if you're good at react already here's some newer or advanced react topics basically just a list if you don't know what these are google them they're good things to know good things to know to keep you learning more about react the most popular frameworks are tools that you want to learn with your react coding react router oh look at that i put it in there twice sweet react router or react router learn either one that's awesome create react app is a great way to get started with a react project parcel is also a great way to get started with your react project i can i parcel kind of can replace create react app in a lot of ways apollo for graphql it's a great alternative to rest if you're going to do graphql do apollo that's pretty standard these days next js is an awesome framework for doing serverside rendered apps with react or really just for doing full applications with react next.js is pretty awesome it just keeps getting better and better react storybook is really great for documentation testing individual components and for developing individual components as well so storybook is super really cool to look into there's another one called doc z or docs i don't know how you pronounce it that's kind of a competitor to that but i think storybook is kind of the better one to turn to still these days and then for css in react emotion is kind of the number one way to look at putting your css into your react side of things styled components is also a very popular library for that so if you are not familiar or have at least looked into everything on this list you should look into everything on this list if you are a react developer and then as far as state management how do you actually manage state in react this won't make sense if you don't know react but you will want to know this when you're learning it redux is the most popular state management tool right now but really mob x needs to be the most popular one and is growing in popularity for the simple reason of mobx is way way way way simpler there's a lot of ceremony to working with redux that makes it slower for development ultimately makes it more stable when you're working with really complex data and really complex actions and action sequences but modbx is so much simpler and most of the time you don't need all that complexity and intense stability that redux provides my go to is always mob x for any project always mobx all the developers i know their go to is mob x and they bring in redux when they really need something more complex that can do a lot more data heavy lifting mobx state tree is also a great alternative to redux really really cool uh tool and utility as well but mob x first then redux for managing state believe me you'll thank me when you're older if you do redux as a goto for everything i would really encourage you learn mob x and use that on your next app especially if there's nothing super complex and heavy data lifting man you're just going to enjoy your developer life a whole lot more using mobx over redux next thing you want to learn is you want to learn documentation and testing these are pretty straightforward these are all just things to be familiar with great ways to learn how to test and add add stability tests to your react code keep hitting that making that circle thing pop up forgive me for that popping up on the screen um some important js skills to learn typescript is getting more and more and more popular there used to be a competitor called flow that's pretty much out of the running now learn typescript if you want to add strong static typing to your javascript projects people either love it or don't really find a huge need for it i'm kind of on the fence i can swing either way i'd be happy never using typescript for the rest of my life and i'd be happy using typescript for the rest of my life uh it's just got its pros and cons functional programming with javascript really really something that will make you a much better javascript programmer definitely something good to look into and then some performance and optimization things progressive web apps and google's amp are out there now google's amp actually gets a lot of criticism because it basically makes google own more of the internet which a lot of people don't like but that being said if if you're working on a project that has to rank as high as possible on mobile search engine traffic uh you need to at least be aware of amp and what you might be trading off if you don't make use of amp progressive web apps are also something that are just getting more and more and more popular they're a good thing to look into a lot of people don't need to know them and a lot of people really do need to know about progressive web apps and i won't go into the detail around that so that's your front end skill set learn react learn how to package react up with webpack and npm and then all these little tools will help you get better and better and better at react as you go that's front end and then we will move on to back end okay so the job titles you're looking for as a backend engineer are listed here again i'm sorry there's no more standardization for backend engineers than there are for frontend engineers you could you could be called an engineer a developer a backend developer backend engineer you might be called a node.js engineer or a ruby engineer depending on what framework you lose lose or use uh and so basically those are the job titles that you're looking for oh my goodness i just keep messing up everything with my mouse today so my recommendations are getting even stronger and stronger there's there's even more stability that's come to back end languages over the last year or two here's essentially what you want to do if you're starting off you want to learn node.js and you want to learn go or go lang just that's the two recommendations that i'm recommending extremely strongly i'm seeing a huge trend around both of these languages they're going to be popular and in demand for a very very very very long time i will say one exception if you want to go data science become a data scientist which is labeled as the sexiest career path of 2020 then python is actually something you'll want to learn because python language is just much better for data managing large pieces of data when you know python you know why there's just a whole lot of baked in things that make python and and it's also just the language of choice for data scientists it's it's the the community is built around python so while you can do all those things in other languages python is the goto language for data science so if you want to be a data scientist and you love things like auditing and accounting and science and statistics then go with python go a data science background uh data science track uh that that's definitely the recommendation aside from that node.js is the absolute first thing you want to learn for two reasons one you probably already know basic javascript you will learn node.js way faster two it is about the most popular thing out there right now so you're gonna have a lot of job opportunity and three node.js is just outstanding at io which is why it's most popular i o meaning uh input output uh if most backend applications these days do most of their work fetching information from a database and returning that to the requester and that's pretty much where node.js shines better than anything else it can at the same time just without even batting an eye make thousands and thousands of requests to databases and cache layers all at once and run them together and send them out to the client it's just extraordinary at that so go with node.js um there's two frameworks for node.js the tiny ones uh they're that uptick means they're micro frameworks um and so node.js with express is the thing you'd want to learn first absolutely a great thing to learn golang is the thing you'd want to learn next go is becoming more and more popular it's a great high performance language it's not the most high performance language but it's high performance enough and simple enough to really just get a great adoptability people really like using go rust is an alternative if you need to just squeeze the maximum performance juice out of whatever machine you're running on but go is growing in popularity faster than rust is in my opinion uh so learn node learn go uh learning a functional language is more about stretching yourself as a programmer than hey everybody's looking for people that are awesome at functional languages uh it's really the hipster lang the hipster section of the coder community is the functional languages um the artisans so to speak languages but it'll really stretch and challenge the way you think about code to learn a functional language so those are pick one on there and learn it it's going to be really cool for you to learn it and notable others are java and csharp.net these are huge these were the big boys of yesteryear have not gone away so many businesses and jobs are built on not java or csharp.net so i never say these are terrible technologies don't learn them i don't recommend newbies ever learn them because there's old java and there's new java there's bad java there's good java and it can be really tricky to figure out which java you should learn to be a modern developer you can definitely be a modern java developer it's gotten a lot better in the last few years actually but it's tricky to find out what java to learn so that's that's something important for you to know that's why i say no js go lang that's gonna be awesome and then basically as you know learn one of these languages in one of these frameworks you immediately go through these lists right here how do i work with mysql or postgres or redis or cassandra with those data with those uh frameworks so essentially you'll say hey i'm learning node.js how do i connect node.js to a postgres data database and postgres is basically the relational one you should go to these days my sequel is really really similar but pick postgres if you're going to learn just one database in the whole wide world learn postgres and then learn redis as your next one that's going to be an awesome next one to learn and then learn mongodb if you're going to learn a third one learn elasticsearch if you're going to learn a fourth one learn a rongodb if you're going to learn a fifth one that's kind of your order of databases that you want to go each of these are kind of competition from the first but go top to bottom learn the one on the left hand side when as you're learning kind of what databases to to use but you can do an awful lot just knowing postgres for the rest of your life too so don't feel like you have to know this whole list by any means i don't know all the databases on this whole list well those are just kind of all a sampling of the many many popular databases out there so learn those and then for the languages you'll know you'll basically want to learn these things on the punch this is kind of your learning punch list for each language and framework how do i manage packages in node.js or how do i manage packages in golang how do i do unit function testing in golang or node.js how do i create an api graphql or restful in node.js or golang what are some security best practices these are all basically google searches that you can do node.js security best practices no js authentication authentication authorization blah blah blah so these are basically what you learn to learn the language of your choice up here and that is your backend skill set learn a language or two get good at them and learn a database or two that's pretty much it at that point that's what people know who do this stuff all day every day in the backend landscape it's not really that complex learn a language or two learn some databases and go build great stuff so now we move on to dev ops which is the farthest down the rabbit hole you can really go and still call it engineering or software development devops is basically the art of deploying your applications well it used to be there were optops teams that just did all this but we've really learned in the last decade or so that developers need to be heavily connected to this and so you should always have developer operations guys that kind of bridge that gap or ideally an entire culture that is both development and operations both building and deploying applications so if you're a devops engineer that's a really great engineer to be coming into the devops world you the first thing you want to learn is docker uh docker rules and runs the entire devops world basically it is the de facto way that you deploy an application no matter how or where or when you deploy it you're gonna use docker to containerize that application and deploy it there are exceptions but there aren't many exceptions to it basically you have this node.js application you're going to package it up with docker and then that docker image you just packaged can run anywhere it can run on digital ocean it can run on aws it can run on kubernetes and these are kind of the different places to turn for different scale if if you're deploying on a small scale and just spin up some digital ocean docker servers and run your docker containers it's fast it's simple and you can get a long ways with that digitalocean has actually continued to amaze me they're coming out with better and better and better stuff all the time uh yeah digitalocean is awesome if you're going at more of a medium scale rancher is a really cool solution that basically is a a simplified layer over kubernetes that makes it a lot easier to work with because kubernetes is very handson and very low level so it's a lot of work to work with kubernetes aws fargate if you're in aws is basically a way that you can just say hey run my containers i don't even care what the servers are you're running them on just run them fargate's pretty awesome it takes the entire server layer out of your control and out of your worry and care so it's also a really great place to turn so that's docker that's my favorite ways to deploy with docker now you're going to learn operational visibility this is really really huge and really you should know this and care about this if you're a software developer but the devops guys really care about the most how do i watch my application running in the wild and know if there's problems how do i know if the users are getting slow responses or errors these are all very important things new relic is absolutely my favorite tool for this of all time it's expensive but it is super super super super great offers some phenomenal features that it's just gotten really good in the last i'd say five years new relic is is really just the dominator in terms of how much it gives you out of the box to see your applications running in production and see how they're working with databases and if the database connections are slow and all that kind of stuff all out of the box logging also you'll want to make sure that all the containers that are running your logs and your error logs go somewhere where you can search them and find them easily because you should never have to ssh or open a shell into a container or a live server anymore that's like so old to have to do that you should never have to open your shell onto a server or a container you should have a better place to access all that information as far as where you deploy stuff uh digitalocean aws are pretty much my two main ones azure and google cloud are obviously really big if you're in the microsoft world and you're deploying on microsoft servers azure is better for that google cloud is a little bit simpler than aws because aws handles any and every enterprise possibility which is why so many places use aws and digital ocean is just simple simple simple simple but they've added a lot of new features that allow you to use them in a professional capacity that really prevented them from being great business solutions in the past so digitalocean has really come a long ways in the last two years specifically and i strongly recommend them for small and mediumsized businesses actually they're really great you just won't have to worry as much about hiring a whole bunch of ops guys to manage all your infrastructure so uh that's pretty much where i'd recommend deploying stuff uh again i kind of already covered this the way you actually configure stuff docker and terraform terraform form basically allows you to spin up any of this infrastructure as code you absolutely should learn terraform docker and terraform are the two technologies you learn more than anything else to be great at devops these days and then hosted solutions these are some ways that you'll actually create ci pipelines ci pipelines are continuous integration or continuous deployment to where as code gets pushed and merged it automatically builds your docker containers pushes them someplace and deploys those across digitalocean or aws or whatever so circleci is probably my favorite one of all these these days codechip is also really great github actions is a newer one i don't have a lot of production experience with i don't know that really anybody does have a lot of production experience with github actions yet but it seems to be very promising and very cool so these are some really these are probably the top three that i pick on hosted solutions and if you're going to go with something internal git lab or drone ci are my favorite although jenkins has been around a long time and is still very very popular oh my goodness that is quite a big breath i might have even distorted my microphone by yelling but that is what you learned today in 2020 to go all the way down the rabbit hole with web development uh hopefully you found this video helpful oh my goodness if you made it this far you must have found something helpful because you stuck with me for a long time um uh it's been a pleasure to put this together and show this to you guys i hope you enjoyed it have yourselves an awesome 2020 and go learn something new and enjoy learning it alright see ya
