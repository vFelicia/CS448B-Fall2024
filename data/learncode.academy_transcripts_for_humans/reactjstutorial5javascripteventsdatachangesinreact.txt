With timestamps:

00:00 - okay now that we know how to manage data
00:02 - in our react application let's look at
00:05 - actually binding events interacting with
00:07 - user inputs and changing that data real
00:09 - time so let's say we want to add an
00:11 - input that's going to allow us to change
00:13 - this title as we type so the first thing
00:16 - we're going to want to do is let's go
00:17 - ahead over to that header now let's add
00:19 - an input and save it
00:22 - that'll update now let's get rid of this
00:25 - other header that we absolutely don't
00:27 - need anymore
00:28 - so then as this gets updated as this
00:33 - header input gets typed in we're going
00:34 - to want to take that change we're going
00:38 - to want to trigger some kind of event on
00:40 - the layout that says hey update your
00:42 - state we want a new title that title
00:45 - will then get passed into the header and
00:46 - the whole rendering process will begin
00:48 - because the state changed so the goal is
00:50 - we've got to get this state to change so
00:53 - let's go ahead and make a change title
00:55 - method and then this will receive a
00:59 - value so this set state well basically
01:03 - is just going to do this right I'm just
01:05 - going to set our state to the new title
01:06 - and because we're receiving title here
01:08 - we can actually use es6 and just go
01:10 - title which is the same as doing title
01:13 - equals title just cleans things up Thank
01:16 - You es6 so there we go let's go get rid
01:19 - of this we don't need you anymore
01:20 - and now how we'll change title fire well
01:24 - we're actually going to pass that in as
01:25 - a prop to header change title equals
01:29 - this change title now one thing that's
01:34 - very important is when passing functions
01:36 - or methods around you always want to
01:38 - bind them to this if we don't do bind
01:42 - this then it's going to execute in the
01:46 - context of whoever's calling it so let's
01:48 - say we pass in change tile title as is
01:51 - and then header later says let's go this
01:55 - props change title because remember we
01:58 - got passed in as a prop then that's
02:00 - basically the same as calling it there
02:03 - on the header component so now it'll set
02:06 - state of title on our header component
02:08 - our header component doesn't do anything
02:10 - with that nowhere in here is it looking
02:13 - for
02:13 - this dot state so that change title just
02:16 - failed silently it didn't throw an error
02:19 - and absolutely nothing happen so it's
02:21 - very important that you always bind this
02:24 - so now no matter who calls this change
02:27 - title function it's going to fire on the
02:29 - layout component so that's very
02:31 - important that has bit me more times
02:33 - than I can imagine and sometimes it can
02:35 - take you a little while to figure out
02:37 - exactly why your app is not working so
02:39 - there's change title and then let's go
02:42 - here into the header now you can see it
02:46 - automatically is changing my title new
02:47 - title so right away when it renders it's
02:54 - going to automatically change to new
02:55 - title but we want this to happen
02:57 - whenever the user types in our input so
03:00 - that's very simple we just add an on
03:01 - change event again bind this because
03:08 - you've always got to make sure it's
03:09 - bound to the right context so whenever
03:11 - the user input receives a change event
03:13 - it's going to call our or handle change
03:18 - and that handle change
03:20 - Reesie receives a JavaScript event just
03:23 - like a normal event in jQuery or vanilla
03:27 - JavaScript woods so you can make this on
03:29 - change you can make this on click you
03:31 - can make this on blur basically every
03:33 - type of event you'd expect so on change
03:36 - it's going to fire this function and all
03:39 - we're going to do is go this stop props
03:41 - change title I call it change title or
03:45 - update title change title so that's
03:47 - going to change title let's actually get
03:49 - that title out of the element constant
03:53 - idle equals a target --top' value a
03:58 - target is the element that's receiving
04:00 - the on change so that's our input right
04:02 - there and we're just getting that value
04:05 - out so we've got our title let's pass it
04:07 - on to change title layout is going to
04:11 - fire change title which sets our state
04:14 - as soon as that state changes the entire
04:17 - react tree does a rerender and if
04:19 - there's any changes that get printed on
04:21 - out let's test it and see if it works
04:23 - awesome
04:24 - our title changed you notice green is
04:26 - flashing here
04:27 - because this guy's changing and green is
04:29 - flashing there excellent that's working
04:31 - great only change I want to make on this
04:33 - is I want this to say welcome by default
04:35 - I don't I want this to be two-way bound
04:38 - to the state of the title so that's very
04:41 - easy change we simply go in here and we
04:46 - make the value this stop props title so
04:52 - now by default my value is going to be
04:54 - whatever the title is there we go
04:55 - welcome boom add an exclamation what
04:58 - just happened is is I actually added
05:02 - that exclamation handle change fired
05:04 - exactly the same thing state got updated
05:07 - the whole tree rear-end 'red and now my
05:11 - header actually rendered the input
05:13 - actually got its value dynamically
05:15 - updated to be whatever the new value was
05:19 - so that is also very cool so if you were
05:22 - to change this to value but you never
05:25 - added an on change you get a very
05:26 - interesting reaction here from react so
05:29 - I'm setting my value but I'm not going
05:31 - to listen any change events it's
05:33 - actually nothing's going to happen no
05:36 - matter how many keys I hit every time
05:38 - there's a rerender it rear Enders the
05:41 - value to be this props title which has
05:43 - not changed so that's another thing that
05:45 - can be frustrating if you're not sure
05:46 - what's going on with react whenever
05:48 - you're buying to give value you also
05:50 - want to set up a change listener for
05:52 - that so it actually changes when the
05:54 - value changes so I hope by now you've
05:58 - been able to get a sense of how that
05:59 - reacts ecosystem works you basically
06:03 - we've created an app that has data
06:05 - living only in one place which is a
06:07 - great thing because this has enabled us
06:10 - to make really dumb components this
06:12 - header doesn't really care where the
06:15 - data comes from or what the data is it
06:17 - just knows I'm going to pass title in
06:20 - here and whenever this input changes I'm
06:23 - going to call the prop that was handed
06:24 - to me change title I don't care what it
06:26 - does I just know that this is my job
06:29 - our title component is even dumber it
06:33 - just renders whatever you give it this
06:35 - props title it's not aware of the data
06:37 - it doesn't care about the data you can
06:39 - move this to a completely different
06:40 - application
06:40 - if you wanted to the data could come
06:43 - from a completely different place it
06:45 - doesn't care so you get much more
06:46 - reusability out of your components and
06:49 - you get much more stability our data
06:51 - only lives on layout right now and it's
06:55 - just whenever the data changes we render
06:58 - the entire application and we update the
07:00 - Dom if there's any changes it makes your
07:02 - application development much more simple
07:05 - because you don't have to care about
07:06 - near as many moving parts that's part of
07:09 - the beauty of react I'm going to go
07:11 - ahead and leave basic react here and in
07:13 - the next videos we're going to move more
07:15 - into some patterns of how we actually
07:17 - deal with applications and how we deal
07:20 - with routing and a lot of other great
07:22 - things hope you've enjoyed this intro
07:24 - course to react have a good day

Cleaned transcript:

okay now that we know how to manage data in our react application let's look at actually binding events interacting with user inputs and changing that data real time so let's say we want to add an input that's going to allow us to change this title as we type so the first thing we're going to want to do is let's go ahead over to that header now let's add an input and save it that'll update now let's get rid of this other header that we absolutely don't need anymore so then as this gets updated as this header input gets typed in we're going to want to take that change we're going to want to trigger some kind of event on the layout that says hey update your state we want a new title that title will then get passed into the header and the whole rendering process will begin because the state changed so the goal is we've got to get this state to change so let's go ahead and make a change title method and then this will receive a value so this set state well basically is just going to do this right I'm just going to set our state to the new title and because we're receiving title here we can actually use es6 and just go title which is the same as doing title equals title just cleans things up Thank You es6 so there we go let's go get rid of this we don't need you anymore and now how we'll change title fire well we're actually going to pass that in as a prop to header change title equals this change title now one thing that's very important is when passing functions or methods around you always want to bind them to this if we don't do bind this then it's going to execute in the context of whoever's calling it so let's say we pass in change tile title as is and then header later says let's go this props change title because remember we got passed in as a prop then that's basically the same as calling it there on the header component so now it'll set state of title on our header component our header component doesn't do anything with that nowhere in here is it looking for this dot state so that change title just failed silently it didn't throw an error and absolutely nothing happen so it's very important that you always bind this so now no matter who calls this change title function it's going to fire on the layout component so that's very important that has bit me more times than I can imagine and sometimes it can take you a little while to figure out exactly why your app is not working so there's change title and then let's go here into the header now you can see it automatically is changing my title new title so right away when it renders it's going to automatically change to new title but we want this to happen whenever the user types in our input so that's very simple we just add an on change event again bind this because you've always got to make sure it's bound to the right context so whenever the user input receives a change event it's going to call our or handle change and that handle change Reesie receives a JavaScript event just like a normal event in jQuery or vanilla JavaScript woods so you can make this on change you can make this on click you can make this on blur basically every type of event you'd expect so on change it's going to fire this function and all we're going to do is go this stop props change title I call it change title or update title change title so that's going to change title let's actually get that title out of the element constant idle equals a target top' value a target is the element that's receiving the on change so that's our input right there and we're just getting that value out so we've got our title let's pass it on to change title layout is going to fire change title which sets our state as soon as that state changes the entire react tree does a rerender and if there's any changes that get printed on out let's test it and see if it works awesome our title changed you notice green is flashing here because this guy's changing and green is flashing there excellent that's working great only change I want to make on this is I want this to say welcome by default I don't I want this to be twoway bound to the state of the title so that's very easy change we simply go in here and we make the value this stop props title so now by default my value is going to be whatever the title is there we go welcome boom add an exclamation what just happened is is I actually added that exclamation handle change fired exactly the same thing state got updated the whole tree rearend 'red and now my header actually rendered the input actually got its value dynamically updated to be whatever the new value was so that is also very cool so if you were to change this to value but you never added an on change you get a very interesting reaction here from react so I'm setting my value but I'm not going to listen any change events it's actually nothing's going to happen no matter how many keys I hit every time there's a rerender it rear Enders the value to be this props title which has not changed so that's another thing that can be frustrating if you're not sure what's going on with react whenever you're buying to give value you also want to set up a change listener for that so it actually changes when the value changes so I hope by now you've been able to get a sense of how that reacts ecosystem works you basically we've created an app that has data living only in one place which is a great thing because this has enabled us to make really dumb components this header doesn't really care where the data comes from or what the data is it just knows I'm going to pass title in here and whenever this input changes I'm going to call the prop that was handed to me change title I don't care what it does I just know that this is my job our title component is even dumber it just renders whatever you give it this props title it's not aware of the data it doesn't care about the data you can move this to a completely different application if you wanted to the data could come from a completely different place it doesn't care so you get much more reusability out of your components and you get much more stability our data only lives on layout right now and it's just whenever the data changes we render the entire application and we update the Dom if there's any changes it makes your application development much more simple because you don't have to care about near as many moving parts that's part of the beauty of react I'm going to go ahead and leave basic react here and in the next videos we're going to move more into some patterns of how we actually deal with applications and how we deal with routing and a lot of other great things hope you've enjoyed this intro course to react have a good day
