With timestamps:

00:00 - all right I am super excited about this
00:02 - jQuery lesson because we are going to be
00:04 - doing what I think is the most fun part
00:06 - of JavaScript programming and that is
00:08 - doing Ajax uh we're going to be taking
00:11 - this flat page here which is a coffee
00:13 - orders application and right now we have
00:16 - some static content here that we're just
00:18 - kind of spitting out uh and we are going
00:20 - to be taking this and making it Dynamic
00:21 - we're going to be when you load the page
00:23 - we're going to load up the orders spit
00:25 - them out on the page and we're going to
00:26 - give you the ability to add a new order
00:28 - to the database and it shows up here
00:30 - right away without navigating yippe
00:32 - let's get into it and so the two
00:34 - technologies we're using is Ajax we're
00:36 - going to be using Ajax to access our API
00:39 - that our backend team gave us ah what do
00:41 - these two words mean uh well Ajax means
00:44 - asynchronous JavaScript and XML uh which
00:49 - technically means you're using
00:50 - JavaScript to get XML behind the scenes
00:52 - it's funny we don't use XML anymore we
00:53 - use Json but a is a terrible name and
00:57 - Ajax sounds cool so we still call it
00:59 - Ajax so this basically just means H
01:02 - we're using jQuery ajax and it's going
01:04 - to be talking to an API that our backend
01:06 - team built for us API is our application
01:08 - programming interface and so when the
01:11 - backend team builds the database and the
01:13 - structure to handle all the orders they
01:16 - give us some methods for accessing the
01:18 - orders uh and for posting new orders and
01:21 - so that's basically what the API is
01:23 - that's what the backin team builds is
01:25 - the API for us so let's kind of get into
01:28 - this so so here's our static content we
01:31 - want to our first step and what we're
01:33 - going to be doing in this video is
01:35 - covering how to do a get request to grab
01:38 - the content and replace this static
01:40 - content with quote unquote Dynamic
01:42 - content uh so let's go ahead and do that
01:46 - let's strike out this static content
01:48 - here our UL is called orders and so now
01:52 - when we refresh we have no orders right
01:54 - because we have not gotten them yet
01:56 - let's go ahead into our
01:58 - main.js
02:00 - do a document ready function probably
02:02 - don't need it because our javascript's
02:04 - at the bottom of the page but oh well
02:06 - we'll do it anyway and we're going to
02:08 - doing jQuery ajax and we're giving it an
02:12 - object of options here and so the first
02:16 - thing we need to do is we need to know
02:18 - what URL are we going to get and how are
02:20 - we going to get that information so
02:22 - let's look at our note from the backend
02:24 - team our backend team said here's the
02:26 - API we built for you if you send a get
02:28 - request to/ API orders you're going to
02:31 - get this sample response of all the
02:33 - orders awesome so let's go ahead and
02:35 - check that out we can go/ API orders
02:38 - which I've already done and you see
02:40 - awesome it actually gives me all the
02:41 - Json and I'm going to show you just a
02:44 - little bit more about what a git request
02:46 - is uh basically whenever you type
02:48 - anything into the URL it does a get
02:50 - request for it it gets that URL you can
02:53 - see if I look at my network tab I called
02:55 - SL API orders and it did a get method
02:59 - for that and here's my response it gave
03:03 - me that Json object of my orders it also
03:06 - I have these two get requests going on
03:08 - because I have a plugin that makes Json
03:10 - look pretty but technically the only git
03:12 - request that happened is this guy right
03:15 - here um if I actually refresh this page
03:18 - let me go to the network Tab and refresh
03:19 - this page you'll see that it does like
03:21 - five get requests it starts off by
03:24 - getting my Local Host here and my server
03:26 - is programmed to respond to Local Host
03:28 - Within HTML file uh so this is where the
03:32 - HTML file comes in uh my browser starts
03:34 - going through that HTML file finds out
03:36 - that I need to load a style sheet so it
03:38 - does a get request for my CSS file and
03:41 - there you go it responds with a CSS file
03:44 - it does a get request for my jQuery file
03:46 - that's jQuery library and a get request
03:48 - for my main.js which is currently just
03:50 - that so that's what's going on let's go
03:54 - ahead now and do a get request for API
03:57 - orders so we are also grabbing this
04:00 - um my type is going to be get which is
04:03 - actually the default I don't have to add
04:05 - that but I'm going to add that in the
04:07 - URL is/ API orders so now let me go
04:10 - ahead and refresh my page and you'll see
04:13 - now I hit API orders it was a get
04:16 - request and my response is the data that
04:19 - I need excellent so now all we have to
04:21 - do is take that data and spit it out
04:23 - onto our page so how we do that is with
04:25 - a success
04:28 - function success and give it a function
04:31 - and then the this will pass us our data
04:33 - right there so if I go console
04:35 - log
04:40 - data let me hit saveit
04:43 - refresh you see it says success and I
04:46 - have an array with two items my array
04:49 - has the will drink and the Laura drink
04:53 - awesome that is our information so now
04:55 - we just need to go through each item and
04:58 - spit out an for it so we're going to use
05:01 - the jQuery each function which is going
05:03 - to go each the first thing is the the
05:06 - array each is what each does with jcer
05:09 - is it goes through each item in an array
05:11 - and allows you to run a function based
05:13 - off of that item so data is an array and
05:16 - so we're going to pass data as the first
05:18 - one and then we're going to give it our
05:19 - function that we want to run is our
05:22 - second argument so for each item in data
05:25 - we're going to run a function and the
05:27 - the two arguments that it passes is I
05:29 - which is the index 0 1 2 3 4 and then
05:33 - the actual item you can call this
05:35 - whatever you want you can call it item
05:37 - you can call it order uh basically
05:40 - that's just what each item is so for
05:43 - each I'll just call this orders
05:45 - here make it a little clearer with the
05:49 - naming so our success orders go through
05:53 - each orders and give us an order and so
05:56 - what I'm going to do
05:57 - then is let's look at our UL this UL is
06:01 - where we want to spit it out to which
06:02 - has an ID of
06:04 - orders let's cach that up
06:09 - here cach the Dom so we only have to
06:12 - look at it
06:14 - once orders. append we're going to put a
06:17 - new Li in
06:24 - there let's just make sure this
06:27 - works there we go yep so now it put in
06:30 - two new orders and all we have to do is
06:33 - now populate the information into those
06:35 - Lis and so we can do this just by uh
06:38 - fixing this string
06:40 - here and then
06:44 - drink so under here I'm just going to
06:46 - cut that
06:49 - out order. name there we go and then
06:54 - drink is going to go order.
06:58 - drink
06:59 - so there we go I've added the name in
07:01 - I've added the drink in let's refresh
07:03 - haha we have hit our backend server and
07:06 - we have spit out An Li for each of our
07:10 - items that's awesome um and this is
07:13 - where we're going to end this video uh
07:14 - in the next video we're going to add in
07:17 - how to post things to the back end and
07:19 - we're going to get into this is messy
07:21 - right here so we're going to show you
07:23 - how to use templating engines to make
07:25 - that a lot cleaner so let's get into the
07:27 - next
07:28 - lesson

Cleaned transcript:

all right I am super excited about this jQuery lesson because we are going to be doing what I think is the most fun part of JavaScript programming and that is doing Ajax uh we're going to be taking this flat page here which is a coffee orders application and right now we have some static content here that we're just kind of spitting out uh and we are going to be taking this and making it Dynamic we're going to be when you load the page we're going to load up the orders spit them out on the page and we're going to give you the ability to add a new order to the database and it shows up here right away without navigating yippe let's get into it and so the two technologies we're using is Ajax we're going to be using Ajax to access our API that our backend team gave us ah what do these two words mean uh well Ajax means asynchronous JavaScript and XML uh which technically means you're using JavaScript to get XML behind the scenes it's funny we don't use XML anymore we use Json but a is a terrible name and Ajax sounds cool so we still call it Ajax so this basically just means H we're using jQuery ajax and it's going to be talking to an API that our backend team built for us API is our application programming interface and so when the backend team builds the database and the structure to handle all the orders they give us some methods for accessing the orders uh and for posting new orders and so that's basically what the API is that's what the backin team builds is the API for us so let's kind of get into this so so here's our static content we want to our first step and what we're going to be doing in this video is covering how to do a get request to grab the content and replace this static content with quote unquote Dynamic content uh so let's go ahead and do that let's strike out this static content here our UL is called orders and so now when we refresh we have no orders right because we have not gotten them yet let's go ahead into our main.js do a document ready function probably don't need it because our javascript's at the bottom of the page but oh well we'll do it anyway and we're going to doing jQuery ajax and we're giving it an object of options here and so the first thing we need to do is we need to know what URL are we going to get and how are we going to get that information so let's look at our note from the backend team our backend team said here's the API we built for you if you send a get request to/ API orders you're going to get this sample response of all the orders awesome so let's go ahead and check that out we can go/ API orders which I've already done and you see awesome it actually gives me all the Json and I'm going to show you just a little bit more about what a git request is uh basically whenever you type anything into the URL it does a get request for it it gets that URL you can see if I look at my network tab I called SL API orders and it did a get method for that and here's my response it gave me that Json object of my orders it also I have these two get requests going on because I have a plugin that makes Json look pretty but technically the only git request that happened is this guy right here um if I actually refresh this page let me go to the network Tab and refresh this page you'll see that it does like five get requests it starts off by getting my Local Host here and my server is programmed to respond to Local Host Within HTML file uh so this is where the HTML file comes in uh my browser starts going through that HTML file finds out that I need to load a style sheet so it does a get request for my CSS file and there you go it responds with a CSS file it does a get request for my jQuery file that's jQuery library and a get request for my main.js which is currently just that so that's what's going on let's go ahead now and do a get request for API orders so we are also grabbing this um my type is going to be get which is actually the default I don't have to add that but I'm going to add that in the URL is/ API orders so now let me go ahead and refresh my page and you'll see now I hit API orders it was a get request and my response is the data that I need excellent so now all we have to do is take that data and spit it out onto our page so how we do that is with a success function success and give it a function and then the this will pass us our data right there so if I go console log data let me hit saveit refresh you see it says success and I have an array with two items my array has the will drink and the Laura drink awesome that is our information so now we just need to go through each item and spit out an for it so we're going to use the jQuery each function which is going to go each the first thing is the the array each is what each does with jcer is it goes through each item in an array and allows you to run a function based off of that item so data is an array and so we're going to pass data as the first one and then we're going to give it our function that we want to run is our second argument so for each item in data we're going to run a function and the the two arguments that it passes is I which is the index 0 1 2 3 4 and then the actual item you can call this whatever you want you can call it item you can call it order uh basically that's just what each item is so for each I'll just call this orders here make it a little clearer with the naming so our success orders go through each orders and give us an order and so what I'm going to do then is let's look at our UL this UL is where we want to spit it out to which has an ID of orders let's cach that up here cach the Dom so we only have to look at it once orders. append we're going to put a new Li in there let's just make sure this works there we go yep so now it put in two new orders and all we have to do is now populate the information into those Lis and so we can do this just by uh fixing this string here and then drink so under here I'm just going to cut that out order. name there we go and then drink is going to go order. drink so there we go I've added the name in I've added the drink in let's refresh haha we have hit our backend server and we have spit out An Li for each of our items that's awesome um and this is where we're going to end this video uh in the next video we're going to add in how to post things to the back end and we're going to get into this is messy right here so we're going to show you how to use templating engines to make that a lot cleaner so let's get into the next lesson
