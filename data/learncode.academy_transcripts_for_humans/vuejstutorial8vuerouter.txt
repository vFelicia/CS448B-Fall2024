With timestamps:

00:00 - in this video we're gonna look in a view
00:01 - router which is going to allow us to
00:03 - navigate from different states in the
00:05 - application and still stay on the same
00:07 - HTML page if you're new to single page
00:10 - applications this will probably be the
00:12 - strangest concept to you so I'll give a
00:15 - couple explanations along the way for
00:17 - people where this is maybe the first
00:18 - JavaScript application you're building
00:21 - you can see I've what I've done is I've
00:23 - generated another view application the
00:26 - only difference between the last video
00:27 - and this one is I said yes install view
00:30 - router so if you look at the app view
00:32 - components there's really only one
00:34 - difference were adding the router view
00:36 - here and we're not doing anything else
00:38 - main J s imports view router and then it
00:42 - adds this little thing right here router
00:44 - and that's basically how you configure
00:47 - view router to be on your application
00:48 - import the router and then add the
00:51 - router that's pretty much it you port
00:53 - the router add the router and the router
00:55 - that it's actually importing is this
00:57 - right here this file so we'll get back
01:00 - to that file in a little bit so even
01:02 - ported the file added it to our top
01:04 - level component and now let's actually
01:06 - look at that template we get to choose
01:09 - where the router components print out
01:12 - and you'll also notice that our app now
01:14 - has this little hash slash at the top of
01:17 - it this is gonna be one of my tiny
01:19 - little side trails for newer people so
01:21 - if you ever add hash and then some word
01:25 - here HTML will look for an ID on the
01:29 - page called some word and it will scroll
01:31 - to it so you can actually make a URL any
01:34 - any link on the page could link to hash
01:37 - tag some word and that would actually
01:39 - scroll to the some word ID when you
01:42 - click on it but then developers learned
01:44 - along the way hey since it doesn't
01:46 - navigate to a different page we can kind
01:49 - of hack HTML and add all this
01:51 - information here and then we can listen
01:54 - for when that changes and tell a
01:55 - JavaScript application to go to entirely
01:57 - different pages and States and stuff so
02:00 - that's basically what the concept of
02:01 - routing is is we're gonna add
02:03 - information up to that hash tag route
02:06 - and there's an html5 way to do it too
02:08 - but we won't cover that in this video
02:10 - but as we add stuff to that route
02:12 - JavaScript can pick up
02:13 - that and we can make the whole page
02:15 - change without navigating away so there
02:18 - you go that's routing for beginners so
02:20 - here's what that router view covers is
02:22 - we can define a set of routes and when
02:25 - you go to those routes it will actually
02:27 - load a different set of components so
02:29 - you can see here when you're on the
02:30 - slash route just the homepage route
02:32 - we're giving it a name or saying hey
02:34 - that's the hello world component so
02:36 - that's the hello world component right
02:37 - there so if you go to just slash it
02:40 - grabs the hello world component and it
02:43 - spits it out in place of a router view
02:45 - so that's kind of how routing works
02:46 - let's go ahead define maybe another
02:48 - route here let's say let's let's show
02:51 - you one thing here so if I go to a fake
02:53 - fake path then all you're getting is the
02:57 - top-level application at this point
02:58 - you're getting apt view which is the div
03:01 - and the image and this is returning
03:03 - nothing because there is no router view
03:05 - for this this is basically returning no
03:07 - component at all and then anytime you go
03:10 - to something that the router view
03:12 - recognizes it's gonna return that
03:14 - component in which case this is the
03:16 - hello world so you use the app level
03:18 - view for a shell for your application
03:20 - whatever is gonna apply to your entire
03:21 - application goes in here every single
03:24 - view state and from there you break down
03:26 - different things into views that router
03:28 - view can then return so let's go and
03:30 - maybe uh you know let's say we were
03:33 - making that friends list let's do a
03:37 - contact
03:37 - we'll go friends so that's our friends
03:45 - path and then we could also makes a
03:47 - contact path and then maybe we can make
03:50 - an account path where you can manage
03:52 - your account or something like that
03:55 - contacts accounts just be the contact
03:58 - components and this will be the account
04:01 - components and you can get more complex
04:03 - than this there we are let's go ahead
04:06 - now just make some new components here
04:08 - contact view let's go ahead and make
04:10 - this and we'll just leave that as that
04:15 - let's go ahead save this also as the
04:18 - accounts and let's say this is friends
04:25 - so change a couple h1cr so now if we go
04:31 - back to that router file we can import
04:33 - those files we just made we can import
04:37 - accounts I'm gonna for contact and we
04:42 - can import friends everything should be
04:47 - working now so now if we go to accounts
04:50 - we get the account component there's our
04:52 - account h1 and we can go to friends
04:55 - whoops looks like friends is the wrong
04:58 - component
04:59 - yes we're importing friends from hello
05:01 - world let's change that there you go now
05:04 - hash friends hash slash friends goes to
05:07 - the friends components and contacts so
05:10 - there we go that's that's all of our
05:12 - pages now let's go ahead and create some
05:13 - links here so we can actually link
05:15 - around to these different pages if I go
05:17 - over to my app view now I can go ahead
05:19 - and create some links by using the
05:21 - router link tag router link and this is
05:26 - basically an a tag so I can go to the
05:28 - friends and all I have to do is add a
05:31 - two and then I can basically give it the
05:34 - path I want to go to I can go to friends
05:38 - and let's also do accounts and contact
05:45 - and I'm assigning these to the top-level
05:48 - application so that way every view I go
05:50 - to will have this main level navigation
05:53 - so now I can go to friends account or
05:56 - contact excellent that works well I can
05:59 - also add extra details in here so I
06:01 - could go friends slash 1/2/3 let's go
06:05 - and save that so if I go to friends now
06:06 - you can see it goes friends slash 1/2/3
06:10 - but there is no route that matches that
06:12 - what I can do is I can come over to my
06:15 - router index and I can go friends / ID
06:20 - age I don't know wait let's say the wait
06:25 - is particularly important so now this
06:27 - would be the ID the age and the weight
06:30 - that makes absolutely no sense that you
06:32 - would load a friend by ID and pass in an
06:34 - agent awaits but what
06:36 - ever at any at any rate we are passing
06:38 - this in and then we can then access
06:40 - those in the friends view we can come in
06:42 - here and we can do route params dot ID
06:48 - and you see there's ID one gets spit out
06:50 - and we can also access route params age
06:54 - and weight that is a very light
06:59 - two-year-old and there's another way you
07:02 - can do it if you want to validate that
07:03 - by adding props in here then I can
07:06 - actually require those this way instead
07:08 - I can add ID age and weight and you can
07:15 - also add validation to those so you can
07:17 - require those to be certain types which
07:19 - is pretty cool
07:20 - and then I can come over here to my
07:22 - routes and all I have to do is say props
07:24 - true and now those get passed in as
07:28 - props so those get passed in as props
07:30 - and now I can just call these age weight
07:34 - and ID you see this will render out
07:36 - exactly the same let's refresh yep so
07:39 - now if I go to a weight of five age of
07:44 - 25 maybe a weight of 150 something
07:46 - slightly more realistic all that
07:48 - information comes in from the route and
07:50 - gets passed automatically to the
07:52 - component so there's kind of the two
07:54 - ways that you can pull in those props
07:55 - and using view router you can pretty
07:58 - quickly again notice the common theme
08:01 - with view is fast fast fast if you need
08:03 - something fast and easy and the level of
08:06 - complexity is not super high choose view
08:08 - it makes it really easy you can just
08:10 - crank stuff out quickly and easily with
08:12 - low level of coding complexity so that's
08:15 - how you use view router in the basics
08:17 - it's a lot of fun to get an app going
08:19 - and and moving along and that's about it

Cleaned transcript:

in this video we're gonna look in a view router which is going to allow us to navigate from different states in the application and still stay on the same HTML page if you're new to single page applications this will probably be the strangest concept to you so I'll give a couple explanations along the way for people where this is maybe the first JavaScript application you're building you can see I've what I've done is I've generated another view application the only difference between the last video and this one is I said yes install view router so if you look at the app view components there's really only one difference were adding the router view here and we're not doing anything else main J s imports view router and then it adds this little thing right here router and that's basically how you configure view router to be on your application import the router and then add the router that's pretty much it you port the router add the router and the router that it's actually importing is this right here this file so we'll get back to that file in a little bit so even ported the file added it to our top level component and now let's actually look at that template we get to choose where the router components print out and you'll also notice that our app now has this little hash slash at the top of it this is gonna be one of my tiny little side trails for newer people so if you ever add hash and then some word here HTML will look for an ID on the page called some word and it will scroll to it so you can actually make a URL any any link on the page could link to hash tag some word and that would actually scroll to the some word ID when you click on it but then developers learned along the way hey since it doesn't navigate to a different page we can kind of hack HTML and add all this information here and then we can listen for when that changes and tell a JavaScript application to go to entirely different pages and States and stuff so that's basically what the concept of routing is is we're gonna add information up to that hash tag route and there's an html5 way to do it too but we won't cover that in this video but as we add stuff to that route JavaScript can pick up that and we can make the whole page change without navigating away so there you go that's routing for beginners so here's what that router view covers is we can define a set of routes and when you go to those routes it will actually load a different set of components so you can see here when you're on the slash route just the homepage route we're giving it a name or saying hey that's the hello world component so that's the hello world component right there so if you go to just slash it grabs the hello world component and it spits it out in place of a router view so that's kind of how routing works let's go ahead define maybe another route here let's say let's let's show you one thing here so if I go to a fake fake path then all you're getting is the toplevel application at this point you're getting apt view which is the div and the image and this is returning nothing because there is no router view for this this is basically returning no component at all and then anytime you go to something that the router view recognizes it's gonna return that component in which case this is the hello world so you use the app level view for a shell for your application whatever is gonna apply to your entire application goes in here every single view state and from there you break down different things into views that router view can then return so let's go and maybe uh you know let's say we were making that friends list let's do a contact we'll go friends so that's our friends path and then we could also makes a contact path and then maybe we can make an account path where you can manage your account or something like that contacts accounts just be the contact components and this will be the account components and you can get more complex than this there we are let's go ahead now just make some new components here contact view let's go ahead and make this and we'll just leave that as that let's go ahead save this also as the accounts and let's say this is friends so change a couple h1cr so now if we go back to that router file we can import those files we just made we can import accounts I'm gonna for contact and we can import friends everything should be working now so now if we go to accounts we get the account component there's our account h1 and we can go to friends whoops looks like friends is the wrong component yes we're importing friends from hello world let's change that there you go now hash friends hash slash friends goes to the friends components and contacts so there we go that's that's all of our pages now let's go ahead and create some links here so we can actually link around to these different pages if I go over to my app view now I can go ahead and create some links by using the router link tag router link and this is basically an a tag so I can go to the friends and all I have to do is add a two and then I can basically give it the path I want to go to I can go to friends and let's also do accounts and contact and I'm assigning these to the toplevel application so that way every view I go to will have this main level navigation so now I can go to friends account or contact excellent that works well I can also add extra details in here so I could go friends slash 1/2/3 let's go and save that so if I go to friends now you can see it goes friends slash 1/2/3 but there is no route that matches that what I can do is I can come over to my router index and I can go friends / ID age I don't know wait let's say the wait is particularly important so now this would be the ID the age and the weight that makes absolutely no sense that you would load a friend by ID and pass in an agent awaits but what ever at any at any rate we are passing this in and then we can then access those in the friends view we can come in here and we can do route params dot ID and you see there's ID one gets spit out and we can also access route params age and weight that is a very light twoyearold and there's another way you can do it if you want to validate that by adding props in here then I can actually require those this way instead I can add ID age and weight and you can also add validation to those so you can require those to be certain types which is pretty cool and then I can come over here to my routes and all I have to do is say props true and now those get passed in as props so those get passed in as props and now I can just call these age weight and ID you see this will render out exactly the same let's refresh yep so now if I go to a weight of five age of 25 maybe a weight of 150 something slightly more realistic all that information comes in from the route and gets passed automatically to the component so there's kind of the two ways that you can pull in those props and using view router you can pretty quickly again notice the common theme with view is fast fast fast if you need something fast and easy and the level of complexity is not super high choose view it makes it really easy you can just crank stuff out quickly and easily with low level of coding complexity so that's how you use view router in the basics it's a lot of fun to get an app going and and moving along and that's about it
