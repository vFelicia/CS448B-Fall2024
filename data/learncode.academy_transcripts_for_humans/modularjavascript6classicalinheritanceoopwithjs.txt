With timestamps:

00:00 - okay so the next patterns that we're
00:02 - going to cover are patterns that allow
00:04 - instantiation and inheritance now those
00:07 - are some big words if you're not used to
00:08 - them instantiation just means we want to
00:10 - be able to make multiple copies of this
00:13 - object we want to create a module once
00:15 - and then make many copies of it you see
00:16 - things like this
00:18 - say pinterest every pin as you scroll
00:20 - down is probably using the same logic
00:24 - you don't have a billion revealing
00:26 - modules all with different names for
00:28 - each pin
00:29 - you've probably created one module
00:32 - that's a pin module and then you're
00:34 - creating multiple pins from that same
00:36 - kind of thing if you're scrolling
00:37 - through a list of friends on facebook
00:39 - you know you have a follow button for
00:41 - each friend you have an ignore or a you
00:43 - know block
00:44 - or an unfriend button and so you write
00:46 - all that functionality in one module and
00:48 - then you can create a bunch of different
00:50 - copies of that that's called
00:51 - instantiation because you're making a
00:53 - bunch of instances of one thing so
00:56 - instantiate instances
00:58 - and then also with this is inheritance
01:01 - and we'll cover that a little bit later
01:02 - so there's several patterns for
01:04 - instantiation and inheritance we'll
01:06 - cover those there's pretty much the two
01:08 - common ones are classical
01:10 - and prototypal
01:14 - there absolutely is the concept of
01:16 - classes in javascript it just looks a
01:18 - little different than you know class
01:21 - extends some other class
01:25 - like you'd see in most languages
01:27 - so that is in javascript and that's
01:28 - basically what we're going to be
01:29 - covering so lots of times people will
01:31 - call something prototypal and they're
01:33 - really meaning classical because this is
01:35 - its own kind of
01:37 - slightly tweaked way of doing classical
01:39 - inheritance but for this video we'll be
01:40 - covering classical in the next video
01:42 - i'll show you the difference so
01:44 - basically to do inheritance
01:46 - uh you'll do something like this let's
01:48 - say we'll take the facebook example
01:50 - let's go vera person and you're going to
01:52 - want to make it an upper case you know
01:54 - it's going to be a capitalized and the
01:56 - reason is it's a constructor this is not
01:58 - a actual running module this is the
02:01 - master module that will create all of
02:03 - our modules so the the absolutely
02:07 - normally standard
02:09 - usage is that you're going to capitalize
02:11 - the name of a constructor so this is
02:14 - going to be a function
02:16 - so this is basically our class if you
02:18 - want to think of it as this this is our
02:20 - class it's not an instance of a class
02:21 - but this is our class and then later on
02:24 - you can go where john equals a new
02:27 - person
02:28 - okay so there we go now we've made a
02:30 - class it's a function and then down here
02:33 - is a copy or a creation i can also then
02:35 - go where bobby
02:37 - equals new person so now i've created a
02:40 - john person and a bobby person with
02:42 - basically no functionality so let's
02:44 - actually add some features to this
02:46 - module now let's say when we create a
02:48 - new person well we got to give him a
02:49 - name
02:51 - so there's john
02:52 - and there's bobby and then this actually
02:55 - receives a name
02:57 - and so within this function so when you
02:59 - when you do new
03:02 - basically this function is going to run
03:04 - and then it's going to return an object
03:07 - and so within function the work the
03:10 - keyword this
03:11 - refers to the object that you're
03:13 - creating right now so when i'm doing new
03:14 - person
03:15 - this is equal to john that i'm about to
03:18 - make
03:19 - and then new person bobby this is equal
03:21 - to bobby so basically if i say this.name
03:24 - equals name
03:25 - well now john.name is john bobby.name is
03:28 - bobby so later down here if i say alerts
03:31 - got all of those alerts jaw.name
03:34 - well that's going to alert john so there
03:37 - we go that's how that works um
03:39 - and let's go ahead and now add some
03:42 - functionality to this so we go
03:44 - person
03:45 - so when i did this real quick basically
03:47 - when you create a constructor
03:50 - then
03:51 - it has it creates what's called a
03:52 - prototype for you so person.prototype
03:56 - and this is what always scared me this
03:58 - is this is the pattern that i stayed
03:59 - away from when i was learning javascript
04:01 - because they were just words that kind
04:03 - of freaked me out things like prototype
04:05 - okay that sounds really weird i'm going
04:06 - to stay away from this pattern for a
04:08 - while i'm going to stick to revealing
04:10 - modules for a while because it feels
04:12 - comfortable
04:13 - if you get over the weird word you'll
04:15 - actually find that this is just as easy
04:17 - as any other pattern
04:18 - so basically
04:20 - this got created automatically an empty
04:22 - object person prototype
04:24 - so
04:26 - nothing is really on it but that
04:27 - basically got created when you created a
04:29 - person so we can actually add new things
04:32 - to that now
04:33 - after we've created person
04:36 - i can go person.prototype
04:38 - nope that didn't fill in right
04:41 - personal prototype say name
04:43 - and let's make that a function so this
04:45 - is basically like it's a method so now
04:48 - say name let's say we're just going to
04:49 - console.log
04:52 - this.name
04:54 - and that's all that is so now john has
04:56 - access to say name and bobby has access
04:59 - to say name because they're on the
05:01 - prototype if you think of it like this
05:03 - here's the module up here this is where
05:05 - i'm defining the actual module and down
05:08 - here i'm creating all copies of the
05:09 - module so now i can go john.say name
05:14 - and that's going to console.log john
05:16 - let's actually do something like this
05:19 - i'm
05:20 - my name is
05:24 - there you go so now it's going to say hi
05:25 - my name is john
05:29 - i'm actually going to say it like that
05:30 - so let's make sure we add a space
05:32 - there we go and then if i say bobby dot
05:34 - say name
05:37 - then it's going to say hi my name is
05:38 - bobby
05:39 - and if i were to change john's name
05:44 - name
05:49 - then i could do john say name and say hi
05:51 - my name is johnny bobby remains
05:53 - completely unchanged so that now we've
05:55 - basically created some shared
05:57 - functionality uh now we can do let's do
05:59 - shout name
06:02 - hi my name is and now let's add an
06:05 - exclamation at the end there you go so
06:07 - then bobby can shout his name if he
06:08 - wants
06:09 - that's going to say hi my name is bobby
06:11 - so that's basically how you create your
06:13 - module so now let's go ahead and look at
06:15 - inheritance with this pattern so what
06:17 - does inheritance look like we've done
06:19 - instantiation
06:21 - this is how you create instances
06:24 - let's say
06:25 - we want to create a certain type of
06:27 - person now and that certain type of
06:29 - person we can create multiple kinds of
06:31 - those so say there's people on facebook
06:34 - but then there's also friends on
06:36 - facebook so let's say let's make a bear
06:39 - friend
06:39 - and that friend will have functionality
06:41 - that the person doesn't
06:45 - so once again uppercase because friend
06:47 - is the module friend is not the actual
06:50 - uh instance this is the module this is
06:53 - the constructor so now we're going to
06:55 - make friend and now we need some sort of
06:57 - inheritance function
06:59 - and i like to use to snatch nodes one if
07:01 - you were to look at i'll give you this
07:02 - link in the description node.js gives
07:05 - you one called inherits and so i just
07:07 - usually snatch this function right here
07:10 - let's go and steal that
07:13 - and so i'm going to where should i put
07:15 - this i'll just put it all the way at the
07:16 - top
07:20 - function inherits and you give it the
07:21 - child and they give it the parent and
07:23 - you can look in this and see if you
07:25 - understand it later on that's basically
07:27 - just going to allow our child to inherit
07:30 - all of the functionality from the parent
07:32 - so this is our very generic person
07:34 - module they can all say their name and
07:36 - shout their name
07:37 - and a friend can maybe i don't know
07:39 - unfriend you or something like you can
07:41 - unfriend them
07:42 - so we've created our friend function
07:44 - that's our first step and now we want to
07:46 - inherit all the people methods so i'm
07:49 - just going to go inherits
07:51 - and then which one was first okay there
07:53 - we go construct so friend
07:56 - is going to inherit from person
07:59 - there we go so now any friend can say
08:01 - name and shout name as well so if i were
08:04 - to say there
08:05 - julia
08:13 - then julia
08:14 - has say name
08:17 - she has that functionality however her
08:19 - name is not being saved right now so
08:22 - here's the other thing that kept me away
08:24 - as soon as the concept of inheritance
08:25 - came in that's where i really started
08:27 - avoiding the prototypal pattern for a
08:29 - while or the classical pattern any kind
08:32 - of instantiable inheritable patterns i
08:34 - didn't like those at this point because
08:36 - it just seemed kind of freaky to me
08:38 - basically what we want to do is we want
08:40 - to run
08:42 - this
08:43 - on our friend object that we're creating
08:46 - so we want to be able to
08:48 - you know usually a constructor does a
08:50 - little bit more than just a sign name we
08:52 - could easily just say you know
08:55 - friend gets a name
08:56 - and then this name is name but then what
08:58 - if you change what if you start doing
09:00 - something like this like name two
09:02 - lowercase
09:03 - we're gonna make sure name is always
09:04 - lowercase well now we have to remember
09:06 - everybody
09:07 - now we have to change that here too
09:10 - that's a bad pattern we don't want to
09:11 - have to do that especially if there's a
09:13 - lot of logic happening up here in this
09:14 - constructor we don't want to have to
09:16 - duplicate that anywhere that's a bad
09:18 - pattern so we want to run this person
09:20 - function against the new friend object
09:23 - that we are creating so how you do that
09:25 - is very simple you simply say
09:27 - person
09:29 - dot because remember person is a
09:31 - function
09:33 - we go person
09:34 - call
09:35 - this which is what we're building now
09:37 - and we pass in the name so that's going
09:40 - to now run this exact person thing but
09:42 - instead of running it against the new
09:44 - person object we're going to run it
09:45 - against our new friend object so there
09:48 - we go that runs our super so now name is
09:50 - associated and if you look
09:53 - it inherits it actually is going to add
09:56 - this super pointer right here so this is
09:59 - friend
10:00 - this is person
10:02 - so
10:03 - dot super underscore is actually person
10:06 - so i can run
10:08 - friend dot super
10:11 - call this so that's a little cleaner
10:13 - just so we don't have to remember that
10:15 - our
10:16 - you know we don't have to remember that
10:17 - we inherited from person so uh there we
10:20 - go and then we are going to also
10:22 - let's say a friend also gets
10:26 - um
10:27 - let's change friend to musician let's
10:28 - forget the whole friend module
10:32 - musician will be a little easy musician
10:33 - gets an instrument
10:37 - and julia will play trombone
10:47 - so there you go we're now allowing our
10:49 - super
10:50 - class our inherited class constructor to
10:53 - set the name and then we're setting the
10:54 - instrument
10:56 - and then we inherit
10:58 - and now we can go ahead and add some own
11:00 - methods some own some new functionality
11:02 - for our musician class
11:04 - so the musician class we want to be able
11:06 - to get the instrument musician
11:10 - dot get instruments
11:13 - equals
11:15 - and we'll just console.log again
11:17 - this dot instrument
11:19 - keep it simple
11:22 - so there we go now julia can say her
11:24 - name
11:25 - that's going to do julia
11:28 - julia can get instrument
11:34 - and then what we can also do is we can
11:36 - actually override
11:39 - the say name functionality say a
11:40 - musician we want to be able to say the
11:42 - name but we want to shout differently
11:43 - because musicians after all shout just a
11:46 - little more unusually so
11:49 - shout name equals
11:51 - prototype sorry
11:57 - there we go this will actually be
12:02 - dude
12:03 - my name is
12:07 - this dot name
12:09 - and then way too many exclamations
12:12 - there you go so now
12:14 - when i say shout name
12:18 - it's going to basically do what happens
12:20 - with scoping is it's going to look first
12:23 - of all in my own object which is
12:25 - musician that's the module julie is
12:27 - right now so it's going to say hey do i
12:29 - have a shout name like when julia says
12:31 - say name it looks first in julia for say
12:34 - name do we have a say name no we don't
12:36 - okay let's look up to the parent module
12:38 - do we have a say name yes okay let's run
12:40 - this one instead
12:42 - so that's what's happening there so when
12:43 - you say shout name exact same thing
12:46 - let's look for shout name
12:47 - okay we have it basically i i will never
12:50 - access
12:52 - person.shout name as long as musician
12:55 - shout name exists
12:56 - so when i say this julia's gonna go dude
13:00 - my name yeah yeah yeah she's gonna shout
13:03 - it so now later on in my program you
13:05 - usually don't want to do this but i
13:07 - could go musician i could go delete
13:13 - shout name
13:14 - i'm going to delete that function i'm
13:16 - going to delete that method altogether
13:18 - and now julia can shout name
13:24 - and instead of being undefined this is
13:27 - now gone poof
13:29 - it's going to
13:30 - look up the chain and see oh shout name
13:33 - and it's just going to do a normal shout
13:35 - name so that's kind of how inheritance
13:37 - works with javascript that's what you're
13:39 - going to do
13:41 - really all you need code wise is to
13:44 - either quickly learn how to type one of
13:46 - these yourself or just go copy paste one
13:48 - it's not that big of a deal it's very
13:50 - easy
13:51 - to get yourself i'm just showing you
13:53 - where this node one is so you can go
13:55 - grab it in case you forget what's going
13:57 - on here so that's classical inheritance
14:00 - in this next video let's look at
14:01 - prototypal inheritance

Cleaned transcript:

okay so the next patterns that we're going to cover are patterns that allow instantiation and inheritance now those are some big words if you're not used to them instantiation just means we want to be able to make multiple copies of this object we want to create a module once and then make many copies of it you see things like this say pinterest every pin as you scroll down is probably using the same logic you don't have a billion revealing modules all with different names for each pin you've probably created one module that's a pin module and then you're creating multiple pins from that same kind of thing if you're scrolling through a list of friends on facebook you know you have a follow button for each friend you have an ignore or a you know block or an unfriend button and so you write all that functionality in one module and then you can create a bunch of different copies of that that's called instantiation because you're making a bunch of instances of one thing so instantiate instances and then also with this is inheritance and we'll cover that a little bit later so there's several patterns for instantiation and inheritance we'll cover those there's pretty much the two common ones are classical and prototypal there absolutely is the concept of classes in javascript it just looks a little different than you know class extends some other class like you'd see in most languages so that is in javascript and that's basically what we're going to be covering so lots of times people will call something prototypal and they're really meaning classical because this is its own kind of slightly tweaked way of doing classical inheritance but for this video we'll be covering classical in the next video i'll show you the difference so basically to do inheritance uh you'll do something like this let's say we'll take the facebook example let's go vera person and you're going to want to make it an upper case you know it's going to be a capitalized and the reason is it's a constructor this is not a actual running module this is the master module that will create all of our modules so the the absolutely normally standard usage is that you're going to capitalize the name of a constructor so this is going to be a function so this is basically our class if you want to think of it as this this is our class it's not an instance of a class but this is our class and then later on you can go where john equals a new person okay so there we go now we've made a class it's a function and then down here is a copy or a creation i can also then go where bobby equals new person so now i've created a john person and a bobby person with basically no functionality so let's actually add some features to this module now let's say when we create a new person well we got to give him a name so there's john and there's bobby and then this actually receives a name and so within this function so when you when you do new basically this function is going to run and then it's going to return an object and so within function the work the keyword this refers to the object that you're creating right now so when i'm doing new person this is equal to john that i'm about to make and then new person bobby this is equal to bobby so basically if i say this.name equals name well now john.name is john bobby.name is bobby so later down here if i say alerts got all of those alerts jaw.name well that's going to alert john so there we go that's how that works um and let's go ahead and now add some functionality to this so we go person so when i did this real quick basically when you create a constructor then it has it creates what's called a prototype for you so person.prototype and this is what always scared me this is this is the pattern that i stayed away from when i was learning javascript because they were just words that kind of freaked me out things like prototype okay that sounds really weird i'm going to stay away from this pattern for a while i'm going to stick to revealing modules for a while because it feels comfortable if you get over the weird word you'll actually find that this is just as easy as any other pattern so basically this got created automatically an empty object person prototype so nothing is really on it but that basically got created when you created a person so we can actually add new things to that now after we've created person i can go person.prototype nope that didn't fill in right personal prototype say name and let's make that a function so this is basically like it's a method so now say name let's say we're just going to console.log this.name and that's all that is so now john has access to say name and bobby has access to say name because they're on the prototype if you think of it like this here's the module up here this is where i'm defining the actual module and down here i'm creating all copies of the module so now i can go john.say name and that's going to console.log john let's actually do something like this i'm my name is there you go so now it's going to say hi my name is john i'm actually going to say it like that so let's make sure we add a space there we go and then if i say bobby dot say name then it's going to say hi my name is bobby and if i were to change john's name name then i could do john say name and say hi my name is johnny bobby remains completely unchanged so that now we've basically created some shared functionality uh now we can do let's do shout name hi my name is and now let's add an exclamation at the end there you go so then bobby can shout his name if he wants that's going to say hi my name is bobby so that's basically how you create your module so now let's go ahead and look at inheritance with this pattern so what does inheritance look like we've done instantiation this is how you create instances let's say we want to create a certain type of person now and that certain type of person we can create multiple kinds of those so say there's people on facebook but then there's also friends on facebook so let's say let's make a bear friend and that friend will have functionality that the person doesn't so once again uppercase because friend is the module friend is not the actual uh instance this is the module this is the constructor so now we're going to make friend and now we need some sort of inheritance function and i like to use to snatch nodes one if you were to look at i'll give you this link in the description node.js gives you one called inherits and so i just usually snatch this function right here let's go and steal that and so i'm going to where should i put this i'll just put it all the way at the top function inherits and you give it the child and they give it the parent and you can look in this and see if you understand it later on that's basically just going to allow our child to inherit all of the functionality from the parent so this is our very generic person module they can all say their name and shout their name and a friend can maybe i don't know unfriend you or something like you can unfriend them so we've created our friend function that's our first step and now we want to inherit all the people methods so i'm just going to go inherits and then which one was first okay there we go construct so friend is going to inherit from person there we go so now any friend can say name and shout name as well so if i were to say there julia then julia has say name she has that functionality however her name is not being saved right now so here's the other thing that kept me away as soon as the concept of inheritance came in that's where i really started avoiding the prototypal pattern for a while or the classical pattern any kind of instantiable inheritable patterns i didn't like those at this point because it just seemed kind of freaky to me basically what we want to do is we want to run this on our friend object that we're creating so we want to be able to you know usually a constructor does a little bit more than just a sign name we could easily just say you know friend gets a name and then this name is name but then what if you change what if you start doing something like this like name two lowercase we're gonna make sure name is always lowercase well now we have to remember everybody now we have to change that here too that's a bad pattern we don't want to have to do that especially if there's a lot of logic happening up here in this constructor we don't want to have to duplicate that anywhere that's a bad pattern so we want to run this person function against the new friend object that we are creating so how you do that is very simple you simply say person dot because remember person is a function we go person call this which is what we're building now and we pass in the name so that's going to now run this exact person thing but instead of running it against the new person object we're going to run it against our new friend object so there we go that runs our super so now name is associated and if you look it inherits it actually is going to add this super pointer right here so this is friend this is person so dot super underscore is actually person so i can run friend dot super call this so that's a little cleaner just so we don't have to remember that our you know we don't have to remember that we inherited from person so uh there we go and then we are going to also let's say a friend also gets um let's change friend to musician let's forget the whole friend module musician will be a little easy musician gets an instrument and julia will play trombone so there you go we're now allowing our super class our inherited class constructor to set the name and then we're setting the instrument and then we inherit and now we can go ahead and add some own methods some own some new functionality for our musician class so the musician class we want to be able to get the instrument musician dot get instruments equals and we'll just console.log again this dot instrument keep it simple so there we go now julia can say her name that's going to do julia julia can get instrument and then what we can also do is we can actually override the say name functionality say a musician we want to be able to say the name but we want to shout differently because musicians after all shout just a little more unusually so shout name equals prototype sorry there we go this will actually be dude my name is this dot name and then way too many exclamations there you go so now when i say shout name it's going to basically do what happens with scoping is it's going to look first of all in my own object which is musician that's the module julie is right now so it's going to say hey do i have a shout name like when julia says say name it looks first in julia for say name do we have a say name no we don't okay let's look up to the parent module do we have a say name yes okay let's run this one instead so that's what's happening there so when you say shout name exact same thing let's look for shout name okay we have it basically i i will never access person.shout name as long as musician shout name exists so when i say this julia's gonna go dude my name yeah yeah yeah she's gonna shout it so now later on in my program you usually don't want to do this but i could go musician i could go delete shout name i'm going to delete that function i'm going to delete that method altogether and now julia can shout name and instead of being undefined this is now gone poof it's going to look up the chain and see oh shout name and it's just going to do a normal shout name so that's kind of how inheritance works with javascript that's what you're going to do really all you need code wise is to either quickly learn how to type one of these yourself or just go copy paste one it's not that big of a deal it's very easy to get yourself i'm just showing you where this node one is so you can go grab it in case you forget what's going on here so that's classical inheritance in this next video let's look at prototypal inheritance
