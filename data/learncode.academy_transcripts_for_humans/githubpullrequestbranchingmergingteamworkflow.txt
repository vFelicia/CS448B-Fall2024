With timestamps:

00:01 - all right we're going to be learning
00:02 - GitHub branching merging and pull
00:06 - requests today if you're new to GitHub
00:08 - which I'm assuming you are CU you're
00:09 - learning this lesson definitely check
00:11 - out video one in the description if you
00:13 - haven't checked it out yet it's really
00:14 - going to be of help uh let's get into
00:17 - basically this is level two and it's
00:20 - about it for what you need to know to
00:23 - use GitHub day and and day out uh one of
00:26 - the common things that you use all the
00:28 - time with GitHub is branching and with
00:30 - that is if you picture a tree you've got
00:32 - the trunk and once you create a branch a
00:35 - branch comes out you'd make code changes
00:37 - on that branch and then you can merge
00:39 - that Branch back in with a trunk it
00:41 - becomes a part of the trunk and
00:42 - everybody else's branches can inherit
00:44 - from it but it's easier to show you than
00:46 - to tell you so let's just get into it
00:49 - ficticious example here we have an HTML
00:51 - page with one module on it and you get a
00:54 - work request to add module number two
00:57 - there's other people on the team you're
00:58 - not the only one so what you're you're
01:00 - going to do is you're going to create a
01:01 - branch for module 2 you're going to
01:04 - build it on that and you're going to
01:05 - create a pull request for other people
01:07 - to code review it but you don't know
01:09 - what those things are yet so let's just
01:10 - show you first thing you're going to do
01:12 - is you're going to do a get poll make
01:14 - sure you get the most recent version of
01:16 - Master we're on the master Branch right
01:18 - now I can see that because I'm using
01:20 - what's called bashet I'm going to add
01:23 - that to uh the description as well
01:25 - because you'll really like using that uh
01:27 - but do this command real quick and do
01:29 - get Branch you'll see I have one branch
01:32 - which is Master that's where all the
01:34 - code is sitting right now so if I go get
01:37 - Branch feature one let's say I'm adding
01:40 - feature one and then I hit get Branch
01:46 - again now I have feature one this is a
01:50 - complete copy of all my code from the
01:53 - master Branch so whatever Branch you're
01:56 - on at the time you type get Branch it
01:58 - will create a copy of that and call it
02:00 - whatever your new one is so now I have a
02:02 - complete copy of Master called feature
02:03 - one and now I can switch to it by going
02:05 - get checkouts feature
02:07 - one so now you'll notice I'm on feature
02:10 - one again you won't see this unless
02:12 - you're using bashet but now I can make
02:15 - code changes on feature one and it's not
02:17 - going to affect anything going on on
02:19 - master um so what I'm going to do is my
02:22 - work request is to do two things it's to
02:24 - delete these two
02:26 - items and it's to add a new module
02:34 - and so I'm just going to go
02:35 - [Music]
02:37 - div my
02:39 - awesome new module
02:42 - about news
02:46 - sure there we go module 2 is added Bingo
02:49 - and so now I'm going to get add I'll do
02:52 - get status so yep that's all I changed
02:55 - get add a to add all my changes get
02:59 - commit am to say
03:02 - added news
03:05 - module and ideally if I knew in advance
03:08 - that it was called the news module this
03:10 - would not have been called feature one
03:11 - it would have been called news module or
03:14 - news module Edition Branch so uh that
03:17 - way it makes more sense if you see the
03:19 - branches you don't just see feature one
03:21 - well who knows what feature one is um
03:23 - the branch for news module so now if I
03:25 - go get
03:26 - Branch there we go um I'm ready to
03:29 - create a p request now which pull
03:30 - request pushes your code up to GitHub
03:33 - for other people to see your changes and
03:35 - peer review them other people on the
03:37 - team uh possibly a team lead if you're
03:39 - new uh and it's a very common practice
03:41 - for uh companies to require a on your
03:45 - team to review every pull request that
03:47 - you make so you guys are kind of keeping
03:49 - each other
03:50 - accountable one thing you want to do
03:52 - before you create your pull request is
03:54 - you want to go back to the master Branch
03:56 - or whatever Branch you're merging this
03:58 - into um because you can have a branch of
04:00 - a branch of a branch of a branch we're
04:03 - going to go get get checkout master and
04:06 - we're going to do a poll to make sure
04:08 - that Master has not changed in the let's
04:10 - say 3 hours that we've been working on
04:12 - this and yep there were some changes it
04:14 - updated so let's go back to our feature
04:17 - now check out feature
04:20 - one man my brain is just not typing
04:23 - right
04:23 - today happens sometimes I'm going to get
04:26 - merge Master what this is going to do is
04:28 - it's going to take all the changes
04:29 - updates to master and it's going to try
04:31 - to merge them back into feature one
04:34 - branch it says there was a conflict on
04:36 - there merge fail which means that
04:39 - somewhere along the line somebody else
04:40 - touched the same lines that we are
04:42 - touching so I'm going to click on my
04:44 - file and yep you see that there's some
04:46 - conflicts here head wi is
04:48 - me ah you know what happened it
04:50 - sometimes is a little tricky to figure
04:52 - out what's going on here it says that I
04:55 - added this within module
04:57 - two and they added this with within
04:59 - module 2 which
05:01 - means we both added these exact same two
05:05 - lines but these ones were different so
05:07 - they tried to add a module two and I
05:09 - tried to add a module two so let's do
05:12 - this now I actually have to just kind of
05:14 - rewrite my
05:16 - code so there's I'm going to call
05:19 - there's module
05:20 - two sometimes it's a little tricky to
05:22 - figure out what happened in an
05:26 - actual ah can't do that
05:32 - there you go module three sometimes a
05:34 - little tricky to figure out what
05:35 - actually happens when you see all those
05:36 - merge conflicts I was able to just
05:39 - determine that okay we both tried to add
05:40 - a module two so it's saying there's no
05:42 - problems here that your lines are
05:43 - identical these ones is what's not
05:45 - making sense so there we go got that
05:48 - done I'm going to go get status
05:50 - again okay now was both modified now I
05:54 - hit get
05:55 - commit and if you'll remember from my
05:57 - last video whenever it shows you these
05:59 - big long commit messages you go escape
06:02 - colon WQ and that's going to save and
06:06 - commit your commit I know that's weird
06:08 - Escape colon WQ uh but that's what it is
06:11 - and now I can do get push and depending
06:15 - on what your push settings are on my M
06:18 - it warns me that it doesn't know where
06:19 - to push it to so it gives me the command
06:22 - push and set Upstream to origin feature
06:24 - one so now feature one has been pushed
06:28 - up to GitHub and if I go to GitHub I can
06:31 - see that there's actually and
06:33 - refresh I can see there's actually two
06:36 - GitHub branches here master and feature
06:38 - one feature one's got the new modules
06:41 - and if I go to master master has the new
06:45 - module that the other guy added that's
06:46 - another way you can figure out what the
06:48 - heck is going on if you actually go to
06:49 - GitHub look at the master branch and see
06:51 - what they are expecting the code to look
06:53 - like uh module 2 div my content that
06:57 - will help you in uh whenever you're
06:59 - dealing with merge conflicts I do that a
07:01 - lot if a merge conflict just doesn't
07:02 - make sense I'm going to look at master
07:04 - and see what they committed to master
07:07 - before it started causing problems so
07:10 - I'm on feature one again you'll notice
07:12 - that GitHub gives you this nice thing
07:13 - your recently pushed branch is feature
07:15 - one so I'm going you can either click
07:17 - there or in this case I'll just go to
07:19 - feature one and click this little green
07:21 - button that says compare review or pull
07:24 - request and so now it just shows in
07:26 - green the things I've changed I can
07:28 - create a pull request
07:34 - and you can add any comments
07:36 - there hey at somebody can you please
07:39 - check this out you can do it just like
07:47 - Twitter hey can you check this out send
07:49 - pull request um and there you go now
07:52 - I've got a pull request I can see what
07:53 - two commits went in I did an ADD and I
07:56 - did a merge the merge counted as a
07:58 - commit and then then you can have some
08:00 - conversation back and forth and then
08:02 - somebody can merge this for you it's
08:04 - usually a bad idea to merge your own po
08:05 - request but I can hit
08:08 - merge and
08:10 - confirm and there you go now it is into
08:14 - master so now if I go to master click on
08:17 - index I've got my modules two and three
08:21 - there because my feature was in and I
08:24 - should have when I was on the pull
08:25 - request deleted the branch cuz I don't
08:28 - know some people will like to delete
08:30 - branches so I can go and delete that
08:32 - Branch so now if I go back to master
08:36 - here and do a
08:42 - poll there you go I've got all three
08:45 - modules and I'm on the master Branch so
08:47 - that's the whole workflow you may have
08:49 - to watch this two or three times to get
08:51 - a feel but this is what you do day in
08:52 - and day out you get a feature request
08:55 - make a branch for it code in your
08:57 - feature commit it and then put it back
09:01 - up uh merge Master back into it and then
09:04 - push that up and make a pull request
09:06 - that pull request gets code reviewed
09:08 - gets merges one more thing that might
09:11 - not be bad to point out is is that if
09:14 - you have a pull request out there you
09:15 - can add more merges to it let me make
09:17 - another uh Branch
09:20 - here I'll just call this one
09:24 - news there you go let me make one change
09:26 - I don't know delete that stuff there you
09:28 - go
09:37 - so I'm just uh basically just doing some
09:39 - stuff here once again I like for
09:42 - whatever reason I like this git setting
09:44 - where it always makes me choose what
09:45 - branch it's going to lots of people that
09:48 - drives them nuts okay what I just did is
09:50 - I made a new feature made some changes
09:52 - committed those changes pushed him up I
09:53 - did not bother uh merging Master back in
09:57 - so now if I go back to wilster dummy
09:59 - test I can go to the news
10:01 - Branch let's make a pull request go on
10:04 - his news sure let's say somebody else
10:07 - looks at it
10:09 - says um ah there's some extra white
10:12 - space in there that you also need to
10:18 - delete you get an email that somebody
10:21 - wants you to clean up the white space
10:23 - yeah I guess I can clean up that white
10:25 - space so I saw his email I'm going to
10:27 - clean this code out
10:29 - save
10:39 - that and I'm going to do another push
10:42 - and you'll see that I'm going to have a
10:43 - second commit there you go gone is news
10:45 - remove whitespace you can add commits to
10:48 - your poll requests after you've made
10:49 - them so that's kind of how the back and
10:51 - forth dialogue goes uh you'll delete
10:53 - some stuff you can also go to these
10:55 - commits uh the files changed you can
10:57 - actually it would have been better if
10:59 - the guy would have commented on the
11:00 - actual
11:06 - line and so that's kind of how the
11:08 - dialogue takes place back and forth and
11:11 - then the pull requests are closed the
11:13 - branches are gone and master keeps
11:15 - living on there's the video hope you
11:17 - liked it and have a great
11:19 - day

Cleaned transcript:

all right we're going to be learning GitHub branching merging and pull requests today if you're new to GitHub which I'm assuming you are CU you're learning this lesson definitely check out video one in the description if you haven't checked it out yet it's really going to be of help uh let's get into basically this is level two and it's about it for what you need to know to use GitHub day and and day out uh one of the common things that you use all the time with GitHub is branching and with that is if you picture a tree you've got the trunk and once you create a branch a branch comes out you'd make code changes on that branch and then you can merge that Branch back in with a trunk it becomes a part of the trunk and everybody else's branches can inherit from it but it's easier to show you than to tell you so let's just get into it ficticious example here we have an HTML page with one module on it and you get a work request to add module number two there's other people on the team you're not the only one so what you're you're going to do is you're going to create a branch for module 2 you're going to build it on that and you're going to create a pull request for other people to code review it but you don't know what those things are yet so let's just show you first thing you're going to do is you're going to do a get poll make sure you get the most recent version of Master we're on the master Branch right now I can see that because I'm using what's called bashet I'm going to add that to uh the description as well because you'll really like using that uh but do this command real quick and do get Branch you'll see I have one branch which is Master that's where all the code is sitting right now so if I go get Branch feature one let's say I'm adding feature one and then I hit get Branch again now I have feature one this is a complete copy of all my code from the master Branch so whatever Branch you're on at the time you type get Branch it will create a copy of that and call it whatever your new one is so now I have a complete copy of Master called feature one and now I can switch to it by going get checkouts feature one so now you'll notice I'm on feature one again you won't see this unless you're using bashet but now I can make code changes on feature one and it's not going to affect anything going on on master um so what I'm going to do is my work request is to do two things it's to delete these two items and it's to add a new module and so I'm just going to go div my awesome new module about news sure there we go module 2 is added Bingo and so now I'm going to get add I'll do get status so yep that's all I changed get add a to add all my changes get commit am to say added news module and ideally if I knew in advance that it was called the news module this would not have been called feature one it would have been called news module or news module Edition Branch so uh that way it makes more sense if you see the branches you don't just see feature one well who knows what feature one is um the branch for news module so now if I go get Branch there we go um I'm ready to create a p request now which pull request pushes your code up to GitHub for other people to see your changes and peer review them other people on the team uh possibly a team lead if you're new uh and it's a very common practice for uh companies to require a on your team to review every pull request that you make so you guys are kind of keeping each other accountable one thing you want to do before you create your pull request is you want to go back to the master Branch or whatever Branch you're merging this into um because you can have a branch of a branch of a branch of a branch we're going to go get get checkout master and we're going to do a poll to make sure that Master has not changed in the let's say 3 hours that we've been working on this and yep there were some changes it updated so let's go back to our feature now check out feature one man my brain is just not typing right today happens sometimes I'm going to get merge Master what this is going to do is it's going to take all the changes updates to master and it's going to try to merge them back into feature one branch it says there was a conflict on there merge fail which means that somewhere along the line somebody else touched the same lines that we are touching so I'm going to click on my file and yep you see that there's some conflicts here head wi is me ah you know what happened it sometimes is a little tricky to figure out what's going on here it says that I added this within module two and they added this with within module 2 which means we both added these exact same two lines but these ones were different so they tried to add a module two and I tried to add a module two so let's do this now I actually have to just kind of rewrite my code so there's I'm going to call there's module two sometimes it's a little tricky to figure out what happened in an actual ah can't do that there you go module three sometimes a little tricky to figure out what actually happens when you see all those merge conflicts I was able to just determine that okay we both tried to add a module two so it's saying there's no problems here that your lines are identical these ones is what's not making sense so there we go got that done I'm going to go get status again okay now was both modified now I hit get commit and if you'll remember from my last video whenever it shows you these big long commit messages you go escape colon WQ and that's going to save and commit your commit I know that's weird Escape colon WQ uh but that's what it is and now I can do get push and depending on what your push settings are on my M it warns me that it doesn't know where to push it to so it gives me the command push and set Upstream to origin feature one so now feature one has been pushed up to GitHub and if I go to GitHub I can see that there's actually and refresh I can see there's actually two GitHub branches here master and feature one feature one's got the new modules and if I go to master master has the new module that the other guy added that's another way you can figure out what the heck is going on if you actually go to GitHub look at the master branch and see what they are expecting the code to look like uh module 2 div my content that will help you in uh whenever you're dealing with merge conflicts I do that a lot if a merge conflict just doesn't make sense I'm going to look at master and see what they committed to master before it started causing problems so I'm on feature one again you'll notice that GitHub gives you this nice thing your recently pushed branch is feature one so I'm going you can either click there or in this case I'll just go to feature one and click this little green button that says compare review or pull request and so now it just shows in green the things I've changed I can create a pull request and you can add any comments there hey at somebody can you please check this out you can do it just like Twitter hey can you check this out send pull request um and there you go now I've got a pull request I can see what two commits went in I did an ADD and I did a merge the merge counted as a commit and then then you can have some conversation back and forth and then somebody can merge this for you it's usually a bad idea to merge your own po request but I can hit merge and confirm and there you go now it is into master so now if I go to master click on index I've got my modules two and three there because my feature was in and I should have when I was on the pull request deleted the branch cuz I don't know some people will like to delete branches so I can go and delete that Branch so now if I go back to master here and do a poll there you go I've got all three modules and I'm on the master Branch so that's the whole workflow you may have to watch this two or three times to get a feel but this is what you do day in and day out you get a feature request make a branch for it code in your feature commit it and then put it back up uh merge Master back into it and then push that up and make a pull request that pull request gets code reviewed gets merges one more thing that might not be bad to point out is is that if you have a pull request out there you can add more merges to it let me make another uh Branch here I'll just call this one news there you go let me make one change I don't know delete that stuff there you go so I'm just uh basically just doing some stuff here once again I like for whatever reason I like this git setting where it always makes me choose what branch it's going to lots of people that drives them nuts okay what I just did is I made a new feature made some changes committed those changes pushed him up I did not bother uh merging Master back in so now if I go back to wilster dummy test I can go to the news Branch let's make a pull request go on his news sure let's say somebody else looks at it says um ah there's some extra white space in there that you also need to delete you get an email that somebody wants you to clean up the white space yeah I guess I can clean up that white space so I saw his email I'm going to clean this code out save that and I'm going to do another push and you'll see that I'm going to have a second commit there you go gone is news remove whitespace you can add commits to your poll requests after you've made them so that's kind of how the back and forth dialogue goes uh you'll delete some stuff you can also go to these commits uh the files changed you can actually it would have been better if the guy would have commented on the actual line and so that's kind of how the dialogue takes place back and forth and then the pull requests are closed the branches are gone and master keeps living on there's the video hope you liked it and have a great day
