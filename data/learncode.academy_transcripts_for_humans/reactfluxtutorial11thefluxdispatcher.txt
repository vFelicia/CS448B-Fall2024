With timestamps:

00:00 - so we're at the place where our
00:02 - component is pulling the initial
00:04 - information from the to do store
00:06 - and then we're also listening to that to
00:08 - do store we're going to update whenever
00:09 - it changes so the next piece to put into
00:11 - play for flux is let's add a dispatcher
00:14 - now and let's register our store to that
00:16 - dispatcher so any actions that come
00:18 - through the pipeline our store will get
00:20 - notified to all of them and get a chance
00:22 - to respond so that's actually very very
00:24 - simple to do we just want to use flux's
00:26 - dispatcher so npm install s flux there
00:30 - you go that's going and then let's go
00:32 - ahead and create a dispatcher file
00:34 - we're going to call this dispatcher.js
00:39 - dispatcher.js and all we do is import
00:41 - flux's dispatcher
00:47 - and then we're just going to export
00:48 - defaults
00:50 - new dispatcher
00:51 - that's it so we've created a flux
00:53 - dispatcher and that's what you get when
00:55 - you import dispatcher js so our to do
00:57 - store can actually register itself as a
00:59 - listener to the dispatcher
01:02 - and that's just as simple so we're just
01:04 - going to go import dispatcher
01:10 - from dispatcher
01:12 - and then all we do down here
01:15 - is we do dispatcher register there's
01:17 - really only two dispatcher methods that
01:19 - you use use register
01:21 - to register a new listener which in this
01:23 - case is our to do store and then you're
01:25 - actually going to do dispatcher.dispatch
01:28 - which is what all our actions will use
01:30 - to dispatch actions so in this case
01:32 - we're doing a register
01:35 - and then we need a method here that's
01:36 - going to handle all of our actions if
01:39 - you remember again every action that's
01:40 - hap that happens across the app
01:43 - is all going to get handled by every
01:45 - listener
01:46 - so we want something here that's going
01:48 - to handle actions
01:49 - so on my to do store i'm just going to
01:51 - create a handle actions method
01:53 - and there will be the athena which
01:54 - method and we'll just call it there
01:57 - um
01:58 - to do store
02:01 - received
02:03 - and
02:04 - action
02:06 - and then we'll spit out what the action
02:07 - is okay
02:09 - and then so we're just going to register
02:10 - to do store handle actions
02:13 - and we're going to bind it
02:15 - to to do store
02:17 - so that way the value of this inside of
02:19 - here is to do store because we'll want
02:20 - to do stuff like this dot create to do
02:24 - you know if it's a create to do action
02:26 - we'll want to be able to call our own
02:27 - internal methods
02:28 - so there we go we've registered to do
02:30 - store bound it to the right place and
02:32 - that's it we're good to move on so let's
02:34 - go ahead and now expose dispatcher
02:37 - globally
02:40 - so we can play around with it
02:44 - reload my app here
02:46 - i didn't run npm run dev
02:49 - get that started up again
02:53 - okay we're going and now let's dispatch
02:55 - something let's go dispatcher
02:58 - dispatch
03:02 - type
03:04 - some events
03:07 - there you go to do store received an
03:09 - action of some event type some event two
03:12 - there we go so whatever event i dispatch
03:15 - it's automatically gonna be handled by
03:18 - this handle actions method so now we
03:21 - just need to only respond to the ones
03:22 - that we care about if it's not something
03:24 - that to do store cares about we just do
03:26 - nothing so the easiest way to do this is
03:28 - use an uncommon thing which is a switch
03:31 - statement so we're going to use a switch
03:33 - and we're going to switch based off of
03:34 - action.type
03:36 - if it's a type we care about we do
03:37 - something if not we just move on so in
03:39 - this case we're going to go case
03:42 - if type is create
03:44 - to do
03:47 - then we're going to do something inside
03:48 - of this block which this is
03:50 - this create to do
03:51 - and we'll say that text again is all
03:54 - that we need to pass so we'll say that
03:55 - action.txt will be what we pass through
03:58 - so there we go that should work on a
04:00 - create to do event so let's go ahead and
04:02 - fire create to do events
04:04 - type is
04:08 - and it's a standard to always use all
04:10 - uppercase because these are basically
04:12 - constants
04:13 - and then text is going to be new to do
04:17 - there we go new to do appeared up there
04:19 - in our app
04:20 - let's go new to do two new to do two
04:22 - appeared up there in our app excellent
04:25 - so now our dispatcher is in place the
04:27 - only thing we have to do is start giving
04:30 - it actions and our flux circle is
04:32 - complete so let's go ahead and add
04:34 - actions in the next video

Cleaned transcript:

so we're at the place where our component is pulling the initial information from the to do store and then we're also listening to that to do store we're going to update whenever it changes so the next piece to put into play for flux is let's add a dispatcher now and let's register our store to that dispatcher so any actions that come through the pipeline our store will get notified to all of them and get a chance to respond so that's actually very very simple to do we just want to use flux's dispatcher so npm install s flux there you go that's going and then let's go ahead and create a dispatcher file we're going to call this dispatcher.js dispatcher.js and all we do is import flux's dispatcher and then we're just going to export defaults new dispatcher that's it so we've created a flux dispatcher and that's what you get when you import dispatcher js so our to do store can actually register itself as a listener to the dispatcher and that's just as simple so we're just going to go import dispatcher from dispatcher and then all we do down here is we do dispatcher register there's really only two dispatcher methods that you use use register to register a new listener which in this case is our to do store and then you're actually going to do dispatcher.dispatch which is what all our actions will use to dispatch actions so in this case we're doing a register and then we need a method here that's going to handle all of our actions if you remember again every action that's hap that happens across the app is all going to get handled by every listener so we want something here that's going to handle actions so on my to do store i'm just going to create a handle actions method and there will be the athena which method and we'll just call it there um to do store received and action and then we'll spit out what the action is okay and then so we're just going to register to do store handle actions and we're going to bind it to to do store so that way the value of this inside of here is to do store because we'll want to do stuff like this dot create to do you know if it's a create to do action we'll want to be able to call our own internal methods so there we go we've registered to do store bound it to the right place and that's it we're good to move on so let's go ahead and now expose dispatcher globally so we can play around with it reload my app here i didn't run npm run dev get that started up again okay we're going and now let's dispatch something let's go dispatcher dispatch type some events there you go to do store received an action of some event type some event two there we go so whatever event i dispatch it's automatically gonna be handled by this handle actions method so now we just need to only respond to the ones that we care about if it's not something that to do store cares about we just do nothing so the easiest way to do this is use an uncommon thing which is a switch statement so we're going to use a switch and we're going to switch based off of action.type if it's a type we care about we do something if not we just move on so in this case we're going to go case if type is create to do then we're going to do something inside of this block which this is this create to do and we'll say that text again is all that we need to pass so we'll say that action.txt will be what we pass through so there we go that should work on a create to do event so let's go ahead and fire create to do events type is and it's a standard to always use all uppercase because these are basically constants and then text is going to be new to do there we go new to do appeared up there in our app let's go new to do two new to do two appeared up there in our app excellent so now our dispatcher is in place the only thing we have to do is start giving it actions and our flux circle is complete so let's go ahead and add actions in the next video
