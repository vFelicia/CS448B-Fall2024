With timestamps:

00:00 - in this video we're going to move beyond
00:02 - a single component and we're going to
00:03 - build an entire layout made completely
00:05 - of react components
00:07 - so our client js really shouldn't and
00:09 - doesn't need to have our layout in it so
00:12 - let's go ahead and cut that out of the
00:13 - picture our first step is we're going to
00:15 - make it into its own component so i'm
00:16 - going to make a new folder in the js
00:18 - directory called components
00:22 - and in that components i'm going to make
00:24 - a new file
00:25 - paste that in and let's save this
00:28 - as layout.js
00:31 - and i'm actually going to capitalize it
00:33 - because as a standard rule of thumb you
00:35 - always want components to have a capital
00:38 - letter be capitalized
00:40 - again import react i don't need react
00:42 - dom
00:45 - and there we go let's go full screen for
00:46 - this so now i have my layout all i have
00:48 - to do is export my class that i've
00:51 - created
00:53 - so i can require it now into client js
01:01 - components
01:04 - layout
01:05 - and now this rest will work as intended
01:08 - i can probably clean up that space there
01:10 - don't need it anymore so now i've got
01:12 - importing layout i'm exporting layout
01:13 - let's save and make sure it still works
01:15 - yep everything still works as expected
01:18 - great so let's go ahead and create the
01:20 - rest of our page now so we have our
01:22 - layout
01:24 - and then let's go and create a header
01:26 - and a footer i'm going to go ahead and
01:27 - just save this as header.js
01:31 - there we go we have our header js so i'm
01:33 - going to change this name to header
01:36 - and we'll get rid of this whole
01:37 - constructor function
01:40 - and will return a header tag
01:47 - i'll just leave that there for now
01:49 - excellent that's in place let's go ahead
01:51 - and import that into our layout
02:00 - i'll get rid of this constructor mess as
02:02 - well
02:03 - and we're returning our one div
02:08 - we're printing header again it's
02:10 - capitalized
02:12 - and i can use it straight there in the
02:14 - html because it's a component components
02:16 - can render anywhere in the html that you
02:18 - want you can see i've got header going
02:21 - and again the reason we capitalize
02:22 - components as a standard is because
02:24 - they're a constructor the header is not
02:26 - a rendered
02:28 - dom element yet it's a it has the
02:30 - capacity to render out a dom element
02:33 - whenever we print it so i could do this
02:35 - and this and this and it's going to
02:36 - render out three completely different
02:38 - elements later on we'll get into showing
02:40 - you how you can pass unique
02:42 - details and information into each one of
02:45 - these and make them actually render into
02:47 - three different looking headers
02:49 - another option you have if you want to
02:50 - render multiple versions of something
02:52 - is i could call this a list i could do
02:55 - an array
02:58 - and i could make it an array of three
03:00 - dom elements
03:02 - which is very useful for something like
03:04 - a list full of lis
03:06 - and then i could just go list
03:09 - and jsx is smart enough to know that
03:11 - that is an array of three components so
03:13 - let's render each one as components so
03:15 - that's what you would do if say your
03:17 - main was an unordered list and each one
03:20 - of these was an li of sorts
03:23 - then that would be the way you'd want to
03:24 - handle that
03:26 - and each one could get passed in its own
03:28 - specific information so let's just go
03:30 - ahead and undo some undoing here to
03:32 - where we just have a header
03:36 - there we go now let's make our footer
03:39 - i'm just going to go ahead and save
03:40 - header as footer
03:46 - will be the footer tag
03:51 - and now my layout can import footer as
03:53 - well
03:56 - see i'm always having to run through the
03:57 - alphabet in my head to figure out which
03:59 - comes first you always want to keep
04:00 - those alphabetized
04:03 - we can print our header
04:05 - and our footer
04:07 - see what we got should render out
04:09 - excellent we're good to go and then you
04:11 - could create a body and so forth so this
04:14 - is kind of a standard layout here
04:16 - sometimes people will do a pages folder
04:18 - that has all of our very very top-level
04:20 - components which in this case would be
04:22 - layout
04:23 - and then components would be everything
04:25 - that lives with inside of a page
04:28 - so that's an option you can have your
04:29 - layout living components or you could
04:31 - have a separate pages folder
04:33 - or sometimes that would be called routes
04:35 - and then inside of these like i said is
04:37 - your top level components and then if a
04:40 - component has a component within it
04:42 - standard ways you'll probably want to
04:43 - just create a new folder so let's say
04:45 - this header actually has a title in it
04:47 - let's go ahead and create a new folder
04:50 - we're going to call it header so any
04:51 - component within the header component is
04:54 - going to go into here i know that was
04:56 - mouthful
04:57 - so we'll put you in there and call you
04:59 - title
05:02 - so here's my title js
05:04 - we're going to call it title and we're
05:06 - going to return an h1
05:12 - so there's my title
05:14 - and my header will now import that title
05:16 - and use it
05:24 - and it'll simply print title
05:28 - so now i should have a welcome that's a
05:30 - header with a title h1 inside of it
05:33 - and there's my footer let's go ahead and
05:34 - just look real quickly at
05:36 - the dom that was created from that
05:39 - here's my app
05:42 - and then there's an h1 getting printed
05:44 - and there's a footer getting printed so
05:46 - even though header is returning the
05:47 - title there's no extra dom elements that
05:50 - get added unless i want to wrap a div in
05:52 - there
05:58 - now there will be a div inside that's my
06:02 - header component
06:03 - and then that's my
06:05 - header div
06:07 - and that's how it all works out so i
06:09 - hope you enjoyed this lesson now let's
06:11 - get into some of the more meaty uh meat
06:14 - and potatoes portion of react and that's
06:16 - passing values into components there's
06:19 - multiple ways of doing it there's right
06:21 - ways and there's wrong ways so this is
06:23 - one of the next pieces that you really
06:25 - want to get right if you want to learn
06:26 - react properly so we'll get into data
06:29 - and passing around data in the next
06:31 - video

Cleaned transcript:

in this video we're going to move beyond a single component and we're going to build an entire layout made completely of react components so our client js really shouldn't and doesn't need to have our layout in it so let's go ahead and cut that out of the picture our first step is we're going to make it into its own component so i'm going to make a new folder in the js directory called components and in that components i'm going to make a new file paste that in and let's save this as layout.js and i'm actually going to capitalize it because as a standard rule of thumb you always want components to have a capital letter be capitalized again import react i don't need react dom and there we go let's go full screen for this so now i have my layout all i have to do is export my class that i've created so i can require it now into client js components layout and now this rest will work as intended i can probably clean up that space there don't need it anymore so now i've got importing layout i'm exporting layout let's save and make sure it still works yep everything still works as expected great so let's go ahead and create the rest of our page now so we have our layout and then let's go and create a header and a footer i'm going to go ahead and just save this as header.js there we go we have our header js so i'm going to change this name to header and we'll get rid of this whole constructor function and will return a header tag i'll just leave that there for now excellent that's in place let's go ahead and import that into our layout i'll get rid of this constructor mess as well and we're returning our one div we're printing header again it's capitalized and i can use it straight there in the html because it's a component components can render anywhere in the html that you want you can see i've got header going and again the reason we capitalize components as a standard is because they're a constructor the header is not a rendered dom element yet it's a it has the capacity to render out a dom element whenever we print it so i could do this and this and this and it's going to render out three completely different elements later on we'll get into showing you how you can pass unique details and information into each one of these and make them actually render into three different looking headers another option you have if you want to render multiple versions of something is i could call this a list i could do an array and i could make it an array of three dom elements which is very useful for something like a list full of lis and then i could just go list and jsx is smart enough to know that that is an array of three components so let's render each one as components so that's what you would do if say your main was an unordered list and each one of these was an li of sorts then that would be the way you'd want to handle that and each one could get passed in its own specific information so let's just go ahead and undo some undoing here to where we just have a header there we go now let's make our footer i'm just going to go ahead and save header as footer will be the footer tag and now my layout can import footer as well see i'm always having to run through the alphabet in my head to figure out which comes first you always want to keep those alphabetized we can print our header and our footer see what we got should render out excellent we're good to go and then you could create a body and so forth so this is kind of a standard layout here sometimes people will do a pages folder that has all of our very very toplevel components which in this case would be layout and then components would be everything that lives with inside of a page so that's an option you can have your layout living components or you could have a separate pages folder or sometimes that would be called routes and then inside of these like i said is your top level components and then if a component has a component within it standard ways you'll probably want to just create a new folder so let's say this header actually has a title in it let's go ahead and create a new folder we're going to call it header so any component within the header component is going to go into here i know that was mouthful so we'll put you in there and call you title so here's my title js we're going to call it title and we're going to return an h1 so there's my title and my header will now import that title and use it and it'll simply print title so now i should have a welcome that's a header with a title h1 inside of it and there's my footer let's go ahead and just look real quickly at the dom that was created from that here's my app and then there's an h1 getting printed and there's a footer getting printed so even though header is returning the title there's no extra dom elements that get added unless i want to wrap a div in there now there will be a div inside that's my header component and then that's my header div and that's how it all works out so i hope you enjoyed this lesson now let's get into some of the more meaty uh meat and potatoes portion of react and that's passing values into components there's multiple ways of doing it there's right ways and there's wrong ways so this is one of the next pieces that you really want to get right if you want to learn react properly so we'll get into data and passing around data in the next video
