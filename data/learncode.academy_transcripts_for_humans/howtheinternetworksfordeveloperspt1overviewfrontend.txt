With timestamps:

00:01 - so in this video I'm going to try to
00:03 - cover the concept of how does the
00:05 - internet work from a web development
00:07 - perspective what do you need to know
00:09 - about how the internet works and what
00:11 - I'm going to be covering in this is
00:12 - really stuff that took I'd say it took
00:13 - me at least five years if not more it's
00:16 - kind of figure out along the way because
00:17 - you don't know what you don't know you
00:19 - don't know what to Google for it'd be
00:20 - easy to learn if you knew what to Google
00:22 - for uh but it takes five or sometimes 10
00:25 - or more years some people never pick up
00:27 - on stuff just cuz you're not exposed to
00:29 - it you don't know and so I'm going to
00:31 - kind of compile years worth of stuff and
00:33 - hopefully make it all really simple for
00:35 - you how does the internet work from a
00:36 - web development point of view this video
00:39 - is going to focus mostly on what the
00:40 - front end guys need to know and it's
00:43 - going to cover just minimal knowledge
00:45 - about servers and the next video is
00:46 - really going to cover server
00:48 - configurations that's really a kind of
00:50 - scary world to people that have lived in
00:52 - HTML CSS JavaScript and it doesn't have
00:55 - to be scary it's really simple it can be
00:57 - a million things just like the frontend
00:59 - can
01:00 - and so hopefully we'll just kind of
01:02 - cover some basic configurations and give
01:03 - you a peek into what that server world
01:05 - is like uh for those of you who want to
01:07 - learn in that direction so let's get
01:09 - into it front-end point of view at at at
01:12 - the bottom level at the end of the day
01:14 - really what the internet is is your
01:16 - browser your machine is making requests
01:18 - to a server and it's getting responses
01:20 - back the server is just another machine
01:23 - on the Internet it's just another
01:24 - machine connected to the internet and
01:26 - kind of the browser can be your iPhone
01:28 - it could be Chrome whatever and so that
01:30 - server is a
01:31 - machine uh and whenever a machine
01:33 - connects to the internet it gets what's
01:35 - called an IP address um some tons of you
01:37 - guys probably know lots of these things
01:39 - so if your intelligence gets insulted
01:41 - just keep with me we're going to cover a
01:42 - lot of depth here uh but when you plug
01:44 - into the internet when you connect you
01:46 - get an IP address um so a server is a
01:49 - box with an IP address um the reason
01:52 - your computer is not a server is you
01:54 - have an IP address if you go to Google
01:56 - and type what's my IP address it's going
01:58 - to show you your IP address you have it
02:00 - right now so if anyone types in your IP
02:02 - address it can access your computer just
02:04 - like a server but you don't have server
02:06 - software running and installed we'll get
02:08 - into that in the next video but if uh
02:11 - you type in say mysite.com it doesn't
02:14 - know your servers IP address so what
02:17 - that's going to do is your internet
02:18 - service provider Charter say is going to
02:21 - do a DNS lookup a domain name service
02:23 - lookup it's going to say hey mysite.com
02:25 - what IP address is that configured Ah
02:28 - that's configured to this guy right here
02:30 - well let's send you to that box so your
02:32 - request for mysite.com goes to this box
02:36 - um so say google.com your ISP takes that
02:40 - and it routes you to whatever IP address
02:42 - google.com has configured and they
02:44 - probably have thousands of servers and
02:46 - stuff running which I'll cover a little
02:48 - bit of that in the next video as well so
02:50 - you connect to the server it gives you a
02:52 - response that's the internet you get
02:54 - requests you make requests you get
02:56 - responses so when I request a site
02:58 - mysite.com I expect I'm going to get
03:01 - back um the browser doesn't know what
03:03 - it's going to get back I'm saying
03:05 - mysite.com as a as a piece of text I
03:09 - could get back an image I could get a
03:10 - CSS stylesheet I could get back an HTML
03:13 - file I can get back anything the server
03:15 - can give me anything it wants my browser
03:17 - knows what it's giving me by the content
03:20 - type so I'm going to get a response back
03:22 - that is both the file and the content
03:24 - type so when I say mysite.com server
03:27 - gives me the index.html file and it sets
03:30 - a content type of text/html now my
03:34 - browser knows what to do with it ah
03:36 - let's treat it like HTML And So It
03:38 - Begins parsing your HTML document uh
03:41 - what that parsing process process looks
03:43 - like uh for the most part it goes head
03:45 - to toe start to finish um and it pauses
03:48 - when it finds a request for an asset an
03:50 - asset is another request that we have to
03:52 - make like it's another file we need so
03:55 - that'd be a CSS file would be an asset
03:57 - an image would be an asset a Javascript
04:00 - file would be an asset so we're going
04:03 - through dot do dot HTML head ah we need
04:05 - another asset a CSS file so let's tell
04:08 - our browser go give me a request for
04:10 - main.css does that request the server
04:14 - rep replies with that CSS file sets the
04:17 - content type to
04:19 - text/css now we know that that's a CSS
04:21 - file and it keeps going through and now
04:24 - anything that appears it will consult
04:27 - that stylesheet before presenting it to
04:29 - make sure it comes out styled correctly
04:32 - one of the reasons we put the Styles in
04:34 - the header is because if we were to put
04:36 - the style here you'd get what's called
04:37 - an fou flash of unstyled content I don't
04:41 - know if you've ever loaded a a cheaply
04:43 - made web page and you see it flash
04:45 - really ugly real quick and then flicker
04:47 - to beautiful what that is is it's
04:49 - loading your your body it's loading
04:52 - through your H1s and your tags and your
04:54 - paragraphs and your divs and then it's
04:56 - loading your CSS after the fact so it
04:59 - goes top to bottom it's already spinning
05:01 - this out for the user to see and then it
05:03 - pauses oh let's get the stylesheet get
05:05 - the Styles sheet it all happens in a
05:07 - couple milliseconds and then that
05:08 - stylesheet gets applied that's why we
05:11 - put the stylesheets up front we do want
05:13 - to load those before we start presenting
05:14 - the user with information now the reason
05:17 - we used to put our scripts up in the
05:18 - head too some people still do uh but you
05:21 - can for in almost all cases put your
05:23 - scripts at the footer uh before the last
05:26 - body tag before the closing body tag and
05:28 - what that's going to do
05:30 - is that's going to start presenting your
05:31 - page to the user and then it's going to
05:33 - load your scripts uh and activate the
05:36 - thing so you'll see your content slider
05:39 - uh and then it will load the jQuery to
05:41 - make it start sliding which is totally
05:44 - acceptable your user is going to feel
05:45 - like the web page is loading a lot
05:48 - faster uh than it really is another wise
05:51 - thing is you want to concatenate you
05:53 - want to add all your scripts files
05:56 - together as much as possible so instead
05:57 - of loading 10 different JavaScript files
06:00 - it's really going to speed things up if
06:01 - you can put those all into one
06:03 - Javascript file and then you only have
06:05 - to make one request talk to the server
06:07 - one time give me scripts.js that gets
06:10 - added in and now you've not made near as
06:13 - many requests you've not paused your
06:15 - page near as often same thing with CSS
06:18 - files uh keep them broken up while
06:20 - you're developing uh but then when you
06:22 - deploy to production you want to
06:24 - concatenate them all together put them
06:26 - all together into one file so then your
06:28 - browser starts loading the HML HTML says
06:30 - oh give me this one CSS file boom got
06:32 - our one CSS file we can move on get our
06:35 - one Javascript file we're done and there
06:37 - are use cases where you need to make
06:39 - more than one but for the most part
06:40 - that's really going to speed up your
06:43 - page a lot and also if these are
06:45 - minified uh if these are minified which
06:47 - if you don't know what minified is just
06:48 - look up you know what is a minified CSS
06:50 - file minified Javascript file it's a way
06:53 - that you can actually get those files
06:54 - even smaller and even
06:56 - faster so that's kind of the whole as
06:59 - asset um the whole page rendering that's
07:02 - kind of the front end of things the
07:03 - other way you can make asset requests is
07:05 - through JavaScript JavaScript can do
07:08 - what's called an xhr uh request or an
07:11 - Ajax request they're often called and so
07:13 - JavaScript can say you know real time
07:16 - when you click on a link JavaScript
07:17 - doesn't take you anywhere instead it
07:19 - says Ah let's go make a request for the
07:21 - most recent five tweets that response
07:23 - comes back and instead of going to the
07:24 - HTML page it goes into JavaScript and
07:27 - JavaScript does something smart with
07:28 - those JavaScript can also make requests
07:31 - for images it can make requests for CSS
07:33 - files it can make requests for pretty
07:35 - much anything uh because after all a
07:37 - request is just a request to the server
07:39 - the server determines what you get back
07:41 - by its content type so that's kind of
07:45 - the browser world of things uh before I
07:47 - close out this video let's look at some
07:49 - sample requests let's look at what's
07:51 - going on um and so a
07:55 - request contains two things it contains
07:58 - headers and it may or may not contain a
08:00 - post body so let's look at when I
08:03 - request I load to google.com here
08:05 - google.com uh so my first request if you
08:08 - um open your developer console and go to
08:10 - network and refresh your page I can see
08:13 - right here my first request was
08:16 - www.google.com let's look at these
08:17 - headers real quick they're called
08:18 - headers so I requested google.com it was
08:22 - a get request this is the method and
08:25 - then there's no path to it I didn't go
08:27 - google.com/ blah blah blah blah blah
08:30 - blah I just went google.com so that's
08:33 - host method
08:35 - path um and I also passed my cookies I
08:38 - don't really have time to get into
08:39 - cookies in this but cookies is one giant
08:41 - long string and that's information that
08:44 - the website has stored on your machine
08:46 - so as you can see Google stores a lot of
08:48 - cookies um and the user agent string
08:51 - this is information about my web browser
08:54 - so my browser as you can see right here
08:55 - is Chrome 37 uh and that's what the user
08:59 - agent string is so there's my request
09:02 - and I did not pass a body I just want
09:04 - this page now if I was doing a login say
09:07 - I had sent my username and password uh
09:10 - the method would be a post and I would
09:12 - have a post body that sent in the
09:15 - username and the
09:16 - password uh so here's kind of requests
09:20 - will include these headers the host the
09:22 - method that's either get post put or
09:25 - delete uh the path which is say
09:28 - google.com/ IM / logo. jpeg cookies user
09:32 - agent and the content type as well if
09:34 - I'm including a post body so right here
09:37 - my post body is a Json post and so in
09:40 - that case my post my content type would
09:42 - be application Json so that's a request
09:45 - responses also have headers and a
09:48 - response body so let's look again at
09:50 - that Google if I scroll down here my
09:53 - response headers it said my content type
09:55 - is text/html and it said let's see we're
09:58 - going to get a content we're going to
10:00 - get basically the two headers that are
10:02 - important to you if you're learning the
10:04 - content type and the status your status
10:06 - code um so here I got a status of 200
10:09 - that means okay and I got a content type
10:12 - of text/html my response itself Hey look
10:15 - it's an HTML page so I said give me
10:17 - google.com it gave me the HTML page for
10:20 - google.com and it said the content type
10:22 - is text HTML status is 200 okay status
10:26 - doesn't really matter if you're doing
10:28 - HTML stuff status matters a lot if
10:30 - you're doing JavaScript stuff so the
10:32 - status code we can give you a status
10:35 - anything in the 200s means it's okay
10:38 - anything in the 300s means you got
10:41 - redirected anything in the 400s means
10:43 - there was an error or it's not found or
10:45 - you're not logged in so you can't access
10:47 - it anything in the 500 says the server
10:51 - broke it blew up you either gave it
10:54 - something it wasn't expecting or there's
10:55 - a problem on their end that's what a 500
10:57 - ER level error is
10:59 - so that's kind of what a status code is
11:01 - Javascript will look for that sometimes
11:03 - JavaScript will make a request and a 400
11:06 - a 404 a 43 those are all considered
11:08 - errors a 500 is considered an error so
11:10 - JavaScript will say that wasn't
11:12 - successful and so that's kind of
11:16 - requests and responses you'll get a
11:18 - response body let's look at some more
11:19 - requests here the next request we made
11:22 - was google.com let's google.com and the
11:25 - path was
11:26 - images logo so I am looking for a
11:30 - PNG and then my response here is the
11:35 - content type is image PNG and the
11:37 - response was well they can't really show
11:39 - you because it was an image so they sent
11:41 - me an image and with a 200 okay yep we
11:43 - accepted your request here's that image
11:46 - content type blah blah blah so that's
11:49 - kind of how that works we then requested
11:51 - a well that's a data that's from the CSS
11:54 - file requested some other
11:57 - stuff here's an another get
12:00 - request
12:01 - and this was a text JavaScript file that
12:04 - we were requesting so the response is
12:06 - Javascript and it replied with text
12:09 - JavaScript and further on and further on
12:11 - and that's just how that goes so there's
12:13 - all the requests that I made just to
12:15 - load google.com a lot of stuff going on
12:18 - let's look at a couple sample requests
12:21 - in writing and then we'll be done with
12:23 - this video we'll move on to the backend
12:24 - the server stuff so you make a homepage
12:27 - request to google.com you're going to do
12:29 - a get request I probably haven't covered
12:31 - it yet I'll I'll give you a brief
12:33 - demonstration my jQuery tutorial covers
12:36 - a lot of what the different methods are
12:37 - get just says give me a resource I'm not
12:39 - passing anything with that usually um a
12:42 - get request a post request is for when
12:46 - you're usually creating something new or
12:49 - when you're doing something basic like a
12:51 - login uh so let's say I'm logging to
12:54 - Twitter that's going to be a post
12:55 - request let's say I create a new tweet
12:58 - that's going to be a post request I'm
13:00 - sending a post and I'm passing it the
13:02 - information of my tweet and then he
13:04 - mentions a put request is when you want
13:06 - to edit something if I edit a tweet uh
13:09 - so let's say if I did a post real quick
13:11 - I would post to tweets slash I don't
13:14 - know my tweet ID would be something huge
13:16 - like that I would do a post to that and
13:18 - I would have a post body of the new
13:20 - tweet content oh actually if I'm if I'm
13:22 - posting to tweets if I'm doing a post
13:24 - I'm doing a new tweet so I'll either
13:26 - post to tweets or I'll post to tweet
13:27 - Slash new
13:29 - and then the server knows that if I'm
13:30 - posting to that that's a new one if I'm
13:33 - doing a put request I'll have the ID of
13:35 - what I'm editing so if I'm doing a put
13:38 - request I'm putting to this ID that was
13:41 - the new ID of the new post I just made
13:44 - and it's going to update that with
13:45 - what's going on and then there's also a
13:47 - delete request so if I do a delete
13:50 - method to this path it will probably
13:52 - delete that tweet so on Twitter if you
13:54 - click delete JavaScript is sending off a
13:57 - delete request to that twe tweet ID and
14:00 - it will go away so that's kind of what
14:02 - those methods are get something create
14:05 - something update something delete
14:07 - something um and so that's what your
14:09 - method
14:10 - is uh the path uh we already covered
14:14 - path path is the path there's your user
14:16 - agent the back end will sometimes if you
14:18 - have a massive website sometimes the
14:20 - back end will look at this and say ah
14:21 - they're on an iPhone they're on a mobile
14:23 - device let's send them to a completely
14:24 - different website that's just for mobile
14:26 - uh so that's kind of why that user agent
14:28 - is is important and then here's a sample
14:31 - post request say I was doing a login I
14:34 - would do a post method to SL login my
14:37 - content type would be application Json
14:39 - and my request body would be you know a
14:42 - Json object username this password this
14:45 - my response would be 200 okay and if I
14:48 - did a say this is a JavaScript thing um
14:52 - and it was expecting a JavaScript
14:53 - response then it would give me a
14:55 - response that was probably Json my
14:56 - response body would say hey here's your
14:58 - full profile Magic Man 11 and then uh
15:02 - the content type would be application
15:04 - Json for that so that's kind of requests
15:08 - that's kind of your whole front-end
15:09 - world of thing things in the next video
15:11 - we're going to really cover this server
15:13 - world and how the internet works from
15:15 - the server side of things and that's
15:16 - going to be really fun especially if if
15:18 - you're completely clueless as to what
15:20 - the server world looks like I'll leave
15:21 - you for now have a great day

Cleaned transcript:

so in this video I'm going to try to cover the concept of how does the internet work from a web development perspective what do you need to know about how the internet works and what I'm going to be covering in this is really stuff that took I'd say it took me at least five years if not more it's kind of figure out along the way because you don't know what you don't know you don't know what to Google for it'd be easy to learn if you knew what to Google for uh but it takes five or sometimes 10 or more years some people never pick up on stuff just cuz you're not exposed to it you don't know and so I'm going to kind of compile years worth of stuff and hopefully make it all really simple for you how does the internet work from a web development point of view this video is going to focus mostly on what the front end guys need to know and it's going to cover just minimal knowledge about servers and the next video is really going to cover server configurations that's really a kind of scary world to people that have lived in HTML CSS JavaScript and it doesn't have to be scary it's really simple it can be a million things just like the frontend can and so hopefully we'll just kind of cover some basic configurations and give you a peek into what that server world is like uh for those of you who want to learn in that direction so let's get into it frontend point of view at at at the bottom level at the end of the day really what the internet is is your browser your machine is making requests to a server and it's getting responses back the server is just another machine on the Internet it's just another machine connected to the internet and kind of the browser can be your iPhone it could be Chrome whatever and so that server is a machine uh and whenever a machine connects to the internet it gets what's called an IP address um some tons of you guys probably know lots of these things so if your intelligence gets insulted just keep with me we're going to cover a lot of depth here uh but when you plug into the internet when you connect you get an IP address um so a server is a box with an IP address um the reason your computer is not a server is you have an IP address if you go to Google and type what's my IP address it's going to show you your IP address you have it right now so if anyone types in your IP address it can access your computer just like a server but you don't have server software running and installed we'll get into that in the next video but if uh you type in say mysite.com it doesn't know your servers IP address so what that's going to do is your internet service provider Charter say is going to do a DNS lookup a domain name service lookup it's going to say hey mysite.com what IP address is that configured Ah that's configured to this guy right here well let's send you to that box so your request for mysite.com goes to this box um so say google.com your ISP takes that and it routes you to whatever IP address google.com has configured and they probably have thousands of servers and stuff running which I'll cover a little bit of that in the next video as well so you connect to the server it gives you a response that's the internet you get requests you make requests you get responses so when I request a site mysite.com I expect I'm going to get back um the browser doesn't know what it's going to get back I'm saying mysite.com as a as a piece of text I could get back an image I could get a CSS stylesheet I could get back an HTML file I can get back anything the server can give me anything it wants my browser knows what it's giving me by the content type so I'm going to get a response back that is both the file and the content type so when I say mysite.com server gives me the index.html file and it sets a content type of text/html now my browser knows what to do with it ah let's treat it like HTML And So It Begins parsing your HTML document uh what that parsing process process looks like uh for the most part it goes head to toe start to finish um and it pauses when it finds a request for an asset an asset is another request that we have to make like it's another file we need so that'd be a CSS file would be an asset an image would be an asset a Javascript file would be an asset so we're going through dot do dot HTML head ah we need another asset a CSS file so let's tell our browser go give me a request for main.css does that request the server rep replies with that CSS file sets the content type to text/css now we know that that's a CSS file and it keeps going through and now anything that appears it will consult that stylesheet before presenting it to make sure it comes out styled correctly one of the reasons we put the Styles in the header is because if we were to put the style here you'd get what's called an fou flash of unstyled content I don't know if you've ever loaded a a cheaply made web page and you see it flash really ugly real quick and then flicker to beautiful what that is is it's loading your your body it's loading through your H1s and your tags and your paragraphs and your divs and then it's loading your CSS after the fact so it goes top to bottom it's already spinning this out for the user to see and then it pauses oh let's get the stylesheet get the Styles sheet it all happens in a couple milliseconds and then that stylesheet gets applied that's why we put the stylesheets up front we do want to load those before we start presenting the user with information now the reason we used to put our scripts up in the head too some people still do uh but you can for in almost all cases put your scripts at the footer uh before the last body tag before the closing body tag and what that's going to do is that's going to start presenting your page to the user and then it's going to load your scripts uh and activate the thing so you'll see your content slider uh and then it will load the jQuery to make it start sliding which is totally acceptable your user is going to feel like the web page is loading a lot faster uh than it really is another wise thing is you want to concatenate you want to add all your scripts files together as much as possible so instead of loading 10 different JavaScript files it's really going to speed things up if you can put those all into one Javascript file and then you only have to make one request talk to the server one time give me scripts.js that gets added in and now you've not made near as many requests you've not paused your page near as often same thing with CSS files uh keep them broken up while you're developing uh but then when you deploy to production you want to concatenate them all together put them all together into one file so then your browser starts loading the HML HTML says oh give me this one CSS file boom got our one CSS file we can move on get our one Javascript file we're done and there are use cases where you need to make more than one but for the most part that's really going to speed up your page a lot and also if these are minified uh if these are minified which if you don't know what minified is just look up you know what is a minified CSS file minified Javascript file it's a way that you can actually get those files even smaller and even faster so that's kind of the whole as asset um the whole page rendering that's kind of the front end of things the other way you can make asset requests is through JavaScript JavaScript can do what's called an xhr uh request or an Ajax request they're often called and so JavaScript can say you know real time when you click on a link JavaScript doesn't take you anywhere instead it says Ah let's go make a request for the most recent five tweets that response comes back and instead of going to the HTML page it goes into JavaScript and JavaScript does something smart with those JavaScript can also make requests for images it can make requests for CSS files it can make requests for pretty much anything uh because after all a request is just a request to the server the server determines what you get back by its content type so that's kind of the browser world of things uh before I close out this video let's look at some sample requests let's look at what's going on um and so a request contains two things it contains headers and it may or may not contain a post body so let's look at when I request I load to google.com here google.com uh so my first request if you um open your developer console and go to network and refresh your page I can see right here my first request was www.google.com let's look at these headers real quick they're called headers so I requested google.com it was a get request this is the method and then there's no path to it I didn't go google.com/ blah blah blah blah blah blah I just went google.com so that's host method path um and I also passed my cookies I don't really have time to get into cookies in this but cookies is one giant long string and that's information that the website has stored on your machine so as you can see Google stores a lot of cookies um and the user agent string this is information about my web browser so my browser as you can see right here is Chrome 37 uh and that's what the user agent string is so there's my request and I did not pass a body I just want this page now if I was doing a login say I had sent my username and password uh the method would be a post and I would have a post body that sent in the username and the password uh so here's kind of requests will include these headers the host the method that's either get post put or delete uh the path which is say google.com/ IM / logo. jpeg cookies user agent and the content type as well if I'm including a post body so right here my post body is a Json post and so in that case my post my content type would be application Json so that's a request responses also have headers and a response body so let's look again at that Google if I scroll down here my response headers it said my content type is text/html and it said let's see we're going to get a content we're going to get basically the two headers that are important to you if you're learning the content type and the status your status code um so here I got a status of 200 that means okay and I got a content type of text/html my response itself Hey look it's an HTML page so I said give me google.com it gave me the HTML page for google.com and it said the content type is text HTML status is 200 okay status doesn't really matter if you're doing HTML stuff status matters a lot if you're doing JavaScript stuff so the status code we can give you a status anything in the 200s means it's okay anything in the 300s means you got redirected anything in the 400s means there was an error or it's not found or you're not logged in so you can't access it anything in the 500 says the server broke it blew up you either gave it something it wasn't expecting or there's a problem on their end that's what a 500 ER level error is so that's kind of what a status code is Javascript will look for that sometimes JavaScript will make a request and a 400 a 404 a 43 those are all considered errors a 500 is considered an error so JavaScript will say that wasn't successful and so that's kind of requests and responses you'll get a response body let's look at some more requests here the next request we made was google.com let's google.com and the path was images logo so I am looking for a PNG and then my response here is the content type is image PNG and the response was well they can't really show you because it was an image so they sent me an image and with a 200 okay yep we accepted your request here's that image content type blah blah blah so that's kind of how that works we then requested a well that's a data that's from the CSS file requested some other stuff here's an another get request and this was a text JavaScript file that we were requesting so the response is Javascript and it replied with text JavaScript and further on and further on and that's just how that goes so there's all the requests that I made just to load google.com a lot of stuff going on let's look at a couple sample requests in writing and then we'll be done with this video we'll move on to the backend the server stuff so you make a homepage request to google.com you're going to do a get request I probably haven't covered it yet I'll I'll give you a brief demonstration my jQuery tutorial covers a lot of what the different methods are get just says give me a resource I'm not passing anything with that usually um a get request a post request is for when you're usually creating something new or when you're doing something basic like a login uh so let's say I'm logging to Twitter that's going to be a post request let's say I create a new tweet that's going to be a post request I'm sending a post and I'm passing it the information of my tweet and then he mentions a put request is when you want to edit something if I edit a tweet uh so let's say if I did a post real quick I would post to tweets slash I don't know my tweet ID would be something huge like that I would do a post to that and I would have a post body of the new tweet content oh actually if I'm if I'm posting to tweets if I'm doing a post I'm doing a new tweet so I'll either post to tweets or I'll post to tweet Slash new and then the server knows that if I'm posting to that that's a new one if I'm doing a put request I'll have the ID of what I'm editing so if I'm doing a put request I'm putting to this ID that was the new ID of the new post I just made and it's going to update that with what's going on and then there's also a delete request so if I do a delete method to this path it will probably delete that tweet so on Twitter if you click delete JavaScript is sending off a delete request to that twe tweet ID and it will go away so that's kind of what those methods are get something create something update something delete something um and so that's what your method is uh the path uh we already covered path path is the path there's your user agent the back end will sometimes if you have a massive website sometimes the back end will look at this and say ah they're on an iPhone they're on a mobile device let's send them to a completely different website that's just for mobile uh so that's kind of why that user agent is is important and then here's a sample post request say I was doing a login I would do a post method to SL login my content type would be application Json and my request body would be you know a Json object username this password this my response would be 200 okay and if I did a say this is a JavaScript thing um and it was expecting a JavaScript response then it would give me a response that was probably Json my response body would say hey here's your full profile Magic Man 11 and then uh the content type would be application Json for that so that's kind of requests that's kind of your whole frontend world of thing things in the next video we're going to really cover this server world and how the internet works from the server side of things and that's going to be really fun especially if if you're completely clueless as to what the server world looks like I'll leave you for now have a great day
