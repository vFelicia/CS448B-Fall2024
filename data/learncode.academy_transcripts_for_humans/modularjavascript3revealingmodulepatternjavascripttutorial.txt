With timestamps:

00:00 - so in the last video we covered modular
00:03 - js with the object literal pattern so
00:05 - once again that's that's called a design
00:07 - pattern that's kind of a way that you
00:09 - code and once again that was an object
00:11 - literal
00:13 - and again that's just making an object
00:15 - people equals an object and objects have
00:18 - properties
00:19 - name
00:23 - and then say name
00:27 - alerts will
00:30 - there we go and so
00:32 - one of the things that we don't like
00:34 - let's say we had set name
00:36 - and whenever the name got set we wanted
00:39 - to render the method so we had some rule
00:42 - that whenever this dot name
00:44 - equals a new name
00:48 - whenever this dot name equals the name
00:50 - we always want it to render at the same
00:51 - time
00:52 - so it's really bad if someone who
00:55 - doesn't maybe you're providing a library
00:58 - to be used as a third-party piece of
01:00 - software people shouldn't have access to
01:02 - this because you never want them to just
01:04 - automatically change people.name and
01:06 - just go i don't know what that's all
01:08 - about
01:10 - you never want them to go people.name
01:13 - equals bob
01:14 - because then it's not going to render
01:16 - bob is now just changed but nothing
01:19 - happened so they don't know how your
01:20 - program works they should only have
01:21 - access to say say name and set name they
01:24 - shouldn't be able to change this
01:26 - and so
01:27 - this is not necessarily always the
01:29 - pattern that you want to use
01:31 - there's also what's called a revealing
01:32 - module pattern so in this case instead
01:35 - of being an object
01:37 - it's actually a self-executing anonymous
01:40 - function
01:41 - and so for those you guys who are
01:43 - concerned or may have seen this before
01:45 - and and don't quite understand what that
01:47 - means i know i used this for i'd say a
01:49 - year when i started javascript but i
01:51 - never really understood exactly how it
01:54 - did what it did or what it was so let me
01:56 - take a slight little tangent and show
01:58 - you
01:59 - i can go ver a equals one and then i can
02:02 - go a dot to string
02:04 - and that's going to give me the string
02:05 - representation of my number one so that
02:07 - works but i cannot go 1.2 string
02:10 - that's going to fail because 1 is still
02:12 - just a number at this point it has not
02:14 - been evaluated when you say var a equals
02:16 - 1 1 gets evaluated it says oh ok that's
02:19 - a number type it actually gets converted
02:21 - into a number type
02:23 - and number types have methods i can go a
02:25 - dot see it's got two fixed to string to
02:28 - precision it's got all these methods to
02:30 - it
02:32 - now i can do this i can do in
02:34 - parentheses 1.2 string
02:37 - and so when you put in a parenthesis it
02:38 - forces javascript to evaluate it first
02:42 - and then treat it as the evaluated thing
02:44 - so this is basically doing the same
02:45 - thing it's just not getting assigned to
02:46 - a variable so this is going to work and
02:48 - i'm going to get 1. so same thing
02:50 - applies to a function i can create a
02:52 - function here say alert
02:56 - but i can't run it i can't run it right
02:58 - away because it's not been evaluated
03:01 - i can however wrap it in parentheses and
03:04 - now it gets evaluated and it's a
03:06 - function and then i can execute it and
03:08 - it alerts so that's basically all we're
03:10 - doing we're just writing out a function
03:12 - we're wrapping in parentheses here so
03:14 - that way it gets evaluated and then we
03:16 - can execute it right away we can even
03:18 - pass it variables i could say will
03:21 - and then up here i could receive a name
03:23 - and do something with my name in here
03:26 - so that's kind of cool we can actually
03:27 - pass this brand new function some
03:29 - variables so that's what that is if
03:30 - you're a little newer to that and you're
03:32 - not exactly sure what's going on
03:34 - and another cool thing happens is we
03:36 - create our own scope so i could go over
03:38 - name in here equals will
03:42 - and nobody outside of my function can
03:43 - access that i can't alert name this will
03:45 - fail
03:46 - because it's within the scope of this
03:48 - function it's not a global variable i
03:50 - could even have if i did very name
03:53 - equals bob
03:54 - up here then alerting name would alert
03:57 - bob even if i've already run this
03:59 - because their name inside of this
04:01 - function is will their name out here
04:03 - globally is bob so what that gives us
04:05 - the ability to do is create what are
04:06 - called private variables
04:08 - variables that only exist in our scope
04:10 - here any function inside of here can
04:12 - access it so if i have a function that
04:14 - says say name
04:16 - let's go function say name
04:19 - equal
04:21 - what am i doing
04:23 - and that alert name well that's going to
04:25 - have access to will so that alert will
04:28 - and right now if i run this this
04:30 - function is not returning anything so
04:32 - people won't have a value but what i can
04:34 - do is i can return an object
04:36 - and that could have a value of say name
04:40 - and then i just have to pass i don't
04:41 - know say name
04:43 - so i'm passing say name in as say name
04:47 - so i could also say i could call this
04:49 - say your name and it's still just gonna
04:51 - fire your say name
04:53 - um
04:54 - so let's go ahead and do this let me
04:56 - copy this
04:57 - let's just paste this straight in
05:00 - there we go there's my object literal
05:02 - and that's going to alert name why did
05:04 - that do that yeah because i don't
05:06 - want you
05:07 - go away
05:08 - let's just copy this in
05:11 - straight into my console and now i can
05:13 - go people let's look at what people is
05:15 - people is an object and it's got one
05:17 - thing on it i can run say name so i can
05:19 - go people.
05:21 - say name
05:23 - and that's going to alert will i cannot
05:25 - go people.what name equals will
05:28 - change that to bob
05:30 - it's going to say uh well it's going to
05:31 - set it
05:33 - but
05:35 - it's going to set it so now name equals
05:37 - bob but that's not the same
05:39 - as a variable that just added bob onto
05:42 - this object
05:44 - which doesn't do anything so name is
05:47 - still private name is still accessible
05:49 - if i run people.say name again
05:53 - it still says will awesome so will is
05:56 - really untouchable the only thing that
05:58 - can touch it is the function that i
06:00 - allow to be exposed so this is the
06:03 - revealing module pattern so let's kind
06:05 - of show you
06:06 - this people adder in a revealing module
06:08 - pattern i went ahead and coded it out
06:10 - for you
06:12 - vera people equals this function so with
06:14 - inside of this function i can now kind
06:16 - of do much more of that vanilla
06:18 - javascript kind of style i don't have to
06:20 - do all this i don't have to do all the
06:22 - methods
06:23 - that you saw previously
06:26 - i can go where people equals this and
06:28 - then i also don't need an init function
06:29 - this is my init function so it's
06:32 - automatically going to do anything i
06:34 - want it to do this executes right away
06:36 - so i just want to maybe add a comment
06:38 - just to kind of add my own separation of
06:40 - concerns here let's cache the dom
06:43 - let's bind some events
06:44 - and then let's render and then i'm going
06:46 - to create all my methods here
06:49 - and then i'm going to expose the ones
06:51 - that i want to expose out into people so
06:54 - you notice i have three functions i have
06:56 - render i have add person
06:58 - i have delete person
07:00 - uh but i'm not exposing render out i'm
07:02 - just exposing add person delete person
07:04 - so let's go ahead and save this
07:05 - let's restart this what did i call that
07:08 - i called it people okay still people
07:10 - so people
07:14 - let's see what i got i've got ad person
07:16 - and i've got delete person right pretty
07:18 - cool um so let's go ahead and do add
07:22 - person again let's let's do that thing
07:24 - there was one problem i had before so
07:26 - let's say i have
07:27 - value
07:31 - and let's say the name
07:34 - equals
07:36 - if value is type of string
07:40 - that's uh let's do it like this
07:46 - if i passed in a string
07:49 - then i want to use value as the name
07:52 - otherwise i'm going to get it out of the
07:54 - input the reason i have to do this is
07:56 - this is going to be an event if you
07:58 - click this button right here
08:00 - then it's going to listen to the button
08:02 - click and it's going to call ad person
08:04 - and there's going to be that click event
08:06 - right here so i don't always want to use
08:08 - the value
08:10 - i only want to use the value as the name
08:11 - if the str if if a string was passed in
08:14 - because if it's a javascript event then
08:16 - that's going to be an object if it came
08:17 - from up here
08:18 - if i'm firing add person from up here
08:20 - this will be an object so i don't always
08:22 - want to use that i only want to use that
08:24 - if it's a string
08:25 - so if i passed in a string then we'll
08:27 - use that as the name
08:29 - we'll use value otherwise we'll actually
08:30 - get the value out of the input
08:34 - and then we'll just push name
08:37 - there we go
08:39 - so now my api i should be able to go
08:41 - people.add person
08:44 - test
08:46 - there you go now i can add a personal i
08:48 - want i should be able to add a person
08:50 - here as well
08:51 - excellent so i should also be able to go
08:53 - people.delete person
08:55 - except for i don't know how to delete a
08:57 - person
08:58 - so let's just say that's an event
09:01 - um
09:02 - if
09:04 - event
09:05 - let's do the let's do this go there veri
09:08 - if
09:09 - event type of event
09:13 - equals a number
09:15 - if it's a number
09:18 - then i equals events
09:22 - else we have to get that eye by doing
09:24 - the index
09:26 - let's hope you watched the last video
09:28 - you have no idea what's going on
09:31 - there we go then we're going to splice
09:32 - it out
09:34 - and we're i gonna remove it so that's
09:36 - what's gonna go on
09:38 - there that should work as well so now i
09:39 - should have a public method for delete
09:42 - person
09:43 - let's delete person one nice steve is
09:46 - gone let's see if this one still works
09:48 - will is gone excellent so i should be
09:50 - able to add some people let's add test
09:53 - add test two
09:55 - let's delete person one let's delete
09:57 - person zero
09:59 - excellent so now we kind of have this
10:01 - api going on we can't control the
10:03 - rendering
10:04 - we can't mess with this people array but
10:07 - we do have control over exposing an ad
10:10 - person and a delete person function
10:12 - what's kind of cool is we can keep these
10:14 - internal methods whatever we want to
10:15 - call them here's a very common thing is
10:18 - if something's private if it's internal
10:20 - you'll see an underscore there so let me
10:21 - go find
10:22 - everywhere that render is called
10:26 - and give it an underscore
10:30 - underscore usually means it's private
10:32 - we're we're storing this internally
10:34 - we're never exposing it uh so that's
10:36 - kind of an uh
10:37 - an indicator that this is not ever going
10:39 - anywhere we use it
10:41 - and then these are the ones that
10:42 - actually get used out that'll still work
10:43 - make sure i didn't blow anything up yep
10:45 - we're good
10:46 - so i'll just put the code up there in
10:48 - codepen and let you look at this and
10:49 - that's a revealing module pattern and so
10:51 - then if we have some other module that
10:54 - other module can consume it as an api it
10:57 - can talk to person.ad person
10:59 - person.delete person and it can't blow
11:01 - anything up it's a safe module

Cleaned transcript:

so in the last video we covered modular js with the object literal pattern so once again that's that's called a design pattern that's kind of a way that you code and once again that was an object literal and again that's just making an object people equals an object and objects have properties name and then say name alerts will there we go and so one of the things that we don't like let's say we had set name and whenever the name got set we wanted to render the method so we had some rule that whenever this dot name equals a new name whenever this dot name equals the name we always want it to render at the same time so it's really bad if someone who doesn't maybe you're providing a library to be used as a thirdparty piece of software people shouldn't have access to this because you never want them to just automatically change people.name and just go i don't know what that's all about you never want them to go people.name equals bob because then it's not going to render bob is now just changed but nothing happened so they don't know how your program works they should only have access to say say name and set name they shouldn't be able to change this and so this is not necessarily always the pattern that you want to use there's also what's called a revealing module pattern so in this case instead of being an object it's actually a selfexecuting anonymous function and so for those you guys who are concerned or may have seen this before and and don't quite understand what that means i know i used this for i'd say a year when i started javascript but i never really understood exactly how it did what it did or what it was so let me take a slight little tangent and show you i can go ver a equals one and then i can go a dot to string and that's going to give me the string representation of my number one so that works but i cannot go 1.2 string that's going to fail because 1 is still just a number at this point it has not been evaluated when you say var a equals 1 1 gets evaluated it says oh ok that's a number type it actually gets converted into a number type and number types have methods i can go a dot see it's got two fixed to string to precision it's got all these methods to it now i can do this i can do in parentheses 1.2 string and so when you put in a parenthesis it forces javascript to evaluate it first and then treat it as the evaluated thing so this is basically doing the same thing it's just not getting assigned to a variable so this is going to work and i'm going to get 1. so same thing applies to a function i can create a function here say alert but i can't run it i can't run it right away because it's not been evaluated i can however wrap it in parentheses and now it gets evaluated and it's a function and then i can execute it and it alerts so that's basically all we're doing we're just writing out a function we're wrapping in parentheses here so that way it gets evaluated and then we can execute it right away we can even pass it variables i could say will and then up here i could receive a name and do something with my name in here so that's kind of cool we can actually pass this brand new function some variables so that's what that is if you're a little newer to that and you're not exactly sure what's going on and another cool thing happens is we create our own scope so i could go over name in here equals will and nobody outside of my function can access that i can't alert name this will fail because it's within the scope of this function it's not a global variable i could even have if i did very name equals bob up here then alerting name would alert bob even if i've already run this because their name inside of this function is will their name out here globally is bob so what that gives us the ability to do is create what are called private variables variables that only exist in our scope here any function inside of here can access it so if i have a function that says say name let's go function say name equal what am i doing and that alert name well that's going to have access to will so that alert will and right now if i run this this function is not returning anything so people won't have a value but what i can do is i can return an object and that could have a value of say name and then i just have to pass i don't know say name so i'm passing say name in as say name so i could also say i could call this say your name and it's still just gonna fire your say name um so let's go ahead and do this let me copy this let's just paste this straight in there we go there's my object literal and that's going to alert name why did that do that yeah because i don't want you go away let's just copy this in straight into my console and now i can go people let's look at what people is people is an object and it's got one thing on it i can run say name so i can go people. say name and that's going to alert will i cannot go people.what name equals will change that to bob it's going to say uh well it's going to set it but it's going to set it so now name equals bob but that's not the same as a variable that just added bob onto this object which doesn't do anything so name is still private name is still accessible if i run people.say name again it still says will awesome so will is really untouchable the only thing that can touch it is the function that i allow to be exposed so this is the revealing module pattern so let's kind of show you this people adder in a revealing module pattern i went ahead and coded it out for you vera people equals this function so with inside of this function i can now kind of do much more of that vanilla javascript kind of style i don't have to do all this i don't have to do all the methods that you saw previously i can go where people equals this and then i also don't need an init function this is my init function so it's automatically going to do anything i want it to do this executes right away so i just want to maybe add a comment just to kind of add my own separation of concerns here let's cache the dom let's bind some events and then let's render and then i'm going to create all my methods here and then i'm going to expose the ones that i want to expose out into people so you notice i have three functions i have render i have add person i have delete person uh but i'm not exposing render out i'm just exposing add person delete person so let's go ahead and save this let's restart this what did i call that i called it people okay still people so people let's see what i got i've got ad person and i've got delete person right pretty cool um so let's go ahead and do add person again let's let's do that thing there was one problem i had before so let's say i have value and let's say the name equals if value is type of string that's uh let's do it like this if i passed in a string then i want to use value as the name otherwise i'm going to get it out of the input the reason i have to do this is this is going to be an event if you click this button right here then it's going to listen to the button click and it's going to call ad person and there's going to be that click event right here so i don't always want to use the value i only want to use the value as the name if the str if if a string was passed in because if it's a javascript event then that's going to be an object if it came from up here if i'm firing add person from up here this will be an object so i don't always want to use that i only want to use that if it's a string so if i passed in a string then we'll use that as the name we'll use value otherwise we'll actually get the value out of the input and then we'll just push name there we go so now my api i should be able to go people.add person test there you go now i can add a personal i want i should be able to add a person here as well excellent so i should also be able to go people.delete person except for i don't know how to delete a person so let's just say that's an event um if event let's do the let's do this go there veri if event type of event equals a number if it's a number then i equals events else we have to get that eye by doing the index let's hope you watched the last video you have no idea what's going on there we go then we're going to splice it out and we're i gonna remove it so that's what's gonna go on there that should work as well so now i should have a public method for delete person let's delete person one nice steve is gone let's see if this one still works will is gone excellent so i should be able to add some people let's add test add test two let's delete person one let's delete person zero excellent so now we kind of have this api going on we can't control the rendering we can't mess with this people array but we do have control over exposing an ad person and a delete person function what's kind of cool is we can keep these internal methods whatever we want to call them here's a very common thing is if something's private if it's internal you'll see an underscore there so let me go find everywhere that render is called and give it an underscore underscore usually means it's private we're we're storing this internally we're never exposing it uh so that's kind of an uh an indicator that this is not ever going anywhere we use it and then these are the ones that actually get used out that'll still work make sure i didn't blow anything up yep we're good so i'll just put the code up there in codepen and let you look at this and that's a revealing module pattern and so then if we have some other module that other module can consume it as an api it can talk to person.ad person person.delete person and it can't blow anything up it's a safe module
