With timestamps:

00:00 - in this video we are going to talk about
00:01 - react state management and my favorite
00:03 - way to do it which is using mob x reacts
00:05 - lights use local observables we're going
00:08 - to take this flat
00:09 - app that we have right here we're going
00:11 - to actually give it some state and turn
00:12 - it into a real app very very quickly
00:14 - here's my two cents by the way on state
00:16 - management if you have a very simple app
00:18 - or a single component that has state
00:20 - that only affects that component use
00:23 - react use state unless that state starts
00:25 - getting a little complex even for one
00:27 - component pretty much any other use case
00:30 - use mobx react lights use local
00:32 - observable hook you're going to save
00:33 - yourself a ton of time you're going to
00:34 - enjoy your life a lot better it's easier
00:36 - to test it's easier for everything
00:39 - if you do have an app with extraordinary
00:41 - complexity redux might be something you
00:43 - want to move to maybe
00:45 - this can handle a lot of complexity
00:48 - but you really
00:49 - usually if you need redux
00:51 - what you should probably ask yourself
00:53 - first is can i break this app up into
00:56 - micro apps within one app that i'll
00:58 - manage a much simpler state
01:00 - much simpler event structures
01:04 - that then persist to a backend or
01:05 - persist to local storage or something so
01:08 - that way i have basically a bunch of
01:09 - micro apps that are much easier to work
01:11 - on i think the days of having this
01:13 - enormous monolithic front end react app
01:16 - with super complex state and event
01:19 - sequences
01:20 - most of the time that's just not
01:22 - necessary and it's a bad design pattern
01:24 - it's kind of a little bit more of a
01:26 - smell there are use cases where you need
01:28 - enormous complexity but lots of the time
01:30 - you can carve out individual micro front
01:33 - ends within your one big front end so
01:35 - off of that soap box let's get into
01:37 - having some fun let's turn this thing
01:39 - into an actual app so to use use local
01:42 - observable you basically are going to
01:44 - import two things you're going to import
01:46 - observer
01:47 - from mobx react light and you're also
01:49 - going to import use local observable
01:52 - now that i've got those in all i do is i
01:54 - wrap my actual function with observer
01:57 - after export defaults we wrap the
01:59 - function in observer come all the way
02:01 - down here add my closing
02:03 - parens and then you can use the use
02:05 - local observable hook
02:09 - so now we have to do store to do store
02:11 - is an observable object so anytime
02:13 - anything inside of it changes our
02:14 - component is going to re-render as long
02:16 - as it is wrapped in observer this is the
02:19 - number one thing that people make a
02:20 - mistake of if they start using mob x
02:22 - is that if you're not wrapped in
02:23 - observer your component is not going to
02:25 - change even when you change these values
02:28 - so let's say i could make a a test value
02:30 - here and a test method to change that
02:32 - value
02:36 - so there we go i've added a name of will
02:38 - and then anytime i run this change name
02:40 - function it will actually set it and
02:42 - that's all it takes so let's actually
02:44 - make use of this in a little test here
02:53 - all right so i've gone ahead and clicked
02:54 - this and i've reloaded my page over here
02:57 - and so now i am spitting out the to do
02:59 - store name and if i click the button
03:02 - definitely not will then of course i
03:03 - click it over and over and over again
03:05 - and it's always going to change it to
03:06 - the exact same thing but that's as
03:08 - complex as it is you set values in your
03:10 - local observable observable object
03:13 - and then anytime you want an action what
03:15 - would be considered an action that
03:16 - changes the data just add a method on
03:18 - that object this method could do a set
03:21 - timeout it could load asynchronous data
03:23 - it doesn't really matter it functions
03:25 - just like standard javascript and
03:27 - whenever this method mutates a value on
03:30 - the object your component's going to
03:31 - re-render whether it mutates it now or
03:34 - whether it mutates it three seconds from
03:36 - now
03:40 - now you can see that i've added a set
03:42 - timeout to it so if i click this it's
03:44 - going to definitely not will and then in
03:47 - three seconds it's going to do some
03:49 - hard-coded name it just works it just
03:51 - works all the time you don't have to
03:53 - worry about any creepy stale closures or
03:56 - anything like that that you oftentimes
03:58 - run into when you're using use state and
04:00 - react so let's go and actually figure
04:02 - out how we're going to connect this to
04:03 - our to do store app and have some fun we
04:07 - probably should make a to do's array
04:10 - now this is going to by default be an
04:11 - observable array observable arrays are
04:13 - exactly like normal arrays in terms of
04:16 - how they function although mobx does
04:17 - give you three very cool methods on it
04:20 - they give you dot clear
04:22 - dot uh let's see remove that's very very
04:25 - useful i can remove one item from there
04:27 - and they also give you dot replace which
04:29 - allows you to replace that with an
04:31 - entire new array besides that they are
04:33 - completely normal arrays so let's go and
04:35 - create a really quick delete to do
04:37 - method
04:40 - there you go that's all we're going to
04:41 - have to do to actually remove a to do
04:43 - from the array if if we are passed to to
04:45 - do we can say hey remove this object
04:48 - which will be an object in there let's
04:50 - go and create some first few objects and
04:52 - then wire this hard-coded data up to
04:54 - those actual objects
05:00 - there we go i made my first one we're
05:01 - going to need some sort of id so that
05:03 - way they can have a unique key and react
05:05 - a title whether or not they're pinned
05:07 - you can see we've got some pinned items
05:09 - here which is i guess the star is
05:10 - favorited could be also something else
05:12 - we call it
05:13 - uh is complete that'll give it a little
05:15 - scratch out and then is editing is false
05:19 - if we click on it then we're gonna
05:20 - change it to is editing and show an
05:22 - input box instead of a span field
05:25 - and then if we delete it then it's just
05:27 - going to trash it it's going to remove
05:29 - it from the to-dos array so we don't
05:30 - need it is deleted
05:32 - let's go ahead now and wire some of
05:33 - these up here
05:46 - all right what we've done is we're
05:47 - mapping the to-do's out here we're
05:48 - spitting out the title and we're also
05:50 - going to spit out some buttons that just
05:51 - have emojis in them and they're going to
05:52 - fire these three methods toggle complete
05:55 - delete to do and toggle pin now we've
05:58 - already created delete to do let's see
05:59 - if that works
06:00 - yep it goes away nice so then if i
06:02 - refresh that's going to come back
06:04 - let's go and add a toggle complete
06:06 - method and a toggle pin method which
06:07 - will be stupid simple
06:13 - yeah if it's uh we're just gonna say hey
06:16 - is complete is the opposite of whatever
06:18 - is complete is right now
06:21 - and we'll do the same thing for pin
06:26 - and now check this out this is a very
06:27 - important thing so i've saved my file
06:30 - this hot loading has happened over here
06:32 - and if i check right here toggle
06:34 - complete i'm actually going to get an
06:36 - error hey toggle complete is not a
06:37 - function well clearly it is i added it
06:40 - over here on the left why is that the
06:42 - case
06:42 - if if the concept of hot reloading
06:45 - versus live reloading is new to you what
06:47 - just happened is is my component code
06:50 - down here hot reloaded but my state of
06:53 - my application did not reload and that
06:55 - is a very very good thing let's say i'm
06:58 - coding and i click 30 things to get my
07:00 - ui into a specific state i want it right
07:03 - i've clicked 30 things which mutated
07:06 - this store 30 different ways and now
07:08 - i've got my state and i just want to
07:10 - come down here and all i want to do is
07:11 - add an exclamation to the title right
07:14 - well that should happen but i shouldn't
07:16 - have to re-click the 30 things
07:18 - to get this state in some complex
07:21 - state in order to view my exclamation
07:24 - mark so what hot reloading does is on
07:26 - file changes your react markup will
07:30 - reload but your store will not reload
07:33 - until you refresh so i've got the old
07:35 - store that did not have these two
07:37 - methods in it that is what right now is
07:39 - in memory over here and any state
07:42 - changes that i've made so if i ever
07:44 - change the store i have to refresh the
07:47 - browser to get that that's a good good
07:49 - thing
07:50 - what it means is that if i trash this
07:53 - okay now i have state right my to do
07:55 - store has the to do deleted
07:57 - and i can go ahead and delete this title
07:59 - i can do a bunch of things and you
08:01 - notice my to-do
08:02 - my to-do is still gone because i've
08:04 - deleted it
08:06 - so if i want that to do back i just
08:07 - reload and then i've got my new store
08:10 - done so that's what hot reloading is a
08:12 - lot of people
08:13 - forget about the differences between
08:15 - live reloading and hot reloading live
08:17 - reloading would just refresh the page
08:19 - when a file change happens
08:21 - now but that does not happen here when a
08:22 - file change happens really only this
08:25 - code changes or or should i say
08:27 - everything that is not in this hook
08:30 - changes so that's important as you're
08:32 - working with mob x you're going to get a
08:34 - lot of those if you're not aware of
08:36 - what's going on so i've toggled my
08:38 - complete here
08:39 - i should be able to do this yep it's
08:42 - toggling but we're not noticing it
08:44 - because what i have to do is i have to
08:46 - create a complete class
08:48 - i have two css classes here one called
08:50 - complete
08:51 - complete is going to strike through it's
08:53 - just a visual thing and then i also have
08:55 - pinned
08:56 - and pinned is going to make it look dark
08:59 - pins should always be at the top and
09:00 - they should have that pinned class so
09:02 - what i need to do is now make this class
09:04 - name dynamic
09:10 - if my to-do is complete
09:12 - then we're going to strike through yes
09:14 - we're good to go awesome and then later
09:16 - on i can add that pinned as well if
09:18 - we're pinned so in order to do that i'm
09:20 - going to filter out my to-do's list
09:23 - using some helper methods some computed
09:25 - functions i can use a getter here
09:29 - and i can only return the to-do's that
09:31 - are pinned
09:37 - and then i'm also going to make a getter
09:38 - function for unpinned to do's
09:43 - and then instead of mapping uh all the
09:45 - to-do's i'm going to map the pinned
09:47 - to-do's
09:50 - and then later down here i'm going to
09:51 - map the unpinned to do's i should make
09:53 - this all reusable code but i'm going to
09:55 - be lazy for the sake of this video
09:57 - forget about it
09:59 - so now the pins to do's are going to map
10:00 - up top
10:01 - the unpinned to-do's are going to map
10:03 - down below you can see i've got that
10:05 - same error unpin to do is it doesn't
10:07 - know anything about it if i refresh my
10:08 - page it knows about it now
10:12 - and i'm going to make sure my pinned
10:13 - to-do's always have a pinned class
10:18 - now i should be able to yes pin it unpin
10:20 - it sweet and if i add a new one let's do
10:22 - a create button that's going to be super
10:24 - easy to do create on click
10:38 - okay the create function is super super
10:41 - easy we're just going to push something
10:42 - onto the array and it's going to have a
10:44 - title it's going to have that it's
10:45 - pinned to false complete false but it's
10:46 - going to be editing true so that's fun
10:48 - we're going to get to add our editing
10:49 - here
10:50 - so now i should be able to create
10:52 - yippee i can create a whole bunch of
10:54 - them
10:55 - and let's go ahead and say that if our
10:57 - title or if we are editing that we don't
10:59 - show a span we show an input instead
11:23 - methods
11:30 - there we go and i'm also going to have a
11:32 - click event to just the span mode so if
11:34 - you're not editing and you click on the
11:36 - span then we're going to kick into
11:38 - editing mode
11:47 - okay now we should be able to kick
11:48 - anything into edit mode yes we can and
11:50 - we've got our name there
11:52 - and if we click away we are updating our
11:54 - name yippee that is complete so now we
11:57 - can click
11:59 - we can undo we can pin
12:02 - we can create some more things
12:05 - test 45 wow nice big leap there let's
12:07 - pin some of these let's unpin some of
12:09 - these let's trash this let's trash this
12:12 - and i think our app is done it was just
12:15 - a few minutes
12:16 - using use local observables is a ton of
12:19 - fun so where do we go from here right
12:20 - this thing's getting pretty big
12:22 - we could abstract this out in a really
12:24 - cool way here as it is just a plain
12:26 - javascript object we can import this
12:29 - let's go and create a stores folder in
12:31 - our
12:32 - project
12:34 - and let's create a to-do's store
12:39 - i'm gonna capitalize it because it is
12:41 - not an instance it is something an
12:42 - instance is made for
12:44 - there you go i've just copied all of my
12:46 - logic and check this out for testing if
12:48 - we want to test our logic oh how simple
12:51 - will this be it is literally just a
12:53 - plain javascript object that's all it is
12:56 - now let's go back over here
12:58 - and we're going to import to do store
13:00 - and everything should still work just
13:01 - fine
13:03 - yep everything still works just fine
13:05 - nothing's wrong also if we want to now
13:07 - test our ui think how simple this will
13:09 - be we can inject any prefabricated state
13:12 - of the to do store right we can inject
13:15 - something that has 30 to do's we can
13:16 - inject something that has no to do's
13:19 - we can do whatever we want to do
13:21 - and we should expect that our ui will
13:23 - behave a certain way based on this thing
13:25 - right here being injected super super
13:28 - super cool it makes it really easy to
13:30 - test your logic versus your display
13:33 - layer just effortlessly uh
13:36 - really this is this is the pattern that
13:38 - people should be using
13:40 - another thing that you can do is you can
13:41 - go over to your app layer let's go to my
13:43 - app.js which is next js assuming you
13:46 - have some top level app component you
13:49 - could create a store right here
13:54 - you could create an app store
13:56 - use local observable then you could pass
13:59 - that through with the react context so
14:01 - then i have this like app store context
14:04 - that is getting passed down through my
14:05 - entire application
14:07 - and then i can come over here and i can
14:10 - use context
14:14 - and i can pass in the app store context
14:17 - if you don't understand how to do use
14:19 - context uh go ahead and look at the
14:20 - react documentations for use context and
14:23 - now i can modify app store just like i
14:25 - could anywhere else i could have 30
14:27 - stores that are available on the app
14:29 - level and pull those in with context
14:31 - whenever i need them and whenever i
14:33 - don't it keeps the testing of things
14:35 - very very simple
14:36 - it allows this thing to be tested based
14:39 - on any app state on any to do state it
14:42 - just makes your life happy and as you
14:44 - can see in just a couple minutes we were
14:45 - able to build out this to-do app so
14:48 - that's use local observable that's why
14:50 - it's my default it just makes your life
14:52 - happy and simple i encourage you guys to
14:54 - go test it out try it on some
14:55 - applications you don't have to overhaul
14:57 - your entire application to use it in
14:59 - just a few places it's it's a great tool
15:01 - it's what i encourage people to use as
15:03 - their default state management for react
15:14 - you

Cleaned transcript:

in this video we are going to talk about react state management and my favorite way to do it which is using mob x reacts lights use local observables we're going to take this flat app that we have right here we're going to actually give it some state and turn it into a real app very very quickly here's my two cents by the way on state management if you have a very simple app or a single component that has state that only affects that component use react use state unless that state starts getting a little complex even for one component pretty much any other use case use mobx react lights use local observable hook you're going to save yourself a ton of time you're going to enjoy your life a lot better it's easier to test it's easier for everything if you do have an app with extraordinary complexity redux might be something you want to move to maybe this can handle a lot of complexity but you really usually if you need redux what you should probably ask yourself first is can i break this app up into micro apps within one app that i'll manage a much simpler state much simpler event structures that then persist to a backend or persist to local storage or something so that way i have basically a bunch of micro apps that are much easier to work on i think the days of having this enormous monolithic front end react app with super complex state and event sequences most of the time that's just not necessary and it's a bad design pattern it's kind of a little bit more of a smell there are use cases where you need enormous complexity but lots of the time you can carve out individual micro front ends within your one big front end so off of that soap box let's get into having some fun let's turn this thing into an actual app so to use use local observable you basically are going to import two things you're going to import observer from mobx react light and you're also going to import use local observable now that i've got those in all i do is i wrap my actual function with observer after export defaults we wrap the function in observer come all the way down here add my closing parens and then you can use the use local observable hook so now we have to do store to do store is an observable object so anytime anything inside of it changes our component is going to rerender as long as it is wrapped in observer this is the number one thing that people make a mistake of if they start using mob x is that if you're not wrapped in observer your component is not going to change even when you change these values so let's say i could make a a test value here and a test method to change that value so there we go i've added a name of will and then anytime i run this change name function it will actually set it and that's all it takes so let's actually make use of this in a little test here all right so i've gone ahead and clicked this and i've reloaded my page over here and so now i am spitting out the to do store name and if i click the button definitely not will then of course i click it over and over and over again and it's always going to change it to the exact same thing but that's as complex as it is you set values in your local observable observable object and then anytime you want an action what would be considered an action that changes the data just add a method on that object this method could do a set timeout it could load asynchronous data it doesn't really matter it functions just like standard javascript and whenever this method mutates a value on the object your component's going to rerender whether it mutates it now or whether it mutates it three seconds from now now you can see that i've added a set timeout to it so if i click this it's going to definitely not will and then in three seconds it's going to do some hardcoded name it just works it just works all the time you don't have to worry about any creepy stale closures or anything like that that you oftentimes run into when you're using use state and react so let's go and actually figure out how we're going to connect this to our to do store app and have some fun we probably should make a to do's array now this is going to by default be an observable array observable arrays are exactly like normal arrays in terms of how they function although mobx does give you three very cool methods on it they give you dot clear dot uh let's see remove that's very very useful i can remove one item from there and they also give you dot replace which allows you to replace that with an entire new array besides that they are completely normal arrays so let's go and create a really quick delete to do method there you go that's all we're going to have to do to actually remove a to do from the array if if we are passed to to do we can say hey remove this object which will be an object in there let's go and create some first few objects and then wire this hardcoded data up to those actual objects there we go i made my first one we're going to need some sort of id so that way they can have a unique key and react a title whether or not they're pinned you can see we've got some pinned items here which is i guess the star is favorited could be also something else we call it uh is complete that'll give it a little scratch out and then is editing is false if we click on it then we're gonna change it to is editing and show an input box instead of a span field and then if we delete it then it's just going to trash it it's going to remove it from the todos array so we don't need it is deleted let's go ahead now and wire some of these up here all right what we've done is we're mapping the todo's out here we're spitting out the title and we're also going to spit out some buttons that just have emojis in them and they're going to fire these three methods toggle complete delete to do and toggle pin now we've already created delete to do let's see if that works yep it goes away nice so then if i refresh that's going to come back let's go and add a toggle complete method and a toggle pin method which will be stupid simple yeah if it's uh we're just gonna say hey is complete is the opposite of whatever is complete is right now and we'll do the same thing for pin and now check this out this is a very important thing so i've saved my file this hot loading has happened over here and if i check right here toggle complete i'm actually going to get an error hey toggle complete is not a function well clearly it is i added it over here on the left why is that the case if if the concept of hot reloading versus live reloading is new to you what just happened is is my component code down here hot reloaded but my state of my application did not reload and that is a very very good thing let's say i'm coding and i click 30 things to get my ui into a specific state i want it right i've clicked 30 things which mutated this store 30 different ways and now i've got my state and i just want to come down here and all i want to do is add an exclamation to the title right well that should happen but i shouldn't have to reclick the 30 things to get this state in some complex state in order to view my exclamation mark so what hot reloading does is on file changes your react markup will reload but your store will not reload until you refresh so i've got the old store that did not have these two methods in it that is what right now is in memory over here and any state changes that i've made so if i ever change the store i have to refresh the browser to get that that's a good good thing what it means is that if i trash this okay now i have state right my to do store has the to do deleted and i can go ahead and delete this title i can do a bunch of things and you notice my todo my todo is still gone because i've deleted it so if i want that to do back i just reload and then i've got my new store done so that's what hot reloading is a lot of people forget about the differences between live reloading and hot reloading live reloading would just refresh the page when a file change happens now but that does not happen here when a file change happens really only this code changes or or should i say everything that is not in this hook changes so that's important as you're working with mob x you're going to get a lot of those if you're not aware of what's going on so i've toggled my complete here i should be able to do this yep it's toggling but we're not noticing it because what i have to do is i have to create a complete class i have two css classes here one called complete complete is going to strike through it's just a visual thing and then i also have pinned and pinned is going to make it look dark pins should always be at the top and they should have that pinned class so what i need to do is now make this class name dynamic if my todo is complete then we're going to strike through yes we're good to go awesome and then later on i can add that pinned as well if we're pinned so in order to do that i'm going to filter out my todo's list using some helper methods some computed functions i can use a getter here and i can only return the todo's that are pinned and then i'm also going to make a getter function for unpinned to do's and then instead of mapping uh all the todo's i'm going to map the pinned todo's and then later down here i'm going to map the unpinned to do's i should make this all reusable code but i'm going to be lazy for the sake of this video forget about it so now the pins to do's are going to map up top the unpinned todo's are going to map down below you can see i've got that same error unpin to do is it doesn't know anything about it if i refresh my page it knows about it now and i'm going to make sure my pinned todo's always have a pinned class now i should be able to yes pin it unpin it sweet and if i add a new one let's do a create button that's going to be super easy to do create on click okay the create function is super super easy we're just going to push something onto the array and it's going to have a title it's going to have that it's pinned to false complete false but it's going to be editing true so that's fun we're going to get to add our editing here so now i should be able to create yippee i can create a whole bunch of them and let's go ahead and say that if our title or if we are editing that we don't show a span we show an input instead methods there we go and i'm also going to have a click event to just the span mode so if you're not editing and you click on the span then we're going to kick into editing mode okay now we should be able to kick anything into edit mode yes we can and we've got our name there and if we click away we are updating our name yippee that is complete so now we can click we can undo we can pin we can create some more things test 45 wow nice big leap there let's pin some of these let's unpin some of these let's trash this let's trash this and i think our app is done it was just a few minutes using use local observables is a ton of fun so where do we go from here right this thing's getting pretty big we could abstract this out in a really cool way here as it is just a plain javascript object we can import this let's go and create a stores folder in our project and let's create a todo's store i'm gonna capitalize it because it is not an instance it is something an instance is made for there you go i've just copied all of my logic and check this out for testing if we want to test our logic oh how simple will this be it is literally just a plain javascript object that's all it is now let's go back over here and we're going to import to do store and everything should still work just fine yep everything still works just fine nothing's wrong also if we want to now test our ui think how simple this will be we can inject any prefabricated state of the to do store right we can inject something that has 30 to do's we can inject something that has no to do's we can do whatever we want to do and we should expect that our ui will behave a certain way based on this thing right here being injected super super super cool it makes it really easy to test your logic versus your display layer just effortlessly uh really this is this is the pattern that people should be using another thing that you can do is you can go over to your app layer let's go to my app.js which is next js assuming you have some top level app component you could create a store right here you could create an app store use local observable then you could pass that through with the react context so then i have this like app store context that is getting passed down through my entire application and then i can come over here and i can use context and i can pass in the app store context if you don't understand how to do use context uh go ahead and look at the react documentations for use context and now i can modify app store just like i could anywhere else i could have 30 stores that are available on the app level and pull those in with context whenever i need them and whenever i don't it keeps the testing of things very very simple it allows this thing to be tested based on any app state on any to do state it just makes your life happy and as you can see in just a couple minutes we were able to build out this todo app so that's use local observable that's why it's my default it just makes your life happy and simple i encourage you guys to go test it out try it on some applications you don't have to overhaul your entire application to use it in just a few places it's it's a great tool it's what i encourage people to use as their default state management for react you
