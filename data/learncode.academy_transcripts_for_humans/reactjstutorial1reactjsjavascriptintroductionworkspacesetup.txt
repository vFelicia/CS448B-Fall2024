With timestamps:

00:00 - I am really excited about this series on
00:03 - react I've been wanting to do it for a
00:04 - year I've been coding react 40 hours a
00:07 - week working on react apps for at least
00:09 - a year now and I'm loving the tool
00:11 - loving the frameworks you build with
00:13 - react and it just changes the way that
00:16 - you think there's several concepts that
00:18 - react introduces that drastically
00:21 - changes the way you approach building
00:23 - web apps and building stable web apps so
00:27 - I really like it I think you'll love it
00:29 - as well like I said changes the way you
00:31 - think for the better so let's get into
00:32 - it
00:33 - only prerequisites for watching this is
00:35 - you need to know a little bit of web
00:36 - pack which I just did a web pack video
00:38 - so you can get up to speed and you want
00:40 - to know es6 I have a few videos on es6
00:43 - as well you don't have to master es6 you
00:46 - just have to kind of generally know what
00:47 - the concepts are so go to watch those
00:49 - videos if you haven't seen them and then
00:51 - let's get into react so all my code will
00:54 - be in a github repo for this whole
00:56 - series we're going to start off in the
00:58 - basic react folder and I did a little
01:01 - bit to add on to where we picked we left
01:03 - off with the web pack video I've
01:04 - installed some babel stuff babel is a
01:08 - great tool for transpiling our react
01:10 - code which is JSX and then it'll also
01:13 - transpile our es6 code at the same time
01:16 - and then this will go all the way back
01:17 - to at least ie8 support my company
01:20 - supports IE 8 so i can tell you that all
01:22 - the code we're doing here does work in
01:24 - IE 8 so that's great
01:27 - and we got those installed and here's
01:30 - what the web pack config looks like the
01:32 - biggest change is you see I've added a
01:34 - loader here so anything that's a j/s
01:37 - file gets run through the babel loader
01:39 - with the exception of node modules and
01:41 - bower components should we have those
01:44 - and then they'll basically transpile
01:47 - react JSX transpile es6 code and we're
01:51 - also going to do some bleeding edge
01:52 - features that might not be fully
01:54 - incorporated yet into es 2015 just in
01:58 - case you want to use those we probably
01:59 - won't get into those in this video we're
02:01 - going to convert some react to HTML
02:03 - attributes we're going to add class
02:04 - properties D S 6 which is a great
02:06 - feature we're also going to be able to
02:08 - use decorators so there we go that's a
02:10 - that's our transpiling
02:12 - and now we just have to run way
02:13 - pack to build our code you can see we're
02:15 - basically taking client J s up here and
02:18 - we're transpiling it down to be client
02:20 - min j s which is all of our code which
02:22 - is right there so here's our index.html
02:25 - we simply have an active div id app
02:29 - that's it our entire app is going to
02:30 - render into there and then our client
02:33 - Minjae s is of course we're loading that
02:35 - so let's go and run an NPM install get
02:40 - all that going that's good oh yeah I
02:43 - already ran NPM install and we should
02:45 - just be able to run web pack there we go
02:49 - it transpile we could also run web pack
02:51 - watch and that will watch our code for
02:54 - changes and as we save it'll continue to
02:57 - reach ange so I'll take the client J s
02:59 - you can see that it will well there were
03:01 - no changes there so it didn't read it
03:03 - didn't reach reinstall a add an S you
03:07 - can see there we go
03:07 - re transpiled everything so we're going
03:10 - let's go and look at this client J s now
03:12 - start breaking down the extreme basics
03:14 - of react app we're going to import react
03:17 - we're going to port react Dom which is
03:20 - our rendering engine now react is great
03:23 - in that you don't have to render it to
03:25 - HTML you can render to a whole bunch of
03:28 - stuff you can render to a string you can
03:30 - render it to the Dom which is our active
03:33 - web page is what we're using here and
03:35 - the actual rendering engine is separate
03:37 - from the react syntax which is very cool
03:40 - concept that makes it the code you write
03:42 - extremely versatile even towards native
03:44 - apps and things like that so the first
03:47 - thing we're going to do is we're going
03:48 - to create a layout component or layout
03:50 - class we're extending the react
03:51 - component the core of react is
03:55 - everything is a component if you were
03:58 - looking in index dot HTML everything is
04:01 - an element in HTML it's a body element
04:05 - with a div element and that's kind of
04:07 - the concept Beach went behind react
04:08 - components everything is a component
04:12 - instead of an element so in this case we
04:14 - have a layout component and the very
04:16 - basic you need a render method for a
04:18 - component so the render method is a what
04:20 - are we spitting out and here's the JSX
04:23 - part of it which will freak you out at
04:24 - first is anything wrapped in per
04:27 - can convert HTML to JavaScript created
04:31 - elements so in JavaScript you can do
04:34 - document create elements up you know now
04:41 - I just made a div and then I can do you
04:43 - know Verde of equals then I can go div
04:47 - dot inner HTML equals some content so
04:52 - this is basically going to transpile
04:54 - down to stuff like that but that's a
04:56 - real pain to type so JSX allows you to
04:59 - type something that's much more familiar
05:01 - you can get great syntax highlighting on
05:03 - it if you install a JSX plugin to
05:07 - whatever text editor you're using atom
05:09 - or sublime and it'll transpile it down
05:12 - so at first it feels very awkward
05:14 - because you're kind of thinking aren't
05:16 - eye blending HTML with JavaScript and
05:18 - then you finally realize no JavaScript
05:20 - creates HTML elements all the time this
05:23 - is just an easy way to do it day in day
05:26 - out it makes it easy for the developer
05:27 - and then if you ever want to render a
05:30 - component you use it as if it were an
05:33 - HTML tag so just like this
05:35 - I'm telling now here's my component for
05:38 - my whole layout I'm going to go get the
05:41 - app element which is this guy right here
05:43 - my ID of app and I'm going to render my
05:47 - layout into app and that's my react app
05:50 - okay web pack is running and then let's
05:53 - go ahead open up my file here my HTML
05:57 - file and there you go it works so I can
06:01 - again go it's working transpiled it it's
06:10 - working ok great
06:11 - so let's wrap up our workspace in our
06:14 - workflow here obviously we'll want to
06:17 - get some kind of live reload happening
06:19 - and web pack dev server is kind of the
06:21 - standard way of doing that so let's go
06:24 - ahead and go npm install web pack Deb
06:29 - server
06:33 - let's go ahead and get it maybe an NPM
06:35 - run dev command going so web pack dev
06:38 - server is running
06:40 - and let's go so now we could actually
06:41 - run let me install this globally as well
06:44 - which I won't be using but I'll do it
06:47 - for now let's get web pack dev server
06:54 - installed globally so I have the web
06:56 - pack dev server command actually I need
07:01 - to give it a content base so since I
07:07 - don't want to serve this folder that I'm
07:10 - in right now I want to serve the source
07:12 - folder so I'm just going to go content
07:14 - base is source it's that way it's going
07:16 - to serve index.html will be the root of
07:19 - that so now I can actually go to
07:22 - localhost 8080 and there we go I have
07:29 - localhost 8080 working let me go ahead
07:32 - and get a split screen going on now but
07:34 - I don't have live reload up yet you can
07:36 - do two things by default you can go the
07:38 - iframe mode which is just web pack dev
07:41 - server and that's index.html and you'll
07:46 - see this loader bar up there and it will
07:49 - automatically load your app into a brand
07:51 - new iframe every time so let's go to
07:53 - working it's going to recompile reload
07:55 - so that's kind of smooth if that works
07:57 - for you straight out of the bag that's
08:00 - great
08:00 - another thing you can do is you can add
08:02 - the inline flag and hot flag hot will
08:07 - help it do inline a little bit better so
08:10 - if you had inline in hot then you're not
08:13 - going to have that top and it's just
08:15 - going to automatically do it inline
08:16 - which is basically live reload so we're
08:19 - going to go ahead go ahead and take that
08:20 - command we're going to just go ahead and
08:24 - make that's kind of a mouthful to type
08:26 - every time so let's go ahead and add
08:28 - that to our package.json let's go to our
08:31 - scripts let's make a dev there we go npm
08:38 - run dev now we'll run this command for
08:40 - us excellence
08:45 - MPM run dev gets our full web pack dev
08:48 - server running and we're up and rolling
08:50 - only other thing I'm going to change is
08:52 - I don't want to have all my developers
08:54 - have to do an NPM install global of web
08:57 - pack dev server so I'm actually going to
09:00 - reference what the node modules been you
09:03 - can see that it installs a command of
09:05 - web pack depths or installs a an
09:07 - executable web pack dev server as well
09:09 - so I can actually execute this command
09:11 - with dot slash so I'm going to go dot
09:14 - slash node modules dot bin slash web
09:19 - pack dev server and that's taken care of
09:22 - by my package now so now I can actually
09:25 - uninstall G web pack dev server going to
09:34 - uninstall that one and now NPM run dev
09:36 - will still work because I'm referencing
09:39 - the one that's in my repository so
09:42 - that's a little bit of a cleaner way at
09:43 - first with no js' we always had
09:46 - everybody install a global for
09:48 - everything and now I just think it's
09:50 - much cleaner to install it with your
09:53 - package install it locally to your app
09:56 - that way the the exact version you need
09:58 - for your app is installed in your app
10:00 - folder and then you run it with a node
10:02 - script npm run dev or npm start is kind
10:06 - of the standard choices that you would
10:08 - pick so there we go that's running
10:11 - that's our setup for react let's
10:13 - actually in the next video get into all
10:15 - these components and how to work with
10:17 - them

Cleaned transcript:

I am really excited about this series on react I've been wanting to do it for a year I've been coding react 40 hours a week working on react apps for at least a year now and I'm loving the tool loving the frameworks you build with react and it just changes the way that you think there's several concepts that react introduces that drastically changes the way you approach building web apps and building stable web apps so I really like it I think you'll love it as well like I said changes the way you think for the better so let's get into it only prerequisites for watching this is you need to know a little bit of web pack which I just did a web pack video so you can get up to speed and you want to know es6 I have a few videos on es6 as well you don't have to master es6 you just have to kind of generally know what the concepts are so go to watch those videos if you haven't seen them and then let's get into react so all my code will be in a github repo for this whole series we're going to start off in the basic react folder and I did a little bit to add on to where we picked we left off with the web pack video I've installed some babel stuff babel is a great tool for transpiling our react code which is JSX and then it'll also transpile our es6 code at the same time and then this will go all the way back to at least ie8 support my company supports IE 8 so i can tell you that all the code we're doing here does work in IE 8 so that's great and we got those installed and here's what the web pack config looks like the biggest change is you see I've added a loader here so anything that's a j/s file gets run through the babel loader with the exception of node modules and bower components should we have those and then they'll basically transpile react JSX transpile es6 code and we're also going to do some bleeding edge features that might not be fully incorporated yet into es 2015 just in case you want to use those we probably won't get into those in this video we're going to convert some react to HTML attributes we're going to add class properties D S 6 which is a great feature we're also going to be able to use decorators so there we go that's a that's our transpiling and now we just have to run way pack to build our code you can see we're basically taking client J s up here and we're transpiling it down to be client min j s which is all of our code which is right there so here's our index.html we simply have an active div id app that's it our entire app is going to render into there and then our client Minjae s is of course we're loading that so let's go and run an NPM install get all that going that's good oh yeah I already ran NPM install and we should just be able to run web pack there we go it transpile we could also run web pack watch and that will watch our code for changes and as we save it'll continue to reach ange so I'll take the client J s you can see that it will well there were no changes there so it didn't read it didn't reach reinstall a add an S you can see there we go re transpiled everything so we're going let's go and look at this client J s now start breaking down the extreme basics of react app we're going to import react we're going to port react Dom which is our rendering engine now react is great in that you don't have to render it to HTML you can render to a whole bunch of stuff you can render to a string you can render it to the Dom which is our active web page is what we're using here and the actual rendering engine is separate from the react syntax which is very cool concept that makes it the code you write extremely versatile even towards native apps and things like that so the first thing we're going to do is we're going to create a layout component or layout class we're extending the react component the core of react is everything is a component if you were looking in index dot HTML everything is an element in HTML it's a body element with a div element and that's kind of the concept Beach went behind react components everything is a component instead of an element so in this case we have a layout component and the very basic you need a render method for a component so the render method is a what are we spitting out and here's the JSX part of it which will freak you out at first is anything wrapped in per can convert HTML to JavaScript created elements so in JavaScript you can do document create elements up you know now I just made a div and then I can do you know Verde of equals then I can go div dot inner HTML equals some content so this is basically going to transpile down to stuff like that but that's a real pain to type so JSX allows you to type something that's much more familiar you can get great syntax highlighting on it if you install a JSX plugin to whatever text editor you're using atom or sublime and it'll transpile it down so at first it feels very awkward because you're kind of thinking aren't eye blending HTML with JavaScript and then you finally realize no JavaScript creates HTML elements all the time this is just an easy way to do it day in day out it makes it easy for the developer and then if you ever want to render a component you use it as if it were an HTML tag so just like this I'm telling now here's my component for my whole layout I'm going to go get the app element which is this guy right here my ID of app and I'm going to render my layout into app and that's my react app okay web pack is running and then let's go ahead open up my file here my HTML file and there you go it works so I can again go it's working transpiled it it's working ok great so let's wrap up our workspace in our workflow here obviously we'll want to get some kind of live reload happening and web pack dev server is kind of the standard way of doing that so let's go ahead and go npm install web pack Deb server let's go ahead and get it maybe an NPM run dev command going so web pack dev server is running and let's go so now we could actually run let me install this globally as well which I won't be using but I'll do it for now let's get web pack dev server installed globally so I have the web pack dev server command actually I need to give it a content base so since I don't want to serve this folder that I'm in right now I want to serve the source folder so I'm just going to go content base is source it's that way it's going to serve index.html will be the root of that so now I can actually go to localhost 8080 and there we go I have localhost 8080 working let me go ahead and get a split screen going on now but I don't have live reload up yet you can do two things by default you can go the iframe mode which is just web pack dev server and that's index.html and you'll see this loader bar up there and it will automatically load your app into a brand new iframe every time so let's go to working it's going to recompile reload so that's kind of smooth if that works for you straight out of the bag that's great another thing you can do is you can add the inline flag and hot flag hot will help it do inline a little bit better so if you had inline in hot then you're not going to have that top and it's just going to automatically do it inline which is basically live reload so we're going to go ahead go ahead and take that command we're going to just go ahead and make that's kind of a mouthful to type every time so let's go ahead and add that to our package.json let's go to our scripts let's make a dev there we go npm run dev now we'll run this command for us excellence MPM run dev gets our full web pack dev server running and we're up and rolling only other thing I'm going to change is I don't want to have all my developers have to do an NPM install global of web pack dev server so I'm actually going to reference what the node modules been you can see that it installs a command of web pack depths or installs a an executable web pack dev server as well so I can actually execute this command with dot slash so I'm going to go dot slash node modules dot bin slash web pack dev server and that's taken care of by my package now so now I can actually uninstall G web pack dev server going to uninstall that one and now NPM run dev will still work because I'm referencing the one that's in my repository so that's a little bit of a cleaner way at first with no js' we always had everybody install a global for everything and now I just think it's much cleaner to install it with your package install it locally to your app that way the the exact version you need for your app is installed in your app folder and then you run it with a node script npm run dev or npm start is kind of the standard choices that you would pick so there we go that's running that's our setup for react let's actually in the next video get into all these components and how to work with them
