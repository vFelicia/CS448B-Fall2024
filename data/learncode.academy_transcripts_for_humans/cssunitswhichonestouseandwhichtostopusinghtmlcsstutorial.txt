With timestamps:

00:00 - hey there in this video we are going to
00:01 - be covering css units pixels percentages
00:04 - ems rems fractional units chs all these
00:08 - crazy things that can be overwhelming
00:09 - for developers
00:11 - we're going to cover what you should be
00:12 - using these days and why why should you
00:14 - not use certain units
00:16 - also we're just going to kind of break
00:17 - down each unit and show you any gotchas
00:19 - and what it's specifically good for so
00:22 - this video is going to be great for new
00:23 - beginners who are just kind of getting
00:25 - into this stuff and maybe being
00:26 - overwhelmed by all these css units that
00:28 - are available it's also going to be
00:30 - great for people who have maybe been in
00:31 - the backend world for a while and
00:33 - haven't gotten caught up on these latest
00:35 - css units that have come out over the
00:36 - last couple years so let's go ahead and
00:38 - get into it so let's just cover pixels
00:40 - real quick pixels are the basic building
00:42 - block for everything in css and
00:44 - strangely enough they're the one you
00:46 - shouldn't be using most of the time
00:48 - but just to cover them
00:50 - font size 10 pixels let's set that you
00:52 - can see our font size change we can go
00:54 - 12 or 14
00:56 - we can also set div widths to have let's
00:59 - give them a background
01:02 - firebrick is so much more pleasing than
01:04 - the default red
01:06 - and then let's also give them a width of
01:07 - 300 pixels
01:10 - so there we go you can see that pixels
01:12 - are they're just very straightforward
01:14 - they do what they say they're going to
01:16 - do and they always do what they say
01:18 - they're going to do which makes them a
01:20 - little tempting to use it first but it's
01:22 - actually really going to bite you if you
01:23 - continue to do that
01:25 - because pixels are very very very bad
01:27 - for accessibility let me go ahead and
01:29 - show you an example here
01:31 - if i go into my chrome settings and i
01:33 - want to change my font size to large or
01:36 - very large or very small you can see
01:38 - nothing is actually changing over here
01:40 - because i've set font size to 14 pixels
01:43 - which means that it will always be 14
01:45 - pixels no matter whether the user has
01:48 - bad vision or just a little bit of bad
01:49 - vision or
01:51 - feels like they're super young and want
01:52 - things very very tiny it's not going to
01:54 - respect the font size setting now will
01:56 - respect the page zoom setting which is
01:59 - the command plus minus keys that a lot
02:02 - of people do use
02:03 - so it does get you a little bit of the
02:05 - way towards accessibility but not all
02:07 - the way and so web developers really
02:09 - shouldn't be using pixels for a lot a
02:11 - lot of things really what pixels are
02:13 - good for is when you need something to
02:14 - look exactly the same width and height
02:18 - despite a user's font size settings and
02:21 - decide despite what the user has set on
02:23 - their browser if you should always be
02:25 - the same use pixels a good use case for
02:27 - that would be borders borders that have
02:29 - a one pixel like a hairline border that
02:31 - should always be a hairline border no
02:32 - matter what the user's font size setting
02:34 - is so those are good use cases for
02:36 - pixels but in general there aren't a
02:38 - whole lot of great use cases for pixels
02:40 - when it comes to layout and font size
02:42 - settings and stuff
02:43 - so if you shouldn't be using pixels what
02:46 - should you be using
02:47 - the short answer is rems
02:50 - and in some use cases ems i call them
02:53 - rems and ems some people call them m's
02:56 - and rams you call them whatever you want
02:57 - calm a hot dog on a stick it doesn't
02:58 - really matter to me but basically rems
03:01 - are
03:02 - one rem
03:03 - is whatever your font size is on the top
03:06 - element which is the html element
03:08 - whatever that font size is that is one
03:11 - rem so if i set font size to 10 pixels
03:14 - uh then one ram here is 10 pixels you
03:17 - can see my div is 10 pixels wide
03:19 - it gets pretty easy with math if you
03:21 - have a 10 pixel base font size that's a
03:24 - hundred
03:25 - that's 300
03:27 - and that's 400 so it gets really simple
03:30 - to use rems if you have a great base
03:33 - font size
03:34 - you really should always set it to about
03:36 - 10 pixels i don't know why about
03:38 - nobody's gonna use 10.01 you should
03:40 - really always set it to 10 pixels
03:42 - and then use rams from there so no
03:44 - matter where this is this could be a
03:46 - grandchild great great great great great
03:47 - great great grandchild div a rem is
03:50 - always the 10 pixels set on the html
03:54 - base font size if your base font size is
03:56 - 10 pixels where it gets a little tricky
03:58 - is if your base font size is a little
04:00 - different
04:01 - something like type scale is very
04:02 - helpful for that you can say hey my base
04:04 - size is 15. give me a whole bunch of
04:06 - sizes here go major third or minor third
04:09 - whatever and it'll help you kind of see
04:11 - all those font sizes and what pixel
04:14 - values they come out to so that's very
04:16 - useful if if say you're working on a
04:18 - component on a page and you can't change
04:20 - that base font size because maybe
04:22 - there's legacy code that it depends on
04:24 - you're dealing with a base font size of
04:26 - 15 or 16 pixels
04:28 - then there you go then you use something
04:30 - like type scale again that's type dash
04:32 - scale.com very very helpful
04:35 - now ems are basically the exact same
04:37 - thing you can see if i change it to 40
04:39 - m's
04:40 - then i get the exact same display what
04:42 - is different about ems though is they
04:45 - don't take base font size into account
04:47 - they take the font size of your current
04:49 - element so if i change font size here to
04:52 - be two ems which would then be 20 pixels
04:55 - then an em becomes 20 pixels so 30 times
04:58 - 20 is 600 pixels so you can imagine this
05:02 - could get very tricky if you have a
05:03 - child that sets the font size to ems and
05:06 - then a grandchild that sets the font
05:07 - size to 0.5 ems which is how you get
05:10 - back to 10 right
05:11 - 10 times 2 is 20 times 0.5 is back to
05:15 - 10. oh my goodness now imagine a great
05:17 - great great great great grandchild
05:18 - trying to set the font size with ems it
05:21 - gets crazy you always have to know what
05:24 - your parent elements font size is
05:26 - and imagine setting widths and layouts
05:28 - based off of that it gets very difficult
05:31 - very quickly so rems all the time ems if
05:35 - you're in a tricky use case where you
05:36 - actually need to care about what your
05:40 - current or parents font size is and do
05:42 - something accordingly now the one tricky
05:45 - thing you'll notice here is i'm still
05:47 - setting this font size to 10 pixels
05:50 - which is going to override the user's
05:52 - font size setting so if i change it to
05:55 - large or small nothing changes on my
05:58 - website layout because i'm all going off
06:00 - of this hard coded 10 pixel value so
06:03 - what you do to get around this is by
06:05 - default almost all browsers have this
06:08 - base font size of 16 pixels and by
06:10 - almost all i mean every browser that
06:12 - really matters there's like a kindle
06:14 - version out there that has some
06:16 - different website and maybe some version
06:18 - of opera which who uses opera really
06:21 - and if you use opera you're used to the
06:23 - web looking really weird anyway
06:26 - so every user's font size starts off as
06:28 - 16 pixels so what you can do is you can
06:30 - say font size is
06:32 - 62.5 percent and that gets us to a 10
06:36 - pixel base font size so now our 10 pixel
06:40 - our font size acts just like 10 pixels
06:42 - still
06:42 - you can see if i go 30 rems that's 300
06:46 - width just like i'm used to
06:48 - but now if the user changes their font
06:51 - size the entire website kind of scales
06:54 - up or scales down for them that's a
06:57 - really really really good feature that's
06:59 - the way it should be done and so use a
07:03 - percentage font size if you need to
07:05 - change that base font size you don't
07:07 - want to be that dude that buys a
07:09 - building and rips out the wheelchair
07:11 - ramps it's usually illegal to do that
07:13 - anyway but on the web you don't want to
07:15 - be that person just use a percentage
07:17 - font size calculate it out do a little
07:19 - bit of math and then you have your great
07:21 - easy layout for the whole rest of the
07:23 - website and it's accessible so that's
07:26 - kind of rems and m's one tricky thing i
07:29 - will point out is sometimes safari can
07:32 - do strange things with rems in media
07:35 - queries uh so there are some
07:37 - circumstances where you might have to
07:38 - change them to ems for media queries um
07:42 - but uh that might not affect your layout
07:44 - just check it on safari once you've got
07:46 - your media query set up i'm still gonna
07:48 - start off with rems across the board and
07:51 - then switch to ems where i have to just
07:54 - as a little demo here i've got this page
07:56 - called ems and rems
07:58 - where i've basically made two exact
08:00 - things here let me go show it in the
08:02 - browser
08:03 - i've made two exact kind of copies on
08:05 - the left and on the right the only
08:06 - difference is is i used ems and rem's on
08:10 - the right so the right has a width of 20
08:12 - rem
08:13 - size of 2 ram and then inside of that i
08:16 - have a grandchild div with a writ of 20
08:18 - and a font size of 0.5 ram so you can
08:21 - see that the width of 20 is the same 20
08:24 - ram here
08:25 - 20 rem here exactly the same the font
08:27 - size got double and then the font size
08:29 - went down to 0.5 of 10 pixels so it got
08:32 - really really little that's exactly what
08:34 - we would kind of expect slash hope it
08:36 - would do
08:37 - now here when we're using the exact same
08:39 - things we only changed it to ems you can
08:41 - see it got a little quirky i set the
08:43 - font size to 2 ems which means that one
08:47 - em is now 20 pixels
08:49 - so width of 20 em makes this 400 pixels
08:53 - wide instead of 200 pixels wide which is
08:55 - what we have with rams
08:57 - and so then if i go font size back down
08:59 - to 0.5 well now i'm back down to 10
09:01 - pixels for 1 em
09:03 - and the width is 20 em which 20 times 10
09:06 - is 200 so now i'm back down to that
09:07 - width of 200. oh my goodness i'm already
09:10 - overwhelmed with the math and there's
09:11 - just a child
09:13 - in a grandchild div so this is why you
09:15 - just don't want to do ems unless you
09:17 - have to do them so that's kind of a
09:19 - little bitty example right there of why
09:21 - ems and rem's just stick stick with the
09:24 - rems okay let's look at percentages
09:26 - okay percentage is actually pretty
09:29 - straightforward with just a couple
09:30 - gotchas i made a div within a div within
09:32 - a div so we have parent child grandchild
09:35 - and i told the div to be fifty percent
09:38 - uh basically percent is always going to
09:40 - look at the size of its parent and say
09:42 - well what's a fifty percent of that
09:44 - so fifty percent is fifty percent of the
09:47 - parent which is the body of the html if
09:49 - i made this 100
09:51 - and then i get basically the full area
09:53 - but i get these borders because the body
09:55 - has a default margin so if i were to
09:57 - take away those body margins well now
09:58 - 100 is the full width of the window but
10:01 - i'm going to leave those margins there
10:02 - because it's going to be helpful in a
10:03 - little bit
10:04 - so if i have a hundred percent and then
10:07 - div within a div which is our child
10:09 - that's set to 50 so it's 50 percent of
10:12 - its parent
10:13 - and then 50 of its parents so going 50
10:16 - 50
10:17 - i get down to basically 25 so that's
10:21 - going to automatically be responsive
10:23 - really nicely so percentages are nice
10:26 - and responsive you can see i go like
10:27 - this ta-da whereas rems and ems would
10:30 - not do this right they would be they
10:32 - would calculate out to a pixel value
10:34 - like 400 pixels and they would always be
10:36 - 400 pixels whereas here it's going to
10:39 - automatically scale based on my layout
10:40 - that's nice one thing that's also very
10:42 - nice about percentages is as the parent
10:44 - changes the child can continue doing
10:46 - what it's supposed to do so if i change
10:48 - this parent to 50
10:49 - i still get that exact layout that i'm
10:51 - expecting because the child and the
10:53 - grandchild don't really care how big the
10:55 - parent is
10:56 - whatever the parent is they're going to
10:57 - be 50 of it now there's one gotcha when
11:01 - it comes to percentages and that is if
11:03 - your position changes to say absolutes
11:07 - this position value of css can mess up
11:11 - what percentage means so if i go
11:13 - if i change it to absolute then it is
11:15 - going to say okay what is i'm going to
11:18 - actually consider myself a part of the
11:20 - top thing which is body but not just
11:22 - body body without margins you can see
11:24 - i'm actually
11:26 - 50 when i'm absolute i'm actually larger
11:29 - than 50 here because this guy receives
11:33 - margins
11:34 - uh that that body margin right there you
11:36 - can see that little white border whereas
11:38 - this guy no longer receives margins he's
11:40 - absolute so he's going all the way up to
11:41 - the top and he also gets 50 percent of
11:44 - that white space as well now when this
11:46 - gets tricky is when you have a parent
11:48 - that has position absolute
11:52 - well now my parent is absolute and gets
11:55 - that 50 percent with the absolute now
11:57 - everything else underneath it kind of
11:58 - just behaves differently so when you
12:00 - start getting position it gets weird if
12:03 - i change position to relative it also
12:06 - considers itself a part of the nearest
12:09 - position relative when i set position
12:11 - absolute here it's not going to get
12:14 - position based off of body anymore it's
12:16 - going to get position based off of that
12:19 - very first div because it has a position
12:20 - relative it's probably pretty confusing
12:22 - if this is new for you
12:24 - and i'm not really going to go too far
12:26 - into css positioning because this is
12:28 - about units but just know that
12:30 - percentage is normally very
12:31 - straightforward but if you get that css
12:33 - position property going on with absolute
12:35 - a relative it can make things pretty
12:37 - wonky pretty fast if you're not aware of
12:40 - what is going on so percentage is very
12:42 - very useful when you're doing your
12:43 - layouts specifically for the parts that
12:45 - are done with flexbox in css you have
12:47 - grid and flexbox which are really your
12:50 - two main layout tools flexbox is good
12:52 - for when you just have single dimension
12:54 - like left to right or top to bottom and
12:57 - grid is useful for when you have
12:59 - multi-dimension like hey three columns
13:01 - up top then two columns and then three
13:03 - columns again that's where grid really
13:04 - shines
13:05 - so let's just throw together a really
13:07 - fast flexbox layout and show off
13:09 - percentage let's go div with a child of
13:13 - div
13:14 - times three
13:15 - so let's go a b c let's make a top div
13:19 - have
13:22 - display flex
13:23 - now let's make any divs inside of the
13:25 - div you can see we automatically have
13:27 - fifty percent fifty percent fifty
13:29 - percent um and flexbox is kind of taking
13:32 - that and doing the math and making sure
13:34 - they're all equal so if i made them all
13:35 - 25 percent
13:37 - uh then you can see we'd go 25 25 25 and
13:40 - have some extra space left over
13:42 - also we could just make them all
13:45 - a hundred percent and then it's
13:47 - automatically going to space them out
13:49 - accordingly you can see if i make them
13:50 - all 100
13:52 - then it it says hey that's 300 percent
13:54 - and it's going to do some math and kind
13:56 - of fix it out for you so you can kind of
13:58 - do some a little bit of tweaking on
14:00 - flexbox and bend it and it'll it'll kind
14:02 - of conform and do a little bit of smart
14:04 - stuff for you
14:06 - again if i make it all ten percent uh
14:08 - they're going to go 10 20 30 and then i
14:11 - have 70 percent left over so percent is
14:13 - a very easy way to get going with css
14:16 - flexbox while we're talking about
14:18 - setting widths let's look at the new fr
14:21 - fractional width css unit that came out
14:24 - with grid i'm going to change this to
14:26 - display grid i can go grid template rows
14:30 - uh columns actually sorry we're doing
14:31 - columns
14:34 - and then i can say that we're going to
14:35 - go
14:36 - 30 percent 30 percent
14:40 - and it'll automatically do 30 30 30 and
14:42 - then leave 10 left over
14:44 - i can also do fraction widths usually
14:46 - you don't want any leftover space when
14:48 - you're in a layout you just want hey i
14:50 - want this one to be kind of like
14:52 - one-fifth two-fifths and then the
14:53 - remaining two-fifths and so with that
14:56 - you can actually do fractional layouts
14:57 - which are really really useful because
14:59 - you don't have to know much math to do
15:01 - these you just say 1fr 2fr 2fr it's
15:04 - going to say hey that's total of 5fr
15:06 - let's divide 100 by 5 and then that
15:10 - equates to twenty percent per fr uh
15:14 - twenty percent forty percent forty
15:16 - percent and tada we've got a hundred
15:17 - percent so frs are really really nice
15:20 - they really take a lot of the math out
15:22 - of the way for you you can see that i
15:23 - can automatically change that to 1fr i
15:25 - can change this to 20fr it's
15:28 - automatically going to figure out what
15:29 - an fr is and just make it work because
15:32 - lots of times when you're doing a layout
15:34 - you don't exactly know that this needs
15:36 - to be precisely 15
15:39 - you just know it needs to be a little
15:40 - bit bigger so you can kind of mess
15:41 - around with it until it gets right where
15:44 - you want it to be so fractional units
15:45 - are extremely useful go to those before
15:48 - percentage with css grid
15:50 - and that's usually going to help you out
15:52 - okay we got a few more oddball ones that
15:54 - you usually don't use but are actually
15:55 - pretty useful when you need them one of
15:58 - those is the c h
16:00 - c h unit is basically stands for the
16:03 - character width of whatever zero is in
16:05 - your current font size
16:07 - so that means if i type out zero here
16:10 - that is one ch and if i type five zeros
16:14 - that is five ch
16:16 - and what that is useful for is when you
16:19 - kind of actually care about the text
16:21 - that's in and you want the width of a
16:24 - element to be determined by the size of
16:26 - text
16:27 - it's especially useful when you don't
16:29 - want something to
16:30 - responsively shrink too small because
16:33 - you don't want the text to do something
16:34 - really stupid right like be very very
16:37 - narrow when your responsive design
16:39 - squishes down and then the text looks
16:41 - really really dumb so as a good example
16:43 - here i can actually use min max i want
16:45 - this to be a minimum of 10 ch
16:49 - and then i also want it to go
16:51 - up to auto for the rest of the way
16:54 - so you can see what that's going to do
16:55 - is that's going to start going down to
16:56 - that minimum of 10 ch and then it's
16:59 - going to stretch out after that so let
17:00 - me actually put in 10 here one two three
17:02 - four five six seven eight nine ten
17:04 - you can see that it's kind of started
17:06 - off a minimum of that
17:07 - but then if i actually add more it's
17:09 - going to get bigger and stretch based
17:11 - off of my text or i could say it's min
17:14 - uh with a max of one fr and that's going
17:17 - to kind of then max out at 1fr it'll do
17:20 - whatever it does max out at 3fr we can
17:22 - also go the opposite on this we can tell
17:24 - it to go auto with a maximum of 30 ch
17:27 - because we don't want that text area to
17:28 - ever get too large so now we're going to
17:31 - get in maximum of 30 ch as our
17:34 - design gets responsive you can see that
17:36 - that kind of always stays
17:38 - that text will always wrap around the
17:40 - exact same way unless we maybe get
17:42 - really really really tiny so that's kind
17:44 - of where the ch unit comes in handy is
17:46 - when you really want that width to
17:48 - tightly relate to your actual font and
17:51 - your text another interesting css unit
17:54 - is the vw and vh which represents your
17:58 - viewport width and height so no matter
18:00 - where you are inside whether you're in a
18:03 - child grandchild great great great great
18:05 - grandchild vw will always be the width
18:08 - of your viewport and vh will always be
18:11 - the height of your viewport so let's do
18:13 - a little example here let's do a div
18:15 - within a div
18:17 - we'll call that two we'll call that one
18:20 - let's just add a little bit of style
18:21 - here
18:23 - let's turn these styles on there we go
18:26 - so we've got a div within a div let's
18:27 - get all this get rid of the css grid
18:30 - stuff just give me some backgrounds
18:31 - people okay so i can make this a width
18:33 - of 50
18:35 - and then i can actually make my child
18:36 - have a width
18:38 - of 100 vw which is 100 viewport width
18:42 - and you can see it automatically goes to
18:43 - the full size of the viewport it doesn't
18:46 - care what size its parent is or doesn't
18:49 - care where it is on the page it could
18:51 - automatically do a width of 100 viewport
18:53 - this is actually very useful if you're
18:54 - doing pop-ups or modals
18:56 - where the div may be way down in the
18:58 - page but you want it to
19:00 - react relative to the entire size of
19:03 - your page
19:04 - that's where it's useful navigations
19:06 - navigations that slide onto your screen
19:08 - from off the screen
19:09 - if you want it to slide completely off
19:11 - the screen view port width is very
19:13 - useful for that and then viewport height
19:16 - obviously i don't know why i would ever
19:17 - make the width relative to the viewport
19:20 - height that's kind of stupid
19:22 - but this is going to be as wide as the
19:24 - viewport is tall again very dumb idea
19:27 - that i just gave you but v date vh and
19:29 - vw are those units and honestly that is
19:33 - about it so there are a bunch of other
19:35 - css units there's points there's
19:38 - centimeters and millimeters but those
19:40 - really aren't useful for web they're
19:41 - useful if you're somehow exporting your
19:43 - html content for print or a print device
19:47 - where those actually are meaningful and
19:49 - useful
19:50 - but you'll never ever ever use those in
19:52 - web so to summarize
19:54 - pixels are awesome and they're simple
19:56 - and they're straightforward but they're
19:57 - like using a css important rule only use
19:59 - them when absolutely necessary for your
20:02 - layouts jump to using rems first with a
20:05 - fallback of ems when necessary for
20:08 - anything that needs a fixed width
20:10 - anything that's relative if you're using
20:11 - css grid start off using fractional
20:14 - units frs and then for css flexbox or
20:19 - for moments where frs don't work use
20:21 - percentage that should cover almost
20:23 - every single use case that you have
20:26 - hopefully this has made css units a lot
20:28 - simpler to understand and easier to work
20:30 - with for you drop me a comment below if
20:33 - there's anything that didn't make a lot
20:34 - of simple sense hopefully this really
20:36 - simplified things have yourself an
20:38 - awesome day and we will catch you around

Cleaned transcript:

hey there in this video we are going to be covering css units pixels percentages ems rems fractional units chs all these crazy things that can be overwhelming for developers we're going to cover what you should be using these days and why why should you not use certain units also we're just going to kind of break down each unit and show you any gotchas and what it's specifically good for so this video is going to be great for new beginners who are just kind of getting into this stuff and maybe being overwhelmed by all these css units that are available it's also going to be great for people who have maybe been in the backend world for a while and haven't gotten caught up on these latest css units that have come out over the last couple years so let's go ahead and get into it so let's just cover pixels real quick pixels are the basic building block for everything in css and strangely enough they're the one you shouldn't be using most of the time but just to cover them font size 10 pixels let's set that you can see our font size change we can go 12 or 14 we can also set div widths to have let's give them a background firebrick is so much more pleasing than the default red and then let's also give them a width of 300 pixels so there we go you can see that pixels are they're just very straightforward they do what they say they're going to do and they always do what they say they're going to do which makes them a little tempting to use it first but it's actually really going to bite you if you continue to do that because pixels are very very very bad for accessibility let me go ahead and show you an example here if i go into my chrome settings and i want to change my font size to large or very large or very small you can see nothing is actually changing over here because i've set font size to 14 pixels which means that it will always be 14 pixels no matter whether the user has bad vision or just a little bit of bad vision or feels like they're super young and want things very very tiny it's not going to respect the font size setting now will respect the page zoom setting which is the command plus minus keys that a lot of people do use so it does get you a little bit of the way towards accessibility but not all the way and so web developers really shouldn't be using pixels for a lot a lot of things really what pixels are good for is when you need something to look exactly the same width and height despite a user's font size settings and decide despite what the user has set on their browser if you should always be the same use pixels a good use case for that would be borders borders that have a one pixel like a hairline border that should always be a hairline border no matter what the user's font size setting is so those are good use cases for pixels but in general there aren't a whole lot of great use cases for pixels when it comes to layout and font size settings and stuff so if you shouldn't be using pixels what should you be using the short answer is rems and in some use cases ems i call them rems and ems some people call them m's and rams you call them whatever you want calm a hot dog on a stick it doesn't really matter to me but basically rems are one rem is whatever your font size is on the top element which is the html element whatever that font size is that is one rem so if i set font size to 10 pixels uh then one ram here is 10 pixels you can see my div is 10 pixels wide it gets pretty easy with math if you have a 10 pixel base font size that's a hundred that's 300 and that's 400 so it gets really simple to use rems if you have a great base font size you really should always set it to about 10 pixels i don't know why about nobody's gonna use 10.01 you should really always set it to 10 pixels and then use rams from there so no matter where this is this could be a grandchild great great great great great great great grandchild div a rem is always the 10 pixels set on the html base font size if your base font size is 10 pixels where it gets a little tricky is if your base font size is a little different something like type scale is very helpful for that you can say hey my base size is 15. give me a whole bunch of sizes here go major third or minor third whatever and it'll help you kind of see all those font sizes and what pixel values they come out to so that's very useful if if say you're working on a component on a page and you can't change that base font size because maybe there's legacy code that it depends on you're dealing with a base font size of 15 or 16 pixels then there you go then you use something like type scale again that's type dash scale.com very very helpful now ems are basically the exact same thing you can see if i change it to 40 m's then i get the exact same display what is different about ems though is they don't take base font size into account they take the font size of your current element so if i change font size here to be two ems which would then be 20 pixels then an em becomes 20 pixels so 30 times 20 is 600 pixels so you can imagine this could get very tricky if you have a child that sets the font size to ems and then a grandchild that sets the font size to 0.5 ems which is how you get back to 10 right 10 times 2 is 20 times 0.5 is back to 10. oh my goodness now imagine a great great great great great grandchild trying to set the font size with ems it gets crazy you always have to know what your parent elements font size is and imagine setting widths and layouts based off of that it gets very difficult very quickly so rems all the time ems if you're in a tricky use case where you actually need to care about what your current or parents font size is and do something accordingly now the one tricky thing you'll notice here is i'm still setting this font size to 10 pixels which is going to override the user's font size setting so if i change it to large or small nothing changes on my website layout because i'm all going off of this hard coded 10 pixel value so what you do to get around this is by default almost all browsers have this base font size of 16 pixels and by almost all i mean every browser that really matters there's like a kindle version out there that has some different website and maybe some version of opera which who uses opera really and if you use opera you're used to the web looking really weird anyway so every user's font size starts off as 16 pixels so what you can do is you can say font size is 62.5 percent and that gets us to a 10 pixel base font size so now our 10 pixel our font size acts just like 10 pixels still you can see if i go 30 rems that's 300 width just like i'm used to but now if the user changes their font size the entire website kind of scales up or scales down for them that's a really really really good feature that's the way it should be done and so use a percentage font size if you need to change that base font size you don't want to be that dude that buys a building and rips out the wheelchair ramps it's usually illegal to do that anyway but on the web you don't want to be that person just use a percentage font size calculate it out do a little bit of math and then you have your great easy layout for the whole rest of the website and it's accessible so that's kind of rems and m's one tricky thing i will point out is sometimes safari can do strange things with rems in media queries uh so there are some circumstances where you might have to change them to ems for media queries um but uh that might not affect your layout just check it on safari once you've got your media query set up i'm still gonna start off with rems across the board and then switch to ems where i have to just as a little demo here i've got this page called ems and rems where i've basically made two exact things here let me go show it in the browser i've made two exact kind of copies on the left and on the right the only difference is is i used ems and rem's on the right so the right has a width of 20 rem size of 2 ram and then inside of that i have a grandchild div with a writ of 20 and a font size of 0.5 ram so you can see that the width of 20 is the same 20 ram here 20 rem here exactly the same the font size got double and then the font size went down to 0.5 of 10 pixels so it got really really little that's exactly what we would kind of expect slash hope it would do now here when we're using the exact same things we only changed it to ems you can see it got a little quirky i set the font size to 2 ems which means that one em is now 20 pixels so width of 20 em makes this 400 pixels wide instead of 200 pixels wide which is what we have with rams and so then if i go font size back down to 0.5 well now i'm back down to 10 pixels for 1 em and the width is 20 em which 20 times 10 is 200 so now i'm back down to that width of 200. oh my goodness i'm already overwhelmed with the math and there's just a child in a grandchild div so this is why you just don't want to do ems unless you have to do them so that's kind of a little bitty example right there of why ems and rem's just stick stick with the rems okay let's look at percentages okay percentage is actually pretty straightforward with just a couple gotchas i made a div within a div within a div so we have parent child grandchild and i told the div to be fifty percent uh basically percent is always going to look at the size of its parent and say well what's a fifty percent of that so fifty percent is fifty percent of the parent which is the body of the html if i made this 100 and then i get basically the full area but i get these borders because the body has a default margin so if i were to take away those body margins well now 100 is the full width of the window but i'm going to leave those margins there because it's going to be helpful in a little bit so if i have a hundred percent and then div within a div which is our child that's set to 50 so it's 50 percent of its parent and then 50 of its parents so going 50 50 i get down to basically 25 so that's going to automatically be responsive really nicely so percentages are nice and responsive you can see i go like this tada whereas rems and ems would not do this right they would be they would calculate out to a pixel value like 400 pixels and they would always be 400 pixels whereas here it's going to automatically scale based on my layout that's nice one thing that's also very nice about percentages is as the parent changes the child can continue doing what it's supposed to do so if i change this parent to 50 i still get that exact layout that i'm expecting because the child and the grandchild don't really care how big the parent is whatever the parent is they're going to be 50 of it now there's one gotcha when it comes to percentages and that is if your position changes to say absolutes this position value of css can mess up what percentage means so if i go if i change it to absolute then it is going to say okay what is i'm going to actually consider myself a part of the top thing which is body but not just body body without margins you can see i'm actually 50 when i'm absolute i'm actually larger than 50 here because this guy receives margins uh that that body margin right there you can see that little white border whereas this guy no longer receives margins he's absolute so he's going all the way up to the top and he also gets 50 percent of that white space as well now when this gets tricky is when you have a parent that has position absolute well now my parent is absolute and gets that 50 percent with the absolute now everything else underneath it kind of just behaves differently so when you start getting position it gets weird if i change position to relative it also considers itself a part of the nearest position relative when i set position absolute here it's not going to get position based off of body anymore it's going to get position based off of that very first div because it has a position relative it's probably pretty confusing if this is new for you and i'm not really going to go too far into css positioning because this is about units but just know that percentage is normally very straightforward but if you get that css position property going on with absolute a relative it can make things pretty wonky pretty fast if you're not aware of what is going on so percentage is very very useful when you're doing your layouts specifically for the parts that are done with flexbox in css you have grid and flexbox which are really your two main layout tools flexbox is good for when you just have single dimension like left to right or top to bottom and grid is useful for when you have multidimension like hey three columns up top then two columns and then three columns again that's where grid really shines so let's just throw together a really fast flexbox layout and show off percentage let's go div with a child of div times three so let's go a b c let's make a top div have display flex now let's make any divs inside of the div you can see we automatically have fifty percent fifty percent fifty percent um and flexbox is kind of taking that and doing the math and making sure they're all equal so if i made them all 25 percent uh then you can see we'd go 25 25 25 and have some extra space left over also we could just make them all a hundred percent and then it's automatically going to space them out accordingly you can see if i make them all 100 then it it says hey that's 300 percent and it's going to do some math and kind of fix it out for you so you can kind of do some a little bit of tweaking on flexbox and bend it and it'll it'll kind of conform and do a little bit of smart stuff for you again if i make it all ten percent uh they're going to go 10 20 30 and then i have 70 percent left over so percent is a very easy way to get going with css flexbox while we're talking about setting widths let's look at the new fr fractional width css unit that came out with grid i'm going to change this to display grid i can go grid template rows uh columns actually sorry we're doing columns and then i can say that we're going to go 30 percent 30 percent and it'll automatically do 30 30 30 and then leave 10 left over i can also do fraction widths usually you don't want any leftover space when you're in a layout you just want hey i want this one to be kind of like onefifth twofifths and then the remaining twofifths and so with that you can actually do fractional layouts which are really really useful because you don't have to know much math to do these you just say 1fr 2fr 2fr it's going to say hey that's total of 5fr let's divide 100 by 5 and then that equates to twenty percent per fr uh twenty percent forty percent forty percent and tada we've got a hundred percent so frs are really really nice they really take a lot of the math out of the way for you you can see that i can automatically change that to 1fr i can change this to 20fr it's automatically going to figure out what an fr is and just make it work because lots of times when you're doing a layout you don't exactly know that this needs to be precisely 15 you just know it needs to be a little bit bigger so you can kind of mess around with it until it gets right where you want it to be so fractional units are extremely useful go to those before percentage with css grid and that's usually going to help you out okay we got a few more oddball ones that you usually don't use but are actually pretty useful when you need them one of those is the c h c h unit is basically stands for the character width of whatever zero is in your current font size so that means if i type out zero here that is one ch and if i type five zeros that is five ch and what that is useful for is when you kind of actually care about the text that's in and you want the width of a element to be determined by the size of text it's especially useful when you don't want something to responsively shrink too small because you don't want the text to do something really stupid right like be very very narrow when your responsive design squishes down and then the text looks really really dumb so as a good example here i can actually use min max i want this to be a minimum of 10 ch and then i also want it to go up to auto for the rest of the way so you can see what that's going to do is that's going to start going down to that minimum of 10 ch and then it's going to stretch out after that so let me actually put in 10 here one two three four five six seven eight nine ten you can see that it's kind of started off a minimum of that but then if i actually add more it's going to get bigger and stretch based off of my text or i could say it's min uh with a max of one fr and that's going to kind of then max out at 1fr it'll do whatever it does max out at 3fr we can also go the opposite on this we can tell it to go auto with a maximum of 30 ch because we don't want that text area to ever get too large so now we're going to get in maximum of 30 ch as our design gets responsive you can see that that kind of always stays that text will always wrap around the exact same way unless we maybe get really really really tiny so that's kind of where the ch unit comes in handy is when you really want that width to tightly relate to your actual font and your text another interesting css unit is the vw and vh which represents your viewport width and height so no matter where you are inside whether you're in a child grandchild great great great great grandchild vw will always be the width of your viewport and vh will always be the height of your viewport so let's do a little example here let's do a div within a div we'll call that two we'll call that one let's just add a little bit of style here let's turn these styles on there we go so we've got a div within a div let's get all this get rid of the css grid stuff just give me some backgrounds people okay so i can make this a width of 50 and then i can actually make my child have a width of 100 vw which is 100 viewport width and you can see it automatically goes to the full size of the viewport it doesn't care what size its parent is or doesn't care where it is on the page it could automatically do a width of 100 viewport this is actually very useful if you're doing popups or modals where the div may be way down in the page but you want it to react relative to the entire size of your page that's where it's useful navigations navigations that slide onto your screen from off the screen if you want it to slide completely off the screen view port width is very useful for that and then viewport height obviously i don't know why i would ever make the width relative to the viewport height that's kind of stupid but this is going to be as wide as the viewport is tall again very dumb idea that i just gave you but v date vh and vw are those units and honestly that is about it so there are a bunch of other css units there's points there's centimeters and millimeters but those really aren't useful for web they're useful if you're somehow exporting your html content for print or a print device where those actually are meaningful and useful but you'll never ever ever use those in web so to summarize pixels are awesome and they're simple and they're straightforward but they're like using a css important rule only use them when absolutely necessary for your layouts jump to using rems first with a fallback of ems when necessary for anything that needs a fixed width anything that's relative if you're using css grid start off using fractional units frs and then for css flexbox or for moments where frs don't work use percentage that should cover almost every single use case that you have hopefully this has made css units a lot simpler to understand and easier to work with for you drop me a comment below if there's anything that didn't make a lot of simple sense hopefully this really simplified things have yourself an awesome day and we will catch you around
