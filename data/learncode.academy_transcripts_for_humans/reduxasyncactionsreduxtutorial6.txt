With timestamps:

00:00 - okay we are almost ready to integrate
00:02 - Redux into our react application and the
00:04 - last thing we got to do is figure out
00:05 - how to handle our async actions and
00:07 - Redux actually makes that really easy
00:09 - because with Redux tied into react react
00:13 - is only ever a representation a view
00:15 - representation of the state of the store
00:18 - so as the store changes the view changes
00:21 - but the view never changes unless the
00:23 - store changes that's kind of the biggest
00:25 - fundamental difference in redux is react
00:28 - is simply a view layer only you move
00:31 - absolutely all of the representation out
00:33 - of the components and into the store so
00:36 - basically you never ever ever use state
00:38 - again you're always going to use props
00:39 - that come from the store and async is
00:42 - really where you kind of start to see
00:43 - how that makes sense how it plays out
00:45 - and it's a little bit different mentally
00:46 - at first but then once you get it it's
00:49 - really really simple
00:50 - so first of all let's get rid of this
00:51 - store subscribe and let's import a
00:54 - logger
00:54 - Ivan stored Redux I've installed Redux
00:57 - logger
01:04 - and then their way of doing it is you
01:06 - actually have to do logger and then
01:08 - actually run that as a function so now
01:10 - we should start seeing these beautiful
01:11 - logs excellent so we get our previous
01:13 - state the action that was fired in the
01:15 - next State Redux logger is very nice and
01:18 - then we want to go ahead and instead of
01:20 - dispatching an object that contains a
01:23 - type and maybe a payload we actually
01:25 - want to dispatch a function with that
01:27 - receives one argument and that argument
01:29 - will be the dispatcher all right will
01:33 - actually call it dispatch it'll be the
01:35 - dispatch function and then inside of
01:38 - this function we can actually call
01:40 - dispatch we can actually dispatch an
01:43 - event here we can do something async and
01:49 - then we can dispatch something else
01:52 - so that'll basically be how we handle
01:55 - asynchronous actions as far as redux and
01:58 - react is concerned it's just a handful
02:01 - of multiple synchronous actions and so
02:03 - basically there's a thunk middleware
02:05 - that allows us to do this very oh so
02:12 - we're going to import redux thunk add
02:14 - that as middleware and we're good to go
02:17 - so then we can dispatch stuff of course
02:19 - these are all going to be empty objects
02:20 - because they don't have types you can
02:22 - see I got a nice little error message
02:23 - there so we'll just go type of foo for
02:26 - now and then type of bar and there you
02:32 - go so now multiple actions are happening
02:34 - with one singular action and that's how
02:37 - we're going to handle async actions so
02:39 - let's go and import a xhr request which
02:43 - Axios is kind of my favorite one these
02:45 - days no need to bring in jQuery here if
02:49 - you're working on the clients react is
02:52 - awesome and that you'd never need jQuery
02:53 - again so then we can actually dispatch
02:55 - let's go ahead dispatch fetch users
02:58 - let's say we're doing a fetch users
02:59 - action will dispatch a fetch user start
03:04 - right away with absolutely no payload
03:06 - that way the UI can show a loading bar
03:09 - or something like that or it can
03:10 - reference that you've actually started
03:12 - fetching those users they're going to go
03:14 - ahead and get something I'm going to use
03:16 - that free restful
03:17 - API that I put up a while back rest
03:20 - learn code Academy and I already posted
03:26 - a couple users to that Dave Eastern
03:29 - users this is actually a really fun way
03:30 - to just mock out data instantly you can
03:32 - start posting to any username and start
03:36 - getting anything it'll basically create
03:38 - a collection on demand so if you do a
03:40 - post to I don't know jean-bob slash
03:43 - users then it's going to create your
03:44 - users collection right away and post
03:47 - whatever object you're doing in there
03:49 - the data just resets nightly you can see
03:51 - more on rest out learn code Academy but
03:52 - it's awesome for rapid prototyping so
03:55 - we're just gonna get that then that'll
03:57 - give us a response and we're just going
04:01 - to run that and will dispatch something
04:04 - else let's bring this up here so when
04:07 - our response is received we're going to
04:09 - go ahead and dispatch type fetch users
04:12 - received actually this is probably
04:17 - called receive users and then the
04:22 - payload will be response data is the
04:26 - format that Axios uses for that and then
04:29 - if there's an error we can also catch
04:30 - that
04:37 - faites users error and the payload will
04:44 - just be the error object so there we go
04:46 - we have potentially three actions that
04:48 - could go here we're always going to fire
04:50 - fetch users start when that data is
04:52 - received let's say half a second quarter
04:54 - second later then we're going to fire
04:55 - off a receive users with the payload of
04:57 - that data and if there's an error we're
04:59 - going to dispatch fetch users error so
05:01 - now we have to do is go up to our
05:02 - reducer and add those different states
05:04 - so I can switch based off of make that
05:12 - will cleaner
05:20 - if our cases fetch user starts we're
05:24 - going to run that block our case is
05:29 - fetch users error we're going to run
05:31 - that block whoops and if our case is
05:37 - receive users we're going to run that
05:47 - block add my breaks and we should be
05:55 - good to go so there we go we have a
05:57 - fetch user start you can see a little
05:58 - bit later we've got our receive users so
06:00 - all we have to do is actually have these
06:01 - do something so right now my default
06:04 - state is blank it's an empty object
06:06 - let's go ahead and add an actual initial
06:08 - state here now let's say fetching is
06:15 - going to be false these are going to be
06:17 - some nice pieces of data that our UI can
06:19 - use fetching false so if fetching
06:22 - switches to true then the UI can
06:24 - automatically when it renders show a
06:25 - loader and then fetched false we haven't
06:30 - fetched anything yet so we will not show
06:32 - SE the users array with an empty amount
06:34 - of users in it
06:35 - let's go users is empty right now and
06:38 - then error is no no error so we won't
06:42 - have to worry about showing that at all
06:44 - so that's our default States then our
06:46 - state can actually use this so now our
06:50 - initial state will actually have that
06:51 - information in it you can see there we
06:53 - go boom boom boom initial States
06:54 - populated so if the users start then
06:57 - we're just going to return I'm going to
07:02 - return States now we're going to change
07:03 - fetching to true and then if there's an
07:09 - error we're going to return the exact
07:11 - say fetching is false we're done
07:13 - fetching
07:18 - and we're going to add the action
07:19 - payload in is the error so the exact
07:21 - same state we don't care about any of
07:23 - the rest of the state but we are going
07:24 - to change fetching to false and we are
07:26 - going to add the error in there from the
07:28 - action payload and then lastly receive
07:30 - users we're going to pull in the state
07:33 - the fetching is false fetched is true
07:36 - and users is action payload and at this
07:42 - point it probably makes sense to
07:44 - actually break that into multiple lines
07:46 - just keep things clean there we go so
07:55 - now everything should work and our
07:57 - logger should show us a beautiful amount
07:59 - of stuff so at first you're fetching
08:00 - false fetched false no users same is
08:03 - true and then that's when it starts but
08:06 - then you can see that it changes it to
08:07 - fetching true fetched false no users and
08:10 - then we received our users so now we
08:13 - have fetching false fetched is true and
08:16 - we have our two users in here which are
08:18 - came from that API and we have an object
08:22 - of will and we have an object of my wife
08:23 - Laura so let's go ahead and make this
08:25 - error there we go whoops how to typos in
08:28 - that URL there you can see now it fired
08:31 - fetch users start there's the Axios
08:33 - error and then the fetch user's error
08:34 - went often fired so now our next state
08:37 - is err fetched fetching and still no
08:41 - users so that's the way you do it with
08:43 - thunks with by dispatching a single
08:46 - function that receives a dispatch first
08:50 - argument you can only ever give it one
08:52 - argument that's what a thunk is you can
08:53 - look up more on thunks that's a little
08:55 - outside the scope of this video and then
08:57 - if you do a lot of promises which this
08:59 - returns a promise you can clean that up
09:01 - a little bit more by doing redux promise
09:04 - middleware so let's import promise there
09:11 - we go promise is pulled in and then we
09:13 - can actually do promise instead of thunk
09:15 - or promise in addition to thunk there
09:19 - you'll promise also has to be run as a
09:21 - function and without you dispatch it a
09:23 - little differently you'd still dispatch
09:24 - a standard flux object so you dispatch
09:28 - that and you give it a type which
09:32 - doesn't really matter because we're not
09:33 - doing anything yet so I'll just say type
09:35 - of foo and then you actually return your
09:38 - promise so here's my promise as the
09:41 - payload and so that middleware that
09:44 - promised middleware where was that right
09:46 - there
09:46 - promise middleware will notice that you
09:48 - dispatched a payload that is a promise
09:51 - type and it will automatically send
09:54 - through some default messages some
09:57 - default dispatches for you so let me go
09:59 - ahead and make this work again there we
10:03 - go so that's going to work clean this
10:05 - code up here and so you'll notice that
10:12 - automatically it sends off a foo pending
10:15 - and so foo is going to be the type so I
10:17 - guess I do want a fetch users so
10:23 - automatically fires fetch users pending
10:25 - and then it's going to fire fetch users
10:27 - fulfilled whenever that's finished and
10:29 - then should there be an error it will do
10:31 - rejected fetch users pending fetch users
10:35 - rejected so it is cleaner if you do a
10:38 - lot of promises if all your a sink is
10:40 - promises you're not really using es6
10:41 - generators then that's really clean you
10:44 - can see that cleans it up just fine and
10:46 - then you just up here you go fetch users
10:49 - pending fetch users rejected and then
10:56 - fetch users what was that fulfilled it's
11:06 - probably two L's in the fulfill no
11:08 - there's just one a lot fulfilled Wow I
11:09 - was home schooled let's make that error
11:11 - again and you can see that rejected
11:13 - picks up excellent so there you go that
11:15 - is how you handle asynchronous actions
11:18 - with redux you just change the way you
11:20 - dispatch them so that's about all you
11:22 - need to know in the next videos we can
11:24 - actually tie this into our react
11:26 - application and make the react
11:28 - application simply reflect the state of
11:30 - the store

Cleaned transcript:

okay we are almost ready to integrate Redux into our react application and the last thing we got to do is figure out how to handle our async actions and Redux actually makes that really easy because with Redux tied into react react is only ever a representation a view representation of the state of the store so as the store changes the view changes but the view never changes unless the store changes that's kind of the biggest fundamental difference in redux is react is simply a view layer only you move absolutely all of the representation out of the components and into the store so basically you never ever ever use state again you're always going to use props that come from the store and async is really where you kind of start to see how that makes sense how it plays out and it's a little bit different mentally at first but then once you get it it's really really simple so first of all let's get rid of this store subscribe and let's import a logger Ivan stored Redux I've installed Redux logger and then their way of doing it is you actually have to do logger and then actually run that as a function so now we should start seeing these beautiful logs excellent so we get our previous state the action that was fired in the next State Redux logger is very nice and then we want to go ahead and instead of dispatching an object that contains a type and maybe a payload we actually want to dispatch a function with that receives one argument and that argument will be the dispatcher all right will actually call it dispatch it'll be the dispatch function and then inside of this function we can actually call dispatch we can actually dispatch an event here we can do something async and then we can dispatch something else so that'll basically be how we handle asynchronous actions as far as redux and react is concerned it's just a handful of multiple synchronous actions and so basically there's a thunk middleware that allows us to do this very oh so we're going to import redux thunk add that as middleware and we're good to go so then we can dispatch stuff of course these are all going to be empty objects because they don't have types you can see I got a nice little error message there so we'll just go type of foo for now and then type of bar and there you go so now multiple actions are happening with one singular action and that's how we're going to handle async actions so let's go and import a xhr request which Axios is kind of my favorite one these days no need to bring in jQuery here if you're working on the clients react is awesome and that you'd never need jQuery again so then we can actually dispatch let's go ahead dispatch fetch users let's say we're doing a fetch users action will dispatch a fetch user start right away with absolutely no payload that way the UI can show a loading bar or something like that or it can reference that you've actually started fetching those users they're going to go ahead and get something I'm going to use that free restful API that I put up a while back rest learn code Academy and I already posted a couple users to that Dave Eastern users this is actually a really fun way to just mock out data instantly you can start posting to any username and start getting anything it'll basically create a collection on demand so if you do a post to I don't know jeanbob slash users then it's going to create your users collection right away and post whatever object you're doing in there the data just resets nightly you can see more on rest out learn code Academy but it's awesome for rapid prototyping so we're just gonna get that then that'll give us a response and we're just going to run that and will dispatch something else let's bring this up here so when our response is received we're going to go ahead and dispatch type fetch users received actually this is probably called receive users and then the payload will be response data is the format that Axios uses for that and then if there's an error we can also catch that faites users error and the payload will just be the error object so there we go we have potentially three actions that could go here we're always going to fire fetch users start when that data is received let's say half a second quarter second later then we're going to fire off a receive users with the payload of that data and if there's an error we're going to dispatch fetch users error so now we have to do is go up to our reducer and add those different states so I can switch based off of make that will cleaner if our cases fetch user starts we're going to run that block our case is fetch users error we're going to run that block whoops and if our case is receive users we're going to run that block add my breaks and we should be good to go so there we go we have a fetch user start you can see a little bit later we've got our receive users so all we have to do is actually have these do something so right now my default state is blank it's an empty object let's go ahead and add an actual initial state here now let's say fetching is going to be false these are going to be some nice pieces of data that our UI can use fetching false so if fetching switches to true then the UI can automatically when it renders show a loader and then fetched false we haven't fetched anything yet so we will not show SE the users array with an empty amount of users in it let's go users is empty right now and then error is no no error so we won't have to worry about showing that at all so that's our default States then our state can actually use this so now our initial state will actually have that information in it you can see there we go boom boom boom initial States populated so if the users start then we're just going to return I'm going to return States now we're going to change fetching to true and then if there's an error we're going to return the exact say fetching is false we're done fetching and we're going to add the action payload in is the error so the exact same state we don't care about any of the rest of the state but we are going to change fetching to false and we are going to add the error in there from the action payload and then lastly receive users we're going to pull in the state the fetching is false fetched is true and users is action payload and at this point it probably makes sense to actually break that into multiple lines just keep things clean there we go so now everything should work and our logger should show us a beautiful amount of stuff so at first you're fetching false fetched false no users same is true and then that's when it starts but then you can see that it changes it to fetching true fetched false no users and then we received our users so now we have fetching false fetched is true and we have our two users in here which are came from that API and we have an object of will and we have an object of my wife Laura so let's go ahead and make this error there we go whoops how to typos in that URL there you can see now it fired fetch users start there's the Axios error and then the fetch user's error went often fired so now our next state is err fetched fetching and still no users so that's the way you do it with thunks with by dispatching a single function that receives a dispatch first argument you can only ever give it one argument that's what a thunk is you can look up more on thunks that's a little outside the scope of this video and then if you do a lot of promises which this returns a promise you can clean that up a little bit more by doing redux promise middleware so let's import promise there we go promise is pulled in and then we can actually do promise instead of thunk or promise in addition to thunk there you'll promise also has to be run as a function and without you dispatch it a little differently you'd still dispatch a standard flux object so you dispatch that and you give it a type which doesn't really matter because we're not doing anything yet so I'll just say type of foo and then you actually return your promise so here's my promise as the payload and so that middleware that promised middleware where was that right there promise middleware will notice that you dispatched a payload that is a promise type and it will automatically send through some default messages some default dispatches for you so let me go ahead and make this work again there we go so that's going to work clean this code up here and so you'll notice that automatically it sends off a foo pending and so foo is going to be the type so I guess I do want a fetch users so automatically fires fetch users pending and then it's going to fire fetch users fulfilled whenever that's finished and then should there be an error it will do rejected fetch users pending fetch users rejected so it is cleaner if you do a lot of promises if all your a sink is promises you're not really using es6 generators then that's really clean you can see that cleans it up just fine and then you just up here you go fetch users pending fetch users rejected and then fetch users what was that fulfilled it's probably two L's in the fulfill no there's just one a lot fulfilled Wow I was home schooled let's make that error again and you can see that rejected picks up excellent so there you go that is how you handle asynchronous actions with redux you just change the way you dispatch them so that's about all you need to know in the next videos we can actually tie this into our react application and make the react application simply reflect the state of the store
