With timestamps:

00:00 - sorry babe I wasn't listening I was too
00:02 - busy fixing my flux dispatcher you see
00:04 - it wasn't emitting the constants to the
00:06 - storage properly yes as I'm sure you're
00:08 - aware by now flux and react use a lot of
00:12 - words that are kind of new to the
00:14 - JavaScript community so once you get
00:16 - over that kind of initial terrifying oh
00:18 - my goodness what are you talking about
00:20 - then you wrap your head around what
00:22 - those words mean and flux really isn't
00:24 - complicated at all just hard to
00:26 - understand when people forget what it's
00:28 - like to have not heard those words and
00:30 - try to communicate it to you so where
00:32 - our app is so far is we have our
00:34 - component our to-do list component and
00:37 - we are pulling all of our to-dos from
00:38 - the store so next up let's actually get
00:41 - this to be more Dynamic uh to where when
00:43 - our store changes it emits a change
00:46 - method and then our component can
00:49 - automatically stay updated as the store
00:51 - changes that's really easy to do um so
00:54 - let's go and add a create to-do method
00:57 - so create to-do and I'm on my store
00:59 - right right here uh actually I'm not I'm
01:02 - on my page let's go to my
01:04 - store go to my store let's do add a
01:06 - create Todo
01:09 - method and now we probably only need to
01:12 - receive our text and so then all we're
01:15 - going to do is this. todos do push we're
01:17 - going to push a new one onto the array
01:19 - and we need the text
01:21 - complete will be false by default and
01:24 - then we also need an ID so for now I'm
01:27 - just going to kind of hack an ID in here
01:29 - and we're just going to go date
01:31 - now which just prints off a timestamp if
01:34 - you go over here and say date
01:36 - now that's just going to always give me
01:38 - a time stamp so as long as I'm not
01:40 - firing two date Nows in the exact same
01:42 - millisecond I'm fine for this app
01:44 - scenario that I'm doing so let's also
01:47 - add in the ID so we have ID text and
01:50 - complete and then all we have to do is
01:51 - emit a change
01:53 - event um and we just have to go this
01:57 - emit Chang
02:00 - so on change someone else can get that
02:02 - event so now let's just go back to our
02:04 - to-dos page and there's a awesome thing
02:08 - that's in the react component called
02:10 - component will Mount whenever the
02:13 - component is about to render to the Dom
02:16 - for the very first time and the first
02:17 - time only it will fire the component
02:19 - will Mount function if it exists so this
02:22 - is a great place to add event listeners
02:24 - uh because you only have to do it when
02:26 - it gets rendered and it only happens
02:28 - once so at this point we can go to do
02:30 - store on
02:32 - change and let's give it a function
02:36 - Arrow function so it automatically binds
02:37 - to this I can go this do set
02:42 - State to-dos and we're basically going
02:45 - to just update our to-dos with the to-do
02:47 - store get all so whenever to-do store
02:49 - changes we update our state very
02:52 - simple add semicolons which are no
02:54 - longer necessary with our transpilation
02:56 - um so great that should be working
02:58 - here's how we can test that is we can
03:00 - just expose our to-do store globally for
03:03 - now equals to-do store so now I can
03:07 - actually access that from the console I
03:10 - can go to-do store. create
03:16 - Todo excellent test Todo showed up test
03:19 - Todo two showed up so now our component
03:22 - is dynamically updating whenever the
03:25 - store changes uh our next step to do is
03:28 - going to be to wire in a dispat ER so
03:30 - any events can come through to the store
03:33 - so let's go and create a flux dispatcher

Cleaned transcript:

sorry babe I wasn't listening I was too busy fixing my flux dispatcher you see it wasn't emitting the constants to the storage properly yes as I'm sure you're aware by now flux and react use a lot of words that are kind of new to the JavaScript community so once you get over that kind of initial terrifying oh my goodness what are you talking about then you wrap your head around what those words mean and flux really isn't complicated at all just hard to understand when people forget what it's like to have not heard those words and try to communicate it to you so where our app is so far is we have our component our todo list component and we are pulling all of our todos from the store so next up let's actually get this to be more Dynamic uh to where when our store changes it emits a change method and then our component can automatically stay updated as the store changes that's really easy to do um so let's go and add a create todo method so create todo and I'm on my store right right here uh actually I'm not I'm on my page let's go to my store go to my store let's do add a create Todo method and now we probably only need to receive our text and so then all we're going to do is this. todos do push we're going to push a new one onto the array and we need the text complete will be false by default and then we also need an ID so for now I'm just going to kind of hack an ID in here and we're just going to go date now which just prints off a timestamp if you go over here and say date now that's just going to always give me a time stamp so as long as I'm not firing two date Nows in the exact same millisecond I'm fine for this app scenario that I'm doing so let's also add in the ID so we have ID text and complete and then all we have to do is emit a change event um and we just have to go this emit Chang so on change someone else can get that event so now let's just go back to our todos page and there's a awesome thing that's in the react component called component will Mount whenever the component is about to render to the Dom for the very first time and the first time only it will fire the component will Mount function if it exists so this is a great place to add event listeners uh because you only have to do it when it gets rendered and it only happens once so at this point we can go to do store on change and let's give it a function Arrow function so it automatically binds to this I can go this do set State todos and we're basically going to just update our todos with the todo store get all so whenever todo store changes we update our state very simple add semicolons which are no longer necessary with our transpilation um so great that should be working here's how we can test that is we can just expose our todo store globally for now equals todo store so now I can actually access that from the console I can go todo store. create Todo excellent test Todo showed up test Todo two showed up so now our component is dynamically updating whenever the store changes uh our next step to do is going to be to wire in a dispat ER so any events can come through to the store so let's go and create a flux dispatcher
