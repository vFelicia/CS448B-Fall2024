With timestamps:

00:00 - in this video we're going to take a
00:01 - deeper dive into mobx and how you
00:03 - actually use mobx in a real application
00:05 - by building out this to do's application
00:08 - so let's start by actually printing
00:09 - these to-do's out we have this to do
00:11 - store again that's giving us two really
00:13 - basic to-do's all they are is strings at
00:15 - this point so let's go ahead and make a
00:16 - ul with lis for that we won't really
00:19 - mess with css but we'll get it going for
00:21 - this example with the ul and list
00:31 - then i'm going to go ahead and pull
00:33 - those to-do's out of my props
00:40 - i'm going to go and map those to list
00:52 - so there we are our to-do's are now
00:54 - showing up so let's go ahead and get
00:55 - this filter going one great feature of
00:58 - mobx is we can actually real time react
01:01 - to computed values so if we were to
01:04 - filter this list by whatever this value
01:07 - is that would be a computed value and
01:09 - that's extremely easy to do in mobx
01:11 - let's start by getting the input going
01:13 - to actually real time set this filter
01:15 - for us let's go ahead and print that
01:17 - filter here
01:21 - we'll pull it in
01:24 - now let's go get an input that will real
01:26 - time set that filter for us
01:36 - there we go so on change we're going to
01:38 - fire this dot filter so let's set that
01:40 - up
01:43 - and this will be extremely simple
01:52 - and there we have it so now we're going
01:54 - to have a ul and we're automatically
01:56 - going to be able to change that and that
01:58 - will set the filter
01:59 - you can see there we go our filter is
02:01 - setting let's go and wrap this and maybe
02:03 - a div just to clean it up a little bit
02:06 - for now
02:09 - there we go so you can see that our
02:11 - filter is automatically setting so let's
02:13 - go ahead and set a computed value now
02:15 - and to do that we simply import computed
02:17 - from mobx
02:21 - computed then will fire very lazily
02:23 - whenever it's needed to fire so let's go
02:25 - ahead and make an observable or a
02:27 - computed value
02:30 - and this is a get
02:33 - filtered to dose
02:35 - so whenever our data changes filter to
02:37 - do's will go ahead and compute a new
02:39 - value and we can just kind of basically
02:41 - check the filter and filter out all the
02:43 - to do's
02:47 - so i'm going to do a case insensitive
02:48 - check if it matches loosely our filter
02:52 - then let's go ahead filter them out so
02:53 - let's go and filter the to-dos now
02:57 - let's say if there is no filter at all
02:59 - so if there's no filter then we're going
03:01 - to say that that's okay we have not set
03:03 - a filter yet or if it matches the filter
03:09 - so there we go if no filter is set or if
03:11 - it matches the filter then our results
03:13 - will show so let's go ahead and save
03:14 - that and now our to-do list will get an
03:16 - additional value called filtered to do's
03:21 - which is essentially to this react
03:23 - component no different than the to-do's
03:24 - array itself so i can simply print out
03:27 - the filtered to do's instead
03:31 - there we go that's reloaded and let's
03:32 - see if it works yep if i do m it works
03:34 - if i do ch it filters out so now our to
03:37 - do's are filtering let's go ahead now
03:39 - and clear out this filter which we no
03:41 - longer need to see and in its place
03:43 - let's add an input that will allow us to
03:45 - create a new to do
03:55 - so we are going to do create new
04:00 - and let's uh set our create new up here
04:06 - and all we have to do is filter out we
04:08 - only want to create if key press 13
04:10 - which is enter has been pressed so if
04:18 - and let's clear out our value once we
04:20 - create a to-do
04:23 - so now we're calling the create to do
04:25 - method on our mobx store let's go and
04:27 - add that create to do method
04:33 - there we go now we have a second input
04:35 - on the page and let's see if we add a
04:37 - new to do to the list when we hit
04:39 - keypress 13.
04:41 - yes it does
04:43 - excellent so now we have an input that's
04:46 - real time adding stuff to our list and
04:48 - we have a filter let's only view the
04:49 - tests let's only view milk excellent
04:52 - that is working as well so now let's go
04:54 - ahead and add maybe some check boxes and
04:56 - a little bit more value to the to do
04:59 - store and this will get into the concept
05:01 - of nested stores or nested observable
05:04 - objects from mob x so for to do's we
05:07 - have the to do store but we want to make
05:09 - this an array of observable to do
05:11 - objects that have more than just a text
05:13 - string they need to have a state whether
05:15 - they're checked or not and they also
05:17 - probably need to have an id so to do
05:19 - this we're going to actually create a to
05:21 - do type so let's go and create a class
05:23 - of to do this could be done in another
05:26 - file but to keep things simple i'm just
05:27 - going to add it right here and it's
05:29 - going to have some observable values on
05:31 - its own so let's make an observable
05:33 - value id and complete
05:41 - and then a constructor for it
05:45 - and then real time we'll go ahead and
05:46 - create an id which we'll just use date
05:49 - now to kind of simulate an id
05:53 - that way it'll get a timestamp for an id
05:55 - that way it'll be unique
05:58 - and it'll automatically be false by
06:00 - default so then all we have to do is
06:02 - instead of pushing a value we can just
06:05 - push a new to do
06:07 - with a value
06:09 - and we'll just clear out this to do's
06:11 - list now and now let's see what happens
06:13 - and now it'll work or the store portion
06:16 - will work you can see that if i add
06:17 - tests in test one they're not showing up
06:19 - because i'm adding them to the store but
06:21 - now the store is inheriting an array of
06:24 - objects so to map these out to an li i
06:27 - simply need to do to do dot value
06:30 - and they will all work just fine now
06:32 - test test one test two or test three um
06:36 - we'll also at this point want to add a
06:38 - key to our
06:40 - to do's li so there's a unique key for
06:42 - each one react needs this i probably
06:44 - have a react warning yep you can see i
06:47 - have a warning here each child needs a
06:50 - unique key prop so let's go and add that
06:52 - key
06:53 - and that's where our to-do id will come
06:54 - in handy
06:56 - since the id will never change
06:58 - excellent that warning is gone well
07:00 - let's make sure it's gone yep that
07:02 - warning is gone
07:03 - and let's go ahead and add a checkbox
07:05 - why don't we
07:12 - and let's go and set the value to to do
07:15 - dot complete
07:19 - and let's also set checked to to do
07:21 - complete
07:26 - so there we go now any new to do should
07:29 - automatically reflect the state of its
07:31 - object
07:32 - up here of its observable object so
07:34 - let's go ahead and test this out
07:37 - okay it looks like it's doing good to
07:39 - verify this let's make the default to be
07:40 - true
07:41 - so now all of our new to to-do's should
07:43 - automatically be checked
07:46 - okay very cool that's working so now
07:48 - let's go ahead and set a change method
07:50 - to automatically change that
07:58 - and kind of as a little hacky quick way
08:00 - i'm going to bind it to this and i'm
08:03 - also going to pass to do as the first
08:05 - argument in there so the first argument
08:07 - will be to do here so toggle
08:10 - complete we'll get the to-do
08:14 - of whatever was clicked now if you don't
08:16 - like this way of doing it you could also
08:18 - just totally pass in the id or you could
08:20 - even print the id here on the input
08:22 - element but it's in my opinion just as
08:25 - simple and is not going to cause any
08:26 - problems to pass it in this way
08:28 - so let's go to do dot complete
08:31 - equals the opposite of its complete
08:34 - status
08:36 - now it's important to note here that if
08:38 - you don't like the coupling of the to-do
08:41 - list right here to the to-do store you
08:43 - can see that i'm manually changing the
08:44 - to-do right here
08:46 - what i could definitely do is do
08:48 - something that's more along the lines of
08:49 - actions with mob x whereas instead of
08:52 - changing the complete item within this
08:53 - component i could fire off a to do
08:56 - complete or a to do toggle complete
08:58 - action pass off the id and something
09:01 - else outside of this module outside of
09:04 - this react component could handle that
09:06 - action and update the store as a third
09:09 - party action so you can still definitely
09:11 - do flux style actions in mob x if you
09:14 - like that abstraction but for something
09:16 - that's not as complex as what we're
09:18 - dealing with here or for something
09:19 - that's as simple as we're dealing with
09:21 - it really doesn't need to have that
09:23 - level of abstraction so let's test this
09:25 - out
09:27 - and can we change it yes we can so let's
09:29 - go and change this to be false now
09:32 - and let's add one more feature now that
09:34 - we can complete some items let's make a
09:36 - little button to clear those completed
09:38 - items
09:44 - and let's say clear complete
09:48 - and so we're just going to basically
09:49 - fire
09:51 - this.props.store.clearcomplete of course
09:52 - i can actually clear that out a little
09:54 - bit
09:55 - and just import clear complete
09:58 - which doesn't exist let's go ahead and
09:59 - create that now
10:05 - and i'm going to automatically bind it
10:07 - using an arrow function so that way it
10:09 - is bound to this it will always fire
10:10 - within correct context
10:12 - and i can't really change this dot to
10:15 - use
10:16 - one of the differences one of the big
10:17 - differences between observable arrays
10:19 - and plane arrays uh they act almost the
10:22 - same in every way except for i can't
10:23 - erase it i can't just point to a new
10:25 - object because then the reference is
10:27 - actually messed up we have lost all our
10:30 - reactivity at that point so what they do
10:32 - is they give you a replace method so i
10:34 - can call to-do's replace
10:36 - which can now replace it with a new set
10:39 - of to-do's so i can go ahead create the
10:41 - new complete or incomplete set of
10:43 - to-do's
10:52 - so if the to do's are not complete
10:54 - they're going to end up in this array
10:55 - and i can replace it right here
10:59 - so let's go ahead and test this out now
11:00 - we can go test test one test two
11:04 - and if i hit clear complete nothing
11:06 - happens and let's check a few as
11:08 - complete
11:09 - and the other two go away about the only
11:11 - thing i need to do now is my filtering
11:13 - is i assume to be broken yes everything
11:15 - breaks
11:16 - because if you'll remember my to-do is
11:18 - not a simple string now it's got a value
11:21 - so to do dot value
11:24 - i'll need to update that my filtering
11:26 - should be working again
11:28 - now if i say two yep now we're good and
11:31 - there you have it we've added quite a
11:33 - few features in a matter of minutes to
11:36 - our to-do list it was extremely easy to
11:38 - do mobx made it really really fun and
11:41 - look at how little code we have what is
11:44 - this we have 35 lines of code in our
11:46 - components and we have somewhere around
11:48 - 30 lines of code between our to do class
11:52 - and our to do store class this is the
11:54 - joy of mobx you simply get a lot of work
11:57 - done for the amount of time you put into
11:59 - it hope you enjoyed these lessons have a
12:01 - great day

Cleaned transcript:

in this video we're going to take a deeper dive into mobx and how you actually use mobx in a real application by building out this to do's application so let's start by actually printing these todo's out we have this to do store again that's giving us two really basic todo's all they are is strings at this point so let's go ahead and make a ul with lis for that we won't really mess with css but we'll get it going for this example with the ul and list then i'm going to go ahead and pull those todo's out of my props i'm going to go and map those to list so there we are our todo's are now showing up so let's go ahead and get this filter going one great feature of mobx is we can actually real time react to computed values so if we were to filter this list by whatever this value is that would be a computed value and that's extremely easy to do in mobx let's start by getting the input going to actually real time set this filter for us let's go ahead and print that filter here we'll pull it in now let's go get an input that will real time set that filter for us there we go so on change we're going to fire this dot filter so let's set that up and this will be extremely simple and there we have it so now we're going to have a ul and we're automatically going to be able to change that and that will set the filter you can see there we go our filter is setting let's go and wrap this and maybe a div just to clean it up a little bit for now there we go so you can see that our filter is automatically setting so let's go ahead and set a computed value now and to do that we simply import computed from mobx computed then will fire very lazily whenever it's needed to fire so let's go ahead and make an observable or a computed value and this is a get filtered to dose so whenever our data changes filter to do's will go ahead and compute a new value and we can just kind of basically check the filter and filter out all the to do's so i'm going to do a case insensitive check if it matches loosely our filter then let's go ahead filter them out so let's go and filter the todos now let's say if there is no filter at all so if there's no filter then we're going to say that that's okay we have not set a filter yet or if it matches the filter so there we go if no filter is set or if it matches the filter then our results will show so let's go ahead and save that and now our todo list will get an additional value called filtered to do's which is essentially to this react component no different than the todo's array itself so i can simply print out the filtered to do's instead there we go that's reloaded and let's see if it works yep if i do m it works if i do ch it filters out so now our to do's are filtering let's go ahead now and clear out this filter which we no longer need to see and in its place let's add an input that will allow us to create a new to do so we are going to do create new and let's uh set our create new up here and all we have to do is filter out we only want to create if key press 13 which is enter has been pressed so if and let's clear out our value once we create a todo so now we're calling the create to do method on our mobx store let's go and add that create to do method there we go now we have a second input on the page and let's see if we add a new to do to the list when we hit keypress 13. yes it does excellent so now we have an input that's real time adding stuff to our list and we have a filter let's only view the tests let's only view milk excellent that is working as well so now let's go ahead and add maybe some check boxes and a little bit more value to the to do store and this will get into the concept of nested stores or nested observable objects from mob x so for to do's we have the to do store but we want to make this an array of observable to do objects that have more than just a text string they need to have a state whether they're checked or not and they also probably need to have an id so to do this we're going to actually create a to do type so let's go and create a class of to do this could be done in another file but to keep things simple i'm just going to add it right here and it's going to have some observable values on its own so let's make an observable value id and complete and then a constructor for it and then real time we'll go ahead and create an id which we'll just use date now to kind of simulate an id that way it'll get a timestamp for an id that way it'll be unique and it'll automatically be false by default so then all we have to do is instead of pushing a value we can just push a new to do with a value and we'll just clear out this to do's list now and now let's see what happens and now it'll work or the store portion will work you can see that if i add tests in test one they're not showing up because i'm adding them to the store but now the store is inheriting an array of objects so to map these out to an li i simply need to do to do dot value and they will all work just fine now test test one test two or test three um we'll also at this point want to add a key to our to do's li so there's a unique key for each one react needs this i probably have a react warning yep you can see i have a warning here each child needs a unique key prop so let's go and add that key and that's where our todo id will come in handy since the id will never change excellent that warning is gone well let's make sure it's gone yep that warning is gone and let's go ahead and add a checkbox why don't we and let's go and set the value to to do dot complete and let's also set checked to to do complete so there we go now any new to do should automatically reflect the state of its object up here of its observable object so let's go ahead and test this out okay it looks like it's doing good to verify this let's make the default to be true so now all of our new to todo's should automatically be checked okay very cool that's working so now let's go ahead and set a change method to automatically change that and kind of as a little hacky quick way i'm going to bind it to this and i'm also going to pass to do as the first argument in there so the first argument will be to do here so toggle complete we'll get the todo of whatever was clicked now if you don't like this way of doing it you could also just totally pass in the id or you could even print the id here on the input element but it's in my opinion just as simple and is not going to cause any problems to pass it in this way so let's go to do dot complete equals the opposite of its complete status now it's important to note here that if you don't like the coupling of the todo list right here to the todo store you can see that i'm manually changing the todo right here what i could definitely do is do something that's more along the lines of actions with mob x whereas instead of changing the complete item within this component i could fire off a to do complete or a to do toggle complete action pass off the id and something else outside of this module outside of this react component could handle that action and update the store as a third party action so you can still definitely do flux style actions in mob x if you like that abstraction but for something that's not as complex as what we're dealing with here or for something that's as simple as we're dealing with it really doesn't need to have that level of abstraction so let's test this out and can we change it yes we can so let's go and change this to be false now and let's add one more feature now that we can complete some items let's make a little button to clear those completed items and let's say clear complete and so we're just going to basically fire this.props.store.clearcomplete of course i can actually clear that out a little bit and just import clear complete which doesn't exist let's go ahead and create that now and i'm going to automatically bind it using an arrow function so that way it is bound to this it will always fire within correct context and i can't really change this dot to use one of the differences one of the big differences between observable arrays and plane arrays uh they act almost the same in every way except for i can't erase it i can't just point to a new object because then the reference is actually messed up we have lost all our reactivity at that point so what they do is they give you a replace method so i can call todo's replace which can now replace it with a new set of todo's so i can go ahead create the new complete or incomplete set of todo's so if the to do's are not complete they're going to end up in this array and i can replace it right here so let's go ahead and test this out now we can go test test one test two and if i hit clear complete nothing happens and let's check a few as complete and the other two go away about the only thing i need to do now is my filtering is i assume to be broken yes everything breaks because if you'll remember my todo is not a simple string now it's got a value so to do dot value i'll need to update that my filtering should be working again now if i say two yep now we're good and there you have it we've added quite a few features in a matter of minutes to our todo list it was extremely easy to do mobx made it really really fun and look at how little code we have what is this we have 35 lines of code in our components and we have somewhere around 30 lines of code between our to do class and our to do store class this is the joy of mobx you simply get a lot of work done for the amount of time you put into it hope you enjoyed these lessons have a great day
