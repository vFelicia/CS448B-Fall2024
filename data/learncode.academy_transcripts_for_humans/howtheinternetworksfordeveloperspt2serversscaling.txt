With timestamps:

00:01 - hey this is video two of how does the
00:03 - internet work from a web development
00:04 - perspective uh if you're just jumping in
00:06 - now go back and watch video one I'll put
00:08 - links around for that and let's get into
00:11 - what does the server world look like
00:13 - from a web development perspective how
00:14 - does the internet work from the backend
00:17 - perspective of the internet so we we
00:19 - narrowed it down the basis of the
00:21 - internet is browsers or clients
00:24 - sometimes they're called clients are
00:25 - making requests to your server and my
00:28 - server is going to post back respon
00:30 - my server is 100% responsible for what
00:32 - those responses are you could say give
00:34 - me google.com and my Google server could
00:36 - give you an image right you could say
00:39 - mysite.com and my site could just give
00:41 - you back a CSS file every time I'm in
00:43 - control of what happens let's look at
00:45 - how that actually works let me go ahead
00:47 - and drag over don't get confused here if
00:51 - this looks a little freaky this is what
00:53 - I will call a basic website server
00:55 - configuration now there are tons of
00:57 - different kinds of server configurations
01:00 - um if you went to say host skater and
01:02 - sign up for a website package you're
01:04 - going to get what's called a c panel C
01:06 - panel sits on top of your server it's
01:09 - software that manages some things for
01:11 - you and here's what it's setting up for
01:13 - you is they're going to set up an Apache
01:15 - web server uh you're going to get
01:17 - probably a lamp machine lamp is it's
01:19 - running Linux it's using Apache for the
01:22 - web server MySQL for the database PHP
01:25 - for the backend language this is kind of
01:27 - the most popular for anything up to to
01:30 - Enterprise or you know anything up to
01:33 - professional level stuff if you want a
01:35 - basic website this is the way to go it's
01:37 - just easy Apache as a web server is very
01:40 - flexible it can do a lot of stuff but
01:42 - what it's most often used for is just
01:44 - basic serving up of files websites we
01:47 - call them so here's what Apache does
01:50 - Apache is the web server program that
01:52 - runs on your server this Square here
01:54 - represents this machine so this is my
01:56 - machine this is an actual computer
01:58 - plugged into the internet with an IP
02:00 - address and so Apache is set up to
02:02 - listen to Port 80 now don't freak out I
02:05 - just said Port what port 80 is is that's
02:07 - the default HTTP Port so if I went to
02:10 - http col SL slash if I could spell if I
02:14 - went to that IP address it's the same as
02:16 - going to that IP address colon 80 so the
02:19 - colon 80 gives it a port I can request
02:21 - Port 3000 uh but by default it's
02:24 - basically going to request Port 80 so
02:27 - the reason your computer has an IP
02:29 - address address but you can't go to that
02:31 - IP address and get your files is you
02:33 - don't have a web server program running
02:35 - it'd be very dangerous if anybody who
02:38 - accesses your IP address can just surf
02:39 - your computer that's terrible so a web
02:42 - server runs and it will listen to
02:45 - requests and it will kind of have access
02:47 - to certain parts so Apache is set up to
02:50 - listen to Port 80 and you configure
02:52 - different hosts to different folders if
02:55 - you remember from our example here I'm
02:57 - requesting google.com no path
03:00 - so when I request that my browser
03:02 - actually goes to the DNS lookup the DNS
03:05 - lookup sends me to my server so my
03:07 - server just gets a request to the IP
03:09 - address now but it still knows from my
03:12 - headers that you're looking for
03:14 - google.com so Apache knows ah mysite.com
03:17 - well mysite.com let's look in the sitm
03:21 - mysite.com www folder and so the basic
03:26 - Apache configuration is just going to
03:27 - serve you files from that folder that's
03:29 - it no smart stuff it's just going to
03:31 - give you files So when you say
03:32 - mysite.com it's going to go to the
03:34 - folder that's configured for that
03:37 - website and it's going to give you the
03:39 - index.html if it exists or the index.php
03:43 - if it exists that's pretty much your
03:45 - basic configuration so you could
03:47 - configure 10 different websites
03:48 - mysite.com yoursite.com our site.com and
03:52 - you could make them all look to this
03:53 - folder or you can make your site.com
03:55 - look to another folder on your computer
03:58 - you can make our site.com look at this
04:00 - folder and so that's kind of Apache can
04:02 - serve one server can handle multiple
04:05 - websites uh so you go to mysite.com it
04:08 - by default apache's website
04:10 - configuration it's going to look for the
04:12 - index file and you know if you give it a
04:15 - path say IMG logo2 well then it's going
04:18 - to look it's going to look at that path
04:21 - and say well does that file exist let's
04:23 - see if there's an IMG folder let's look
04:25 - in that IMG folder to see if logo jpeg
04:27 - exists hey it does let's send that back
04:30 - in the response and since that's a JPEG
04:32 - we're just going to be smart enough to
04:34 - give it a a content type of
04:37 - image/jpeg that's your basic Apache
04:39 - setup it's going to automatically grab
04:41 - you files and it's going to
04:43 - automatically set content types uh for
04:45 - you and you can configure the content
04:47 - types that you want to return so that's
04:50 - kind of your basic website setup if you
04:53 - get a website you're just building
04:55 - content for people that's what's going
04:56 - on let's look at something more
04:57 - complicated so clearly Twitter doesn't
05:00 - do this uh Twitter has to manage users
05:03 - and tweets and all that stuff they're
05:04 - not just handing you a JPEG file how
05:06 - does a a bigger company handle these
05:10 - things so they're running what's called
05:12 - a web application a web application
05:15 - server is set up a little bit
05:17 - differently so you've got your web
05:19 - application itself this will be Ruby on
05:21 - Rails or this will be if your PHP it
05:23 - will be laravel or code igniter or
05:25 - node.js
05:27 - um this will be net uh your web
05:30 - application right here is is set up to
05:33 - respond to stuff so let's say your web
05:35 - application is also listening to Port 80
05:39 - uh let's say I've configured this to
05:40 - listen to Port 80 so now I'm going to
05:43 - get when requests come to my IP address
05:46 - from this machine uh this web
05:48 - application will pick up on them haha
05:50 - what are they looking
05:51 - for they're looking for twitter.com okay
05:54 - twitter.com is not my twitter.com
05:57 - homepage is not just a homepage it's not
05:59 - just an an HTML page it has all the
06:02 - tweets baked into it so what I'm going
06:04 - to do is I'm first going to go to my
06:05 - database which would be like my SQL or
06:07 - mongodb give me all the tweets from this
06:10 - user's timeline and now I'm going to go
06:13 - get my template I'll have what's called
06:15 - a template which says it looks kind of
06:18 - like HTML says head body but then it
06:21 - also says for each tweet spit out this
06:23 - piece of code and put the tweets
06:25 - information in it so then I'm going to
06:27 - template that together and then I'm
06:29 - going to to send that that template
06:32 - mixed with the tweets as a response I'm
06:35 - basically going to generate HTML on the
06:37 - Fly send that as my response back to the
06:40 - user and I'm going to set the content
06:41 - type as text/html so as far as you're
06:44 - concerned the user just gets HTML blah
06:47 - blah blah they don't care how it was
06:48 - made they don't care what framework made
06:51 - it they don't care if code igniter made
06:53 - it or if Ruby on Rails made it the
06:54 - browser just says here's what I got and
06:57 - the header the response typee is text
06:59 - HTML so as far as I'm concerned you gave
07:01 - me an HTML file I'm going to spit out an
07:03 - HTML file and so that's kind of how web
07:07 - application server works if you request
07:09 - it's also smart enough to know that if
07:10 - you request images logo. jpeg Ah that's
07:14 - just a file I can go grab that from the
07:16 - file system and send it back with a
07:18 - content type of
07:20 - imagejpeg and so it also will reply to
07:24 - JavaScript requests so say JavaScript
07:27 - makes a delete request uh Delete tweet
07:32 - id1 then your web application is
07:35 - listening to a request on mysite.com
07:41 - delete1 so or SL tweet1 delete request
07:45 - on that so if I send that request in
07:48 - delet tweet SL1 it knows aha that's
07:51 - that's got a method of delete so I'm now
07:53 - going to go find it in the database I'm
07:55 - going to send a delete boom you're out
07:57 - of the database I'm just going to send
08:00 - them a 200 okay no content back just a
08:03 - 200 okay response absolutely no content
08:06 - back JavaScript can pick up on that and
08:08 - say woohoo we deleted it and then
08:10 - JavaScript can make it go poof from your
08:12 - web page so that's kind of how your web
08:14 - application server has you're going to
08:16 - manage three different things you're
08:18 - going to
08:19 - manage templating of stuff and
08:22 - generating HTML on the Fly you're going
08:24 - to manage API which is Javascript
08:27 - talking to you uh JavaScript says delete
08:29 - Del this I don't need HTML back I just
08:31 - want you to delete this tweet and tell
08:32 - me it was done okay so oh okay delete
08:35 - request to this delete it from the
08:37 - database it's gone and it's also going
08:40 - to handle static assets it's going to
08:42 - handle serving up of images that never
08:44 - change uh you request this image I'll
08:47 - hand hand it back you can break this up
08:50 - into three applications one just for the
08:52 - HTML one just for the API one just for
08:55 - all the logos you can do a million
08:56 - different things with it but that's kind
08:58 - of how everything goes in the web
09:00 - application
09:01 - World um and so let's say what happens
09:05 - when this server starts getting so
09:06 - overloaded because your website is so
09:08 - popular it can't handle it anymore well
09:10 - you got two choices either upgrade to a
09:12 - more powerful machine with more RAM more
09:15 - processing speed all that uh and that
09:17 - will get you by for a short term but
09:19 - you're going to run out eventually
09:21 - Google and Twitter can't run this all on
09:23 - one big pimped out laptop they need
09:26 - something more powerful than that so
09:28 - what you're going to do at that point
09:29 - points is you're going to let me see if
09:30 - this will work okay that that got ugly
09:33 - um but what you're going to do is you're
09:35 - going to then run multiple copies of
09:38 - your exact web application so this is on
09:42 - its own 6345 I'm just making something
09:45 - up this is running on say your. two box
09:48 - uh it's its own machine with its own IP
09:50 - address this is going to be its own
09:52 - machine with its own IP address and this
09:54 - is going to be its own machine with its
09:55 - own IP address and then let's see if I
09:58 - can pull this out here
10:00 - gotcha then you're going to actually
10:03 - this will be a machine with its IP
10:05 - address here um and you will run a load
10:10 - balancer which sounds complicated but
10:13 - it's really not uh what's the let's just
10:15 - make some up 34 dot I'll say one so this
10:19 - your DNS for mysite.com points to your
10:21 - load balancer now so you go mysite.com
10:24 - DNS points to here this guy is going to
10:27 - keep track of how each of these guys are
10:29 - doing and he is going to real time send
10:32 - traffic to each box um each web
10:35 - application in the Box um so if you've
10:38 - got your first user will go here your
10:40 - second user will go here your third user
10:42 - will go here and then depending on how
10:44 - this is set up different load balancing
10:46 - programs handle it different some will
10:47 - always go one two 3 one two 3 one two
10:50 - three some will look at keep a track of
10:52 - who's the busiest and send people to the
10:54 - server that has the most capacity so
10:57 - then it's called scaling your website
10:59 - then say your users are getting more and
11:01 - more and more you just add another
11:03 - server in there a five server configure
11:06 - this guy to also have a five server that
11:09 - he processes request to and boom and so
11:11 - you just keep adding servers on and you
11:15 - have to figure out at that point a
11:16 - deployment process so how do I actually
11:18 - send this code to all the servers in one
11:21 - command and that can get a little fun
11:23 - but that's basically what the backend
11:26 - side of things looks like I probably
11:28 - covered a ton if especially if you're
11:30 - new to web development this is a lot of
11:32 - information uh but that's basically what
11:35 - the backend side of things looks like
11:38 - and now you're free to start messing
11:40 - with the server technology Ruby on Rails
11:44 - nodejs PHP laravel you know whatever you
11:46 - want to get into now you're free to get
11:48 - into it I hope this was a help to you
11:50 - and uh if you have any questions stuff
11:52 - that just isn't clear feel free to leave
11:54 - comments below all right have a great
11:55 - day

Cleaned transcript:

hey this is video two of how does the internet work from a web development perspective uh if you're just jumping in now go back and watch video one I'll put links around for that and let's get into what does the server world look like from a web development perspective how does the internet work from the backend perspective of the internet so we we narrowed it down the basis of the internet is browsers or clients sometimes they're called clients are making requests to your server and my server is going to post back respon my server is 100% responsible for what those responses are you could say give me google.com and my Google server could give you an image right you could say mysite.com and my site could just give you back a CSS file every time I'm in control of what happens let's look at how that actually works let me go ahead and drag over don't get confused here if this looks a little freaky this is what I will call a basic website server configuration now there are tons of different kinds of server configurations um if you went to say host skater and sign up for a website package you're going to get what's called a c panel C panel sits on top of your server it's software that manages some things for you and here's what it's setting up for you is they're going to set up an Apache web server uh you're going to get probably a lamp machine lamp is it's running Linux it's using Apache for the web server MySQL for the database PHP for the backend language this is kind of the most popular for anything up to to Enterprise or you know anything up to professional level stuff if you want a basic website this is the way to go it's just easy Apache as a web server is very flexible it can do a lot of stuff but what it's most often used for is just basic serving up of files websites we call them so here's what Apache does Apache is the web server program that runs on your server this Square here represents this machine so this is my machine this is an actual computer plugged into the internet with an IP address and so Apache is set up to listen to Port 80 now don't freak out I just said Port what port 80 is is that's the default HTTP Port so if I went to http col SL slash if I could spell if I went to that IP address it's the same as going to that IP address colon 80 so the colon 80 gives it a port I can request Port 3000 uh but by default it's basically going to request Port 80 so the reason your computer has an IP address address but you can't go to that IP address and get your files is you don't have a web server program running it'd be very dangerous if anybody who accesses your IP address can just surf your computer that's terrible so a web server runs and it will listen to requests and it will kind of have access to certain parts so Apache is set up to listen to Port 80 and you configure different hosts to different folders if you remember from our example here I'm requesting google.com no path so when I request that my browser actually goes to the DNS lookup the DNS lookup sends me to my server so my server just gets a request to the IP address now but it still knows from my headers that you're looking for google.com so Apache knows ah mysite.com well mysite.com let's look in the sitm mysite.com www folder and so the basic Apache configuration is just going to serve you files from that folder that's it no smart stuff it's just going to give you files So when you say mysite.com it's going to go to the folder that's configured for that website and it's going to give you the index.html if it exists or the index.php if it exists that's pretty much your basic configuration so you could configure 10 different websites mysite.com yoursite.com our site.com and you could make them all look to this folder or you can make your site.com look to another folder on your computer you can make our site.com look at this folder and so that's kind of Apache can serve one server can handle multiple websites uh so you go to mysite.com it by default apache's website configuration it's going to look for the index file and you know if you give it a path say IMG logo2 well then it's going to look it's going to look at that path and say well does that file exist let's see if there's an IMG folder let's look in that IMG folder to see if logo jpeg exists hey it does let's send that back in the response and since that's a JPEG we're just going to be smart enough to give it a a content type of image/jpeg that's your basic Apache setup it's going to automatically grab you files and it's going to automatically set content types uh for you and you can configure the content types that you want to return so that's kind of your basic website setup if you get a website you're just building content for people that's what's going on let's look at something more complicated so clearly Twitter doesn't do this uh Twitter has to manage users and tweets and all that stuff they're not just handing you a JPEG file how does a a bigger company handle these things so they're running what's called a web application a web application server is set up a little bit differently so you've got your web application itself this will be Ruby on Rails or this will be if your PHP it will be laravel or code igniter or node.js um this will be net uh your web application right here is is set up to respond to stuff so let's say your web application is also listening to Port 80 uh let's say I've configured this to listen to Port 80 so now I'm going to get when requests come to my IP address from this machine uh this web application will pick up on them haha what are they looking for they're looking for twitter.com okay twitter.com is not my twitter.com homepage is not just a homepage it's not just an an HTML page it has all the tweets baked into it so what I'm going to do is I'm first going to go to my database which would be like my SQL or mongodb give me all the tweets from this user's timeline and now I'm going to go get my template I'll have what's called a template which says it looks kind of like HTML says head body but then it also says for each tweet spit out this piece of code and put the tweets information in it so then I'm going to template that together and then I'm going to to send that that template mixed with the tweets as a response I'm basically going to generate HTML on the Fly send that as my response back to the user and I'm going to set the content type as text/html so as far as you're concerned the user just gets HTML blah blah blah they don't care how it was made they don't care what framework made it they don't care if code igniter made it or if Ruby on Rails made it the browser just says here's what I got and the header the response typee is text HTML so as far as I'm concerned you gave me an HTML file I'm going to spit out an HTML file and so that's kind of how web application server works if you request it's also smart enough to know that if you request images logo. jpeg Ah that's just a file I can go grab that from the file system and send it back with a content type of imagejpeg and so it also will reply to JavaScript requests so say JavaScript makes a delete request uh Delete tweet id1 then your web application is listening to a request on mysite.com delete1 so or SL tweet1 delete request on that so if I send that request in delet tweet SL1 it knows aha that's that's got a method of delete so I'm now going to go find it in the database I'm going to send a delete boom you're out of the database I'm just going to send them a 200 okay no content back just a 200 okay response absolutely no content back JavaScript can pick up on that and say woohoo we deleted it and then JavaScript can make it go poof from your web page so that's kind of how your web application server has you're going to manage three different things you're going to manage templating of stuff and generating HTML on the Fly you're going to manage API which is Javascript talking to you uh JavaScript says delete Del this I don't need HTML back I just want you to delete this tweet and tell me it was done okay so oh okay delete request to this delete it from the database it's gone and it's also going to handle static assets it's going to handle serving up of images that never change uh you request this image I'll hand hand it back you can break this up into three applications one just for the HTML one just for the API one just for all the logos you can do a million different things with it but that's kind of how everything goes in the web application World um and so let's say what happens when this server starts getting so overloaded because your website is so popular it can't handle it anymore well you got two choices either upgrade to a more powerful machine with more RAM more processing speed all that uh and that will get you by for a short term but you're going to run out eventually Google and Twitter can't run this all on one big pimped out laptop they need something more powerful than that so what you're going to do at that point points is you're going to let me see if this will work okay that that got ugly um but what you're going to do is you're going to then run multiple copies of your exact web application so this is on its own 6345 I'm just making something up this is running on say your. two box uh it's its own machine with its own IP address this is going to be its own machine with its own IP address and this is going to be its own machine with its own IP address and then let's see if I can pull this out here gotcha then you're going to actually this will be a machine with its IP address here um and you will run a load balancer which sounds complicated but it's really not uh what's the let's just make some up 34 dot I'll say one so this your DNS for mysite.com points to your load balancer now so you go mysite.com DNS points to here this guy is going to keep track of how each of these guys are doing and he is going to real time send traffic to each box um each web application in the Box um so if you've got your first user will go here your second user will go here your third user will go here and then depending on how this is set up different load balancing programs handle it different some will always go one two 3 one two 3 one two three some will look at keep a track of who's the busiest and send people to the server that has the most capacity so then it's called scaling your website then say your users are getting more and more and more you just add another server in there a five server configure this guy to also have a five server that he processes request to and boom and so you just keep adding servers on and you have to figure out at that point a deployment process so how do I actually send this code to all the servers in one command and that can get a little fun but that's basically what the backend side of things looks like I probably covered a ton if especially if you're new to web development this is a lot of information uh but that's basically what the backend side of things looks like and now you're free to start messing with the server technology Ruby on Rails nodejs PHP laravel you know whatever you want to get into now you're free to get into it I hope this was a help to you and uh if you have any questions stuff that just isn't clear feel free to leave comments below all right have a great day
