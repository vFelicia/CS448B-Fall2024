With timestamps:

00:00 - hello everyone the purpose of this video
00:01 - is going to be to give you a high level
00:03 - overview of programming how it works and
00:06 - what programmers actually do with code
00:09 - to make a computer do something smart
00:12 - we're going to use the language
00:13 - javascript because it's the most popular
00:15 - language on earth right now and if you
00:18 - learn basics in javascript it applies to
00:20 - a ton of other programming languages
00:22 - like python or java or many other things
00:25 - because programming is generally
00:27 - programming in all languages the
00:30 - concepts are the same almost across the
00:33 - board so if you want to follow along go
00:35 - to jsbin.com in your web browser and
00:38 - turn on the javascript and the console
00:40 - tabs we're going to turn all the other
00:42 - ones off because we do not need them we
00:43 - are just going to focus on the
00:45 - programming piece not the web
00:47 - development piece which is what html and
00:49 - css are also used for so in programming
00:52 - no matter what you're doing let's let's
00:54 - picture an example of a robot or let's
00:56 - say a tesla which is a robot car
00:59 - there are
01:00 - some things in common with all programs
01:02 - they have inputs usually they have a
01:05 - program that makes decisions and does
01:08 - something smart and then it usually has
01:10 - outputs as well so if we had a tesla
01:13 - let's say we had a tesla and we wanted
01:15 - to make it go to the finish line on a
01:17 - straight course and then stop
01:19 - our inputs would be some sort of
01:21 - distance sensor that could tell us how
01:24 - far we've gone or maybe it could
01:25 - actually see how far there is to the
01:27 - finish line and that would send an input
01:29 - into our program or we could say
01:31 - distance is ten distance is five
01:32 - distance is three right we're we're
01:34 - getting closer so the input to a tesla
01:37 - would be the distance sensor
01:39 - and then we'd have a program that takes
01:41 - that distance and determines do i push
01:43 - the gas do i push the brake what do i do
01:45 - right that's our program it makes that
01:46 - decision
01:48 - and then the output says gas to 1 or gas
01:52 - to 5 or break to one break to five right
01:55 - there are outputs we're actually
01:57 - telling that gas pedal and that brake
01:59 - pedal to go
02:00 - so the programming side of it is it's
02:03 - taking the inputs making some smart
02:05 - decisions and then sending the outputs
02:07 - if there are any in this case we're
02:09 - going to learn how to apply all those
02:11 - concepts in programming languages the
02:14 - first thing we're going to do is we're
02:16 - going to learn how to set a variable a
02:18 - variable is a value so the first value
02:21 - i'm going to put in my program for our
02:23 - fake tesla is distance i'm going to say
02:25 - let distance equal 10.
02:27 - let is this fancy little word that makes
02:29 - you feel like your god and you can say
02:31 - let distance equal 10 the first time i
02:34 - declare that there is a value in my
02:36 - program which is called distance i use
02:39 - the word let after that i can just say
02:41 - hey distance equals five i've just
02:43 - changed my distance now i could also say
02:45 - distance equals three and i've changed
02:48 - it again and now i can do an output so
02:50 - let's set an output here to console we
02:53 - have one command we're going to use all
02:55 - this time for our output and that is
02:56 - console.log
02:58 - that is a standard javascript command
03:01 - that lets us put something out to the
03:02 - console i'm going to log distance and
03:04 - see what it is
03:07 - so if i hit run over here or command
03:09 - enter control enter depending if i'm on
03:11 - mac or windows you can see that it set
03:13 - out three
03:14 - if i were to get rid of this line and
03:16 - run it again you can see that it put out
03:19 - 5 instead because i said hey my distance
03:21 - is 10
03:22 - i'm going to change that distance to 5.
03:25 - let's put out what the distance is
03:27 - and that's going to put out 5. so what
03:29 - i've done here is i have defined a
03:32 - variable now variables can be different
03:34 - types that's a keyword this type right
03:37 - here in javascript is called a number
03:40 - because it's a number i can do math on
03:41 - it i can say distance
03:43 - plus 6 which is going to be 11 right
03:46 - because we said distance is 10 and then
03:48 - distance changed to 5 and then we added
03:51 - 6 more to it and we got 11. i could say
03:53 - plus 6
03:54 - plus 1. so it's going to actually spit
03:56 - out 12 no matter how many times i run my
03:58 - program it's always going to spit out
04:00 - 12. i'm going to go ahead and clear this
04:04 - so the number type is is very basic you
04:06 - can use math with it you can do plus
04:09 - you can do minus
04:11 - -1
04:12 - star or asterisk is what you do four
04:15 - times so if i do times two it's going to
04:17 - say 10 because that's 5 times 2 and if i
04:20 - want to do divided by 2 then it's going
04:22 - to be 2.5 the slash is how you do divide
04:25 - it so you can do math on number types
04:27 - but there are other types in every
04:29 - language so one of the first things you
04:31 - learn when you're learning a programming
04:32 - language are what are the different
04:35 - types that's the first question you want
04:36 - to ask what are the types of variables
04:39 - in this language another type is a
04:42 - string type so if i say will let's call
04:44 - this name
04:46 - name equals will and then i'm going to
04:48 - say log
04:50 - name
04:52 - you can see that it spits out will in
04:54 - javascript i can use double quotes or i
04:57 - can use single quotes there really is
04:58 - none that is right or wrong
05:01 - you can see the console puts out double
05:02 - quotes but i'm entering it as single
05:04 - quotes some languages are very picky
05:06 - about this some are not as picky some
05:08 - languages single quotes and double
05:10 - quotes
05:10 - mean slightly different things but in
05:12 - javascript it doesn't matter we're going
05:14 - to use double quotes it's a
05:16 - maybe a little bit more of a standard
05:17 - thing that people do i can also say name
05:20 - plus one now this is interesting i'm
05:22 - mixing a string type which is what this
05:25 - is think about if you're building a
05:27 - necklace and you're putting little beads
05:28 - with letters on that string that's kind
05:31 - of the idea of why this is called a
05:33 - string
05:34 - this is a w plus an i plus an l plus an
05:37 - l so we're going to take a string type
05:40 - we're going to add a 1 to it now in some
05:42 - languages this will freak out and say
05:44 - you can't do this but javascript just
05:46 - says well let's just add a 1 to the end
05:48 - of the string so it's will 1.
05:50 - and then if i do one plus one well now
05:53 - it's will one one it's kind of what
05:55 - javascript does when you mix strings but
05:57 - a lot of programming languages will
05:59 - actually throw an error right here and
06:00 - say ah you can't do that i could also
06:03 - add another string here i could say will
06:05 - plus i'm going to do a space here
06:08 - i don't know will friend that doesn't
06:10 - even make sense but whatever i did it i
06:12 - added two strings together so those are
06:15 - two different types of variables in
06:18 - javascript
06:19 - okay so now that you understand what
06:21 - variables are let's use variables and
06:23 - write a program that does something a
06:25 - little bit smart again the first time
06:27 - you ever create a new variable a new
06:30 - value in your program you're going to
06:32 - use let in javascript this word might be
06:35 - a different word in other languages but
06:37 - it's all the same i'm declaring that a
06:40 - new variable called name exists and i'm
06:43 - setting its value to will at the same
06:45 - time that's variables if you know what
06:47 - your types are and if you know how to
06:49 - define variables in a programming
06:51 - language it's pretty much the same
06:53 - across all programming languages so
06:55 - let's go back to that tesla automatic
06:58 - self-driving car example let's say that
07:00 - we have a variable called distance
07:02 - and that we are 10 away from the finish
07:05 - line i don't know call it 10 miles 10
07:06 - feet 10 meters
07:08 - who cares it's 10. and now we are going
07:10 - to get into the second big concept of
07:13 - programming and that is flow control
07:16 - flow control means we need to make
07:18 - decisions and have our code go in
07:21 - different directions based on what the
07:23 - variables are the first thing we can do
07:26 - here is we can say hey if the distance
07:28 - is greater than three
07:31 - turn on the gas and turn off the brake
07:33 - if the distance is less than three let's
07:36 - turn off the gas and turn on the brake
07:38 - okay so that's our first thing we're
07:40 - going to do a flow control statement
07:43 - that does exactly that and we're going
07:44 - to do that by saying if we are going to
07:47 - do an if statement now if statements
07:49 - work like this you say if
07:51 - and then you do parens and then you do
07:54 - curly braces and it's it's as simple as
07:56 - this if whatever's in here is true
08:00 - run the code in between here so in this
08:03 - case we can say if distance
08:05 - is greater than 3 you guys remember
08:08 - those greater than less than symbols for
08:10 - math
08:11 - if distance is greater than 3 we're
08:14 - going to run the code in here
08:16 - and then i can come down here and say if
08:17 - distance
08:19 - is
08:19 - less than
08:21 - 4
08:23 - then run the code in here so if it's
08:26 - 4 5 6 7 8 9 10 whatever up to infinity
08:29 - then it's going to run this code block
08:31 - if not it's going to skip right over it
08:34 - then if the distance is 3 2 1 or 0 or in
08:37 - the negatives which hopefully we're
08:39 - never negative
08:40 - then you can run the code in this block
08:44 - these are called blocks of code so let's
08:46 - just go and do console logs here
08:49 - i'm going to say console.log grader and
08:51 - then over here i'm going to say
08:52 - console.log less
08:54 - i'm going to run my program and it said
08:56 - greater it did not say less because the
08:58 - distance was 10. so if i make this
09:00 - distance 2 and run my program it says
09:02 - less and if i make the distance 3 and
09:05 - run my program it says less now in a
09:07 - real world program you wouldn't be
09:10 - outputting to the console log you would
09:12 - be outputting to a controller that
09:15 - actually controls the gas pedal or the
09:16 - brake pedal those commands might look
09:18 - something like this set gas
09:20 - to true so we're going to turn on the
09:22 - gas and set break to false
09:26 - and that would basically say hey if the
09:27 - distance is greater than 3 we got to go
09:30 - let's turn on the gas let's turn off the
09:32 - brake and this would actually be
09:34 - connected to a wire
09:36 - that then sets the gas pedal on and this
09:39 - would be another wire that comes out of
09:41 - your computer box that turns the brake
09:43 - pedal off so that's it's the exact same
09:46 - logic though so to simulate this let's
09:48 - just kind of console log
09:50 - gas on break off
09:54 - there we go
09:55 - and then let's go ahead and do the exact
09:57 - opposite for if the distance is getting
09:59 - lower
10:01 - and now we can run our program and you
10:03 - can see let's go ahead and hit clear
10:06 - and if the distance is three we're gonna
10:07 - do the gas off we're gonna do the brake
10:09 - on if the distance is six
10:12 - we're gonna do gas on break off so there
10:15 - you go the if statement is your very
10:17 - basic level of flow control if
10:20 - something's true let's do this if not
10:23 - let's not do it at all
10:24 - there are some other things that you can
10:26 - do you can use if in a different way you
10:28 - can do if else statements
10:30 - so i could say if distance
10:33 - is specifically something which i do by
10:36 - saying triple equals if distance is one
10:39 - then we're going to run this
10:42 - it's one
10:44 - and then i can say else
10:46 - do something else so if it's not one
10:49 - we're gonna automatically run this block
10:52 - you can see it says it's not one let's
10:54 - go and clear that
10:56 - run it again
10:58 - it's not one and if i change it to one
11:01 - and run it it says hey it's one if i
11:03 - change it to one one one one one
11:05 - well that's uh not one that's a hundred
11:07 - and eleven thousand one hundred eleven
11:09 - uh and i can also add some else ifs in
11:11 - here let's say i wanna do several
11:13 - different things else if
11:15 - let's uh get this cleaned up
11:17 - else
11:18 - if distance is two
11:22 - so if it's one let's run this block
11:24 - else if it's two let's run this block
11:27 - otherwise every other condition we're
11:29 - going to run that block so you notice
11:31 - when we chain them together whichever
11:33 - one matches first it will run does it
11:35 - match here if so let's run this block
11:38 - and then forget every other block in
11:39 - this if else statement we have going on
11:42 - uh otherwise okay that one didn't match
11:44 - all right let's check this one did this
11:46 - one match sweet let's run this
11:48 - and if nothing else matches eventually
11:50 - it's going to run else so in this case
11:52 - if i change it to 2 it's going to say
11:54 - it's 2 and that's it if i change it to 1
11:57 - it's going to say it's 1 that's it so
11:59 - when we kind of chain them together in
12:01 - an if-else statement they will only ever
12:03 - run one code block out of all the code
12:07 - blocks if we want it to run multiple
12:09 - ones well then we create brand new if
12:11 - statements
12:12 - we can create another if statement here
12:14 - and whether any of these ran or not we
12:17 - don't care it's going to start another
12:19 - if statement and make some more
12:20 - decisions from there so that's how if
12:23 - else statements work those are in all
12:26 - the major languages you're going to see
12:27 - them they just look a little bit
12:29 - different do you do triple equals or
12:31 - double equals do you do curly braces or
12:34 - something else right that's that's
12:36 - really the differences between most of
12:38 - the programming languages but if else
12:39 - statements are generally all the same
12:41 - okay let's look at our next major flow
12:44 - control tool and that is loops maybe we
12:47 - want to do something over and over and
12:49 - over and over again until a certain
12:52 - condition is met so let's set our
12:54 - distance back to 10 here and i'm going
12:56 - to do a while loop now while is a little
13:00 - bit different what while's going to do
13:02 - is as long as what's in here is true
13:05 - let's do this and start over again and
13:08 - recheck what is in here so what we can
13:11 - do for this is we can say as long as
13:13 - distance
13:15 - is greater than one
13:17 - run what's in this block and then run
13:19 - what's in this block again and again and
13:21 - again so the way we tell it to
13:23 - eventually stop is we're going to say
13:26 - console.log
13:29 - let's say distance is distance
13:33 - so that's going to actually spit it out
13:35 - and then we're going to take one away
13:36 - from distance
13:39 - now we're going to say okay we're going
13:40 - to console.log we're going to take one
13:42 - away and then it's going to re-run our
13:45 - while loop again and again and again so
13:47 - let's step through what actually
13:49 - happened here uh it set distance at 10
13:52 - and then it started our while loop it
13:54 - said hey is the distance greater than
13:56 - one yes it is run the code in this block
13:59 - so we spit out a console log and then we
14:01 - made distance one less which is nine and
14:04 - then it started the while loop all over
14:06 - again is distance which is now nine is
14:09 - nine greater than one yes it is run the
14:12 - code block is eight greater than one yes
14:14 - it is run the code block eventually it
14:17 - got down to one is one greater than one
14:20 - no okay stop and continue on down our
14:23 - program our program was actually
14:24 - finished you can see that it said it
14:27 - stopped at distance is two
14:30 - so at this point we could say
14:33 - console.log
14:35 - put on the brakes made a little typo
14:37 - here
14:38 - so now if we clear our program and run
14:40 - our program uh let's actually put on a
14:42 - console log up here
14:48 - hit the gas so our program is going to
14:50 - hit the gas and while the distance is
14:52 - greater than one well let's just run it
14:54 - hit the gas 10 98765432 put on the
14:56 - brakes we're gonna put on the brakes at
14:57 - two maybe we wanna put on the brakes at
14:59 - one so we could say hey if the distance
15:01 - is greater than zero do it
15:03 - so now it's gonna go ten all the way
15:05 - down to one then it's gonna put on the
15:07 - brakes we have a computer program like
15:09 - this is the exact kind of program that
15:12 - could tell a very dumb car that has no
15:15 - concept of steering or obstacles
15:17 - to go
15:18 - until it hits the distance and then stop
15:21 - just with a little bit of flow control
15:23 - and a couple basic variables and output
15:26 - commands this is how programming works
15:29 - the last thing we can do
15:30 - is we can use what are called functions
15:33 - so i'm going to create a new tab over
15:36 - here
15:37 - to just illustrate what functions are a
15:39 - function is essentially a command or a
15:42 - capability you're adding to your program
15:44 - that you can reuse over and over and
15:46 - over again a picture you had a robot and
15:49 - you wanted the robot to step
15:51 - well stepping is not just a simple
15:53 - command
15:54 - it's going to have a knee joint it's
15:56 - going to have an ankle joint it's going
15:57 - to have a left knee joint so step might
16:00 - be pretty complicated take one step
16:02 - might be lift right knee upwards pull
16:07 - right ankle under the knee
16:09 - move right leg forwards and then stand
16:12 - on right leg lift left leg up right it
16:14 - could be 10 or 15 things together but
16:17 - you don't want to have to type those 15
16:19 - things over and over and over again you
16:22 - just want to be able to say step or step
16:24 - right step left
16:26 - so what you do is you can batch all of
16:29 - those commands together into one
16:31 - function and then just call the function
16:33 - we've been doing that a lot there's this
16:36 - function that comes built into
16:37 - javascript called console.log
16:39 - we basically give it anything
16:42 - and it's going to spit that value out
16:44 - over here into the console we've been
16:46 - using this function over and over and
16:47 - over again because console.log is
16:49 - probably doing a lot of different things
16:51 - behind the scenes and we just want to be
16:53 - able to say hey put this into the
16:55 - console i want to see the output of my
16:57 - program so we're going to make a basic
16:59 - function over here let's make a function
17:01 - called step
17:03 - and so basically we're going to do is
17:04 - we're going to do step open and close
17:06 - parens open and close curly braces
17:09 - anything inside of these curly braces
17:12 - runs whenever we call step so if i call
17:15 - step later on then it's going to run
17:19 - this so let me just add three console
17:21 - logs in here
17:26 - so there's my three commands if i run my
17:29 - program you can see that it's going to
17:30 - lift leg move leg forwards whoops two
17:33 - w's double use there
17:35 - let's run step twice here i'm gonna copy
17:38 - and paste now let's run it three times
17:40 - let's clear
17:42 - and you can see that it did this boom
17:44 - boom boom boom boom boom boom boom boom
17:48 - i have created a step function and now i
17:51 - can call step as many times as i want
17:53 - but even cooler functions can be
17:56 - reusable to do different tasks
18:00 - so let's say i want to be able to step
18:02 - the left leg
18:03 - or the right leg let's say i want to be
18:05 - able to say step left
18:07 - and then step right
18:09 - and then step left how would i
18:11 - accomplish this well you can see that
18:13 - i'm passing one thing into step
18:16 - but if i clear this and run
18:18 - it does the exact same thing we've not
18:20 - given our step function the ability to
18:22 - accept
18:23 - kind of inputs to this little function
18:26 - but we actually have the capability
18:27 - right here in between these two
18:29 - parentheses inputs are called arguments
18:32 - we're giving it an argument we're giving
18:34 - it an input um and we just have to name
18:37 - it up here and then we can start using
18:39 - it so i'll call it which leg
18:43 - so basically anywhere inside of this
18:45 - code block i'm going to have a variable
18:48 - called which leg and that's going to be
18:50 - left or right depending on whatever i
18:53 - pass in here
18:54 - so if i go here lift leg plus
18:57 - which leg plus which leg
19:00 - because if you'll remember we can add
19:01 - strings together
19:03 - and i'll just add a colon here
19:07 - now if i run this i will be stepping
19:10 - left stepping right stepping left so now
19:12 - if i run it
19:14 - you can see that i'm going to lift my
19:15 - left leg move my left leg forwards lower
19:18 - my left leg then i'm lifting my right
19:20 - leg moving my right leg and then back to
19:23 - left ta-da i've made a function that has
19:26 - an argument argument really just means
19:28 - an input for this one function it's a
19:31 - named variable that exists only inside
19:35 - of this which leg does not exist out
19:38 - here
19:39 - uh if i console log which leg
19:42 - it doesn't exist let's go ahead clear
19:44 - this
19:45 - run this you can see which leg is not
19:47 - defined what are you talking about which
19:49 - leg does not exist out here in this
19:52 - whole world of program which leg only
19:55 - exists inside of my function i am giving
19:58 - which leg in
20:00 - and then which leg is available as a
20:03 - variable
20:04 - inside of the function again
20:06 - a function variable is called an
20:08 - argument and you can give things
20:10 - multiple arguments let's say i want to
20:11 - do a big step or a tiny step
20:14 - like let's say
20:15 - this is a tiny step
20:17 - and this is going to be a huge left step
20:19 - i can add a comma up here
20:23 - and i can say which leg and how big
20:25 - these are the two arguments that my
20:27 - function gets the two inputs that my
20:30 - function gets and then my function is
20:31 - going to
20:32 - let's see move leg forwards
20:35 - um
20:37 - by
20:38 - this much
20:40 - so now if i clear and run my program
20:44 - you can see i'm going to lift my left
20:46 - leg i'm going to move it forward by one
20:48 - and then lower it lift my right leg move
20:50 - it forward by two lower it and again
20:52 - these would all be basic commands
20:54 - functions that we'd call to wires going
20:56 - outside of our program or we'd be
20:58 - talking to our web page to update the
21:00 - values you see on the screen in this
21:02 - case our outputs are all console logs
21:04 - but in programming you just have to
21:06 - learn how to connect your outputs to the
21:07 - thing you want and then the programming
21:09 - is exactly the same as what we're doing
21:11 - right now you're just connecting the
21:13 - outputs to different types of commands
21:15 - so again functions are reusable chunks
21:19 - of programming
21:21 - that can also be configured
21:23 - when you run them so we're running step
21:26 - with the left leg
21:29 - and the one
21:30 - bigness of step right those are the
21:32 - configuration those are the arguments of
21:35 - this command we want to run
21:37 - and this is a reusable command let's go
21:39 - ahead and take this concept back over to
21:41 - our
21:42 - fictitious tesla really dumb
21:44 - self-driving car that can only do gas
21:46 - and brake um and in here let's uh create
21:49 - two commands let's do a set gas command
21:52 - and a set break command
21:56 - we're going to set gas and set break uh
21:59 - sure let's say that there can be how
22:01 - much
22:03 - let's say it can be a value from 1 to
22:05 - 10.
22:06 - uh in here we can set gas to
22:12 - we're setting gas to however much and
22:14 - then we're also going to call the set
22:16 - break function in here whenever you set
22:18 - the gas we're going to set the break to
22:20 - zero
22:21 - so we're going to set the break to zero
22:23 - and if you ever call set break then
22:25 - we're going to say
22:28 - we're going to set the breaks however
22:30 - much you told it to and we're also going
22:32 - to set the gas to zero
22:34 - so if you call set break of three
22:37 - then it's going to say setting break to
22:39 - three and it's also going to set the gas
22:41 - to zero and if you'll notice there's a
22:43 - programming problem in here you guys may
22:45 - or may not have caught it we'll see
22:49 - and then let's add an if statement in
22:51 - here
22:54 - if distance is greater than 3
22:58 - let's set gas to 10
23:00 - else
23:01 - set break
23:03 - to 10. so we're basically going to say
23:05 - hey if the distance is greater than 3
23:06 - let's floor it
23:07 - if the distance is greater than three
23:09 - let's stomp on the break and then we're
23:11 - going to automatically just have the
23:12 - distance go on let's get rid of these
23:14 - two console logs because those aren't
23:16 - what's happening now
23:18 - so now here's our program our final
23:22 - really unintelligent self-driving car
23:24 - the distance is 10 right this is coming
23:26 - from the distance sensor we're also
23:29 - going to pretend that every time in here
23:31 - we're getting a new distance from the
23:32 - distance sensor
23:34 - which is not really happening we're just
23:36 - automatically decreasing it by one every
23:38 - time but whatever let's pretend this is
23:40 - actually coming in
23:41 - and then if the distance is three we're
23:43 - going to stomp on the gas we're defining
23:45 - two functions here we're pretending that
23:47 - this right here is actually talking to
23:49 - the gas pedal
23:51 - and this right here is talking to the
23:52 - brake pedal really they're just going to
23:54 - spit out to the console
23:56 - let's see what our program does
23:58 - tada oh look at this it's running
24:01 - forever oh no what's happening why is it
24:05 - doing this well if you look let's step
24:07 - through our program
24:08 - if the distance is greater than 0 it is
24:11 - it's 10 okay so we're going to run this
24:13 - block of code
24:15 - if the distance is greater than 3 it is
24:18 - okay so we're going to run this block of
24:19 - code let's set gas to 10
24:22 - okay so it's going to run set gas how
24:24 - much will be 10
24:26 - setting gas to 10 nice we're gonna set
24:29 - break to zero okay so that's going to
24:31 - run this function right here
24:34 - how much inside of here will be zero
24:36 - let's set up and look and then it sets
24:38 - gas again
24:40 - so now it's going to set gas which will
24:42 - set break which will set gas which will
24:44 - set break it's doing this loop forever
24:48 - set gas tells it to set break set break
24:51 - tells it to set gas it's never going to
24:53 - stop it's just going to run this forever
24:57 - so what we actually have to do
24:59 - is we actually have to say here
25:01 - if
25:02 - how much is greater than zero
25:05 - so if how much is greater than zero if
25:08 - we're going to actually give it some gas
25:10 - we're going to stop the break but
25:12 - otherwise if you've set the gas to zero
25:13 - we're not going to do anything
25:15 - and then same thing over here if you're
25:18 - setting the brake
25:21 - if you're actually wanting us to push
25:23 - the brake then we're going to turn off
25:25 - the gas otherwise if you're setting the
25:27 - break to zero we're not going to run
25:29 - this block of code at all okay so if i
25:31 - clear it out and i now run my program
25:34 - ta-da we're good it only did it a few
25:37 - times so you can see i set my gas to 10
25:41 - i set my break to zero kept my gas on
25:43 - 10. kept my gas on 10. i kept kind of
25:46 - resetting that gas pedal setting to make
25:48 - sure it was at 10. it was at 10 it was
25:50 - at 10 it was at 10 it was at 10. and
25:52 - then all of a sudden at the very end i
25:54 - set my break to 10 and turn the gas to
25:56 - zero so we could do some improvements on
25:59 - this we could say hey if the distance is
26:01 - is 10
26:02 - then we'll set the gas to 10 but if the
26:05 - distance gets closer then we're going to
26:07 - set the gas to a lower level right
26:09 - obviously our our if else statements our
26:12 - flow control statements are a little
26:15 - aggressive he either hits the gas all
26:17 - the way or hits the break all the way
26:18 - right so we want to make this program
26:20 - better over time but what we've done
26:22 - what we've actually accomplished here is
26:25 - we've taken variables
26:27 - some flow control statements and two
26:29 - functions and we've made a stupid
26:31 - self-driving car in just a few minutes
26:34 - while explaining it all to you and you
26:36 - didn't know what you're doing going into
26:37 - this so this is how programming works
26:39 - this is how programming takes inputs
26:41 - from the real world or from a web page
26:43 - or from a user using a mouse and now it
26:46 - actually spits out outputs and does
26:48 - something this is programming these
26:50 - concepts are the same in almost every
26:52 - language i hope this video helped you if
26:55 - you liked it if you stuck all the way
26:56 - through you got a thumbs up and you
26:58 - gotta subscribe we've got a lot of great
26:59 - content coming out have yourselves a
27:01 - great day bye

Cleaned transcript:

hello everyone the purpose of this video is going to be to give you a high level overview of programming how it works and what programmers actually do with code to make a computer do something smart we're going to use the language javascript because it's the most popular language on earth right now and if you learn basics in javascript it applies to a ton of other programming languages like python or java or many other things because programming is generally programming in all languages the concepts are the same almost across the board so if you want to follow along go to jsbin.com in your web browser and turn on the javascript and the console tabs we're going to turn all the other ones off because we do not need them we are just going to focus on the programming piece not the web development piece which is what html and css are also used for so in programming no matter what you're doing let's let's picture an example of a robot or let's say a tesla which is a robot car there are some things in common with all programs they have inputs usually they have a program that makes decisions and does something smart and then it usually has outputs as well so if we had a tesla let's say we had a tesla and we wanted to make it go to the finish line on a straight course and then stop our inputs would be some sort of distance sensor that could tell us how far we've gone or maybe it could actually see how far there is to the finish line and that would send an input into our program or we could say distance is ten distance is five distance is three right we're we're getting closer so the input to a tesla would be the distance sensor and then we'd have a program that takes that distance and determines do i push the gas do i push the brake what do i do right that's our program it makes that decision and then the output says gas to 1 or gas to 5 or break to one break to five right there are outputs we're actually telling that gas pedal and that brake pedal to go so the programming side of it is it's taking the inputs making some smart decisions and then sending the outputs if there are any in this case we're going to learn how to apply all those concepts in programming languages the first thing we're going to do is we're going to learn how to set a variable a variable is a value so the first value i'm going to put in my program for our fake tesla is distance i'm going to say let distance equal 10. let is this fancy little word that makes you feel like your god and you can say let distance equal 10 the first time i declare that there is a value in my program which is called distance i use the word let after that i can just say hey distance equals five i've just changed my distance now i could also say distance equals three and i've changed it again and now i can do an output so let's set an output here to console we have one command we're going to use all this time for our output and that is console.log that is a standard javascript command that lets us put something out to the console i'm going to log distance and see what it is so if i hit run over here or command enter control enter depending if i'm on mac or windows you can see that it set out three if i were to get rid of this line and run it again you can see that it put out 5 instead because i said hey my distance is 10 i'm going to change that distance to 5. let's put out what the distance is and that's going to put out 5. so what i've done here is i have defined a variable now variables can be different types that's a keyword this type right here in javascript is called a number because it's a number i can do math on it i can say distance plus 6 which is going to be 11 right because we said distance is 10 and then distance changed to 5 and then we added 6 more to it and we got 11. i could say plus 6 plus 1. so it's going to actually spit out 12 no matter how many times i run my program it's always going to spit out 12. i'm going to go ahead and clear this so the number type is is very basic you can use math with it you can do plus you can do minus 1 star or asterisk is what you do four times so if i do times two it's going to say 10 because that's 5 times 2 and if i want to do divided by 2 then it's going to be 2.5 the slash is how you do divide it so you can do math on number types but there are other types in every language so one of the first things you learn when you're learning a programming language are what are the different types that's the first question you want to ask what are the types of variables in this language another type is a string type so if i say will let's call this name name equals will and then i'm going to say log name you can see that it spits out will in javascript i can use double quotes or i can use single quotes there really is none that is right or wrong you can see the console puts out double quotes but i'm entering it as single quotes some languages are very picky about this some are not as picky some languages single quotes and double quotes mean slightly different things but in javascript it doesn't matter we're going to use double quotes it's a maybe a little bit more of a standard thing that people do i can also say name plus one now this is interesting i'm mixing a string type which is what this is think about if you're building a necklace and you're putting little beads with letters on that string that's kind of the idea of why this is called a string this is a w plus an i plus an l plus an l so we're going to take a string type we're going to add a 1 to it now in some languages this will freak out and say you can't do this but javascript just says well let's just add a 1 to the end of the string so it's will 1. and then if i do one plus one well now it's will one one it's kind of what javascript does when you mix strings but a lot of programming languages will actually throw an error right here and say ah you can't do that i could also add another string here i could say will plus i'm going to do a space here i don't know will friend that doesn't even make sense but whatever i did it i added two strings together so those are two different types of variables in javascript okay so now that you understand what variables are let's use variables and write a program that does something a little bit smart again the first time you ever create a new variable a new value in your program you're going to use let in javascript this word might be a different word in other languages but it's all the same i'm declaring that a new variable called name exists and i'm setting its value to will at the same time that's variables if you know what your types are and if you know how to define variables in a programming language it's pretty much the same across all programming languages so let's go back to that tesla automatic selfdriving car example let's say that we have a variable called distance and that we are 10 away from the finish line i don't know call it 10 miles 10 feet 10 meters who cares it's 10. and now we are going to get into the second big concept of programming and that is flow control flow control means we need to make decisions and have our code go in different directions based on what the variables are the first thing we can do here is we can say hey if the distance is greater than three turn on the gas and turn off the brake if the distance is less than three let's turn off the gas and turn on the brake okay so that's our first thing we're going to do a flow control statement that does exactly that and we're going to do that by saying if we are going to do an if statement now if statements work like this you say if and then you do parens and then you do curly braces and it's it's as simple as this if whatever's in here is true run the code in between here so in this case we can say if distance is greater than 3 you guys remember those greater than less than symbols for math if distance is greater than 3 we're going to run the code in here and then i can come down here and say if distance is less than 4 then run the code in here so if it's 4 5 6 7 8 9 10 whatever up to infinity then it's going to run this code block if not it's going to skip right over it then if the distance is 3 2 1 or 0 or in the negatives which hopefully we're never negative then you can run the code in this block these are called blocks of code so let's just go and do console logs here i'm going to say console.log grader and then over here i'm going to say console.log less i'm going to run my program and it said greater it did not say less because the distance was 10. so if i make this distance 2 and run my program it says less and if i make the distance 3 and run my program it says less now in a real world program you wouldn't be outputting to the console log you would be outputting to a controller that actually controls the gas pedal or the brake pedal those commands might look something like this set gas to true so we're going to turn on the gas and set break to false and that would basically say hey if the distance is greater than 3 we got to go let's turn on the gas let's turn off the brake and this would actually be connected to a wire that then sets the gas pedal on and this would be another wire that comes out of your computer box that turns the brake pedal off so that's it's the exact same logic though so to simulate this let's just kind of console log gas on break off there we go and then let's go ahead and do the exact opposite for if the distance is getting lower and now we can run our program and you can see let's go ahead and hit clear and if the distance is three we're gonna do the gas off we're gonna do the brake on if the distance is six we're gonna do gas on break off so there you go the if statement is your very basic level of flow control if something's true let's do this if not let's not do it at all there are some other things that you can do you can use if in a different way you can do if else statements so i could say if distance is specifically something which i do by saying triple equals if distance is one then we're going to run this it's one and then i can say else do something else so if it's not one we're gonna automatically run this block you can see it says it's not one let's go and clear that run it again it's not one and if i change it to one and run it it says hey it's one if i change it to one one one one one well that's uh not one that's a hundred and eleven thousand one hundred eleven uh and i can also add some else ifs in here let's say i wanna do several different things else if let's uh get this cleaned up else if distance is two so if it's one let's run this block else if it's two let's run this block otherwise every other condition we're going to run that block so you notice when we chain them together whichever one matches first it will run does it match here if so let's run this block and then forget every other block in this if else statement we have going on uh otherwise okay that one didn't match all right let's check this one did this one match sweet let's run this and if nothing else matches eventually it's going to run else so in this case if i change it to 2 it's going to say it's 2 and that's it if i change it to 1 it's going to say it's 1 that's it so when we kind of chain them together in an ifelse statement they will only ever run one code block out of all the code blocks if we want it to run multiple ones well then we create brand new if statements we can create another if statement here and whether any of these ran or not we don't care it's going to start another if statement and make some more decisions from there so that's how if else statements work those are in all the major languages you're going to see them they just look a little bit different do you do triple equals or double equals do you do curly braces or something else right that's that's really the differences between most of the programming languages but if else statements are generally all the same okay let's look at our next major flow control tool and that is loops maybe we want to do something over and over and over and over again until a certain condition is met so let's set our distance back to 10 here and i'm going to do a while loop now while is a little bit different what while's going to do is as long as what's in here is true let's do this and start over again and recheck what is in here so what we can do for this is we can say as long as distance is greater than one run what's in this block and then run what's in this block again and again and again so the way we tell it to eventually stop is we're going to say console.log let's say distance is distance so that's going to actually spit it out and then we're going to take one away from distance now we're going to say okay we're going to console.log we're going to take one away and then it's going to rerun our while loop again and again and again so let's step through what actually happened here uh it set distance at 10 and then it started our while loop it said hey is the distance greater than one yes it is run the code in this block so we spit out a console log and then we made distance one less which is nine and then it started the while loop all over again is distance which is now nine is nine greater than one yes it is run the code block is eight greater than one yes it is run the code block eventually it got down to one is one greater than one no okay stop and continue on down our program our program was actually finished you can see that it said it stopped at distance is two so at this point we could say console.log put on the brakes made a little typo here so now if we clear our program and run our program uh let's actually put on a console log up here hit the gas so our program is going to hit the gas and while the distance is greater than one well let's just run it hit the gas 10 98765432 put on the brakes we're gonna put on the brakes at two maybe we wanna put on the brakes at one so we could say hey if the distance is greater than zero do it so now it's gonna go ten all the way down to one then it's gonna put on the brakes we have a computer program like this is the exact kind of program that could tell a very dumb car that has no concept of steering or obstacles to go until it hits the distance and then stop just with a little bit of flow control and a couple basic variables and output commands this is how programming works the last thing we can do is we can use what are called functions so i'm going to create a new tab over here to just illustrate what functions are a function is essentially a command or a capability you're adding to your program that you can reuse over and over and over again a picture you had a robot and you wanted the robot to step well stepping is not just a simple command it's going to have a knee joint it's going to have an ankle joint it's going to have a left knee joint so step might be pretty complicated take one step might be lift right knee upwards pull right ankle under the knee move right leg forwards and then stand on right leg lift left leg up right it could be 10 or 15 things together but you don't want to have to type those 15 things over and over and over again you just want to be able to say step or step right step left so what you do is you can batch all of those commands together into one function and then just call the function we've been doing that a lot there's this function that comes built into javascript called console.log we basically give it anything and it's going to spit that value out over here into the console we've been using this function over and over and over again because console.log is probably doing a lot of different things behind the scenes and we just want to be able to say hey put this into the console i want to see the output of my program so we're going to make a basic function over here let's make a function called step and so basically we're going to do is we're going to do step open and close parens open and close curly braces anything inside of these curly braces runs whenever we call step so if i call step later on then it's going to run this so let me just add three console logs in here so there's my three commands if i run my program you can see that it's going to lift leg move leg forwards whoops two w's double use there let's run step twice here i'm gonna copy and paste now let's run it three times let's clear and you can see that it did this boom boom boom boom boom boom boom boom boom i have created a step function and now i can call step as many times as i want but even cooler functions can be reusable to do different tasks so let's say i want to be able to step the left leg or the right leg let's say i want to be able to say step left and then step right and then step left how would i accomplish this well you can see that i'm passing one thing into step but if i clear this and run it does the exact same thing we've not given our step function the ability to accept kind of inputs to this little function but we actually have the capability right here in between these two parentheses inputs are called arguments we're giving it an argument we're giving it an input um and we just have to name it up here and then we can start using it so i'll call it which leg so basically anywhere inside of this code block i'm going to have a variable called which leg and that's going to be left or right depending on whatever i pass in here so if i go here lift leg plus which leg plus which leg because if you'll remember we can add strings together and i'll just add a colon here now if i run this i will be stepping left stepping right stepping left so now if i run it you can see that i'm going to lift my left leg move my left leg forwards lower my left leg then i'm lifting my right leg moving my right leg and then back to left tada i've made a function that has an argument argument really just means an input for this one function it's a named variable that exists only inside of this which leg does not exist out here uh if i console log which leg it doesn't exist let's go ahead clear this run this you can see which leg is not defined what are you talking about which leg does not exist out here in this whole world of program which leg only exists inside of my function i am giving which leg in and then which leg is available as a variable inside of the function again a function variable is called an argument and you can give things multiple arguments let's say i want to do a big step or a tiny step like let's say this is a tiny step and this is going to be a huge left step i can add a comma up here and i can say which leg and how big these are the two arguments that my function gets the two inputs that my function gets and then my function is going to let's see move leg forwards um by this much so now if i clear and run my program you can see i'm going to lift my left leg i'm going to move it forward by one and then lower it lift my right leg move it forward by two lower it and again these would all be basic commands functions that we'd call to wires going outside of our program or we'd be talking to our web page to update the values you see on the screen in this case our outputs are all console logs but in programming you just have to learn how to connect your outputs to the thing you want and then the programming is exactly the same as what we're doing right now you're just connecting the outputs to different types of commands so again functions are reusable chunks of programming that can also be configured when you run them so we're running step with the left leg and the one bigness of step right those are the configuration those are the arguments of this command we want to run and this is a reusable command let's go ahead and take this concept back over to our fictitious tesla really dumb selfdriving car that can only do gas and brake um and in here let's uh create two commands let's do a set gas command and a set break command we're going to set gas and set break uh sure let's say that there can be how much let's say it can be a value from 1 to 10. uh in here we can set gas to we're setting gas to however much and then we're also going to call the set break function in here whenever you set the gas we're going to set the break to zero so we're going to set the break to zero and if you ever call set break then we're going to say we're going to set the breaks however much you told it to and we're also going to set the gas to zero so if you call set break of three then it's going to say setting break to three and it's also going to set the gas to zero and if you'll notice there's a programming problem in here you guys may or may not have caught it we'll see and then let's add an if statement in here if distance is greater than 3 let's set gas to 10 else set break to 10. so we're basically going to say hey if the distance is greater than 3 let's floor it if the distance is greater than three let's stomp on the break and then we're going to automatically just have the distance go on let's get rid of these two console logs because those aren't what's happening now so now here's our program our final really unintelligent selfdriving car the distance is 10 right this is coming from the distance sensor we're also going to pretend that every time in here we're getting a new distance from the distance sensor which is not really happening we're just automatically decreasing it by one every time but whatever let's pretend this is actually coming in and then if the distance is three we're going to stomp on the gas we're defining two functions here we're pretending that this right here is actually talking to the gas pedal and this right here is talking to the brake pedal really they're just going to spit out to the console let's see what our program does tada oh look at this it's running forever oh no what's happening why is it doing this well if you look let's step through our program if the distance is greater than 0 it is it's 10 okay so we're going to run this block of code if the distance is greater than 3 it is okay so we're going to run this block of code let's set gas to 10 okay so it's going to run set gas how much will be 10 setting gas to 10 nice we're gonna set break to zero okay so that's going to run this function right here how much inside of here will be zero let's set up and look and then it sets gas again so now it's going to set gas which will set break which will set gas which will set break it's doing this loop forever set gas tells it to set break set break tells it to set gas it's never going to stop it's just going to run this forever so what we actually have to do is we actually have to say here if how much is greater than zero so if how much is greater than zero if we're going to actually give it some gas we're going to stop the break but otherwise if you've set the gas to zero we're not going to do anything and then same thing over here if you're setting the brake if you're actually wanting us to push the brake then we're going to turn off the gas otherwise if you're setting the break to zero we're not going to run this block of code at all okay so if i clear it out and i now run my program tada we're good it only did it a few times so you can see i set my gas to 10 i set my break to zero kept my gas on 10. kept my gas on 10. i kept kind of resetting that gas pedal setting to make sure it was at 10. it was at 10 it was at 10 it was at 10 it was at 10. and then all of a sudden at the very end i set my break to 10 and turn the gas to zero so we could do some improvements on this we could say hey if the distance is is 10 then we'll set the gas to 10 but if the distance gets closer then we're going to set the gas to a lower level right obviously our our if else statements our flow control statements are a little aggressive he either hits the gas all the way or hits the break all the way right so we want to make this program better over time but what we've done what we've actually accomplished here is we've taken variables some flow control statements and two functions and we've made a stupid selfdriving car in just a few minutes while explaining it all to you and you didn't know what you're doing going into this so this is how programming works this is how programming takes inputs from the real world or from a web page or from a user using a mouse and now it actually spits out outputs and does something this is programming these concepts are the same in almost every language i hope this video helped you if you liked it if you stuck all the way through you got a thumbs up and you gotta subscribe we've got a lot of great content coming out have yourselves a great day bye
