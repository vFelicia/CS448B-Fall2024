With timestamps:

00:01 - hey there we are going to be learning
00:02 - angular.js uh angular is basically an MV
00:06 - star whatever it's you know one of the
00:09 - ways of making a single page web app in
00:12 - JavaScript so with no further Ado let's
00:14 - just get into it I'm going to assume you
00:16 - know a decent bit about JavaScript
00:19 - already once I'm done with this I'll
00:20 - probably do a beginner level intro video
00:24 - for people who are not familiar with
00:26 - JavaScript already so kind of the
00:27 - premise here is you already know what a
00:30 - single page app is kind of all the
00:32 - concepts behind it and we're just going
00:33 - to look into how to do a great one with
00:35 - angular and why it's awesome for very
00:38 - rapid development uh so kind of here's
00:40 - my index HTML what we got here just kind
00:42 - of importing a basic stylesheet nothing
00:45 - fancy I'm importing jQuery angular and
00:48 - I'm going to be using angular UI router
00:50 - which is uh kind of an add-on routing
00:53 - system which is definitely uh so far
00:55 - anyway the way to go with angular um and
00:58 - the only JS file I'm including is app.js
01:01 - so far and then some bootstrap stuff so
01:03 - what we're going to do is we're going to
01:04 - say that this is what we want our app to
01:07 - be the first thing you do is you define
01:10 - NG app equals and then the name of the
01:14 - module that you're going to be using for
01:15 - your angular app so we'll just call it
01:17 - app uh so as to make it simple NG app
01:20 - equals app so now angular is going to
01:22 - instantiate on this element what we are
01:26 - going to do then is we need to define a
01:28 - view for the UI router so we will do a
01:31 - div and we'll go UI view so that tells
01:35 - us pop whatever view we're loading right
01:38 - in there okay so basically when angular
01:41 - sees an app what it's going to do is
01:42 - it's going to evaluate everything inside
01:45 - of it and it uses that as you're
01:47 - templating uh so basically uh you'll see
01:51 - a lot of the angular way is your views
01:55 - happen in the HTML and then you have
01:58 - controllers and you have ser Services
02:00 - all of that uh build on top of that so
02:03 - kind of an example would be let's say we
02:05 - want a header uh let's go
02:09 - header and let's go NG
02:12 - include this is going to include a uh
02:17 - HTML file for us so we're going to go
02:20 - templates let me see what that is
02:22 - templates na.
02:26 - HTML and then so far we don't have an
02:28 - app module defined yet so let's go ahead
02:31 - and Define our app module first I'm
02:32 - going to go over to app.js we're going
02:34 - to go
02:37 - angular I got some sort
02:42 - of you're going to go
02:48 - module call it app and then the next
02:51 - thing you're going to do is Define any
02:53 - dependencies in an array when you're
02:55 - first defining a module you have to at
02:57 - least include a blank array for
02:59 - dependencies otherwise it will break so
03:02 - I'm going to my only dependency is ui.
03:06 - router make sure UI router has loaded
03:09 - before my app fires and now we've got an
03:11 - app and you'll notice that it's
03:13 - instantiated and I'm loading in my
03:16 - navigation going to go back to my index
03:18 - I'm also going to add in a
03:21 - footer
03:28 - Ng and now I should have a footer I
03:31 - wonder if there's anything in my footer
03:33 - my awesome tutorial so that should be
03:34 - showing up it's giving me some sort of
03:37 - error unterminated quote yep there we
03:42 - go and you notice I'm putting single
03:44 - quotes with ins side of here because
03:46 - it's actually going to be evaluating
03:48 - this as a JavaScript string um we can
03:51 - get into that a little more later so now
03:53 - we have a header a footer and absolutely
03:55 - nothing coming in here so let's start
03:57 - defining some routes you'll notice
03:58 - angular starts off off by giving us a
04:00 - hashtag navigation up here and so let's
04:03 - start adding some routes we're going we
04:06 - have already created the module now
04:08 - let's go
04:10 - config and we're going to do our
04:13 - dependencies uh one of the awesome
04:16 - things about angular is it does
04:18 - dependency
04:20 - injection if you have not used
04:21 - dependency injection get ready to fall
04:23 - in love with
04:25 - it we're going to request two
04:28 - dependencies here
04:33 - and it will insert those two
04:35 - dependencies into my first actually
04:39 - there we go it will insert those two
04:41 - dependencies into the first two
04:43 - arguments of my uh first two arguments
04:48 - of my function here
04:52 - so okay so what we've done here is we've
04:54 - gone config requireing these two
04:56 - dependencies sorry I'm using half of a
04:58 - screen here so it's a little probably
04:59 - frustrating and then those dependencies
05:02 - automatically get passed in order into
05:04 - my function uh the reason we're kind of
05:06 - doing double defining here is this is
05:10 - called annotating and the reason we're
05:12 - doing that is because if we didn't do
05:15 - that when you Minify it these are going
05:17 - to get called Like A and B and it's not
05:21 - going to know what dependencies those
05:23 - are so we've kind of got to Define what
05:25 - the modules are there and then you can
05:29 - call whatever you want but as a good
05:31 - standard call them what they actually
05:35 - are first move we're going to do is you
05:38 - a router provider
05:40 - otherwise so when you type in anything
05:42 - else it'll go to slash so now I should
05:45 - be able to go to haha and it's just
05:47 - going to bounce me back to slash test
05:50 - back to slash okay that's all we need to
05:52 - do with the URL router provider State
05:54 - provider is what is given to us by UI
05:58 - router state provider is where we're
06:00 - going to be defining all of our states
06:02 - and I.E our routing so State
06:08 - provider
06:12 - State home state and we're going to go
06:15 - URL that's this URL we're on now
06:20 - template let's just call it home and I
06:24 - should now see home there we go I gave
06:26 - it a template of a string so so I could
06:29 - go home and I could
06:31 - also go template
06:38 - URL and that should there's no Home HTML
06:43 - which it's telling me that's not found
06:44 - down here which is a good thing new
06:55 - file can't type
06:58 - today
07:01 - now you'll see home template has arrived
07:03 - there so that's kind of a basic startup
07:06 - let's go ahead and add another route
07:08 - called what do we have we have
07:16 - about once again can't type tonight
07:19 - about will go slab and it will look for
07:23 - about.
07:28 - HTML
07:32 - there we go so now if we go to hashtag
07:33 - slab we should get about template and if
07:36 - we go hashtag
07:38 - slome home template so as you can see we
07:40 - are very quickly creating a single page
07:42 - app that just works angular takes care
07:45 - of all the memory cleanup and things
07:48 - that would normally be associated with
07:49 - that um let's go ahe and make these
07:52 - buttons now Navigator so let me go to
07:59 - going to go to slash and we'll make this
08:00 - go to
08:04 - contact
08:06 - save so I should be able to go about
08:08 - change to about go back home you notice
08:11 - that this did not change that's
08:13 - something we can
08:14 - address um I'm going to go another thing
08:17 - that you can do with UI router is you
08:19 - can instead of doing href you can go ui-
08:22 - sref for UI you'll notice everything UI
08:25 - router related isn't NG it's UI state
08:29 - ref and we can just call it about refer
08:32 - to it by name that also works they're
08:36 - interchangeable so about and home we're
08:38 - working great on both I might as well
08:41 - just go uis
08:50 - ref okay and then another thing that we
08:54 - can do is start building out these
08:57 - templates some more let's let's go ahead
09:00 - and Define a
09:04 - controller on home so now home has a
09:07 - controller and let's in the controller
09:10 - use
09:11 - scope now so scope is the variables and
09:16 - arguments that are accessible to the
09:19 - template uh is basically what we're
09:22 - providing so if I go
09:24 - scope.
09:28 - title
09:29 - now I can in my home HTML only I can use
09:33 - angular's mustache like templating and
09:36 - go title so now it goes home or what
09:40 - would be
09:44 - better doing H1 there we go
09:48 - home and I can also
09:51 - go UL
09:54 - Li let me go back to this and add
10:00 - scope. items equals an
10:10 - array scope. items so now what I can do
10:14 - is I can use ng-
10:17 - repeat equals item in
10:20 - items so now each Li gets
10:24 - item so it's going to Loop through the
10:26 - items array and each item in that array
10:30 - gets passed here I can call this
10:33 - whatever I want I can call this thing in
10:35 - items it's kind of basically doing in
10:37 - each and now I can reference it as thing
10:40 - so you notice now I have a
10:41 - list um and I can change
10:53 - this and my list automatically changes
10:56 - angular is really really f fast with
11:00 - development so then let's go ahead and
11:02 - so now you can notice home and about
11:04 - we're getting some drastically different
11:06 - templating options it's lightning quick
11:09 - it just works this controller obviously
11:12 - this pattern will not work one thing
11:14 - you'll notice that I forgot to do is I
11:15 - forgot to annotate it I just went
11:18 - controller function this will work
11:19 - totally fine until you decide to Minify
11:22 - your JavaScript at which point this will
11:24 - just be called once again a in which
11:26 - case it will not know what a is it's not
11:30 - going to magically know that that's
11:31 - scope so we're going to do is we're
11:33 - going to annotate that say scope if
11:36 - you've ever used a requirejs it's
11:38 - basically like using requirejs you just
11:41 - use an array and the last argument of
11:43 - your array or the
11:45 - last um piece of your array is the
11:49 - function that's executing so scope there
11:52 - scope there and now that's going to work
11:54 - great when it minifies because this is
11:55 - going to be called a and these are both
11:58 - going to be called called a and it's
12:00 - still going to work just
12:02 - fine so what I'm going to do now is I'm
12:06 - going to break this controller out into
12:09 - home
12:12 - control and that's going to break my
12:15 - code because there is no such thing as
12:17 - home
12:20 - control I'm going to make that file
12:27 - now
12:30 - angular module app this is going to be a
12:32 - part of the same I'm going to consider
12:33 - it a part of the same module um I don't
12:36 - need to put any dependencies in there
12:38 - because it's already been defined and
12:41 - I'm going to go
12:43 - controller and kind of the naming
12:45 - convention that's standard for angular
12:47 - controllers is to end them with
12:51 - Ctrl and then let's just go function
12:55 - actually I'm going to annotate it same
12:57 - thing
13:00 - State function I'm sorry
13:05 - scope
13:10 - scope probably could have just copied
13:12 - and pasted that whole
13:16 - thing there we go and now I just need to
13:18 - add home controller to my index which
13:21 - it'll automatically
13:26 - get automatically get minified on
13:29 - deployment and now my app should be
13:31 - working yep beautiful my app is
13:33 - working let me just copy and paste this
13:35 - and create an about
13:41 - controller about control I'm going to
13:44 - save
13:57 - you
14:01 - there we go and so now about is uh going
14:04 - to have a
14:06 - controller
14:08 - of about
14:11 - controller and now the about template
14:15 - just needs to be adjusted to do the same
14:16 - thing let's make the about template
14:19 - exactly the same as the home
14:21 - template and you see that now I have a
14:23 - different title and a different list
14:25 - thing one thing two thing three when I'm
14:26 - on the about page let's work on getting
14:29 - this guy fixed right
14:33 - here what I'm going to do is I'm going
14:45 - to one thing you can do oh yeah let's
14:47 - get into Data binding before I mess with
14:49 - this let's get into some data binding
14:51 - this is one of the awesome awesome
14:53 - awesome things about angular uh is it's
14:55 - got two-way data banding just completely
14:57 - baked in so let's go to our home control
15:00 - let's say title is home okay
15:04 - great let's make an
15:08 - input and this NG model what that means
15:13 - is we're going to map it to an item in
15:16 - the scope and since we already have
15:18 - something called home actually
15:21 - title then you're going to get yourself
15:24 - an input that is automatically called
15:27 - populated with home and now I can change
15:30 - it and you'll notice that scope. home is
15:33 - automatically updated you can even add
15:36 - this to models that are not defined in
15:38 - your
15:43 - controller NG model equals my
15:47 - value and I'm just going to print right
15:49 - here my value as if it was already
15:52 - defined in the controller starts off
15:54 - with nothing
15:56 - there there you go if my controller is
15:59 - looking for scope. my value it will
16:02 - automatically uh be populated it is
16:06 - super awesome another thing you can do
16:08 - is you can create select inputs based
16:12 - off of information in an array so say we
16:15 - have an array
16:16 - there we have home about
16:19 - contact I can
16:24 - go here NG
16:27 - model
16:30 - equals let's call it selected
16:34 - value which hasn't been typed in and for
16:38 - NG
16:40 - options it's going to be
16:45 - value for Value
16:48 - in
16:49 - items so basically it's just going to
16:54 - be there you go you'll notice it starts
16:57 - off empty because I have not defined a
17:00 - selected value yet and now I have my
17:02 - option of items I can go in home control
17:04 - and I could go scope
17:10 - Dot and now it's going to automatically
17:12 - make sure home is
17:14 - pre-selected I think it's called
17:16 - selected
17:20 - value there you go home is now
17:23 - pre-selected whenever I uh boot up my
17:27 - page so it's really really a cool thing
17:29 - let's talk about some Services let's
17:31 - wire in a web service now I'm going to
17:35 - go to my app one thing that's great
17:38 - let's say home has a dependency of uh it
17:41 - needs to hit a service and load up my
17:44 - friends list before it sends me to home
17:47 - uh then we can do a
17:50 - resolve and pass in an array and we can
17:53 - have it each item in this resolve um
17:57 - object is going to represent a service
18:00 - call or something that has to happen
18:02 - before it proceeds and loads the
18:04 - controller in the template so we're
18:06 - going to resolve
18:08 - friends and we're going to say that this
18:11 - has a dependency of HTTP which is a
18:13 - built-in angular
18:18 - thing and we're just going to
18:22 - return http.get
18:25 - API friends I just have a Json file
18:30 - but it would be no different if an
18:32 - actual service that is going to return
18:35 - friends. Json and so one of the things
18:38 - that it gives you is a response we're
18:40 - actually going to want to parse it down
18:42 - just a little bit so we're going to use
18:43 - a
18:47 - then then
18:50 - response return
18:53 - response. dat which is what the actual
18:56 - friends. Json is you'll notice I just
18:58 - have a Json array name will 30 name
19:02 - Laura age
19:04 - 26 and so basically now before it goes
19:08 - to the template and the controller it is
19:11 - going to hit the friends
19:13 - API it's going to parse that here which
19:16 - there's no real parsing going except for
19:18 - give me the
19:19 - data uh it's kind of the equivalent of a
19:21 - backbone parse is what we're doing for
19:24 - those you guys familiar with backbone
19:26 - and now it's going to make a friend's
19:27 - provider of available to this controller
19:29 - if I want it so how we use that then did
19:33 - I do that on home yeah okay home so now
19:37 - I can make scope independency and I can
19:40 - go
19:44 - friends make the second argument
19:54 - friends scope friends equals friends
20:00 - and now let's make this friend in
20:07 - friends there we go whoops let's print
20:10 - friend
20:12 - Name colon
20:15 - friend. Ag and let's actually use the
20:19 - right brackets there you go so now we
20:22 - have HD an API we've made that
20:25 - available uh what I can do this do now
20:30 - is how about for each one of these
20:32 - instead of doing an LI or instead of
20:34 - doing that I do an
20:38 - input NG model equals
20:41 - friend
20:43 - name age let's say we want to change
20:46 - some stuff there we
20:54 - go and now that is real time changed in
20:56 - the scope
20:58 - and so let's do another thing let's make
21:00 - a scope
21:08 - method let's make a save
21:12 - button clean this up a little bit let's
21:15 - make this all nice and bootstrap
21:24 - looking looks a little nicer and so what
21:26 - we're just going to do is an n
21:30 - click which we can now give it a method
21:33 - save NG click save and so if I go to
21:36 - this home control I can now go
21:39 - scope save equals a
21:45 - method and we'll just make it
21:49 - alert so now when I hit
21:55 - save what did I miss h in
22:00 - there there you go my live reload is not
22:02 - working quite right today so there you
22:05 - go so now when I hit save it's going to
22:06 - do that let's actually make it
22:11 - alert
22:15 - stringify scope.
22:19 - friends there you go so that's what
22:22 - we're saving plus a little bit of random
22:25 - stuff that angulars decided to put in
22:26 - there
22:29 - Bob
22:31 - John there you go so now Bob and John so
22:34 - I can also do a HTTP same
22:39 - thing
22:43 - post friends and I can just put in
22:45 - scope. friends or actually I can just do
22:51 - friends there you go that's going to
22:53 - post that data straight back up and now
22:55 - I have a realtime editor for my friend
22:58 - list if I wanted
23:01 - to make a button on each one that
23:03 - deleted
23:17 - it well it's a pretty bad button I could
23:20 - use a glyph for that but let's go NG
23:24 - click and you can actually put in any EV
23:27 - value ation if you'd like so I can
23:32 - go uh index is what my index is going to
23:36 - be I can go
23:45 - friends friends splice that let's see if
23:47 - that
23:48 - works there you go so now on NG click
23:51 - I'm going to splice out my index
23:55 - straight out of friends and now it's
23:58 - gone if I hit save I have nothing that
24:01 - I'm posting back posting back an empty
24:03 - array so that's kind of a rapid fire
24:06 - introduction to a lot of the angular
24:08 - things that you can do uh another thing
24:11 - that you can do like if we are
24:12 - approaching this up here you can do a
24:15 - class
24:17 - issue we can make this one let me go to
24:21 - this friends Json
24:26 - and
24:30 - we're going to say I'm
24:32 - special actually you know what since lur
24:34 - is my wife and I'm will I'm going to say
24:37 - she's special and I am
24:43 - not
24:45 - false so now what I can do here
24:49 - is we're doing this on home yes
24:53 - okay what I can do is
25:01 - if you're not special I can do NG
25:06 - class and now I can pass in an object of
25:09 - the different classes that I would
25:11 - conditionally like to add so I'm going
25:13 - to go text muted which is
25:19 - uh bootstraps way of dimming it
25:23 - out and that's going to go if not
25:26 - friend
25:29 - if friend is not special it's going to
25:31 - give it a text muted class ah you notice
25:34 - it's all uh didn't really do that big of
25:37 - a deal because you can't really tell but
25:39 - that's muted that's a lighter color I
25:42 - could go
25:45 - special if friend is special that might
25:48 - make a better way add a CSS rule here
25:51 - let's go
25:56 - styles
26:04 - uh special get your background
26:08 - red I didn't test my I'm kind of on a
26:10 - test thing here so I don't know if uh
26:15 - apparent I didn't check my styles on
26:16 - live reload so not sure why that's not
26:19 - working uh but at any rate this should
26:22 - have now a special class to
26:26 - it
26:31 - yep so if you look at my second Li it's
26:34 - got a class of special so that should be
26:37 - background of red not sure quite why
26:39 - it's not that would be how you adjust a
26:41 - class like if we were to adjust a class
26:43 - up there let's see what are some other
26:45 - great things that you can do with
26:46 - angular uh you can provide services
26:49 - let's say that we wanted to make this
26:51 - API something that's reusable by a lot
26:54 - of different objects it's cachable it
26:56 - does a lot of smarts to it in that case
26:59 - we would actually move on to an angular
27:01 - service so what we would do is we would
27:04 - create a Services
27:08 - file uh
27:15 - friends let's keep this all for for
27:18 - easiness I'm going to keep it all
27:20 - registered to the app
27:22 - module and we're going to do
27:25 - factory uh as a normal naming convention
27:28 - if you're creating an angular service
27:29 - you're going to start by upper casing
27:36 - it there we go friends and whatever we
27:39 - return is what our people are going to
27:42 - get when they get uh whenever they load
27:45 - this module so if we return this and
27:47 - it's just a list of
27:52 - friends let's just return
27:56 - get
27:59 - which just returns this
28:03 - guy so I'm going to return an object
28:06 - which has a single method of get and
28:10 - that's what my friend's Factory is let
28:12 - me go ahead and add
28:16 - this to my
28:20 - page my friend service is
28:23 - added and now what I can do is friends
28:26 - can now not HTTP it can require
28:32 - friends and I can
28:36 - go
28:37 - [Music]
28:43 - return should have the same effect yep
28:46 - there you go as you can see no
28:48 - difference
28:49 - whatsoever I can also instead of doing
28:52 - this in the resolve if for some reason I
28:54 - wanted to do this in the controller at
28:56 - some point
28:58 - I can add this as a dependency
29:01 - here friends now is a service not a
29:05 - resolve provider so I can
29:10 - go friends.
29:15 - get there you go so that's another way
29:17 - that you can do it and now multiple
29:19 - controllers can all share friends about
29:22 - can use friends as a
29:26 - dependency
29:30 - about items can be friends
29:33 - diet and now I can mess with that
29:36 - service I can import HTTP into this
29:45 - um so git could now
29:48 - [Music]
29:56 - return
30:00 - friends.
30:02 - Json
30:11 - then now that will
30:13 - work exactly the same or it
30:19 - should not sure what I messed up on that
30:21 - but that should basically do the exact
30:25 - same thing
30:34 - greting friends it's my allate
30:36 - agent I'm not exactly sure what I messed
30:38 - up there I'm sure it's just some small
30:40 - little deal that I messed up I wonder if
30:41 - this has to
30:44 - be no that's not it because that's just
30:46 - a normal
30:51 - method and I'm sure it's something
30:53 - simple but at any rate that's basically
30:55 - how you would wire that in to then be a
30:59 - resource getter and Setter so that's
31:01 - kind of your introduction to how to use
31:03 - angularjs if you check out UI router you
31:06 - can also do nested views and sub views
31:08 - and a lot of great stuff on here and
31:10 - that is what you need to do to get
31:13 - started so hope you enjoyed it have
31:15 - yourself a great day

Cleaned transcript:

hey there we are going to be learning angular.js uh angular is basically an MV star whatever it's you know one of the ways of making a single page web app in JavaScript so with no further Ado let's just get into it I'm going to assume you know a decent bit about JavaScript already once I'm done with this I'll probably do a beginner level intro video for people who are not familiar with JavaScript already so kind of the premise here is you already know what a single page app is kind of all the concepts behind it and we're just going to look into how to do a great one with angular and why it's awesome for very rapid development uh so kind of here's my index HTML what we got here just kind of importing a basic stylesheet nothing fancy I'm importing jQuery angular and I'm going to be using angular UI router which is uh kind of an addon routing system which is definitely uh so far anyway the way to go with angular um and the only JS file I'm including is app.js so far and then some bootstrap stuff so what we're going to do is we're going to say that this is what we want our app to be the first thing you do is you define NG app equals and then the name of the module that you're going to be using for your angular app so we'll just call it app uh so as to make it simple NG app equals app so now angular is going to instantiate on this element what we are going to do then is we need to define a view for the UI router so we will do a div and we'll go UI view so that tells us pop whatever view we're loading right in there okay so basically when angular sees an app what it's going to do is it's going to evaluate everything inside of it and it uses that as you're templating uh so basically uh you'll see a lot of the angular way is your views happen in the HTML and then you have controllers and you have ser Services all of that uh build on top of that so kind of an example would be let's say we want a header uh let's go header and let's go NG include this is going to include a uh HTML file for us so we're going to go templates let me see what that is templates na. HTML and then so far we don't have an app module defined yet so let's go ahead and Define our app module first I'm going to go over to app.js we're going to go angular I got some sort of you're going to go module call it app and then the next thing you're going to do is Define any dependencies in an array when you're first defining a module you have to at least include a blank array for dependencies otherwise it will break so I'm going to my only dependency is ui. router make sure UI router has loaded before my app fires and now we've got an app and you'll notice that it's instantiated and I'm loading in my navigation going to go back to my index I'm also going to add in a footer Ng and now I should have a footer I wonder if there's anything in my footer my awesome tutorial so that should be showing up it's giving me some sort of error unterminated quote yep there we go and you notice I'm putting single quotes with ins side of here because it's actually going to be evaluating this as a JavaScript string um we can get into that a little more later so now we have a header a footer and absolutely nothing coming in here so let's start defining some routes you'll notice angular starts off off by giving us a hashtag navigation up here and so let's start adding some routes we're going we have already created the module now let's go config and we're going to do our dependencies uh one of the awesome things about angular is it does dependency injection if you have not used dependency injection get ready to fall in love with it we're going to request two dependencies here and it will insert those two dependencies into my first actually there we go it will insert those two dependencies into the first two arguments of my uh first two arguments of my function here so okay so what we've done here is we've gone config requireing these two dependencies sorry I'm using half of a screen here so it's a little probably frustrating and then those dependencies automatically get passed in order into my function uh the reason we're kind of doing double defining here is this is called annotating and the reason we're doing that is because if we didn't do that when you Minify it these are going to get called Like A and B and it's not going to know what dependencies those are so we've kind of got to Define what the modules are there and then you can call whatever you want but as a good standard call them what they actually are first move we're going to do is you a router provider otherwise so when you type in anything else it'll go to slash so now I should be able to go to haha and it's just going to bounce me back to slash test back to slash okay that's all we need to do with the URL router provider State provider is what is given to us by UI router state provider is where we're going to be defining all of our states and I.E our routing so State provider State home state and we're going to go URL that's this URL we're on now template let's just call it home and I should now see home there we go I gave it a template of a string so so I could go home and I could also go template URL and that should there's no Home HTML which it's telling me that's not found down here which is a good thing new file can't type today now you'll see home template has arrived there so that's kind of a basic startup let's go ahead and add another route called what do we have we have about once again can't type tonight about will go slab and it will look for about. HTML there we go so now if we go to hashtag slab we should get about template and if we go hashtag slome home template so as you can see we are very quickly creating a single page app that just works angular takes care of all the memory cleanup and things that would normally be associated with that um let's go ahe and make these buttons now Navigator so let me go to going to go to slash and we'll make this go to contact save so I should be able to go about change to about go back home you notice that this did not change that's something we can address um I'm going to go another thing that you can do with UI router is you can instead of doing href you can go ui sref for UI you'll notice everything UI router related isn't NG it's UI state ref and we can just call it about refer to it by name that also works they're interchangeable so about and home we're working great on both I might as well just go uis ref okay and then another thing that we can do is start building out these templates some more let's let's go ahead and Define a controller on home so now home has a controller and let's in the controller use scope now so scope is the variables and arguments that are accessible to the template uh is basically what we're providing so if I go scope. title now I can in my home HTML only I can use angular's mustache like templating and go title so now it goes home or what would be better doing H1 there we go home and I can also go UL Li let me go back to this and add scope. items equals an array scope. items so now what I can do is I can use ng repeat equals item in items so now each Li gets item so it's going to Loop through the items array and each item in that array gets passed here I can call this whatever I want I can call this thing in items it's kind of basically doing in each and now I can reference it as thing so you notice now I have a list um and I can change this and my list automatically changes angular is really really f fast with development so then let's go ahead and so now you can notice home and about we're getting some drastically different templating options it's lightning quick it just works this controller obviously this pattern will not work one thing you'll notice that I forgot to do is I forgot to annotate it I just went controller function this will work totally fine until you decide to Minify your JavaScript at which point this will just be called once again a in which case it will not know what a is it's not going to magically know that that's scope so we're going to do is we're going to annotate that say scope if you've ever used a requirejs it's basically like using requirejs you just use an array and the last argument of your array or the last um piece of your array is the function that's executing so scope there scope there and now that's going to work great when it minifies because this is going to be called a and these are both going to be called called a and it's still going to work just fine so what I'm going to do now is I'm going to break this controller out into home control and that's going to break my code because there is no such thing as home control I'm going to make that file now angular module app this is going to be a part of the same I'm going to consider it a part of the same module um I don't need to put any dependencies in there because it's already been defined and I'm going to go controller and kind of the naming convention that's standard for angular controllers is to end them with Ctrl and then let's just go function actually I'm going to annotate it same thing State function I'm sorry scope scope probably could have just copied and pasted that whole thing there we go and now I just need to add home controller to my index which it'll automatically get automatically get minified on deployment and now my app should be working yep beautiful my app is working let me just copy and paste this and create an about controller about control I'm going to save you there we go and so now about is uh going to have a controller of about controller and now the about template just needs to be adjusted to do the same thing let's make the about template exactly the same as the home template and you see that now I have a different title and a different list thing one thing two thing three when I'm on the about page let's work on getting this guy fixed right here what I'm going to do is I'm going to one thing you can do oh yeah let's get into Data binding before I mess with this let's get into some data binding this is one of the awesome awesome awesome things about angular uh is it's got twoway data banding just completely baked in so let's go to our home control let's say title is home okay great let's make an input and this NG model what that means is we're going to map it to an item in the scope and since we already have something called home actually title then you're going to get yourself an input that is automatically called populated with home and now I can change it and you'll notice that scope. home is automatically updated you can even add this to models that are not defined in your controller NG model equals my value and I'm just going to print right here my value as if it was already defined in the controller starts off with nothing there there you go if my controller is looking for scope. my value it will automatically uh be populated it is super awesome another thing you can do is you can create select inputs based off of information in an array so say we have an array there we have home about contact I can go here NG model equals let's call it selected value which hasn't been typed in and for NG options it's going to be value for Value in items so basically it's just going to be there you go you'll notice it starts off empty because I have not defined a selected value yet and now I have my option of items I can go in home control and I could go scope Dot and now it's going to automatically make sure home is preselected I think it's called selected value there you go home is now preselected whenever I uh boot up my page so it's really really a cool thing let's talk about some Services let's wire in a web service now I'm going to go to my app one thing that's great let's say home has a dependency of uh it needs to hit a service and load up my friends list before it sends me to home uh then we can do a resolve and pass in an array and we can have it each item in this resolve um object is going to represent a service call or something that has to happen before it proceeds and loads the controller in the template so we're going to resolve friends and we're going to say that this has a dependency of HTTP which is a builtin angular thing and we're just going to return http.get API friends I just have a Json file but it would be no different if an actual service that is going to return friends. Json and so one of the things that it gives you is a response we're actually going to want to parse it down just a little bit so we're going to use a then then response return response. dat which is what the actual friends. Json is you'll notice I just have a Json array name will 30 name Laura age 26 and so basically now before it goes to the template and the controller it is going to hit the friends API it's going to parse that here which there's no real parsing going except for give me the data uh it's kind of the equivalent of a backbone parse is what we're doing for those you guys familiar with backbone and now it's going to make a friend's provider of available to this controller if I want it so how we use that then did I do that on home yeah okay home so now I can make scope independency and I can go friends make the second argument friends scope friends equals friends and now let's make this friend in friends there we go whoops let's print friend Name colon friend. Ag and let's actually use the right brackets there you go so now we have HD an API we've made that available uh what I can do this do now is how about for each one of these instead of doing an LI or instead of doing that I do an input NG model equals friend name age let's say we want to change some stuff there we go and now that is real time changed in the scope and so let's do another thing let's make a scope method let's make a save button clean this up a little bit let's make this all nice and bootstrap looking looks a little nicer and so what we're just going to do is an n click which we can now give it a method save NG click save and so if I go to this home control I can now go scope save equals a method and we'll just make it alert so now when I hit save what did I miss h in there there you go my live reload is not working quite right today so there you go so now when I hit save it's going to do that let's actually make it alert stringify scope. friends there you go so that's what we're saving plus a little bit of random stuff that angulars decided to put in there Bob John there you go so now Bob and John so I can also do a HTTP same thing post friends and I can just put in scope. friends or actually I can just do friends there you go that's going to post that data straight back up and now I have a realtime editor for my friend list if I wanted to make a button on each one that deleted it well it's a pretty bad button I could use a glyph for that but let's go NG click and you can actually put in any EV value ation if you'd like so I can go uh index is what my index is going to be I can go friends friends splice that let's see if that works there you go so now on NG click I'm going to splice out my index straight out of friends and now it's gone if I hit save I have nothing that I'm posting back posting back an empty array so that's kind of a rapid fire introduction to a lot of the angular things that you can do uh another thing that you can do like if we are approaching this up here you can do a class issue we can make this one let me go to this friends Json and we're going to say I'm special actually you know what since lur is my wife and I'm will I'm going to say she's special and I am not false so now what I can do here is we're doing this on home yes okay what I can do is if you're not special I can do NG class and now I can pass in an object of the different classes that I would conditionally like to add so I'm going to go text muted which is uh bootstraps way of dimming it out and that's going to go if not friend if friend is not special it's going to give it a text muted class ah you notice it's all uh didn't really do that big of a deal because you can't really tell but that's muted that's a lighter color I could go special if friend is special that might make a better way add a CSS rule here let's go styles uh special get your background red I didn't test my I'm kind of on a test thing here so I don't know if uh apparent I didn't check my styles on live reload so not sure why that's not working uh but at any rate this should have now a special class to it yep so if you look at my second Li it's got a class of special so that should be background of red not sure quite why it's not that would be how you adjust a class like if we were to adjust a class up there let's see what are some other great things that you can do with angular uh you can provide services let's say that we wanted to make this API something that's reusable by a lot of different objects it's cachable it does a lot of smarts to it in that case we would actually move on to an angular service so what we would do is we would create a Services file uh friends let's keep this all for for easiness I'm going to keep it all registered to the app module and we're going to do factory uh as a normal naming convention if you're creating an angular service you're going to start by upper casing it there we go friends and whatever we return is what our people are going to get when they get uh whenever they load this module so if we return this and it's just a list of friends let's just return get which just returns this guy so I'm going to return an object which has a single method of get and that's what my friend's Factory is let me go ahead and add this to my page my friend service is added and now what I can do is friends can now not HTTP it can require friends and I can go return should have the same effect yep there you go as you can see no difference whatsoever I can also instead of doing this in the resolve if for some reason I wanted to do this in the controller at some point I can add this as a dependency here friends now is a service not a resolve provider so I can go friends. get there you go so that's another way that you can do it and now multiple controllers can all share friends about can use friends as a dependency about items can be friends diet and now I can mess with that service I can import HTTP into this um so git could now return friends. Json then now that will work exactly the same or it should not sure what I messed up on that but that should basically do the exact same thing greting friends it's my allate agent I'm not exactly sure what I messed up there I'm sure it's just some small little deal that I messed up I wonder if this has to be no that's not it because that's just a normal method and I'm sure it's something simple but at any rate that's basically how you would wire that in to then be a resource getter and Setter so that's kind of your introduction to how to use angularjs if you check out UI router you can also do nested views and sub views and a lot of great stuff on here and that is what you need to do to get started so hope you enjoyed it have yourself a great day
