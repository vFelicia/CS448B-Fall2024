With timestamps:

00:00 - so next.js has been around for a while
00:02 - now and it's gotten really mature and it
00:04 - really should be the default go to react
00:08 - tool of choice if you're going to use
00:09 - react in any kind of web environment and
00:12 - i say that with a pretty strong opinion
00:13 - like that because it's true if i was
00:15 - going to build a social media network
00:17 - today i'd use next.js for the front end
00:19 - if i was going to build a large massive
00:22 - 20 000 page site like cnn.com that had
00:25 - to be server side rendered to have great
00:27 - seo i would use next.js maybe with
00:30 - headless wordpress or something in the
00:31 - back end
00:32 - if i was going to build a single page
00:34 - app i'd absolutely use next.js there's
00:35 - very
00:36 - few use cases i can even think of where
00:39 - i would not want to use nexjs if i'm
00:41 - using react so we're going to cover
00:43 - next.js in a way that that covers really
00:45 - what you're getting out of it and why
00:47 - i've noticed a lot of people still
00:49 - default to create react app and they're
00:51 - slowing themselves down they're getting
00:53 - less production readiness out of going
00:55 - that route and i think just causing more
00:57 - developer frustration
00:59 - so let's get into next js and and why i
01:01 - like it so much and how fast it is to
01:03 - get great things accomplished in next js
01:05 - so the first thing you got to do is you
01:07 - have to to install next react and react
01:10 - dom so let's do that
01:16 - great now that that's done we need to do
01:18 - a little bit of convention we're going
01:19 - to add a pages folder
01:22 - and i normally don't like products and
01:24 - tools that use convention over
01:26 - configuration i think it's a frustrating
01:28 - developer experience if you're not used
01:30 - to that tool and don't use it all day
01:32 - day in and day out but next js has so
01:35 - little convention and abstracts away
01:37 - just so much misery with that little
01:39 - convention that it really is a win-win
01:42 - it's it's the best way to go about it so
01:44 - one of the conventions is make a pages
01:46 - folder for your pages to go in so i'm
01:49 - going to add an index in here this will
01:50 - be my home page
01:52 - which is by default index.js which you
01:55 - would be assumed i'm also going to make
01:56 - a products page
01:59 - and so let's go ahead and start up our
02:01 - dev server which you get by running next
02:03 - dev you can also run next build and next
02:06 - start for a production environment but
02:08 - we're going to do dev for now so npx
02:10 - next dev and we have a server running on
02:13 - local host 3000 now so let's go there
02:16 - and you can say that hey we don't have a
02:19 - react component in index basically my
02:21 - index.js is a react component so all i
02:24 - have to do is add a react component here
02:31 - you can see that it automatically
02:32 - refreshed for me because i have hot
02:33 - reloading out of the box i can add
02:35 - exclamation marks hit save and
02:36 - everything just refreshes phenomenally
02:39 - so there we go i have my index page
02:42 - let's copy this over to a products page
02:46 - and now i can go to slash products
02:50 - and also get high so that's basically
02:53 - you've got this routing built in you
02:54 - don't really have to think about routing
02:57 - i can also use the routing so i can go
03:01 - let's go use router and import use
03:04 - router
03:06 - so i can actually now explicitly use
03:08 - this router and say hey what's the
03:10 - router query
03:15 - so you see there's no query there but if
03:17 - i go and foo equals bar
03:20 - then i automatically have foo bar
03:23 - and
03:24 - name equals will
03:27 - so you can automatically get your query
03:28 - params in there and you can also add
03:31 - params to the actual url path so make
03:34 - this a little bigger here
03:36 - you can see that i've got fubar and name
03:37 - equals will but i could also make
03:38 - products go products one two three
03:41 - or uh
03:42 - nine eight nine eight nine eight so
03:44 - that's going to be a url param like what
03:45 - you would use in express.js we can also
03:47 - do that let me go and create a product
03:49 - page
03:52 - and i'm going to just do brackets here
03:54 - i'm going to say productslash.id
03:56 - and then that's automatically visual
03:58 - studio code is going to make a folder
03:59 - called product my file name is actually
04:01 - called id.js and i can take this exact
04:04 - same thing here
04:06 - and you'll see that my router query if i
04:08 - go to product
04:10 - slash 123
04:12 - it has id of one two three in there
04:14 - because that id right there is gonna get
04:16 - translated so you can instantly have
04:18 - your routes with your query set up uh
04:21 - it's really really great
04:22 - now for navigating back and forth
04:24 - between all these pages i could
04:25 - definitely use a tags in react standard
04:28 - html a tags but next also gives you this
04:31 - next link tag which gives you a lot of
04:34 - really cool pre-fetching magic right out
04:36 - of the box so i'm going to do a tag here
04:38 - let's import link from next slash link
04:42 - and i'm going to set up a link tag over
04:44 - to the products page
04:50 - so now if i go back home
04:52 - i've got my products tag here i can go
04:54 - back and forth you don't really see too
04:56 - much magic going on but what it's
04:58 - actually doing what next.js is doing
05:00 - behind the scenes is it's pre-fetching
05:03 - any link tags that are in the viewport
05:05 - so whenever a link scrolls into view
05:08 - it's going to prefetch that component
05:10 - which it does not automatically fetch
05:12 - and then when the user clicks on the
05:13 - link it automatically loads that page
05:16 - into view single page app no page
05:18 - refresh happens although it does update
05:20 - the url
05:22 - and the user gets a really really zippy
05:24 - experience let's go ahead and actually
05:26 - uh test this proof of concept here i'm
05:29 - going to write a console log
05:31 - outside of my react component so right
05:33 - this is going to log when this
05:35 - javascript code is loaded into the
05:38 - browser whether the home page is
05:39 - rendered or not
05:42 - i'm going to say hey home was loaded
05:45 - let's go and pull up my console here
05:48 - you see that it says that home was
05:49 - loaded
05:50 - and i'm going gonna also copy this into
05:52 - the products page
05:54 - and i'm gonna say products loaded
05:58 - all right i'm gonna refresh
06:00 - you see that home was loaded but
06:02 - products was not loaded so it did not do
06:04 - any pre-fetching because i'm in dev mode
06:06 - devmo does not do that let me go ahead
06:09 - and do npx builds and
06:11 - mpx next build
06:14 - and npx next start so i'm going to build
06:16 - and start i'm running in production mode
06:18 - now and we're going to see something
06:20 - pretty cool let's go to refresh my home
06:22 - page you can see that home was loaded
06:24 - and products was loaded because the
06:26 - products link is in the viewport
06:29 - and now i'm instantly going to see you
06:30 - can see there's zero latency at all it's
06:33 - just rendering the products page right
06:35 - there in the view we're not navigating
06:36 - and refreshing any pages
06:38 - and so if you want to you can actually
06:41 - change this and turn prefetch to false
06:47 - is by default true let's go ahead cancel
06:49 - my next
06:50 - and restart my next server
06:53 - let me go back to home
06:55 - and you can see that when i refresh home
06:57 - is loaded products did not load because
06:59 - prefetch is false but when i hover tada
07:01 - products is loaded just the act of
07:03 - hovering over it next js is going to
07:05 - pre-fetch the page that the user is
07:06 - about to click on and now we still have
07:09 - an instant render of that page when we
07:10 - click on it so a lot of cool stuff is
07:13 - going on there with next js also if i
07:15 - right click and view the page source
07:17 - here you can see that server side
07:19 - rendering is baked in that html link
07:22 - that we have going here right there nope
07:25 - where is it there we are that html a tag
07:28 - is pre-rendered so so the page is
07:30 - server-side pre-rendered and then
07:32 - bootstrapped automatically you don't
07:34 - have to do anything to have universal
07:36 - javascript ssr or whatever you want to
07:39 - call it out of the box so that's a
07:41 - really really great feature that you do
07:42 - nothing to get a very common thing is
07:45 - that you want to add environment
07:46 - variables to your application so you do
07:49 - that very simply by adding in dot n
07:52 - dot local
07:54 - file and then you can say things like uh
07:57 - i don't know api url
08:00 - that's something that's very common
08:03 - some url.com right so there's there's my
08:05 - api url now that i've added those
08:07 - environment variables or that
08:09 - environment variable i just have to stop
08:10 - and restart my dev server
08:15 - and it will pick up on that new and
08:16 - vocal you can see there we go load of
08:18 - the environment variables from dot n
08:20 - local and i can come over here and prove
08:23 - that we are automatically getting our
08:24 - environment variables
08:30 - let's go ahead and hit save let's load
08:32 - my page you can say hey console logged
08:34 - api url is some url.com but over here in
08:38 - the browser that was not defined
08:41 - one of the cool built-in features is
08:43 - that will only expose environment
08:45 - variables to the client that you choose
08:49 - to expose to the client this first
08:51 - render run happened on the server to
08:54 - render the page that got returned in the
08:56 - html response
08:58 - and then after it gets bootstrapped and
09:00 - it runs in the browser for the first
09:02 - time
09:03 - this environment variable is not defined
09:05 - we haven't exposed it yet all you have
09:07 - to do to expose it is simply say next
09:10 - public
09:12 - api url
09:14 - that was easy and then we can just have
09:16 - this look for next public
09:20 - rerunning our server
09:22 - and hitting refresh
09:25 - and you can see that now api url is
09:27 - defined in the client side as well as
09:31 - the server side so that's how you do
09:33 - environment variables and then on your
09:34 - production servers you don't need this
09:36 - end vocal file at all you literally just
09:39 - define your environment variables on
09:41 - whatever machine environment you're
09:42 - running that in and ta-da you can build
09:44 - once and run anywhere one more piece of
09:46 - convention that they add in that's
09:48 - extremely helpful is you can add a
09:50 - public folder let's create a folder
09:51 - called public
09:54 - and public now serves any static assets
09:56 - that we throw in there so let's reveal
09:58 - this in finder
10:00 - ta-da let's
10:02 - drag an image in here
10:05 - nice little smiley image and now i can
10:07 - go to my local server smiley
10:11 - or i can add that smiley image now in
10:14 - all my pages and it's going to
10:15 - automatically serve from that public
10:17 - folder
10:18 - another thing you can do is if you want
10:20 - to wrap all of the pages in all of your
10:22 - sites kind of like a site level wrapper
10:25 - maybe that maintains an app level store
10:27 - with the user's login status and profile
10:30 - status you can automatically create a
10:32 - new file called underscoreapp.js
10:35 - and then app is a single component
10:41 - and this will automatically get one prop
10:44 - the component prop
10:46 - and you can return the components
10:48 - so when i do this right here i've just
10:51 - wrapped every single page that i have
10:54 - with this app component so if i kill my
10:57 - dev server here and restart my dev
10:59 - server
11:00 - then the app component will now wrap
11:03 - everything
11:04 - i can console log that app ran
11:08 - you can see that every single page i go
11:10 - to is going to say hey app ran
11:13 - i could wrap this with a bunch of
11:15 - context providers
11:17 - i could make every single page on my
11:18 - website just be an h1
11:21 - that's completely worthless i don't know
11:22 - why anybody would ever do that but
11:24 - anyway you can have persistent layouts
11:26 - that kind of always keep a menu in the
11:29 - top header as all the other pages load
11:31 - you can do a lot of great stuff with
11:33 - app.js the app.js file you can also go
11:36 - one level higher and you can make an
11:38 - underscore document.js which is going to
11:41 - actually manage the headers and
11:43 - everything on the page if you want i
11:45 - will often use app.js to on an
11:48 - application to automatically route to
11:49 - the login for any pages that shouldn't
11:51 - be public
11:52 - you can easily set in a rule here of
11:54 - routes
11:55 - hey if the route is allowed to be public
11:58 - great if not bump the user to login you
12:00 - can have a store that manages the user's
12:03 - profile login status and any high level
12:06 - app configurations like user configured
12:09 - themes things like that great way to
12:11 - dump stuff in here and then
12:13 - automatically your entire
12:15 - web app can take advantage of things
12:18 - that are wrapped at a higher level so
12:19 - that's a very very useful feature as
12:21 - well all right so now i'll wrap it up by
12:23 - talking about how you actually ship next
12:25 - js off to production you really have a
12:27 - couple ways to go about it again you can
12:30 - build up your docker file or whatever
12:32 - you're using to deploy your code you can
12:33 - throw your code in and then you just
12:35 - have to run next
12:37 - builds and next start and you have your
12:40 - production web server it's done it's
12:42 - ready to go
12:43 - and you're actually running a node.js
12:45 - server if you want to convert this to
12:47 - static html you can also do that you
12:49 - just do build and npx next export and
12:53 - what that's going to do is it's actually
12:55 - going to build flat html files for each
12:57 - one of your pages you'll get an out
12:58 - folder here which we should see in about
13:00 - there you go one second and you can see
13:02 - now we've got all our html files the one
13:06 - caveat here
13:07 - is i've got my id.html that's not going
13:10 - to go so good a user is not going to
13:12 - navigate to slash bracket id
13:15 - now you can actually configure next js
13:18 - to generate a static html page for every
13:21 - single product you have
13:23 - if you want to say pull all the products
13:25 - from wordpress or something like that
13:27 - headless wordpress and then
13:29 - spit them all out generate them all in
13:31 - html it can do that and it can do that
13:32 - very very quickly
13:34 - if you don't need that feature you can
13:36 - simply have it called product.html and
13:39 - use the html query param that i used
13:42 - earlier right id equals
13:44 - and then that page is going to work for
13:46 - everything and you don't have to worry
13:47 - about building out a thousand html pages
13:51 - so it really depends on what you're
13:52 - going after if there's seo value in your
13:55 - export or not
13:56 - deploying next js is effortless we are
13:59 - already production ready we have
14:01 - everything we need to go
14:03 - with next.js you can usually get some
14:05 - semblance of an app out the very first
14:07 - day you start working on it which is
14:10 - obviously impressive to people on the
14:11 - outside but feels phenomenal as a
14:13 - developer it's just one of those tools
14:15 - that maximizes the time you put in i
14:17 - hope you enjoyed learning about next js
14:20 - today if you have any questions leave
14:21 - them in the comments i always try to
14:23 - especially the day or the day or two
14:25 - after a video is released stay very very
14:27 - connected to the comments try to answer
14:29 - any questions
14:30 - and which is why it pays to subscribe
14:32 - hit the subscribe button and i will see
14:34 - you around
14:44 - you

Cleaned transcript:

so next.js has been around for a while now and it's gotten really mature and it really should be the default go to react tool of choice if you're going to use react in any kind of web environment and i say that with a pretty strong opinion like that because it's true if i was going to build a social media network today i'd use next.js for the front end if i was going to build a large massive 20 000 page site like cnn.com that had to be server side rendered to have great seo i would use next.js maybe with headless wordpress or something in the back end if i was going to build a single page app i'd absolutely use next.js there's very few use cases i can even think of where i would not want to use nexjs if i'm using react so we're going to cover next.js in a way that that covers really what you're getting out of it and why i've noticed a lot of people still default to create react app and they're slowing themselves down they're getting less production readiness out of going that route and i think just causing more developer frustration so let's get into next js and and why i like it so much and how fast it is to get great things accomplished in next js so the first thing you got to do is you have to to install next react and react dom so let's do that great now that that's done we need to do a little bit of convention we're going to add a pages folder and i normally don't like products and tools that use convention over configuration i think it's a frustrating developer experience if you're not used to that tool and don't use it all day day in and day out but next js has so little convention and abstracts away just so much misery with that little convention that it really is a winwin it's it's the best way to go about it so one of the conventions is make a pages folder for your pages to go in so i'm going to add an index in here this will be my home page which is by default index.js which you would be assumed i'm also going to make a products page and so let's go ahead and start up our dev server which you get by running next dev you can also run next build and next start for a production environment but we're going to do dev for now so npx next dev and we have a server running on local host 3000 now so let's go there and you can say that hey we don't have a react component in index basically my index.js is a react component so all i have to do is add a react component here you can see that it automatically refreshed for me because i have hot reloading out of the box i can add exclamation marks hit save and everything just refreshes phenomenally so there we go i have my index page let's copy this over to a products page and now i can go to slash products and also get high so that's basically you've got this routing built in you don't really have to think about routing i can also use the routing so i can go let's go use router and import use router so i can actually now explicitly use this router and say hey what's the router query so you see there's no query there but if i go and foo equals bar then i automatically have foo bar and name equals will so you can automatically get your query params in there and you can also add params to the actual url path so make this a little bigger here you can see that i've got fubar and name equals will but i could also make products go products one two three or uh nine eight nine eight nine eight so that's going to be a url param like what you would use in express.js we can also do that let me go and create a product page and i'm going to just do brackets here i'm going to say productslash.id and then that's automatically visual studio code is going to make a folder called product my file name is actually called id.js and i can take this exact same thing here and you'll see that my router query if i go to product slash 123 it has id of one two three in there because that id right there is gonna get translated so you can instantly have your routes with your query set up uh it's really really great now for navigating back and forth between all these pages i could definitely use a tags in react standard html a tags but next also gives you this next link tag which gives you a lot of really cool prefetching magic right out of the box so i'm going to do a tag here let's import link from next slash link and i'm going to set up a link tag over to the products page so now if i go back home i've got my products tag here i can go back and forth you don't really see too much magic going on but what it's actually doing what next.js is doing behind the scenes is it's prefetching any link tags that are in the viewport so whenever a link scrolls into view it's going to prefetch that component which it does not automatically fetch and then when the user clicks on the link it automatically loads that page into view single page app no page refresh happens although it does update the url and the user gets a really really zippy experience let's go ahead and actually uh test this proof of concept here i'm going to write a console log outside of my react component so right this is going to log when this javascript code is loaded into the browser whether the home page is rendered or not i'm going to say hey home was loaded let's go and pull up my console here you see that it says that home was loaded and i'm going gonna also copy this into the products page and i'm gonna say products loaded all right i'm gonna refresh you see that home was loaded but products was not loaded so it did not do any prefetching because i'm in dev mode devmo does not do that let me go ahead and do npx builds and mpx next build and npx next start so i'm going to build and start i'm running in production mode now and we're going to see something pretty cool let's go to refresh my home page you can see that home was loaded and products was loaded because the products link is in the viewport and now i'm instantly going to see you can see there's zero latency at all it's just rendering the products page right there in the view we're not navigating and refreshing any pages and so if you want to you can actually change this and turn prefetch to false is by default true let's go ahead cancel my next and restart my next server let me go back to home and you can see that when i refresh home is loaded products did not load because prefetch is false but when i hover tada products is loaded just the act of hovering over it next js is going to prefetch the page that the user is about to click on and now we still have an instant render of that page when we click on it so a lot of cool stuff is going on there with next js also if i right click and view the page source here you can see that server side rendering is baked in that html link that we have going here right there nope where is it there we are that html a tag is prerendered so so the page is serverside prerendered and then bootstrapped automatically you don't have to do anything to have universal javascript ssr or whatever you want to call it out of the box so that's a really really great feature that you do nothing to get a very common thing is that you want to add environment variables to your application so you do that very simply by adding in dot n dot local file and then you can say things like uh i don't know api url that's something that's very common some url.com right so there's there's my api url now that i've added those environment variables or that environment variable i just have to stop and restart my dev server and it will pick up on that new and vocal you can see there we go load of the environment variables from dot n local and i can come over here and prove that we are automatically getting our environment variables let's go ahead and hit save let's load my page you can say hey console logged api url is some url.com but over here in the browser that was not defined one of the cool builtin features is that will only expose environment variables to the client that you choose to expose to the client this first render run happened on the server to render the page that got returned in the html response and then after it gets bootstrapped and it runs in the browser for the first time this environment variable is not defined we haven't exposed it yet all you have to do to expose it is simply say next public api url that was easy and then we can just have this look for next public rerunning our server and hitting refresh and you can see that now api url is defined in the client side as well as the server side so that's how you do environment variables and then on your production servers you don't need this end vocal file at all you literally just define your environment variables on whatever machine environment you're running that in and tada you can build once and run anywhere one more piece of convention that they add in that's extremely helpful is you can add a public folder let's create a folder called public and public now serves any static assets that we throw in there so let's reveal this in finder tada let's drag an image in here nice little smiley image and now i can go to my local server smiley or i can add that smiley image now in all my pages and it's going to automatically serve from that public folder another thing you can do is if you want to wrap all of the pages in all of your sites kind of like a site level wrapper maybe that maintains an app level store with the user's login status and profile status you can automatically create a new file called underscoreapp.js and then app is a single component and this will automatically get one prop the component prop and you can return the components so when i do this right here i've just wrapped every single page that i have with this app component so if i kill my dev server here and restart my dev server then the app component will now wrap everything i can console log that app ran you can see that every single page i go to is going to say hey app ran i could wrap this with a bunch of context providers i could make every single page on my website just be an h1 that's completely worthless i don't know why anybody would ever do that but anyway you can have persistent layouts that kind of always keep a menu in the top header as all the other pages load you can do a lot of great stuff with app.js the app.js file you can also go one level higher and you can make an underscore document.js which is going to actually manage the headers and everything on the page if you want i will often use app.js to on an application to automatically route to the login for any pages that shouldn't be public you can easily set in a rule here of routes hey if the route is allowed to be public great if not bump the user to login you can have a store that manages the user's profile login status and any high level app configurations like user configured themes things like that great way to dump stuff in here and then automatically your entire web app can take advantage of things that are wrapped at a higher level so that's a very very useful feature as well all right so now i'll wrap it up by talking about how you actually ship next js off to production you really have a couple ways to go about it again you can build up your docker file or whatever you're using to deploy your code you can throw your code in and then you just have to run next builds and next start and you have your production web server it's done it's ready to go and you're actually running a node.js server if you want to convert this to static html you can also do that you just do build and npx next export and what that's going to do is it's actually going to build flat html files for each one of your pages you'll get an out folder here which we should see in about there you go one second and you can see now we've got all our html files the one caveat here is i've got my id.html that's not going to go so good a user is not going to navigate to slash bracket id now you can actually configure next js to generate a static html page for every single product you have if you want to say pull all the products from wordpress or something like that headless wordpress and then spit them all out generate them all in html it can do that and it can do that very very quickly if you don't need that feature you can simply have it called product.html and use the html query param that i used earlier right id equals and then that page is going to work for everything and you don't have to worry about building out a thousand html pages so it really depends on what you're going after if there's seo value in your export or not deploying next js is effortless we are already production ready we have everything we need to go with next.js you can usually get some semblance of an app out the very first day you start working on it which is obviously impressive to people on the outside but feels phenomenal as a developer it's just one of those tools that maximizes the time you put in i hope you enjoyed learning about next js today if you have any questions leave them in the comments i always try to especially the day or the day or two after a video is released stay very very connected to the comments try to answer any questions and which is why it pays to subscribe hit the subscribe button and i will see you around you
