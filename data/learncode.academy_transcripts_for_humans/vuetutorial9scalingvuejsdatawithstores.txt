With timestamps:

00:00 - in this video we're going to use a store
00:01 - pattern to abstract our data out of a
00:04 - single component into a shared file that
00:07 - multiple components can interact with
00:09 - it's going to help our application scale
00:10 - forward
00:12 - because while putting all the data
00:14 - inside of component data object might
00:16 - work well for a to-do list
00:18 - soon you find yourself in scenarios
00:20 - where different components all want to
00:21 - access the same data and you don't want
00:23 - to have to pass it down through props
00:25 - over and over and over again and get
00:26 - complex let me show you a simple example
00:28 - here i'm i'm basically rendering three
00:31 - components here navigation friends and
00:33 - components
00:34 - navigation's gonna put the count of
00:36 - friends right here then this is
00:38 - obviously our friends list and we also
00:39 - want the count of friends down here
00:41 - um so right now we have friends list
00:45 - being populated right here
00:47 - in the friends component so for the
00:49 - navigation and footer to be able to get
00:51 - this information we'd have to take this
00:54 - data and we'd have to move it up to the
00:56 - app level and then we'd also have to
00:59 - pass it down
01:01 - through vbind into friends navigation
01:04 - and component
01:06 - which while that works for an
01:07 - application this size if you imagine a
01:09 - larger application that's a whole lot of
01:12 - passing down props and data and this is
01:14 - for a tiny bit of data if you get a lot
01:17 - of data it's just this top level view
01:20 - component would just be massive so that
01:22 - does not scale that does not work well
01:25 - so what we're going to want to do is
01:26 - we're going to actually create a
01:27 - separate store as many separate stores
01:30 - as we want to so that way all this data
01:32 - can live in a file outside of the view
01:34 - components that way our view components
01:36 - kind of act like a view level
01:39 - and then all the data can live somewhere
01:40 - else so we're going to do is we're going
01:42 - to go ahead and create a stores folder
01:44 - and inside of that let's go and create a
01:46 - friends store
01:48 - so there's our friend store now we can
01:50 - go ahead and go const friend store
01:54 - equals this is just going to be a plain
01:56 - old javascript object that we're going
01:57 - to export
01:59 - and i created it and then exported it
02:01 - for a reason because i want to be able
02:03 - to access it in here so we're going to
02:05 - do our
02:06 - data and then we're also going to do our
02:09 - methods
02:11 - and so methods in here could be some
02:13 - reusable methods like say add friend
02:17 - let's go and create some friends data
02:19 - here
02:24 - we'll do different data so we know that
02:26 - we're pulling it so we've got two
02:27 - friends and then add friend might
02:29 - receive a name
02:31 - and then we can go friend store
02:36 - dot data dot friends
02:38 - push so we'll just push that name onto
02:40 - the stack so that's kind of a way that
02:42 - you could then interact with it so
02:44 - that's why i defined friend store up
02:46 - here and then exported it that way it
02:48 - just makes it easier on my methods i can
02:50 - reference friendstore.data.friends
02:53 - so there's my one reusable method add
02:55 - friend
02:56 - and there's my
02:58 - data that can be shared by many
02:59 - components so i've created my friend
03:01 - store
03:02 - now we can come to our friends
03:03 - components and we can actually import
03:05 - that
03:08 - so now you can either just call this
03:10 - friendstore
03:14 - which will be friendstore.data
03:18 - because you'll remember we are
03:20 - referencing this now we don't want to
03:21 - reference the entire friend store in our
03:23 - data because this this isn't really data
03:26 - so friend store is now friend store.data
03:29 - and we can now go friend
03:30 - store dot friends
03:34 - and that will work now we're getting
03:36 - bobby and billy instead of
03:38 - whoever jack and john whoever the other
03:39 - guys were
03:41 - um and then here we're calling this add
03:43 - friend method so this can now go
03:45 - friendstore
03:47 - dot methods
03:49 - dot add friend
03:52 - and so this one i'll add a friend to the
03:54 - friends object and friend store which
03:56 - should be good and now that works
03:59 - and what's great about this is now we
04:01 - can do this exact same thing on all the
04:03 - other components other components can
04:05 - now access friend store
04:07 - there's no messy passing in of props uh
04:10 - i don't really care where friend store
04:12 - comes from or who all has access to it i
04:15 - just know that i need to have access to
04:17 - friend store
04:18 - and then i also need access to that data
04:22 - so let's go back here we're in the
04:25 - footer now
04:27 - we don't need that new friend
04:29 - so now i can say right here
04:33 - and now i have four friends
04:36 - five friends you can see that it
04:37 - dynamically updates just fine because it
04:40 - is listening to that object that friend
04:42 - store.data object it binds to it and is
04:45 - reactive to changes on it um that's
04:48 - super simple and then it's basically the
04:50 - exact same level of complexity to add
04:52 - that to the navigation
04:57 - there we go we're importing friend store
04:58 - we're spitting out friend store and now
05:00 - we can
05:01 - in the header as well
05:05 - we can spit out the length of friends we
05:06 - have up here um you could make a button
05:08 - down here that would trigger more
05:10 - actions against the friend store and the
05:12 - friend store components would all update
05:15 - so that's kind of how you can go with a
05:17 - store model
05:18 - a store pattern and we can also create
05:20 - multiple stores let's call this a
05:22 - different store i don't know tweet store
05:26 - call tweet singular
05:28 - to be consistent
05:30 - and we'll call this tweets
05:32 - uh whatever at this point it's a little
05:34 - overkill but we can take that tweet
05:36 - store
05:38 - and any other
05:40 - component can import the tweet store as
05:42 - well we can now import the tweet store
05:45 - we can set the tweet store here
05:48 - and so a component can now bind to
05:50 - multiple different stores it can add
05:52 - methods that interact with multiple
05:54 - different stores and what's great is is
05:57 - i don't actually have to have any of the
05:58 - logic for adding a friend here all i'm
06:01 - doing is i'm calling the logic of add
06:03 - friend all that logic can be reusable
06:06 - and live in friend store so that's kind
06:08 - of how you use a store pattern when you
06:10 - have to start scaling out the data
06:13 - of a view application
06:20 - you

Cleaned transcript:

in this video we're going to use a store pattern to abstract our data out of a single component into a shared file that multiple components can interact with it's going to help our application scale forward because while putting all the data inside of component data object might work well for a todo list soon you find yourself in scenarios where different components all want to access the same data and you don't want to have to pass it down through props over and over and over again and get complex let me show you a simple example here i'm i'm basically rendering three components here navigation friends and components navigation's gonna put the count of friends right here then this is obviously our friends list and we also want the count of friends down here um so right now we have friends list being populated right here in the friends component so for the navigation and footer to be able to get this information we'd have to take this data and we'd have to move it up to the app level and then we'd also have to pass it down through vbind into friends navigation and component which while that works for an application this size if you imagine a larger application that's a whole lot of passing down props and data and this is for a tiny bit of data if you get a lot of data it's just this top level view component would just be massive so that does not scale that does not work well so what we're going to want to do is we're going to actually create a separate store as many separate stores as we want to so that way all this data can live in a file outside of the view components that way our view components kind of act like a view level and then all the data can live somewhere else so we're going to do is we're going to go ahead and create a stores folder and inside of that let's go and create a friends store so there's our friend store now we can go ahead and go const friend store equals this is just going to be a plain old javascript object that we're going to export and i created it and then exported it for a reason because i want to be able to access it in here so we're going to do our data and then we're also going to do our methods and so methods in here could be some reusable methods like say add friend let's go and create some friends data here we'll do different data so we know that we're pulling it so we've got two friends and then add friend might receive a name and then we can go friend store dot data dot friends push so we'll just push that name onto the stack so that's kind of a way that you could then interact with it so that's why i defined friend store up here and then exported it that way it just makes it easier on my methods i can reference friendstore.data.friends so there's my one reusable method add friend and there's my data that can be shared by many components so i've created my friend store now we can come to our friends components and we can actually import that so now you can either just call this friendstore which will be friendstore.data because you'll remember we are referencing this now we don't want to reference the entire friend store in our data because this this isn't really data so friend store is now friend store.data and we can now go friend store dot friends and that will work now we're getting bobby and billy instead of whoever jack and john whoever the other guys were um and then here we're calling this add friend method so this can now go friendstore dot methods dot add friend and so this one i'll add a friend to the friends object and friend store which should be good and now that works and what's great about this is now we can do this exact same thing on all the other components other components can now access friend store there's no messy passing in of props uh i don't really care where friend store comes from or who all has access to it i just know that i need to have access to friend store and then i also need access to that data so let's go back here we're in the footer now we don't need that new friend so now i can say right here and now i have four friends five friends you can see that it dynamically updates just fine because it is listening to that object that friend store.data object it binds to it and is reactive to changes on it um that's super simple and then it's basically the exact same level of complexity to add that to the navigation there we go we're importing friend store we're spitting out friend store and now we can in the header as well we can spit out the length of friends we have up here um you could make a button down here that would trigger more actions against the friend store and the friend store components would all update so that's kind of how you can go with a store model a store pattern and we can also create multiple stores let's call this a different store i don't know tweet store call tweet singular to be consistent and we'll call this tweets uh whatever at this point it's a little overkill but we can take that tweet store and any other component can import the tweet store as well we can now import the tweet store we can set the tweet store here and so a component can now bind to multiple different stores it can add methods that interact with multiple different stores and what's great is is i don't actually have to have any of the logic for adding a friend here all i'm doing is i'm calling the logic of add friend all that logic can be reusable and live in friend store so that's kind of how you use a store pattern when you have to start scaling out the data of a view application you
