With timestamps:

00:00 - so this is the second video of a modular
00:02 - js tutorial series and you definitely
00:04 - will want to watch the first one if you
00:06 - are not familiar with the object literal
00:08 - pattern or what a javascript module is
00:11 - we're basically going to convert this
00:13 - jquery what i call spaghetti code into a
00:15 - module that makes more sense that you
00:17 - can look at and kind of really quickly
00:18 - see what's going on and it's going to
00:20 - work together a lot better with any
00:22 - future code we have this is not it's not
00:24 - like this is the end of the world but
00:26 - imagine if you had
00:27 - 50 times this and it's just jquery
00:30 - function after jquery function all just
00:32 - splattered onto a page
00:34 - that's just a pain or honestly even if
00:36 - it's just this file looking at it you
00:38 - can't immediately tell what's going on
00:40 - you have to actually read through to see
00:42 - what's happening and there's much better
00:44 - ways of organizing that code so let me
00:46 - show you what kind of module i got here
00:48 - this is that people adder let me show
00:49 - you the html for this let me add a
00:51 - couple people so i have a div with id of
00:54 - people this is kind of my wrapping div
00:55 - for the whole thing
00:56 - i have an h1 inside of it probably not
00:59 - necessary um i have an input
01:02 - i have a button and then i have a ul the
01:04 - ul is basically just has a bunch of lis
01:06 - in it for each person
01:08 - and so then here's an li for each person
01:10 - it has a span and a delete button in it
01:12 - that's it
01:13 - i'll show you my actual html in the code
01:16 - here's my input button ul now instead of
01:18 - a bunch of li's the allies have to be
01:20 - dynamic they have to be created so i
01:22 - created a script tag with a type of text
01:24 - template and when your browser sees this
01:27 - it does nothing it's not javascript it
01:29 - doesn't do anything with that so then i
01:31 - can code any html in there that i want
01:33 - and then i can get that out and it's
01:35 - basically a javascript string which is
01:37 - what i'm doing here template equals
01:40 - let's go find that element and get the
01:41 - html i could do this instead i could
01:45 - do all that mustache stuff here that
01:47 - that weird stuff that you're seeing
01:50 - that's mustache js so if you're not
01:52 - familiar with mustache or templating
01:53 - well you'll get an intro to that here so
01:56 - for each person in my people object
01:59 - or for each item in my people array i'm
02:01 - going to create an li
02:03 - and i'm just going to add the value of
02:04 - that in there
02:06 - so that's basically what's going on
02:08 - there
02:10 - and that's mustache so i could code it
02:11 - like this
02:12 - but it you're pretty limited you don't
02:14 - want to add much more than one element
02:16 - otherwise it gets a big messy string and
02:19 - you don't see the pretty syntax
02:20 - highlighting and then i'm putting html
02:22 - in my javascript that's just that's just
02:24 - not a very good practice you want to
02:26 - kind of avoid that as much as you can so
02:28 - here my html is still in my html i just
02:31 - have to get the template out that's a
02:32 - good way of going so i just had to at
02:34 - least mention that for people who were
02:35 - not familiar with what mustache was
02:38 - so
02:39 - let's go and convert this spaghetti code
02:41 - into a module so starting off let's just
02:44 - create we'll just call it people
02:47 - equals and we're just going to create
02:49 - our object and then
02:51 - our people array can live on the object
02:54 - so i could go people
02:56 - is an empty array
02:57 - and then my template can live here as
02:59 - well
03:00 - the template can live
03:03 - yeah let's just snatch it out for now
03:05 - there we go
03:06 - so now i've automatically just kind of
03:08 - incorporated my people and my template
03:10 - into my object and what's cool about
03:13 - that is i no longer have these two
03:14 - global variables yippee i can get rid of
03:16 - you now a simple way of getting rid of
03:19 - global variables would be to wrap this
03:21 - in a self executing anonymous function
03:25 - there we go
03:28 - so i just created a function and now i
03:29 - can have it execute itself so if i were
03:32 - to actually put this down here
03:35 - if i were to wrap this code in a
03:36 - self-executing anonymous function that's
03:38 - kind of one way to get around it let me
03:40 - move this down here
03:43 - now ver people is scoped to this
03:45 - function so it's not global anymore this
03:48 - isn't global anymore if i do ver
03:50 - template outside of that function
03:53 - blah blah blah
03:54 - then this is not overriding
03:57 - this so that's kind of one quick and
03:59 - dirty way that you can at least get rid
04:01 - of global variables it's kind of a
04:04 - module but it's a spaghetti code module
04:06 - still so we've got that so that's that
04:08 - gets rid of global variables but it
04:09 - doesn't really give us better coding
04:11 - practices and once again most times
04:14 - you're going to have more code than this
04:15 - so these are just my two functions that
04:17 - i'm using to illustrate module or
04:19 - javascript
04:20 - so then i'm going to go ahead and have
04:21 - an init function and it stands for
04:23 - initialize or initialization
04:26 - and it's kind of going to be how we kick
04:28 - off our module
04:29 - so what we're going to do is let me
04:31 - comment out all this code
04:34 - is we're going to define our people
04:35 - module
04:36 - and then we're going to run people.init
04:39 - and you know what i'm also going to do
04:40 - i'm also going to keep this people
04:41 - module wrapped in this anonymous
04:43 - function
04:45 - just so there's still no global
04:46 - variables we don't really need a global
04:48 - variable for people
04:50 - and so now
04:52 - this ver people is not global either
04:54 - yippee
04:55 - so we've got people our object defined
04:57 - and then we're going to run people in it
04:59 - and so that's going to run this function
05:00 - that kind of gets everything kicked off
05:02 - so let's kind of start addressing some
05:04 - of the issues in our ground rules
05:06 - uh let's take on this one efficient dom
05:09 - usage i do not like
05:12 - that there is dom getting searched here
05:14 - dom getting searched here i'm getting
05:16 - searched here so we're actually going to
05:18 - do is we're going to cache dom
05:22 - at the very beginning so let's make a
05:24 - cache dom method
05:30 - um we're actually going to find some
05:31 - things we'll go uh this dot el
05:34 - equals people module
05:37 - and so basically we're just uh finding
05:39 - people module and then we're saving it
05:40 - now it's on our object
05:42 - and whenever i store a jquery wrapped
05:45 - object then i always like to add a
05:47 - dollar to it instead of just calling it
05:48 - this el let's call it this dollar el so
05:51 - i know that that's a jquery search and i
05:53 - can do all the jquery things on it like
05:55 - show hide toggle slide you know all that
05:57 - stuff
05:59 - so let's see what else do we have to do
06:00 - we have to find that button so i can do
06:02 - this button
06:04 - equals this dot el see now i can
06:07 - reference this ell i don't have to
06:08 - search the dom again i've already saved
06:09 - it somewhere
06:11 - find button
06:13 - let's see what else are we doing in here
06:15 - we're finding an input so let's go and
06:16 - find an input
06:19 - let's use some multiple cursors to do
06:21 - that slick and fast there we go
06:24 - uh we're finding the inputs uh we're
06:27 - finding the ul
06:29 - let's do that
06:31 - there we go and
06:33 - i think that's it that should do it for
06:35 - now uh so now we've saved a lot of dom
06:38 - we only have one of these going on in
06:40 - our whole module that's a good sign i
06:41 - only want to see one of these green
06:43 - dollar signs
06:44 - so that's a really really good thing
06:45 - i've got a second one for my template so
06:48 - i guess since my template is inside of
06:51 - my people module i could actually
06:54 - forget template here and i could
06:55 - actually cache the template if i wanted
06:57 - to
06:59 - let's get rid of that and let's do this
07:01 - template
07:04 - equals that's not a dollar because this
07:06 - is just going to be an html string
07:09 - dot el
07:10 - find
07:12 - and then we're going to find
07:14 - that within it and get the html
07:17 - that do it right yeah that should have
07:18 - done it okay so this template is now set
07:21 - as well
07:22 - so the only thing i actually have going
07:24 - on up here is people
07:26 - so then let's actually create a render
07:28 - method render is the function and the
07:30 - method it's a very common name for
07:32 - let's take the current state of my
07:34 - module and let's
07:36 - let's commit it or let's translate that
07:39 - into my html dom so let's take that
07:41 - javascript module let's print it to this
07:44 - ul is basically what's going on so this
07:46 - is going to be the point in time where
07:47 - we take
07:49 - every person in our people array
07:51 - and we're going to create an li out of
07:53 - that it's basically what's going on here
07:55 - on this click fun on this click method
07:58 - so let's go ahead and what does this
08:00 - render method do i'm going to uncomment
08:02 - this
08:03 - it basically just takes all the people
08:05 - and it creates a data object
08:07 - and then it does an html
08:10 - dot html on our ul so let's go and do
08:13 - that mustache render here
08:16 - so we're going to go data equals this is
08:18 - going to be this dot people
08:20 - so i'm making a data object if you're
08:22 - not familiar with mustache here's what
08:23 - mustache does
08:25 - you just go mustache render
08:28 - and you give it a template so the
08:30 - template might be uh
08:32 - name
08:34 - or it's maybe it'll say hi name
08:37 - and then you give it an object so that
08:39 - object could be name
08:41 - will and it's basically just going to
08:43 - take oh it's looking for name let's find
08:45 - name in the object okay there's name so
08:46 - then it's going to just going to create
08:48 - a string that says hi will
08:52 - that's basically what mustache does it
08:54 - takes you know values and spits them
08:56 - into a string so in this case we're just
08:58 - going to take
08:59 - um our array of people is all we need
09:02 - and for each person we're going to spit
09:04 - that value dot is basically
09:05 - representation of the whole value of
09:07 - what's in the array so for each person
09:10 - we're going to spit out an entire li
09:13 - so that's what's going to go on
09:16 - and we can just go
09:17 - this dot ul we've cached that up here so
09:20 - we don't need to search the dom for that
09:22 - this ul html we're going to render this
09:26 - dot template
09:28 - since we've already stored this dot
09:29 - template
09:31 - and we're going to
09:33 - put the data in there so that should
09:35 - work so let's go ahead and maybe add a
09:37 - startup person
09:39 - maybe will and laura
09:42 - and let's say on init we're going to
09:44 - cache the dom and then we're going to
09:45 - render
09:46 - so we'll kind of render right away let's
09:48 - see if that worked yep we got two people
09:49 - will and laura button does absolutely
09:51 - nothing because we unprogrammed that in
09:53 - so i could also say will and steve
09:56 - and there we go we have will and we have
09:57 - steve excellent so our app is kind of
09:59 - working so far
10:01 - already it's a lot cleaner one thing
10:02 - that's great about modular javascript
10:06 - is
10:07 - you can look at it and each method has a
10:09 - name so you can see what's going on
10:10 - based off the name i know this is
10:12 - initializing the module i clearly know
10:15 - this is caching the dom and i clearly
10:16 - know this is rendering so ideally this
10:19 - is going to be the only thing that ever
10:20 - touches the dom itself everything else
10:23 - talks to this module maybe changes this
10:25 - people array but nothing else actually
10:28 - interacts with the html except for my
10:30 - render method this is very clean so far
10:33 - so i'm liking it so now let's make this
10:35 - render on click on click we want to take
10:37 - the value of our input
10:39 - push it onto this people array and
10:41 - render again
10:42 - so to do that we need to bind some
10:44 - events
10:45 - so let's bind events
10:48 - and if you're if you're new to modular
10:50 - javascript you're probably thinking oh
10:51 - my goodness this is way too much
10:53 - thinking i'm not used to thinking this
10:55 - much when i code
10:56 - yeah well if you're not thinking when
10:58 - you code then that's kind of probably
10:59 - the next step you've learned how to code
11:02 - now let's learn how to think about how
11:03 - we should code
11:06 - and it probably looks very foreign to
11:07 - you because this is new
11:09 - but if you write one or two modules then
11:12 - everyone's going to have a cash dom a
11:14 - bind events a render so this is not
11:16 - exactly crazy this is actually preparing
11:18 - you to learn backbone.js which is
11:20 - very very similar to what i'm doing
11:22 - today
11:24 - so let's do a bind events function
11:27 - i just want to like give you that
11:28 - warning i guess in case you thought i'm
11:29 - crazy and i'm going to make your life
11:31 - miserable and very complicated so as you
11:34 - guess the bind events method is for one
11:37 - thing and one thing only binding events
11:39 - so let's go ahead and see what do we do
11:41 - we're going to on the click on the
11:43 - buttons click event
11:45 - then we are going to add a person
11:47 - so let's go ahead and make
11:50 - this
11:51 - dot input a note button
11:55 - on click
11:57 - and we'll make an add person
12:01 - function that seems like the right name
12:03 - for it
12:04 - so add person
12:07 - there we are because i don't want to
12:08 - actually make a function in here because
12:09 - now this method has several things it's
12:11 - binding an event listener and it's
12:13 - adding a person ah i don't like that add
12:15 - person
12:16 - this is only responsible for binding
12:18 - events so whenever the click goes
12:20 - we're going to add the person over here
12:22 - this is also a very good pattern you
12:23 - usually don't want to write functions
12:26 - directly into an event binding it's just
12:28 - not a good pattern for a lot of reasons
12:32 - and i think that's all it has to happen
12:33 - for now yep so add person
12:35 - let's go ahead and go
12:37 - we need to get the value
12:39 - we're going to push that right there
12:41 - i'll just copy this in
12:43 - so this dot people
12:45 - we're going to push
12:48 - the input value
12:52 - this dot input dot value now there's
12:53 - gonna be a problem right here which i'll
12:55 - show you in a minute
12:56 - um
12:58 - uh this will not work correctly this
12:59 - will actually have some problems so
13:01 - let's go ahead and save this and test it
13:03 - out and we'll see what my problems are
13:05 - let's go to my console looking good
13:08 - let's add a test app error
13:11 - this is not uh it's giving me all these
13:13 - weird things something is not a function
13:16 - okay let's go ahead and find out what's
13:19 - going on here
13:20 - um
13:22 - here's one thing that you got to know
13:24 - with events whenever you're binding an
13:26 - event the context is going to change so
13:28 - this value of ad person is no longer
13:31 - going to be
13:33 - people so if you know everywhere i'm
13:35 - saying this this really refers to people
13:37 - this is people dot cash dom people dot
13:40 - bind events people dot render
13:42 - well when an event fires it sets the
13:45 - this value to be the item that the event
13:48 - was bound on so this will equal
13:51 - the stop button so this will be the
13:53 - value of button inside of add person i
13:55 - can get around that by simply binding it
13:58 - to this
14:00 - and if it's confusing basically just
14:02 - realize when you're doing modular js
14:04 - if you want a method to always run in
14:07 - the context where the this value points
14:10 - to its module
14:12 - then you have to bind it
14:13 - because as soon as it gets called from
14:15 - an event listener from a click event the
14:18 - context of this will change the value of
14:20 - this will change and in our case we
14:22 - don't want the value of this to ever
14:23 - change we want this to always mean
14:26 - the people module so in that case i'm
14:28 - binding it to this
14:31 - this this this i know that's a lot of
14:32 - saying so now it's going to work
14:36 - add person dot find is oh sorry this dot
14:38 - add person there we go
14:41 - test
14:43 - and okay so it's adding
14:45 - it's kind of working uh we are now
14:48 - adding a person to the array and then we
14:50 - want to render
14:52 - let's re-render again so add it to the
14:54 - array
14:55 - re-render let's go ahead check it make
14:57 - sure it works test and we got a new
14:58 - person test2 awesome excellent and you
15:01 - know what else i want to do is i also
15:03 - want to clear the value
15:07 - this dot input dot val equals nothing
15:11 - so once that renders i want to clear the
15:13 - value of my name excellent so that was
15:15 - very easy to do test two so now my name
15:17 - value clears out every time so next up
15:20 - we just gotta delete our stuff
15:23 - so you see we're getting a little bit
15:24 - more code we're definitely getting a few
15:26 - more functions going on but it's
15:27 - extremely clear if i if i know that
15:30 - there's a problem whenever my person
15:32 - gets added
15:33 - uh let's just take this back out i'm not
15:36 - going to clear this value let's say
15:37 - we've had our to-do list working for a
15:39 - year and i have to come into it a year
15:41 - later i've forgotten most all the code
15:43 - but my manager says well now i hate how
15:46 - test stays in here
15:47 - this should always clear when i add a
15:49 - person it should be empty so then you
15:52 - just open this coding and say okay on
15:54 - add person oh there we go add person
15:56 - well that's really easy to do you can
15:57 - add in your line of code to add person
16:00 - and you know everything else is
16:01 - separated out and nothing's going to
16:02 - break
16:03 - so that's the biggest reason that
16:06 - modular code is a big win
16:08 - is because it separates out your code i
16:10 - don't have to worry about the module
16:11 - initializing i don't have to worry about
16:13 - the module caching the dom or binding
16:14 - events all that's happening i just want
16:17 - to add one feature to when the person
16:19 - gets added so i only have to worry about
16:21 - this piece of code i don't even have to
16:23 - worry about it rendering or any of that
16:25 - stuff
16:26 - so modular code big big big win so let's
16:29 - go ahead and get this delete event going
16:30 - on right here and then we're done so my
16:33 - delete event is
16:35 - a delegate event on the ul
16:38 - if you don't know about delegation i'm
16:40 - going to add a little bit to my jquery
16:42 - series in there so you can see what
16:43 - delegation really is
16:45 - so this ul is going to delegate to the i
16:48 - delete click so let's go we already have
16:51 - a bind events method going on let's just
16:53 - add one more event
16:54 - this dot ul
16:57 - delegate
16:58 - i delete click
17:00 - let's go ahead and call this delete
17:01 - person
17:06 - so when
17:08 - i class delete gets clicked
17:10 - we're gonna go up to that li we're gonna
17:13 - find out which number we are are we
17:15 - number three we're gonna delete number
17:17 - three
17:18 - from our people list and then we're
17:20 - gonna re-render it's pretty simple
17:22 - so once again let's go ahead and go this
17:24 - dot delete person
17:27 - and let's bind this
17:29 - same thing we gotta make sure we bind
17:30 - that so that was easy we were able to
17:33 - just add one more event and now this
17:35 - method is going to fire when we click on
17:37 - delete person let me see if that works
17:40 - make sure that's going delete hey always
17:42 - fires
17:43 - oh and look it also tells me people
17:45 - splice is not a function oh that's cause
17:47 - i was wondering how that was working all
17:49 - of a sudden that's because i uncommented
17:51 - my code so let me go ahead and comment
17:53 - that code back
17:55 - almost done here
17:56 - last method
17:58 - um so this is this is correct i want to
18:00 - keep this very move this is the one that
18:03 - i want to remove so i'm i'm going up to
18:06 - my closest li
18:08 - so when i click on here i'm going to go
18:09 - up and find my closest li okay that's
18:11 - this i want to remove that um except for
18:14 - i don't actually want to do it like this
18:16 - no no no no more html touching in the
18:19 - other methods this is the guy that
18:20 - touches html
18:22 - this guy does not touch html so you go
18:24 - away
18:25 - i'm just going to call you
18:26 - remove
18:29 - since uh you're still actually you're
18:31 - still a jquery selection so i'll keep
18:33 - you as the dollar signal
18:34 - and then i want to do let's see i want
18:36 - to in ul this dot ul
18:40 - i want to find the lis and i want to get
18:42 - the index of my current li so this is
18:44 - going to find out hey what number am i
18:46 - the guy that got clicked and my number
18:48 - three and my number two um so let's find
18:50 - that i that's the guy i want to remove
18:53 - and then this dot people let's splice it
18:55 - straight out
18:56 - and let's render again
19:00 - so basically everybody's just calling
19:02 - render the only boot up we're going to
19:03 - render when we add a person we're going
19:05 - to render when we delete a person we're
19:06 - going to render so here we go let's see
19:09 - if it works will goes away app e is not
19:11 - defined that's because i didn't add e in
19:13 - there
19:14 - that's my event
19:17 - so if i want to call it that
19:19 - it's a little clearer for people who are
19:21 - not sure exactly what's going on
19:23 - let's reload it there we go there we go
19:25 - all gone and my module is working so
19:28 - this is a module this is kind of how you
19:30 - do modular javascript
19:33 - and in the next video whenever that
19:34 - comes out i'll show you kind of how to
19:36 - do a revealing module pattern
19:38 - so we only have maybe a few things i
19:41 - don't really i don't really want to
19:42 - expose cache dom bind events i don't
19:45 - really want to expose all these to an
19:47 - api
19:48 - but it would be cool to do add person
19:50 - delete person let me go ahead and get
19:52 - rid of this
19:54 - let me make this global again this ver
19:57 - people so now i kind of have this api
19:59 - here
20:01 - i can go people.ad person
20:04 - so maybe another part of the program up
20:06 - here wants to add a person to my list
20:08 - well i can add a new person
20:11 - there we go i added a person to the list
20:13 - except for that didn't really work
20:15 - because i actually have to
20:17 - send it a value
20:19 - let's go and do something like this
20:21 - let's go value or
20:23 - so if a value is passed in we'll
20:25 - actually do that if not we'll look it up
20:27 - from the input that's pretty easy so i
20:29 - have this api going
20:34 - uh it's called people
20:35 - add person
20:39 - there we go we added laura and now laura
20:42 - can still go away so that's kind of cool
20:44 - i can add
20:45 - add a bunch of people so now a module up
20:47 - here could actually talk to my other
20:49 - module
20:50 - um but i don't want them to be able to
20:52 - call cash dom i don't want them to be
20:53 - able to call bind events i really just
20:56 - want them to be able to call i don't i
20:58 - don't want them to call render either i
20:59 - really just want them to be able to call
21:00 - these two events so in the next video
21:02 - we'll get into a revealing module
21:04 - pattern where we only allow people to
21:06 - have access to these two and all the
21:08 - rest is internal because once again
21:11 - people can hack this as well they could
21:13 - go people.
21:14 - people which is the array and they could
21:17 - push something on there themselves oh
21:19 - that's a bad pattern god
21:22 - uh but it didn't render oh crud so now
21:24 - what happens so now i delete lore and
21:26 - all of a sudden god shows up so that's
21:28 - that's not a good pattern uh for people
21:30 - to be able to automatically talk to
21:34 - to the pieces on my module so again next
21:36 - up revealing module pattern i'm gonna
21:38 - stop yapping for now

Cleaned transcript:

so this is the second video of a modular js tutorial series and you definitely will want to watch the first one if you are not familiar with the object literal pattern or what a javascript module is we're basically going to convert this jquery what i call spaghetti code into a module that makes more sense that you can look at and kind of really quickly see what's going on and it's going to work together a lot better with any future code we have this is not it's not like this is the end of the world but imagine if you had 50 times this and it's just jquery function after jquery function all just splattered onto a page that's just a pain or honestly even if it's just this file looking at it you can't immediately tell what's going on you have to actually read through to see what's happening and there's much better ways of organizing that code so let me show you what kind of module i got here this is that people adder let me show you the html for this let me add a couple people so i have a div with id of people this is kind of my wrapping div for the whole thing i have an h1 inside of it probably not necessary um i have an input i have a button and then i have a ul the ul is basically just has a bunch of lis in it for each person and so then here's an li for each person it has a span and a delete button in it that's it i'll show you my actual html in the code here's my input button ul now instead of a bunch of li's the allies have to be dynamic they have to be created so i created a script tag with a type of text template and when your browser sees this it does nothing it's not javascript it doesn't do anything with that so then i can code any html in there that i want and then i can get that out and it's basically a javascript string which is what i'm doing here template equals let's go find that element and get the html i could do this instead i could do all that mustache stuff here that that weird stuff that you're seeing that's mustache js so if you're not familiar with mustache or templating well you'll get an intro to that here so for each person in my people object or for each item in my people array i'm going to create an li and i'm just going to add the value of that in there so that's basically what's going on there and that's mustache so i could code it like this but it you're pretty limited you don't want to add much more than one element otherwise it gets a big messy string and you don't see the pretty syntax highlighting and then i'm putting html in my javascript that's just that's just not a very good practice you want to kind of avoid that as much as you can so here my html is still in my html i just have to get the template out that's a good way of going so i just had to at least mention that for people who were not familiar with what mustache was so let's go and convert this spaghetti code into a module so starting off let's just create we'll just call it people equals and we're just going to create our object and then our people array can live on the object so i could go people is an empty array and then my template can live here as well the template can live yeah let's just snatch it out for now there we go so now i've automatically just kind of incorporated my people and my template into my object and what's cool about that is i no longer have these two global variables yippee i can get rid of you now a simple way of getting rid of global variables would be to wrap this in a self executing anonymous function there we go so i just created a function and now i can have it execute itself so if i were to actually put this down here if i were to wrap this code in a selfexecuting anonymous function that's kind of one way to get around it let me move this down here now ver people is scoped to this function so it's not global anymore this isn't global anymore if i do ver template outside of that function blah blah blah then this is not overriding this so that's kind of one quick and dirty way that you can at least get rid of global variables it's kind of a module but it's a spaghetti code module still so we've got that so that's that gets rid of global variables but it doesn't really give us better coding practices and once again most times you're going to have more code than this so these are just my two functions that i'm using to illustrate module or javascript so then i'm going to go ahead and have an init function and it stands for initialize or initialization and it's kind of going to be how we kick off our module so what we're going to do is let me comment out all this code is we're going to define our people module and then we're going to run people.init and you know what i'm also going to do i'm also going to keep this people module wrapped in this anonymous function just so there's still no global variables we don't really need a global variable for people and so now this ver people is not global either yippee so we've got people our object defined and then we're going to run people in it and so that's going to run this function that kind of gets everything kicked off so let's kind of start addressing some of the issues in our ground rules uh let's take on this one efficient dom usage i do not like that there is dom getting searched here dom getting searched here i'm getting searched here so we're actually going to do is we're going to cache dom at the very beginning so let's make a cache dom method um we're actually going to find some things we'll go uh this dot el equals people module and so basically we're just uh finding people module and then we're saving it now it's on our object and whenever i store a jquery wrapped object then i always like to add a dollar to it instead of just calling it this el let's call it this dollar el so i know that that's a jquery search and i can do all the jquery things on it like show hide toggle slide you know all that stuff so let's see what else do we have to do we have to find that button so i can do this button equals this dot el see now i can reference this ell i don't have to search the dom again i've already saved it somewhere find button let's see what else are we doing in here we're finding an input so let's go and find an input let's use some multiple cursors to do that slick and fast there we go uh we're finding the inputs uh we're finding the ul let's do that there we go and i think that's it that should do it for now uh so now we've saved a lot of dom we only have one of these going on in our whole module that's a good sign i only want to see one of these green dollar signs so that's a really really good thing i've got a second one for my template so i guess since my template is inside of my people module i could actually forget template here and i could actually cache the template if i wanted to let's get rid of that and let's do this template equals that's not a dollar because this is just going to be an html string dot el find and then we're going to find that within it and get the html that do it right yeah that should have done it okay so this template is now set as well so the only thing i actually have going on up here is people so then let's actually create a render method render is the function and the method it's a very common name for let's take the current state of my module and let's let's commit it or let's translate that into my html dom so let's take that javascript module let's print it to this ul is basically what's going on so this is going to be the point in time where we take every person in our people array and we're going to create an li out of that it's basically what's going on here on this click fun on this click method so let's go ahead and what does this render method do i'm going to uncomment this it basically just takes all the people and it creates a data object and then it does an html dot html on our ul so let's go and do that mustache render here so we're going to go data equals this is going to be this dot people so i'm making a data object if you're not familiar with mustache here's what mustache does you just go mustache render and you give it a template so the template might be uh name or it's maybe it'll say hi name and then you give it an object so that object could be name will and it's basically just going to take oh it's looking for name let's find name in the object okay there's name so then it's going to just going to create a string that says hi will that's basically what mustache does it takes you know values and spits them into a string so in this case we're just going to take um our array of people is all we need and for each person we're going to spit that value dot is basically representation of the whole value of what's in the array so for each person we're going to spit out an entire li so that's what's going to go on and we can just go this dot ul we've cached that up here so we don't need to search the dom for that this ul html we're going to render this dot template since we've already stored this dot template and we're going to put the data in there so that should work so let's go ahead and maybe add a startup person maybe will and laura and let's say on init we're going to cache the dom and then we're going to render so we'll kind of render right away let's see if that worked yep we got two people will and laura button does absolutely nothing because we unprogrammed that in so i could also say will and steve and there we go we have will and we have steve excellent so our app is kind of working so far already it's a lot cleaner one thing that's great about modular javascript is you can look at it and each method has a name so you can see what's going on based off the name i know this is initializing the module i clearly know this is caching the dom and i clearly know this is rendering so ideally this is going to be the only thing that ever touches the dom itself everything else talks to this module maybe changes this people array but nothing else actually interacts with the html except for my render method this is very clean so far so i'm liking it so now let's make this render on click on click we want to take the value of our input push it onto this people array and render again so to do that we need to bind some events so let's bind events and if you're if you're new to modular javascript you're probably thinking oh my goodness this is way too much thinking i'm not used to thinking this much when i code yeah well if you're not thinking when you code then that's kind of probably the next step you've learned how to code now let's learn how to think about how we should code and it probably looks very foreign to you because this is new but if you write one or two modules then everyone's going to have a cash dom a bind events a render so this is not exactly crazy this is actually preparing you to learn backbone.js which is very very similar to what i'm doing today so let's do a bind events function i just want to like give you that warning i guess in case you thought i'm crazy and i'm going to make your life miserable and very complicated so as you guess the bind events method is for one thing and one thing only binding events so let's go ahead and see what do we do we're going to on the click on the buttons click event then we are going to add a person so let's go ahead and make this dot input a note button on click and we'll make an add person function that seems like the right name for it so add person there we are because i don't want to actually make a function in here because now this method has several things it's binding an event listener and it's adding a person ah i don't like that add person this is only responsible for binding events so whenever the click goes we're going to add the person over here this is also a very good pattern you usually don't want to write functions directly into an event binding it's just not a good pattern for a lot of reasons and i think that's all it has to happen for now yep so add person let's go ahead and go we need to get the value we're going to push that right there i'll just copy this in so this dot people we're going to push the input value this dot input dot value now there's gonna be a problem right here which i'll show you in a minute um uh this will not work correctly this will actually have some problems so let's go ahead and save this and test it out and we'll see what my problems are let's go to my console looking good let's add a test app error this is not uh it's giving me all these weird things something is not a function okay let's go ahead and find out what's going on here um here's one thing that you got to know with events whenever you're binding an event the context is going to change so this value of ad person is no longer going to be people so if you know everywhere i'm saying this this really refers to people this is people dot cash dom people dot bind events people dot render well when an event fires it sets the this value to be the item that the event was bound on so this will equal the stop button so this will be the value of button inside of add person i can get around that by simply binding it to this and if it's confusing basically just realize when you're doing modular js if you want a method to always run in the context where the this value points to its module then you have to bind it because as soon as it gets called from an event listener from a click event the context of this will change the value of this will change and in our case we don't want the value of this to ever change we want this to always mean the people module so in that case i'm binding it to this this this this i know that's a lot of saying so now it's going to work add person dot find is oh sorry this dot add person there we go test and okay so it's adding it's kind of working uh we are now adding a person to the array and then we want to render let's rerender again so add it to the array rerender let's go ahead check it make sure it works test and we got a new person test2 awesome excellent and you know what else i want to do is i also want to clear the value this dot input dot val equals nothing so once that renders i want to clear the value of my name excellent so that was very easy to do test two so now my name value clears out every time so next up we just gotta delete our stuff so you see we're getting a little bit more code we're definitely getting a few more functions going on but it's extremely clear if i if i know that there's a problem whenever my person gets added uh let's just take this back out i'm not going to clear this value let's say we've had our todo list working for a year and i have to come into it a year later i've forgotten most all the code but my manager says well now i hate how test stays in here this should always clear when i add a person it should be empty so then you just open this coding and say okay on add person oh there we go add person well that's really easy to do you can add in your line of code to add person and you know everything else is separated out and nothing's going to break so that's the biggest reason that modular code is a big win is because it separates out your code i don't have to worry about the module initializing i don't have to worry about the module caching the dom or binding events all that's happening i just want to add one feature to when the person gets added so i only have to worry about this piece of code i don't even have to worry about it rendering or any of that stuff so modular code big big big win so let's go ahead and get this delete event going on right here and then we're done so my delete event is a delegate event on the ul if you don't know about delegation i'm going to add a little bit to my jquery series in there so you can see what delegation really is so this ul is going to delegate to the i delete click so let's go we already have a bind events method going on let's just add one more event this dot ul delegate i delete click let's go ahead and call this delete person so when i class delete gets clicked we're gonna go up to that li we're gonna find out which number we are are we number three we're gonna delete number three from our people list and then we're gonna rerender it's pretty simple so once again let's go ahead and go this dot delete person and let's bind this same thing we gotta make sure we bind that so that was easy we were able to just add one more event and now this method is going to fire when we click on delete person let me see if that works make sure that's going delete hey always fires oh and look it also tells me people splice is not a function oh that's cause i was wondering how that was working all of a sudden that's because i uncommented my code so let me go ahead and comment that code back almost done here last method um so this is this is correct i want to keep this very move this is the one that i want to remove so i'm i'm going up to my closest li so when i click on here i'm going to go up and find my closest li okay that's this i want to remove that um except for i don't actually want to do it like this no no no no more html touching in the other methods this is the guy that touches html this guy does not touch html so you go away i'm just going to call you remove since uh you're still actually you're still a jquery selection so i'll keep you as the dollar signal and then i want to do let's see i want to in ul this dot ul i want to find the lis and i want to get the index of my current li so this is going to find out hey what number am i the guy that got clicked and my number three and my number two um so let's find that i that's the guy i want to remove and then this dot people let's splice it straight out and let's render again so basically everybody's just calling render the only boot up we're going to render when we add a person we're going to render when we delete a person we're going to render so here we go let's see if it works will goes away app e is not defined that's because i didn't add e in there that's my event so if i want to call it that it's a little clearer for people who are not sure exactly what's going on let's reload it there we go there we go all gone and my module is working so this is a module this is kind of how you do modular javascript and in the next video whenever that comes out i'll show you kind of how to do a revealing module pattern so we only have maybe a few things i don't really i don't really want to expose cache dom bind events i don't really want to expose all these to an api but it would be cool to do add person delete person let me go ahead and get rid of this let me make this global again this ver people so now i kind of have this api here i can go people.ad person so maybe another part of the program up here wants to add a person to my list well i can add a new person there we go i added a person to the list except for that didn't really work because i actually have to send it a value let's go and do something like this let's go value or so if a value is passed in we'll actually do that if not we'll look it up from the input that's pretty easy so i have this api going uh it's called people add person there we go we added laura and now laura can still go away so that's kind of cool i can add add a bunch of people so now a module up here could actually talk to my other module um but i don't want them to be able to call cash dom i don't want them to be able to call bind events i really just want them to be able to call i don't i don't want them to call render either i really just want them to be able to call these two events so in the next video we'll get into a revealing module pattern where we only allow people to have access to these two and all the rest is internal because once again people can hack this as well they could go people. people which is the array and they could push something on there themselves oh that's a bad pattern god uh but it didn't render oh crud so now what happens so now i delete lore and all of a sudden god shows up so that's that's not a good pattern uh for people to be able to automatically talk to to the pieces on my module so again next up revealing module pattern i'm gonna stop yapping for now
