With timestamps:

00:00 - now that we can fetch our friends from
00:02 - our restful api let's go ahead and add
00:04 - some more code so we can actually edit
00:06 - those friends delete those friends and
00:08 - learn some more about view along the way
00:10 - so the first thing we'll do it'll
00:12 - probably the easiest let's go and delete
00:14 - a friend now so instead of just spinning
00:16 - out the friend's name let's go ahead and
00:19 - actually had a button as well with an X
00:21 - on it and while we click that button we
00:25 - want to delete a friend we're going to
00:34 - delete friend and we can actually do is
00:36 - we can actually pass in that friend's ID
00:40 - which is going to be super helpful so we
00:43 - can delete that friend so let's go and
00:44 - make a method
00:49 - so we're going to delete that friend by
00:52 - ID we can use this fetch API just the
00:55 - same we're going to fetch friends / this
01:00 - time plus ID so we're gonna send a
01:03 - delete request to view five friends ID
01:05 - and we're gonna also pass over some
01:08 - headers and some more information here
01:09 - so let's actually the method will be
01:13 - delete and that's about all we need to
01:16 - pass and we're just sending a delete
01:17 - request over this object here with the
01:20 - second argument in the fetch API is
01:22 - configuration so we can pass in a method
01:24 - we can pass in headers and all that we
01:27 - won't need to parse that response at all
01:29 - basically we're just going to delete our
01:32 - friend and then console.log deleted so
01:42 - let's see load up our friends yep and
01:45 - delete it so he didn't go off the list
01:47 - we'll address this in a second but if i
01:49 - refresh will is now gone and if i
01:53 - refresh willis is now gone excellent so
01:55 - that made it pretty easy so let's go
01:57 - ahead and also we want to delete them
02:00 - from our friends list by index so let's
02:03 - say we have a friend here let me go
02:05 - ahead and post some friends back here
02:08 - we're going to want to actually pull
02:10 - them out of friends list when that
02:12 - delete is successful and we can easily
02:14 - do this by just splicing them out of
02:16 - that array so we'll splice out either 0
02:18 - 1 or 2 so what we can do is in this
02:21 - repeater we can just do comma I and
02:24 - we'll also get the I variable which is
02:26 - the index of that friend we can pass
02:28 - that in that makes it super easy to do
02:30 - we have their index and their ID I can
02:34 - just go this dot friends splice that and
02:39 - we're just gonna splice one person out
02:41 - and since it's all reactive when we
02:43 - splice that person out of the array the
02:45 - whole components going to reload and
02:47 - it's going to be super easy
02:50 - William gone willis gone william gone
02:53 - and if i refresh yep my friends are gone
02:56 - if I reload this endpoint yep my friends
02:59 - are gone so now that's working all we
03:01 - have to do is
03:01 - an edit feature and our friends adarand
03:04 - editor is 100% complete so an edit is
03:08 - going to be a slightly different
03:09 - scenario we're probably going to want an
03:13 - edit mode here to wear for editing we
03:16 - see an input field and a button to save
03:18 - and if we're not editing then we just
03:21 - see their name as is right now view
03:23 - gives us some directives that make that
03:25 - kind of logic really easy the V if and
03:28 - the VL so I can go a div here V if so if
03:32 - we're editing I'll address that in a
03:34 - minute then we display what's in that
03:36 - div the else then will display the I'm
03:42 - not editing mode so let's say if let's
03:47 - make something up here called edit
03:48 - friend edit friend up there so if edit
03:54 - friend equals friend ID so for editing
04:01 - our current friend's ID then we're going
04:04 - to display this stuff in here so we can
04:05 - do an input friend name and then a Save
04:11 - button and we'll make this V on click
04:14 - update friend
04:15 - we'll just passing the whole friend so
04:18 - if we're going to update a friend
04:21 - that'll be how we do it let's go ahead
04:23 - and now make an update friend method
04:27 - so if we want to update our friend this
04:28 - will actually be a put request we're
04:31 - gonna actually pass some information
04:32 - over so we need headers
04:36 - we're going to send over the application
04:38 - JSON content type and then we're also
04:40 - going to need some data so we're going
04:42 - to need to put over a request body which
04:46 - will be just our friend that's been json
04:48 - stringify so there we go our fetch
04:51 - requests got a little bit more
04:52 - complicated we are going to send a put
04:55 - request to friend plus ID and we're
04:58 - going to send over our friend's
04:59 - information and then we're also going to
05:02 - send over the content type that should
05:03 - be just fine
05:04 - and when that's done we're gonna say hey
05:06 - we're no longer attending our friend so
05:09 - we're no longer editing any friends one
05:11 - more thing we're going to need down here
05:12 - is we're going to need an edit button
05:15 - let's go ahead and make an edit button
05:19 - and there's no need to create a method
05:21 - and call a method we're just gonna go
05:23 - edit friend equals this or friend ID so
05:28 - we're just going to really quickly just
05:29 - run some logic right there in that
05:31 - button when you click on it edit friend
05:32 - equals friend ID let's check to make
05:35 - sure that works
05:38 - edit yep that goes into edit mode and
05:40 - that switches that it mode out nice
05:42 - let's go change it to will
05:45 - I am save it uh-oh ID is not defined
05:51 - let's go check that out I know what I
05:54 - did wrong there there's no such thing as
05:56 - ID here I need to call it friend dot ID
05:59 - because I'm actually passing in the
06:01 - entire friend object there we should be
06:04 - good now let's check it out edit save it
06:09 - and it looks like it worked let's
06:12 - refresh and see if it worked
06:13 - it worked excellent so we can now delete
06:16 - friends we can edit friends that all we
06:19 - need to do is learn how to create
06:20 - friends before I do that it's getting a
06:23 - little annoying to have to click this
06:24 - button I want to be able to do a key
06:27 - press that button click is so circa 2005
06:30 - so let's go ahead say V on key up and
06:36 - you can automatically do dot 13 here
06:40 - which is super awesome so key press 13
06:42 - is obviously the enter key so whenever
06:44 - the enter key gets it update friend and
06:49 - now I can simply hit enter when I'm
06:51 - updating friends much much nicer so
06:54 - that's really easy view just makes
06:57 - things simple it just makes them fast
06:59 - little things like this dot 13 make it
07:02 - really easy to just get your job done
07:03 - and get home early in the day so all we
07:06 - need to do now is just make the ability
07:08 - to create a friend we simply would do a
07:10 - post request instead of a put request to
07:13 - that exact same endpoint but I'll leave
07:15 - that out of here cuz that's just
07:16 - information you don't need at this point
07:18 - have fun that's your homework add in
07:20 - here the ability to create a friend
07:22 - yourself and that's how easy it is to
07:24 - work with dynamic data in view

Cleaned transcript:

now that we can fetch our friends from our restful api let's go ahead and add some more code so we can actually edit those friends delete those friends and learn some more about view along the way so the first thing we'll do it'll probably the easiest let's go and delete a friend now so instead of just spinning out the friend's name let's go ahead and actually had a button as well with an X on it and while we click that button we want to delete a friend we're going to delete friend and we can actually do is we can actually pass in that friend's ID which is going to be super helpful so we can delete that friend so let's go and make a method so we're going to delete that friend by ID we can use this fetch API just the same we're going to fetch friends / this time plus ID so we're gonna send a delete request to view five friends ID and we're gonna also pass over some headers and some more information here so let's actually the method will be delete and that's about all we need to pass and we're just sending a delete request over this object here with the second argument in the fetch API is configuration so we can pass in a method we can pass in headers and all that we won't need to parse that response at all basically we're just going to delete our friend and then console.log deleted so let's see load up our friends yep and delete it so he didn't go off the list we'll address this in a second but if i refresh will is now gone and if i refresh willis is now gone excellent so that made it pretty easy so let's go ahead and also we want to delete them from our friends list by index so let's say we have a friend here let me go ahead and post some friends back here we're going to want to actually pull them out of friends list when that delete is successful and we can easily do this by just splicing them out of that array so we'll splice out either 0 1 or 2 so what we can do is in this repeater we can just do comma I and we'll also get the I variable which is the index of that friend we can pass that in that makes it super easy to do we have their index and their ID I can just go this dot friends splice that and we're just gonna splice one person out and since it's all reactive when we splice that person out of the array the whole components going to reload and it's going to be super easy William gone willis gone william gone and if i refresh yep my friends are gone if I reload this endpoint yep my friends are gone so now that's working all we have to do is an edit feature and our friends adarand editor is 100% complete so an edit is going to be a slightly different scenario we're probably going to want an edit mode here to wear for editing we see an input field and a button to save and if we're not editing then we just see their name as is right now view gives us some directives that make that kind of logic really easy the V if and the VL so I can go a div here V if so if we're editing I'll address that in a minute then we display what's in that div the else then will display the I'm not editing mode so let's say if let's make something up here called edit friend edit friend up there so if edit friend equals friend ID so for editing our current friend's ID then we're going to display this stuff in here so we can do an input friend name and then a Save button and we'll make this V on click update friend we'll just passing the whole friend so if we're going to update a friend that'll be how we do it let's go ahead and now make an update friend method so if we want to update our friend this will actually be a put request we're gonna actually pass some information over so we need headers we're going to send over the application JSON content type and then we're also going to need some data so we're going to need to put over a request body which will be just our friend that's been json stringify so there we go our fetch requests got a little bit more complicated we are going to send a put request to friend plus ID and we're going to send over our friend's information and then we're also going to send over the content type that should be just fine and when that's done we're gonna say hey we're no longer attending our friend so we're no longer editing any friends one more thing we're going to need down here is we're going to need an edit button let's go ahead and make an edit button and there's no need to create a method and call a method we're just gonna go edit friend equals this or friend ID so we're just going to really quickly just run some logic right there in that button when you click on it edit friend equals friend ID let's check to make sure that works edit yep that goes into edit mode and that switches that it mode out nice let's go change it to will I am save it uhoh ID is not defined let's go check that out I know what I did wrong there there's no such thing as ID here I need to call it friend dot ID because I'm actually passing in the entire friend object there we should be good now let's check it out edit save it and it looks like it worked let's refresh and see if it worked it worked excellent so we can now delete friends we can edit friends that all we need to do is learn how to create friends before I do that it's getting a little annoying to have to click this button I want to be able to do a key press that button click is so circa 2005 so let's go ahead say V on key up and you can automatically do dot 13 here which is super awesome so key press 13 is obviously the enter key so whenever the enter key gets it update friend and now I can simply hit enter when I'm updating friends much much nicer so that's really easy view just makes things simple it just makes them fast little things like this dot 13 make it really easy to just get your job done and get home early in the day so all we need to do now is just make the ability to create a friend we simply would do a post request instead of a put request to that exact same endpoint but I'll leave that out of here cuz that's just information you don't need at this point have fun that's your homework add in here the ability to create a friend yourself and that's how easy it is to work with dynamic data in view
