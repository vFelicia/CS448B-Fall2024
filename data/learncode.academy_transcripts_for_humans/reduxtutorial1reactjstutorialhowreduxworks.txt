With timestamps:

00:00 - all right let's learn Redux Redux is
00:02 - great because it changes the flux
00:04 - framework and provides some ways that
00:06 - really help you avoid a lot of
00:08 - complicated bugs that can end up in a
00:10 - flux like application at first this
00:13 - seems really strange because it does a
00:14 - few things very very differently um and
00:17 - they don't seem to be advantages at
00:18 - first but I promise if you have more of
00:20 - a complex application um it's going to
00:22 - be worth the time it takes to set up
00:24 - Redux at first so kind of if you're
00:26 - starting with react and you're just
00:27 - building a small component just use
00:29 - react keep all your data in a state on
00:32 - your maybe layout level component if
00:35 - you're going to be building more of an
00:36 - application use flux flux sets up very
00:39 - quickly and it's really stable in a lot
00:41 - of ways when you start getting into
00:43 - complicated data scenarios complicated
00:46 - chains of events that's when you need to
00:48 - go to Redux because it's really going to
00:50 - simplify your application and the time
00:52 - it takes to set up Redux which is more
00:53 - than flux it's a little more frustrating
00:55 - I'm going to be honest uh but the time
00:57 - it takes to get Redux set up is really
00:59 - going to pay off over the lifespan of
01:01 - the application so let's kind of look at
01:03 - how Redux does things I'm going to take
01:04 - a few minutes just to talk about it in
01:06 - this video and I promise it's going to
01:08 - be time that you save in the long run
01:10 - because if you understand Redux going in
01:12 - it makes it a lot easier to get up to
01:14 - Pace with it so the biggest thing they
01:16 - change is really over here the reducers
01:19 - and the one store we'll start with the
01:20 - one store so you don't have multiple
01:22 - stores with Redux you have one big store
01:25 - and instead of multiple stores you have
01:27 - multiple properties on that one big
01:29 - JavaScript object so whereas in our
01:32 - prior application we would have a to-do
01:33 - list store we would have a settings
01:36 - store and then we'd have maybe a
01:37 - favorites store um in Redux we would
01:40 - just have one big JavaScript object and
01:42 - that's our store and it would have three
01:44 - properties it would have a to-do list
01:45 - property it would have a settings
01:47 - property and it would have a favorites
01:49 - property so it's kind of multiple stores
01:52 - and it behaves like multiple stores but
01:54 - you keep it all in one giant JavaScript
01:56 - object that we never mutate and we never
01:58 - change we never actually change this
02:01 - object we only create new versions of
02:03 - this object that way we always have a
02:06 - full history way back from the time our
02:08 - first our app booted up in the browser
02:11 - to wherever you end up you have a full
02:12 - history of the exact state of your
02:15 - application every step along the way
02:17 - every change along the way and we'll get
02:19 - into that a little bit more but the key
02:21 - thing is the store is immutable you
02:24 - cannot mutate any value on the store you
02:26 - only ever create a brand new store
02:30 - object um so I'll do a video on
02:32 - immutability in JavaScript CU JavaScript
02:34 - really doesn't do immutability
02:36 - natively um it doesn't do it very well
02:38 - anyway so we'll kind of get into
02:40 - immutability in another video if you
02:42 - don't really know what that is so you've
02:44 - got your one store and then you're going
02:46 - to wrap your entire application your
02:48 - entire react application all their
02:50 - components you're going to wrap them
02:51 - with one provider component so if your
02:54 - normal your base uh component is a
02:56 - layout then your base component will be
02:58 - a provider component in Redux that's
03:00 - really the only big change you make to
03:02 - your components um and that that
03:05 - provider component when the store
03:06 - changes it reenders your whole
03:08 - application every single time no matter
03:10 - how many changes there are always
03:11 - renders the whole application which is
03:13 - we've already established react does
03:15 - very well due to Virtual Dom so you've
03:18 - got your provider component listening to
03:20 - the store and then the only thing that
03:22 - changes in the components area is you've
03:25 - got smart components and dumb components
03:26 - and this is really just good react
03:28 - architecture anyway
03:31 - um but you've got these react you've got
03:33 - these smart components and they're the
03:35 - top level like page level some people
03:38 - call them Pages some people call them
03:40 - containers and put them a containers in
03:41 - a containers folder uh but they're smart
03:43 - components they're aware of your
03:45 - framework they know how to pull a
03:48 - property off of your store say the
03:50 - to-dos list piece of that store um and
03:53 - they will take the to-dos list and
03:54 - they'll inject that array of to-dos into
03:57 - all the child properties so you've got
03:59 - your dumb components like your to-do
04:00 - list component and all it knows is give
04:03 - me a list of to-dos it's an array and
04:04 - I'll spit out a to-do list for you I
04:07 - don't care if you're using Redux if
04:09 - you're using flux if you're using relay
04:11 - you give me a list of to-dos and I'm
04:13 - going to spit out a to-do list for you
04:15 - so your smart components again are the
04:16 - only things that are aware of
04:18 - Redux and then they pass they strip the
04:21 - data off of the store and pass it
04:23 - through um and then these components
04:25 - trigger actions and that's the part
04:27 - that's the most like flux they dispatch
04:29 - actions and those actions can dispatch
04:31 - other actions in our flux example um an
04:34 - asynchronous action might dispatch a
04:37 - fetch data action and then when the data
04:39 - comes in from the from the Ajax call
04:42 - it's going to dispatch a receive data
04:44 - action and it's got a payload of all the
04:46 - data or if that errors out it might
04:48 - dispatch a fetch data error action and
04:51 - the payload would be the error message
04:53 - so actions work a lot like flux no real
04:56 - big change there and the reducers is the
04:58 - other big piece that changes so instead
05:01 - of having multiple stores that all
05:03 - manage their own data you have multiple
05:06 - reducers that all modify the a piece of
05:10 - data off of the store but they modify it
05:13 - in an immutable way they always create
05:15 - new chunk of data to go back on the
05:17 - store and we'll cover that again in the
05:19 - immutable video so instead of having
05:21 - those three stores you have three
05:22 - reducers um one reducer will probably
05:24 - work off the to-do list portion of the
05:27 - store one reducer will work off the
05:29 - setting portion of the store and one
05:31 - reducer will work off of the favorites
05:33 - portion of the store the favorites
05:35 - property and what's cool is is they can
05:37 - all react off the same action let's say
05:40 - you're in the settings view over here
05:42 - and you click on the button that says
05:44 - don't show completed or hide completed
05:47 - because it's a to-do list so then we
05:49 - trigger the hide completed action and
05:51 - then all three reducers probably care
05:53 - about that the settings reducer cares
05:55 - because we need to turn hide completed
05:57 - to true so that way that button will
06:00 - toggle in The View on the next render um
06:02 - and then the to-do list reducer cares
06:05 - because we want to now filter out the
06:08 - visible uh we want to set uh visible to
06:10 - false on all the ones that are completed
06:13 - and then on the the favorites view will
06:16 - probably do the same thing all the ones
06:17 - that are completed are also visible
06:19 - false so then all of those act all at
06:21 - once blah blah blah none of them depend
06:23 - on each other because they're not
06:24 - talking to the same pieces of data they
06:27 - simply all make their changes the Store
06:29 - updates the component rerenders the
06:32 - entire application there's no wait for
06:34 - going on uh because they all act on
06:36 - completely different sets of data so
06:39 - that's kind of Redux in a nutshell
06:40 - that's kind of how Redux Works um and
06:43 - some key benefits that Redux really
06:46 - provides is it's a really simplified
06:48 - data because there's one store uh that's
06:51 - pretty much it all your data comes from
06:53 - this one thing there's really most of
06:55 - these racing conditions you would end up
06:57 - with are out of the picture now every of
07:00 - any kind means a complete application
07:02 - rerender and because of that we also get
07:04 - to do time travel history that store is
07:07 - going to keep a complete list of all the
07:09 - store States all throughout time State
07:12 - one state two we made a change we made a
07:14 - change and if at any point in time you
07:16 - want to roll back your application while
07:18 - you're debugging uh you simply say hey
07:20 - let's render this one right here boom
07:22 - and then the provider component can
07:23 - render the application in the exact
07:26 - state it was in there um you can travel
07:28 - back even further let's render this
07:30 - piece of the store State and as long as
07:32 - you did a good job coding and you never
07:34 - changed your actual object but you
07:36 - always created a new one that's going to
07:38 - work flawlessly that's going to work
07:40 - very well so that's Redux in a nutshell
07:43 - that's going to help you understand it a
07:44 - lot more as we get into the code I'm
07:46 - going to go put together an immutability
07:48 - in JavaScript video for those of you
07:49 - guys who don't know what that is and
07:51 - then we'll get into coding Redux

Cleaned transcript:

all right let's learn Redux Redux is great because it changes the flux framework and provides some ways that really help you avoid a lot of complicated bugs that can end up in a flux like application at first this seems really strange because it does a few things very very differently um and they don't seem to be advantages at first but I promise if you have more of a complex application um it's going to be worth the time it takes to set up Redux at first so kind of if you're starting with react and you're just building a small component just use react keep all your data in a state on your maybe layout level component if you're going to be building more of an application use flux flux sets up very quickly and it's really stable in a lot of ways when you start getting into complicated data scenarios complicated chains of events that's when you need to go to Redux because it's really going to simplify your application and the time it takes to set up Redux which is more than flux it's a little more frustrating I'm going to be honest uh but the time it takes to get Redux set up is really going to pay off over the lifespan of the application so let's kind of look at how Redux does things I'm going to take a few minutes just to talk about it in this video and I promise it's going to be time that you save in the long run because if you understand Redux going in it makes it a lot easier to get up to Pace with it so the biggest thing they change is really over here the reducers and the one store we'll start with the one store so you don't have multiple stores with Redux you have one big store and instead of multiple stores you have multiple properties on that one big JavaScript object so whereas in our prior application we would have a todo list store we would have a settings store and then we'd have maybe a favorites store um in Redux we would just have one big JavaScript object and that's our store and it would have three properties it would have a todo list property it would have a settings property and it would have a favorites property so it's kind of multiple stores and it behaves like multiple stores but you keep it all in one giant JavaScript object that we never mutate and we never change we never actually change this object we only create new versions of this object that way we always have a full history way back from the time our first our app booted up in the browser to wherever you end up you have a full history of the exact state of your application every step along the way every change along the way and we'll get into that a little bit more but the key thing is the store is immutable you cannot mutate any value on the store you only ever create a brand new store object um so I'll do a video on immutability in JavaScript CU JavaScript really doesn't do immutability natively um it doesn't do it very well anyway so we'll kind of get into immutability in another video if you don't really know what that is so you've got your one store and then you're going to wrap your entire application your entire react application all their components you're going to wrap them with one provider component so if your normal your base uh component is a layout then your base component will be a provider component in Redux that's really the only big change you make to your components um and that that provider component when the store changes it reenders your whole application every single time no matter how many changes there are always renders the whole application which is we've already established react does very well due to Virtual Dom so you've got your provider component listening to the store and then the only thing that changes in the components area is you've got smart components and dumb components and this is really just good react architecture anyway um but you've got these react you've got these smart components and they're the top level like page level some people call them Pages some people call them containers and put them a containers in a containers folder uh but they're smart components they're aware of your framework they know how to pull a property off of your store say the todos list piece of that store um and they will take the todos list and they'll inject that array of todos into all the child properties so you've got your dumb components like your todo list component and all it knows is give me a list of todos it's an array and I'll spit out a todo list for you I don't care if you're using Redux if you're using flux if you're using relay you give me a list of todos and I'm going to spit out a todo list for you so your smart components again are the only things that are aware of Redux and then they pass they strip the data off of the store and pass it through um and then these components trigger actions and that's the part that's the most like flux they dispatch actions and those actions can dispatch other actions in our flux example um an asynchronous action might dispatch a fetch data action and then when the data comes in from the from the Ajax call it's going to dispatch a receive data action and it's got a payload of all the data or if that errors out it might dispatch a fetch data error action and the payload would be the error message so actions work a lot like flux no real big change there and the reducers is the other big piece that changes so instead of having multiple stores that all manage their own data you have multiple reducers that all modify the a piece of data off of the store but they modify it in an immutable way they always create new chunk of data to go back on the store and we'll cover that again in the immutable video so instead of having those three stores you have three reducers um one reducer will probably work off the todo list portion of the store one reducer will work off the setting portion of the store and one reducer will work off of the favorites portion of the store the favorites property and what's cool is is they can all react off the same action let's say you're in the settings view over here and you click on the button that says don't show completed or hide completed because it's a todo list so then we trigger the hide completed action and then all three reducers probably care about that the settings reducer cares because we need to turn hide completed to true so that way that button will toggle in The View on the next render um and then the todo list reducer cares because we want to now filter out the visible uh we want to set uh visible to false on all the ones that are completed and then on the the favorites view will probably do the same thing all the ones that are completed are also visible false so then all of those act all at once blah blah blah none of them depend on each other because they're not talking to the same pieces of data they simply all make their changes the Store updates the component rerenders the entire application there's no wait for going on uh because they all act on completely different sets of data so that's kind of Redux in a nutshell that's kind of how Redux Works um and some key benefits that Redux really provides is it's a really simplified data because there's one store uh that's pretty much it all your data comes from this one thing there's really most of these racing conditions you would end up with are out of the picture now every of any kind means a complete application rerender and because of that we also get to do time travel history that store is going to keep a complete list of all the store States all throughout time State one state two we made a change we made a change and if at any point in time you want to roll back your application while you're debugging uh you simply say hey let's render this one right here boom and then the provider component can render the application in the exact state it was in there um you can travel back even further let's render this piece of the store State and as long as you did a good job coding and you never changed your actual object but you always created a new one that's going to work flawlessly that's going to work very well so that's Redux in a nutshell that's going to help you understand it a lot more as we get into the code I'm going to go put together an immutability in JavaScript video for those of you guys who don't know what that is and then we'll get into coding Redux
