hi and welcome to lesson seven so far you've learned some basic Swift code and how to organize that code into executable blocks called the functions well in this video you're going to learn how to organize and group your functions into what's known as classes now before we go on I just want to say one thing and that is that learning something new is hard seriously I know firsthand because I fail that learning iOS programming when I first started so give yourself a pat on the back for coming this far especially if you've never coded before now I know you might be asking yourself constants variables functions why the heck do I need to know any of this well I can guarantee you that after this lesson and into the next all the pieces are going to start to fall into place for you because we're going to move back to our Xcode project and I'm going to point out all the different pieces that you've been learning about in the last three lessons and you're going to have a Eureka moment you're going to see that Xcode project in a different light so I want you to pay extra careful attention in this lesson because it's the last one before we move back to our work hard game Xcode project all right let's do this so on the screen I've got two functions right now they don't really do anything but one is called cruise and one is called thrust so let me explain why imagine yourself as an engineer for NASA and you're writing the code to power one of their rockets now all of the code for cruising you would put inside the crease function and all of the code that are going to turn on the rocket thrusters you're going to put inside the thrust function now just like how you organize that code into those functions you can further organize these two functions into a class because potentially you could have many many functions right so a class you can use it to group together functions that kind of serve the same purpose or the same goal so let me show you how to declare a class first of all use the class keyword and then you would give the class a name so I'm gonna call this rocket now I'm gonna call it spaceship just because I like that word a little more now you open up a pair of curly brackets and I am going to put some space inside the curly brackets and I'm going to highlight these two functions and press command X to cut them and I'm going to press command V and they're to paste it so what we have now is kind of like three levels of organization right at the top level we have the spaceship class inside the spaceship class we have two functions cruising thrust and inside each of those functions we have the code to essentially carry out those abilities now there's one distinction I want to make and that is that when you move the function into a class those functions are now called a method of that class so I know it's a little confusing because nothing's changed except what you call them right when when there's a standalone thing they're called functions but when you put these functions inside a class they are now called methods of that class but it's sort of interchangeable if you say you know the crues function of the spaceship class people will still understand what you're saying but I just want you to know that the correct terminology is that Cruz is a method of spaceship all right just a little distinction there let's illustrate this in the diagram first we had functions and then we put them inside of a class and now they're called methods I want to talk about variable scope for a second in the last lesson you learned that declaring a variable inside of a function it only exists within that functions scope so for instance if we declared a variable called name in function a we can't access that named variable in function beat because function B has its own scope the same goes for the reverse if we declare a variable in function B we can't access it in function a because that variable would only exist in function B's scope now get this the class itself has its own class scope you can actually declare a variable inside the class but sits outside of any particular function now this variable exists inside the entire scope of this class since function a and function B are also inside the scope of this class they can actually access the variable finally here's the kicker when you declare a variable inside the class but it's outside of any functions like what we've done here it's actually called a property of that class now let's see this in action so let's go ahead and declare a property of our spaceship here now it's going to be inside of the class right that's the starting curly bracket but it's going to be outside of any of these two functions so I'm gonna put it up here I'm going to call it a fuel level and I'm going to assign a hundred to it now this fuel level property is inside the scope of the class just like how these two functions are also inside the scope of the class so I can actually access the fuel level property from here see I can print it out now it's not going to actually print anything because we need to execute these functions and we're gonna do that a little later on but just from the fact that actually you know let me run it just to show you that the playground isn't going to throw any sort of errors right so it can access this property however let me declare a variable in here let's just say bar test is equal to true and make it boolean right this variable because it's declared within the Cruz function it only exists inside the scope of that function you know that little bubble so I cannot access it from here let's say print test and you're going to see that Xcode is going to throw an error let's run that so it's saying that it cannot find test because it only exists within this scope so now let's go ahead and erase this test code here and like I said before if the scope thing is a little bit confusing it's going to come with time I promise you that as you're gonna write more code you're gonna understand this stuff a lot more there's gonna come a point where these things finally just like click for you all right now we're going to take a giant leap and I'll explain to you how classes are used now it's going to require a little bit of abstract thinking I also want to add that in my six years of teaching Iowa's app development this is the single hardest concept to understand for beginners who have never coded before but once you understand this then you will have crossed the biggest hump that so many people give up that all right I'm done talking let's do this now let's use the same analogy so we used before suppose we have some data and we have variables in constants as sticky caps now we have functions that encapsulate these pieces of code and let's say that functions are like file folders now we have classes that contain a bunch of functions and variables and let's say that class is a file box that contains file folders well at the end of the day what we have is just a file box full of instructions it doesn't actually do anything some people say let's think of the class like a recipe some people say let's think of the class like a blueprint though what's the common thing here they all need someone or something to turn this set of instructions into action someone to take those recipes and turn it into a cake or someone to take the blueprints and build a rocket ship now this rocket will work exactly like it was designed to it can thrust and it can cruise because we've given it functions to do so but understand that that class doesn't thrust or cruise it's the actual object that gets created from the class that will thrust their crews furthermore once you have a blueprint you can make multiple spaceships each of them will have its own fuel level and ability to thrust or cruise the blueprint is called a class and the object that are created are called objects or instances of the spaceship class all right so who's the person that will take that class and turn it into an object well that's the device in your hand it's a mini computer you write your instructions in Xcode Xcode will turn it into a format that can be understood by your device and your device carries out those instructions so here's the tricky part you need to write instructions to tell the computer to take your classes and to turn them into objects and furthermore you need to write instructions to tell the computer how you want it to use those objects for example you write instructions like when the user taps the lift off button then you create an object from the spaceship class then called a thrust function of that object then called a cruise function of that object you know that could be an app right there now let's go back to our playground and see how you can write instructions like this all right so you just learned that a class with its properties and methods they don't actually do anything until you bring it to life by turning it into an object or an instance of that class so essentially when you're writing this code and organizing your code into functions and organizing your functions into classes you're really designing something right you're programming something to be turned into an object to be used so before we create a spaceship object from this class I want to first add another property and some code to the cruise and thrust functions so that they actually do something so up here right below this property I'm going to declare another name property and I'm going to assign it an empty string so you can actually do that it's a string but with nothing inside but essentially it sets the datatype for this name property and inside the cruise function here essentially I want to print out a statement but I want to include the name so I'm gonna say cruisin is initiated for and then I'm going to insert the name remember how we do this you learn about this a couple lessons ago I believe or last lesson backslash and then rounded brackets and you put in the variable name and it's gonna insert that into the string so we're gonna do thrust as well so we're gonna say is let's say rocket thrusters initiated for name alright so now we can bring this spaceship class to life by creating a spaceship object from it or in other words an instance of the spaceship class and the way we do that is we basically type in the name of the class followed by two rounded brackets so let's start doing that and you'll notice that autocomplete shows us you just press ENTER and then you can go ahead and put two rounded brackets like that now that kind of looks like a function call right and just like a function call with a return value how it returns something and you need to capture it using a variable or a constant the same thing is happening right here by writing this line of code you're creating a new spaceship object and it's being returned to you so you need to keep track of that data using a constant or a variable we're gonna use a variable because I want to show you how we're gonna try assigning something else to this variable alright anyways I'm gonna call it my ship and it's going to keep track of that spaceship object that we just created I want to show you something interesting why don't we try assigning another type of data to my ship for example in integer 10 well you'll see that we can't assign an integer to this variable because this variable is of the data type spaceship well what do you mean we went through some data types in lesson 5 remember string bull in float double well as it turns out when you create a new class this is now a custom data type so spaceship is actually a data type so what you've done here with this line is that you've said my ship is a variable that can only keep track of data that is of the spaceship data type so essentially that's what's really happening here you're declaring a my ship variable that is going to keep track of spaceship datatype and you're assigning a new object to this variable so I just wanted you to know that so that it doesn't get confusing otherwise now the next thing I want to show you is how do we access the properties and methods of the newly created spaceship object well we have a reference to that newly created spaceship object from this variable my ship and if you've never heard of that terminology before a reference is essentially what your variable or constant is it's keeping a reference or keeping track of a piece of data which in this case is the spaceship object so my ship is a reference to that spaceship object alright so all we do is we type in your variable name or your constant name or you know whatever has the reference to that object press dot and this is called dot notation this is how we are going to access the methods and properties of that object as you can see autocomplete pops at this menu and we can you know we can access the name the fuel level the cruise and the thrust functions and you know when you get more advanced with Swift there are actually ways to restrict what can be accessed but that's for the for later for the future for now I want to set its name so I'm gonna call I'm gonna access the name property and I can actually say that this name property should keep track of a new piece of data I'm going to call this ship Tom all right so I'm assigning the string Tom to the property name for that object my ship and next I'm going to call using dot notation the cruise function and when I run this code you can see cruising is initiated for Tom but had I not set this line remember I'm going to use a comment here we talked about comments in lesson 5 that essentially turns this line of code off and treats it as a note or a remark so I'm going to turn that line off and then I'm going to run the code again and you can see cruising is initiated for empty string nothing ok so that's kind of cool we could also call my ship dot thrust and we can run that and you can see there goes I can also just access the properties I don't have to be assigning things to it so for example let's erase these two lines and say let's print out my ship dot name and let's print out my ship dot fuel level so let's run that you can see it's Tom and 100 I like to think that coding an app is like writing a script for movie the movie script is your app code the character roles are the classes that you've designed but character roles themselves don't do anything these roles need to be turned into physical actors and actresses just like we need to turn classes into objects then the actors and actresses follow the script to perform your movie just like how your objects work together to make your app function so all of this stuff is pretty abstract but in the next lesson we're going to put it into practice but first let's do a quick recap of what we learned in this lesson because it was quite a bit now classes contain methods and properties and remember methods are just another name for functions you also learn that classes by themselves don't do anything they need to be turned into objects first these objects are also referred to as instances of that class so remember a class is kind of like a blueprint and the object is what's created from that blueprint you learn how to create a new instance of the class and you also learn about dot notation which is used to access the methods and properties of that object now if you need to I recommend to rewatch this video and ask any questions you have in the discussion area below I also have a worksheet for you to practice and to solidify these concepts in your head and if things are still a little fuzzy and it's completely normal if they are I highly recommend for you to download this worksheet and go through it now in the next lesson we're going to use your newly minted Swift skills to bring the war card game to life now if you're excited about that like I am type in ton pumped into the discussion area below now if you liked this video please hit that subscribe button down below and click on that bells notification icon if you don't want to miss the next lesson alright so click on the lesson 8 thumbnail and I'll see you there