hey coders how's it going Chris here and today I wanted to introduce you guys to a library called snap kit and snap kit is an auto layout DSL so DSL stands for domainspecific language and basically it's like a mini language to describe Auto layout we don't know what Auto layout is I suggest that you check out this video here in the corner if you click it it's gonna open up a new window where I describe what Auto layout is but it's a system for laying out your elements and describing how they're sized and how they're positioned relative to the other elements on the view as with most things there's more than one way to add Auto layout constraints to your element and constraint is just a word to describe an auto layout rule so you can either add Auto layout constraints through your storyboard to your element or you can add auto layout constraints programmatically now the issue is when you do it programmatically there's actually a lot of code to type out just for a single auto layout constraint and I'm gonna show you guys what that looks like but using snap kit it makes describing those constraints through code a lot easier a lot more straightforward and a lot shorter so you can see kind of an example of this right here so for a box which I assume is some sort of element up here at the UI view and if they wanted to make the height 50 they would just do with oh this is both the width and the height is equal to 50 and here it's changing center of that box equal to the center of the view itself just with two simple lines he's able to describe the size and the position of that box let's go ahead and install snap kit for an Xcode project and I'll show you guys what it's all about so snap kit actually is unique in that it has its own little website for its documentation so I'm gonna click that and go to snap kit I owe and then we're going to do a cocoa pod install of this library by following these instructions here and if you don't know what cocoa pods is you can see here it's a dependency manager for cocoa projects and it just helps you manage the different thirdparty libraries that you're using your Xcode project check out the video in the upper right hand corner for a short setup video which shows you how to install google pods and get up and running with it so click that and open in a new link okay with that said let's start our Xcode project I'm gonna start a brand new single view application create new Xcode project single view application I'm going to call this a snap kit demo make sure that the language is Swift and the device is iPhone and it doesn't matter what you check off for those three options and we're going to save it on the desktop and now we're going to actually close the project because we're going to create a pod file for it I'm gonna hit command spacebar to open up spotlight type in terminal to open up terminal and here I'm going to type in PWD to check out what directory path I'm at and because I saved my project on the desktop and here the directories in my home folder I'm going to go into my desktop folder those are the files and folders on my desktop I'm going to go into the snap kit demo remember if you have a space in your folder you have to use that slash okay so here I am in my project folder I'm going to type pod in it and this is only after you have cocoa pods installed okay so now we can go check out our project folder okay so now here's the pod file that it created so I'm going to right click open it up with my text editor and then within here we're going to uncomment the platform line we're going to uncomment use frameworks because we're using Swift and let's go back here and here's the line that we need so we're going to put that right in there we're going to hit command s to save it now we're going to jump back to terminal and we're going to type in pod install so give that a second for it to go ahead read the pod file grab the snap kit code and download the files here we are now if we go back to our project directory like that it's created a couple more files that we open up the one called XC workspace and here I'm just going to press command B to build the project and before we start working with snap kit let me show you a couple of ways that we can add our auto layout constraints so in the storyboard here let me just create a little more space okay so let's say I had a uiview and I added it here and I wanted to stretch it against the edges of all four sides I could tap on my UI view let's just make it a black color so you can see and then I would go down here and I would basically add these four constraints I would change the nearest neighbor to the View and then I would go 0 0 0 and add 4 constraints and then if I update frames I would see it all stretched out so that's pretty easy to do however there may be cases where you can't add auto layout constraints to your storyboard because maybe the position of your element is dynamic maybe you only get that data about where to position it afterward when the app has downloaded some sort of data file or in a lot of cases where apps do networking its downloading information from feeds and stuff like that and off of that data we create objects in the view for example in the news app where the app has to go and retrieve the news and then for each news article it creates this little card on the view so it's gonna have to position those things dynamically while the app is running and you wouldn't be able to do that here via the storyboard so there legitimately are cases where you need to programmatically assign auto layout constraints so I'm gonna delete that view right here and then I'm going to go into the view controller and I'm gonna show you just a quick example of what the code looks like if we're going to do it through code I would say let box equals UI view so I'm creating a brand new UI view and then next I'd have to set a property called translate auto sizing mask into constraints equals false and the reason for this is because by default your view has an auto resizing mask and it converts those into constraints and we don't want that to happen so we're setting that to false because we're going to set our own constraints so down here I'm going to write a single constraint to constrain that view to the top and make it zero against the top of the view so we would say let top constraint equals NS layout constraint that's the class and it's got this initializer here so which object are we talking about we're talking about the box which attribute are we talking about we can say dot top related by dot equal to item self dot view so that's the the view of this view controller which layout attribute of that view so dot top again multipliers one and constant is zero and then we would have to add this constraint to not to the box actually but to the parent view because if it's a positioning constraint you add it to the parent view if it's a sizing constraint you add it to the box so this is just for one constraint we're gonna have to repeat this you know for the bottom and then another one for the left another one for the right you get the idea and this is just to do what we did in the storyboard to make this UI view stick to all four edges so now you can see you know the type of code that you have to write to do this programmatically actually there's one more thing I forgot to do here which is to actually add the box into the view so here we would say self dot view dot add sub view and we add that box we created onto the view this is really important because if it's not in the view you can't add constraints to it so it would actually create a crash so when you create an element make sure you add it to the view before you start putting constraints on it okay now let's do this with snap kit instead so I'm going to erase all of this code up to here and the only two lines I'm going to leave is the line that creates the uiview element and the line that adds it to the view first thing we're gonna do up here is say import snap kit and then down here let's add constraints so I'm gonna type box dot and there's a new method or a new set of methods that start with SNP and you scroll down you can see all the different things you can do but what we want to do is use this one called the snap make constraints and it's got a closure which is just going to be a block of code I'm gonna double click it and inside the code we're going to type make dot in here we have a bunch of attributes that we can choose from and you can kind of chain them as well so I'm going to say make top dot bottom dot left dot right dot equal to and then here we can make it equal to another element so let's choose this one equal to self dot view and literally with one line we've made all four edges of the box equal to the edges of the self dot view which if you compare it with the code that we had before it's a huge savings and it saves you time as well there's actually an even easier way to write this we can go make dot edges dot equal to self dot view and that's even shorter so that's why it's called a DSL because it's almost like a mini language just to describe Auto layout constraints so once you get wellversed with all of the different things that you can do with snap kit and there's a great usage document that shows you a ton of examples on that website snap kit I oh you can begin to appreciate how much simpler it is to create these auto layout constraints using it so let's go back to our Xcode project and let's run it let's just give this box a background so here you can see a my simulator the box which is black is attached to all four edges using just this one single line of code as opposed to you know the 30 lines of code that we had before so if you find yourself writing Auto layout constraints in code programmatically highly recommend you guys to check out snap kit and check out all the different things that you can do under the usage section and I hope it makes your lives easier I want to thank you for watching and supporting the channel please give the video a thumbs up if you liked it share it with your friends and family and subscribe if you haven't already thank you so much again and I'll see you guys tomorrow bye