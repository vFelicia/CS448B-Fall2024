hey guys welcome to lesson 15 of how to make iPhone apps with no programming experience in this lesson we're going to learn about arrays and we're going to start off in a playground and I'll show you what an array is and how to use it and then we're going to see how we can integrate it into our xcode project and instead of constructing the string with a random number to dictate our card images we're going to use an array okay so the first thing I'm going to do is start a new playground I'm just going to save it on the desktop here now before we dive in and start working with arrays let's define what an array is an array is a collection class that helps you manage a collection of values it's not a UI kit class but it's one of the core classes of the Swift programming language just like the string class in order to understand what it is take a look at this so let's say we have a variable a and we're assigning into it a string now imagine if we had a couple of different strings we would have to declare a variable for each one so so that we can reference it well an array could be very useful in this sort of scenario because an array is an object that will allow you to store all of those strings and you can reference them by index so you can imagine the array almost like a snake of variable values now let's go back to our playground and take a look at how to declare and use an array okay let's begin by declaring a variable and then setting an array into it it so I'm going to type VAR my array equals and I'm going to create an array that has two strings inside so I'm going to put let's say book comma cat okay and just like that we've created an array so how does this syntax work well you'll notice that these square brackets are encompassing two strings with a comma in between and this creates an array that contains these two objects now if I wanted to access let's say book I would type my array and then I would put in square brackets and now I put in the index of the item that I want to access and arrays begin at zero so the first item is actually item number zero when I go like that it returns book and I can actually create an array with three items or as many as I wanted there are actually some pretty cool methods that are associated with arrays that can help us manage a collection of data so for example if I wanted to find out how many items are in my array I can go my array Dot and then call this count method and would return three to me I can also add more items after the Declaration so I can go my array do insert and here you can see that this method accepts a new element at index whatever index I want to insert it into so if I want to insert it into the beginning of my array I would put zero and my new element here could be D so now my array actually has four items and if I access my array square bracket 0 I get dinosaur now now if I didn't care to insert it at a certain index I can also add items like this using the append method and with the append me method it just adds this item to the very end of the array so those are two methods I can use to add items into my array so appending also has another shorthand way you can do it so I can go my array plus equals and if you remember from an earlier lesson if this was an INT plus equal would actually add the value to uh whatever value I had on this side in this case with an array it's going to append the item so I can't do something like this xcode will actually complain and give you an error what I actually have to do is surround that by square brackets just like in the Declaration and just like that this line I've added elephant to the end of my array I can add multiple items to the end of my array by doing this so now I have 1 2 3 four five six seven items in my array I can also remove items from my array so I can say there are a couple methods here remove the last item remove items from a certain range remove an item at a certain index or remove all of them so keep in mind that all of the items in your array must be of the same type so before you learned that you can specify the type of data that the variable or the property will hold well let's do that with an array to declare that this array will store string objects we use colon and then two square brackets and we type string like that make sure you don't do something like this because that indicates that this variable will store a single string object by adding these square brackets it indicates that it's going to store uh this variable or property is going to store an array of string objects so that's what an array is it's very useful to help us manage a collection of values especially with all of the different methods to remove add and count the items so now we can take an array into our card game project and use that to display our cards instead oh one more thing before we move on if you wanted to declare a new array that was empty to begin with and it didn't have any objects you can simply do something like this VAR uh my second array uh let's say it's a type it's an array of ins I can go like that and that indicates that it's an in Array right well an array is an object as well so I do that and that creates a new array object of the type integers and it's empty to begin with it has zero elements as you see here and then all of the other uh methods and stuff like that to append things will work the same way so after running that line my array now has uh one element and what is it if I access that element at zero it's a three so that's what you do when you want to declare an empty array for those times when you don't know what you're going to put in it yet so here I've got our card game project open and I'm going to go into viewcontroller.swift if you remember what we were doing here in our playround tapped uh method we were first randomizing a number between 1 to 13 we're putting it in this variable and then we were creating a string object that uh was card followed by the randomized number and then we would use this UI image initializer method and pass in that string to uh get back a UI image object that was initialized to um that image asset in our image asset library right here and then finally we would set that UI image object into the image property of our UI image view object which is the UI class that we used to display images onto the view and then we repeated that for the second card view image so now that we know how to use arrays we don't actually have to do things this way the drawback to doing it this way is that we had to name our cards with this sort of format so we had to name our Ace card one we had to name our Jack card 11 and our queen and king card 12 and 13 well if we if we used an array we actually wouldn't care what the card names are so let me demonstrate I'm going to start by declaring a new property here card names array and it's going to be a string array and I'm going to initialize it to all of our image asset names so when I'm done this array is going to have uh 13 objects in it so now I've got a string array with 13 string objects in it representing my 13 cards so down here instead of creating a string with this string with format I could just access the objects in my array depending on what randomized number is selected so I would do this self card names array square bracket and I put in the index here and the index I want to put is first random number so after doing that xcode gives us an error let's see what it says cannot subscript a value of type string array with an index of Type U in32 and the reason it's saying this is because we are trying to spef specify the index of the array using first random number and you have to use an INT to specify the index of the array that you want to retrieve the first random number is a u in32 because Arc for random uniform returns a u in 32 and a uint represents an unsigned integer so it's only in the positive range and 32 is just the size so in order to fix this we can tell xcode to treat this as an INT so how we can do that is we just write int Open Bracket and we put this whole statement inside the brackets like that and now it's going to randomize a u in32 it's going to treat it as an integer and it's it's going to assign it to this variable and let's put the data type of this variable as an an INT and now we can use this number as the index of our array there's one more thing we have to change though because remember even though we have 13 objects in our array the array is zerob based so the first item is actually zero and the 13th item is actually at index 12 so because this right here gives us 1 to 13 there's a possibility that it may crash our app if your array has 13 items and you try to access uh the index 13 it's going to crash your app because there is nothing at index 13 uh the 13th item is at index 12 so we can modify that by just removing this plus one and now this randomization function returns 0 to 12 we added the one before because we needed 1 to 13 but now we need 0 to 12 so we don't need to add one so now this will actually work and I'm going to leave the second card using the old method and you can see that both work okay great and now let's convert the switching of the second card to use the array as well so I'm going to get rid of that and then get rid of the plus one what we're doing here telling it to treat this u32 as an in is called casting and casting is just a way of saying to treat one data type as another so by using an array we actually don't care what our image asset names are if I had wanted to name uh my asset here let's change it for good measure going call this my Ace I'm going to call this Jack queen and king if we go back to here we update the names and this will still work because we're merely accessing element 12 or Element 11 and we're retrieving that name there and this is just a single use of an array there's other uses where we're going to demonstrate in our future projects in the next lesson we're going to learn about if statements which will allow us to control the flow of logic or the flow of execution and it gives our app the ability to make decisions based on conditions that we specify and we're going to use that to determine which of the two cards is the larger card and declare a winner on a closing note I want to let you know that Apple has this great Swift programming language guide and it tells you about a lot of the features that we're going through now I don't expect you to read this but it can be handy to have it as a reference we're going to go through all of these Concepts together in the process of building our projects anyways but you can see here in this section it talks about strings which we went through uh it talks about collection types which we introduced the array from and it's going to talk about control flow uh we learned about methods properties classes it might be a little bit overwhelming to read as a beginner uh but you know if you're watching anything in the video here and you'd like to learn more about it or see some more examples this programming language guide can be a good place to do that I'll add the link to this programming language guide below the video okay so thanks for watching and I'll see you guys in the next lesson