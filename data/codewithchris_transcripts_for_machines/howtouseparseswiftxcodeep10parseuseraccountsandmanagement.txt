hey coders how's it going it's Chris here I hope you guys are having a great day today we're going to learn about users you've learned about PF Objects PF queries PF files and now you guess that it's PF user so if you need any sort of account management in your application parse can handle that today we're going to go through some of the documentation first of all and then tomorrow we're going to implement some of what we've learned today I decided to split it up into two lessons because there's quite a bit to cover and quite a bit to understand and I think it would be clearer that way so I hope you stick around for part 1 and part 2 and learn about how account management works in parse so let's take a look at the PF user and what it comprises of so right here it says that the PF user class has a user name property a password property and email the user name is required and the password is required on signup furthermore the email address is optional let's take a look at what signup means and how that occurs so what we would probably do is provide some labels and text fields in our application for them to fill out a username a password and email and then when they hit sign up when they click that button we would fire a method with this sort of code here we would create a brand new PF user object we would set the username to whatever they filled in the password property to whatever they filled in an email to whatever they filled in and there are some other properties here well this is a custom field a PF user is just like a PF object where we can have our custom key value pairs so here you can see that there's a phone number and in the user interface we could definitely provide more text fields for them to fill out more stuff if we want it to and then assign that data to our custom columns of our PF user and then when we have that PF user all filled out we are gonna call signup in background with block on that PF user object and that's gonna allow us to determine if the signup or the registration was successful or not so you can see here in this code they check that there is no error and then if there is then maybe show some error message to the user on the front end and if not then they're successfully signed up now on the flip side if they've already signed up how do we let them log into the application well in login and signup forms there's usually a toggle between if you're registering for a new account or you're logging in and if they choose to log in instead all we would do is call this class method login with username in background so PF user login with username and background and we pass in the name that they filled in or the username and their password and again inside this block of code we can determine if a PF user is passed back you can see this is an optional parameter so if this is nil that means that the logon failed then we can read the error message to see if it was maybe the wrong password or username doesn't exist or something like that and if the user is returned if we do get a PF user object returned then that means they've successfully logged in now the third thing is we don't want them to sign up or login every single time they open the application right so how do we check that they're already logged in or they've already signed up so if we scroll down a little bit we're gonna skip this section on verifying emails for now we'll get back to that let's look at this section called current user so current user is another class method that returns the PF user object if it's cached so let's take a look at this PF user dot current user if there's nothing in there and it's nil then show the sign up or login screen but if you get a PF user object then you can know that the user has logged in already or his session hasn't expired so when it does this PF user dot current user return an object well whenever they sign up or they login that user will get cached on the local device and PF user dot current user will return them so the next time you open the app you'll be able to retrieve that PF user object using this current user method and you can tell that they've already logged in or they are currently logged in and if you want to clear the current user and show that signup login screen again you can call PF user dot logout and that's going to log out the current user and at that point after you call logout if you check PF user current user it's going to be nil a fourth thing that you can do is you can have something called a No users so for example you don't want to force the user to have to create an account or login first of all you can allow them to use the application anonymously and at the point where maybe they need to save some data and you need to associate that data with the user then you can prompt them to create an account so anonymous users is a setting which you enable for your parse instance or your parse application and if you do that then this current user method will never return nil when the user opens the app for the first time this is going to be prefilled with a user but that user won't have a username or a password so it's anonymous and as they're going through the app you can still associate things with that user but when you call log out on that anonymous user all of the data for that anonymous user gets erased now you can convert an anonymous user to a real user by setting the username and password and then calling signup on it so that's a way for you to let users use your app without creating an account first because often times you want them to use the app get the value out of it and see that it's worth going through the hassle of creating account for and then at that point you can prompt them to add a username and password and sign up so let me show you that toggle right here if I go to the parse dashboard and I click my application and go into app settings under where is it here under users under user authentication you can see here allow anonymous users you can toggle it between no and yes another thing I want to point out as a feature of PF users is verifying emails so if you want to enable email verification in the account creation that means that when they create an account and parse will automatically send an email to the email address that they specified and it's gonna contain a link that they need to click in order to have their account approved or verified and then they can use it so if you read here what happens when you enable email verification is that the PF user object or the PF user class rather is going to have an email verified column and when the user gets created it's going to be set to false right away if they click that link in that email then that is gonna be set to true for them and if that field is completely missing for that user that means you probably turned on email verification after that user had been created the nice thing is that with email verification and this account management people are going to forget their passwords and parse handles that really nicely for you so if we go down to this section resetting passwords all you need to do is provide some user interface elements for them to click forgot password and have them fill in their email address click a button and then you're gonna fire off this method called PF user it's a class method request password reset for email and background and you're gonna pass in the email that they filled in what parse is going to do is send them an email with a password reset link and when they click that they go to a page that parse creates where they can type in a new password and when they do type in that new password they verify it they save it it's going to automatically get saved back to your parse backend for that user so that's nice because you don't have to create those pages yourself so those are kind of the cool things that you can do with user account management with parse and in the following lessons we're going to actually implement some of these things in our parse demo lab so thanks for watching I hope you enjoyed it and please give it a thumbs up subscribe if you haven't already and please share it if you think anyone can use it thanks a lot and I'll see you guys tomorrow bye