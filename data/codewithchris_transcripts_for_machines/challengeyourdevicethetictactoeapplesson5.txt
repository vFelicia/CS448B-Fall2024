in this video we'll be adding the ability to challenge our phone or iPad however before we do that I notice that my code from the last video has a published property that's not being used in game service the moves taken array isn't used it's from some of my old nodes so you can remove it this will also require that you remove it from the reset function as well so let's commit those changes now to the two player branch and now we're ready for today's lesson so let's create a new Branch from this one and we'll call it challenge device when we want our iPhone or iPad to make the next move we can do that programmatically by calling the make move function not by tapping on a button but rather determining a random index from the remaining moves and then pass it along to the make move function this will happen very quickly so to write us some feedback that this is happening I'm going to simulate the device Thinking by displaying a progress View in the game service class then add a new published property and call it is thinking and initialize it as false next create a new function called device move and we're going to have it pause for a short period of time before picking an available Square to make the move so this is going to be an asynchronous function so mark it as async when we first call this function we'll toggle the is thinking property and then we'll initialize an asynchronous sleep function using the try await and use the task.sleep for let's try 100 000 nanoseconds now once it awakes from sleep we can select a random element from the possible moves array and this will be optional although it never really will be we can use an if let to unwrap it now I need to know the corresponding index of this move as it relates to the full move dot all array so again we'll use another if let to assign to a matching index property the move all's first index where the first one matches our move when we have that then we can make our move at that matching index and then once our move has been made we can toggle that is thinking property so we can revisit our setup game function now and where we have the case where we're now challenging the device which is bought we can create a different name for our player 2 which will be the device so in this case when we're challenging the device we can assign to the player2.name the UI device current dot name so then we'll just pick up the device name from the iPhone or the iPad that it's playing next within the make move function we want to await that device move only if the game type is bought and the current player name is that player 2 name because our device will always be the second player and then we can set up an asynchronous unit of work which is a task and await the completion of that device move now the other thing I want to do is to disable our board while that device is thinking so back in the board disabled computed property we can add another or case for is thinking in game view then our devices always going to be player 2. if we decide that we want the device to start playing first when we tap on that button we'll have to initiate that devices move but only if the game is a bot and we'll do that in the action for the second button and it has to be embedded in a task unit of work well now while the device is thinking we can display an overlay over the disabled board using an overlay modifier on that vstack which contains the three rows of three squares So within the overlay if the game is thinking I'm going to create a vstack and then for the first item I'll create a text view just using the string thinking dot dot dot but I'm going to surround it with spaces to push it out on the sides and then I'll give it a foreground color of color system background and then I'm going to apply a background of a rectangle using the fill of the color primary and then I'll add my progress View the one final thing we need to do then is to make sure that the user does not tap on a square while the game is thinking or about to think so just be careful in square view we can surround the button action with a not game is thinking so let's see if this works I can go to the start view now and select our new game mode I only have to enter my name and when it's done I can tap the start game button if I tap the iPhone 14 pro in my case button to start it immediately starts to think and then make a move whoa that was quick it's my turn now so I can make a move and quickly too quickly I think the iPhone makes its move I don't think I'm sleeping long enough so let me return to the game service and I'm going to extend that sleep to 1 million from 100 000 nanoseconds so let me try this one more time we'll select the Challenger device and I'll enter my name once more and start the game I'll let the iPhone start again and this time the thinking is much more obvious and the game board's locked up until it makes its move and passes on to Player 1 which is me so I can continue to play and the device will play and we'll continue on until we get a winner so let's play a new game this time I'm going to start and I'm going to play Rather badly and see if the device can win indeed it can well that was pretty easy and this was a short video so let's commit our changes to the git repository now next up we'll be taking our time to learn how we can create the third mod of our game playing and that's going to be against someone who has the app installed and who is nearby multipeer connectivity this is going to require that you have an iPhone rather than either iOS 15 or iOS 16 available so that we can play the simulator against a real device