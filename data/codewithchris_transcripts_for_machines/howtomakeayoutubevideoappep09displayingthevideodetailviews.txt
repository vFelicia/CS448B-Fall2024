eight coders Chris here with episode 9 of how to make a YouTube video app in the previous lesson we had created our custom class for the video detailed view controller and then we had added these elements onto the view so title for the label title for the description a web view to show the YouTube content and then we had hooked up these elements as IB outlets to our video detailviewcontroller class so in this lesson we are going to pass the video that the user selects from our main view controller to our detail view controller and then we're going to take the properties out of that video object and display them in these user elements so how are we going to accomplish that well first of all let's go into our view controller for our table view when the user selects a cell right now we're not really handling that scenario so why don't we implement another of the table views delegate methods to handle that event when someone selects a cell so let's say table view did select row at index path now make sure you don't choose this other one which says did deselect because that's not the one we're looking for we're looking for did select row okay so I'm going to choose that and this method triggers whenever someone chooses a cell in the table view and what we want to do is take note of which video the user selected so we're going to create a property up here we're gonna call it far selected video is type of video and we're gonna set it as an optional because it may if the user doesn't select a video then this is going to be nil but if they do select a video then we're gonna store it in here so we're gonna say in here self dot selected video equals all of our videos and then how do we know which one they selected well there's this index path parameter here so we can go index path row and so that keeps track of the video that the user selected in here okay so now how are we going to pass this video object over to the video detail view controller well in the video detail view controller we're going to need another property to keep track of that video so let's say var will also call it selected video here and just as in the view controller it's going to be an optional type because it could be nil it could be not set yet now we're gonna go back to the view controller and we're gonna implement another method that gets triggered when a segue occurs that means when we transition from the view controller to the detail one this method gets called and it's called prepare for segue so if you start typing PR e it should autocomplete and you should be able to select this method here inside this method we can get a reference to the destination view controller and then set the selected video property of the destination view controller so in our case that's the video detail view controller okay so let detail view controller equals and we can get a reference to it through this parameter right here this is the segue that got triggered dot destination view controller you can see that it's a type of UI view controller but we're actually going to cast it as a type of video detail view controller because we know that that's what it is and so here we're going to say detail view controller dot selective video equals selected equals self thought selected video and this is referring to this guy up here which is hopefully set because the user has selected a cell okay so this method happens before the transition finishes and we are going to be setting the selected video property of the detailviewcontroller so now in the video detail view controller we're going to want to take this selected video and we're going to want to set our webview title and description for it so I'm not gonna do it in the viewdidload instead I'm going to override another one called view did appear and this method is called after the view has come on to the screen and the reason for this is because when the view has appeared we know the dimensions of the view at this point viewdidload we don't know the size of the view yet or at least from inside this method we we can't reliably access the size of the view so in view did appear we can and we need to know the size of the view because we're going to have to dynamically set the height of the webview as you'll soon see so in here we're going to use a statement just to check if selected video is set so we're gonna use optional binding if let let's say video let's just call it vid equals self thought selective video so inside here that means that self dot selected video exists and we're going to say self thought title label dot text equals V dot video title self dot description label dot text equals vid video description and finally we need to set the webview so let's construct a string first so how we're going to display the YouTube video inside the webview is by using this HTML to embed the video as you can see right here it's using an iframe to do so it's got a height of 180 and a width of 320 which we are going to make dynamic but take a look at this source or the URL of the iframe its youtube.com embed and then this is going to be the video ID and then we're going to use this loaded up into the web view and it's going to display our video which we can tap on play to play the video so I'm going to copy this snippet of code I'm going to construct a string let video embed string equals that okay but I need to substitute the video ID in there so the way I did it before in my old project was to use this wild card and substitute the video ID in there but here we can use just string concatenation so I'm going to erase that go like that and then I'm just going to put the video ID in here so vid dot video ID so it's going to take this chunk of string plus the video ID plus this chunk of string and then lastly we're going to call self dot web view dot load HTML string and we're gonna pass in that video embed string and the base URL is nil okay so that's all set but before we run it I want to revisit how we are triggering that segue that transitions from the main view controller to the detail view controller so if we click on this one it is connected to the selection of a cell here and then that triggers the segue to happen to transition to the detail view controller but if we look at our code here there is a potential problem because in order for this to work this did select row index path must fire first so that we can set the selected video and then the prepare for segue method must happen so that we can pass that selected video to the detail view controllers selected video property if they're switched if this guy happens first before this one then what we're gonna be passing is nil because this one hasn't been set yet right so we need this method did select row in next path to happen first and then this guy to happen second so what I'm gonna do is set a breakpoint in each method I'm gonna run it and I'm gonna see which one gets hit first so you can set a breakpoint by clicking here on gutter and the breakpoint will just pause the execution at that point to let you check on variables to let you you know just take a look at your code so I'm going to choose the first cell here I'm gonna tap it and you can see here that it's coming to prepare for segue see it's hit this breakpoint first this green line is where it's paused currently so this is bad because we want this to happen first at this point you know if I step through line by line it's gonna set nil into the detail view controllers selected video property and as such we're not going to see a video in the next view okay let's continue execution you can see second method it hits is this guy right here at this point there's no there's no point in setting this selected video property because this has already happened so as you can see now that we go into the detail view controller nothing is set so what needs to happen here is in the main that storyboard we can't hook up our segue to happen on selection of this cell because the order the order that those things happen and just doesn't work out so I'm gonna click on this segue I'm gonna hit delete and what I'm gonna do is create a manual segue from the view controller to the detailed view controller so that we can programmatically call that segue to happen when we want it to so I'm gonna click this view controller and you can see this little view controller icon here I'm gonna hold down control drag a line over to this video detail view controller let go I'm gonna choose show and then I'm going to select that segue go over to the inspector pane and in the storyboard segue I'm gonna give it a go to detail identifier because we're gonna be calling this segue by its identifier here okay so now when we go back to our view controller at this point that segue won't happen when we select a cell because it's a manual segue we're gonna have to trigger it programmatically so what I'm going to do is add a line after we set the did select row at index path after this gets set I'm going to call the segue so selfthought perform segue with identifier the identifier we gave it was go to detail and the sender I'll just put self and now let's run it and see which of those methods get hit so I'm gonna choose the first cell here and as you can see it's hit did select row index path first it's paused right here and it has set the self thought selected video property and it's gonna perform the segue which is going to cause this method to happen so there we go it jumps to here now and this is fun because now we've actually set self dot selected video so detailviewcontroller is going to have that video some continued program execution and now you can see here on the detail view that our title and description is set however you'll notice that our video is not showing because here in the console that says app Transport Security has blocked a clear text resource load so the problem here is because our webview is trying to load a resource from youtube.com and Xcode just has the security measure to not load anything unless you give it permission to or you set some rules to allow resources to load from youtube.com but what we're going to do is go into our info.plist and we're just going to add an exception to allow arbitrary loads which is to allow loading any sort of resources for the purpose of this demo ideally you'd probably want to only add a rule for youtube.com so I'm gonna type capital a lowercase P and this should pop up and the press tab then we're gonna open it up click this plus so we can allow arbitrary loads I'm gonna say yes to that and let's run it again so now when I click the first cell I'm just gonna remove these breakpoints by dragging it off now you can see our video has loaded but it's not really taking up the whole view because the height and width as we can see in this string is 180 and 320 there so we're going to fix that but let's just see if it plays okay so that's pretty cool that works now let's go back into our code and we're going to go to the video detail controller so we're going to calculate the height and the width that we need in here let width equals self dot view dot frame dot sighs thought width right so that's the width of the entire view so let's calculate the height off of that is equal to so since we know the ratio is 320 to 180 we're going to say self we're gonna say width which is this guy right here divided by 320 times 180 so we're just going to get the difference in the real width versus the 320 so we get that ratio and then we're gonna multiply that by the original height to get the new height so let's see what this is saying right here play oh it's just saying that we're not using the height variables but we are so in here instead of 180 I'm going to do string concatenation again so I'm just gonna open up two quotes like that plus Haight oh but this is not a string right unless I make it a string here so let's just put that into a string like that so that's gonna be okay and then for width I'm also going to use string concatenation and add the width in there like that oh but then I can't do math on the width right because I need to do with divided by 320 so I can't change them to a string here and fortunately but I can change them into a string here I'm gonna create a new string object by passing in the number like that so now I'm gonna run it and we should be able to see the video take up the whole view like that ah so now it does take up the whole view except the webview is not large enough to accommodate the height of the video thumbnail so you can see there's this scrolling action here so what I want to do remember that when we added the webview in this storyboard we added a constraint to just make it 180 with the intention of adjusting it a little later so I'm gonna open up the assistant editor and up here I'm gonna create an iboutlet for this height constraint I'm just gonna hold down control drag a line put it here and I'm gonna call it webview height constraint like that go back to single view go by through the video detail controller and in here because we have calculated the height of the video we can adjust that adjust that height adjust the height of the webview constraint so selfthought webview height constraint constant equals height okay now let's run so I'm going to click that and then now we can see that the video is not cropped and you might have noticed like a flash of label and ylabel we just need to change the default text for those two things and pretty much we're done so let's change the default text while we're at it go to main the storyboard if we go here to our label so we just have to erase the text there like that so you don't see a flash of those two words label before that these details load okay so that was the simple version of the YouTube video app where we hardcoded the videos into our project and if you didn't see yesterday's vlog we're going to be doing a shopping app next but I'm still working out the details for that so stay tuned I'll see you guys tomorrow at 12 p.m. talk to you guys later bye for now