hello and welcome in this lesson and in the next three you're going to be learning the basics of the swift programming language now these are the skills that you're going to have to have in order to complete the war card game as well as to build the future apps that we're going to do together now if you've never coded before i know this might seem a little bit intimidating but i really want you to stick with this and really pay close attention in fact open up xcode on your own machine and type out exactly what i'm showing you this is really going to help reinforce the structure of the language and all of the keywords there's no need to memorize anything at all i guarantee that by the end of this module you'll be writing your own swift code in case you're new here my name is chris and welcome to code with chris the place to be if you want to learn how to build an app and i have a quick question for you have you learned how to code before or is this your first time learning how to code let me know by leaving a quick comment below and on your way down there if you wouldn't mind please give this video a quick thumbs up it helps me out more than you know so thank you all right let's dive in i want to start by looking at the view update lifecycle of a simple app and show you where swift code plays a part in each part of the life cycle let's start with what you've already learned in the previous lessons that the ui is generated from swift code we'll call this your view code it generates a ui for your user to see now typically with an app we have some sort of data that we want to retrieve and display for example a news app we'd want to get that data from a data source and then retrieve it into our app and display it in our ui you can use swift code for this the swift code can go and fetch the data and then process it into a format that our app can understand then using swift code we can also link this data to our view code so that when the ui is rendered from that view code that data can be displayed to the user and furthermore when the user interacts with the ui such as tapping a button we can use swift code to capture that event and respond to it now based on what the user tapped on we might use some swift code to change our data when this data change happens because we've linked that data to our view code that data change is automatically detected and the new ui is rerendered with the updated data so that the user can see what has changed now this cycle is essentially all the app is doing over and over and we'll explore this app view update lifecycle in more detail in future lessons but for now i just want you to understand that swift code has a part to play in each part of this life cycle all right from the last few lessons you've already seen the code for building ui so you sort of know what that view code looks like let's shift our focus over to the data part where we can see what swift code is used for keeping track of the data and furthermore what does data even look like in our app in order to try out some of the swift code and to find the answer to our question let's use an xcode playground a playground is a lightweight way to test some of our code without committing to a fullfledged app project that we can do here think of an xcode playground like your doodle pad but for code now to start a new one go to file click on new and then let's click on playground we're going to choose a blank playground and let's give it a name and let's save it somewhere we're going to close this navigator tab by clicking this button because we don't need that now down here in the lower left hand corner you'll notice that we have a button that called show debug area go ahead and click that to reveal this tray this debug or console area is where we're going to output a lot of data so just turn that on make sure you see this little area down here and then this button i want you to click it right now it's going to be executing the playground it's going to run all of the lines of code in the editor area up here notice however that you also have this little blue run button along the line numbers and this lets you select which line you want to execute the code up to so if i hover over at line three and i hit the button right here it's gonna run lines one two and three as opposed to this button here which runs everything so the first time you run this playground it might take a while might show the spinner for up to even a minute i want you to do that and just let it run until it says ready to continue and that's going to set us up to run some code in the next part for now let's just go ahead and delete these lines of code so we can start fresh all right now that you're set up let's go back to our original question what does data look like and how do we use swift code to keep track of it let's look at a couple of different types of data first now let's start with a common data type a piece of text in swift you surround text with quotation marks like this and this is known as a piece of string data let's add a note for ourselves up here with two forward slashes when you do that it's called a comment and it's a way for us to leave a note or a little piece of documentation for us to remind ourselves or other people who might be looking at our code what that code does and when xcode sees these two forward slashes it's not going to execute this line now let's take a look at another data type integers so something that looks like this in swift this is known as int short for integer and what about decimal numbers well yes that's also a data type that swift can recognize and handle each of these they're known as a double and swift can also handle boolean values so things like true and false in swift this is known as bool now string int double and bool these are all called data types and it's how swift classifies data now these aren't all the data types that are available but these are the by far the most common ones that you'll be using at least in the beginning and it's a great starting point for us all right now let's take a look at creating and keeping track of data in swift there are many ways to keep track of data but two of the most basic ways are using variables and constants let's go back to our xcode playground and take a look at an example let's start with our hello string data here now this piece of data on its own is going to be useless to us unless we have a way to reference and track it and we can do this with a variable so let's see how we can declare a variable to keep track of this hello piece of data so we use the var keyword and that's for declaring a new variable and then we type the name of the variable this name is what we're going to use to reference that piece of data and recall it so i'm going to call this myvar and then we follow it with a colon and then after that we put the data type that this variable is going to track since the data that we want to reference is a piece of string data i'm going to put string here and then next we usually in the same line that we declare the variable we assign the data to the variable to keep track of and we can do that using the assignment operator which is just an equals symbol and then on the right hand side of that we put the data that we want to assign to this variable i'm going to take that and move that right here so essentially what this line of code is saying we're declaring a new variable called myvar we are saying that it keeps track of string type data and then we are assigning this hello string data to that variable it's kind of like we're attaching a label to this piece of data called myvar now whenever i want to reference that piece of data all i need to do is reference it by the variable name so let's give this a try we can use a special command that will output the data to the console area below here in the playground and that command is just print followed by two rounded brackets and in between those brackets you put the variable or whatever data that you want to output so i'm going to do that and then down here i'm going to stop my playground and execute all the code in it again and then as you can see down there it says hello that it's the contents of my var which is exactly what we would expect notice that when i reference my variable i don't need to use the var keyword anymore that was only to declare the variable and once i've declared my variable i can just reference it by its name and i can also reassign new data to it i can use it over and over again i don't have to redeclare it so for example after i declare it and assigned hello to it i can turn around and assign something else to it let's assign this piece of string data called world to my var and essentially what we've done here is we've told that variable instead to track this piece of data so what would you expect if i execute the code in the playground now we would only output world because my var no longer is tracking that hello piece of data now one thing i want to emphasize is the data type of the variable if i specify that my var is a string type i can only track pieces of string data so for example if i had an integer like 100 and i tried to assign that to my var well i would get an error that's not allowed what i need to do instead is declare a new variable of the in type to keep track of this piece of in data so let's go ahead and use the var keyword and name it and then colon and then the data type that i want this to track and now that is completely okay let's try printing that out xcode is not going to help you autocorrect any spelling errors all right so we have world and 100. now as we're coding more together you'll start to notice different sorts of naming conventions like what you see here where my variable names start with a lowercase letter and then every subsequent word in my variable name starts with a capital letter so that's sort of just a standard naming convention you really could do anything you want but when you start coding more and working in teams it's important to have a standard that everybody uses and this is a common one all right now one more thing i want to talk about before we move on to the next topic is the fact that there are shorthands in xcode you don't really have to type in all the information for example here we're declaring that this variable myint is an int type and we're assigning integer data to it but the thing is we could actually omit that data type and simply assign 100 to it when we do that xcode can see that this is a piece of in data so it's going to assume that myint is going to only track in types now that same rule still applies i mean after xcode infers that this variable is in type because you've assigned 100 to it i cannot go and assign you know a string to it that's not going to be allowed because xcode has already detected that you know this should be an in type so same thing goes for up here i don't need to specify the data type if i'm going to assign a piece of string data to it right away because that tells xcode that this is going to be a string type variable so that's just a little shorthand to save you some typing all right so you learned how to declare a new variable assign data to it and recall that data by using the variable name you also learned how to assign new data to that variable let's talk about the other way to keep track of data constants so constants are just like variables except that you can't reassign data to it once you've assigned the first piece of data to it so let's take a look at how to declare a constant to keep track of this string data instead of the var keyword you use the let keyword and then the rest is just the same as a variable so we start with a constant name my const colon and then you guess that the data type followed by the assignment operator and then we're going to move that piece of data to the right hand side of that assignment operator like that now let's try referencing this constant let's try printing out the data in my const as you can see it works as expected now let's try to do the thing that's not allowed let's try to assign something else to it and as expected we cannot reassign data to it because it is a constant now constants are useful it's an additional tool that we can use if we don't expect that piece of data to change and so we don't need to make any changes to it ever so when would you use a constant over a variable well it really depends what you're trying to do you'll probably find yourself using variables most of the time because of their versatility and because data changes however the best practice is to prefer constants over variables where it makes sense in fact xcode is smart enough to know if you use a variable and you never end up changing that variable it will suggest that you change that var keyword to a let keyword and use a constant instead all right let's do a quick recap before we wrap up the lesson you learned about the view update lifecycle and how swift code plays a part in it you learned about data types such as string int pool and double you learned about how to use variables and constants to reference data now i highly recommend that you go through the quiz and challenges for this lesson to practice what you've learned today there's actually some new training in those challenges such as how to perform math operations with variables also don't forget that you can print out the swift cheat sheet from the resources link in the top nav bar and keep it handy there's no need to memorize anything to access these resources visit codewithchris.com and click on the try for free button to create your account and enroll in the 14 day challenge if you like this lesson please give this video a thumbs up and hit that subscribe button and don't forget to turn on bell notifications you're making great progress so far and in the next lesson i'll teach you how to organize your code statements into functions alright i'll see you there