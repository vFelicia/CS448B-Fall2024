hello welcome to the next lesson of the iOS to MySQL series in this video we are going to create the user interface so we're going to create the table view in the map view and then we're going to display the data in those two views now in the previous lesson just to do a quick recap we had downloaded the data that our web service provided by implementing the whole model and then we had to implemented the delegation the protocol and delegation pattern to return that data to the view controller now from the view controller we're going to be able to display that data on to the screen first of all however we need to add a table view to the zoom controller so that it can display that data onto that table view let's go over to the main storyboard and we're simply going to down here search for table view let's move that here drag that into here and basically while it's highlighted we're going to tap this icon here to add some constraints let's add all four enabling them change them all to zero and it's going to put them according to the top layout guide and the bottom layout guide but that's fine because there's going to be you know the status bar up here so that's going to make sure that it doesn't you can see here the table view ends right here doesn't block that status bar now we're going to have to connect this table view not as an IPL that property so that we can access it through the code let's go ahead open up a system editor hold down ctrl click and drag this guy over here where we have the other property and the connection type is outlet I'm going to call this just the table view like that I'm going to connect it I'm going to have a table view here the next step now that we've connected the table view is to display the data in that table view let's go back to the view controller and in order to display data in the table view we have to say that the view controller conforms to the UI tableview to our table view datasource and the UI table view delegate those are two protocols just like how we created this home model delegate one inside here the viewdidload function we need to set self as the table views datasource and delegate so table view dot Douga equals self in table view dot data source this is a lowercase V you change that to an uppercase because that's what we called this outlet there call self okay and just like how we set ourselves as the delegate for the home model and so when the whole model calls the delegate function it calls back to here on the table view does the same thing because we set this view controller as the delegate in the data source for the table view the table view is going to ask us for data to power the table view as well as when the user interacts to the table view to call functions that we have in here let's create a special section here we're going to use this special notation and by using this special notation it's going to create a new kind of divider here in this list of functions so the ones we need to implement our table view we're going to need to select row but let's not add that first we need number of rows and in here we're going to return we haven't we haven't declared a property to hold our data so let's say locations up here and declare a new property and I'm just going to assign this as an optional location all right all right so here we're going to say return locations dot count now this this might not work because if locations is nil we're not going to be able to get a count from it and it's not it's expecting a an actual number all right so we can do something like this where we say we can say you know if let locations not equal no then return locations count but if it is no then return 0 so we can do something like that just to test if it's empty first or no you know before doing this code however this wouldn't be if it was just be if locations not equal no however instead of doing this I'm just going to assign an empty array to it instead of making it an optional so right when this class or this object gets initialized this property is going to be set to a location array that has zero elements so this way I can simply say return locations count so if there's nothing in it then it's going to return zero okay next one we have to implement is table view table view cell actually let's just type cell for row at and in this delegate function the table view asks us for the cell the table view cell for a specific index path and that's just a row and a section if you have multiple sections but we only have one section so it's just going to be the row so here we're going to first we need to get a table view cell and then we need to assign some data into the label of that cell and then return that cell for display so let's go back to our storyboard here in this table view in the right hand side here we're going to say probe type cells there's one of them and then we're going to click that table view cell you can click it here from the document outline and there's going to be an identifier here that we can specify let's just call it basic cell with capital B and capital C because here in the view controller we're going to be able to get a basic cell by saying let's cell equals table view dot DQ reusable table cell and I'm going to use this one where we pass in the identifier basic cell for index path and this is going to be the index path passed into this parameter so the string only the identifier of the cell we want to fetch is basic cell and the index path is simply the parameter that gets passed in here so now you can say cell dot the prototype cell comes with a basic label and so I can access that property here text label dot text equals and we are going to set that text to locations this is the locations rate so we're going to access the index path row in order to determine which location to pick up and then we're going to choose a property so let's choose name and then lastly we're going to return the cell so let's run this and we should be able to see our locations in the table view okay there was one missing there was one missing thing here so we we do see a table view here but we don't see any data and that's because after the items have come back from the home model we actually need to reload the table view to tell it to grab data again before we do that the table view is looking at this property for its list of locations to display right so we have to set self dot locations equals the locations that got passed back from the whole model with that and I'm using self here just to specify that this is referring to the property up here because otherwise it would be in locations equal locations and that is a little bit confusing for everyone including Xcode so it doesn't understand what we're trying to do but if we use self Stahl locations we're able to distinguish that we're referring to this property here of the view controller okay so self dot locations equals the locations that are passed in and then we we don't need self here because there's only one table view dot reload data so that's going to cause the table view again to trigger these two delegate functions see that the reason why it was empty before was because when the view controller initially loaded that's when the table view asked for data to display and at that point this locations array was empty so it didn't display any data however after the whole model returned all of the location data we we never told the table view to refresh essentially okay so now you can see the data here are two locations when you tap on them nothing happens because we haven't implemented that delegate function yet let's go ahead and add it table view did select row make sure you don't accidentally select deselect row or else you'll get some weird behavior so use this one did select row at and when the user selects location it's going to come into here so at this point I'm going to save the Xcode project and in the next lesson we're going to implement the map view so when the user is going to tap on the location and the table view we're going to bring them over to the next view and display it on the pin so thanks for watching you can download the source code in the description and make sure you subscribe so you don't miss the next lesson thanks for watching I'll see you guys later