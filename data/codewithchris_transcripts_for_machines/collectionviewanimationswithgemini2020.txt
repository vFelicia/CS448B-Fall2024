hey cuckoo how would you like to learn how to do these animations in just four simple steps hell yeah let's do it but before we dive in for all of you new viewers welcome to code with Chris to place the beef you want to learn how to make an app I'm Chris and today we're going to do some awesome animations using the Gemini library guys this is dead simple to do check out the animation so you can do it's like eye candy shoutout to Shohei for writing this library and making it available to all of us now for this demo we're going to be starting off with a plain old boring collection view showing a list of images and if you're not sure what a collection view is you obviously haven't watched my beginner series what are you doing it's free just click up here to put it simply a collection view is just a user interface element to show a list of items now we're gonna spice it up in four simple steps a step one we're going to install the Gemini pod we're going to add the Gemini library to our Xcode project using cocoapods and if you don't have that installed on your machine yet I have an indepth video on how to do that right up there now assuming that you've got cocoa pods installed on your machine already here's what we're going to do I'm going to start by creating a single view application I'm just gonna call this Gemini and I'm going to save it on my desktop in this folder called apps and then what we're gonna do is just close out this project because then we're going to launch terminal and we're gonna navigate their CD desktop apps and Jim Knight whoops there we go so I'm in my project folder now and if this seems confusing to you check out my cocoa pods video it's gonna let you know what's going on so right here we're gonna type in pod in it to indicate that we want to use cocoa pods with our Xcode project and now I can go ahead and open that folder and we're gonna have a pod file with our project I'm gonna open it in my text editor here and we are going to add the pod Gemini you guys if you're ever wondering what the appropriate pods to use for the thing that you're trying to install is make sure that in the github page there's always sort of usage section where you can grab that or requirements rather so under installation you'll see that that's the pod name we need to use then we can go ahead and save this go back to terminal then go pod install and it's gonna grab the Gemini library and install it into our project you can go ahead and close that and now back in our Gemini project folder we have this XC workspace file which is the one that we're going to launch to open up our Xcode project and here you can see that we've got the pod installed step two we're going to convert our UI collection view classes that use the Gemini classes now in Gemini there is a Gemini collection view which is just the subclass of the UI collection view class and we have a Gemini cell class which is a subclass of the UI collection view cell class if you're already using a collection view in your Xcode project then you're already using the UI collection view class and the UI collection view cell class now we're going to swap those out for the Gemini versions now here in step two I've already got a collection view running so that I can show you how to replace the regular collection view classes with the Gemini classes if you're unsure of how to do this basic UI collection view setup make sure you check out my beginner series first alright so let me quickly run you through what I've got so I've got a collection view here and then inside I've got a single UI collection view cell which is actually a custom class that I created called my cell inside we've got one image view and then inside my cell class you can see it's a subclass of your collection view cell I've just hooked up an iboutlet to the image view and I've got a single function called set cell which sets the image for that image view to whatever gets passed in here so now that we have the Gemini classes all we need to do is say that this collection view is no longer just a regular UI collection view instead it's a Gemini collection view and then my cell instead of a UI collection view cell it is now a Gemini cell let me go ahead and save those and go back to the view controller so in the view controller I've got the collection view hooked up an iboutlet so that I can reference it from here and I've got an array of photos 1 2 3 4 5 and these just correspond to the file names in my asset library here I've got these five images so in here this is pretty much standard stuff the setting the datasource and the delegate for the collection view to this view controller and then these are all of those collection view delegate methods which indicates how many items are in the collection view grabbing a Cell setting the cell to the image and yeah that's pretty much it so one thing I do have to do is this collection view because we've changed it to a Gemini collection view class I need to change the type here as well so we change it to a Gemini collection view one thing that I didn't mention is make sure that you call import Gemini if you're gonna be using that class or else it's not going to recognize that same thing for here in the mysel class even need to make sure that you type import Gemini first so that those Gemini classes are recognized all right but after you've swapped out the UI collection view classes for the Gemini versions you're ready for the next step step three we're going to configure how we want this animation to look now Gemini makes it very easy for us to do by exposing some properties that we can simply just set now the easiest way to do this is just to go on the Gemini github page and take a look at the animations you want to replicate and copy those sets of preconfigured properties and use it in your Xcode project now obviously you're free to configure it however you want to create a custom animation but if you want to get started fast and you kind of like the preconfigured animations already feel free to copy those so in here we're going to configure the animation and you can do it right here after you set the datasource and the delegate and the easiest thing to do if you're not sure about what sorts of settings and properties to use it's just go the github page take a look at what sort of animation you want to do for example this one right here then you might just copy this and you would just paste it in there now if you're iboutlet property isn't called collection view then you're obviously going to need to change this part but since mine is then I don't really need to change any code here now let's move on to the next step step four we have to tell it where to animate the cells there are a couple places we need to do this namely when we set up a cell when a cell is going to be displayed and when the user is scrolling the collection view so the first place we're going to tell it to animate is when we're setting the cell and that's in here so we're DQ in a cell casting it as my cell and then we're calling the set cell method to pass in the image so that the image view can be set and in here we're just going to and make the cell and the way you can do that is by calling the animate method of the Gemini collection view class and passing in the cell so let's first access the Gemini collection view and actually because I've called my iboutlet property collection view with a lowercase C it it's ambiguous as to whether it's referring to this parameter which is a type of UI collection view or if it's referring to my iboutlet property which is a Gemini collection view so in order to specify that I want my property instead I should probably shouldn't have named it that in the first place I'm gonna use the self keyword then it knows that I'm actually referring to this guy up here as opposed to the parameter in this method which I'm writing this code statement so animate cell is the method and we're gonna pass in cell the second place we have to animate is when the user Scrolls so in here this one we're gonna call self thought collection view thought animate visible cells and then finally the last place is the will display when a cell is about to be displayed and we can access the cell that is about to be displayed via this parameter here now this is a collection view cell type but we actually know that it is a Gemini cell type so we can cast it say if let's sell equal cell as my cell so just to double check that it actually is a type of my custom cell in that case we can call selfthought collection view not animate cell and then can pass in that cell now let's run this project and take a look at what we have now if you wanted to change the animation you could just go in here let's say let's try this cube one and you would just replace this where we configure the animation you don't need to touch any of those other statements that we've done in this step and now I have a question for you is there a particular animation that you'd like to see how to do just leave me a quick comment below and let me know what it is and I'll definitely consider it for a future video now for more awesome iOS tutorials please hit that subscribe button below and join the code crew family I would love to have you and if you're just beginning your iOS development journey and you want to learn with me stepbystep don't forget to check out my beginner's playlist right up there and if you've got a little more experience under your belt and you're ready to build your own app don't forget to check out my sevenday app action plan that's going to give you a customized roadmap for your particular app and tell you how to achieve it