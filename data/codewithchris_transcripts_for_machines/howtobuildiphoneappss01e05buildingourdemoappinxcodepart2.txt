Okay, so once again, i'm going to open up the assistent editor view. Its going to show me the controller for this view and if it doesn't i can use this jump bar to select the appropriate controller. so in order to make the controller to respond to touch events on the button, i have to create a handler in the controller. And how we do that is you hold down CTRL, and you click the button you want to add the handler for and you drag, while holding down CTRL, you drag it to the implementation declaration for the controller. Let go, and you can give it a name. So i'm going to call it rollButtonClicked and the event you want to respond to, see you can respond to all sorts of events. But touchUpInside is the one where the user taps the button and his thumb is still inside so that's the one we want, and click Connect. It creates this method handler for us which im going to cut and put down here. So what do we want to do now. When the roll button is clicked, what we want to do is get a dice number from our data controller. So lets create a new instance of our diceDataController. Before we can do that though, we have to important the header file for the diceDataController because if you remember, the header file contains information about how we can interact with that class. Now if you look at the header file, it shows that there's one private method called getDiceRoll and that's the one we're going to use. So i'm going to go back to our rollButtonClicked handler and we just added the import statement for the diceDataController so now i can go ahead and create a new instance of it. I'll call it model. Create a new instance of our class and then create a variable to store the number that we create. See, there's the instance method that we had written. So this is going to call the getDiceRoll method of our model which will return a number from 1 to 6. And we're storing it in this integer called roll. So now that we have our die roll, how do we get it back onto the screen? So in order to do that, we're missing another view that we have to create. So we're going to go back to the project navigator. I'm going to right click, create a new file. And once again, create a class. I'm going to call it DieView. But this time its going to be a subclass of UIView which is something that we can use to display stuff on the screen. I'm going to save it in the root. Ok, now you might be wondering, thinking back on our MVC pattern, we have our model that is diceDataController we have our controller, which is the ViewController class right here and we have our view, ViewController.xib. So why are we creating another view? Well, views can actually be made up of multiple view together. So you can add a view into a view to create composite views so that's exactly what we're doing. We're creating a view for our die and we're going to add it to our interface here. Ok, lets go back to interface builder here. Down here, we're going to type UIView and drag this over and put that here. But size it the way that we want to. So i'll do 90 and 90 and put it into place. We're going to have another one so i'll drag another one onto here. Now remember when we created our DieView we subclassed UIView and now we're adding UIView elements onto our interface builder file. So now what we want to do is specify that this UIView is actually an instance of DieView and how we do that is if you go back to the attributes on the right here. In this tab, you can change the class from UIView to DieView. And just like that, this guy is an instance of DieView. I'm going to do the same with the second one. And i dont want a white background so i'm going to this other tab, and change background from white color to clear color. Now going back to the DieView, i'm going to add a method in here, a private method, called showDie. Implement that method now. Actually we're going to have to change this because having a method called showDie, this view needs to know which die to show. Which die image from 1 to 6. So we're going to add a parameter that's passed in called "num". And its going to display an image representing the number. Remember we display images using the UIImageView class. So we're going to create a property of this class. It's going to be UIImageView type and the property itself is going to called dieImage. So in showDie method, im going to check if our property, dieImage, is nil. I have to do self to reference the property. If it's nil, meaning if this variable is not referencing an instance of UIImageView yet, i'm going to create an instance of it. I'm going to assign it an instance of UIImageView, allocate it. I'm going to specify where to create it. These are x, y coordinates followed by the width and the height. There we go. And i'm going to place this imageview into this die view. So self refers to the die view itself. I'm going to add a subview and UIImageView IS a subclass of a UIView. You can see there that this method addSubview, expects a UIView. Well i can actually assign it our UIImageView. This effectively places the imageview into the dieview. This only happens if the property dieImage is nil, if it hasn't already done this before. Because episode 5 was quite long, i split it up into 4 parts so it's easier to digest Click the link in the description to go to the next part or click this annotation to proceed. Alright, i'll see you in the next part.