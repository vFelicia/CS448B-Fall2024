in the last lesson we stored our API key in a config file and we were able to successfully retrieve data from the YouTube API if you missed that lesson check out the playlist right over here so the first step is to fill out the properties of our data models according to the response that we get from the YouTube data API so let's take a look again at proxy man and this tool is really helpful um especially because you can just send the request and look at the response and get this tree View and then you can kind of go through like this um sometimes the documentation will have the response so this is the YouTube data API I know the API Explorer if you use this and you try out the request you're going to be able to see the response so here this kind of gives you an idea yeah so if you don't want to use proxy man to look at it you can look at this as well so this would be the playlist uh object or instance and this would be the items right and each item is a video if you click on that you can see these are the properties of the uh of the video actually let's use this because the text is bigger than we have here in proxy man we're going to start with the video itself so we're going to add the decodable protocol and this allows us to turn the Json data into instances of video uh using Json uh decoder so let's bring up the API documentation so what I'm looking at right now is a single video so we can see that it has an ID which is a string and this will be helpful for us because um we want to put these video instances inside a swift UI list and it needs to be able to identify between different videos so we are going to pick and choose the properties that we want to we want to parse essentially so there's going to be a uh string ID okay and then there is going to be a snippet and inside is going to be a title it's going to be a description both of these we need and those are strings and then there's also going to be thumbnails let's first focus on title and description so again this is a snippet property and the snippet itself you can see these curly brackets right that represents a different um instance or struct or object whatever you want to call it all of it is representing the same thing so we're going to say snippet is going to be it's going to be a type of snippet and I'm going to make this optional in case it doesn't exist yeah snippet and not Snippets okay make sure that the property is the same and I'm going to create another struct in here called snippet and it too is going to be decodable so inside the snippet is where I would put title in description okay so these I mean all videos should have a title in description right but just in case they don't you can make them optional for now I won't let's just see what happens and then inside the snippet we have thumbnails what else do we need here uh we need the the video ID let's deal with that before thumbnails because there's quite a bit in here with thumbnails so let's do resource ID I'm going to spell it with a lowercase R like this um let's do that so then here I'm going to create another struct called resource ID that is decodable and and the resource ID has well the only one I'm really interested in is video ID and it's a string and I know that all videos must have a video ID okay so let's deal with thumbnails was it thumbnails with an S this was inside the snippet so thumbnails with an S yeah and then this itself is its own thing so we have to Define that let's call this thumbnails so let's create another struct called thumbnails and this is going to be decodable as well and what do I need in here it's key let's take a look at proxy man here to look at a real response uh we've got the snippet here and then we've got the snippet H thumbnails right here let's open this up and then there are several different ones standard medium default High Max res so you can try out these different ones these are all different uh file sizes you you probably wouldn't want to get this one like this is the biggest one unless you're showing it on an iPad maybe or you want it super clear when I was building my demo I was pretty happy with medium so that's what I'm gonna go with actually medium is almost the smallest one default is is pretty small so this is double almost double that size but uh I remember why I chose medium is because the aspect ratio is different so you can see that um these are about yeah the aspect ratio was a little different some of these look more square and some of them look more like a widescreen type of thing so so I figured out like after trying them out that Medium was the one that displayed nicely so that's what I chose um yeah so I'm going to say VAR medium and what's the type so the type itself is another object so I'm going to have to create you know something for that just to house these three properties this one is a string um this one is an INT and this one is an INT as well so let's create a struct thumbnail size this is decodable to what is it URL is it like that height yeah okay and then this one will be just thumbnail size do I have everything I need so I have the thumbnail image URL I have the video ID this this is for the video player and then I have the title in the description I think this is it perfect and then going back out so this is a single video going back one step this is the playlist okay and the playlist has and items which is an array of those video instances so if I go to playlist let's make sure that this is also decodable and we want items right like that I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about CW C+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson right and let's also we need to add identifiable uh which allows us to use an array of this inside the Swift UI list and we have the ID already for the identifiable protocol because that's what that requires and I think we're okay now let's try to parse it let's go into the data service and let's continue parsing the data so we are going to uh first create a Json decoder and then we're going to say decoder do decode a certain type from so we're going to decode the data from here and we are going to decode it into a uh an instance of playlist so we're passing in the playl list as a type and so we have the add. self this is how you specify a type oh I forgot to point out that this decode method can throw errors so it's asking you to do try so we can put the try right here since it's already in a do block that's perfect we don't have to do another one unless you want to specifically um handled that error versus this error I'm sure you can different differentiate in here though when you catch it okay so let's capture the result of this decoding so let playlist equals that and then as you know our playlist instance has items which are the videos and this is what we are going to try to return right because remember this method right here returns an array of videos all right let's see if this works works let us go back to our views and double check what we're doing here all right so I'm going to set a breakpoint right here by tapping here which is going to pause the execution um you know what let's not let's let's add a little bit more before we run this okay that way we can visually see something in the simulator let's use a swift UI list okay and we are going to pass in the video and because the video uh struct is identifiable then that is all good that means we can use it in this list and then we are going to display for each video Let's just display the snippet title and if that is nil just say just say title okay let me just do that all right let's see if we can see anything come up oh it was so fast but we could see the response sorry the request go out the response comes back with five items and sure enough we see five items right here now I expected to see more because our playlist actually has like eight videos or nine videos in here 10 videos actually so let me take a look at here I think by default yeah the default value for Max results is five so this is something that you'll want to set as well let's change that in our data service what was that Max results capital r so I'm going to add that right here Max results equals 20 let's say and this it's telling us that we never checked the response so we can just ignore that by adding an underscore like we don't have to name that all right let's run it again happen so fast there we have everything so what we did here to Day by parsing the Json through looking at the response and then mapping these key value Pairs and creating these properties in our data model this is something that is very common to do uh so it's best to get familiar with this process if you want to work with different apis in the future all right now that we have the video instances showing up in the feed view the hard part is done all we need to do is show the thumbnail images if you're enjoying this build so far please give this video a thumbs up up and if you've been following along and you are able to parse the Json data please comment down below saying Json is no match for me all right thanks for watching and I'll see you in the next lesson