hey coders how's it going I hope you guys are having a great day so far so yesterday we finished this simple version of the YouTube video app where we hardcoded the video data next week I plan to start the shopping app but I'm still finishing up a couple of things for that and inbetween for these two days I didn't want to start and do the parsing for the dynamic version of the YouTube video app so instead I'm going to take a couple of outdated videos that I have on my youtube channel and update them for Swift one of those videos is how to play a movie stream on your app so I'm going to show you what we're going to build first so for this demo I just have a simple play button that when tapped is going to launch another view controller with a video that's on the net and that's going to play so something like this so I'll show you the code right now and you can see that the URL is something like this it's sitting on the net it's not in our Xcode project alright so let's start a new Xcode project and build this and you'll see that it's actually not that hard to do we're going to go up here to my Xcode menu and start a new project just going to start a single View application for this demo and call it AV player demo and make sure that the language is Swift and the device is iPhone and you have none of these checked I'm going to click Next and I'm just going to save this on my desktop I'm not going to create a git repository okay so I'm going to first start by scrolling down in my project properties and under linked frameworks and libraries we're going to click this little plus icon here to add a couple of frameworks that we need actually you don't even need to search for it but if you type in a V you're going to see a V Foundation and a V kit I'm going to highlight both of them and just click Add and you're going to add both of them like that or you can add them individually so next we're going to go into our main storyboard and we're going to search for button and that's just going to be the play button that you in the demo earlier I'm going to drag that here in the inspector I'm going to change it to play and then let's make sure you have that selected and let's horizontally and vertically Center it in the container okay so update the frames for that guy now we're going to attach an IB action handler to the top method of this play button so I'm going to open up the assistant editor and hold down control from the document outline I'm going to drag click and drag under here where we can declare a new method now let go I'm going to call this play button tapped and this is where we're going to add the code to trigger the video and actually I just made a mistake here so this is something to watch out for I by default when you do that it adds an iboutlet but what I actually wanted was an IB action handler so a lot of people who accidentally do this they just delete this IB outlet and think that all is fine but that's actually not the case because in this storyboard that element is still connected to that IB outlet which you just deleted so you want to go into your document outline in your storyboard and right click or ctrl and left click and scroll down you can see referencing outlets the button is still attached to this play button tapped IB outlet which doesn't exist anymore so that's going to cause a crash and we want to click this X to delete that so let's try this again hold down control click and drag it drop it here and this time for the connection type we want to choose IB action so this time I'm going to say play play button tapped and the type is UI button touch up inside is the event that we want Connect and now we actually have an IB action method so in here trigger the video to play now we're going to go back to the view controller let's go like the single view up here we want to import those frameworks which we added a V Foundation and a V kit because we're going to be using classes from those frameworks and up here let's declare two properties which we're going to use so let the AV player viewcontroller equals AV player view controller and secondly let AV movie player or actually it's just let's just call it AV player be an optional AV player and the class is just this one that's plain AV player and make that an optional because we're not going to create the ad player object up here we're going to do it in the viewdidload right here okay so let's declare our movie URL so I've got it right here this is the URL which the demo played so I'm just going to copy and paste this here for now we're going to put this into a string so we're going to declare an nsurl because that's what the movie player accepts we're going to say let you let's say movie URL equals nsurl and the initializer we want to use is this one here where you can pass in a string and then returns an optional type nsurl okay so we're just going to copy the string and paste it in there okay so remember that this returns an optional nsurl so let's label it like that so we don't forget next we're going to create a new AV player object and we're going to put it into this property here so we're going to say AV player let's say selfthought AV player equals AV player open it up and we're going to use this initializer which takes in an nsurl object because this movie URL may be nil if it couldn't create the object this would be nil we got a check if this URL actually exists first so let's use optional binding if let URL equals movie URL inside here passing the URL inside this statement we can be certain that movie URL actually contains an nsurl object so we're going to pass that into the creation of our AV player and then finally we're going to set the AV player view controller it has a property called player so this is the player which is going to source the media content for the view controller we're going to assign our AV player to that property okay so Xcode is complaining about something here let's see what it says change to let I cannot assign property because it's a let constant so up here we're not going to be able to use a constant we got to change this into a variable so that we can assign it right here into that property so now we're pretty much ready to play it we've got our AV player view controller setup we've got our AV player setup and pointed to this URL and the last thing we have to do is when the play button is tapped we're going to say self dot present view controller and the one we're going to present is the self dot a V player view controller for animated let's say true and for completion when it's presented we want to trigger we want to start the movie playback so let's just double click this completion Handler and add some code in here selfthought AV player view controller dot player dot play the reason we have this question mark here it's called optional chaining because in case this player property doesn't actually have an object this question mark here won't cause a crash because we're trying to call the play method on the player object so if there is actually a player object in there then it will call the play method on that but if not if it's nil then it won't cause a crash because we have this question mark here ok so now let's run it and let's see it in action okay so let's hit play and you'll notice that we can't play the video here if we look in the console for Xcode it says app transport security has blocked the clear text HTTP resource load and that's just Xcode making sure that we understand we're loading things through an unencrypted channel so to acknowledge that fact what we can do is add an exception for text slides comm or we can just tell the project that we can allow resource loads through any unsecure channel even and that's what we're going to do for the purpose of this demo I'm just going to go to the info.plist click plus and then you're going to be able to add a new key so app transport security setting make sure you type in capital a P and then this will show up so inside here I want to add allow arbitrary loads and change that to yes and now when we run it we won't run into that problem now because we've told Xcode that we understand and we we're going to allow resource loads through an unencrypted channel so when I hit play you're going to see that AV player view controller popup and you're going to see the AV player object play the movie stream so I hope that was helpful for you guys and I'll see you guys in the next lesson talk to you guys later bye for now you