hello and welcome in the last lesson you learned about the swift ui button and how to handle user interaction well in order to change the data and then reflect that change in the ui we have to learn about state properties and that's what this lesson is all about but before we dive in in case you're new here my name is chris and welcome to code with chris the place to be if you want to learn how to make an app here's a fun fact i discovered coding when i was in grade 12 and i was about 16 years old how about for you when did you discover coding let me know by leaving a quick comment below and if you wouldn't mind please give this video a thumbs up really really helps out thank you so much with that said let's dive right in all right so i want to revisit that view update lifecycle diagram for just a second do you remember when we showed a link from the data to the view code well let's go ahead and do that with our war card game project so what sort of data do we have in this project well if you take a look at the user interface here you can see that we need to keep track of which card the player has which card the cpu has and then also the scores of the player and the cpu so that's four pieces of data let's create four properties in our content view structure to represent those four pieces of data so right underneath the opening curly bracket of content view i'm going to go ahead and declare var cpu let's do player first player card equals and um i'll just mimic the cards that we have there so we're gonna have card two and well actually let me just i'll change it we can put something else to start and then cpu card equals let's say card nine and then let's represent the player score and this is going to be an integer uh let's start with zero as well cpu score equals zero all right so now we have these four properties representing the state of the game these four properties are our source of truth because it represents how the ui should look now how do we reflect these pieces of data in our user interface well we need to reference these properties inside our view code remember that these properties being declared in the scope of this structure means that it's available to be referenced in any of the methods in the same structure as well as in this block of code for our computed body property so if we look down here for this first card that is right here and we have hard coded a string in there saying card two instead of hardcoding a string there let's put a dynamic value by specifying our player card property so let's uh update our automatic preview just to make sure that that runs and everything's good and you can see that that card changes to card 5 because that is what the value of player card property is let's do the same thing for the cpu card instead of hard coding card three here let's put the cpu card property okay you see that change and down here for the score instead of a string of zero let's put our player score property now you're going to notice an error here it says no exact matches in call to initializer and that's because for initializing a text instance we need to pass in a piece of string data but player score remember this is an int property so it contains int data but how we can get around this is we can turn our int into a string well at least the string representation of a number so the way we can do that is we can create a new string instance and just pass in the we can pass in the integer so this one would be player score and we're going to do the same thing for a cpu score we're going to create a new string and we're going to pass in the cpu score and just like that we have our four pieces of data being represented in the view code and in turn in the ui now all we have to do is when the user taps on the button we can update this data in the properties and have the ui automatically change right well not so fast why don't we go ahead and try and do that and let's take a look at what happens so in the last lesson we had changed this deal image into an actual button right now that action closure is empty let's put some code inside this action closure for our button here we are going to update the cards and we're also going to update the score now if you try to update the property like here let's try to update playercard equals card 11. you'll see that you can't xcode will complain and say cannot assign to property self is immutable now self refers to the instance of a content view and immutable means that it can't be changed you see instances are value types and because of the way that they are allocated in memory they can't be changed now i know that makes absolutely no sense to you right now but i promise you in a future lesson we will talk about that and then it will make complete sense for now just understand that we can't change the value of our property unless we use a property wrapper a property wrapper is a keyword in front of our property declaration that changes its behavior now specifically i'm talking about the state property wrapper so let's go ahead back up to our property declarations and see how we can use this state property wrapper to change the behaviors of these properties so that we can change the values all we have to do is in front of the var keyword of our property declaration we are going to write at state and by adding that keyword at state that is going to indicate that that player card property is actually a state property and it's going to allow us to update the value in it so let's go ahead and put this property wrapper in front of all four of our properties so that they are all state properties state properties have two special characteristics number one is that you can change the data in them we've already talked about that but number two is that inside the view code any references to state properties they will get notified of the data changes and then your ui will update automatically based on that new data so let's go ahead go down to the action closure of our button and try to update some of these state properties and let's watch the ui change okay so here we are and as you can see now the error is gone and i can put cpu card equals card 12 and let's go ahead and update the score as well might as well just do that so i'm going to say player score plus equals one that means to increment it by one cpu score plus equals one as well and we'll save this and then let's go ahead and do a live preview see if we can do that all right so this is a live preview when i tap on this button it's going to run the closure here wasn't that cool so when i tapped on that button we updated the data in the state properties right and because in our view code it references those state properties they got notified and the ui was rerendered to show the new data now the problem is that every time we tap on the button i mean it's incrementing the score which is cool but the player cards aren't being randomized so what we can do is we can use the random method of the instructor generate a random number and then we are going to append that random number to the back of the card string to generate a new card so let's take a look at how that would work generate a random number between 2 and 13 because if you look at the asset library we have card 2 all the way to card 14 actually so i would probably want to generate from 2 to 14. so i'm going to say let player rand equals int dot random and this method allows us to specify a range you specify a range with the lower end of the range dot dot dot and then the upper end and it should be inclusive if i remember correctly and we'll see in a second and let's declare another one cpu rand equals int dot random in two dot dot dot 14. and then what we're going to do is instead of specifying the number inside the hardcoded string i'm just going to specify card and then i am going to add player rand right and add cpu rand now we might not be able to do this and as expected we can't because as you know from earlier in this lesson what we're trying to do here is we're trying to append a integer to a string and what we have to do instead is convert that integer to a string first or get the string representation of that integer and there this should be dynamic now so let's take a look at this and see if it's what we expect this is perfect the cards are randomizing what's not perfect is the score down here we still need to determine which side wins and then increment the appropriate score so i am going to comment out these two pieces of code because we don't want to just be incrementing it by one each time now before we end off this lesson i really want to point out and stress how powerful this framework is what we're doing here is tapping a button it's running this closure and we are changing the value in this state property and because the state property is being referenced inside of our view code here it is detecting that data change and then rerendering what we see in the ui and that happens automatically all we're doing is changing the data in the past with ui kit this system didn't exist what we would have to do instead is update the data just like we're doing here but we would also have to update each view element manually and tell it what to display so what we'd have to do is get a reference to this image and then generate an image from this asset name from the asset library and then set that image asset to this image view and we would have to do that for this one as well and then we'd have to do it for the text here and the labels so everything we had to do manually now all we have to do is update the data and any pieces of ui tied to those state properties will detect the change and update automatically now by definition a state property is a piece of data that this content view depends on it's not something that other views would care about or depend on and so by that nature we can add the keyword private and just control the access level to these pieces of data so that they are only accessible within the context or the scope of this content view structure since it's only this content view that depends on these state properties all right we're almost at the finishing line we just have to compare the card values and then update the score state properties appropriately let's do a quick recap now you learned how to reference properties in your view code you learned about the state property wrapper we also learned about some new terminology including hardcoded values dynamic values and immutable meaning that it can't be changed now remember you can get access to all these quizzes and challenges and extra resources if you go to codewithchris.com and either sign into your account or hit the try for free button at the top and then enroll in the 14 day beginner challenge lastly if you like this video please give it a thumbs up and don't forget to subscribe for the next lesson in the next lesson we're going to go over conditionals and how to compare values using if statements alright i'll see you there