hello in this video I'm going to teach you how to build user interfaces for your apps using Xcode Auto layout system now if you want to know how to build cool you eyes like these then the Auto layout basics I'm going to teach you in this lesson or absolutely critical to know and if you watch all the way to the end you're gonna have a really good idea of how to build your own user interface for your own apps does that sound good let's do it welcome to code with Kris the place to be if you want to learn how to make an app I'm Chris and this is lesson 2 of my beginner series if you've missed lesson 1 just click on that thumbnail to watch that first alright now let's get started all right so let's pretend that we have to build a login screen for our app we're first going to start by doing it the old way and then we're going to jump into Xcode and use auto layout and do it for real now our first task is to place the logo on the screen Xcode uses an XY coordinate system where 0 X and 0 Y is in the upper left corner so this point would be 0 X and 0 Y or just 0 0 next take a look at this red dot this represents a location on the grid at 10 10 so you kind of get the idea if you specify a logo to be placed at this point at 10 10 then it's going to take the upper left corner of that logo and put it at that point now next you can specify a height and a width for that logo and that's going to adjust the size of it now together with the X the Y the width and the height that is called the frame of that logo element now you can continue to use this approach and place the rest of your labels text fields buttons whatever you need however when the login screen is shown on a much larger screen if not going to look the way that we expect and this is where Auto layout comes in so instead of specifying exact XY coordinates widths and Heights we specify rules to describe the location and sizes of all of the elements relative to other elements and these rules are called constraints now why don't we try redesigning this law screen using Auto layout constraints instead so here's our first login button I'm going to add a constraint to say that the horizontal center of this button should be the same as the center of the view in terms of the x axis so that is going to Center it on the screen on that x axis now I'm going to add another constraint to say that the button should have the same vertical Center as the view and that's going to Center it vertically on that yaxis now this effectively puts the button right in the center of the screen next I'm going to add the logo and I'm going to add a constraint to make its horizontal Center the same as the horizontal center of the button so that's going to be aligned the two elements like this I'm going to add another constraint to that image and this time we're going to say that the bottom of that image should be 20 points above the top of the button now notice I said points and not pixels and that's because in iOS we have devices with different pixel densities so for example on the original iPhone one point is one pixel they're one in the same but an Apple introduced Retina screens where they managed to squeeze four pixels in the same amount of space that used to be one pixel so on these screens one point is equal to four pixels and then Apple introduced the super Retina screens and these are for the plus sized iPhones where they managed to squeeze and nine pixels in this space that was once one pixel and so one point on these screens equals to nine pixels so that's why when we're designing our user interface we always speak in terms of points it allows us to have a consistent user interface regardless of the pixel density of the screen that it's being presented on so when you say 20 points from the left side it's going to look consistent on the original iPhone on a Retina screen or a super Retina screen now if this is kind of confusing to you don't worry because you're never really gonna have to worry about how many pixels things are you're always working in terms of points but I think that it's important that at least you know about this distinction now another thing I want to point out is that if I don't by a specific height and width constraint for this logo then it's going to just be set at its intrinsic size which is just whatever size the image is if you wanted to you could add constraints for the logo to make its height in with relative to other elements or even relative to the screen size but I'm just going to leave it as is now I'm going to do something similar with the second button that we're going to add I'm going to add two constraints one to say that it has the same horizontal center as the first button we're just going to align the buttons together and then I'm going to add a second constraint to say that the top of the second button should be ten points below the bottom of the first button just so that they have a ten point gap now we're gonna add the last button two constraints again one for the horizontal center and the second constraint to position it ten points below that middle button since all these elements have constraints that are relative to that first button if I move that first button around then all of the other elements will follow because the auto layout system is going to find a way to satisfy all of the constraints that you have added now there's a much easier way to achieve the same thing that we have here without having to specify so many constraints and I'll show you how to do that in lesson 3 for now though I think it's important for you to understand how Auto layout constraints work which is why we are doing it this way now let me ask you do you feel like being a bully today because we're going to be really mean to this logo right now why don't we add another constraint that contradicts an earlier constraint we added so let's say that we add another constraint to this logo to say that the bottom of the logo should be ten points from the top of the first button now notice that this contradicts the earlier constraint that we added that said that it should be 20 points above that first button so there's no way that it can satisfy both of these constraints that we've added this is called conflicting constraints and the system will actually choose a constraint to break and this can lead to unintended layout glitches so the tough part of working with Auto layout is just make sure that you don't have conflicting constraints because sometimes as you're adding these constraints in inside Xcode you might lose track of what you've already added and when you finally run your application you might get a bunch of conflicting constraints and the auto layout system will choose which ones to break and the layouts not gonna look like anything you intended it to now Xcode does give you tools to help you manage and resolve these conflicting constraints as you're soon going to see because the next thing we're going to do is we're gonna jump into Xcode right now and construct this login screen for real now there's one thing that I want to quickly point out and that's when you start your Xcode project you don't have to turn on Auto layout or anything like that to use it in fact it's just the standard when you start a new Xcode project you're gonna be able to just start using it right away so I've got a brand new Xcode project here using the single viewer application project template if you're not sure how to start a new Xcode project and I would say watch lesson 1 as we go through that in that lesson what we're going to do is jump into the main dot storyboard and we're going to get started we're gonna hit command shift + L and that's going to pop up the object library menu or you can just click on this guy up here and you can search for button here click it and drag it right there and to add a button on the screen and I want you to click on this align menu and choose horizontally Center in container and add that one constraint that's going to Center that button but you'll notice that there are some red lines above and below that button and also in the document outline here you'll see this red arrow and you don't see this document outline just click on this little icon here to open and close it so anyways I want you to click on this red icon and it tells you that the system doesn't know how to position that button on the vertical axis because there's no constraints to dictate how to position it so I want to do and you can see here the category for the error is missing constraints now go ahead and click back but just before we add that constraint there I want you to notice another thing and that is to click the button click on this align menu and don't be alarmed that this horizontally and container item is not checked but you might ask we just added that why is that not checked well the reason is because these menus down here are purely for adding new constraints it doesn't consider what constraints are already been added to that element in order to see what constraints you have added to that guy you can either click the button and go into the size inspector and you can scroll down a little bit under constraints you can see that we have this align center X constraint or you can open this part up in the document outline and you can see that we have this constraint in fact if you highlight that constraint right now I want you to go over to the attributes inspector and we can take a look at the anatomy of a constraint the main things that you need to notice is that an auto out constraint relates to one element which is the first item and how it is going to be related to the second item in which case here it says super view center X so what the super view means is it's just the view that contains that particular element in this case that is going to be our overall screen or our view and so the buttons the super view or another way to think of it is parent view is the view the screen itself and the properties it is relating is the center X all right so the button center X is equal to the super view center X and effectively that centers the button on this screen right here and then you can also play with things like the constant priority and multiplier and these just gives you a couple of different ways to manipulate how it is related to that second item in that constraint but we won't go through those right now so go ahead and highlight your button let's add that positioning on the vertical axis click on a line right here click on vertically and tainer and boom right there you learn all this that we have to constraints now for that button and if you click on this button and go back to the size inspector you're going to see that second constraint there so this is a handy way to see all of the constraints that are related to that element because in here this menu this can get quite long once you have many items on the screen all right so that's going to represent our first button we're gonna add a couple more now so go either use the shortcut key to open the object library or click on the button up there they add our second button click on a line horizontally in container and we're going to have this second button relative to this first one by 10 points right we're going to leave a 10point gap there so click on this button and then click on this add new constraints menu and it's going to have a couple of margins that you can set for to be exact you can enable or disable any of them just take note that if you edit one of these margins that's automatically going to turn on that constraint and then you can see it says add one constraint here so I want you to pull down the menu and you can see for this button that you're adding the constraint to what do you want that second element you know the one that it's going to be relative to what do you want that second element to be since we want this button to be ten points below this first button we're going to make it relative to that first button right so that's why you got to pop open this menu to make sure that this is selected so when you select that it's going to change the value to what it currently is so currently if 33.5 points away so just take note of that right for example if we did view and we did you know ten points away that would actually make this button go all the way up here and be ten points to the ten points from the top of the view right which is not what we want so make sure you the right element selected and click add one constraint and you can see there that constraint that we added right there this button is top is equal to the first buttons bottom and the constant is 10 so that's where the constant comes into play now if this is starting to get confusing because they're both named button what we should have done to make it a little more clear as we could have renamed things like that let's say first button in the second button and now you can see the auto layout constraints they change the names too so that's really handy to see now if you click on this constraint that we just added these second buttons top is equal to first buttons bottom by 10 points so that makes a lot more sense now let's add our last button right here again we're gonna align it first horizontally in container and we're going to add a new constraint and we are going to click enable that top one and we're going to make it relative to the second button by a factor of ten points again boom that lines it up right there let's not forget to name this guy our third button so we've got our a bunch of buttons there now we're gonna put a logo but the local is just going to be a text label in this case and we're also going to add a little little prompt a little instruction label above these buttons actually so let's do that press a pop it open again I like I instinctively know what the keys are but my hands know right but then if you ask me to tell you I have to look down at the keys first so command shift and L and that's actually one thing that now that we're on this topic I want to tell you about is is just muscle memory right so you know at first when you're learning this stuff you're going to be slow and especially when you start learning Swift and you're you're gonna start learning the syntax you're gonna try to memorize keywords and you're gonna try to memorize things but you don't really need to do that all you need to do is just build more apps go through more demos go through more tutorials and your fingers almost they have a mind of their own so your mind thinks you know I want to open up that object library and your fingers they just kind of like know what to do your hate they you don't have to think I need to press command shift and L initially it will be like that but as you do it more it's just going to be very instinctive so I just want to I just want to point that out don't get discouraged if it doesn't come easy in the beginning now I added this right here and you'll notice that there's a yellow error now it's not red like before red men error yellow instead means this this element doesn't have any auto layout constraints so why don't we position this also we're going to position it horizontally in container and we're going to specify the bottom margin this time and we're gonna say that it's gonna be relative to the first button by 20 points right actually I want to show you one cool thing and it's gonna save you a lot of time hopefully so let's say that I when I drag my label it was over here it was all like almost on top of that first button and you know I want to position it relative to that first button by 10 so I go ahead and enable that constraint hit 10 pull down this drop down but the first button isn't there I can't choose the first button in this dropdown why is that well the reason is because your label is overlapping that first button so it doesn't come up as a neighbor here so you need to make sure if you want to make you know an element relative to another element you have to make sure that they're not overlapping and sometimes they could still be overlapping even though they don't look like that in the view because we mentioned the frame earlier in this lesson if you check this button now you can see that the frame actually extends and beyond just the word button you can see these these white dots here and that's so that's part of the frames even if the frame of the label is kind of touching the frame of the button and you know it's not like the text isn't overlapping but at this point they could still be overlapping in fact yeah they are and so I won't be able to see that first button but if I just drag it out a little bit more I can then choose the first button so hopefully that saves you a lot of time because you might not realize that in the beginning so let's add that one constraint boom that's right there another cool thing is that lets say I drag this away you can see these lines they kind of turn orange right now and that's basically saying that the auto layout constraints for that label they aren't taking effect right now because you like dragged it away so what you're seeing on the view is not reflective of the constraints that you've added to fix that all you have to do is click this little update frames button that's going to just run all the auto layout constraint rules and that's gonna put everything where they're supposed to be according to the constraints that you have added all right so this this label we wanted this to say login or create an account that's kind of what I wanted to say at least okay we're gonna add another label I'm gonna drag it like that I'm going to put it in the center and we're gonna position this guy bottom constraint relative to this label right here and I'm gonna say something like 30 and this is just just me making up stuff right now so I'm gonna call this social squid and in order to put this in two lines what you can do is actually change the number of lines from one change it to zero and that actually means multiple lines now inside here in this label you can actually do line break if you just press control enter then you're gonna be able to put a line break and we're gonna Center this and we're just going to change the font now you might not have a veneer next and that's completely fine next let's add some text to these buttons so this one is going to be sign in with Facebook sign in with the rule with email now I want you to notice that you can add an image to these buttons and that is going to add a little icon beside the button or you could also add a background image which is what we're going to be using and you can set background colors and stuff so you can really go in depth with customizing your buttons but because this is an auto layout lesson I want to focus on Auto layout constraints and that sort of stuff and not customizing buttons so I've actually prepared some graphic assets just to get the look in the feel of the button that we want without going too deep off the depend on customizing buttons so what I want you to do is grab these images and these images I've made available either in the link in the description below or you can click on the upper right corner you can download these resources so that you can follow along so after you unzip the file and you grab these asset images just drag them into here and just a quick note if you don't understand why there are like three sizes of each image one X is the original size 2 X is 2 times as large and 3 X's you know 3 times bigger the reason is because there's different resolutions of the iOS screen so all the retina screens will use the 2 X and the super Retina ones would use the 3 X that's why there are three different sizes and the right size will be used depending on what screen the device the user is using so like I said these button graphic button graphics I added this rectangular background solid color to it you you know technically could have just customized that and in fact if it were like a production app I would wouldn't recommend exporting your graphics like that but like I said this is for the sake of because we want to focus on Auto layout sorry I'm losing my words here so what I want you to do is highlight the three buttons by holding shift on your keyboard and clicking all three and then choose alignment left and that it's not gonna do it oh actually no that's fine that's fine all right that did do it it's just that they didn't align left because the size the width of the buttons are variable right now so I want you to click on that first sign in with Facebook button and change the background to Facebook and you can see it's gonna balloon up we're gonna change that text color to white so you can actually see it and you can actually adjust the the text inside that button by going into the size inspector and just setting the content insight to something like 20 for example so let's do the same thing for the Google button but let's just change the background image first and then and here we'll change the content inset and then we will change the font color to black and so sign them with the email at the email image and change the text color to black and change the content in set to 20 and then we are going to add a background to this so search for image view and all I want you to do is just plop it anywhere it's just going to cover something and I want you to choose a background and then I want you to hit this adding constraints and we are going to enable all four constraints and we are going to change we're going to unconstrained to margins and I'll explain to you what that means in a second and we're going to change these all to zero so by default there are margins for text for example and because we want the image to go like edge to edge ignoring all the margins you know to all four sides of the screen we are going to uncheck constrain to margins another thing to note is that there is something called a safe area and because you know with the new iPhone tens there's like a notch so the safe area is just an area where nothing will get obscured no matter what device you're using so if you want like let's say you're laying out text then you definitely want to stay within the safe safe area so how do you stay within the safe area well by default all the constraints you add will be relative to being in the safe area if you don't want to be in the safe area so for this image we want it to go edge to edge we don't want to go under the not like we don't want to leave any gaps on the to the left and the right of the knotch and so we want to go all the way to the top of the screen we would pull this drop down and then we would say relative to the view you can and notice that changes the number back to 72 so just click all of these drop downs here and choose view instead of safe area so we want to choose view okay and change these all back to zero okay and now add four constraints and that is going to stretch it all to all four sides now if you accidentally made a mistake that's not a problem just go in to the size inspector for this background and here are the four constraints you've just added doubleclick any of them and that's going to highlight the constraint and then in here you can pull down the dropdown and you can say you can choose super view instead of safe area so that's how you would fix it or you can just delete the constraint andrey add them now the problem here is that our image view is covering everything and that brings me to another important point which is layer or now if you look at this document outline this is also called a view hierarchy and the reason it's a hierarchy is because some of these elements they allow you to put other elements inside of them like they're a container element just like this view is this view this what represents our screen here contains all these buttons the labels and this background image well you can have other container views and you can have like multiple layers so it becomes a hierarchy and anything that is closer to the bottom of the hierarchy in the same level is closer to the users so for example this background image right it's all the way at the bottom of this hierarchy at this level and that's why it's the closest to the user and it's covering everything else we want this background to be at the back right we want everything else to be on top of this background so all we need to do is click and drag this guy and reorganize it to the back so now you can see we've just pushed it as the back element you can ignore the safer area here actually actually if you click this you can see where the safe area is but anyways that background now is that back most element and so all these elements are above it now that we have our layout looking kind of like what we want I want to quickly talk about conflicting constraints so why don't we do that example that we did earlier by making this logo adding a second constraint so that it is relative to this guy but 10 points away from that guy you keep in mind there's already a constraint that says it should be 30 points above this label I'm going to add a second conflicting constraint to say that it should be 10 points and instantly you can see that there's an error illustrating that there are two constraints one says 30 and one says 10 and if you click down here you can you click this little error icon here you can see there's conflicting constraints so what you can do you can just delete while one of them right so you can't actually delete it from here but you can highlight one of them and just delete it that's gonna fix the problem so also when you run your app and if there are conflicting constraints it's gonna tell you in the debug console in this area down here ok so how do you check if your layout looks good on multiple devices well there is this little option here it says view as iPhone 8 you can actually click this guy open and change the device you're viewing it on so let's say 10 R you can change the orientation and see that it is a little squished although you can see everything and there are certain things that we can fix up pretty easily and some things where we're gonna have to add constraints to fix a specific device so in order to give you finer grained control of how your UI looks on different screen sizes and devices there is something called size classes and they're kind of like categories of devices so because Apple has created so many different sizes of iPads and iPhones while you can't configure them specifically for a device you can configure your UI specifically for a size class or a category of devices and Apple has organized all of their different iOS devices into different categories so we're not going to get into size classes right now because this lesson is already running kind of long but I do have a bonus video for you that we will go into size classes and I'll tell you what they're all about and how you can set Auto layout constraints for specific size classes but not other ones so that you can change the look of your UI depending on whether or not you have more space or less space so you can do that it's not it's not a requirement right now we don't really need to do that but if that is something that you're interested in right now you can go grab that bonus training now autolayout is just one of those things that gets a lot easier the more you do it so I've got three practice exercises for you to do and also another bonus autolayout training video that you can watch you can grab all of these resources right there in the next video I'm going to show you a specific UI element that's going to allow you to reduce the number of auto layout constraints you need to add it's going to speed up your design and construction considerably now I want to turn it over to you with the app that you want to build are you gonna focus on iPhone or iPad let me know right now by leaving a quick comment below and if you like this video please give it a thumbs up and subscribe by hitting that red button below and hit that Bell icon too if you don't want to miss the next lesson alright so click over to lesson 3 and I'll talk to you there