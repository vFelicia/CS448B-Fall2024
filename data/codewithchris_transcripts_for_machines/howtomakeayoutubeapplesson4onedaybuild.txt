hey code crew in this lesson we're going to parse the json that we got from the youtube api from the previous lesson now i had originally intended to do that and more in this lesson but it turned out that parsing json required some careful and deliberate explanations so i want you to pay extra close attention in this lesson and rewatch the bits that you don't quite understand the reason is because parsing json is such an integral part to building ios apps especially if you're going to be working with apis in different platforms alright with that said let's dive in just a quick note if you're jumping into the series at this point you kind of need to watch these lessons in a progression for it to make sense first make sure you've watched the 29 lesson beginner series to get the basic skills then make sure you're watching this youtube app one day build lessons in order links to both of these playlists will be in the description so let's start off where we last left off and that was after downloading the data from the youtube data api and we got to this point so we were successfully able to send a request with the api key and retrieve those playlist items but now we have to parse the data into video objects and that's what we're going to go through in this lesson now before we begin one quick thing i want to mention at the end of the previous lesson i forgot to check in our code into source control whenever possible if you've finished the segment of functionality and it's working you've tested it it's a good idea to check it into github or whatever source control you're using that way when you're moving on to the next thing and you maybe mess something up or you want to roll back you don't have to roll back all the way back to the beginning so that's what i did a couple of minutes before starting to record and so i you know i made this commit for our project in github here and also bitrise picked it up and automatically then ran the code to double check that i didn't make any mistakes so that's the great thing about having bitrise hooked up to github and again links to both github and bitrise are in the description below now one quick thing i want to mention is that when you are checking in your code into a public repository like this one is where everyone can access it just be very careful about sensitive information like api keys and stuff like that um i initially accidentally checked in my api key so then i removed it but then the thing is you can actually peek into your commit history and um you can see you know the code that um that was in previous commits and previous versions so i basically had to regenerate my api key so the one that you can see in here no longer works all right anyways let's get back to the topic on hand today and the first thing i want to do is really revisit that api call i'm going to take the json response and i want to indicate to you and point out to you which pieces of information from that json we want to extract into our video object so i'm going to go ahead and copy this json response and if you're unsure about what this is you should watch the previous video where we made this api call and got this json response containing the videos that we want so i'm going to copy all of this because i mean this window is kind of small to look at and i'm going to go to a website like jsonlint.com and this basically is a validator for json now the valid the json that comes back from the api call will definitely or should be valid i would assume that it is but the other nice thing is that we've got a nice big window to explore this json so let's take a look at what this is and especially if you don't know what json is i'll just quickly go over what we're looking at here so let me just sort of collapse as much as i can here actually let me just collapse this root node so you can see that everything is contained within these curly brackets here and these two curly brackets indicates uh a json object so this whole thing is a json object the thing that gets returned if you open up the json object all it is it's pairs of keys and values so you can see here kind is a key and then there's a colon and then on the other side of that colon is the value right so this is a key value pair so it's the value is sort of like the data the the key is kind of like the label describing what the data is so there's a key value pair there's a key value pair there's one we don't really care about these key value pairs which is why i'm skipping through it but you can see here now that we have a key called items and the value for items well it's actually an array or in other words a list of json objects of other json objects so you can see if i collapse these json objects because because remember i told you that curly brackets indicates a json object so items is a key and the value for items is actually a list of these five json objects now each of these json objects if i expand one of them you can see it contains more key value pairs and it's got kind etag id we get that to snippet that key the value for that key is another json object so you can see there's this nested effect sort of going on all right if i expand this json object what's inside well now we're starting to get to some of the data we're interested in in for the video we have this published date right the key is published and the value is the date the video was published on we have title description those are pretty selfexplanatory we have a key called thumbnails where the value is actually a json object and that json object contains keys called default medium high standard and max res basically describing what resolution of the thumbnail you want so we're interested in the high key that's what we need if i expand this key the value for the high key is another json object containing these key value pairs and ultimately this is what i'm interested in the url key and this value is the url for our video thumbnail okay so that's where we would get the thumbnail url going on we have this key value pair this one this one not really concerned about those check out this key resource id the value for this key is a json object which contains two key value key value pairs we're interested in this key value pair the key is video id and the value is the actual id that we need to specify in the url so that we can actually display the video so we need that piece of data so if you take a look at what we've got here in our xcode project we have a video struct this is what we declared and we have these properties video id title description thumbnail published these are all the properties we need to set from the json data that i just pointed out to you right here so if i collapse this again each of these json objects under the items key each of these json objects needs to be converted to a video object so ultimately when we parse this json response or translate this json we are going to end up with a list of five video objects right we've got these five right here now this process of translating this json into uh that list of video objects is called parsing json or more specifically decoding json into our video objects now to make this process easier swift has something called the codable protocol which basically allows us to specify instructions on how to translate this json into an array of these video objects now the codable protocol is actually a combination of two protocols encodable and decodable it lets you specify instructions for translating both ways decoding the json to the video object and also encoding a video object to the json format since we're only interested in decoding the json to a list of video objects we're only going to use the decodable protocol instead of the twoway codable protocol but oftentimes when you look up how to parse json with swift they will call it the codable protocol but that's really a twoway street so just to reiterate we're only going to use the decodable protocol and we're only going to specify the decoding instructions on how to map the json to properties of our video struct let's first start by indicating that our video struct is going to conform to the decodable protocol and next we're going to write the decoding instructions on how to map those json key value pairs into the properties that we have here and that happens inside an initializer and sometimes autocomplete will help you and you'll see it on this list and sometimes it won't and you'll have to manually type it out so i'm going to type it out here and then sort of explain to you what it does so basically there's a class called json decoder and it takes the json data and you tell it uh what data type to try to decode that json into in this case we've indicated that our video object is decodable and what that json decoder is going to do is pass one of these json objects here that because there's five it's going to pass one of them into this initializat into this initializer method and in here you're going to write the instructions on how to turn this json object with all of these key value pairs and sort of map it into here so that's basically the gist of what we're trying to do now there is one step before we can actually get to writing the instructions and that is specifying the set of keys that we are interested in um and this set of keys has to exist in order for in order for us to be able to parse that json object into a video object so how we specify this is with a special enum that we can declare up here and this is going to be called coding keys and it's going to have a raw value type of string and i'll explain to you what this means in a second when we get to it and it also conforms to the coding key protocol and again i will point when we get to where it matters i will point out to you um what these why we have to specify these two things but in here you start specifying the keys or indicating the keys that we're interested in so you have a case for each key so you start with a case and then let's go and take a look at our json and see inside a single video json object which key would we be interested in well there is publish that right so what we indicate is uh the case name is our property name we're gonna do case published and we say that is going to be equal to the key that that should map to the json key and it has to be exactly matching with this json key name so i'm going to copy this and i'm going to paste that there all right and then we we just keep going like that um the next one how about title titles equal to uh and the json name for that would be title now if it matches what we have up here the property name we don't really have to specify the string value for it so we can just leave it like that case description again the json key name for that is just description so we don't have to specify a string what else do we have here case thumbnail and that is actually going to be the key for that we expand this and uh you know that is what we're ultimately trying to get to assign into our thumbnail property so here we have to just specify the key for that value so that is url now these are the keys that have to exist in order for us to be able to get the data right video id i think this matches too so video id was down here and again this video id key matches our property name so we don't have to specify this string okay in addition to specifying these keys the json keys that map to these properties there are a couple of other keys that we're interested in right so if you take a look at this json object right this represents a video object but all the keys that we're sorry all the values that we're interested in are actually inside this json object right which is keyed by the snippet key so we actually are interested in this snippet key as well we need to reference this this guy in order to fetch this json object that really contains all the data so i'm going to also specify up here case snippet and if you expand that json object so there's publish that inside this title description okay thumbnails right ultimately we want this key value pair but this is actually contained as the json object for this key right and this json object is keyed by thumbnails so we also have to specify this key and this key right ultimately to reach this point right because you need thumbnails to get this json object and then in here you need to get to this key to get to this json object and ultimately that's how we get this key value pair so thumbnails and high so i'm going to put that here okay and i think oh there's actually one more so that was thumbnails if you come down here you'll notice that we need to access resource id right to get to this json object which ultimately contains the key value pair here that we're interested in so resource id is another key that we want to specify so i'm going to put that there and again this this will match that all right so now this part of our work is done but i do want to mention that you know how here we had to specify uh the json key name because it didn't match our property name up here that is why we specified that the raw value for this enum for these cases is going to be string type so that's an explanation of why you know we have to specify string here and we will get to why this coding key part is necessary once we start writing the decoding instructions which is exactly what we're going to do now so what happens when this initializer is called as i mentioned this piece of json right here is going to get passed in to this initializer method and this decoder parameter is a reference to that json decoder so the first thing we need to do is get this information from the json decoder now in this whole decoding process when we're writing these instructions on how to decode the json a json object is known as a container so this is the can this is a container right it's these curly brackets right here uh this snippet key right the value is a json object here which is known as a container so this thumbnails key right here the value is a json object which is known as a container in the decoding process so when you see the word container you you can kind of think of it as a json object all right so first we're going to get this container right this contains all the information and the way we do that is we're going to say decoder dot container right and this throws so if it can't retrieve it if it can't return that data to us it's going to throw an error so that's what throws means and we have to pass in the coding key protocol which we've set up right up here so what we do is we pass in coding keys dot self and because this may throw an error we actually have to write try here so this is going to return that container why don't we assign it to a constant so essentially what we've done here is we've gotten this container from the decoder this guy right here and we've assigned it to a constant called container all right what do we need to do next after we have this data well we need to get this inner container right keyed by snippet because that's really where all of our data is uh residing in so we're gonna say let snippet container equals and we're gonna sort of do the same thing that we have here except this time we're not going to specify decoder we're going to specify container because container actually actually has all of the data right so we're going to say dot container.net container keyed by we're going to pass in the same set of coding keys for the specific key though snip it so what this is going to do is it's going to look for the snippet key and it's going to grab that container for the snippet key and it's going to assign this block sorry not that blood this block right here it's going to assign this block to sorry my mistake it was it was this it's going to assign this block to to snippet container so hopefully that's making sense and maybe what i can do is to make it a little easier so that we can see both sides of the screen is do something like this all right so now that we have this snippet container we can start grabbing some of the key value pairs that we need publish that title description those three are really easy to grab so why don't we say parse the title parse the description and parse the publish date okay so in here we're going to say um snippet container dot decode and so we can actually start to decode a key value pair we're going to decode these are string values right so we're going to decode the string type we're going to say that it's going to be a string and we're going to pass in the key that specifies that title so that's going to be our title right here and again we're going to specify try and then we're going to say let what what we're going to assign it to this property up here so we're going to say self.title is equal to right snip a container and it's going to try to decode the value which is of a string type for the key title right so it's going to try to grab this guy right for that key title right it's going to try to assign it to our title property okay next for description so self.description is equal to try snippetcontainer.decode and again it's going to be string type and let's go to string.self for the key description okay and for this last one self published equals here try snippet container dot decode we're actually going to try to decode this we we could leave it as a string you can see that here the publish state is a string but we can actually try converting it to a date object on the spot so we're going to say decode it into a okay i'm just gonna say date like that for the key published now the reason why we have an error here is because uh we've actually we've declared this published property as a string so i'm actually just going to set this to a date instead right so that we can actually assign a date type into it and it's actually better to work with the date than a date string if if you're going to have to do any sort of date manipulation all right so the next thing we want to do is let's say let's tackle the thumbnails next in here so let's say parse thumbnails so from here from this container how do we get into the thumbnails container well we have to get the thumbnails nested container so the way we do that is we're going to declare another constant here let's call it thumbnail container equals try and this is in the snippet container right so snippet container dot nested container we're going to pass in coding keys for the key thumbnails right because that's the key right here and that's going to give us this container or json object okay so we're one step closer so now we have this container in here how do we get to the url key well we need to actually get this nested container or json object first keyed by the high key so let's just drill down even further let hi container equals try thumbnail container all right so we're going from the thumbnail container to a deeper nested container then coating keys dot self for the key hi and that's going to give us this container finally we have access to these key value pairs and then here we can say a self dot thumbnail is equal to a high container dot d code uh string type right string type string dot self for the key um for the for the key thumbnail which is actually mapped to the json key url so that is going to grab this value right here right keyed by url and it's going to assign it to our thumbnail property so we also have to put try there lastly let's parse the video id so what do we have to do from the snippet container this is the snippet container we have to get this json object keyed by resource id so let's say let resource id container equals try snippetcontainer.nestedcontainer keyed by codingkeys.self for the key resource id all right so then that gives us this inside container containing this key value pair we want this piece of data keyed by video id so finally here we can say self.videoid is equal to a resource id container.decode string type so string.self for the key video id do we not have that oh there it is for video id all right and oh we have a try here so that's all the code we need to write for the decoding instructions but i did say i want to mention about why we have this coding key here and that's because that allows us to pass these cases or these these enum types into here when the parameter is asking for which key to decode and which key to grab the containers for that's why we have to specify that this enum conforms to the coding key so hopefully that makes sense it i'm sure it's a little bit confusing if this is the first time you're watching it i would advise you just to watch this little part where we're writing these instructions a couple of times until it starts to sink in or you can wait until the next app we build that we need to parse json because we're going to need to do this for a lot of the apps that work with apis right and all of them will the json responses will be a little different and so the instructions will be a little different but the technique is the same all right so that was much of the heavy lifting what we've done right now is we've described how to parse one of these json objects into an instance of our video object here but uh what we're missing still is that when we get the json response back from the youtube data api we actually get this whole json object here um so we have to also provide instructions on how to parse this guy but this part is very simple because the only key we're interested in is this key right here which contains the array of these json objects that we want to parse so let's go back into our xcode project right now and i'll show you how to we're going to wrap this up in no time so let's create a new swift struct we'll add a swift file and we're going to call this response and this is going to be a struct called the response and it's going to conform to the decodable protocol right and it's going to have a property called items which is an array of video objects okay now we're going to make this property optional so it's going to be nil at first the next thing we have to do as you remember is specify the coding keys enum and it's going to be string encoding key here and in here we specify a case with the key or keys that we are interested in so if we take a look at this being the response the only key we're interested in at this point right now is items all right so i'm just going to specify items here and it also matches our property name here so i'm not going to need to you know do the equals string okay and then we're going to do the init here and again autocomplete's working against me so i'm going to just type it out like that and in here we're going to specify the instructions on how to how to parse the items here now these instructions are very simple first let's get the container so let container equals decoder dot don't forget the try keyword decoder.container all right keyed by codingkeys.self and that's going to give us this container right here and we already have access to the items key and that's going to be simple so all we do right here is we do self.items is equal to container dot decode and we're not going to find the type that we need here because the type is basically an array of video objects and that's what we want to convert it to so when we write decode here um we're just gonna pick anyone but for the type we're gonna specify that it is an array of video objects right these guys right here all right so for the coding key dot items and that's basically it and we have to specify try up here oh and also specify you use this dot self to indicate that this is a type that you want this is what you want to try to decode this json right here into this type an array of video objects so that's all we have to do now we can go back to our model let's finish off our implementation here so here we have parsing the data into video objects the first thing we need to do is declare a new json decoder object or create a new json decoder all right the other thing we're going to do before we actually run the parser or run the decoder is we have to set the date decoding strategy and you're essentially specifying the date type when you convert string data as in the json data right here for example this date right here you're specifying the date format so it knows how to convert that string date into an actual date object so this date format is actually a standard format called iso 8601 so that matches this standard right here so it's going to be really easy okay so now that we've told the decoder that if you find dates in the json it's going to be of that format we can actually run the decoding method now so we're going to say decoder dot decode right here you can you specify what type you want to try to change this json data into and we do have that it's going to be of the type response right and what the json data what is that that's going to be the data right here data and we've already checked that it's not nil so we can actually force unwrap that so that method is going to decode the json data let's assign the result to something so we're going to say let response equals and because this method throws we're going to have to just wrap it in some error handling so we're going to try to do this and we're going to catch any errors that may occur so we're going to put this inside the do block so if this method fails if something goes wrong with the parsing it's going to throw an error and it's going to be caught down here so this is if this is the first time you've seen any sort of error handling in swift in general how it works is if there is a method call or you know something that you're doing that may throw an error you have to put the try keyword in front of it and you have to wrap that inside a do block and then you have to have a corresponding catch block or you should and this is where you handle the error if it gets thrown all right so we're done so let's just try this out i'm going to use the dump keyword to just output everything inside response into the console so we can see if this works or not so let's put a breakpoint right here and let's just run the application this is going to hit the youtube api it's going to get the json response and it's going to try to decode it so let me actually just put a breakpoint right here going to put a break point right here and i'm also going to put a break point right here and i'm going to put a break point right here inside all of the decoding instructions so it's still launching the simulator and when our app finally runs we should basically see it come into here first right where it's trying to uh decode it into our response object and then yeah so there we go it's hit this breakpoint it's going to try to decode this entire json response that i've highlighted here it's going to try to decode it into an instance of the response object so i'm going to hit this to let it run and as expected it's come into our decoding instructions for the response so inside here we've basically given it instructions to decode the value for the items key right and try to decode that into an array of video objects so essentially try to decode this right into an array of video objects so if i hit continue execution now it's come into our first video right it's coming into the first json object this guy right here and it's going to try to then go through our instructions and output a video object so i'm going to continue execution and it's done that so now it's come back for the second json object this guy right here that's going to go through the decoding instructions and now this is the third one so now we're at this point right so it's going to keep it's going to go through these instructions for each one there are five okay so now we're done we've parsed all five of these json objects into video objects and when i dump the response we should see the results so i'm gonna execute that and there it goes let me just pull this up so you can see i scroll all the way up it's a lot of data but you can see that uh there's the response object it's got a property called items and inside you can see a list of videos you know it's all of our stuff five elements and each of these are videos i can't actually collapse these right here but nothing's crashed everything should be good you know another thing another way we can test this is you know just do some um debugging or some outputting in the console so we can remove some of these breakpoints let's just deactivate the breakpoints and run our app again and right before it dumps the response we can we can check what's in the response right items access the first oops we can access the first video so you can see it's got all the data all right this is the second video and we can actually access the title or description video id you know so everything seems to be there everything seems to be working and yeah that was a lot of work but after you've done it a few times parsing this json becomes a lot easier now before we end off let's go ahead and deactivate our breakpoints right here and let's check in our code but this time i'm actually going to remove my api key first so let me go into my constants file and let me just delete this key and save it uh and then let's bring up terminal and let's do git status and we added a new file so we actually have to add this file to our commit uh so i'm going to say git add let's start git status again and now we can see all of the files that we modified let's do git commit added code to parse the json response okay let's commit that and then now we only have to push it to our repository and so it's sending it we go back to github and we refresh that we have our latest commit and bitry should pick that up if i refresh the page you can see there and it's going to pull the code from github our latest commit and it's going to compile it and make sure nothing's broken and we should be good to go alright so today you successfully turned the json from the youtube api into an array of video objects that you can use in your app now i want to turn it over to you were you able to follow the json parsing and understand what was happening even if the syntax parts don't quite make sense to you were you able to kind of follow the nested structure and how we were reaching the different key value pairs that we needed by traversing that sort of json hierarchy let me know by leaving a quick comment below in the next lesson we're going to work on the user interface and display some of those video objects into a table view make sure you're subscribed to the channel so you don't miss it and also give this video a thumbs up if you enjoyed it and one last thing if you want to grab the source code for the project just visit the github page that i checked the code into the link will be in the description below all right thanks for watching and i'll see you in the next lesson