hello and welcome to my Swift tutorial series for beginners in this video you're going to learn about inheritance otherwise known as sub classing which allows you to create a class which builds upon or extends from other classes which have already been defined now this saves us a lot of time and effort from defining classes that do similar things alright so stay tuned I don't know if you've noticed but now that we've talked about functions having the ability to organize your code into chunks and then classes being able to organize and group variables and functions together in the way that makes sense these are all different ways of organizing your code now today's topic sub classing is another way to further organize your classes so remember what I said about duplicated code and how it's a bad practice to have duplicate code all over your project because that makes it hard to maintain and hard to manage hard to make changes now when I introduce functions I told you that having duplicate code all over your project is a bad practice and it is and functions were a way to address that you can define a function and then you can call it from multiple places when you need to execute that piece of code classes are the same thing sometimes you might have to define two classes which are very similar so instead of having two very similar definitions or classes you can use sub classing and have one class extend from the other so that's what subclassing is all about let's take a look at an example using the playground that we had yesterday we had to find an employee which had a named salary and a role and a method called do work now remember these are called properties of the employee class and this is called a method of the employee class now let's say that I wanted to create another custom data type called manager right so I would define a manager class like so right now a manager also has a name alright so I can go ahead and define that managers also have salary and roles and they also have they also do work so you know I would just be defining the same thing very close to it all over again now instead of doing that what we can do is have the manager class be a subclass of the employee class so we can define that or we can do that by putting a colon after manager and we can specify employee and that is basically saying that the manager class inherits or is a subclass of the employee class and this also means that the manager class automatically inherits all of the properties and methods of the employee class so let me demonstrate for you so let's say let M equals let's use bar M equals a new manager object so I've just created a new manager piece of data in memory and assigned it to M I can say you can see here Maggie maybe she's got a bigger salary role of manager of IT or something like that right and M can do work so hi my name is Maggie and I'm doing work now let's say as a manager you also want to keep track of the size of the team that the manager and is managing so for the manager class we could have another property called team size you know and we can start that at zero but now for my manager object down here in addition to all of these properties and methods that it inherited from the employee class in addition to that it also has you know the properties that I've defined inside the manager class so I can say the team size is 10 now essentially I was able to create a new class based off of an old class right and add additional functionality to it now you can also modify existing form so let's say that you know when a manager does work it's he or she is not just doing work he or she is managing people so what we can do if we wanted to change the definition of do work we can say we can redefine it here after using this keyword override so I'm gonna override the do work method and I am going to print I'm managing people and very important right and the salary increase Wow it's gonna increase by two all right so now when I run this if not going to say hi my name is Maggie damn doing work it's going to take this overridden function right because M is a manager so that's why we get down here I'm managing people but did you know that if you wanted to instead of replacing the functionality of that inherited do work method you let's say you just wanted to increase the functionality you wanted to add to it so what you can do inside here after overriding it you can call the do work method of the employee class from here all you have to do is write super dot and you can access these properties or you can call the do work method so now when I write M do work what it's actually going to do it's it's going to execute the do work method definition from the employee class and then after that it's going to do this additional code that I've written here so let's run our project and see what that looks like you see hi my name is Maggie and I'm doing work and I'm managing people the reason why this keyword is called super is because the class that your sub classing from is also known as the superclass or the parent class so for the manager class employee would be the superclass or the parent class and that's why this keyword is called super alright so in addition to being able to redefine the methods of the superclass I can also declare new methods so I can say you know fire people oops what's going on I'm firing people so now I can say m dot fire people but you know if I let's say declare a new employee here just to demonstrate using dot notation on the employee object you can see I only have those things which have been defined in the employee class so that's how powerful sub classing can be it can really save you a lot of work you're not gonna have to redefine two different things that are very similar what we've got right here is actually one level of sub classing or one level of inheritance but it can actually go much deeper than that for example an employee is also a person right and all people have names so I could for example declare another class up here which contains the name property right because all people will have a name and you know so then inside the employee class I wouldn't have to define that and instead I can go that the employee is a subclass of person right so you can build these hierarchies in these trees and it's really a way of organizing your data and your information now inside of your classes you're organizing your properties and your functions so now you can see holistically how all of these things are starting to come together variables functions and classes okay so this was a simplified example of sub classing but it's essentially how it works and it's very predominant in the Swift programming language as you're going to see in the next lesson as you can see sub classing helps you save a lot of time by allowing you to define your new classes based on what already exists and then improving upon that or customizing it a little bit without having to redefine everything all over again alright so if you learn something new and you like this video please hit that thumbs up button and hit subscribe to support the channel and now you know the drill let's click on over to the next lesson and I'll see you there