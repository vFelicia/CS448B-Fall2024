today you're starting a brand new app that will teach you all of the basic skills for IOS app development in this lesson you're going to be building the user interface for that app and then in the following lessons I'm going to take you through the coding part so that you can add the logic and user interactivity to the app now hopefully you've been following since lesson one and if you've been learning a lot please show your appreciation by giving this video a thumbs up and consider subscribing so that you don't miss the next lesson alright buckle up let's go okay let's go ahead and start a new xcode project go to file new and let's choose project and then under iOS we are going to select app Now by this time this should start feeling pretty familiar to you I'm going to call this the war card game now this time we are going to come back to this project over several lessons so make sure you name it something that you like and also save it in a location that you can remember because you're going to need to launch this project again so you don't need to change anything with Team organization identifier interface should still be swift UI and language should still be swift you don't need to check any of the other options let's click next I'm going to save it on my desktop so it's easy to find you don't need to create a git repository for this let's just hit create and if you don't know what any of those options are I would suggest you review lesson two because that's where we went through all of those options let me adjust this window just a little bit so we can see what's going on and I'll shrink that a little bit and we will actually get rid of that inspector tab next we're going to add the image assets that we're going to need for this war card game so I've got the assets ready to go here in this folder in the video description below you'll find a link to a war card game image assets dot zip file if you unzip it you'll see the same image Assets Now if you're on desktop you might need to expand the video description that's underneath the title in order to see the link and if you're on mobile watching this on YouTube you might need to tap on the title of the video to open up the video description and then you can find the link link once you have that zip file unzipped and you have all these assets staring back at you I want you to highlight all of them notice that they're organized by folder and those folders are going to be preserved when we bring them into our asset Library so in xcode let's go ahead and click on assets and then back here we're going to drag this and just drop it in there you're going to see that this is preserved and so it's really nicely organized and if you've worked with IOS app development before you might have a scene that we did three different file sizes however these images if you notice they are SVG format this is a special vector format where you can scale up and down these image assets without any loss of quality so that's really neat and we only need to have this one size here okay after you've done that let's take a look at the UI that we're trying to build now based on what you've learned in the previous lesson how would you break this user interface up in terms of what view containers or layout containers if you want to call them that which one of those are you going to use to lay out these elements and second of all which view elements are you going to use to represent each of these things that you see now as an exercise I want you to pause this video and try building this UI yourself inside xcode trust me by doing this exercise you are going to cement your skills and you're going to identify what you need to review now before you start this challenge if you haven't watched the previous lesson you can do so right over there it's going to show you all the skills and techniques you need to accomplish this right now now for each of the elements that you see in the UI right here I want you to just use a swift UI view element to display the images that you've just added to the project now in terms of which view containers you want to use in order to lay out these different views it's all stuff that you've used in lesson three so there are no surprises and here are also some viewer modifiers that might come in handy so pause the video now and try it out and then resume it when you're ready to build it together foreign how was it now if you got it to look relatively the same that's a win in my books but if you struggle that's also a good thing because as you follow along and we're going to walk through it together you're gonna have context and that makes a huge big difference all right let's do it okay here's what I see we have a depth stack as the root element also known as a zed stack or a zstack and then we have an image which represents the background and then on top of the background we have a vstack which is going to contain everything all of the elements that you see on the screen inside that vstack first we're going to have the logo centered and then below the logo we're going to have an H stack containing two cards and then below the H stack we are going to have the button and then below that we're going to have another H stack inside that H stack will contain two vstacks each of the V Stacks will contain two text elements representing the player label as well as the score and then it's just a matter of adding spacers and padding to make sure everything looks nice and spaced out now if you did it another way that's perfectly fine too okay let's implement this in xcode okay so here back in xcode make sure you have all these image assets added to the project if you haven't already and let's go into the content view here we see the preview this is all the default stuff let's get rid of that make sure you don't accidentally delete that bracket or else xcode will be complaining so you should have two opening brackets and two closing brackets right here so I'm going to type out my view containers and Views you can feel free to use the library just like I have shown you back there if you haven't gotten familiar with just typing it out nothing wrong with that so here we have our Zed stack I'm going to add an image and this is going to represent our background so I'm going to put background plane that's the one you can try different ones you can try out texture for example now wasn't that oh it's called cloth sorry no wonder cloth wood uh Cartoon I think this one was called yeah now notice though before I said that the image doesn't reach over here and over here those are you know the safe area right unless we put the modifier ignore safe area so why is the image reaching all the way there uh now and that is because it's displaying the image it at its full size all right because we haven't added the resizable modifier to it if we did it would actually resize the image uh to fit the screen so that's why the image is going full screen because the image is actually larger the native size of that image is larger than the screen size so I first of all I'm going to go back to plane and then I'm going to do resizable and you can see as soon as we do that we're allowing Swift UI to resize that image to fit the screen and you can see that it doesn't go past the safe area so we're going to have to add ignore safe area now for this type of background it doesn't really matter even if it's you know way too large for the screen because you can't really tell but if it's a landscape image like we had for the the Niagara Falls image in lesson one two three lesson three uh you would see that it's like super zoomed in right so that's why we would have to add the resizable and then if you wanted to cover the whole screen you would do ignore safe area okay so that's that this v stack next is going to contain all of our elements like I said first up is the logo and there it is beautiful logo and then we have an H stack containing the two cards so uh H stack remember lays things out side by side so inside the H stack we're going to have two cards so I'm going to use card two in car 3 and there's a strategic reason why we named these the way we have card two three four five all the way up to card 14 for the ace uh you will see when we get to the later lessons uh where I show you some of the code and some of the logic and you're going to learn how to apply that don't worry if you've never coded before it's gonna be really simple I promise you but naming the cards this way is going to make it easier for us as well next up we have I'm just going to use images for now for all of these elements we have the button right and then we have the the scores now a single score looks like this player and then the score right but there were two of them right so um what I'm going to do is create an H stack all right I'm going to put the player label and player score inside that H stack and then I'm going to copy this and paste it command C command V to copy and paste and then this is CPU and there you have it these are all of the elements that are on the UI now we just have to space them out one of the easiest ways to space things out proportionately is to use spacers remember a spacer takes up all available space if there are multiple spacers it divides the space up between them evenly so for example if we wanted to space these items out vertically to have an equal amount of space between all of these vertical items in this v stack here we could put a spacer just in between everything right here here right between the logo between the card H stack between the button between the scores H stack so let's try that I am just going to copy that and I'm going to paste it a bunch of times so you see just adding a single spacer it pushes everything down because it tries to get as much space as possible so that's a great thing to do if you want things to be bottom aligned for example I'm going to add a second spacer under the logo so now you can see it splits up the space between the two spacers I'm going to add a spacer below the card H stack now it's divided by the three spacers I'm gonna put another spacer below the button there you go and finally another spacer below the scores so now everything is spaced out vertically evenly for these cards I want to do the same thing for the h stack I'm going to put a spacer in between the two cards which pushes them off to the side but guess what we're going to add a spacer to the left of that card and to the right of that card and now they are spaced out evenly horizontally now we're going to do the same thing for the scores we're going to add in this H stack of spacer like that which pushes out to the side again we're going to add a spacer to the left and to the right so it divides the space up evenly there we go now we're going to change some of the font colors and sizes so why don't we first make everything white in the fun white now I could apply them to each text element but remember if you apply the modifier to a view container it gets it affects all of the views inside of it so I'm going to take a look at which outer parent view container contains all of those hex Elements which happens to be this H stack right I could you know I could put on this V sack and this V sack but by if I put it on the H stack then it applies to everything inside and I only have to do it once so let's do foreground color dot White you can see that all that turns white it gets applied to that that that and that all four text elements now this time for sizing I have to apply it to the individual text elements because I want them to they're going to look a little different for each one for the player I am going to do font and I'm going to say dot headline it's going to bold it a little bit same thing for the CPU label font headline it's going to make it a little bigger for the score I'm going to do font dot large title same thing for here font dot large title and then lastly I want to add a little bit of space underneath the player label so I'm going to add a second modifier under there and this time instead of just adding padding which does padding on all four sides what you can do here instead of just writing out the code sometimes if you don't know the code representation of something that you want to do you can always open up the inspector panel and you can take a look at what's happening so for for this player label padding is being applied on all four sides you can see here padding is all four sides I can hit X to get rid of the padding actually that deleted it and I can check just the bottom padding and I can increase it to 10. so that's just going to pad the the CPU no it didn't apply it ah what did I apply that to okay so you got to be a little careful doing that let me just hit X on that uh I think I applied it sorry I applied it to this I'm gonna put my cursor over the player label I'm going to hit bottom now you can actually see the code it added padding bottom and I'm going to increase that to 10. by default it's 20. let's refresh it there we go so you see 10 right there and you can see the equivalent code modifier being applied to the player label now I can simply copy that and I can paste it for this CPU there you go awesome that is our UI now in order to apply some user interactivity to this button so that we can handle the user tapping on it we're going to have to learn a little bit of basic Swift Code that's why we're going to take a few lessons to get some basic coding skills and then we're going to come back to the war card game apply what we've learned and bring this app to life now if this is going to be your first time coding don't be intimidated I'm going to make this so simple for you to understand and we are going to erase any fears that you might have if you're excited please give this video a thumbs up if you haven't already I really really appreciate it all right go ahead click on over there and I'll see you in the next lesson