hello welcome to this tutorial where I'm going to show you how to build this dice roll app and this app is meant to be the second step after going through the lessons in the start here section of my site code with Chris calm after you go through these lessons this dice roll app project would be the perfect reinforcement for the concepts taught there there's also a text version of this dice app tutorial which I am finishing up you're going to be able to find the link to this tutorial in the description below the video if you're watching this on YouTube furthermore I just like to say that this dice roll app was the very first tutorial I published on code with Chris calm and also on my youtube channel if you actually go back in my youtube channel history you're going to see some of the very first videos and it pertains to this dice roll app now what I've done I'm going through a process of just refreshing all my tutorials on my site just bringing back to life some of those app projects that we did because Swift and xcode changes so fast so this is the updated version of the dice roll app now this dice roll app tutorial is targeted at the beginner so I'm going to a hand hold you and I'm going to go through the different parts of Xcode and point things out and go deliberately at a slow pace if you've followed any of my other app tutorials before on my youtube channel or site or even enrolled in some of my courses before you'll find this probably too slow for you but again it's targeted at the beginner so if you've completed the War app before in this start here section or on the YouTube channel then this app is going to be a good reinforcement of those concepts okay so with that said let's get started let's start a brand new project create a new Xcode project and make sure that the tab up here says iOS and we're going to start with a single View application which is going to be our basic type of application I'm going to call this the dice roll app and let's just call it dice roll tutorial because I've created this several times I don't want to conflict any name here under team you can you'll probably have none unless you sign up for an account with which case you can put your name here I've got either your company name or personal name and the organization identifier is usually in this sort of format where you go comm dot and then your name or your company name and it's automatically going to append the project or product name to the end of that and this forms a sort of unique identifier for your application not so important for us just creating these tutorials and demo apps but if you were to release some apps into the App Store and you're planning to release more you probably want to have some sort of naming convention now under language choose swift instead of ox projective sea we want to use Swift devices leave it as iPhone and have all these guys unchecked click Next I'm just going to save this on my desktop and under source control I have that unchecked we're not going to work with that right now now this is going to create a brand new project for you the first thing I want to do is jump into the storyboard this left hand side is called your file navigator here you're going to find all the files for your Xcode project this storyboard is actually a visual way for you to design your user interface so it comprises of this view right here this is called document outline and if you actually expand these nodes you can see all of the elements in your view if you don't have this little pain this document outline there's an icon down here that you can click to hide or show that document outline pane so you're going to want to have that going on the right hand side this column here is called the inspector pane and it's kind of split into two sections you have this top section which basically shows you any sort of configurable properties of whatever you have selected so right here I have this view selected it's gonna show me some things that I can change for that view take note that there are a couple of tabs here as well in this bottom half here it also contains a couple of different tabs the the one that you will commonly use is this one right here called the object library so make sure you have this selected you may see these elements like this as these little squares you can click this button here to change it into this view which is helpful for beginners because you can read exactly what those things are so we're gonna get right into it by dragging some of the user interface elements from this object library onto the view here and there's a filter text box down here where you can type and kind of filter out to the element you want we're going to type in label here because that's what we want to add and this is going to be a label that basically just displays text so I just dragged it and I moved it on here and take note that when you add it on here there's all these little handles around the label and you can drag one of these handles and you can actually resize it or you can position it but the important thing I want to let you know about is that when you size things like this and you move this label around that's not actually how it's going to show up in your app the system that determines the position and the size of these elements is called Auto layout and it works by following a bunch of rules that dictate you know the size of things and how far away elements should be from the edge or from each other and it's all based around these auto layout rules or otherwise known as Auto layout constraints which we will be working with this soon but first I just wanted to let you know about that so what I want you to do now is tap on the label here you're going to have it selected or you can tap on it from here in the document outline eat that's going to change what you see here in the inspector pain you're gonna see all of these configurable properties for the label for the text I want you to change it to the some is colon and just press enter you're gonna see the text change here again don't worry if your text is cut off like that or something like that because you know you can you can expand the label a little bit like this by dragging these handles but that's not really not going to change the size of the label but for visual purposes while you're designing it that's fine the next thing we're going to want to do is to add some image views into this view image views are something that we can use to display images so down here in the filter type in image view and click and drag this guy here you're gonna have an image view like that I'm going to size it just so that I have some more space to put a second one remember dragging it like this moving and sizing it like this doesn't really matter at the end of the day because it's the auto layout rules that are going to dictate how big they are I'm gonna sure I get another one there I'm just going to size it like that more or less the same doesn't really matter and lastly I'm going to search for a button this is going to be a button that the user can have to do something with so let's put that there okay now what you're going to want to do is to put these two image views into what's called a stack view and a stack view will help you organize and arrange your layout an easy way we can put these two elements into a stack view is if we just go into the document outline here if you hold down command on your keyboard and you click the two image views you're gonna see them both highlighted in blue like that so that's what you want you're gonna see both of them are highlighted then you want to go down here into this button embed in stack and when you click on that button it's going to put both of those elements into a horizontal stack view you can see here in the document outline that your two image views are gone instead it's replaced by the stack view but if you open it up you're going to see your two image views inside that stack view so the stack view is kind of like a container view that can contain other elements and it just helps you arrange those elements that are inside of it in this case it just stacks elements horizontally beside each other now if for some reason Xcode wasn't smart enough to put it sidebyside and instead its put it kind of on top of each other you can click on the stack view here in the inspector pane just change the axis from vertical to horizontal so for mine it's already horizontal we're gonna also want to change the spacing property I'm going to put 40 here and that just dictates how much space is between each element so you can see now I have a little space between the two elements now that we have this we're going to put all three of these elements the label the stack view containing the two image views and the button highlight all of them by holding command and clicking each one make sure that all of them are blue like this and then I'm going to click that embed and stack again this time it's smart enough to put them vertically again if yours is not vertical you can go here and change the access to vertical in the document outline you can see all of my elements are now inside this kind of toplevel vertical stack view again I'm going to change the spacing of this guy to just some number 50 it doesn't really matter at this point and you're gonna notice this little red arrow up here when you click it it's telling you that it's missing a bunch of constraints and these are the auto layout rules I was talking about because Xcode is trying to determine how to layout your elements but it doesn't have enough information we have to give it a couple of additional rules to dictate how to lay things out because we're using stack views it makes things a little bit easier for instance this stack view contains the two image views and it knows to put them sidebyside because it's a horizontal stack view and then this stack view has these three elements inside of it and it knows that it needs to stack them vertically on top of each other with the spacing of 50 in between each however it doesn't know how to place this big stack view you know this outer guy right here doesn't know how to place that relative to the screen edges so that's what we have to we have to give it some rules Auto layout constrains to tell Xcode how to position this outer stack view so let's go ahead and add our first constraints click to this stack view here make sure it's highlighted you can see this you can see the handles here and this blue line around it then I want you to click on this add new constraints button when you click on this it's going to pop up this little menu here if you don't see any of these numbers in here and a lot of these options are greyed out for you make sure that you do have the stack view selected first okay and then if you go back and click this button you should see it prepopulated with some numbers basically these numbers represent how it's positioned right now first thing we're going to want to do is uncheck constraint to margins and that's going to let us specify that the edges of the stack view should be all the way to the edge of the actual view and not to the margin if we leave this checked on and even if we specified let's say zero for this left edge it's going to specify a rule where the stack view is zero points to the margin and not to the edge of the screen so if you want it to the edge of the screen just uncheck constrain margins put 0 in there press tab on the keyboard zero and there you can see as I'm entering these numbers I'm enabling these margins here see these two margins that I've specified in left and right they are enabled so they're bright red these two on the top and bottom are dimmed out you can even click them to enable them like that but as soon as you enter a number in there they're going to be enabled anyways so I'm going to put 0 in there and 0 in there so I just want to point out that this drop down you can also specify that the margin is relative to some sort of neighbor or in this case to the actual view so if I put 0 and you know if I click this drop down I can see that it's going to be zero relative to the view which is is this whole entire view here if I do it for this top guy however you can see I have two options right now it's selected that it's going to be zero to the top layout guide now the top layout guide is sort of this invisible line here that basically separates the space for the battery and you know the carrier and the time that goes up here this little status bar so I'm gonna leave it relative to this top layout guide so my stack view isn't gonna reach all the way to the top it's gonna reach it's gonna be zero from the top layout guide okay so four constraints go down here add four constraints like that and you can instantly see your stack view change like I said see it doesn't go all the way to the top because it's zero from the top layout guide which is this line here so on the other ones you can see that it's all zeros to the edges and also in the document outline you'll notice that now you have these four constraints these are the constraints that you added if you accidentally entered in a number other than zero and you want to change it you can simply highlight the appropriate constraint go on the inspector pane and change that constant to zero or another number if you'd like or you can even go ahead and highlight all of these and hit delete and that will delete all four of the constraints and once again you're gonna have to add the constraints if you made a mistake and you want to do it again so let me just quickly do it again cuz I just deleted them okay and if your your stack view isn't looking like this maybe it's like miss position like that and you get these orange lines that's the orange lines are basically telling you that what you're seeing here on the screen it it's not reflective of the rules that you've added so it's telling you that what you're seeing here doesn't really conform to the rules that you've specified so all you need to do is click this little button here to update frames and that's going to basically take a look at all your constraints and lay everything out according to them kind of refreshing the screen if you will so click that thing appears like this again now one more thing I want to quickly mention is in this stack view you see how there's this much space from the top all the way to the bottom and you can see how the button is sort of in the middle here in fact if we click the button you'll see the handles for the button here and here and then you'll see the little gap which we specified the stack view has you know that gap between each of the elements and then we have the horizontal stack view and then another gap and then the label so how is it that xqo chose to stretch out this button to fill out the remaining space well if you click on the button and you go here to this size inspector you scroll down and you can see this thing called the content hugging priority and this little setting is used when there's extra space so in this case for these three elements the label this horizontal stack view and the button there is a lot of extra space which element gets stretched in which element kind of maintains its size well that's what is dictated by this content hugging priority so the higher the priority the more the content will be hugged by default and maybe that all three of these elements have the same content hugging priority in that case I think it just randomly chooses it so let's check here the label has a content hugging priority on the vertical access for 251 the horizontal stack view has 250 and the button has 250 as well so the button and the stack view have the same vertical content hugging party but I think it just randomly chose the button or it may be that it's the last element in the stack view so for instance if I change the content hugging party for the label instead of 251 I'm gonna give it a low priority I'm gonna give it the lowest priority so 249 and because it has the lowest priority it's the one that's going to get stretched out you can see that you know that's changed there so if you want the button to be the one that's true that you need to make sure that its content hugging priority is the lowest so the label I'm gonna leave at 251 stack view let's also leave it at or I mean up it to 251 so the button for sure will get stretched because it only has a vertical content hugging priority of 250 which is the lowest out of those three okay so that's how that's why that button is stretched out on to the next step now we're going to expose these elements so that we can write code to access and reference these elements which we've added to the storyboard because otherwise we wouldn't be able to change any of these things and we're going to do that by connecting these elements to iboutlet properties so there are lots of different ways to do this and it's actually one of the most common stumbling blocks for beginners so i'm gonna show you one way to do it and i'm also gonna show you how to fix mistakes so we're gonna start by clicking this button up here it's called the assistant editor button and it's going to then change your interface into two different panes so on the left hand side you have your document outline and storyboard and on the right hand side you should be seeing viewcontroller.swift if you're not then what you want to do is make sure that up here it's switched to automatic and you can choose viewcontroller.swift but actually before that you want to make sure you are clicking this view controller here so you have it highlighted and then change this automatic go down here and choose view controller you should be seeing this view controller dot swift on the right hand side now what we're going to do is we're going to create it some space here so that because we're going to be sort of dragging elements into this space so hold down control on your keyboard and while you're still holding it down click this label here in the document outline and click and drag it into this area here you're still holding down control on your keyboard and then let go of your mouse while holding ctrl you should see this little dialog pop up to ask you how you want to name your label I'm just gonna call this the label I'm going to connect it and just like that we now have a an iboutlet property called label that is connected to this label here let's double check our work here we can right click this label and document outline or if you only have a onebutton mouse hold down control + left click it and you're gonna see this little connections pop up you should see your property name here connected to view controller if you don't then you might have connected the wrong element to this iboutlet in that case you're going to rightclick each of these elements one by one and open up this little menu and just see which one is connected to this label and when you finally find it you're going to want to click X to kind of break that connection then you're going to want to delete this line of code here and then you're going to want to try it again so hold down ctrl click and drag this label drop it here and then I'm gonna name this label and then if I rightclick the label in my dock mount line I should see this connection here we're gonna do the same thing for the image view now you can either you know click and drag things from here the actual storyboard or you can do it from the document online but I I find that sometimes things get overlapped and a lot of the times that's how beginners accidentally connect the wrong element because they they think they're clicking the right element here in the storyboard and dragging the right element but in fact it's the wrong one but if you do it from the document outline here it's it's less ambiguous it's more clear as to what you're connecting so we're gonna connect the left element the left image view element first hold down ctrl click and drag here let go I'm going to call this the left image view let's connect that and what also helps is if you create a little bit of open space right there let's connect this second one hold down ctrl click and drag it here this is the right image view now there are two common beginner mistakes I want to highlight the first one I already told you about is if you accidentally have connected the wrong element what I'd like to do is after I connect each one you can rightclick it and you can just that will check that this is connected to the left image view property and this one right here right click this is connected to the right image view property and if it's not then you know you connected the wrong element and you should do what I showed you earlier now other times let me just break the connection for the right image view and delete this guy let me show you another common beginner mistake so I'm connecting this right image view here and I might accidentally make a typo I might call it the right I might call it the right image or something like that and oh no I've made a typo so I go ahead and I delete that and then I connect it again this time you know I name it properly the way I wanted to what beginners fail to realize is that now your right image view element is connected to two iboutlet properties this correct one and also the type of one that you deleted so you're gonna want to rightclick that guy you can see how here it's connected to two properties right well this right image one doesn't even exist anymore so go ahead and click the X to break that off and now it's only connected to the the proper one so those are two beginner mistakes that often occur and cause app crashes so you're going to want to make sure that your elements are connected properly next thing we're going to connect is what's called an IB action now IB action is kind of like an iboutlet but the only difference is that an IB action lets you respond to events that are raised by elements in your storyboard here so for instance this button when the user taps on it it generates this event called the touch up inside and if we want to connect some code to that event we can do that by connecting that event on the button to an IB should function so let me go ahead and show you how to do that we're going to want to drag things over on the right here but instead of up here this time we're going to want to do it as a function so you know a good place to do it would be right here above maybe not up there you could do it you could do it there or you can do it here as long as it's not inside another function we're going to do it in here which is basically if you scroll all the way down this is the last closing bracket this closing bracket matches the opening bracket for your class up here okay so right above that that's where we want to add this IB action function so go ahead hold down control on your keyboard click and drag the button down here and then release now you might say that this is what we did for adding an iboutlet and you wouldn't be wrong but the difference is that under connection here you want to change that drop down to action and you want to change the type here to UI button and then the name we can type in anything we want I'm gonna put button tapped and click connect now you can see that is it is an IB action function here and inside in between this opening bracket in this closing bracket we can put some code to execute the code inside here is going to be called whenever the button is tapped on now let's double check our work if we go back here and right click on this button you can see that under the sent events section touch up inside is connected to view controller button tapped the same things apply if you made a typo and you try and connect another IB action just double check this menu here it's probably a little harder to make a mistake with the IB action with the button because I think that I might be wrong but I think that this event can only be connected to let me just try that out right now okay yeah so it can be connected to two actions in this case when you tap on that button I'm pretty sure both of them will fire but you want to make sure that it's only connected to what we want which is button tapped and I'm going to go ahead and delete this other IB action function okay so now we're ready to add some images to our storyboard and the last thing we're going to do after that is then work on this button tapped function so go ahead and click this button which shows you the standard editor and we can zoom back in by clicking this so the images are going to be available in a link below the video so you can download them and you can use them in the app to follow along I've got it right here on my desktop after you download it onto your desktop you're going to double click it and unzip it you're gonna get a folder called images and it's gonna contain all the images that we're going to need for this application so go ahead in the file navigator of Xcode click on assets dot XC assets and this is what's called the asset library we're going to be able to add images here in here and name them and then we're going to be able to refer to them so what I want you to do is highlight all the images you can press command a in this folder to highlight everything but I don't want you to drag in the icon folder so hold down command click the icon folder so it's unselected or deselected and then you can drag in the rest of these images into this column right here in the asset library so you can see me dragging them in and I'm gonna put them right here see when I let go what happens is that it groups based on the image names it groups these images together so for dice one you can see I have the one X version the 2x and the 3x and these are just different sizes of the same image asset for the different resolutions on different iPhone devices if you look in the folder you can see I have here dice 1 PNG dice 1 app 2x dot PNG and dice one at 3x dot PNG they're all the same asset just different sizes and when you drag them all into Xcode like that it should be smart enough to combine them and we have this and this this is the felt for the table and these are the dice if it doesn't do this for you what you can do so for instance if it you know just does that maybe it it separates or something maybe you get you get something like this where you have dice 1 and then these two aren't filled and then you have dice 1 1 and only 2 X is filled well you can do is you can delete this one and only have dice 1 and then you can manually drag the two X version into this slot and then drag the add 3 X into this slot Xcode should be smart enough to detect it for you though if you drag it together okay so now we're done in the asset library here for now and we're going to go into the storyboard and we're going to add at the background so for the background we're going to want to add it behind this stack view we're going to make a giant image view anchor it to all four sides and it's going to be behind the stack view we don't want to place it into the stack view because then it would basically put our background below the button which we don't want okay so let's go down here make sure you're looking at the object library search for image view and instead of dragging it into the view I'm going to drag it directly into the document outline where I want it so click this guy and drag it now make sure you don't accidentally replace the Veet the root view you see here how my root view is highlighted in blue if I let go now it's actually going to replace my root view with the UI image view and it's gonna break everything so I just did it and what you can do in this instance is press command Z or Zed if you're Canadian like me and undo okay so you want to just be careful about that so click and drag the image view make sure it's a blue line like this okay and you might accidentally put it inside the stack view like I just did here but it's very easy to just click and just drag move it right above the stack view there like that so in the end you want something like like this where you have the image view right below the root view and the stack view on top of that image view and the stack view obviously contains our label the dice image the dice image views in the button okay so now when I highlight this new image view that we just added let's add some constraints you click this add constraints button and we're going to remove the constraint of margins checkmark right because we want an edgetoedge let's choose 0 for all four sides but this time I'm going to click this drop down and I want it relative to the view and that's going to change the number again so I'm going to hit 0 again and down here this one I want it relative to the view and not the bottom layout kind so I'm gonna choose the view there it's gonna change the number back to 270 let's change it back to 0 this button should read add four constraints if it doesn't read add four constraints then you want to make sure all of these four light red lines are enabled you click that you might have to click the update frame spun you might not and you should have the image view it's kind of in the background of the stack view right now there is no image on it so you can't really tell but highlight that image view go over here in this inspector and in this attributes inspector pane change the image the drop down should show you all of the images in your asset library and choose table now you can see the felt here some of the text is hard to read now so click the label and let's change the color of it two white and four this button let's change some of the stuff as well so for the image dropdown let's use roll and let's change the the word button here to roll okay and you know that should be okay you can even you can set some of the images for these image views if you want so for instance click the Left image view change the image under three click this guy change it to five or something like or four okay so now we're ready to go back into our view controller dot swift press command s to save your project inside here in the button tapped we're going to want to add some code so first things first let's just try modifying the label in the image views because we did connect the label element and the to image views here as these properties so let's go ahead and type in label and that references the label that we added in the storyboard it's got a property called text so I write dot text and I can change this to any string I want string is just a piece of text so let's say I can say hello dice and for instance let's change some images for the left image view it's got a property so I press dot called image and it accepts a type of UI image okay so I'm gonna have to create a new UI image object so if these these terms properties and objects and classes if these terms are kind of fuzzy to you you should either watch the learn Swift for beginners series I'll link to that below or the start here you know the war app series the basics which I'll also link to below the video so you should watch those first because it's gonna get you started on the right foot with that terminology and with those basic concepts so the UI image class has a as an initializer function called named where I can pass in a string and that string is going to be the the image asset name so if we go here it's named dice one dice two days three days four days five and die six with capital D so let's try that out let's do dice six and then down here right image view dot image equals UI image named and this autocomplete is really handy it just tries to guess what you're typing and you can then choose and just press ENTER and I'll complete it for you let's make this dice one okay so your syntax should look something like this and if you're even missing one bracket or one quotation mark or you know it's on a separate new line like this it may not work correctly so you have to make sure everything looks just the way I have it here let's go ahead and run our app up here instead of the iPhone 7 plus I'm going to choose the iPhone 7 because I think iPhone 7 plus has a ton of extra space and our app isn't really designed for that it'll still work but you're gonna have a lot of empty space so I'm gonna choose the iPhone 7 and I'm gonna click this button to run the application it's gonna launch the iOS simulator here it just simulates a real device and you're gonna see your app on it so here we've got our label our to our dice here and this roll button and the reason it that none of the text changed then you know this is not six and this is not one like we've said it here is because this code only executes when the button is tapped remember this IB action only fires when the roll button is tapped so when I tap it you're going to see that label change and those images change the only problem is that each time I click roll it doesn't randomize right so that's kind of the problem here what we need to do is simply create two random numbers now I'm going to create two variables here we can probably even use constants instead var first number more equals we're going to use the arc for a random function and the upper bound is going to be 5 and because it starts randomizing from zero to whatever the upper limit is so if I put 6 here it's going to randomize from 0 to 6 so I'm gonna do 0 to 5 and I'm going to plus 1 so then I'm gonna get the ranges from 1 to 6 instead okay next I'm going to say let's second number equals arc for random and I'm gonna do the same thing here plus 1 okay so now we have something to work with for our label I'm going to say sum or the sum is and somehow I want to add these two numbers together right and then put it here we're going to use this little syntax here have this backslash and then two rounded brackets like this in this lets you insert a variable into the string so if I did something like this and put in first number it would read the sum is and then whatever first number was but inside here I'm going to put first number plus second number and then it's going to add these two guys up and insert them into the string here let's just test that out to see if that we get the proper thing okay so I'm rolling you can see the sum changing right I assume it's correct another thing we can do is we can actually print out these numbers into the console using this print statement so we can say print first number print second number like that let's run it again I press command R on my keyboard to run it you can press this button here up here in the Xcode interface also to run it so when I click roll now because I'm printing out the numbers I can see if it matches see four plus three is seven let's click it again I've got two and four now and that is six indeed okay so that's working get rid of these print statements here now we need to change the images so as you can see we've conveniently named the assets dice one all the way to dice six so all we need to do it really is change this number here again let's use that trick where we can insert a variable into a string so let's get rid of six and do this backslash followed by two brackets like that and let's insert first number into that string now you have to make sure that there is no space between this e and this slash right because if you did that then the resulting image name would be dice space and then whatever the number was and that is not going to match up with these names we have here in in the asset library so you want to make sure that there's no space between the e and the the forward slash or backslash sorry for this one second image view I'm going to get rid of the one and do the same thing except I'm going to put in the second number here now I'm going to press command R or click this button to run the application and when we click roll we get these different images and we get the sum up there now one thing I want to mention is that if you have any missing images like if you click on roll and then you get kind of an empty space there you don't have the corresponding dice image I would double check in the asset library that you actually have the images and that they're named capital D dice with the number behind it because when you have an empty image that means that whatever you're setting here that name it can't find that image so either you have a typo here you might you might have done like lowercase dice right in that case you're not gonna find any of the images in the asset library I want to make sure that it's capital D dice there's no space between the e and the slash there and in that you actually did you know you did drag all of the images into the asset library here okay and that should be it so now you have this working app now if you wanted to launch this on your phone you can actually just plug in your phone to your computer right now and then in this menu you should see your device here so I have my phone plugged in right now but it looks like haven't updated my OS so if you have you can select your phone like that and you can try running it on your phone so I hope that was helpful I hope that was fun and I hope you learned a lot I'm apologized to those people who you know have been through a lot of this if I went a little slow but I feel like for beginners this would be perfect I made an extra effort to kind of explain where the pitfalls were as well so if you've enjoyed this tutorial and you want to see more make sure you're subscribed to channel and also go on my website code with Chris common sign up for the newsletter because there are times where I send out emails on tutorials that are written only and I don't have a video version so you want to make sure that you get those as well and finally if you've completed this dice roll app I want to know about it because I'm trying to collect some more social proof I'm trying to bring more awareness to code with Chris so I'm gonna have a section at the end of this this dice roll app written tutorial where I'm going to feature people who have completed the app so if you'd like your name featured in the section below this article where I'm going to show all the people who've completed the app then simply just go to the code with roots comm go to this page here I'll probably put a link to this page in the description below the video and scroll all the way to the bottom to the wall of fame and you're going to be able to send out a tweet that basically says you've completed it and then I'm going to immortalize you by saving your tweet and linking it to your Twitter profile in the Wall of Fame at the end of this blog article so if you do do that I thank you and I really really appreciate it be sure to leave a comment and let me know what you think of this tutorial and look forward to seeing more from me thanks for watching thanks for learning with me and I'll see you guys next time bye for now