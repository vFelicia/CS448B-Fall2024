hey code crew firestore is not like your traditional database it doesn't use tables and rows and it doesn't use sequel in fact this second generation firebase product isn't even like its first generation counterpart the firebase real time database in this video I'm gonna show you how your data is going to be structured and organized in a fire store database and what sorts of data that you can store in it alright stay tuned hi I'm Chris Chang and welcome to code with Chris where we teach normal people like you and I how to build apps and how to code now if you're coming from lesson one of the firestore tutorial series you'll know that I'm going to show you how to use firestore database in the context of an app however I've decided to move that into its own separate series and playlist so that this firestore tutorial series will be purely focused on how to use firestore and in that series I will show you how to build an app that leverages the firestore database if you want to follow along as these tutorials get released two to three times a week then I highly urge you to hit that subscribe button below and don't forget to show your support by hitting the thumbs up button that is really gonna help spread the word all right let's dive in we're going to start with some diagrams so I can illustrate the concepts for you and then we're going to go do a screencast and dive into the firestore backend and I'll put the concepts into practice so that you can see it with your own eyes now in the firestore database there are two main record types collections and documents your database is structured as a whole bunch of collections and each collection holds a bunch of documents so essentially your database could be described as multiple collections of documents now each collection has a unique name and each document also has a name the documents within each collection must have unique names but the documents and different collections can have the same name now collections and documents are just a way to organize your data but where does your data actually live the answer is inside your documents each document holds your actual data the data in each document is represented in pairs of information each pair contains a field and a value think of the field as a label and the value would be the data that you want to store it so what sorts of data can you store well here's a list in the firestore database documentation it provides more details about each data type and I'll leave the link to that below the video in a minute I'll demonstrate each data type for you in an actual fire store database but right now I want to discuss the map data type a little further no this is not a geographical map instead this data type allows you to nest more pairs of data so to illustrate this is your document the first pair might have a field called nickname and the data type is text the value might be bull's eye the second data pair might have a field called name and the data type as map the value would actually be two nested data pairs representing the first name and the last name this would be useful if you needed the two pieces of information separately and this is just one example of how the map data type can be used if you're thinking that you could have just had three fields with the data type text you wouldn't be wrong the map data type just gives you another option and while we're on the topic of fields and values just in case you're coming from a MySQL background or something like that I just want to make sure that you know you can have different fields for documents in the same collection I know it can be really tough to get out of a my SQL mindset where you have tables columns and rows that was the case for me now having uniformity across your document it definitely helps when it comes time to query them but I just want you to know that it's not a requirement now before we dive into the screencast where I demo this stuff for real I need to explain one more concept subcollections you see each document can actually have its own collections of documents and then those documents can have their own collections of documents and we can go up to a hundred levels deep now that you know how the data is structured and organized in a fire store database let's go and demonstrate these concepts in an actual fire stored database so here we're looking at the firebase backend for the custom log in firebase authentication demo that I did last week and if you didn't see that I'll link to it above but in addition to having a fent occation store on this and you can also set up a database and this is where we're going to be demoing some of the stuff that I just showed you now the database part when you set this up for the first time you can actually choose from real time database and cloud firestore I'll do a separate video on differences and stuff like that but right now I want to focus on showing you some of the concepts that we just went through so here is a brand new empty firestore database we talked about collections of documents alright so here we're gonna start a brand new collection and I'm gonna name it just something like 8 for example it says that you know you could call it users if each document is going to be information about a particular user but I'm just not gonna use real names here for the sake of this demonstration but what I do want to point out to you is take a look at this path because when it comes time to actually access this data and work with it this path is going to be really important and this is just the sport slash is going to be known as your route ok so that's going to be you know the starting point so this collection here that idea is going to be a and it's going to be basically at the route as we get deeper and deeper you'll see that this path is going to grow and it's basically constructed by these collection and document IDs I'll show you what I mean let's go ahead and click Next we're gonna add a starting document in this collection I'm just gonna call this you know document 8 something like that and we can also add a sample field so let's do that let's say you know name what did we use we use the nickname right so let's do that and string is basically text so we're gonna start with that let's eat bullseye and let's save this and take a look at what we've got so this column on the left hand side lists all of our collections at the root node we've so far we've got one called a and then inside that collection we have one document called doc slash a we can add a separate document I'm just going to do doc slash B and I'll add this time I'm gonna purposely make it different just so I can prove to you that see it doesn't matter the actual fields and data inside of each document doesn't have to be uniform and then on this last hand column you're looking inside the document that we have selected in the middle column so these are all of the data pairs in document a and if I saw a document b here would be all of the data pairs as well a couple of things I want to point out to you the path to access this document right here would be you can see that little house represents kind of the root node it would be /a because that's the collection this document is in write ford slash doc slash eight and that would give you the reference to that specific document now before we dive into the documents and start looking at data types and stuff like that there are a few more things I want to demonstrate just based on what we talked about so let's start a second collection called B and I'm also going to start a new document just do that and I want to demonstrate to you that the collection names here in this root group of collections these have to be unique however if you take a look at the documents in here I have doc slash a and doc slash a both of these documents have the same ID but that's not a problem because the actual reference to that document for this guy is ford slash a /a whereas for this one it would be fort slash beat and then forward slash doc eight all right now let's dive into a document and take a look at fields and data types so ignoring this start collection part which is for sub collections as we mentioned let's take a look at the different fields and add some sample ones so let's add I'm just gonna call it a number and we'll choose number as the data type so I'll add that we we've also got here let's pick a different data type here boolean let's call this I don't know switch be true or false what else have we got I want to do the easy ones first note just means nothing B you know it doesn't really matter okay so that means nothing and we've got timestamp right so you know this interface lets you pretty handily add date and times so that's date we've got geo point now this is some sort of lat and long and we've also got a reference now a reference you can see here is a path to another document and then you specify exactly how we just Illustrated it would be a path like you see up here right slash b / whenever that document ID maybe and you would specify that document path right here and this value becomes a reference to another document now this can be useful for crossreferencing data so here I'm going to specify collection a and maybe doc slash a or something like that oops forgot here give that feel the name okay so there we go now last but not least we also have actually we have an array and let's just call this a list now the interesting thing about a race here and it's kind of different from working with your standard Swift arrays is that you know the data types can be different for each for each item in your array so that's kind of cool right now the last thing I want to show you our sub collections so let's do right here in this document start a sub collection I'll just I call this my sub collection and I'm just gonna call the sub a and we can do something like that so let's this is the path right to that sub 8 document you can see it's collection B and then document 8 in collection B right and then the sub collection name and then the document in that sub collection so that's the total path to reach this document right here but let's move back for a second so we've got collection B we've got dock a and then you can see here my sub collection now we can have multiple collections in the same document it's not just limited to one so you could start another sub collection in this document if you go into my collection then you can start multiple documents in here right and then this document in this sub collection can have another sub collection we can really go 100 levels deep with this now how you end up structuring your data really depends on what your app does and how you need to query it and how you need to display that data but I hope that this video plants the seeds for how firestore organizes that data now in later videos of this firestore tutorial series we're going to get into things like querying your data and at that point it might be more clear about how you should organize your documents and collections but for now I hope that this was a really good primer to help you understand how far store works now in this video you learned that your data is going to be stored as collections of documents in the firestore database now in the next lesson I'm going to show you how to work with that data in your iOS app so don't miss the next video by hitting the subscribe button below and make sure to check out our firebase authentication series as well if you're interested in creating login pages and having user accounts for your app alright I'll see you guys next time