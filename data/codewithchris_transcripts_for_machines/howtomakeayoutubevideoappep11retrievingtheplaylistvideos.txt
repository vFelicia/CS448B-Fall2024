hey coders what's up I hope you guys are having a brilliant day it's Chris here with another episode of how to build a YouTube app in the previous lesson we had created a pod file for our YouTube app and added this Library alamoo fire so that we can do networking with it we also looked at the YouTube data API and signed up for our API key now I got an email from a viewer his name is Fabian who had some experience with the YouTube API and he mentioned that having the type of API key as iOS May interfere or may cause some problems and he recommended to use uh web type key so that's a good thing to know thank you Fabian I'm going to continue to use this key for now but if we run into any issues then we know that one of the things we should check is maybe creating a new API key but this time choosing web okay so that's just a good thing to keep in mind in this lesson we're going to actually make our first call to the YouTube API to retrieve videos uh using Alamo fire so let's take a look at our current xcode project and see how things are structured and to take a look at what needs to be changed now we open the XC workspace file because we have installed Coco pods and here in the YouTube app let's take a look we have a view controller let's go to the storyboard first actually and if I double click to zoom out we can see that we have a view controller that displays the list of videos and we have a detail view controller that shows the video details when someone taps or selects on a video on the main view controller how are we making this work well in the view controller viewed load it's creating an instance of video model and then calling the get videos method which is going to return a list of hardcoded videos currently okay so let's take a look at this get videos method one quick way to jump to that method of that class is to rightclick that method and go jump to definition and that's going to bring us right into the video model. Swift class and taking us to the method that we want to look at so in this method we create an array of video objects right now it's empty and then we create all of these video objects with hardcoded uh property data and then we're appending it to the array and at the bottom of the method we're returning that array of videos all right and you can see here that this method returns an array of videos so one thing I'm going to do here is I'm going to create a new method I'm going to say get feed videos okay and the return method is nothing right now and instead of getting the view controller to call this method I'm just going to get it to call this new method and in here we're going to fetch the videos dynamically through the YouTube data API now why doesn't this method return an array of videos the reason is because when the viewcontroller.swift calls this method and it goes out to fetch the videos we don't want the view controller to wait for that to happen because while the view controller is waiting for the videos to download and get returned from this method the user interface is actually going to be frozen so the user can't interact with it so it's going to look like a broken or Frozen app and we don't want that to happen the technical term for this is called synchronous downloading in the execution of your app there's a main thread worker that is responsible for executing your app responding to the user interaction uh updating the user interface and stuff like that if we have that main thread worker go off and fetch the video items through the internet then it's not going to be around to update the user interface or respond to user interaction and then the user is going to stay out of a Frozen app until the main thread worker comes back with the videos and that's called synchronous downloading now it might be okay if what it's going off to fetch is very very small so it's going to be in and out very quickly however a better way of doing it is to do it asynchronously which means that instead of the main worker thread going off to fetch the videos we're going to create another background thread to go do it so the main worker thread can continue to respond to user events and update the user interface and when the background worker or the background thread has fetched the videos then it's going to uh let the main thread worker know uh and pass that data over to the main thread worker to update that table view that we've got in the main view controller and that's why this method doesn't return anything right away because the main thread worker when it executes this method we're going to kick off a background worker to go fetch the data and then the main thread worker is going to continue on its merry way and then later when the background worker has done downloaded the videos it's going to call back or tell us that the videos are ready and then the main thread worker will pick up the data and update the UI with it so luckily when we use Alamo fire to make a request it's asynchronous so we don't really have to do anything there so let's look at the GitHub page and look at how we make a request so first of all we have to make sure we import Alm fire at the top so in our EXC project at the top here let's write import Alam fire I believe it's lowercase like that and then basically we write Alam fire. request and we here we specify the type of request we're going to be able to see what type it is from the API reference here um we're going to specify the URL more than that we're going to want to be able to specify some parameters so we're actually going to use this request method here where we specify the request type a URL and a bunch of par parameters in the form of a dictionary okay so let's just try writing this in our X code project in the get feed videos we're going to say Elmo fire. request uh and it's not really detecting it right now so actually let me clean the project and let me build it okay build succeeded let's try that again there we go request and there's a couple of them this is the one we want to use right here here um so method uh the URL parameters and so on now let's jump to the YouTube data API the API call we want to make is playlist items because we have a playlist and we want to list all of the items in the playlist so I'm going to click this list option here or List method returns a collection of playlist items that match the API request parameters okay so here we can see the request type is get and this is the URL to hit and then here is a description of the parameters that we can specify so first of all let's put these two things into our request the URL all right so it's a string so I'm just put the string like that going back to here it's a get type and if you look at the usage information we just have to write doget to specify that uh request type so here let's do that okay so parameters what sort of parameters do we need to put in let's go back to this page here uh there's one called part and this one's actually required so what does part do specifies a comma separated list of one or more playlist item resource properties that the API response will include and let's see for example in a playlist item resource the snippet property contains numerous Fields including title description position and resource ID if if you set part equals snippet then the API response will contain all those properties and so here's a couple of different part strings that you can put in we are actually going to specify the snippet for the part because I want the title and description and that sort of stuff so I'm going to go back to xcode right now and I'm going to create a new dictionary where the key is part and the value is snippet okay so that's not the only parameter we're going to have so I'm going to write comma so we can specify another key value pair let's go back I'm also going to want to specify the playlist ID so it specifies the unique ID of the playlist for which you want to retrieve the playlist items okay so this is going to be the key playlist ID uh that's right here I'm going to create a new key Co in and the value I need to specify some sort of playlist ID in there if I go to my YouTube channel and you can find the playlist ID like this if I for example if I click under playlists and I choose any one one of these ones let's say you can see here that this is the playlist ID if I watch a video as part of the playlist again that playlist ID is right up here like that so I'm going to go back actually uh to my channel and under uploads which is my most recent uploads if I choose play all I'm actually going to see the playlist ID here under list equals and then there's some sort of ID like that I'm going to grab that copy it and I'm going to use that here so that's the playlist ID that I want to fetch okay let's go back for a second what else do we have to do Max results uh couple here that we don't really need okay there's one other parameter that we need to specify if you read the overview of the data API you can see right here every request must specify an API key with the key parameter okay so that's what we're missing uh we're going to specify another key value pair here where the key is key and the value is the API key now the API key is right here so I'm going to copy that and you know what instead of pasting it in there I'm going to create a couple of constants up here because we may need these uh for other requests so I'm going to say let API key equal equals that as a string uh let uploads playlist ID equals I copy this and put it in there there's an extra quote and then I'm just going to specify that and specify that okay and now for the encoding parameter encoding uh what sorts of parameters are these let's see parameter encoding dot uh and it's going to be URL so the reason I know that is because if we go back to playlist items under list um these are query parameters and query parameters if you're familiar with web development are basically parameters like this where you have question mark and then something like V equals or uh list equals something like that instead up there you would have part equals you know one of these values uh playlist equals whatever the playlist ID is and so that's what is called a URL query string parameter so the parameter en coding is URL so you might not have known that for headers we don't have to specify anything we're going to pass in nil okay so we have our request here and it's going to go out and hit the YouTube data API with this call and all of these parameters now how do we get the response if we go back to the Alamo fire under usage under response handling you can see the call being made the request being made and then responsejson and as part of the response object that gets returned uh we have request which represents the original URL request response data but result is what we're interested in because it's the Json result it's basically the result of that request converted from Json into either an array or dictionary that we can use and then here there's some optional binding to get the response. result. value out as a Json object if we go back to here we can see an example of the response and if you're familiar with Json um this is going to be a dictionary with all of these key value pairs right and there's one key called items and its value it's an array of all of the videos that we need so let's let me demonstrate by following this responsejson and then opening up the response Handler and doing that so do response Json this one right here double click to open up this block of code and it has one parameter called response so I'm just going to call this response and here's the code in here so we're going to follow this code right here with the optional binding I'm just going to copy that and paste it in there so what are we doing here it's going to make this call right it's going to grab the response it's going to convert that Json response there's one parameter in the block of code and then when it's done it's going to execute this code in here and we can get a reference to the response data through this response parameter here we're we're just testing that the response. result. value which is essentially this stuff right here um we're testing if it actually is a value okay so let us do something like um Json Json is going to be this dictionary here but we only want items right so we're going to say if let Json that's okay and for video in Json items right because that Json is this whole dictionary and items is the key and it's going to to return an array okay so we're going to say in Json as NS array okay so we're going to Loop through all of the videos inside the items key and let's print that let's print video okay and the last thing we have to do is actually call this method now if we go back to viewcontroller.swift uh right now it's creating a new video model and then it's calling the get videos which is going to return all of those hardcoded videos right away and it gets assigned to sell s.v videos just going to comment out this line and in here we're going to write fire off request to get videos self do not self do but model. get feed videos so this is going to call the method we were just working on here and it's going to make this request it's going to look for that playlist ID um using our API key and it's going to return the list of video items with the snpp property let's give that a run and see what we get that's a lot of coding okay so we do have something in our console window because of this print so let's see what we have if we scroll all the way to the top so keep in mind that for each video in the items array we are printing out that video and by looking at the console I can see that each video is a dictionary um it's got a key called eag with a value of this it's got another key called ID with this value uh and so on and so forth but I'm interested in this one this key snippet has a value which is a dictionary and inside that dictionary there's um some Channel information which I don't care about and it's all this text right here but it's got a resource ID key which I want the video ID of all right the resource ID key is going to return a dictionary and inside that dictionary there's a video ID key and finally the value of that video ID key is the video ID I need and actually if we scroll up a little bit um this description right here description this is actually the video description even though yeah this this right here is the video description so we're probably going to be able to use that and then there's also this title key here which is the video title which we're going to need that and it's also got the thumbnail URLs for each video so we're going to be able to do that now the trick is how are we going to get all of this data out of this dictionary and that's what we're going to go through next lesson so in this video we successfully hit the YouTube data API to retrieve all of the video data for a particular playlist now what we have to do is just Loop through all of those video uh Json objects and create all of these little videos like we hard coded here but instead of using this hardcoded data we're going to take out all the information from from here you know from The Returned Json response we're going to take out all of this information and create these video objects based off of that information so we're going to do that inside of this Loop right so I'm going just write a todo here create video objects off of the Json response and then we're going to be able to pass that data back to the main worker thread to update the view so for those of you who have never worked with networking downloading feeds hitting apis and stuff like that let me tell you that it does get easier and as soon as you get the hang of it you're going to be able to build more complex apps and apps that work with data on remote databases and stuff like that so thanks for watching I hope you guys enjoyed the video and I look forward to seeing you guys in the next one don't forget to subscribe to the channel share the video and like it all right bye for now