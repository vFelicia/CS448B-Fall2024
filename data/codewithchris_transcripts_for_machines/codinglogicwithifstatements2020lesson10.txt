hi and welcome to lesson 10 by the end of this lesson you will have finished the war card game project all that's left to do is to count the score and to update the label elements on the storyboard now doing this is going to involve writing Swift code that can take two numbers compare them and then execute different branches of code depending on what the result is in other words you're going to be writing Swift code that can make its own decisions furthermore by completing this project I'll tell you where to get your certificate of completion for your achievement and yes I'll even send you a physical paper copy of it if you want alright you ready let's do this so before we dive into our Xcode project I want to first start in a playground and I want to show you what's called an if statement which is going to allow you to evaluate a piece of data and decide what to do so the if statement starts with the if keyword and then you're going to test some sort of condition whether it's gonna be true or false and so I've got a constant integer X it's set to ten right now so I'm just gonna do a simple check and say if X is less than 11 okay so that's my condition it's gonna make that test if that is true then it's gonna run the code in between my curly brackets so let's create some space in the middle and you're gonna print hello now let's run this code here and it's gonna take off okay so we see hello in the console the reason this executes is because this condition is true right however if let's say X is 12 and I run the code again nothing's gonna be output down there it doesn't run this code because it checks and it fails the check so here's the cool thing about if statements and that is that you can provide alternatives so you can say if X is less than 11 then print hello otherwise and you would use this else keyword and you would specify another block of code to execute print goodbye all right so if we ran this code right now what would you expect to be output all right goodbye because it does this check and it fails it so it doesn't go in there and instead it comes into this else part so let me just set this to ten and show you so X is less than eleven and that's true so it comes in here and prints hello but it doesn't print goodbye it just chooses one path or the other now here's some other cool stuff that we can do with an if statement and that is to test multiple conditions so we can say else space if and open up another block so let's say good afternoon oh I forgot to put the condition here if X is let's say greater than twelve that would print good afternoon let's make this number a little bigger so let's say 15 if X is greater than 15 then print good afternoon so what if we made the sky 20 so it would basically start at the top it would check if X is less than 11 and it's not so then it checks the next one is X greater than 15 yes it is so it prints it executes that code in there and it skips the else clause now what if none of it is true so what if I said X is equal to 13 all right so let's give that a run it falls down to this else clause because this wasn't true this wasn't true so all that's left is this sort of catchall bucket now here's the cool part you can omit different pieces of your if statement depending on what you want to do example you can remove the catchall bucket you erased that and you execute it nothing happens in this scenario because none of these conditions are true and there's no catchall bucket so essentially no code gets run now so far I've just done lessthan and greaterthan but you can also do a couple of different things you can do you can do less than or equal to or you can put the equal sign or you could do greater than or equal to you can also do not equal to so not equal to is actually exclamation mark equals and that is testing if X is not 11 so let's take a look at this and we get hello now here's a very very important point and that is that only one branch of your if statement ever gets executed so if I had this statement where I was saying let's say something like that and I ran the code both of these conditions are true right but it starts at the top and as soon as it reaches a true condition it will execute that block of code and that's the that's it right your if statement is done so it ever only picks one path to go down even if you know this would have evaluated to true now this is very different if you write this because if you did it this way these are two different if statements so it would first one this if statement right and tested the condition to see if it should run this block of code and then it treats this as a separate if statement and it's going to test this condition to see if it should run that walk of code so that is one clear distinction to make doing it like this if and then else if combines these two conditions into a single if statement so it's it's going to be like two different paths and it's going to choose one path now instead of having two different branches like we have here you can also do three branches or four branches you can just keep changing these else if things if you want you know something like that know that this really makes sense but so you could chain as many of them as you want but just keep in mind that it's going to start at the top work its way down and as soon as it hits a condition that's true that's the branch it's going to take and it's not going to execute all your other branches now I want to go too crazy with having a whole ton of elseis because there's actually another stuff it's called a switch statement that is more suited if you have a lot of different options but an if statement is good if you want to just test a couple of branches and what else can I show you here so let's talk about the different types of comparisons that we can do we can do as you've seen it greater than you've seen less than you can do greater than or equal to you could do less than or equal to and you can test equality now notice that equality is double equal sign okay so this is testing if X is equal to two we don't use a single equal sign because remember from your basic Swift lessons a single equal sign is assignment if you write this you are trying to assign the integer two to the constant X and this is an error because X is a constant so we can't change it after anyways so if you want to compare to see if as X is equal to two you would use a double equal sign and if you wanted to compare if you wanted to test that X is not equal to two you would say exclamation equal and this is testing if X is not equal to two now this stuff can get pretty crazy because let's say you had another constant here and we're not gonna need to do this with our card game but I still want to show you just it's good to know so if you wanted to test a condition with two different variables you can either say and or or so n is double ampersand like so for me that would be shift and the seven I would get the ampersand so your keyboard layout might be a little different so I can say you know if Y is equal to five and X is greater than or equal to eleven then that would be true now when you use an end operator like we have here both sides of this must be true only then will it come into this branch so if we had something like y equals the six like that we ran this code then it would jump down to here right because this is not true and that kind of like cancels the whole thing the whole thing evaluates to false on the flip side let's say we had something like or which is we're actually represented by these two double pipes for my keyboard that would be shift and backslash I get this sort of symbol so for your keyboard it might be a little different but this represents or and when you have an or operator either this value it's true or this evaluates to true and that would be sufficient for it to go down this path here so as you can see if I run this code right here we're going to get hello and that is because even though this is not true this is true and that's enough because we're using or you know here's the crazy part and that's that you can use brackets to chain these things together so you can do something like this you know so you can say like if X plus y is equal to 10 and you know either this one or either this one is true then come down here so you can express some pretty complex logic depending on where you place these brackets so let's try to run this code here and we get good afternoon but how would we make this work so x and y have to equal to 10 y has to equal to six so if we just did that and we change this to four that would actually bring us into hello so why does this evaluate to this branch well because X plus y is equal to 10 right is it 6 plus 4 is 10 and because we're using the and operator this side must also evaluate to true now what does this side say well since it's using an or either this must be true or this must be true so X is not greater than 11 right it's four that fails but Y is equal to 6 so that's true so essentially this side is true and this side is true and so that's why we're going down this path here so now we're going to implement an if statement inside of our Xcode project now let's look inside the view controller that Swift inside the deal tapped we so far have been changing the image but we have all the data we need to determine if the left side is the winner or the right side is the winner see we have left number and right number right and based on what you've just learned on the playground we can just compare these two numbers so we can say if the left number is greater than right number then right then left side wins or player wins right else if right number let's actually keep it consistent so left number is less than right number then we have right side wins and then we do have another scenario right where left number equals right number so we can just use an else and we can say ty now I'm not going to address this particular scenario because not exactly sure what to do but if either left side wins over the right side wins we can increase the score and then we can update the labels so if you remember all the way up here we actually haven't declared any properties to keep score so why don't we go ahead and do that var left score is equal to zero and bar right score is equal to zero so they both start at zero you scroll down here and we're going to say left score and we're going to use + equals 1 essentially that takes whatever number is currently inside left score and we're gonna add 1 to it and we're gonna then assign or rather update the label so we do have a reference to the label because we have an iboutlet property called left score label you can see it's a type of UI label and if we use dot notation we can access the properties and methods of that score label object in the storyboard and it actually has a text property that expects a string so we're going to assign a string to it the problem is that left score is an integer so if I try to put left score C it's an int if I try to assign left score to update the text of the label we're gonna get an error because it says it cannot assign a value type of int to a type of string because remember that text properties expecting a string data so what we can do is we can actually create a new string object like that and it just has a special way where you can pass in an integer and you can represent that integer as a string so that's essentially what's happening here we are creating a new string object and we're passing in this integer and it's going to essentially treat that integer as a string or change or convert that data type now let's do the same thing with this side so we're gonna say write the score is plus equal 1 increasing that score and then we're going to say write score label dot text is equal to new string object and we're going to pass in right score all right so let's run our project now and just take a look at what we've got got our card game here and King is bigger than three so we have that increased score nine is bigger than seven so we have two now gets one on the scoreboard ace is bigger than Queen so you know cool works now don't forget to go back and write yourself some comments get into the habit of doing this so we've got randomize some numbers update the image views compare the random numbers and you know you can get as granular as you want with this yeah now the last part I want to show you is about running this app on your own phone so in order to do that you would just plug in your phone with a cable plug it into your computer and if it's the first time you've ever done this you'll probably get a popup like if you have Xcode open asking do you want to use this phone for development and you have to click yes when you do that it's going to set up your phone for iOS development so that you can run this project on it and also if it's the first time you've ever plugged in your phone or your iPad to your computer it's gonna ask it's gonna ask on your phone do you want to trust this computer and you have to click yes or trust whatever shows up on your phone so those are the two things that have to happen and then once you do have your phone connected and it's got the proper permissions and everything if you pull this dropdown down you're gonna see here I don't have a device connected right now but you're going to see your device here it's gonna be like your name whenever you've named your device essentially you're gonna see it here you're gonna want to choose that okay so this pops up for me because I don't have a device connected but you're going to want to choose that and then you're going to want to just click run and essentially instead of launching the simulator it's going to launch this app on your phone and then after that you can stop your project disconnect your phone and you'll still have that app on your phone now the thing is when you do it this way Apple intends for you to do it only for testing purposes so I think it gives you about seven days before you before I won't launch anymore and you're gonna have to connect your phone again and kind of like run your project on your phone too to give you another seven days if you do have an Apple Developer account though and this is like a paid account at Apple charges you a fee every year for you to publish apps into the App Store then you'll be able to keep your app on your phone for a lot longer you'll also be able to send that app for other people to other people's phones for testing purposes and also the publish apps into the App Store not bad right look at how far you've come seriously give yourself a pat on the back you've just gone through four hours of iOS training not including the exercises and you've built their first app that you can show people to celebrate these huge milestone I want to give you a certificate of completion just visit the link below or check out the description and get your certificate and get your name up there on the wall of success stories now in terms of what to learn next I have several options for you number one you can visit youtube.com slash code with Chris to see all of the other free content and tutorial series that I have that you can watch number two if you have an app idea make sure you go and get my free sevenday app action plan which is going to help you put together an actionable list of learning objectives to build your app you can get that by going to code with Chris comm slash action plan and number three if you have some budget to spend you can check out my paid courses what you actually continue from the ten lessons that you've just watched and continue building your skills and building apps and they check those out visit code with Chris calm slash beginner course and lastly I just really want to thank you for learning with me you know I never imagined myself teaching iOS but I'm having so much fun every day I feel so fulfilled hearing your success stories so if this training has helped you out in any way please reach out and mess to me and let me know if it weren't for people like you I wouldn't be here today so thank you again alright I'll see you in the next lesson