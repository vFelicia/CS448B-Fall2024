hello everyone welcome back to lesson 11 of how to make iPhone apps with no programming experience in this lesson we're going to lay down the groundwork and we're going to expose the elements of our user interface so that they can be manipulated with swift code in the previous two lessons you learned about UI kit which is a set of classes that Apple provides to make app building easy iier for us well did you know that all of these elements we've added to our storyboard here they are actually part of UI kit so for instance these image views that we added to display images well the official class name for these guys is UI image view I'm just going to quickly pull up the UI kit reference and I'm going to search for the official name here UI image View and you can see it's part of UI kit and this object is or this class is meant to display images going back to the xcode another example this button that we added the official class name for it is UI button so if I search for that there we go there it is so we've actually been working with uiit already by adding these prebuilt elements onto our storyboard so in the previous two lessons you learned that when we're building an app project in xcode what we're doing is we're merely building classes and these classes get turned into objects when we run the app and the objects are actually interacting with each other to uh display your project and to uh provide the functionality for your app when we were working on our user interface it might not have felt like we were working with classes but in fact we were I just showed you that all of these elements they are classes in the UI kit framework so by dragging them onto our UI view here and specifying all of these uh configuration these attributes for these elements xcode is going to take all of this visual information and it's going to create instances of these classes or objects of these classes when the app project runs so for example uh when we run this project xcode would create an image view object here an image view object here and then assign it the image that we've specified in the inspector pane uh same thing with the buttons and labels xcode would create objects for all of those classes that we've specified here and it would assign them to the right places and that's how our view would be created in memory so the next question becomes how do we get access to these objects and memory so that we can modify them so for example how would we change an image once the app is running well if you remember back in the MVC lesson or the model view controller lesson who manages the view the view controller right when we created the project this class was already created for us this view controller and when this view gets created in the storyboard it actually gets assigned to the view property of this view controller so let us examine this view controller class first of all this statement up here import UI kit just specifies that we're going to be using UI kit classes in this view controller class now you can see here that the view controller class actually is a subass of the UI view controller class if we search in our UI kit reference document we might have to look quite a bit so here is the UI view controller class as part of the UI kit framework now the UI view controller class contains a lot of prebuilt functionality for displaying The View managing the view so on and so forth so what xcode does for us is creates a brand new class and then it subclasses from that and allows us to um specify custom behavior for our view controller by default we have two methods that are overridden for us so view did load is an overridden method from the UI view controller class and this method gets automatically triggered when the view specified in our storyboard has loaded that means that xcode has turned all of this visual information into objects and has assigned it to the view controller then this method will fire and then inside this method we can add any code that we would like to um manipulate the uh elements in the view if we need to at that point in time another method that is overridden is the did receive memory warning method and this method gets fired when memory is low when our app is running and in here we can specify some code to manually free up some of our objects or assets or data whatever to free up some memory manually most likely we won't have to specify anything in this method because xcode does a pretty good job of managing our memory within our app unless we're doing something really strange all right so I still haven't told you guys how we're going to uh get a handle on those objects from the storyboard from this view controller well we're going to do that through what are called IB Outlet properties you've already learned what properties are IB Outlet is simply a keyword that specifies that that property is refer referencing an object that was created from the storyboard so let me go ahead and show you guys how we're going to use IB outlets and get an handle on those elements from our storyboard up here in the upper right hand corner we can go into What's called the assistant editor this button with looks like two circles that are intersecting with each other so let me click that and what's going to happen sometimes and in my case here uh we're looking at two panes of code it's going to turn your editor into a left side and a right side what we want to do is click the storyboard from our file Navigator and then you're going to see the storyboard on your left and you're going to see the code on the right one word of warning if you see manual up here what you want to do is just click on that and then go down to automatic and then choose view controller and that is going to just uh grab the right file for the view controller sorry for the view that you're looking at in the storyboard now I'm going to make some space because I can't really um get a good view of the storyboard and the code editor which is what we're going to want to do so I'm going to go into the upper right I'm going to hide the Navigator I'm going to hide the inspector or the utilities pane on the right hand side and I'm just going to scroll my view into view and then now I'm going to show you that creating IB properties is actually really easy what you what you're going to want to do is hold down control on your keyboard and then just click on the element that you want to create an IB outlet for and then when you're dragging as you're holding down uh control on your keyboard you're going to see this blue line and you're going to drag it over here on the right hand side and you're going to see a little message pop up insert Outlet or outlet collection and then just let go and you're going to get this little popup menu here so make sure that connection says outlet and for the name uh I was dragging it from the right hand uh image there so I'm just going to call this right image view the type is going to be image View and we're going to leave the storage as weak for now now this is going to if you pop that open it's going to say strong or weak and by default it's going to be weak now in the future we're going to talk about memory management and that that's when it's going to be clear why we're going to have weak but for now leave it as is and we're going to click this button connect what it's going to do is create this line of code for us IB Outlet week VAR Right image View and then you can see the data type followed by this exclamation mark now we haven't talked about optionals yet but what this exclamation mark specifies is that this property will have a value in it because as soon as the view has loaded and this object is created it's going to be assigned into this property right here now if you can't get that control click and drag method to work just for some reason you can also just type it out so let me show you an example of that so just follow that line type out IB Outlet weak VAR and this time I'm going to type left image view you UI image view I'm going to write that at this point what we're going to do is go into our storyboard we're going to right click on this image view it's going to pop up a little menu and underneath new referencing Outlet just click and drag that Circle you can left click it and drag it up to this yellow circle up here or you can drag it up to the view controller line in your document outline if you let go it's going to show you all of the properties or the the IB Outlet properties that you can connect this image view to you don't want to connect it to the right image view because the other elements already connected to that uh make sure you connect it to the left image view now if you accidentally do it I'm going to show you how you can correct it because X code is not going to stop you from doing that if you want uh so again make sure you're uh assigning this new element to the new IBL property that you just did um just as a way to show you guys something uh that's incorrect I'm going to choose Right image property so right now that you can see that connection has happened and right now both of these elements are connected to Right image view now that's going to cause problems for us how we're going to fix that is we're going to rightclick on that image view again and we're just going to uh break that connection it's going to show you which property it's it's connected to so click X to break it and then let's just repeat that and this time I'm going to choose left image view so you can see now it's connected to that property now another thing that uh beginners often stumble on is sometimes when they type out the IB Outlet property they accidentally make a typo and all they do is they get rid of the property like that and when you run your app at this point it's actually going to crash because you've deleted this line of code that specifies the IB outet property but the element in your storyboard actually is still connected to it see if I rightclick that image view it's still connected to left image view um but it no longer exists in our code so that's going to cause a crash uh and what how you're going to fix that is again just right click on the element you're going to click X to break it off okay so I'm going to just hit undo now and so I've got the property back um so far I've connected these two images we're going to connect some more elements okay uh let's connect the um the label here sometimes it gets hard to click because you've got you know a whole bunch of different elements stacked on top of each other you can even do it from here hold down control and then just drag a line from that label this is the score label cuz we're going to want to update that score label I'm going to call this the left score label and then I'm going to do that with this one here as well remember both ways of creating Outlets uh WR score label and just like that you've exposed these four elements to the view controller so whenever you need to manipulate any of these four elements all you need to do is specify them by name like this and and you're going to have full access to manipulate any of the properties for that element and we're going to do that in the next lesson thanks for watching and I'll see you guys in the next lesson bye for now