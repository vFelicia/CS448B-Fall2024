hello and welcome in this lesson we're going to talk about a swift construct that is going to allow you to write code that says if this then that now this easy to use but powerful syntax is going to allow you to express logic at a whole new level but before we dive into that just in case you're new around here hi my name is chris and welcome to code with chris the place to be if you want to learn how to make an app fun fact i learned coding because of a mandatory class in school how about you did you learn coding because of school or was it something else let me know by leaving a quick comment below and on your way down there if you wouldn't mind please give this video a quick thumbs up really helps me out so thank you for that all right with that said let's dive right in all right so i've got a brand new playground here i want to show you how if statements work before we apply it to our war card game project all i have here are a couple of constants actually more than a couple i have a bunch of constants with different simple values some integers strings and boolean values and i want to use these constants to demonstrate how if statements work now again the if statement is very powerful because it allows you to run code based on some conditions so i'm going to use these constants as my conditions let's first take a look at a basic if statement declaration i'm going to type it out first and then i'll explain each of the parts so you start with the if keyword and then you put some sort of value or condition that evaluates to a boolean result so i'm just going to put e and i'm going to open up a pair of curly brackets and inside here i will just print hello world all right and that by itself is the most simple if statement as you can see starts with the if keyword and then followed by either a boolean value or some sort of code statement that evaluates to a boolean result followed by a set of curly brackets and inside the curly brackets you put the code you want to run if the condition is true in this case e is false right so it's not going to run that code because it doesn't evaluate to true however if i changed this e and i was testing f instead then this code would run because it evaluates to true now it can get pretty crazy because you can chain these things together so one of the ways you can chain them together is using and and that's a double ampersand so let me just indicate that there and how this works is if you'd write f double ampersand let's say g then now you're testing both conditions and because you're using and both conditions have to be true in order for this code to be run so in this case because f and g are both true right true and true means true okay and another example is you can use or so these are double pipes the pipe key a lot of beginners they're not sure how to press it on my mac keyboard this key is right under the delete key and right above the return key and it's the character on the backslash key so i have to hold down shift and i have to hit backslash to get that pipe so double pipes it might be different on your keyboard this is ore okay when you use an or instead of an end and you're chaining together two conditions like that you're saying if either condition one is true or condition two is true then run this code so for instance f and g are both true so that'll definitely run this code if i do f and e let's say e is false remember this code will still run because at least one of the conditions is true now again this can get pretty crazy because i can keep chaining it i can keep doing ors or i can even throw an end in there so let's do that but this sort of gets confusing now because this can be read in a couple of different ways is it e and g and then or f or is it f or e and g do you see what i'm saying so for if if i put brackets around these this might make more sense if i do this that's saying if f is true or e and g are true then run the code however you know i could also put brackets around it like this if f or e is true and g is true then run the code so you can use brackets rounded brackets to help you differentiate which conditions to evaluate first all right so far we've been using just the boolean values but there's still more i want to show you with the syntax for an if statement before we go on to looking at integers and strings so along with the if statement you can also extend that if statement to test another condition because this is just testing one condition right you can then following the closing curly bracket of the first code block you write else if and then you write another condition so let's say else if e then put that else if g and then do that so what's going to happen here is it's going to test this condition if this evaluates to false it's going to then test the next one it's going to cascade down if this is false then it's going to go down to the next one at any point while it's checking these conditions if one of them is true then it's going to go into that branch it's going to run that block of code and it's going to skip the rest so this allows you to test in this case three different branches or pathways and only choosing one the first one being true but keeping in mind that it checks these branches from these conditions i mean from top to bottom so the first one that hits that is true that's the branch that's going to go on down and finally there is also another feature of if statements there can be a sort of catchall branch if none of those conditions above are true then you can have an else code block so this code block runs at the very end if none of the conditions were true and it didn't execute any of those branches so this is sort of like your catchall or failsafe and again these are all optional you can have one else if you can have no else if you can not have any else's and you can just have an else so if this condition isn't true then it's just gonna come down here right so this if statement is really powerful the syntax is really simple to understand but it gives you so much flexibility in which code statements to run depending on what is happening inside of your app okay so i'm going to undo this so we can see sort of like a fullfledged if statement here and i'm going to show you how maybe integers or strings can be evaluated as conditions now in the example so far i've just been referencing boolean values and that's simple but working with other data types like integers and strings you might have to use those in an actual statement in order to evaluate to get a boolean result right for example instead of g which is just a boolean value true let's use a in order to evaluate a boolean result i have to use a comparison operator right so i can use greater than if a is greater than zero right this can evaluate to a true or false and aside from greater than here are another a couple other you can use so greater than less than you have greater than or equal to and you have less than or equal to and then there's equality with equality you don't use a single equal sign because that's for assignment as you can see up here we are assigning these values into constants to compare equality you use a double equal sign instead so i can say down here does a equal zero and of course it doesn't so this statement here is going to evaluate to false and because this is an end operator both of these conditions have to be true and because this one is false already then it's not going to come into this branch anyways we can change these as well so you know if b is less than 3 or 4 i mean and if c is equal to 10. so those are some examples of comparison operators that evaluate to true or false now for strings you can also do that you can you can evaluate d for example as a string and you can test if it equals hello so that's one thing you can do with strings you can still use greater than or equal to for example if we had let h equals world and we can say if d is greater than h so we can do that in this case it's going to compare the h with the w and because h is not greater than w because it comes before w then this is going to be false one more interesting thing i want to show you is the use of the exclamation mark so this one it basically flips the boolean value so if g was g is true right if i put the exclamation mark in front of it it's basically going to flip the boolean value so g is true i have the exclamation mark it's going to turn it into false so it's not going to run this you could put it in front of this for example and uh a doesn't the a does not equal zero because a is one as you can see up there but having this in front of it is going to flip that to true and then now that i think of it you can test inequality as well so not equals so i can test if a is not equal to 0 which is true but then because i have this exclamation mark in front of it it's going to flip it to false so lots of flexibility here and this is just an example right so it doesn't have to be this complicated now i want to go back to our war card game and use the if statement to determine which card is larger and then increment either the player's score or the cpu score all right so here i have the war card game project and if you take a look at this part here where we were updating the score we're simply incrementing the cpu and player score with each dealing of the button now that you've learned about if statements in the xcode playground i'm sure it's very trivial for you to implement it so that you're comparing player rand versus cpurand seeing which number is bigger to determine which score to update now because we labeled our assets correctly 2 being the lowest an ace being the highest having a value of 14 it's very trivial to compare you just compare that ending number right and essentially that is the random number so if you think you can do this pause the video right now and try it out for yourself you'll learn a lot i promise even if you give it a shot and you don't get it the lesson is going to stick that much more so go ahead and pause the video try it out and then unpause it and watch me do it here all right so welcome back let's implement this if statement to see which card is bigger so i'm going to start with if and i'm going to first test if the player's number is bigger than the cpu's number right i'm going to use greater than if that is the case then i am going to increment the player score otherwise i am just going to increment the cpu score now i don't care about ties and that's why i'm not comparing equality between the two random numbers but you could definitely do that in your version if you'd like actually there is a problem with the way that i'm doing it here the cpu has an unfair advantage because in the case of a tie the cpu does get the score right using this else statement so therefore i kind of do have to test the other case so i'm going to test else if cpurand is greater than player rand then cpu score plus one otherwise if those two conditions are not true then it's a tie and i don't want to do anything all right now let's try this out so i'm gonna hit live preview again and we'll just do it right here in the canvas i'm going to hit deal so 14 is definitely bigger than 5 so the player gets a score jack is definitely well that's a that's an 11 it's greater than 3 four is greater than three so it looks to be working correctly congratulations the war card game is complete you've learned how to build user interfaces how to code in swift and you've completed your first app think back on day one of this 14 day challenge how did you feel back then were you nervous did you think you could do all of this and now look how far you've come how do you feel about app development now now i've tried to make this as easy as possible to understand and i hope you were able to gain some new skills if there's one thing i could really use your help on though it's with user testimonials you see i haven't been asking people and i don't have very many and it would help a lot for people to hear from actual learners like yourself about how this challenge affected you this would really help me grow my brand and in turn help many more people discover that they too could learn how to code and make apps full transparency your testimonial might appear on my website or on my social media so if that's okay with you simply visit codewithchris.com 14 day and it'll bring you to a page where you can record your testimonial right from your browser don't worry if you don't know what to say i have a question for you and you can just simply answer it it won't take you more than two minutes thank you so much whether or not you can help me with that i really appreciate you learning with me and having stuck through this challenge now i know i'm making this sound like the end but really it's just the beginning of your app journey in the next lesson i'll tell you what are the next steps and where to go from here alright thank you so much for the testimonial and i'll see you in the next lesson