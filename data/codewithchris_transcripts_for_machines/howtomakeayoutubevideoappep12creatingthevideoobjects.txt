hey coders what's up Chris here with episode 12 of how to make a youtube video app in the previous lesson we had used Alamo fire to fire off a request to the YouTube data API to retrieve all of the videos for the specified playlist here and this playlist is my most recent uploads next we took the result of that request and we looped through all of the dictionaries in the items key and each dictionary represents a video now in this lesson we're going to create all of the video objects and assign all of the properties based off of the dictionary data so let me run the project now first so that we can see what sort of data we have in the console because right now we are outputting each video dictionary into the console window so here we see all of the video data I'm just going to copy one of them one of these dictionaries because it can be kind of hard to see in this console window so starting at this curly bracket I'm going to copy it all the way to right here and that's one video dictionary next I'm going to just open up a text file and I'm going to paste that in here just so it's easier for us to see and furthermore it's got some nice indenting with sublime text that we can see where each key and value end so for example in this dictionary we've got this key value pair right this is another one this is another one snippet is the one that contains most of the data that we need so in this video dictionary that key is snippet and in the value its another dictionary inside that other dictionary I'm going to need to grab the description key which the value is the description of the video and then inside the snippet dictionary there's also a resource ID key and its value is also a dictionary and inside that dictionary there's a video ID key which contains the video ID so I also need that okay so let's go one at a time now that we have it in this text file we'll be a little easier to see so in here I'm gonna remove this to do and I'm going to create a video object so let let's say I'm just gonna call it video object like that equals new video it's an instance of our video class in here we have three properties we have the video ID video title and video description we actually don't have a property for the thumbnail because I realized we are constructing it dynamically from the view controller you look down here see when we display that table view cell we're just constructing it like that using the max res default it may be a little better actually to get the URL from the data that we have because we do have the URL here okay so we're going to add a property for that and we're probably going to be using the max res default that one right here so there's a thumbnails key its value is a dictionary and inside that dictionary we're going to grab the max Reza which contains another dictionary and inside there is a URL key containing the actual value that we need let's start by going into the video class and declaring a new property let's call it video thumbnail URL is a string and let's assign it to an empty string alright so video ID title and description and thumbnail URL are the strings that we need so go back to video model swift so in here we're going to set the properties of this video object so video object dot video ID equals and here we're going to have to dig into this video dictionary in order to get the video ID so remember I said that we're going to grab the snippet dictionary and then the resource ID dictionary and inside there is a key value pair called video ID so when you've got a ton of nested dictionaries like this we can use a method called value for key path and that's the key path that we specify being snippet dot resource ID dot video ID okay so snippet dog let's go back for a second resource ID capital I and video capital I the resource ID video ID and we're gonna have to cast this as a string okay so let's do another one video title equals video dot value for key path and let's see how we can grab the title so the snippet dictionary is from here all the way to here and inside there has a title so actually this is just going to be snippet dot title string video object video description equals video dot value for key path inside here the description is snippet dot description snip it dot description as string okay and finally let's grab the video thumbnail URL this is the property which we just added so video value for key path and the way we grab the URL is snippet dot thumbnails dot max res dot URL okay so let's move this to the side here snip it dot thumbnails dot let me just confirm that snippet thumbnails dot max res dot URL dot max res door L as string okay and we need to create an array to hold all of these video objects so outside of the for loop let's create a videos let's say array of videos equals an empty video array and after we create each video object we're actually going to add it to that array and then outside of the for loop when all the video objects have been constructed assign the array to the video model property and we're going to have to create a property up here let's call it var video array equals equal video an empty video rate and the reason I'm doing this is this is a temporary one and then after we fill it we're actually going to assign that to the property of the video model the reason why we have to create another property to hold the video array is because in our previous method get' videos that directly returns the video array to the collar of the method so here this method get feed videos doesn't return anything because as you learned from the last lesson we didn't want the main thread to download the videos so all the main thread is going to do when it executes this method is kick off this request to go download the data and then the background worker is going to do all the work create these video objects and then finally assign it to this video array and then once this property gets assigned to we're gonna have that notify the view controller that the data is ready so the view controller can grab all of the video data and display it but in this lesson this is all I wanted to do is to construct these video objects off of the json dictionary data now i want to run it and see that we actually have captured this data so what i'm going to do is right before it adds that video object into the temporary array i'm going to set a breakpoint here and we're going to not we're not gonna print out this video dictionary anymore that's just going to clutter up the console so now i'm gonna give it a run and i expected to hit this breakpoint when it does like it has now it's created one video object and assigned these text values to the properties so let's go p√≠o video object let's see what we get okay we have a video object that's good now let's check the video ID all right is that the first one we have yes okay now let's check the video title alright episode 11 retrieving playlist videos is that this one right here it's all the way at the bottom yes it is description okay that looks like what it's supposed to and then let's check out video thumbnail URL so that should be the max res default one which is right alright so it looks like it's worked for the first video I can safely assume that it's gonna work for the rest of the videos in the playlist I'm going to remove that break point and I'm gonna let it run okay so it should in theory have processed all of the video objects and added it to the selfthought video array now it didn't crash so that's a good thing in the next lesson we're going to call back to the view controller after the data has been downloaded and the view controller then is going to take that and display it in this table view thanks for watching and please don't forget to give this video a like subscribe to the channel and share it with your friends alright I'll see you guys tomorrow bye for now