Hi. My name is Stewart Lynch. This is the fifth of six videos in the iOS concurrency series. By the end of the fourth video, we had converted our getJSON function into one that uses the new Async and await concurrency method introduced in iOS 15. In this video, we're going to extend that even further by introducing you to parallel Asynchronous concurrency. Using Async lead, we'll create a new model to contain a user and all of that users posts in an array and use that model after fetching all users and posts up front and two asynchronous calls in parallel when the user odes, thus potentially reducing the number of network requests. Now, if you're just jumping into the start of this series, you can download the completed code from the fourth video of this series from the link in the description below. Now that we have much more easily readable code, I want to show you where this really shines. Let's create a new experimental branch on this current branch, so make sure you select the Source Control Navigator, then right click on Async and await and create a new branch from here and call it parallel concurrency and make sure you check out that branch if it's not done automatically. What I'd like to do now is to fetch all of our users and all of the posts before presenting the list view and add account of the number of posts per user alongside their name in the user's list view. Then, since I have all of the users posts, I can pass them on to the post list view for that user instead of when I get there. This should limit the number of server requests to two. Then no matter how many times I go from users to posts, so to do this, I'm going to need a new model that we can use to consolidate this information in the Models folder, create a new Swift file called User and Posts and in there create a struct with the same name. I'm going to be using this in the users list view, so I want to conform to the identifiable protocol. We'll need an ID property to make sure that it does conform to that protocol, so to make it easy, let's just create one and we'll use the UUID. Now each object will contain a user and that users post the user will be of type user and posts will be an array of post. I do want one more thing though, and that is the number of posts so that I can display it. So I can create a computed property for this called number of posts, and it will be an Int that returns the post count in the user's list view model. Right now we have a single function that fetches users. What if after we fetch users, then we fetch all of the posts and then run a loop through our users, filtering the post by ID and then assigning them to that user. So let's change this published property here to no longer be an array of user but an array of user and posts. Of course, this is going to break our code because we no longer have that published user's property, but we still have to keep track of them until we build our now empty user and post array. So let's just preface this with a let to create a constant users containing the array of fetched users. But this is a new property and users won't know what it's expecting to retrieve. So we'll need to specify that it expects an array of user this convenient in it no longer uses any users, and we've not set up any in our mock data for our new users and posts. So let's just comment this out for now. So how do we get all posts? Well, the URL for that can be found in the API documentation, and we put that endpoint URL as a comment at the top of our post struct. We'll copy that now and we'll create a new instance of the API service passing. In that endpoint. Then we can asynchronously fetch all of the posts the same way that we fetched all of our users. But this time for posts, and it's an array of posts. Now, if we had to do this with our old callback method, we'd be in a little bit of trouble since we would need to have nested these requests within an API service getJSON callback function with a completion handler. Here the power of async and a weight really shines. This fetch post request won't be executed until the above one has completed, so it looks almost synchronous. Well, now that we have both users and posts, we can loop on users, and then we can determine that particular users post by filtering the post array where the user ID is equal to the user ID. And we can use the array filter operation for this using a higher order function really condenses your code. And if you're familiar with the syntax, it's quite easy to read. If you are unfamiliar with this, you can check out my video on higher order functions, and this one here in particular includes the filter function. Now that we have a user and all of her posts, we can create a new user and posts so we can pass in the user and all of her posts, and then we can append it to our users and posts publish property users in list view, of course, is broken because we no longer have an array of users. We have an array of user and posts. So in the navigation link we no longer are going to pass in the user ID. We want to pass the entire array, so we'll just have to fix the post list view as well in a minute. So for now, let's just change this to post ListView posts being user and post posts for the label. We'll need to change this to user and post user to access the user's name and the user's email properties. I also mentioned we want to display the number of posts so we can do that right here by embedding the name text view in an H stack, and then after the name, we'll add a spacer and then present another text view with the computed property of the number of posts from our model and use string interpolation to surround the number with brackets. All we have to do now is fix up that post list view. Now, instead of having to create a view model, I can remove this state object altogether. We're not expecting a user ID anymore. We're expecting an array of posts. Since our posts are no longer in a view model, we can remove the VM. There will no longer be a need for the alert here because we're not going to be fetching anything here, and we can also remove the overlay and the task. Now our preview is complaining here, so we'll need to fix that, which means that we'll need more mock data, but we'll come back to that for the moment. Let's just comment the preview out here. I'm still getting an error when I want to build. Yeah, I see. I forgot that I commented on that convenience initializer, so it no longer exists. So I need to remove it here when we initialize. If we test this in the simulator now it works and we see the number of posts Besides each user. It just so happens that this API actually has ten posts per user. But trust me, if the count were different per user, this would still work. So let's fix that mock data for our preview. We can create a new extension in our mock data file for user and posts, and then create a static computed property that's called users and posts that is an array of our new user and post object. So we then repeat the same process that we did when we are in our users view model. We'll create an empty array of new user and posts, and then we'll loop through our mock users from the user model. We'll create a new user and post filtering the posts to get just the post for that particular user, and then we'll append it to that new user and post array, and once the loop is completed, we can return the new users and posts back then to the user's list view model. We can fix that extension so that users and posts is user and post mock users and posts, and then in the post list view. Then we can uncomment the preview to change that argument to post and pass in the post mock single users post array. Then back in the users list view. We could add back that convenience initializer because we have it again and whether we are in the preview mode or not, we can decide if we want to see that mock data in the canvas when it's set to true. If it's set to false, it disappears. If we go back and check out our code. Now, however, there is something that can be improved on even more. We're fetching all of our users and then waiting until they're all fetched before we fetch all of the posts. The fetching of the post is not reliant on the fetching of users. In fact, we could be doing this in parallel. Well, welcome to Async Lead. We can simply preface each of our API service calls with Async so that it now reads async let. Now, this creates errors in our for loop because we'll need to wait for them to have finished first before carrying on before we can access both the users and posts. So we'll need to try and await for both. We can do that by assigning them to a new variable. But as I said, we'll have to await for both of them. So let fetched users fetch posts in the tuple await for the users and posts. But as I said, these are failing because we'll have to try for each of them. Then all we need to do in our loop is to change user to fetch users and posts to fetch posts. We're now getting both the users and posts at the same time, and then we can then run our loop testing. Now we see that it all works nicely and we're now saving on costly network calls. Let's finish now. Then, by committing this branch to our Git repository in the final video of this series, we'll be checking out that old main branch again and branching off of it to change our target back to iOS 14 and see if we can use these new Asynchronous functions in an earlier iOS. This is what's promised in Xcode 13. Two. This should be interesting. So make sure you subscribe to Chris's Channel and ring this Bell to get notification of new videos. Thanks for watching and see you in the next one. Bye. Okay. Bye.