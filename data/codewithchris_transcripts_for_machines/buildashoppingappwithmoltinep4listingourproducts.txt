hey coders how's it going hope you guys are doing well Chris here with episode 4 of how to build a shopping app in the previous lesson we had setup cocoapods set up our Xcode project and initialized the Moulton SDK with our store ID in today's video we're actually going to make some API calls and retrieve the products that we have set up in our Moulton store so now as we're digging deeper into the Xcode project it's a good time to mention that I'm actually mirroring this Xcode demo from one of Moulton's blog posts by Dylan McKee and I will put the link in the description below so if you ever want a written reference for this demo you can come here and we're about right here listing products if you want to see what the next couple of videos are going to be about you can even scroll down further and read the rest of the document so going back to our Xcode project the first thing we're going to do is run the app and it looks like we've done nothing now it's empty but you can see that this master detail Xcode project already comes with a table view furthermore it comes with this edit and plus button which is going to allow us to edit the rows and add new rows but we don't actually need those two things so we'll go ahead and remove those soon by going back to the Xcode project in the master view controller dot Swift I want to point out a couple of things namely that we do have a table view already set up so that all we need to do is plug in the data and implement the table view delegate methods to display the table cells and furthermore the table data is going to be stored in this objects property and it's an array of type any object so that's important to note because when we make the API call to retrieve our moulton store products we're going to assign those products to the objects array and then later on when the table view asks us for the sell data we're going to be accessing this objects array to return that sell data as well okay so first of all let's review what we have in the so far the only code we added was the set public ID method cult which is going to initialize the SDK for use so what I'm going to do here now is remove the edit button which is this line of code that adds it and then also this add button so we're going to remove these two lines which assigns that add button to the upper right corner so underneath this split view setup code I'm going to create a little space but this is still within the viewdidload method and I'm going to make a call to retrieve the store products and what we're going to do is we're going to type in Moulton dot sharedinstance and this is going to give us the singleton instance that we initialized up here and we're gonna call a method dot product dot listing with parameters and this is going to return all of our products for the actual parameters we're going to put nil because we want all of them and for this success handler and the failure Handler all you need to do is just double click that it's going to expand it and you can see in the response there is a single parameter that is a dictionary of NS object where that's the key and the value is any object so we're just going to call this response and keep in mind that it's a dictionary maybe we'll just name it response dictionary in case in case we forget for failure let's double click that to open it again this response has two parameters one is a dictionary and another one is an error parameter so here we're going to call this again response dictionary and error like that if an error happens we're just going to print out a message to the console right now so something like something went wrong and let's set a breakpoint there in case it hits that point and then we can worry about it and we can debug the error for the code inside a successful response what we're going to do is grab our product data from the response dictionary now how do we know what's contained inside that dictionary well now would be a good time to look at the Moulton API guide or a reference document so if we go back to the home page and you scroll all the way down you can look at API reference and click under products and look at this call get products by criteria and then you can look at the successful response now first of all how do I know that this is the API call that this method is making listening with parameters well let me run it right now and I'm not doing anything with the successful response because we haven't written any code here so it's just going to make this call so when I launched it viewdidload gets called our Moulton singleton object gets initialized and we make this call listing with parameters if you look in the console it tells you exactly what call is being made so you see right there slash products and that corresponds to this one get products by criteria so if you take a look at the right side here that's an example of a successful response from making that call this response right here is expressed in JSON now if you're a student of my beginner course you're going to understand what JSON is and how to work with JSON and how to read this but if you're not a student of the course and you haven't worked with JSON before let me just take a quick minute to explain to you what it is so all it is is a data format when Swift interprets the JSON all it sees are dictionaries and arrays and all the dictionary is is a collection of key value pairs so let me show you an example by opening a set of curly brackets like this this would be a dictionary and a key value pair could be something like key colon and then a value and each pair is separated by a comma and here's an example of a key where the value is an array so here we use a square bracket and it would be something like value comma value value and this would be an array of three objects where it can be retrieved by this key so then we write comma to do another key value pair and the thing is things can become nested so you can have something like key and then as the value you can have another dictionary and inside this dictionary would be a whole new set of key value pairs so something like a you know value comma B colon value it may seem a little confusing at first but once you understand it and you get used to reading it you can understand how Swift is going to interpret it so it's going to see this as a dictionary it's going to see each of these as a key value pair and right now I have all the keys as the same type of object but in reality each of the keys would be different like that because the key is used to retrieve the value so if we look back at the successful example response you can see that the top level is a dictionary because it's a curly bracket so Swift is going to treat this whole response as a dictionary here's a key value pair status is the key and this boolean true is the value comma the second key value pair is the key as result and the value is an array because it's a square bracket of all of these product objects you can see that each value of that array is a dictionary in itself so here's one of the products right comma that separates each item in the array and then this one is another dictionary which represents the product and you know it's got all of this product data as key value pairs so what we really need out of this response dictionary is this stuff so we're going to be calling the result key to retrieve the array of product data and in that array of products each product is represented as a dictionary itself okay might be confusing for you but it's all going to make sense when we type it out in code so here this response dictionary we're going to say self thought objects because remember that's the array where we're going to store the objects for the tableview equals response dictionary and we're going to retrieve the result key the value we're going to cast it as a type of any object an array of any object because remember the value for the key result is an array of all of these objects but we're going to put any object here and not as a dictionary because that's the type that this is declared in okay so now we have the array of products in the self dot objects property so assign products array to our objects property and furthermore we're going to tell the tableview to reload its data and we do that by typing reload data and that's going to tell the tableview that we have new data and for it to request the data from us again so because we created this Xcode project as a masterdetail when the project's created we already had a tableview connected to this self dot table view property and furthermore we already have the table view delegate methods if you scroll a little farther down this is the method that we're interested in right now cell for row at index path and right here it's prefilled a little bit of the code so it says let object equal the objects array index path row this represents the row that the table view is asking us for right now and it's casting it as an N estate which is not something that we want because our objects array contains an any object which we know are actually these product dictionaries right here okay so we're going to go back and we're going to cast this instead as a dictionary where the key is a string and the value is any object so if you're unfamiliar with how a tableview works we've been working with it in a couple of the demos on this YouTube channel but essentially when the tableview asks this view controller for data it's gonna call self or row at index path for every single row in the table view and this index path parameter is gonna tell us what row it's asking for so that's why we pass an index path row into our objects array to get the object that we should be representing for this row and then we're going to set the label as the object so if we take a look at this product what a single product is that's right here all the way down to right here that's a single product and we can see that it has a key value pair for the title right where the key is title and the value is whatever the title is from the store from our actual moulten store so we're going to say object title okay and we're gonna try to cast this as a string so we're gonna write as question mark string and if it fails it's going to turn into nil and that's gonna be harmless when we try to set it to the text property of the label okay so now we can run it so let's see what we get so it's doing its thing and there we go it's retrieved the three products we added in the previous lesson to our Moulton store and those are the actual titles of the products now if you click it right now it's going to crash because by default the masterdetail template handles the tapping of that table view and it's going to try to transition us to a detail view controller which we're going to need in the next lesson however in this prepare for segue method it's trying to cast that that product object as a date right so for now I'm just going to comment out this line and comment out this line because that's going to cause a crash in the next lesson we're actually going to work on this method and we're going to transition to a detail view so that we can see the product details but for now let me run it again we have successfully retrieved the products from our Moulton store by making a simple API call like this so I thank you for watching please share the video if you found it useful and please subscribe to get notified of new videos I'll see you guys tomorrow where we're going to create the product detail page alright talk to you guys later bye