hey coders what's up it's Chris here and today we're going to look at saving file data to the parse backend and retrieving it so here I've got our xcode project which has the parse libraries integrated into it and we don't have anything in the storyboard and this is the viewcontroller.swift file in the previous lesson we were working on queries here in the viewed load method but I've erased all that code in preparation for showing you how to upload a file and just to give you a quick recap in case you're joining us for the first time in this par series we've created a contact class here in our parse back end and in it we have two lines of data we have an email key first name key and a last name key as well and the scenario that I'm going to show you in this lesson is for example if we want to add a profile picture for one of our contacts now I don't have to create another key say for image or anything like that because if you remember in parse if you set a key which doesn't exist and then you save that object back to the parse back end it's going to detect that that key doesn't exists and it's going to create that column or that key here in our data store so first we're going to want to let's say pull down a contact so let's go back here and we're going to create a query to retrieve a contact so I'm going to say let query equals PF query class name is contact now if you don't know how to do PF queries then I suggest that you look back a couple of videos in this part Series so that you can get caught up what we're going to do here is retrieve just the first Contact I don't really care who it is because I just want to show you how to save an image and Associate it with that contact so I'm going to say query. get first object in background with block and this is just going to retrieve the first uh object from the contact class or contact data store and to open up this block and here's the object it's an optional parameter so I'm going to type object this is error and inside the code first we're going to check if there's an error so if there is no error if error is equals to nil then we're going to go ahead and work with the data and now we got to check if object actually got returned so in case that the contact store is empty then this returned optional is probably will be nil so I'm going to say if let contact equals object then we have a contact object and just to remind you it is a PF object class what we're going to do is now um get the image data set the image data to a key of the PF object save the object back to the parse backend so if this was a real app we would probably work with the camera allow the user to take a photo and then take that image data but since this is a demo I have an image that I'm going to use that I'm just going to put in the image library and we're just going to use this image it's a smiley face that is supposed to represent our contact I'm not even going to bother with the 2x or 3x sizes let's go back to the view controller so let us first create a UI image let image let's do that under here actually under get image data let image equals UI image right and we're going to use the named initializer and let's use the name here make sure there are no typos Smiley face.png actually we don't need the PNG when we're working with uh assets here we just have to specify that asset name so smiley face like that so if I remember remember correctly this initializer actually returns an optional UI image because in case it can't find that asset it's going to return nil let me just double check yeah so the return type is an optional UI image type so we are going to have to uh let's say let's make this a UI image optional type and then we have to check if it actually successfully created an image first so if let smile image equals image then in that case then we're going to get the image data so in order to get the data we're going to use this method called UI image PNG representation Returns the data for the specified image in PNG format so we're going to use that and we're going to pass in a UI image it returns an optional NS data okay so let's do that pass in smile image and this is NS data optional since we know that this smile image is an actual image right we've tested it if it's not nil here it should return some data so I'm not going to worry too much about checking if this is nil or not okay so now let's talk about saving this image data into our parse backend so in parse you learn that objects are PF objects queries are PF queries and we have PF File for saving file data so we're going to create a new PF File so let file equals PF File and we're going to go with this one here where we can specify a name and we can pass in the data so for the name we're going to call it smiley let's just say smiley face and it's important to actually put the extension for the file here as part of the name because parse is going to use use that to determine how to treat the data here we're going to pass in the image data and because it's an optional type we have to add the exclamation mark to unwrap it okay so now we have this PF File we got to attach it as a value to our contact the one that we retrieved earlier let's say contact profile let's give it a new key profile photo equals file and then finally we got to say save that back so let's say save in background like that so let's review what we've done here we've created a query and we're going to get the first object from that store from the contact store and once we check that we do actually have a contact object we are getting an image now I just added an image to the asset Library so I created a UI image based off of that asset um I checked if it was able to create that image and we extracted the the data and we converted that into an NS data type and then we created a PF File from that data and finally we assigned that PF File into the profile photo key of the contact that got returned and then we're going to save that contact back into the parse back end let's use Save and background so that we can see if save and background with block I mean so that we can detect when it's done so result error and in here let's just say print done so it's going to run this print statement after it's successfully saved it I'm going to run the project and I'm going to wait for that message to pop up here okay so done just showed up let's check our back end and parse and see what's going on I'm going to refresh it so let's scroll to the right there you go so it looks like the object that was returned in our code was John Smith and here you can see that the new key has been added profile photo and for John I didn't mean to click that John you can see Smiley face.png was saved so I want to point out that in this example we've learned how to save pngs or images up into our parse backend the thing is saving any sort of file whether it's a sound or a movie or another type of media is done the same way with this PF File class now let me show you how to retrieve that data to retrieve that image I mean so let me comment out this code we got to be careful here with all of the brackets so this here is the chunk of code that we wrote today now let's write how to retrieve the image and let's add a comment up here this was how to save the image and Associate it with a contact so here I'm going to do another query like query equals PF query class name is contact and this time I want to retrieve John specifically because we know that he has an image I'm going to say now if you watch the query constraint videos you'll know how to do this I'm going to say where key uh let's say equal to so I'm going to look for the first name is equal to John now this only works because I know that I only have one John in my contact data store uh but if you had multiple Johns then it probably would return a whole data set so let's do query do get first object in background with block so there's my object this one is error and then here let's check check for errors if error equals nil if let contact equals object so we're checking if the object returned is also nil so in here we have a contact named John and John that gets returned has all of these properties it has first name last name email and these are strings and so this data is automatically available to me if I say something like you know print contact first name for example then I would have John printed out but for profile photo because it's a file it's not automatically retrieved so what I'm going to have to do is I'm going to have to say contact the profile photo I'm going to have to get this uh assign this to a constant named file and it's going to be a type of PF File and I'm going to have to retrieve this by calling a method called get data uh get data in background with block like that and let's open that up and it returns optional data optional error so let's do data error and in the code here let's check if there is an error if error is equals to nil and if let image data equals data then successfully retrieved the data and then if I wanted to show this image in my user interface I can create a new UI image so let's image equals UI image and I would use the one where we can pass in an NSD dat and we would just assign image data into that and then I could assign this UI image into a UI image view to display it on my view so that's how you go about retrieving the file now if it was any other sort of data for example a sound file or something like that if you were going to play the sound AV Audio player has initializer methods where you can pass in a piece of NS data as well and you will be able to initialize your AV Audio player and then play the sound okay so this chunk of code shows you how to retrieve the file so I hope that was pretty straightforward for you guys there is also a lot of good information in the documentation for parse I'm going to remind you under files right here it talks about pfile talks about images and also talks about progress which we didn't really get a chance to cover in here uh but essentially when you save the PF File or you get the data for the PF File there is also one of the methods has a progress block uh parameter where you can specify a chunk of code it's going to give you the percent that it's done so you have a chance to update any progress bars or anything like that with the percent to done parameter so take a look at this documentation go to parse.com slocs and go to the iOS guide and then scroll down to file right here to read all about that stuff and to review what we've talked about in this lesson I hope you guys had fun don't forget to give the video a thumbs up and please share it if you found it useful and you think that anyone else can benefit from this thanks again and I'll see you guys tomorrow bye