in the last lesson we went through how to connect to apis and we reviewed the YouTube data API we also created our API key if you missed all of that check out the playlist right over here now we're ready to start retrieving data from the API let's Dive Right In All right so let's test out getting data from this API now before we get into xcode to try this out there's an even easier way that we can test out this API right from within the documentation they have this thing called an API Explorer and you can test out the endpoints right from this panel now all you have to do is make sure that you're logged in to your Google account in the upper right corner and this is the same account that you created your API key uh with in the lesson one remember how we had to log in to our Google account and come here create a project and then create an API key what's going to happen as long as you're logged into the same Google account is when you use this API Explorer it's going to grab that API key from there and use that so let's test out the endpoint now we're actually going to use this one playlist items endpoint because in the previous lesson I talked about using the playlist endpoint but this one actually just gives you information about the playlist itself so playlist items this is the one we want to use so as you can see this one this is the URL that we have to send the request to this is the request type and this is the only required parameter and you can specify different levels of detail that you want to retrieve now the reason they do this is because for your purposes you might not need all the information and in that case you can specify uh perhaps a lower level of detail and that would save bandwidth right why retrieve more information that you need you're just it's going to take longer it's going to take more bandwidth and so on and so forth so I've figured out that for this app I need the thumbnail the video ID to display the video obviously thumbnail to show the image I need the title in the description and that's about it and snippet is the level of detail that I need it contains all of what I just mentioned now the other parameter I have to specify is the playlist ID because I want to retrieve all the videos from a specific playlist now when I first use this endpoint I made the mistake of putting the playlist ID into this parameter but it didn't return anything and I realized that oh I supposed to put it into this one so don't make the same mistake now let me show you how you can get the ID of the playlist that you want so I've got a playlist right here that I want to use and keep in mind you can use any playlist that you want so everything after this equal sign right here and before any andand that is the playlist ID so your url might have something like this let's say NT equals one uh two and whatever so between the equal sign and the and sign uh after list equals that is your playlist ID don't worry if you you'll find out really quickly if we're if it is the playlist ID or not because if you don't get any data back from this API call then you'll know that that actually wasn't the playlist ID okay so that's my playlist ID I'm going to copy that and then in my API Explorer let me full screen this and maybe I'll just make the text a little bigger so it's easier to see under playlist ID I'm going to paste that okay and I have to specify a part here remember this could be content details ID status or snippet so snippet is what I need I'm put it there and you can also see how it changes the URL that you're going to have to uh send a network request to if you take a look this might be interesting for you this is the end point right that we're sending to um hit the API send a request to and then the data that I specified here in the parameters it's all here look part equals snippet playlist ID equals that ID and then key equals your API key now there's no text box to put in my API key here so this is pulling from your key that you created here that's why you have to make sure that you're logged in to the same account and uh because it's going to go grab it from there okay I'm going to uncheck Google o author I'm going to hit execute if everything goes well you should get a response which means that it was successful and then you get all this data back now this is the Json formatted data that I was telling you about that comes back from the response from the YouTube API and it's up to us to turn this data remember that process is called Json parsing right to turn this Json data into usable data within our app you're going to see how to do that in uh few lessons in the series for sure but for now I just want to take a look very quick quickly at the data that gets returned and make sure that I have the information that I need so here I can see that I have the title of the lesson the description of the lesson the thumbnails um image URLs I have the video ID there perfect and then this is for lesson two and you know so on and so forth so I have everything now if you didn't get this response maybe you got an error or something like that I would double check that part equals a snippet spelled correctly I would make sure your playlist IDE is correct maybe perhaps you grabbed the wrong segment of the URL there um and then I would also make sure that I'm logged into the right Google account that has access to the API key and then try it again hit execute now if this doesn't work for some reason you can't get it working don't worry remember this was just a quick test the the real test is to be able to do this inside xcode right inside an IOS app so that's what we're going to do next don't worry if you didn't get this part this was a quick test uh of the API we are going to now start our xcode project we're going to start a test project okay so this is not going to be our real app what I like to do when I'm trying new things is to just open up a new xcode project try something out make sure I can get it working before I integrate it into my main project right so that's what we're going to do here we're going to create a test xcode project and we're going to try this out all right so let's do it I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson all right so let's create our xcode project so I am going to do this and launch a new xcode project okay under iOS let's choose app uh let's go next okay I'm going to call it test YT API this is not our official app it's just going to be a test interface is Swift UI language is Swift storage is none all of this is unchecked let's click next I don't need to create a git repository I'm just going to create this in my desktop because it'll be a throwaway project okay let us do this now just make it a little bigger so we can see and then what we're going to do is send that API call right when this launches from here so I want to add a task here task and open up a pair of curly brackets and in here we're going to make the network call and print the results remember I'm not going to do things the best way I just want to make sure that I can connect to the API from xcode um receive the right data back right we're we're testing out the API and this is not necessarily where we would do things as well in our real project again this is a test I'll explain to you what the task is a little later I'll connect all the dots for you but for now we're going to do it in this little task block so I want you to type that out and then let me type out some uh code statements and walk you through not code statements but some comments and walk you through the steps that we're going to take all right so first we're going to um Define the end point URL with parameters all right so that's the URL that we're going to send the request to we're going to create a URL instance we are going to create a uh URL request instance that's the thing that we're actually going to send and then we are going to uh send the request with URL session that's a mechanism for us to do networking with and then we are going to um print out the response okay we're also going to H have to handle handle errors okay so so let's try this out now first let's define the endpoint URL with parameters so if you take a look back at the API Explorer here you'll see that this right here contains everything we need except we have to insert our API key right there so this is essentially the URL that we have to hit it's already written out for us okay so that's what I'm going to take now if one thing I want to point out which I'm not exactly sure why if you take a look at this endpoint uh domain it says youtube. googleapis.com but if you take a look at this it's googleapis.com youout I've used both they both work I mean this would probably be a little safer to use because this is in the official documentation whereas this is in this API Explorer maybe it's just not updated so actually let's just use this and then we can build it together we can build up that URL just so you also know um you have an idea of how it gets built up so I'm going to declare a constant and call it URL string now keep in mind this is not how we are going to do it in our real project I'm just going to write out the whole string here including the API key um and all the parameters so to include parameters you put a question mark and then from that point on it's parameters and then the format to specify parameters is going to be parameter name name equals parameter value okay so what is the first one we should specify how about part since part is required anyways so we're going to type part equals and remember you can specify one or more of these and it tells you to specify more you would put a comma in between them but we only need snippet so I'm just going to put snipp it now to specify a second parameter you put ampersand and then the same parameter name equals parameter value format okay so what's the second parameter that we want to specify that's playlist ID you have to follow it uh based off the capitals as well so lowercase p playlist followed by uh big I ID now equals what is the playlist ID and pull this screen up again and I'm going to grab my ID from here oh now this actually makes sense if you can see the URL you can see playlist and then there's a question mark right which means parameters from now on list is the parameter name equals and then parameter value and then the end of the parameter value is Ampersand and then second parameter and so on and so forth that's why I say grab everything after the equal sign but before the Amper sand because that is just the connector for the next parameter all right so that's my playlist ID so let's put it right there I also need one more parameter let put the Amper sign sign and this is key equals my API key now I keep saying this because I don't want someone to watch this and say Hey you know you shouldn't just put your API key there I know again this is a test so this is how we're going to do it right now when we work on the real project we will secure the key so let's go back into our key here I'm going to just show my key and this is our test key right we're going to put it right there so that is the URL that we're going to send our request to and uh this URL contains all of the request parameters and the API key has everything we need so here let's create the URL instance let URL equals URL and then we are going to use this one here where you can just pass in the URL string but keep in mind that this creation of this URL instance it may return like it may not successfully be able to create this so we have to check if you are familiar at all with swift if you've taken some courses before you'll know what optionals are and creating this returns an optional URL instance which means it may not be successful so we have to we have to check for that first so one way we can do that is we you can say if let URL equals URL right and what this does is it checks if that is not nil meaning that it was able to successfully create it then assign it to this constant and then we'll move that stuff in there and then we can use it but if it is nil it's just going to skip and come down here and it's not going to run any of this code if it's nil that means it wasn't able to successfully create the URL string and we can't go on anyways okay so now let's create the request let request equals URL request and we're going to pass in this URL instance that we created this one right so this is what we created this checks that that isn't nil and then if it's not nil if it's not empty it assigns it to this and then we are passing that into the creation of our request right now that we have our request in this constant we are going to send the request with URL session okay this is URL session is what we use for networking so URL session shared there's a shared uh session object that we can we can use we don't have to create our own and there is a method called Data for right so this is going to fetch the data for a given request look it all connects we can pass in this request now into this method but take a look there are two key wordss there is async and there's throws those are two different things that we have to uh deal with and we have to observe so let's talk about throws first this keyword indicates that running this method you know or executing this task May potentially create an error it's going to throw an error that's where that word comes from and you have to handle the error because you want to respond to it right if something bad happens you want to take note of what happened and then if it's something that you can recover from recover from it if it's something you cannot recover from then maybe you display a message to the user and say sorry something bad happened or like this happened we cannot continue please try again type of thing uh or you can choose not to handle the error and just ignore it that's perfectly reasonable for some errors okay so that is what throws mean and I'll show you in a second how we can handle that now async is another keyword that indicates that this method is asynchronous now we have to take a little moment if you haven't done any networking before let me just quickly describe it to you with this scenario Okay so so asynchronous is something like this let's say that you are waiting for a package at home it's a very very important package they're not going to leave it at your door let's say it's a new Macbook you bought a new Macbook you're waiting for it to come and so you're waiting at home it's going to be sometime today but you don't know exactly when it's going to get delivered but you really need to go buy some milk right or maybe by lunch let's say you have to go by lunch and you have no food at home you're starving so what do you do you can you can leave and go buy lunch yourself but there's a chance that that MacBook may get delivered and you're not home you're going to miss it and that would be bad well what do you do well turns out you have someone at home could be a mom could be a dad could be a brother could be a sister could be your spouse you ask them hey can you go pick up lunch because I need to stay home and wait for this MacBook right so you send that person to go bring lunch and that person goes and gets lunch while you can stay home and wait for the package that is exactly what's happening here so asynchronous means that just like you're sending someone to go pick up lunch you are sending a background task or background um helper in in computer terms they call it a background thread you're sending that to go perform this network operation go fetch that data from the YouTube API while I remain here responding to user interaction and just like keeping the lights running just you know keeping everything operational and when you get the response from the YouTube API then come back to me and let me know what that data is and I'll deal with it now why is this important just like how you had to stay home and wait for that MacBook if we get the main thread to go and fetch the data and send off the request and wait for the data to come back then there will be no one to keep the lights running and things operational it won't be your app won't be able to respond to user interaction or do anything like that okay so that's why with these sorts of network tasks or some data tasks you want to send a background thread to do just like how you sent a helper to go pick up lunch that's what asynchronus means okay now that you know what these two keywords means let's handle the throws one first because there's a special syntax that you have to write in order to capture the error or potential error that can happen Okay so let's finish typing this out and then we're going to deal with these two keywords one at a time okay so data for and we're going to pass in request okay so when something may potentially throw an error like this one what we do is we have to put it inside a do catch block so you do something right this is you do the thing that can throw the error in between these brackets right here so that's what you're going to do and then you're going to catch any potential errors right below it and then you can print out any error that may happen it's going to just put in there now one more thing you have to do just to indicate that something uh that you understand that something can throw an error is you put a try keyword in front of it right so you're going to do this you're going to try this and then you're going to catch any potential error and you're going to print it out all right so that handles the throws keyword for running this uh method now let's talk about the async keyword that we talked about we want to send this task off in the background to grab the data and come back when it does so what we have to do is put the await keyword so what this does is it basically says before we execute any of the code below this line of code it is going to wait for this to return Why do we want to do that because let's say down here we are going to print out the print print out the response okay actually here so we're going to put handle error right here and print out response we're going to put that right here right right we wouldn't want to print out the response before this comes back with the data right because then there' be nothing to print out so by putting the await keyword in front of an asynchronous method it is going to wait for this to happen in the back ground finish doing its thing come back and then we are going to print out the response what are we going to print out we have to assign the data that gets returned into something first just like how we did here like let URL equals that let request equal that so we're going to say let data comma response equals that now why did I do this and what is this this is called a tupal and it's basically a collection of variables so the reason I did this is because this um what gets returned is two things one is the actual data right the Json data and the other is the response they're two different things and they will get assigned accordingly to this to data and response so now when I print it out I can print out the data and I can print out the response and it's not going to run this code until this comes back because of this await statement right here okay and now I can explain to you what this task uh keyword is so the task keyword is for running asynchronous methods or asynchronous code which is what this is right so it's just a special con struct to be able to run code in the background you can think of it like that so now we're all set up after writing all of that code what we're going to do is run this project it is going to execute this code as soon as the simulator launches and then we're going to see some output whether it caught an error or we actually see the data in the response so let's take a look at what's happened here if I open up this console area and if you don't have this console area it's actually just it might be minimize you just hit that button right there and you might not have these tabs so you just just click these buttons in the lower right corner and uh open these tabs okay so there are two things to to notice here this this is the data and we can't see the data it's just telling telling us the size of the data that's what happens when you try to print out data but we're going to have to parse that Json or convert that into usable data in our app we're going to do that a few lessons later but let's take a look at the response because this can tell us a lot as well okay so if you look for a status code status code 200 that's good remember back uh back here in the API Explorer ah I just I think I oh here it is okay see code 200 that means that this is a server code for successful server code 200 you can Google it server codes 200 okay it means okay um there are there are more codes let's take a look at what we get here now you can't actually see the Json data but you can see some details about the response but status code 200 that is a good sign that means that the API accepted our API key it accepted our request as being valid and it return an okay response let's take a look at what happens if we just change some of the so let's say I mess up my API key where's the key right here I'm just going to delete a couple of letters from it and run it again and's see what the status code is this time it's 400 that's bad 400 is is not good okay so it probably detected our a API key is not valid right so bad request perfect that's awesome that's exactly what we we expected let me undo so the API key should be valid let me just mess up my playlist idea a little bit see how that changes things okay it's a 404 well what's a 404 not found it couldn't find my playlist because I messed up the playlist ID right so this is really good that means everything is working as we expected to but wouldn't it be great if you could actually see the response right here we're just looking at status code of the response well sometimes when you're programming uh and you're working with networking calls like we are doing now it'd be super helpful to take a peek into what the actual contents of the response and the requests are and that's where you use a thirdparty uh Network debugging tool so I'm going to show you how to use proxy which you can use for free with your IOS app development and then we can take a peek at the actual response and we can see the data so let's go ahead and download and install proxy man go ahead and visit proxy man.i and you can download the Mac App keep in mind you can use this for free and there are paid features so you can look into that but I recommend just start for free for now okay so I'm going to launch my proxy man now yours might not look like this um because they'll probably be onboarding for you you probably have to walk through a few steps first but one important thing for you to do is to go down to a certificate and you're going to have to install a few things so install certificate on this Mac first and then install certificate on iOS and you're going to choose simulators but it helps if you actually have the simulator up and running so in your xcode project just run your project so you have the simulator open and take note of what it is iPhone 15 Pro because it's going to be installed on this simulator so um yeah this is what you do choose okay here choose simulators and then it is going to first of all this was installing it on your Mac if if you haven't done that you have to click this button and then it should say found the simulator because you have it launched so it's looking for it it should say it's found and then you are going to choose just prepare simulators and then it's going to ask you to reboot it so you click this button and it reboots the simulator with the new certificate and this will allow proxy man to stand in between the requests that your simulator makes and receives and that's how you're going to be able to see the data right so what you're going to do sometimes you have to restart xcode it's it's a little finicky if you don't see what I'm showing you then try restarting xcode as well as the simulators but if everything is set up correctly then what you should be able to do is um if you run the app now and you open up this apps tab you should see it appear here so there it is that's my project right and let's see here um that's not this one okay so what I can do is right click and pin and it'll show up up here and you can see that it sent a request to this domain it was okay but I need to resend the request to see the content okay so let me run this project again and you'll see a second request being made and this time you can see everything take a look at that so the this side on the left is request this side on the right is response so for the requests you can see um see for the query you can see all of the parameters you specified so there's key there's playlist ID and there's part and that was all from the URL but the response is the interesting part right you can see the uh Response Code here it's right here 200 but if you take a look at the body right here this is the data that was returned in the response remember when we ran it in the xcode project this data right here we we printed the data right and it show just showed the data size well with proxy man we can actually take a peek into what the data is here here's all the data so this is a very helpful tool to use when you are working with network calls now if you are having trouble seeing what I'm seeing I would recommend that you go through the troubleshooting steps um let's see here when we chose this there was some troubleshooting steps you could try and uh launches some documentation for you to um try things out so this is what it looks like yeah so just go through this and try these troubleshooting steps okay um not the end of the world if you can't get this working because as you can see even without proxy man we're able to send the response or sorry send the request and get the response and the status code 200 and all that all right so again this was a test project this is not the way we're going to do things like this we definitely want to secure the key um and do things a little more elegantly not just everything in this content view so we're going to create a separate component to handle the network stuff uh and we'll do all that all right but this was a huge success going through this part and and I hope you learned a few things all right now that we know we can connect to the API and retrieve data from it we're ready to start our actual xcode project for the app in the next lesson we're going to start a new excode project we're going to store the API key securely we're going to start roughing out some of the screens as well as some of the components that we'll need for the app if you're enjoying the build so far please give this video a thumbs up and if you were successfully able to connect to the YouTube API please comment down below and say I did it all right thanks for watching and I'll see you in the next lesson