hello and welcome in this lesson we're going to implement the delete account option on the settings screen of the chat app now this is especially important these days because the Apple App Store now requires all developers to add this option to their app to allow users to delete their account now how you actually handle it in the back end is up to you um however I have a funny story a little bit of a segue that has to do with apple that I promise you pertains to our implementation of this today so the story goes I had a personal Apple developer account that I submitted my tax information to and it's actually the code with Chris tax information and code with Chris is an actual business a registered business I mean but as the team grew I decided to change to a corporate developer account because it has teams and you can have multiple people access the account and things like that so I created another developer account that was a corporate one and I deleted the personal one however when I tried to add the code with Chris tax information on this corporate developer account it said that it was duplicate and I couldn't it wouldn't let me add it and so when I contacted the support I found out that even though I had deleted my personal developer account it actually wasn't deleted it was only deactivated and it wasn't active um and you know as far as I was concerned it was deleted but really on the back end information the data was still there so I contacted what they had to do for me actually was they had to reactivate that personal account I had to go in delete my tax information or change it from there and then they then they like deactivated it again but now I was able to add that tax information on the corporate developer account so um I guess what I'm trying to say is that I'm going to take a similar approach here because what I don't want so I thought about several different ways I could do this for for this delete account option so if someone Taps on this button I could for example run some operations like write some code in the app to just run through the database and delete things now um although I think that would work I I it doesn't seem right to me to allow someone from the app just to delete things off the database like that um I can't tell you exactly what can go wrong but just if there's an error in your logic for example as you're coding it or potentially you are allowing a hacker to you know have a route to delete things off your database I don't know exactly how that would work but it doesn't feel right to me another method I thought was perhaps I could allow someone to click on this button and it would send a support request to you or your support team or whoever to then go and manually delete those things maybe they can run some scripts that you have written that would automatically go through the day basically all the information for that account and I think that would work in the short term but if your app grows and you know you get a lot of users that could become unscalable so the last option and I thought of it because of this apple story was that probably the easiest thing to do um which is a compromise between those two things that we just talked about is when someone Taps on this button it sets a flag or it flips some sort of switch or flag on the user account to sort of deactivate that account and throughout the app we can make sure that we check if the account is deactivated we don't show them um you know in the chat we don't show their chat messages we don't show their name you know things like that so that's the way that I'm going forward with this so the first thing we have to do I guess is to add a flag on these three users and then we're going to also modify the user model and then we are going to add a database service method that will go and then flip the switch on your own account so that database service method that flips the switch is going to be called when the user Taps on this delete Account button in the settings View that's the settings view model we have the settings view right here and then when they do tap on that delete Account button and that switch gets flipped we need to log them out because they're still logged into the current session even though we just deleted their information or sort of deactivated their account um we need to log them out of this session and then present the onboarding screen again and then finally because at that point this lesson would be pretty long in the following lesson we are then going to go through the code um and make sure that if the account is inactive we are not going to display their data okay so let's get into this so first of all let's go into our firestore database and add that flag so we're going to add let's start with this person and I'll call it is active and we're going to change this to a Bool so by default it should be true let's add it to this person as well making sure that it's consistently spelled the same way or else we're going to have a problem all right okay looks good then we are going to go back into our project and in the user model we're going to add that here making sure again it's spelled exactly the same way we'll default it to true uh and then we are going to the database Service uh where is that down here and we are going to create a new section so we have the chat methods down here right below or right before this closing brace um let's call it account methods I'm going to call it deactivate account and it doesn't really accept any parameters except that we you know after the switch is flipped we probably want to provide a callback um you know allow the ability to pass in a completion method so that the UI can update when the switch is flipped so let's go ahead and do that I'm going to call this parameter sorry yeah it should look like this okay okay so we have to make sure that user is logged in get a reference to the database from the on the command Okay so make this sure the user logged in guard uh let's see oh the viewmodel dot is user logged in foreign and then this would be let DB equals firestore Dot firestore and then here we are going to say DB dot collection the path is going to be users right and then the user ID and what we're going to change here is I'm planning to change the first name to deleted last name to user flip this switch and we are going to we're going to leave the phone number for now but we can always change that because um I think without this phone number it's going to mess a lot of things up so we're going to leave it for now we're not going to get rid of that just yet but I think eventually we'll want to for the sake of complete you know completeness uh let's say document and we're gonna say authviewmodel dot author review model dot get user ID get logged in user ID that's right and then we are going to want to set data and we're going to use this one where we can pass in a dictionary of data we are going to say merge is true so that it doesn't replace the existing data with our dictionary instead it merges this essentially is an update rather than a replace and then we're going to have the completion right here so let's go ahead and do that so set data this is going to be our new data and then merge is going to be true in completion I'm going to double click so we have this part here okay so you get one parameter which is error so you're going to want to check if there's any errors with the transaction check for errors in it if there are no errors then you're going to want to call back this completion method so if error is nil that's good because that means there's no error then you're just going to call the completion method okay so let's clean this up a little bit because it's getting a little hard to see okay so the data that we want to set remember it's key value pairs right so first is active we are going to set that to false and then we've also got first name that I wanted to set to deleted and then last name set to user yeah these three fields yeah okay well we'll just leave the photo for now again we can get rid of that later okay so I think this is good now where will this method be called from so if we go back to hmm the settings View uh if we scroll down to this button delete account right this is the button that's right over here now it's true that we could essentially call the database service from here and then in that completion method once that switch has been flipped we can log the user out and then show the onboarding screen however I think the the sort of pattern that we've used throughout is basically we're not calling the database service from the views we are doing it through the view models so we are going to instead from here we're going to call a method in the settings view model that's sort of like the the data layer for this View and then the settings view model instead is going to call the database service so why don't we create that function here for that method let's say deactivate account now again this one has to have a parameter for the completion method because the settings view needs to know when it can you know change the UI when the deed is done and then it's time to change the UI so escaping will do the same sort of thing here you know this does seem a little unnecessary because we're essentially just adding this middle layer um just adding this extra step it's like playing telephone right settings View telling settings view models settings um all selling database service and then database service calling back to settings view model which calls back to settings view um so yeah you don't have to do it this way and I think that I'll probably chat with the team and see what everyone's opinion is about this it does add an extra step to follow right hopefully the good thing about doing this is that we sort of separate the concerns between the view the view model and the data the different layers here but perhaps you know you could argue that we are making things more complicated than they need to be okay so um here we're gonna call the database service we need to create an instance of this so let's do it up here okay so we're gonna go daily service dot deactivate account so when it is complete um let's say deactivation is complete we're going to call the completion method here so this now now that we have this method deactivate account in the settings view we can call it um okay let's just call it because we do have a reference to settings view model here and then we can say deactivate account and then say deactivated so log the user out log out and show onboarding uh auth viewmodel.log out and then is onboarding equal true so this should basically be it why don't we give this a try foreign missing anything here no I think I think this is it okay so let's run this we're going to keep an eye on our database okay so this is I'm logged in here Chris true ching yeah there we go deleted user false all right thanks for watching I'll see you in the next lesson