welcome to another Swift UI Basics video in this one we're going to cover the Swift UI text field which is going to allow your user to type in text and you are going to be able to capture that text and do something with it so first of all let's start with the keyword text field and to be honest this is probably the one that you are going to be using the most there are two parameters you have to pass in one is going to be a placeholder piece of text and the other is a binding to a state property that is going to store the data that the user types in so let me show you how that works but first we have to create that state property that we need to pass into the second parameter so let's delete this for now and at the top here we are going to create a state property it can be private if you are just using this data here and I'm going to call this uh let's say text input and we can default that to an empty string next let us put the actual text field in here and I'm going to use this one so this one we could put a placeholder text uh let's say let's say it's a form we're going to ask someone to enter the their name and here we're going to put a binding to that property and you specify a binding with a a dollar symbol like that and this binding is twoway meaning that if you programmatically change the value inside this property it is going to reflect in the text field and in the reverse way if the user types uh data into the text field it is going to be stored in there so let's actually try this out and I'm going to launch it in the simulator so that we can see the software keyboard and everything now by default the style is borderless it's plain on iOS at least and if I had not placed a place holder text in there we wouldn't even be able to see it so I can type it in because I have my keyboard here you can ignore These Warnings down here that's just debugging information and if I press command and K in the simulator I can bring up the software keyboard so that's what that looks like now let's go back to the text field and here's a simple style that you can add just to add some uh border around it so if you go rounded border and let's say we add some padding then and let's reenable this preview it'll look more like a text field like that that's perfect so there is your basic usage example now let's dive into some other text field scenarios that will come up oh and one quick thing if you want to download the sample code for this we've got it all in a single handy xod project in fact it contains a sample code for all of the swiftui components so that you can learn from it or copy and paste the code into your own project just visit C pc.to swiftui dkit it's a free download I'll leave it in the description below the video too all right now back to the tutorial what if we wanted to do something when the user has entered in their name so one way to do that is to use a modifier called onsubmit so in this scenario for this demo I am just going to print out in the console when uh when they hit enter on their key keyboard or return on the software keyboard like the on screen keyboard it's just going to print out the output in here but technically you could do anything you would want this is how you would respond to that so here I'm going to just type in Chris I'm going to hit enter on the keyboard and you can see it appeared there so in the software keyboard same thing would go if they type in something and they hit return it captures that event right there now in many cases if you're filling out a form you would want by default to put the cursor in the first text field right here I have to tap into it before the cursor appears so in order to set Focus state to the text field and that simply means you want the cursor to be in the text field and the text field is the active element that the user is interacting with right to set the focus State for the text field there is a modifier called focused and you can set it to a focus state which can be a true or false or could it could be a little more complicated if you want to set Focus state for multiple text fields for now let's talk about a single text field so in order to do this let's declare a property up here to keep track of the focus State and there's a special uh property wrapper called Focus State and we'll call this focus and it's going to be a Boolean we're not going to set the value just yet and here in this mod fire we can bind it to that property that we just declared now when if we want to text field to be active and focused when this view appears we can add a modifier called uh on appear and when this happens let me just do this we are going to set Focus equals true so now let me run it and when this text field appears you're going to see that it's focused active and ready to go so the user can type in Jill for example and it appears down there now let's talk about a scenario where there are multiple text fields and you want to jump from text field to text field as they are filling in the information you can still use a single Focus State however you're going to need to create a special enum which you can think of as a value that contains multiple values so let me show you how that works here outside of the body property I'm going to create a new enum and I'm going to call this um perhaps form field focus and it has to be hashable you can think of it as allowing these values to be compared against each other so let us create one of these cases for each text field that we have so let's say we're going to have two text Fields first name and last name so we're going to use the keyword case and then we are going to put first name and then last name and then up here instead of a boo this is going to be an instance of form field focus and then when we set the focus here we are going to say that okay let's comment this out for a second focused we are going to use this one instead so this is going to be a binding to that hashable Focus state which we've declared right up here and there's also an equals parameter which basically States if this property equals this value then this text field should be focused or active so let's see how that works so again we can find to focus and then we can say equals first name so if this property is equal to first name then it should be focused on and now we are going to create the second uh this should be an optional value because in the beginning it's not sent okay so let's create a second text field just so we can demonstrate and this is going to be last name this one should probably be first name we also need another state property for and to capture the text input for that I'll call this text input two so we're going to say that this is bound to uh text input 2 text field style is rounded border so we'll add the padding and then the focus state for this one is focus equals uh last name oh got close the bracket okay so now we are ready to go if I run this preview we'll see two text Fields first name and last name and then just like so in the the beginning when the form appears we are going to set the focus equal to the first name and then when the user hits return on the first name we're going to set the focus to the last name and that's how it's going to jump from the first text field to the second one so you can see when we launch the screen the focus is set to the first text field I'm going to type in like that I'm going to hit enter which is submit and and you can see in the code here that it prints out what I typed in and then it sets the focus to the next text field so it jumped down here right and I can do that all right so that's how we work with Focus States for multiple text Fields two last things before we go number one here is the playlist for tutorials on all the Swift Joi components and down here you can download a single xcode project which contains sample code for all of these swiftui components thanks for watching I'll see you in the next video