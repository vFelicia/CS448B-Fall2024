hello welcome to learn Swift for beginners lesson 3 in this lesson you're going to learn how to express some simple decision making in your Swift code using if statements alright let's get started so for this one we're going to start a brand new playground all right so we've done this before let's just call this one D if playground and I'm going to store this on my desktop ok so we're talking about if statements today and this is really exciting because it lets us finally start to make decisions to code and express some sort of logic so for example if I have let's declare a constant here so let a equals 10 for example and I wanted to print this statement only if a is less than let's say 11 which it is right here but okay actually that is that is not right let's say 4 and this gives us a reason to use the if statement right ok so print only if a is less than 4 but a is 10 right so we shouldn't be outputting this so what we can use here is an if statement and what it allows us to do is only execute some code if a certain condition is true so in this case we want to print this only if a is less than 4 so we can write an if statement to check if that's true or not before we print that statement so let me show you what that syntax looks like and if you're not familiar with programming terms syntax is simply like the grammatical structure of the language so it's basically the key words to use and how we go about declaring and statement or writing in this statement so it all starts with the if keyword following the if keyword we have the condition in which we want to check and following the condition we have a set of curly brackets now inside the curly brackets that's where we put the code that we want to run if that condition is true so that's your very basic if statement now going back to our playground let's write it out and print this only if a is less than four so we can do something like that if a and then we can use this operator less than four and remember we need to surround the piece of code that we want to execute if the condition is true using a pair of curly brackets like that so you can put the curly bracket on the same line or you can put it on a second line it doesn't matter but what you usually want to do is indent the code that is inside it just so it's easier to read I usually like to put this curly bracket in the same line like that okay so now you can see that in the console there's nothing printed and also to the right here it doesn't give you a preview because this condition is false a is not less than four because a is ten now what if we changed a to one and let the playground process okay now it prints the statement and it previews this statement see it's print it down here so that's your very basic if statement now there are other cool things that you can do with an if statement there is an else if clause so for example using the else if clause you can check a second condition if the first condition evaluates to false and the syntax for that looks like that so you have your if condition and then you have your curly brackets and then you use the key words else if and then you check another condition and you have another set of curly brackets so if you write it this way you're basically checking condition number one you know is that true if it's false now you're checking condition two and if that actually evaluates to true then you're running the code inside that else if walk now keep in mind that it kind of goes from top down and if the first condition is actually true then it's going to run that piece of code inside the first set of curly brackets and it's okay just going to ignore your else if statement so let's take a look at that inside the playground so here I'm going to put else if a is less than let's say eight then now I'm going to print only if a is less than eight so now I'm going to change not this I'm going to change a back to ten here and you can see nothing gets printed because first I checks this condition if it's false which it is then it's going to check this condition and it's also false so nothing gets printed now what if I changed a to seven now if I changed a to seven you can see that it prints the second statement because first it checks this condition that's false so now I check this condition and that actually turned out to be true so it's going to run this line of code here however if a is 1 then it checks this first one and then it prints this one and then it totally ignores all of the other else if conditions now I said all of the other else if conditions right I say that because you can have as many else if conditions as you want so you can say if a LS is less than ten and then you can you can continue adding as many conditions as you want but keep in mind that it checks from top to bottom and as soon as it finds a condition that is true it's going to run that piece of code and ignore all of the other condition now finally there is a clause that you can run if all of the conditions are true kind of like as a failsafe we're the last resort and that is the else keyword so the way you write this is using the else keyword it's not else if it's just simply else and there's no condition attached because if all of the conditions above it are false then it's going to run the code inside of this else statement here so going back to the playground let me show you what that looks like else print nothing was true and now let me change a back to ten here so you can see that it prints nothing was true because it's checking the statement false this statement is false and sorry I mean conditions and this condition is also false because a is not less than ten is actually 10 so this would actually evaluate to false and finally it just gets to this else pause and it's going to print what's in here okay so let me show you a couple of other things that you can do with L statements and let's change these print statements to something that is a lot more recognizable or easy to read let's do that branch one wrench two and here branch three okay so first of all let me show you how to do less than or equal to now you see a print branch three so that's how you do less than or equal to and likewise you can do greater than or equal to and you can see here it's still print branch three now what if you wanted to check if it was exactly ten you wouldn't do that because remember this equal sign is an assignment operator so what you need to do to come err if a is equal to 10 you use the double equal sign like that you can see here print branch 3 okay so why don't we introduce another constant up here let's say B and let's have that equal to 4 I want to show you that your conditions for your if statements and your different branches can get pretty complicated and you can involve multiple pieces of data in your condition so you can go if a is less than 4 if you want to check B as well and you want to say no and B is less than 4 that's how you would do it you would use this double ampersand sign and now you're checking two conditions you're checking is a less than 4 and B less than 4 and only if both of those are true are you going to get this branch here so let's try that out so if I set B 2 1 & a 2 1 then both of these conditions here are true so it's going to print branch 1 however if I set B to 10 right it's going to just see it hits this branch 2 now because a is 1 which is less than 8 and it didn't print branch 1 because this was false right even though a is 1 and this part is true we have to have this part to be true as well because where you saying is a less than 4 end B less than 4 and B is 10 right now however you can also do or so you can say is a less than 4 or be less than 4 and in this case either condition can be true and that would cause it to go into this branch so you can see now it is in branch 1 alright so let's say a is 10 and B is 1 so a is not less than 4 but B is right because you're using this or statement you're saying is a less than 4 or be less than four and if that's true then we're coming into here now furthermore if you wanted to involve let's do a see you can combine you know multiple conditions like this you can put this into a pair of parentheses like this and you can say you know and C is equal to three so you can see now that you're saying okay is a less than four or B is less than four and also is C equal to three then come into branch one now these brackets matter a lot because what you're doing is you're saying that this has to be true and this has to be true but for example if I just shift the brackets a little bit and I say something like this then that changes the meaning completely because now I'm saying is a less than four or is this part true right so where your brackets are matter a lot and it changes the meaning of what you're checking did you get that in this case I am checking is this true or is this true but the other way around I'm checking is this true and is this true right so the brackets matter finally let me show you another operator that we have here so here we have we're checking if C equal to three well what if we want to ask is see anything but three or is C not equal to three if we only care about the case where C is not three we can say something like this not equal to 3 and this is going to say is C not equal to 3 C see here that see is three so that's why it completely skips this branch and it ends up being a is equal to ten and a prince branch three now you can use this not operator with exclamation mark here on other things as well so for example here I'm asking is a equal to 10 right and I am it's coming in here because a actually is 10 so it's printing branch three but if I surround this like that let me put something else's in here is a equal to 10 and B equals to one right that is true so that's why I'm still getting branch three but if I put an exclamation mark here like that it basically flips it around so this evaluates the true right a is a 10 this evaluates to true both of this whole condition evaluates to true right eight is a equal to 10 and B is equal to 1 and then so we get true but then we're adding this guy here it flips that true to a false so that's why this whole condition equates to false okay so that does it for if statements I hope you're trying this out on your own computer in the playground because trust me it's pointless to try to memorize all of the key words and the syntax for the Swift it's much better if you you know only spend 30 minutes instead of trying to memorize things spend 30 minutes in the playground just punching in different numbers like that playing around with the different conditions and expressions and printing out a bunch of stuff in the console in 30 minutes you'll remember a lot more just by doing that then trying to memorize you know how to declare a variable or how to declare an if statement so you know if you can get a Mac get Xcode open in a playground and then type this code out for yourself and play around with it it's going to do wonders so thanks again for watching and if you like the series so far please give the video a thumbs up please subscribe it really helps get the channel out there YouTube's going to like to see that and as a result it's going to give this video more exposure so it's going to help the channel grow and it's going to help me continue producing these videos for you guys as well thanks for watching again I'll see you in the next lesson bye for now