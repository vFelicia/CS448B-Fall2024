hi and welcome in this video I'm going to show you a very important design pattern that governs how iOS apps are architected and if you haven't heard of the term design pattern before think of it as just a best practice solution in iOS the most common way to architect an app is using the MVC design pattern MVC stands for a Model View controller now don't get me wrong there are other design patterns this is not the only way you can build an iOS app but it's the most common one because it's the one that Apple uses themselves now let me tell you what this MVC pattern is all about MVC stands for Model View controller and what it does is help separate the responsibilities in an app let's talk about each of these three pieces separately the view is the easiest to explain first this is what the user sees when they look at your app the responsibility of the view is to display the user interface and detect events from the user such as taps and swipes aside from the user interface elements such as buttons labels and scrollable lists usually some sort of data or information is displayed on the screen right well where does this information come from this brings us to the M part of the MVC which stands for model or data model the model represents the data in your app the responsibility of the model is to manage the data whether that comes from a database or through a feed somewhere the last piece of the puzzle is the controller which is what the C stands for in MVC the responsibility of the controller is to handle the communication between the model and the view that communication is twofold number one when the view detects a user interaction such as a tap the controller is responsible for handling it and deciding what to do with that event let's say that it's a list of data and the user taps a delete button next to a particular row the view would detect that event and pass it to the controller who then needs to tell the model to update its data number two conversely when the screen loads the controller might ask the model for some data to display in the view the model would gather that data and return it to the controller who then hands it to the view for display so as you can see the view controller and model all have its own responsibilities well you might ask why would we even want to separate these different responsibilities well there are a couple of reasons number one is to keep things simple and when your app architecture is clean and simple like this that leads to code that is less likely to have bugs and that is easier to troubleshoot when there is a problem because you know where to look number two is reusability so the idea is that you keep the model being the M part in MVC independent from the controller and the view as much as possible in your app you might have multiple screens and each screen will have its own view and controller that manages that view however if you're able to keep the model independent then multiple screens can leverage the same model furthermore if you do a really good job at keeping that data model independent you would be able to switch out the data source in the future let's say it's connecting to this database and then you swap it over to a different database and the controller and the view would be none the wiser so as you can see this is great for maintenance and reusability now in the Xcode apps that we've built so far you might have noticed that our projects start with a storyboard and a view controller class these are two parts of the MVC design pattern the view is represented visually by the storyboard and the view controller class in your project is the controller that manages that view the default Xcode project doesn't come with a model class because it doesn't know what sort of data your app will have to make all of this information more concrete let's take a look at the app we're going to build in this module and then I'll explain how we'll architect it in terms of MVC first let's take a look at the user interface what sorts of data gets displayed well we have 16 cards and since this app is about finding matching pairs that means we have eight pairs of matching cards so we'll have a model class that handles this data it's responsibility will be to randomly generate eight pairs of matching cards when the app starts the view controller will request those eight random pairs of cards from the model the model will generate them and then give that data to the view controller and the view controller will give that data to the view for display now what form will that data be in when the model passes it to the view controller we know that the data consists of 16 cards but for each card there are important details such as what image file to use for that card as well as the status of that card there are actually two statuses that we need for each card number one has this card been flipped and number two has this card been matched combined with the image file name that's three pieces of data for each of the sixteen cards this totals 48 different pieces of information that we need to keep track of rather than treat these pieces of data as independent pieces of information we can instead group all of the relevant information for a single card into a card class this way we can simply create sixteen card objects and each card object would have three properties containing the details for that card at the end of the day the model will simply pass an array containing sixteen card objects to the view controller now let's take a look at what happens when a user starts interacting with the view the view tells the view controller each time the user taps on a card and the view controller will determine what to do based on whether the two cards that were flipped over match or not there's also another class will be creating which is a customized cell of the collection view and you're going to learn about what a collection view is later on but for now it's simply a user interface element that lets us display things in a grid and we're going to create a subclass of its cell so that we can control how the cells in the grid will look now having gone through this you might be thinking in the back of your head how the hell am I supposed to come up with this for my own app see that's the thing it comes with experience the more apps you build the more you will be able to do this just based on what you've seen and what you've done before if you're new to programming and you're doing this project just for yourself I would recommend that you focus on getting things to work first sometimes beginners get so wrapped up and trying to write the perfect code or trying to do things the best way that it becomes so overwhelming they just give up I don't want that to happen to you all right so if this project is for yourself and you're brand new just focus on getting things to work if you're working on a team or you're working at a company and you're building code and projects for clients then that's another story altogether okay so in the next lesson we'll actually be diving into Xcode and starting our project but first I've got a question for you guys what we cover today the MVC design pattern is that something new to you or have you learned it somewhere before let me know by leaving a quick comment below yes or no if you like this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a single video make sure you tap on that Bell icon as well thanks for watching and I'll see you guys in the next lesson