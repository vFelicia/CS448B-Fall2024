hey coders what's up this is Chris and I'm here with episode 4 of how to make a YouTube video app in this lesson we're going to display the videos in the scrollable list or the table view uh and we're just going to display the titles in this lesson because there's a lot to explain about how the table view gets its data from The View controller so just to do a quick recap before we start in the previous lesson we had created all of our video data in the video model so if you take a look at this method called get videos in the video model we had created Five video objects each of them has a video ID a title and a description so we're going to be displaying these titles right here in the table View and then furthermore in the view controller we create an instance of the video model class and we call the get videos it returns us those five video objects in an array and then we assign it to self. videos here uh which is a property of our view controller okay so how does that data how do how do the titles of those videos get shown on the table view that we added to our storyboard well take a look at this slide that I prepared right here it's actually the table view that asks the view controller for the data so for instance right here you can see in the diagram that it says table view asks the view controller how many rows of data are there but how does the table view object actually know about the view controller it's not enough that the table view is an element in the view controller's view so if we go back to the viewcontroller.swift here what we need to do is assign The View controller as the table views data source so you can read here the object that acts as the data source of the table view so I'm going to just assign it to self which is referring to the view controller there's another thing that I can set for the table view called the delegate and I'm also going to set that to self I'm going to show you what these mean in a second so what I've done here is I've assigned The View controller to the data source property as well as to the delegate property of the table view so now take a look at this diagram the table view doesn't actually know about the view controller and it doesn't need to all it cares for is it's going to ask its data source how many rows are there uh and we've set the data source to be the view controller okay so now that that mystery is solved how does the table view know what method to call on this data source as you can see right here in the view controller we don't have any methods so the next step to this puzzle is what's called protocol you can see here that xcode is complain complaining about some error cannot assign value of type view controller to type UI table view data source so if I'm to set the view controller as the data source for the table view the view controller needs to follow a specific protocol which dictates what sorts of methods it needs to have in order to be a data source for the table view same thing goes for the delegate uh in order for me to set the view controller as the delegate of the table view the view controller needs to follow a certain protocol so that it has the necessary methods that the table view needs um and how we're going to do that is up here we're going to write comma and then we're going to type UI table view data source and comma UI table view delegate and what this says is that the view controller complies with the UI table view data source protocol as well as the UI table view delegate protocol and now xcode is also complaining because we don't have the required methods for these protocols written down here so let me start by declaring the methods which we need in order to comply with these two so what we're going to do is start typing table View and autocomplete should pop up this menu where you can select a whole bunch of methods uh it's going to start you off at the top but keep scrolling down to the N section so you'll see this one called number of rows and double click that and it's going to fill in that method for you so in this method you can see that um it says number of rows in section and the return value of this method is an integer so going back to the slide and asking the question again how does the table view know what method to call on its data source well that's easy because anything that's set as the data source for the table view needs to comply with uh the UI table view data source protocol which means that it has this method written here so this method is what the table view is going to call on its data source in order to uh get the number of rows so in here we're going to return videos. count because videos contains the video objects that we want to display in the list remember another protocol method that we need to establish or Implement here start by typing table View and you're going to get this autocomplete menu pop up again and scroll down to self a row at index path and double click that and you notice that this one returns a UI table view cell so the table view calls this method when it wants to display a cell in the scrollable list and what it's asking is give me a UI table view cell object to display to the user so what I'm going to do here is say let cell equals table view dot DQ reusable cell with identifier and right here we're going to pass in an identifier uh that the table view is going to try to get a cell for if we go back to the main. storyboard and look at our prototype cell did we give this guy a uh identifier let's take a look so in the document outline you can highlight table view cell here and here we we didn't actually put a reuse identifier for this prototype cell so we can do that now we can just call it a basic cell make sure uh you have to use this exact capitalization here I capitalized the B and the C so I'm going to copy that pressing command C going back to the viewcontroller.swift and I'm going to paste that here so this method DQ reusable cell with identifier is going to try and get a cell with this identifier here and since this method returns let me just just press here do DQ it returns a UI table view cell question mark which means that it's an optional type meaning that it could return nothing if it can't find a cell but if it can't find a cell to reuse it's going to create a brand new cell with that identifier so what we're going to do here is add a question mark to unwrap that optional type to get at the actual cell and we're going to assign it to this constant called cell now we have this constant cell which is referencing a UI table view cell object and we're going to end up returning this cell in fact we can write the statement here return cell just to satisfy that uh this return type here first um but in between here we want to customize that cell customize the cell to display the video title so this basic prototype cell actually has a text label property that's a UI label so we can press enter can press Dot and the UI label has a text property and we can assign it something like let's just put a string in here for now and let's press command R to run it and you're going to see a scrollable list of video title like that there's five of them because there's five video objects in our videos array and you can see we can scroll them like this nothing happens right now when you click it but we want to display the actual title of the video object so let's go back and so I mentioned that the table view is going to call this method for every single cell that it wants to display well how do we know which cell it's wanting to display that's where the index path variable or parameter comes in the index path parameter has a a row property which tells us which Row the table view is asking for so we're going to use that to pick out the video object from our array that we want to display so let's say let video title equals videos which is our video array um and we want to pass in an index I'm going to say index path. row so that gives us the video object and then I want to go dot video title uh and I'm assigning that string or that piece of text into this constant called video title and now I'm going to assign this guy into the text label here so I'm going to get rid of the string here and I'm going to put in that constant so now if I run it we should see our video titles so there you go we have our video titles and right now the text is just scrolling off of the label uh but we're going to make it wrap and we're going to add the image and we're going to customize the cell in the following lesson so I hope you are able to understand how the table view gets its data from its data source and I'll see you guys tomorrow at 1200 p.m. Eastern talk to you later bye