learn how to provide data to a widget by reusing a service class from the main app and how to schedule that data in the timeline hey codecrew this is floor in this lesson we will finally fill up the widgets with some live as we use the existing todo service from the main app we will also fill out the timeline provider and talk about different ways to schedule content for your widget so let's get right into it before we can start filling out the timeline provider we need to do a few setup things as i already mentioned we will want to reuse the to do service in order for us to be able to reuse the to do service in our widget extension it needs to actually be a member of the widget target right now let's open up the file inspector on the right hand side and then under target membership you can see that the to do service is only a member of the main app target so let's also add it to the widget extension this is one of the two files that we need to add the second one is to do itself as you can see we will return arrays of todo's and signal todo's in our todo server so we definitely also need to have the todo struct inside of our widget extension so let's go over to that file and make sure that it's also a member of the widget extension next up we need to do one more setup step before we can implement the timeline provider and that is adding the data to our timeline entry you already learned about the importance of the timeline entry this is basically what is carried throughout the timeline and provided to your widget by the system at the correct date with the correct information the date is already specified here which is a requirement from the timeline entry protocol now let's also add the information and that's the to do's that should be shown at a specific date in our widget so let's just add a todo array here to our simple entry now we can actually use this entry to schedule updates in our widget using our timeline provider so we can close the simple entry here you can also close the todo over here as you can see now it doesn't compile anymore because we changed the requirements for our simple entry it now needs a date but it also needs a to do so let's try to fix all of these issues and at the same time i will explain you how each of these functions work briefly let me explain to you the placeholder function and actually let's not make me explain it to you let's just have a look at the definition oops the definition of the timeline provider and then you can see there are very very long descriptions of each of the functions for the placeholder function the get snapshot function and the get timeline function the placeholder function provides a timeline entry representing a placeholder version of the widget this is for example used when you display when your widget renders for the first time it can also be used in a widget gallery but i think there they actually used to get snapchat function now so basically we don't really need to care about what we return in the placeholder function as it's just a placeholder while the actual widget is loading so let's add the todo's here to our simple entry and to make life easy for us let's create an extension on to do to create some preview or some placeholder to do's with a given id so let's go back into the todo definition let's create an extension of to do and in here let's create a function called placeholder that takes in an id which is an integer and returns a to do for us and now we can use this in our get place or in our placeholder function and also in other places later on for example for previews the function is really easy just construct a to do here using any user id it's just a place how that really doesn't matter what's important is that the id is unique because the to do is identifiable we have a list iterating or for each iterating of all of the to do's in our large size widget so it is important that the ids are unique and that's why we're passing in a id here in the placeholder function let's just pass that right into the to do for the title let's just say placeholder and for completed let's just say a random boolean so either one or two either true or false okay now that we have this placeholder function back in our provider we can now use that placeholder function here to fill out our list of todo's let's make one with the id 0 and one with the id 1 and then that should be good in our placeholder function here next up is the get snapshot function here we also have to create a simple entry or one single entry but instead of returning it like we're doing in the placeholder function we need to call the completion handler with this entry so very similar but now this can actually be called on your actual widget so we cannot use placeholder data here anymore instead we will use our todo service to get all todo's for that let's remove everything that is autogenerated here and since our todo service uses the new async await pattern let's directly start off by constructing a task so we can use asynchronous stuff and i can already spoiler it to you we will also need to catch some errors so we can also directly add a new catch block here now inside of the do block let's fetch the todo's from our todo service so let's say let to do's equal try to await to do service dot shared dot get all to do's you already know this we already use this or i already explained to you how this works next up let's construct a simple entry so let's say let entry equals a simple entry with the date of now and to do's of the to do's that we just fetched here and then let's call the completion handler with that timeline entry so let's just say completion with the entry in the catch case however we also want to call the completion block this case this time let's also return some placeholder so let's just say completion simple entry with the date of now and to do's we will just use placeholder zero now you can see here that the instance member placeholder cannot be used and that's because we forgot to say that this is a static function so we can directly call it on the type to do instead of a specific instantiated to do now these errors should also go away okay awesome now the last part which is also the most interesting and most important is the get timeline function let me remove everything and then let's go through the function step by step so you understand how it works similar to before we also have a completion handler but this time the completion handler doesn't accept one entry it actually accepts a timeline of entries that timeline is a collection of entries like an array but it also has a refresh policy that's the last thing that we will handle when setting up this get timeline function first of all let's do the same setup as before we know we're going to use the to do service so we will need a task we also need a do catch block inside of the do block let's fetch all to do's once again so let's say let all to do's equal try await our to do service dot shared dot get all to do's this is the exact same stuff as before then let's actually do a little trick here if you remember in our widget ui we will show a bunch of different todo's in our large size view this ui is meant for small amounts of data not for large amounts of data the ui will break if you pass in let's say 50 to do's because then the top bar will get pushed out of the screen so we will just use the first five to do's that we get from the service so let's say let five to do's equal an array oops an array of our all to do's dot prefix of the length five this will give us the first five entries of the all to do's array that is not actually returning an array it's returning an array slice but we need an array so we will construct a new one here next let's also create a timeline entry so we will just create a new simple entry for the date of now with our five todo's in it up until now this is very similar to the get snapshot function and actually we should probably use this prefix five approach in the get snapshot function as well so let me copy it over and do it like this okay to make sure that the guest network function also doesn't break the ui okay so now we have our todo's we have our simple entry now what we need is a timeline and there are a couple of different ways to do this now one way is to create a bunch of different entries for example for right now in one hour in two hours and five hours and so on and pass all of them into a timeline and tell the timeline timeline to refresh once nothing is left in it anymore so in our case in five hours or what we are going to do construct a timeline with a single entry and tell it to refresh after some specific date has passed the idea is basically if you have content that you can already schedule right now throughout the day for example if you already have the user's calendar you can schedule the whole calendar widget for the whole day but if you rely on live data that you download from the server which is what we're doing in our todo servers then it is always um a good idea to only schedule one or two maybe three timeline entries and then force the timeline to refresh that way you will always have the most uptodate information so we will do the later we will create a timeline and this will accept an array of entries so we will just create an array with our single simple entry in it and then for the policy you can just hit dot as this is an enum very handy you can see there are three different reload policies the first one is at end so the timeline would reload when no more entry is left the second one is never i think this is very selfexplanatory this means that the app itself will never reload the timeline but however it will get reloaded sometimes for example if the user restarts the phone adds or removes the widget things like that the system decides when the timeline is really reloaded you only tell the system your preferences basically as the developer and then the last one is after a specific date which is what we will use and the date that we will use is now advanced by basically 60 seconds times 60 times 30 so basically every 30 minutes this timeline should get refreshed in practice this will probably not happen every 30 minutes since timelines only get refreshed when the user is actually on their home screen so if the user has their device in standby for a few hours then the widget will never get refreshed and will only get refreshed once they view the home screen again okay and now the last thing let's call the completion handler with our timeline again okay and now in the catch block we will just have our placeholder data once again for that let's create some timeline entries this is just an array of simple entry just uh one for now so let's say the date is now and the to do's is dot placeholder with the id 0 just one for now doesn't really matter hopefully this catch block will never take place then let's also create the timeline which is just a timeline with the entries array and with the reload policy we will just copy over the one from up here basically what this would mean is that after 30 minutes try again to build a timeline okay and then let's pass the timeline to the completion handler as well and with that our timeline provider is already done now let's use all of these pieces of data that we pass into the simple entries inside of our actual widget views to do that let's go to the medium size view okay in our views previously we hired coded all of the data like the to do title and whether it was completed but also the todo id down here in our deep link url in the medium size view we only want to show one to do so to do that let's grab the vstack let's cut it out and in here let's say if let to do equal our entry dot to do's dot first we will just access the first to do let's paste back in our v stack now in here instead of this hard coded string let's say to do dot title and instead of the completed let's say to do dot completed let's use the ternary operator here so let's say if the to do is completed we want to say completed and else we want to say that it's open as this is a unwrapping of the first object it might be nil so there might not be any todo's in the simple entry for example because we couldn't fetch any from the server because we succeeded to fetch from the server but the server just returned an empty array in this case with the json placeholder api this should never happen but in your main app you might want to put an else block here as well and then display some error state you could for example say couldn't load to do try again later or something like that okay now let's also replace the hardcoded id here in our widget url for that let's say entry dot to do's dot first dot id this is optional but we can't have an option in here so we will have to provide an alternative basically and we will just null coalesce it with zero okay that's it for the medium size view let's jump into the large size view as well okay in the large size view now if you remember we had this hard coded zero through six range let's get rid of that and instead let's say entry dot to do's we don't need to provide an identifier because we did mark our todo as identifiable itself and it does have the id property okay let's go top to bottom here so the first thing that we need to replace is the id in our deep link for that we can just say to do dot id and we actually need to grab the todo in in our for each for that to work then we had our if true here this of course should mean if to do that completed only then we want to show that little check mark on top of the circle and then i want to do the title also let's grab that one from the actual to do okay that should be it let me spin up the simulator and let's have a look at if everything works if we can see all of the todo's and if the deep links still correctly link into the app okay so as you can see it doesn't quite compile yet and that's because we still have our preview down here which doesn't have the updated simple entry initializer so we also have to pass in some to do's into our little swift ui preview here and let's also just use the placeholder function for zero and then also another one for one and i think this should be it now yeah looks good let's compile now and see if it runs okay so the simulator just launched and i added all of the widgets first of all here you can see the medium size view it fetched one of our todo's and if we tap on it then the app will open up and the little cheat will come up with some more detailed information about that to do and if we go back to the home screen and move over then we can see our large size widget which also fetched the last five to do's as we specified using a prefix operator and if we tap on any of these to do's then the fitting section will also open up and show up in the sheet because we passed down the correct id in the deep link this was the final lesson of the threepart widget kit course in this series you learned all the basics about widget kit how it works the way updates are scheduled multiple size classes reusing existing code and deep linking into your app