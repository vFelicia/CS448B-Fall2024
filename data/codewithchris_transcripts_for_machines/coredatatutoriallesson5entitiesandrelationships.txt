hey code crew in the last lesson you learned how to filter and sort your data using the predicate and sort descriptors properties of the fetch request in this lesson you'll learn how to specify relationships between your core data entities now if you've missed the previous few lessons i highly recommend that you go and check those out first one more thing before we begin i want to mention that these coordinator lessons are actually part of the database course in my cwc plus program inside cwc plus you'll be able to build this travel app that uses core data for the list of locations as well as personal notes for each location alright let's get started if you remember in lesson one of this core data series i showed you a diagram that illustrated what an object graph is we had the person objects and a family object and the family object held an array of person objects we're going to recreate this relationship in our data model let's go into xcode so here's the data model for our core data entities and the first thing we're going to do is to add a family entity so go ahead click add entity and let's change this entity name to family uh the other thing we're going to do is let's just add an attribute called name and change it to string and finally here's the part where we define the relationships between our different entities so we're looking at the family entity right now we're going to hit plus under relationship and we're going to name this relationship and what ends up happening is it's going to be a property just like these attributes are so i'm going to call this people and it's going to essentially store all of the person objects that's part of this family so the destination is basically the data type i'm going to choose person and inverse here there's nothing to select for now but we're going to talk about that in just a second so first of all let's go over to the attributes section of this relationship and specify the type and change it from to one to many and that means that this people property can store multiple person objects essentially it's going to be an array of person objects now let's go over to the person and we're also going to specify a relationship here but in the inverse so it's going to define that a person belongs to a family so under relationship hit plus again and for this property i'm going to call it family and the destination is essentially the type of this property it's going to be family and for the inverse if you pull this down now you're going to see that there is an inverse and this is that relationship that we defined here right in the family entity so that's what we're going to want to select and then if you go back to the family entity under this relationship you're going to see that this inverse has automatically been set for you and you can specify that the inverse of this relationship is the family property of the person object and the reason we specify this inverse is so that core data can maintain the data integrity of our object graph even if you're not going to use the inverse for example you know you want a family object to hold multiple references to different person objects but you don't really care that a person object has a reference back to the family object you should still specify this inverse relationship in your data model again this is something that apple recommends that we always specify this inverse relationship so that it lets core data maintain the integrity of the data all right now that we've specified this simple relationship between our family and person entities let's go ahead and regenerate our our classes actually i forgot for this family entity i'm going to set it to manual code generation as well just like i have for the person and since it's set to manual that means we have to regenerate these classes every time we make a change now first of all i'm going to go ahead and delete my existing person class because as you can see it doesn't account for that relationship that i just added so let's go ahead select both of these and choose delete and move it to trash now i'm going to choose editor and i'm going to choose create ns managed object subclass select the data model make sure that my entities are selected the ones that i want to generate the classes for hit next and let's just save it right there now i'm going to drag all of these into my model group so one of the first things i like to do after generating these classes is press command b just to make sure that everything builds successfully and if you get a failure sometimes it's just because xcode's detecting some artifacts that should be gone in the build folder so what you do is go to product and hit clean build folder and that will usually do the trick and you can press command b and build it again just to make sure that everything is fine and also sometimes xcode won't detect your new classes and you'll get some weird autocomplete errors and you'll see some xcode errors even though you can run the app successfully if that happens to you usually quitting xcode and restarting it will do the trick and that's what happened to me the first time i was working with this so i just thought i'd mention it now what i'd like to do is just to review the classes that were generated and point out some of the differences to you based on what we edited in the data model so taking a look at this person class now we have a family property you can see that the data type is family so this is a reference from the person to the family the inverse if we go to the family class you can see that here's the name attribute that we specified and here's also the people relationship that we specified the data type is actually an ns set it contains a set of people but take a look at this down here there are a couple of methods so there's two methods it's called the same thing add to people but this is allowed because the the signature is different all right the the parameter that you pass in is different one is for adding a single person object to that set here and this one is if you want to add you know multiple person objects to this set same thing goes for remove remove a single person or remove a set of people now i think you can guess that it's pretty straightforward to specify this relationship and that's why i didn't really modify the user interface of our existing demo app to accommodate families and to specify relationships between people and families because the work that it would have taken me just to create that all of that new user interface it's much faster for me just to demonstrate to you and show you the code for you to create a couple of these entities specify the relationships and save it to our core data database so let's go ahead and do that i'm going to go into our view controller and maybe i will i'll just do it in in a random method here because i don't want to i don't want to confuse you by writing it in some other method so i'm just going to say relationship demo and just create this new function here or a new method here for us to write this code so let's create a family create a person and then lastly we have to remain remember to save uh save the context okay so uh let family equals so we're going to create a new family object in our managed object context so that's the context we want to create it in and why don't we go ahead let's set that to var actually because i want to change the name let's call this the abc family and let's create a new person in this context as well and oops let's set the person's name to maggie okay so how do we specify a relationship between the family and the person well there are actually two ways you can do it because we actually have uh relationships or properties pointing both ways so very simply you can set the family property of the person to this family up here and just like that you've specified that relationship um after you do that when you try to access family dot people you'll find that maggie is actually in that set right and you're gonna have to save it so context dot save so that's the first way you can specify the relationship and as you can see super easy the second way you can do it is by using those methods that i showed you see add to people and obviously you probably have to do this down here and you pass in the person and actually we can use let for this and so that's the second way using any of these two ways to specify relationships between your objects and building your object graph like that after you save it to core data and you bring it back those relationships will get maintained right so if you bring back this family you'll be able to look through the people and find maggie and likewise if you only bring back maggie from a core data fetch you're going to be able to access this family object through the person.family property like that all right so that's the end of the core data series for now you know just enough to start applying this knowledge and using core data in an app now having this core data knowledge is already going to open up a lot of app possibilities and ideas that we can build together on this channel if you don't want to miss it please make sure you're subscribed to the channel by hitting that red subscribe button below and lastly if you enjoyed this series and you learned something new please give this video a thumbs up it really helps with the youtube algorithm and getting exposure for this series finally i'll leave you with this what kind of app are you going to build with these newly found core data skills let me know by leaving a quick comment below alright i'll see you in the next lesson