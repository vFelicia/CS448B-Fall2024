close Chris here back for another lesson on connecting an iOS app to a MySQL database in the previous lesson we had setup sub database through our web host here and we had created a database user and assigned it to the database so we also added some data to that database now we are going to create the PHP web service and we're going to put it on the web host so that we can access it and it's going to query that database for the data and return it as JSON so here's an example of what it's going to look like this is the domain that I signed up for iOS quiz comm slash and then I had a name that service dot PHP so you can see here when I hit this URL as you can hit the URL right now in your browser you're going to get back our data so if you're not familiar with JSON these are basically key value pairs so you see the Schooley bracket here might be hard to see but that would be you know one row of data and this would be translated into when we parse it into our Swift it would be a dictionary with a name key and the value of the apple an address key and the value of that would be this address a latitude key and then you know so on and so forth and then you have a comma here and this would be represented as another dictionary and then the outer two brackets these square brackets that represents an array so when we actually parse this JSON into our Swift code we're going to have an array of two dictionaries and inside those two dictionaries it's going to be these key value pairs so let's take a look at the PHP code that is running behind the scenes to produce this we go back to my blog article here now I'm going to walk through this PHP code here it's been a while since wrote this so there might be better ways of doing things now and I would welcome any feedback if you are very familiar with PHP so this code is just going to go into a standard text editor and you're just going to save it as a file with the extension dot PHP and when you upload it onto our web post it's going to run that file as PHP now here is the opening tag for the PHP code and here's the closing tag so anything in between these two tags that's our PHP code and these green lines are comments just like when we write Swift code and variables in PHP have this dollar sign in front of it so we have this con variable here and what we're doing is using this MySQL I connect function to open a connection to the database and we're assigning it to this variable here because later on we're going to need to close it so we do need a reference to that connection here in this if statement we are just checking if there was an error in opening the connection and if there was this echo command is kind of like the print statement and Swift where it would just output that onto the screen now before we move on I just like to talk a little bit about the statement here because in this MySQL I connect function we are going to have to specify several parameters localhost is the address of the database and because our PHP web service and databases are going to be on the same server localhost just refers to the server that is on now username is going to be the database username password is going to be that database user's password and DD name you're going to replace that with the actual name of the database that you want it to access now although we do have to put in the actual credentials here in the form of text it's not that anybody can actually just take a look at the code behind it like if you went view source on this guy you wouldn't be able to see the source code like you could with HTML and it's not like you can download this file and open it up and you know take a look at the credentials so it's not unsafe like that but there are other best practices that we can do to make it safer for instance one easy thing is that right here I don't have an SSL certificate for this web service so you know it would be more secure if we access this through HTTPS so that's one thing but the other thing also is that if you were building kind of a fullfledged API with lots of different web service calls to the database to you know create rows and insert data update data delete data whatever you probably wouldn't want to have these hardcoded credentials in every single web service file so I did a little bit of research and this article actually has a lot of good points for best practices in using that MySQL iConnect statement here one of the things I can just point out is that we can actually make that connection in another file in another PHP file and then from our web service here instead of you know directly hard coding the code here we just make a link or make a reference to that other connection file so let me show you what this person did here so you can have this config any file which actually contains the credentials and database information and then from your web service you can just have this parse in e file which reads in that information in so what that's going to prevent is even if someone did end up being able to see your PHP code of your web service they're only going to see things like this where you reference the username and password from the config file rather than seeing the actual values so unfortunately my PHP skills are still pretty much at a beginner level and so I'm going to link I'm going to put this link in the description my video so you can read into it and you can apply these best practices if you are actually creating this for a real app rather than just a demo for what I've done here is pretty much what I call demo code another thing that this article mentioned is that you want to escape the SQL query what I mean by that is here we actually just have one hardcoded query select everything from the locations table but sometimes you're going to rely on the iOS app passing in some data to your web service and you're going to take that data and make your database call write for example your iOS app may be looking for all the articles associated with the particular user and so it would pass you that user ID and then you would take that user ID and then you would modify this SQL statement and say select you know all the particles of this user ID however there's something called a SQL injection attack where malicious users could instead of passing you a user ID pass you another sequel statement so if you just take that thinking that it's a user ID and then you you know you build it into your sequel selection statement here you may end up returning more information or returning different information than you intended to so the attacker could potentially access data that they're not supposed to so one way to combat against that is to before you take any data and just shove it into your SQL statement you need to escape it effectively treating that input as text and not actual a sequel statement and if your web developer you're probably familiar with that because any sort of text box which you can enter in data on a website that could be subject to sequel injection attacks so it's it's pretty common to safeguard against this stuff I have another article which I'll also link to in the description that was very interesting because it talks about different types of attacks that people could use to sort of expose or trick your web service rather into recording data that it's not supposed to or running code that it's not supposed to there's something called the maninthemiddle attack replay attack and stuff like that and this article talked about different ways for you to build a secure web service so there's a lot to consider if you're going to be building web services that connect to your MySQL database or any sort of database for that matter so now I hope you can kind of understand why I would recommend a platform like firebase or parse server or something like that for beginners who want to work with backend because if you're just new to iOS and you're new to programming in general you're just picking up Swift programming it's picking up Xcode the last thing you want to do is have to learn about another language and then how to build secure web service and stuff like that I'm using firebase and parse server it's very easy to get set up and running and inside the iOS app you're building if you're using the MVC design pattern correctly it's going to be very easy for you to just swap in another data layer should you decide not to use firebase or parse server in the future you can you can change that without having to modify a lot of stuff in your app but anyways coming back to this in this tutorial in this video series I'm showing you guys how to connect your iOS app to read data from my desk you'll a database right so that's what we're going to do here let's go through the rest of this code here this is another variable called SQL and we're assigning it this string this string is actually going to be the sequel query that we run against the database and like I mentioned before it just selects all the rows from this locations table and then what we're doing here is we're running the query we're passing in the connection that we opened earlier we're passing in the SQL statement which is right here and we're signing results to this variable called result and this if statement is just going to check if there were any results now if it turns out that there are results stored in here you know we ran the statement and we got some rows of data back then we're going to come in here I created two arrays one being result array and one being temporary and then I loop through the result rows and for each row I'm using a while loop for each row I'm assigning that row into a temporary and then I'm pushing that into a result rate and basically building up all the rows of data into result array I'm not sure why I assigned row in to temp array and then doing it this way rather than just putting this row in here can't remember if there was a reason why I wrote it this way but essentially this while loop just goes through the results for each row of data that I got back it's putting it into result array and then finally JSON encode is going to take the data in that result array and it's going to turn it into JSON and this echo statement again is like a print statement so it's going to print that JSON code out to the screen like you see here and then finally we close that database connection so if we simply just take this code we're going to copy it and I'm just going to paste it into a text file and obviously you're going to change user name password and DB name to the proper things let me show you where you would see that in the cPanel you would click MySQL database and then your database name would be this guy so that's what you would put in DB name and this would be your database users name so you would put that in the username and password you would just put whatever password you assigned that guy and then you would save this file and by default my text editor is trying to save it as an HTML file you'll save it on my desktop but you're going to use a dot PHP extension so you'll make sure that it actually is a PHP extension if you look at my desktop here you can see the file don't see it's a kind of PHP file and it's not you know like service dot PHP dot HTML or dot txt or something like that that it actually is a PHP file and then you're going to go ahead and you're going to upload that file to your server now you might have FTP access if you've set that up you can go ahead and login to your FTP for your web server and you can just upload that service dot PHP file however from the control panel there's also another way there's like an onscreen interface for you to do it I didn't really bother connecting to FTP because I just needed to upload this one file so I just used file manager in here and I went into the web root and then through this interface here you have the ability to upload files through this button here upload and I just put a here service KTP as you can see so this is the web root which is just off of your domain like that so that would be your domain slash service dot PHP and that's my service dot PHP file going to the database grabbing those two rows and coding it into JSON and outputting it onto the screen now if you have some errors in your PHP file you will see and you try to hit your hc' file you're going to see the error message here instead and you might even see some of the PHP code so that's why it's best if you you know don't actually put your credentials in this PHP file just in case that somehow that code can get revealed instead you know you would put it in a separate config file and you would not put that config file in the web root of your server either you'd probably put it in some folder that can only be accessed by the PHP file and not through the browser like this anyways in this demo I wasn't concerned about the best practices or making this web service secure now that we have our PHP web service reading from the database we can now work on the client app now in the next lesson we're going to start that Xcode project that is going to hit this URL and parse this JSON so we can use that data to display it on the map thanks for watching and I'll see you in the next lesson bye for now