hello welcome youtubers I hope you guys are doing well just to give a little recap on where we left off in episode 5 we got this table view working with a couple of dummy elements here so you can see test1 test2 test3 and in this lesson we're going to add a text field down here with a button and when you hit the text field to have that little tray animate up so that it makes room for the keyboard so that's what we're going to focus on for this lesson I'm going to go back into our Xcode project here and just to remind you guys in our storyboard we have a table view and then down here we have a UI view which we called doc view as you can see from this document outline if you don't have this panel it's this button down here that you can click to show or hide the document outline okay so let's go ahead in here on the right hand side search for UI text field if you don't have this sort of little area where you can search for elements make sure that you're on this objects library tab right here there are a couple of different ones here if you're not on the right one you won't be able to search for your elements and furthermore if you click this button yours might look like this that's perfectly fine you can click this button to switch into ListView or the big icon view so once you find your text field in here just drag it into your doc view here what's important to make sure is that if you look at your document outline that your text field is underneath your doc view so it's indented in here meaning that this text field is inside the doc view because this is a UI view and it can contain other views so the doc view is the parent of this text field okay so now we have our text field here if you click it we're gonna add some constraints that dictate how it's going to be laid out so the strategy here is that I'm going to define a left margin and the top margin and I'm not going to define a bottom margin because when we animate we're gonna animate the height of this dock view and it's going to grow up here to maybe halfway so that it makes room for the keyboard and because we have a rule dictating that this text field should be you know X pixels from the top edge this text field is going to follow that follow the stock view up as you're gonna see so click on your text field here go to this menu down here I'm going to say 20 from the left and let's say let's say 15 add two constraints and then you can go ahead and update frames so you're gonna see that it looks squished now because we've just dictated a left margin and a top one but we haven't dictated a right one so it doesn't know how wide it should be and furthermore we don't have a constraint to dictate its width either but we're not going to need that so in here in the object library pane search for a button so we're gonna add a button in here drag it into your document we're gonna configure this button up here in the properties I'm gonna call it send and again if you click that let's add a top of 15 and a right of 20 add two constraints and I'm actually gonna give this button a width let's click this again let's give it a width of 70 so now when we click here we go let's go update frames under all views and viewcontroller so now we have a width for our button a top constraint and the right constraint and now I'm going to add a constraint between the text field and the button so I'm going to click the text field and then click this button again and I'm gonna add a write constraint but pull the drop down here and double check that the neighbor that you're specifying this constraint for is the send button so you can see that little check mark beside it so right now it's 432 points away from that send button so I'm gonna make it 15 so we're gonna add that constraint and go update frames so following the rule it stretches out this text field because now it can infer a width right it should be 15 I think this is 20 actually yeah so 20 it's 20 from the left 15 from the button on the right which gives it all of this space for typing and both of them have a top constraint to the top edge of the dock view okay so now we're going to open up the assistant editor by clicking this button right here and this shows our view controller on the right hand side and what we're going to do here is expose our send button and our text field as outlets so that we can reference them through code so I'm going to hold down ctrl on my keyboard and click and drag over here and this is the text field so I'm gonna call it the message text field and now for the button and click I'm gonna hold down control on my keyboard click and drag it here and call this the send button and now we've created two outlets one referencing the button in our storyboard in the text field in our storyboard furthermore I'm gonna scroll down a little bit maybe make some space right here for an action method I'm gonna click the button in my document line hold down control click and drag here and for the connection type I'm going to choose action for the type I'm going to say button and I'm gonna call it send button tapped ok so now we have an action method that the button is tapped seven button is tapped okay and last thing I want to do is locate the height constraint for the doc view because we're going to be animating that constraint so if we look under the doc view here under constraints you can see this height constraint if we look on the righthand side for the properties for this constraint you can see that the item we're referring to is the doc view the attribute is the height relationship is equal to 60 that's what we set it at so I'm going to expose this constraint as an outlet as well so I'm going to hold down control click and drag and just move it over here we call this the doc view height constraint and the reason I'm doing that is because when the send button is tapped down here you know this action method we created I'm going to be animating the constant of that height constraint so right now the constant is set at 60 I'm going to be animating that to let's say 400 or something like that and so you're going to see this doc view here in the storyboard you're going to see this move up and grow in height and then you're gonna see the text field and the button follow it because it's got margins that's specify it should be 15 from the top of the doc view okay so let's do that let's go back into the single editor view let's jump into viewcontroller.swift so when the send button is tapped what I want to do is perform an animation to grow the doc view actually before I do that I'm going to run it because I want to show you guys what happens right now that we don't have that animation so I'm going to click into the text field here and you can see the keyboard come up and it totally covers our text field and our button so we could be typing here but you don't even know what you're typing and furthermore when you tap outside of the keyboard it doesn't dismiss the keyboard that's all stuff that we have to add code for in order to make that happen so let's go back into our project okay so the way we're going to perform the animation is by using UI view it's got type method of the UI view class and it's called animate with duration and we're going to choose we can use this one right here so it's got a duration let's say half a second and for animations we're going to open up a pair of curly braces like that and we're gonna put in our animation code for completion we're going to put in nil for now which is basically what happens when the animation is completed so by putting in nil here we are not going to run any code when the animation is complete okay so for the animations what we're going to do before that we're gonna call self thought view layout if needed and what this does is it tells the View for this view controller to update its view based on any changes in the constraints if there are changes in the constraints and we're going to do this right before the animation in here we're gonna say self thought doc view height constraint constant equals and we're gonna say 400 and we're going to say self dot and view layout if needed because we're changing the constraint right here so by calling this method layout if needed it's going to detect that the constraint has changed and then perform the you know update the view right away so let's run it again and let's see that in action so clicking the text field now oh okay so I put it in the wrong method here I put it in the send button tapped actually I want to move this code into when the text field is tapped we're still going to need the send button tapped method here because that's going to perform the sending of the message to the parse back end but right now we need to basically detect when the text field is being edited so the way we do that is using protocols and delegates again kind of like what we did here with the tableview so in order to know when the text field is being edited and when it's done editing we have to set the view controller this guy as the delegate for the text field so when the user starts editing the text field the text field element is going to tell its delegate hey editing has started so let's do that set self as the delegate for the text field so self thought message text field delegate equals self now there's problem here because self which refers to view controller in order to be a delegate for the text field it has to conform to a protocol UI text field delegate okay and this basically dictates that the view controller can be set as a delegate for the text field and now we can override sorry we can handle some of the delegate methods of the text field okay so let's create some sections here let's say mark table view delegate methods and this keyword here mark is very handy because when you pull down the methods list for your class you can see their table view delegate methods it basically creates kind of like a section if your class becomes really long you can use this to organize your methods a little bit we're gonna create another one called text field delegate methods and I'm going to start typing text field and you can see a whole bunch of delegate methods that you can handle for the text field element and the width the one we want is did begin editing right here so when the user starts editing that text field this method is going to get called simply because we're handling it right here and what I want to do is move this chunk of code here so when the user begins editing that text field we animate that doc views height similarly when the text field did end editing you see that one we're going to perform an animation again but this time animating it back to the original height of 60 so I'm gonna copy this chunk of code paste it here and change the constant to 60 instead so that it shrinks back to the original height okay so let's run it now and when we tap into the text field to begin editing that animation code should be called alright so now you can see that tray or that Doc View animating up now we have that code to animate it back down to 60 when the text field has finished editing see text field did and editing but what dictates finished editing right hitting return doesn't do it tapping outside doesn't do it ideally when we hit send or we tap outside that dictates did and editing so we have to detect when the user either hits the send button when the user taps outside say taps the table view or something like that that we call a method that the text field has to tell it that it's finished editing so let's demonstrate that in the send button tapped first so sent button is tapped called the end editing method for the text field so we're gonna say self thought text field sorry message text field dot and editing causes the view well you can't really read it but basically it tells the text field that you're done or the user is done we're gonna say true for forcing it to end editing by calling this method it's going to trigger this text field did and editing delegate method which in turn is going to call our little animation to animate it back okay in order to detect when the tableview has been tapped i'm going to add a tap gesture recognizer to the table and i'll show you how that works so add a tap gesture recognizer to the table view i'm going to say let tap gesture be a UI tap gesture recognizer and i'm going to create a new one the target and action when this tap gesture happens which method or action of which target or object do you want to trigger so because i'm going to create that method in the view controller I'm gonna put self as target and for the action I'm going to create a new method called table view tapped okay don't forget to add the tap gesture to the table so we're gonna say self dot table view dot its message table view that we have add just your recognizer and I'm going to pass it to tap gesture alright so now whenever the table view is tapped it's going to trigger a method called table view tapped so let's create that down here and then here I just want to loops forgot my brackets there I just want to trigger force the textfield to end editing so selfthought message text field and editing true and here I'm going to change four hundred and stead of four hundred I'm going to say three fifty because it seemed to have animated a little too high okay so topping that moves it up and if I hit the send button it's going to animate it back down or if I tap the table view like that it's going to animate it back down as well alright so now we've got our text field and our send button and also the animation for that working in the next lesson we're going to actually implement the code that sends the data to parse and then after that the retrieving code to grab the messages from the parse back end to display in our table view hope you guys enjoyed the lesson now see you guys next time