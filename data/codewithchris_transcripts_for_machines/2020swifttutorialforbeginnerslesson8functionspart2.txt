hello and welcome to my Swift tutorial for beginners series now in the previous lesson you learned about functions what they are and how to call them well in this lesson you're going to learn how to use them in an even more powerful way and that is to have your functions accept data and return data back to you when you call them alright stay tuned so in the last lesson we declared this function here to add two numbers and when you call this function it prints something down in the console however most of the times or rather some times we declare a function to take some input perform a specific task and then return the result to us so the first part of being able to do that is to specify that your function actually returns something back to you when you call it and let's take a look at the syntax for how this works so here's the syntax for a function that returns some data you'll notice that we still have the func keyword and we still have the function name followed by the parenthesis but after that you have a followed by a greater than sign which combines itself to look like an arrow followed by a space and then the data type of the data that you're going to return from the function so if in our case add two numbers if we wanted to return the result to the function caller we would probably put int where it says data type right here because that is the type of the data that we are returning all right so after the data type you have a space and then you have the curly brackets again and you would specify your code now if you do specify a return value like this inside your function you must have the return keyword and that return keyword is used to actually end the function and return the data back to the color so now let's jump back to our playground and modify our function to return the data to us all right so we've got our function up here so we just add a greater than sign and then we specify space the data type that this function returned and as I've said we're working with ins so I'm going to return an int so right away you can see Xcode detects hey you're saying that this function returns data but you're not using the return keyword and so we've got this error here so let's modify our function instead of printing C to the console why don't we try returning it so we just put return space C just like that all right so let's run our function now now nothing gets out put into the console where where the C go all right well what happens is that when you call a function that returns some data like we have in this case you have to capture that data somehow so remember variables and constants are used to keep track of data right so all we need to do is say let's define a constant let's call it sum and we are going to assign to this new constant the result or the returned data from our function add two numbers so let's run this and see what happens again actually nothing will happen because we haven't output anything to the console but let me write this print statement here so we're gonna print some and as you can see there it is in the console so what's happening here well add two numbers we're calling this function it's declaring a B and then declaring C and adding a and B assigning it to see and then it's returning C then we're assigning that result into a new constant called sum and finally we are printing that into the console using this print statement now it's not really interesting that whenever we call this function it always just returns 3 right so would it be cool if we were able to tell the function which two numbers to add and we can do that by using input parameters so let's take a look at the syntax for that so like I mentioned in the last lesson we specify our parameters in between the rounded parentheses now if you take a look at the screen you're going to see how we specify one parameter for our function I know that's a lot of text but we're going to jump into the playground and I will show you an example so you first start with the datatype let's start from the right hand and work our way to the left we start with the data type of the parameter and this merely specifies you know if it's an INT if it's a bool you know what type of data are you asking for to be input into your function right and take note that there is a colon in front of that and then in front of the colon you have your parameter name now you can specify any sort of name you want you're going to be using this parameter name inside your function if you want to access that data and then you have your argument label notice that there is a space in between the argument label and parameter name now what's the argument label for well it's optional and it helps your function call read more like natural English I'll show you what that means in a second for now why don't we jump back into the playground and take a look at how we specify this parameter all right so let's modify our add two numbers function up here with the parameter and before I use descriptive labels argument names and prior names I am going to just put arg here as our argument label and I'm gonna put space and then I'm gonna call this para for our parameter remember then we specify colon and then the data type of our parameter which is going to be int and the reason why I'm just specifying the argument label and the parameter name as these is because I want you to see what the resulting function call looks like so down here you can see Xcode automatically detects that this function call is no longer correct in order to call the add two numbers function you're now gonna have to specify that parameter so an easy way to do that is just to delete this and then use an autocomplete again and you can see here that now the function call has this which tells you the return type of the function now if the function doesn't return any data then you're going to see void in this column instead kind of like this down here but our add two numbers function does return an int so you see int here and then you can see the parameter that it requires right here as well along with the data type all right so let's double click that or just press ENTER on that and you can see that the argument label is right there and then this int here we can put a number in there let's put 5 so now this is how you would call add two numbers with one parameter and you're basically passing in 5 into the function from inside of the function let's say that we wanted to assign that 5 into a we would use the parameter name we're not using the argument label we're using the parameter name inside the function here so why don't we go print and the sum should be 7 right as you can see here now what if we wanted to specify another parameter so that we can also specify what B should be inside of our function well you can specify multiple parameters you would just have to use comma in between each parameter so let's take a look at that syntax now as you can see you have a comma and then you have your second argument label then you have your second parameter name and then the data type of that second parameter pretty straightforward and you can repeat this for 3 4 5 6 parameters whatever you need alright now let's jump back to the playground and specify another parameter for our function so we're gonna go ahead right here and hit comma and then now I'm going to say Arg 2 para 2 and that's going to be an int and now I'm going to assign para 2 to be and this function call will no longer be correct so I'm just going to erase that and retype it like that and you can see now I have to specify two arguments or parameters so I'm going to say 5 and 5 and the cool thing is that let me just go back there for a second is when you let's say you're specifying the parameters you hit 5 you can press tab to jump to the next parameter so that's a little shortcut a little tip for you there all right so let's print the sum and we've got ten okay cool so let me show you some other cool things I did tell you that argument labels were optional right so why don't we go ahead and remove the argument labels here and just have the parameter name and the data type so incorrect argument labels so why don't we let's get rid of that and just now when you make your function call you have to specify still two parameters right because we still have two parameters but with the absence of the argument label now it writes the parameter name so let's go five and five like that all right so generally when you're specifying parameters into your function you kind of want to be descriptive with them so para and para two really doesn't mean anything so why don't we change that to number one and number two and remember changing these parameter names it means that we also have to change this number one and number two and as a result this also changes remember oops okay so we can specify five and five so that's all good so far now that you notice that initially when we had the argument labels the function call was using the argument labels right but now that we've removed the argument labels from this function definition this has turned into the parameter name so if you had a need to make this read like more like natural English then you could specify argument labels to do it like that so for example I would I could say add two numbers and my first argument like label could be using and my second argument label can be end and that would become the function call would be something like that now all right add two numbers using five and five so it reads clearly and it's really understandable and inside your function when you're working with your code you still reference those parameters with the parameter name that was specified so you have number one and number two now another trick that you could do if you totally want to omit parameter names and labels from the function call and you just want to specify five and five then what you can do is instead of using argument labels like this you can just put an underscore in front of your parameter name there is a space in between that and your parameter name though so if you specify the underscores like that then your function call would look like this whoops not that one numbers there we go now you just five and five and that now becomes your function call so just to recap you learned about what return values are you learned how to use the return keyword you learned about what input parameters are and how to specify them you learn about parameter names and you learned about argument labels and how to omit them altogether now I know it still might be confusing in your head and that's why I highly recommend that you use the exercises and challenges to practice more find all those resources in the link in the description below now if you enjoyed this lesson please hit the thumbs up in the subscribe button it really helps the channel alright now click on over to the next lesson I'll see you there