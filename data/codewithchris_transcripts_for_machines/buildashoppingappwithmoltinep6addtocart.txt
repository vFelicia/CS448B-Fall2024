hey coders what's up hope you guys are doing well Chris here with episode 6 of how to build a shopping app in the previous lesson we had implemented the product details view in this lesson we're going to add an Add to Cart button on this view which is going to allow the user to add this product to the cart in preparation for checkout so let's hit stop on the project here and let's go into the storyboard because we're going to need to add a button to the detail view so in the lower right hand corner let's search for button and then we're gonna go ahead and just drag it on around right there let's add some constraints to it so make sure you've got it selected and then let's select the pin so I'm gonna get rid of constrain margins and I'm just going to say that this is going to be a hundred from the bottom I'm also going to hit the button and then horizontally center it in the container so I'm going to add that constraint as well so now let's update frames okay so I have my button there let's run it quickly and see how it looks ok so that button is going to be our Add to Cart button let's go back to the storyboard and change the text for that guy and call it add to cart so we're gonna have to update frames again just to make sure it doesn't get cut off now let's add an action handler for this button so that when the user taps it we're gonna trigger some code to happen let's hit the assistant editor view make sure you're looking at the detail view controller dot Swift and scroll all the way down and underneath here right before this closing curly bracket for the class I'm going to click the button in the document outline I'm gonna hold down control on my keyboard I'm gonna click and drag it right there and let go connection type is not an outlet I want an action so here I'm going to say addtocart tapped and touch up inside is fine and for the type I'm just going to hit the dropdown and select I button and connect alright so now I've hooked up this method to fire whenever the Add to Cart button is hit let's create some space in here and just write a couple of comments as to what we're going to do so first of all we're going to get the get the current Product ID because we're going to need that Product ID in order to add it to the cart and then second of all add the product to the cart and then lastly display a message to the user that the item has been added before we write the code let's go back into the standard editor view and let's go back to the detail view controller take note at the top we have the detail item property which references the product that is currently being displayed so if we scroll down to the bottom it's pretty straightforward so first of all we're going to create a new constant let's call it Product ID and we're going to assign into it self thought detail item and because we don't know whether there's actually a product assigned to this property or not we're going to put the question mark there so that it doesn't crash if we're trying to access this key and the key we're trying to access is ID and then we're going to try to cast it as a string okay so with this line there's a couple of things that can go wrong first of all detail item can be nil which is not likely because we're looking at a product but even so it's nice to keep that in mind second of all there may not be a key named ID even though there should be and then lastly we're trying to cast the value that is returned by this key we're trying to cast that value as a string now if it's not actually a string this cast may return nil so it's best if we check if Product ID is actually containing an ID or if it's nil so let's say if let ID equals product ID and then only if it contains an actual product ID do we do any of this stuff down here okay so let's add the product to cart if there is actually a product ID so we use molten dot shared instance oh Xcode is not detecting this keyword right here or this class and the reason is we haven't imported molten right we had to do that up here in the master view controller not Swift as well so let's scroll back down here now you can see that xqo recognizes it now sharedinstance dot cart oops cart dot insert item with ID that's this method right here so it accepts an item ID which is our Product ID the quantity and modifiers in case that they have product variations and then we can add those sorts of variations as a dictionary into this part but our product is simple we're gonna pass a nil and then finally there's a success callback if it's successfully added to the cart or there's a failure callback okay so for the item ID we're going to just fill an ID like that quantity we're gonna put one modifiers we're going to put nil and then let's expand the success callback by doubleclicking it and it's going to create a code block in there for us there's one parameter in this callback handler and that's this dictionary here so I'm just gonna call it response dictionary and then we're gonna put some code in here and actually if it's successfully added to the cart we're going to display a message to the user so I'm gonna put this comment in here and if it failed let's double click that to expand it there's two parameters in this response one is the response dictionary and another we're just going to call error so in here in this callback say couldn't add product to cart so let's just print here something went wrong and I'm gonna put a breakpoint there in case it ever gets there so it will stop the execution and then we can inspect the response and see what went wrong so in terms of displaying the message to a user we're going to use the UI alert controller so that's right let alert equals UI alert controller we're gonna create a new instance of this object and we're going to use this initializer right here so we're going to pass in the title as added to cart the message is let's just say added item to cart and the preferred style we have UI alert controller style dot we're gonna choose alert and this is going to display a modal message okay so we created an alert at this point it's just going to be a modal little dialog that pops up with no way for the user to dismiss it by default it doesn't come with an OK button so that's what we're gonna have to add so let's say alert add action so this is SEPs a UI alert action and I'm gonna create an instance of that in here and we're going to use the initializer this one right here so the title of this one is just going to be okay and the style is going to be UI alert action style dot we're gonna use default for just a standard modal button if we used something like cancel or destructive it's gonna turn it red by default so we're gonna use default and for the handler this is a place for us to specify some code if we want to do something in response to the user tapping the OK button but we're not going to do anything so we're gonna put nil in there okay so now our modal alert actually has an OK button to dismiss it finally we have to present that modal alert to the user so we're gonna say selfthought present viewcontroller and here we're gonna pass in the viewcontroller to present and that's going to be our alert and I made it let's say true and for the completion again we can specify some code in response to the alert being presented we're gonna put a nil here okay so let's run it and see what we have I'm gonna select iPad pro here and here's our Add to Cart button so when I tap this this code right here is going to run it's going to grab the product ID of the product it's going to call insert item with ID and then if it's successful we're going to get the alert message all right added to cart so here's the ok button that we added this is the default style and when we press ok that's it if we go back to the console for a second again you can see what API call is being made to the Moulton backend so the one where we called products this grabs all of the products from our store and then when I click the Add to Cart button this one is being made to the carts endpoint so that's just a good thing to know if you're digging into the documentation or you're trying to debug something that's happening with your app you know which endpoints the app is hitting in the next lesson I'm going to show you how to perform a check out using the Moulton API thanks for watching I hope you guys enjoyed it and if you did please share and subscribe I really appreciate it and it would help me out greatly so thank you again and I'll see you guys tomorrow bye for now you