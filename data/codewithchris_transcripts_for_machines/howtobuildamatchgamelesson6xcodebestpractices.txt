hello in this lesson I'm gonna teach you how to become a better I oh s coder by the end of this video you'll have learned the most widely accepted iOS best practices you'll learn how to properly declare and name your classes variables and methods you're gonna learn how to organize your Xcode project on your files you're also going to learn how to write effective comments and keep your code neat and tidy I'm pumped to show you guys this stuff and I can't wait to get started let's do it let's start with naming conventions what is a naming convention very simply it's an agreedupon format to named variables properties classes and all that sort of stuff by following a naming convention your code becomes much easier to read and to understand if you're working within a team it's even more important to establish a naming convention that everyone will follow luckily there are some standard conventions that everyone can agree upon these have been set forth by Apple and can be seen when you start a brand new Xcode project so let's go ahead and take a look at some of them now so here we have a brand new Xcode project and I'm looking at the view controller that Swift file that comes by default with a single view application project now this is a great place to illustrate some of the naming conventions which Apple has established which are also commonly accepted by iOS developers the first thing I'll mention is that for some of the things there is absolutely no wiggle room so for example the Swift keywords this import this class override all of these keywords in pink you cannot simply you know decide you want to use a capital F you can see that it just completely breaks things Xcode won't recognize that as the Swift keyword that you want to use it is case sensitive and thankfully all of these Swift keywords are lowercase so it's easy to remember the second thing that absolutely has no wiggle room are class names and framework names so for example UIKit you can't decide to use a lowercase U or a lowercase I and this uiviewcontroller class is also case sensitive so you cannot use a lowercase V that isn't going to recognize that as the uiviewcontroller class inside UIKit now what you do have control over and this is where the naming conventions come in our variable names property names these function names and also class names when you create your own custom classes so let's start with class names take this view controller class for example you can see that it starts with a capital and other words also start with a capital so that's the general rule with class names each word in your class name starts with a capital letter now contrast that with function and method names as you can see here in this viewdidload method it starts with a lowercase so the general rule for methods and functions are each word in your method name starts with a capital letter except for the first word so you can see this in action here again this is did receive memory warning that's four words but the first word starts with a lowercase so if you follow this naming convention one of the immediate benefits you get is that it's very easy to distinguish between a class and a method or a function because a class name will start with a capital letter whereas the function method names start with a lowercase okay so now let's jump to the app delegate Swift file you can see here in the class name again it's app delegate two words they both start with a capital letter but what I want to draw your attention to is this property down here it begins with a lowercase letter now the general rule with these properties with variables you might declare or constants and also parameters that are passed into your functions and methods they all follow the same rule we just discussed with methods and functions and that rule is each word in the name begins with a capital letter except for the very first word this property called window is only one word so it starts with a lowercase you can see that this function here is application starts with a lowercase this one application will resign active each word is capitalized the first letter except for the first word here and even these parameters in here follow the same rule so to summarize each word in your class name begins with a capital letter however for your properties variables constants functions methods and parameters in your functions and methods each word in those names start with a capital letter except for the very first word that word is in all lowercase that was the easy stuff but there's another aspect of naming that is a bit more subtle take for example you have a news app and there's a method that will be used to refresh the data in the view well how do you name it do you call it refresh view get new data retrieve updated data because the user pulled to refresh or how about new data is coming to town that's the one isn't it do you see what I'm saying it's a little harder to establish rules around this especially if you're working on a team but here are some simple tips to follow number one you can establish a loose structure for methods and variable naming for example with methods you can follow a format where the first word is a verb and the second word is a noun so something like get data or update data or delete person number two you can use an agreedupon set of verbs there are so many different words that you can use that mean the same thing for example if you're going to be retrieving some new data just to use the same example you can use get retrieve fetch you can use refresh so if you can stay consistent throughout your entire project and whenever you need to create a method that needs to fetch something use the verb fetch instead of using fetch for this method and then using get for another method it's just a lot neater and tidier if you're using the same verb throughout your project and number three you can agree to stay within a certain word limit for example you can tell your team know to create one word methods because it's not descriptive enough or you can say that a method name shouldn't be over six words or something like that and this is a little harder to control because you know some methods are more obscure than others and so you might need to be a little more descriptive but I think you can loosely define lower and upper limits for the number of words to use in method names now we're going to talk about file organization within an Xcode project first let's talk about where we declare new classes and I always get this question you might have noticed in Lesson four of this module when I created the new custom classes I added a new file to the project this is the match app which we have been working on and when I created the card model class I created it in this file here here we have the card class as well and then here we have the card collection view class or subclass I always get asked this and that question is can I create my new classes in the same Swift file and the answer is yes but you really wouldn't want to do that the best practice is to separate it out into these different files like I have and let me demonstrate why for example so if I let's say I just took this code here this class model 8 and I cut the code out and let's say we didn't have this card model that Swift and inside instead I went all the way down to the end of the viewcontroller class and then I pasted my new card model class here while this is completely fine you can see why this is really confusing because for example if someone else were to join your development team they wouldn't know that the card model class is in side view controller dot Swift because first of all this file is named view controller dot Swift and the second of all they would have to scroll all the way down and figure out and hopefully see that the card model class is declared right here or they can do I guess they can do a project wide search for class model like this and they would also find it in viewcontroller.swift but this is all very unnecessary right the best practice is to actually create new files per class that you need to declare the second confusion is whether you need to when you to create a new file for your class whether you need to choose Swift file or cocoa touch class and I can give you a simple rule to follow for that so if your plan is to create a subclass of an existing class from some framework like uikit then I would choose cocoa touch class and you get a dialog like this where you can specify the subclass the reason for this is because sometimes when you do it this way it comes with some boilerplate or default code that is associated with subclasses of whatever class you're trying to subclass however if you're creating a brand new class that isn't really a subclass of anything else then you would choose a swift file and you would just declare your class in there and by default when you create these new files they always add it to the end of the list here so what I like to do and you probably see me do this is just rearrange the files here by dragging them like this now when you start to get a lot of classes and a lot of files in this navigator right here in your project what you can also do is you can start creating something called a group so you can choose new group like that and you can name this anything you want you might organize it like say view controllers that would be plural and then you would put all your view controllers in there and then you might add another group for models or something like that and move all your models in there now when it comes to what sorts of groups you should have this will really boil down to personal preference how the organization makes sense to you as a developer and how you like to think of it if you like to think in terms of the MVC pattern you might create groups like this some people prefer to have groups that are grouped based on the screens in the app and this is also fine but what's really important is that if you're working on a team you guys should agree on this before you guys start creating groups and files and just putting things everywhere there needs to be some sort of agreement about how to organize the project and then you stay consistent for the duration of that project now groups are also a handy way to organize assets that you have to add to your project here we have an asset library which is great for managing image assets but if you have sound assets if you have additional data files that you need to add or anything like that you can create a group called sounds maybe and then add all your sound files into that group also don't forget that you can actually drag your group and organize them as well but be careful about putting groups within groups if you if you are not intending to do that if your project is really massive you you might end up having groups inside of groups just to have multiple layers of organization if you really have that many files okay so let me get rid of these sample groups that I have here oh and actually there was one last thing I didn't show you which is when you create your groups you can actually just go ahead and drag your files into the groups and organize them like that the next thing I want to talk about is commenting whitespace and indentation and basically writing code that is easy to read and easy to follow now I've talked about the importance of writing comments before and that is that it's not just for yourself I mean it is because if you come back to your project several months later you might not remember why you wrote that piece of code so it's for yourself but it's also even more important when you're working together on a team because other people are going to be looking at your code and if it's not properly documented then they're going to have to spend a lot of time or extra time trying to figure out what your code does and why it's there so this leads me to the second point about comments and that is that when you write comments try as much as possible to explain why that line of code or that block of code is there and not just what it does because it's very easy for example for me to write here to say loop that goes eight times or nine times right it's very easy for me to write that but that comment really is not helpful because anyone who can read Swift code can immediately tell that that is exactly what that is and so your comment really doesn't provide any value rather than stating the obvious you want to write comments that explain your thought process that explains the logic behind that block of code and what it's set out to accomplish so that it's almost like if your teammate is reading the comments to your code it's almost like you're sitting beside them and you are telling them as they're looking through the code what everything does so that's how you want to think about your comments another tip and sometimes you'll see me doing this is that sometimes you just want to flesh out the idea that you have for that method you want to flesh out the entire method you don't want to get hung up or caught up on the details so you might add a todo and actually I think we have one down here alright so we have a todo here to randomize the array I know I have to do it I just didn't want to do the implementation there because I don't want to lose my higher level train of thought then you can just write a todo here exactly in this format and actually if you go into here this sort of drop down for your class you're going to see your two DS like this so whenever you go into a class and you pull this guy down you can see any to do is that you write at a glance the next thing I want to talk about is whitespace and that is the spaces that are in between your lines of code now you can see there really isn't any defined rules per se for example some people will not include a line break below a for loop like that all right and actually let me just show you the worst the worst actual case like is if you have no white space like this let me show you how hard it is to read right it just looks like a column of code and it's really hard to read and white space really isn't going to make your code any slower or anything like that and it improves readability massively and so you can see how much easier that is to read now like I said there are no hard and fast rules to how white space is used but generally I like to leave a line break after an opening bracket to a method or a for loop or an if statement and then what I like to do from there is organize my code into little chunks of code that are related so and then I'll put a comment above each one so for example this line of code is for generating a random number so I'll put a comment there and I'll put a white space or line break beneath it and for these two lines of code I don't do that and that's because to me they are related to creating the card object and then setting its properties I would put those lines together and put a comment above it to say something like I'm creating the card and setting the appropriate properties or something like that we could probably add another comment here saying something like add the created card or keep track of the card in the array or something like that so white space is very important when it comes to how readable your code is another aspect of readability is indentation as you can see by default Xcode kind of handles this for you but this is the start of the class definition and so what's inside you know in between this opening curly bracket and above this closing curly bracket for the class everything is indented and then when we have a function here that starts another curly bracket with its ending one right here everything inside of that is oh sorry that's not the ending one this is the ending bracket for the function everything inside of that is indented and then for this for loop we have another opening one and another closing one and all of the code inside that is indented in the same sort of distance from the lefthand side and this makes it very easy to see that all of this code is inside of this for loop while all of this code here is inside of this function so it's very important that your code isn't indented properly because as you can see if I did something like this you know it just becomes you don't get that sort of immediate comprehension that you get when everything is lined up well like it's hard to see that this line of code is inside of this for loop and what's also kind of infuriating actually when I see it is that the closing brackets aren't indented properly with the statement that opens the bracket so for example if this bracket was right here I might confuse this closing bracket with the ending of this function right whereas it's not so it's very important that things are indented properly it actually adds a lot to being able to understand the code and seeing the structure of how the code is laid out now fortunately there is a way to fix indentation really quickly across your entire project so let me go back and show you if I had things just indented improperly like that let's say I could select all of my code by pressing command 8 and then I can go up to editor and I can go up to structure Riaan dent like that and that's basically going to fix everything and indent everything properly but instead of relying on that menu command just get into the habit of indenting while you're writing your code and I think Xcode already helps you a lot with that so for example if I did something like if true you see you can see that Xcode automatically put my cursor in this indented position and then when I press ENTER I again start on this indentation level so Xcode helps a lot with that but if somehow you're intending gets messed up and you're closing brackets get misaligned you can use that editor command to reinvent everything but make sure you remember to select all of the code first okay and the last thing I want to say is that all of the things that we talked about in this video should be outlined in a style guide now what is a style guide it's basically for larger teams to have one document that states how things should be organized how things should be named so that the project is consistent if you're on a small team or you're a oneman show it doesn't matter as much as long as you stay consistent throughout your whole project but if you're working on a giant team it's important to establish a style guide and a lot of what we talked about actually are commonly accepted practices anyways the things where there may be a little bit of a gray area is the format of the names of your methods and functions and variables and properties the verbs that you're going to use for those methods and functions and subtle stuff like that but in terms of things like white space indentation commenting capitalization of class names and method names and stuff like that that is all pretty standard across iOS developers how is that now you know how to write tidy code and keep your Xcode project organized so that other people can follow it now I want to turn it over to you did I miss any best kisses let me know by leaving a comment below or if you simply just enjoyed this video please let me know by leaving a comment below as well in the next video I'm gonna show you how to troubleshoot and fix your code when your app is crashing Xcode actually gives you a lot of tools to figure this stuff out and I'll show you how to use them in the next lesson so if you enjoyed this video and you want to see more please consider subscribing to my channel by hitting that red subscribe button below if you don't want to miss the next video when it comes out hit that Bell icon as well thanks for watching i'll see you guys in the next lesson