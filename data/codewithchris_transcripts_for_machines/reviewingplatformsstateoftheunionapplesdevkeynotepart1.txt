hey everyone what's up can you all hear me and see me so first of all um is the background music too loud this is uh one of the first few times that i've streamed so i want to make sure that my voice is coming up over the background music yeah okay great so i want to apologize first of all because i don't have a second screen so as i'm gonna be reviewing these notes uh i might not see your comments i might not see any like super chats or any memberships or anything like that so i apologize if i miss your message but i think i will be uh taking a break and then going through the comments and we'll do it like that all right thanks flo for mentioning that i'll just bump it down a notch okay so first of all last night i went through the platforms state of the union broadcast and if you don't know what this is let's talk about that so you know wwdc is the big event that everyone knows about because they're announcing features of the os's that everyone would be excited about it's more for the general public and they keep sort of the developer stuff lowkey there were some cool announcements but they didn't really dive very deep into it so there is another keynote or broadcast if you will called the platforms state of the union so this is where it's more developer oriented and they talk about as a developer how you can start implementing some of the cool features uh that they're going to release in the next os that they talked about in wwdc so you can watch that either on the apple website or this developer app if you have a mac this app is really cool because not only can you download uh the sessions to watch and any broadcasts to watch offline but you can also bookmark so you can see here i bookmarked a ton of wwdc sessions um all of these things seem so interesting uh there there's actually a lot more sessions than these and um i highly recommend here if you just take a look right there's a ton of stuff and all of this is happening like it's available right now all of these for tuesday at least so you can see oh some of them are only 10 minutes 15 minutes i i sort of assumed that they would all be an hour but i mean if they're only 20 minutes to 10 minutes i might be able to get through these but i i basically went through this whole list and bookmarked the ones i was interested in the cool thing also is that you can look at these sessions for the previous years as well and i think they have sessions going back all the way to 20 uh 2017 if i believe maybe even later so you can always learn um different apis as they become relevant to what you're working on uh and who better to get it from aside from you know directly from the apple engineers i will say that some of the information is outdated if you are looking at really old wwdc sessions um yeah so today um i'll be going through my notes for the platform state of the union and i'll also probably bring up relevant screenshots i'm probably not going to play any audio from this because i don't want you know this this video to get copyright striked or something like that so i will pull up relevant slides as i go through these notes but as you can see there's tons of cool stuff that was announced in this broadcast it was about an hour and 15 minutes so if you do have the time you know you can hop in and watch it but i only have an hour unfortunately i have to i have to run after that but i will try to get through this i won't go through every single line i'll summarize it for you okay so let's get started let me just quickly check the chat and you know this is my first time using the streaming software i don't know if you see like chat messages coming up here on the screen on the right hand side do you guys see any because this is supposed to be a chat box but i didn't really know how to hook it up to the live uh the chat yeah are there messages oh cool that's really cool so i guess in the replay when i watch this we'll see all the messages come up here that's really really cool and actually you know i was so um confused about streaming and it seemed like there was all this setup and things to do but actually and now just looking into this it's it's pretty straightforward and i had a lot of fun yesterday i didn't do any voice we were just watching wwdc and we're just interacting through chat i had such a blast with you guys and if some of you were there yesterday thank you for supporting i'm going to be trying to stream every day this week i have a schedule at cwc.to livestream and i'm thinking of what i'm going to do after i do this review is i'm going to edit the recording sort of slice out all these parts where i'm not actually talking about the platform state of the union and i'll do like a sort of um condensed video that people can watch but now that you guys are here live we get to interact with us looking for mark sorry about that that was kind of loud okay all right so let's get started um so the first thing that they announced in this presentation was xcode cloud now this is a a really big thing for them but i think for developers at least developers who've worked in companies and worked on teams they've always had a solution for doing this and let me just bring up a relevant slide to sort of show what this is so they sort of talk about this software development process as you know you're coding it and then you're writing unit tests or you know automated essentially automated ways to test your code because imagine if you're making changes uh it'd be and you had a huge app it'd really be hard to manually test every single function and feature and use case so what happens with larger projects is people write automated tests that can perform things like click here check this assert that this is true when after this happens double check that people can create accounts so you have all these tests that you can automatically run every time you you know make a code change so that's what this one's about integrating is about uh sort of the team collaboration process when you do coding so i think for a lot of us when we're coding solo we know exactly where things are and what where you know where the functions are where the classes are and everything but in a bigger environment it has to be a lot more organized because people can't just dumb code into the project it's going to get out of hand really quickly so this is really talking about that review process where there are certain people who are in charge of reviewing other people's code before they allow it into the code base and there's a process called a pull request when working with source control that that happens so we'll get to that in a quick second and then deliver is you know after you you create a build that you want to send out to your testers to your qa team or whatnot um this is a step that automates that so you don't have to manually do it and then refine is the step of collecting user feedback collecting feedback from qa testers and all of that so that you can then make those changes into the code so that's sort of the cycle and uh if if you've seen in the past i talked about and even in the descriptions of all of my youtube videos i often talk about a tool called bitrise so that's what this tool does uh it connects to your github account or other repos whatever you're using and every time you commit a code change in there it pulls the code it does the building and runs any test cases and that workflow is very customizable so you can put in any scripts and steps here um so i i haven't talked with them yet since they announced xcode cloud but essentially that's sort of what xcode cloud is trying to replace now the difference i think is that bitrise works for multiple platforms so a lot of companies when they build an app they have like an android version they have maybe a web platform an ios version and whatnot so tools like bitrise and and other ci and cd tools they work for multiple platforms whereas xcode cloud i think they're just targeting ios but when i looked at their demo the really cool thing was that it works so well inside xcode um and with ios and it looks so easy to use at least from a demo perspective from what they showed so i i sort of predict that if you're only working with ios you might just end up using this and this is not i'll just say this upfront they're not intending this to be a free service i don't know how much it'll cost but at the end of the presentation um for the xcode cloud section they mentioned that fees will be announced in the fall as a solo developer this might not be relevant or you might not want to use it but i think if you have the intention to go into the industry it is it is a good thing to know because all the companies any larger projects they all have processes like this the other thing that i see is that um these companies like bitrise they do this for a living right this is their bread and butter so i kind of think that they probably have the more mature product um however apple has a lot of money and they're a really large company so over time you know over the years i feel like they might take over the ios space but if you're a company who had products on multiple platforms i don't think you would use xcode cloud and another tool um okay cool so that's what this is in in a summary uh let me see if there's any interesting points i can point out rather than go through line by line so um this part i thought was really cool because so traditionally um you can you know you're coding your app in xcode and then you hit command b or command r and you run your app and you build it now some large apps especially when you have a lot of like cocoapods and thirdparty libraries like firebase they can take quite a long time to build and even my simple demos that have just the firebase pod could take up to like four minutes to build and i find myself just drumming my fingers as i'm waiting for it to build because i'm recording right and then i have to ask my editor to cut out those four minutes now this is kind of cool because um they showed this slide where you you build it in the cloud so you can continue doing what you're doing and uh it just compiles not on your machine so it doesn't take up your resources but it does it on there on their servers yeah so these are the four steps that they talked about how you know how this build step works so first of all you have to select the product and the product is uh if you have an xcode project it's basically the output like uh the app and you confirm the workflow so you can have custom workflows that do different things i think the default workflow is just um build it whenever you commit a new change and then you grant access to the source code repo where you're hosting your code and then let's see where we are here yeah securely connect to the hosted repo and the cool thing as well in addition to just building the project on the cloud is that it will register your app in app store connect um and then because typically um if if you're used to like if you've submitted apps before you'll know that you have to jump from place to place app store connect is this portal where you sort of manage your uh app store metadata and where you send your builds to to send out to testers via test flight and things like that so this will automatically send it there as well and it'll help you register your app in app store connect so that used to be a process where you'd have to get out of xcode and go on the browser and and do it yourself um you know their mantra with xcode cloud was to to bring in as many of those processes into xcode so you don't have to leave the xcode it sort of sounds uh sort of sounds evil but um it i i think it does make things a lot easier i'm going here this was really cool so the testing now so here's the showing like it's sending the build and then you have a screen that you can visit later and see how those build uh those builds completed that they failed that they like build properly okay and then he's talking about he's talking about testing so um you know testing with your app if you've if you haven't done it on a larger scale you might just launch it on your app and then you might just you know scroll through it and test it a little bit and then ask if your brother or sister has a device or your mom can can you borrow their ipad and launch it on that and test it by hand but you you can imagine with a larger app that you're trying to reach a huge audience that sort of testing just isn't going to scale properly so with xcode cloud one cool thing is that you can run your test plan which is essentially just the basket of test cases or unit tests that we talked about earlier um you can run multiple test plans on multiple devices simulators multiple platforms and multiple old s's all simultaneously so you just select uh you know what device you want to test it on what platform what os and you can even run it on the beta os's as well without having to download it on your own device and install the beta on your own device to test it so that's really cool and then what you get are all these results and it takes screenshots along the way so you can sort of see if anything's wrong visually and then immediately sort of just just know i guess all right so i thought this was really cool because it's really a large scale way for you to test your app on multiple devices and platforms and screen sizes and you know the whole thing and integrate so this thing used to be um it depends on which source code repo you use but for example let me just quickly show you so for example we have maybe maybe this one right here yeah because i think there's uh there's another branch is there no i thought that one had another branch uh this one this one definitely has another branch okay cool so uh typically what you would do is you would branch off like if you're trying to do a new feature right you want well you would create a branch of your main branch so essentially a copy you would work on your feature and then when you're ready to integrate it back into sort of the main code base or the main branch you would do what's called a pull request so you go new pull request and you choose the branch that you're working on maybe you're working on this one pagination uh and you're you're like okay it's ready to go so i'm going to make a request to integrate this into the the main code base and then you create your pull request it tells you shows you sort of exactly what's changed and then you know there's that person that's supposed to review your code and make sure that it's up to snuff before allowing it into the main branch so this process used to sort of take place where you are hosting your code so here you know on github you could make comments and stuff like that i'm not going to actually create this pull request but then um the person reviewing your code can make comments here and you can have a dialogue here and then you can make changes and all that so they've pulled this process into xcode so that's what they show here yeah so you see you can see a list of the pull requests here you can actually comment and you can uh yeah review changes and all that so that that's really cool definitely saves a lot of time and then delivery no more need to manage your certificates and profiles and keep them up to date on your mac this is huge because before there used to be a provisioning portal where you would register your machine uh and create provisioning profiles for your apps and all this does is it's basically for security for code signing so make sure that no unauthorized parties you know submit your app pretending to be you or you know make changes pretending to be you because you've securely codesigned that that bundle so this used to be um in the early days quite a involved process but apparently with xcode cloud there's no no more need to to manage all of that so that's great uh we're going to do comments i'm going to check comments right after i talk about refine so we're fine um yeah basically the process is you you upload your app to app store connect where you can then send it off to beta testers through test flight and then they get a notification or they get an email to download your test app on their device so they can test it and then they can if they experience a crash or you know a bug they can send you feedback directly from that test flight app and then that sort of goes into your app store connect and your test flight so they've just brought that into xcode so you don't even have to so you don't even have to jump anywhere else so yeah this is just showing another person uh trying out someone's app through test flight and test flight now is available on the mac i didn't even know it wasn't before but you can send some feedback so you can see here that they're going to send this feedback to the developer and the developer now inside xcode can see you know that test flight feedback and the really cool thing that they showed here was that it um it carries the stack trace with them for that crash or that bug so typically when an app crashes if someone tells you oh i did this and this and this and the app crashed you have to be able to reproduce that on your end otherwise it's really hard to solve because you don't you have no idea what happened if you can't reliably reproduce that issue yeah it's tough so what they're saying here is that when you tap on this feedback it brings that crash report with the trace from that person's machine and tells you all the details about that user that machine what os they were using what device they were using all that information and you can see here that there's sort of a log of what that person was doing uh what methods were being called to the point where it crashes and then you can go and investigate it apparently they showed this demo where you double click that crash and it zooms exactly to the line of code where that happened so you know in theory that sounds really cool okay so let's pause for comments that was sort of the big announcement okay actually there's two more announcements to uh to talk about with excel cloud so they talk about it's super secure and everything it's private uh no one sees your code and then also there's a free limited beta so actually this i should mention if you have an apple developer account you can go and sign up for the xcode cloud beta and they'll they'll let you use it for free during this beta period however when you sign up for the beta you join a wait list so i've done this already i recommend that you do it anyways even if you don't think you'll use it who knows but they're only allowing a limited number of people to to try it out right now and then pricing and availability in the fall and because i imagine it's a new service they have to have tons of servers to to host this sort of stuff and to run code so they really need to make sure it's smooth before releasing it to the masses okay so let's take a break and look at comments before we talk about the swift stuff you know i am going to get a second monitor so i can actually keep an eye on the chat on the left hand side but right now hey zach yeah that's right yeah test flight for mac is great because i'm planning to build a cwc app where you can view our content through a mac app as well so that's really good and i think i saw you yesterday right zach i'm on the wwdc stream oh and mathis mathenating too uh nice to see you again yes platform state of the union is released you can you can watch the replay on through the developer app which is what i'm using here or you can go to developer.apple.com and there should be a big button to view all the wwdc stuff uh let's see alessandro yeah um mvvm architecture definitely covered in our course uh let's see uh gun gun topali sorry if i'm mispronouncing your name but uh i think that in terms of the versions of os you're gonna have to be forced to upgrade as they release new versions of xcode and and things like that uh even if you want to watch wwdc i think they're just forcing you to like upgrade your browser upgrade your os and so there's only so long you can hang on for before you're forced to upgrade uh yeah i'm using streamlabs obs oh let's see oh great awesome i think i'm caught up okay cool thanks everyone let's continue so swift concurrency there's this new pattern a sink awaiting now this is actually really really huge because we all write a synchronous code whether we know it or not i paused because i i'm repeating the exact same words as as she said and it's true it's true because when you write an app it's usually not super selfcontained right um usually you're downloading an image from the net you're downloading a feed or something like that um and that happens asynchronously because imagine if your app just pauses and the user can't use the app while it goes through the network to fetch an image or to fetch a feed or something like that that would be really frustrating for the user so this stuff happens asynchronously in the background and just to dial it back in case you don't know so uh synchronous is the opposite of asynchronous and synchronous just means sort of uh imagine sequential events so it would be exactly like what i just described your app will say okay i'm going to launch the startup screen and then i'm going to go fetch an image and you can't do anything i'm not going to do anything until the data comes back okay the data has come back i'm displaying the image now i can do whatever it is so you as you can imagine network might be slow congested they might not have internet connection so you might be stuck forever so anyways that synchronous asynchronous is um it spins off another like background thread another you know threat of execution so like think of it as a little cpu worker that it tells hey go and fetch that data while i still you know man the app and and uh make sure that it's usable so that little worker is going to go asynchronously go fetch that data that feed that image whatever and maybe and then it comes back with the data and it tells i don't know the boss the main thread that uh hey here's the data okay then the main thread says okay thank you for the data now i'm gonna do something with it now i can display the image but there was no wait time right it was doing something else while that little asynchronous worker went to to fetch something asynchronously now the reason this is a big deal is um because the code to do this used to be kind of convoluted and the scenario we just talked about is a very basic scenario too um so like concurrency can the problem can get much larger especially if you have apps that sort of need to interact in real time um what would be an example i don't know some like like a game right like a rts like league league of legends or whatever like things are happening in real time so i can imagine that the code for that ends up looking really confusing and really hard to understand now just to show you what that simple scenario would be i'm just going to launch xcode and do a quick demo because i actually don't really uh understand how they like i understand what they're trying to solve but i'm going to show you the sort of the old way of doing this and then let's take a look at what doing the new way would look like and i'm just guessing because i don't have any xcode betas installed or anything like that okay so i'm just going to create a sample xcode project i can actually feel my computer running a lot slower now that i'm streaming wow there's like a huge lag i think it's time for me to get a new computer by the way this machine this machine let me let me just pull this up show you guys what i'm using here oh sorry that's xcode but hide my serial number but anyways you can see that it's mid2015 i do have a ton of ram 32 gigs of ram so that's pretty cool but um yeah mid2015 so if i'm not streaming things are fine things are smooth i have no complaints but if i'm trying to demo something here okay so what i'm gonna do first is let's just assume that you have like a view model or something like that some some other class that you're gonna call to fetch some code so this will call this view model hey now it's no it's not bad oops sorry about that coding live okay so i'm going to create a function called get stuff okay so this is gonna pretend to go fetch you know fetch in the network you know send requests to get some network resource now if you're used to writing functions with return types you might do something like this and you know you want to get let's say your data is an array of strings or something and and you're used to you know using this return value so you know you you go fetch the resource and you return uh you return that and then in here you know let's just let's just create another function here say on launch i don't know this is not important but so what you would do is i just want to demonstrate the method so you would call get stuff and you would sort of expect that it'd go and fetch the network resource and then return this uh the data to you like this but this is sort of assuming that synchronous process right because um if this sends a request to the network to grab something it's not going to be able to return and give this to you right away and so essentially um it's just going to be waiting so the way to do this asynchronously is um you know let's say you wanted to assign the um result strings from that method like this right you want to go get stuff you want to get the data back and then you want to like print it or something like that you want to do something with it do something with the result now the way to do this asynchronously is you need to specify a parameter in this method so that it accepts a a function that this method can run after it gets the resources back and that's what this syntax looks like let me show you so you wouldn't have a return value anymore it would look like okay first of all you'd have a parameter name and you've probably seen these different parameters called completion and you've basically been using this without even realizing it but you know you open up a closure and that completion closure gets run at a certain point when the method is done doing its thing so now essentially you're just defining your own completion closure on your own custom function so here's what this looks like um so yeah it looked like this and this would allow the person calling this method to pass in a function that you can run by calling completion so you know and you just call it like that and then from here you know instead of expecting to get a result back like this now when you call get stuff you can see that there's a completion parameter and if you double tap this if you double click it it's going to open up a closure and here you know you would specify this however with the the closure that we've specified we haven't passed back the data so in fact we we're not getting the data back here so for you to specify that data that comes back through that completion you would just add a parameter like that and then in here you could pass that data so i don't really have any data so let's say like data one data two this is just some hardcoded data that i'm passing back uh to this well essentially i'm calling this so in here you would have let's say data in and then you would print the data so that this data gets into here and then you're doing something with that here so as you can see what happens this happens asynchronously right you call get stuff and then it sorry i was just checking the time but you call get stuff and then it calls this method it sends off the request to do something and you're also passing through this is the code that you want to run after the stuff has been retrieved and so it's going to retrieve the stuff and then call that function that got passed in so that's how it used to work and i think once you get used to it it's not that hard to understand but then for someone who's just starting with swift it's kind of hard to wrap your head around so the way that they said this works now is let me see if i can show you that example um yeah so they show an even uh crazier example but you can see it's sort of what we did right completion and then they have this this method that you're supposed to pass in and then they sort of show you what it would look like you know they show this animation where it's transforming into just this now i haven't really looked at the code so i don't know what it would change to but maybe we'll do a demo when i uh after i play around with this if i can get the betas and stuff like that so i think you would essentially it would look like you you wouldn't have this anymore and it would just be like that does that look like what they're doing here async and then you have a return value and then whenever someone calls it they would just use the await await right so i wouldn't even do this anymore i would just i would just return yeah i would just return this array like this obviously it's not recognizing this because i don't have any of the the beta stuff but if we go back here it would be like let result strings equal await and then you would be able to print yeah so you see how closely this code looks like to the synchronous code that we used to be writing like um it's much more natural right to read it this way uh see you're you're essentially marking that this is an asynchronous function it does something in the background and then you're just returning the data like normal and then here you're just calling the method you're getting the data back as a return value and so you're not like you know your code isn't jumping around or at least your understanding of the code you don't have to be navigating around trying to understand it this is sort of like top down you can read the code so that's what this sync await pattern does um a couple of other things for concurrency is structured currency uh concurrency so you could essentially send off multiple asynchronous requests it's just a way of structuring your asynchronous request in a way that um sort of makes sense to you so so it looks like that but you put the async up here and essentially these two lines of code will fire simultaneously and then you'll be fetching them asynchronously both i think i think and then they have this new data type called actors so instead of you know when you declare a class like class stage manager instead you can do you can change this class to an actor stage manager and what an actor does is it helps to prevent multiple multiple parties from accessing uh that thing at once so this is called mutual exclusive access and you can imagine concurrency the nature of it is that you know you have things happening simultaneously all over the place so sometimes there's a resource that cannot be accessed by multiple parties at once what if two people try to change it like at the same time you're gonna run into these scenarios called race conditions where um you didn't expect maybe like party b to access it before party a but depending on how fast the code is running depending on all these environmental factors uh you know party party a or party b might come first or second like that always changes and so concurrency concurrent code is really hard to debug because you can't count on it being the same every single time you run it there's so many factors that would affect that so an actor is talking about essentially you're defining a resource that only lets one party in at once to work with it and then they have to sort of release it uh before it becomes available for the next party to use so that's that's what that is and there's this main actor keyword you can put on a function of this yeah so in the past um we had to use dispatch queue.main.async to essentially run any ui code or anything we wanted to run on the main thread uh we had to use this block to run that code essentially to give it to the main thread to run so you know you'd have to do something like this um and then put whatever code you wanted here and essentially it passes it to the main thread to run whenever it's free to run it because you don't want to run any ui type code like refreshing the ui updating ui or anything that causes the ui to update from a background thread because the main thread is the the person who's a person but you know what i mean who is responsible for the ui so now we don't have to do that there are there is a way for you to specify that a function is always run on the main thread it will never be run in the background thread so it automatically knows always to um wait for the main thread to be ready to to run that um so i think that's a that's a cool improvement and saves us a ton of uh ton of work okay so before we jump into swift ui i'm just checking the time i might have to yeah i might have to stream this again tomorrow you know i do have a stream setup already for the same time tomorrow and we'll probably go through the other half of this on stream tomorrow because i didn't realize that time would fly by having so much fun so i think we have time probably to go through the swift section the swift ui section um and then we'll have to call it a day because i have to run unfortunately um and then i'll also you know spend a few minutes on questions and then we'll come again tomorrow if if you're free but i'll be here so swift ui i want to show you some of the cool stuff they basically released a whole bunch of new modifiers that make it a lot easier to do some of the i think i jumped too much sorry ah right before him he's talking about swift playgrounds okay all right so this is this is where we're at so you guys know the swift ui list right that's this guy right here and it's an easy way for you to show a list of items so they've added a couple of new modifiers one of them is called swipe actions and it allows you easily to specify you know when you swipe a row for something to happen so in this case they have a button when you swipe it it it favorites and it adds a heart there so that's a cool thing another one is refreshable this refreshable modifier essentially gives you pull to refresh just with a single modifier so that's that's really cool uh they also have this ability here to limit a specific modifier depending on the platform maybe even the os version it should be it should be os version as well um so you can selectively only have these modifiers for specific platforms and i think they needed to do this um searchable is another modifier that instantly adds a search field at the top so that that's pretty cool you still have to write the logic for how the search happens right but you don't have to build any of this ui yourself you just add this searchable modifier to a list and you instantly get a text field up there and then as you can see here you can also specify search suggestions let me see if i can yeah so there these suggestions uh essentially they're listing these search suggestions based off of like a field on your view model but again you're going to have to come up with these suggestions as long as you have that data somewhere in a property or or somewhere that can be accessed you can specify them here and just with a couple of lines of code you can get sort of a filtering or search functionality there so that's really cool for the list there's also a bunch of accessibility modifiers now so there is one which is called the accessibility rotor and i'll be honest i haven't really explored accessibility myself but this is a huge huge thing as and i love the way apple is going with being more inclusive because you know my whole thing with code with chris is being inclusive and and being a very friendly environment to learn coding and you know no judgements and no putting people down or anything like that um so i i'm really i really feel positive about apple being very inclusive at least um at least to the public i don't know what's happening behind the scenes but um they they always come up with these new features to make it so that everyone can code so the accessibility router essentially helps you it allows people to select different parts of your app so it looks like this i guess they don't have to actually be able to scroll or anything like that it lists all the options like that so you can maybe use voice to text to select something or maybe you can you know whatever sort of selection device they're using but this is definitely easier to navigate and select something than it is with a list like that the other thing to help us implement accessibility better in our apps is this other modifier called accessibility representation and this modifier allows you to inherit the full accessibility implementation of another control so let's say you're building a custom stepper control well if you're building like a custom separate control from the ground up you're going to have to make sure it's accessible and you might not want to go through the effort of doing that but this modifier allows you to essentially inherit all of the the full accessibility implementation of the apple stepper so you don't have to do any additional work the other thing that you might have seen here is this component right here this is a new swift ui component called a table i haven't played with it but it apparently can do multicolumn uh and yeah i think it's much needed where a lot of apps have this sort of sort of data grid type view and that was something that we were missing before so new table component very cool and then the other thing is they're showing that they're showing this little thing where uh it'll be intelligent enough to recognize that you have a background here and instead of you know gray subtext it's gonna make it look really cool like that and just kind of show through the background uh so they called it material support i don't exactly know what that means until you know i dig in and play with it but there's other new things that they didn't cover there's a location button which i i've there was a wwdc session that i saw that i bookmarked and essentially it's a button that someone can tap to give your app permission to geolocate them so the traditional ways like pop up this little dialogue and then um people would have to opt in and say okay allow this app to track me but with this location button that makes things easier a whole bunch of other stuff that they did didn't really show they just listed okay so i think i'm going to stop there for the rest of this uh we are going to do this tomorrow but let's let's field some questions you know what my greatest fear is in doing these streams is um somehow my mic cuts out something happens and i'm talking for like half an hour and everyone's like we can't hear you and i won't know i'll just keep talking so i really need that second screen but now that they announced that cool thing where what did they call it universal control where you can put like an ipad right beside your device and it just becomes a second screen so i think i you know i'm definitely getting a new ipad just to play with the um building apps on the ipad thing and i want to show people that so i'm getting a new ipad uh oh shoot sound is low i hope i hope you guys were able to hear me over the music uh otherwise i would have just done the whole stream like that okay well it looks like we're pretty good for questions uh tutor we have a ton of playlists on our channel just go to youtube.com code with chris and you'll see the um the beginner playlist sure you know what uh ready crafty i'm gonna try talking a little bit louder or i'm gonna try turning down let's see i don't want to blow if i talk too loud it gets into the yellow section and it's gonna hurt your ears um ayan i'm not really sure what you mean for 12.5 like ios 12.5 no xcode profile you're saying right what am i using am i using xcode yeah 12.5 but i don't know exactly what's if there were really big changes from 12.4 to 12.5 i think one of the the things that i have to balance is seeing what they've changed um and then seeing if i have to change all the materials so as you can imagine we have so many videos and lessons and courses and all of that uh if they completely change the way things look and people can't follow i have to redo everything and um sometimes that that's a real nightmare so if the changes aren't too big what i usually do is just write a note tell you okay this button's moved there um and hopefully that's enough if you can't follow that we always have a forum there's always people you can ask you know what i am going to tell you guys about this in case you don't know so we have a code crew community here um again inclusive that's that's the whole thing with code with chris right no judgments um everyone's there to learn there are no dumb questions and uh we try to help everyone whether you are you know a paying subscriber for our courses or not we'll still point you in the right direction even if it's not with our resources uh so that is that is that and this actually has become a huge part of of code with chris and before some of you actually might be from our old facebook community and we still have that up and running actually so uh what is it here this one we have a facebook community um that we had before but i had sort of a scare one day it just it just closed because it said that we had broken some rule on facebook um but then after i sort of appealed it um and said you know what did we what did we break in terms of rules and guidelines and they reinstated us and that was a wakeup call that you have to you know as much as possible own the platforms that you really care about otherwise it can be just be taken away from you and so we started our own forum which you know is hosted on our own hosted servers and nobody can take this away because it's not only for me it's for the people who who use the community too right imagine something that you've been relying on that you've been making friends on that you've been learning on suddenly just vanishes and i think that would be horrible so this is sort of just still developing um in the future i definitely want to run more community app challenges because right now uh we're the one issuing the community app challenges like the stock tracker app is is one current one that we've got going uh where we challenge you guys to build something like this and by the way that ends in seven days you should still have time to do that and then we're gonna do a showcase video of all the apps that have been submitted so we have been getting more submissions thanks to extending the deadlines that's really awesome but i went off on intention in the future i want you guys to create the app challenges so i want you guys to issue your own app challenges to the community and that way um i think it opens up a lot more variety and also a lot more fun there's just gonna be um anyone can issue a community app challenge i think that would be really cool that's where i want to get to with that okay cool let's see if we have more questions before i have to hop off in a couple of minutes the stock app is too hard um yeah you know what it is it is a little harder than the weather app and we had a lot more participation on the weather app but this is what i'm trying to gauge right because the weather app was the first one stock tracker app is the second one i it's really hard to nail the right difficulty and so i need that feedback from you guys um if it's too difficult you know what for the next one we'll try to um have it like an easy level medium level and whatnot but still still tuning still tuning awesome i'm glad you found that tutorial thank you lorenzo thank you for watching ah pegasi we were talking yesterday on the wwd series i didn't realize that i was talking to you i didn't see your last name or i didn't make that connection maybe because i was just so nervous from streaming for the first time but i wasn't even talking um awesome awesome so glad to see you so glad to see you all right um well time is getting to the end so thank you everyone for joining i really really appreciate the support i'm going to be trying to stream every single day this week at the same time tomorrow we'll be going through the rest of this list right here if i have nothing to talk about on thursday and friday then i'll just turn off the mic and we'll i'm gonna spend it coding you can code too you can study ah you know what i have a lot of sessions to watch so that's what i'll probably be doing if we have nothing to talk about um but otherwise maybe it could be like a hangout chat or anything like that but i just want to get used to just used to being in front of a live camera it's very different from uh recording myself for a lesson where i can do as many takes as i want and then pick the best take but at the same time i feel like live streaming like this and having a live camera i'm more easily able to show you guys um you know i guess i guess be more myself because that doesn't really come through on edited videos so i look forward to doing more live streams uh hopefully i get to the point where i'm doing presentations and teaching more that i do intend to do that and also member q and a's or q a's for the public as well as q and a's for our cwc plus members as well so anyways um thank you guys all for joining i'm gonna end this stream now and i'll see you guys tomorrow if you are free alright bye