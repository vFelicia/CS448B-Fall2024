hey everyone welcome to episode three of how to build iphone apps and today we're going to go over at the MVC software design pattern otherwise known as model view controller and the reason why this is important is because all the ios apps that you will be building will be leveraging this software design pattern to lend itself to better maintainability and more usability and you know all that good stuff so it's very simple once you cross the concept but MVC stands for model view controller and those represent three distinct jobs and all of the objects in your application will have one of these jobs they're either model view controller or maybe some other classes but for the most part of these are the main three actors in our application so let's go over what their roles are within your application so model which talked about that and what it represents is your data in your application as well as all of the business rules and all of the logic and manipulation associated with that data and view or views in your application pretty selfexplanatory all of the forms and labels and you know basically that visual representation to the user and finally controller and the controller sits inbetween the model and the view and facilitates communication between the two and the model and the view never directly talk to each other and so in this way you have three very distinct layers of abstraction and this lends itself to more reuseability because you can swap out these actors and you know they have very defined roles that's the idea at least so let's talk about the communication flow between these three actors so first of all uh... your model represents the data and whenever that model gets updated or maybe gets fresh data or changes or something like that it notifies the controller now the controller then in turn updates view which is what the user sees now the reverse is true know the user interacts with your data sorry interacts with your application the controller captures that user interaction and then in turn it updates the model and so you can see this circular communication flow is mainly what happens in your application however the model never communicates directly with the view and that's just the rule within this MVC pattern so there it is, it's a very abstract concept what we've talked about here but it's gonna be more concrete when we start to work within our iphone demo and when i mention things like view or viewcontroller or model you're going to be able to hold this diagram in your head and have a visual uh... visual diagram of where those files sit within these three jobs all right that was a quick one so until episode four i'll talk to guys soon, bye