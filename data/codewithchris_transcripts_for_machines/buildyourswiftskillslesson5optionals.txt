today we're going to talk about optionals this is a fairly confusing topic for beginners but it is so important because you're going to see it everywhere in your Xcode project to put it simply an optional is a variable that can be empty I don't know if you've noticed but whenever we declare any variable or constant we assign some data to it right away this is because with the data types that we've been using for our variables and constants it must be initialized right away and being initialized just means that the variable or constant is assigned to some sort of data you might think well that's perfect why would I want a variable or constant that is pointing to nothing let me give you a scenario let's say you're writing an employee name search function that takes an employee ID number and goes into your employee database and looks for that employee's name and returns it as a string that employee may or may not exist if it exists you return the employee name but if he or she does not exist then you need to be able to return nothing in Swift nothing is represented by the keyword nil so generally when you call that searching function and you get the result back you'll have to use an if statement and check of the result is nil before using it this will look something like this so let me ask you what data type is result in this case you might say string but unfortunately when you write your function and you declare the return type as string you cannot return nil that doesn't work because we need to be able to return nil which is nothing making the string type an optional string type can help us with this exact scenario a regular string type must contain a string value however an optional string type may contain a string value or it may contain nil this is perfect for the employee name search function we're writing looking back at our search function instead of returning a string data type let's see how we can return an optional string data type all you need to do is add a question mark to the data type like this it's almost like a question asking if this contains a string value or a nil so now when you get the result back from your employee name search function you can use the if statement and check the optional to see if it's nil or if it actually contains a string value representing the employees name let's say that the function did find a name and the result does contain a string representing that name you want to print it out to the console however you can't just print it out like this because it's an optional string it may contain nil and you can't print nil well how do you get the actual string value out of the optional then you have to do something called unwrapping the optional think of it this way the optional string type is like a Christmas gift box that may contain a string value or it may contain nil I don't know about you but I've never received Christmas gifts that contain nothing so maybe this is a bad example but it helps to think of that optional data type as a as a box that you have to open up to see what's inside when you're checking the optional to see if it's nil that's kind of like you're shaking that gift box and hearing that there's either something inside or nothing inside if you want to get to the actual contents inside the box you have to unwrap the gift box first in Swift you can unwrap the optional by using the exclamation mark so going back to our employee name search function if we want to print out the employee name then we have to unwrap the optional like this ok let's practice this in the playground so here I've got a brand new playground and by default it has this line of code here and far Str equals hello playground and this is just declaring a variable STR and assigning it hello playground Before we jump into the examples for optionals I want to remind you about something in regards to variable declarations and this is something we covered back in module 1 when I first introduced variables to you and that is the fact that variables actually have a datatype so when you declare STR if you want it to store string objects then you use and you type in the data type after that so in this case string all right and then we can assign it string objects into that variable well you might ask how come it didn't have this part when we first created the playground and that is because if you don't explicitly declare the datatype for the variable it is going to look at the first piece of data you assign to it and it's going to take on that datatype so in this case we're assigning hello playground which is a string and so STR is going to know that it is a string type variable for example I cannot assign it an integer after that all right so I just wanted to remind you that you can explicitly declare the datatype when you're declaring the variable like that this is important because when we're declaring optionals we need to use this sort of notation okay so now we're going to jump into examples with optionals so this variable right holds string objects if I wanted it to store nil as well I can't so if I try to assign nil to it you know you're going to see an error pop up and the reason is because if we want if they're able to either store value or nil it has to be optional so the way we can change this declaration so that it is an optional string datatype we just add a question mark at the end of the data type like that and so now STR is an optional it can either store a string value or it could either contain nil and so you can see here this is now a valid code statement and I also want to point out that you can declare optionals for any sort of data type so I can say something like var my int is an optional integer so it may contain an integer or it may contain nil and furthermore if you had your own class let's just type one out really quickly that's the smallest class you can have let's say that I have a variable my car that stores a car object I can make that an optional as well so now my car this variable may either have a car object or it may actually just contain nil and so I just wanted to point out that you can have optionals of many different data types now we're going to move on to how to check an optional for nil before trying to use it because if you just try to use it straight off the bat you might get a crash if you're trying to perform an operation on a nil value so here we're going to check if an optional is nil before using it and there are two different ways to do it so one is just technique number one use if to check for a nil and this is just saying if STR is not equal to nil then do something with it so let's say I want to print it out but remember STR is an optional so it's kind of like a gift box if we want to get at the value inside of the gift box because we don't want to print a gift box out we want to print the actual string value inside the box right so we have to unwrap the box and to do that the syntax is using an exclamation mark so I go STR and then I put an exclamation mark at the end now the danger of just unwrapping that gift box and printing the value is that it could be nil inside that box and I can't perform an operation on nil but the safe thing is we've done this check write this if statement guarantees that that gift box is not nil inside that there is a string value alternatively if you want to check if it is nil you can go if STR is equal equals nil like that so you would want to do something maybe if STR is nil then you might want to in show it and error message to the user or something like that if if you didn't expect that to be new now I'm going to show you a second technique to check if optionals are no and this one is slightly more more advanced so if this technique makes sense to you then you can use that instead and this one is called optional binding and it still uses an if statement but it also combines a constant declaration into it at least that's what it looks like so you use if and then you start declaring a constant remember a constant uses the let keyword instead of the VAR keyword so if let let's say my string is equal to STR alright so what's happening here this if statement or optional binding statement is very similar to this guy up here it's basically checking if STR is nil or not so it takes STR you know this optional data type variable and it unwraps it and if it is nil then this is not true and it basically doesn't execute any code inside here however if there is a string value inside of that optional it's going to assign it into this constant my string and you can name this whatever you want so then I'll come inside this if statement and then when you print let's say you want to print it out you don't have to go like this you don't have to unwrap STR you can simply use my string because it already contains the value inside that optional so this is called optional binding and the benefit of it I guess it's just that it already unwraps it and puts the value into a constant for you to use whereas this technique up here you're simply checking that the optional is not nil so when you want to use the value you'll still have to unwrap that optional every single time you want to use it inside the safe statement so now you know how to declare optionals like this and you also know how to check for values inside the optional before actually using it now let's talk a little bit about why we even need optionals because in other programming languages that I've worked with before variables can store anything they can store nothing such as nil or they can store value and it was always up to the programmer to remember to check that there is something inside that variable before using it needless to say there were a lot of app crashes because there were times when you'd expect a value in a variable and then you just do something with a variable but then it turned out that there was nothing inside and so your app would crash trying to do perform a function or a method on a variable that contained nothing in Swift here they introduced optionals to help this sort of thing and it basically forces you as a programmer to explicitly declare a variable that can be nil or not so it forces you as a programmer to explicitly create variables that can contain nil and also Xcode can warn you if you're just using an optional value without checking it it can it can see that in your code that you're not being safe and you're not checking it beforehand so it can give you those sorts of warnings and so it's a little bit of I guess a safety mechanism to prevent unexpected behavior in crashes ok so having said that there actually is a way for you to declare a variable that is not an optional but it can contain nil as well okay and I'll tell you how to do that maybe down here declaring variables that can be nil without being in optional so here we can declare let's call it STR 2 and basically it's going to be a string datatype and you know how you would normally put a question mark there to declare that it's an optional so that it can either contain string or nil well instead of a question mark we use an exclamation mark so when we do that this variable you can assign nil to it and in fact it's nil up here because we haven't assign done anything to it actually let's assign hello playground right so you can see down here that I can assign nil to it and then when I want to do something with it I don't have to unwrap it so I can just simply print something like that I don't have to unwrap it because it's not an optional so when you do something like this it's going to be up to you to check if that is nil before trying to do something to it Xcode won't be able to tell you or warn you that you're doing something unsafe putting this exclamation mark next to the data type like this is basically telling Xcode that you want to declare a variable that can contain either value or nil and you don't want to have to unwrap it to get at the value and you don't want Xcode to do any safety checking for you declaring variables of this type can be useful in cases where you are confident that it will always contain a value but you want it to start with nil for example and also in the iboutlet properties that you declare I don't know if you've noticed but there is an exclamation mark in the data type as well and the reason for that is because when you actually run your project those elements that you put in your storyboard they get turned into objects and they get assigned to that iboutlet property so when they're declared in the view controller like this they're not assigned any value you know and they're not exactly an optional they contain nil initially but when those elements in your storyboard turn into objects they get assigned to those iboutlet properties and therefore they won't be nil anymore okay so just to recap what I've shown you in this playground first of all is declaring Dell variables by adding a question mark next to the data type second we showed you how to check and optional if it contains nil or not there are two techniques to do that one is optional binding and one is just using this if statement to check if it's nil or not and the third thing is that you can actually declare variables that are not optional but still can contain nil all right in this lesson you learned about what optionals are and why they're needed you also learned that any data type can be an optional and you learn how to declare an optional using the question mark you also learned that you can unwrap the optional to find out if there's data in it or if it's nil using the exclamation mark you learn that you can use an if statement to check if an optional contains a value before attempting to use it lastly you learn that you can you also use the exclamation mark to declare a variable that can contain nil but is not an optional and also the dangers associated with doing that I highly recommend that you download the worksheet below and get some practice in with using optionals if you liked this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a single video make sure you tap on that bell icon as well thanks for watching and I'll see you guys in the next lesson