so now you've learned how to use a race in dictionaries to store data I've also shown you how you can use an index to access a specific item in an array and also how to use a key with a dictionary to get the Associated value for that key wouldn't it be nice if you knew how to look through all of the items in your array or dictionary well to do this you use a loop and that is the topic of today's lesson we're going to dive right in and start working in Swift here I've got a brand new playground I've also got an array and the dictionary declared so for my array I have three items cat dog and bird and for the dictionary I've made the data the cat dog and bird and as for the key for each of those pieces of data I've just made up a name for them so each key value pair is the name and the value for the key is the I guess the type of animal so in this video we are going to first loop through the array and we're going to use a type of loop called the for in loop and I'm going to show you the rest of the loops but we're going to start with the for in loop so the key word you use is for and essentially it's going to go through each item in the array one by one so in the next part of this for in loop declaration you just put a variable so I'm gonna call this variable animal and then you use the in keyword and next you put the collection that you want to loop through in this case it is our array and then you open up a set of curly brackets that you've been so familiar with using in functions and classes but essentially what happens is the code inside the curly brackets is going to be run for every single animal in the array so what I can do is just simply print out animal so that you can see what's happening as you can see down here it prints out cat dog and bird what's happening it's taking each item in the array one by one and it's running this code in here so for first item in the array is cat alright and so that is going to be assigned to this variable called animal which we put here and then we can reference that item and just print it out and then it loops basically running this code again for the next animal it's going to assign dog the next item in that array to the variable animal and then we can use it inside the code here each time it loops it's called an iteration and when we are looping through the array like this it's called iterating through the array now let me show you looping through a dictionary so let's do that down here and again use the for keyword followed by a variable that the key value pair is going to get assigned to but this time you can't simply use a single variable because there are two pieces of data right the key is the first piece of data and the value is the next piece so you actually have to write it like this let me get rid of animal for now and you start a pair of rounded brackets and inside you put the variable that you want to use for the key so here I'm going to call it name and then you do comma and you put the variable that you want to use for the value and this can be animal and then next you put the in keyword followed by the collection you want to iterate through and for us that would be our dictionary and again you start a pair of curly brackets like that and the code inside the curly brackets is going to execute for each key value pair and they ignore these for now it's just saying that we declared these two variables for the key and the value but we've never used them we are going to use them soon okay so this right here is actually a special kind of variable it's called a tuple and you can think of it just like a group of variables so in this foreign loop it's going to go through each key value pair in our dictionary that we declared up here we actually have three key value pairs so for each of the key value pairs in our dictionary it's going to put the key into this name variable that we have in our tuple and it's going to put the value in the animal variable that we have here so if we wanted to print it out we can simply do something like this well we can simply use the variables so let's print out a statement we can substitute a name in there is a animal make sure we close this string here and we should get oh I have a typo right here so you can see here it loops three times because we have three key value pairs and for each of the key value pairs that prints out our statement its substituting the key into here and the value into here furrball is a cat Mobe is a dog in Tweety is a bird so looping through collections of data is a very common use for this foreign loop let's take a look at some other uses and also some other types of loops the for in loop can also just be used to loop through a range of numbers for example you can do four and then you can say so you can create a variable here let's just say I in one and then use three dots to indicate the range 10 and then you open up a pair of curly brackets like that and we can simply print I and you can see down here that it's printing out one two three but basically for each iteration of the loop it starts at one because that's the lower end of our range and it ends at ten so you just remember that these are inclusive in the range and you can also use this to go through an array because you can access the items in an array by specifying the index right so for example let's demonstrate this looping through the array using a range of numbers and why would we want to do this because sometimes it is nice having the index in a variable that you can access if you need for some reason the index number because using this way this for in loop it doesn't really give you the index number to use so let me just demonstrate what I mean so I can say for index in and then here we specify the range and the range for an array starts at zero so we have to start at zero in order to get the first item in the array how far do we go well what we do is we say array dot count because that is the capacity of the right that's how many items are in there however because remember that arrays start at zero and the last item in the array is always the count minus one so that is our range and I open up a set of curly brackets like that just to demonstrate the range in case you forgot taking for instance our array up here cat is at index zero dog is at index one and bird is that index two even though we have three items in our array so count is going to return three but we only want to go up two index two so that's why the range is zero to count minus one so here we can print out a statement saying index we're gonna substitute the index variable in there contains and then we are going to substitute array and pass in the index you know this is the index right here all right so down here in the console you're seeing index 0 contains cat index 1 contains dog and index 2 contains bird so iterating through an array using this kind of technique will give you access to both the index and also the item in the array whereas going through the array using this technique is a lot easier to type it's a lot faster and it's great if you don't need to access the index number while we're on the topic of looping through collections of data I want to tell you about a special keyword that can instantly break out of the loop let's say you are looping through this array right here let's use this example right here breaking out of a loop and let's use animal for animal in array we are going to print animal this is basically what we did when we first started the playground but I want to show you this special keyword called break so for example if I just put that what don't need to semicolon if I just put the break keyword like this it's basically going to start iterating through the array it's gonna print out the first item which is cat right and then it hits this keyword called break and that instantly stops the loop as you can see the other items in that all right don't get printed out after cat now why would you want to do this well one example is if you're looking for a specific animal let's say I am trying to say trying to find bird so I can say if animal is equal bird using an if statement then I can break so it's basically going to print out well bird is the last item so let me say dog if I'm looking for dog see it prints out cat and then it prints out dog and then it comes down here and detects that the animal is a dog and then we call break because we found dog and we no longer have to go through the rest of the array if your array contains a lot of data this can save you a lot of effort well it'll save you a lot of computing power because once you have what you want there's no point in going through the rest of the items in the collection that's just one scenario where you might want to break out of a loop using the break keyword but there are many others as well that I'm sure you'll encounter in your own programming so just keep in mind that you can break out of a loop using this keyword now that we've covered iterating through collections of data let me show you some other uses for loops and this will give me an opportunity to also demonstrate another type of loop I'm going to start afresh playground because this is actually getting kind of full we have a ton of print statements and this is a nice way to keep all of these pieces of code together because this all relates to iterating through collections of data so I'm going to start with a scenario what if we want it to fill an array which I have declared right here it's empty with ten random numbers in the range of one to ten and duplicates are okay well you might use a four in loop that is going to loop ten times right so let's write this out we have four and let's just use I in one to ten and that is actually ten times right because these are inclusive so then you're gonna have a pair of curly brackets like that and inside you would probably do something like this we could do we can use a variable actually of our random number equals arc for random uniform and we're gonna put the upper bound is ten but this gives us the range of 0 to 9 so we are just going to add 1 to that which is going to give us 1 to 10 and then you are going to put that random number into an array so we are going to say something like the array dot append and you can either append the random number like this or as you learned another way you can also and I'm just going to put this as a comment because this is just for your own reference you could probably do that as well this sort of short form way okay so arc for random underscore uniform actually returns the datatype you in 32 which is basically stands for unsigned integer and 32 is you can think of it as the size of the integer so what we can do is simply convert that to int that and what it's saying here is never used that we can consider replacing it with underscore so that is a very interesting point when you use a foreign loop like this and you simply need to execute a code ten times you don't really care about this variable here an optimization is actually just to replace this variable with an underscore and that's what this warning is saying actually so you consider replacing with underscore or removing it so you can do that because you don't care about the variable in there it's more illegible but if you did need to use this counter or this index then by all means you can put a variable there but for us we only need to loop through code ten times so we are going to put an underscore there okay so here it's saying that variable random number was never mutated consider changing to let constant alright that's fine as well since we never assigned anything else to random number we can change it to let okay so now we have got ten random numbers in our array let's print them out so here we can say four actually we can print it out as we are appending them so print random number and what have we got here so we've got one eight seven three two six eight five nine seven you can see there are duplicates right eight and eight and seven and seven but it doesn't matter because we've satisfied this scenario here now I'm going to change the scenario bit so let me copy this and let me paste this here and let me change this to say no duplicates all right in this case how would we do it write a for loop is only going to iterate a number of times it's a specified finite number of times there's no guarantee even if we put a thousand that we are going to get so I'll not do that our console window is going crazy there's no guarantee that we are going to get ten unique numbers in the specified amount of iterations in this case we use a while loop the for in loop that we've been using iterates a specified number of times whereas a while loop will loop indefinitely until the condition that we specify is met there are two kinds of while loops actually and I'll demonstrate both of them let's go back to the playground and take a look so down here I am going to just assign a brand new array to our array variable and this is just so I can remove all of the items in the array or actually I can say something like this I can just do remove all like that and that's just going to clear the array for us to use right now and I'm also going to comment out this print statement so we don't see anything in the console okay so now we're gonna demonstrate the while loop so I mentioned that there are two types the first type is that it's going to loop first and then it's going to check a certain condition if that condition is not met it's going to loop again and then it checks the condition if it's not met it's going to loop again it's just going to keep doing that and checking the condition at the end of the loop until that condition is satisfied and then in that case it will stop looping so let's see how that works you use the keyword repeat and then you open up a set of curly brackets and then down here use the key word while and then here you put the condition so for us we are going to continue looping until our array contains ten elements in other words we are going to continue looping while the count is less than ten okay and inside here we are going to first generate a random number and we're just going to use the same statement as up here to generate a random number like that and here we're going to check if the number a if some number exists already so here we are going to say if the array and this function you've probably never seen yet there's an array called contains where you can check if the array contains the given element it's going to return true if the array contains it and it's going to return false if it doesn't so let's use this and let's pass in a random number as a parameter and if it is false in other words if it doesn't contain it yet we are then going to append it random number and we also have to convert the random number to an int because it is a UN 32 and we can do that up here and so what happens now is basically it's going to generate a random number and if it doesn't exist in the array it's going to append it but if it does exist then it's going to come down here it's going to check that the array doesn't have ten numbers yet and then it's going to repeat and it's going to keep doing that and keep doing that until there are ten numbers in there so why don't we output it and do a check for a number in array print number so wait for the playground to do its thing so let's check in the console and see what we've got here so you can see we have basically one to ten and I'm not sure how many iterations it took but it satisfies the conditions then we don't have any duplicates all right so that's one reason you would use a while loop right if you need to loop indefinitely until a certain condition is met you can do that now I told you there were two kinds of while loops let me erase this part where we're outputting the numbers the second while loop goes like this the condition goes first so you go while array and count is less than ten and then you open up your curly brackets and your code goes here and that's basically it so the difference between these two loops is that this one checks the condition first and only if that condition hasn't been met then it loops whereas this one will actually run this code at least once before it checks the condition so that's the only difference between these two while loops one checks the condition first and then loops and one loops at least one time and then checks the condition to see whether or not it should loop again all right today you guys learned about loops you learned about how to use a foreign loop to go through all of the items in your array or a dictionary you also learned about while loops that can be used to loop until a certain condition is met you learn that there are two kinds of while loops the regular while loop that checks the condition first before loops and the repeat while loop that loops once and then checks the condition at the end whether or not it should loop again I highly recommend you download the worksheet below to get some more practice with loops and if you want to check out the official documentation page for loops I'll link to that below as well if you liked this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a single video make sure you tap on that Bell icon as well thanks for watching and I'll see you guys in the next lesson