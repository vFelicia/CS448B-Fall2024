So the next thing we want to do is find what die image we should show which is the variable that is passed in, num. If you look in our project navigator, at the image we have, they're all named dice 1, 2, 3, 4, 5, 6. And so what we're going to pass into showDie is a number from 1 to 6. And we're going to construct the file name first before assigning it to the UIImageView. So what stringWithFormat does is it's going to take num and inject it where this %d is. So it's actually going to be dice1.png, dice2.png whatever is passed into num and that corresponds to our files here. Now that we've constructed our filename, let's pass it into our imageview. immediate advice that's fine Our UIImageView has an image property and it has an image property. We're going to create a UIImage with the imageNamed method and were going to pass in the filename. So that's all there is to it. If the UIImageView is not declared, its going to create an instance of it with height and width 90 x 90, at 0, 0 x and y coordinates. It's going to add the UIImageView to the die view. It's going to construct the filename and finally create a UIImage with that filename. Well its going to grab that image with the file name and assign it to our image view. Let's go back to our interface. Let's change this side to our controller. What we want to do here in our roll button handler is essentially assign this roll number to the method that we just created for our die view. But we creeted these two instances of die view in our interface, how do we reference those instances from our controller? And how you do that is, you can create a property in our controller simply by, again holding down CTRL like we did with our button and then dragging this guy over to the interface. And that's going to create a property and i'm going to call this, secondDie. And i'm going to do it with this one as well. Hold down CTRL and drag it over. and this is the first die. Now in our controller, it doesnt recognize a class called DieView because it doesnt know about it. Again, we have to import it. Save it, and now if I go back to the implementation file, i can refer to that. I can go first.. what did we call it? oh, i have to use the self keyword. So now in our rollButtonClicked handler, we can refer to the two dieviews which we created in our interface here. So because they're properties, self.firstDie. The method that we created here was showDie, and we pass in a number. So let's pass in roll. Now let's show the same number in our second die. Save that. There's one modification that we should do here. I just realized that everytime we click the roll button, this handler is going to get called and it's going to create a new instance of the model. We don't need to create a new instance of the model every single time. So what im going to do is go to the header file and create a property for our model, but however, we're going to need the import statement. We're going to move it from the implementation file to the header file and it doesn't need to be an IBOutlet because it's not connected to anything in the interface. Thats what the IBOutlet refers to. I'm going to call it model from here. And the reason why i moved the import statement for the diceDataController into the header file is because the implementation file already refers to the header file and so, the header file has those imports which i can still refer to the class here. So instead of declaring a new instance of the model, what i'm going to do is... let me erase this line, and... in here, in viewDidLoad. So i explain what all these events are in my blog post in my blog, but essentially viewDidLoad will happen once when this controller gets loaded into memory. What i'm going to do here is assign our model to be a new instance of diceDataController. And in here, i can use our property. So lets run our application and see what happens. You can click the Run button up here in the upper left hand corner. There you go. Essentially what's happening here is when you click Roll, is its asking our model to give us a dice roll number and then we're passing that number into the showDie method, which we wrote, of these two dieViews which we declared in Interface Builder here. Because episode 5 was quite long, i split it up into 4 parts so it's easier to digest. Click the link in the description to go to the next part or click this annotation to proceed. Alright, i'll see you in the next part.