hello and welcome in this lesson I'll show you how to use modifiers on your elements so that you can really finetune how your layout looks and behaves alright let's do it hi my name is Chris and welcome to code with Chris where we help beginners build an app even if they've never coded before now that you've got your feet wet with Swift UI do you like it better than UI kit let me know yes or no in the comment section below if you wouldn't mind hitting the like button on your way down there I would really really appreciate it it really helps with the YouTube algorithm and getting my channel out there thank you so much with that said let's get started now here I've got a basic swift UI Xcode project with a single text element saying modify me I'm going to change the appearance behavior and layout of this text element to demonstrate how modifiers work now there are actually two different ways we can go about adding modifiers to this text element number one is by directly typing in the code into the code editor on the left hand side but number two which is the way that I'm going to show you first is to do it visually through the Xcode interface and the reason why I'm going to show you this way first is because by doing it visually through Xcode it's actually going to generate the code and update the code editor and then we can go and talk about that code and then later on I'll show you how to just type it in directly alright so what we're going to do here is on the right hand side open up the inspector pane if you don't have it at this button here oh and one thing to note is that in order to do it visually through Xcode you have to be able to see this canvas which means that you need to be running Mac OS catallena or above so if you can see this preview then you're gonna be able to do it visually if not then just sit back take a look at what I'm doing and as soon as I start doing it through the code by typing it out you'll be able to follow along as well alright so let's go ahead and select the text element here and then in the inspector pane under this attributes inspector you're going to see all of these different attributes that you can modify on this text element this is very much like using uikit and storyboards right alright so we're gonna select modify me this text element here well first we're going to change the weight we're gonna change it to heavy and you'll instantly see it reflected in the preview but also the code has changed in the code editor all right so let's just quickly take a look at what happened there and it actually put it on a second line but if I were to just you know close that do that and then it starts to look very familiar right it looks like you're calling a method on the text object or a text element which is exactly what you're doing you're calling this font weight method on it intercepts a single parameter indicating the actual weight and we're passing in heavy so that's essentially what a modifier is you're just calling a method on the swift UI element and the reason they put it on the second line like that is because as soon as you chain together more and more modifiers it's gonna get really messy if it's just in one line which I'll show you in a second and that also alludes to my second point is chaining together modifiers how do you modify this text element a bit more let's show the canvas and let's show the inspector and let's try to add another modifier to this element so click on this guy let's change the color to purple and it she's purple there and it's changed the code again and you'll see it reflected right there but let's just take a look at that so you can see how this list is neat and tidy right I can clearly tell that that's a text element we've modified it and in terms of the font weight and then we've called another modifier to change the foreground color if it was all in one line you can see what a mess that looks like it's really hard to make out what sort of modifications you've done on it right so that's why you should indent it right before the dot in this dot notation and then you're gonna get a nice list of modifiers all right so and one thing to note is that if you were to do this programmatically you would essentially be typing it out right so you would instead be doing this font weight and then you'd put in heavy and you'd hit enter and then you'd go foreground color dot purple that's going to give you the exact same result I just wanted to show you doing it visually now we've modified the appearance of the text element but I alluded to modifiers being able to change the behavior and also the layout of the Swift UI elements as well right so I'm going to show you that let's change the behavior of this text element let's let's you know what because it's only a single line it's kind of hard to see but I will centre align this text and it's added a modifier called multiline text alignment and passed and centered so that's gonna if I had more text it would be centering that text maybe if I just add a little bit more you can see that right centering that text all right now in terms of changing the layout you know one thing you can do is add padding let's say you wanted to add some padding to the left and right side so there is a modifier for that let's do it visually first and you can see what the code looks like I'm going to enable left padding and right padding and you can see that the padding actually that's not the best example so why don't we just do left first so you can see that it's called a padding modifier and it's passed in the leading edge because that's what I want a pad and by default it pads it by 20 points so you don't need to pass in any parameter but if you want it to padded by a specific amount right let's say I want to pad it by 50 like that you can see that it does accept the second parameter indicating how much you want to Pat it by and if you want it to Pat a couple of different edges you can let's say do the top as well and now instead of just passing and leading you're passing in an array with all of the edges that you want to add this fifty point padding to so you can see that now what was interesting is that when I did just left and right it changed the parameter to horizontal meaning I guess that's just a default that includes left and right alright so now you might be wondering you know modifiers are great but if the modifier like are these all the modifiers that I can add to the text element and the answer is no there's actually a lot of modifiers that you can add to a lot of different switch to eye elements some are unique to the element but some are common to all views which is essentially what a swift UI element is if you hit this drop down here you can just look at all of the different modifiers the ways that you can change the look the behavior in the layout of the element now the more you use these the more you're just going to know it by heart so if you want to do something with element you're not sure how to do it I would look through this modifier list first and see if there's one that looks like something that you need play around with it and and then over time you will know what's available there's no point in trying to memorize this or anything like that alright so what we're gonna do now is I'm going to show you a little bit of a more practical example I'm gonna delete this element and I'm gonna add an image and we're gonna add some modifications to it to make it look more like the stuff that you see in apps these days so let's actually before we delete this text element let's go ahead and add an image asset into our project now I've already got an image asset prepared and you can find it in the the resources for this project it's one of the welcome lessons that links to the folder where you can download all of the code and assets and stuff like that you're going to find this pink building asset under this lesson now you don't have to use this you can use any image you want there are no size restrictions or whatnot it's just a demonstration so I'm gonna go ahead and add this pink building to my asset library and I'm gonna go back to my content view now and I'm going to just delete the text and add an image element and pass in a pink building as hit resume so we can take a look at the actual photo and there it is now this is actually a small window of the larger image because Swift UI doesn't assume that I want to fit the image into the view so it displays the image at its native size centering it that those are the assumptions that it's made but if I want it to fit the image into the view I can add a modifier to the image called resizable now this one you're probably going to be using a lot and by calling this modifier on an image element it lets the layout system know that you're okay with having that image resized now by default the aspect ratio is maintained so it it maintains the aspect ratio and it tries to fit that image within the view without scaling it but what if I wanted to let's say stretch this image and use it as a background well I can do that first I'm going to call another modifier called ignore safe area and the safe area just for review because you learned this in my beginner series and stuff like that is this area here this is called well the safe area is where you see the image and out the not safe area I guess would be all of the white parts and the not safe area is are basically places where potentially it could get covered or it could get blocked or there could be text overlaying it so you don't want to put elements there but for a background image you might want to so there is a modifier called ignore well edges ignore safe area and then you pass in all the edges that you want to ignore the safe area for so when you do that it just you can see the image go into the safe area now now just in case you do want to change the aspect ratio I'll show you another modifier called you guessed it aspect ratio and the content mode you can set it to fill or fit by default it is set to fit and basically that means to maintain the aspect ratio but still that the image inside the view fill will make sure it tries to cover all of the space while still trying to maintain that aspect ratio all right so what I actually wanted to do with this image though I'm just gonna go back here I wanted to make it sort of like a floating card because you see a lot of images like that these days so what I'm going to start by doing is just adding padding so instead of specifying in sets and specify how much padding I want I'm simply going to be calling padding when you just call the padding modifier without passing any parameters in it assumes that you want padding on all of the edges at 20 points so that's what it's giving me right here and then next I am going to next I'm going to actually organize my modifier list because I'm going to be adding a lot they hit Enter I'm going to add a second one and I'm gonna call corner radius this modifier will give me rounded corners and I get to pass in what sort of degree of rounding that I want now take a look at this I called this corner radius right expecting some sort of rounded corner but clearly it's not working and I know my view has been updated because there is no question here asking me if I want to resume the preview so this is the latest state but where are my rounded corners so this part is really interesting because the order of the modifiers that I have added actually matters and that is what the problem is right now you see let me rearrange this if I add the corner radius here and then I add the padding you can see that I get the result that I want so what's going on here let's let's illustrate the order actually matters so here I've removed the padding and I've applied the corner radius right so you get this sort of result and then you're adding the padding on top of that result all right and it pads it but what about the other way around like what we did I did patting first I get that padded image but then when I add the corner radius like that it's actually applying the corner radius to that part right which essentially is just my padding so it's adding the corner radius to my padding that's why you don't see the actual image here having rounded corners so take note that the order you apply these modifiers in it actually matters so what I actually want to do is to do that so apply my corner radius first and then add padding to the whole thing and then to take it a step further I want to add some shadow some drop shadow to this image and with swift UI it's really easy because there is a shadow modifier all I have to do is do that and you can see a slight shadow being cast under my image is pretty diffused but there it is there well maybe if I didn't set the radius so much I would see a little bit more of it all right there we go next up I'm also going to put it in a V stack and let's put the text right under it so you have my text element this pink building is totally amazing and we're gonna add some modifiers to this guy so much like before we had the heavy font weight or we're also going to have the foreground color and let this time let's choose pink and we're also going to set the font itself and I'm going to change the font these are some of the presets I can do a large title type of text so you do that and then you can do alignment multiline text alignment and I can Center that and then lastly I can do a shadow I want to show you a different shadow method see this one where you can set the shadow color and you can also set you can control it a little bit more so you can control which way the shadow is going so I'm going to say the the color is going to be red the radius is going to be I mean I use a really tight radius so it looks like I'll show you what it looks like so it's not diffuse ah that's really hard to read okay let's just use black alright so it looks something like that so by having a really tight radius it's not diffused it just doesn't look like it's a blur shadow it's a really sharp shadow yeah alright so now that I've showed you some modifiers and how easy it is to use I have a challenge for you now if you look under the challenge folder in the resources for this lesson you're going to see that you have all of the assets that you need to try to recreate this layout now just to give you a hint you're going to need to use what you've learned in this lesson as well as the previous lessons on layout containers and and those sorts of elements there in order to achieve this effect I highly recommend that you try it out because it's really going to give you that extra practice and solidify your understanding of modifiers alright in this lesson you'll learn that each Swift UI element can be configured by calling methods on them you can do this to change how they behave how they look and also how they are positioned in the next lesson we'll talk about what state properties are and how your UI can automatically change and adapt according to what the state properties values are if you enjoyed this lesson and you don't want to miss the next one make sure you're subscribed to this channel and turn on all notifications as well so you can get an email when the next video comes out all right I'll see you in the next lesson