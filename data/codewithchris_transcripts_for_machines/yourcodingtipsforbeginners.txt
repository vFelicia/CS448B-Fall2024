I've forgotten how hard it is to learn to code, so I asked all of you for what advice you would give to a beginner who is just learning iOS app development. And here is what you guys said. Hey, Code Crew, welcome back to the channel, just in case you're new here. My name is Chris and welcome to CodeWithChris. The place to be if you want to learn how to code and how to build up. I'm so happy you're here now. Let's dove right in. So Ian kicks us off with four great tips. No one, when taking a course, don't watch it like Netflix. Take a pencil and pen and take notes. Taking notes will reinforce whatever you're visually learning. Now, I fully agree with this and it's something that I've started doing with reading books because not only can you go back and refer to your notes, which come on, let's be honest, I never do. However, by taking notes during the learning process, you actually help glue and cement those concepts in your head. All right. Here's what Ian says for number to take a project and go line by line looking at each function, semicolon in variable, just like above. This will help you remember what things do and how they're built and why. Now, in the beginning, this is a great way for you to make sure that you understand exactly what's going on. All right. Number three, work on coding every day, building projects. This will get you familiar with the actual ecosystem of iOS development in the process of developing apps with Swift and other tech. This seriously, you can't learn app development if you don't do the work. And there is a certain level of effort and hands on coding that you need to do before you can get proficient. Now, the best way for you to get this done is to pencil it into your calendar and make it a ritual. Now, don't beat yourself up if you can do it daily, but at the same time, don't wait too long or you'll forget what you did in the last session and you'll just be playing catch up all the time. All right. Number four, document and share your process and progress while you are building projects. Now, this is great advice for motivation purposes because just with learning anything new, there is bound to be times when you're discouraged, you want to give up. However, if you document your journey, you can refer back to your early days and you can see how far you've come. And furthermore, it is a public journal. Other people can comment and they can encourage you to continue on. And honestly, sometimes that makes all the difference. Now, shameless plug here in our Code Crew Community Forum. We have a journalist section exactly for this purpose. And Ian ends off. Those are my two cents. Have a good one. And don't forget to be awesome. I love that. Now, one way to be awesome would be to hit that thumbs up button on this video. Downbelow. All right, moving on. Theran is the next one up. And he says, I never thought I'd be in position to crank out an app in two to three days, but here I am. That's seriously impressive. My advice to any newbies watch the is to learn the very basics, even if you find yourself copying and pasting every single line of code and then create a project of your own to work on. Yeah. Now, this is really good advice because a lot of beginners, they're discouraged that they have to copy every single line of code that they are seeing me. Right. But that is part of the learning process. Think about babies. They mimic what they see and that's part of how they grow and learn. But not that I'm calling you guys babies, but you get the idea. Next up, we have Tammy Wish. I had known about Xcode helpful links to a lot of information. Other stuff I found useful was the book, the Swift programing language from Apple books. That's true. Apple has a lot of free resources for you to learn. I was at the moment there is an iPad playground's app. There are free books that they have for learning as well. They used to not keep them so up to date, but these days maybe it's better. So definitely go check that out and let you know that inside Xcode if there's a keyword or a class name you're not sure about, you can Poletown down option and click it to bring up the developer documentation right inside Xcode. Next up, we have octave or maybe octave. I'm so sorry if I'm butchering your name, but he says read test afterwards. Try it out on your own. Do it again 20 times. And keep in mind, errors are good at the beginning. Now, as a beginner, there are so many times that you're going to make mistakes and you're going to overcome them and you're going to learn from them. But there's actually a deeper reason to why making mistakes in the beginning is good. Errors are good in the beginning because they help build your confidence as a beginner. And confidence is one of the most powerful weapons for a beginner to continue learning about development and to not give up confidence. That's the thing. Now, one thing before we go on, in case I miss pronounce your name, please, please let me know. Either leave a comment below or reach out through the website and that little chat widget and let me know that mispronounce your name. I really want to know. Funny story happened this weekend. I've been calling my neighbor Dan for the last few weeks because I accidentally got some of his mail. Hey, Dan, your guest is looking great. Hey, Dan, how's it going? Good afternoon, Dan. Then one day he just has Feliks and I'm like, what? My name is Felix. Turns out that the mail I accidentally got with the name down on it was for his son who had moved out years ago. OK, moving on Marquises. My advice is that it's OK for beginners to copy the code they're blocking on. But the most important part is to analyze the code and understand it. Now, this goes back to what I said before in the beginning, it's OK to copy the code. You don't really understand what it means. You're still going to be able to produce a result, but at some point in time, you still need to have that inquisitive mind set to try to figure out what's going on. Now, one of the best ways to force yourself to stop copying is to try to replicate what you saw on your own computer. Now, it's OK if you have to refer back to the source material like the video or the book. However, it's still helping you reinforce what you learned and committed to memory. All right. This one comes from Muhammad and he has six quickfire tips for us, things I wish I knew when I started programing. Everything should make sense. Number two, if there's anything wrong with your program, that's because of you. So don't blame Xcode. Talk about tough love. Number three, there is always room for improvement. Number four, write your program in small chunks and think about how you would add them together. It's like a puzzle. Number five basics are powerful. And number six, test the extreme cases. Now, Mohammed also has a joke for us. I love this. A quality assurance engineer walks into a bar, orders a beer, orders zero beers, orders ninety nine billion beers, orders a lizard, orders minus one beers, orders. A first real customer walks in and asks where the bathroom is. The bar bursts into flames, killing everyone inside. I love the joke about testing. It always surprises me how people can find ways to break the thing you so lovingly crafted now to make this relevant to a beginner who's learning. I think, number three, that there's always room for improvement. And number four, writing your program in small chunks is especially relevant. Now to me, always room for improvement means that nobody's code is perfect. A lot of times I hear from beginners, you know, all my code is not that nice story that you have to read this or look at this. Just keep in mind that even people who have been writing code for years, no one has the perfect code because code always serves so many different purposes. They're. There's no right one right way to do it, so don't be selfconscious about your own Xcode, and I think that's something that you can develop over time. Number for writing your app in small chunks is a great idea. Often when I'm trying to do something for the first time, I do it in a brand new Xcode project. And that way, if it's not working, it's an isolated problem. Said I don't have to worry that maybe it's some previous code or preexisting code that I have that's interfering. Get it working first in a brand new project so that you know it works and and try to integrate it back into your main project. OK, SDK says start small, but dream big. Now, this is short, but really sweet because what SDK is touching on is the mental game. Learning something new is such a mental game. Now, in the beginning, you're taking little baby steps and progress is slow and it's hard, but you can't lose sight of that end goal what you want to achieve. You just have to keep in mind that you will get there. You will be able to achieve what you imagined. But now you're putting in the work every day and you're you're making progress every day. And soon progress will become faster and faster and faster. And it's like a snowball. So start small, a dream big. Really great advice. OK, Omar says you must enjoy the struggle that comes with coding on Xcode. Omar is right. Xcode can sometimes get confused, but usually a restart will get things fixed. OK, Yishan says. I thought it was hard, but turns out I could do it. This is my advice to beginners. Don't think just because it is hard that you can't do it and don't give up easily. Now this sort of goes back to what he said about start small but dream big in the beginning. Progress is hard. It's tough. You want to give up and it's like an uphill climb up a mountain. But I've seen time and time again that there's this tipping point and there's this this point in time where people's mindset shifts from, oh, I want to give up to, oh, what else don't I know? And things start becoming fun. You start focusing on all of the possibilities instead of how hard it is. So this mental shift, this tipping point comes at a different part for everyone. But you have to put in that initial slog to get there and get past that tipping point. And then from there on, your momentum carry you. OK, so Fattuh says the only advice I'd like to give is the most important tool in Iowa at the moment is dedication and following great people like Christian Paul Hudson Manteau and Jordan Singer. And of course, we cannot forget Stack Overflow and Google. Yes, these are all great people in the community. Go and check them out. OK, Josaitis, my advice for beginners is to go with the flow of the courses. You'll learn so much day by day. And like the Shamblin Temple movie, one day you will wake up and realize how much wisdom you have. Now, I don't know if you're actually going to wake up one day and suddenly become enlightened. However, I think what Hosie is referring to is that tipping point that I just mentioned. There comes a point in time where things just start becoming fun and you don't focus on how hard it is. Or like I have the Xcode again today, too. What are the possibilities of things that I could do? How do I do this? And you have confidence that you can figure it out. You just need to find the right way to do it. And that's a very powerful shift. And I find that that almost is an overnight turning point for people. All right. Next that we have, Mr. Singh, he says after getting the basic concepts of the programing language, you must try to build something without watching the videos. It's best trying to find solutions from different sources to complete the challenges. And it's good to have someone to ask, but it would be better if I can figure out a way to solve my own problems now. I think this is a great example of going back to building up that confidence, right. There are so many resources out there that you can Google Stack overflow, find out a solution, try to debug your own issues if you are able to solve it yourself. You build up that confidence that is so key to the learning process. However, if you continue to get stuck, there is also resources to ask people, for instance, in our Code Crew forum or even on Reddit or stack overflow at places like that, there's tons of people willing to help. All right. Next up, we have Peter. I could do with many more exercises personally. Actually doing it really, really makes it sink in for me. Also, I give it a week and then I go back to your video again and bingo, it makes sense. That feeling when it clicks into place is such a great one. Yes. I totally agree with you, Peter, and thank you for reinforcing Mr. Singh's point. Practice really does help here. And also taking a break is something that Peter mentioned as well. That is sometimes you just need to walk away from your code and come back with a fresh set of eyes and you might spot the solution right away. All right. Next up, we have Catherine or Cathan. Sorry again if I mispronounce your name. If you are a complete beginner, having no experience with any programing language, then spend enough time on logic, building on the language fundamentals like array's functions, loop's structures build lots of apps. Consistency is the key now. Consistency definitely is the key again. But don't beat yourself up if you don't have time every day to code, just don't leave too long in between coding sessions again. And a lot of people were intimidated about coding and all of this special keywords in the syntax and stuff like that. And I always tell people that you don't have to memorize it, right. If you are actually spending the coding sessions and you're actually coding, you might have to look up how to do an if statement the first time, maybe second and maybe the third time, maybe the fourth time. But you will get to a point where you will remember it. However, if you wait too long in between coding sessions, that's where you're going to find the trouble. And there's a bonus tip. If you're facing difficulties in understanding some topic, your mind is full of give up thoughts. Then take a break and start with this issue again tomorrow. Try to get help from various available resources. You'll definitely come out with a proper solution. Sometimes you just need to take a break. You took the words right out of my mouth. OK, Dave, he says, I would tell them to be patient and develop different skills, one set at a time, depending on what they enjoy doing and what kind of apps that they want to build. This is so true because people often approach. At the moment, because they have an end goal in mind, either they want to break into the industry as a career or they might have a specific app idea sometimes of your feeling, especially frustrated, just take a step back and remember that end goal. Just think about it. Remind yourself why you started this journey in the first place and know that you are making progress. And going back to that first point earlier in this video, making a journal, keeping, keeping up with it and looking at those earlier days is a great way to remind yourself how far you've come. All right, William, he says that honestly, the best advice I would give to someone is to make the most of the resources available, build the apps with Chris to get the fundamentals down, to sign up for the house and reach out to the Code Crew. But most importantly, remember that the app or future you have in your own head will become a reality as long as you keep working at it again. You guys are just taking the words right out of my mouth. This is what I just talked about, right? Sometimes having that end goal in sight and reminding yourself how far you've come is enough to keep you going because that initial learning process, climbing that mountain, reaching that tipping point is a slog. You're making slow progress, but progress you are still making. OK, Mac says, I think the most important thing is to make sure that you do the challenges at the end of each lesson and try to work on your own project to properly embed the knowledge learned throughout. Yes, hands on learning is key. OK, Katrina. So many times I felt stuck and stupid. I wish someone could tell me that it's OK to fail to do my homework and that I should keep trying, testing many solutions and don't give up. I think Katrina speaks from the speaks from the heart on this one. You know, as a beginner, learning anything is really hard, let alone coding. You know, it's OK to get stuck, it's OK to ask for help. And it's just part of the learning process making mistakes and and feeling that frustration. But that's that's part of the mental game of learning something new. Right. And if you push past it, good things await for you on the other side. And sometimes you just need someone to remind you of that. Sometimes you just need a support network. So I don't mean to plug our own forum, but, you know, find a place where you can be with other people who are on the same journey as you so that you can encourage each other to push forward. Katrina continues. Now, I understand that it is all right to Google, look through stack overflow and sometimes I need to shut down my Mac and go to sleep. And the next day the solution comes to me. Taking a break often is is really, really key. Also, I wish someone explained to me at the very beginning that there are many good ways to write some particular code and it's OK if my code works but doesn't match the code of another student. Lots of times I felt my code is not worth showing to others. Now, this is completely true. There are so many different ways of doing things, and especially as a beginner, you shouldn't really focus on trying to do everything perfectly and following all the best practices and just examining your piece of code over and over and over again. In the beginning, it's actually more helpful and far more effective to focus on quantity and just writing more code and going through more code than it is quality. You know, as you get to the point where you are either in the workforce on a team or you're building your own app for the App Store, that's where you quality will count a lot. But in the beginning, as a beginner, try to get through as much quantity and throughput, get as much practice as you can. There's always many different ways of doing things. All right. Next up, we have flow and flow actually has his own YouTube channel called Flow Right? Xcode. And he's taught in the boot camp to beginners before. So his advice is coming from teaching beginners first hand in person. So this is really cool. Don't be afraid to ask questions, not stack overflow, but to the people who teach you. Now, I think this is especially relevant when you're in a live setting because, you know, people are shy. So if you're in school or you're in class, you're in a boot camp or something. Don't be afraid to raise your hand because there are no stupid questions. And online, it's even easier to ask a question. Just make sure that you do. Everyone is overwhelmed in the beginning as there's so much to take in and take your time and conquer each little piece one at a time, and it will all make sense later. And I totally agree. For a beginner, there is a lot to learn and it can be very overwhelming, such as, you know, the syntax for Swift. If someone is brand new to coding, it can be really hard to try to remember where the curly brackets go. What does a specific keyword mean? And I always say, and I think I've said this before, don't try to memorize it, just do more coding. And naturally, your fingers will. Just start to remember, as weird as that sounds, most of the time, there is no perfect solution or approach, try out some different ways and find out what works for you. And that's one thing I always try to make sure that people know there is. What separates you from an expert, if you're just starting to learn, is just that the expert has seen more different ways of doing things. And I always tell my students that there is no like black and white, right or wrong way to do something. There might be more efficient or slightly less efficient ways of doing things. And as you gain experience, you will recognize what sorts of things to do in specific scenarios and use cases. So just keep in mind, there's always different ways to accomplish the same result. OK, same for teaching. Try to watch different creators read articles and read the developer documentation. Yeah, there's so many resources out there these days, so many different YouTube channels just like flow, right. Xcode, CodeWithChris, you know, other people out there that if you're not really jiving with one method of learning or one instructor, you try another instructor, try another medium to learn. The last thing that Flo says is think about something you're passionate about and start working on an app for that topic to start doing and learn as you go. I think there's two two things I want to point out about what Flo says here. One is to keep in mind why you came into learning I was up development. Keep that goal in your head. And the second thing is that you just have to get your feet wet. Sometimes people get so intimidated if they're doing something the right way or not or if they're writing clean code or not, that they're afraid to even take the first step. And, you know, sometimes it's just watching or reading is easier than actually turning to your computer and trying to type it out, you know, but you really do have to get your feet wet and start making some mistakes so that you get opportunities to let things sort of sink into your memory and also to build that confidence that you you need as a beginner. Tomas says, start from the beginning, understand basics. Don't skip. Even if you think something is easy experiment. You won't break anything. Don't overthink. Better is the enemy of good. So if something worked Liebert, you may always come back to it later. And I love that Thomas talks about overconfidence. You read something or you're watching something. You think, yeah, yeah I know it. It's easy. And that's what I fell prey to when I was first learning. I was at the moment and I had a coding background. Everything just looked easy. But when I actually tried to start to do it, I realized I didn't know how to start. So it's so important that even if something looks simple, try to do it. And that also helps reinforce and helps that stick in your head. OK, Bob says the best advice is to set realistic expectations. You're going to experience letdowns. The biggest thing that helped me is learning how to troubleshoot your Xcode when something isn't working as expected. Your tutorial on debugging really helped lay a foundation for me. Awesome. So you can probably check out that debugging tutorial there, a link to it there. But yeah, this goes back to being able to solve your own problems. Once you learn the techniques you can use inside Xcode and the tools that are available to you, you're going to feel empowered, you can feel confident. And that is a huge weapon for you as a beginner to fight this resistance that you're feeling for learning. And then, yeah, once you feel confident you can overcome your own problems, then you're just interested in solving more problems and making progress. OK, your hand has five points for us. Now, in summary, he says starting in Swift, an execution can be bewildering. You will not understand 90 percent of what you're doing. Just follow the examples in the courses. And having a running app on your device is gratifying. One hundred percent agree. Sometimes if you're having a lot of trouble in the beginning, understanding and keeping up, sometimes just you going through with it and then coming back and doing it again. Second time through might be the thing that clinches it for you, right? The first time. Maybe you're just copying and you're just doing it. He continues do small tweaks on apps and I think he's referring to the projects in my course, changes the images in the car turning game to make it more personal and more gratification. Yeah, I think that in the beginning, as you're learning and you're just following someone building their tutorial, building their demo app afterwards, if you can tweak something small in it, switch out the images, add your own label, add an extra button, add a little extra feature to it. It really helps give you that confidence boost and. Helps you reinforce what you've learned as well. Number three, hang in there, do at least three more Chris projects and tweet them talking about throughput, practice more consistency, just code more. There's a there's a running theme number four for your first project. Make it very simple, like an interface that really doesn't do anything step by step. And I like this point because a lot of beginners, you know, they want to boil the ocean. That's a phrase like they just want to build an app with all the bells and whistles and it's sort of pie in the sky type of thing. But in the beginning, if you sort of set your goals low and and achieve them and sort of build up that confidence, that is so important. In the beginning, like I've mentioned so many times, that does wonders for you and you work your way up into that pie in the sky app idea that you have. And don't lose sight of that because that's important. That's what brought you to learning this whole thing in the first place. Don't lose sight of that, but just keep it in check and understand that in the beginning you're learning journeys. You know, it's slow, but you are making progress. All right. And Johann's final point here is finally read some books, be practical and read those chapters. You actually need Google for solutions. If you run into errors, if you're stuck, ask an expert and if and you learn most by trying to solve the issue alone. Again, there's that reoccurring theme, right? If you're able to break through that issue on your own, your confidence level just leaps up sky high. And keep in mind, there's so many resources and solutions out there, so many places to ask for help. You don't need to feel alone in this. OK, next up, we have Dan Miksa. The only advice that would have been useful for me was knowing all programing languages and where you can use them. In high school, you learn C++, but nobody tells you where you can use it only by the help of social media. I learned the purpose of older languages and about the existence of Swift, for example, that I'm learning right now. Yeah, I sort of felt the same way in the beginning in high school and throughout university, learning all these different languages. I think, you know, back then because I was going through school, I just took it for granted. I'm learning how to code. But I think the takeaway here is that if you are interested in a particular platform, if that's mobile, if that's Web, you know, if that's back end or the server side, you need to find out what technologies are used in that space. And I feel like if you are learning something, you are passionate about something that you want to learn, that's going to make all the difference for, you know, finding success or not. And next up, we have Chazen advice for businesses that never give up and continue with it. And if you feel like quitting, then just watch CodeWithChris material. I'm sure that after watching it, you will never think about quitting. Thank you for the kind words Sheas. And the main message here is sticking it through until you cross that tipping point, whether it's CodeWithChris the trials or some tutorials elsewhere or books or you're taking this boot camp or in class, you need to stick with it past that tipping point to where you're not focused on giving up anymore and you're just focused on the possibilities. And that comes from building up a bit of confidence, you know, little step by little step. And I used to call that tipping point the hump, but I feel like that's a terrible name. So you can think of a better name. Just drop it in the comments below and I might start using that instead. Now, thank you to everyone who submitted feedback for this video. I might not have gone through everybody, and I apologize for this because I got an overwhelming amount of replies. But don't worry, I'm going to save it for a part, too. And some of you even shared your personal learning journeys when you first started. And I love that. I'm going to save that for a separate video as well. So thank you to everyone who submitted replies. And just for the record, I had to paraphrase some of the replies as well, just to shorten it, to make it fit into the length of this video. In closing, I want to say that we have such an amazing community here and I'm so happy that we make it so inclusive for newcomers. So if you are a newcomer yourself and your new to iOS app development, definitely check out this playlist that I have right here, which is targeted for people who have no coding background. And if you like this video, please give it a thumbs up. Please subscribe. Thanks for watching. I'll see you in the next video.