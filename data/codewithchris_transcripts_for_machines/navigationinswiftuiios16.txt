learn about swift ui's brand new navigation stack api for ios 16 and how you can adopt it in your projects today hey code crew this is flo this lesson introduces the new navigation stack navigation path and navigation destination apis from ios 16 to you as of the date of this recording ios 16 is still in beta so you will have to use the xcode 14 beta version as well you can download that xcode version from the apple developer website which is linked down below first of all i have prepared an empty xcode project here and note that i am using the x414 beta beta2 in this case but it should probably work the same in the upcoming beta versions as well so first of all let's have a look at how a navigation stack would have been implemented before ios 16. so we would probably oops we will probably have a navigation view navigation view like that and then in the content we would have a navigation link with a title and a destination so as a title let's say simple string and let's expand the destination to be a training closure and in here we would then just have a view that should be navigated to so let's just say abc here just to test it out so now if we click on the simple string it will navigate to a new view that's just a text of abc so super simple stuff actually now let's embed that navigation view or let's actually embed the navigation link in a list super simple like that so we just have a little bit of styling here as well so this is how it used to be you had a navigation link with a title which could also be a view of course and then a destination that's obviously also a swift ui view now in ios 16 a bunch of these things have changed so first of all navigation view is getting deprecated instead you will use the navigation stack if you want the same behavior and also the navigation links have actually changed quite a bit so let's first of all remove the navigation view and replace it with a navigation stack by itself this still behaves exactly the same so in ios or on iphones actually navigation view is directly translated to navigation stack both of these are equivalent now of course if you want a multicolumn layout you will not be able to use navigation stack but that's for another lesson later on okay so you can just replace the old navigation view with a navigation stack and nothing will change you can still use the old navigation link as well next let's try out the new navigation link api and we will also need a new view modifier to make that work so let's comment out the old navigation link and let's create a new one and if we scroll down a bit here uh let's see okay it's actually not showing i here it is so the new navigation link takes in a title once again a string this could also be a view of course if you want to do that approach so let's say simple string once again so the exact same title as beforehand but now instead of providing a destination view now you just provide a value so let's try that out let's provide a value of abc what will happen if we click on the navigation link now exactly nothing will happen because swift ui doesn't know where to navigate it just knows the label is simple string and the value is abc but it has no idea about what to do with that value and that's what we need to teach swift ui with the new navigation destination navigation destination view modifier you can create multiple of these modifiers and we will look into that in a bit but for now you will always have to specify a type in our case the value was a string right so we will say string dot self and then we will get in our string here and then we can return a view so for example now we can just create a text with that string again and then we will have the exact same behavior as beforehand so now if we click on the simple string navigation link we will go to a new view in our navigation stack of course which displays a text with the value that we passed and the value that we passed was abc of course now we could style this and say foreground color of red and now if we click it will of course be red so super simple stuff but now instead of having to add the destination to the navigation link directly and then thus have it in multiple places in one view for example now you just have to add one navigation destination modifier to some content of your navigation stack so not on the navigation stack itself somewhere inside of it and then that will let swift ui's new navigation system know what to display so it is text with the foreground color for which type of value so in this case for the string type now very notable thing here is that these types all need to be hashable string is already hashable just as integers for example but if you have custom types which we will look at next or in a bit actually then you need to pay attention your types need to conform to the hashable protocol so next let's have a look at something that got actually way better with ios 16 and that's programmatic navigation if we remove this comment here because we don't need it anymore and we get rid of the navigation stack for a second and just type in navigation stack you will see that there are a bunch of different initializers there is one with just a root view which is what we previously used this trail enclosure here is basically the root view and then there is also one where you pass in a path and this is where it gets very interesting so for the path we can just create a array so let's say path and this is an empty array of type string because we're just dealing with with strings and now we can just bind to that path here in our navigation stack and now we can run the preview again and you will see that it works exactly the same the cool thing now is though that we can play around with this path and since it's just an array we can add values or remove values programmatically so let's get back into our list and let's add a button and let's say navigate to xyz and you will see we have a new button here and right now if we click on it obviously nothing happens because the action closure is empty but now in this action we could just say path dot append x y z so add the string x y z to this array of strings and if we click the button we will actually navigate to our destination that we specified below so a red text of the value and the value in this case is just x y z so this is how programmatic navigation works of course you could factor all of this out into a view model and then you have a very nice architecture it also works the other way around though so if we go into our destination and embed this text in a v stack then below it we could add a button say pop to root and in here we can just set our path dot remove all this way we will remove all strings from our array of navigation paths and consequently that would mean that there is nothing left to navigate to so shift ui will pop to root so let's try it out let's click on the simple string this will navigate us with the value abc and now if we say pop to root it will pop to root this obviously also works multiple levels deep so now if we grab our button and also put it inside of the navigation destination we can click on simple string we're at abc right now then let's navigate to xyz so we're at xyz now and the array would right now be abc in the first slot and xyz in the second slot so if we hit back we're back to abc of course because that's where we came from but now if we say pop to root the array gets emptied so this is a super simple way to programmatically navigate now in swift ui very nice i would say and then lastly let's have a look at a more practical application of this where we have multiple different types for our navigation path for that i have prepared two different structs first of all the article struct with a bunch of examples and the person struct also with a bunch of examples so let's go back to content view and let's remove everything basically that we already had so let's get rid of the path and let's get rid of the navigation stack and that's basically just start blank so let us create a new navigation stack with a path and a root view now for the path instead of using an array of string for example there is a brand new type so let's call this variable path and let's say this is a navigation path this is basically a generic implementation of the array where we can push multiple different types into it and you will see what that means in just a second so just create a state variable called path that is a navigation path and now we can bind to that in our navigation stack just as we did before with our array of strings okay now in here let's add a list back and in this list let's add one section called people and in this section let's iterate over all of the person examples so let's say person dot examples person in now one thing to note here is that both person and article conform to identifiable so we can use for each without specifying an id property and they also conform to hashable which is why we can then use it with the navigation path api so right now there is obviously nothing on the screen except for the section title or the section header people so um let's have a look at here which values a person has so it has a name and an age so maybe let's add just a little vstack here with a text of person dot name and then a text of person.h and let's format that as a number okay and let's also say the alignment is leading and the age has a foreground color of secondary so it's great out of it okay so that looks pretty good i would say right now this is just a vstack though so let's maybe copy that vstack and instead create a navigation link with a value and a label as the label let's paste back the vstack the value now becomes the person object because we want to navigate to a detailed view of that person for example you can see that in the list now it turned into a navigation link with the little chevron on the trailing edge but of course clicking on the navigation links doesn't do anything because swift gi doesn't know about the destination it only knows about the value which is a personal object so let's teach swiftjoy about the destination let's select your list and add with the navigation destination modifier of course we now want to set the destination for the person type we will get a person in here and in this example it will just be a very simple text of the person dot name and we might give it like a font of headline that should work i think okay so now let's click on steve here and it will navigate to a new view saying his name which is steve of course okay so that was simple enough then basically the same thing as we had beforehand but now let's add a second section and let's call it articles and in here you guessed it we will add some different articles so let's say for each article.examples article in so this is now our second section and of course we will add some new navigation links as well as the value we will pass the article same as beforehand and as the label let's have a look at which variables this has so it has a title and an author so we can probably just do pretty much the same layout as beforehand so let's add a vstack with an alignment of leading and let's add a text saying the article title maybe with a font of headline and then another text of the article dot author with the font of sub headline okay so that looks good i would say now that we have both sections we can still click on the people section of course and it will navigate but we can't click on the articles section yet because we're only taught swift ui a navigation destination for the person type so let's add a second navigation destination for the article type now in here we will of course get an article in and once again for the sake of this lesson let's just keep it simple and say article.title and now if we click on an article it will navigate correctly and if we click on a person it will also navigate correctly now we can again get a little bit more crazy and embed one of these destinations in a v stack and add a button for pop to root and in here we can say path dot remove last and we will add a like a number here and this will be path dot count so basically this means remove all of the items from the current navigation path let's try this out so if we click on steve we just see their name and if we click on combine mastery for example we have the pop to root button which will pop to root let's add a second button to maybe append another article or a person so let's add another button let's say navigate to person and then we can say path dot append any hashable value is what we can append here now and in our case let's just say person dot examples and we'll just use the second one i guess that should work just fine so now if we click on an article then we can say navigate to person and now we're at maria because that's the second person that we had and of course hop to root also still works so let me briefly go over everything that you just learned in this lesson you learned that the old navigation view on iphone got replaced with a navigation stack and that the old navigation link got replaced with a new navigation link where instead of specifying the destination you just specify any hashable value that's passed into the navigation then to do something with that value and to actually display a destination you add the navigation destination modifier to any of your views inside of the navigation stack for this modifier you have to specify a type that you want this to work for then you get an instance of that type and you can just add your destination view in here of course this could also be a custom view next if you want to implement programmatic navigation you will have to create a navigation path and bind to that path in your navigation stack view and lastly to programmatically navigate to any new value you can just say path dot append and then your hashable type in the brackets and if you want to pop to root you can just remove all values from your navigation path so in this lesson you learned about how swift ui navigation is handled in ios 16 and hopefully also later on you found out about navigation stack navigation path navigation destination and the new way to use the navigation link you also learned about programmatic navigation without explicit navigation links and just buttons