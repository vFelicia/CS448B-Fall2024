hey code crew so far the app just displays text labels for each video in this lesson you're going to create a custom table view cell to download the thumbnail for each video to display it and also to format the date so that it's easier to read just a quick note if you're jumping into the series at this point you kind of need to watch these lessons in a progression for it to make sense first make sure you've watched the 29th lesson beginner series to get the basic skills then make sure you're watching this YouTube app one day build lessons in order links to both of these playlists will be in the description so right now we have a prototype cell and while we can add UI elements into this prototype cell to customize it it's really hard to add any sort of code or logic to the table view cell itself so that's why we need to create our custom subclass of uitableviewcell and we're still going to be able to customize it using interface builder i'll show you how you can tell interface builder that this prototype cell is actually an instance of our custom subclass that we're going to create that way you get the benefit of both you get to be able to add code and logic to your cell and you'll be able to customize how it looks from interface builder alright so let's go ahead and go into our file navigator hold down control and let's add a new file this one's going to be a cocoa touch class because we're going to be subclassing one of those classes here so subclass UI tableview cell and up here we're going to call it you can call it video table view cell and language is swift we're gonna hit next and we're just gonna create it right there now we have a whole bunch of files I should have done this from the start but I think it's best now if we start creating some groups or in other words folders just to organize these files a little bit so let's go ahead and choose new group we'll say this is view controllers will create another one up here and let's say these ones are views we're going to create another one for models and another one for storyboards and then lastly let's have a group for just anything else like helpers utility classes and so on and so forth so we're gonna move the to storyboard ones into there we're gonna move our view controller into there let's put the app delegate in the scene delegate at the top these all represent you know data objects or data you know data items so we're gonna put them into our models this is a view this custom video cell and constants these constants files I would say our helpers now you can rearrange the groups if you'd like but already this is looking a lot better alright so let's take a look at our video table view cell from here these are just it's boilerplate code for the uitableviewcell what we're going to do is configure that this prototype cell is actually an instance of that class so the way we do that is you can select video cell here and then go into the identity inspector and just change the custom class and say that this is an instance of video table view cell and so what happens now is if you hold down option and if you click on video table view cell you're going to see that on the right hand side here up here we are going to connect all of the elements that we're going to add into our cell so we're gonna have a UI image view element for the thumbnail we're gonna have a label for the title and a label for the date and then we're going to connect those as iboutlet properties to this class and then that way we can use the code to set up those elements too the image and set that image view and so on so let me close this for a second and first let's use interface builder and customize this UI so the way this looks is it's basically a big thumbnail image and underneath it we're gonna have a title and bold and then underneath that we're gonna have the date so I'm gonna use a vertical stack view with those three elements inside so let's go ahead and open the object library you can hit this plus icon choose a vertical stack view and because this is so thin I'm gonna drag it into here into the content view from the document outline all right and I'm going to then add some constraints for the stack view so I'm gonna put it 0 on all the edges add 4 constraints and there we go we have that stack man now we can begin adding the other three elements in there so there's a image view we're going to put that in there make sure it's tucked into the stack view when you collapse it right it should be in there okay we're gonna add two labels in there so that's the title label and then that is the date label alright so now let's customize it a little bit the thumbnails on YouTube have a certain aspect ratio so the first thing we can do already is select the image view and add that aspect ratio as a constraint so check aspect ratio we're going to add that constraint and then we're gonna modify it so let's click on that aspect ratio go into this multiplier and it's gonna be 1280 by 720 so that's the general size of thumbnails YouTube something else I mean alright so this is the the title label so we're gonna actually change this into a sort of bold font so instead of the style regular let's change it to bold it done and we're also going to add some space between these elements so hit stack view and let's add a spacing of 10 between each of the elements and before I forget one thing that we should probably do as well is to set the number of lines for the title to be 0 and that's gonna allow the text to wrap to a second line or third if need be if you have a line number a number of lines set then it's not going to exceed that number annex instead it's going to truncate it with three dots but if you specify zero it's just gonna wrap and looking at this you I actually do want to add some margin to everything so let's take the stack view and let's edit the constraints because before we sort of made it 0 to all of the edges so instead let's hit edit and let's put 20 on each new 20 and 20 and give everything some breathing room so that looks a lot better in my opinion in of course this is all down to personal preference and we do have some auto layout constraint errors so let's click on that and see what was happening here so the content priority and ambiguity is the easiest to solve first and sometimes that actually ends up solving these ones up here and this is basically saying if the cell if the cell has more space than it needs who should I give that space to we're gonna say that the vertical hugging priority for the title label is going to be the lowest priority which means that if there's extra space give it to the title label everything else has a higher hugging priority so it's not going to be as easily expanded if there's more space conversely if there's not enough space what should get truncated well I would think the thumbnail should get truncated or squished if there's not enough space so I'm gonna set the content compression resistance priority to be lower for the thumbnail all right but that's just for safe measures because you can see all the errors are gone anyways and this tableview cell is flexible in terms of the height and so it's gonna accommodate what it needs all right so this looks pretty good so we're going now going to connect the elements to our custom cell let's just save this let's click on the storyboard hold down option and click on video table view cell so we get this on the right hand side and there's some space here where we can connect the elements and I'm just going to do it from the document outline hold down ctrl click and drag the image view here I'm gonna call this outlet the thumbnail image view okay so sometimes you get an error like this and oftentimes what ends up solving it is you you can just literally try to close and launch Xcode let me try this again okay so I am going to do that all right so I just quit Xcode and relaunched it and sure enough things are working as expected now so let's try this again thumbnail image view and then here this one is going to be our title label and then lastly we have our date label right here all right now that we've connected the UI elements to our video table view cell let's go back to a single editor view and go in here and add an additional property essentially this is going to be the video that this cell is displaying so this is going to be of type video and we're gonna make it optional since it's nil to begin with and then down here we're gonna create a method called set the cell and we're gonna pass in a video object in here all right so the view controller when it gets an instance of this cell is going to pass in the video object that it wants this cell to display and then from here we can you know capture that video first of all set the video that's passed in as the video as the video that is assigned to this property here so self dot video equals V and then we're also going to set the title and date label so we're gonna say selftaught title label dot text is equal to video dot dot title so for the date seeing is how in our video object the date is actually a date object and did we set that down here publish date all right so we do have a date object we're gonna format it into a string in the format that we want so the way we set the format for the date is we use a date formatter so let's call it let's call it D F and we're going to create a new date format or object and we're going to specify the date format to be a string now there is a website that is pretty handy for you to figure out what you need to put as the format for the date format you want so this website is called an estate for matter calm so for example if you want to have a date like this then here is the format you would specify so I'm gonna copy that and in here I'm gonna paste that okay and here's how we are going to set the date label a selftaught date label dot text equals d F dot string from date and we're gonna feed it our video daunt published we are actually going to force unwrap that so we're gonna say guard self that video not equal nil else just return okay so this would be okay and then lastly we have set the thumbnail and for the thumbnail we actually have to download the image we do have the URL in this thumbnail sorry this thumbnail property right here so we're gonna have to use URL session to download it much like in our model we see we created a URL object and then we got the shared session object and we created a data task and we downloaded the data then we checked that it wasn't nil so we're gonna do the same thing to download the data for that that video sorry for that thumbnail so let you are l equals actually before we do that let's check if there is a thumbnail URL because if there isn't then it's sort of pointless right so if so let's guard selfthought video dot thumbnail not equal no else oops here else return so if there is a thumbnail let's download the thumbnail data so let you our l equals URL object and we're going to use this one right here the self thought video thumbnail and then we are going to get shared you're all session object so let session equals you're all session shared and then we are going to create a data task so here we're going to say let data task equals session dot data task with URL with the completion Handler so we're going to pass in this URL here and I'm gonna force unwrap it and then inside here I'm gonna open up this closure to write a block of code that handles the response after its downloaded the data so we have the data parameter response and we have error and we're gonna check if error is nil and the data is not nil meaning there is no error and there is data then we are going to create the image object and we're going to set the image view oh and one thing we should actually check is check that the downloaded URL matches the video thumbnail URL that this cell is currently set to display and what I mean by this is that these cells they get reused by the table view so when you scroll the cell out of view it gets recycled and reused so there is a scenario that may happen where the data for the image is being downloaded and then the cell gets scrolled out of view it might have gotten recycled for another video and if that's the case when the data returns for the old video you don't want to be setting that thumbnail for the old video it was displaying and set it to the new video all right so when the data comes back check that what you downloaded is actually for the video that you're currently trying to display for this cell the way we can do that is just check if the URL dot absolute string is is not equal to self dot video dot thumbnail then video cell has been recycled for another video and no longer matches the thumbnail that was downloaded so we're just going to return not do anything with that data okay so if it passes that then we are going to create the image object so let image equals UI image with data and we're gonna pass in the data that that was that was downloaded so we're gonna do that and then we're gonna set the image view so remember modifying the user interface we want to throw that back to the main thread because this downloading over the network is done in the background thread so we're gonna use dispatch cue main dot a sync and we're gonna say selfthought the thumbnail image view oops that's the wrong one thumbnail image view dot image is equal to image just this guy right here all right and lastly we've coded up this data task and the code that gets run after the data comes back but we have yet to kick off the data task to to go and fetch that URL so we mustn't forget to do that so here we do data tasks that resume okay and so this this should be good this should work and what we're going to do after after this is to do an image cache so we don't redownload the same thumbnail images over and over alright so let's take a look at what this is talking about first now okay how about that because it's basically saying that this thumbnail property is not an optional it's it's actually you know by default it's an empty string so instead I'll compare it to empty string making sure that it's not empty okay so now we've finished off our thumbnail it sets the title it sets the date and it downloads the thumbnail we need to get the view controller to start using this so what we've done here in the storyboard is we've already told interface builder that this prototype cell is an instance of our custom subclass right so inside view controller you know when when view controller wants to display the first data item it's gonna ask the view controller using this this cell for row add method remember this is what we talked about in the previous lesson and we're going to try to grab that prototype cell using this video cell ID but because that prototype cell is no longer the default uitableviewcell it's actually our custom video table view cell when this method gets called and you're trying to grab that prototype cell with this idea what you're getting back is actually an instance of video table view cell so we actually have to specify that here so we're going to say you know you're fetching that prototype cell as a video table view cell and such down here we're going to be able to say cell dot set cell right and pass in that video now where are we gonna get this video well right here this line of code was from we wrote before to grab the title we're just gonna change it slightly and instead of just grabbing the title we're gonna say let video equals self dot videos and we're gonna get rid of that part so we're basically grabbing the specified video that this row is trying to display we're putting it into this constant and then we're going to pass that video into this set cell method okay so I can delete this comment because it no longer makes sense so now let's try this out let's run it and see what we get so what we should see are the actual video titles the dates the video thumbnails and stuff like that alright this is awesome this is awesome now we're going to change the content type of these images so that you know because it's trying to fit this thumbnail into the image view and by default I think it's not stretching it to fill the whole image view so let's click on thumbnail image let's go to the attributes inspector here and instead of the aspect fit we're going to choose aspect fill so this will attempt to fill up the entire image view while maintaining the same aspect ratio so let's run it using that content mode instead so that looks a lot better and you can see that dates are exactly how we want them so this is really awesome now the only downside is when I scroll something out of view and if that cell gets recycled and then I pull it back into view it's going off to redownload the same image data again so what I would rather have is just to save the image data so that we we can reuse it if we need to show the same image instead of having to redownload it and we can do that with a simple cache manager all right so to do that let's first create a new file inside helpers let's add a new file and it'll be a swift file and I'm going to call this I'm just gonna call it cache manager and we're gonna call this class the cache manager and it's gonna have a static method called let's say set video cache and we're gonna pass in a URL and this is going to be a string and also a the actual video data right so we'll allow it to pass in the data and the reason why this is a static method is so that we don't need to create an instance of the cache manager to use these methods there's no there's no point to doing that so we'll have another one called get video cache and you pass in the URL and you get back the you get back the data but it could be nil if that URL doesn't exist in our cache then we then we return nil and to store the cache we're just gonna have a simple dictionary static far let's call this cache dictionary let's just name it cache and we're gonna make this an instance of string and data so that's our dictionary right there initially it's empty so when we want to set data into it we just say cache the key is the URL and we're gonna sign into it the data very simple and use the URL as the key right and when we return we basically try to get the data for the specified URL so we just return cache URL now if that URL doesn't exist it's going to return nil and if it does exist and it's going to find the data and return that so this is all it takes and inside our video table view cell before we download the data we just have to check check cache before downloading data so if cache manager dot get video cache self thought video thumbnail we can actually assign it if let cached data equals that so essentially if we are able to find the data for that URL then it's going to get assigned into this constant cash data and then we can use we can use that constant in here if it gets nil back then it's not going to come into this if statement so when it comes into here we know that we actually found the data so we can set the thumbnail image for you so self thought thumbnail image view that image is equal to UI image and we can pass in the cache the data okay and then we're just going to hit return because we don't want to run the rest of this code to actually download the the image okay but let's say that the image data isn't inside our cache and we get back nil then it's going to skip this chunk of code and it's going to come down here and it's going to start downloading the data over the network so at this point what we're going to want to do since we've downloaded the data already save the data in the cache so we're going to have cache manager dot set video cache you know for the URL dot absolute string and here we're going to pass in the data actually let's do that let's see okay so we can force and wrap this URL and this data I guess we should allow potential Nils so in the cache manager inside here I'm gonna make this parameter an optional data type just in case that the data is nil and it should be good okay so I'm gonna build it that should resolve okay now let's run the project and I'm scrolling up and down and all of these images that have been that you see here have been downloaded in cache so I'm going to set a breakpoint right right here it should never come down here anymore because we don't have to download any more data right and when I scroll this you can see that no data is being downloaded anymore no image data that is alright so we've finished another chunk of functionality so I'm gonna go ahead and commit this to our repo and let's take a look at where we are I'm going to need to go into the desktop the YouTube one day build the folder that's where my project is get status all right I'm just gonna add everything and and add a commit message and say that added custom video custom table view cell and configured the cell to show video thumbnail title and date also added cache manager to save image data I think that's what we did all right now let's push all right cool all right so today you created a custom table view cell to display each video in the app you also learned how to download images and how to format dates now these are very common skills that you'll find yourself using time and time again for all of your future apps now I want to turn it over to you how have you been enjoying this app series so far I want to do more app series after this one but I want to make sure that it's helpful for you guys in that it's actually helping so give me your vote of confidence by leaving a quick comment below in the next lesson you'll be creating the detailviewcontroller so that the user can actually click into a video and watch it make sure you don't miss the video by subscribing to the channel if you haven't already and giving this video a thumbs up if you enjoyed it and finally you know the drill my project is in the description below just remember you have to add your YouTube API key to the constants file alright thanks for watching and I'll see you in the next lesson