hello welcome to lesson 13 of the learn Swift for beginners series in this video you're going to learn about optional and it's probably one of the most confusing things for beginners if you've ever looked at Swift code and you've noticed exclamation marks or question marks in the code then you've come across optionals so let's get started and find out what it's all about so right here I have a playground and I have declared a class blog post in fact if you've seen episode 9 on the first lesson on classes then this is going to look familiar because this is the example that we used for lesson 9 when I first talked to you about classes now we declared a couple of properties up here for our blog post class and these properties they represent certain things about what a blog post might have so for example the title the body is the author number of comments and you can actually safely ignore this function so I'm just going to remove it because we're going to focus on this stuff up here you'll notice that each time I declare a property right here I immediately initialize it to a value so title body author are all initialized to an empty string right when they're declared and comments is set to zero right right when it's declared now this is all fine and dandy but what you actually want some of these properties to be empty for example what if I want to tell if the blog post has an author or it doesn't have any author you might argue that well I can just check if author is equal to an empty string and if it's equal to an empty string then maybe there's no author well what if the author isn't actually a string what if it's actually you know we have another class here and we call it person and let's say that there's a name and we'll initialize the empty string but you know okay so in this case person is assigned to author so you know blog post has an has an author because it has this person object so how do we distinguish there being no author for a blog post well you have to be able to declare an author property and leave it empty because some blog posts may not have an author so the way to do this is if you remember from way way back then maybe lesson lesson 2 on datatypes I think you can actually specify for your variables the specific data type that it can store if you don't specify it basically the data type is inferred from what you assigned into it okay so for example if I wanted the title to be able to be empty I would craft it equipped type I'd get rid of this equals empty string because we don't want to sign in anything to it right we wanted a clear this property but leave it empty I would do it like that I would you know did specify the specific type and then I would put question work and that is an optional right there so when I declare this title is empty and this part basically tells us that the data type of title is string and this question mark attached to the string data type tells us that it could be nil which means nothing or empty it could be nil or it could actually contain a string so contrast this with the body property here this when it is declared is assigned this MD string so it's always going to have a value right whether it's empty string or maybe in the future we assign some text into it it's going to have some text but you know this title property could be empty in fact it is empty right now as we declare it so going back to this example with the author potentially some blog posts may not have an author so we can't just you know initialize the author property to a person object because that would mean all blog posts at have a person attached to the author right we want to make this properly able to be empty right so the way we do that again is we specify the specific data type put the question mark there next to the data type and we get rid of that part because you don't actually want to assign anything to it okay so in this way we have a blog post class which has an optional title property has a body which is initialized to an empty string so it at least always has a value and it may or may not have a person you know could have nobody assigned as the author or can actually have a person object to find out the author and number of comments will always have a value and starting at zero so you're going to want to pay attention now because I'm going to tell you how you should think of these optional properties that we have here and this is sort of metaphor or visual that you can think of that I was taught when I was learning this stuff and that is to think of the title property this optional string it could optionally contain a value or not think of it like a box it's labeled string but you can't see what's inside the box you don't know if there's actually a string object inside or it could just be an empty box it could be an empty gift box of someone you've been really bad in someone gives you an empty gift for Christmas that's never happened to me but if it has to you let me know in the comment section below but anyways you can think of an optional property like a box that may contain the actual object or it may not so how can you find out if there's actually the string object inside or not well you have to unwrap that box right you have to unwrap that gift in order to look inside and see and get at the actual object and that's exactly what we have to do in code now with our optional properties so let me let me create a new blog post object here let me say post equals blog post like that and what we're going to do here is we're going to say hey print out post dot body plus I don't know plus hello something like that okay so it basically just prints out hello because body is empty but let's just assign it to something like that so then we have something like hey hello write that totally makes sense because body we've initialized it to hey right when we create the blog post object it's already set to hey and then we concatenate hello to it so when we print post body plus hello you know you're accessing that property and in your pending hello anyways that makes sense so we can no longer do that with something like the title right because that's an optional it's it's wrapped up in a gift box and you don't know if it's empty inside or if there's actually a string object inside so you can't blindly use it you have to unwrap that gift box in and check if there's a value or not and then use it so now before we use title we have to check if there's actually a string object or if there's actually a value inside that optional and the way we do that is we do something called optional binding okay so it's kind of like an if statement so you say if but then you use the word let and if you remember using the keyword lettuce declaring a constant right and in fact that's exactly what this is you are declaring a constant here if let actual title equals title and then you open up these curly brackets so what you're doing here is you're testing sorry not title I meant post dot title because this is the optional property here what you're doing here is you're saying that you're testing you're unwrapping this this title property this optional and you're saying if there is a value in there then assign it to this constant called actual idle and then inside here you can use actual title as the value but if there is nothing inside this optional and if you unwrap it and it's empty its nil then don't execute this code inside so that's why it has an if statement here you're basically testing to see if there's a value inside this optional if there is you assign it to this constant and then you use this constant inside here if there isn't then it's just going to skip over this whole statement so in here we can safely now we can say you know print actual title plus and solute so there is no value in title so it actually skipped all this but let's say for instance we say here posts are title equals yo like that so now you can see when it does this optional binding and it unwraps this title because we have assigned something into it here it finds that hey I unwrapped the optional there is a value I'm going to assign it to actual title so inside this if statement we can use actual title and do this but if I didn't have this line here let's comment this out you can see that it completely skipped this and it doesn't crash or do anything like that because we're safely you know checking if there's a value inside the optional first and then we're using it now there's always different ways of doing things so in this programming language there's actually a way to be a cowboy and skip all this if you don't want to check it and you just want to use the value you know you know there's something inside what you can do is you can use you know you're going to not check it you're just going to use it you can it wouldn't be that it was a post thought title and you put this exclamation mark and this is called force unwrapping so what you're telling Xcode is you're saying that hey you know I know there's a value in here I don't need to check it I just want to unwrap it right away using this exclamation mark and I want to use whatever is inside of there right in this case it's yo so here we're you know we're accessing post title it's an optional property we don't care we're going to force unwrap that and we're going to take out that value and use it you know and so if you know there is a value inside you can do that but it gets a little dangerous because for example if there happens to not be a value in there and you're forced on wrapping it and you're trying to you know use the value well there's an error because and this is the error you get fatal error unexpectedly right because when you use this exclamation mark you're expecting that there is a value unexpectedly found nil when unwrapping and optional value right that exactly what I was telling you you're forcing wrapping the title and you're trying to use it but it was actually nil so you actually get a crash and in your career of building apps you probably will see this error unexpectedly found nil so now you know why so the safer way to go would be actually to use optional bindings so I'm going to press command set now command V for the Americans I'm going to undo undo all right do something like that and this is optional binding so another way where you can test before using is just it's just with good oldfashioned if statement and testing if it's nil so you can say something like testing for nil you can take if post sought title is not equal nil then print post title and because you have tested it that it's not nil in this if statement you can go ahead and force on wrap that and use it right so that work you can safely use force unwrapping because in this if statement you just tested that it's not no okay now the reverse if you want to check that it is nil is post title equals equals nil okay it's not equals no a lot of beginners make this mistake and they use one equal sign but one equal sign is for assignment remember that so if we're going to test for now you're going to use two equal signs like that and this is like optional contains no value okay optional contains value and then here for optional binding optional contains value so as with all of the other things we're learning with Swift we can go deeper there's additional things to learn about optionals like optional chaining and other ways of using optionals but this is your introduction I want it to tell you about what the question mark means and what the exclamation mark force unwrapping and how to check an optional before using it I wanted to introduce you to these kind of highlevel concepts and practically speaking you'll be using them most of the time like this and then in the future we'll touch upon the more complex things about optionals also you might be wondering why why and when you would ever use optionals but let me tell you you definitely will use it when you're building apps and when we do build our apps together you'll know what they are and you'll know how to declare options and how to unwrap them and how to check if they're no because you've watched this lesson okay so thanks for watching and please subscribe and thumbs up and share the video with other people you know who want to learn Swift 212 I'll see you in the next lesson bye for now you