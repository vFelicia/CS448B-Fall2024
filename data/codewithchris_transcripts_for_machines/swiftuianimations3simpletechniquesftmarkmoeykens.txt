hey code crew in this video you're going to learn three different animation techniques in swift ui now we're going to take the slots app that we built in this series and we're going to breathe some life into it with some subtle and simple animations even so you'll see how the ui becomes so much more responsive dynamic and exciting just using some of the simple techniques that you'll learn in this video but before we dive in i do want to thank mark from big mountain studio for sharing his knowledge you see he's been neck deep in swift ui for a while now and produced several swift ui books including swift ui views animations and how to transition from a ui kit developer to a swift ui developer so if you find that you like this video and you find that you like mark's style of teaching definitely check out his website over at bigmountainstudio.com alright without further ado take it away mark hello code with chris code crew this is mark moykins and i'm happy to bring you this video on switch ui animations chris asked me to do this video for you guys because i have written a book on swifty eye animations and he thought this would be a good fit and i'm excited to show you the three different ways that we can animate and expand this swift ui slots application but before we get into it there's something i want to talk to you about as far as what is needed for animation in order to implement animations in your app there has to be some view that changes and if you look at this page for my book the concept is a view that has a starting state and an ending state and what you're actually animating is that change between the start state and the stop state or the start and the end state so you might ask yourself well what can be animated and switch ui well i kind of have this general rule that anything that has a numeric property can pretty much be animated and i'm talking about things like size position rotation even color underneath a color is just numbers and so anything that has a number or a numeric value for a property can pretty much be animated but that's just my general rule of thumb just to keep it simple so let's take a look at chris's app and see what could possibly be animated okay we're in xcode and i'm currently previewing chris's app right here and you notice that when i spin there are mainly three things that change three views that change remember we need something that changes before we can animate it and so one of them is pretty obvious is that the images change on these tiles another change is the color the color changes from this whitish color to this green color right here and then the third change that we have is the credits so as i spin you notice the credits they go up and they go down so those are some changes that we can animate right there now the simplest and quickest animation that you can implement is to simply put an animation modifier right on the parent view so let me show you what i'm talking about here if we look at this view right here we notice that the root view is a z stack and if i collapse this then what i can do is i can just add a modifier right on the z stack called animation and what kind of animation do i want well to keep it simple we can just say default now your choices for animation mainly deal with the speed of the animation from the start to the finish the default animation starts slow speeds up and then ends slow this is also called easing in and easing out so when we click the max spin button right now you'll notice that green color is being changed here so the green color is using this animation now it fades in and fades out over 0.35 seconds now if you want to customize this animation further you know with that green color fading in and fading out you can do that by changing the default parameter here that we have so let's take a look you notice i talked about easing right easing in and easing out well you can see the three different options are here ease in ease out and ease in out it basically means you know start slow end slow or start slow and end slow with ease in and out you can also give them a duration so maybe we just want the animation to ease out we want to slow down at the end or we can use ease out if we want to and i think the duration might be too slow for you to really notice a difference so what we can do is we can actually increase the duration so let's do that let's add that duration parameter and if you notice let's back up here a little bit when i started typing in the different eases you notice there was a duration here so ease out duration so we can just use that and let's change this to one second again the default is 0.35 seconds so we're going to almost triple this okay good so let's test it now and we want to look for the colors and notice how they take a second now to transition to green see how it takes longer and it takes longer for that color to go away that's because the duration is now one second well we're going to change that back and let's just leave it at ease out and we'll go with the default duration which is about 0.35 seconds okay for the next animation that i want to show you guys it's actually called a transition animation and i'm going to apply this to these images these apples and these stars and cherries that show up now right now these images are just get replaced so this is in a card view like if we expand the z stack here we take a look down here we notice they're using a card view and so a symbol or you know the image is passed in and the background color is also passed in so let's take a look at this card view here i'm going to hold down command and i'm going to jump to definition go to the card view and we see right here so the symbol gets passed in and it just finds the image in the asset catalog and displays it well in order to do a transition i'm going to need to change this code and here's why let me show you something now a transition has to have three parts and that is there has to be a way to add and remove what's being transitioned so basically think of transitions as a way to animate a view into the view hierarchy and animate it out of the view hierarchy and that's using an if statement so it's inserting and removing a view it's not hiding and showing it's inserting and removing and you do that with an if statement like you see here and then we're going to add a transition modifier to that view so it's basically a way to tell it how do you want to insert this view onto your screen and how do you want to remove it from your screen and then the last thing we need is an animation and you notice here like this example is using animation default and we have something like that already right we added that animation modifier to the parent and the parent applies that modifier to all of its children including the card view that we're going to be changing okay so i'm going to have to change this code so instead of changing the image i'm actually going to be inserting it and removing it so we're going to need an if statement for that so here's what i'm going to do i'm going to evaluate the symbol that we get and i'm going to put an if statement around this image right here so what i'm going to do is i'm going to hold down command i'm going to click on image and you see there's this make conditional here so i'm going to click on that so now we have this if statement it added this v stack to it as well so for the true part i'll say if the symbol equals apple that's one of the our images then show it right here else and then another one is cherry if symbol equals cherry then we want to show another image then we'll have one final one because we only have three images and i'm not going to put an if statement there because we know if it's not apple or cherry it's going to be the star image okay now i'm going to move some of these down here first of all let me indent here now the corner in the background we don't need those specifically on the images themselves we can move those to the parent view which is now the v stack so i'm going to hold down command option and use my right bracket key to move that down and now it's on the v stack and then we want to copy these images here we'll put that in there put that in there fix the indenting and we can leave the symbol we don't necessarily have to use this text right here remember the whole purpose of this is to wrap our images with if statements because we want to insert them into the screen and remove them from the screen by inserting another image on top of it so let's just test it right now and make sure the app is still working i'm going to click the back button and it's already running here so let's just click it and as you can see it's still working nothing's really changed now remember there's three parts for every transition you have the if statement you know something that controls the insertion and removal from the screen you have the transition modifier and then you have the animation modifier well we have the if statement we have the animation modifier now we just need the transition modifier so what i'm going to do is on each image i'm going to add a transition modifier like this and as you can see it takes a type of any transition so i can type any transition and then i can choose from there so the example had slide in there so let's see what that looks like i'll use slide right here and i'll apply that to my other images like that let's fix the indenting and now what slide does is it slides in a view from the leading side and it exits the view from the trailing side so it comes in from the left and it exits out the right so let's run the app again and see how that looks okay now you see the images that are coming in from the left and they're exiting out the right with a new image that comes in from the left so it looks pretty cool now from here we can modify and customize it a little bit so let's go back to the card here and if you want to change it instead of changing it in three places we can change it in one place and we can just create a variable to hold our any transition here so let's do that let's create a variable here and it's a constant so i can just use let and by default i can just say it is any transition dot slide like that and then i could just copy this variable and just replace it here now i want to make this change in three places so one of the things that i can do is i can hold down option and shift and then click in the three different places that i want and then from there i can you know delete the code all at once and then i can paste it in all at once so it's just an easy way to switch things around now if you want to test that again we can go back let's resume the app here and as you can see it's still working right okay good so now when you want to test it all you have to do is just change this variable up here so instead of slide maybe you want things to move in from the bottom and then exit out the bottom so what we can use is called move and move it gives you an edge parameter and basically you can define where do you want it to slide in from and slide out from so we can say bottom if we want to we can also say top or you also have the other options like trailing and leading but we just want to go with bottom so let's see how that looks okay we'll go back and it looks like it refreshed there and now everything comes in from the bottom okay so that is using transitions now we talked about three different animation techniques so the third one is using a spring and the idea that i have is when this credit changes when you win money i want it to turn green and i want it to bounce and get a little bit bigger and then when you lose money it goes back to what you see here you know that's default state so we need to create that change we need to add that green color and make it a little bit bigger when they win okay so let's find the code where that win is processed and we're going to go down here oh i won't buy it okay so it's right here process win now this is where it checks and knows if you want or not by the matches that you have so if we go down here this is where you actually have a win if there's more than one match so we need some kind of variable to get set to true so let's create that variable and let's see here this is line 207 so we're going to come up here i'm going to create another state variable and i need it to be a state variable because when the screen changes or updates i need that value to persist and i'm just going to call it win and i'm going to default it to false okay so let's go back down here i said line 207 right yeah so here we go so if they win then we're going to set that variable to true all right and you know they can win and if they lose we need to reset that variable so what i'm going to do is just reset the variable right here there we go so it's always false unless they win and it changes to true now we need to react or respond to this value change right here this when this wind changes the true so let's go back up to our view here the credits which is right here and we want to change this background color so i said there's two things i want i want to change the background color to green and i want to make it a little bit bigger so let's take a look here when when i'm going to use what's called a ternary operator here say if statement inline if statement so if one is true then i'm going to change the color let me just copy this existing color here else it's going to be white and i'm going to change this to green like that so if one is true change it to green otherwise make it white and then the other thing i want to do is make it bigger so let's add a scale effect right here and again i'm going to use a ternary operator if when is true i'm going to make it 1.2 times bigger than it already is otherwise it's just going to be one times as big or it's normal size all right let's resume that and let's test it make sure it's still working okay we notice it's white and we're looking for a win there we go we got one win and notice they got bigger and then if they lose it gets smaller now the animation it's using right now is this animation right here the animation ease out and it applies that animation modifier to all the children while in switz ui you can override the parents property by putting on a different property on the child so we're using animation ease out and instead what i want to do is use an animation spring on this child so it's going to override that ease out animation with a spring animation so i'll say animation and i'll say spring now i can just use a spring animation right here like this and you'll notice as i run it it's hard to see the default spring animation it's hard to really see the spring so i want to give it more springiness to it okay so if you notice when i started typing in spring before there are a lot of different options and let's see for auto complete to work sometimes i have to start all over here okay there we go we're going to use this one right here now you notice there are different spring animations here there's interactive springs interpolating springs and if you want to know all the details between those different spring animations and to see examples then you'll have to look in the book i break all these down and then i test every single parameter but we're not going to do this in the video we don't really have that much time so instead i'm just going to use this override right here this spring with the response and the damping fraction the blend duration we're not really going to get into that because from the test that i've used and the conversations i've had with other developers it no matter what you give it doesn't really make a difference so let's use this one and we're going to delete blend duration because that is an optional parameter okay so for response what is response well let's take a look at something here apple defines the response parameter as the stiffness of the spring defined as an approximate duration in seconds a value of 0 requests an infinitely stiff spring so notice that apple said it's an approximate duration so think of it as that approximate duration now by default animations are usually 0.35 seconds long well we can increase the time of this spring animation by changing the response so what i'm going to do is i'm going to double it and i'm going to make it 0.7 and damping fraction what is damping fraction damping fraction so the word damping it means to reduce the maximum extent of something vibrating or bouncing back and forth like a spring so when you add a damping fraction you're stopping the springiness of the animation if you give it a zero it's just going to bounce and balance forever but if you add some damping to it like 50 damping like the middle picture it's only going to bounce half as much with the duration that you give it and then if you apply a one which is 100 damping then it's not going to bounce at all and you just have a regular animation okay so it's a fraction so it's between zero and one you know zero percent to 100 what i'd like to do is i like to start in the middle and just see how it looks so i usually start with a 0.5 and then we can test it there we go and let's see how it looks keep your eye on this credits up here come on we got to get a win there we go so i noticed it bounced a little bit right and it got bigger so 0.5 doesn't look bad we could stick with that and then when it gets smaller it bounces again if you want to make it more springy then you can just uh lower that amount so if we go to like point three let's see how that looks it'll be more springy there we go so it bounces a little bit more now you notice when it bounces look at the color you notice the opacity gets more solid more transparent more solid as it bounces right and that's because it's adding a spring animation to the background color as well now that's something you might not want to do right but how do you prevent one modifier from being animated when there's an animation on the whole view well it's pretty simple all you have to do is just add another animation modifier here and you can say dot none that way everything above this modifier right here will not be animated and anything below it will be animated so the corner radius and the scale effect will be animated but not the color change so let's try that there we go so now that you notice the color isn't animating it's not fading in and out all right great so that's it for this video you learned three different techniques for animating you learn that you can put an animation on the parent and it will animate all the children and all the changes that your children go through you also learned how to apply a transition to a view that gets inserted and removed from your screen and remember views get inserted and removed from the screen by using an if statement and then lastly you learned how to apply a spring animation you learned what the response parameter was where it's an approximate duration and you also learned about the damping fraction which holds down a spring or presses down or dampens a spring and then you also learned how to prevent other modifiers in the same view from being animated by applying an animation none to it and anything above that will not be animated but everything below it will be animated alright i hope you guys enjoyed this video back to chris thanks mark those were some pretty cool animation techniques and i learned a few code editing tricks in xcode as well so thank you so much for that now if you learned something new and you want to continue learning with mark then i highly urge you to visit his youtube channel and his website over at bigmountainstudio.com now i want to turn it over to you are you an existing ui kit developer who is transitioning to swift ui or are you just starting your app journey right now either way let me know by leaving a quick comment below and on your way down there don't forget to hit the thumbs up button and subscribe so you don't miss the next lesson i really appreciate it now i want to thank mark for presenting and i want to thank you for watching and learning with us thank you so much i hope you enjoyed it and i'll see you next time