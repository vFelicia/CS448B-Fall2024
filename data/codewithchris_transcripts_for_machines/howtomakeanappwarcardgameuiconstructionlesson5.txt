hello and welcome in this lesson we're going to be building the war card game user interface actually on second thought i'm going to have you try it first because i think you can do it come on you give it an honest try and then we'll go through the solution together but before you attempt this challenge make sure you've gone through lessons one to four especially if you're brand new to xcode swift ui and app development those lessons will give you the necessary skills for you to complete this challenge now before we start i do have one request hit that thumbs up button below for some extra good luck all right let's get started all right so we're going gonna start with an xcode project launch xcode and let's create a brand new xcode project we're going to choose app under ios and you can name this anything you want but i am going to call this war challenge because that's what it is and it's a challenge that i'm confident you can do interface is swift ui lifecycle is swift ui app and language is swift leave the rest unchecked and let's save it somewhere so i'm going to just save it on my desktop all right here's our brand new xcode project let's go to the asset library first because we're going to add all of the image assets that we need for this app if you go into the course resources folder under this lesson specifically you're going to find a zip file with all of the image assets so go ahead and unzip that and then let's drag all of these assets into the asset library now you should have the card back the background for the entire app and then you should have cards two to fourteen and no you're not missing card number one the ace is card 14 and the reason i numbered them this way is because we're going to use this number at the end of the card names here to represent the value and we're going to compare this value to see which card trumps the other and then we're going gonna have a deal button image and a logo image now just in case i didn't mention it before we have three different sizes for each image because there are different screen resolutions for ios devices so all of the newer devices have a super retina display and so they're using the 3x ones and i don't think they actually make devices that use the one x image asset anymore but this app was from a long time ago and we've rebuilt it many different times so we still have all three now let me show you the finished user interface and this is the end result that you're going to try to achieve yourself so this is what it looks like don't pay too much attention to the spacing as long as you've got everything generally in the right place um i think that's great another thing to mention is that this is supposed to be a button but since we haven't gone through buttons yet feel free to use an image element for that and that will be perfect for when we do transition to using buttons and i can show you how to change that image element to a button uh one other thing i have to mention to you is the concept of the safe area now the safe area is this region that starts about right here under the notch and it ends right here above this little handlebar and in some cases there are actually margins on the left and right side as well and anything within this region is in the safe area now this area is guaranteed not to be obstructed anything outside of the safe area so anything in this corner or this corner could be obstructed as you can see by icons or by the time and obviously there's this handlebar here that could be blocking things as well if you want a full screen background like this green background that we have here you're going to have to ignore the safe area because by default when you add elements onto the view it will try to stay within the safe area so there is a modifier that i haven't shown you yet it's called ignore safe area that you can apply to an image that will allow it to stretch beyond the safe area so that it reaches the edges and that's probably the only other piece of missing information you need other than that you've learned about stacks you've learned about image and text elements everything you could need to build this user interface so go ahead pause this video and give it a try yourself and then afterwards we will come back together and i will walk you through how to build this so welcome back how did you do were you able to build this user interface congratulations if you were able to build this or something that resembles this and if you got stuck or you weren't able to don't worry because we're gonna go through it now and oftentimes i find that if you try it yourself and get stuck and then later on find the solution those are oftentimes the best learning experiences all right let's go through this together now now before we dive in and start building this user interface i want to take a moment to sort of break down what elements that i can see here so first of all i can see that we will need a zed stack because we have an image behind all of these elements and so a z stack is going to allow us to position elements on top of each other next we have a v stack where elements are stacked on top of each other vertically so you can see a v stack running through this entire user interface top to bottom now some of the elements in this v stack will actually be contained within an h stack like these two cards side by side for instance and this element down here is going to be an h stack of two v stacks so this is a v stack containing the two text elements this is a v stack containing the two elements and then you encapsulate them in an h stack so that's the breakdown that i see and now we're going to jump into our contentview.swift and we'll build it out all right so here i'm looking at the contentview.com the first thing i'm going to do is to change this simulator to iphone 11 and let's hit resume and in a few seconds time might be longer we'll see a preview here perfect now let's change this default text element get rid of that let's put a z stack there open up a pair of curly brackets now what's sitting behind all of those elements is an image right and the image that we have is called background notice that it doesn't reach all the way to the top now it does overlap that safe area a bit i said the safe area was under the notch right here so you do see that it overflows but doesn't quite really go all the way there so we can add a modifier called ignores safe area when you do that it's just going to cover everything so okay so what's going to be on top of this background well like i said before we're going to have a vertical stack containing all of those elements the first one being the logo and then we're gonna have it an h stack with two cards and then an image element representing the deal button and then after that we're going to have the score vertical stacks in a horizontal stack so let me let me type this out so it makes a little more sense let's start with the logo at the top we're going to have an image and our image asset name is logo so you can see it just um just appears at the right size there and that's because our image asset is that size okay now let's put an h stack in here and inside here we're going to put two more image elements we're going to put the let's put card two and then card three so we have two cards in an h stack and then after that we're going to put another image element and this is going to be the deal button now comes the score labels so it's going to be an h stack but inside of the h stack we actually have two v stacks right each v stack contains two text elements so we're going to have player and we're going to have the actual score and then for this one we're going to have cpu and we're going to have the actual score of the cpu so we basically have all of our elements laid out now let's add some spacing to them so to do that we can use spacers so let's start by adding a spacer right above right above the h stack of the two cards below the logo image so i'm going to put a spacer element right there and what you learned about spacer elements right it takes up all of the available space however if you have multiple spacer elements in the same container it's going to evenly divide that space between the two spacers so i'm going to put another spacer right below the cards so now you can see that there are two equal amount of spaces i'm going to put another spacer below the deal button or image for now and then i'm going to put a spacer below the score labels so you got to make sure that you don't put it in the wrong place here we want to put it below this h stack and if you click this ending bracket you can see that xcode briefly lights up the beginning bracket so you can verify that that's where you want it all right and the last thing to do is put a spacer element above that logo so that's right here now from a vertical point of view it's all spaced out nicely for this h stack with the two cards why don't we put some spacers in there so let's start by putting a spacer in between the two cards and then a spacer before all the cards and the spacer after the cards we're going to do the same thing with the text labels down here in this h stack we're going to put a spacer in between the two v stacks and then we're going to put a spacer before it and the spacer after it all right and now the last thing to do is just to change the font colors of these text elements and also to change their font weights and font sizes and maybe add a little bit of space in between the the score and the label okay so let's click on this text element and take a look at what we could do so if you look in the inspector panel for the font you can choose one of these predefined font sizes uh for this one let's choose headline and you can see it it gets a little bolder there let's change this to white and we're going to do the same thing for the cpu label we're going to change it to headline we're going to change the color to white then for the actual score we're going to change the font to let's say sub headline and we're going to change the color to white as well and for that score label we're going to change it to sub headline and we're going to change it to white as well alright and if we wanted to make it actually not i think in in the original uh user interface i had it as large title so i'm going to change it to that so i'm going to change the zero from sub headline to large title now in order to add some padding in between the label and the score here um what you can do is choose the label let's start with the player here and let's click on just this bottom padding so enable that and then you can change that number to let's say 20. you're going to see that increase and that looks like a little bit too much so maybe we'll stick with 10. we'll do the same thing with cpu here we'll click just the bottom and then we'll add 10. you can see the corresponding code here it's adding padding but it's specifying only for the bottom edge and at 10 points and this is a good practice anytime you modify something visually adding a modifier or changing something in the inspector panel here it's a good practice to take a look at what has changed on the code side just so you can remember over time the more you see it the more you remember that hey if i wanted to change it to a headline style font i would just have to add a dot font modifier and pass in a dot headline option same thing for the foreground color for this text element dot foreground color color dot white you don't need to try to memorize it but just pay attention to it and over time you're just going to remember and typing it out will end up being faster than having to visually click around and configure things through the inspector panel or the preview canvas alright last thing to do make sure you save the project and you're done so in this lesson you built the ui for the war card game in order to respond to user interaction and to also programmatically change the card images we're going to have to learn some swift programming basics so in the next four lessons you're going to be introduced to coding basics with swift now if this is your first time learning to code take it slowly and don't try to memorize any of the keywords instead a better way is just to do all the quizzes and challenges at the end of each lesson and to make sure you have access to those visit codewithkris.com create your code with chris account or log into your existing one and then enroll in the 14 day beginner challenge and there you can access all the of the supplementary material after learning those swift programming basics we're going to come back to this war card game ui and bring it to life with code now finally if you like this video please give it a thumbs up and don't forget to hit subscribe and turn on bell notifications because i wouldn't want you to miss those upcoming swift programming tutorials alright thanks for watching and i'll see you in the next lesson