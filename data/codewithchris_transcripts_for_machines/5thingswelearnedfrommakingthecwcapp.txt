Creating an API is a very fulfilling process, and as much as we want to finish building an API and show it to the road, the journey is or something that needs to be equally recognized. Building apps on your own is already a challenge in and of itself. So when you think about building one with a team, you think that it will be a lot easier. Right? Well, personally, it depends on the scale of the API or the project that you want to build. In our case, since we were building the code disgrace API, we had to pull in some help to make this a fun and productive ride. So how is our team's experience building an app from scratch? Let's find out. Hey, Code Grove. My name is JC, and I'm the digital designer here at Cubit. Chris, the best place to learn iOS development. If you're new here, this will be the first time you're seeing me on this channel, much like everyone else. For today's topic, we're going to take some time off actual developing and coding tutorials, because in this video we'll talk about the top five things we've learned from building the Cwt app. For those of you who didn't know we've been building the CWC API for the past three to four months with the goal of catering to a much wider audience, but most importantly, making our lessons available offline and on the goal. So in that journey, we learned a few things along the way, starting with point number one, never bite off more than what you can chew. So just a little background. When developing this API, we use a method called Scrum, which utilize the Agile framework, meaning we'll be having sprints and stand up meetings during and in between those sprints. So if you don't know thing about agile development, this is kind of like what it looks like. And when we first started our work on the CT API, we had lots of goals. When it came to the overall availability and experience of the API, we planned on getting this out on iphones, ipads, and even macOS until we realized that our team is only composed of three developers and one designer. So we're leasing it to multiple platforms would take so much time and resources, which we didn't have. And the funny thing about this is that we realized this at the end of our second or third sprint. So during our first, we were really going big in terms of our workload don't get were wrong. We knew that we had a small team, but the mistake was that we were too ambitious when it came to what we needed to do that considering the limited resources that we have. So by then I already finished the design for the iphone. And so what's next on my list was to scale those designs for the ipad. And then the team got into talking and agreed that scaling something that isn't fully functional can be super risky. So we decided to just focus on mobile designs, refining them every week or every sprint, and adding features that would definitely improve the experience of the API, and that's like a top level scenario. A more specific example, I guess, would be that some of us would click on as many tasks in one sprint, not considering that each task, especially on the development side, would take up so much time than what was initially anticipated. So at the end of every sprint, we had to do a retrospective where we'll assess the things that we did well in the obstacles we encountered along the way of those is taking big or plenty of tasks that will just end up in the backlog or carried over to the next sprint. And we learned that this is not practical because when the next sprint starts, our focus will be on finishing the backlog of the previous sprint, and a scheduled task of the current sprint will be pushed back until we clear the backlog. So on the other hand, if only we were conservative and realistic about our goals, then we'll be able to finish all our plan tasks on time. So the takeaway is to never bite off more than what you can chew. Set realistic goals by considering the difficulty of every task you'll take. So even if you have fewer goals in a set time period, if you complete them on time, then you'll still have the chance to take on another task, which could lessen the amount of tasks that you'll have to do in the next print. And that just creates a positive ripple effect on the subsequent sprints or stages of the project. So learning number two is having a clear and definite assessment of the deliverables. So this one's a little related to number one. But the main difference is on the specific tasks that each of us needed to complete. So in the process of building the API from scratch, we had to consider a very big chunks of assignments that needed to be broken down into something that can be achieved over a set period of time. So for example, if we were going to create an onboarding flow, you can think of it as one task. If you just say, create an onboarding flow. And I don't think that that's already a clear or definite list of what we need to do. So when we assess or cut through that big chunk of task, we realize that there's more to it than meets the eye. So under this general tasks like creating an onboarding flow, for example, there are more specific tasks like implementing error States, choosing the right illustrations as part of the welcome message keyboard placement, like what would happen to the contents on the screen if the keyboard shows up and so on and from there, it will be a lot easier for us to decide who will take on which item. So for me. Of course, I was responsible for all the design related work, but since the API will also have other views and functionalities that we'll need to click on, it was important to assign who's the developer that's going to work on this functionality, who will work on another functionality, and so on. And so the takeaway is that by having a clear outline or assessment of your deliverables, by breaking down milestones into smaller pieces, we were able to plan out and focus on immediate task and progressively finish goals towards that milestone. So learning number three is to master the fundamentals, but never forget the little details. The fundamentals are simply the base yet most necessary things that need to be worked on. Beat on the soft side or technical side of things. So on the soft side, you have, for example, teamwork communication, managing task, and so on. While on the technical side are the efforts on prioritizing basic functionalities and making the app usable. However, because what we do here at code with Chris is primarily focused on education. We felt that it's equally important to invest in interactions, animations, really good visuals to make a delightful learning experience. We all know that education can be pretty monotonous, but with codes Chris, especially with the API that we want to make it shouldn't be. So our lessons are already beginner, friendly with good pacing, and we want the API to reflect or complement that kind of value. We don't want it to be just another learning API that you can use. We want it to be the API that you will use if you want to learn iOS development. And so we really took the extra time to pay attention to a little bit of interaction design, just a little choosing right illustration, colors and so on. So we did this in order to cater to our goal of creating an API that's delightful to use. So I just want to live this off with a code from the legendary designer Charles Eames that the details are not just the details make the design. So learning number four is be transparent about your load. Vince, Chris and I also work on some areas outside the CWC API, like there's the content creation in the course side of things. That meant that our time wasn't 100% dedicated to making the CWC API itself. And since we were working in a team, it was really important that other team members knew what our actual workload outside the CWC API project was, because that way it will also give them an idea of how much work to expect from us in a day or in a week, because if we had the same amount of CC app task as anyone else, chances are they will be affected by other tasks outside the CWC API, which are in higher in priority. And if the rest of the team were expecting to finish these tasks in a given time frame, and it didn't because of other factors that we weren't able to disclose. Then that could snowball into a really big problem that could have been avoided if we had been transparent in the first place. Well, fortunately, this was one thing that we really did because we were aware of our limited at resources. So we had to be transparent about expectations and other related stuff. And in your case, if ever you're going to build an API with a team, it's not just about the workload. You should also be transparent about some personal factors that will affect the work that you're doing. A good example for this is Jesse or Scrum master had a problem or injury with this risk, and so we had to take into account that he won't be able to work as intensively because of that injury. So we had to diversify the load to other developers and adjust some deadlines to minimize any delay or problems that could occur at the end of the day. Transparency are really important and will be really handy in whatever is that you're doing. So last but not the least is that perfection is the enemy of done. So a lot of tech and creative companies always say that perfection is the enemy of done, because in a setting like this, API development or product development like Striving, perfection is really inefficient. So when you think about it, in my case, if I kept on looking for mistakes and multiple feedback from the team regarding the designs, the API is never going to see the light of day. It's just going to get stuck in an endless round of revisions until every team member is satisfied. So why? Because everyone is trying to get every inch of the API presuming that we don't have to do or touch on these things again. And this is inefficient and ineffective in a lot of ways, because API development or software development is an Iterative process. It's always been and it always will be. So it's totally fine if it's not the best looking API in the first release was important is to nail the foundations, like making the API usable, establishing a clear navigation, all these sort of things. It's also very counterproductive or for planning and development to take months when the end result will still require work anyway. You know, it's going to be really unfortunate if it did take us a year to make the API perfect in its first release and then work on updating it a week later. So it's never really about getting it perfect, but it's about making it good enough finishing and releasing on time and making meaningful improvements from there, because the journey to perfection is going to be a really long one. All right. So those are the most important things that we learned when building the CC API as of filming. The app is still currently in the works. So if you want to stay updated about this development, especially it's released and make sure to like this video and subscribe to our weekly newsletter. Or better yet, to our YouTube channel. And if this video sparked your interest in building your own app, then you're in luck. Because our free 14 Day Beginner Challenge will be able to help you with just that. As always, thank you so much for watching and we'll see you in the next video.