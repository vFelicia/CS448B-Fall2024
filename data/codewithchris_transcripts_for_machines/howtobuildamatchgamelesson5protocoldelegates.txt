hey welcome in this video you're gonna learn about special communication pattern that the collectionview uses to talk to the view controller and this is very important because we're going to be using this concept and all of the apps that will be building together furthermore it's not just the collection view that uses this pattern but there are many other elements in UI kit that do the same thing now I'm gonna warn you it may be a little bit hard to understand at first but I'm gonna use a lot of examples and analogies and I highly recommend that at the end of this video you download that worksheet and you try out the examples and get some handson training alright enough talking let's do this first let me illustrate what the problem is so far we've mostly been adding user interface elements to the storyboard and then connecting them to iboutlet properties in the view controller so that the view controller can reference them and manipulate them for example if the view controller needs to disable the button after the user submits a form it has the submit button iboutlet property to do so all of this communication is oneway the view controller instructs the elements to do things the v controller knows about the UI text field class and knows about the UI label class it knows about the UI button class and it knows that this UI button class has a property called enabled that it can set to false if it wants to disabled that button now let me ask you a question what if the UI button needed to ask the view controller for some information how do we make that communication twoway the UI text field UI label and UI button classes are all UI kid classes so as we're coding the view controller class we know about all of these UI kid classes and all of the methods and properties that they contain so we can have our view controller class call on these properties and methods of these UI kid classes however the reverse isn't true the UI text field UI label and UI button knows nothing about the view controller class they don't even know that this class exists furthermore we're able to create custom classes as you saw in the last lesson the UI text field UI label and UI button wouldn't know about those either let's use a more concrete example in the last lesson we up our project and right now it looks a little like this the view controller has a reference to the UI collection view element through the IBL elec property so it can manage and manipulate the collection view however the way that the UI collection view class works is that it only displays enough information to fill up the screen so for example if you had a thousand pieces of data to show and only three would fit on the screen the collection view would only show three it does this for performance reasons if it displayed all 1,000 even if only three were visible chances are your phone would be very slow and sluggish as it starts to run out of memory when the user starts to scroll the collection view it is at this point the collection you would ask for the next three pieces of data this means that the UI collection view element needs a way to ask the view controller for the next three pieces of data but the problem is the UI collection view class doesn't know about the view controller class so this is the problem how will the UI collection view ask the view controller for data even if it doesn't know anything about the view controller class well let me tell you how by using an analogy let's say that there's a police officer who stumbles upon a crime and she needs to call it in so she grabs her radio connects to a dispatcher and tells the dispatcher some codes to indicate what sort of crime it is the dispatcher understands the codes and dispatches the necessary emergency vehicles let's examine this scenario when the officer connects to a dispatcher she doesn't care who is on the other line she doesn't know that dispatchers name gender height and weight none of it matters the only thing that matters is that the dispatcher knows the protocol what is the protocol well in this case it's a set of predefined codes that can be used for communication so when the officer tells the dispatcher we've got a 902 she expects the dispatcher to understand this code and react to it accordingly it works because they are both following the same protocol let's label the scenario with some iOS terminology now we've already established that there is a protocol let's say that there's an officer class too and this officer is an instance of that class the officer has a radio right this radio represents the property that the officer class uses in order to have a reference to the other party in this communication pattern and in case you forgot you learned all about properties back in module one now again the officer has a radio property that references another object on the other end of the line the officer doesn't care what or who this object is it can be a person it can be a dog a cat and a lien as long as it conforms to the protocol and understands the codes then it's all good this other party is called the delegate so the property on the officers side is sometimes called the delegate property let's run through this scenario again this time using iOS terminology the officer object discovers a crime and then uses its delegate property to report the crime the delegate property references another object which is an unknown class type however this class conforms to the protocol the protocol lists some methods and properties that can be used for communication the police object uses one of these methods and calls it on the object that is referenced by the delegate property since the delegate object conforms to the protocol it has implemented all of the required properties and methods that has been outlined by the protocol this is how the officer object can call a method on the delegate object even though it doesn't know what class type it is the officer object knows that as long as the delegate object conforms to that protocol it is sure to have the methods and properties listed in the protocol so here I've got a brand new playground and all I've done is declare two empty classes to represent the two parties in the communication pattern following the diagram that we just talked about the officer which is going to report the crime to the dispatcher which is going to listen for the codes and then go do something with it so first of all what's missing here is the protocol that these two parties are going to use to communicate so as establish a protocol and the key word to use there is simply protocol and we have to give this protocol a name so I'm just going to call it police codes so pardon my ignorance if you actually are a police officer you are probably just laughing your head off at me right now anyways in this protocol called police codes I am going to have a method inside called let's use the example that we used earlier in the diagram I'll just name this 902 like that and we are not actually implementing this function here right in the protocol that's the job of the dispatcher who is going to conform to that protocol so all you need to do is just list out in this protocol that anybody who follows this police codes protocol will need to implement this method now as we talked about before in our analogy the police officer class has a delegate property and this delegate property references the other party in this communication so in this officer class we are going to create a delegate property and most of the time you are going to be naming a delegate but in this case because I want to make it very very clear and follow that analogy that I use I'm actually going to call this radio just so you remember that this property references the object on the other end of the line so the funny thing is that a protocol like this one police codes is also considered a type so we can say that this property this radio property here is going to be a type of police codes and furthermore because we don't know if there's going to be anyone at the other end of the line when the officer tries to use the radio this has to be able to return nil and you learned in the optionals lesson that you can specify this property is an optional by using the question mark so this property may reference nothing or it may reference an actual object that conforms to the police codes protocol okay so now that we have our officer class with a delegate property we are going to create a function or a method here and when this method is called it is going to call in the 902 code via the radio so we are going to call this one maybe we'll just say call it in that's my method name and inside this method name we are going to say radio dot 902 and remember this radio is a property that references some object that conforms to police codes and sends police codes lists this method we know that whoever is on the other line will have this method and this question mark here is just called optional chaining what happens is that when we try to call this method if it happens that the radial property is nil then this is not going to crash however if there is an object that the radial property is referencing then it's going to attempt to call 902 on that object so now why don't we create our objects and try to facilitate the communication so let's use I'm going to say VAR o stands for officer and I'm going to create a new officer object I'm going to say var D is equal to a dispatcher object and actually we can use the let keyword and we can use constants because these aren't going to be changing and next what we have to do is we have to set our dispatcher object as the person on the other end of the radio for this officer so we are going to say o dot radio is equal to D unfortunately we are going to get an error we can't assign this dispatcher object to the radio property and the reason is because we've never said that the dispatcher class conforms to the police codes protocol and if it doesn't conform to the police codes protocol we cannot set it to this property here because as we stated here with the datatype whoever sets itself to the radio property must conform to police codes so how do we get the dispatcher class to conform to the police codes protocol well what we have to do is use this notation and you might recognize this from the inheritance lesson you use and then you put in the name of the protocol there and just like that we are able to say that the dispatcher class conforms to this protocol Xcode asks us to double check it says that dispatcher does not conform to that protocol because we haven't implemented all of the required methods and properties of that protocol all right so that's what we have to do in here we have to say we have to actually implement this and let's say that the dispatcher when it receives a 902 code it's going to print you know something 902 received and handled or something like that and so now this line is valid we can set this dispatcher object to the radio property and now when we call the collet in method you can see that the dispatcher has received that code and it has printed out this statement now take a look at how cool this is because in the officer class there is no reference to the dispatcher class right the officer class has no idea that this dispatcher class even exists the reason that the officer class can communicate to the dispatcher class is all because of the protocol and delegate pattern so just to walk through this again we have an officer object we have a dispatcher object we are setting the dispatcher object to the delegate property of the officer object and because the dispatcher object conforms to the police codes protocol the officer object even though it has no idea about the dispatcher class and what methods or properties might be in the dispatcher class it knows at least the dispatcher class has all of the things that are listed in the protocol now might still be hazy to you but we are going to implement this in the match app and then there's also a worksheet for you to run through some exercises to wrap your head around this whole protocol and delegate thing and it's actually a very important pattern because a lot of the classes in UI can use this pattern to communicate with other classes without knowing about them alright let's go back to our Xcode project and see how the UI collectionview uses the protocol and delegate pattern alright so here we have our Xcode project and as you can see we do have this collection view in our storyboard and as it turns out we actually do not have an iboutlet property referencing that collection view yet so we have to do that connection let's go to the assistant editor go back to the storyboard on the left hand side we should see this document outline and you can always hit this button to expand or collapse it on the righthand side you should be seeing the view controller without Swift and just a double check you can click this little breadcrumb and go to automatic and go to view controller if you have this part highlighted if you have some element highlighted in there if you go to automatic it should select the right corresponding complementary file all right so we are going to highlight collection view hold down ctrl and click and drag it just right there and I'm going to call this the collection view so now we have an iboutlet property let's go back to the view controller here and if I moved a little faster I just click this button to go back to the standard editor alright so now that we have this collection view let's take a look at the uikit documentation for this class and i want to show you the protocol that it uses and also the delegate property if you hold down option on your keyboard you're gonna get this question mark as you learned in module 2 and you can jump to the class reference now right here it jumped to the UI collection view delegate but let's go up here is what I wanted the class documentation for UI collection view now scrolling down a little bit to where we see all of the properties and methods of this class you can see that here is the delegate property for the class and here is the type basically the protocol that's associated with this delegate property and this protocol is called UI collection view delegate down here you can actually see that listed here and if you click into it you're going to see all of the methods and properties that are in that protocol now I just want to mention that a lot of these are actually optional so if the delegate doesn't handle the optional methods it's fine it nothing's going to happen but there are a couple that are absolutely required and I will go through those when we actually implement it in Xcode now it's hard to tell actually which ones are required and which ones are optional from this documentation but just based on my experience I know which ones are required and also when you state that your class conforms to this protocol if you haven't implemented one of the required methods it's going to let you know so you're going to get an error so that's kind of through this trial and error you're going to understand which ones are required if we go back for a second into the UI collection view actually I want to point out that there are two protocols where were we here right here there are actually two protocols that the UI collection view class uses to communicate with other classes in that second protocol is this one UI collection view data source so the collection view uses this protocol to ask for the data source to power that grid layout right for the items to display in that grid and for this protocol the UI collection to delegate this one is for the collection view to let other classes know when certain events happen such as the user selecting a cell in the grid so as such there are actually two delegate properties with the UI collection view class the first one is this one we already went over this property is called delegate so whoever is assigned to this delegate property must conform to this protocol and that object will get notified when certain events happen in the collection view such as the user tapping on a cell now someone else it could be the same object needs to assign itself to this other delegate property called datasource now don't get fooled that this property is called data source and not delegate because in our police officer example our delegate property was called radio so this one's called data source whoever assigns itself to data source must conform to the UI collectionview data source protocol and the collection view we'll be asking this object for data to show in the collection view so for our match app we are going to be assigning the view controller to both the data source property and the delegate property and as a result our view controller needs to conform to both of these protocols okay so let's jump back into our view controller class and make this happen so first of all if you remember back from the playground in order to state that your class conforms to a protocol use this and then you state the protocol named after it so right here we actually have a superclass because the view controller is a subclass of UI view controller that's completely okay because what we can do is we can put comma and then we can do UI collection view delegate comma UI collection view datasource and like this you can actually have your class conform to multiple protocols and at the same time be a subclass of another class now Xcode is going to complain right away because it detects that we state that we conform to these two protocols yet we haven't implemented the required methods for those protocols yet before I do that though there's one step that we need to take care of because oftentimes I still forget this sometimes so I usually try to do it as soon as I can and that is setting the view controller as the delegate for the collection view we can do that in the viewdidload method here so we have a reference to collection view let's access the delegate property and let's assign the view controller which we can use the self keyword for and assign that to delegate remember I said that we're going to assign the view controller to the datasource as well so let's set the datasource property also to self so if you're confused about this part remember back in the playground with the officer example we had created an officer object and a dispatcher object and then we had set that dispatcher object to the radial property of the officer right so we're doing the same thing here we're setting the view controller to the delegate and the datasource properties of the collection view so when the collection view needs data it is going to communicate with the view controller through the methods stated in this protocol and when the collection view needs to notify another class about events happening to the collection view such as a user tapping on the grid it's going to tell whoever is assigned to the delegate which is the view controller and it's going to communicate through the methods listed out in this protocol alright so now it's time to get rid of these errors here we need to implement the methods that are required in these two protocols so usually what I like to do is create a separate section for these sort of protocol methods and you can do that by using this mark keyword and it's basically a comment I'm going to call this the UI collection view protocol methods and you can see what happens when you pull down this kind of jump list to all of the properties and methods that you see this section header here and this is created by this line here so it's a quick and easy way to organize your code within a class we're going to start by implementing the required methods of the datasource protocol first so one of them are the number of items in SEC's so the collectionview is actually going to ask its delegate for the number of data items that it needs to display and this is the method that it does it through so that's why in the side the view controller we must implement this method we basically have to return a number for the number of items that are going to get displayed that's really easy for us because we have actually gotten the cards from the model and set it into card array so all we need to do is return a card array dot count okay and another one that we have to implement is when the collection view asks the datasource which is our view controller for new data to display for actually for each individual cell that it needs to display so this method is actually called you can't even see the whole thing but it's this one right here if you just start typing cell four you're usually going to get the right one let me show you that again so you can see that kind of highlighted there if you double click that this is the cell for item at index path in the index path basically describes which sell the collection view is asking for it comes with two different parameters a section in a row so the section is usually just the first section unless you have multiple sections in a collection view which you can have and the second property is a row which is almost like an index in an array so if it were trying to display the first item and you only have one section in your collection view this section would be 0 and the row would be 0 as well and what you need to return is a UI collection view cell object which is basically a cell in your collection view so what we can do in here first of all let's create a constant so we can assign our cell to it and then at the end here we are going to just return that cell so the collection view actually has a method called DQ reusable cell with reuse identifier for index path and this method will basically try to get a cell that it can reuse maybe a cell that's scrolled out of view or it will create a new one so the type of cell that it's going to create is based on this reuse identifier and where is this identifier well if you remember back in our storyboard when we created this card cell right here and if we went to the properties here we gave it a identifier we called it card cell so when we put in this identifier to that DQ method it is going to try to get an existing card cell which has been scrolled out of view and is no longer visible so that it can reuse it or it's going to create a brand new one so either way we're gonna get a cell back so inside here this reuse identifier parameter we are going to put in card cell and for index path we are just going to pass in this index path that it was asking for and we get back a cell now how do I know this method returns a UI collectionview cell well let me show you when you use dot notation and you hit dot right there this left part tells you the return type of calling this method so when you call this method DQ reusable cell you're going to get back an object of type UI collection view cell all right so that's how you know let me just undo there you go and so that's why this constant cell is going to be pointing to a UI collection view cell object and then we can simply return that cell all right so now as for the second protocol that we have to implement there is not required but optional and we will need it it is did select item at so I've been talking about this throughout this video this event happens when the user taps on a cell in the grid so we're going to want to capture that I'm just going to leave this as a to do right now or empty but this protocol method is part of the UI collection view delegate protocol which is this guy right here all right so let's run our app right now so hopefully what we will see is a grid of cards so while that's similar loads let me just remind you of what we did in this card model here see in the gate cards method we had randomly generated eight pairs of cards that means there are 16 cards when we go into the view controller and the collection view asks for the number of items we are going to return card array count which is going to be 16 and so this one this one where it asks for the cell is actually going to be called 16 times 1 for each cell that it needs to display all right so it did load up and you can kind of see the white background of the collection view but we can get rid of that so you can see right there there are 16 4 rows of 4 so hopefully you got this result too if you didn't I would just doublecheck that you remembered these two lines because it's very important to set the view controller as that object that the collection view should contact for any events that happen in the grid as well as for the data that is going to power the grid and if you do have these two lines and it's still not showing anything what I would do is just double check that model dot get cards is in fact returning some card objects into the card array it could be that your card array is empty and that's why you're not seeing anything in the grid and actually one more improvement we could do is probably just call get cards before assigning the collection view delegate and data source so what do you think was it easier or was it harder than you thought either way I would highly recommend that you download that worksheet to practice this concept in that worksheet you'll be implementing the collection view in a demo project if you do the worksheet and you still don't understand it please leave a comment below telling me which part confuses you or what you're having trouble with and I'll jump in to clarify or maybe a fellow student will lastly if you like this video and you want to see more please consider subscribing by hitting that red subscribe button below and if you want to get notified when new videos come out remember to hit that Bell icon as well ok thanks for watching and I'll see you in the next lesson