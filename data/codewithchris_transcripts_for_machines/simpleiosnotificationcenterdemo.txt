hey guys what's up it's Chris here I've been busy freshening up some of the content on my site as well as finishing up some modules in my courses and there was one video that I was talking about Notification Center I just recorded it and published into my course that I thought would also make a great standalone video for the YouTube channel and just to give you a little bit of context in the app that we're building inside of the course that looks something like this where we had this part and we were able to write a review and then when you put your cursor into the text field or the text view the keyboard would slide up and cover the text to you so animating that whole chunk to go up and not get covered by the keyboard was something that I actually covered in a YouTube video here in this one iOS keyboard blocks text field so to give you a little bit of context in that video you listen for a notification that gets sent when the keyboard slides up or down and that notification contains some info about how far it's going to slide up and then you simply animate your constraints to slide up your view now I decided to expand on that and demonstrate for people in the course how to use Notification Center to not only receive notifications but to post notifications as well and I thought that would be a useful video for the YouTube channel as well I just want to warn you guys that in the following video I do mention things like the delegate and protocol pattern which I haven't covered on this channel specifically and I do say things like in the previous lesson where we did this a nut and obviously I'm referring to content in the course but I hope that that doesn't bother you too much from the core content or the core message of the video which is to teach you how to use Notification Center to send and receive notifications so thanks for supporting the channel and I will get back to posting more regular content soon on the channel I hope you enjoy this video hello in this video we are going to talk about Notification Center and I'll show you how you can use it in your own project now this demo right here isn't directly related to the app that we are building but seeing is how in the previous lesson we did use Notification Center to handle the notification that was sent from the keyboard sliding up or down I thought it'd be interesting to do this separate demo to show you how to you use Notification Center not only how to receive notifications like we did in the previous lesson but also how to send notifications and this will give you another tool in your arsenal to facilitate communication between objects rather than only using the delegate and protocol pattern now I do tend to like the delegate protocol pattern more and I will tell you why at the end of the video so first of all let's work on this Xcode project it's a brand new project it's a single view application I haven't done anything to it yet but in the view that load let's listen for a notification which we're going to create so register to listen for a notification and we use Notification Center dot remember default just like when we use user defaults we're going to use add observer here for the observer we're going to say self selector we're going to skip that for now and for this name now that we're not handling a specific notification from the keyboard we can make up any name that we want this is going to be our custom notification so you go ahead and type NS notification dot name and then it has an initializer method where you can pass in a string now I'm not sure what the difference is between these two the parameters look the same I think they basically are the same thing and let's call this notification test now you would probably call it something more descriptive and again you can listen for this notification from a specific object and only handle that case but I'm going to put nil and it's going to listen for the solicitation no matter which object sends it okay so down here let's create a function I'm going to call it no slide you'd probably want to relate it to the notification actually so you know what let's give it a better name here and say for example we've been downloading data from the model and then the model has been has has had to notify the view controller back so we can do something like data downloaded or something like that so this function let's call it data downloaded notification or maybe I wanted to type something like data downloaded notification received but as kind of too long for my liking you know what I'm just going to leave it like this as data downloaded descriptive enough and also I'm going to create a parameter for the notification just like we did in the previous lesson okay so now we can go back up here and use autocomplete on our selector so hash or pound selector and I'm going to start typing data downloaded let autocomplete find it and then press Enter so here I've registered to listen for the data downloaded notification and it's going to trigger my data downloaded function okay so now we need let's print a statement here print triggered now we need a way to send that notification right here okay so I'm going to go in the storyboard and I'm going to trigger the sending of it via this button here let's just Center it now obviously this is a trivialized example because you know why would you want to click a button and send a notification right ok so I mean you can use let's do it from here so I don't accidentally add a constraint after let's do action here let's do an attempt tonight ok so in order to send it we would also use Notification Center default dot post and we're going to use this one here where we can specify a name for the notification and also an object so here you see this user info dictionary and remember how when we received the keyboard notification it had a user info dictionary which contained a bunch of keys and a bunch of values that told us you know where the keyboard would slide up to and how fast it was animating well you would use this one if you wanted to pass some information like a dictionary that contains some info and then the receiver when you receive that notification you can get this user info dictionary out but I'm going to use this one which does not include that parameter because I just want simply to trigger my data downloaded function there so this is the important part for the notification name that I'm going to send it must you know it's got to be this one right here so NS notification dot name dot in it and as long as this string matches it's going to trigger now this object here again there's an object parameter and this allows you to target a specific object to send this notification to so if I if I put an object reference here into this parameter only going to send this notification to that object but if I put nil it's going to broadcast it so let's do that let's run the project now when I tap on that button it should fire off this notification called data downloaded and because the same object has registered to listen for it it's going to trigger this function and print out triggered in the console of course this demo this example is kind of trivial like I could have just made this function call right ideally you would use this sort of paradigm across across different classes so that you know an object can send a message to another object to trigger something to happen so tap on this button and you can see that it prints out triggered down here in the console now so you know doing this example you might think that oh this is a lot easier than then doing the delegate protocol pattern why don't I use notifications for everything so I'll tell you why the reason is because there's so much freedom that it could be very hard to debug so the delegate and protocol pattern is good for use in a onetoone relationship and you have one object that needs to talk to another for example the table view right the view controller owns the table view so the table view would only ever need to talk to the view controller now for Notification Center using this it's good for a onetomany sort of relationship so imagine that we have a multiplayer game or something like that and the game server needs to broadcast the message out to all of the game clients that are connected to the server while all of the clients would have registered to receive notifications from the server so the server would only have to do something like this and post a notification or broadcast it and then every single one of those game clients would receive that message and then do something whatever that may be so that's why it's harder to debug because you can send out a notification you can broadcast it and you don't know you know we're in your app which objects have registered to listen for it they could be one there could be multiple and it could be anywhere so you would probably have to just take this notification value and do a project wide search for it when you're debugging so it I mean it's possible to debug but it just makes it a little more you know it's a wider net that you have to cast and there's more things that you have to look at because the communication can be going anywhere and anybody could be listening for that notification whereas with the delegate and protocol pattern there's only one object subscribed as the delegate you know for another object and then it needs to conform to that protocol it's easy it's easy to troubleshoot in the bug anyways I hope that opens up some possibilities for you and like I said if you don't want to use delegate and protocol patterns at all you can use a Notification Center for everything just be warned that there is a potential for it to get really messy so thanks for watching in the next lesson we're going to resume our guidebook app