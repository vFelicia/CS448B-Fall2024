Hello and welcome in this lesson, you're going to learn a variety of essential user interface elements and containers and then at the end of the lesson, I have some challenges for you to try and build your own user interfaces. Now, I highly recommend that you do those challenges to get additional practice and again, to make the most of your learning pause throughout the lesson and try to replicate what I've done on your own Xcode project. Now, just in case you're new around here. Hi, my name is Chris and welcome to CodeWithChris. The place to be if you want to learn how to make an app. Now, before we dive in, I got to admit I think designing UI is fun, at least for me. How do you feel about it? Do you like doing the design or would you rather leave that for the designers? Let me know by leaving a quick comment below. And on your way down there, if you wouldn't mind, please give this video a quick thumbs up. It really, really helps. And I thank you. All right. Enough talking. Let's get to the fun part. All right, so you've learned about the text element. Now I want to show you the image element, so we're going to go ahead and erase this. And why don't we use the library to look for the image element? So let's go ahead and drag and drop the image there. Now, the problem is that we don't have any image to display. But before I tell you how to specify that, just noticed that it's sort of in the same format as the text element. Right. There is the image keyword here and then there is a set of round brackets and in the middle we're going to put our image name. Now, this image name maps to whatever graphic asset we've put into our asset library. So we open up our file navigator and we go into our asset library. You can see that it's all empty. We don't have anything here. So let's go ahead and put an image in here if you go into the lesson resources. You're going to see a zip file called Local Assets and let's go ahead and unzip them, and then inside you're going to find a local image. You're going to find three files, actually, and they're named the same way, except with an at two X and then at three X, and that is literally just two times as big as the first one. And this one is three times as big as the first one in. The reason why they come in different sizes is because there exist iOS devices with different screen resolutions. So by adding all three sizes, the platform will pick the right size to use for the screen resolution that it's being displayed on. So all you have to do is grab all three and then drag it into the asset library like this. It's going to be smart enough to know that those three are in the same group and it's going to give it a name. You can always rename this so you can click it and you can name it anything you want. But this name right here is what you are going to be referencing in the image element. So go ahead. And put in quotation marks, that image has that name and you should see it appear here. Oh, actually automatic preview updating post. Go ahead and hit resume. All right, in there, we see our image now by default, it displays the image at the size of the graphic asset that you imported. However, if you wanted to resize it, scale it up or down, you can add a modifier called sizable. When you hit that, it will be able to stretch when it stretches, if you want it to maintain the aspect ratio, because you can see here it's all stretched out and it doesn't look like the original image. You can add another modifier called aspect ratio. And don't forget, even though I am typing out these modifiers through Xcode here, you can always add them through this menu, you can find it right there. And then the aspect ratio modifier allows you to select different ways in which this should scale. So if I say fit, it's going to scale it up to fit within the bounds, but with maintaining aspect ratio. And while we're adding these modifiers, this would be a good point to mention that a good practice is to hit enter on your modifiers here so that they become aligned because some elements might have a list of modifiers, and by putting them all on a new line, they automatically indent under the user interface element that they pertain to and it becomes very easy to read. All right. Now you know about text elements and UIImage elements. How do we go about combining the two? How do we go about having more than one element for our user interface? This is where container elements come into play. So let's go ahead into our library and let's search for Vladek. This is the one that I'm referring to, vertical stack. And you can go ahead and click and drag it in here. Now you're going to get some errors because this counts as an element to now and it seems that Xcode hasn't caught up, but this wouldn't be a valid UI essentially. We have two elements here. What we want to do instead is we want to take our image and I'm going to cut that Xcode and I'm going to paste it in. Between this opening bracket and closing bracket of the vertical stack inside the vertical stack, you can put up to 10 elements and it's going to stack them vertically on top of each other. So here I'm going to also put a text element. Like that, and you can see that now I'm able to have two elements and they are automatically stacked on top of each other. In addition to the vertical stack, there is also a horizontal one, and instead of V stack, that is each stack and if you change that to an inch thick, you'll see that it's now stacked horizontally beside each other. And there's also one called Xcode Steck, I'm in Canada or Xcode, if you prefer, and this places things on top of each other with the elements at the top being the farthest in the back. So you can see that our text element hello sits on top of the image. Now, a cool thing is that you can nest these different container elements. So I can have let's say I want my image logo to be the background. And on top, I want to have two text elements side by side so then I can use in each stack in here. And rather than typing it out or dragging it from the library, I'm going to show you another way in which to embed your elements into these stacks. If you hold down command and click on the element, you've seen this menu before. You can embed in each stack and it's just going to create that each stack for you. And that's probably the easiest way to do it. So in this stack, I'm going to add hello world. You can see here that now my image is behind this stack with two text elements. Now it seems pretty intuitive using these stacks. Right. But how do you arrange the elements inside the stacks? Well, there are some options. So if I click on this, that stack here. Actually, let's take a look at the stock, so I'm going to go ahead and click that this one actually has a lineman, so does that stack doesn't because it just puts everything on top of each other. But for the stack and the V stack, there's an alignment so you can choose to align everything by their middle's, align everything by the baselines or align everything by the top. And you can also add spacing. So you can see here I'm adding a spacing of three. You can see how it changes the code and it actually adds a spacing there. And that's too little for you to notice. But let me add 20. You can see that there is a gap now. All right. So you've learned that you can align the elements inside a stack and you can also add spacing between elements in a stack. But I want to show you another way of arranging elements inside of a stack in order to do that. I'm going to change this, that I can do a V stack. So we're going to get something like that now, let's say I wanted this logo to be at the top and I wanted my two text labels here to be at the bottom. One way I could do it is actually by adding spacing in my V stack, right? So let's say I add one hundred. You can see that there pushed the part, I can add more 300, but this is a fixed value and as you know, there are a ton of different screen sizes and resolutions, so this isn't a good way of approaching it. Let me get rid of this spacing value. Instead, what we can use is an element called a spacer, so let me show you how that works in between the image element and the stack containing the two text elements, I am going to insert a spacer element. And the name of this element is Facer, followed by two rounded brackets. What this spacer element does is take up all the available space. It just expands and pushes everything away. So you can see I've got the image here. I've got the spacer taking up as much space as I can and then my H that containing the two elements there. The cool thing about the spacer element, however, is that it plays nice with other spacer elements in the same stack. So if I go up here above the logo and I add another spacer element, what ends up happening is that the two spacer elements both take up an equal amount of space. You can see above and below the war logo. There's is an equal amount of space if I add a third spacer element beneath my stack. What do you think is going to happen? Well, all three space four elements are going to share the available white space. So the first space, four elements here. Second one here and the third one is there. And it's all having an equal amount of space. This is a great way to space things out equally. Now, in fact, I could do the same thing with my H stack instead of specifying spacing here. And notice this time I'm just going to delete that spacing 20 there instead of changing it in the inspector, I can add a spacer there. I'm going to copy that. You can see here it takes up all the available space pushing my two labels to the side. But if I add one here on the right side, it's going to push it to the middle. And then if I add one in the middle, then it's going to make it all equidistant. Awesome, you learn how to use the image and space elements in addition to the text element, and you also learn about the stack stack and Z stack. Now it's time for you to practice using these elements in containers. I have prepared some challenges for you to try to access them. Just visit CodeWithChris dot com and sign in or create your own account and then enroll in the 14 day beginner challenge and you'll see the challenges the next time we sit down together. We're going to be building the UI for the war card game. If you don't want to miss that lesson, make sure you subscribe to the channel by hitting that subscribe button below and turn on notifications. All right. I'll see you in the next lesson. And good luck with those challenges.