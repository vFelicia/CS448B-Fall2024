hey code crew in the last lesson you learned how to create retrieve update and delete data from your core data database in this lesson we're going to learn how to filter and sort our data so that you can retrieve only the results that you want from your core data database now filtering allows you to only return the results that match a specified criteria while sorting allows you to return your results in ascending or descending order based on an attribute that you specify now if you've missed the previous few lessons i highly recommend that you go and check those out first one more thing before we begin i want to mention that these core data lessons are actually part of the database course in my cwc plus program inside cwc plus you'll be able to build this travel app that uses core data for the list of locations as well as personal notes for each location all right let's jump into xcode so here we have the xcode project that we worked on in the last lesson and just as a reminder in this fetch people method we were retrieving all of the person objects from our core data store through the managed object context if you remember we don't interact with the core data persistent store directly right we create retrieve update and delete data through the managed object context so that's what this variable refers to context dot fetch and that fetch method is how we retrieve data from the core data store now you have to pass in a fetch request into that fetch method and this fetch request actually indicates what you want to retrieve you know how it's sorted what sort of criteria you have for retrieving the data in this particular case we wanted to fetch all person objects and so we just passed in a fetch request as is now where did this fetch request come from if you take a look we're calling a class method called fetch request on the person class so let's go into that and take a look at what it is let's go into this person class here as you can see here this is the fetch request class method and what is returned from this method is a new ns fetch request object and the data type of the data returned is set to the person right and that is what gets returned right and so it's essentially going to fetch all person objects in order to filter and sort we actually have to set some properties on this fetch request before we pass it into this fetch method so why don't we instead of putting in the fetch request here let's declare variable or constant up here and move this line of code let's have the fetch request up here right and then we're going to set the filtering and sorting on the request and then we're going to pass the request into the fetch method now you're going to get an xcode error as you can see here ambiguous use of fetch request so you actually have to indicate the type that this is an nsfetch request and the data type that it's going to return is person so now that we have a reference to the request up here let's take a look at how we can do filtering first i'm going to run the project so that we can see what data we're working with and so we can decide what data we want to filter for so as you can see we have four names here i am going to just do a simple uh filtering for only person objects with the name ted all right so let's go ahead and stop the project now to filter based on some criteria we use this class called ns predicate which lets you define different sorts of conditions in a very easy to understand sort of text manner you'll see right here so let i'm just going to call it i'm just going to call it pred equals ns predicate and we can define we can use this one or we can define a format and pass in the arguments so because we want to define criteria based on the name property of the person class let's take a look here so you see it's got a name property that's where you saw the ted the joe the abbey the mic so i'm gonna specify this string where i'm gonna say the name property contains ted like that and you have to put this criteria here in single quotes and then we have to add this predicate to a property on the request so the fetch request actually has a property called predicate where you can pass in the criteria that we just defined and just like that if i run it now it's going to only return person objects where the name contains ted and i will show you a couple of different examples of sort of what you can filter on in a second and how you can combine different things and use different operators here so let's run the project to quickly see what we have so as you can see here it's only got the person ted now now you saw earlier how i was configuring this format and there was a second parameter because typically the thing that you want to filter on may be dynamic right this you might not know this beforehand so you can't actually code it in like i have now so in that case what you do is you put in a sort of wild card character and that is defined by percentage at and then you can do comma here and then you can specify whatever variable contains the thing that you want to filter on now i don't actually have a variable to indicate what i want to filter on so here i can just put an example as a string but if you had something that you wanted to filter on you can specify a wild card in your criteria and then indicate that dynamic variable here now let's take a quick look at some other ways you can define your criteria using ns predicate so here i have the apple documentation for the ns predicate class there are some common examples i'll go through with you in the overview but there's also a detailed guide that you can go through called the predicate programming guide i'll provide all these links below the video this guide if you want to really dive deep into how you can express your queries using ns predicate definitely take a look now some of the more common examples are contains which is the keyword we just used there's also equality with double equal signs and you can use like here's contains you can ignore case and diacritics which are the accents on top of letters if you want to ignore both of them you just put a angle bracket and sorry square brackets and you put cd to ignore both or just c or just d to ignore these respective things you can also combine different conditions together just like an if statement using or and and and there are different keywords to express time and you can use math inequalities like less than or greater than and so on and so forth so definitely give these things a look if you are trying to express some sort of query and you're not finding the right way to write it i'm sure a quick browse through this predicate programming guide will give you some insight on how to express that query again links to these documents below the video all right now let's take a look at sorting now similar to how the ns predicate class is used to define your criteria for how to filter the ns sort descriptor class is used to indicate how your results should be sorted let's go ahead and create an ns sort descriptor and indicate that the names should be sorted in alphabetical order now let's take a look before before we do that let's just comment out this predicate and we're going to run the project again so that we can see how it's sorted naturally first so you can see here it's joe ted mike and abby and it's it's not an alphabetical so i'm going to want to sort it in ascending order so let's go ahead and create a new sort descriptor ns sort descriptor as you can see here again you sort by a particular attribute or in this case they call it the key and we're going to specify ascending is true or false so i'm going to sort by name and i'm going to say ascending is true and now just like with the predicate we have to set it to the request so request has a property called sort descriptors and if you take a look at the type it's actually an array of sort descriptors the reason for this is so that you can specify multiple levels of sorting for example a list of names is usually sorted by last name but however if two people have the same last name then their first name is used to determine who comes first so in this case since we only have one sort descriptor we still have to pass in an array however it can be an array of just our single sort descriptor like that all right now i'm going to run the project and you'll see that it's going to be sorted by name in ascending order as you can see it's abby joe mike and ted now before we end this lesson i want to point out a few more useful properties of the nsfetch request class that you can use to customize your fetch for example you can limit the number of objects that you return using fetch limit you can also start the result set from a certain offset such as this property right here and you can choose to only return specific properties of the objects and much much more so i'll link to this article or documentation below the video right so in this lesson you learn that you can customize certain properties of the fetch request before passing it into the fetch method of the managed object context specifically you can specify a predicate using the ns predicate class and you can specify sort descriptors using the ns sort descriptor class now i want to turn it over to you why are you learning how to use core data let me know by leaving a quick comment below and on your way down there if you like this video please give it a thumbs up and subscribe so you don't miss the next video alright i hope that was helpful in specifying how your objects get returned from core data in the next lesson i'll show you how to specify relationships between your different entities in your data model