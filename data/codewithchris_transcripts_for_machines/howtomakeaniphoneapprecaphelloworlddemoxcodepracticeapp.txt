so in this video we're going to recap the hello world m1 that we built in the previous video and what I have open right now is the Xcode project and all it is is a single view application and all we did was go to view controller dot CID and we dragged a label a UI label onto the view and we changed the text from label to hello world and then we ran it so I'll show you what that looks like again so it's just blank gray screen with hello world so the question I want to ask is how did it get to this point well if you take a look at this diagram and it's gonna look very similar to the previous app flow diagram a couple of videos ago but basically if you look at the files that you have here in Xcode the app delegate is the entry point so according to this diagram the app execution starts at the app delegate and then I guess to the view controller object which creates a view object from the zip file and in that view object you have a UI label and essentially that is how you end up with this iPhone app in this iPhone simulator so in the previous tutorial we talked about how objects that are created reside in memory looking at this diagram we have you know a whole bunch of objects here in this app execution so all of these objects reside in memory so you must be wondering how does the view controller dot zip file become an object well the zip file is actually a special interface builder file format that gets interpreted by Xcode and then a view object is created from that based on what you've specified through interface builder the view object it also resides a memory now going back to the view controller class when an instance of the view controller class gets created and if you remember the view controller is supposed to manage the view so in order for the view controller object to manage the view it must have some sort of way to find it right in memory and in fact there is the view controller object has a view property that references the view object so a property is is just a way for a class to keep tract of something so the view property points to the location of the view object in memory so when the view controller needs to do something with the view it needs to manage it somehow it can follow this property this view property that it has and find the view object in memory so now that you know that the view controller object can access the view by going through the view property let's try adding another label to the view but this time let's do it through code and let's do it through the view property of the view controller so I'm going to go to view controller dot m and if you don't remember there's a dot H and a dot M file for the view controller and those two files constitute the view controller class so the dot H file known as the header file is a weight where you describe all of the properties and the methods and you know everything else that the view controller has to offer and the dot M file otherwise known as the implementation file is where you actually implement those methods and you write the code and the logic behind the class another way to think about it is the dot H file is kind of like a table of contents for the view controller and the dot M file is actually the text or the contents of those chapters in the table of contents that's a very highlevel analogy but that's essentially what we're doing so if we open up view controller dot M we'll notice that it already has two methods so we we haven't introduced methods yet so let me do that now there's this method called viewdidload and none other called did receive memory warning and you can see that there's a couple of lines of code right here surrounded by two curly braces so this whole chunk right here is a method and this whole chunk right here is another method and the method titles are a viewdidload and did receive memory warning so what a method is think of it as a niqab slated chunk of code or logic that can be referred to or access or called upon to execute that chunk of code so in viewdidload whatever code we write in here when the viewdidload method gets accessed or called upon from somewhere else the chunk of code in between these two curly based curly braces will be executed so in this particular case the viewdidload method gets called after the view is fully loaded and this is where we'd want to add another label to the view because when you try to add something to the view in the view hasn't loaded yet then it's nothing's gonna happen and so in the context of this view controller it's going to access that view controller dot zip file and translate it into a view object and then it's going to load that view and assign that view to its view property and then finally this viewdidload method will be accessed so in this method I'm going to create a new UI label and don't sweat about how this code looks about creating it let me type it out and I will talk to you about it in a second okay so I've written three lines of code and let me just run it now so I can show you how it looks like so you can see that it's actually added another label on here it's got a white background and the text is hello again this initial hello world label was the label that was translated from the interface builder file or the zip file and then once that view object was loaded into the view controller the view controller then called this method right here called viewdidload where we created a new label change the text to hello again and then we added that label to the view I just want you to take a look at this part this line right here so if self refers to this particular instance of the class so self refers to this object dot view this is the way to access the property we mentioned that there was a view property before that was pointing to or referencing the view object in memory so this is how the view controller knows where the view object is in memory and by saying self dot view I'm saying that access the object referenced by the view property and then add sub view and this add sub view is actually a method of the view object and I'm passing in the label which I created so don't worry if this doesn't make too much sense we'll break it down but what's important to note is that I want to introduce the concept of properties and how this self dot view is accessing the view object that was created by view controller that's it because when view controller dot zip is turned into a view object it gets assigned to this view property so now if this concept of properties is used to keep track of objects then if we go back to our app flow how does the app delegate object keep track of the view controller object well you guessed it it's by properties again so if we take a look at app delegate dot M implementation file of the app delegate class and if we look at this method here did finish launching with options this method is automatically called when the app is launched and I want you to ignore all of this code but take a look this line of code right here so self again refers to this app delegate object and dot view controller is a property so the app delegate class has a property called view controller and what's happening here on the right hand side of this equal sign is that a new view controller instance is being created and the equal sign is saying that create a view controller object in memory and then assign it to this property so now the app delegates view controller property is referencing that object that view controller object so this is how the app delegate object has a reference to the view controller object and then the view controller object has a reference to the view that's get that got created by the view controller that's it okay so now let's go back to view controller dot m and take a look at how to create objects we already saw an example of this here so I'm creating a new UI label object and you see this notation here this is the class name UI label and this a lock method is a method that will create space for this object in memory so it's saying allocate some space in memory for this object if you haven't noticed by now you call methods with these square brackets so if I wanted to create allocate space for this UI label this would be it I would be basically saying create a UI label object and this method would return an object for me and then I'm going to call another another method of that object that gets returned called init with frame and init is usually called to initialize the object that is returned from a lock so you will usually see objects create created like so it will be like class name a lock and then with nested frames again and then this would get assigned to something some variable you know some class name variable so usually this is the sort of statement that you will see to create an object and that's kind of what we have here so this is a variable which we haven't we haven't talked about but essentially a variable is something that I used to keep track of objects which I create so right here I've created a variable called label and it's going to point to an object of type UI label and this right hand side part right here is creating the UI label object in memory and I'm assigning it to a variable called label so now whenever I want to access that object which I created I can go through this label variable so that's except that's essentially what I'm doing down here in the next line I'm saying access that label object through this variable and access its text property and assign it this piece of text right here now the reason why this is in it with frame instead of an it is because I could very well have had just an it right here but in it with frame is another special initialization method which lets me pass in a set of coordinates and a size to create the label width so the very fact that I had this meant that I was creating a label at x coordinate 0 y coordinate 0 with 200 pixels width and 50 pixels height and if we go back to app delegate dot M we take a look at that line where view controller gets created see this is the app delegate view controller property and we're assigning it a new view controller object that gets created so notice the a lock statement it's allocating space and memory for this new object and then again it's using a special initialization method called init with nib name and nib was actually the old name for zip so you can think of this as zip name so it's basically saying initialize this view controller object with the zip named view controller and so when this view controller object gets initialized it's going to look for this view controller zip file and then translate it into that view object and then assign it to its own view property and that's how you get this diagram right here of the SAP flow so I hope that wasn't too confusing but if it was don't worry we're gonna do a lot of object creation we're gonna work a lot with variables and methods and stuff like that so I'm sure over the next two demos that we're going to do you'll get you're gonna get a better grasp of it let's do a recap right now of what we went through today so we talked about how the app flows from one end to the other in our hello world demo starting with the app delegate it creates a view controller object gets it has a reference to it and then the view controller object goes ahead and turns that view controllers that file into a view object and assigns it to itself so it has a reference to the view and then finally we put a label on the view from the view controller we also introduced the concept of properties and how one object keeps track of other objects using properties we talked about how to programmatically create and add additional UI elements to the view controllers view and we talked about how we can create instance of classes called objects so that was a pretty heavy tutorial in terms if you're new to programming these concepts of classes objects variables may seem foreign to you but we're gonna practice it and you're gonna have a better grasp of how it works and what it is what as soon as we do more demos so continue watching don't give up as always don't forget that there's a link to the notes below and also you can ask questions in the comments below if you have any questions and if you enjoyed this video and you feel like you learned something please share it with your colleagues and friends and it would really help me out and build my audience thank you so much and I'll see you in the next video