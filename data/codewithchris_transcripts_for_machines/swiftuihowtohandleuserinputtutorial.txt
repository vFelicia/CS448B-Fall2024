hey code crew it's Chris here with another swift UI tutorial now if you've built apps in the past you might be familiar with the MVC design pattern where M stands for the model and to put it in simple terms the model represents your apps data well in Swift UI you can use what are called bindings to connect certain parts of your view to properties in the model so that when the data gets updated the view changes automatically furthermore in Swift UI you can have what are called States and you can have your views react and respond according to different state changes so this video is all about how data flows from your app models to all of the views in your view hierarchy so if that sounds good let's get started so from the previous two lessons we've gotten to this point right here where we're displaying a list of data and tapping on one of the rows we'll actually go to a detail screen so if you haven't gotten to that point yet I highly recommend that you check out those two videos by clicking in the upper right hand corner there and that playlist will bring you to all of the videos that you need to watch now there is one correction I want to mention from the last lesson and that was me struggling to put a navigation bar title at the top of the list here and it turns out that I was putting it on the wrong element so instead of putting it on the navigation view I should have been putting it on the list itself now we were also using display mode of inline so if we want to follow the Apple sample so that's what that looks like we should be using large instead and that's going to look like this which looks a lot better now in this video lesson we are following this Apple tutorial right here so this is actually the third one handling user input but one word of warning is that it's really tough to start building off of the previous project we've we've done because there are some differences between the starting point of this third lesson versus where we left off here so I highly recommend that you go to the third lesson download the project files and use that starting point I'll show you two of the differences which really breaks things so in the project from the second lesson what we're missing in terms of the landmark structure is we don't have a favourites property and that's fine I mean you can add the favorites property because this video is going to be about toggling favorites and keeping a favorites list but the bigger problem actually is that the favorites data doesn't exist in our JSON file so you know that's that's basically the killer right there whereas if you download the startingpoint project from that apple tutorial if you check in the landmark data JSON file you'll see that we have some extra pieces of data for each location his favorite is featured which I assumed is going to be used in the future because it wasn't used in this particular lesson but we do need is favorite and inside the landmark here we do have this is favorite boolean property so yeah definitely don't build off of your previous project instead download their fresh starting point and they never really mention that they never really tell you that that's what you have to do because these sort of go in order so the assumption is that you can kind of build off your old project but that's not really the case all right all right so the first thing we're going to want to do is to go into our landmark row and we are going to add a little star beside each landmark depending on whether or not it's a favorite so from the JSON data some of them are favorites some of them are not and what we're going to do let's just wait for this preview what we're going to do like there's missing a spacer here this is the starting project for the third tutorial we're gonna put a star at the end of the name depending on whether it's a favorite or not and actually if it is a favorite it's going to be a yellow star so since the landmark actually has a let me see if I can jump to this class name here sorry structure they haven't is favorite property we can check that see if it's true if it's true then we're going to show a star if it's not then we're gonna leave it so you can actually use an if statement here so that you can conditionally show views or not so we can say if landmark is favorite then we're gonna do something we're gonna show an extra image and there are now system icons so this one is called star dot fill and that's going to be a star that you see right there now we can change the color of that and we can also change the size because these system icons are in vector format scaling them up or down isn't going to be a problem in terms of the quality so we are going to say that foreground color is yellow and furthermore we are going to set the scale to medium all right so let's wait for that to update cool now what we've done here is merely display the star if it's a favorite you can't actually tap on it to toggle it on or off that's for later on in this video now what we're going to do is jump over to landmark list and we are going to add a toggle to toggle the list of whether to show only favorites or all places so let's go ahead and open up our file navigator and go into landmark list this is the perfect time to introduce state now state is either a single value or a set of values that can change and then you can have your view listen to that that state and if that state changes your view can automatically update and change accordingly so the perfect state for us to add actually is whether or not we should be showing favorites only so the way we add that state is by declaring a property and then putting a special keyword in front of it called state so let me show you what that looks like first I'm gonna declare a property called show favorites only and I'm gonna initially set it to false and then right in front of it I don't need that much space I am going to use this declaration here a persistent value of a given type through which a view reads and monitors the value so that's exactly what we need now I'm gonna hit this resume button on the preview nothing changes because we've merely declared the state and we've set it to false but we haven't added any conditional statements in here to change according to that state so that's what we're going to do right now inside right here so inside this list for the landmark data for every single landmark right now we are creating a navigation button and inside there is a landmark row and that basically means we're displaying every single row now let's say if the show favorites only property here is true then we wouldn't want to show every single row right we'd only want to show the rows which are favorites so we can add that statement right here check if we should display every single row so first of all let's consider the case where show favorites is false so if show favorites only so this is basically checking if it's false so if it's false right then we basically want to show everything so this still makes sense oops right here I'm missing something if you use the self keyword there all right so basically I have an if statement saying that if show favorites only is false then I should show the button however if show favorites only is true meaning that I only want to see favorites then I have to consider only showing the row if the landmark is a favorite right so I can use an or statement here and I can check or landmark is favorite let me see come on autocomplete landmark is favorite I think this was it let me see yeah now I want to revisit this if statement because I know for a beginner this sort of logic sometimes they get hung up on and so I want to show you that this is basically a shortened way to say something like this so if show favorites only is false or self thought show favorites only is equal to true and landmark is a favorite oops so that might be a little easier to understand if you're not used to writing conditions right so only show the row if favorites are false right meaning show everything or if favorites or if you only want to show favorites and this Latin mark is a favorite so that's the more verbose way to write it both will get you the same thing so let's see what we get over here so if we flip this to true let's see what we get so as expected when we toggle that state property show favorites only to true in our list we only see landmarks which are marked as favorite now we should probably expose some sort of toggle switch to let the user change that state from the user interface right and what we can do is we can make the first row of this list the actual toggle switch now the only problem is with the way that we've done it here by just feeding the collection of data into the list and it's just showing a row for each item in that data we aren't able to change up the first row to what we want so we are going to have to actually just create a normal list and then inside that normal list we're going to set the first row as the toggle switch and then the subsequent rows as all of the landmarks so what I'm going to do here is I'm just going to create some space here I'm gonna create a brand new list and I'm going to first of all create a toggle so this is a view which is kind of like the UI switch if you remember back in UI kit if you've ever learned the old way of doing things so what we have to do is specify a binding now this is really cool because we can bind the state of this switch to the state variable so in order to specify of binding you use this special character you use the dollar sign here and then you write show favorites only and just like that the state of this toggle is now bound to show favorites only and then the label is just going to be a text view which we can show we can hit enter here and then we can create a new text view and say show favorites only and this preview is still gonna be broken right now actually it's not so this is actually a combination of two lists see we've got these two here but I'm actually going to migrate I'm gonna delete this in just a second I'm gonna migrate this code into this new list that I'm creating so this first row is the toggle sub sequent rows are the landmarks so what we're going to do here is we're going to use a for each statement to loop through the landmark data collection and then for each of those landmarks we're going to run the same code here we're basically gonna check if its favorites only or if if it's not favorites only and is the landmark a favorite or not and then you know depending on these different conditions we're gonna show the landmark row or not so one we're not gonna change any of this logic we're just changing up how how this is rendered so let's declare a for each statement here and we're going to pass in the landmark data and for each of these landmarks so we're gonna specify a parameter here for landmark in we're basically gonna take this chunk of code and move it in here right and then we can just delete this list is our old list this navigation bar title will still keep but we're gonna attach it to this new list here so that's this tag right here getting a lot nested curly brackets now so what do we have is this working ah there we go cool so you can see that there are no gaps in between the favourites now if I toggle this off let's change it to a live preview so we can actually use this so there you can see all those favourites sorry all of the landmarks and when you toggle this on you only see the favourites now it's great that we have a state property to determine whether to show all favorites or not but we're missing another crucial piece of the puzzle which is to allow the user to toggle the favorite status of each individual landmark now even if we coded that functionality right now we would still have to keep that data somewhere you know that list of favorite places so rather than including that data in this view we should follow best practices which is to separate views and data just so it's easier to maintain and it's just a good practice to do this so what we're going to do is we're going to create a model object that is going to contain whether or not we should show favorites only we're going to move this state property into that model and we're also going to keep the list of the users favorites in that model objects so that model is going to have all of the data to power this landmark list and also the landmark detail because that details screen is where the user is going to be able to set whether that landmark is a favorite or not so let's take a look at how the data flows from the model into the views so we're going to create a new class that is going to represent the model for our views now in this class we're going to keep track of two things the first thing is whether or not the user wants to show favorites only now I know we had that state property inside the landmark list to keep track of this but we're going to move this property into this model class the second thing we're going to keep track of in this new model class is the list of the users favorites now this is not any old model class because we're going to use some special Swift UI check to make sure that these values flow from the model to the views automatically and we're gonna have to do a couple of different things one of them is that we have to make this model class conform to the bindable object protocol and this is going to allow us to sort of attach this model as the data for those views second of all we're going to have what's called a publisher in this final class and we're going to have our views as subscribers to this model so that when there are changes to the model inside this data it's going to publish those changes and notify all of its subscribers namely our landmark list and our landmark detail views and that's going to cause them to react and update their views accordingly now this whole publisher subscriber pattern is part of the new combined framework alright so now let's jump back into Xcode and let me show you how this all works alright so let's go ahead and create our model class so I'm going to create it in this models group right here and we are going to choose Swift file and I'm going to call this user data all right so we have to import Swift UI so we can use that bindable object protocol that I was telling you about and we also have to import the combined framework because that's gonna have that publisher subscriber stuff I was telling you about so we are going to have to create a new user data class in here and we are also going to make it conform to bindable object now let's take a look at this class right here so I'm going to just pull up the developer documentation I want to show you some stuff Oh actually I had it already open here so bindable object an object that serves as the views model that's exactly what we want but down here I want to show you something this is a required property here did change and what this property references is a publisher object now a publisher I told you before admits an event whenever the object changes right so we have to declare a property called did change right and then we have to assign that a publisher type object so let's do that I'm going to say equals and let's go back here so let's now jump into the what do I want to show you here in the combined framework I'm gonna show you publisher here specifically there are a couple of different types all right let's start with this so a publisher declares the type that can transmit a sequence of values over time right so that's kind of what's gonna happen here so we're gonna have this publisher it referenced by did change and then we're going to have our properties for the show favorites only and we're going to have our landmarks right here and if any of that data changes we're going to call that publisher and make it publish the new data essentially so there is a specific publisher type that we want to use so I'm trying to find it here so actually scrolling a bit farther down what we want is something called a subject and it's a type of publisher here a publisher that exposes a method for outside callers to publish elements and if you read this overview down here a subject is a publisher that you can use to inject values into a stream by calling its send method so this send method is really important because when some data in our model class is going to change we're basically going to call the publisher call it send method and send along the new data so which subject do we want to use because subject is just the protocol the one that I learned from the Apple tutorials is this passthrough subject so they were using this one here and that passes along values and completion so I'm going to show you how to use this one right here and notice that there is output and failure so I want to talk to you about what that is I mean digging through this documentation isn't always that easy and I don't remember where I read it but basically I can explain it to you for output you basically specify the type of data that is going to be sent through and failure is where you can send through errors if it cannot fail then you just put never in there so in here we are going to create a new pass through subject and the type of data that we are well that the publisher is going to be sending through is user data and we are going to say never for the failure because it doesn't fail and then we are just going to use this the parentheses to create a new instance of the pass through subject all right so we can actually get rid of this here as the type so there it is so hopefully yeah all right that's cool yeah so now we're gonna have our properties to keep track of is show only favorites and landmarks so this property is just going to be a boolean property show only favorites and we'll set it to false to begin with and this one we are going to call it landmarks and we're just going to set it to landmark data it's basically the array of landmarks parsed from the JSON file so now how do we detect for changes in these properties well that's nothing new we had this before we can just handle or actually yeah handle the didset case here and whenever this property gets changed basically the code in here is going to fire and what do we want to do in here well we want to call our publisher remember that send method I showed you and we basically want to send across the user data object itself so we're going to do the same thing here we're going to handle did set and we are going to call our publisher and we are going to send it this user data so now whoever is subscribed to this publisher is going to get notified now the next step is going to be binding this model object to our landmark ListView so let's go into the landmark list right now and we're actually going to let me just go editor only for now we're going to get rid of this show favorites only state property because remember we've moved this into the user data as a property in our model so we're actually going to get rid of this line here now what we want to do is we want to actually bind this model to this landmark list and the way we do that is first we need to create a property here that has this special modifier called environment object and this environment object property is going to have a reference to our user data or our model so we're gonna well let's actually let's create that property first so I'll call this user data it is a data type of user data and we're gonna put this special modifier on it we're gonna say that this property is going to hold the environment object or in other words just the model for this view so before I go ahead and tell you how we're going to set this user data property let's fix some of the errors that have appeared here because this toggle is still bound to that state property that we just deleted we need to change this so that it references the user data show favorites only property so what we do instead is we still use this dollar sign here to indicate that we want to bind this toggle to a property but it's going to now found to the user data show only favourites property and I think I worded that incorrectly I'm gonna change it to show favorites only so let's go back to landmark list here and in here user data show favorites show I guess I didn't save the file because I changed that to show favorites only so this would be show favorites only so now this is bound to the user data show favorites only property and same thing down here we have this condition where we check should we show that row and this is referencing a property that no longer exists so we are going to change this to user data dot show favorites only and this one to user data dot show favorites only alright so now we go back to the original question of where do we set the model object to this user data property well you don't explicitly have to assign it to this property instead what you do is you call a special modifier when you create a new landmark ListView you call the environment object modifier and then you pass in an instance of the model so let me show you what I mean we're going to go into the scene delegate because remember in here this is this specifies the route view right and right now we're creating a new landmark list so this is actually where we're going to set the environment environment object here and we're going to set it to a new instance of user data oops make sure that I don't mess up the brackets there all right so just by setting this special modifier on the landmark list that is going to assign this user data object to this environment object user data property next up we have to consider that our user data also contains the list of landmarks now earlier I said that this was the list of the users favorite landmarks but I was mistaken this list is actually the entire list of landmarks now the reason why we don't access the data directly from the viel is because remember that separation we want the model to handle all of the data and be because the source of that data and the view to just be responsible for views we don't want the view accessing the the JSON file directly so we're going to go to the landmark list here and here we're displaying the rows and we are passing in or rather we're looping through the landmark data collection now instead of having this view directly access this this collection of data we want to access the user data dot landmarks and that should be it for here so now the next step is to go into our landmark detail view and add a button so that users can toggle whether that landmark is going to be a favorite or not and that data is going to be written back to the user data model all right so we're always writing back to that user data model and we're always reading the data from that user data model so that model object is going to be the source of the data that powers all of the views here that way in the landmark detail view when the user taps on the favorites button let's say that they set that landmark as a favorite that change is going to be written to the model and then the model as the publisher is going to publish that change to all of its subscribers and those subscribers will update their views according to that new landmark that is a favorite so let's go into the landmark detail so it's also got to have a user data property because it's going to be writing and reading from that model right so same thing goes here we're going to declare an environment object called user data it's going to be a type of user data now let before you might think that hey when we create that landmark detail or is that right here right when we create this landmark detail do we have to specify that modifier and add the environment object modifier and then pass it in the user data to it we actually don't need to do this because what happens is that when we bind this model to let landmark list as an environment object all of the views inside of this view like as in all of the sub views so you know landmark detail landmark row these are all sub views because landmark list contains them all of these views automatically get that as their environment object as well so simply in the landmark details simply by having this property environment object user data here it's automatically going to be set and it's gonna be set to the same thing as what landmark list has up here so let's go into the landmark detail view now and add that button so since we're gonna add it beside the landmark name I'm going to create a new H stack horizontal stack actually I'm not going to need to specify any sort of alignment or anything like that and I am going to put that landmark name in there and I'm also going to put a tap a button beside it and this is going to just simply be a star that is they're essentially gonna toggle it if it's a favorite already it's gonna be filled and then when they tap on it it's gonna unfill it and unfavorite it and vice versa if it was not a favorite before so I'm going to create a new button and you have to specify two parameters the first one is the action what's gonna happen when the user taps on it well we basically want to toggle the favorite status in the user data model and what the label is the label is what the user sees is it a piece of text is it an image so what does the button look like the first thing I'm going to fill is the action here so lets us think about what we want to do for the code essentially we want to update the is favorite property of this landmark in the user data model landmarks array so we're going to need to access this array right here right find out which landmark the user is looking at and for that we're going to need to find the index of this landmark inside that array and then we're gonna toggle the is favorite of property so user data about landmarks and we're gonna have to specify some index we need to look for that so I'm just gonna skip that for now or maybe it's not gonna let me right maybe I have to do that the is favorite property and we're simply going to toggle it and that's just gonna flip it if it's true it's gonna flip it to false and if it's false it's gonna flip it to truth now right here I have 0 and this is literally the first landmark in the list of landmarks but I can't leave this as 0 because then I would be toggling the favorite status of the first landmark regardless of which landmark the user is looking at so what I actually need to do is look for the index of the landmark that the user is currently looking at and so we need to search through this array and find out which index this particular landmark that the user was looking at is now I could do that search inside hee it creates some space and I can call a method on the array and look for the first index of this landmark inside that array but then I'd have to also do that again inside the label because I need to access that index again so I don't want to write that code multiple times in different places instead what we can do to make it a little more efficient is just have a computed property up here called landmark index and mark index and this is going to be an integer type and it's going to be a computed property so what we're going to do here is we're going to access the the landmarks array of the user data we're going to call a method called first index and it's going to return the first index that matches the condition we're going to put in here so it's almost like a query we're going to query by matching the ID of this particular landmark of the landmark that the user is viewing against the IDS of the list of landmarks here and it's going to return the first index of where that condition is true so in here we're going to specify that by specifying a simple closure here and we're going to use this sorry this wildcard and we're just going to compare the ID of the elements inside the array versus the ID of this landmark right here that the user is currently looking at and since this returns an optional integer so it could be could be nil but we are just going to force and wrap it and return that it shouldn't be a problem because this landmark was originally from that list and there's nowhere in this demo app where we're removing landmarks from that list so it should be okay hopefully fingers crossed all right so now back in this button instead of zero I can say selfthought landmark index now as for the label of the button we're gonna have two options here if it is a favorite then we're gonna show a colored yellow star but if it's not a favorite then we're gonna show an empty star so let's open up this closure here and we're gonna use an if statement if user data dot landmarks we're gonna pass self dot landmark index and you see this is where we saved ourselves from having duplicate code because we need to have this index again we're gonna just check if it's a favorite you know if it is a favorite and you just make some more space so it's easier to read now if it is a favorite then we're going to return an image which is going to be a system image and we're going to use that same star icon we used before so start off fill and we're gonna color the foreground yellow color so that's going to be representing a favorite otherwise we're going to return an image with the system name just start and it's not filled it's gonna be an empty start and we're gonna make that that one grey alright so now let's try previewing this all right so it looks like I have some errors here okay self try again cannot prove it in this file landmarks may have crashed all right let me see what's wrong here all right so I'm back and it took me a little while to figure out what was going on and why my preview was crashing and when I click this button it's not really helpful it says no underlying error but yet there was an error because they can't actually preview my file and so I was just doublechecking my syntax and then it kind of dawned on me what the problem was and it turned out to be actually the case so let me go back to the seemed outlet and you know how I told you about how inside the landmark list when we created here and we set the environment object modifier we pass in a new instance of user data and then that automatically will set this guy right and then it will also automatically sit this property in the landmark detail now that's all true I didn't get that wrong the only problem is this preview if you remember is being generated from this second structure right from here and the problem is that there is no environment object binding on the preview so in here in landmark list when I create a new landmark list there is no environment object binding here so what it can do is it doesn't look like I don't want to preview on all of these different devices no thank you so here I can pass on that all right in my preview and that's gonna be able to show me something however in my landmark detail let's see because this this preview controls what I'm seeing here right so it doesn't necessarily translate from that landmark ListView so for this and only for the preview I'm gonna have to set the environment data for my preview landmark detail view so then like in this case it works for the preview at least so I can toggle that on and off and let's say I toggle it off can I go back no you know what I'm gonna have to do is I'm going to have to preview the land like list instead and I'm gonna have to just make this a live preview and let's double check oh it's still going alright there we go so I can toggle this I can drill into Turtle Rock and I can turn this off and then go back and see it's no longer a favorite so when I choose show favorites Turtle Rock doesn't show anymore so let's choose Rainbow Bay and let's go ahead and set that as a favorite and there you go so just to just to reiterate what the error was in case you don't even get it is that when you're inside landmark detail let's say you're just working on this view right what you see on the right hand side right here is created from this structure and so all we're doing in terms of this piece of code is creating a new landmark detailed view and then passing in Turtle Rock which is the first element of the landmark data so because we're looking at this independently just this slice there there was no chance to set this environment object you know the scene delegate doesn't get run landmark lists doesn't get run there's nowhere where this was set so that's why for this preview we have to set it right here when we're looking at the landmark list for this preview right when we create this landmark list and then we set the environment object here this landmark list when we're playing around with this preview this landmark list creates those landmark details and stuff like that so that's why that environment object gets passed into the landmark details that is created from this preview right because this preview is being generated from this piece of code right here right and then when you finally run this actual app either on the simulator or on an actual real device that's when your scene delegate is gonna get hit because you're running it for real you're not working with this preview anymore right your app delegate your scene delegate you're gonna have your lifecycle events here of it launching and all of that stuff seeing delegate is gonna fire you're gonna have this fire it's gonna create a new landmark list and set the route view and then find the user data model object as the environment object for the landmark list so hopefully that makes sense if it doesn't just leave me a comment below and I'd be happy to try to explain it in another way all right so this Swift UI bindable objects stuff is pretty cool but at the same time it takes a little bit to wrap your head around I'm still trying to wrap my head around it I think that I might create a standalone video just explaining this concept a little farther down the line and if that's something that you want to see please consider thumbs up in this video and subscribing to my channel if you haven't already that's our stuff really helps support the channel and keeps it going and now I want to turn it over to you have you used ui kid before and if you have how do you think it compares to Swift UI do you like it you I get better or do you like swift UI better let me know by leaving a quick comment below there's more Swift UI content over there thanks for watching I'll see you guys next time