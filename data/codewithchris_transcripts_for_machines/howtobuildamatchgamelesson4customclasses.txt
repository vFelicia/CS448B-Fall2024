hello and welcome in this lesson we're gonna get handson with creating custom classes if you take a look at our app architecture diagram you'll see some classes that we have to create namely the card model class in the card class we're also going to create a custom collection view cell so that we can add some custom functionality to it let's dive into Xcode and get started we're gonna start by creating a brand new Swift file for our card model class now as I've explained before you definitely can just go into the viewcontroller.swift and at the end of the file outside of the viewcontroller class you could simply declare your additional class here but as i've explained we definitely don't want to do this because it's confusing for people who don't know your project and even though you know the card model classes in this file right now that doesn't mean six months down the road you'll remember that you put it in here so the best practice is actually just to create another swift file with the same name as your class name and put it in there so right click in this folder right here it's actually called a group and to choose new file and we are going to choose the swift file under iOS so go ahead and click next and we can just save it here in the project folder that's where our other Swift files are so you can see here view controller not Swift and app delegate not Swift so the name we're gonna give it is card model and under targets this should be checked by default and if it's not then go ahead and check that and this just means that this code file that we're adding belongs to this target and the target is basically another word for our app so let's click create and we are here with this brand new card model dot Swift I usually like to put it together with the other Swift files so I just drag it up into that section there so here it says import foundation if we are going to use some UI kit classes we will also need to import you like but for now I'm not gonna import uikit if we actually do end up referencing something like a UI button or UI image view or you know another class from UIKit then I can import it at that time and foundation we can leave it as this because foundation is actually useful and contains things like the math routines and the randomization functions that we're going to use here and stuff like the print functions and you know all of that stuff that we sort of take for granted that we have all right so let's use the class keyword and let's declare the car for the model class open up a pair of curly brackets and in here I'm just going to create one method right now I'm going to call it get cards and I am going to open up a set of rounded brackets and I am going to I'm not going to specify the return value right now but this function will return an array of cards but we're not going to do that right now because we also need to create that card class and I also want to explain why we are going to be returning an array of card objects instead of like an array of strings or something like that all right so let's just start with a pair of curly brackets which represents the block of code for this method inside this method right now let me write some comments on what we are going to do so we are going to declare an array to store the generated generated cards randomly generate pairs of cards and then randomize the array and finally we're going to return the array so as you learned from the MVC video the reason why we are declaring this card model to supply and handle that data the data being the set of cards that the user has to match is because of separation of responsibilities the view controller should only manage handling the view and handling user interaction with the view the card model is going to be responsible for supplying those cards and it's gonna give those cards to the view controller and the view controller is going to display those cards to the user if we run our app and we notice something wrong with the data let's say for example there are an uneven number of cards or some cards there's no match for it or something like that we know to look in the card model because the card model is responsible for generating that data if there is a problem with the user tapping on a card and it's not flipping over or you know cards are not being matched even though the user has flipped over two cards of the same the same type and it's not matching and disappearing then we know the view controller must be responsible if for example we notice that something is misaligned in the view I think the cards aren't centered or something like that then we know to look in our view in the storyboard and doublecheck our auto layout constraints and stuff like that so using that MVC design pattern when we architect our app is going to make things a lot easier for us when we are trying to maintain or troubleshoot something in our app especially if the app becomes much larger and much more complex so that's why we are creating this card model class so like I said the responsibility for this specific method here is to generate random pairs of cards put it into a ray and then return that to the view controller the view controller is going to take that data and display it on to the view now I could have very simply just said that this function returns an array of strings right where each card in that array is represented by a string and that string could possibly be the image names right so I could randomly generate a number from 1 to 13 right and then append that to the word card and then I could just put that all into a string array and return that as my set of cards right this is kind of similar to what we did in the war app the war card game where we randomly generated a number and then we appended that number to the word card and that how we got our image team the problem with this is that there's actually more data we need to keep track of than just the image name I mean if I returned this array of image names as strings I could very easily use that to display the card images in a grid like fashion however I would also need some other mechanism to keep track of which cards are flipped and also which cards are matched so that actually gets messy really really quickly inside the view controller if I were to keep track of that stuff so that's why instead of returning just an array of strings representing the image names we're going to create a separate class to represent each card and that class is going to have the image name it's going to have some status flags such as whether the card is flipped or not and whether the card has been matched or not and then inside this card model I could return an array of card objects instead so each card object will have the data associated with that card such as the image name right which image represents that card and also the status of it whether it's flipped or matched so that's what we have to do and right now it is if there's an error because we haven't created that card class yet so let's go ahead and do that highlight this group right here choose new file choose the Swift file and this time we are going to put card so that should be checked create and inside this card dot Swift let's move it up under card model and you know I call this class card open up a pair of curly brackets like that and we're going to have the image name and I'm going to just initialize that to an empty string we are going also going to have a flag called is flipped and initialize that to false and another one is matched this is false so each card object is going to keep track of its own stuff the image name whether it's been flipped or not and whether it's been matched or not and then we go back to cart model and now this error should go away once Xcode detects now it's detected another error for missing the return statement here so let's start with this comment here declare an array to store the generated cards I'm going to VAR let's say generated cards array is equal to and I'm going to declare an empty array that is going to contain card objects okay so randomly generate pairs of cards now how many pairs of cards do we want and I just settled around eight pairs so that's sixteen cards you could do as many or as few as you'd like now we're going to do use a four in loop here and I don't care about the actual variable I just want a loop that runs eight times so I'm just going to use underscore here for the variable four underscore in 1.8 open up a pair of curly brackets so the code inside these curly brackets are going to run from 1 to 8 and that's inclusive so it's 1 2 3 4 5 6 7 8 that's actually 8 times sorry I was just counting out my fingers just there uhhuh so I might seem weird to you ok now we're going to randomly generate some numbers and just to remind you we have cards number 1 to 13 and if you remember the arc for random uniform this function goes from 0 to the upper bound minus 1 so since we have 1 to 13 I am going to do 13 that's going to give me 0 to 12 and all I have to do is add 1 then that's going to give me 1 to 13 so let random number equals arc for random underscore uniform 13 plus 1 so that's going to give me a random number from 1 to 13 next I am going to create a card say I'm bar card 1 is equal to a new card object and then we are going to set the image name property of card 1 equal to the word card plus the random number or actually we can use that substitution and we can put in the random number there let me just double check that in the assets library its underscore seat it is so underscore C ok and then we are going to put this card into the generated cars array so I'm going to append my card 1 alright and now we're going to do the same thing for car 2 let's write some comments here get a random number or create the first card object and down here we're going to create the second card object alright and these warnings are telling us to use let instead so let's use let let card to equals new card object and card to dot image name is equal to card random number now what I'm doing is I'm creating two cards right each of them are going to be the same image because we need pairs of cards in order to have matches right so for every time we randomly generate a number we need to create a pair of cards not just one card that's why I'm doing it twice and then we're going to do generated cards array and we are going to append card to make sure you're putting card to and they're not card 1 again so by the end of this for in loop that goes eight times we're going to have eight pairs of cards in inside this generated cards array for a total of sixteen cards all right here for randomized the array I'm just going to put it as a to do because I don't want to randomize it yet the reason for that is because if we don't randomize it each pair of cards is going to be beside each other and so when I'm testing out the app it makes it very easy for me to find matches because I know that the matching card is right beside it so we're gonna randomize it at the end and then for returning the array we're just going to use the return keyword and return the generated cards array now I'm going to also put another comment here as a nicetohave maybe I'll put it as optional and this is to make it so we only have unique pairs of cards because as of now you see how I'm generating this random number eight times well it's possible for this to generate the same number in different iterations of the loop so I could have if we look in the assets you know I could have two or three or maybe if it's like some sort of freak accident all of the sixteen cards could be card one because we have no condition to make each pair unique so in my card model even though this loops for eight times if every single iteration of that loop the random number is the same number then I'm going to end up with 16 of the same cards so I have it as an optional here and we probably will go through this at the end is how to make it so that we only have unique pairs of cards inside that array and it's actually something that you do have the tools to do right now in module two you learned about while loops right which is basically a loop that only ends when a certain condition is met so you see how this loops eight times no matter what instead of this for in loop that goes eight times we will just replace that a while loop and we would keep looping and generating random numbers and we would keep track of which numbers have already been inserted into the array and basically we would keep randomizing until we get a number that hasn't been added before into our array and that's how we would guarantee that we have unique pairs but if you're not sure how to do that don't worry we'll go through it later on but for now I'm just gonna leave it as optional and randomizing the REA is a to do okay so here's a fun thing that we can do right now is that in this for loop we can print out the random number that we generate so under here I'm gonna get a random number let's say log the number and we're going to use the print statement and we're just going to print out that random number into the console right now we won't see anything because get cards is not actually being run or called so let's go into the view controller and up here in the properties section we're going to declare a new property and just call it model we're gonna create a new card model object and assign it to this property called model inside the viewdidload let's get rid of this comment and we are going to call the get cards method of the card model and calling that get cards method of the card model is going to return an array of cards right I want to also keep track of that in the view controller so I'm gonna have to create a property to keep track of it so you can see here when I called get cards of the model this is the return value right so calling that returns an array of cards I need to keep track of it somehow I'm going to create a separate property up here I'm going to call it my card array and I am going to make it an empty array that contains card objects and I am going to assign what gets returned from this function I'm going to assign it to this property essentially writing this card array is equal to model get cards when I do this it's actually going to just replace this MTO right here by initializing my property to an empty card right here I save myself the trouble of having to make it an optional type you know something like this because you have to initialize it to something so that's why I am initializing it to an empty card oh right here all right so now in the viewdidload the get carts method is going to get called so now we can actually run it let's choose the iPhone 10 so here we can see that our collection view it has this white background but when we're done with it it won't if your simulator didn't actually change orientations you can always just press command left or right to rotate the simulator or you can also go up here and make sure under Hardware make sure it says rotate device automatically and it's checked and then it'll rotate it but more importantly I'm interested in the console down here to see what it's generated so you can see here it's generated eight random numbers and there are three card tens three pairs of card ten so out of my 16 cards six of the cards are card ten so that's pretty coincidental and there's another set of nines so four of the cards are card nine this is going to make the game easier right because I can match one card ten from this pair to one card ten from that pair but anyways once we put that condition using the while loop we're going to be guaranteed to have unique numbers here I just wanted to run the project right now and log these numbers so that you can do it to on your computer to make sure that your app is not crashing at this point and that you are generating the random numbers now there's one more custom class that we need to create so let's talk about that let's stop running our Xcode project and go into the main dot storyboard and that is for this collection view cell that we have here I mentioned that we are going to flip the cards by transitioning between these two card images well what we can actually do is we can subclass this card collection view cell because this cell inside the collection view is actually uikit class as well and it's called UI collection view cell so we're going to go ahead and subclass that class and we are going to provide some custom functionality such as when the card is tapped we can flip between these two UI image views we can actually also add a method to fade out the cards when they're matched and stuff like that so what we're going to do here is inside this match app folder or group go under new file and this time instead I'm choosing Swift file which is pretty much going to create just an empty Swift file for us we actually want to choose cocoa touch class and this is actually going to give us a way to subclass not to say that we couldn't just create that empty swift file and then write our class and say that at subclasses you our collection view cell but doing it this way by choosing the cocoa touch class and selecting the subclass here or just typing it out like that Xcode sometimes gives us some default boilerplate code for subclasses of you know whatever class that we choose to subclass here so it gives us that added benefit for the class name I'm going to call it card collection view cell and it's a subclass of UI collection view cell make sure you're typing that out exactly as that looks with all the caps where it is you don't have to create a zip file that's an extra interface builder file that we don't need and the language make sure that you have swift selected click Next and we can save it in our project folder again target should be checked and that's going to create this for us now in this case there isn't any boilerplate code you can see that it's just empty here but if you were to subclass something like UI view controller for example as this view controller is a subclass of uiviewcontroller you would actually get some boilerplate code and that would be the viewdidload and that did receive memory warning so let's go back down here card collection view cell and just move this guy up to up there is fine you can see here that it also imported UI kit for us because this UI collection view cell is a class inside UI kit and so that's why we need to import that alright so we need a way in the storyboard to specify that this prototype cell that we kind of designed here is a card collection view cell you know which is our custom one so we can do that by selecting the card cell here in the document outline and then going over here to the attribute inspector clicking this one here this tab is called the identity inspector and under custom class by default you can see here it's just a UI collection view cell but we can type card collection view cell autocomplete should just complete that for you and you just hit enter and that basically tells interface builder that this prototype cell here is actually a type of card collection view cell and this is important because we are going to take these two image views which we added into the cell and we're going to connect them and expose them as iboutlet properties to our card collection view cell class and that way we can use swift code to manipulate these two UI image views right so we can write code to transition between them to simulate the card flipping so go ahead and open up assistant editor like that by clicking this icon and you want to select the card cell now chances are on the right hand side it wouldn't have changed to the card collection view cell class however you can click this little breadcrumb part you can go to manual you can go to match app and then you can kind of just manually select that card collection view cell class so on the left hand side you have you have this card cell and on the right hand side you have this card collection view cell subclass that we just created go ahead and highlight this first one hold down control let's drag it down here and connection type is outlet I'm going to call this the front image view that connect it and down here I'm going to do the same except this one is going to be make sure you're not assigning it to the same outlet and so if you see your existing outlet highlighted in blue that's wrong and so put it down here somewhere and then call this the back image view and if something goes wrong right you can highlight this little gray icon although it's hard to tell when it's connected to because the back image and the front image are on top of each other but you can kind of see those little labels pop up next to the actual image view in the storyboard when you highlight them if you do something wrong and you connected these outlets incorrectly refer back to module 1 for the war card game when we first learned about connecting outlets I taught you some troubleshooting steps and how to fix that in there now go back make sure everything saved go back to single editor view now in our card collection view cell we have access to those two front and back image views so that's it in terms of the custom classes that we need for this project alright so in this lesson we created the carp model class which returns a list of randomized cards for the view controller to use we also created a card class so that we can create card object from it and each object is going to represent the cart storing data such as which image file represents that card and also the status of the card whether it's flipped and matched so I hope you've been following along and building this app on your own computer the reason is that you're gonna learn a lot more efficiently if you type it out you make mistakes and you correct your mistakes I find that there's just no way to bypass this learning process it's also how I successfully learned app development myself now here's a question for you do you feel like you're making progress in your iOS app development journey let me know by commenting below either yes or no and you can also explain why if you want to if you enjoyed this video don't forget to subscribe by hitting that red button below and if you don't want to miss a single video hit that Bell icon as well thanks for watching I'll see you guys in the next lesson