Hey everyone, welcome to episode 5 of how to build iPhone apps and in this episode we're going to start building our demo application What i would suggest before viewing this video, is going on to my website codewithchris.com, Click this link on the side, How To Make iPhone Apps With No Programming Experience and read the first two posts to get an introduction to ObjectiveC. So, after this demo series, i'm going to start creating videos to teach you how to learn ObjectiveC but for now, i found it easier just to write everything down. So go ahead and read these two posts to get an understanding if you get lost while we go through this video. Another post that would be helpful would be #4 An XCode 4 Tutorial For Beginners. And this post I wrote to describe all the different areas of XCode and all of the different features and stuff like that. So as I'm going through XCode in this video, if you get lost, i would suggest going on my website and reading these three posts and then revisiting this video. OK, so we're going to dive right in here. In the last video, we described how these files on the left hand side here pertain to the MVC pattern and we said that the AppDelegate is the entry point to the application. By default, XCode creates a controller class for you, it creates a view for you, but it doesn't create a model, so we're going to start with that. We're going to create our model. Right click in the project navigator and click New File. You can select a couple different things here but we want to create an ObjectiveC class and we're going to call it DiceDataController. Make sure it's a subclass of NSObject. And I'm just going to save it to the root. Normally for a larger project, I might separate all the files into different folders to organize it but we won't have many files and this is a short demo, so i'm going to leave everything in the root. So what it created for me is two files for the DiceDataController class and if you guys read the ObjectiveC primer on my site, you'll understand what the .h and .m means but if you haven't yet the .h file is essentially the interface file, so it describes how other classes can interact with this class. You declare all of your properties and methods in here and in the .m file, the implementation file, you actually write the code for your methods. So we're going to start in the .h file and we're going to declare a private method. So that minus sign denotes a private method We're going to have it return an integer, and we're going to call it getDiceRoll. I'm going to copy the method signature and go over to my DiceDataController.m, so my implementation file and i'm going to implement that method in here. And if you don't have this dual view that i have here, you can go to this little icon in the upper right corner called the Assistant Editor and this view is helpful because when you're viewing a class, it's going to show you both the header and implementation file so you don't have to jump back and forth. If you were only using a single view, you'd have to toggle between the two files. So if you have a big screen or big monitor, you can use the Assistent Editor. So let's go back to getDiceRoll. So what we want to do in here is return a number from 1 to 6. First we're going to declare an integer called roll and we're going to initialize that with a random number. So this function will give me a random integer and i'm going mod that by 6. Essentially that's going to give me 0 to 5 and I'm going to add 1 to give me 1 to 6 for our roll. And then I'm going to return that. So its a simple model class that we've created, but it does its job. Remember that the model class is responsible for handling, organizing, validating the data. And so that is exactly what this class is going to do, it's going to give us the data to power the views. So now lets work on the interface. So click ViewController.xib. Switch to single view here. And what we want to start off doing is adding our background. So in the lower right hand corner here, this is called the library, you can type in, if you know what you're looking for, you can type it in here and it just displays all the UI elements that you can add onto your view. So we want to add the UIImageView which displays an image for us. Just like that. As you can see, you can specify an image in there but i dont have any images in my project so let's go ahead and add them. First i'm going to create a group in our project called Resources. And from the file system im going to drag all these images that i need into XCode. And its going to give you some options, if you want to copy it into the projects folder, if i need to. So lets look at some of the images i've got numbers 1 to 6 and i've got the background. So this is what i wanted to add to the imageview that we created. So image view, select it from here, now we've got our felt image. So let's add a label next. Another class we need called UILabel which let's us put some text on the view. Right here in the attributes pane, i'm going to specify that the font color should be white and it should say Click to Roll and it should be Justified. Next thing we want to do is to add a button. So again, we have a button class called UIButton. Add that. Change the text on the button to Roll. OK, so we've got the startings of our interface. Actually we want to create one more label for the sum of the dice roll. So i'm going to drag it from the library change the font color to white again, empty out the text. You can also label your elements here in case you have a lot and it gets confusing, so i'm going to name this sumLabel. Because episode 5 was quite long, i split it up into 4 parts so it's easier to digest Click the link in the description to go to the next part or click this annotation to proceed. Alright, i'll see you in the next part.