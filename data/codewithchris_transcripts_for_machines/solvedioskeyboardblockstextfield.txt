hey guys what's up it's Chris here in this video I'm going to show you guys how to move the text field either away from or towards the keyboard so that it stays right above the keyboard and you can see exactly what you're typing so the idea for this video actually came about one of the lessons inside my course pertaining to the text field and I was just showing students how to animate the text field out of the view of the keyboard in case the text field is hidden so in this demo right here I have the text field here and it's closer to the bottom of the screen and I can show you exactly what's happening if I tap on this text field it's going to animate up along with the keyboard sliding up so that it stays it stays in view and not hidden by the keyboard like that so the way we achieved this is really through the use of this bottom constraint right here which tells us the distance between the bottom of the view and the bottom of the text field right now it's set to be about 20 and what I've done is I've exposed this constraint as an iboutlet property for the view controller here so there's my bottom constraint exposed as an iboutlet and then in the viewdidload what I have is I've added an observer to listen for the UI keyboard will show notification which will fire whenever the keyboard shows and I've set it so that it calls a function that I've created whenever this notification occurs so the function is down here whenever the keyboard shows what I do is I grab the info along with that notification and it contains some details like how tall the keyboard is going to reach basically the height of the keyboard and I need that information because I need to animate that bottom to strength so that the height so that it clears the height of the keyboard plus a little bit of a gap and essentially what I'm doing is I'm animating the new value for that bottom constraint and setting it to a value that is just above the keyboard height so that's how that effect is achieved so back to the question that I got in the course tobe asks this sample works because there's a vertical bottom constraint on the text field however when we're laying things out in a stack view how are we supposed to achieve the same effect now that's a great question because these days we really take advantage of how easy it is to create layouts with stack views and if you're not aware of them stack views basically you can put elements inside of it it groups them together either in the vertical fashion or a horizontal fashion but you don't have to specify Auto layout constraints for the elements inside this back view the SACU handles that layout for you all you need to do is position the stack view this is a great question and I'm going to show you exactly how you can do it with a text field inside a stack view oh and before I forget if you actually want the code for the Xcode project that I just showed you check in the description for the link to download that all right so back to this example here this text field right here is inside a stack view in fact it's inside two stack views and I'm animating it so that sits above the keyboard just fine so let me show you exactly how that's done this project here is part of a project that we're working on inside the course it's a survey app and it's not complete yet so you don't see any styling but it serves the purpose for me to use as a demo to demonstrate how this works okay so here is our text field right here actually this is the text field right here and as you can see in this document outline both this text field and this label this name label is sitting inside the stack view and furthermore this stack view along with two other studies are inside an outer stack view like that and it's this outer stack view that has this top constraint right here and that's really going to be the key of this because you can't really animate any sort of constraints because this back view organizes how these two elements are laid out and this stack view organizes how you know its elements inside of it or laid out all you really have to work with you have to go way way kind of up the layers of the stack view until you reach the outer stack view which is positioned by Auto layout constraints and then you can grab one of the constraints and you can animate it now you know it's obvious what we're going to do here when the keyboard slides up we're going to increase the constant for this constraint so that it pushes the whole outer stack view down so that this text field sits right above the keyboard right but the real question is how do we know how far to push it down or you know if the text field is down here how do we know how far to you know change this constant so that that text field is always just sitting right above the keyboard well it requires a little bit of math so I'm going to show you guys how to do that math right now but first what's important is that you're going to need an iboutlet for the actual text field for its containing stack view and then all of the stack views above it until you reach the outer stack view which has the constraint and furthermore you need an iboutlet for this constraint as well so just to remind you here text field here's the stack view that contains it and then here's the outer spec view so in first view controller if I scroll all the way to the top I've got IB outlets for all of those things so here is name text field depth and IB outlet for the actual text field that we're working on this text fields back view is an outlet for that's back view and then here's the outer stack view and finally here's another outlet for that top constraint for that outer spective I've called it ever stack view table constraint and I've also created another there here just to keep track of what the original value for this constraint was because we want to animate it back to that value after the keyboard gets dismissed okay so now that we have all of these things it's going to be the same technique to detect the keyboard we're listening for the UI keyboard will show notification and when that happens we call this function which I created here keyboard will show and that function is down here again we grab the user info from the notification in order to get the height of the keyboard so here's the basic premise first of all we want to find our target ycoordinate so basically where do we want our text field to sit then we find out exactly where the text field is sitting you know because it's kind of buried deep in in a couple of facts use so we need to calculate where the text field is sitting in terms of the ycoordinate then we find out how off are we from the target so we calculate this difference and then we can either add or subtract that difference from the top constraint constant now that we have the target offset we need in order to correct things or I mean place the text field above the keyboard we can then animate that constraint towards that target offset and that's how we're going to achieve that effect so I'm going to use some diagrams to show you guys exactly how these calculations were done just to help you understand why why I'm subtracting or adding all these bunch of things okay so let's start with finding our target y as you can see with this slide we start with the height of the view then we subtract the height of the keyboard then we subtract 20 which is just an arbitrary number for a gap between the text field and the keyboard and then finally we subtract the height of the text field itself and the reason we have to subtract the height of the text field is because when you ask the text field where its ycoordinate it tells you based off the upper lefthand corner of the text field furthermore we are going to be adjusting to top constraint for this back view so essentially we're calculating a target based off of the gap between the top of the view to the top of the text field and that's our target Y now jumping back to the Xcode project the next thing to find is the ycoordinate for the text field exactly where is the text field sitting currently and this is a pretty straightforward calculation again back to the diagrams we take the ycoordinate of the outer stack view and we add the ycoordinate for the text field stack view and we add that to the ycoordinate of the name text field and that's going to give us the total distance that the text field is from the top of the view in the next slide we basically calculate the difference we take our target Y and then we subtract the current yvalue of the text field this calculates how far off we are from our desired location now that we have the offset all we need to do is add it to that top constraint to increase how large that gap is and thereby pushing that textview to our desired Y location so jumping back to Xcode you can see that's exactly what we're doing we're finding the difference between the target Y and the text field Y and then we're taking while we're creating a constant here that is basically taking the current value of the top constraint plus the difference and that is the new constant we want to set the top constraint to so next we create an animation and we're setting this top constraint the constant to our new offset and this target offset is combining the current top constraint constant plus the difference we need to push it to the desired Y location in terms of animating the filled back into it's original position well that's easy here all we need to do is create an animation that sets the top constraint back to its original constraint value which this variable here I created up here and it's just 20 now I hope that made sense and remember to check the description below the video for the links to download these Xcode projects so if you enjoyed this lesson and you want to see more please subscribe and please hit the like button thanks for watching and I'll see you in the next video bye for now