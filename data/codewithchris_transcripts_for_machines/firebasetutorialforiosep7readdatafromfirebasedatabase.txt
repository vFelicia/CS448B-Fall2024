hello welcome to lesson seven of the firebase tutorial video series in this lesson we're going to take a look at retrieving the data that we've set right here in our firebase real time database we've just got three messages right now but we're going to retrieve those and display them in our table view so one thing I should mention that's really cool about this real time database is that rather than just querying the data and grabbing all three of these posts what you can do is also listen for updates to a particular node so for example if we attach a listener let's say to this node here posts then every time there's activity in this node let's say a new message gets added our app will get notified and then we can grab that new data and display that in the table view so that's why it's called a realtime database so in this lesson you're going to see how that works as well okay so let's start by going into the documentation for the database portion and just to remind you up here you can click go to Doc's and then on the lefthand side well actually click on guides up here and then on the lefthand side go down to real time database and then under iOS read and write data so where are we here okay scroll down this is listen for value events and here is a code sample of that it's probably easier if I just show you in Xcode but notice that the function we use on the reference is observe so let's go back to our Xcode project and use that function let me show you how to do that in our execute project in viewcontroller.swift we have this post data this is just hardcoded dummy data here I'm going to get rid of this and I'm just going to make it an empty string array like that and then we are going to have to do the same thing that we in the composed view controller we're going to have to create a reference to that database so VAR reference fire database or fire oh that's right I forgot to import firebase database so fi our database dot sorry database reference that's what that is just lost my train of thought this property is going to hold a fire database reference and we're going to set it right here set the firebase reference so ref equals here we go like that so now we have a reference to our firebase real time database retrieve the posts and listen for changes so now that we have the reference to the database we can retrieve our posts so we go ref dot child and we have to specify the path to the data we want to retrieve and that is posts because that is this node right here and I'm just saying that I want to retrieve all of this data and I want to use that function that I mentioned observe there is a couple of different ones you'll notice that some say observe only and some say observe single event so I'm going to explain to you what single event is in a short while after we implement this but for now let's use observe event type and with a block of code that we can put in to handle when that event happens I'm going to double click that and oh one thing I wanted to make sure you notice let's press observe again this function here returns this you int okay that's going to be important in a second okay so the event type let's specify that let's see what sort of event types that we can specify press dot autocomplete should pop up okay and the one we want to use is child added because I'm interested in all of the new posts I get added when a new post gets added I want the code to execute so I'm going to pick child added if you pick something like you know these are pretty self explanatory value it's kind of the general one if anything changes with any of the data below this note then if you're interested in that that's the one you want to handle but I only care if new posts get added so I'm going to choose that and for the block of code for this closure you can just double click it to expand it in here we're going to put the code to execute when a child is added under posts and it has a single parameter which contains that data it's a fire data snapshot so I'm going to call this parameter snapshot so we're going to refer to it by that name okay so I've told it to observe this node posts and for the event child added how this works is it's going to initially go through all of the children of posts and it's going to fire that code once for each child so in my code in this closure here I basically want to take that data that it passes me back and add that to my messages data right that I have up here which I called post data let's write a comment so we know what we're doing take the value from the snapshot and add it to the post data array and after it goes through each of these pieces of data under post it's only going to fire again when a new post gets added so that connection is open to the database and it's going to keep listening for that data we are responsible for stopping that in other words detaching that listener and the way we do that is rumor I said this function observe returns a you int well that UN is the reference to that specific listener or this connection that we have open here that's feeding us all of these updates under posts so we want to keep a reference to that because later on we can use that reference to close or detach that listener so I know that from reading the documentation that what it is is a database handle and the class is an F I our database handle so I'm going to create a property for it up here and I'm going to set database handle equal to that call to the observe function because that is going to return that you end and I'm going to keep track of it using this property here so now that we have this set up we are going to right now post data is an empty string array right this code is going to fire for each piece of data under posts and for each piece of new data so whenever I get a piece of new data I basically want to take post data and I probably have to refer to it using self because we're doing this inside a closure self thought post dot append and I have to append a new element which is going to be a string because post data is a string array so before we do that I want to see how snapshot this fire data snapshot class is structured and how the data is returned so I'm going to set a breakpoint right here just so we can take a look inside snapshot and run the app so hopefully if it connects to the firebase database it's going to hit this breakpoint all right looks like it has and under here in the console there's all of these warnings and things like that that's happening behind the scenes I won't worry too much about that until we're actually running it on a device and not a simulator because things can be different so I'm going to use peel for print object I'm going to in snapshot and just to see what is returned so that looks to be the key right that's this guy right here right yes and the value is that hello firebase so what I'm going to do is we can't just append snapshot as is dot so there's a property for the key which is string and for the value it's any because and it could be nil as well so take note of that it's an optional any so we need to take this value and we need to change it into a string first before we actually append it so let's say let let's say let's say the post equals snapshot dot value string and if let actual post equals post so we're using conditional binding here so if there actually is data in there because we're trying to turn it into a string if for some reason it's nil or it fails then it's not going to execute like it's going to fail this condition so this the if statement here this conditional binding here is testing if there's data inside here and if there is it's going to assign it to actual post as a string so we're just going to append actual post into post data like that into our right and we're going to call reload on the table view to refresh the data so let's say table view dot reload data so let's write some comments so we know so it's clear what we're doing here so append the data to our post data array reload the table view try to convert the value of the data to a string okay so I'm going to remove the break point is youself here and okay let's run it again so now you see our data from the firebase database and what's happening is basically when we use this observe function right here it's looking for this event child added on this posts node and every time this event happens it's going to run this code down here and when it runs this code it passes us the data that's associated with this event so we can actually try this out here right here in our simulator right now in our database we have three items so if I had another device and I was running it and I added a message it should instantly show up here but I'm going to do it through here and it should happen as well so I'm just going to add a post in this database and because we have this observed function listening to this note posts it's going to pick up that a new child was added and then it's going to run this code and append that new data to our post data array and then reload the table view so let's see if that happens just put that right there I'll shrink this a little bit so so Auto ID I wonder if I can actually do that from here I'm not sure about that so I'm just going to put in some ID like that and this should show up so you see how fast that happened that is really cool now what if you didn't want to listen for any sort of event you just want it to retrieve the data and not have an open connection you can do that using if we scroll back up here instead of using the observe function we use the observe single event of and using this one we can read the data once and then it won't keep an open connection and be listening for any sort of events on that node so that pretty much sums it up for our messaging app so now you know how to create your firebase app how to add the SDK into your Xcode project how data is stored in your firebase real time database and furthermore how to read and write data to it and from it oh yeah not to mention how data is stored in that firebase database in the future we'll work more with the firebase real time database as well as potentially other features of firebase thanks for watching and I'll see you in the next lesson