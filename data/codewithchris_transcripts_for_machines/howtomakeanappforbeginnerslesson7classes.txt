hi welcome to lesson 7 in the previous lessons you learned about some basic Swift code and also how to organize that code into executable blocks called function well in this lesson you're gonna learn about how to organize and group those functions together into what's known as a class before we go on I just want to say something learning something new is hard seriously I know firsthand because I fail that learning Iowa's programming myself when I first tried for coming this far give yourself a pat on the back especially if you've never coded before I know you might be wondering variables constants functions classes why the heck do I need to know all of this stuff well by the end of this lesson and when you start to watch the next all the pieces will fall into place we're going to go back to the Xcode project I'll point out all the little pieces to you that we've been learning about in the past three lessons and you'll have a Eureka moment so I want you to pay extra attention to this video because it's the last lesson that we're gonna do on Swift before we go back to our Xcode project and finish building that war card game app all right here we go all right so we're starting with this playground and I've got two functions here you should be able to read this Swift code and understand what they do here's the thing these functions don't actually do anything but you can read the function names one function is supposed to initiate cruising and the other function is supposed to initiate the rocket thrusters now for instance inside this function we're supposed to write the code that will initiate the rocket thrusters essentially to carry out the task set out by this function and likewise in here we are supposed to write the lines of code that will initiate cruising now all of the lines of code that we write in here they all contribute and they all relate to this task well we can go on to say that these two functions have related responsibilities that serve a higher purpose for instance we can group these two functions together into a single class let's see how we can declare a new class I'm going to declare it up here create some space we start with the class keyword and then we are going to put the name of the class and I'm going to call the name spaceship and then you hit space and then you open up a pair of curly brackets and inside the pair of curly brackets let's create some space because all of the functions that are related to this class are gonna go in there so I'm going to highlight these two functions like this I'm going to press command X my keyboard to cut it and then I'm gonna put my cursor inside the curly brackets of my class and I'm going to press command V to paste these two functions inside my class when the function is inside of a class like this it's no longer called a function it's actually called a method of that class I know it's kind of confusing check out these diagrams first we had functions and then we put them inside of a class and now they're called methods I want to talk about variable scope for a second in the last lesson you learned that declaring a variable inside of a function it only exists within that scope so for instance we declared a variable called name in function a we cannot access that name variable in function B because function B has its own scope same goes for the reverse if we declare a variable in function B we can't access it within function a because that variable only exists within functions B's scope now get this the class actually has its own scope you can actually declare a variable inside the class that sits outside of any function this variable exists inside the entire scope of the class since function a and function B are also inside the scope of that class they can both access that variable when you declare a variable inside the class but it's outside of any functions it's called a property of that class again I know it's confusing because we're kind of changing the name on you when it's inside of the class but that's what it's called so let's see this in action I'm going to declare a property up here that is inside my spaceship class but outside of any functions and I'm going to declare it I'm going to call it fuel level and I'm going to go ahead and set that to 100 for instance inside of the thrust function we will need to access the fuel level property to determine if we can perform the thrust so let's just check if we can access that guy like that and let's wait for Xcode to do it Oh actually it's not going to output this because we need to call the thrust function it's not going to run this code until this function gets called however we know that we can access the fuel level property from inside the thrust function now let us try something else here if I declared a variable inside Cruz let's just call it test equals test from within the thrust function I can't access that test variable you're gonna see that it throws an error here so this proves that the scope of the functions remain the same right each block of code inside of the function is in its own little bubble right it's in its own little scope but however when you declare something outside of the functions but inside the class that is available for the entire scope of the class right so even in here in Cruz I can access the fuel level property let's get rid of that print yeah so there are no errors with the way it is right now inside both functions I can access fuel level because fuel level exists for the entire scope of the class let's go ahead and erase these print statements all right now we're gonna take a giant leap and I'll explain to you how classes are used it's going to require a little bit of abstract thinking I just want to say that in my four years of teaching iOS programming this is one of the hardest concepts if not the hardest concept for beginners who have never programmed before to understand however once you get this concept you'll have passed a major hump that so many beginners have given up that I'm done talking let's do this so let's use our analogies here so we have some data and we have some variables and constants as sticky tabs now we have functions then caps these pieces of code let's say that functions are like file folders now we have classes that contain a bunch of functions and variables and let's say that the class is like a file box that contains the file folders and the pages well at the end of the day what we have is just a file box full of instructions it doesn't actually do anything some people think of the class like a recipe some people say to think of it like a blueprint what's the common thing here they all need someone or something to turn this set of instructions into action someone takes the recipe and turns it into a cake someone takes the blueprints and builds a spaceship this spaceship will work exactly like we've designed it to it can thrust and it can cruise because we gave it functions to do so but understand that the class itself doesn't thrust our crews it's the actual object that gets created from the class that will thrust their crews furthermore once you have a blueprint you can make multiple spaceships each of them will have its own fuel level and ability to thrust their crews the blueprint is called the class and the objects that are created are called objects or instances of the spaceship class all right so who is that person that will take that class and turn it into an object well that's the device in your hand it's like a mini computer you write your instructions in Xcode Xcode will turn it into a format that can be understood by your device and your device carries out those instructions here's the tricky part you need to write instructions to tell the computer to take your classes and turn them into objects and furthermore you need to write instructions to tell the computer how you wanted to use those objects for example your write instructions like when the user taps on the lift off button create an object from the spaceship class call the thrust function of that object and then call the cruise function of that object that could be an app right there let's go back to our playground and see how we can write instructions like this so here we have our spaceship class that's this whole thing right there and it's got a property called fuel level and it's called two functions right here so in order to take this spaceship and turn it into a spaceship object this is what you do you call the class by its name like that and then you put in those two rounded brackets and that statement will return a spaceship object to you now just like a function returns a value to you we need to assign this new object to a variable so we can keep track of it so let's create maybe we can use a constant this time let's create a constant called my ship and then equal and this line right here creates a new spaceship object and we're going to assign that object to the my ship constant now remember back in the first Swift basics lesson I told you that variables and constants can only be assigned data of a single type watch this I can't do something like my ship equals 10 now alright because 10 is an integer and what did I sign to it first I assigned to it a spaceship object your class is actually also a data type now so where I could do something like this no var my int is datatype of type int you know and assign a 10 here I am specifying that this variable will contain this datatype I can do this this variable will contain objects or this type so that's why I cannot assign my ship equals 10 because once I create a spaceship object and assign it to my ship it can only be assigned spaceship type of objects and don't forget that this is a constant so I can't even reassign anything to it but if it were a variable I could assign a new spaceship object to it I can create another one and then assign it to my ship but I cannot start assigning other data types to it all right now the next order of business is how do I take that object that this variable is pointing to and then access the fuel level property or call the cruise or thrust function let me show you how to do that so we're going to type in my ship that's the variable right and it's pointing to our spaceship my object and then I'm going to use what's called dot notation so I'm gonna just press dot on my keyboard and then it's gonna show me all of the available properties and functions that I could access and call so for instance if I chose thrust like this I would actually be calling the thrust function of this spaceship object if I did this my ship cruise I would be calling the cruise function of the spaceship object and if I did this I can print it I would be accessing the fuel level property of this spaceship object now I can actually also set it so I can do dot fuel level equals 10 and then when I do that the new fuel level will be 10 and you can see that it prints it out here it's gonna be 10 so using dot notation you can access the methods and properties of that object I like to think that coding an app is like writing a script for a movie the movie script is your app code the character roles are the classes you designed but the character roles themselves they don't do anything those roles need to be filled by physical actors and actresses just like we need to turn classes into objects then the actors and actresses follow the script to perform your movie just like how your objects work together to make your app function alright so all that was pretty abstract but in the next lesson we're gonna put all of it into practice let's recap what we've learned you've learned about classes and how they contain methods and properties you learned that classes don't actually do anything themselves they need to be turned into objects first these objects are also called instances of that class you learned how to create an instance of a class you learned about the dot notation and how it can be used to access the methods and properties of a class you also learned about the variable scope within the class itself if you need to rewatch this video and ask any questions you might have in the comment section below I also have a worksheet for you to practice what you've learned today in the next lesson you're going to start bringing your app to life with your newly minted Swift if you're excited like I am type I'm pumped in the comments section below if you'd like this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a video make sure you click that Bell icon as well remember you can download this lessons worksheet from the URL that's on the screen or in the link in the description below