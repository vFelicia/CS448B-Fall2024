in this lesson we're going to create a custom tab bar for our app and it's not as hard as you might think here's what it's going to look like when it's done all right let's dive in and see how it's done all right so let's take a look at the design here and we have this tab bar that we're going to try and build now one thing is I am not going to use these icons here um I've talked to JC about this I'm actually going to use the SF symbols and if you're working on a team let's say you know at a company you you probably can you can suggest it to the designer but being a developer on the team you have sort of limited say as to um what to do if that really is the designer's vision to use you know custom icons and custom designed uh icons for the tab bar then that's what you go with but uh for me being so the owner of this app I am going to decide that I want to use SF icons and there are some pretty close ones as you'll see um to these all right so let's jump into Xcode here and let's start implementing this tab bar now this content view we renamed it to root view we actually renamed everything to root view except for the actual file name so let me go ahead and do that as well and finally we're actually going to put the tab bar in a separate View and then just include it in this root view so I'm going to go ahead and start creating some different folders in here for our different views so I'm just going to call this our custom tab bar put that up there and inside this folder we're going to create a new Swift UI View and I'm just going to call it custom tab bar and in terms of the root view how we're going to include it is we're going to use a vstack and we're going to put the tab bar down here in order to push the tab bar all the way to the bottom to put a spacer here and I'm going to create an instance of our custom tab bar and after we designed how this tab bar looks like after we make it look like what it's supposed to then I'll talk to you about how we can track which tab is tapped on and things like that if you went through the Swift UI design course that's part of this CWC plus program you'll also you'll know how to build these custom tab bars already okay so inside our custom tab bar view let's start with an H stack and we're going to put the three buttons in here right because there are these three buttons and also this tab bar is a specific height it's 82 and it's always going to be 82. so I'm going to code that height right here frame height D2 inside here we're going to put the buttons now we are going to want to make these button this button reusable so we are going to end up putting this into its own reusable view probably called custom tab bar button or something like that and then just have three instances of that however in this like for now I am going to hard code the three buttons here just so we can design it and make sure that we get it to the point where it is functioning and it is looking like what we want and then I'll refactor that code into its own reusable tab bar button all right so we're going to start with just a plain old button uh so here switch to and for the label if you take a look at this it looks like a vstack to me right so there's an image there is a piece of text and there's also like an accent here which we will do probably do that last let's do the icon and the text first also notice that it's all centered and by default this v stack is centered anyways so we're going to have an image system name and this is where we are going to bring up this and it's called Bubble yeah bubble so I'm going to use bubble left Okay I lied it's not exactly the same as what we have here but that's what we're going to use uh if you did want to use these images right what you would do is you would export these images exactly like how we exported all of the other design Assets in lesson two and then you would include those design Assets in your asset library right in here you probably like have another one called tab bar icon images or something and then in instead of putting the SF symbol name you would just you just put whatever name you you put in your asset Library here because that's how you specify an image from your asset library but since we're using SF images this is what we're going to do um okay so vstack we also have text for that this is going to be just chats now this text is using you know you see we have all the fonts right if we go into the inspect panel it is using Lex and deca regular size 12. and we have specified that here Tap bar as a font right so now I can very easily just go font font dot tab bar and let us turn on this preview you can see what that looks like okay so we have chats there now let's double check the spacing between the text and the icon so we've got four we've got four this one looks a little oh it's still four okay so we have four so I am going to specify you know rather than specifying I could do padding top is four but I think I'm going to specify it here so alignment is Center and spacing is four so that's going to put four right there also I'm gonna constrain this image this SF symbol to whatever size it's supposed to be so this is 18 and 18. this one's a little bigger 32 by 32 and this person select the whole person here is wait I'm not selecting the right thing okay this this person this contacts icon is 24 by 24. this is actually smaller this icon oh wait nope I selected the wrong thing before 24x24 okay so these two icon images are 24x24 this one is 32 by 32. so I'm going to restrict this I don't want it to uh warp so I'm going to set it to resizable uh scale scale to fit and also frame with 24 height 20 24. all right perfect and also the uh the color for the tab is going to be we have a color for this uh let's see icons what color is this see here did we include that here I think it's this one icons secondary go back to the UI design yeah all right icons secondary so what we can do is for this button we can say that the tint color is icons secondary right so that's our gray right there and we are just going to copy and paste this for the second button and the second button is going to be let's work on contacts and the SF symbol is going to be person person said profile Maybe so we are going to copy that put that right there okay and then now let's work on this middle button uh this one's going to be a little different so that's why I'm going to code this one out now this is a vstock again but this icon actually we do have an SF symbol for this this is slightly bigger though so I guess I can take that paste that there and this SF symbol is going to be add or is it plus oh yes here we go plus Circle fill that's what we're going to want and remember this is 32 by 32 this is me chat and um The Tint color The Tint color for this is going to be color icons primary if I remember correctly okay so now we have this notice how it doesn't seem very aligned right you see chats and contacts are aligned on the same yaxis but new chat is slightly below if you take a look at this it's sort of the same thing although it's less obvious or you could see these two lines you can see these two red lines connect shots and contacts but new chat is sitting below that um here it's it seems like it's a little bit too much so we can change the alignment for the h stack to Center um I think that was actually by default I think maybe it's just it looks so off because they're so close together and then when we finally space them out it might uh it might look more like this so that that's the next thing we need to do is to spread these guys out and uh what I'm going to do is I am going to put the button inside a geometry reader and then have the button take up the entire space of the geometre and you'll see why in a second because it's going to help us actually uh put that blue rectangle over the tab the problem with putting the blue rectangle let's say I just create a rectangle right here I'll show you why first so you can understand how we're going about this let's just put in some arbitrary numbers okay so let's say I have a blue line here marking that this is the current tab it's really hard to tell right here but because this is a vstack this tab having that blue line is going to be like it's going to shift this icon and shift this text slightly below this tab right see this tab doesn't have that blue line now you could say I can put maybe an invisible rectangle there and then just turn that like white and turn that blue so that they maintain sort of the same height whether they have a blue marker or not however if we use a geometry reader or we use a z stack this blue line doesn't um it doesn't push everything down because with geometry readers and Z Stacks it put thing it it layers them on top whereas vstack it distributes it one below the other so here let me demonstrate what I'm trying to say here and it's more obvious if I let's say do that right if I do that now you can see like this icon is is really out of place vertically as opposed to this icon here okay so we're gonna I'll say take take that and then we're going to create a geometry reader we're gonna wrap this vstack inside this geometry reader right and then now inside this vstack you can um do frame width is geo.size.width height is Geo dot size dot height and let's zoom out a little bit you can see the geometry reader tries to take up as much space as possible so that's another reason why I'm using this instead of the um the zest stock and now if you see if I put um I put this rectangle in here you'll see that it doesn't take up even if I make it a five more like a 10. you'll see that this icon is still in line it's going to be in line with that one let's put the geometry reader on the contacts one as well and then for this v stack I can do frame width so you've got size.width and height to that size that height and let's just command a and Ctrl I to just reindent everything now you can see that even I have this thick blue accent here the chats and the content contacts icons are still in line with each other so now the the other question is you know we we're going to have to position that actually over the um the icon okay so let's go back into the figma file and double check and notice that this isn't a perfect rectangle the bottom left and bottom right Corners are rounded and we will address that um later on but for now we're just going to use a straight rectangle because this is going to require some special treatment with the default Swift UI Corner radius modifier you're not able to specify specific Corners you want around so we're going to have to address that later on but for now let's take a look at the height and the width 64 by 4. so we can I'm going to change the height to four for the width rather than I think rather than hard coding it as 64. what I'm going to do is I'm going to make it relative to the geometry reader width the reason for that is because this geometry reader width gives us the width of the entire button right so I'm going to make this blue rectangle um half the width of it and then I'm going to add left padding equal to a quarter of this width and that's going to position that directly in the middle so let's go ahead and try to do that so the frame instead of 64 it's going to be Geo dot size dot width divided by 2. right so it's going to be half that looks like quite a bit but let's finish this off and see what it looks like so padding dot leading so that's padding from the left uh to the to the size of to the amount I mean of divided by four and that's going to put that right in the middle okay um let's stick with that Okay so we've got our so we're gonna have to actually put the same thing on the contacts as well right here so you'll see it both like that now this new chat button is not actually a tab it's a button and that's why it looks a little different when you tap on this new chat we're not going to put a blue accent over it because it's literally going to pop up a new screen an overlay popup that looks like this this new chat where you're going to be able to specify you know add some recipients and start a new chat whereas the other two tabs this chat tab has a blue indicator because this is the chats Tab and then the contacts button brings you to the contact contacts tab so that's a separate screen as well that's why those two have blue markers now we have to make all of this functional right because this is not actually functional just yet and we also have to turn at least this button the chats button and the contacts button into a reusable component because there's no point in having mostly the same code in two different places but first of all let's make this tab bar work because for now these are just um these are just buttons so we need to keep some State as to what tab it's currently on now um typically if there are a static number of states like a known number of states you can create an enum type so I'll call this tab or let's call it let's do tabs actually we'll this is going to be an INT and there's going to be a couple of different cases so it can either be you know chats and we'll call this zero there's going to be contacts wait case and then this will be one and because new chat is a button and not a state uh I don't know if I'm gonna put this case here let's leave it out for now but the next thing we have to do is decide where are we going to keep track of the current tab that you know the currently selected tab should we do it in this tab bar or should we do it higher up in the viewer hierarchy and I would say that we should do it higher up in the view hierarchy the reason is because if you take a look at this preview here we need to know like the root view needs to know what is the currently selected tab so that it can change what's here in in this top section right so therefore I would say that we need a state property here call this the selected Tab and this is a type of tabs and we are going to default this to contacts because I think that that is after the onboarding screen um we are going to throw the user into the contacts tab so I'm going to set that as the initial one and then the tab bar however you know when the user Taps on these buttons we need to somehow communicate back up to here for the root view to change the state to to whatever tab the user selects right so inside the custom tab bar here there should be a binding right bound to this property here so here you know if you're unfamiliar with State properties and bindings I would say review the foundations course in the CWC plus screencasts course there's also a lesson on Swift UI data flow so I'll link to that in the description as well so you can that talks all about State Properties bindings and and that sort of stuff okay so selected tab easy tabs so now we have access to this select a tab now we also have to now pass this through as a binding tab and so this property gets passed through when we create the custom tab bar it's going to be bound to this property right here and then now when the user Taps on this one switch the chats we are going to be able to say selected tab equals chats okay and then down here this is switched to contacts we're going to be able to say selected tab equal equals contacts the next thing is that we only want to show this blue Mark if it is currently you know contacts so we can definitely add an if statement here so if selected tab is equal to contacts then we are going to show this blue mark and then same thing for up here if selected tab is chats then we are going to show this blue mark here like that let's reindent everything and our preview is broken but however we can dot constant and we can just pass in contacts for our preview okay so now let's try to run this and see what happens all right so contacts is the first tab so that works and this is just the button all right so our tab bar is working the next thing to do is to refactor this button out of this tab bar and make it a reusable view so let's add a new file Swift UI View and call it custom tab bar button let's just call it tab bar button oh that actually might be a reserved maybe not okay so we are going to basically grab and I want to keep the buttons here because I don't want to introduce another layer like I don't want to have to pass the selected tab down to the tab bar button itself so I'm actually just going to make this part reusable you know the visual which is the majority of the duplicated code anyways so taking a look at this highlighted code the things that are Dynamic is the text the SF icon name and also whether it is active or not whether or not we should show this blue rectangle so I am going to create three properties here VAR image name and also a Boolean for whether or not we should display that blue rectangle okay so I'm going to go here I'm going to copy this I'm going to actually I'm going to cut it no I'm going to copy it okay copy go here replace this text label with our visuals and then for the button text I'm just going to replace it with our property button text for this I'm going to replace it with image name and then for this I'm going to say if is active all right this Boolean is true then display this and I think we're good okay missing Arguments for the preview uh let's say chats bubble dot left true let's see if we can get a preview all right it looks off because it's not in the context of this H stack okay so here we are essentially going to get rid of all of this I'm sorry comment it um but I can replace this with tab bar button and I can put chats bubble dot left and is active is basically selected tab is equal to chats we can space it out so it looks better easier to read alright so now let's do the same thing here and uh for this for this contacts one all right so instead this is going to be contact this is going to be contacts and this is just going to be a percent and I can get rid of all of these all of this duplicated code all right now let's run it again just to make sure that everything still looks okay and we're going to be done with our custom tab bar that looks pretty good