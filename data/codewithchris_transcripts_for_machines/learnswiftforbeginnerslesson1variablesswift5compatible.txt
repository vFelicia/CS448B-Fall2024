hello welcome to learn Swift programming for beginners lesson one today we're going to talk about variables you're going to learn about what they are how to declare them in Swift Code and furthermore how to use them all right so let's get started for the rest of the lessons in this series we're going to be working inside this app called xcode xcode is the tool that Apple has provided for people to build apps with and inside xcode you're going to be able to create your user interfaces you're going to be able to write the code to express the logic in your app you're going to be able to test your app even so that's why this is where we're going to start in learning Swift we're going to be writing the Swift Code inside the app that you're actually going to use to build apps with in the future so this is where you're going to get xcode just go to your browser go to developer.apple.com excode or you can launch the Mac App Store on your computer and search for xcode there if you're on the web page you can see that there's this big blue download button up top now ideally you want to make sure you're using the latest version of xcode and right now as of this recording it's 8 and you can check your version if you go to xcode uh you can see it here in the welcome screen and you can also go up here to xcode about xcode and you can see what the version is if you're a PC user and you're running Windows there may be some additional work you need to do before you can run xcode or you might have to use an alternative solution to build iOS apps so check in in the description below for PC Solutions however if you are a PC user don't let that discourage you uh for me personally I lost about 2 to 3 years of learning iOS development simply because I didn't have a Mac and I didn't want to get a Mac but these days there are alternative Solutions you don't actually have to buy a Mac computer although I eventually did and now I haven't looked back so anyways now that you have xcode and after you've installed it it's a pretty large install it's pretty big program so uh it might take some time but after you have it installed and you launch it you're going to see this welcome screen you can see here that when you want to create an app for iPhone iPad Mac or whatever you're going to go to create a new xcode project and that's going to start a full out um project for you to build an app in but here we're going to start a new playground because that's going to allow us to type some code quickly it's going to let us run that code and see the results and we're not committing to building in a project it's simply like a Sandbox or a playground as it's named now if you don't see this welcome screen what you can do is just go up to file new and hit playground right there and that's going to start a new playground for you as well or you can just hit this button get started with a playground so that's going to launch this dialogue for you and I'm simply going to leave the default name there platform should be iOS and I'm going to save this on my desktop okay so after your playground runs you'll see up here it's doing a whole bunch of stuff launching simulator getting it ready and when it's done all that it's going to say ready you can already start typing in code so there you go it says ready but um when it doesn't say ready and it's doing something then chances are whatever you're typing here is not going to show up on the right hand side okay we're going to start with a quick tour of this playground window here so down on the left hand side I have a bunch of line numbers now if you don't have these and you want them they can be useful at times especially when I'm teaching and I need to refer to line numbers you can go to xcode preferences and you can go to text editing and you can simply enable line numbers there now this area right here is where we're going to type our Swift Code and it's already got a bunch of stuff for us right here which we're going to go through in a second on the right hand side you're going to see a quick preview of the results of what you typed there now a lot of people people have trouble with getting output to show up on this right hand side based on what they type here um well one of the things that you can check is just in this status bar up here make sure that it says ready and as you're typing something let's say I change something like that you're going to see that it for a brief second there there was a little spinner because it's evaluating your code here um if you want it to show up just make sure it says ready to process your next command and you know you you should see that output there alternatively there is a tray down here which you may not notice because it's hidden at first you can hit this button to show the debug area or there's also this little button here to hide the different panels okay but we don't need to see all of that but this debug panel may be useful uh when we start to uh output things here this is called the console area where we can use Swift commands to out put things this blue icon here is to execute the code in your playground so if you can't get things to show up on the right here try clicking this button to run your playground right now it's blue because you can see there's a little drop down arrow there if you click and hold it you can see whether you want to switch it to automatically run and that's going to run the playground whenever you type something or you can set it to manually run and you can see now it's grayed out so if I type in some new code it's not actually going to change or display what I have on the right hand side here unless I click the play button to run it so I would recommend to have it set to automatically run so now that you know the main areas of the playground let's get into the meet of today's topic variables and in fact what we have here is a variable in Swift a variable holds some data now this data could be a value it could be a reference to an object or it can even point to to a function which are things that we'll get into the future but for now we're going to say that variables hold data now as you can see from this example line of code a variable has a couple of distinct parts let's break it down variables need to be declared before they can be used so this VAR keyword is used to declare a new variable following the VAR keyword you have the variable name in this case it's St and really that's it you've declared your new variable so it's got the VAR keyword and it's got the variable name now taking a look at the whole line what we have on the right hand side there that's some data we did say that variables hold data right and that equal sign in between the variable name and the piece of data well that's an assignment operator so what we're doing in this line of code is we're declaring a variable called Str Str and then we're assigning that piece of data to that variable so now jump back into the playground let's see the effect of that I can say something like print which is a keyword that is going to print something to that console area down below so if I say print and then in the parentheses I put Str Str you can see that it's printed that hello player s Ruff line down there on the right hand side uh we can see a quick preview of that and notice that there's a slash n here and that is basically um just denoting that there's a new line associated with that print statement because uh the next time I print something it's going to be printed on the next line so you don't see that here because a new line is just um a carriage return or white space you can't really see it but in here in this preview um it's visualized as that sln which is just a new line so let's take a look at a couple of different pieces of data that we can store into variables so I'm going to declare another variable here called a and I'm going to assign a number into it so just VAR one and I'm going to declare another one called B uh which I'm going to also assign one and I want to show you that you can perform operations between the variables or on the variables so for example I can say print a plus b and you can see here that the result in the console here is two now notice that when I'm using the variables in an equation or an operation like this I don't need to use the keyword VAR because that's only for declaring variables right so this little part is declaring the variable but when you use them afterwards you just need to refer to them by name so let's try some other things print a minus B right print a * B okay so variables hold data and you can perform operations on variables now you can change the data that the variable is holding so I can say something like a equals 2 now right in fact actually let's not do it down here let's do it here after we've assigned one into a let's say a equals 2 and as a result you can see all of these operations have changed because a is now two so A + B is 3 a minus B is 1 and so on cuz a is now two now when you assign something into a a different piece of data it replaces what it was holding on to before so a is no longer one uh it is now two but notice how when we assign a new piece of data into a we don't have to write VAR again that would cause error because we've already declared that variable up here and memory in the system has been allocated to it and so we don't need to redare it all we need to do is assign new data into a like that now if you're playing around in the playground yourself you may notice something like what if you try to assign something into St Str like one well you're going to get an error and that's because of something called data types which we're going to learn about in the next lesson but for now just know that for Str Str because we've assigned some text into it up there if we want to reassign some data into it again it has to be text as well so that would be valid furthermore you can also assign a variable as another variable so I can say a equal B down here and in that case a would now equal one again well it was one to begin with so let's say I did that so if a was two and then I said a equals B then now they would both be one now before we move on a quick note on naming variables here we have a variable St Str and I've named some variables A and B so normally you wouldn't name variables Like A and B because they're not descriptive of the data that they hold so if you're going to be using variables just like this in an operation wouldn't it be easier if you knew what a represented and what B represented well you can declare your variables using any sorts of names that you would want but you can't put some special characters and you can't put spaces in your variable name however the common practice is to use a form of camel case where the first letter is lowercase so let me show you what I mean so I can say VAR and if I want to describe my variable if it represents um let's say the number of apples that I have I would say something like my number of apples like that and you can see that each new letter of each word is capitalized except the first one now you don't want to get too crazy with the length of the variable name as well and you don't want to go too short so short that it doesn't actually uh mean anything so there's no right or wrong answer or hard limits it's based on you know your own preference and it's more important if you're working in a team with other people that you agree on a certain coding style because you're both going to be working on the same code okay so one more thing I want to talk about are constants so they are like variables except that once you assign something to them you can't reassign data into them so that's really the only difference that and also how they're declared so with variables you use the keyword VAR but with constants you use the keyword let so I can say let C equals 10 and then down here if I try to reassign something into C like that xcode is not going to like that and it's going to throw an error and it's going to tell you with this red dot down here and if you click it it's going to say cannot assign value to C because it's a let constant now it gives you this little bubble here which you can click and smartly it's going to change let to VAR because it senses that you want to re assigned data into it so you might ask why would I ever want to use a constant if it's more limited in its functionality right if I declare everything as variables then I have the all the flexibility I would want well there are a couple of reasons why you'd want to use constants when it makes sense for one thing it helps the computer work a little more efficiently because it knows exactly what that constant will be and that's not going to change but more importantly it's that for you as a coder you know that that constant isn't going to change because when you're building your app you're going to have a lot of variables and when you have some sort of um issue in your app and you don't know why it's happening and you're tracking down your code you're tracing it line by line and you're trying to see if maybe at some point you've accidentally assigned something to a variable and that's throwing off all your calculations or all of your logic it's going to be a nightmare to try to solve and untangle so if something you know it isn't going to change you can assign it to a cont constant and then when you're looking through your code you can be sure that the issue doesn't lie with that constant because you know it can't change okay so that's it for this lesson on variables I hope you're practicing on your own computer with xcode and check below this video for a link to the cheat sheet and the notes I'm going to have those ready for you as soon as I can if they're not already down below the video so thanks for watching and I look forward to seeing you in the next lesson okay bye for now