hello and welcome to my Swift tutorial beginner series in this video we're going to talk about properties which you've been using already ever since we introduced them in our classes lesson however in this video I'm going to go through some additional things that you can do with properties all right so let's get started so before we start one thing that I wanted to point out to you just in case you didn't notice is about property scope so remember back when we talked about functions and talked about variable scope and how if you declare a variable inside of a function you're not going to be able to access and use that variable or constant outside of that function you can only use it within that the curly brackets of that function so each function has its own variable scope but when you declare a class like we have for example here these properties that we declare up here they're kind of just like variables that are at the class level so because they are declared up here at the class level they are accessible and usable by any of the functions inside that class so for example here you can see our do work function or method sorry if a function is inside of a class that's called a method remember so in our do work method of the employee class here we can access the salary property because as declared up here and if we had more methods in this class inside each of them we would be able to access the salary or the roll all right so that's just one thing I wanted to get out of the way in case that wasn't clear one cool thing that I want to talk to you about declaring these properties up here is that aside from them just being variables at the class level there are some unique things that you can do with them for example let's take this manager class right here let's say that we wanted to create a bonus property that would basically determine how much of a yearend bonus this manager would receive as part of their compensation so let's create a new property called bonus however and you know this is going to be an int type however the bonus is actually tied to how many people they manage so you could do something like this for example maybe in the initializer function of the manager class you could say that the bonus property equals let's say team size times a thousand so you get an extra thousand dollars for each team member that you manage right so you could definitely calculate that in the initializer function of the manager and set that property however there are something called computed properties and that allows you basically to make your property a calculation so instead of having to explicitly assign a thousand times team size to the bonus property you could just make this bonus property a computed property so to do that you would declare your property and you have to specify a data type and then you have your curly brackets and let me just write a comment here this is a computed property one it's accessed the code in here will run then we'll return the value so here we can say return team size times a thousand and literally as simple as that so the bonus property is calculated via this calculation here it's a problem right now is that the team size is zero so we need to be able to specify the team size why don't we set that as part of the initializer function so we could we don't have to over I let's create our own one which takes in a name but it also takes in a team size which will be an integer alright so this is our own custom initializer function for the manager class however because the manager class is a subclass of employee and it inherits all of the employee classes methods and properties we have to make sure that all of those are initialized properly to so the way we do that is we can simply call super init which is basically calling the init function of the employee class so we're gonna pass in the name this calls the init of the employee class additional and then work here we will set selfthought team size equals team and because you know the parameter is a different name from the property we technically don't need the self we could just do that and it's very clear what we're trying to do but you it doesn't hurt to add the self as well just be consistent in your coding all right so now let's try to create a new manager object and then try to access this bonus property so down here say let M equals manager we're gonna use our new fancy init method let's call her Kate and the team size is let's say 11 all right let's print out what would her bonus be let's run this code and it is 11,000 so that's pretty cool now there are additional things that we haven't covered in this lesson such as getters and setters and property observers but we'll have to do another lesson on properties later on for now this is a great start if you liked this video please give it a thumbs up and please subscribe for more now click on over to the next lesson and we'll talk over there