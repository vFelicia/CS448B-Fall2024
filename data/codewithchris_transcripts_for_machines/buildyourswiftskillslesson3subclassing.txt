back in module one you learned all about classes you learned about why we use one how to declare one and finally how to declare methods and properties in the class and if you don't remember we used an example of a spaceship and we wrote out a spaceship class with the crews and the thrust methods well let me pose a question to you what if we needed a slightly different spaceship one that let's say it was round in shape instead of cylindrical in shape and let's say they both behaved the exact same way they can both cruise and they can both thrust now you could declare an entire new class for this new round spaceship but you would have to rewrite the cruise and the thrust methods and thus you're gonna create a lot of duplicate code and not to mention that it's gonna take you a lot of time to do work that you've already done this is where subclassing and inheritance can help you this feature and Swift enables you to create a class that is based off of another one when you do this your new class is called a subclass of the other one and the other one is referred to as the superclass of your new class when you subclass another class your new class contains all of the methods and properties of the superclass now keep in mind that the methods and properties of the superclass aren't copied into the subclass there is no duplication of code just by specifying that your class is a subclass of the superclass it will have the methods and properties of the superclass this is called inheritance the subclass inherited these methods and properties from the superclass ok that was a lot to soak in I know let's go into a playground and I'll show you exactly how it works so here I've got a playground and all that I have in this playground is a spaceship class now this might bring you back all the way to lesson 7 when we first introduced classes we used the same spaceship example so let me just refresh your memory about what we have here so we have a spaceship class we have a property on line 7 here called fuel level it's an integer property it's set to 50 and then we've got 2 functions we've got cruise and we've got thrust both of them just print something out to the console area so try to declare a new spaceship like that we're creating a new spaceship object and we are assigning it to a new variable that is called a ship so I can do something like ship maybe I can print the fuel level and then that will print out 50 down there and I can also say ship dot cruise that's going to output spaceship cruise and I can do ship dot thrust like that and now let's say that I wanted to declare a new class to represent a UFO now you could say that a UFO is still considered a spaceship and it's got fuel and it can cruise and thrust and I guess you could get technical with me and say that we don't really know if a UFO would contain fuel or not but for argument's sake let's say that it uses fuel just like our spaceship does and it can cruise and thrust so if I were to write this UFO class that can do everything that this spaceship class can do I wouldn't want to reinvent the wheel and read it clear the property and retype out those functions for cruise and thrust I would instead want to declare that my UFO class is a subclass of my spaceship class so how we do that is after the name of the class we use and then you can put a space and then you type in the class that you want to subclass from and then just like any other class you open up a set of curly brackets so inside this opening curly bracket in this closing curly bracket that's the definition for your UFO but check this out I'm not going to put anything in here right now I'm just gonna leave it like that and I can declare a UFO variable let's create a new UFO object and I can access using dot notation the fuel level for my UFO all right I can Kruse and I can thrust but I did not have to declare any of this code right the fuel level the cruising and thrusting I did not have to declare any of that inside my class definition for UFO because I said that it is a subclass of spaceship so it inherits automatically all of the stuff inside spaceship alright so the console area down here is getting a little bit messy so let me actually get rid of the spaceship declaration and calling the spaceship version of the cruise and thrust let's get rid of that and then we just have the printouts from our UFO but you can see here that calling UFO dark cruise and thrust it actually outputs spaceship cruise and spaceship go and the reason for that is because it's taking these definitions of this function from the spaceship class in other words the UFOs superclass now ideally when I call you fo dot crews I would want to say UFO cruise right and if I call you fo dot thrust I want to call you FL go however I don't want to change this like that I mean this will definitely get me what I want right and now this these print outs are exactly what I want but I'm fundamentally changing the definition of spaceship right if I created a spaceship like this and then I called ship cruise it would still say UFO cruise and this doesn't make sense so actually what I want to do is I want to change the definition of the cruise function and the thrust function specific to this class right and I want to leave this as spaceship cruise and spaceship go and we can do this by using a special keyword called override what we do is for example if we wanted to change the definition of thrust inside the UFO class we would say override and then we would declare the exact same function like that but inside that function we put a different piece of code here I'm gonna put UFO go and let's override the cruise function as well that and you can see down below here that when I call the cruise function of the spaceship that's what I did right here the spaceship object it says spaceship cruise and when I call the cruise or thrust of the UFO object it uses my overridden definitions here now let me do some cleanup again and I'm going to get rid of these code statements here and let me get rid of that as well so all I have is a new UFO object inside my UFO variable now sometimes inside an overridden function you're going to see something that looks like this the super keyword now when I type in super inside UFO you can see here it actually refers to my super class which is spaceship so when I go super dot that is actually accessing the stuff that is in the super class like this so from within the cruise function of my UFO class sometimes you're going to see things like super cruise and the reason for this is because sometimes that super classes definition contains some crucial code that you also want to run in addition to some code that you're adding because sometimes you don't want to completely change the definition of the cruise function sometimes you just want to add some additional functionality to it so for example if in our spaceship class we didn't print these statements all it does is actually just decrement the fuel level so let's say thrust takes 20 units of fuel and the cruise takes 5 units of fuel and let's say in the UFO class we didn't want to repeat this code and it uses the same amount of fuel and all we wanted to add was printing out something to the console well in that case we can override that cruise function and then we can call super dark cruise which is going to execute the in this superclass's cruise function here so it's gonna execute this line of code and then it's going to execute the lines of code below that as well so when you do it this way you're actually adding to the original definition of the function rather than completely changing it if you don't call super dot whatever that function name is then you're completely altering that function and when you call cruise on UFO it's just going to execute this and it's not going to execute any of this code in the super classes definition it might be a little bit hazy in your head right now but I highly recommend that you download the worksheet and try out those examples and I'm sure that with some extra practice it's going to become clearer in the last lesson you took a look at some classes in your kit a lot of these classes in UIKit are similar to one another well guess what most of them are subclasses of other classes that are also in UIKit I know it sounds incestuous but let me show you how I know this here I'm looking at the documentation page for the uiimageview class now in these documentation pages if you scroll all the way to the bottom like this you're going to see under relationships that it says inherits from and that indicates what the superclass is so this tells us that the uiimageview class is actually a subclass of UI view now let's click on this UI view class to get to its definition UI view is an object that manages the content for a rectangular area on the screen you can think of it as kind of a generic view it's a blank canvas it's actually what a lot of the UI elements are subclasses of this UI view element can also be a container for other elements let's scroll all the way down from the UI view class and see what that inherits from so the UI view class is a subclass of the UI responder class so let's click this and this class the UI responder class is an abstract interface for responding to and handling events you know the words this class contains the functionality to handle events from the user such as taps and stuff like that and it can handle those events and it can give you a chance to respond to them if we scroll all the way down from this class you can see that the UI responder class is actually a subclass of nsobject let's click into here now the nsobject class is the root cause of most objectivec class hierarchies from which subclasses inherit a basic interface to the runtime system and the ability to behave as objectivec objects I know let's say is objectivec there but this is what Swift objects run off of in other words this class provides the guts of what an object is so let's see if we can map this out so at the very top of the hierarchy we have an S object and this provides the guts and functionality for objects and then as a subclass of nsobject we have the UI responder class and this class contains the functionality for responding to and handling events and as a subclass of that we have the UI view class and this class provides the basic functionality for being an element in the view and then as a subclass of UI view you have the UI image view which is a combination of all those classes above it so as you can see a lot of the classes you work with in UI kit are actually a culmination of a bunch of different classes and it's actually really easy to see why this is take for example the UI button class and that class is basically at the button element that you put in the view a button element is something that needs to sit in the view so it probably is a subclass of UI view and it needs to respond to user interaction so it's probably got UI responder in the hierarchy and then you can create an object from that class as well so it's probably got NS object in that hierarchy as well so let's actually just check it right now you eye buttons right here let's scroll all the way to the bottom so it actually inherits from UI control and this is the base class for controls which are visual elements that convey a specific or intention in response to user interactions so this is actually another layer that the uiimageview doesn't have because the uiimageview is just for displaying something and it's not specifically conveying an action or intention in response to user interactions like what this UI control is supposed to do so you can see here some UI controls are the switch the stepper this text field those all are subclasses of UI control let's scroll all the way down and UI control inherits from uiviewcontroller goes back to and a subject so those are just two quick examples of two classes in UI kit but chances are if you take any class in UI kit it's going to be a subclass of many different classes alright so in this lesson you learned about what's sub classing and inheritances you learned that most of the classes in your kit are subclasses of other classes that are also in UI kit you learned the syntax for declaring a subclass you also learned about the override keyword and how it can be used to provide a different implementation for a method in a subclass there are two key things that I want you to take away from this lesson number one is that a class you're using from you I can may be a subclass of another class which in turn is a subclass of another class who is a subclass of another class and so on and so forth that means that you might call a method or use a property of that class that you can't find in its documentation page that probably means that that method or property is an inherited one from a superclass key thing number two is that when you create your own classes you can make it a subclass of either another class you wrote already or even make it a subclass of one of the uikit classes for example let's say you wanted to add additional functionality to a UI button you could subclass it and write extra methods and properties alright so that's it for this lesson I highly recommend that you download the worksheet and get in some extra practice it's going to make a lot more sense in your head when you're actually typing it out and trying it out for yourself if you like this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a single video make sure you tap on that Bella icon as well thanks for watching and I'll see you guys in the next lesson