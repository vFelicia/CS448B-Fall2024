in the last lesson we set up our Xcode project as well as all of the views and models if you missed that check that playlist out right over here in this lesson we're going to be connecting to the YouTube data API and retrieving the data and because we've done this already in a demo project this should be pretty straightforward the only difference is that this time we're going to securely store the API key let's Dive Right In first let's review the endp point that we're going to hit with our app so on the YouTube data API and I'll link to this document below in case you lost the reference to it we're going to be hitting this endpoint playlist items essentially we want to list out all of the videos for a certain playlist now this is the URL and it's going to be a get type of request and the required parameters so this is what we must specify is going to be one of these like what level of detail do you want for the video items that get returned in the response and through my testing in building this demo I've come to the conclusion that snippet is what you need now it doesn't exactly tell you what is included in each of these maybe there's an additional documentation you can search up somewhere but what you can do is you in the previous lesson when we tested out hitting the API you can just try out all of these parameters and see what you get back and see uh what you need now what you should be targeting is is getting back as little data as possible while still satisfying what you need to do because you never want to return more data because that takes more bandwidth it takes more time and you know why would you just do that so snippet is what we need it's going to contain the title description the video image URLs and that's pretty much all we need to be honest now according to this documentation this is the only required parameter however we still need to specify the playlist ID otherwise what videos are we going to get back we need to tell YouTube this is the playlist that I want to get the videos back for right and this what what sort of threw me off in the beginning I thought I would put the playlist ID in there but no you put it in there okay so that is the end point we're going to hit now in terms of the API key that we need to pass in you should have signed up for this back in lesson one if you haven't just go back to lesson one and walk through that process and you can sign up for your own API key now we're going to jump into xcode and see how we can securely store this API key I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cdb C+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson first I want to talk about what storing your API key securely even means because there are so many different ways to do it and there are varying degrees of Effectiveness so first let's talk about not securing the API key which is what we did when we were demoing the uh API right in the previous lesson so we hardcoded the API key Direct in the xcode project and that's bad because you may accidentally share your project with someone or put it on Source control so if you're not familiar with Source control like GitHub uh it is a way for a team to collaborate multiple people to work on the same codebase so if it gets on Source control especially if it's an open source project or if it's you know who knows who has access to it right your key is right there and anybody can take it and abuse it so that's what you do not want now one level of sophistication or protection is by putting that API key in an external file so you do not include it directly in the xod project but it sits in a different file and then you have your XO Project Read the key from that file in this way when you put your project onto GitHub as you can see in this diagram the key doesn't go along with it the key stays in that file on your computer and then you have to manually share that external file with the key to whoever needs access right or that person gets their own API key and puts it in the config file and combines it with the xcode project now the problem with these two methods is that ultimately your xcode project still needs the API key and the reason for that is because we are making the network calls to the API directly from our project or our app right so our project needs the key in order to access and authenticate against that API there's no way around this right your exod project needs to know about the key so if you think about the App Store when your app is downloaded right that package that is downloaded has everything it needs to work right including the API key because ultimately your app is going to be using that API key to connect to any apis which your phone or sorry your app uses so it's still if someone tries hard enough and they know what they're doing probably can extract the key out from that package ultimately the most secure way to do this would be to not even make the API calls from your app you would set up your own API and your app would make requests to that AP to your API and it's your API that has the API key that then makes access to the third party API so in this example that would be the YouTube API and then it would get the data back from the YouTube API and then return that data back to the app right so it's almost like a middleman and which has access to the key so then that way the client which is your app will never see the key and then what you can do is you can have that app have an its own like user account system that the user needs to sign up for and authenticate uh himself or herself in order to even hit your API so you can see how far you can take this right and it really depends I think to me it depends how many people are using your app um and how critical it is that this API key never fall into the wrong hands at the very least we should put the API key in an external file and not inside hardcoded in the project this is just a good practice as you're building your app now in terms of setting up your own software and having your app never use the API key to me that is a later stage thing let's say your app picks up traction and there's a lots of lots of users using it gets on the news and there you think there may be a risk that someone could Target your app uh maybe competition or what whatever it may be to Target your app to try to bring it down because your business has taken off I think that's a good problem to have and then you would then think about how can I make my app more secure and then go through this process of setting up your own API so I wanted to go through all of that so that you can get an understanding of what it means to secure your API key in this lesson I'm going to show you how to put your API key in an external file so here are the steps we're going to go through we're going to create a config file and our xcode project and we're going to add the key to it we're going to set the project to use this config file and we're going to define a special variable in our pist to reference that API key and we're not going to do steps four and five because we're not dealing with Source control in this project but steps four and five they are the steps you want to do if you are putting this project into Source control because the G ignore file lists all the files that should not be put on Source control like should not be uploaded to GitHub essentially so steps four and five those are things that you definitely want to do if you are putting this project into Source control or GitHub and you're working on a team if you're curious about how those are done I would just Google how to use a g ignore file and it's literally just listing your config file like the file name inside that get ignore file which is essentially just a text file and you include that get ignore file with your excode project and then when you push your project onto Source control it's going to read that get ignore file and take note of all the files which it should exclude and it will not put those files into Source control so now let's dive into our xcode project and do steps one two and three so here's our xcode project let's start by adding that external file and this is going to be a configuration file so let's right click on this main folder here new file and at the top right corner you'll see a filter box type in configuration just type config this is the file that we want configuration settings file now the important thing to note here is that you do not want to include it as part of the target here just make sure that's unchecked and then create because you don't want to include it right now you type in API unor key in all caps and notice we don't this is not a variable or constant we don't put any Swift keywords in in front of it this is more of like a text file now equals and we are going to bring up our API key okay so there it is I'm going to copy it and I'm going to paste it in there and save the file next we are going to configure our xcode project to use this configuration file by tapping on the root node here tapping on project and under configurations here you can see there's no config configuration set there are two different types of builds that we can create when we are developing and we're testing in the simulator or on our devices it's what's called a debug build a release build is when you create a build specifically to deploy or send to the App Store and that doesn't uh contain all of the extra stuff that's only used in the development phase of the app such as the bug symbols and things like that anyways for both of these uh debug and release build we are going to set it to use config like that okay now the third and final step before we can test this is to go under targets here we're going to go into info this is our pist and we are going to create a key that we can use to reference that value in the config file so at the bottom hit plus and then you're going to type in in all capitals AP iore Capital ke y press enter and the type is going to be string I don't know why it was a lowercase p because I think there was some autoc correct funkiness let's correct that and change that to capital P and then as for the value this is going to be a dynamic uh variable or reference and it's going to refer to the API key in the config file so what we're going to do inside our Swift code right here is we are going to go into this pist and grab the value for this key and the value for this key is actually pointing to this config file which we are not going to include as part of the project when it gets put into Source control and all that stuff this is our external file like we talked about before so let's test this out we are going to go into the home View and we're going to say on appear we are just going to print out the uh API key see if we can reference it and the way we reference that info. pist is by saying bundle. main doino dictionary that's our info pist and this is optional because it may return nil so if it can find it then we are going to search for the key um and we are going to try to retrieve the value because it has no idea of what the value is we know it's a string it's a type of string so we're going to try to turn it into a string and this is just try if it if it can't then it'll probably be um empty or nil uh we could provide a default value so yeah if there's if I can't find anything let's let's print can't find it okay just for our own our own debugging okay so let's try this out we are going to run this in the simulator and so it's running right now and we should see our API key print out there if everything is according to plan all right perfect it works so this this is referencing the info thep list looking for this key and the value for this key is referencing the config file API key right here perfect now let's move on to implementing the data service where we're going to send off the API call to the YouTube API and to retrieve the data so in the data service file at the top let's declare our key as a private uh constant and we're going to call this the API key and we're going to handle this just like I showed you before uh bundle. Main doino ditionary and we're going to try to look for API key as string and now I'm not going to give it a value like this if it can't retrieve it because I do want it to be nil and that way we can detect if the API key is present or not all right next we are going to create a new function called get videos and it is going to return an array of videos essentially I want it to give back all of the videos for a given playlist right so we are going to make this an asynchronous function and I will explain what that means when it comes time that we call this and I'll explain what the async and await keywords mean all right so for now uh why don't we just return an uh empty video array and here we're going to implement that API call so first check if a API key is is there and then we are going to uh create the URL create the request and we're going to um send the request and and then finally parse it so this really helps that we did this inside a demo back in lesson two right so we've tested that this works we know it works so we're going to say guard API key not equal nil else return um we can return an empty video list okay because they can't get anything ideally what you'd want to do is probably show an error message or something so you can return something as such and then capture it and display it to the UI but by doing what we we're doing here you're returning no videos so the user doesn't know if there's actually no videos in that playlist or if something went wrong but clearly something went wrong because we can't get the API key right okay so coming down here we're going to create the URL and uh before we create the URL actually we're going to create it off of a string right and that URL string is going to look something like this so first let's go back to the uh um the documentation so that is right here and as I mentioned in the previous lesson we are using this end point right here so we're going to retrieve all of the playlist items given a playlist so I'm just going to put that right there I'm going to hard code that URL right here and we're going to add the parameters so one of the uh required parameters is this one part I mentioned before in lesson three why I picked s it because contains what we need and then the other thing we want to specify is which playlist do we want to Target to retrieve all of the videos for okay so the way you find this is I'm going to choose my own playlist you can choose whatever playlist you'd like but if you go to someone's Channel and you go to playlist you'll see all of the playlists here I'm going to click on this one view full playlist and it's just this ID right here if you double click it it'll highlight the whole thing I'm going to copy that and I'm going to paste that in there and the last thing you have to add is the key so we're going to say key is equal to and we will just insert that right here API key and we've already checked that it's not nil so we're going to just force and wrap it here okay so now we can create the URL instance off of that string and now we can create the request so let's do that UR request and we're going to do it off of this one right here going to pass in the URL and actually this one this one returns an optional this so This Could Be nil so we're going to say IFL URL equals URL just to check that it's not nil we're going to put all of this code in here that only executes if we're successfully able to create a URL instance so then we're going to do that in there and then sending off the request is a matter of um using session so uh if we say let's create another constant right here just to make things more clear so URL session shared this is just breaking things up so it's easier for you to understand and if if you look at this one which is what we're going to use data like retrieves the data for a given URL request which we have created up here and it is both an asynchronous method and it also potentially throws errors so we have to address both of those things and the third thing I want you to notice with this method is what it returns to you it returns a tuple so it has two pieces of data it has data which is the actual data that is returned by the API and a response object which you can take a look at for any errors or uh the status code and things like that so that is the actual response and that is the data separated into its own um parameter so we are going to also handle that but first let's do things one at a time let's handle the throws part and then we're going to do async and then we're going to handle the data that gets returned so throws okay so let's pass in the request if calling a method May throw an error we have to C it and the mechanism in Swift to do that is to it looks like this so you do something that may potentially throw errors which is this line of code you have to put a try keyword in front of it so we're going to try to do this right and then you have to also have a catch block and this uh displays or you can handle any errors that get thrown if it gets thrown so we're just going to print it out okay and this will reference the error that gets uh thrown up next let's handle the fact that this is an asynchronous method so in order to call the asynchronous method which means that it gets called in a background thread or a background worker so imagine yourself tasking someone else to do the work like you're giving someone else a task and have that person go and do the task and come back to when it's done right you have to put the await keyword which means that you are going to wait for that person that background worker to come back with the completed task before you continue and execute the rest of the lines of code below it so that's what's going to happen here now I do want to explain even though it waits for the background worker to do that task and comes back before we execute the next lines of code it is still good because while we're waiting for that background task to come back we can handle any sort of user interaction and we can also do some other things before we execute the next lines of code it's just that the await keyword tells the system uh do not run lines 33 and Below until that background worker comes back right and for things like this you do want to send it off as a a background task because if you have the main thread which is you know the the main thread that is executing this code go and do that work there will be no worker to handle all of the user interaction and stuff and so it'll look like it's frozen so that's kind of the gist of it uh with any sort of tasks like Network requests or um database queries uh and you'll see when we do the uh thumbnail downloading for the images we're also going to send that as a background worker to go and do that right so that's using the async and a weight keywords um the fact that this is an asynchronous method will also come into play when we have the feed view call get video you're going to see how we use the await keyword okay so hopefully that makes sense if not I would uh recommend that you dive a little deeper into async and a weit search for some additional tutorials on async and a weight in Swift so you can understand it in a little more detail more than we have time to cover right now so we've handled the fact that it throws an error we've handled the fact that is an asynchronous method meaning background worker is going to go execute it now we have to handle the data that comes back and it's a tupal right so we are going to declare our own tupal to track that data so we're going to declare a tupal constant we're going to say data and response so you'll notice that this format looks like what we saw this method returns we're going to say equals this so if no errors get thrown when the background worker comes back it's going to assign the data to this and it's going to assign the response to this and then from here we can parse the data now before we actually parse the data let's try sending this request off and taking a look at it inside proxy man to make sure that it's happening uh so what we're going to do first we have to actually fire off this request so inside the feed view right here why don't we say on uh not on appear but we're going to use task let me explain what that is so the task is a modifier that lets you execute a block of asynchronous code let me put that into layman's terms when the feed view appears it is going to run this code inside this task block as a background worker so we are going to say we going to create a property up here to store the videos and this is going to be a state property let me explain what that means as well okay it's going to be an empty array in the beginning in case you haven't watched my 8 day beginner Series where I explained what this what state properties are it's essentially when this value changes we want the UI to refresh so this starts off as an empty array there are no videos right but when we send off the task from the data service right to retrieve the videos and it comes back and then it puts the video instances into this array we want the user interface to refresh and show those videos that's why this is a state property all right so let's fire off this task so we are going to create a new data service instance and I'm just going to chain it like this I'm going to call get video oh that should be an S we'll change that this should be get videos and notice that it's an asynchronous method and it returns a list of videos so asynchronous means we're going to have to send it off as a background task we're going to have to wait for that to come back before executing the code below it okay so we're going to say let videos equals that you know the returned to list of videos let's call this let's call it returned videos right and then we are going to assign the return videos to our State Property here self. videos equals return videos okay so we can shorten this definitely but I wanted to break this up into two lines to explain to you the fact that this line of code will not execute until this has gone and come back with the data because of this await keyword right and while the main worker is waiting for the background worker to retrieve the data it can still handle user interaction and other things that it needs to do so that's what's so great about Ayn in a weight so we can shorten this by just putting this like this right and removing the need for this even right but I thought writing it like that would explain um the await keyword a little bit better so with the way we've set it up now if we run this in the simulator it should um it should execute this and then send off the network request and if our API is correct and our request is structured properly we should get a response so let's go ahead and open up proxy man and let's go ahead and take a look see this in action so I'm going to first run this in the simulator so that it'll show up on our list there it is I'm going to pin this one to the top and I am going to have to resend it hello world to send it all right the status code uh is green this should be a 200 y 200 and we get the data back here you can see the root element contains an array of items so this root element we represent it with our playlist model we're going to model it off of that and then as for the items these are the individual videos which we are representing with instances of video obviously we haven't filled it out yet but that's what we're going to do so if you open one of these videos you're you're going to see that it has the snippet which is what we asked for in the API request and it contains the thumbnails the title um the description and the the video ID is also something that we need so inside resource ID here's the video ID and so those are all the details we need and inside thumbnails you can see that it has different sizes of thumbnails each each size has a different URL all right we're about halfway there now that we have the request sending out the data coming back all we need to do is parse that Json data into usable video instances in our apps so so that we can display it and we're going to do that in the next lesson and if you're enjoying this build so far can you give this video a thumbs up I greatly appreciate it and if you were able to follow along to add your API key and to send off the network request drop a comment down below and say so far so good all right thanks for watching and I'll see you in the next lesson