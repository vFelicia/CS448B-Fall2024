hello and welcome it's chris here this is part three of the threepart video series where my friend flo compares mac os app development versus ios app development i hope you enjoyed this last lesson of the series if you like flo's teaching style make sure you check out his youtube channel flow rights code as well all right enjoy a crucial aspect of mac os apps is window management that includes opening windows closing them and managing which window handles which events hey chord crew this is flo this lesson will cover everything you need to know about window management for swift ui apps in mac os you will learn about deep linking setting up different window types opening urls and of course also closing windows first of all let's have a look at the example project it's very simple right now there's just a single view that is the content view with the hello world stream let's have a look at what happens right now so let's run the app and then a single window will come up with our hello world text element in there which is just that content view view the window has a title of our project title so mac os course lesson three in this case the first thing that you need to know about windows is how the titles work so the default title is just the name of your project in this case mac os course l3 if you want to change the title it's very simple in your app struct you can just go to your window group and add the title as a parameter to that initializer so let's just call this one our main window let's run the app again and then you will see the window is now called main window so super simple it's just a single string that you can add there next let's find out what happens if you want to set up different windows so let's create a second window group here and let's give this a name of maybe our detail window and in here let's just also show the content view just like that to make it easier for us to distinguish the two let's give the content view a little title string that we can pass in so here we can just say that the default title is hello world and then instead of that hard hardcoded string we can just show the title here now what we can do is call the first one main window and the second one detail window that was just easier for us to yeah find out which window is showing so now let's run the app again and you will see that only the first window group is open by default that means that in our case now only the main window will be shown to the user now of course we want to also be able to show other windows and to do that we have to take use of deep links you might have already used them for example when linking into a specific page in your app or when opening a specific view in your app using a widget now in this case we will use deep links to open a specific window group and thus a specific window there are a few different step but it's actually pretty easy to do that the first thing when working with deep links is you will need to go to your project configuration select your target and go to the info.plist now in xcode12 that was a single file here in the navigate on the left hand side now it's under the project target and then you go down to url types expand that section hit the little plus icon and now here we can add a custom url so let's give it an identifier of my awesome app and the url scheme is the important part now in our case i will just call it my app you will see how we will use that in just a second okay so now we have registered a url type so mac os knows that our app will be or should be opened when the specific url scheme my app is used now to let mac os know which window should be open there is actually just a single modifier that you need to add and that's called handles external events so let's add that one to our detail window window group and then in here we can just create a set of strings in this case i will just want to have the detail path basically to be opened in the detail window then we can also add that modifier to our main window and say the main path should be opened now you will understand how this works in just a second because now we will go into our content view and we will wrap the text in a vstack so we can also add a button below so we can open that deep link so let's create a button here and let's call it open detail window and let's fill out the action you might have already seen this but there is a closure inside of the swiftui environment that we can use to open urls so let's access the environment at backslash dot open url give that variable a name doesn't really matter but in this case i like to always call my variables the same keypath name that they have in the switcher environment so it's very obvious for me in the code to understand what they do now we have that open url action here if we option click on that we see it's of type open url action and if we have a look at the apple documentation here then there will be an example of how to use it i think it's very easy to use so let's just jump right into it close the documentation window again we can just construct a url and then pass it into the open url function so let's try to call this function and then you will see it expects a url as its input parameter so let's construct our url like always we will construct it via a string and and now the important part is to remember how you call your url url scheme in your target info.plist so let's have a look back there again if we expand the url type section again the scheme was my app so let's copy that go back into our content view and that's how the url will start then there will be a colon slash slash and then the path or route or whatever this is basically what we specified in our handles external events modifier we want to show the detail window so we will have to use the detail path just like that now there is a tiny issue the open url function expects a url not optional but our url is now optional because this is a failable initializer so we will just guard that it worked and else we will just return out of the function so now we have an unwrapped url here and we can pass it into the open url function let's build and run the app and have a look at what happens okay so the window has now opened our main window same as before now we have our open detail window button here let's click on it and you can see our detail window has now also been opened of course we can click that button again and again and again and more and more windows will open you probably also want to have a way to close a specific window and that is also super easy let me show you how it works you might already know this little environment function from your ios apps but it actually behaves different than macos on ios it undo a navigation action so if you have a navigation link or a sheet or something like that and you call the dismiss function then the cheat will be dismissed or your navigation link will be deactivated on mac os the dismiss function will close a window so let's add a second button let's call it close current window and let's just call it this miss function in here okay let's run this again okay this is another thing that you might want to remember oftentimes not always mac os remembers which windows of your app were open before and then they will get restored when the app restarts now this doesn't always work as of my experience so if you want to open specific windows you will have to do that via code which you have just learned how it works now let's hit the close current window button and then you will see that detail window was closed we can open it again via our open detail window button and close it again via our close current window button after this third lesson you now know how to set up different windows using deep links to open new windows and also how to close them again using the dismiss function in the swift ui environment