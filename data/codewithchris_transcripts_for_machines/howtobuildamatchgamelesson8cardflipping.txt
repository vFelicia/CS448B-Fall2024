hello and welcome we are well into our card match app and as you can see in this lesson we'll be working on the actual collectionview cell by the end of this lesson you'll have the images displaying in the cell and you'll be able to tap on the cells to flip them it might seem simple but we actually have a lot to cover so let's get started alright so we're back in Xcode and just to remind you guys the last thing that we did was we set up the delegate and the datasource for the collection view so that we can show all of these cells now all of these cells are the same thing it's basically just showing a static image of the card back what we actually need to do is we need to set the card front for each of these cells and let me remind you in the storyboard here for this prototype cell that we have you can see the card back here we actually had two image views inside of it one of them is the back image view which is what you see here and then we also have the front image view which is not set to an image yet actually this particular one is set to card one but you can't see it because it's behind the back of the card so let me also remind you that this prototype cell that we gave this identifier called card cell we made this an instance of card collection view cell which is a custom class that we created over here and this is a subclass of the standard UI collection view cell the reason why we sub clausten and created our own customized collection view cell is because we want to add additional functionality to it now as you can see we've already established two iboutlet properties connecting those UI image views the front and the back and we're going to have some methods here that we're going to use to manipulate which one gets shown so there are a couple of things that we need to set in this card collection view cell for example we need to have another property that is going to keep track of which card this cell is supposed to display so I'm just going to call this property card and I'm going to make it an optional because initially it's gonna mean nothing is going to be set to it and we're going to create another method in here called set card and it would pass in a card into that method like that and actually let us put an underscore there so that when this method gets called we won't have to specify that label there and another method we're going to have is Flip and this method is going to flip from the back image view to the front image view so that whatever card is being displayed in here is going to be visible furthermore we're going to have another one called flipping back and this is going to flip from the front to the back image view all right so let's implement the set card first so the card that gets passed into this cell is the one that we want this cell to represent into display so we're going to keep track of it first by assigning this parameter that gets passed in to the property and since they're both named card we are going to need to differentiate between the two in order to do that we can use the self keyword to refer to this property right here self refers to the card collection view cell dot card this references this property right here so we're going to set the parameter that gets passed in to the card property of the card collection view cell keep track of the card that gets passed in so the next thing we're going to want to do is to set this front image view to the card image now this card that gets passed in is a part of the card class the card class has an image name property that is going to contain the image asset name so we can set that we can set the image view to that so we're going to do a front image view dot image is equal to and this property let me show you again this property takes in a UI image object so we have to create a UI image object and when we are creating this UI image object there actually is a initializer method that we can use where we can pass in a string of the image file that we want to use so that's perfect because we can just pass in card dot image name and sometimes this method that we use to create this UI image object may result in the nil if this image name doesn't exist and so in that case the front image view wouldn't be displaying an image so if you flip a card and you don't see the image you should just double check what the image name is and see if it matches the asset names in your asset library you can see that we have lowercase C a Rd followed by a number from 1 to 13 so the next thing we have to do is to actually call this set card method on each of the cells if we jump into the storyboard let me let me remind you that this prototype cell is a type of card collection view cell all right I've mentioned that a couple of times already well that's going to be to our benefit if we scroll down here in our view controller when the collection view asks the view controller for a cell to display a particular item in the grid we're using this DQ reusable cell method to return a cell with the identifier card cell well I just showed you in the storyboard that we set that prototype cell to be a type of card collection view cell so when this method gets this cell back with the card cell identifier it's actually a type of card collection view cell all we need to do in this case is cast it as a card collection view cell because that's what it is now the reason why we have to do this casts is because DQ reusable cell doesn't know anything about any of the custom classes that we create in this project this is a method in the UI collection view class inside UI kit so we have to tell it that the cell that you got back with this identifier is actually a type of card collection view cell so we can use the as keyword to to indicate that and this exclamation mark is just to indicate that it for sure we're very confident that it's going to be a card collection view cell because the other thing that you can put here instead of an exclamation mark is a question mark and when you do that it's kind of like you're trying to cast that object as a card collection view cell if it turns out that it's not that type it will actually just the whole thing will be nil and it's gonna get assigned to cell right here but because we are very confident that it is going to be that type and the cast will be successful we are going to use an exclamation mark like that okay so now take a look at this cell here is a type of card collection view cell because we cast it as a card collection view cell right here that means that we can access that method that we just created called set card and then we can pass in the card well how are we going to get the card well we do have the card array right that contains all of the card objects we just need to know which card in that array to assign to the cell remember I said this index path parameter tells us which cell the collection view is asking to display that's how we're going to get that card so here we're gonna say let card equal to card array right the array works on a set of indexes and we are going to pass in index path dot row remember I said there was a rope property in the next path that indicates which item it's trying to display well we're going to grab that card so if it's trying to display the very first card row is going to be 0 and that's perfect because card array zero is the first index of the array and so we're going to assign that to card and then we're simply going to pass card into the set card method of the card collection view cell and that is going to if we jump to that that is going to set the front image view dot image to that card's image so hopefully that's still making sense let me just write some comments here so that we're clear try or not try but get a card cell or get a card collection view cell object get the card that the collection view is trying to display and set that card for the cell now if I run it you're still going to see only the card backs even though we have set the front image view and the reason for that is because the front image view is hiding behind the back image view we now need to implement the flip method in the card collection view cells so that when we tap on the card we can call that flip method and we can flip over the cards all right so let's do that in the card collection view cell class right here for flip there's a very easy way to transition between two UI elements like we have here front image view and back image view and that is actually a type method of the UI view class called transition so there are a couple of them be careful which one you use we're going to use this one with the from parameter to parameter you can specify duration in some options and also what happens when they're completed so you can see here in the description creates a transition animation between the specified views using the given parameters so let's choose that one for this flip method we're flipping from back to front so in the from view we are going to put the back image view pressing tab to jump to the next parameter the to view is the front image view duration is going to be specified in seconds so I'll have zero point three in here and in the options there are actually a couple of options we want to set the first one is how that animation is going to appear or what type of animation want to use there's a couple of predefined ones I'm going to press dot and that is going to allow me to choose transition flip from the left okay we also want to specify another option in addition to how it looks there is another option that dictates that the one that you transition from should be hidden so let me show you how to specify multiple options you basically have to pass in an array with the options so let's put this particular option into an array by putting these square brackets on and then pressing comma like that to specify a second element in this array I'm going to press dot again and don't transition show/hide transition views so hide or show views during a view transition now that means that the view that it transitions from is just going to be hidden instead of completely removed from the view hierarchy okay and completion is we can specify a block of code here that we want to run when the animation is complete we don't really have any need to do this so I'm just going to put nil in here alright and that's basically it now in the flip back method we are going to do the same thing except it's going to be reversed the from parameter is going to be the front view and the two parameter is it going to be the back image view but there's also something special that we have to do for the flip back we want to delay it a little bit so the user has a chance to see what card it is before we flip it back so I'm not gonna implement this method just yet instead I want to go back to the view controller and handle the did select cell at or did select item at method so that we can actually start flipping cards over when you tap them so let's jump back to the view controller and in here collection view did select item at it also gives you the index path that was selected that index path is going to be key because it tells us which cell was actually selected so in order to call the flip method of a cell we need to get a reference to the cell that was actually selected and we're going to use the index path to get that luckily for us the collection view actually has a method called cell for item where you pass in an index path that's something we have already and you get back an optional UI collection view cell now the reason it's optional is because it could be nil and also take note that it returns a basic UI collection view cell we know that our cells are not just standard UI collection view cells in fact our cells are our customized card collection view cells right so we need to cast the result of this method to card collection view cell so let's do this first in next PATH we're just going to pass in the index path and we need to assign this to something so again let's create a constant called cell let's cell equals that and we again are going to use the as keyword to cast the result you know cast the cell that it gets back as a card collection view cell all right so now we can flip the cell or flip the card and we can call cell dot flip let's take a look at that to see if it's going to work there we go now nothing happens we haven't really implemented the code to do matches and kind of take it away and we also didn't implement any code to only have unique pairs so that's why you see some of these the pairs are the same alright so you at this point you should be able to flip all of them and see when I click them again or when I tap on them again we get the same transition the reason is because whenever the user taps on a cell or selects a cell we just call flip and it always just flips from back to front so instead what we have to do is determine if the card has been flipped already and I don't know if you remember but in the card class we have this property called is flipped which is true or false and that is going to determine whether we should call the flip or the flip back methods of the card collection view cell so why don't we first get a reference to the card that the user selected so we did this before in the other method but we are going to access the card array because that contains all of our cards and the index that we need is indicated inside the index path row okay so that's going to give us the card that the user selected get the card that the user selected oops here get the cell that the user selected so now that we have a reference to the card object we can check and use an if statement if the card is flipped is true then we probably wouldn't want to call the flip but if it is false then we do want to flip it up like that actually what we're going to check first is if it's not flipped if it's not flipped then we want to flip it up and otherwise if it is already flipped why don't we flip it back for now even though we probably wouldn't actually do this as part of the game but it's going to be fun to be able to flip the card front and back so let's implement it let's go back to the card collection view cell and you know how I said that when the card flips back there would be a delay we're going to implement that delay in a couple of lessons later when we actually have the logic of the game working at this point why don't we just simply flip it back so that you can test out your code to see if you can flip it from front to back okay so we're going to flip from the front image view to the back image view duration is 0.3 again and for the animation options let's do flip from the right this time comma show/hide transition views and when it's completed we also put in nil like that okay so I'm going to run the project so when we flip it you should be able to top it and actually this is interesting because I forgot to do one thing you can see I can't flip it back all right the reason is because I forgot to set this property of the card when we flip it up we have to set is flip to true so that we can remember if it was flipped up or not so after we determined that it hasn't been flipped and we do flip it we should probably set the card is flipped to true notice that we're using a single equal sign for assigning a new value whereas when you're comparing you use these two equal signs set the status of the card and likewise here when we flip it back of the card card dot is flipped is false okay now we run in okay there we go now before we end the lesson there's still one more thing we need to implement and it has to do with the collection view reusing its cells now I mentioned to you before that the collection view is very efficient because right now only about 8 cells are visible right so it's not going to display the bottom two rows but as soon as I start scrolling like this you see how that top row is scrolled out of view well those four cells are actually going to be reused the next time it needs cells so as I'm scrolling here and I'm revealing the bottom row this fourth row it is probably reusing cells from that very first row that are now completely out of view right so it reuses those cells and what that means is let me actually show you what the problem is let's say I reveal these two cards so for these two cells I have set it so that the front image view is visible in the back image view is invisible right however when I scroll these cells out of view these two in particular it's going to attempt to use those cells to display the rows at the bottom potentially so it didn't happen this time but let me scroll back up and so it's going to display in new cells so you can see here that the cell it was using in this position before now it has used that instead to display this cell right I didn't flip over this card this cell before was over here right so that is part of the problem what we need to do is just modify our set card method to reset everything so it kind of erases the old state of the cell because keeping in mind that it can be a reused cell and not a completely new one and so what we need to do in this case is first determine determine if the card is in a flipped up state or flipped down state and the way we're going to determine this is basically using we probably don't have to use self we're going to access this is flip property right so if is flipped is true then we probably want to be displaying the front image view else we want to display the back image view so this one is make sure the back image view is on top and this one is make sure the front image view is on top so we can use transition again this one is from the back image view to the front image view duration I'm going to put 0 because I want it to happen immediately so this one will be a transition flip from the left and the show/hide transition views and completion is nil and I'm moving a little bit fast because we we did this before in the flip and flip back methods now in this case we want to make sure that back image view is on top so we want to flip from the front image view to the back image view duration is 0 options open up an array Godot show/hide transition views it doesn't really matter what order you specify these options we can flip from the left duration is 0 anyways specify nil so now let's run the project again now what happens here is that when we call set card it's going to make sure that even if it is a reused the cell it doesn't matter what state that cell was in because we are going to determine whether we should put the back on top or the front image on top so let's test that out all right and I'm gonna scroll down just roll up your scroll down so we are reusing cells right now each time these two cells get scrolled out of view they're being reused for some cells down here and when I scroll back up to reveal those cells there are some cells at the bottom that are out of view now being reused for these cells up here it looks like everything is good all right so now we have the cards flipping in this lesson you learn how to do some animations you also learned about closures which are basically blocks of code like a function except that it doesn't have a name associated with it like a function does you also learn how to delay the execution of code now the next step is to add some logic to our app so that when the user flips open two cards we can determine what's a match and what isn't if you're enjoying this series so far please let me know in the comment section below and if you liked this video please hit that red subscribe button and if you don't want to miss the next one hit that Bell icon as well thanks for watching I'll see you guys in the next lesson