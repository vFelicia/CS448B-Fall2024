in the last lesson we parsed the Json data returned by the YouTube API into video instances that we're displaying in our feed view if you miss that lesson check out the playlist right over there now the problem is we don't have any video thumbnails to show and we're going to fix that in this lesson let's do it so here's what we have so far with our feed view let's clean this up a bit so we're going to go into feed View and the first thing I'm going to do is change the style of the list uh list style to to plane and then we're also going to remove the scroll indicator so let's do that scroll indicators we're going to hide that and it should already look a little better perfect and then we are going to remove these separators between each item because these are going to be um images right thumbnails so in in the text here I'm going to say row separator visibility is hidden and the other thing is remember how we have a tab view in the home view so let's add that tab icon right there so in home view we can remove this on up here display our API key and add a tab item and in here we are going to put an image and and this is going to be an S SF uh icon SF symbol sorry and we are going to use stack this one play Square stack let's just see if I can put it right there oh it just did the whole thing for me and then the text is going to be feed that already is going to look a lot better I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson now let's take a look at displaying those images using our video row view so instead of displaying a text with the title we are going to want to create instances of video row view but we need to pass the video into the video row view otherwise this view won't have anything to work with so why don't we create a property here that will need to get passed in and for this purpose Maybe we will just do that um from yeah I don't want to create all of that I'm just going to a the preview itself okay and let's go back to feed View and we are going to pass it in here see now it requires that we're going to just pass in the video that it's trying to display now now in the video row view let's display the image now remember we do have the URL to thumbnail image it is inside video. snippet do thumbnails medium. URL this is a string so we need to essentially hit this URL to download the image data and then display that image data inside a Swift image luckily for us Swift uui makes this really easy using async image where you just pass in a URL and it's going to do that asynchronously it's going to send a background worker to go to that URL fetch the image data come back and then display it inside an image we're going to use this one because it gives us a reference to the Swift UI image view which allows us to add some additional modifiers to it if we want to like tweak the corners we want to tweak the aspect ratio we can do that and placeholder allows you to specify what to show while that background worker is grabbing the image data so we're going to show a spinner and obviously URL is where the uh where should it go retrieve that now because all of these are optional we may not have an image URL so we have to check for that first so we're going to say if let URL equals and we're going to try to create a URL instance off of that string okay and if it is able to create this then we are going to pass this into the async image call or sorry view as a parameter that's where we're going to pass that okay so what is the String again well it is video. snippit do thumbnails medium. URL and if if it doesn't exist um then it doesn't exist then we can't show an image so what do we have to do here to provide optional default when the optional contains nil oh okay because it must be a string so yes if any of this part isn't a URL if it cannot create this string then we're just going to put put an empty string and try to create a URL and it's going to fail and it's going to not do any of this stuff in here okay so now let's set our async image we're going to use this one right here as I said and we're going to pass in the URL that was created and then we are going to double click here and this is the image this is the reference to the image that will get displayed once the data comes back so this is the image that is displayed and this placeholder we have another handy Swift UI view we can use is progress view which is just going to be a spinner okay so regarding this image right here we definitely want to add a couple of modifiers to it for example resizable um so that it can scale up or down and we want to maintain the aspect ratio so the one that I like to use is well it depends on the circumstances why don't we just try fill for now and we'll see what happens and let's also um give it a little bit of a rounded corner so we're going to do clip shape we're going to say rounded rectangle Corner radius is 10 all right now let's see if this works we're going to go back to feed just double check okay it's going to create instances of video r view and pass in the video and then this should download the images we're not showing the titles here actually all right well that was pretty easy you have to admit just like that we have this if you wanted to display the titles you would um you can either display it well the titles don't depend on the image right so you could put all of this inside a vstack and then put the title underneath for example so we could try to do that here and this would be the title right video. tile and then we can even make it bold is it not title oh sorry snippet do tile and if it doesn't exist we'll show empty string yeah so we can left align it we can add some padding for example leading and then you could add just some padding overall or just maybe just to the vertical okay the corners are a little bit too rounded for my liking so we'll just do five all right and that's how easy it is to do that all right our feed view looks pretty good all we need to do is allow users to tap on the thumbnails to watch the video now you do know what I'm going to ask you right if you've been enjoying this build please give this video a thumbs up and if you've been following along and you are able to get your thumbnail images to show up please comment down below piece of cake all right thanks for watching and I'll see you in the next lesson