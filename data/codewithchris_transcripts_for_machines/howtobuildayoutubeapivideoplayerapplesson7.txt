in the last lesson we finished the feed view if you missed that lesson check out the entire playlist right over here in this lesson we're going to allow the user to tap on the thumbnail to show up the detail View and to watch the video Let's Dive Right In so we already stubbed out the video detail view let's start by triggering this and showing this as a sheet when the user Taps on a video how are we going to do this so there is a sheet that you you can bind to a property up here that you can Define which we are going to Define as selected video so when the user Taps on a video row we're going to capture that gesture and set that selected video property which is then going to trigger this sheet and then content is what you want to show on that sheet so let's choose that let's create this state property up here and call it selected video this is going to be nil at first we're going to bind to the selected video and as for the content um the content so this parameter stores the value of that which is the selected video and here we're going to show the video detail view okay let's capture the tab gesture on this so on to gesture we are going to set the selected video equals V and let's see if this works all right perfect now the next step let us pass the video details into the sheet so we're going to do that by in the video detail view here let's accept a video again I'm going to blow away the preview and then in the feed view we are going to now pass in V which is the selected video all right so now let's configure this a little bit so we're going to have a sheet to where the top bit is the video player and the bottom bit is the title and description so we're going to need a vstack sort of setup here and let's set the alignment to Leading because that make sense for the text we're going to have our video player here which we're going to get to and we're going to have the uh title and description here so I want this scrollable in case the content is a lot and inside the scroll view I'm going to create another vstack this one should be alignment left as well I don't know if I need the first one then and in here I want to put the title in the description so this going to have a piece of text and it's going to be video. snippet do tile and if that doesn't exist I'll put empty string and I'm going to want to make this one a headline font and I'll bold it as well and I'll add some padding to the bottom just to give it a little bit of space you know instead of this I can actually add the spacing here because there's only two elements in here so I'm going to add the spacing of 30 right there and so I don't have to put the padding there and then I'm going to put the description so this is going to be video. snippet do description instead um let's see how this looks okay so I've got the title I got the description but I need to add some padding I'm going to add the padding to the scroll view um should I do only horizontal no probably I'll add it in all directions all right so that looks a little better oh scroll indicator let's get rid of that too scroll indicator hidden okay all right no scroll indicators this looks good I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson now I do want to spend a moment and talk about what options we have when it comes to displaying YouTube videos in our app now we could use a web View and display an embedded um YouTube video but they also have a client library for us to use um how to embed YouTube videos in iOS applications with the YouTube helper Library essentially they're doing the same thing but they're making it because they're using an iframe player they're making it a little easy for you but this uses Objective C so this is an option as well which is a little easier than showing your own web view in trying to put the player like the actual web embed code in there um the third option which I explored was to use YouTube player kit and this Library worked really well with swiftui it was really easy to use and honestly saved a lot of time so I didn't even consider the other options and this is what we're going to be using with this demo so this library from Sven seems pretty active as you can see here last issue was closed 2 days ago and the last poll request was merged about a month ago as with any thirdparty libraries when you use them you're creating a dependency for from your project to depend on third party code and the risk is that that third party code becomes out ofd it's not maintained and it becomes buggy and then that affects your app so there is a sort of risk reward consideration here on one hand you could roll your own and even depending on this Library itself is third party code I mean rolling your own would be the best thing but that would take the most effort and take the most time versus using a third party Library saves you a ton of time and you have to gauge whether or not it's worth the risk in this case um this was really easy to use and it worked beautifully in Swift UI seems active I think the risk is low so that's why I decided to use this all right so let's dive in and integrate this YouTube player kit into our project let's hit this blue button saying use this package and we can use Swift package manager to directly import it into our project now you know how in lesson two we created a demo project to test out sending Network requests and receiving responses from the YouTube data API this would be a perfect opportunity to do the same whenever I'm trying something new start a new exco project test it out if it works put it into your main project I've done that so I'm not going to go through that again with you and then spend an extra lesson doing that what I'm going to do is is just directly put it into my main project but in the future when you're working on your own stuff I'm just letting you know you might want to consider not uh especially because we're not using Source control here if you are playing around with your code you're importing things and you mess something up it's hard to roll back right so definitely test things out in a different project first with that said let's import this directly into our um our thing so go to file ad package dependencies and I copied that URL we're going to just enter it right there and there it is YouTube player kit you can go ahead and hit add package and while that's going on let's come back here and scroll down and take a look at how we use this thing so looking at this code snippet you import YouTube player kit first and then you create the YouTube player View and it looks like you just pass in the URL just like that so as an initial test why don't we just do exactly this so we're going to copy that going to go back here oh okay let's add package there it is so in the v uh video detail view we're going to import YouTube player kit and then under video player we're just going to plop it in right there and we are going to run this now and see what happens all right so it's good it's showing a video but notice that the frame is much larger larger than the space that we have it plays that's great okay so the the controls are there the video itself is uh it doesn't look wider than the space that we have it looks like it's fitting the width however it does look like there's a lot of black space at the top and the bottom because when you load this up it takes up so much height so we might have to set the width um just set the frame for this so that it fits in the space that we have and also we don't want to be displaying this video so why don't we try inserting our own ID into here dynamically so this would be video dot snippet but as you can see there's something wrong here because as I'm trying to do this it is not working right the autocomplete is not showing up so we actually cannot do it this way we can't just insert a wild card into a parameter like this why don't we take a look at some other methods that we can use this and perhaps that would work for us okay so this is ultimately what I ended up using right here so you can configure the YouTube player like this first where you can actually pass in a dynamic video ID and then you would um then you could use that video player view so let's copy this and instead of well let's configure it here okay and then we are going to add our ID there so this would be video. snippet do uh resource id. video ID and if that happens to be nil we'll pass an empty string and I don't want it to autoplay so I'm going to set that to false and then with this configuration if you go back to this page you can see that you can just pass in this configuration into the the YouTube uh player View yeah so it looks something like this this is what we did we we configured something and then we we can pass it into the YouTube player view like that I forgot exactly the snippet of code when I was looking through this but yeah if you take the time to read through that there's a lot more cool stuff that I can do but I'll just show you how to do it here so when you create the configuration like that this is YouTube player you can even call it like okay so instead of specifying the URL right here we can actually pass in the YouTube player the thing that we created up here so I'm going to run it and this allows us to specify that Dynamic ID so there's my video it's still the frame isn't working properly right okay but it is displaying the correct video and it is working right and so perfect now we need to figure out how we can set this frame for this video player so that it fits in the space so you would just go frame and you would set set a width and a height the problem is that we need to know what that is so using geometry reader we can take a look at how much width we have and we are essentially going to create the geometry reader up here and we are going to cut the whole v stack and we're going to paste it inside the geometry reader and now because this vstack is inside the geometry reader here we have a access to proxy so the width is going to be proxy do size. width that gives us the width of the screen because geometry reader the purpose of this is to um is to read the size information and so this parameter gives us the you a reference to the sizes now that we have the width we can make sure that it is the proper width but we have to set a proper height as well and so only setting the width is not going to work the question is what should we set the height to and how do we figure that out well we can express the height as a ratio of the width we need to figure out for these YouTube videos that get displayed what is the aspect ratio and one clue that we have is if we go back to uh I can open up proxy man again but essentially I want to figure out let's just comment this out for a second what is that ratio between the width and the height there are various ways to get this but all right let's take a look at this I'm going to get the clue from the thumbnail sizes so we take a look at the items and we take a look at the thumbnail we did the medium one right so 320 by 180 so if the width is 320 then what is the height um 320 / 180 the ratio is the width is 1.78 sorry 7 yeah 78 times larger than the height so we would reverse that if in order to get the height because we have the width so we would divide 320 by that in order to get 180 let's see if the math works out so 320 / 1777 8 gives us 180 so that's how we're going to get the height so coming back here if proxy um geometry reader is going to give us the width then we could calculate the height by taking proxy do size. width divided by um sure what yeah eight um let's take a look so this should work and sure enough we have the appropriate width and height the cool thing was that this was this would also so work like this if we um especially if we ignore safe area so let's that's why you see this part here so if we go back to the home view we can say um ignore safe area this might get it to go you know there's that padding there though so I don't want to add that padding there I do want the tab view to be full perfect but now we need to add a padding to the um the feed view we'll probably put it in here uh let's put the padding oh probably just padding horizontal okay all right our YouTube player app looks and feels pretty good if you enjoyed this build please give it a thumbs up and if you were able to complete it please comment down below I did it now check out our other app builds and series here on YouTube or if if you want a structured learning path proven by thousands of students check out our CWC plus program down in the description below all right thanks for watching and I'll see you in the next video series