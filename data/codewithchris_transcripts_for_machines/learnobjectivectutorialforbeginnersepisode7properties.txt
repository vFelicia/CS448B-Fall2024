hey guys it's Chris here with another objectivec lesson and in this video I'm gonna try something a little bit different I'm gonna be zooming into the text for those of you guys who gave me the feedback that the text is hard to read so let me know what you think about it and if actually continue to do it today we're going to be talking about properties so I've got a starter project here it's just a new Xcode project you can download it in the description below or the link on the screen and all I've done is just create a new nsobject class called car so let's dive in how you know what is a property first of all essentially a property is an instance variable which we've talked about where you access and you set through getter and setter methods so let me show you an example for instance in my car class if I wanted to declare a named property so that we could keep track of the name for the car all I would do in my header file is use the keyword property and then in brackets I would put some attributes and let me show you how it works before I go back and explain what these attributes mean okay so you've got your property keyword you've got your attributes next comes the datatype basically what is this property what type of data is this property gonna store so it could be another class type it could be you know an integer or in this case I'm gonna put I'm gonna store a string for the class name and literally that's all you need to type so for example in viewcontroller.m if I wanted to use my new property let's import the car header file and then let's declare a new instance of a car we'll call it my car and if I wanted to set the name for my car all I would have to do using dot notation is do something like this and if I wanted to retrieve that value I would literally just do this so my instance dot property name now let's go back to car dot H and let me explain what these attributes are so the first one nonatomic it basically means that this property is not thread safe so if you're writing an application with multiple threads you could get different sorts of race conditions if both threads are trying to set the set the same property and you'll get all sorts of funky behavior now you could set this to atomic and what happens is that code gets automatically added to your property to prevent that from happening but that locking code adds extra overhead so if you don't even know what I'm talking about this multithreaded stuff then you're probably going to just be setting it to nonatomic because chances are your you'll be writing a single threaded application now the second property second attribute sorry strong is basically if you remember in our previous video where we're talking about memory we're talking about how automatic reference counting basically the term ins if you have an instance of an object and there are no references holding a reference to it it's going to get D allocated and your memories automatically gonna get cleaned up if we use the attributes strong for our property and let's say that this property stores in instance of another car object so by having the strong attribute specified if my property held a reference to another object it would count as a reference now let me contrast that with the weak reference if there is nothing else referencing that object aside for my property that object would still get cleaned up in that memory get D allocated because I have weak if this were strong on the other hand even if there were no other references referring to the object aside from my property that would count as a plus one or the internal reference count for that object now what happens if I have weak and I'm holding a references a reference to another car object and then that car object gets cleaned up in that case my property would automatically be set to nil so if your property uses weak referencing then you have to make sure that you check for nil before you start using whatever object is assigned to your property so in this video you saw how easy it was to create properties and to use them now the example that we used was we created a name property in our car class now what if you wanted something to happen when the name property got set for example to call another method or to set another property in your car object well in the next video we're going to continue talking about properties and I'll show you how to do exactly that so instead of the usual fact of the day I want to instead ask you guys a question so right now I've got a video series on objectivec and another one on learning Xcode and I want to release videos a little more frequently so we can finish those series and then get to actually building some apps together the question I want to ask you guys is you know what sort of features or functionality or apps would you like to learn about so this gives me idea of what sort of content and videos that you guys want to see so I can release videos that you guys want to see okay so let me know in the comment section below and don't forget to subscribe and thumbs up this video all right thanks I'll see you guys later