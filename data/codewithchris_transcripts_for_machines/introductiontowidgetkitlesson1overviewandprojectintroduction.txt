learn how to add a widget extension to an existing app including reusing service classes building uis for different size classes and scheduling widget updates through a timeline hey code crew this is floor i've been developing ios apps since 2016 and i've been working on many different widgets over the past few months so i'm super excited to teach you about widget kit in this series this is lesson one where i will show you examples for great widgets by apple the current project setup and the example app that i have prepared for you next we will add a widget extension and go through everything that xcode automatically generates for us let's get started with some examples of grade widgets so you understand how all of this works how the ecosystem works and how they are built up so there is this great article from the apple developer website which is linked in the description which just gives a brief introduction to widget kit and i just want to show you a few of the examples that they have on their website here they have the little calendar widget they have a weather widget news music also for the activity app and so on then there are a bit larger widgets for the ipad with photos and a bigger calendar view but one thing that unites all of them is that they have at a glance information so you for example in the calendar widget you only have the next two events showing so when you have a glance at the widget you immediately know what it wants to show you and what information is there same for the weather widget you just have a quick look at it and then you instantly know the temperature and the current weather conditions there are also some more widgets that i want to show you that i have personally worked on the first one is a food tracker app which is based around a medium sized widget that you can see in the screenshot in the middle here and the idea is basically that you can track your meals through a widget where you can just tap either on the healthy or on the junk side of the widget the app will open up and all of your meals will get locked that way so there's a tiny bit of interactivity here but i will tell you more about that in just a second and then there's also another widget that i made for a swift ui jam a few weeks ago which is an almost fully working calculator widget so we can watch the video here it looks just like the calculator app from your iphone but then you can tap on the numbers and on the operators the app will briefly open up close back down again and then you will see your calculation and the end result inside of the widget i think this is very cool obviously this is not what apple intended widgets to be but there you can just see what's possible with the technology so getting back to widget kit itself widgets are built entirely in swift ui so it is not not possible to pull the ui kit for example via ui view representables or your view controller representables currently you can only use swift ui to build out the ui side so what's displayed inside of the widget as i said the main idea is to provide at a glance information these are just tiny portions of the screen the widgets are based on a timeline so you the developer can provide a timeline scheduled with timeline entries that all have an associated date and some data associated as well so you can for example schedule a timeline over the next five hours where at every full hour there is a timeline entry and then ios or ipad os or even mac os whichever system your widget is running on will execute that timeline and refresh the widget by itself so you're not guaranteed to have the widget refresh at exactly the time in your timeline entries that you have specified but the system handles it and the system also has some limitations for example you cannot refresh your widget a few hundred times per day there are just certain restrictions there set by ios but most users will never notice this and for most users the widgets will always stay up to date we will have a look at the timeline the timeline entries and so on in partially in this but mainly in the next lesson and then one last very important thing when talking about widgets is that you understand that they are static ui so there are no animations there are no videos there is no navigation and there are also no buttons the only dynamic thing that a widget can do is link into your main app and pass in some data there we will have a look at that in the third lesson of this series but until then you can just assume that a widget is more or less a very static view okay to get us started a bit quicker i have already prepared a very simple example app this is a simple todo list app based on the json placeholder api you might have already seen the json placeholder api if you want to have a more specific look at it it will be linked down in the description it's a very generic api with some yeah as the name suggests placeholder json data for users for posts and so on but we're just using the to do's route which you will also see in just a second so the main app only has a single view which you can see here on the right hand side if i press play then all of the to do's will be loaded you we will have a list here with the to do title on the left hand side and then the statues whether it's completed or not on the right hand side so some of these todo's are open some of them are already completed and if we tap on a todo item here a little sheet will come up telling us the id of the todo then once again the title and whether it's open or completed and then you can of course dismiss the sheet like always okay so let's briefly go over the content view here so you understand how this all was built and then we will have a look at our data class or to do and then also our service class so first of all as you can already see we have a navigation title here so we must also have a navigation view which surrounds everything in our content view here and then mainly we just have this single list here the rest of the code is just view modifiers but we mainly have the single list here iterating over all of the to do's which is a state variable here in the beginning this is an empty array of to do but later on i will show you how this gets filled and then inside of the list we just have a simple button for every row the button action is to set the selected to do which is another state variable to the to do of this current row so for example if i tap on the first one then that will will be the selected to do which is used for our sheet here at the bottom this has the item initializer where you can pass in an optional identifiable item in our case our selected to do state and if that is not nil so if there is some to do selected then the sheet will show up and show just a simple group box here i think this is not too important this is just for demonstration purposes if we just miss the sheet again we have our list again and then inside of the list button there is just a simple attributed string which is brand new in ios 15 where you can use some parts of markdown to for example bold a region of text so here you can see these double asterisks before and after the completed or open text which we just bolded as i said this is attributed string stuff not important for this series i just wanted to include it to make it look a tiny bit nicer since this is a very plain ui okay let's continue down so we already have covered the navigation title it's just my todo's and now the interesting part comes so um for our todo servers i have chosen to use the new script concurrency features if you want to learn more about that there is also a series about such concurrency made by stuart lynch um so it will probably also be linked down below you can go there after this video or if you have any understanding issues then you can just go there and have a look at it but i think it will be pretty straightforward basically what we're doing is we're attaching a task to the list task is very similar to unappear so the code in here gets executed the first time that the view appears but you can execute a synchronous code in here so we will have a look at how that works in just a second but bear in mind so this task will get executed one time at the beginning and everything in here is happening asynchronously in a background thread or can happen in the background that can also happen in the main thread depending on how it is scheduled internally and all that this task does in this case is call our to do service dot get all to do's function which calls the json placeholder api gets back all of the to do data and then puts it into our to do's state variable up here which will then be used inside of the list okay and then the last modifier here i already told you about the sheet so i think this should be pretty clear now let's move on into the data folder on the left hand side here so first of all we have our struct to do it's important that this had this conforms to two protocols the first one is decodable so we can decode it from json which you will see in a second in the todo service and the second protocol is identifiable so we can iterate over it in our swift ui list this just has four very simple attributes the user id the id of the to do the title of the to do and whether the todo is completed or not let's jump real quick into the json placeholder api and let's go to the endpoint that we're using which is slash to do's and here you can see where this data is coming from so this is just a json file sitting on the server and there you have um all of the same fields that i just showed you in our todo structs so you have the user id which is an integer the id which is an integer the title which is a string and then completed which is a boolean okay and then the last file that i have prepared is the to do service here this is just a very simple helper class to fetch all of the todo's from the json placeholder api since there is no need to instantiate a new todo service every time that we use it i just added a static shared instance here so we can always just say to do service dot shared instead of instantiating a new to do service we have our base url which is just the address of jsonplaceholder.typeycode.com and then it gets a bit more interesting with these three functions here the first one is a very generic networking function that you can use in any of your projects really but the important thing is that it is built using the swift concurrency features so let's have a brief look at how that works so inside of the function we first have or we first construct our url so when we call this function we pass in an endpoint for example todos and then the function will generate a url for us so in this case it would be https colon slash slash jsonplaceholder.typeycode.com slash and then here it would be for example to do's so this will be the endpoint we constructed here this can fail so if in case it fails we will just throw a url error of that url once we have our url we can use the url session dot shared dot data function which is similar to data task or data task publisher if you were using combine previously this function just creates a or takes the shared url session goes to the url that you uh handed over and then fetches all of the data from that url this is an asynchronous task so you have to wait for the results to be coming in and this can actually also fail or throw an error and hence we need to try to await the data from this url this function actually gives back both data and a url response so in your app you might want to check the url response for the status code or any info that the server gave back to you in our case we don't care about that so we can just omit the second value of the tuple here the url response by using the underscore and we will just unpack the tuple into our data variable and then the last step is pretty straightforward we just construct a json decoder and then we decode our to do in our case from the data now the interesting part here is and hence the name generic helper function we have some generics here so we have a generic type t which basically means that we could use this fetch function to fetch any type of data we could also fetch some users or whatever as long as that struct is decodable as the generic condition here says so let's see how that works i have two endpoint functions basically the first one is to get all to do's from the json placeholder which once again is asynchronous and can throw arrows but this one will return an array of type to do and this will basically just call our fetch function up here from the todo's endpoint so basically just the one that i showed you in the browser a minute ago as you've already seen the fetch function is asynchronous it can throw so we need to try to avoid the result of the function since we are using generics here we need to explicitly specify the type that we want to get back so in this case if we want to get all to do's we want an array of type to do and then we just return the result of the fetch function and then very similar for the last function which is called get to do with id we can use this one to get the data for a specific to do which we're using for the sheet for example this function returns a single todo instead of an array of todo's and it's basically the exact same from before so we need to specify the type over here since we are dealing with generics and then the only thing that we're changing is the end point so now we're not querying for all to do's requiring for to do's slash our id and if we look at that in the browser so here we have slash to do's and now we say slash one for example this will give us just the first todo item okay so now that you have seen the sample app that i have already created for you let's do the last thing for this video which is adding the widget extension to do that it's also very very simple since xcode does almost everything for you you just go to file new target and then in here you can either scroll through all of the extensions or you can just filter for widget extension double click it then give it a name so in our case i will call it widget kit course widget make sure to uncheck include configuration intent that is something that we're not doing in this series configuration intent can basically be used for siri it can be used for the user to customize your widget but this is not important for the series once you're done just hit the finish button and here you can say activate the scheme if you want to which what this does is basically it changes the theme up here in xcode so once you have an extension you can select when you're running your app which scheme you want to run so you can then either run your main app in the simulator or just run the widget extension in your simulator for now let's just say activate if you want to change this later on you can just go up here and select either your main app or your widget extension okay and then on the left hand side here you can see that a new folder was generated which is called just what we entered into the text field if we open that up there's just three files a basic info.plist file an asset catalog that you can use to provide assets like images and then there is the widget kit course underscore widget file this file contains all of the auto generated code from xcode let me go over the extension and tell you a few words about each of the different types that got generated and actually let's start at the bottom here so first of all same as in swift ui which i just closed there is also a preview available for your widgets i'm closing this right now so we have a bit more space by the way to open and close that canvas you can press command option enter and then there is something that you're probably already familiar with if you have worked in swift ui before because there is now this add main widget struct this is actually super similar to the admain abstract in your normal app where you have a body in which you just present your content view inside of a window group in this case but it also has the add main attribute which basically tells the device this is the entry point to the app start here and then it's the exact same thing for your widget this add main attribute will just tell the device this is the main starting point for the widget called this and then you're good to go so of course this is not an app this is a widget and it also has a body the body has the generic type of or the opaque type of widget configuration you can have there are basically two different types of widget configurations the first one is a static configuration which we are using in most widgets actually use a static configuration and there is also an intent configuration which you can use if you want to let the user edit the widget directly on the home screen not important for this series but just so you know there's two different types of configurations and then into the configuration you just pass basically an identifier of the widget which is defined up here by default this is just the name of your widget extension target you can change this of course especially if you add multiple widgets to your app later on and then into the configuration you also pass in a timeline provider we will have a look at that in just a second inside of the configuration you then have your actual view now this has a very long and complicated name we would change that also in a minute and into that view you pass in your timeline entries if you recall in the beginning of this lesson i talked to you about you can schedule a timeline with different timeline entries for set dates which in turn contains some data that you can pass to your view and basically these timeline entries here come from your timeline provider and get passed into your view over here you will see this more concretely in just a second you can also customize your widget configuration by for example giving it a display name which will then show up in the app library and you can also give it a description okay let's scroll up a bit here the next struct that got auto generated is the actual view this view gets passed in a timeline entry which is that piece of data that's scheduled through your timeline and then this example widget here that gets autogenerated just shows some text of the current date of the entry so nothing very special here and then the entry actually doesn't contain any data right now we will customize this in the next lesson the only important thing here is that your entry conforms to the timeline entry protocol which requires the entry to have a date property and then up here the most important and most interesting part of widgets is the timeline provider so all of this over here the timeline provider is responsible for scheduling your timeline entries for your widget over time for the next couple of hours for the next day or even weeks however long you want to schedule it there are three main functions functions that you need to implement here first of all the placeholder function this is used when the user is selecting your widget in the widget gallery on their actual device then there is the get snapshot function which just gets back the current version of the widget with just a simple timeline entry or just a single timeline entry and then there's the get timeline function which you can use to schedule a timeline for your widget including when it will refresh how often it will refresh and which data it will show the very last thing for this video will be taking all of these different structs and moving them into their own files to make it a bit easier to read and to understand what we're working with so over here in our widget folder we will add a new file and call this one provider and now a very very crucial detail when you create this file is that it needs to be in the widget target and not in the app target now you can hit create and in here let's import widget kit and then let's move our provider our timeline provider from the generated file into this new file and let's do the same for the simple entry and the view as well so create new file swift file let's call it simple entry make sure that the widget extension is checked here hit create import widget kit and then copy over our simple entry just like this and then one last time for our view here so let's hit command n new file let's call this widget view hit create here we need to import both widget kit and swift ui let's copy over this struct over here and move it into this new file and then we can also command click on it and say rename and then rename this long name to just widget view let's also remove this space here let's copy the name and make sure that it was renamed everywhere so for example for some reason xcode didn't rename it over here so let's get rid of these old names and replace them with the new shorter name in this lesson you learned about what can be done with widgets and how they are internally structured you saw that a widget is based on a timeline and timeline entries which get displayed in a plain old swift ui view