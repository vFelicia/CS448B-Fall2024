hello welcome to Lesson 12 of how to make iPhone apps with no programming experience in this lesson we're going to hook up a method to the button so that when the user Taps on the button we can execute some Swift Code and before we jump into our war card game project I'm going to show you guys a couple different types of methods in a playground first and then we're going to jump into our war card game xcode project and we're going to hook up a method to the button that will fire when the button is tapped all right so let's get started I'm going to open a brand new playground I'm just going to save it on my desktop there and I'm just going to declare the person class just so we have something to work with in this person class I'm going to declare two properties and let's just call it age uh let's make it an INT well we don't even have to specify that let's just call there and name equals Tom like that and then down here below that class declaration let us create a new person object and assign it to a variable that we'll call a so we're going to do that to declare a new person object now let's go back into our person class and declare a method so let's say funk update age and name like that and we're going to say age equals 20 maybe this is 5 years later and the guy changed his name to Ted all right so as it stands right now if I type A do age I'm just accessing this property of my person object we can see that it's 15 a do name and the name is Tom okay and if I call the method now a. update age and name it's going to call this method and it's going to set the age and the name to Ted okay now if I do A.H we can see that it's 20 and a. name is now Ted but it would be far more useful if this method were to accept some parameters so that I can specify what age I want to set it to and what name I want to set it to we can do that by adding parameters into these two parentheses so let me show you how to do that so let me type in uh let's see updated name okay okay so that let's do updated Age first okay so updated age and this is going to be an integer and updated name this is going to be string okay and now xcode or rather our playground is complaining that this line is no longer valid see missing argument for parameter updated H so let us just erase those parentheses open up a brand new one and autocomplete should tell you what is missing so just double click that and we can fill in the age we want so let's say it's another 5 years and again he's changed this name to um Tim okay so now uh age should be oh actually I forgot to update the method so inside here age we're still setting it to this uh this number here instead we want to set it to updated age and the name we want to set it to updated name and now the method updates the age and the name based on what you pass into it just like we've done here so when we call the method we passed in 25 and we passed in Tim and now if I access those two properties we can see that it's carried out and updated uh the age and the name now there's another thing that makes functions very useful and actually methods and function I'm going to use these two words interchangeably but the official name really should be function in some other programming languages they call them methods so let's use the word function to describe uh method and function being the same thing so let's call it function from now on just so um we use the same terminology and we use the Swift terminology okay so there's another thing that makes functions very useful and that's that functions can return a value so here we've seen that functions can take in values right and then it can do something process some code and then it can return a computed result uh as a return value so let me show you how to declare a function with a return value so you start declaring it exactly the same way I'm going to call this method increase age and I'm going to pass in a number uh uh age to increase okay or how about just actually let me change that to increase by okay so we'll pass in a number to increase the age by and we have to specify that this function actually returns a value and we based on um what we want to do with this function it's going to return an integer or a whole number and I want to return the updated age okay so I'm going to type a hyen like that followed by a greater than sign and the type of the data that gets returned is int so that's what you want to specify there and then open up your curly brackets just like you normally would so in here I'm going to say AG plus equals increase by and this plus equals if you haven't seen it before will just add this side to that side so whatever number I pass in is going to just add it to the age and then xcode is going to complain because it expects that this function should return some sort of value that is of type int so I'm just going to say return uh return the age so this is going to return the updated age okay down here I'm going to call it I'm going to call that method and say a do increase Ag and I'm just going to pass in 10 now this is going to return the updated age and you can see here that's 35 normally when you call a method that would return some sort of value you would want to store the value that gets returned so I'm going to say varb equals this method call or function call and uh it would return 35 and assign it to this new variable B now there's another type of function that I want to alert you to so far we've been calling these functions on these objects and that sort of syntax goes like this object Dot and then a method or a function of that object right well there are these other functions called class functions or class methods and instead of calling the function on a object these class functions are called on the class they're not associated with any particular object so let's let's do an example right now okay in the person class I'm going to create a class function and you do that by typing class first and then declaring the function as you normally would so I'm just going to create a function that is not associated with any particular object so why don't we say that this function would return let's say get Average age and it would return a number and then inside this I would just return 50 as a quick example now it might not be clear from this example but the difference between an instance function or just a regular function and a class function is that usually regular functions are doing something with that particular person object in this case because it's the person class class see this one updates the age and the name for that person object this one increases the age of that person object but class functions usually don't pertain to any particular object and they're usually used more of a sort of like a utility or a helper function in UI kit there are a lot of class functions that we'll be using and at that point I'll Point them out you're not going to be declaring a lot of class functions normally we're going to be mostly using instance functions or these uh regular functions here let me show you how you would call a class function so whereas the normal functions we call on an instance of an object see a do increase age whereas where a is a person object class functions we simply type in the class name Dot and then you can call the class function like that as you can see it doesn't affect any particular person object uh usually you use it to uh return a quick calculation or to do some quick data conversion that doesn't necessarily have to do with a person object don't worry if you don't understand the purpose of class functions right now I just wanted to point it out to make you aware of it but as we're coding together and building our apps I'll point out to where we're using class functions in UI kit I don't think we're actually going to need to declare any class functions ourselves with our apps okay so now let's jump into our war card game xcode project and let's connect a function to the button so here we are in our xcode project and I'm in the assistant editor view on my left hand pane I have the storyboard and on my right side I have the code for uh the view controller for this view now I've hid in a couple of the panes my Navigators I've hidden the utilities pane like that and if you forget how you get into this assistant editor view just click this button here show the assistant editor and this button to the left is to go back to the standard editor now one thing you want to make sure of is um on this right hand side if you're having trouble uh doing any IB Outlet connections or if you're having trouble with what we're about to do uh connecting an IB action function um go here go down to automatic and choose view controller like that just to make sure that this is the appropriate view controller file uh for this view so how are we going to connect a function to this deal button here well there's a very easy way to do that similar to how we were able to connect IB Outlets by holding down control on our keyboard clicking the button and then dragging this line here like that now you want to drag it above this last curly bracket here cuz anything outside of that would be outside of the view controller class we want to make sure it's inside the view controller class uh but it's not inside a method so I don't think yeah you can't even put it inside of a method um so just put it in between the method but before the last closing curly bracket so once you let go it's going to ask you to create an outlet don't do that we're going to click the drop down and choose action instead now the name is going to be the name of the function we're going to call it uh deal tapped and the event we want to change it to well by default it should be touchup inside and that just means uh that this happens when the user Taps on the button and releases his or her finger while still inside of the button so it detects it as a tap and not a drag or anything else uh leave the other things as is and click connect so now that creates a deal tapped function for you whenever this button is tapped it's hooked up to this function let me show you what you would do if you have trouble doing that control uh clicking and dragging method I'm just going to delete this function be aware though when you delete that function if I run it now it would crash because the button on my storyboard is still connected to that function that does doesn't exist anymore it no longer exists I deleted it so right click on the button go down to touchup inside and click X to break off that connection what you're going to do as an alternative is just type it out first IB action you're going to declare your method as uh funk deal tapped and then you're going to put in a single argument that is going to represent the sender for the button right so I'm going to put in sender like that and the sender is actually the button element is going to be sent as the input for this method so if you needed uh to get a reference to that button object to do something with it it's going to be passed in as this parameter right here so the type of data that this guy is we know is of type button so we can specify it like that there okay and now I'm going to open up some curly brackets like that uh and inside here we can put some code but what we have to do is manually hook up this method to the deal button and how we can do that is right click the deal button go all the way down to touchup inside this little circle beside it and click and just drag that over to either this yellow circle up here or the view controller when you let go it's going to show you all of the IB actions that you can hook up this event to so here deal tapped with sender you know we'll click that and now it's hooked up like that so that's an alternative way that you can hook up a function to your button without using the control click drag method now I can put any sort of code I want in here for now let's just put print deal tap we're just going to print a message into our console window down here just to make sure that this method is firing okay so I'm going to press command R now and run our project so we can test it out okay so clicking the deal button you can see here down in the console that indeed it's hitting that method because it's printing out deal tapped let me me show you guys another way that you can find out whether or not it's reaching this point it's executing this code or reaching this point so what you can do is click this gutter beside the line of code you want to stop the execution at so for example if I do that this little blue line this blue marker will stop at this line so that's called a breakpoint that means that if I run my app at any point when it reaches this line it's going to pause the running of the app just so you can see and it's going to alert you uh that it's stopped here and then at that point you can check different variables you can check different things and this is very useful for debugging your app when you run into issues so here we're going to use it just to make sure that the app stops or the app comes into this method okay so now let's tap the deal button here and and you can see here that it immediately goes that line of code it highlights it in green and it stopped the execution of the app now I can I have some controls and we'll go through this more in depth in the debugging lesson uh but for now this shows us that execution indeed does Reach This method so what we can do is just click this button to continue the execution like that and if you wanted to disable the breakpoint just tap it and it'll be blue like or light blue to indicate that it's inactive and it won't stop execution there or you can just click and drag it off the bar and get rid of the breakpoint so I'm going to stop that there and that's it for this lesson thanks for watching and I'll see you guys in the next lesson bye for now