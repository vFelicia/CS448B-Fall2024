hello so this xcode tutorial is going to be a little different than the ones you've seen before because I'm going to show you how to use xcode in the context of IOS app development and that means that every xcode function and feature that I show you you'll know why it's important and how we use it for app development all right let's Dive Right In so first of all let's talk about where to get xcode and by far the easiest way is just to open up the Mac App Store on your Mac and search for xcode should be the first listing here click into it and yours will say install whereas mine says open because I've got it installed and in terms of getting this installed their requirements if you don't have the right Mac OS version it'll tell you up here and then it's just a matter of updating your OS in order to install xcode the other thing is size requirements so downloading this requires 3.4 gigs but in my experience it's going to take up a lot more hard drive space once you've got it installed so I would even buy for double this because there are additional components you need to download depending on which platforms you want to build for as you can see you can use xcode to build for iOS iPad TV OS watch Vision OS even Mac computers so this is official Apple software and this is the only tool recommended by Apple for us to build apps for all of the platforms that's why it is number one on the chart for developer tools it has terrible ratings I will admit because X code can sometimes be buggy as evidenced by these reviews but you can mitigate that a little bit by not using the beta versions of xcode so if you happen to have a developer friend or access to the developer portal where you can get access to um an early release of xcode 16 let's say because this is xcode 15 uh I would not use the beta um simply because it's going to be even more buggy there's less support for it some of the tutorials and videos that you find online to learn xcode with will not be covering the betas and so on so forth so this is by far my recommended way to get xcode all right so go ahead and download and install xcode and then let's see how we can start a brand new app project so hopefully you got xcode installed without a hitch it does ask you for your computer administrative password at a couple of points during the installation to install additional components go ahead and allow xcode to do that if you want it to function properly okay so what we're talking about here is xcode uh version 15.2 but to be honest with you the xcode interface and how it works doesn't really change that much from version to version so if you're out there looking for tutorials and documentation and videos and you find a video for xcode 14 or xcode 13 chances are you'll still be able to follow along with the newer versions of xcode anyways so what we're going to do here today is we're going to create a brand new IOS app project and I'm going to show you all of the different features and how to use xcode through the context of building an app and I think that would actually help you understand better about why we do certain things rather than just running through all of the features and functions um and then I don't think it'll stick in your head as well so go ahead click create new project and let's go through some of these new project options now up here there are all of these different platforms you can build for in this video we're going to be building an IOS app or at least that is the context for which we are learning xcode let's choose uh under iOS let's choose app and click next and let's give this a name so we're going to call it xcode demo the next option has to do with which team or which account you want to use because sometimes if you are let's say working for a company you might have a company account and then when you want to build apps for um another company or your your personal apps you might choose a different team so that's where you do that organization identifier combined with the product name forms the bundle identifier which is the unique ID for your app so as you can see the organization identifier the format usually goes like this com Dot and then your company name or your personal name or whatever nickname whatever you want to use and then uh followed by dot your product name there's no spaces so the space in my product name got turned into a dash Al together your organization identifier plus the product name forms your bundle identifier this is a unique ID for this app that you're building okay so interface this talks about about what technology or uh framework you want to use to build the user interface for your app the the screens essentially Swift UI is most likely what you want to choose here because that is Apple's uh preferred platform now um storyboard was the uh the OG if you will the original uh framework used to build user interfaces and then appil released Swift UI which they are uh developing and they're moving forward with it and I mean it's been out for five years or so so it's you know it's in a good spot I would choose Swift UI if you're trying to feature proof your skills there probably will be some jobs that still require storyboard um but as Apple improves Swift UI and continues to work on it um everyone's going to be moving to Swift UI okay so language should only be swift here if you choose storyboard you might get another option called Objective C and again this is sort of the OG uh version of the programming language what you use to you know code and express the app logic if you want to use the latest and greatest you're going to choose Swift UI and Swift and as you can see Swift UI only gives you the option to use Swift for storage we're not going to choose anything here storage is um these are both options to have local databases on your device for your app this is not something we're going to go through in this lesson so we are going to choose none and we're going to also leave all this unchecked that's all you need to configure for your new project let's click next and we're going to choose a place to save it I'm just going to save it on the desktop so I can easily access it you probably want to create an apps folder somewhere on your computer uh where you're going to keep all your apps organized for Source control we are not going to enable this either this is something else that we can probably cover in a future lesson but it is a way to um have some sort of versioning um it's a way to keep different copies or snapshots of your code in your project uh organized so that you can always go forward and backward across those different snapshots of code but it does require a little bit of learning curve so we're going to go through that in a future video okay let's go ahead and click create and it's going to create a folder of files and then it's going to show you your new project here I know personally when I first encountered this on my first project I was quite overwhelmed so I want to briefly explain the main areas of xcode and then we're going to dive into each one in the context of navigating through your app and starting to work on your app so first of all let's start all the way on the left this long pane this is called the Navigator area which is mainly where you're going to be navigating through your project files and uh different issues and things like that to the right of the Navigator you have the editor area now this actually spans the whole part of these two panes right here it's this biggest area of xcode because this is where you're going to edit your files where you're going to write your code where you're going to build your user interface and so on now currently the editor area is split into two different views as you can see one is a code editor View and and on the right hand side you have the canvas which is a preview of what your screen or your view is going to look like as represented by the code on the left hand side we'll dive into that in a little bit I promise you to the right of the canvas you have another long strip called the inspector area and this is where you can configure little details uh about either your files or certain things in the code or certain pieces of user interface face elements in your preview again we'll also dive a little deeper into that later across the top you have your toolbar and this is where you're going to control your app you can run your app from here you can see the status of what's Happening behind the scenes and then at the bottom tucked away right now you have to hit this button to expose it is the debug and console area this is where you're going to troubleshoot issues for your app or look at output that your app is generating so we're going to close that for now because we're not going to need that so those are the main areas of xcode now let's take a look at how each of them is used in the context of this project to help you develop and build iOS apps all right let's dive into the project now so remember when you created this brand new project it ask you where you want to save it to right so let's pull up that location I saved it on my desktop and you can see there's a folder here inside that folder there is an xcode project file product name xcode Pro that's the extension that opens up xcode and there is a folder containing all of the actual files for my project we'll dive into what these files are in a second but I just want to make a quick note that when you're sending your project to someone you cannot send just that Blue xco Project file you have to send all the files right so go up one folder and zip up the entire folder okay so the second thing I want to to draw your attention to is I'm going to move this over here the Navigator so this Navigator it contains different tabs to navigate different things but by far you're going to be using this leftmost tab which is the file Navigator and it allows you to look at all of the different files in your project as you can see it maps to the actual files that were created so this blue xcode Pro this is that top note here right and then this folder xcode demo you can see that folder right here and if you open this up you see the other files mapped here so that's why this file Navigator um is so important because it allows you to edit all of your different files take a look at this when I tap on a different file the editor area changes to allow me to edit that file depending on what that file is so this is just the code file that's why I I don't see the canvas with the preview whereas content view this is a view file or it contains a view and there is something to display it's essentially a screen of our app okay and if I click on assets that's another type of file which we're going to get into so the editor area changes let's start by looking at the very first file up here this is our project file when I click on that xcode shows me a lot of configuration details for my project that's exactly what this uh project file is for it allows me to indicate what platforms I want to Target what orientations I want to lock the app to what's the minimum iOS version I want to Target and things like that I can change my bundle identifier version numbers and so on now there are a couple of different tabs across the top I'm not going to go through each of them but signing in capabilities this allows you to add different abilities to your app if you will you can add Game Center health kit uh inap purchases and things like that maps for example this is where you would add those Frameworks next let's take a look at this first code file what is this well you can think of this as the entry point to your app in other words it's the code that gets run when your app is launched so I'm going to gloss over some of this code and draw your attention to the most important bits for understanding take a look here it says content view where have we seen that before well we have a file in our project called content view so let's click into that this happens to be a view or in other words a screen of your app and it's called content view here on the right hand side there is a canvas because it is a view so there's something to see you can see that this is the representation of the code here and the part which I'm going to highlight which we won't go through right now but we'll go through a little later in this video this code is generating what you see here on the right hand side okay so this is the first screen of our app why is it the first screen of our app well let's go back to the app entry point right the code that gets run when your app is launched right here it's creating an instance or in other words a it's creating a Content view essentially and displaying it to the user this this is the content view so when your app launches it creates a Content View and shows it to the user and that's how you get this first screen of your app again in the next part when we dive into the editor area I'll show you how to change some of this code and we can visually see what happens as we change it for now let's go through the rest of our project files in the file Navigator next up we have the assets library and this is where you're going to add images colors app icons you're going to Define um various color sets and themes all to use during your coding in your app you can reference all of those colors all of those images to use in your app why don't we try adding an image together I have one that I prepared here and that is this sha Inu looks like this okay but why do I have multiple copies of the same file well this 2x1 is double the size and the 3x1 is triple the size of my original image and the reason why we add three different sizes of the image is because there are various Apple devices at different resolutions or pixel densities so depending on which device the user is using the OS or iOS will pick the right image to use so I'm going to highlight all three of them and drag them into here don't worry if you don't have three different sizes of the same image you can take the original one and just enlarge it two times and then three times in a graphics program such as Adobe Photoshop or figma but often times when you do that the 2X and 3X versions will be blurry so what's better actually is to take uh try to find a really large copy of the image and to scale it down into the 2X or 1X versions are better yet if you have an illustration if you can use vector graphics those are scalable and you won't lose any sort of resolution you can do some research into that if you want to search up vector graphics but let's get back to the met at hand here we have an image asset which we just added into our asset Library notice this asset name Sheba Inu we're going to have to spell it exactly like that in order to reference this image and display it in our app let's also add a color so I want to show you what that looks like if you right click here and you choose color set I can choose this as like perhaps let's name this the uh primary color maybe the primary accent color or something like that and by default let's make it a let's make it like a teal or something like that he something like that and if it's dark mode if the user has their device on dark mode I could choose a different color uh maybe something that is like that and so iOS will choose which color to use for my primary accent color depending on whether the user is in light mode or dark mode and this is how you can specify um those things in a little bit I'll show you how we can access the color and the image which we've added inside of our content view but for now let's go through the rest of our project files so we've got this preview content folder with a preview assets library or asset catalog this is where you're going to add assets for your preview these are things that you are including simply for preview or development purposes and not necessarily in your um in your actual ual app when you put it into the App Store now that we've gone through our project files let's see how we can start to edit some of them in the editor area so as you saw before this editor area really changes to allow you to edit the file for example configuring the project properties versus editing code versus editing a view I'm going to focus our time on editing views because that's where I feel like we're going to learn the most here so first off code on the left preview on the right what you see in the preview is a representation of the code itself you can also adjust this there's also some neat ways to navigate between different files in the um editor area there are arrows here going back and forward and this works exactly like a web browser when you're going forward and back um through your browsing history there are different tabs here that you can switch across you can create new tabs and things like that and you can turn off your preview if you're used to working just in code and you don't need a preview you can say show editor only even if it's a view or you can bring out the canvas and there are a lot of different options you can rearrange the different panels you can have split panels and so on and so forth but I'm not going to get into that because I don't think you need to know know that right now what I do want to illustrate is showing you some of the code edits that we can do here and giving you like a slight a very light introduction to Swift UI and building user interfaces using the code right here in the editor area so even if you have never coded before and you haven't ever seen code I think I can explain this in a way that you can understand so first look at this keyword here called vstack v stands for vertical so this is basically a vertical stack and this is a layout container so anything you put inside this container it arranges it stacked vertically there's also a horizontal stack and you can probably guess if you put things inside that container it arranges those elements horizontally well let's take a look at this vstack so what is contained inside of it well it's everything between the open opening curly bracket and the ending curly bracket in other words you see this keyword the image and the text these two elements are inside the vstack so it's going to stack them up vertically and if you look at the preview you have an image of the globe and you have hello world as a text element the globe is this image element right here and the text hello world is this label over here and because they are both inside the vstack they're stacked on top of each other furthermore the image is on top of the text because inside the code it's arranged exactly in that way now to help you visualize and see this code a little better let me create some line braks or some spacing and it helps you visually separate the elements and furthermore what we can do is add something called a comment so these are pieces of code that gets uh rendered or displayed on through the preview but what I can do is add little messages or notes inside the code or in between the code using these two forward slashes these are messages that don't uh the system doesn't treat them as code so it's just like this part up here all of these these are all just notes for us so I can say this is the image of the globe this is the label and this is the vertical stack now the next thing you might be wondering is why are we able to show a globe this image but this globe this is the name right here of that asset that Globe is not inside our assets Library where is that Globe coming from well there's an icon set in iOS that you can use it comes with the system all you need to know is what the system name of that icon is well how do you access the set of icons we're going to skip ahead a little bit here but there's a plus icon here in the toolbar if you hit that this brings up what's called the library and there are different tabs here let's go to the last tab I'll explain the other ones in a little bit but I want to show you where all of these icons where you can find this library of icons for for example we can search for pencil and you can use all of these different ones take note of the name this one's pencil this one's pencil. Circle right pencil. circle. fill so on and so forth so let's use pencil. Circle you need that name and you need to just as long as you know the system name if you specify it it will be there and it'll show up okay so I'm actually just going to erase the do Circle part and I'm just going to use a basic pencil because I want this to stay in one line so it's easier for you to read next I want to point your attention to these two lines of code right dot something and then brackets with something in it this is what's called a modifier and both of these modifiers change how this image looks and behaves so why don't we try removing this see what happens going turn black and it's about the same size I would say but image scale this one as the name implies changes the size of the image the large part this is uh a parameter for the modifier so this is how it modifies the image this is specifying or configuring that modification I could choose dot small for example uh and all I'm doing is hitting dot brings up this menu uh which gives me the options that I can put in there and I can select small and you can see that it got a little smaller now the second modifier foreground style changes the color or potentially other things as well of the icon but the configuration is just to specify the tint color now tint uh is the default accent color in iOS the default tint color is this blue that see here but why don't we try changing it to the color that we specified inside our assets library and if I go back here we called it primary accent color right with spaces in between capital letters for each word and the way that we specify that is we have to type color followed by uh two rounded brackets and inside we put the name of the color color yeah so you can see our color is right there let me change this back to large so it's a little easier to see it's still hard to see because of the color that we chose but the point that I want to make here is that these are modifiers and they modify the image element right here we could also modify the text label right here by adding different modifiers to it so let me show you what that looks like Dot and then it brings up this autocomplete menu which gives us options so for example one easy one is just to choose bold and it will bold the text furthermore if I wanted to change my text of the same color I can add the foreground style modifier to my text this modifier works for both images or icons and text so now my text is the same hard to read color why don't we try looking at this app in dark mode there are some special features of the preview canvas that let us configure uh how we preview it if we take a look at this icon here you can turn on color scheme so that's how it would look in dark mode that's how it will look in light mode now light mode is really hard to read so I might go back to my assets and I might say for light mode why don't we use a darker color so it's slightly easier to read I mean those would all be hard to read but let me just use that for example for light mode if we go back to our content View and we wait for the preview to load and then we click on this so in dark mode it looks like that in light mode it looks pretty much black but I'm sure that is the primary color that I chose here um it looks a little dark that might be also hard to read appearances any light or dark okay yeah there we go it's it's a little hard to see but it is the color that I chose there we go and I guess we're talking about zooming in and zooming out so furthermore here you can toggle different orientations so you can see what your app looks like in portrait mode or different orientations and there's various things like that so just in the last five minutes I've explained this code and I'm sure even if you haven't seen any code before that you can read this code and you can understand that why this code right here generates what you see here on the right hand side and that's how building user interfaces feels like in Swift UI it's very intuitive and uh once you get the hang of it you probably wouldn't even need the preview and you can just write this code furthermore if you don't understand what sorts of modifiers are available or what sort of parameters you can specify for each modifier there's an easy visual way to do that and that brings us to the next section which is the inspector so you might have noticed that as we were coding and we were clicking on these different pieces of code that what you saw on this inspector panel was changing and that's because depending on what your cursor is on and what your uh file is active it shows different options let's start at the top for example if we take a look at this project node you can see the full path of where it is you can customize some different things if we take a look at an image asset let's say uh yeah an image asset like this you can also see different things you can change about that image some details about it some colors right that's where we're customizing the color actually we're already using the the inspector panel and furthermore there are a few different tabs just like the Navigator there are different tabs see so now let's go into a code area let's take a look at a vstack now this one is about the identity and the type of what it is the file that is um if I go into this tab this is a quick help tab which gives you information about the vstack it shows you a code example and a little tutorial that's a great way to uh look at things that you're unfamiliar with for example I can click on the image and it has the same sort of thing shows me some of the available options if I click into this one it lets me configure different things about it so for example let's click the vstack I can add some spacing between the elements if I would like for example uh the image and the text they're stacked right up against each other but if I increase the spacing like this let's increase it by a bit more so you can see let's say 50 or 100 even you can see that they're spaced really far apart right I have to hit enter actually there it is that's 100 uh and you can also see how it affects the code you see it added a parameter to the vstack uh it added this part right and it shows how you would configure the vstack using code if you wanted spacing between the elements to be 100 but I did it through the inspector panel right so it's a visual way of configuration what else can I do what if I clicked this alignment and I clicked align them to the right you can see now they're aligned to the right so let me change that back to the center and you can see here it actually specified the alignment to be the center but by default it's at the center anyway so even if you don't specify alignment to be center it's already centered so I can delete that piece of code now this is the cool thing let's go to the image right now there's a lot more things you can configure with the image but what I want to draw your attention to is down here the add modifier box right here it shows me just by clicking into it the different types of modifiers I can specify on that image element there's blur border brightness contrast Corner radius hover effect all these different things right before I before I add a modifier let me just specify I I just remembered we need to take a look at how we're going to show the Sheba Inu image why don't we do that what if we just typed in sha Inu like this it doesn't show up right even though I spelled it exactly like how the image asset is in our library still doesn't show up and that's because we don't use system name name when we are referencing Assets in the library you only use system name for those icons in the system so I can remove that and lo and behold we get the image of our Sheba Inu let's try adding a modifier to it now so I'm going to click here we're going to use the inspect panel to add let's say a blur to it a blur radius three that is the strength of the so you can see that's applied to it right there so this inspector panel is a great way to learn about different modifiers that you can add to the uh to different elements right now I have some rounded images uh Corners I mean and then let's go back and change the text here instead of hello world we'll label it as a Sheba Inu and then furthermore we'll reduce the spacing to that let's talk about the toolbar across the top now you'll see that there's this corner button hide or show the inspectors if we click on these buttons essentially hides and shows these panels which gives us more space for editing the code and looking at the preview which is great for laptop displays or smaller screens we also have the library icon which we went over for we also have this status right here which tells us what's happening on the left hand side here we have uh the Target that we want to run and this matters when we have a larger xcode project with multiple smaller targets or projects in it for now we have just one so it doesn't really make a difference but this menu this second drop down is really important this is where do you want to uh run your app on in terms of previewing it so if we plugged in our device onto the computer it would show up here and we can run this app and install it on a physical device and you can actually then unplug your phone afterwards and show people on your device or you can run your app on one of the many simulators and this is a virtual device that appears on your screen that you can use to interact with your app so I'm going to show you how that works in a second for now let's just choose iPhone 15 Pro um this is the Run button this will actually um install this app either on the simulator or on whatever physical device you've selected so it basically runs your project if you tap and hold it there are a couple of other things that you can do which we won't get into at the moment I want to draw your attention back to the library because there are a couple of different tabs here now this first tab has a collection of the different views that you can add to your user interface so you saw vstack which is a layout container you saw the image element you saw the text element there are color Pickers buttons date Pickers forms labels links lists menu and so on and so forth this is a great way to just explore Swift UI and what sorts of components you can add to the view furthermore this tab gives you modifiers so you saw in the inspector panel how we could add modifier and we get a list this is another way to look at the different types of modifiers you see blur that's the one we used before if you just tap it you can get a description of what it does and how it would look in code same thing goes for these views if you tap on one of them you can get a code sample you can learn a little bit more about it and things like that these are different code blocks which if you get into Swift then we can dive into that but for now we're not going to do that this is another way to access your asset Library the great thing about the library is that it's all drag and drop so you open this you can just grab this and you can drop it into your code that's how you would display the Sheba Inu right if I put this inside of our vstack right You' get two of them one of them has rounded Corners because we have the modifiers the other one doesn't so it's got straight corners but the same thing goes for the other things in the library right you could just drag one of these things such as a button right into your vstack let's just put it right there for example you've got a button and then you could explore what the code looks like and start playing around with it so the library is really useful uh as is the inspector but over time as you play around and you code longer you're not going to need the library you're not going to need need the inspector just going to be faster for you to type a couple of letters have autocomplete pop up choose the thing you want and just type and code everything by hand like that great that xcode gives you various ways to go about doing the same thing all right so that's the toolbar and the nutshell let's try running our project on the simulator and see what happens if I hit run if you're doing this for the first time it might take a couple of minutes at first it says build succeeded if your code if there was like an error in your code or something like that you would get a error and it won't be able to run your project until you fix it but it said build succeeded which means there are no errors and it launched this virtual simulator and then it ran my app on it now why would I need a simulator if I have the preview that's a great question question there's lots of things that you can do in the preview you can even interact with it right but there are also lots of things that you cannot do in the preview for example using the simulator you can take screenshots and you can simulate different things you can simulate a location for example if you are using Maps you're trying to track uh the user using GPS you can simulate custom locations and specify a lat long you can even specify moving Target uh for example a Freeway Drive and the coordinates will actually change so you can test your app you can trigger different text sizes you can trigger face ID Apple pay you can also simulate a low memory uh situation uh slow animations what would happen in your app so there's lots of things you can uh change and simulate so you can test your app in as realistic of an environment as possible although actually putting it on your phone and testing it uh would probably be the best if you have a device and furthermore inside the simulator it's almost like an actual phone you can add contacts you can uh specify different settings and things like that and it's as real as you can get without having a real device so the preview is really meant for develop element just to see what what it is that you you have uh you can interact it with a little bit in a limited way The Next Step Up would be testing it in the simulator and the best thing would be testing it on an actual device all right so let's go ahead and do that now let's put this little app on an actual device all right so I'm going to plug in my phone to my computer right now and xcode if it's the first time you're doing it it's going to pop up a little menu on your phone saying you know should you trust this computer and obviously you should hit trust and if it's the first time it'll also try to um get your phone ready for development so that usually takes a couple of minutes um because my phone has been used before that stuff is bypassed and now I can select my phone as the destination of where I want to install this app into so I'm going to choose my phone and then I am going to hit run to install the app on my phone but before I do that let me uh open up quick time player and give you a view of my phone and if you didn't know you could do this you just hit this little arrow here and you can select the source of what you want to see as long as your phone is plugged in so let me now run the app on my phone and then you're going to see it pop up on my phone so this is my actual device here it just takes a while the first time if it doesn't work you can hit stop and you can try to do it again so it's saying running oh it's something's happening give it a little while there it goes because I'm running dark mode on my phone uh you can see that it looks a little different notice that it's not completely the same there is a little bit of a mark margin on my actual device right whereas on the simulator it doesn't show that so that's why I'm saying that a testing on an actual device would be the most accurate because it's what your users who download your app would see now the other thing that is cool is that after I hit stop if I show you here my app is still here I can launch this at any time so let me let me just launch this oh sorry this is the simulator what am I doing um there here it is you can see that it's still there right so I can launch it from my phone like I can disconnect my phone and I can launch that app at any time so I could bring it around and show my friends show my family the thing to note though is that in about 7 or 14 days I forget it's either seven or 14 days you'll get a message that said the build has expired and you're going to need to plug in your phone and do this process over again to in reinstall it so it's meant for testing purposes it's not meant for you to keep that app on your phone for perpetuity um if you want to keep it on your phone longer you're going to need to sign up for the Apple developer program which Apple charges a yearly fee for and that allows you to install the apps on your phone on a more permanent basis and you can also uh deploy apps into the App Store as many as you want so that's a yearly fee to Apple and that's how you install apps on your phone to show your friends and family what you're building now we didn't go through the debug and the console area down here that's more of when we are writing more Swift Code and we need to troubleshoot and figure out some stuff for now going through it I think would be overkill for this tutorial and at this point in your Journey but I do recommend you go from here to our beginner 8 day series which I'll link to in the upper right hand corner it's the best starting point to learn app development using Swift UI and Swift and start building your own apps in fact in those eight lessons you will be building your first app and I don't mean an app like this that does nothing I mean an actual card game that does something and uh that's when it would be more prudent for you to actually learn how to debug and troubleshoot your code so that's my xcode tutorial you learned about how to download xcode all of the main areas of xcode how to navigate around it and you learned a little bit about building user interfaces using Swift UI as well if there's anything you feel like was missing please comment below and I'll try my best to record a followup video and if you want to continue what you learned today and continue building on those skills I highly recommend that you check out our 8day beginner Series right over there and lastly if you enjoyed this video I would appreciate it greatly if you shared it with someone you know who's also interested in app development that would help this channel out so much thank you for watching and I'll see you in the next one