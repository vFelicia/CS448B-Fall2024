now you guys are ready to learn about dictionaries and no I'm not talking about those physical dictionaries where you look up the definition of words actually that's a pretty good analogy you know what I'm gonna use that one take a dictionary what does it contain well words and the definition for each of those words when you want to know the definition of a word what do you do you look up the word in the dictionary and you read its definition this is exactly how a dictionary works in Swift when you store data in a Swift dictionary you need to give it an Associated key usually this is just a string but it doesn't have to be in order to access that data you look in the dictionary for that key and then you get back the value or the data these pairs of data and keys are called key value pairs when you compare this to a physical dictionary it's very similar in that example the word would be the key and the definition would be the value or data another analogy would be a coat check or a drycleaning service you drop off your jacket this is your data and the person gives you back a ticket that ticket is the key later and when you give the ticket back you get your jacket or your clothing back this is exactly how a swift dictionary works now let's jump into a playground and see how the Swift syntax for a dictionary looks like so here we've got a brandnew playground and all I did was write a few comments here for the things that we are going to cover how to do with the dictionary first things first how to declare a dictionary in Swift so similar to another we are first going to declare a variable like that and we are going to assign it a dictionary just like an array you start with two square brackets like that and then inside all of your key value pairs are separated by a comma so right now our dictionary will contain two key value pairs because I have this one comma that is going to separate those two key value pairs on the lefthand side of the comma I am going to put my first key so as I said keys are usually strings but they don't have to be so I'm just to have my first key be the string key and then you use like that and on the right hand side of the colon you put the value for that key and let's just put data like that and this part this represents my first key value pair all right the key and the value is separated by this colon right here okay and this comma is going to separate my key value pairs so here I'm just gonna put a second one and this key might be something like ABC I'm just making things up and I don't know let's just put value this time so my dictionary now contains two key value pairs the first key value pair has this key and this data and the second key value pair has this key and this data right here of course I can start my dictionary off with as many key value pairs as I want in fact I could even do it like that and just have a single key value pair to start off by dictionary or I could put more now if you wanted to declare an empty dictionary let's try that I'm gonna declare a new variable here and let's just call it empty dictionary and in order to do that you start with the square brackets again but instead of putting key value pairs inside we are going to put the data types of the key and value so if we kind of take this first dictionary as an example my key data type would be a string and then I would put colon to separate the key and the value and the data type for my value is also a string like that and then outside of those angle brackets I would put these two round brackets to create a new dictionary object that has the data type of string for the keys and has a data type of also string for the values when I declare my dictionary like this right having strings for keys and strings for values I cannot put a key value pair into this dictionary where the key might be an integer or that value might be you know boolean or something like that I have to stick to these data types that I have set out here same thing goes for this when I declare a dictionary like this and I start it off with some key value pairs inside it's going to take those data types of this data here and it's just going to assume that my dictionary is going to be a dictionary that contains key value pairs where the keys are strings and the data is also straights as well okay so let's take a look at accessing an item in the dictionary like we said earlier in this video all you have to do is give it the key and it's gonna pass back the data so you put two square brackets beside the name and you're gonna pass in a key so for example let's pass in that and what you get back is data because that is the value for this key that we passed in here and you can kind of see it in the preview here but this is a little misleading because what you get back is not actually the string data what it is is it is an optional string and as you learned in the previous lesson an optional may contain a value or it may just contain nil so why does accessing your dictionary with a key return an optional well the reason is because we don't know if that key exists in the dictionary right what if I try to pass in a key that is like this for example you can see in the preview that it's nil and that is because this key actually does not exist in the dictionary and so that's why when you pass in a key into your dictionary with the intention to get back a value it's gonna give you back an optional right so that optional could be an actual value or it could just be nil so when we pass in key it's gonna pass us back an optional string and if we want to let's say print that value out Xcode is going to warn us that we're trying to print out an optional it could be nil and as you learned in the previous lesson we have to unwrap that optional to get the value and so I can put exclamation mark like that and unwrap the optional to get the data out and just print it out you can see that it printed out our value right there in the console but the safer way would be actually to check it first because for example if I passed in the key that doesn't exist and it returns an optional and I force unwrap it with this exclamation mark here and I try to print that out I'm going to be printing out nil which is going to cause a crash so let's try that out if I pass in a key that doesn't exist it's gonna pass back an optional and then I'm going to just try to unwrap it to get the value but there is no value and I'm trying to print out nil and then you can see this error message kind of makes sense unexpectedly found nil while unwrapping an optional value because that's exactly what we did when you call this part of the code you pass in this key it's going to return back an optional and then this exclamation mark unwraps that optional to try to get the value and we found nil right and we're trying to print nil which doesn't work you can't do that so the safer way to do things would actually be to use an if statement like you learned in module one so you could do something like this you can say if my dictionary is not equal nil then I want to print out my dictionary and I can force unwrap it here because this code will only execute if the value for this key exists all right this is what we're checking with this if statement right here so as you can see nothing gets printed out into the console but if I change this key to something that actually exists let's just change this one first like that then you can see that it executes to the line in here and prints out that value and actually I think we have covered this next point checking for an item in the dictionary so I'm going to cut this code and paste it down here and under this comment and up here I am just going to leave it like that okay and let us go down to here adding an item to the dictionary well to add an item you can simply use the square brackets beside the dictionary name again and you can just type in the key that you want to add let's say this is my new key and then you can assign to that key a piece of data so let's just call this some more data like that so now you can print out just to show you that this works I'm just going to pass in new key and unwrap it there you can see some more data and actually if I don't force and wrap it you can see down here it said that it's an optional you know that is wrapping up that string right there okay so updating items in the dictionary I can go my dictionary and let's say I wanted to update the value for this key here I can see my dictionary key and I just assign it something else just like call it new data like that and let's print that out so you can see okay and removing items from the dictionary so let's say I wanted to remove the data for this key you can do my dictionary key and then all you need to do is assign it nil that and that is going to get rid of the data for this key I wanted to take a moment to discuss the differences between arrays and dictionaries and when you would use each of them I'm going to use three different criteria ordering finding items and the purpose so the first criteria is ordering when you store your collection of data if the ordering matters that you definitely want to use an array this is because the array is arranged in a series of slots each with an index number so it's perfect for data that needs to maintain a specific sequence this is different from a swift dictionary where there really is no concept of ordering you're just putting all of your key value pairs inside of it and then you pass in the key to get the data back the second criteria is finding items in that collection if you need to access specific items out of your collection of data a dictionary is intended to help you with that give it a key and out pops the data you can still do this with an array but it's not as efficient because it needs to go through each slot and look for the item that you want now the last thing to consider is your intention or purpose when you need to store a collection of data I would default to just using a raise here for general purpose use of storing collections of data a dictionary is more specialized for the purpose of storing data with the intention of looking up a specific piece of data later on for example you just retrieved a bunch of employees from the database well put them in an array even if you don't care about the ordering however let's say that my app is a photo gallery up and it displays tons of images if the user visits the same screen several times I wouldn't want to download the same image data many times what can I do well each time you download an image you can actually store it in a dictionary with the key being the image name and the data obviously being the image data then the next time you're going to download an image before you download it check the dictionary first by passing it the image name as the key and see if you've already downloaded it before if you have then you're gonna get that image data back and then you can just display that image without having to download it again this is a great scenario to use a dictionary my last thought for you guys is in a race like a photo album where you start from page one and you kind of flip through it and get to the end you can also go to a specific page number in a photo album a swift dictionary however is like a physical dictionary where you look at words to find their definition it's not usually a book you want to read front to back so in this lesson you'll learn about dictionaries you'll learn how to declare them how to put key value pairs into them how to access that data how to remove it you also learned about when to use arrays versus dictionaries to get more practice with dictionaries I highly recommend that you check out the worksheet below and if you want to read the official documentation from the Apple Swift language guide I'm going to link to that below as well now that you've learned about to collection types you are wellequipped to keep track of collections of data in the next lesson you're going to learn how you can go through each item in your array or dictionary and process it and do something with that piece of data this is useful in so many ways and I'm going to explain it all in the next video if you like this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a single video make sure you tap on that Bell icon as well thanks for watching and I'll see you guys in the next lesson