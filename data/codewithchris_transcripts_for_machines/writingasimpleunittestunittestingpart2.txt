in this video you will learn how to write a simple unit test let's get started hey everyone my name is michaela caron i am a fulltime ios developer and freelancer let's get started learning unit testing the first thing we are going to do is create a new xcode project so let's go to file new project and then we are going to select ios and then app and we are going to call this um unit testing cwc unit testing put a team if you have one this is your organization identifier like always and we're so it does not matter if we use swift ui or storyboard for this project because unit testing is about testing how your code works not about the user interface so the ui and that's what swift ui and storyboard is all about so it actually doesn't matter which one we click we'll go swift ui for this project keep it in swift and then if you make a brand new project we are going to include tests from the beginning so here when we do click on next you'll see we create the test target just automatically as opposed to when we have a new project or as opposed to when we have an existing project we have to add them in a different way for this example we'll just do a new project in the next lesson we'll use a project that does not have unit tests that's already been created yep we can put that okay we will create our new project on the desktop click create okay here is our brand new project that we just created let's go ahead and run the project so i'll click command r and we will run and just build to the simulator so i just have iphone 13. okay so we've run the project and we see hello world just text on the screen like we should so let's go ahead and stop it for right now and then we see over here we have two different folders so we have co2 cwc unit testing tests and then ui tests and then cwc unit testing is the name of the project so these folders tests and ui tests were added automatically when we went and checked the add include tests part it automatically adds both unit testing and ui testing which is not something we are going to go through but it automatically adds both for us so let's just minimize that because we're not going to look at it for this example and just open up this file so we see first cwc unit testing test in an inherits from xc test case so this is the class that is used for unit testing for like ios development when we go in here the first thing we see is import xc test because that's what's used for all unit testing on ios that's the library that we need and we see this at testable import cwc unit testing so what this is is our project so when we look at our project like test case or sorry our project target it is called cwc unit testing so we have to include all of our project code up here because it's actually not part of our test test target so if we go to the project settings our different targets so we have our actual app target so that's what you're used to when you build ios apps we have a testing target and a ui testing target so these are actually completely separate like from our application and you can see it's telling us like what our actual like host what our actual app is so think of it like they're in completely different scopes so that's why we have to import our own project into our tests so you get the spoiler plate code and this is just an example of how to set up our project how to tear down it an example of what a test would look like which is completely blank and it just has comments and then testing performance so for this example we're not going to go through performance testing so we're going to just go ahead and delete that let's look at these setup and tear down methods so they tell you what they do so we put setup code here but what is setup code it's code that we want to run before every single unit test and then tear down is code that we want to run after every single unit test because with unit testing you want your environment to always be the exact same for every single test that you run so these two methods are called for every like different kind of test that we have so if we go to func test example two or one two oops and it doesn't have to throw but it can and we do this and if we click this little diamond right here this will run all of the unit tests for this project but if we also go over to the left here the one two three four five six six um button from the left is the test navigator it's the little diamond one we expand this and we can see our ui test and our unit test so let's collapse that one for right now and you can see we have two tests in this class and that's what this one is we see test example and test example two and you can see they also have little diamonds next to them so this is how we run tests we could run it by clicking the play button here we could click the play button right there or even just click this play button and it'll run the entire class or if we also go to as a product yeah if you go to product and click test which is the example or which is the shortcut command u that will run our entire test suite which would include our uh ui tests so we kind of don't want to do that at the moment because we don't want these ones to run we could just go actually that's what i am going to do let's go and comment them out for right now so you can see there's some extra stuff that ui tests have that a unit test doesn't let's comment that out and go down to this one comment that one out close that close that one and okay so now if we go back to our test target these exist but you can see now they don't have any tests in them because we just commented commented all of them out so now when we click command u you can see now it's testing so we are about to run our tests we can bring up the console at the bottom and on my computer wait for them to run here we go test succeeded so you saw this popup that said test succeeded and you can see in the console it says all tests started and then i'll test pass we don't have assertions on these and you can see they passed because we have check marks next to our two tests now and we can see on the left that all of our tests have passed but they pass because we're not doing anything so they just passed like automatically let's go back and look at set up and tear down because there are a couple methods as well set up is it going to do it there we go so if you type setup and just hit enter sometimes you'll get this override class function and that is not what we want we want just the override func setup because there's actually a couple setup methods there is setup and then there's setup setup with air and then there's also an async setup so you use whichever one you need depending on what test that you're running if your code does something asynchronously or you need to asynchronously set something up but what we are going to do is just use the normal setup one without like setup with error and you can see this one does not throw but this one does so you could do if your setup code basically failed you would be able to throw the air at this point and like your test wouldn't run or you could have them run if you wanted to but we are just going to use setup and teardown and i gotta spell it right terror oh my goodness tear down and be sure see there's two of them make sure you click the one that says provides an opportunity to perform clean up after each test method in a test case as opposed to the one says perform cleanup after a test case ends not after each test method so that would mean test method is one of these like every single test is a test method a function as opposed to the entire test case is your class meaning xc test case so let's go ahead and put those there and let's have our app do something because right now it doesn't do anything but we're not going to do like you're really using swift ui we are just going to make a simple like math calculator program which is what a lot of tutorials show you but they don't actually it doesn't go more in depth than that sometimes but we will do this so you understand the basics of unit testing and then go in like see what it really looks like in a real project so let's first create a new file so i clicked on the folder then clicked command n for a new file and let's make a swift file and be sure we are in our test sorry we are in our project right here when we do this let's call this simple math and hit enter and you can see the target that was selected which i already made to go away is simple math sorry is the project cwc unit testing so we are not in our test target right now okay let's create a new class and we will call it simple math and then what this is going to do is pretty simple we will just have a function called add 10 and all it's going to do is accept a parameter called number that's an integer and then what we are going to return is number plus 10 and that's it and let's also make another one here called funk let's call it bsquare and we will return number times number because that's how you square a number and then actually up here as well we will return an integer so both of these return an integer the first one all it does is add 10 to whatever number we pass into the function and then this one does the same thing but instead of adding 10 we're just multiplying the number by itself so we're squaring it and then returning the number and then i just did this because it doesn't really matter um where if we have an underscore in front of the number you you'll see at the call site the word number doesn't need to be there so when we go to actually test this what do we want to do we want to test our class called simple math so let's make a variable for simple math and it is of type simple math and we want to force unwrap it otherwise it'll have us create like an initializer because this is a a class but that's not how we want to do this we want to initialize it here oops not lowercase s we need a capital s we want to initialize it here when we uh when we start every new test so that will happen here and then the tear down when we end every test we will do simple math is equal to nil because what this does will it will set it equal to nil before or sorry after this test example and then it'll set simple math is equal to a new instance when we run the second test and then it will make it nil after we run the second test so both of our test cases will have the exact same like environment when we run them but we are going to definitely just erase this and rename them so we won't test er whoops funk that was weird funk add 10 works but we can't just run a test like this so you'll see my xcode loads so i just built the project to make my xcode like work you can see when we try to just create a function to like do a unit test it doesn't show anything with just a normal function the function names for unit tests must start with the word test so let's change this to test add 10 works and now it shows up in our navigator and we have this little diamond next to it so when you write unit tests you typically follow a convention called given when then or what is it act asser arrange act assert so let's do given when yeah then or it's also called no it's a range sorry so these mean pretty much the exact same thing they're just different names for how we do this so what we what do we want to do we want to do given so given would be like let answer or let's call it expected is of type integer and let's just for right now set it equal to zero so we want to do when so expected should be equal to not add time we have to do simple math dot add 10 and let's give it a very easy number of 10 so that we know for a fact when you add 10 plus 10 we equal 20. and that needs to be a variable not a constant so what is assert mean assert is saying let's do something or assert is saying what do we expect to happen so we want to xct assert let's say this one that expected is equal to 20. and this means we this should be true this expression for this to pass so we want to assert that this happens so this expression should be true for this test to pass so let's go ahead and run just this test so let's click on the little diamond this time we can see the project building so you see our project run and then we see test succeeded because it worked so this is our project and this is our like unit testing target project they both like kind of come up at the same time because we do run our real project but what we see in the console here is selected tests started that's because we clicked on this test as opposed to clicking like command u it would have said like all tests and we can see xc test that is what we ran this is the class that we were in and then see all the way over here we ran test add 10 works and you could see it started it passed and then this says the whole suite passed meaning this whole suite of tests and then we go back here and says we executed one test and select a test execute a one one test zero with zero failures yeah so basically the test pass and you can see how long it takes for your test to run as well and we have the little check mark here and then that popup that shows up saying that our test passed so that's good but there's also other kinds of asserts that we can use so this is just a normal like whatever expression is in here if this is true this passes if it ends up being false then it fails so if we change that to 21 and run this again we know we add 10 to this number which equals 20 but we are saying expected should equal 21 which we know that won't work so we get a test failed we have an x here because our test did not pass and then there is an x right here because one of the tests in this whole class did not pass and then you see up here that is that is an x as well because the whole suite there is something that's failing and then same thing down here we see something failed and then all this says is xct assert true failed which is kind of not useful sometimes so you can even add another parameter right here so if we put a comma and we add something this is what it will say when our test fails so let's say this should be 20. so if we run our test again and we know this one is going to fail because this should be 20 not 21. it goes it runs we get test failed and then when we actually click on this here now it tells us xct assert true failed this should be 20. so it's really easy to debug and see like what should have happened as opposed to just guessing like it just says failed and you're like well i don't know the reason why it failed but another thing we can do let's first change this back to a passing test there's other asserts that we can do so we can do you could see this actually runs xct assert true so if we do xct there's a lot of different asserts so let's do xct assert true expected equal 20 and this one is pretty much the exact same thing as this one so this this expression is the same as this expression here but an even better one that we can use that like really helps solidify what this does and what we are like trying to accomplish with this test is oops xct assert equal so what we can do is this one is xct assert equal and this takes it really takes two parameters but i added the third of this is again the description so that's the same as this part i think it comes up as if we command click on this and click show quick help it actually says message and it kind of doesn't so maybe not we won't look at that but we look at this we have the first parameter should equal the second parameter because it's literally xct assert equal assert that the first value is equal to the second value and we can have multiple assert statements within a single test so let's go ahead and run this and we should get test pass and there we go we have test succeeded and we can see also that we ran just our single test and let's make a test for the other function that we did so let's test that b square succeeds so let's do given given one then we'll do var expected is equal to zero so we don't really need that integer part there i just kind of put it there and then we want expected is equal to simple math dot b square let's do 4 what is it 4 times 4 is 16 and i have to spell expected right for anything to work and then again we could do an xct assert equal and so make this one shorter and we expect expected should be equal to 16. whoops there we go so it's pretty much the exact same thing uh we run this and then we should see in our console that now we have two tests that are running not just one or no sorry this is just one test running because i only clicked the little button here yep executed one test but if i went to click the class up here or just click the little pl play button at the top of like our whole unit testing suite okay we see that two tests were executed and they all passed so two tests zero failures and i'll test pass that's awesome so what this really helps you do is this is very explicit of add 10 and b square but if somebody for example forgot what square meant and thought that square meant number times 2 and thought that the person who wrote this was just completely wrong when you go to use your code base and merge your code together with others if we ran our test again we will see that one test our add 10 test works but our b square test will fail there we go we see it the popup tells you test failed because not everything passed but we see one of them worked but the other did not and then we see down here it just says xcts are equal failed 8 is not equal to 16. so expected is the 8 and then what we think it should have been is the 16. so that's how you can prevent others from like messing with the code and then you not knowing something happened you can use unit testing in this series we have learned the basics of unit tests we have learned that every unit tests must begin with the word test we have learned about set up and tear down methods and then also about different kinds of asserts so in the next project we will add unit tests to a project that doesn't already have them and write unit tests for more applicable code other than just adding numbers together see you in the next video