hey guys welcome to lesson 5 of how to make iphone apps with no programming experience and in this lesson we are going to start our first Xcode project and build our first app so if you've been following along you should have Xcode 6 installed already and when you open up Xcode you're going to see a welcome dialog like this and we're just going to select this option create a new Xcode project if you don't see this dialog you can go up here to file new and project so it'll do the same thing so we're just going to create a new Xcode project so the first dialog that you see will be one for choosing a template for your new project the first thing you want to do if you don't see any of these templates is make sure that you're in the application section under iOS here on the left hand side and you should see these different templates available to you now we're going to start with the most basic one which is just gives you a single blank view for your project depending on what type of project we wanted to build for example if we wanted to build an app with tabs along the bottom we could choose this template as a starting point likewise if we were building a page based one or a masterdetail type of app these may be better starting points now that's not to say that we can get to these other templates by choosing this one it's just a better starting point you know we could still add a tab bar for our single View application we could still add page based navigation to our single view it just depends which one is the best starting point for your app so we're going to select single view application and we're going to click Next so we're going to go through these settings together and you want to pay attention to some of these settings because it may alter what you see in the next view so for product name that's just what our app is going to be named and I'm just going to type in hello world here so your organization name is something that you you can put anything in here it could be your personal name it could be your company's name and as for your organization identifier it's going to be used in conjunction with your product name to create a unique bundle or app identifier so normally what people put is com dot and then either their name or company name and then it would follow the system where it would be comm dot their company name dot their app name now the next two are important so for the language we're going to be going through Swift so you want to make sure you're selecting Swift for this language here and for devices we're only talking about iPhone at this point so select the iPhone and you'll want to make sure that use core data is unchecked so we're not going to go through that topic today click Next you can save it anywhere I'm going to save it on my desktop you want to make sure before you click create there that this source control checkbox is unchecked as well and source control is a way of storing and managing your code tracking your changes as you progress in your project but we won't be using it today here in this demo and it may be a topic that we cover in the future so I'm just going to click create ok so let's go through some of files in your new project so at the very very top the root node is your project properties so when you click this on the editor area over here you're going to see all of your project configuration settings and we'll be definitely using this area in the future moving on we have the app delegate so the app delegate provides a chance for you to type in some code or logic where you can handle different situations that arise in the lifetime of your application for example if you read some of these here application did enter enter the background or will come back and enter the foreground or to become active or will terminate so it gives you a chance you can write code here to maybe save that data or restore some data or restore the last place the last view of the user was using it gives you a chance to do something at different points in the applications lifetime the second thing is the view controller so we went over this in the Model View controller or MVC design pattern in the last lesson so this view controller manages the view now we get to the main dot storyboard and when you click this your editor area turns into interface builder so now you see the view for your single view application and this is the view controller that manages this view now what is the storyboard so the storyboard manages the flow of your application in a visual manner you see this arrow right here well this arrow represents the starting point or the entry point of your application and right now it's pointing to this view which is managed by this view controller right here it is possible when we build some more complex apps that we will have multiple views and multiple view controllers and this arrow will indicate you know what the starting point is now here are some tips to navigate the storyboard you can doubleclick the area to kind of zoom out or you can right click and you can pick a zoom level you could double click and zoom back in okay moving on we have our image asset library and in here this is where we're going to add image assets to our project and you can literally just create a new image set and drag and drop our assets in here and then we can refer to them by their name that we give it here in our code to access the image asset so we're going to do this in our demo projects in module 2 and lastly we have this launch screen zib and this is another interface builder file and this just represents the the startup screen for our app ok so first thing we're going to do is go back to main dot storyboard and we're going to do our hello world demo application now if you've ever done any other programming education before you may recognize that HelloWorld is kind of the customary first app or first program so that's what we're going to do here iOS style now we're looking at main storyboard and in our editor we see our view here so what we're going to do is visually add a label to the view and just change the text of the label to say hello world and then we're going to run our application first thing you will want to do in the lower right hand corner if you remember this is called the library pane and if you don't see these elements that you know I have here make sure that you're on this tab because there are a couple of different tabs you can be on here and don't worry if it doesn't look like a list because there's another button here to change the view yours could look like this just a grid of grid of elements or a listing of elements so in this search box you can kind of filter through the library and I'm going to type in label and I'm just going to click this and drag it in the center now at this point we can change the text of the label so I'm just going to double click it and I'm going to type in hello world next we're actually going to just run our app and watch it in the simulator so up here in the upper left hand corner make sure that you've selected a simulator so I'm mines on iPhone 6 and I'm just going to hit run I'm going to compile your application and then it's going to launch the iOS simulator okay so it's launching it's loading our app so you'll notice that we see the label in our view but it's kind of not in the center it's off to the side well what happened because we actually had our label in the center here so I'm going to stop the running of our application now if you had trouble running your application or you had some error pop up one thing that I would try is hit the simulator here and then there's an option to reset it it's just to reset all of the content and settings so if you go up to the menu here it's going to ask you are you really sure you want to reset it and you hit reset it's going to reset it to its original default blank slate state and then you can try running it again okay but now let's look at the issue of the label positioning so the reason that the label is offcentered is because iOS uses a system called auto layout to determine where the element should sit and auto layout describes the position of the element based on something called constraints and we're going to take a look at that now so click your label and then down here in the lower right hand corner you're going to see this icon which says align so I'm going to hit that and we're going to add to alignment constraints so I'm going to check that horizontal Center in the container and vertical Center in the container I'm going to click this button add these two constraints okay so once I did that you'll notice that this trigger or this line shows you the constraints for our element which is in the center and you'll notice here in this pane on the left you can open this and you can see that there are two constraints for this label and if you don't see this pane it's this button right here that will open and close that now if I run it again you'll see that the label is actually in the center because it's going to when it displays that label it's going to read those constraints and it's going to based on those constraints vertically and horizontally Center that element and the reason that this is good rather than positioning exactly where we put it the reason why auto layout is good is because it work the same way on any screen right so I can rotate it and it would still be in the center I could have a bigger screen or a smaller screen and based on those constraints or those rules it would still be in the center now that Apple is creating multiple screen sizes it's even more important to use auto layout so in order to rotate your simulator you can actually go here up hardware and you can select rotate left or right or you can just hold down command and press left or right so there you have it congratulations you've created your first simple app in the next lesson we're going to start module 2 and we're going to start looking at creating more complex apps where you'll have to write Swift code