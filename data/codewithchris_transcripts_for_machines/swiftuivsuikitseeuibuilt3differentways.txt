hello and welcome in this first lesson I want to answer the question what is Swift UI but I also want to make sure that you're very clear on how Swift UI compares with UI kit which is how we used to do things and how we used to build user interfaces before Swift UI I'm also going to go over the advantages of Swift UI and also its current limitations don't worry though this video isn't going to be all talk I'll show you practical examples and we'll also get into Xcode 11 and I'll walk you through how to build a demo swift UI project so you can get your feet wet alright let's get started hi my name is Chris and if this is the first time you're here welcome to code with Chris where we teach beginners how to make apps now before we dive in I have a quick question for you when do you find time for learning new things this is especially relevant for me right now because I'm spending a lot of time learning Swift UI and personally for me I find mornings to be best so let me know how you learn best when you find time to do that in the comment section below and if you wouldn't mind on your way down there please give this video a quick like I really really appreciate it it really helps with the YouTube algorithm and getting more eyeballs on this video so I really really appreciate it thank you so much alright with that said let's talk Swift UI to understand Swift UI and fully appreciate how much easier it makes building user interfaces let's compare it to how we used to build user interfaces with UI kit using UI kit we're able to use code to build the UI programmatically but we have to be very literal and precise about exactly what happens for example let's say we wanted to put a text label in the center of the screen here's how that would look if we did it programmatically with UI kit alright so the first thing we're going to do is we're going to create a label element to add to the view so let's add a common here and I'm gonna declare a new constant we'll just call it label and we're gonna create a new UI label element and assign it to this constant next we are going to set the text to hello and then we're also going to set this property called translates our oversizing mask into constraints to false and if you're not sure what the auto resizing mask is it's something from an old layout system before Auto layout that worked on something called struts and Springs where you describe which sides or edges the element should hug and how it should compact and expand depending on how much space there was and when auto layout was introduced we then we were able to specify the rules which we call constraints on how to size and position things and so what it would do it it would try to change that Auto resize a mask and translate it into Auto layout constraints if we don't set this to false it's going to try to create by default these constraints for us which will interfere with the exact positioning and sizing that we want to achieve so we have to remember to set this to false okay so what we also have to do is remember to add this label to the actual view because if we don't the label is actually not visible and it's not in the view hierarchy so we're gonna say V dot add a sub view and we're gonna add the label and now the label is on the view and there is no positioning for it yet so it might not even be visible so here we got to create some constraints which is going to describe how to position this label inside of that view so we're gonna Center it on the screen I'm going to create two constraints I'm gonna just create this first one and I'm going to assign it to a constant called center X all right so when you're specifying a constraint you're basically relating two things together so we're going to relate our label to the view and we're going to make them both have equal center X's and that is basically centering it horizontally and so we want the label to be in the middle of the view so the first item is label the attribute that we want to define this constraint for is the center X and that's basically the center point of the element we're going to relate it by equal and to which item we're gonna relate the label to the route view remember so we're gonna specify the view and we are going to relate it to the center X attribute of that view multipliers one and constant is zero and the multiplier and constant just lets us exactly what they mean to specify either a slight offset with the constant or a multiple with the multiplier right there okay so now we've got to do the same thing but for the yaxis and this is going to Center it vertically rather than just typing all of that out again I'm just gonna copy and paste this guy and just change Center X the center Y so now we're relating whoops moving too fast there now we're still relating the label right to the view except we're making both of them have the same center Y and then lastly don't forget to add these two constraints to the view and this is one distinction that also a lot of beginners have trouble with is that let me just finish this before I explain it so I'm going to add the center X and center Y constraints to the view now the thing that confuses beginners sometimes is that in order to position the label you actually have to add the constraints to its parent container which is the view because the the label is inside of the view right however if you're specifying sizing constraints for the label then you're going to be adding those constraints to the actual element so you would add it to the label positioning ones go in the parent container whereas sizing ones go on the actual element so that's one distinction that you have to do otherwise it's not going to work so let me just run this and you can take a look at what we get so we did all of that typing just to put a Hello label in the center of the screen and the other thing is that the order of your code statements here actually matter because for example in this line of code we added the label into the view but if we took this line out let's say we forgot to add it all together this would crash because you're trying to relate to items like the view in the label where one of the elements is actually not in the view so you're not able to draw that relationship right also if you had remembered to add the label to the view but you added it down here again it would crash because this line of code right is actually applying the constraints and because the Train says looking for the label but the label isn't in the view so you actually have to make sure that the label is in the view up here before you try to you know add any sort of positioning constraints for that element so these are all things that can actually go wrong so that's programmatic UI and UI kit but that's not the only way you can build user interfaces with UI kit you can also use interface builder and storyboards and here's how that would look like so to achieve the label in the center of the screen using storyboards what we're going to first do is open up the object library up here and then we're going to search for a label and then we're going to drag it and drop it into our view right there so we've got our label on the screen however it's not positioned at all we have to add some constraints to it so make sure that you have your label highlighted and then open up this add constraints menu and actually we want this alignment constraints menu beside it instead you're going to want to check off horizontally and vertically in container and then say add these two constraints and just like that we've got the label in the center of the screen the last thing to do is to change its text so highlight the label here in the document outline and then let's type hello and let's run our app and then we're gonna see it in the simulator with the label in the center of the screen now that might have seemed easier and faster versus programmatic UI but using storyboards brings about its own set of challenges I have an entire video comparing the programmatic UI approach with the storyboards approach right there however whether you're using storyboards or not using UI kit requires you to be very explicit and precise about exactly what you want the layout system to do this is known as building your UI imperative Li this is very different from Swift UI which is a declarative framework now let's take a look at what that means with Swift UI you don't have to specify every single little detail because the system handles a lot of that grunt work for you you simply have to describe to the layout system what you want and it'll go and do that for you in the WWDC video describing and introducing swift UI they used a great analogy that I still use today to describe the difference between Swift UI and UI kit UI kit is like you talking to a friend through the phone and giving him very precise and explicit instructions about how to make an avocado toast properly whereas with UI is like you telling an avocado toast expert what you would like and then just having the expert go and do it for you with Swift UI you don't need to worry about every single little detail such as whether or not the button is added to the view let's use our previous example about putting the label in the center of the screen and let's see how much easier it is to do with Swift UI now here what I've got is a default just outofthebox swift UI project and what we want to do is put a label on the center of the screen however the default project that you can start with is already a label in the center of the screen so before we dive into how we create that let me just give you a quick walkthrough of how you create user interfaces inside Swift UI basically you're writing code on the left hand side here and on the right hand side you get a preview now you can also launch it in the simulator to see what your UI looks like but this preview is pretty handy so let's dive into the code here this text element is all you need to write in order to have this label in the center of the screen and just to make it the same as you know all of our other demos we're just gonna have hello so there you see it if I run the project you're gonna see that we get the same thing with our previous two demos using storyboards with like it and also programmatic UI with you idea see now notice that I didn't have to add any constraints I didn't have to tell the system to put the text in the middle of the screen all I indicated here was that I wanted a label that said hello and the layout system automatically made some assumptions of where I wanted to position it I could manually add some rules or specify where I wanted to position and maybe I want to add margin here or that side you know some padding or I wanted to push it all the way to the top of the screen but because I didn't specify any of that stuff it made an assumption that I wanted it in the center of the screen which is logical to me and that's what it did you see what a difference that is compared to UI kid so which is better and why would we want to use Swift UI well let's just get one thing straight right off the bat apple says Swift UI is the future of iOS app development and that's that you either get on the train or you don't same thing happened with Objective C and Swift now you might argue that Objective C can still be used today but you have to agree with me when I say the large majority of people have either started with Swift or they converted to Swift and they love it and I predict the same thing is going to happen with Swift UI and UI kit even though it might take a couple of years luckily for us and for future iOS developers Swift UI does seem like the way to go and I'm excited to go allin however there are a couple of things that are preventing me from doing that right now though number one Swift UI apps can only be run on iOS 13 and above now that is kind of a problem now because not everybody is on iOS 13 however as time goes on and they release iOS 14 15 16 everyone's going to be upgrading and this is going to be a nonissue another problem that is going to be solved by time as well is that right now so if you eye doesn't come with as many outofthebox controls as we're used to with UI kit a lot of the major and useful and common ones are there right now but there are also a lot of thirdparty controls and libraries for you Ike that right now just aren't available in Swift UI this makes it hard to go all in a hundred percent swift UI but luckily we don't have to because you can actually use UI kit controls on top of a swift UI app so I think for now that's the way to go so if UI is still in its infancy it's going to take a few years for it to mature but there's no time like the present to get a head start and start learning it now now let's dive into Xcode 11 and see how you can start building a swift UI app alright now let's start a brand new Xcode 11 project so I can walk you through how to start a new swift wide project as well as some of the different parts of the Xcode user interface that has to do with working in Swift UI alright so let's go ahead and create a new Xcode project we're going to choose a single View application and what's gonna matter is what you select down here for user interface make sure it's set to Swift UI if that's what you want to work with or set the storyboard if you want to work with UI kit all right so let's indicate that this is just a test I'm just gonna call this Swift UI test you can put anything for these other properties make sure that the language is set to Swift leave these unchecked and go ahead and click Next and let's just save it so it's going to create that project there and before we dive into this content view that Swift let's take a look at what we have on the left hand side now if you're coming from working with UI kit and storyboards and stuff like that in Xcode 10 or 9 then you will notice that instead of just an app delegate we also have a scene delegate now essentially the responsibilities that the app delegate was taking care of has been split into both an app delegate and a scene delegate and the reason for that is because with iOS 13 and now the iPads getting bigger there is multiple windows support and that means that potentially your app could be running multiple instances of itself simultaneously so the app delegate is still in charge of the overall app lifecycle however the scene delegate handles all of these different windows potentially you know two different those housing your app simultaneously next up you'll notice that we have much of the same elements that other files I mean you have the asset library you have the launch screen you have the info.plist but we don't have a view controller anymore what we have is a content view and this file is basically where you're going to specify your user interface for a single screen in your app so let's take a look at the code inside of this content view you can see that you kind of have two different struts here right and then on the righthand side you should see this preview pane if you don't let me just first go through how you hide and show this preview pane because it's actually very useful so you might have something that looks like this where it's just the code editor but if you click this editor options button here you're gonna see that you can select canvas so this is your preview canvas it actually gives you a preview of what your user interface looks like on this side so if you click resume what it's going to do behind the scenes is it's going to launch a simulator it's going to compile that code that you have and it's going to show you what that preview is now what's really cool is that you can change this preview to show you what you need by default you know you get this device frame here and yet your UI here but what's actually happening is this block of code here called content view previews this code is what is generating the preview here on the righthand side it's just for development and debugging purposes this code that I have highlighted here doesn't affect your production app it doesn't affect the functionality of your app it's just for generating previews here on the righthand side if you wanted to see two of these guys you could create another instance of the content view and put it in a vertical stack or something like that so you can have one on top of each other or you can change the device frame maybe you want to see it in an iPhone 6 for some reason or you want to see a landscape orientation you can add all sorts of model fires or maybe you want to zoom in and you only want to look at a specific element on your screen you could do that as well so this chunk of code right here is to modify your preview on the right hand side this struct here this is your actual user interface code and you can see here that this class is called or struct is called content view and it returns a view and then you have a body property that returns the sum of you now some theme just means that it could be any type of view because it doesn't know what your root view is going to be but it at the end of the day it's still going to be a subclass of view and then in here you have your various user interface elements now right here we only have a text label but what you can actually do is open up the object library and you can as long as you're in this tab right here because there is a couple of different ones as long as you're on this one you can actually drag the different elements as code into here now we're going to get into different elements and different layout containers in the next lesson so for now we're not going to dive too deeply into these different elements because I just want to give you an overall feel of how the user interface looks like for Xcode 11 and Swift UI now you can see here that as soon as I change something it said that the automatic preview updating is paused so it's not reflecting automatically what I type here all right when it maybe I make a change there if it's not updating here on the right hand side all you need to do is click resume and that's going to recompile the code and then you're going to get an updated preview on the righthand side the other thing you can do is also preview on your device that's what this button down here is for or you can do something called a live preview if you click that this is going to be constantly monitoring the changes that you make on this side so that when you make a change here it slows down a little bit but it texture changes and it shows you the live changes here on the preview pane without you having to go hit resume all the time you can see here it takes a while for it to happen so you might not want to have that on all the time especially if you're into a long session of coding before you actually want to generate another preview or update the preview now there are some other interesting things you can do here on the righthand side of the screen so you can actually modify things from this side it's not just editing the code on the lefthand side for example if I hold down command and I click this let's just get out of live preview first I can stop that if I hold down command and I click this guy you can see that I can do different things with it and we'll get into what these different elements are but I just want you to know that you can interact with the preview pane in order to modify the code on this side so that's pretty cool you can still build your UI visually at least a bit of it and then these modifiers here see I've selected that text element and I can change the font I can change alignment and I can change padding and when I change these things in this sort of visual way it actually changes the code right so you have an option of how you want to edit and build your UI so you know I can specify numbers here and you can see here it's changing the code now if you know if you're very wellversed with the Swift UI code and syntax and you've been working with it a long time obviously it's going to be a lot faster for you just to type it all out but you know it's it's really cool to be able to do it visually as well so that you can see how it affects the code and like you saw before you can actually drag these elements straight into the code like this so I think it's really really awesome so I hope that gave you a good feel for Xcode 11 working on a swift UI project and where all of the different things are if you have time I'd highly recommend you to fire up Xcode yourself start a brand new at swifty I project just like we've done here and just fiddle around in the next lesson I'm going to introduce you to a few more swift UI elements so we can start building some cool layouts if you don't want to miss the next video make sure you're subscribed to the channel and don't forget to click that Bell notification icon so you're going to get notified when the next lesson drops thanks for watching and I'll see you in the next lesson