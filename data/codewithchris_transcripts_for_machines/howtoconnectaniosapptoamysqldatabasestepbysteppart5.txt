hello this here wasn't to another episode of the MySQL series in this lesson we're going to start building our iOS app to connect to or rather to hit this service that we built in the previous lesson to grab this JSON data and then parse it so that we can display it inside the app alright so we're going to get started we're going to jump right into Xcode here and I'm starting a new project make sure you're looking at i/o s let's choose single View application and I'm going to call this MySQL a demo app and you can copy my settings here the important one to note really is this one make sure that you're selecting Swift devices iPhone and I don't have any of that checked on I'm just going to save it on the desktop there and the first thing we are going to do we're not even going to touch the storyboard right now we'll leave the user interface to the next lesson but right now I just want to work on parsing the JSON data that we download from this service so before we dive into any code the first thing we need to do is take a look at this diagram about how this app is going to be structured and I don't even really want to call it an app because it's more of a like a demo so in the middle there we have the view controller and that's the default view controller that comes with our single view application and we have a view controller Swift file to represent that class so this view controller is going to be displaying a table view of our locations and we only have two locations the Apple headquarters and the Google headquarters but there's nothing to stop you from adding more to your database anyways it's going to be a table view that's going to show two rows when you tap on one of those rows you're going to go off to a map view so we have another detail view controller or map view controller just a second view controller which is going to display the map and the selected location designated by a pin on the map now in order to get the data from our PHP web service we're not going to have the view controller directly hit that service and download the data we're going to have another class and that's going to be our home model now this class is going to be in charge of actually making the call to the web service downloading the data parsing the JSON data and then returning to the view controller a list of locations for to display in the table view and the last piece of the puzzle is that we need some sort of data structure or class to represent each location so we're going to create a location class that represents a single location it's going to have a name address latitude and longitude and furthermore the home model when it parses that data it's going to be creating those location objects it's going to create an array of those objects and it's going to pass that whole entire right back to the view controller as you can see in this diagram here and then furthermore when the user taps on the table view and selects the location the view controller is going to pass the selected location object to the map view controller and it's going to take that and read the latitude and longitude properties and display it okay with that said let's dive back into Xcode and let's get started so the first thing I'm going to do here is I'm going to create a couple of different classes let's create our so under iOS choose cocoa touch class we're going to create our home model class first so let's call it home model I'm going to be a subclass of nsobject and the language is swift and create that right there and we're also going to create our location class but actually now that I'm thinking about it it doesn't need to be a class it can simply be a struct and if you don't know what it is let me try and think of a good example for this but technically speaking the class is a reference type and struct is a value type now this probably warns its own video to explain the difference between the two but if we're talking about the scenario in our app here so take for instance we were talking about how the home model would create a bunch of location objects so let's say location was a class the home model would create a whole bunch of location objects and it would pass that array of objects to the view controller now you can kind of think about this as sort of a handoff so the home models handing off the the array of location objects to the view controllers so even though the home model has a reference to the list of location objects and then once it passes it to the view controller the view controller also has a reference to that array of location objects it's the same set of location objects so if you change something in one of the location objects it's going to be reflected in both the home model and the view controller because they're both referencing the same list of location objects however if location was not a class instead if it was a struct and it's a value type when the whole model passes that array of location struct to the view controller it's going to get copied instead so now the home model has its own list or a copy of locations and the view controller also has its own copy so if the view controller modifies one of the locations in that list of location structs it's not going to affect the copy that the home model has so that's kind of the difference now which one you use obviously is going to depend on how it's going to be used in your application if making copies like that doesn't matter and it's not going to matter for us because we're merely we're merely displaying this data we we aren't interested in modifying it and then passing it around between different view controllers and such the copies are fine for us so we're going to use structs which turns out is a more lightweight way to represent that data anyways so like I said this probably warrants it's own video in itself where I can demonstrate a live example in code for you guys but for now I hope that kind of makes sense so when we create a struct we don't choose cocoa touch class we're just going to choose a swift file so I'm going to call this location and it's going to create a location dot Swift here and it's going to be an empty swift file and instead of the keyword class we're going to use struct let me use location you still have that set of curly brackets and then here we're going to declare some of those properties so name I'm going to set it to an empty string what do we have we have address we have a latitude and we have longitude okay so that's pretty much all we need for that let's jump back into the home model here because the data is going to be downloaded asynchronously we're going to need to have a way to contact the view controller back when it's finished downloading okay so we're going to use delegates and protocols to do that first let's create this function to get items the view controller is going to be calling this function so in this function we are going to hit the web service URL download two JSON data parse it out into location strokes notify the view controller and pass the data back so those are kind of the highlevel steps that we're going to take alright so actually let's not worry about the protocol and delegate stuff now let's just focus on this stuff in order like this it's going to make it a little easier to understand so first let's just let's declare our web service URL so let service URL equals and this is simply going to be our iOS quiz comm slash service dot PHP and then next we are going to use a URL session class to download the data so let session actually we need to create a URL first a URL object there is a URL class and there is an initializer that just takes a string this guy right here so we're going to initialize this URL with this string right here that and if you notice let me do that again if you notice that this initializer returns an optional URL type so potentially it could return nil okay so we're going to need to check against that so if let your l equals URL so if it comes into here then that means that the URL object is not nil the next thing we're going to do is create a URL session so let's put that into a constant named session and the class's URL session use this one configuration and we can use the default configuration if you just press dot it's going to autocomplete is going to show you the options that you're going to select from select default and then we are going to create a task so we are going to say create a constant that we're going to assign the task into and you create the data task off of the session is created so it a task there's a couple ones you could create we're going to create this one with passing in the URL with a completion handler which means that after this task has completed we're going to run that closure and closure is just a block of code so the URL is going to be this guy right here so just put that into there as a parameter and the completion handler it has three parameters so data response an error and notice that these are all optional parameters meaning that they all could be nil so I'm just going to put that as data response and error first thing to do in this closure is check the error parameter so if error is not equal nil sorry if if there is no error meaning if the error is no then that means it's exceeded we got some data back or rather not going to get data back but it's just succeeded because the data because we know else error occurred okay and I like to do this step before I finish typing the code for the closure because I often forget this creating the task like this is not sufficient enough to start the task you actually have to manually give the command task dot resume and that's going to start running this data task okay so I like to put that there first because I often forget it and then I run the app and nothing happens and I wonder why nothing happened start the task and then in here we're going to take that data and we're going to parse it out turn it into the location struts now I don't want to do that in this code right here as if this closure is already getting pretty huge so I'm actually going to take that out and put it into another function down here and I'm going to call it parse JSON and it's going to accept the data right here so going to force unwrap that because this is an optional that could be nil and obviously this is an error right now because its whole model does not have any parse JSON function so we're going to go down here and we're going to treat it first of all let me write this comment call the parse JSON function on the data okay so let's here's this line because that's what we're doing here and you got to be careful when you're writing this code because this function is getting pretty long you see that you want to make sure you declare your function in the right place so it's got to be after this function right after this bracket here but it's got to be within the whole model class so it's got to be before this closing brace meaning it's got to be right here might seem a little confusing to you but if you've done this if you just continue working at it and continue building apps and writing code then it should be natural to you to understand that and furthermore as you're typing out your code make sure that your brackets kind of line up so it's easy to read as well so you can see here that proper indentation goes a long ways here can draw a straight line down and I can know that this bracket is for closing that guy out and if for example this is same in if I draw a straight line down I can see that this closing bracket is too close this is statement here so that goes a long way to troubleshooting your code later on okay so this parse JSON function it's going to need a parameter right because we are passing data so I'm just going to call it data and it's going to be of type data and it still didn't error out because if I do it like this it's going to expect a label so let me show you what that means see it's going to have to look like that you see that extra label there that's because of this guy right here you don't understand the difference between labels and arguments in your functions review the learn Swift for beginners video functions I forget exactly which lesson that is it might be lesson 9 I'm guessing but I'm going to find out I'm going to link to that lesson in the description below so that you can go review that now the way if you don't want to have a label there you can actually use the underscore and kind of tell Xcode that we don't need a label ok so inside this function here we are going to me do some line breaks to move this code up so it's easier to see for you guys in here we're going to parse parse the data into location structs so in this parse JSON function we're basically going to take the data that's passed in and we're going to use this JSON serialization class there is a type method called JSON object with you pass it in the data and then you have a couple of options and it returns any because it doesn't know you know if your JSON is an array or a dictionary or anything like that we know it the JSON that's returned from our service is an array of dictionaries we know that but obviously when they wrote this function they didn't know what our JSON would look like so it returns any we're going to need to cast that to an array and notice this keyword throws so if during this operation of converting the data to this JSON array if there's some sort of error this function is going to throw an error so we have to encapsulate this with a special error block to catch that error if it so happens to throw one I'll show you how to do that well let's select this function here and we're going to pass in data and for options we're not going to specify any options we're just going to specify 2 angle brackets like that to indicate an empty right here alright so we're going to cast this as an array of any and then we are going to assign the results to a a constant called JSON array and remember that throws keyword when there is a throws keyword like that we need to put this try keyword in front of it so this denotes that it's going to try to do this and it kind of indicates also that this function may throw an error so the way we catch the error or the potential error is by putting this code inside a do catch block so this is how you do it use the do keyword you put the statement inside a pair of curly brackets like this and then right underneath you put the catch with its own set of curly brackets and if it comes into this catch block that means there was an error however if there is no error then it's going to continue doing the code inside this do block here so if there are no errors we should have an array of any inside this JSON array what we're going to do next is loop through this JSON array by using a for loop so for each result maybe we'll say JSON result in the JSON array we know from this here that we actually have an array of dictionaries right so there's one dictionary comma followed by the second dictionary right there and inside each dictionary it's a series of key value pairs where the key is a string and the value is of string as well that goes for all of the key value pairs inside our dictionary so inside here we're going to say that let json dictionary equals json result as and we're going to cast this so string string so that is a shorthand format for a dictionary where all of the keys are strings and all of the values are strings as well okay so now we have this json dictionary ready to be used we are going to create a new location object so let lock equals location like that and there is this handy initialization method where it's going to basically set all of the properties that we have name address latitude and longitude to whatever we pass in here so we can do something like this where we can pass in json dictionary and then we specify the key which capital n name right so we can specify that as the key and because when you retrieve a value from a dictionary like this if that key doesn't exist it's going to return nil or nothing and so this actually returns an optional value we're going to have to add an exclamation mark there to force unwrap that optional to get at the string now if it so happens that your dictionary is missing this name key value pair then this code will probably break because we are going to be passing no into this name parameter here so I'm not afraid to do this right here because we we can see our code right here the safer way to do it if if you wanted to you know be extra careful is probably to declare the name up here like a lock name as a constant equals json dictionary with that and then you try to cast it as a string and then you would test if this was nil or not before assigning it to your location however that's a lot of extra code which I'm not going to bother with now but I just wanted to point it out to you so the address the key is address again for some wrap it and the key here is latitude for some map that force unwrap that okay so we have this this location struck down which has all of its properties set to the values of this json dictionary and then when it finishes creating this location we're going to assign it into an array ready to be passed back however we need we need to declare that array to store our locations so let's declare that way up here VAR location array is equal to that I'm going to have to declare it as an empty array that is going to be storing this location struct here and we're going to now append it oops not contents of just going to use append new element and we're going to pass and lock and then what happens is it's going to loop through into the next result in the JSON array and then that's going to do the same thing creating another location and adding it to the location alright so here let me add some comments cast JSON result as a dictionary create a new location and set its properties add it to the array here loop through each result in the JSON array and here this is where parse the data into into a JSON object okay so after this for loop we're going to have this lock array you know filled with those locations so we need to down here pass the location array back to delegate in this case the delegate well we're intending it to be view controller right now we haven't written the code yet but we're going to attend intend that to be delete controller so I'm going to leave this as a to do right now because before we implement that let's go back to review what we've done here so in the whole model class we have this get items function right it is going to hit this service URL it's going to download that JSON data here right and then it's going to pass that data to our parse JSON function and then it's going to parse it and at the end of the day we're going to have this locations array now from the view controller it's going to trigger the get items function to happen all right so let's go ahead and write that code here in view controller we're going to declare up here a new a whole model gonna just create a new whole model object and assign it to that and then in the viewdidload we're going to initiate calling the items download so let's go ahead and call that function home model dot oops not the class home model with the lowercase H because that's what we called this property up here dot get items right so what the view controller gets initiated it's going to call home model get items okay so then that's going to trigger the whole model to do all of this stuff and then down here when it gets down here it needs a way to contact the view controller backend and pass that data back to the view controller this is all happening in the background as synchronously so the way we're going to have the whole model communicate back to the view controller is by using protocols and delegates so why don't we go up here in the whole model and declare a new protocol so you do this actually above the cost declaration you go protocol and you say the common convention is to call it home model delegate start some curly braces like that and we're going to have one function items downloaded and this is going to pass back an array of locations so say locations location it's an array of locations so we're not going to implement this function here right we're just declaring this as a protocol in other words if the view controller is going to be is going to conform to this protocol then it must implement this function the second step to this pattern is inside the whole model class we declare a property var home or for our delegate this delegate is an instance of home model delegate and it's optional so this could be nil so how this works is the view controller over here first declares that it conforms to this home model delegate protocol okay so if it conforms to this protocol it's going to have to set itself as the delegate so view controller is going to assign itself to the delegate property of the whole model and because it's it's saying that it follows this protocol the way we've declared it here anybody who follows this protocol must implement this items downloaded function so let's go down here and declare that items downloaded right this is the protocol function so we're going to leave it as an empty declaration here we're going to jump back to the home model and so now home model merely needs to check has anybody assigned itself into my delegate property if so then let's call the delegates items downloaded implementation so down here that's how we're going to pass the location right back we're going to say delegate dot items downloaded and we're going to pass the location array back to the delegate all right this is good for now we're going to go back to the view controller and in here we're just going to set a breakpoint right there so what's going to happen now when the whole model gets done here it's going to access this delegate property right and the view controller has assigned itself to the whole models delegate property so what happens is the whole model ends up calling the view controllers items downloaded function implementation which happens to be this guy right here so in theory we should get back the location array through this parameter so let's check that we do let's run our application now and what should happen is the whole model get items function is going to get called it's going to go download the JSON here exposed by our service and then we're going to get the items back here actually we forgot one thing and it's telling us right here in the debug console app Transport Security has blocked a clear text HTTP resource load since it is insecure so what it's saying is that it's blocked access to this HTTP resource because it's not HTTP and what we can do about that is in this info.plist we can add an exception to allow these arbitrary loads so if you click this little plus icon it's under app transport security settings okay so I'm going to expand that and then press the plus again to add a key allow arbitrary loads we're going to change that to yes and then run the app again and that's going to allow our app to reach out to this URL but remember what I said in a production setting you should probably get an SSL certificate and secure that URL and use AHPs instead but for this demo I'm not going to go through that so here it's reached our break point in the view controller for items downloaded so I can do something like pio locations and take a look at that parameter that gets passed into this delegate function and you can see here I have two elements inside this locations array you can see here for each location its properties are filled with the appropriate data this is the data that we exposed through this service URL so now we're going to go back and we know this is working that's it for this lesson I just wanted to download the JSON exposed by the service and to parse it now it's ready to be used to display in our user interface if you have any trouble following along with this lesson go ahead and download the source code I'm going to provide a link to the project in the description below the video alright thanks for watching and I'll see you in the next one bye for now you