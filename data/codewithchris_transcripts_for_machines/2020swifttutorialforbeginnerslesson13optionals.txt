hello and welcome to my Swift tutorial for beginners in this video I want to tell you all about optionals which are probably one of the most confusing topics for beginners if you've ever looked at Swift code and come across exclamation marks or question marks then you've come across optionals so let's get started and find out what they're all about so to demonstrate what an optional is let's first take a look at how we've been declaring our variables and constants as you remember whenever we declare a variable we use var and then we use some sort of name let's just say a for this example and up until this point you've always seen me assign something into my variable declarations something like this for whether I declare you know a string I'm always assigning a piece of data into my variable declaration or constant declaration right away now there will be instances when you're building apps that you may not want to assign data to your variable right away you might just want to declare it but if we try to do that let's erase this assignment statement and you erase the data as well and just leave it at that you'll see that Xcode really doesn't like that and that's because it wants to make sure that all of your variables and constants actually are keeping track of some sort of data because that's the purpose of their variable and the constant right well using optionals you can create a situation where you declare a variable or a constant without assigning something to it first in which case it is empty so how do you define emptiness well there's actually a type for empty and it's called nil and it's simply a keyword like that ni L which stands for empty or nothing now if we don't want to assign actual data to our variable first we can assign it mil like that right that means that that variable contains nothing however as you can see we're still having some problems here remember I told you about data types for variables and how variables can only store data of a certain data type and you can explicitly state the data type of that variable and if you don't then it's going to take on the data type of the first piece of data that you assign to it so for example for a if I did that then it would take the data type of my integer and it would determine that a should have the data type of int in the case of nil however there is no data type for empty and so variable a really doesn't have a data type right now and we have to give our variable a data type so in this case if you're going to assign empty into your variable that means you don't want to put any data into it yet we have to explicitly put a data type now let's go ahead and put int right and for this one let's put string like that let's run it as you can see there is still a problem because the int data type doesn't include empty in fact none of the data types include nil as a valid value they nil is not a valid integer and nil is also not a valid string so that's why we can't assign nil to an integer variable and we can't assign nil to a string variable well this is where optionals come in by adding a question mark to the data type like this this becomes an optional integer which means that it could either be an integer or it could be nil same thing goes for this right here the data type is now it's not string it's an optional string which means that it could contain a string object or it might contain no so that's the gist of an optional in order to demonstrate how to work with optionals I'm going to use another example so let me delete this for now and then let me grab a piece of code that I prepared for you let me just run the project here make sure that it runs as you can see here I have a class called Christmas present and this class contains a function called surprise which returns an integer now this integer is going to be a random number from 1 to 10 so why don't we just use this code here let's use let present equals let's create a new Christmas present object using that remember initializer functions right and then we want to activate the surprise so sorry present dot surprise and then we're going to print the output of that function so let's run our code and we get 5 in our console right here so that's the surprise now this data type of this constant right here if I explicitly declare it would be the type of my class right next why don't we make this an optional type by adding the question mark there and then let's say that we put nil in there you can see here that there's an error Xcode says that the value of optional type Christmas present must be unwrapped to refer to the member think of member as function or property must be unwrapped to refer to the function surprise right and the reason for this is because I told you with an optional datatype this constant could contain a Christmas present object or it could contain nil and in this case we do know that it contains nil so what that means is that you have to check that optional constant or off variable to see if it actually contains an object or if it contains nil before you access any of its functions or properties because you can't call a function on empty ray you can't access a property of nil so what we have to do in this case is just double check that the constant present actually contains an object a Christmas present object to be specific before we call the surprise function on it now there are several ways of checking an optional type to see if it's nil before using it and I'll demonstrate some of them let me erase this line first so we are going to check the optional to see if an object exists or if it contains an object let's say it like that so the first thing we can do is basically compare it to nil with an if statement so if present is equal to nil if this is true then it contains no so don't do anything with it else it contains an object right now the reverse of this is also true you can check if present not equal to nil right and if it's not equal to no then it contains an object so why don't we use this statement here because we want to only call the surprised function if there is an object and we don't really need to do anything with it if it is a nil so why don't we erase this one here and let's use this one so it contains an object now call the surprised function now since I have already checked that it contains an object I should be able to just call surprise right you'll notice that X code has helped us put this question mark here because that's what it thinks you want to do but I'm going to erase it because I want to demonstrate something for you see if I try to run this there's an error because you see with an optional variable or an optional constant before you can actually access the value inside that optional data type whether that's a natural object or whether that's nil you have to unwrap that optional now I know that's a weird term but a good analogy or a good metaphor to think about an optional variable is that it's like a Christmas present or it's like a box and you don't know what's inside of it it could actually contain an object or it could be nil but you're never going to know unless you unwrap it first you open that box to see what's inside now right here you you might say hey we've already checked that it's not nil right so this check is kind of like taking that box and just shaking it and listening to it you know when you're a kid trying to find out what's inside your present that's what that's like and all that does is that it tells you if there's something inside I mean if it's nil you're shaking it this it's gonna not gonna sound like anything but if there's a natural object inside and you shake it you'll hear something so this check right here lets you know that there is something inside but that doesn't mean that you can access what's inside right until you unwrap it so let me show you how you can unwrap that variable and get at the object so that you can call the surprise function on it all you have to do to unwrap this optional variable is use the exclamation mark after it and what that does is it tears open that box and you get whatever is inside whether that is the actual Christmas present object or whether that's no so because we've already checked here that it is an object I'm gonna say dot surprise and I can print that right so let's run the statement here actually nothing is going to run do you know why because it's actually nil right so our if statement actually worked so this if statement said if it's not nil right then unwrap it and then call the surprise function on it but since it is nil didn't do anything so why don't we change this statement why don't we actually put a present inside the box so now when we run it we're going to get the random number surprise which is 6 so now you know how optionals work but I mentioned there are a couple of different ways of checking right to see if there's an object inside of your optional so this is one way another way is called optional binding and this is a little bit more advanced than that basic check there and it's kind of another way of writing an if statement so you say if let say actual present equals present then we will print actual present dot surprise so let me explain this statement right here it's still an if statement so you're checking something you're actually checking to see if present this optional variable to see if it's nil or not if it is nil then it's just going to pass through this if statement and not execute the stuff inside however if this optional variable does contain an actual object then it's going to assign it to this constant that you're creating right here called actual present so it's almost like two statements in one the if statement checks to see if it's nil if it's not nil then you're gonna assign the actual object unwrapped into actual present this constant and then you can inside that if they mean you can use actual present as the actual object because what it will do is that it's going to take the unwrap object and assign to actual present okay so you don't have to do any unwrapping here and then you can just call surprise so you'll see six and four four was from here and six was from here all right last thing to show you about optionals is another thing called optional chaining now this is what you saw a little earlier when Xcode tried to put a question mark there so let me show you what that is so you put in a question mark next to the optional variable and then you call your method like that so with optional chaining you can see we don't have any if statements or anything like that but basically what this does is it checks to see if this is going to be nil or if it actually is an object if this is nil nothing happens you're not going to call that function however if there is actually an object in there then it's going to call the next part on that object so in this case it's going to call the surprise function on the actual object because there is an object in that optional so that's what's known as optional chaining so why do we even have optionals and Swift well the reason is because Swift is a type safe language and what this basically means is that Swift forces you the programmer to be very specific about the types of data that you're working with in your code and in the long run this actually helps you because it forces you to think about things thoroughly such as if this variable will need to contain nil or if it's always going to have a value and also how we're restricted to a certain data type for a variable or you're not going to accidentally assign another data type to that variable because it is type safe so I just wanted to revisit some of the ways of declaring our variables and constants with optionals now because there's one thing that I haven't shown you yet and that's what I'm going to show you now so in here line 3 you see kind of the standard way where we declare a variable with the type and then we assigned data to it and you've also seen about how you can add the question mark after the data type to turn that into an optional type and you can assign nil into it well you can also just do this and that's absolutely fine because when you declare an optional data type like this for variable C by default it's going to be nil so you don't actually have to explicitly assign nil to it so when you're declaring optionals I would recommend that you do it this way there is also another type of optional that you can declare and that is using the exclamation mark now I know in this lesson I showed you that putting an exclamation mark is unwrapping that variable or constant to see what's inside the optional right well this is called an unwrapped optional so this allows you to D can store a string or nil but it is already unwrapped so you don't have to unwrap it but it can also store nil C can store a string or nil but it is wrapped so you have to unwrap it in order to see the contents whether it's nil or the actual string so when would you want to use this sort of optional vs. this one well I would say in general you would want to use this one because it provides that sort of type safety checking that Xcode has so when you try to use C in some weird way and you're not checking against nil Xcode is gonna warn you hey this is an optional so you you might have to check for nil before using it you might not be able to call this property or this method on C because it might be empty so it provides you all of those warnings which makes you a better programmer and it makes your code more robust than it'll probably crash less so if you use this instead you can also store nil or values in here so it gives you that flexibility but it's not gonna have any of that type safety checking so Xcode is just going to assume that you know what you're doing it's not gonna warn you that it might be nil because it's already unwrapped right but just know that deke may contain nil so it's it's almost like you are driving without a seat belt maybe that's a bad example but hey because there are places where you might want to use this you know for sure that only initially it may be nil but then after a certain point you can always be sure that there's a value then maybe it's safe to use that and then you can ignore all of that sort of optional binding optional chaining all of those checking for nil you can save all of that code however if it's a variable which may contain the value in the nil and then that value might get erased so it's nil again and it keeps flipping back and forth then maybe having it as this sort of optional is better because then it forces you to remember to do that checking so I just wanted to give one more quick example about these two kinds of optionals using our Christmas present class so why don't we declare a new Christmas present like so let's say present 1 is equal to well let's declare the type of this so we're going to declare a new Christmas present optional like so and we're going to assign it nil right and then we're going to do Christmas present too and we're going to use this and remember we don't actually have to assign it to no but I'm going to write it anyways just so it's very clear to you what's inside these variables right here so if I wanted to let's say do present 1 dot surprise like that let's remove the optional chaining you know we get that sort of type safety checking it's saying that it's an optional it might be nil if it's nil then you can't call surprise on it so make sure you you know you do some sort of checking however if I do present to dot surprise you can see that let me just show you can you type it out you can see when I do that there's no sort of there's no optional chaining there there's no you don't have to unwrap it at all or anything like that it just treats it as an unwrapped optional you can just use it as is and you're not going to get any sort of warning so I'm gonna run this but now you get an actual app crash so you know if this goes unchecked and you launch your app and the user is using it then you're actually getting gonna get an app crash which is really bad whereas if you did it with this sort of optional you know even as you're running it you're gonna get a warning from Xcode forcing you to fix that and address that before actually shipping your app or even allowing you to run your code so like all the other things we're learning about Swift we can go deeper there are additional things that you can learn about optionals but this is your introduction and I just wanted to tell you what they are and a little bit about how to use them practically speaking you'll be using them most of the time like how we covered in this lesson in the future we'll cover more of the complex aspects of optionals also you might be wondering why and when we would use optionals but let me tell you you will definitely come across optionals when you're building apps and when we get to building our apps together now you'll know what they are and how they're used because you've watched this lesson now if you like this video please hit the thumbs up button and hit subscribe if you haven't already all right click on over there for the next lesson and I'll see you there