hi and welcome to lesson 5 you're halfway there now in this lesson and the next two you're going to be learning the basics of the Swift programming language this is the stuff that you're going to need in order to complete the work hard game now I know that this coding part can be intimidating for some people but I really want you to stick with it for at least these three lessons really pay attention and I highly recommend that you open up Xcode on your own computer to type out exactly what I'm showing you on the screen it's really going to help you learn that language structure and those keywords by actually typing it out yourself there's no need to memorize anything and by the end of lesson 10 I guarantee you that you'll be able to write your own Swift code alright so let's get started so go ahead and start Xcode but we're not going to create a brand new Xcode project instead we're going to create a playground so click it get started with a playground or you can go to file new and choose the new playground as well now you're going to get a screen like this go ahead under iOS choose blank and we're going to save this I'm just gonna save it on my desktop now first let me tell you about what a playground is it's not a fullfledged Xcode app project instead it's just a lightweight file where we can try and test out some things and this is perfect for us because we are going to just be running and testing some Swift code now let me give you a quick tour of the playground and the bare essentials that you need so this big part right here where you're writing the code that's the code editor that's where we're going to be testing out all our code across the top we have the status bar now mine says ready it's ready to run and test some code for you it might be spinning and it might be doing something in the background but when it finally says ready then you're able to run your code now on the right hand side right here we don't see anything what I want you to do is just move your cursor to this line of code at Lane 3 oh that's actually one thing I want to mention first if you don't have line numbers go to Xcode preferences go to text editing and enable line numbers so that's one of the common questions that I get I don't know if in this version of Xcode they've turned it on by default but if they haven't now you know so yeah move your cursor down to the line three and you see lines one two and three highlighted in blue with this big blue play icon go ahead and click that what that's going to do is basically run the lines of code up to that point where you click that button so it's going to write run the code lines one two and three you're going to get some sort of output here on this righthand side this is the preview column and yours might look a little different so I don't want you to focus too much on the output on this preview pane depending on what version of Xcode you have it could look different Oh instead what I want you to do is click in this upper right hand corner and hide or show debug area or the console area and in this lesson we're going to be writing Swift code to put things into the console area so I want to focus on the output in the console area here at the bottom rather than the output on the righthand side here in the preview because that could look different for you all right now let's take a look at the code in here before I explain to you what these import VAR keywords are I want to talk about comments now if you've programmed before in another programming language then you'll know what these are but if you're completely brandnew to coding then I think this is a very important part to start off with so let me show you what a comment looks like I'm going to hit enter to start a new line and I'm going to add it to forward slashes like that and then I can type a note for myself this is a comment now mine looks like this grayed out text right here depending on what sort of color scheme you have going on this could be green and could be another color that's not the important part the important part is that anything after these two forward slashes this is not going to be run as code instead it's going to be treated like a note or a remark for yourself too and you can write anything in your comment to remind yourself maybe why you wrote that piece of code or what that piece of code does when you're working with a team of people it's crucial that you comments in your code so that when your teammates see your code they understand your reasoning behind it and they understand why you wrote it now if you're working by yourself that's also important to leave yourself comments because if you leave your project and you come back months later you won't remember why you wrote that code unless you leave yourself comments to remind yourself all right so let's talk about this first line of code where it says import uikit now we're going to talk a lot more about uikit in the future but for now just understand that uikit is a library of code that apple provides for us to build apps with it it contains useful elements like buttons and labels and templates of code that we can use to speed up our app development import is a special keyword to say that we want to use the uikit library in this file now let's talk about line for this VAR s TR equals hello playground in order to understand this we need to first talk about variables in an app there's a lot of data being passed around and you need a way to keep track of it well that's what a variable is for you can think of a variable as kind of like a sticky tab you know those ones where you can write something on it and stick it to a piece of paper to keep track of it well let's take a look at the line of code below which is declaring a new Swift variable and assigning some data to it and see how that compares to using a sticky tab and sticking it on a sheet of paper so var is a special Swift key word that is declaring a new variable using our analogy you can think of this as creating a new sticky tab STR is the name of that Swift variable in the case of our analogy STR is what you write on that sticky tab now hello playground is the piece of data that we want our variable to keep track of in our analogy that would be the sheet of paper that we're intending to stick the sticky tab on and finally the equal sign is us actually assigning that piece of data to that variable in our analogy that would be like sticking the actual sticky tab on the piece of paper now let's go back to our playground and take a look at that line of code again now this line of code makes a lot of sense right we are declaring a new variable STR and we are assigning the piece of data hello playground to that variable now let's consider another scenario using it the same analogy of the sticky tab what if we decide to peel off that sticky tab and stick it on another sheet of paper well we can do the same thing with our variable except that there's just one catch imagine that when you were writing the name on that sticky tab STR you wrote it with a permanent marker and so when you peel off that C tab and stick it on another sheet of paper it's still saying STR on that sheet of paper well we can do the same thing with our variable here we can take our variable STR and we can assign another piece of data to it so let's say another some data and what you can do is use this blue icon here and let's just run our code and you should get some sort of preview there now notice that on line 6 I don't have to write var again because var was just to create that variable in the first place when I use it again I can just refer to it by the name and you might notice that sometimes I say create that's just so that you can understand it a little easier the proper terminology is declaring a variable so now let's write some code to output some of this data into the console area below on line 5 here let's write the keyword print and you might notice that Xcode pops up this little autocomplete menu and that's just X code trying to guess what you're trying to type and presenting you a bunch of options to make your life easier now while you can select some of these options that's not what we're going to do right now I'm going to open up a round bracket and we are going to type STR and if you don't have a closing round bracket you should just type it what we're gonna do now is just bring your cursor down here to line 7 or at the end of your code file and click run and you should see hello playground down there below now notice that it doesn't say some data and that's because we are printing out the contents of STR at line 5 we're going to right after we assigned hello playground so it's showing you the data that STR is pointing to at that point now if we ran another print statement here let's click run you'll see this print out again but this time it says some data which is what we assigned it to it on line six now the next thing we're going to talk about are constants constants are like variables except that once you assign some data to a constant that's it you're not going to be able to assign anything else to the constant now using our analogy that is like super gluing that tab to that sheet of paper there's no way you're gonna get that tab off its bookmark to that sheet of paper and that's the piece of paper it's going to reference forever the syntax for declaring a new constant kind of looks like what we did with a variable except that we use the let keyword instead of the VAR keyword now let's go back to our playground and we'll try it out now let's try declaring a constant at the bottom of our playground let's say let STR equals more data and give it a sec or you might have to run your playground but when you do you're going to get an error and it's basically saying that you cannot use STR again because your variables and constants must have unique names even between two variables or between two constants you have to have unique names so why don't we change Esther to Khan and it has to have unique names just out on a side note because otherwise it would be very very confusing so we have Khan here and let's try modifying metadata for that constant and give it a sec and Xcode is going to tell you that you cannot assign another value to constant or Khan because let is a constant so you can't actually do this but with variables we can write this goes back to us saying that constants once you assign a piece of data to it that's it so now you might be wondering when would you use a constant versus a variable well the general rule of thumb is that you should be using constants whenever you can but how or if you're keeping track of a piece of data that you expect might change then you would use a variable because a constant is a lot safer right once you assign a piece of data you can be guaranteed that that's not going to change on you so in fact even inside of Xcode when you're programming if Xcode notices that you use a variable and you assign a piece of data to it and you never reassign anything else to it and it doesn't change it's going to say hey why don't you change this into a constant you're gonna get that reminder so the general rule of thumb again is to use constants and if you realize that that piece of data needs to change then you can change that constant to a variable by just changing that let keyword to a var keyword all right so let's erase this line here now one other thing I want to point out and you might have noticed this is that all the data that we've been assigning to our constants and variables thus far have just been this text data well there are actually other types of data as well and that brings us to our next topic which is data types the pieces of text that we've been assigning to our variables and constants or called strings now I know that's kind of a strange name but you can think of it as a string of characters right well they're just basically pieces of text next up we have boolean or bool for short and these represent true or false great for pieces of data that can only be one of two values now don't worry we're gonna try all of this out in the playground in just a second but next up we have integers or int for short just like back in math class integers represent the whole numbers in the positive to the negative range including 0 now you might ask where are our decimal numbers don't worry I've got you covered float is what you're looking for and these represent our floating point data in other words our decimals I've just showed you for data types but there are actually more but these four are great to start with I have a swift cheat sheet at the end which are going to show you the rest and also a worksheet for you to practice what we've learned in this lesson now let's go back to our playground and try stuff out alright so now let's try some of those data types that we just talked about let's type the new VAR b equals true and let's print B now let's try running this line of code here and you're going to see true appear down into console below now true is a special keyword that you can use to specify the boolean value we can also change this to false let's run this again and you can see false appears on the console now that we're running more code I want to point your attention to a special feature of the playground and down here in this stop playground button you can actually hold it and choose automatically run when you do that your playground is automatically going to execute the code in your playground automatically as you're typing so you never have to click on that Run button again the only problem is that sometimes playgrounds can be buggy so if you're experiencing a lot of crashing or it's not running your code then you're gonna want to switch back to manually run and you're gonna want to click on that run code button manually so we're gonna leave it automatic for now and see how how it goes if we are experiencing problems that our playground then we're going to set it to manually run instead all right so now let's try out integers let's do var I equals 32 that is going to declare a new integer and assign it 32 we're gonna assign a 0 that's also an integer we're gonna try a signing let's say negative 10 it's also an integer now let's try the last data that we talked about which is float and it's gonna be some sort of decimal number like that now there's one important thing I want to talk to you about and that is that there are actually two types of decimal numbers so the first decimal number data type is float like we talked about but there's also something called double and it's another data type that represents decimals and in fact double is a lot more precise than float that means that a double data type can store a lot more decimal points than a float data type can and when you're working with the Swift programming language double is actually the default of datatype now the thing is it's important to know both float and double because sometimes when you're working with thirdparty code libraries or even some of the libraries inside UIKit some of them expect float data types and some of them expect double datatypes and so it's important to know both and now you know now the next thing i want to talk to you about is the fact that variables and constants can only store one data type now what do I mean by that I'm gonna demonstrate so here we've declared a variable called I and we've assigned it an integer and then we've reassigned it zero and negative ten which are also integers but what if suddenly I decide to assign it some sort of decimal number right we know that decimal numbers is that's not considered an integer so in fact right here the playground is telling us it's erroring out and it's saying that you cannot assign a type of double to your integer variable you just can't do that because the variable I only accepts integers now here's the thing where did we say that variable I can only accept integer data types well the funny thing is that we didn't explicitly say that what happens is that when you declare a variable or constant and you assign a piece of data to it that first piece of data is it's going to take that data type and infer that that's the data type that variable can store and that's the only thing it can store so the very fact that we assigned 32 being an integer to variable I from that point on variable I can only store integer types that is why we cannot we cannot assign this double data type value to I same thing goes for this up here because we assigned the boolean value false to be now the variable B can only store boolean types so I can I can assign true to it but I cannot assign piece of string to it I cannot assign a number to B and so we're gonna get these errors right here alright so we've just experienced a crash on the playground okay let's just go back to manually run and or run our code right here and that should be okay all right so we're back to being good now there is a way to explicitly say that a variable can store a certain data type this is how we would do it so after your variable name you would write a colon and then you would write in the data type that you want that variable to store so you can write like that you could do that up here you could do that and then for this one you can either type float or use the Swift default double so I would recommend using double what you can unless you're using some sort of library that requires you to use some float data so here's the funny thing even if this is the first piece of data you have sign being float simply because you declared your variable as an integer you know you've explicitly said that variable I is an integer data type you cannot assign a double data type to it so those are the things that I wanted to point out to you I know it's a lot to absorb I would recommend getting the recap notes and just reviewing it and also doing the exercises it's going to help you solidify these things in your head so far you've learned about variables constants and how they can be used to store data you've also learned about different data types such as in string boolean and float now all that is gonna be in my Swift cheat sheet as well as the stuff for the next two lessons and I also have a worksheet for you where you can practice using swift variables and performing math operations in Swift you can grab these two things in the card over or check in the description below now I want to turn over to you are you a beginner to programming or have you coded before either in Swift or another programming language let me know by leaving a quick comment below and on your way down there hit on that subscribe button if you haven't already and click on that Bell icon as well if you don't want to miss the next lesson alright so click on the thumbnail for lesson 6 and I'll see you over there