Hey everyone. My name is Mikaela Caron. I'm a full time iOS developer and recently I've been learning Vapor, so I'm excited to show you how you can use Vapor to build your own API. So if you go to Vapor codes, let's learn like what is Vapor? It is a web framework so you can use Swift to build the website back end of your iOS app rather than using something like NodeJS or Express JS. So let's get started installing it. First we need to install Homebrew. Homebrew is a package manager for macOS, so scroll down to Homebrew and then the website is Brew sh that will be in the links below and just copy this and paste it into your terminal, but I already have it. So I'm not going to put that there right now. Next we need to install Vapor. So when you're on the main Vapor website here, click on Docs and then install macOS and then that will bring you to this page. So first you need to download Xcode if you don't already have that and then go down to Brew. Install Vapor. So copy this and again paste it into your terminal and that'll take a second to download. So to double check that you have everything installed, you type Vapor help and then you'll see this like list of commands that you can run. We are also going to be using Postman, so Postman can help you test the API side. So our Vapor API without needing like the iOS app fully functioning yet. So go to postman dot. Com to their downloads page and click on download the app. Lastly, we will install Azure Data Studio. So Azure Data Studio is basically a Gui that we will be using to read from our database, so we can read the data in our database without needing the API and without needing the iOS app. So this is the Microsoft product, but scroll down to macOS, download the Zip file and also note right here. It is not compatible with Arm architecture, meaning it's not fully compatible with the M one MacBook. So you may need to use like Rosetta or something to open it and download and make everything work properly. Otherwise you can use this application called Dbever to look at the database. I didn't want to use this one because I think it's uglier, but you can use this one to download it or to view the database. And lastly we will be using Docker. So go to Docker. Com and go to their downloads again and then download Docker desktop and make sure again you choose the right one for the operating system that you're on. And after you do that open Azure Data Studio so it'll look like this and you can see it's an open source Microsoft product, so it looks very similar to Vs code. So click on this button and this like the packages and extensions that you can do. So just search Postgres SQL and this is the one by Microsoft and make sure to click Install, which Mine says uninstall because I already have it. But click on install and then that'll help us because this is the type of database we will be using. So once we have all of that, let's go and create our new project so you can see the commands here. Tell us what we need to type. So we need to type paper new to generate a new application here and we will call this Ytvaper API. So hit enter and it'll start creating our new project. So do we want to use fluent fluent is what is called an Orm which is an object relational Mapper. And we will be using that in this project. So type Y and then hit enter what type of database do we want to use? So we will be using Postgres for this. And then do we want to use a leaf? We are not going to be using that for this project, but it's a templating language like for making some of the website. So you'll see it ran. If we make this a little bit bigger, it generated all the files that we needed. It automatically creates a Git repository for us and creates our own commit, so we don't actually need to go through those steps. Here's the pretty little water droplet, and then CD Ytvaporapi. So that is our project. And then we use Vapor Xcode to open the project index code. So we CD into our project directory, and then I do have an extension on here. So that's why Mine may look a little bit different right here. And then we type a Vapor Xcode. Open the project. So the first time that we opened our project here, I'll put that down there it is going and getting all of the different packages so you can see right here. It's Loading and fetching everything. So we have to wait for this to finish. And while we're waiting for that, so what we're going to be making is the back end for an iOS app that will then talk to a database. So the four database operations are create, read, update and delete. So what that means create is adding new data to the database. Read is reading the data from the database. Update is updating any data that's already in the database, and then delete is deleting it. So when we write to the database, we're performing these three operations. So we'll be doing create so that's creating some data on the iOS app, sending the data to our server to the Vapor API and then that sends it and saves it to the database. And then when we update and delete that's again an operation coming from the iOS app telling the API to do something, the API taking that and doing something to the database. And then when we go to read from the database, it starts with the iOS app asking for data. It goes to the API or the server that tells it, hey, this is what data we need, and then it translates it and grabs that data from the database. So the database takes that data. It gives it back to our server and then sends it back to the iOS app. So we had to download Homebrew, which is a package manager that we had to use to download everything else. And we had to download postman postman allows us to test the API without actually needing to create the iOS app first. And with the database we are going to be using Azure Data Studio or possibly Dbever, if that's the one that you had to download. And that allows us to look at the data directly in the database without having to use our API. So first things first. Let's run the project. So we click Command R. Like any other iOS project, it starts to build a project and make sure the scheme that's selected is my Mac, and now we get to wait for it to build. You can see these are all the different packages that are inside of our Xcode project, and these are all the different things that Vapor needs to be able to run. Okay, after running your project, it may take a while to build on the very first try, but you'll get this warning saying no custom working directory set for the scheme. This is because by default it tries to run your application from the Derive Data folder. Close that from Derive data, but that's not what we want. We want it to run within this scope. So if we stop our application, click on this button and then click Edit Scheme from here. Go to make sure you're selected on Run and then go to Options. We want to check use Custom working directory from here. Click on the little file folder and then go and find your project. So find the project in Finder and then click choose. So make sure you select your folder and just click close. And now when we run our project again, it should build faster this time because it's not the first time we're building the project and we won't get that warning anymore. Okay, so you may get this prompt says Run would like to access your documents folder or this is wherever you ended up saving it. Just click on. Okay, you may also get this error. So this is warning like address already in use for some reason. Every so often it doesn't fully detach from the process when you're running your application. So what we need to do here is type Lsofi80. 80. Which that's the part that we're trying to use Port 8080 and this says it's already in use. So if we do this, we'll see something like this. So Localhost is already using this. What we need is this number PID. So don't mind this. This is part of my terminal. I have like extensions on mine, but type kill nine and then that PID number. And when you do that, typing the first command again, we don't get anything. So if we stop our application and run it again, everything should run like normal. So here we go. We said server starting on http. 1270, 180 80. So if we open postman right here and go to that address, if we click, send it's, sending the request and we get back, it works, which is great. It's exactly what we want to see. And then also by default, another route which we'll learn about is in there. So if we click send on Hello, it says Hello World. So that is exactly what we want to see. And we know our project is working. And then you can see in the debug log here. The first thing we did was the root directory. So that's where we just went to this address with no extension or route on it. And then that's just the request ID. And then we went to slash Hello and we can just see both of those requests that we made. So let's look into the file structure. Let's first look at package Swift. So Package Swift is our package manifest for SPM, which is Swift package manager, and Vapor heavily uses that. So you can see right here. We have a little package. And then if you actually look at the contents of this directory for our project, we actually don't have an Xcode project file. That's because this is like a package. You can see we're using Vapor right here. We are using fluent. So we said that at the beginning and we are also using Postgres. So if we open up sources sources is where all of our code is going to live, and we look at controllers by default. It gives us a to do controller by default. It gives us a Todo application. So here this is where we can group logic inside of controllers rather than putting it all on a single file. Migrations are used with the database. So we'll be making what are called database migrations. And this is things like preparing our database, meaning creating new tables in our database. We have our model. So this is what models the data that's in our database. And we can use these within our application. And we have the configure function. So this just has one function in here and it configures the database we'll be using. It adds our migration and it runs the routes function and then routes function is where all of our routes are so different endpoints that will be hit. We will be requesting from with our iOS application. So we saw first the get route right here. We just hit this basic 1270 one at Port 8080. It returned. It works. And then when we did Hello right here, it returned Hello World. So these are the different endpoints that our API has and then here's the to do controller because the controllers have their own routes. Instead, the run folder. This contains the code that we need to get our application up and running so you can see right here. It calls the configure function that we defined right there. Instead of tests by default, Vapor gives us a unit test that we can use. So the unit test right here is starting the application. We are going to the route Hello. And then we want to assert that this is okay and it gives us back Hello world. We will not be going into unit testing for this series, so we have a Docker compose file. This is used to create a multi Docker application. So this configures our API to run and for the database to run in Docker file. This is what is used to actually create a Docker image, and I honestly don't know everything that's in both of these files, but we will get into that a little bit later too. And last is package resolved. These are the exact versions of the packages that are inside of our project that are defined in Package Swift. So if somebody were to download and clone your application from like GitHub, they'll use these exact versions. Unless you go and ask to update the packages. That is the end of this lesson. We installed all the tools that we'll need for creating our Vapor API with our iOS app. We had to install Homebrew, which is a package manager for macOS. We installed Vapor. We installed Postman and Azure Data Studio. We created a project and ran it for the first time and we used Postman to hit the default route and the Hello route. This is the first video that I've ever recorded on YouTube. So let me know how I did in the comments and if you have any suggestions, questions, I will see you in the next part. Bye.