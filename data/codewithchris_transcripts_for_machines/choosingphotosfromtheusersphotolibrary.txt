this week we're showing another topic which i needed for the chat app which is to allow the user to select a photo from their photo library now before we dive in just a quick reminder that we do have a cwc ideas board and i'll link to that in the video below and that's a place where you can vote for your favorite topic ideas or submit ones of your own all right with that said let's dive in all right so before we jump into xcode i want to give you an introduction of the two different classes that we can use to facilitate selecting from the photo library now the good old trusty one is called ui image picker controller and this one provides a ui for the user so you don't have to build any custom ui it's going to lay out all of the users photo library images in a grid like fashion for them to select something and furthermore with this class you can also choose the source whether you want to choose camera which is actually going to launch a viewfinder so the user can take an image and then you'd get a reference to that image that the user took so you could do something with it or you could choose the source for this picker controller to be the photo library in which case it would display all the images in a grid now this one has been around for a while so you can see ios 2.0 um you know it's it's been used a lot it used to be sort of the de facto solution and also this is a ui kit class so just in case you're new to swift's ui ui kit ui kit used to be the old user interface framework nowadays you know we're fully at least for us teaching and apple's you know future looking prospects they're going with swift ui so you know over time um things will gradually shift towards swift ui but for now there are still a lot of useful classes in ui kit and a lot of companies are still using ui kit because there's a lot of apps and you know things that have been created prior to swift ui so that means that we are going to have to use this ui kit class inside a swift ui project and if you've never done that before it's going to be a little bit confusing but i'll take you through it so don't worry about it there is a newer class called ph picker view controller and this is in the photo kit framework but essentially it's still sort of like a ui kit thing you'll see the availability is ios 14 and above so it's actually a lot newer and you can see here some of the benefits of using this deferred image loading and recovery ui more reliable handling of large and complex assets and things like that but i'll tell you why i'm still using the ui image picker controller and that is because there are still bugs with this um even here currently while we're recording this this is ios 15. so you know i ran into some of these issues while first recording this demo and i found in the developer forums that this i feel like this is a pretty big problem that the ph picker you can't select png images from it um you know people are running into problems and this was asked a month ago and this bug is still present and this was only two weeks ago and you know seeing that you know i don't i don't want to work with this right now just because i it it doesn't seem production ready especially if you read this thread there are some apps that are already in the app store they have users you know paying users and the app owner upgraded to this new ph picker view controller only to find out that these bugs exist and you know you're going to have a bunch of unhappy users uh so for now we're going to stick with the ui image picker controller all right with that being said let's jump into xcode and let's start this project all right so we are now going to start a new xcode project so under ios select app we're going to call this image picker demo interface is swift ui language is swift and let's let's save this in drafts okay i'm not going to create a git repository i'm just gonna do that and for this for this basic ui let's change that to iphone 13 and i'm going to put a button here and this button is going to say upload so the label is going to say not upload but like select a photo and the code is going to show the image picker now the way we were going to do this is through a sheet so we are going to i'm actually going to put this button inside of v stack because when we retrieve the photo from the photo library i want to show that that image so i'm going to put that image above the button so i'm going to just create a v stack right now for that and then i'm going to put the sheet modifier on the v stack now this has a couple of different things so for example there is a binding to a boolean state property which dictates whether or not this sheet is presented and if you've never used this modifier before a sheet is basically a view think of it as a view that's going to slide up so this state property this boolean state property is going to dictate whether or not that view is currently showing so why don't we go ahead and create a state property up here and we're going to say show picker initially that's going to be false and we're going to set we're going to pass that state property as a binding here yeah maybe this one is picker showing instead okay so binding is using the dollar sign dollar symbol all right so this one on dismiss so when this this view is dismissed do we want to run some code so i'm not going to run anything for that so i'm going to put nil and then for content this is what you want to display when this turns true so in other words this this is what you want to display and you can put a block of code in here so i'm going to double click that to open up a new closure and inside here it's going to be my image figure so what do you think i should do when the user taps on this button well i'm going to toggle that to true not toggle because toggle is something else i'm actually going to set it to true and what that's going to do because this is a state property it's going to trigger all the view code that is depending on that to recalculate so when i set this to true this is going to be true and then it's going to show whatever i have in here all right so that's that's simple enough the next thing we want to do is actually create the image picker so as i mentioned before the class that we're going to be using is ui image picker controller now remember the fact that this is a ui kit class and it's also a well it's a navigation controller ui navigation controller and this navigation controller is actually just a ui view controller so there are actually two different ways for us to work with ui kit classes and views so let me show you the way in which we can work with ui view controllers which is what this image picker is so we're going to go back here and we're going to create a brand new class let's call it swift file create a new swift file i mean and let's call it image picker create let's put this right here and we're going to import ui kit because that's where the ui image picker controller class is in we're also going to import swift ui so what we're going to do is create a new struct called image picker and we have to conform to this protocol called ui view controller representable and this is how this is sort of the bridge that is going to bridge that functionality between a ui kit class which is what this is to a swift ui project so that was ui view controller representable now don't be confused because there is also a ui view representable so that's not what we're doing here because ui image picker controller is actually a ui view controller so the one we actually want to conform to is ui view controller representable okay so essentially we're representing this ui kit class as a swift ui view now there are two different functions that we need to implement to conform to this protocol one of them is make and the other one is update so make ui view controller let's put that in there and the other one is update uib controller now if there's nothing to update we don't really have to add any code in here this one is the more important one because this is where we're actually going to create an instance of the ui image picker controller and return it to use in our swift ui view so let's make one let image picker equal ui image picker controller and there's just a couple of things we need to set here uh source type equal now we're not not going to do camera for this demo we're going to do photo library now notice that it says here photo library for this you know using using the ui image picker controller to select from the photo library is going to be deprecated in a future version of ios they don't tell us which version in the future but it will be removed in favor of the ph picker which is what got me looking into this but since it's still really buggy uh we're gonna stick with the uh ui image picker controller for now okay so going back here it'll still let us select photo library it's just warning us okay image picker like that and then we are going to return the image picker that's command b to build this make sure everything builds all right built succeeded let's see if this is going to work coming back to content view this sheet modifier we are going to create an instance of that class that we just created and let's uh give this a run let's see what happens okay so select a photo all right well we get we got some ui this is great so by default the simulator does have some photos selecting one is also nice because it automatically dismisses it that's great cancel also does the job now we don't have any code right now to detect which image the user has selected that's what we have to add now if you've never worked with ui kit protocols and delegates before this may be a little bit confusing but that is the pattern in which ui kid classes communicate to other you know other components of the app so let's walk through how we are going to detect events from the ui image picker controller essentially we need to detect the event where the user has selected an image so the way this works is the image picker well essentially the ui image picker controller class has a property called a delegate and when the user selects a photo the image picker is going to contact the delegate and call a very specific method and it's going to pass through the photo that got selected through that method so in this property this delicate property we need to assign it i guess you could call it a receiver someone like an object to receive this event right so you can see here that there is a very specific type data type of the type of object that you can assign as the receiver you know as the delegate in other words you can't just assign any object to receive you know that information so we're going to have to create another class down here that is of that specific type that can receive those events so we can assign that as the delegate all right so hopefully that makes sense right we're going to need to assign this to something object that can receive image ui image picker controller events okay so we have to create a class of that type right now so that we can assign it as the delegate and that way when the user actually selects an image it's going to contact our object and we can write the code to do something so down here we're going to create a class we're going to call it um let's call it in the tutorials and all of the apple documentation they call it coordinator so that's what i'm going to stick with as well so class coordinator and this coordinator class has to conform to a couple of different things well first of all we have to specify the type of this class is going to be ns object and this is sort of like an old objective c ui kit type thing where it gives this class all of the functionality of being an object second of all this coordinator class has to conform to two different protocols in order to be assigned as the delegate here so first of all it needs to be assigned as the ui view image oops or not uiview ui image picker controller delegate and conforming to this protocol basically gives our coordinator class the ability to handle those methods from the ui image picker controller class next of all next i mean we need to also conform to the ui navigation controller delegate because if you look at here you'll notice that the ui image picker controller is a ui navigation controller and this basically allows a couple of ui view controllers to work together so you're able to navigate between them so you'll notice in this ui image picker controller when it popped up on the simulator you notice that there were a couple of different views like we could toggle to the albums view and we can you know see it see a couple of different views and so the ui image picker controller really is a ui navigation controller that probably contains a couple of uh views view controllers so we also need to conform to the ui navigation controller delegate in order to handle handle those methods all right so this is our class and now inside of this coordinator class we can handle the methods that this image picker would call when the user has selected something so let's say image picker controller so there's this one did cancel so if you want to run some code run code when the user has cancelled the cancel the ui you know the picker ui here's your opportunity to do that but the one we're more interested in is this one right here image picker controller did finish picking media with info and inside this info parameter you'll see this is a dictionary and this dictionary is going to contain our image data so let's go ahead and add this method we're going to implement here run the code um when the user run run code when the user has selected an image so what's going to happen is when we create an instance of coordinator and we set it to the delegate here so for example now this is not what we should do just i'm just showing an example let's let's say we create a new coordinator object and we assign it to delegate so when the user either you know cancels something or finishes selecting the photo it's going to contact the receiver here the delegate um which is our current coordinator and it's going to call these two specific methods depending on what happens so that's how that communication is going to work now we can't actually just create a coordinator and assign it as the delegate it doesn't work that way um with this ui view controller representable there is something called the context that you'll notice here right and the context has a coordinator property right the views associated coordinator all right so this property what it's going to do is just it's going to create an instance of this class down here and it's going to assign it to the delegate now you're going to see an error right here you cannot assign what it's really saying is that it doesn't know how to create that coordinator it doesn't know that we want this class which we've called coordinator to be you know to be this one right here so what's going to happen when we try to assign context.coordinator to the delegate is that it's going to try to create one it's going to try to create a coordinator but it doesn't know what to create so we have to implement the method called the make coordinator and when when it tries to access this it's going to call this and then in here we can implement the code to tell it how to make the coordinator so we're going to say return a new coordinator object and so this let's change the return type here to coordinator like that all right now uh what we're going to do is set a breakpoint just to make sure this works so let's say print image selected print cancelled so we should see these two statements printed in here i just want to double check that the image picker is calling its delegate and calling these two methods all right so let's run the app right now and then we're going to try it out so first of all let's cancel out of it we'll hit cancel oh you'll see c cancel right there so that's awesome uh the other thing is that when we select an image you'll see image selected so this is great because this tells us that hooking up all this stuff has worked we can actually detect the events that that are happening now notice that we've sort of lost uh because we're hand we're actually handling it manually now we've lost the ability for this to dismiss that was sort of free functionality now we're actually going to have to implement it alright so but that's not going to be too difficult the question now actually is how are we going to get the image which we're going to have right here back to the content view right because in this content view what i want to ultimately do is have an image here and i want to display the selected image above the button so what i'm going to do is i'm going to create a state property right here called selected image and this is going to be a ui image and initially this is going to be nil and we are going to we are going to try to display that if if selected image is not nil then we will display that i'm also going to make this resizable and i'm going to set and i'm going to set it to 200 just just so we can see it um yes i can force unwrap this because i already checked that it's not nil here so i'm going to run this and obviously we won't see that image there's nothing here but ultimately what i want to do is when the user selects a photo i want to assign the selected photo to this state property so that it will immediately be shown i can't even dismiss it now but it'll be shown right above the button so what we're going to do is pass this selected image as a binding through to the image picker and then we are then going to pass a reference of the image picker through to the coordinator so that when we get down here we can assign the image to that binding and it sort of travels all the way back up but it's easier to show you than to explain so so let's try this out here i've created that state property to store a reference to the selected image inside the actual image picker i'm going to create a binding called selected image and it's going to be of the same type and then this changes how this is initialized right so i have to pass through the selected the binding for the selected image so i'm going to use the dollar sign to represent the binding i'm going to pass through this state property as the binding so now inside of the image picker if you take a look at right here i still don't have access to that binding the reason is because this is oops this is the coordinator class it's completely different from this image picker structure where we declared the binding but how we're going to get access to this in order to set the selected image is inside the coordinator here like we're going to pass it through the initializer we're going to pass through a reference to the image picker through this initializer and then store that here so we're going to create a property called var parent and this is going to be of type image picker and then in the initialization method so this is going to get called when we create a coordinator i am going to i'm going to request that a reference to an image picker be passed through and then i'm going to say self.parent which is referring to this equals parent or maybe just maybe i'll call this picker just so it's a little more clear okay and then when we create an instance of coordinator we're gonna have to pass through self so what's happening here is um when the image picker creates a coordinator it's passing a reference of itself through and then you know here we are saving that reference to our parent property here so that when we come down here and the user has selected an image we have access to it to self dot parent dot selected image equals and then we can set it to the image so let's go ahead and do that uh we're gonna say you know in order i told you that the image is in this info dictionary right so info and there's a very specific uh key for the image data for the ui image that is so and it's ui image picker controller dot info key dot original image an original uncropped image selected by the user so that is the key that we're going to pass into this dictionary and we're going to retrieve it see the data that gets retrieved is any because it doesn't know right but we we know it's a ui image or at least we hope it is so just to be safe you can use optional binding you can use an if statement we're going to use optional binding if let image equals that so if it's not nil it's going to get assigned to image and then inside these brackets here we were able to get the image and we can say self dot parent dot selected image equals image now there is a problem here because as soon as we do this it is going to be affecting the ui and we should always be um changing the ui in the main thread and not a background thread right so we are going to use uh dispatch q main.async in order to run this code on the main thread i'm passing passing it back and yeah so hopefully you can see how this works let's test it out and then we'll just recap the code again there is still one more part we need to do which is dismissing the photo viewer okay so ah that's right we can't actually see because we're not dismissing it just yet all right we gotta implement the second part which is dismissing it so you know how we already have the state property is picker showing equals false well we might as well pass that through as well to the image picker and then we can just set this to you know false if we want to dismiss it so why don't we go ahead and do that in the image picker we're going to create another binding far is picker showing uh this is this is going to be bool and then inside back in content view here we're going to add that second parameter and this is a binding dollar sign to the is picker showing close bracket all right so now back in image picker we we have a reference to this boolean and that means that we also have that here now we can just miss the picker now um you know regardless of whether or not i was able to retrieve the image i still want to dismiss it that's why i'm putting it outside of that optional binding if statement right there here we're going to say parent dot is picker showing equals false all right we're going to do the same thing here when the user has cancelled okay now let's take a look at this this everything should be working select an image ah there we go awesome everything is working perfectly so if this is your first time you know learning about protocols and delegates and you know how the ui kid classes communicate at back out uh through through callings very specific functions or methods i mean then i would suggest that you review this video again um that is if you are planning to work with some ui kid classes so i hope that was helpful if you have any specific questions about this be sure to post in our code crew forum where myself or someone from the team will jump in to help alright thank you so much for watching and i'll see you in the next lesson