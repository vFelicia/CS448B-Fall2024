today i'm going to show you how to add inapp subscriptions to your app using revenuecat one of the most loved tools in the ios community and in my opinion the best way to implement inapp purchases we're going to do this with version 4 of the sdk and this swift ui demo app that i created a mock meditation app shout out and thank you to the revenue cat team for sponsoring this tutorial so here's what we're trying to do i want this app to be able to detect if the user has a subscription if they don't then when they tap on a subscription i want to show a pay wall and i want to be able to list the different subscription options i want to implement the ability for the user to process i mean purchase a subscription and when they do i want this app to detect that they do have a subscription it will no longer show this and they will be able to click through to these cards and plus when they click on this tab it will show that they are a paid member here's how we're gonna do this in broadly four steps now imagine at the top here you have your app user which is using your app which is built from your xcode project step one is creating a revenue cad account if you don't have one which is free number two we're going to go over to apple's app store connect portal and we're going to configure the actual subscription products that the user is going to buy step three is we're going back to revenue cat and we're going to specify how we want to present those products to the users and what sort of access level those products should unlock we do this by configuring entitlements and offerings and you'll learn more about those later step number four is we're going to add the revenue cat sdk to our xcode project which does all of the heavy lifting so we can write very little code in order to display our products and process transactions now i know what you're thinking why do we use this revenue cad layer why not just use the store kit framework and access the app store connect products directly well for one store kit is notoriously hard to use as many developers can attest to revenue cat makes implementing inapp subscriptions much faster and easier another thing is that this revenue cat layer allows you to dynamically present different offerings to the user and to run pricing experiments all without submitting a new app update and if your app is available on multiple platforms you can persist the user's subscription status across all the platforms and also get a broader view of your analytics spanning multiple platforms now those are just a couple of benefits off the top of my head oh and by the way they have an awesome quick start documentation guide which is what this video is based off of and they also have a swift ui demo app that you can look at for reference link to those two things in the video description all right let's dive in now if you don't have a free revenue cat account yet open your browser and type in code with chris.com slash rcat and then what you're going to do is hit this sign up button right here and create your free account now i don't get compensated for this in any way but it will let the folks over at revenue cat know that we want to see more revenue cat tutorials now after you create your account you're going to be greeted by this screen now here you're going to be asked to set up your new project you can give it the name of your app now a project doesn't represent a single app instead it represents your product which might have an app on multiple platforms for example you might have an ios version an android version and maybe a web app that uses stripe if a user buys a subscription you'd want the app to recognize that no matter what platform the user is currently on right well revenuecat can help you do that if you put them all into the same project now this is my revenuecat account i am going to create a brand new project just so we can use it for this demo here so i'm going to call it cwc meditate and what we need to do is select what platform we're using and that's going to be app store for us we're going to give it an app name you don't need to fill out anything else for now so let's just call this that or save it now let's head on over to the apple app store connect portal now for this part you're going to need an apple developer program membership because you need to access the app store connect portal where you configure your app and your subscription products now here's a pro tip make sure that you've signed the latest paid applications agreement because otherwise you won't be able to use the inapp purchases and you won't be able to get this working even for testing purposes if you see any warnings on your app store connect dashboard or in your agreements tax and banking module then you're going to want to resolve those especially if it pertains to your paid applications agreement and even if you have signed this in the past sometimes apple updates it and you're going to need to agree to it and approve it again so this is my app store connect portal let's go into my apps and we're going to add a brand new app to represent this cwc meditate demo that we have so let's click on new app and let's call this meditate let's choose ios we'll choose english and then the bundle id is going to be that one right there and sure let's just say that all right so what we're going to do is jump straight down to features right here and subscriptions now again if you haven't signed your paid apps agreement you might not have or see these things now first thing we're going to do is set up our subscription group now subscription group is essentially a collection of subscription products and the user can only be signed up to one of those subscriptions in the group and they can change between them at any point so usually we'll define a subscription group as a level of access let's say all access and inside we'll put different interval options like yearly or monthly so let's create our subscription group and we're going to call it pro that that's sufficient for now what we have to do now is add the subscription products to be in this group we're going to add yearly and monthly and we also need to add some app store localization for the name of this subscription group so i'm going to go ahead and do this first because we can't get away from doing this we're going to have to do this at some point now it's always a good idea to open up these little bubbles because often times it tells you whether it can be public facing or maybe just internal facing for your reporting purposes so this one is going to be shown so what we're going to do is give this a name i'm going to call it now down here we're going to be able to specify the app name associated with this subscription so i'm going to use custom name i'll say cwc meditate the reason it's a duplicate and the reason i'm not just using the app name is because oftentimes in the metadata of the app you you might want to put keywords or something in here or maybe seriously meditate the comments app in the app store you know you don't want that to be shown in the subscription screen for the user so by using this custom name i can specify any app name i want but this is what is going to be shown in the subscription settings for the user so this image shows you where this subscription display group name is going to be as well as the app name okay let's go ahead and hit create and with that being done we are going to hit create right here to create our subscription products now these are the things that people are actually going to buy this reference name is going to be internal it's going to be for your reporting and then this second field is going to be an identifier for your product now keep in mind that this identifier that you put for this product is going to be across your entire account so once you create a subscription product with this product id you're not going to be able to reuse that for another subscription product so revenuecat actually has some guidance here in their documentation for you know as a best practice for what to put here so i'm going to quickly pull that up all right so here they recommend for the reference name because this appears in your reporting you're going to have the the duration or the name and you're going to have the price and then you're going to have if there's any sort of free trial period so for this one i'm going to put um annual and put that and no introduction in your period and for the project id they recommend this sort of identifier so let's break that down okay so there's um the app underscore price in sense uh underscore duration uh underscore intro duration and intro price so i'm not going to have intro duration or intro price we're just going to have app price and duration so this one is going to be i guess cwcm let's just say that uh price is going to be 9.99 and this is going to be one year for the duration so this just from looking at this product id i can sort of tell what that product is so let's go ahead and hit create and then it's going to bring me to configure a couple more options here so i'm going to have to select the duration because it doesn't know just from the reference name so i'm going to have to select one year right there and we're going to have to add pricing and we're also going to have to add localized names for this particular product so let's add the pricing first so i'm just going to go ahead and choose that and you can price it differently per region if you'd like if not i'm just going to go with the conversion rates hit confirm and then for app store localization we will add the name now again they have a couple of they have some guidance here as well revenue cats so let's bring up their documentation and they recommend here let's scroll down right here um let's see we recommend using the same subscription display name for all your products that unlock the same level of access so whether it is a monthly subscription or a yearly subscription we are going to go by the level of access it unlocks so let's call this all access we're going to put that there as well okay and the last thing you have to do and i don't actually know if you have to do this anymore but back then you had to submit your subscription products for review and in order to do that you had to have a screenshot and put in some review notes even though your app wasn't ready to be submitted nowadays they say that your first subscription must be submitted with a new app version so you're not going to hit submit for review on these inapp purchases until you're actually submitting the entire app for review so in the past you'd have to um just for testing submit it for review anyways and you'd have to include a screenshot so i'm going to include a screenshot anyways what i created was a placeholder it's just an empty image they have recommended sizing here whoops i'll use the screenshot it won't be displayed in the app store so down here the dimensions 640 by 920 image of whatever you want before you actually submit it for review obviously you're going to want a picture of this against your actual paywall in your app but for now for testing purposes we are going to put a random screenshot well a placeholder screenshot of nothing so you could create this blank image in you know photoshop or canva or figma or whatever it may be i'm just going to do that and we'll hit save okay and then now we are going to repeat the same thing for uh the monthly version so i'll say monthly oops and this will be cwcm like that one month so we'll speed this part up because it's exactly the same as for when we did the annual all right so now we've created our subscription group inside there are two subscription products annual and monthly and they have these product ids we're going to want to keep track of these product ids because that is how revenue cat is going to identify these products and pull the information from app store connect but in order for revenue cat to have that communication with app store connect there is one thing that we need to set up and that is going to be here under subscriptions you have this app specific shared secret and we are going to hit manage to open up the window you're going to hit generate and then you are going to copy this shared secret done and we're going to go back to revenue cat and in the project settings if you click on your app and you look at your project settings here you can paste it into this field set secret all right and that is what revenuecat needs to communicate with app store connect okay back in revenue cat we are going to set up our entitlements now this is very easy to understand just think of it like different tiers of your membership that you typically see in other sas products by setting up these entitlements you will be able to check later with from with an xcode what level of access the user has and then unlock whatever content in your app so with our demo app we're just going to have one level of access which is either free which is no access or paid which is sort of an all access so i'll call this pro as the identifier for this entitlement and i will say it's all access you'll notice that it says zero products here what we need to do is draw the connection from the products that we configured in app store connect to this specific entitlement so that when the user buys those products we know that it is going to unlock this pro entitlement that we just set up so if you click on this zero products you're going to be drilling into this entitlement and you're going to be able to attach the products you want that would unlock this however you'll find that you have nothing here to attach because what we need to do like i said before is if you go back into app store connect and look at the subscription products that you set up we need to tell revenue cat that these are the product ids that we have set up so we have an entitlement now we need to go into products and we need to add the two products that we added here and we reference them by id so let's go ahead and start with the annual one let's copy that product id and under products here let's click new we're gonna paste that in there and we're going to choose this app that we're adding it to let's do this with the second one this is the monthly product so i'm going to hit new and again we're going to select this app if we had multiple platforms for this project we would see you know app store or play store or whatever but we only have app store right here so let's go ahead and click add now you'll see even if we refresh it the products are not connected to any entitlements what we're going to do is go back to entitlements click zero products and then attach those two products which we just added now revenue cat knows that when these products are purchased it's going to unlock the pro entitlement and if we go back to products and we will refresh the screen you're going to see that these are connected to a single entitlement okay now that we have added the products to revenue cat we need to decide how we're going to offer them to the user and this is where offerings come in now each offering is essentially a group of app store connect products that we want to present to the user for example you might want to create an everyday offering which contains your monthly and annual subscription and you might also want to create another offering which contains your special black friday priced monthly and annual subscriptions and obviously you're going to have to create those black friday products inside your app store connect furthermore another offering you might have is maybe for returning users so that you can present them with a specially priced product that will entice them to rejoin having these three different offerings set up inside your app you can have logic that decides to present which offer to the user depending on different situations furthermore inside the revenue cat dashboard you can change which offering is going to be the current or default offering and so you're able to change what gets presented to the user without submitting new app updates which is really powerful there's also another feature that helps multiplatform apps inside an offering you have packages and inside each package it contains the equivalent product across platforms this way no matter what platform your app is running on you can access the same offerings and present the appropriate products to the user don't worry when you present that offering revenuecat will know which platform the user is on and present the appropriate product for that platform so let's go ahead and click on offerings right here and we're going to click on new and we're going to create let's just call this default shorter default offering and there are zero packages in here right now so we are going to create the annual package first we're going to change the identifier to annual and these identifiers right here these are sort of like commonly used ones so um there are these options that you can select however if it's a custom one you can set your own identifier we're gonna go with a custom one because these are pretty custom so sorry i mean we're gonna go with a standard identifier because this is sort of a standard uh duration and charging interval uh let's call this the annual subscription now inside this package we are going to add our yearly product right and if we had an an android version of this app we would also include that annual product in this package as well so so far this package has zero products let's go into it and attach our one see this is why those reference ids matter right because i can tell right off the bat that this is my annual product we're going to drill back out and we are going to add another package i'm going to click zero products attach this one 1m great now we're going to go into xcode and add the revenue cat sdk now back in our xcode project we are going to add the revenue cat sdk and we're going to start by pulling up the documentation so again this quick start is so helpful we're going to go under ios installation and there's going to be a couple of different ways we can do this we're going to do it via swift package manager so let's go ahead and copy this repository url and here we are going to go to the project settings um we are going to go to package dependencies and we're going to hit this plus so always don't get confused with the plus down here it's this one right here and we're going to paste it into there and then just go ahead and add the package and while that happens let's take a look at a couple of next steps so after we do that we have to import the revenue cat framework oh i can't access that but essentially we need to write this import statement wherever we want to use the revenue cat libraries and we have to enable inapp purchase capability for the project so i forgot to do this when i first did this and it wasn't able to work so make sure we do this in our xcode project and then after these two simple steps the sdk is in our xcode project so let's check if that's done okay we're going to add the package great now we are going to go under click targets signing in capabilities and we are going to add inapp purchase capabilities now it's not this plus icon right here it's this one up here let me hit plus i'm going to search for in app purchase there we go let's go ahead and add that um that should be fine and then we're going to go into here our app entry point and we're going to import revenue cat framework and let's go take a look at configuring our instance so again let's start from the quick start because that's always the first place so we were sort of lost my place here we're right here install the sdk so we just did that that was easy two steps configuring the sdks we only need to do this once and essentially we just need to initialize it with our api key because that's going to point to our dashboard or our project right here so you're going to find the api key under api keys so we're going to grab that but first of all let's grab these two lines the first line is setting the um the log level to debug which means that we're going to see any errors here in our console which is going to be really helpful because sometimes you're trying to retrieve products from app store connect and reviewcad isn't able to talk to app store connect and you're going to wonder why well that stuff is going to show up here and you're going to get helpful hints as well in here all right so where are we going to put that code because in this documentation we don't have this did finish launching with options the best place to put it for the swift ui app would be in an init method so we're gonna just put it right there so log level is set to debug and we're going to put in our api key right there so let's hop over to our dashboard and then under public app specific api keys that is the one we're going to copy okay so i'm going to paste that right over there now the next thing we need to do is to display the products on the paywall so let's go over to the paywall here and take a look at what we have so right here we have a static button that currently does nothing and it's got a label that says text join meditate plus if we go back to the dashboard or actually let's go back to the quick start that is the next step you can easily display your products with this simple call purchases dot shared this is getting you the shared instance of the purchase object and then you are going to call get offerings method and that's going to return to all the offerings that you have configured in here so just to remind ourselves we have one offering and inside there are two packages annual and monthly so that's what we're going to try to grab also notice that this says current this is going to allow us to very easily grab this offering if we had multiple offerings you are able to choose which one you want to make the current offering you'll see that in action in a second so let's go ahead and try this out what we're going to do first inside this paywall is import revenue cat and what i'm going to do is create a state property here for the current offering and this is going to be set to no because initially i won't have the offering and then what i'm going to do here is on up here of the paywall i'm going to fetch the offerings so this is going to purchases dot shared dot get offerings so there are two parameters in the completion handler so there there's the actual offerings and there is error so i can say if let current offering let's say offer equals offerings dot current and error is nil that means if there were no errors and i am able to fetch the offerings i am going to look for the current offering so if you take a look at here this quick help current offering configured in the revenue cat dashboard this is going to grab this offering now it doesn't really matter because i only have one but like i said if you had multiple offerings you can mark one of them as current and then you can easily access that specific offering with this property right here it doesn't mean you can't access the other offerings you can it's just that this is an easy way to grab the one that is marked current because you can always grab the one via identifier like whichever one you want so i'm going to put i'm going to grab the current offering and then in here i'm going to set the current offering equal to the offer and then inside here i instead of having a static button i can do a quick check if current offering is not nil like if we're able to grab the current offering from revenue cat then i am going to dynamically generate my buttons one button for each package right because for this offering i have two packages annual and monthly i want to display a button for each of them so that's why i am going to probably have a for each right here and i am going to loop through current offering dot available packages so this is an array of package this is another class which has different properties for us to look into our packages and display things like prices and titles okay so i'm going to put this in here and then the text let's just try to display let's see so i'm going to force and wrap it here because we've already checked that it's not nil okay so then in here i want to change the label of my button to the package details so inside the package details you can access things like let me just show you you can access the store product this represents the product that you configured in app store connect and inside here you can access things like the price the title of the product as well as for your subscription um different details about the subscription like uh the the numerical part of it so is it like every one week or every two week or every three week that numerical portion that's under value as an int and also the the unit of recurrence so is it like every does it recur every week every month every year and that's under unit now this one is an enum i believe it's it's not a string so you're going to have to manipulate this a little bit and what i'm going to do instead is look at the sample project that revenue cat has provided again this will be linked to in the description below i have a magic weather swift ui demo app and in this project i saw a really handy extension where it forms these strings that you need so for example i showed you the the unit right so here there's a switch on the unit so if it's a day if it's weak then it returns this string so i don't have to build it myself so i'm going to actually borrow this extension file and i'm going to put it into my own project and use it so i'm going to create a new group i'm going to call it helpers and put it right there and i'm just going to drag it across and copy it now this project this sample project i will link to in the description below but you'll find links to this everywhere from the documentation so it shouldn't be hard to find okay so what this gives me is an extension on subscription period where i can just access this property called duration title and it's going to give me it's going to give me this or perhaps i should do period title actually because this contains the value as well as the you know one day or one week it contains the unit title as well so back in my paywall i no longer have to build it myself i can say period title and that's gonna be fine it's gonna be great and now i'm gonna force unwrap that because these are all subscriptions um and then i'm also going to put the price so the price i don't need the extension it's just going to be localized price string so let's give this a run in the simulator and see if it can actually pull down the products um i would keep an eye on down here because there sometimes is a red exclamation mark telling you there's an error if you aren't able to see the products so let's launch our paywall great so we actually see our products that we configured through app store connect what's happening is that our app is connecting to revenue cat and then revenue cat is fetching the products from app store connect and giving it back to us so this works out great sometimes if you don't see anything here and it's not able to fetch the products it will tell you in here what is wrong and it will also try to give you some suggestions and hints and in many cases it will even give you a url to a blog post to try to troubleshoot why revenuecat isn't able to fetch the products all right now that we have our products displayed let's allow people to purchase it so we're going to go back to the quick start and this is so simple this is a couple of lines of code purchases.shared just like last time but this time we're calling purchase and we're passing in the package to buy and basically that's it so i'm going to copy this code snippet we're going to come back in here and inside by we are going to just paste that and uh we are going to change a little bit here because we we named it pkg so if they click this button they are buying that package right and then in here it is just going to check um if the entitlements if a specific entitlement is active then we're going to unlock the pro content so if we go back to our revenue cad dashboard the entitlements the identifier that we put is pro all right so that's what i'm going to put in here now inside their demo app uh they have actually checked for there are some good practices here to make note of um they're actually checking if user has not cancelled it because sometimes you can bring up the purchase screen and then cancel it right so if the user has not canceled it and there are no errors you know then proceed but in the quick doc code it doesn't check for either of these things it just checks if the customer has the entitlement and you can argue that whether or not the purchase went through all we really care about is does the user have the entitlement are they entitled to that locked content so i guess you could lean either way but something else i want to point out is they have this state variable called is purchasing and this basically throws up a screen where is it here yeah this overlay right here so that variable uh flips up this overlay so that when the purchase is happening the user cannot interact with the ui you can see here right and then only after the user cancels it or finishes the transaction do they remove that overlay so the user can interact again so that i think is probably a good idea so that the user can't just keep you know tapping the buy button multiple times so i'm going to leave that as an exercise for you to implement or look in their demo app for now this code here is all that's needed for the user to make a purchase now we need to make sure that when the user has unlocked the pro entitlement that that immediately gives the user access to um all of the content because right now in our app we when they tap on a meditation we are just throwing up the paywall we're not checking their subscription status right so how are we going to check that subscription status well let's go back to the quick doc and that is really the next piece of code here and again it's just one single method get customer info which returns a customer info and then you can check if they have the pro entitlement and then obviously unlock everything now one thing to note here is that this is intended to be called multiple times it doesn't make a network request to revenue cat all the time let me read this part for you you can use this method whenever you need to get the latest status it's safe to call repeatedly throughout the life cycle of your app and it updates this customer info whenever there's a change to it this method actually pulls from cache and runs very fast and it's typical to call this method when deciding which ui to show the user and whenever the user performs an action that requires a certain entitlement level so don't worry about calling this as often as you need because oftentimes it's just pulling it from cache so we are going to create a new user view model as an observable object with a published property for the subscription status that way we are going to make this ui dependent on that so that when that subscription status changes this ui is going to update automatically so let me show you how we can implement that so i'm going to create a new group here let's remove this right perhaps right there it's going to be an observable object with a published property called is subscription active so we'll set it to false and i basically want when this is initialized i want to call this method and we're going to want to check once it returns if they have the pro entitlement so if active is true then we are going to set is subscription status to true right i guess we could shorten this let's see we can shorten this if we say me just do that okay so this is going to be set to true if pro is active it's not enough to just check if the nil or not because this could be false right is active could be false so you actually do want to check if it's equal to true all right so we're going to do that and then inside here we are going to create it as a we're going to create a new instance of that user view model equals new user view model and we're going to pass it in as an environment object so that way inside content view so inside content view there's two things that we want to change we want to change the subscription is active we don't want to show this signup prompt and the other thing is that if the subscription is active when they click on this we don't want to show the paywall right so one thing at a time here that little call to action banner is right here this zed stack right here so we are going to check this is subscription active and if we make the view code dependent on this published property as soon as this changes it's going to you know flip this on or off so up here let's get access to that user view model all right now i can write code that is dependent on that published property um if it's not active right so if they don't have an active subscription then i want to show this um you know this call to action to sign up the other thing is that for the meditations each of those cards is a button when they tap on it i again want to make sure that if user view model is subscription active so if they have an active subscription then show meditation i guess now we're not going to actually implement that because that's not really the purpose of this demo however if the subscription is not active then we are going to present the paywall so let's see how this works because yep okay so i'm going to set a breakpoint right here and this is going to run as soon as the app launches we're going to be able to check that okay so right here the app launches it's checking it let's just step over that is subscription active and it's false which is true because they don't have a active subscription so we still see that and when they tap on this it still launches this okay so now when the user buys something how do we you know flip this switch we are going to go back to the paywall at the top environment object again we need access to that user view model and then here when the user hits buy and they have purchased it or they might have canceled it or it might have errored out either way we are going to check if the user has this entitlement that's really all we care about and if they do we are going to say userviewmodel dot is subscription active is is true i'm going to flip that switch and immediately the view code that depends on this published property such as right here in the content view that cta to sign up and this you know these buttons that will immediately change so that's how we're going to get things to immediately change the other thing we want to do as soon as this is successful is we want to dismiss the paywall and i've already set this up so we pass through the boolean that controls that paywall showing or not and we're going to just flip this to false is paywall presented um it's false all right okay so one more thing to do now that you know how to detect the subscription status in the profile view we can do a couple of things here so again we are just going to get access to that environment variable and then inside here instead of free we are going to detect the status of user view model dot is subscription active if it is then we'll say pro if it's sorry it's not a colon here it's question mark pro and here we're going to say if it's false then we're to say free and for restoring purchases this is actually very simple as well so we go back to the quick help documentation see we're just following this step first step in here it's just another single method called restore purchases and uh this we should be used to this by now right it is essentially we get the right we have the customer info all right so oh we can't find purchases in scope because i have to import revenue cat all right down here uh so we're just gonna set user view model dot is is subscription active is equal to that that's literally a couple of lines of code so easy to do okay now we want to test this so we have actually have to go back to app store connect and we have to set up some test users now um you need a device so first of all you can't test the actual purchasing through the simulator next thing you want to do is actually test it using a dummy sandbox user so we're going to go under sandbox users here so in here i've already set up a sandbox tester but what you can do is hit this plus icon so just fill in all the information here choose an app store country that your app is actually available remember the password though because you're actually gonna need to log in with this email and password on the device when you make the purchase and then hit invite and you're good for this part next what you want to do is plug in your phone because we're going to be running this on our phone and but before you do that one thing is that the sandbox tester that you just added you want to add that as a tester to your app store app in on your phone so go into the settings of your phone and then you're going to go under app store and then if you scroll down you're going to see sandbox account so i've already signed in with the sandbox tester account that i created but what you're going to do is just tap on that and then sign in with the sandbox tester that you had just created okay now we are going to go into back to xcode we're going to run the app on our phone now sometimes if you get stuck here just getting your phone to connect and getting the app to be able to run on the phone make sure that sometimes you need to restart your phone i've had to do that restart xcode restart your computer make sure that you have the latest version of xcode or at least that the um the ios version matches the um the iphone version that you have on your device so all those things matter if you are able to run your app on the device great so you're going to see something like this and what we're going to do is tap on a paywall so actually let's just flip here okay so i'm going to tap on the paywall and i'm going to buy something so let's hit one month so here under the details you can see for testing purposes only you will not be charged for confirming this purchase just make sure that the count is your sandbox tester account i'm going to go ahead and subscribe i'm going to type in my password and hit sign in all right so that's done and we'll make sure that this works you wait a little while okay so now you can see that the call to action is gone and now when i tap on one of these meditation cards the paywall doesn't come up and nothing happens because we didn't actually program the buttons to do anything if if they have a subscription and now if i go to the account tab see it's pro if i hit restore purchases nothing goes wrong i'm still still subscribed and the reason why you want to use a sandbox tester account is because you can actually go back to app store connect and you can delete that purchase you can you can also do other things with it such as play with the subscription renewal rate so it's going to be simulating a month per every five minutes and this is going to allow you to test what happens when you know the next month rolls around without having to actually wait 30 days you can reset purchases and so on and so forth and also if you go back to the revenue cat dashboard let's go to overview you'll see that if you flip the switch the sandbox data you'll actually actually see that that just happened and then from these transactions here you can see that i tested the same thing about nine hours ago and each of these transactions they happened five minutes apart because that is the monthly renewal rate and it's simulated for five minutes and you can see that this check box indicates that that is a renewal if you're interested to see more revenue cat tutorials make sure you drop a comment below and also check out the playlist above for more indepth revenue cap tutorials like how to decipher the charts how to do single inapp purchases and more and if you want to see future revenue cat tutorials make sure you comment below and let us know thanks for watching i'll see you in the next video