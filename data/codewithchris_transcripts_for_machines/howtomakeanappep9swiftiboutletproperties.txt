hey guys welcome to lesson 9 of how to make iPhone apps with no programming experience and in this lesson we are going to look at IB Outlet properties and how to expose all of the elements we added to the storyboard to the view controller for manipulation in the last two lessons you learned a lot about Swift classes and you learned about UI kit so let me point out to you how we've been using uiit all along so in building this storyboard we were looking through this objects library in the lower right hand corner here well all of these elements are actually part of UI kit these are all classes in kind of like a visual form so when we drag it onto the storyboard uh just to remind you we added a button here we added two two UI image views we added a big UI image View at the back and the button is a UI button and these image views are UI image views so if you bring up the UI kit reference and you search for it you'll actually find the UI button class here and if you search for the UI image view you'll find it as well you know these two classes are prebuilt by Apple for us to use so that we can basically create buttons and display images very easily in our apps without having to code any of that behavior ourselves and when we're setting the attributes let's say I'm going to click this element here and in the inspector view right here you know you can set the background color you can set the alpha you can set the text what the images all of the stuff that you're configuring here you're actually setting properties of of that object when you run the app the information in this storyboard is going to be used to create objects that the storyboard specifies so in this example when we run the app it's going to take a look at the storyboard and this itself is a UI view object first of all uh and we've got a background UI image view object it's going to create two more UI image view objects to display the cards it's going to create a UI button object and I think we actually have another UI view element to contain these two UI image views so let me open up the document outline it's a little more clear here so you can see this is the entire view this is a UI view object if we search for UI view okay well we go from the very top there it is so it's a UI view object okay and then we've got a UI image view object and then this card container view is another UI view object which contains two UI image view objects and finally a UI button actually a a play button container which is a UI view object which contains a button object the UI button object so that's kind of how our user interface is constructed and when the app is run this information is going to get turned into objects of those classes along with all of the configured properties here the objects that are created will have the properties set according to what we've configured here in interface Builder Okay so this is consistent with what we talked about in the classes lesson when I said that ex an xcode project is just a writing a bunch of classes which gets turned into objects which does the interacting with each other it's just that for the view instead of writing code in a class you are visually doing it in a storyboard which gets turned into objects and you know what you can actually just forego the storyboard later when you get more familiar and you get more advanced with things you can foro the storyboard completely and you can use Swift code to create all of these classes sorry create all of these objects and add them to the view instead of describing it with a storyboard okay so now let's take a look at the view controller class viewcontroller.swift and now you will understand what all of this code means because we went over it in the last two lessons so the first line is import UI kit so import is a keyword which allows us to use all of the classes in UI kit so that's why this import statement is here and you can see here that this is a class declaration for a class called view controller and it subclasses UI view controller UI view controller is actually a class from UI kit so we can search for it in here so there you go and this is a class that Apple provides for us to use to manage the UI view so we don't actually have to code up the UI view controller or the UI view those classes are provided for us and in this view controller class we can see that there's are two methods both are overridden from the super class and that's view did load in here it calls the super classes view did load and here we can provide any custom functionality uh and this method is automatically triggered when this view is created and attached to the view controller for management and then there's another overridden method did receive memory warning uh and then it also calls the super classes did receive memory warning we most likely don't have to worry about this too much but we can manually free up memory here if we need and that's basically it this is kind of like your base view controller so we kind of have a divide because our view is specified through this visual interface Builder and the view controller is described with swift code here so how do we merge how do we connect the two so that the view controller can actually manage these objects that will be created by the storyboard so we can do that that using IB Outlet properties we've talked about properties before in a previous lesson IB Outlet properties are nothing more than regular properties except that they refer to elements that you have declared in the storyboard so there's a very easy way to declare an IB Outlet property and connect it to one of these elements that are in the storyboard so all we need to do is go up here to these view buttons right now we're looking at the standard editor you can actually change it to something called the assistant editor and I'm going to click that when you do that it changes the view into two different panes I'm just going to close this document outline so we get a little more space I'm going to close this tab as well just give ourselves a little more space here and what we want to do is on the left side we want to look at our view in the storyboard and on the right right hand side we want to look at the view controller class and all you have to do is let's say if we want to create an IB Outlet property for this first image view all you have to do is hold down control on your keyboard and then click and drag and this blue line will form and you want to drag it right underneath this class declaration where you would normally declare your properties for that class anyways so when you drop it or you let go of the mouse button it'll pop up a little window and you can see that we can specify a name and we can specify a type cuz with property declarations you have to declare what type of data it'll hold right and this type UI image view specifies that that property is going to be referring to a UI image view object so I'm going to give it a name I'm going to call it first card image View and for the storage type you can just leave it as weak uh there's another option for strong but we're not going to go through that now because it will require a more advanced understanding of how the memory management works behind the scenes and we're going to go through that later on however if you want to read about it now I'll provide links in the so that you can do further research into that if you would like but for now you're not going to need to know the difference then you want to click connect so what happens is this keyword IB Outlet is created and then weak is referring to that storage type we talked about and then this VAR is starting the property declaration that you know and that we've done in the previous lesson this is the property name you know followed by colon and then the type of data that it's going to hold and this exclamation mark is something that we haven't gone through yet but we also will not go through that in this video and again I'll provide a link at the bottom if you want to do further research into that but it's probably going to confuse you more than it's going to help right now okay next I'm going to do the same thing with the second image view I'm just going to drag it right below this one I'm going to call this one second card image view uh what else will the view controller need to manage it's going to manage the button so I'm going to click and drag it there I'm going to call this the play round button oops I called it a bron accidentally and now I'm actually going to show you something that a lot of beginners do by accident and it ends up crashing their app so I made a typo so naturally you'll want to delete this right and you'll want to try it again right and this time you're going to call it play round button however what actually is happening behind the scenes is that now your play button is connected to two properties it's connected to this playround button but it's also connected to the typo property that you just deleted and if we don't disconnect it from that deleted property when you run your app it's going to crash because it can't find that property so what you want to do is go back to your storyboard and if you have a a mouse with two buttons you can just rightclick or if you don't have if you have a single Mouse button you can hold down control and single click it and then you'll get this menu as well so if we scroll down to referencing Outlets you'll see that it's connected still to playr Baron which no longer exists so we have to click this x to break the connection and now it's only connected to playround button okay so that's really important because I see that mistake being made a lot and um people don't know why their app is crashing okay the last thing we want to connect is this big background this big UI image view so I'm just going to do what we've been doing here background image view okay and you can see also that here these little gray circles indicate that that these Outlet properties are connected to elements if we broke off the connection you would see a circle with an empty Center it doesn't have the gray uh filled in and that means that this Outlet property is not connected to any element in your storyboard okay and just like that we've created four IB Outlet properties all of which are connected to the elements in our storyboard in our view so now from The View controller we can write Swift Code just like we've done in the previous lessons when we were doing it in the playground how we were accessing uh the properties for our classes and assigning things into it and changing changing things we could do the same thing here so for example in my view did load now I can type self dot you know first card image view like that so now I'm actually referring to to this property but this property is referring to this element in my view this object and I can go Dot and I can access all of its methods and properties and I can configure them and change them through code and if you want to find out what kind of properties or methods they have you can always refer back to the UI kit documentation and just look up UI image view right here if you click that uh you can toggle it to Swift and then on the left upper hand side usually Apple will have some common tasks that you do with this object or this class and when you click it it's going to show you how to use it so that's really helpful to know at first you won't know many of the properties and methods of these uiit classes uiit is just so so huge and there's so many different properties and methods in each class so my advice is that you don't have to go and start memorizing anything as long as you're following the videos and we're going to be working with these UI kit classes you're going to see me use properties and methods of these classes so you're going to know it exists and a lot a lot of the times when I'm using a brand new UI kit class that I've never used before um I will have to refer to the documentation to look at what properties and methods are available with so that's very common as well and that's why the documentation is there so right now I am just going to very simply I'm going to change the title of the button just to demonstrate a simple configuration I'm going to go self. playround button and the UI button class has a method called set title and this is the method that we're going to use to change the text in the button here so so you're going to see that even though in the storyboard we specified the title to be play around after the storyboard gets turned into a view object and all of these guys into their own objects when it gets connected to the UI view controller this view did load function is going to get called and then this line that we're writing now this line of Swift code is going to access that UI button object that is created and it's going to call this method set title and then it's going to change text to play and here the next thing we have to specify for this method is a UI control State the button has a couple of different states we want to set it for the normal state so all we have to do is type UI control state do normal when we were working in the playground we were calling methods that had no input in them so normally those methods just looked like this the method name followed by two brackets but the more complicated methods actually have parameters that you need to provide and this is one of those methods so in this one we pass in to parameters so I'm going to run it now and you're going to see that the button has changed to play just like that so in this lesson I just wanted to demonstrate how we were using the UI kit classes in our excode project and I wanted to show you guys how to connect those elements that we added into the storyboard to the view controller don't worry if you feel overwhelmed with all of the properties and methods that are available to the uiip classes because as we use them throughout our lessons you're going to get to know them pretty well as for methods with multiple parameters as input and returning data to the caller we're actually going to go through that in the following lesson so you're going to be able to better understand a method call that looks like this okay so I hope you're following Along on your own xcode project because that's literally the best thing you can do if you want to really get the hang of things so try it out and let me know if you have any questions