hi my name is Chris and I'll teach you how to build an IOS app that displays YouTube videos of you're choosing in this example I've configured this app to fetch videos from my how to build an app in 8 Days playlist and display all the videos from there the great thing is that this app actually connects to the YouTube data API so if you remove or add videos to the playlist on YouTube it'll automatically get reflected in the app without you having to revise any sort of code oh and you'll also be able to tap into the videos and watch the videos in the app or to read the video description okay so let's take a look now at what skills you'll gain after completing this app all right so by completing this app you're going to learn how to work with the YouTube data API you're going to learn how to send and receive Network requests to and from your app and in doing so you're going to learn a little bit about iOS concurrency especially using async weight and through the process of doing this we're going to need to be able to debug and troubleshoot our network issues and we're going to learn how to do that using proxy man a free thirdparty tool when we get the data back from the YouTube API we're going to need to turn that Json and parse it into usable structures and instances inside our app so you're going to learn about Json parsing and how to do that and we're also going to need to store our API key securely in our xcode project so that it doesn't accidentally get leaked out now most of this networking stuff we covered in the iOS networking course so although we are going to go over that again in this video series it won't be as indepth so if you really want to learn that material well and you want to dive a little deeper check out the networking course all right now on the IOS app side we are going to use YouTube player kit which is a thirdparty library to be playing the YouTube videos in the app and we're going to import that into our xcode project using Swift package manager now on the UI side you're going to learn how to use Swift UI lists geometry reader async image progress view scroll views just to name a few but there's a lot more that goes into building the user interface and you're going to get extra practice just working with uis Okay so let's do a quick little overview of how this all works in case you're new to working with apis and if you have used apis before then this will just be a little review for you now an API is an interface that you can connect to to send and receive data to put it in simply terms you can think of an API as a collection of URLs that your app can access to retrieve data or to send data now there are many apis out there some are free and some are paid but most of the large platforms like Facebook X Spotify Google they all have apis for you to work with that platform or to retrieve data from it and there are some apis that are just data focused such as retrieving uh recipes or stock prices or weather data things like that so being able to use apis in your app is very very powerful so what actually happens and how do you use an API from your app well from your IOS app you send a network request to an API endpoint which remember is just a URL in your network request you specify what data you want to get back and in some apis you also have to identify yourself in the request this identification part is called authentication the API receives your request and it will authenticate you and also make sure that your request is valid note that not all apis require authentication but most do now if your authentication checks out and your request is valid then the API will go ahead and gather the data and send a response to your app the response contains the data that you requested and it's typically in a format called Json when your app receives the response it can read the Json formatted data and and then convert it into Data that can be displayed on the screen for the user to see this process of converting the Json data into usable data in your app this is called Json parsing all right so this is the process that you're going to learn how to do with the YouTube API now let's take a look at the YouTube API I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cdb C+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson all right so here we are the YouTube data API you can visit this page at developers.google.com youout I want you to go under this section that says add YouTube data and click references and here you can see all of the endpoints that are available in this API for our app to send a request to now remember these endpoints they're just URLs so let's take for instance search so let's look at overview first this describes to you what this endpoint does how you interact with it and it lists different methods different ways you can use this end point so let's take a look at list okay when you click into that you can see that changed uh to this section here and the common use cases okay so this is essentially searching YouTube for something you can search by here are some use cases by keyword which is probably the typical example right location Live Events or your videos for instance if you scroll a little lower this is the important part here this is telling you the exact URL that you need to hit so this is the endpoint and this is the request type so when you send a network request it can be one of a couple a few different types and get is the one that's typically used for when you want to retrieve data from the API okay so not only do you need to send a request to this URL but you need to specify parameters of your request remember remember if you're searching for something on YouTube what are you searching for you can't just say search right so here these parameters they describe what you can specify along with your request in order to tell the API what you want to retrieve or what you're searching for in this case so let's take a look here uh one thing I should mention here is in the parameter section there's always they're not not always but there may be required parameters so remember in that overview I said that the API checks a request to see if it's valid well if it is a required parameter then you have to specify this information the optional ones you can leave out but the required ones you have to include as part of your request so what is this required parameter okay so this part it's called part this parameter specifies a comma separated list of one or more search Resource Property that the API response will include set the parameter value to snip it okay so it's a little hard to determine what these things mean but what I'll typically say is to try it out you know the next step is to try this API let's set this parameter to snip it as it says and then let's see what gets returned and if it's not what we're looking for we can probably look at what else we can spe specify for this parameter now what I'm looking for is if we want to search for something specific like a keyword what where would we do that or what would we do so this is searching by location this is searching by event this is searching for uh types of Channel a specific Channel you can look for um how many results you want uh this is the one the CU parameter specifies the query term to search for so if you wanted to search for uh videos regarding let's say uh gardening right you would put the gardening keyword in this parameter and I'll show you a little later how you assign that data to these parameters but we're not going to dive that deep just wanted to give you an overview of the YouTube API and all the endpoints that are available and also how these endpoints work right so you learned about the URL this is the URL that you're going to send the request to this this is your request type and there are required parameters that you have to specify and then there are optional ones that would give more context for your request now the Endo that we are going to use in this video series um remember so this app it can display any YouTube video uh and it can play it in the app so for my use case I want to display a list of videos from a specific playlist because I have a YouTube channel and uh I have some playlists that I want to display the videos for so the Endo that I'm going to use is playlists right here and I'm going to use um actually I I believe it was I can't remember if it was playlists or videos at this point okay so let's take a look at this endpoint so here is the playlist endpoint get and if we take a look at the use case let's see it retrieves all playlists or yeah all playlists for a channel that's not what I want um this one is let's see the request that I use retrieves a specific playlist and I believe it was this endpoint because there is let's see the ID specifies being retrieved yeah this is what I used okay so instead of retrieving all all playlists from the channel I wanted a specific one so I had to include this parameter here which was called ID and this is the ID of the specific playlist that I want and then within that playlist I also got the videos after you complete this video series and you follow along and you learn how to use this YouTube data API feel free to change the way that the app works right you can Implement search in your app if you'd want just put a text field right when the user types something in call this um call this uh endpoint pass in the keyword that the user searched for and return a list of video results and the user can play it right in the the app right the what I'm going to show you in the video series is using this endpoint showing a specific list of videos um or you can create your own playlist or maybe create uh specific videos that you want to show and you might use another endpoint so feel free to customize the app but I would recommend especially if you're new to working with apis and networking to follow along in this video series wait till the end get comfortable after you've achieved the result and then customize it all right now let's take a look at authentication because this YouTube data API needs to identify who you are before it's going to give up its data now before I show you the YouTube authentication Part I I want to point out this line right here these endpoints they all have a quota impact and it tells you how much it costs to send a request and to get a response from this endpoint and that has everything to do with the authentication stuff so now let's move on to there now we're going to click on guides typically with API documentation all the authentication stuff is all the way at the beginning so here it tells you how to do that let's go into overview uh actually let's go into get off CR itial here and you'll see that there are two different types that you can two different techniques that you can go about this so one is ooth and one is API Keys now most apis will use one or the other sometimes both but uh if I were to throw out a number out there I would say 90% of apis you can use API keys let me explain briefly the difference between the two so API key Authentication is where you sign up for an account and they give you a long string of letters and numbers that is your key and when you're making Network requests to the API you're going to specify that key with your request and that way they can associate that request with your account and then they can also rate limit you they can see how much you're using the API if you're abusive if you are yeah mostly rate limiting giving you uh quota and things like that because you can imagine if it's unlimited and as fast as possible and everyone is hitting their API it could take it down or the server load could be too high so this allows them to control access to their API and if they find you to be abusive they could ban your key and you won't be able to make requests anymore so that that's how API key authentication works now o off is a little bit different this is where you typically see um a username and password box in your app and the user has to sign into their Google account and by doing that they are obtaining a token from the API and then you attach that token to the requests that you send so there's a distinction because now they're associating those requests with the user's Google account so no longer are you being rate limited it's not counting towards your quota it's counting towards their quota and also what you can do is different because now that Google can identify their Google account that user can perform things like liking a video or subscribing to a video you can call those types of endpoints right or perhaps following a user whereas API key access right all of your users they're using the same API key the one that's that you signed up for that's associated to your account so that's why with API Keys you can't really do things like liking a video or subscribing to a channel because the API has no idea who the user is they all they can see is that they can associate this API key to your account that you created now ooth is a little bit more involved so we're not going to use that in this video series we're going to go through the API key route and learning how to do that is going to cover the vast majority of apis that you'll encounter all right so now let's go on to the next step which is actually creating an account and getting our API key so all you have to do is follow this credentials page link and I'm going to open it in a new tab it's going to ask you to sign into to your Google account because I'm already signed in it's brought me into this credentials page of my project you probably won't have a project either so let me try to go back out onto the the dashboard and you might have to go through some onboarding questions or something like that but eventually you'll arrive at a page that looks like something like this because right here it's saying I have a project but you won't have a project so it might prompt you to create a new project you can go ahead and do that or you can click on this drop down up here um and then we can choose new project and we create a project together oh it looks like I cannot create a new project but this is what you would do so you would type in a project name you would uh I don't think this one matters too much so you can choose whatever and just hit create and then once you've created a project right go ahead and navigate to that project so for me that' be this one right here and you're going to click on credentials or sorry API and services and then you're going to go down to credentials and then once you get here this is where you can create the API key so you're going to say create credentials create API key it's going to generate one for you and then you're going to have to restrict it to the YouTube data API that would be good Let me refresh the screen did it do it for me there it is okay so this is the new API key that was just created I'm going to click into it and then I am going to set uh the restrict right here I'm going to restrict it to a specific API and the reason this is a good idea is just so that if the API key gets into the wrong hands I mean it limits what they can do to just using the YouTube data API and it's I think it's a good um it's a good practice to not just give free reign to everything restricting things and um removing options is always good especially if you don't need those options because it limits what can um it limits any unexpected Behavior same thing goes for programming right and uh I wouldn't set restrictions on that you I mean you could do this but it's going to get it might interfere with your testing especially if this is your first time so let's just choose none restrict the key to the YouTube data API there's your API key right there you shouldn't be showing this anyone uh I won't be using this key so don't try to copy it and use this key I'll probably delete this after but go ahead and save it and there you go you have a valid key that you can use and you're going to be using this key inside your iOS project all right now we're set all right now we're ready to start using the YouTube data API in the next lesson we're going to build a test project to connect to the API and retrieve data from it if you like this video please give it a thumbs up and also comment down below what you're most excited about learning in this app series thanks for watching and I'll see you in the next slide lesson in the last lesson we went through how to connect to apis and we reviewed the YouTube data API we also created our API key if you missed all of that check out the playlist right over here now we're ready to start retrieving data from the API let's Dive Right In All right so let's test out getting data from this API now before we get into xcode to try this out there's an even easier way that we can test out this API right from within the documentation they have this thing called an API Explorer and you can test out the endpoints right from this panel now all you have to do is make sure that you're logged in to your Google account in the upper right corner and this is the same account that you created your API key uh with in the lesson one remember how we had to log in to our Google account and come here create a project and then create an API key what's going to happen as long as you're logged into the same Google account is when you use the API Explorer it's going to grab that API key from there and use that so let's test out the endpoint now we're actually going to use this one playlist items endpoint because in the previous lesson I talked about using the playlist endpoint but this one actually just gives you information about the playlist itself so playlist items this is the one we want to use so as you can see this one this is the URL that we have to send the request to this is the request type and this is the only required parameter and you can specify different levels of detail that you want to retrieve now the reason they do this is because for your purposes you might not need all the information and in that case you can specify uh perhaps a lower level of detail and that would save bandwidth right why retrieve more information than you need you're just it's going to take longer it's going to take more bandwidth and so on and so forth so I've figured out that for this app I need the thumbnail the video ID to display the video obviously thumbnail to show the image I need the title in the description and that's about it and snippet is the level of detail that I need it contains all of what I just mentioned now the other parameter I have to specify is the playlist ID because I want to retrieve all the videos from a specific playlist now when when I first used this endpoint I made the mistake of putting the playlist ID into this parameter but it didn't return anything and I realized that oh I'm supposed to put it into this one so they'll make the same mistake now let me show you how you can get the ID of the playlist that you want so I've got a playlist right here that I want to use and keep in mind you can use any playlist that you want so everything after this equal sign right here and before any Ampersand that is the playlist ID so your url might have something like this let's say NT equals one uh two and whatever so between the equal sign and the and sign uh after list equals that is your playlist ID don't worry if you you'll find out really quickly if we're if it is the playlist ID or not because if you don't get any data back from this API call then you'll know that that actually wasn't the playlist ID okay so that's my playlist ID I'm going to copy that and then in my API Explorer let me full screen this and maybe I'll just make the text a little bigger so it's easier to see under playlist ID I'm going to paste that okay and I have to specify a part here remember this could be content detail ID status or snippet so snippet is what I need put it there and you can also see how it changes the URL that you're going to have to uh send a network request to if you take a look this might be interesting for you this is the end point right that we're sending to um hit the API sending a request to and then the data that I specified here in the parameters is it's all here look part equals snippet playlist ID equals that ID and then key equals your API key now there's no text box to put in my API key here so this is pulling from your key that you created here that's why you have to make sure that you're logged in to the same account and uh because it's going to go grab it from there okay I'm going to uncheck Google oo I'm going to hit execute if everything goes well you should get a 200 response which means that it was successful and then you get all this data back now this is the Json formatted data that was telling you about that comes back from the response from the YouTube API and it's up to us to turn this data remember that process is called Json parsing right to turn this Json data into usable data within our app you're going to see how to do that in few lessons in the series for sure but for now I just want to take a look very quickly at the data that gets returned and make sure that I have the information that I need so here I can see that I have the title of the lesson the description of the lesson the thumbnails um image URLs I have the video ID there perfect and then this is for lesson two and you know so on and so forth so I have everything now if you didn't get this response maybe you got an error or something like that I would double check that part equals a snippet spelled correctly I would make sure your playlist IDE is correct maybe perhaps you grabbed the wrong segment of the URL there um and then I would also make sure that I'm logged into the right Google account that has access to the API key and then try it again hit execute now if this doesn't work for some reason you can't get it working don't worry remember this was just a quick test the the real test is to be able to do this inside inside xcode right inside an IOS app so that's what we're going to do next don't worry if you didn't get this part this was a quick test uh of the API we are going to now start our xcode project we're going to start a test project okay so this is not going to be our real app what I like to do when I'm trying new things is to just open up a new xcode project try something out make sure I can get it working before I integrate it into my main project right so that's what we're going to do here we're going to create a test code project and we're going to try this out all right so let's do it I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson all right so let's create our xcode project so I am going to do this and launch a new xcode project okay under iOS let's choose app uh let's go next okay I'm going to call it test YT API this is not our official app it's just going to be a test interface is Swift UI language is Swift storage is none all of this is unchecked let's click next I don't need to create a get repository I'm just going to create this in my desktop because it'll be a throwaway project okay let us do this now just make it a little bigger so we can see and then what we're going to do is send that API call right when this launches from here so I want to add a task here task and open up a pair of curly brackets and in here we're going to make the network call and print the results remember I'm not going to do things the best way I just want to make sure that I can connect to the API from xcode um receive the right data back right we're we're testing out the API and this is not necessarily where we would do things as well in our real project again this is a test I'll explain to you what the task is a little later I'll connect all the dots for you but for now we're going to do it in this little task block so I want you to type that out and then let me type out some uh code statements and walk you through not code statements but some comments and walk you through the steps that we're going to take all right so first we're going to um Define the the endpoint URL with parameters all right so that's the URL that we're going to send the request to we're going to create a URL instance we are going to create a uh URL request instance that's the thing that we're actually going to send and then we are going to uh send the request with URL session that's a mechanism for us to do networking with and then we are going to um print out the response okay we're also going to H have to handle handle errors okay so so let's try this out now first let's define the endpoint URL with parameters so if you take a look back at the API Explorer here you'll see that this right here contains everything we need except we have to insert our API key right there so this is essentially the URL that we have to hit it's already written out for us okay so that's what I'm going to take now if one thing I want to point out which I'm not exactly sure why if you take a look at this endpoint uh domain it says youtube. googleapis.com but if you take a look at this it's googleapis.com youout I've used both they both work I mean this would probably be a little safer to use because this is in the official documentation whereas this is in this API Explorer maybe it's just not updated so actually let's just use this and then we can build it together we can build up that URL just so you also know um you have an idea of how it gets built up so I'm going to declare a constant I'm going call it URL string now keep in mind this is not how we are going to do it in our real project I'm just going to write out the whole string here including the API key um and all the parameters so to include parameters you put a question mark and then from that point on it's parameters and then the format to specify parameters is going to to be parameter name equals parameter value okay so what is the first one we should specify how about part since part is required anyways so we're going to type part equals and remember you can specify one or more of these and it tells you to specify more you would put a comma in between them but we only need snippet so I'm just going to put snippet now to specify a second parameter you put Ampersand and then the same parameter name equals parameter value format okay so what's the second parameter that we want to specify that's playlist ID you have to follow it uh based off the capitals as well so lowercase p playlist followed by uh big I ID now equals what is the playlist ID and pull this screen up again and I'm going to grab my ID from here oh now this actually makes sense if you can see the URL you can see playlist and then there's a question mark right which means parameters from now on list is the parameter name equals and the parameter value and then the end of the parameter value is Amper sand and then second parameter and so on and so forth that's why I say grab everything after the equal sign but before the Amper sand because that is just the connector for the next parameter all right so that's my playlist ID so let's put it right there I also need one more parameter let's put the ampers sign and this is key equals my API key now I keep saying this because I don't want someone to watch this and say Hey you know you shouldn't just put your API key there I know again this is a test so this is how we're going to do it right now when we work on the real project we will secure the key so let's go back and into our key here I'm going to just show my key and this is our test key right we're going to put it right there so that is the URL that we're going to send our request to and uh this URL contains all of the request parameters and the API key has everything we need so here let's create the URL instance let URL equals URL and then we are going to use this one here where you can just pass in the URL string but keep in mind that this creation of this URL instance it may return like it may not successfully be able to create this so we have to check if you are familiar at all with swift if you Tak in some courses before you'll know what optionals are and creating this returns an optional URL instance which means it may not be successful so we have to we have to check for that first so one way we can do that is we can say if let URL equals URL right and what this does is it checks if that is not nil meaning that it was able to successfully create it then assign it to this constant and then we'll move that stuff in there and then we can use it but if it is nil it's just going to skip and come down here and it's not going to run any of this code if it's nil that means it wasn't able to successfully create the URL string and we can't go on anyways okay so now let's create the request let request equals URL request and we're going to pass in this URL instance that we created this one right so this is what we created this checks that that isn't nil and then if it's not nil if it's not empty it assigns it to this and then we are passing that into the creation of our request right now that we have our request in this constant we are going to send the request with URL session okay this is URL session is what we use for networking so URL session shared there's a shared uh session object that we can we can use we don't have to create our own and there is a method called called data for right so this is going to fetch the data for a given request look it all connects we can pass in this request now into this method but take a look there are two keywords there is async and there's throws those are two different things that we have to U deal with and we have to observe so let's talk about throws first this keyword indicates that running this method you know or executing this task May potentially create an error it's going to throw an error that's where that word comes from and you have to handle the error because you want to respond to it right if something bad happens you want to take note of what happened and then if it's something that you can recover from recover from it if it's something you cannot recover from then maybe you display a message to the user and say sorry something bad happened or like this happened we cannot continue please try again type of thing uh or you can choose not to handle the error and just ignore it that's perfectly reasonable for some errors okay so that is what throws mean and I'll show you in a second how we can handle that now async is another keyword that indicates that this method is asynchronous now we have to take a little moment if you haven't done any networking before let me just quickly describe it to you with this scenario okay so asynchronous is something like this let's say that you are waiting for a package at home it's a very very important package they're not going to leave it at your door let's say it's a new Macbook you bought a new Macbook you're waiting for it to come and so you're waiting at home it's going to be sometime today but you don't know exactly when it's going to get delivered but you really need to go buy buy some milk right or maybe buy lunch let's say you have to go buy lunch and you have no food at home you're starving so what do you do you can you can leave and go buy lunch yourself but there's a chance that that MacBook may get delivered and you're not home you're going to miss it and that would be bad well what do you do well turns out you have someone at home could be a mom could be a dad could be a brother could be a sister could be your spouse you ask them hey can you go pick up lunch because I need to stay home and wait for this MacBook right so you send that person to go bring lunch and that person goes and gets lunch while you can stay home and wait for the package that is exactly what's happening here so asynchronous means that just like you're sending someone to go pick up lunch you are sending a background task or background um helper in in computer terms they call it a background thread you're sending that to go perform this network operation go fetch that data from the YouTube API while I remain here responding to user interaction and just like keeping the lights running just you know keeping everything operational and when you get the response from the YouTube API then come back to me and let me know what that data is and I'll deal with it now why is this important just like how you had to stay home and wait for that MacBook if we get the main thread to go and fetch the data and send off the request and wait for the data to come back then there will be no one to keep the lights running and things operational it won't be your app won't be able to respond to user interaction or do anything like that okay so that's why with these sorts of network tasks or some data tasks you want to send a background thread to do just like how you sent a helper to go pick up lunch that's what as synchronous means okay now that you know what these two keywords means let's handle the throws one first because there's a special syntax that you have to write in order to capture the error or potential error that can happen Okay so let's finish typing this out and then we're going to deal with these two keywords one at a time okay so data for and we're going to pass in request okay so when something May potentially throw an error like this one what we do is we have to put it inside a do catch block so you do something right this is you do the thing that can throw the error in between these brackets right here so that's what you're going to do and then you're going to catch any potential errors right below it and then you can print out any error that may happen it's going to just put in there now one more thing you have to do just to indicate that something uh that you understand that something can throw an error is you put a try keyword in front of it right so you're going to do this you're going to try this and then you're going to catch any potential error and you're going to printed out all right so that handles the throws keyword for running this uh method now let's talk about the async keyword that we talked about we want to send this task off off in the background to grab the data and come back when it does so what we have to do is put the a wait keyword so what this does is it basically says before we execute any of the code below this line of code it is going to wait for this to return Why do we want to do that because let's say down here we are going to print out the print out the response okay actually here so we're going to put handle error right here and print out response I'm going to put that right here right right we wouldn't want to print out the response before this comes back with the data right because then there'd be nothing to print out so by putting the await keyword in front of an asynchronous method it is going to wait for this to happen in the background finish doing its thing come back and then we are going to print out the response what are we going to print out we have to assign the data that gets returned into something first just like how we did here like let URL equals that let request equal that so we're going to say let data comma response equals that now why did I do this and what is this this is called the tupal and it's basically a collection of variables so the reason I did this is because this um what gets returned is two things one is the actual data right the Json data and the other is the response they're two different things and they will get assigned accordingly to this to data and response so now when I print it out I can print out the data and I can print out the response and it's not going to run this code until this comes back because of this await statement right here okay and now I can explain to you what this task uh keyword is so the task keyword is for running asynchronous methods or asynchronous code which is what this is right so it's just a special construct to be able to run code in the background you can think of it like that so now we're all set up after writing all of that code what we're going to do is run this project it is going to execute this code as soon as the simulator launches and then we're going to see some output whether it caught an error or we actually see the data in the response so let's take a look at what's happened here if I open up this console area and if you don't have this console area it's actually just it might be minimized you just hit that button right there and you might not have these tabs so you just just click these buttons in the lower right corner and uh open these tabs okay so there are two things to to notice here this this is the data and we can't see the data it's just telling telling us the size of the data that's what happens when you try to print out data but we're going to have to parse that Json or convert that into usable data in our app we're going to do that a few lessons later but let's take a look at the response because this can tell us a lot as well okay so if you look for a status code status code 2 200 that's good remember back uh back here in the API Explorer ah I just I think I oh here it is okay see code 200 that means that this is a server code for successful server code 200 you can Google it server codes 200 okay it means okay um there are there are more codes let's take a look at what we get here now you can't actually see the Json data but you can see some details about the response but status code 200 that is a good sign that means that the API accepted our API key it accepted our request as being valid and it returned an okay response let's take a look at what happens if we just change some of the data so let's say I mess up my API key where's the key right here I'm just going to delete a couple of letters from it and run it again and see what the status code is this time it's 400 that's bad 400 is is not good okay so it probably detected that a API key is not valid right so bad request perfect that's awesome this exactly what we expected let me undo so the API key should be valid let me just mess up my playlist ID a little bit see how that changes things okay it's a 404 well what's a 404 not found it couldn't find my playlist because I messed up the playlist ID right so this is really good that means everything is working as we expected to but wouldn't it be great if you could actually see the response right here we're just looking at status code of the response well sometimes when you're programming uh and you're working with networking calls like we are doing now it'd be super helpful to take a peek into what the actual contents of the response and the requests are and that's where you use a thirdparty uh Network debugging tool so I'm going to show you how to use proxy man which you can use for free with your IOS app development and then we can take a peek at the actual response and we can see the data so let's go ahead and download and install proxy man go ahead and visit proxy man. and you can download the Mac App keep in mind you can use this for free and there are paid features so you can look into that but I recommend just start for free for now okay so I'm going to launch my proxy man now yours might not look like this um because they'll probably be onboarding for you you probably have to walk through a few steps first but one important thing for you to do is to go down to a certificate and you're going to have to install a few things so install certificate on this Mac first and then install certificate on iOS and you're going to choose simulators but it helps if you actually have the simulator up and running so in your xcode project just run your project so you have the simulator open and take note of what it is iPhone 15 Pro because it's going to be installed on this simulator so um yeah this is what you do choose okay here choose simulators and then it is going to first of all this was installing it on your Mac if if you haven't done that you have to click this button and then it should say found the simulator because you have it launched so it's looking for it it should say it's found and and then you are going to choose just prepare simulators and then it's going to ask you to reboot it so you click this button and it reboots the simulator with the new certificate and this will allow proxy man to stand in between the requests that your simulator makes and receives and that's how you're going to be able to see the data right so what you're going to do sometimes you have to restart xcode it's it's a little finicky if you don't see what I'm showing you then try restarting xcode as well as the simulators but if everything is set up correctly then what you should be able to do is um if you run the app now and you open up this apps tab you should see it appear here so there it is that's my project right and let's see here um that's not this one okay so what I can do is right click and pin and it'll show up up here and you can see that it sent a request to this domain it was okay but I need to resend the request to see the content okay so let me run this project again and you'll see a second request being made and this time you can see everything take a look at that so the this side on the left is request this side on the right is response so for the requests you can see um see for the query you can see all of the parameters you specified so there's key there's playlist ID and there's part and that was all from the URL but the response is the interesting part right you can see the uh Response Code here it's right here 200 but if you take a look at the body right here this is the data that was returned in the response remember when we ran it in the xcode project this data right here we we printed the data right and it show just showed the data size well with proxy man we can actually take a peek into what the data is here here's all the data so this is a very helpful tool to use when you are working with network calls now if you are having trouble seeing what I'm seeing I would recommend that that you go through the troubleshooting steps um let's see here when we chose this there was some troubleshooting steps you could try and uh launches some documentation for you to um try things out so this is what it looks like yeah so just go through this and try these troubleshooting steps okay um not the end of the world if you can't get this working because as you can see even without proxy man we're able to send the response or sorry send the request and get the response and the status code 200 and all that all right so again this was a test project this is not the way we're going to do things like this we definitely want to secure the key um and do things a little more elegantly not just everything in this content view so we're going to create a separate component to handle the network stuff uh and we'll do all that all right but this was a huge success going through through this part and I hope you learned a few things all right now that we know we can connect to the API and retrieve data from it we're ready to start our actual xcode project for the app in the next lesson we're going to start a new xcode project we're going to store the API key securely we're going to start roughing out some of the screens as well as some of the components that we'll need for the app if you're enjoying the build so far please give this video a thumbs up and if you were successfully able to connect to the YouTube API please comment down below and say I I did it all right thanks for watching and I'll see you in the next lesson in the last lesson we were able to connect to the YouTube data API and retrieve data from it if you missed it check out the entire playlist right over there in this lesson we're going to set up our xcode project and all of the views and the models all right let's Dive Right In first let's start with a little bit of an overview of how our views will be laid out I also want to explain how our data model is going to look like especially as we're going to interact with the YouTube dat so first off we're going to start with the home View and this is going to contain a tab view with additional views now I know in this demo we only have one tab but this is set up with the intention that you can add additional tabs okay so the home view will house the tab view itself and then the tab view will contain instances well one instance of the feed View and this is that scrollable list of thumbnails that you see now talk about how the feed view is going to get the data we're going to create a separate component let's call that the data service that is going to be responsible for all of the code that interacts with the uh YouTube data API and the reason for this is so that we can keep it all in one place and it'll be easier to maintain and also to troubleshoot and debug so when the feed view loads it's going to ask the data service for the list of videos to display and then the data service Serv itself is going to be sending that Network request to the YouTube data API so in the previous lesson when we looked at what got returned it was two things really there was an overall playlist structure and then within that there were individual video objects like dictionaries that contained the video data so we're going to be parsing that Json into a single playlist instance containing multi multiple video instances each one representing the video data if you don't remember or you're a little bit confused don't worry when we get to that part of sending the network requests getting the data back and parsing into Json I'll dive into more detail about how each piece or part of the Json translates to different properties of the video and playlist instance so once the data comes back we are going to see a list of data in the feed view so next we have to f the video thumbnail image data because that image data doesn't get returned from the API instead we just get URLs to the video thumbnail so we are going to use async image to asynchronously that means in the background download that image data for display and we're going to create a separate video row view as a reusable View and the feed view which has a list component is just going to create as many instances of the video r r view as it needs for as many videos as there are and each video row view will have the async image which will download the thumbnail all right and so now we're going to have a feed view that looks pretty good but we have to let the user tap on a video to view the video itself right so that's why we're going to create a video detail view that will slide up as a sheet from the feed view when the user Taps on one of those video row views inside the video detail View we're going to show at the top the uh video player and then below it we're going to show the description for the video and that data will have already so at a high level that's how the app is going to look like there is a lot to learn here let's dive in I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson all right let's create our xcode project so I'm going to choose app under iOS and I'm going to name this YT API app and make sure interface is Swift UI language is Swift we don't need any storage options we don't need any tests right now and I'm going to just create this on my desktop uh and Source control I did not check on okay I'm going to change this to the simulator so that we can launch it in the simulator and not on my device all right and now we can get started so the first thing I want to do let's bring up the diagram again we have a couple of distinct things I like to separate things into folders here so we have our views which is home view feed view video detail View and video row View and then we have the data service which is a separate helper if you will and then we have these representing our data so this would be our data model or just model okay so let's go ahead and create those folders in our exod project so I'm just going to oh so one thing that I like to do is to rename this so you know when we name the project YT API app that translates to this bundle identifier YT API app but the entry point they always add app at the end so one easy way you can do is to right click and refactor and you can change it all in the same place so you might you might want to do something like that maybe we'll just call it YouTube API app okay so that renamed it in a bunch of different places you can press command B to just make sure sure that it still builds so let's create the folder now so I'm going to right click going to say new group and let's call this services and then we are going to create another group called views and then we're going to create another group called Models All right so let's just do that all right so so I'm just going to stub out all of the files that we need and stubbing out just means creating them perhaps uh adding some initial code but we're not even going to do that let's just create the files and then we'll focus on um just creating all of the scaffolding so let's call uh this is the data service right so we'll create that there and let's just create that initial struct and then for for the views we're going to say new file going to choose Swift UI view so first of all there's the home view right but the home view is essentially like we've got a view here so why don't we use this one as the home view so I'm going to drag this into the views folder and I'm just going to rename this again so refactor rename and we're going to call this the home view I didn't rename this one okay and then we also have the feed view remember this one contains the tab view right so we can oops Yeah new file Swift UI view we're going do feed View and then we're also going to have video row View and we're also going to have video detail View and then the home view we're going to change this to a tab view right and the tab view is going to contain an instance of the feed view so that's the basic structure of our project and we've got let's just create the two models now so these are going to be swift file because they're not views so one is video just going to create this struct and then we are going to to create another one for the playlist so let's bring up the diagram for a second and double check that we have everything so we have the home view which contains the tab view contains the instance of the feed view the detail view is going to be coming up as a sheet in the feed view we've created the video r view which is going to be um inside of a list component or List view sorry in the feed view we have the data service we created and then the video and the playlist models okay so we're ready to start implementing some of these things in the next lesson so one thing I would recommend is if you're really trying to learn some of this stuff it's best to follow along and try this out on your own computer or laptop just open X code start the project and follow along best you can you can always download the project if you get stuck I'll leave the link in the description below to download the project all right now that we have our X Cod project and our views and models roughed in we can start on the data service in the next lesson if you're enjoying the build so far can you give this video a thumbs up now I always preach to follow along and that's the best way to learn so if you are following along building this app on your own computer or laptop please comment down below and say I'm doing it all right thanks for watching and I'll see you in the next lesson in the last lesson we set up our exco project as well as all of the views and models if you missed that check that playlist out right over here in this lesson we're going to be connecting to the YouTube data API and retrieving the data and because we've done this already in a demo project this should be pretty straightforward the only difference is that this time we're going to securely store the API key let's Dive Right In first let's review the endpoint that we're going to hit with our app so on the YouTube data API and I'll link to this document Below in case you lost the reference to it we're going to be hitting this endpoint playlist items essentially we want want to list out all of the videos for a certain playlist now this is the URL and it's going to be a get type of request and the required parameters so this is what we must specify is going to be one of these like what level of detail do you want for the video items that get returned in the response and through my testing in building this demo I've come to the conclusion that snippet is what you need now it doesn't exactly tell you what is included in each of these maybe there's an additional documentation you can search up somewhere but what you can do is you in the previous lesson when we tested out hitting the API you can just try out all of these parameters and see what you get back and see uh what you need now what you should be targeting is getting back as little data as possible while still satisfying what you need to do because you never want to return more data because that takes more bandwidth it takes more time and you know why would you just do that so snippet is what we need it's going to contain the title description the video image URLs and that's pretty much all we need to be honest now according to this documentation this is the only required parameter however we still need to specify the playlist ID otherwise what videos are we going to get back we need to tell YouTube this is the playlist that I want to get the videos back for right and this what's what sort of threw me off in the beginning I thought I would put the playlist ID in there but no you put it in there okay so that is the Endo we're going to hit now in terms of the API key that we need to pass in you should have signed up for this back in lesson one if you haven't just go back to lesson one and walk through that process and you can sign up for your own API key now we're going to jump into xcode and see how we can secure ly store this API key I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson first I want to talk about what storing your API key securely even means because there are so many different ways to do it and there are varying degrees of Effectiveness so first let's talk about not securing the API key which is what we did when we were demoing the uh API right in the previous lesson so we hardcoded the API key directly in the xcode project and that's bad because you may accidentally share your project with someone or put it on Source control so if you're not familiar with Source control like GitHub uh it is a way for a team to collaborate multiple people to work on the same code base so if it gets on Source control especially if it's an open source project or if it's you know who knows who has access to it right your key is right there and anybody can take it and abuse it so that's what you do not want now one level of sophistication or protection is by putting that API key in an external file so you do not include it directly in the xod project but it sits in a different file and then you have your xod project read the key from that file in this way when you put your project onto GitHub as you can see in this diagram the key doesn't go along with it the key stays in that file on your computer and then you have to manually share that external file with the key to whoever needs access right or that person gets their own API key and puts it in the config file and combines it with the excode project now the problem with these two methods is that ultimately your xcode project still needs the API key and the reason for that is because we are making the network calls to the API directly from our project or our app right so our project needs the key in order to access and authenticate against that API there's no way around around this right your xod project needs to know about the key so if you think about the App Store when your app is downloaded right that package that is downloaded has everything it needs to work right including the API key because ultimately your app is going to be using that API key to connect to any apis which your phone or sorry your app uses so it's still if someone tries hard enough and they know what they're doing probably can extract the key out from that package ultimately the most secure way to do this would be to not even make the API calls from your app you would set up your own API and your app would make requests to that AP to your API and it's your API that has the API key that then makes access to the third party API so in this example that would be the YouTube API and then it would get the data back from the YouTube API and then return that data back to the app right so it's almost like a middleman and which has access to the key so then that way the client which is your app will never see the key and then what you can do is you can have that app have an its own like user account system that the user needs to sign up for and authentic at himself or herself in order to even hit your API so you can see how far you can take this right and it really depends I think to me it depends how many people are using your app um and how critical it is that this API key never fall into the wrong hands at the very least we should put the API key in an external file and not inside hardcoded in the project this is just a good practice ice as you're building your app now in terms of setting up your own software and having your app never use the API key to me that is a later stage thing let's say your app picks up traction and there's a lots of lots of users using it it gets on the news and there you think there may be a risk that someone could Target your app uh maybe competition or whatever it may be to Target your app to try to bring it down because your business has taken off I think that's a good problem to have and then you would then think about how can I make my app more secure and then go through this process of setting up your own API so I wanted to go through all of that so that you can get an understanding of what it means to secure your API key in this lesson I'm going to show you how to put your API key in an external file so here are the steps we're going to go through we're going to create a config file in our xcode project and we're going to add the key to it we're going to set the project to use this config file and we're going to define a special variable in our pist to reference that API key and we're not going to do steps four and five because we're not dealing with Source control in this project but steps four and five they are the steps you want to do if you are putting this project into Source control because the G ignore file lists all the files that should not be put on Source control like should not be uploaded to GitHub essentially so steps four and five those are things that you definitely want to do if you are putting this project into Source control or GitHub and you're working on a team if you're curious about how those are done I would just Google how to use a get ignore file and it's literally just listing your config file like the file name inside that get ignore file which is essentially just the text file and you include that get ignore file with your exode project and then when you push your project onto Source control it's going to read that get ignore file and take note of all the files which it should exclude and it will not put those files into Source control so now let's dive into our xcode project and do steps one two and three so here's our xcode project let's start by adding that external file and this is going to be a configuration file so let's right click on this main folder here new file and at the top right corner you'll see a filter box type in configuration just type config this is the file that we want config configuration settings file now the important thing to note here is that you do not want to include it as part of the target here it's just make sure that's unchecked and then create because you don't want to include it right now you type in API underscore key in all caps and notice we don't this is not a variable or constant we don't put any Swift keywords in front of it this is more of like a text file now equals and we are going to break up our API key okay so there it is I'm going to copy it and I'm going to paste it in there and save the file next we are going to configure our xcode project to use this configuration file by tapping on the root node here tapping on project and under configurations here you can see there's no configuration set there are two different types of builds that we can create when we are developing and we're testing in the simulator or on our devices it's what's called a debug build a release build is when you create a build specifically to deploy or send to the App Store and that doesn't uh contain all of the extra stuff that's only used in the development phase of the app such as the bug symbols and things like that anyways for both of these uh debug and release build we are going to set it to use config like that okay now the third and final step before we can test this is to go under targets here we're going to go into info this is our pist and we are going to create a key that we can use to reference that value in the config file so at the bottom hit plus and then you're going to type in in all capitals AP iore Capital ke y press enter and the type is going to be string I don't know why it was a lowercase p because I think there was some autocorrect funkiness let's correct that and change that to capital P and then as for the value this is going to be a dynamic uh variable or reference and it's going to refer to the API key in the config file so what we're going to do inside our Swift code right here is we are going to go into this pist and grab the value for this key and the value for this key is actually pointing to this config file which we are not going to include as part of the project when it gets put into Source control and all that stuff this is our external file like we talked about before so let's test this out we are going to go into the home View and we're going to say on appear we are just going to print out the the uh API key see if we can reference it and the way we reference that info. pist is by saying bundle. main. info ditionary that's our info list and this is optional because it may return nil so if it can find it then we are going to search for the key um and we are going to try to retrieve the value because it has no idea of what the value is we know it's a string it's a type of string so we're going to try to turn it into a string and this is just try if it if it can't then it'll probably be um empty or nil uh we could provide a default value so yeah if there's if I can't find anything let's let's print can't find it okay just for our own our own debugging okay so let's try this out we are going to run this in the simulator and so it's running right now and we should see our API key print out there if everything is according to plan all right perfect it works so this this is referencing the info. P list looking for this key and the value for this key is referencing the config file API key right here perfect now let's move on to implementing the data service where where we're going to send off the API call to the YouTube API and to retrieve the data so in the data service file at the top let's declare our key as a private uh constant and we're going to call this the API key and we're going to handle this just like I showed you before uh bundle. main. info dictionary and we're going to try to look for API key as string and now I'm not going to give it a value like this if it can't retrieve it because I do want it to be nil and that way we can detect if the API key is present or not all right next we are going to create a new function called get videos and it is going to return an array of videos essentially I wanted to give back all of the videos for a given playlist right so we are going to make this an asynchronous function and I will explain what that means when it comes time that we call this and I'll explain what the async and await keywords mean all right so for now uh why don't we just return in uh empty video array and here we're going to implement that API call so first check if API key is is there and then we are going to uh create the URL create the request and we're going to um send the request and and then finally parse it so this really helps that we did this inside a demo back in lesson two right so we've tested that this works we know it works so we're going to say guard API key not equal nil else return um we can return an empty video list because I can't get anything ideally what you'd want to do is probably show an error message or something so you can return something as such and then capture it and display it to the UI but by doing what we we doing here you're returning no videos so the user doesn't know if there's actually no videos in that playlist or if something went wrong but clearly something went wrong because we can't get the API key right okay so coming down here we're going to create the URL and uh before we create the URL actually we're going to create it off of a string right and that URL string is going to look something like this so first let's go back to the um the documentation so that is right here and as I mentioned in the previous lesson we are using this Endo right here so we're going to retrieve all of the playlist items given a playlist so I'm just going to put that right there going to hard code that URL right here and we're going to add the parameters so one of the uh required parameters is this one part I mentioned before in lesson three why I picked s it because it contains what we need and then the other thing we want to specify is which playlist do we want a Target to retrieve all of the videos for okay so the way you find this is I'm going to choose my own playlist you can choose whatever playlist you'd like but if you go to someone's Channel and you go to playlist you'll see all of the playlists here I'm going to click on this one view full playlist and it's just this ID right here if you double click it it'll highlight the whole thing I'm going to copy that and I'm going to paste that in there and the last thing you have to add is the key so we're going to say key is equal to and we will just insert that right here API key and we've already checked that it's not nil so we're going to just force and wrap it here okay so now we can create the URL instance off of that string and now we can create the request so let's do that URL request and we're going to do it off of this one right here going to pass in the URL and and actually this one this one returns an optional this so This Could Be nil so we're going to say IFL URL equals URL just to check that it's not nil we're going to put all of this code in here that only executes if we're successfully able to create a URL instance so then we're going to do that in there and then sending off the request is a matter of um using session so uh if we say let let's create another constant right here just to make things more clear so URL session shared this is just breaking things up so it's easier for you to understand and if if you look at this one which is what we're going to use data like retrieves the data for a given URL request which we have created up here and it is both an asynchronous method and it also potentially throws errors so we have to address both of those things and the third thing I want you to notice with this method is what it returns to you it returns a tuple so it has two pieces of data it has data which is the actual data that is returned by the API and a response object which you can take a look at for any errors or uh the status code and things like that so that is the actual response and that is the data separated into its own um parameter so we are going to also handle that but first let's do things one at a time let's handle the throws part and then we're going to do async and then we're going to handle the data that gets returned so throws okay so let's pass in the request if calling a method May throw an error we have to catch it and the mechanism in Swift to do that is to it looks like this so you do something that may potentially throw errors which is this line of code you have to put a try keyword in front of it so we're going to try to do this right and then you have to also have a catch block and this uh displays or you can handle any errors that get thrown if it gets thrown so we're just going to print it out okay and this will reference the error that gets uh thrown up next let's handle the fact that this is an asynchronous method so in order to call the asynchronous method which means that it gets called in a background thread or a background worker so imagine yourself tasking someone else to do the work like you're giving someone else a task and have that person go and do the task and come back to you when it's done right you have to put the await keyword which which means that you are going to wait for that person that background worker to come back with the completed task before you continue and execute the rest of the lines of code below it so that's what's going to happen here now I do want to explain even though it waits for the background worker to do that task and comes back before we execute the next lines of code it is still good because while we're waiting for that background task to come back we can handle any sort of user interaction and we can also do some other things before we execute the next lines of code it's just that the await keyword tells the system uh do not run lines 33 and Below until that background worker comes back right and for things like this you do want to send it off as a background task because if you have the main thread which is you know the the main thread that is executing this code go and do that work there will be no worker to handle all of the user interaction and stuff and so it'll look like it's frozen so that's kind of the gist of it uh with any sort of tasks like Network requests or U database queries uh and you'll see when we do the uh thumbnail downloading for the images we're also going to send that as a background worker to go and do that right so that's using the async and a weight keywords um the fact that this is in asynchronous method will also come into play when we have the feed view call get video you're going to see how we use the await keyword okay so hopefully that makes sense if not I would uh recommend that you dive a little deeper into async and a wait search for some additional tutorials on async and a weight in Swift so you can understand it in a little more detail more than we have time to cover right now so we've handled the fact that it throws an error we've handled the fact that is an asynchronous method meaning background worker is going to go execute it now we have to handle the data that comes back and it's a tupal right so we are going to declare our own tupal to track that data so we're going to declare a tupal constant we're going to say data and response so you'll notice that this format looks like what we saw this method returns we're going to say equals this so if no errors get thrown when the background worker comes back it's going to assign the data to this and it's going to assign the response to this and then from here we can parse the data now before we actually parse the data let's try sending this request off and taking a look at it inside proxy man to make sure that it's happening uh so what we're going to do first we have to actually fire off this request so inside the feed view right here why don't we say on uh not on up but we're going to use task let me explain what that is so the task is a modifier that lets you execute a block of asynchronous code let me put that into layman's terms when the feed view appears it is going to run this code inside this task block as a background worker so we are going to say we're going to create a property up here to store the videos and this is going to be a state property let me explain what that means as well okay it's going to be an empty array in the beginning in case you haven't watched my 8day beginner Series where I explained what this what state properties are it's essentially when this value changes we want the UI to refresh so this starts off as an empty array there no videos right but when we send off the task from the data service right to retrieve the videos and it comes back and then it puts the video instances into this array we want the user interface to refresh and show those videos that's why this is a state property all right so let's fire off this task so we are going to create a new data service instance and I'm just going to chain it like this I'm going to call get video oh that should be an S we'll change that this should be get videos and notice that it's an asynchronous method and it returns a list of videos so asynchronous means we're going to have to send it off as a background task we're going to have to wait for that to come back before executing the code below it okay so we're going to say let videos equals that you know the return to list of videos let's call this let's call it returned videos right and then we are going to assign the return videos to our state property here self. videoos equals return videos okay so we can shorten this definitely but I wanted to break this up into two lines to explain to you the fact that this line of code will not execute until this has gone and come back with the data because of this await keyword right and while the main worker is waiting for the background worker to retrieve the data it can still handle user interaction and other things that it needs to do so that's what's so great about Ayn and await so we can shorten this by just putting this like this right and removing the need for this even right but I thought writing it like that would explain um the await keyword a little bit better so with the way we've set it up now if we run this in the simulator it should um it should execute this and then send off the network request and if our API is correct and our request is structured properly we should get a response so let's go ahead and open up proxy man and let's go ahead and take a look see this in action so I'm going to first run this in the simulator so that it'll show up on our list there it is I'm going to pin this one to the top and I am going to have to resend it hello world send it all right the status code uh is green this should be a 200 y 200 and we get the data back here you can see the root element contains an array of items so this root element we represent it with our playlist model we're going to model it off of that and then as for the items these are the individual videos which we are representing with instances of video obviously we haven't filled it out yet but that's what we're going to do so if you open one of these videos you're you're going to see that it has the snippet which is what we asked for in the API request and it contains the thumbnails the title um the description and the the video ID is also something that we need so inside resource ID here's the video ID and so those are all the details we need and inside thumbnails you can see that it has different sizes of thumbnails each each size has a different URL all right we're about halfway there now that we have the request sending out the data coming back all we need to do is parse that Json data into usable video instances in our app so that we can display it and we're going to do that in the next lesson and if you're enjoying this build so far can you give this video a thumbs up I greatly appreciated and if you were able to follow along to add your API key and to send off the network request drop a comment down below and say so far so good all right thanks for watching and I'll see you in the next lesson in the last lesson we stored our API key in a config file and we were able to successfully retrieve data from the YouTube API if you missed that lesson check out the playlist right over here so the first step is to fill out the properties of our data models according to the response that we get from the the YouTube data API so let's take a look again at proxy man and this tool is really helpful um especially because you can just send the request and look at the response and get this treeview and then you can kind of go through it like this um sometimes the documentation will have the response so this is the YouTube data API I know the API Explorer if you use this and you try out the request you're going to be able to see the response so here this kind of gives you an idea yeah so if you don't want to use proxy man to look at it you can look at this as well so this would be the playlist uh object or instance and this would be the items right and each item is a video if you click on that you can see these are the properties of the uh of the video actually let's use this because the text is bigger than we have here in proxy man we're going to start with the video itself so we're going to add the decodable protocol and this allows us to turn the Json data into instances of video uh using Json decoder so let's bring up the API documentation so what I'm looking at right now is a single video so we can see that it has an ID which is a string and this will be helpful for us because um we want to put these video instances inside a swift UI list and it needs to be able to identify between different videos so we are going to pick and choose the properties that we want to we want to parse essentially so there's going to be a a string ID okay and then there is going to be a snippet and inside is going to be a title it's going to be a description both of these we need and those are strings and then there's also going to be thumbnails let's first focus on title and description so again this is a snippet property and the snippet itself you can see these curly brackets right that represents a different um instance or struct or object whatever you want to call it all of it is representing the same thing so we're going to say snippet is going to be it's going to be a type of snippet and I'm going to make this optional in case it doesn't exist right yeah snippet and not Snippets okay make sure that the property is the same and I'm going to create another struct in here called snippet and it too is going to be decodable so inside the snippet is where I would put title in the description okay so these I mean all videos should have a title and description right but just in case they don't you can make them optional for now I won't let's just see what happens and then inside the snippet we have thumbnails what else do we need here uh we need the the video ID let's deal with that before thumbnails because there's quite a bit in here with thumbnails so let's do resource ID I'm going to spell it with a lowercase R like this um let's do that so then here I'm going to create another struct called resource ID that is decodable and the resource ID has well the only one I'm really interested in is video ID and it's a string and I know that all videos must have a video ID okay so let's deal with thumbnails was it thumbnails with an S this was inside the snippet so thumbnails with an S yeah and then this itself is its own thing so we have to Define that let's call this thumbnails so let's create another struct called thumbnails and this is going to be decodable as well and what do I need in here let's key let's take a look at proxy man here to look at a real response uh we've got the snippet here and then we've got the snippet thumbnails right here let's open this up and then there are several different ones standard medium default High Max res so you can try out these different ones these are all different uh file sizes you you probably wouldn't want to get this one like this is the biggest one unless you're showing it on an iPad maybe or you want it super clear when I was building my demo I was pretty happy with medium so that's what I'm going to go with actually medium is almost the smallest one default is is pretty small so this is double almost double that size but h i remember why I chose medium is because the aspect ratio is different so you can see that um these are about yeah the aspect ratio was a little different some of these look more square and some of them look more like a widescreen type of thing so I figured out like after trying them out that Medium was the one that displayed nicely so that's what I chose um yeah so I'm going to say far medium and what's the type so the type itself is another object so I'm going to have to create you know something for that just to house these three properties this one is a string um this one is an INT and this one is an INT as well so let's create a struct thumbnail size this is decodable to what is it URL is it like that hey yeah okay and then this one will be just thumbnail size do I have everything I need so I have the thumbnail image URL I have the video ID this this is for the video player and then I have the title in the description I think this is it perfect and then going back out so this is a single video going back one step this is the playlist okay and the playlist has an items which is an array of those video instances so if I go to playlist let's make sure that this is also decodable and we want items right like that I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cc+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson right and let's also we need to add identifiable um which allows us to use an array of this inside the Swift UI list and we have the ID already for the identifiable protocol because that's what that requires and I think we're okay now let's try to parse it let's go into the data service and let's continue parsing the data so we are going to uh first create a Json decoder and then we're going to say decoder do decode a certain type from so we're going to decode the data from here and we are going to decode it into a an instance of playlist so we're passing in the playlist as a type and so we have to add. self this is how you specify a type oh I forgot to point out that this decode method can throw errors so it's asking you to do try so we can put the try right here since it's already in a do block that's perfect we don't have to do another one unless you want to specifically um handle that error versus this error I'm sure you can differentiate in here though when you catch it okay so let's capture the result of this decoding so let playlist equals that and then as you know our playlist instance has items which are the videos and this is what we are going to try to return right because remember this method right here returns an array of videos all right let's see if this works let us go back to our views and double check what we're doing here all right so I'm going to set a breakpoint right here by tapping here which is going to pause the execution um you know what let's not let's let's add a little bit more before we run this okay that way we can visually see something in the simulator let's use a swift UI list okay and we are going to pass in the videos and because the video uh struct is identifiable then that is all good that means we can use it in this list and then we are going to display for each video Let's just display the snippit title and if that is nil just say just say title okay let me just do that all right let's see if we can see anything come up oh it was so fast but we can see the response sorry the request go out the response comes back with five items and sure enough we see five items right here now I expected to see more because our playlist actually has like eight videos or nine videos in here 10 videos actually so let me take a look at here I think by default yeah the default value for Max results is five so this is something that you'll want to set as well let's change that in our data service what was that Max results capital r so I'm going to add that right here Max results equals 20 let's say and this it's telling us that we never checked the response so we can just ignore that by adding an under score like we don't have to name that all right let's run it again happen so fast there we have everything so what we did here today by parsing the Json through looking at the response and then mapping these key value Pairs and creating these properties in a data model this is something that is very common to do uh so it's best to get familiar with this process if you want to work with different apis in the future all right now that we have the video instances showing up in the feed view the hard part is done all we need to do is show the thumbnail images if you're enjoying this build so far please give this video a thumbs up and if you've been following along and you are able to parse the Json data please comment down below saying Json is no match for me all right thanks for watching and I'll see you in the next lesson in the last lesson we parsed the Json data returned by the YouTube API into video instance that we're displaying in our feed view if you missed that lesson check out the playlist right over there now the problem is we don't have any video thumbnails to show and we're going to fix that in this lesson let's do it so here's what we have so far with our feed view let's clean this up a bit so we're going to go into feed View and the first thing I'm going to do is change the style of the list uh list style to plane and then we're also going to remove the scroll indicator so let's do that scroll indicators we're going to hide that and it should already look a little better perfect and then we are going to remove these separators between each item because these are going to be um images right thumbnails so in in the text here I'm going to say row separator visibility is hidden and the other thing is remember how we have a tab view in the home view so let's add that tab icon right there so in home view uh we can remove this on up here display our API key and add a tab item and in here we are going to put an image and this is going to be an S SF uh icon SF symbol sorry and we are going to use stack this one play Square stack let's just see if I can put it right there oh it just did the whole thing for me and then the text is going to be feed that already is going to look a lot better I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about C C+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson now let's take a look at displaying those images using our video row view so instead of the displaying a text with the title we are going to want to create instances of video r view but we need to pass the video into the video row view otherwise this view won't have anything to work with so why don't we create a property here that will need to get passed in and for this purpose maybe we'll just do that um from yeah I don't want to create all of that I'm just going to a the preview itself okay and let's go back to feed View and we are going to pass it in here see now it requires that we're going to just pass in the video that it's trying to display now in the R Video row view let's display the image now remember we do have the URL to thumbnail image it is inside video. snippet do thumbnails medium. URL this is a string so we need to essentially hit this URL to download the image data and then display that image data inside a Swift image luckily for us Swift UI makes this really easy using async image where you just pass in a URL and it's going to do that asynchronously it's going to send a background worker to go to that URL fetch the image data come back and then display it inside an image we're going to use this one because it gives us a reference to the Swift UI image view which allows us to add some additional modifiers to it if we want to like tweak the corners we want to tweak the aspect ratio we can do that and placeholder allows you to specify what to show while that background worker is grabbing the image data so we're going to show a spinner and obviously URL is where the uh where should it go retrieve that now because all of these are optional we may not have an image URL so we have to check for that first so we're going to say if let URL equals and we're going to try to create a URL instance off of that string okay and if it is able to create this then we are going to pass this into the async image call or sorry view as a parameter that's where we're going to pass that okay so what is the String again well it is video. snippet do thumbnails medium. URL and if it doesn't exist um then it doesn't exist then we can't show in image so what do we have to do here to provide optional default when the optional contains nil oh okay because it must be a string so yes if any of this part isn't a URL if it cannot create this string then we're just going to put an empty string and try to create a URL and it's going to fail and it's going to not do any of this stuff in here okay so now let's set our async image we're going to use this one right here as I said and we're going to pass in the URL that was created and then we are going to double click here and this is the image this is the reference to the image that will get displayed once the data comes back so this is the image that is displayed and this placeholder we have another handy Swift uiv we can use is progress view which is just going to be a spinner okay so regarding this image right here we definitely want to add a couple of modifiers to it for example resizable um so that it can scale up or down and we want to maintain the aspect ratio so the one that I like to use is well it depends on the circumstances why don't we just try fill for now and we'll see what happens and let's also um give it a little bit of a rounded corner so we're going to do clip shape we're going to say rounded rectangle Corner radius is 10 all right now let's see if this works we're going to go back to feed just double check okay it's going to create instances of video row View and pass in the video and then this should download the images we are not showing the titles here actually all right well that was pretty easy you have to admit just like that we have this if you wanted to display the titles you would um you can either display it well the titles don't depend on the image right so you could put all of this inside a vstack and then put the title underneath for example so we could try to do that here and this would be the title right video. tile and then we can even make it bold is it not title oh sorry snippet do tile and if it doesn't exist we'll show empty string yeah so we can left align it we can add some padding for example leading and then you could add just some padding overall or just maybe just to the vertical okay the corners are a little bit to rounded for my liking so we'll just do five all right and that's how easy it is to do that all right our feed view looks pretty good all we need to do is allow users to tap on the thumbnails to watch the video now you do know what I'm going to ask you right if you've been enjoying this build please give this video a thumbs up and if you've been following along and you are able to get your thumbnail images to show up please comment down below piece of cake all right thanks for watching and I'll see you in the next lesson in the last lesson we finished the feed view if you missed that lesson check out the entire playlist right over here in this lesson we're going to allow the user to tap on the thumbnail to show up the detail View and to watch the video Let's Dive Right In so we already stubbed out the video detail view let's start by triggering this and showing this as a sheet when the user Taps on a video how are we going to do this so there is a sheet that you can bind to a property up here that you can Define which we are going to Define as selected video so when the user Taps on a video row we're going to capture that gesture and set that selected video property which is then going to trigger this sheet and then content is what you want to show on that sheet so let's choose that let's create this state property up here and call it selected video this is going to be nil at first and we're going to bind to the selected video and as for the content um the content so this parameter stores the value of that which is the selected video and here we're going to show the video detail view okay let's capture the tap gesture on this so on tap gesture we are going to set the selected video equals V and let's see if this works all right perfect now the next step let us pass the video details into the sheet so we're going to do that by in the video detail view here let's accept a video again I'm going to blow away the preview and then in the feed view we are going to now pass in V which is the selected video all right so now let's configure this a little bit so we're going to have a sheet to where the top bit is the video player in the bottom bit is the title and description so we're going to need a vstack sort of setup here and let's set the alignment to Leading because that makes sense for the text we're going to have our video player here which we're going to get to and we're going to have the uh title and description here so I want this scrollable in case the content is a lot and inside the scroll view I'm going to create another vstack this one should be alignment left as well I don't know if I need the first one then and in here I want to put the title in the description so this is going to have a piece of text and it's going to be video. snippet do tile and if that doesn't exist I'll put empty string and I'm going to want to make this one a headline font and I'll bold it as well and I'll add some padding to the bottom just to give it a little bit of space you know instead of this I can actually add the spacing here cuz there's only two elements in here so I'm going to add the spacing of 30 right there and so I don't have to put the padding there and then I'm going to put the description so this is going to be video. snippet do description instead um let's see how this looks okay so I've got the title I've got the description but I need to add some some padding I'm going to add the padding to the scroll view um should I do only horizontal no probably I'll add it in all directions all right so that looks a little better oh scroll indicator let's get rid of that too scroll indicator hidden okay all right no scroll indicators this looks good I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about cdub C+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson now I do want to spend a moment and talk about what options we have when it comes to displaying YouTube videos in our app now we could use a web View and display an embedded um YouTube video but they also have a client library for us to use um how to embed YouTube videos in iOS applications with the YouTube helper Library essentially they're doing the same thing but they're making it because they're using an iframe player they're making it a little easy for you but this uses Objective C so this is an option as well which is a little easier than showing your own web View and trying to put the player like the actual web embed code in there um the third option which I explored was to use YouTube player kit and this Library worked really well with swiftui it was really easy to use and honestly saved a lot of time so I didn't even consider the other options and this is what we're going to be using with this demo so this library from Sven seems pretty active as you can see here last issue was closed two days ago and the last poll request was merged about a month ago as with any thirdparty libraries when you use them you're creating a dependency for from your project to depend on third party code and the risk is that that thirdparty code becomes out ofd it's not maintained and it becomes buggy and then that affects your app so there is a sort of risk reward consideration here on one hand you could roll your own and even depending on this Library itself is third party code I mean rolling your own would be the best thing but that would take the most effort and take the most time versus using a third party Library saves you a ton of time and you you have to gauge whether or not it's worth the risk in this case um this was really easy to use and it worked beautifully in Swift UI seems active I think the risk is low so that's why I decided to use this all right so let's dive in and integrate this YouTube player kit into our project let's hit this blue button saying use this package and we can use Swift package manager to directly import it into our project now you know how in lesson two we created a demo project to test out sending Network requests and receiving responses from the YouTube data API this would be a perfect opportunity to do the same whenever I'm trying something new start a new exco project test it out if it works put it into your main project I've done that so I'm not going to go through that again with you and then spend an extra lesson doing that what I'm going to do is just directly put it into my main project but in the future when you're working on your own stuff I'm just letting you know you might want to consider not uh especially because we're not using Source control here if you are playing around with your code you're importing things and you mess something up it's hard to roll back right so definitely test things out in a different project first with that said let's import this directly into our um our thing so go to file add package dependencies and I copied that URL we're going to just enter it right there and there it is YouTube player kit you can go ahead and hit add package and while that's going on let's come back here and scroll down and take a look at how we use this thing so looking at this code snippet you import YouTube player kit first and then you create the YouTube player View and it looks like you just pass in the URL just like that so as an initial test why don't we just do exactly this so we're going to copy that going to go back here oh okay let's add package there it is so in the uh video detail view we're going to import YouTube player kit and then under video player we're just going to plop it in right there and we are going to run this now and see what happens all right so it's good it's showing a video but notice that the frame is much larger larger than the space that we have it plays that's great okay so the the controls are there the video itself is uh it doesn't look wider than the space that we have it looks like it's fitting the width however it does look like there's a lot of black space at the top and the bottom because when you load this up it takes up so much height so we might have to set the width um just set the frame for this so that it fits in the space that we have and also we don't want to be displaying this video so why don't we try inserting our own ID into here dynamically so this would be video dot snippet but as you can see there's something wrong here because as I'm trying to do this it is not working right the autocomplete is not showing up so we actually cannot do it this way we can't just insert a wild card into a parameter like this why don't we take a look at some other methods that we can use this and perhaps that would work for us okay so this is ultimately what I ended up using right here so you can configure the YouTube player like this first where you can actually pass in a dynamic video ID and then you would um then you could use that video player View so let's copy this and instead of well let's configure it here okay and then we are going to add our ID there so this would be video. snippet dot uh resource id. video ID and if that happens to be nil we'll pass an empty string and I don't want it to autoplay so I'm going to set that to false and then with this configuration if you go back to this page you can see that you can just pass in this configuration into the the YouTube uh player view yeah so it looks something like this this is what we did we we configured something and then we we can pass it into the YouTube player view like that I forgot exactly the snippet of code when I was looking through this but yeah if you take the time to read through that there's a lot more cool stuff that I can do but I'll just show you how to do it here so when you create the configuration like that this is YouTube player you can even call it like okay so instead of specifying the URL right here we can actually pass in the YouTube player the thing that we created up here so I'm going to run it and this allows us to specify that Dynamic ID so there's my video it's still the frame isn't working properly right okay but it is is displaying the correct video and it is working right and so perfect now we need to figure out how we can set this frame for this video player so that it fits in the space so you would just go frame and you would set set a width and height the problem is that we need to know what that is so using geometry reader we can take a look at how much width we have and we are essentially going to create the geometry reader up here and we are going to cut the whole vstack and we're going to paste it inside the geometry reader and now because this vstack is inside the geometry reader here we have access to proxy so the width is going to be proxy do size. width and that gives us the width of the screen because geometry reader the purpose of this is to um is to read the size information and so this parameter gives us the you a reference to the sizes now that we have the width we can make sure that it is the proper width but we have to set a proper height as well and so only setting the width is not going to work the question is what should we set the height to and how do we figure that out well we can express the height as a ratio of the width we need to figure out for these YouTube videos that get displayed what is the aspect ratio and one clue that we have is if we go back to uh I can open up proxy man again but essentially I want to figure out let's just comment this out for a second what is that ratio between the width and the height there are various ways to get this but all right let's take a look at this I'm going to get the clue from the thumbnail sizes so we take a look at the items and we take a look at the thumbnails we did the medium one right so 320 by 180 so if the width is 320 then what is the height um 320 / 180 the ratio is the width is 1.78 sorry 7 yeah 78 times larger than the height so we would reverse that in order to get the height because we have the width so we would divide 320 by that in order to get 180 let's see if the math works out so 320 / 17778 gives us 180 so that's how we're going to get the height so coming back here if proxy um geometry reader is going to give us the width then we can calculate the height by taking proxy do size. width divided by um sure what yeah eight um let's take a look so this should work and sure enough we have the appropriate width and height the cool thing was that this was this would also work like this if we um especially if we ignore safe area so let's that's why you see this part here so if we go back to the home view we can say um ignore safe area this might get it to go you know there that padding there though so I don't want to add that padding there I do want the tab view to be full perfect but now we need to add a padding to the um the feed view we'll probably put it in here uh let's put the padding oh probably just padding horizontal okay all right our YouTube player app looks and feels pretty good if you enjoyed this build please give it a thumbs up and if you were able to complete it please comment down below I did it now check out our other app builds and series here on YouTube or if you want a structured learning path proven by thousands of students check out our CWC plus program down in the description below all right thanks for watching and I'll see you in the next video series hello I just want to say thank you for following Along on this YouTube API app series I hope you got the project working and if not you can download my project in the description below there will be a link to it more importantly though I hope you are able to learn something and to gain confidence in your own skills now I want to let you know about a few more features that I've added to this app I've added an onboarding sequence where you can add as many slides to it as you want a newsletter signup tab that connects to your external email list management software an about Tab and lastly a reusable settings tab with functionalities such as write the app share the app submit feedback and privacy policy these extra lessons for these features are available in my CWC plus membership and in addition to these extra lessons you're also going to get access to all of the training and oneonone personalized help if you're interested in getting more information about CWC Plus or potentially enrolling I've got a special offer for you in the description below the video you're going to find a link about that now whether or not you enroll inside CWC plus I really appreciate you learning with me and thank you so much for putting your trust in me I look forward to seeing you again in my next app series