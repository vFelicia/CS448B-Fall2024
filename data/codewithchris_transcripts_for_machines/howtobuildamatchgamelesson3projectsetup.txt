hey guys welcome to lesson three of module three in this video we're going to start working on our Xcode project as you can see the goals for this lesson is to finish setting up our Xcode project and UI we're going to add the assets to our project we're going to set up the background we're going to set up the project so that it's in landscape orientation we're going to add the collection view and we'll get to what that looks like in a second and finally we're going to add a collection view cell all right so let's dive into Xcode we're going to create a brand new Xcode project and it's going to be the single view app template under the iOS tab let's click Next and for the product name I'm going to call it the match app and the rest of the details should be left the same and just make sure that language is Swift and you can leave all of these things unchecked go ahead and click Next and I'm just going to save this project on my desktop for now but you can save it anywhere you'd like and we're not going to have a source control checked there just click create and the first thing we're going to do is actually add the assets into our asset library so below this video you're going to find a link to download the zip file containing all of the images go ahead and download that now and save it somewhere I've got mine saved on the desktop right here I'm going to unzip this file by double clicking it and it's going to pop out a folder inside that folder is going to contain a series of images for this project now it's also going to contain the icon in this icon folder but you don't need to add that for now so just highlight everything else all of these images right here except for the icon folder and then you can go ahead and drag that into your asset library like that and what you should get is you should get back background and you should have cards one all the way to 13 next we're going to go into our main storyboard and we're going to set up the background since this app primarily is going to be in the landscape orientation we can take this opportunity now to restrict this app to only displaying in landscape orientations the way you do that is actually in here in the project settings under the general tab if you scroll down a little bit and under deployment info you're gonna find device orientation you can uncheck portrait and you can leave upsidedown unchecked and just leave landscape left and landscape right checked on and that's going to limit the orientations for this app to just the landscape orientations going back into our main dot storyboard it still shows us this portrait orientation but as you know this is only how we are viewing the layout it's not actually how the app is going to look on a device because remember we can click this view as part and we can view it under any sort of device or orientation so to make things easier for us when we're laying the elements out let's just switch it to landscape orientation like this so that what we see as we're laying the elements out and as we're designing our user interface is also going to match up with how it's going to look when it's launched in the simulator all right so now in the lower right hand corner in this object library make sure you're looking at this object tab we're going to type in UI image view or just the image view and we're going to add this element into our view like that and next we're going to put some constraints for it so make sure your image view is highlighted and click this button here to add new constraints we are going to uncheck constraint margins ok and we're just going to change click this little drop down for the top constraint and change it from safe area to view because we really want this to go the full edge and we're going to do the same thing down here change that to view and we're going to do that for all of these four sides and then just change all of these values to zero like that we're gonna add these four constraints and now we can go up here in the inspector pane for the image view change the image property to the background now that our background is done we can think about how we're going to lay out the cards and as you saw from the app preview the cards are laid out in this sort of grid like fashion well UIKit actually has an element to display collections of data like that in that sort of grid like fashion and that is called the collection view let's take a look at some examples of the collection view in action if you've ever used an iPhone you have probably used a collection view before here are just a few examples of collection views and if you've ever used the Photos app on your iPhone that is a collection view as well anytime you need to display sort of a gridlike layout of elements then chances our collection view is going to fit the bill when you're using a collection view the part I've highlighted on the screen is actually the whole collection view but each item inside the collection view is a cell and that cell is basically just repeated for every single item that you want to display in your collection so in our example our collection view would also fill up the whole screen but each cell would be one of the cards so let's go back to Xcode now and let's add the collection view to our storyboard let's go down to the object library and look up the collection view this is also a UI kit class so there are a couple things that pop up you want to choose collection view here not the collection view controller not the collection view cell not any of these things you want the collection view let's click and drag that over here and what we're going to do is just stretch it so that it covers the entire screen pretty much so have that collection you highlighted and just enable all four this time we are going to leave it as constraint margins and we are also just going to leave it set to the safe area because we don't want any of our collection view covered up so it's best to play within that safe area and we are just going to set zeros for all of that and just to mention the reason why we didn't do the safe area for the background it was because the background is not typically something that the user will interact with so it's okay if part of the background is covered up or a bit of it is obscure all right so the collection view right now we have set it to be pretty much full screen and if you expand it in the document outline like this you're going to see a single collection view cell now in this video we're simply going to set up some of the elements in that collection view cell but I'm not gonna go into the details about how you use the collection view because I'm going to do that in the next video so for now we are just going to add some of the elements which we need into this collection view cell so right now this cell doesn't really have a size and we're going to set a temporary size for it I'm just because we know what size this image is going to be now just keep in mind that even though we are kind of setting a temporary size now so it makes it a little easier to customize the cell it isn't going to be the final size when the app actually runs because through Swift code we are going to dynamically take a look at what sort of device the user is using how much space in terms of the width they have got and then we are going to programmatically divide that space up so that it fits four cards nicely and then we are going to set the actual size of the cell through code but for now we are going to set this cell size a little larger so it doesn't look like this tiny square it's a little hard to work with so we're going to go into the asset library click on any one of the cards choose this tab in the inspector view and I just want to take a look at the size of the image so I'm actually gonna have to select the 1x1 as well don't select the 2 X or the 3 X because that will actually give you a larger size then the image actually is because after all this is two times the size and this is three times the size so let's take a look at the One X and if we are on the correct tab and you scroll down you're going to see the image size 158 by 2 2 4 we're going to go back to the storyboard here and let us highlight the collection view itself go under the size inspector and we can specify the cell size so that was one fifty eight five two two four like that and you can see that cell size change so now it's the size of a single card again it's not going to be the final size because we're going to do that programmatically okay the next thing we want to do is let's add two image views to this cell so down here let's choose type an image view and then let's drag the image view into the cell just like that and in your document outline you should see that this image view is actually underneath you know this cell and when you collapse it that image view should be tucked into that cell so that tells you it's actually inside the cell and not outside of it so now let's add some constraints to that image view make sure you have it highlighted by selecting it and then down here under add new constraints we are going to just go like that all four and just make them all zeros for them and that is going to make the image view stick to all four sides one more thing we want to do just right now is if you still have the image view highlighted and you go into this attributes inspector change the content mode to aspect fit and that is going to make sure that the image displayed and that image view is not stretched and it's going to be the size that fits within that cell all right now we are going to add another image view into our collection view cell because the trick here is we're going to have one image view displaying the back of the card and the other image view displaying the front of the card and we're just going to transition between those two image views to simulate the flipping of the card and so now while we still have image view selected in this object library let's drag it into the collection view cell again so there it is in here you should see that there are two image views underneath the collection view cell and when you collapse the cell both of them should be tucked in alright so let's highlight this one which we just added and we're going to add the same constraints to it just like that add four constraints and we are also going to set the content mode to aspect fit okay so in this collection view cell right here the one that is in front or closest to the user is actually this one so this image view is underneath this one if we want the cards to start off face down let's say then we are going to select this image view which is closer to the user and we are going to change the image to the back of the card as for the front right now we're not going to set it because we need to randomly generate the cards through code and then we're going to set it through code but I mean even if you chose card one or car 10 right now it wouldn't be visible right because this back of the card is covering that front of the card I mean you can might as well select card one I guess just to see okay so one more thing that we need to do is if you highlight this collection view cell here and you take a look at this tab right here you'll see that there is this part that says identifier and it this is called the reuse identifier for the cell because what you're doing here is you are basically designing a prototype cell for the collection view and this cell is going to be essentially a template you know it's a prototype for how all of the cells in this collection view are going to look like so the reason we need to give this prototype cell an identifier here is because you can have different types of prototype cells in your collection view if your collection view shows different types of data each grid item might not be the same and so you might have different types of cells in your collection view so right here all of our cards look the same and all of the cells look the same so we're only specifying one prototype cell but we still have to give it an ident I'm just telling you that the reason why we have an identifier is because potentially there could be multiple types of cells in a collection view so each of those prototypes that you design you would give it a different identifier and then Plus as you'll learn in the next video when we learn how to use the collection view through the swift code when you want to grab one of these prototype cells that you designed you would indicate it by the identifier that you give it here so we're going to just call this card a cell now to type that into the identifier press ENTER that's a great start to our card matching game let's recap what we've learned in this lesson you learn how to limit your app to specific orientations you learned about the collection view and how to specify prototype cells don't forget that you can download my Xcode project from the link below now I want to ask you a question and please be honest as you're watching this video series are you following along and building this project on your own computer let me know by commenting below yes or no lastly if you liked this video and you want to see more please consider subscribing by hitting that red button below and if you don't want to miss a single video make sure you hit that Bell icon as well so thanks for watching and I'll see you guys in the next video