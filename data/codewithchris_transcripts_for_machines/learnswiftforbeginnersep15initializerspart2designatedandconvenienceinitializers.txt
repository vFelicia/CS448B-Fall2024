hello welcome to lesson 15 of the learn Swift for beginners series in this video we're going to revisit initializers and i'm going to tell you about designated initializers and convenience initializers okay well let's get started so right here i'm starting off again with the blog post class and the person cloth and of these properties here in the blog post class I'm actually going to uninitialized some of these properties so I can demonstrate for you what we need to do in the initializer because I mentioned before that one of the jobs of the initializer is to make sure that all of these properties are initialized and ready to go so even if it is an optional that is considered okay when you're declaring your properties inside your class there are basically three different ways of doing it so number one is this one where you declare the property and you initialize it to some sort of value right away so that's this body property right here and this number of comments property is equal to zero the next thing you can do is you can declare a property and set it to optional so you're specifying that it could be nil or it could contain a value but either way you have to unwrap the value and you have to check if it's mail before using it now the third way is probably the most dangerous way and that is using the force unwrap operator so let me show you what that means if I get rid of that question mark and I put an exclamation mark there and let's also do it beside author so what you're saying here is you're saying that title basically is an optional it could be nil or it could contain a value but you're going to leave it unwrapped so when I access the title property down here and I say post title Xcode is not going to have that sort of safe checking or warning us that it could be nil it's not going to provide any of those safety mechanisms and it's just going to let us use it as is so we can assign nil into title as you can see here No and we can use it like a normal property right we don't have to check if it's no or not or rather it is up to us whether we want to do it or not but however if you know the difference the flipside being that we make this an optional now there are some safety mechanisms in place if I just try to use this as this Xcode is going to warn us that hey you know this is an optional you have to check that it's not nil or you have to unwrap it first before you can use it so I might have to say if let you know actual title equals and this is using optional binding so basically we're checking if there's a value inside the optional first you know if something could potentially be no it's probably safer to use an optional value so that it forces the programmer to actually check things before using it now if you set your properties like that then it could still be nil or it could contain a value but you sort of remove that taystee checking that optionals provide so those are the three different ways that you can set up your properties what you cannot do however is you can't just do something like that where you declare a property you don't set it to anything you don't specify that it's an optional or you don't specify that it's unwrapped and you just leave it like that in that case Xcode is going to assume that the initializer is going to set those to some values so let's declare our initializer here like you've learned in the past and inside here you can see that Xcode is still showing errors but if I actually initialize these things inside the initializer let's say an author is equal to person like that then Xcode is going to stop complaining because remember when we create a new blog post like this it's actually calling the initializer so even though these properties right here title and author they're not set to anything they're not Chanel's they're not unwrapped this initializer is going to be called for sure when we create a new blog post object and inside here those properties get set to some value to get initialized and so at the end of the day this blog post object is going to be ready to be used now this initializer right here this is what is called the designated initializer and what that means is that this initializer function is guaranteed to fulfill those obligations of making sure that all of the properties are initialized before use in contrast we can have something that's called a convenience initializer and what that is is you use the convenience keyword followed by your initializer method signature so I might have something like this where inside this initializer I only want to provide a custom title well you might ask if I call this convenience initializer how is author going to get initialized right so what happens is inside the convenience initializer I call the designated initializer using the self keyword like this so now and inside here let's set title equals custom title so now when I declare a new blog post object and let's say I use my convenience initializer like this and I pass in a custom title like this it's calling this convenience initializer but this convenience initializer is also calling the designated one which make sure that at the end of the day you know the uninitialized properties will be initialized and then after calling that designated initializer then we set title to custom title so whether I call this designated initializer or the convenience initializer on the title and the author properties will be guaranteed to be initialized and so the role of the convenience initializer is simply for convenience so that's the difference between a designated initializer versus a convenience initializer I hope that was clear and please like the video and share the video subscribe to the channel if you haven't already for more I'll see you guys next time bye for now