hey guys welcome to lesson 15 of how to make iPhone apps with no programming experience in this lesson we are going to add code to keep score for each round for the player and the enemy now before we do that though I created some graphics to improve the look and feel of our app so I've got a logo here that I'm going to put near the top I've got a deal button which I'm going to replace the playround button with or rather I'm going to add the image to the button and I created a new background so it's got this sort of Spotlight feel to it rather than just uh solid green so let's go ahead and add those Graphics to our asset Library first okay so first we're going to change the background now I named my new graphic assets new background and instead of of adding a new image set called new background I'm just going to highlight these three and I'm going to drag it into uh the spot I'm going to drag it into the image set for the original background and then just like that I can keep the background asset name but the actual assets are using my new image I've got the logo here so I'm just going to drag that into there and I've also got the deal button graphic here so I'm going to drag that there as well okay now let's go into our storyboard now to change our button so you can see that the background image has taken effect already so in order to uh add an image to our button we're going to come here click the button go into the inspector pane on the right hand side and if you scroll down see there's image and there's background if you specify background and you pick uh deal button you see the image is going to appear there but the text is going to appear on top of it so you can either do that and then erase the text or let me just erase the background or you can set it as the image for example if you wanted what was it deal button for example if you wanted the image beside some text so I'm just going to do that but I'm going to erase the text so that we have a button with just an image right there uh but also in view controller. Swift in the viewed load method we were practicing setting uh properties and calling methods in here so this one actually adds the title play so I need to get rid of this line or else it's going to add the the text play beside my button image so I don't want a title for my button okay next we need to add an image uh at the top of our view so we search for UI image view here I'm just going to drag it and drop it right there and now we got to add some constraints to it it's going to get a little bit tricky it took me a little bit to figure out a good way to make it scale in both orientations I'll show you in a second for example I want it centered right so I'm going to click this down here I'm going to put horizontal Center in container I'm going to add that constraint and then I'm also going to add the constraint that it should be let's say 10 pixels off the top margin so I'm going to add that constraint and then up here I'm going to set the image to the logo okay I'm going to run the app now so you can see what it looks like okay so you can see that the image looks pretty small and our button image is there if I rotate it you can see that the logo fits as well however I kind of want the logo to be larger uh when it's in portrait View and the original size of the image is actually not this small it's actually larger than this it's actually this size right here so I'm going to add some constraints I'm actually also going to set a background for this uh UI image view so we can see how it stretches so I'm going to add some constraints to uh the margins of this UI image view so I'm going to say that I'm just going to add margins uh all the way around cuz I've already got the top margin I added so I'm going to add the left right and bottom constraint and by doing that it's going to make this UI image view have a constraint right here right here and right here between uh this card container View and this logo so now let's see how it looks okay so now it's you can see it's stretched the bit in this View and when I change it you can see it's stretched flat like that the reason is because uh it's maintaining that this UI image view should be 64 from the left 64 from the right and 50 59 between these two elements between this card view container and the image view so and it's maintaining 10 so that's why it's stretched like this in this View and that's why it's also stretched like that from this view because it's 64 from here 64 from here 59 from here and 10 from the top well there's one thing we can change here off the bat is that for the UI image view you can make the image not stretch so there's a mode if you click your UI image view go to the inspector right now it's set to scale to fill so it's just going to scale up the image and disregard the aspect ratio and and that's how we get uh the stretch to image if we don't want it to stretch uh we can do aspect to fit and this is going to maintain the aspect ratio of the image and it's going to fit it inside the bounds of the UI image view aspect fill is kind of the same it's going to uh maintain the aspect ratio of the image but it's going to ignore uh the bounds of the uh UI image view this is the one we want you can play around with it and to see what the difference is visually if you want but now in this way we can it looks pretty decent in portrait and when we go to the landscape view it maintains the aspect ratio so it's not stretched but I find that because this is 59 it's maintaining that this margin here is 59 it's squishing the height but here 59 is actually fine so what I want to do instead is maybe specify that this margin shouldn't be 59 but maybe rather should be something like maybe 20 so let's try that I'm going to look for this constraint here when I click it um on the right hand side here on the right hand pane you can see that card view container top which is this guy and the logo bottom which is this guy uh the relationship is equal to 59 so I'm going to change that 59 to 20 okay so let's update update the frames now let's run it again so that looks a lot better so so keep in mind that you can also if we go back to that constraint if I can find it there it is instead of equal you can also do less than or equal to or greater than or equal instead of just equal so like I said playing around with the auto layout and getting your constraints right with the elements does take a little bit of time so try not to get too frustrated now we're going to add some labels for the score so I'm going to search here for the label and I'm going to drag it here and I'm going to add it inside the play button container actually in this lower corner so first of all uh let's add some constraints to this guy I want to Anchor it to the lower left so I'm going to go click this guy here uh anchor anchor and I'm going to put let's say 10 oops I don't want let's try that again add a constraint to the left margin and the right one and I want to set both of them to 10 okay and I want to change the text to White and I want to change the font size to 100 and I want to Center Line it so let's put a number here instead of the label let's just put um one now let's update the frames on this guy okay and let's see if that sticks in that corner when we rotate it left and right and actually we can remove the red background on that image view okay so that stays put the score down there next I'm going to add a lab to indicate that this is the player score and I'm going to select this label I'm going to hold down command and also select my uh score label I'm going to horizontally Center both of them uh in relationship to each other so they'll both be centered down uh this line right here like that you can see that orange line and I also want to basically make this label uh stay on top of the score label so I can add whoops I don't want to select both of them I want to select just this label here and I want specify that the margin below here should be 10 and one trick uh because it says spacing to nearest neighbor right and the nearest neighbor should be this score label but sometimes when your element is overlapping the other element it doesn't detect uh that there is a neighbor here so in order to verify you can click this little drop down arrow so you can see here that the element I'm specifying my label to be 10 pixels above is actually the play button container which is not what I want because the play button container is is this guy right here this whole container if I specified that my label should be 10 pixels from that it's going to be at the bottom here so instead the problem is is because you see the label the two labels are kind of overlapping and so when I'm trying to add a constraint to my uh my player label here is not detecting this guy as the neighbor so I just want to move this up a little bit so it's not touching this label and I can try it again so now when I add oops let's click select that click this I want to add a 10 pixel um constraint to the bottom let's click this arrow and now you can see that this label the player score label is selected which is actually the one I wanted to do but it changed the value let me put 10 at that constraint now we can update the frame so now I'll actually sit on top right here now let's set the properties for this guy I'm gonna write U as the text I'm going to change the color to white I'm going to Center align the text I'm going to change the font size to 30 okay so I'm going to run it let's see how that looks okay maybe 30 is too big of a font size so let's try 20 um I'm going to change this background to transparent again okay now I'm going to do the same for the other side into the play button container they add the constraints there and there 10 and 10 update frames and let's change this to a one change the color to white font size is 100 and Center align the text okay there we go now I want to add another label here for the enemy and for this one I want to Center align both these guys so I selected both them and added a constraint for horizontal centers and now I'm going to specify that this guy should be 10 above the nearest neighbor which is that one 10 update the frame and now I'm going to change that to enemy change the color to white change the font size to 20 uh Center Line okay now let's run it take a look at how it looks okay so now we've got our score labels and I want to now expose this and this as IB Outlets to the view controller actually let me put zero the default value should be zero okay so I'm going to go into assistant editor Let me just make some space here okay so let's do it right here hold down control click drag uh this is going to be the player score I'm going to do it again here this is going to be the enemy a score and now let's go into single View and go into viewcontroller.swift okay so I want to show you guys something about variable scoping here and that is basically any variables that you declare and use within a method doesn't retain its value okay so what do I mean by that I think it's better if I demonstrate so let me open up some lines here and let me say VAR player score equals zero let me just change that player score total enemy score total equals z okay so now let's implement this code in here if the first random number is greater than the second random number then player score total plus equals 1 so this increments the player score total by one right and these are two variables that we created and declared inside this method to keep track of the score let's update the label text so self dot uh player score text equals player score total and we can actually create a new string and pass in that number now if the first n if the first random number is the same as the second random number then we we don't increase the score otherwise it's actually the enemy score total uh plus equals 1 so we increment the enemy score if the second number is larger and self. enemys score. text that's the text property of the label that we're changing string enemies score total okay let's run that okay so that's a tie so no one gets a score so the player gets a queen and the enemy gets a seven so we incremented the score that means our if statement is working properly now watch this I'm going to deal again and the enemy gets a king it's bigger so this is correct I'm going to deal again okay so the player gets a king which is larger than the enemy but why didn't the score increase I'm going to keep doing it but the score never increases now why is that it's because we declared these variables in here right but each time this method executes these variables are set are reset so instead of declaring these variables in here we actually need to move these guys out because in here they're in the scope of this method right so these values only pertain to what's going on in this method but if we move it outside to the top here by moving the variables up here now the scope of these variables is for the entire class so they'll maintain their values even throughout the lifetime of any method executions or method calls simply by doing that the scores can now be tracked Beyond a single method call so that's very important to remember for example in this method we declared first card string as a variable and then we assigned some string into that variable I wouldn't be able to call or use this or reference this variable name from another method because it's not in the same scope because this variable is declared in here inside this method I can only use it inside this method so let's go back to our app so I hope you were able to follow along and build this war card game on your own computer and if not don't worry I'm going to post the source code below the video and you can download it and see what's different also in the next lesson we're going to do a recap of what we've learned so far from lessons one to 15 and we've definitely learned a lot especially if you've never programmed before I bet you're amazed at how far you've come and how much you've learned in the future we can even add animations to the cards and add some sound effects to really bring this game to life okay so I'll see you in the next lesson