hey code crew in this lesson you're going to start building the ios notes app that is going to connect to the web server and database that you set up in the previous lesson if you haven't seen that lesson yet i'll link to it in the description below and on a card on the screen by the end of this lesson you'll have set up the user interface for the app the data fetching through your api and being displayed in that user interface and just like in lesson one ali will be your teacher ali take it away all right now that we've got our actual server done and we can create read update and destroy various notes the next thing we'll start working on is our actual iphone app so let's just get right into it so the first thing you're going to do is open up xcode and create a new project and it's going to be a single view app and you can name it anything you want it's called node app and we're going to be using swift and storyboard and you don't need to check anything else so you can save that wherever you want and then let's make that full screen and jump into storyboard so in our storyboard file the first thing we're going to do is add a navigation controller and what the navigation controller allows us to do is handle navigations so for example on the main screen i'm just going to have my list of notes and then like when i click add note i want to go to a different screen where i can add the notes and once i added the note i can go back to the main screen and the way you do that is by using a navigation controller so on your main view controller click it and go to editor and you can see embed in and when you see the embedded button click navigation controller and this will make a navigation controller so when so now what you want to do is make sure when you click on the navigation controller that it's set to is initial view controller now we've got that we're going to add one more view controller and this is going to be the adding the note view controller so just type in view controller and it'll come up and just drag that view controller onto your screen now what we want to do is get both of these views set up so on the first one we're going to add a bar button item so just search bar button item and drag it onto the top of the view controller on the top right and this is going to be our add new note button so if you go into the if you go into the attributes inspector and change the title you can just call this add note like that now if we also click on the actual blank space we see the title button the title label we can just set that to notes so now we have notes and add note now what we want to do is option hold option and drag the add no button onto the view controller the second one and once it asks you for actions i segway click show this will actually make another navigation bar on the second view controller and allow us to navigate between the two different pages now we're going to do is add a table view let's trade for table view and drop it on and set the constraints to zero on all sides zero zero zero zero and what this is going to do is actually stretch the table view across the screen and now what you want to do is add a table view cell like that we're gonna start customizing the cell later but just have it just drop it in here for now the next thing you want to do is focus on customizing the adding note screen so on the top we can change the title to add note like that we also want buttons to save so if you search for a bar button item again you can drop in two this time so we can add a button to save so just double click the button or set the title by clicking on it to save and the other button will be delete you can also change the text color by clicking on it and changing the tint to red for delete so now you got the delete and save button now we're gonna do is add a text field and you can just drag it onto the screen and you're gonna click the little constraint again button on the bottom you're gonna set the top to 15 that'll give a little bit of padding between the actual text field and the navigation bar and we're also going to set the size to 10 and 10. again we want to stretch all the way but we want to leave a little padding we're not going to mess with the bottom constraint for now so we can see there's a little bit padding on top and left and right now we're going to add something called a text view and it's the same thing as a text field but you can add multiple lines because in a text field there's only one line you can enter in textview you can enter paragraphs so now we're going to set the constraints on the text view we're going to set the top to 15 and the sides to 15 as well so that'll stretch it across the screen but leave a little bit of padding like that so now if i run my app so if i click the play button and run it i should see the two screens and i should be able to navigate between them so my app launches on this table view and when i click the add note button it goes into this screen so in this screen i can write stuff i can write stuff and also up here i can write a new note and these button don't work right now but eventually they're going to save and delete and when i click the notes button back here i should go back to the main screen all right now that that works let's actually start writing some code so now what i want to do is actually be able to interact with the table view programmatically so i'm going to click the little plus button on the top right and it's gonna give me two screens on the first screen i'm gonna open the view controller and on second screen i'm gonna open my storyboard so what i'm gonna do is click the storyboard hold option and drag it onto the view controller and it's going to say insert outlet so i'm going to choose outline i'm going to call this main table or also call this notes table view like that so now i'm able to programmatically interact with the notes table view i also have to conform to something called a protocol i'm going to add a comma after ui view ui view controller and i'm going to type in table view delegate ui table view delegate and i'm going to click on that so the next thing i'm going to write is notes table view dot delegate is equal to self and notes table view dot data source is equal to self and what that means is i'm telling the story board that this view controller will be providing the data for this table view so now it gives me an error says cannot assign and it says add missing conformance so click fix on that and it's going to add also the data source protocol right there data source delegate and now what happens is it says the view controller does not conform to the protocol so we're going to click is fix and what the fix will do is give you a couple of functions and these functions are functions you have to answer so the table view knows what to display the first one is number of rows so if i just write return 5 and on next function where it says cell for row at it's asking me to customize the cell and what to display for the cell let's sell equal to table view dot dq reusable cell with identifier dq reels will sell with identifier for index path so we have to give our table view cell an identifier so if you go back into your main.storyboard you click on the prototype cell you'll see it says identifier so we can just call this prototype we can just call it prototype cell and what that allows us to do is actually reference the cell so we can customize it so now we're just going to type the name we named it so we named it proto type cell and then for index path we just give it index path which means the cell we're clicking on so this could be the first cell in the row the second cell in the row the third cell in the row and the breathing screaming error because index path should be lower case like that now what we're going to do is say cell dot label and we're going to say note and we want to return the cell so what we've done here firstly is created five cells the next thing we've done is we've created a prototype cell using this keyword table view dq reusable cell and we're customizing that cell and returning it so once we actually start getting our notes array we'll actually customize each cell with a certain note but for now we're just hard coding each cell with the string note and the reason is giving me an error when i write cell dot text label is because i write cell dot text label dot and that allowed to set so now if i run this app it should give me five rows and each row should say note on it like that okay now our app is getting there so now instead of hard coding the word note onto each cell i want to actually pass in an array and i want it to render each element of the array as a row so let's create an array first i'll call this notes array and for now let's just make it an array of strings so we can write note one so that'll be note 5 note 4 note 3 and note 2. so now what we're gonna do so instead of writing cell label cell dot text label dot text equal to note we're gonna set this to notes array to the index path dot row now when i refresh this and i build it onto my iphone i see i have the array of notes now so if i add a new note into the array and i refresh it i don't actually see the new note when i click that and the reason that happens is because i'm returning five i told it i just want five rows but now we want to have an as many rows as there are elements in our array so i'm just going to write notes array.count and this means it's going to return as many rows as there are things in my array so if i just build this now i'm gonna see i have six notes and if i just double this array now so if i just copy this array and paste it i'll have more notes now like that all right now you can see how instead of having an array of strings we would actually have an array of actual notes and every time the user adds a note we add it to the cert we add it to the database and then every time the user wants to see a note we just ask the database to give all the notes back and we put it back in the array and then the table view refreshes itself and displays all the notes that are in the array all right now that we're done the storyboard part and we have our table view and it can display an array the next thing we want to do is actually get our data from the server so remember when i type my url and go to fetch row and i click enter i get this data back well i want this data to show in the iphone now so the first thing i'm going to do is i'm going to install something called alamo fire so if you just type lmo fire github you'll get the link to that so you just have to copy this and what lml fire does it makes it really easy for us to contact the server and send and receive data so just copy that go into your xcode project go into files swift packages and click add package dependency and then just paste the link and click next and next and finish so that installed elmo fire so we can use in our project so the next thing i'm going to do is make a new file so i'm going to right click on my folder click on new file and i'm just going to make it a swift file and i'm just going to name it api functions and this file will actually be the file that contacts the server and receives and sends data so i'm just going to make a class and call it api functions all right so now what's going to happen is the iphone needs to ask the server to send back this data but we need to define an object so the iphone knows what a note looks like so we know a note has a note a title and a date and id we have to tell the iphone that a note holds these things so what we're going to do is we're going to define a struct so just type instruct and call a note the note has a var title which is a string of our date which is a string of our id which is a string end of our note which is also a string all right so now that we've defined a notes object we can get the data from our server and we can turn it into a notes object so the iphone knows what a note looks like and then we can just say give me the date title of this note or give me the date of this note and it'll give us that information and we probe var id is a string but in our actual data object we know that var id is actually called underscore id so it doesn't matter too much but just to be consistent we can change this to underscore id so now what we're going to do is we're going to type import alamo fire and that allows that to use alamo fire in our project so i'm going to make one function so and i'm going to call it fetch data or fetch notes it returns nothing so in our fetch notes we're going to write af dot request and we're going to pass in the string we want it to go to so the string was what we typed in our browser right here so just copy that and go into xcode and paste it and we're going to write dot response and then we're going to put two curly brackets and type in response in so what this means is we're gonna make a request to the server and we want the response and then once we got the response the response in keywords allow us to actually access that data so i could do something like print response and it would print the whole response the service sends me back but we only want the data the server sends back like the note the title and the date but the response object also holds things like print statements it holds times and it tells us if it failed or not but we don't need that information so we can just type response.data instead so that'll only give us back the server's actual data and we don't need the under other information but now what we're going to do is go right let data is equal to the string and the data will be response.data and the encoding will be utf8 and what that allows us to do is turn the data and you can just force unwrap it with exclamation mark what that allows us to do is turn the data the server sends us into a string we can actually parse and the encoding of that is utf8 so that basically allows us to convert this data the server sends us into this object we defined here and we have to make one more change to this object we have to make it a decodable and that basically means we can decode what the server is sending us into this object so we can access it and use it and now what i'm going to do is create a delegate and protocol method which will allow us to send this data over to the view controller once the server sends back the data so we're going to call this function to fetch nodes it's going to go to the server and it's going to receive the data and once it receives the data we want it to send this data that it took back to the view controller so we can update the array so the way i'm going to do that is create a custom protocol on delegate so the way we do that is go back into our functions our api function class and write self dot delegate dot and i'll just name it update array and it'll take in a new array and the array will be data we haven't defined this yet so it's actually giving me an error but in the view controller we're actually going to define what this update array method does and it's giving me an error because that it doesn't know what delegate is so we can just write var delegate colon data delegate and did delegate question mark like that so that'll remove this error but still doesn't know what the update array method is and that's what we're going to work on next and the reason is giving me the error saying unuse of undeclared type data delegate is that doesn't know what a data delegate is so what we're going to do is we're going to go to the view controller and right here i'm going to outside of the class i'm going to define what a delegate is and what it does summary protocol and the protocol's name is going to be data delegate so it calls a function called update array and that function takes in a new array which is a string so now if i go back to my actual functions file over here this error if i go to product and click on clean build folder it should remove that error so now it knows what data delegate is so now what happens is this function fires off it goes to our fetch route and it gets all the data it turns the data into a utf8 encoding which will allow us to easily parse it into this note structure we made and then it calls this delegate and what this delegate does is it tells the view controller to fire off this function called update array now we haven't defined this function right yet that's what that's what we're going to do right now so outside of the view controller class i can write extension view controller and then i'm going to write a colon data delegate if you don't want this you could also write a function inside your actual class but this makes it a bit cleaner it just means that this block of code is a part of the view controller and what it's doing is it's conforming to the data delegate protocol just like how we had the ui table view delegate and the ui data source delegate and because of that we had to answer these two questions right how many rows we want in our table and what we want in each cell this time we're conforming to the data delegate protocol so we're going to have to answer this question and the question will be update array so all we have to do is update the array so now what we're going to do is we're going to define this function called updatearray so i'm just going to type func updatearray and it autocompletes it takes a new array which is a string and now in here what i'm going to do is i'm going to make a do try block so you have your do here and it's going to try something and if it fails you can catch it and then you can print out the error so usually if we do something without the do catch block what's going to happen is if it fails the app is going to crash but due to this if it fails it'll just go in the catch block and it'll print out the error without crashing the app and we're going to type is notes array notes array is equal to json decoder decode and self is going to be the array of notes so now where we're going to write is notes array is equal to try json decoder dot decode and we're going to try the array of notes dot self and what you're going to type is from new array dot data and then you're gonna get the you're gonna get the auto complete so just click on the first one and using the encoding we're gonna use is dot utf8 like that and what we're going to do is we're going to add exclamation mark at the end of that and then in the catch block we can just print failed to decode now the next thing is this array that we've defined here called notes array is an array of strings but we want to make it an array of notes right so what we're going to do is we're going to clear out the text inside here and we're going to write note and we're going to add two round brackets and what this means is that's an array of these note objects we defined over here so the note object has titled date and id and a note so now we have a whole array full of them and we're also going to add two round brackets after json decoder like that me one error says use of unresolved identifier notes well because i defined it as a note not a notes so i'll just remove the s over here like that and the next thing we're going to do is that it says cannot assign value of type nope to string so we have to customize ourselves correctly after this so we're just going to hash this out right now and we're actually going to go back to our api functions file over here so first of all we have to force unwrap it so just click on the error and click the exclamation mark also going to write one more thing in our api function file so write static let functions equal api functions with two round brackets and what that does is actually creates an instance of the api function class so now we can access these functions from outside of the class so now the view controller can actually call these functions to get and receive the data now the last thing we're going to do is go into the view controller and on the view to load we're going to write just like how we had to tell the notes table view that the delegate was the view controller we're going to write api functions dot functions dot datadelegate or delegate is equal to self so now the api functions class knows that this function update array is being handled by the view controller it knows who to send the data we got from the server to it's going to call the update array function which is located in our view controller so now that's done we can actually try seeing if it works so now if i in my view did load if i write api functions dot functions the fetch date fetch notes and then i print the notes array i shouldn't see anything on my screen but i should see an array of notes and those notes should be the same notes that we get in our browser here so if i just run that let's see what happens i'm gonna see that it prints out update updated and it has the id and the note and also has title date and note so if i go back here i see updated update and update i see title date and note so we know the iphone is actually contacting our server and getting the data and it's attaching that data to a notes array so now i can use this notes array to show the data in the actual table view just like just like how we did before with the array of strings but now we have actual notes we can display so now if i go back into my actual protocol functions over here remember when we asked told it how many remember when we told the how many rows we want and what the title each row should be now the function is still the same over here knows the radar count so it's going to print as many rows as we have objects in our array so we have two in this case but in the actual cell when we're customizing it we can now do cell label.text is equal to nose array index path dot row dot title let's say we should see the title of each note on our actual table view so when we run our app we don't actually see the data but we know it's being printed here and the reason that is is because notes array at the very beginning is empty so then we say return the amount of items in notes array and when the app runs at the very beginning the amount of items and notes array is zero and there's also nothing in the array so that's why it gives us the empty table view and after that these functions are called which fetches the notes and once it fetches the note it updates our notes array which is what we get here but the table view is still using the old array instead of the new one so at the end of this function we can just write a line of code which says self dot nodes table view dot reload data and what that'll make it do is that whenever we get a new notes array we're actually going to reload the data on the table view so always be updated so now if i build my app again we'll see that we see our update and title so now what's gonna happen is if i go to postman and i actually add a new item in and i restart my app i should see the new item in my array so let's go to slash create and we'll pass in new item new item new item like that and i'm gonna send that to the server and it says save data so what happens now is if i go to my app and i close it and i restart my app i just see my new data and there it is new item so now we're sending data using postman but we're fetching the data using our iphone app so now the next step is to be able to send our data using our no add note button here so whenever the user type something over here and click save we want to send that data to our actual server now but the first part is done where we're actually receiving data from our server so now you have your app connecting to the api fetching the data and displaying it in the user interface in the next lesson you're going to implement adding editing updating and removing notes now i want to turn it over to you have you done any web development before do you happen to be a web developer learning ios let me know by leaving a quick comment below and if you like this video please give it a thumbs up and don't forget to subscribe to the channel for the next lesson oh yeah and if you want to see more app series like this and courses on other ios topics then definitely check out cwc plus i'll leave a link to it in the end screen and in the comments below alright i'll see you in the next lesson