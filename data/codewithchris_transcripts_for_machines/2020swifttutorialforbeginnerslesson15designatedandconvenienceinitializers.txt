hello and welcome to my Swift tutorial series for beginners in this video we're going to revisit initializer methods and I'm going to tell you about designated versus convenience initializers so let's get started so here I've got a person class and all it has is one property called name which is initialized to the string none remember when we talked about classes and default initializers all classes will have a default init initializer that's why I can create a new personal object like this it's actually calling the default initializer now I told you that the purpose of the initializer method was to make sure that that object is set up and ready to go now in addition to allocating memory and doing all of the other things that it needs to do to create that object and return it to us another job of the initializer method is to make sure that all the properties of that object are initialized and let me show you what that means right now so for example in this person class I have a name property it's initialized with this piece of data none now let's say I create an optional let's say not salary let's say net worth or something like that and let's make this an optional integer and that is also already initialized to nil because remember I told you that by default the value is nil 4 optionals now I can also say gender let's make this an optional string that is already unwrapped now this is also initialized to nil so right now by default all of the properties of the person class are already initialized so that's why I can create a person object like that without a problem but let's say that one of the properties is not initialized now let me show you what that looks like for example for name I can say that it's gonna be a string type but I can not assign it any value right then it's gonna start to complain and say that hey your person class needs to have an initializer explicitly where you initialize the name property so in this case what we do is we do an it and then we assign a value to that property right because this is not an optional right if it isn't optional then that's a different story it it is initialized to nil but when you just say that it's a name property and it should contain a value right this is the string datatype it should contain a string value and you're not assigning a value to it then it falls on the initializer method to give it a value before that object gets passed back to you when you create a new person object so I can show you let's say let a equals new person object and then I can print a dot name I can show you what that is alright it's not because when we create this new person object it's calling this initializer and it's initializing this name property to none you can also try to print net worth for you and you'll see that it's going to be nil now these initializer methods which ensure that all of the properties are initialized you know we're just calling them initializer methods but the proper name is designated initializer and these designated initializer methods can be guaranteed to return that object to you ready to use all of its properties initialized so on and so forth now there's another type of initializer method called a initializer so these convenience and initializer methods are for you to kind of preset some of the properties of that object based on what you need and then that convenience initializer should call a designated initializer just to make sure that all of its properties are set so let me give you an example of what that what that looks like so let's say that this is our designated initializer right because because it makes sure that all properties are initialized and it's ready to go now I can create a convenience initializer by using the convenience keyword like that and let's say I want to create an initializer to create a rich female so let's say that you need to toss in the gender and you need to pass in the net worth or it should be a rich person in general right then I would first of all I would need to call V and it write called the designated initializer to ensure that the object is ready to go set any other properties or custom code to initialize for this scenario so I can say you know self dot gender is equal to whatever gender was passed in and self thought net worth is equal to I forgot to put a type here so let's say that's int all right this myself all right all right so this is creating a person object creating a new rich person object that B equals person and I can use my mail let's change that to mail that right so this convenience initializer just gives me an easy way to create a specific type of person object initialized through some sort of whatever values that I need but it calls the designated one because this is kind of like the steadfast anchor initializer that makes sure that all of its properties are initialized so you can count on it as sort of like the goto initializer so just to recap designated initializers are those that guarantee all of its properties are going to be initialized and that that object is ready to go for you whereas convenience initializers are optional and they basically give you an opportunity to create an object but preset it to the values that you need like what we did in this case but convenience initializers must call a designated initializer as well just to make sure that everything is set up and ready to go so you can see that we did it here in line 16 so that's the difference between a designated versus a convenience initializer method if you enjoyed this video please give it a thumbs up and please subscribe if you haven't already all right click on over there for the next video and I'll see you there