in this lesson learn how to integrate the revenue cat sdk into your xcode project using cocoapods you'll also learn how to add the few snippets of code you'll need to display your inapp purchases in your app to let the user purchase them and to check the user's level of access hey code crew i'm chris and welcome to code with chris the place to be if you want to learn how to code and to build apps this is the fifth lesson in the revenue cat series if you missed the previous lessons please check out the playlist up there and here's where we are in our seven step process okay let's get started all right so continuing where we left off now we're going to integrate the revenue cat sdk now something handy to have is access to the documentation there are several ways to include the sdk into your xcode project one of the easiest ways is just to use cocoapods here and if you don't know what they are or you've never used cocoapods before i'll link to a video explaining what they are and how to install them so that you can take advantage of this installation method alternatively you can also use these other ways to do it but i'm going to show you in this video doing it through cocoapods so let's go ahead and open up terminal all right so i'm going to navigate to my desktop where my project folder is desktop revcat demo there we go and i'm going to type pod init to create my pod file and if i go ahead and open up that folder that should be created in just a second right there i'm going to open it up and text edit and then we will take a look at our documentation so this is what we need to include here so let's go ahead and include that there save it let's go back to terminal and type in pod install all right so let's go ahead and do that all right now that that's all done let's try this again pod install all right now we're good so what we're going to do is close our xcode project i had that preferences window open as well and now you'll notice that in the folder we have an xc workspace which is going to include the purchases pod so let's open up the workspace instead of the xcode project we're opening that now all right and your project should include the pods here and you can see and if you just press command b and build the project it should build successfully so just make sure of that all right now that your project built successfully the first thing we're going to do is we're going to add some ib outlets to the properties that uh sorry to the user interface elements that we're going to need to programmatically modify for example uh in this view controller we're going to check if the user has access to the pro membership if they do we don't want to show this button and instead we're going to want to show the tours we're also going to want to change this label here because this is prompting them to sign up for pro so in order to change the text here to hide the button and also to insert new labels into this stack view we're going to need a reference to those elements so let's go ahead and open up assistant editor and on the on this side here we're going to have the view controller that's right and we're going to have a reference to the the tour button now let's say let's call this the pro button because essentially it is going to our paywall there and this is the the tour label which we'll probably want to change into actual tours if they have pro access and we're also going to want a reference to this stack view here this outer stack view and i'm just going to call that stack view and that's for the for the purpose of inserting new elements into that stack view all right now on the the pro view controller side so let's go ahead and click that what we're going to want to do for this is after we fetch the products from the revenue cat side we're going to want to create a button for each purchasing option that we we get back so we're really only going to need a reference to this stack view here oops and i've accidentally renamed it that's okay after we connect it i'll probably rename so let's connect it i'm again just going to call this stack view all right now let's go back to the documentation for a quick second because there is another step that we're going to have to do in order to connect to the revenue cap platform and finish the installation so if you scroll all the way to the bottom first of all is called import purchases up here in the app delegate because we are going to initialize the sdk and connect to the platform by specifying our api key here and then we're also going to double check that we've enabled the inapp purchase capability so if you come here this is something that we did in the beginning but just double check for you that you have this if you don't just click on the plus icon here and you can search for inapp purchases uh if it's not there it yeah that's where it should be actually yeah add capabilities by clicking the plus button above all right so just double check you have that all right now we're ready to go to the next step okay so configuring purchases in the application did finish launching let's copy these two lines so this is going to enable debug logs which are really helpful when it comes to maybe you it can't fetch the products or can't connect to the platform then you'll see why in the debug console below for the sdk or for the api key you're going to log into your revenue cad account go on to your app and then under api keys you're going to see it right there so go ahead and copy that and just paste it in there and save it okay let's uh go to the pro view controller because we're going to start here in this view controller we are going to connect to the revenue cap platform fetch our offerings which has the packages which contain the products and we're going to create a button for each of those products and display them here we're also going to handle a button tap on one of those purchase buttons so that we can process the transaction for the user and then lastly we're going to come back to the view controller here and this is the home screen and in the view did load we're going to check the user's entitlements to make sure that they do have pro access if they do we're going to hide the pro button we're going to change some of these things to reflect the pro entitlement so let's go back to our documentation and just double check some of the code snippets that we're going to need so in the pro view controller i mentioned we're going to display our available products well that's just this code snippet right here right and if you scroll down a little bit when the user taps on one of those buttons that represents a product that they can buy we just process the purchase with this little snippet of code and then in the main view controller where we want to check if the user has the pro entitlement it's this little snippet of code right and we just have to insert our entitlement id right here which if you go back to your account and go under entitlements that's this id right here pro okay so let's go ahead and put some of these code snippets into our project so displaying products let's do that first so i'm going to copy this or you could just click that little button there and let's go to pro view controller in the view did load that this is what i'm going to do here fetch the offerings from revenue cat and create buttons for each product ah don't forget to import the purchases framework so that it can recognize uh these things now we don't have this show paywall method this is just you know your own code to show the current offerings so we don't have that we're going to remove that now the code we're left with let's just examine that we have a parameter called offerings which contains all of our offerings and an error parameter that we can check for errors now if we go back to what we configured on the revenue cap platform side we only have one offering so that makes it really easy for us in fact we can get we can get our offer from let's say let offer equals offerings dot current all right the current configure offering in the revenue cat dashboard if you have multiple then you'd have to you'd have to pick which one but since we only have one that's it so the next thing we need to do is get the packages within that offering if you notice here we do have two packages an annual and the monthly and inside each of those packages we have one product mainly the app store product right has the app store identifier here so we have again one offering two packages and one product in each of those packages right so coming back here we're going to say let packages equals offer dot available packages all right now what we're going to do is loop through the packages so i'm going to do it this way um for i in xero to packages dot count or yeah okay we can do that so we'll just put a we'll just put a guard statement here just to check that those packages aren't nil because uh it is an optional it might not have the offer might not have any packages so we'll say let packages not equal to nil else we're just going to return if there's no packages to go through so we can force unwrap it there and then we can loop through the packages so we're going to get a reference to the package let let's just like say p let p equals packages i uh actually this this is it isn't clear because we have uh products and packages so let's say let's say package and we're going to get a reference to the product so let product equal package dot product simple enough right now we're going to get some details for it the product title product price and as well as product duration because it's a subscription so this one's easy let title equals product dot localize title remember you set that stuff up in app store connect when you configured this subscription product dot price check this out the cost of the product in the local currency and that's important because you never know where your user is and let duration actually this one is going to have to be a var because we're going to have to do a little bit of logic to get the duration so let's check this out you see the product has a subscription period property which returns an sk product subscription period all right so let's take a look at the documentation uh just on what this class is it has a couple of properties mainly that it tells us how many uh how many units it is so if it's like one year it's going to be one if it's one month it's still going to be one right it's one unit if it's going to be 14 days it's going to be 14. and the unit is a type of sk product.period unit and this is going to describe it to us whether it's talking about days years months what is it so these two pieces of information is what we're going to need we're going to need to compare the unit with this this enum because this enum tells us you know we're going to need to compare it against the day month week or year i'm actually going to only compare it against month to year because i know we only have those two types of subscriptions so just to put it into practice i'm going to say let subscription period equal product dot subscription period and let here i'm gonna i'm gonna check using a switch statement so i'm gonna switch on the um not the number of units but i'm going to switch on the unit okay so case sk product dot period period unit dot month right so for this case i'm going to set duration to and i'm going to put the unit in there the unit is going to be subscription period.unit and i'm going to concatenate that with uh with month now if i had subscriptions for like two months or three months or four months then i would have to have some logic in here to write whether it should be months or month right plural or singular but since i know we only have one month and one year that's what we're going to put for now and of course if you want to make it more robust because you never know if you're going to add additional subscriptions with different periods and different times in the future you probably should handle that case right now but for this demo i'm not going to do that all right now we're going to do a year because i know we also have one for year all right and now we're going to have to handle the default case and for that we're just going to leave it as empty all right so i think yeah there's still going to be a ton of warnings until we actually use these variables that we're declaring okay so now let's create a button and we are going to uh we're going to add it to the view we're going to position and size it and that should be it let's see all right we're going to gonna force unwrap that because we know there's a subscription period for the product but if you're selling products that um are not subscriptions then you you might not want to do this all right for this demo we're only doing subscriptions all right so let's create the button here so we're going to say let button or var button equals ui button of type system i'm going to set some properties on it button dot tin color is white button dot background color is purple and we're gonna set the title so set title uh this is going to be a combination of the properties that or sorry the variables that we did up here so we're going to say i'm going to say title plus space plus duration plus light space plus the price for control state normal uh we also have to we're gonna have to add a tap handler to that and we can add that to the view so earlier we got a reference to the stack view so we're going to add arrange the sub view and we're going to put the button in there all right and then we're going to position and size it so let's create a constraint for the height oops and sort of relying on auto layout there the button height related by equal to nil height multiplier is one in constant is going to be 90. and then in terms of the width i'm going to relate this to the stack view i'm going to make it the same the same width so i'm going to go with is related to the stack view width and constant zero and then we're gonna add this to the button so button dot add constraint height and then because this one is related to the stack view we actually have to add it to the stack view all right autocomplete was sort of acting up but let me build this project and see if everything actually builds successfully all right so it looks like i made some typos myself uh okay so it's the price the price is a decimal number so we're actually have to get the string value for that let's take a look for our button well i think my xcode is acting up a little bit all right so that built successfully and now we're going to add a tap handler for that so why don't we create a tap handler here because we're going to need to set it as a button handler we're going to have to put that tag in front of it so let's call this purchase tapped and we are going to want the sender as a ui button so it passes the button through so we can check the tag and the tag is going to tell us which product the user tapped on because you know if we have three products for purchase we're going to create three buttons and each of the buttons is going to have a different tag which is going to correspond to the the product all right so here let's add that button dot add target target itself action we're going to use the at selector here or sorry it's the hashtag selector and we're going to purchase tapped for the event touch up inside and actually let's not forget to set the tag so we're going to set the tag to i which so you can remember up here this is that counter that is looping through the packages and how we're going to get a reference to that package later for purchase is we're going to keep track of the packages that we're looping through by declaring a variable up here so we're going to say packages available for purchase is equal to an empty array of type and what is a package maybe we can check this an rc package that doesn't seem quite quite right so okay here so it is of type purchases dot package all right so as we're looping through them store a reference to the package uh at the same index as we are going to tag the button with so we're going to say self.packages available for purchase dot append package all right so the first package we put in there will be at index zero and we're also going to tag that button with zero and then in the next iteration right the second package will be at index one and we're gonna tag the button with one at that point and that's how we're going to link it up what's it saying here all right then okay so this should work we should see some uh we should see a button why is it saying i've never used this that's not right did i okay let's build this just to make sure that okay it's succeeded because it seems like xcode is acting up a little bit all right so if you're using xcode 12 and you're running the ios 14 simulator it's not going to be able to fetch the products from app store connect you're going to get an error if you try to do that here let me just show you that real quick so just so you see what it looks like and what you're going to need to do instead is plug in your actual device and and run it there so it can actually fetch the products and the reason for this is because they are working on some it might be available already actually a different way to test inapp purchases so you can see here you don't see any of the buttons right and in fact if you go down here it's going to say that it could not find the sk product for for these but if you check our app store connect these are the exact product ids that we have so that doesn't make sense but if you run it on an actual device and i'll try and show this to you so i'm going to run it on my device all right and shrink this a little bit okay so i'm going gonna tap on join pro for tours and it crashed oh yeah i know why this is a mistake i made here we should be going from zero to count minus one so if you were keen you probably spotted that like 15 minutes ago when i made that mistake let's try this again all right so now let's hit this button and sure enough we see it except that that looks really weird um sk product period unit year month the price looks right which is great uh the the name looks right let's just fix that unit up real quick there uh subscription period uh this should be number of units that's what i got wrong there this should be number of units right now let's run it again perfect that looks awesome now if i tap on this right now nothing is going to happen because we don't have anything in our button handler right here right but now we're going to copy that next snippet of code to process a purchase and it's actually even simpler than what we've done here all right so let's take a look at the documentation and see what that next snippet is all right for making a purchase what we have to do is pass the package into the purchase package method there so let's copy that and inside the purchase tapped why don't we paste that in there but first which package do we pass into there right we have to get that let package equals self.packages available for purchase and we're going to say sender.tag right because the tag stores the index for that package and down here we're just going to say if the entitlement is going to be in here we pass in the entitlement id go back to entitlement that idea is just pro so we're going to say if that is active then we're going to unlock the pro content now we're not going to unlock the pro content here in the pro view controller because it's actually in the other view controller where we show the the tours right so all we're going to do here is dismiss the pro view controller so we're just going to call dismiss right and then let me just build this again is it referring to here i might have accidentally put that in there or yeah they had they had that extra rounded bracket there okay what's going to happen is they're going to dismiss this popup oh audible we're going to it's going to dismiss this this pop up here right and then when it comes into back to here what we're going to do is in the view will appear we can check entitlements and show pro content so how how does that content get shown right if we scroll down it's get subscription status so let's copy that and let's paste that in there again our entitlement id is just pro so if the user is pro what we're going to do is we're going to remove the pro button so that they can't tap it anymore and we're just going to call remove from superview and we are also going to change the tour label so uh we're gonna say tour label dot text is equal to check out these recommended tours and then we're going to you know do however whatever that pro content is that's what we're going to show here and for the purpose of this demo i'm going to create a you know create a label for the tours so we're going to say let label equals uilabel label.txt equals great tour and we're going to insert it into the the stack view self dot stack view dot add arranged sub view label uh let's see do we have yes we need to import the purchases framework here let's command b and build that and i'm gonna have to use self there all right and that's all it took those three code snippets allowed us to display our inapp purchase products to process purchases and also to check the user's entitlements and then in the next lesson we're going to test it out as you saw in this video displaying our inapp purchases processing purchases from the user and checking the user's level of entitlement only takes a few lines of code with revenue cad now if you haven't gotten your free revenue cat account yet just visit cwc.to revcat5 now i want to turn over to you now that you see how revenuecat works what do you think about it let me know by leaving a quick comment below lastly if you like this video and you want to see more don't forget to click that thumbs up button and hit subscribe so you don't miss the next lesson in the next lesson i'll teach you how to test your inapp purchase implementation on an actual device alright thanks for watching and i'll see you there