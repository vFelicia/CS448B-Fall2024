hey coders what's up it's Chris here and today we're going to talk about PF query constraints now there's a lot to cover and it might even take two videos so let's get started first I wanted to jump back to our parse instance and just to review what we have here so we have a contact class and we have two rows of data we added an email column first name and last name next let's take a look at the parse documentation this is what we're going through here and if you forgot how to get to this page just go to parse comm slash Docs and then select the i/os guides and finally let's go back to our Xcode project where we have a basic query here so the code here is a basic PF query that is targeting the contact class and then we're calling find objects in background with block and this is the block of code that is going to execute after it performs this find objects query and this block of code basically checks if there's an error or not and if not it's going to go through all of the return to objects and print out the first name value of each of those objects now this find objects query is going to return all of the rows in our contact class store so right now we have two rows but let's say we wanted to find something specific in that class well here is where we can introduce different constraints and I'll show you guys how there are a whole bunch of different ones and I'll demonstrate so all I'm going to do is create a new query so I'm going to say let query equals PF query and we're gonna pass in the contact class name just like we did up here but instead of performing the find objects and background right away we're going to say query dot where key and I'm looking for this one equal to any object so let's say that the key first name is equal to Tommy and then next after adding this constraint then I would perform the find objects in background type of thing but I'm not going to do that I'm just going to show you these two lines that you need to know so this is going to look through the contact class right here and it's going to look under first name this key equal to Tommy and it's gonna fetch that and return that so Xcode is complaining about something here definition conflicts with previous value okay that's fine because we're just doing some demonstrations here let me just comment this out for a second and let's look at this next one we're not equal to so where this one is you're trying to look for all of the objects that have a key equal to a certain value this one allows you to search for all objects where the key does not equal to some specified value so let me just copy this line here it's always going to be the same and we're going to write query dot where key is if you scroll down not equal to so we can say return all of the objects where firstname is not equal to Tommy so this would return our other row of data which is John Smith now if I wanted to add multiple conditions I can I can continue to do this where key and then keep adding to that query until I go query dot find objects in the background with block so this is going to perform an end Clause the object is going to have to satisfy both conditions as many conditions as you want to add for it to get returned okay so that is the not equal to comment that out let's look at contained in and not contained in constraint so let's say you have an array of names that equal something like Alice Bob and Mike and you want to return all of the contacts that don't have this first name so you would say something like this so let query equals new query right with the class name contact and then you would put query dot where key and you would say not contained in so we want the first name to not be in the names so you're passing this array into it and you're saying return all of the odd Jex where the first name is not contained in this array alternatively if you wanted to search for all contacts where their first names are either Alice Bob or Mike you would say something like queried where key is contained in this one here where a first name contained in names so that is going to return all of the contacts which have a first name of either Alice Bob or Mike okay simple enough let's look at another one where exists and does not exist so what does exist and not exists mean well if we look at our parse contact class we have an email field first name field and last name field all of them are set to some piece of data now it's possible that when we added a new row we didn't specify a value for email maybe it wasn't provided so this constraint lets you pull all of the contacts which have an email set so you would do something like let me paste that query there so if I wanted to search for all contacts where the email must be set I would say where key right here where key exists and you would pass in well email so that would return all of the contacts which actually have an email that is set alternatively if we wanted to find all the contacts where some value isn't set we would do where key does not exist email and this would return all of the contacts which do not have an email specified okay so that can come in handy and don't forget that you can combine all of these constraints to really narrow down exactly what you're looking for okay this next one is kind of cool and it works for Strings so if we wanted to search for all contacts where the name begins with a tea or maybe Tom or some sort of prefix we would use this constraint we would say query dot where key has prefix so it's gonna search for let's say first name has the prefix of T or maybe T or whatever string you want and this according to our data set is going to return Tommy John doesn't qualify as teo so it's not going to get returned and there's also another one as you saw where key has suffix which is going to return all of the contacts which ends with a particular suffix that you specify so let's say we're first name has the suffix Y ends with Y if we have both of these constraints specified then it's going to look for only contacts which start with tio and end with Y like that okay now let's take a look at one more here so less than and greater than constraint let's say one of your fields is a high score or age or something like that and you want to perform a query that compares numbers or constraints numbers so you would say where key is greater then you also have greater than or equal to and you also have less than or less than or equal to so you have those four so you can say we're age and I'm just making up this field because we don't actually have this field in our contact class but we can say where the age is greater than thirty so that's going to return all of the contacts in our data store where the age is greater than thirty so I'm going to stop here for today and in the next video in part two we'll go through the rest of them but let's review what you have learned in this lesson so we went through a whole bunch of different types of constraints that you could do and you can mix and match any of them in your query and you can add as many constraints as you want to a single query but keep in mind that the data returned has to satisfy every single one of those constraints in order for it to be returned in your result set so these are added as an end so when you read them out it would say where firstname is not contained in names and where the firstname is also contained in names you can see how this query would return nothing because any object in the result set has to be in names but also in names so that would never happen this is probably a more realistic one right here we're performing a query where first name has the prefix tio and first name has the suffix y so there could be some contacts that has that prefix and suffix like in our case Tommy does so that would get returned and finally don't forget that all we're doing here is adding constraints to the query we're not actually performing the query not until you not until you run a method like find objects in background with block and that's gonna actually run the query and then return the result set here in your block of code so in the next lesson we're going to learn more about query constraints and some filters like sorting and limiting the number of items and we're also going to learn how to use or constraints so if you wanted to return data that satisfies constraint a or constrain B rather than what we've gone through today it's all and it has to satisfy constraint a and constraint B all right so thanks for watching and please give the video a thumbs up if you liked it please subscribe if you haven't already and please share this video with your coworkers and family and friends thanks a lot and I'll see you guys tomorrow bye