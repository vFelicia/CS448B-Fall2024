hello welcome to lesson six of how to make iPhone apps with no programming experience in this lesson I'm going to show you how to use Auto layout it's really important because it's the system that describes how we're going to lay out the elements in our user interface how they're positioned and how they're sized and the way that you're going to be learning about Auto layout is by building the user interface of this app we have here and this is a simple card game called War let me run this project and show you guys how it works now if you don't know the rules of this card game it's very simple there's two sides we randomize the cards that are dealt to the player and the computer and whoever has the higher card gets a point now Ace is the highest and two is the lowest so every time I click the deal button it randomly assigns a card to the player and one to the C CPU and whoever has the larger card gets a point which is kept track of down here by the end of this module you'll have built this app yourself now before we jump into a brand new xcode project to build this beautiful interface let me tell you a little bit about Auto layout and how that system works in the old days we used to specify the positions of these elements on The View using an XY ycoordinate system furthermore we would specify the height and the width of the element well as Apple created different screen sizes uh and created the iPad as well and then we had a universal app that could be run on both iPad and iPhone the need arose for a different way to describe positioning and sizing because using that coordinate system and those hardcoded Heights and widths it wouldn't be able to adapt to the big Bigg ger screen size it wouldn't be able to take advantage of all of that extra area so now what we have is the auto layout system which is basically you specify a bunch of rules which are called constraints and then the system adapts the layout within your set of rules to accommodate whatever screen size so for example you can set things like which elements should have the priority to grow to take up any extra space or which elements should have the priority to shrink if there is too little screen real estate you can specify rules that relate elements to other elements such as this button should be 20 points below that image or this label should be 20 points from the left of the screen or 20 points left of another element so instead of specifying all of these hardcoded values you're specifying these constraints that describe the layout and the sizing relative to the other elements on on the screen if the user is on an iPad or an iPhone 6 Plus that has a lot of screen space your elements are going to try to accommodate and fill that screen real estate based on the rules that you have specified and likewise if you have a smaller screen let's say an iPhone 4S you can specify some rules to hide certain elements that might not be needed on a smaller screen size or you can have rules that arrange elements in a different orientation so Auto layout is very powerful but at the same time uh it's a source of frustration for beginners because when you're specifying the rules there are times where you can specify two conflicting rules and your layout won't behave or it won't look like what you intended it to until you figure out which two rules are conflicting because the system cannot satisfy both of the rules that you've specified now another thing I mentioned is that you can specify very specific rules for different configurations so I mentioned that for a smaller screen size you might want to hide some elements the problem that Apple recognized is that there are so many different configurations that are possible you know you've got the iPhone 4S as the smallest device all the way up to iPad Pro and furthermore you have landscape and portrait orientations and for the iPad Pro you have split views and stuff like that so it becomes very difficult and very tedious to specify rules for all of those different configurations so what Apple has done is that they've taken all of those different configurations and boiled it down to a couple of size classes now you can think of them as categories of screen sizes now these size classes are defined in terms of height and width the height can be compact or it can be regular or it can be any as in you don't care about what the height is and for width same thing you can have compact width you can have regular width or you can have any width so that gives you a handful of screen sizes or size classes that you can adapt your layout for so that's a highlevel overview of Auto layout and size classes now we're going to jump into xcode and we're going to build out this user interface for our war app the more you're going to work with uh constraints Auto layout and size classes the more you're going to get used to it and unfortunately that's just going to take practice in this War app we're not going to go too crazy with size classes we're going to stick with the portrait that's the uh vertical orientation we're going to stick with that portrait orientation but we're going to use Auto layout constraints to make sure that our layout fits on uh the I the biggest iPhone down to the smallest iPhone screen size so I'm going to pop open xcode here and once again don't worry that I'm using the beta version of xcode 8 by the time these videos are released you should be able to download xcode 8 in the Mac App Store and the reason why I'm using the beta and recording on the beta right now is just so I want to be ahead of the game and show you guys how to use the latest tools I'm going to go up to file new and project and just make sure that you're selecting iOS up here and we're going to start with a single View application click next and I'm going to name the this the war card game I'm just going to call it War actually don't worry if you don't have anything under team that's perfectly fine and for organization name you can just put your own name and for organization identifier just put com do your name or your company name and make sure you're selecting Swift okay don't select Objective C or else you're going to be doing something completely different from what I'm doing uh devices we're going to start with iPhone and I'm leaving all of this stuff underneath unchecked click next I'm just going to save it on my desktop I'm not going to create a git repository I have that unchecked create and just like that I have my brand new single View application now the first thing we're going to do is jump into the image asset catalog here this is my asset library or catalog for this app and I actually have a bunch of images that I'm going to drag and drop into my asset library now you can download the same images I'm using either by clicking the link on the screen right now or the link will be in the description as well so you can use that okay so when you grab those images you should have all of these I'm just going to press command a to select all of them and I'm going to drag them into the asset Library like this now you might notice that each image like like for example this one says card 2 I have three images that are card 2 one at 2X and one at 3x and that's because there are different screen resolutions so by providing your image Assets in this format where the image name is the same and you just add the at 2X or at 3x suffix to the image name the system will automatically use the appropriate image size for the screen resolution that the user's devic is okay so going back to the asset Library you can see that it has automatically grouped all of those 1X 2x 3 X's together and here are the image asset names which I'll be using inside the app so if I wanted to grab this image I would be taking note of this asset name card 8 same thing with Jack or deal button okay you get the idea so what we're going to do first is ADD our background to the view let's jump into our main. storyboard and in here you can see this left hand side it's going to be very important it's called the document outline and if you don't have this it's basically a toggle button down here that you can click to pull it out now expanding all of these nodes gives you your view here and anything we add into this view is going to be what the user sees and it's going to be shown here in this tree view so this is a good way to navigate all of the elements in your view now down here in the lower right hand corner I've actually got image view already uh filtered for but let me just get rid of that this is probably what you're going to see in the lower right hand corner if you don't make sure you're looking at this tab which is called the object library and you see these guys right here in this text box down here just type in image View and you're going to get this image view element that we can add to our view this is how we're going to display an image now just click and drag it over and put it into your view now you can see in the document outline that this image view is contained within your view here now if you select the image view just click on it on the right hand side you're going to see the attributes inspector there's a bunch of tabs up here you want to make sure you're looking at this one called the attribute inspector and one of the properties that you can set is called image if you click on that drop down you're going to be able to select the background image that we added you can see here that it's not quite the right size and not in the position that we would want it we wanted to take up the entire view so now is the perfect time to introduce some Auto layout constraints so click on that background image view now go down here in the lower right hand corner you're going to see a couple of buttons here now we want to skip over stack we're going to learn about that in the next lesson and we want to skip over a line as well we want to go into this one called pin if you click on that this will allow you to specify the margins uh for the image View and because we wanted to take up the entire uh the entire view we're going to make all of these zero but first of all you have to enable these margins so click on that little red I bar there I'm going to do it for all four of them and furthermore I'm going to uncheck constraint to margins because by default uh the iPhone view here has some margins on the left hand and the right hand side here because I want it to go edge to edge I'm going to uncheck that and then furthermore if you pull down these numbers here you want to make sure that uh you select view instead of the top layout guide which is another margin on the top and on the bottom as well uh I'm going to select view instead of bottom layout guide and do that for the left and the right well they only have view there so that's fine and then change all of those numbers to zero okay I'm pressing tab to tab through all of those text boxes and just pressing zero now the button down here says add for constraints and that means I'm going to be adding four rules one rule for each of these margins so as soon as I click that uh the first thing you'll notice is that the background didn't change and there are all of these orange uh lines here that's just saying that this element isn't looking like what the rules describe and we're going to fix that in a quick second but I want to point your attention to the document outline here because there are our constraints because if we ever want to delete them or edit them let's say you made a mistake all you need to do is highlight all of these four that you just added and hit delete on your keyboard or if you specified an incorrect uh number you can select one of them on the right hand side under constant uh you can see here we put zero but if you made a mistake maybe you put a different number you can change that into zero here okay so let's fix the fact that uh this background isn't looking as the rules describe it so I'm going to click on the background I'm going to go right back down to those buttons in the bottom right hand corner the rightmost one is saying resolve Auto layout issues so click it and I'm going to be able to either update frames for the selected view which is my background or update the frames for all of the views in the view controller so since we only have one view right now it doesn't really make a difference I'm just going to select update all views and now you can see that it's changed that image view element to accommodate the four constraints that we added now remember how we talked about size classes a little earlier well if you go down here right now we're viewing as the iPhone 6s plus so you can see here it says WC HR in Brackets and that stands for the compact width and regular height that's what uh we're viewing it as if you click that you can actually change the size class by selecting a different device so let me select the iPhone 6s and you can see that that I can also change the orientation right now uh the iPhone 6s is also compact width and regular height because those two are very similar in their screen sizes and so they're in the same size class okay now let's select the iPhone SE same thing compact width regular height same thing with this iPhone however if I turn it into the landscape orientation you can see now that the size class is compact width and compact height so these buttons down here they allow you to view your interface in all of these different size classes which is very helpful because you can see how your app would look like in these different devices and orientations now if you wanted to add a constraint or a rule that is specific to that size class you would do that by clicking this button vary for constraint but we're not going to do that in this lesson I'll show you how to do that in future lessons and right now clicking through these all you're doing is displaying your app user interface in these different devices and orientations so not so bad right you might think that now we're going to add our logo up here and we're going to specify constraint for the top margin and then we're going to put our two uh image views for maybe the two cards and we're going to specify the the height and the width and uh the distance that it is from the logo on the top and so on and so forth and use Auto layout constraints to build our uh user interface that way well there's actually an easier way that's going to allow us to build our layout without having to specify all of those Auto layout constraints and it's using a container called the UI stack view or just stack view for short in the next lesson I'm going to show you how to use the stack View to build out the user interface for our war card game thanks for watching and I'll see you in the next lesson bye for now