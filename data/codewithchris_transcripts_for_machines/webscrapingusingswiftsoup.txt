hello everyone i'm frances and today i will be showing you how to perform web scraping with swift ui now what is web scraping well it basically means that extracting data from a website this is important because it allows us to gather data from certain sites even if they don't have an api to interact with thankfully there's a third party library called swift soup and it is a powerful tool that will help us perform web scraping using swift so without further ado let's get started okay so let's start off with creating our basic project so let's select ios and app next let's try web scraping select the theme which is your apple account and organization identifier you can change this if you want interfaces with ui languages with and next okay so we created our first basic project we can now add swift soup to it so we will do that using swift package manager which is just file and add packages now just input your package url or the github page here usually and up next major version we should it should be 2 since 2f5 is version two point something so just do that add package add the package to our target which is web scraping swift swift ui project add that and as you can see here and below in our project dependencies we have swiftsuit 2.3.4 installed usually there's a readme and you'll be able to to have a short glimpse of what this what this third party library has to offer and let's start our tutorial if we look at the first entry of the documentation there's a sweep soup test site here and basically this is a visual representation of how the third party library works and and i'll show you so here we have our basic html and let's just parse it for b so we will scrape all the p or paragraphs from this html and as you can see here at the result took this paragraph called this is uh with the data this is a swift soup test page of course we can get the title just click title parse and as you can see we got triswip soup as the title here so that's basically how web scraping works and how easy it is to do when using this thirdparty library called swipsu so let's actually try doing it on a website okay so to start off with let's just try making a button so we can work with i our a our third party library basically so just change this to button maybe name the button like run swip suit okay add an action let's just say rest should be good and let's try compiling this if our button works and click it as you can see it's pressed so let's start using swip soup now okay so let's start by importing our third party library which is called sweep soup right here so sweep soup and let me just paste my sample html here okay now that we have our html we need we need swept soup to parse it so we will know if it's a valid html or not so let's first let's do let's do a do patch basically so let's do let document to a document let's go to try sweep soup oops sorry rip soup dot bars and html if there's no problem that will run of course let's do a catch so we won't crash our app let's just print error and that should be good so if it's after trying let's try and just print the document let's try running that oh sorry should be documented it should be actually return try okay of course because it's inside a do we need to try it first let's run that so as you can see it we took the text of the document from this sweep soup i mean from this html html string and we can of course check document here again on what's available so there's head there's outer html there's the text of course the title so basically document here is like it contains what uh it converted basically the this this whole html converted it and just it now it can now give us just the text if you want we can get the title from it you can get you know the body from it you can see here or the head which is usually just the title or some other menus and basically that's a that's the basic usage of parsing on html and strip soup so let's just print out html let's see how that goes sorry let's run it okay as you can see the outer html this is actually what we fed the parser so you can look at the html in its raw form so that's the outer html of course we can change that into title and it will print out the title of the html cnc first parse which is this one or we can do the body of course as you can see the what it what's what's returned is an element because it has a paragraph inside here so that's basically that's the document body and of course at as as the example earlier the text it's just a text version of everything that's inside the html or that's readable basically okay so let's do some further testing or further usage of swift soup so let's let's just add uh another element here inside our body let's add another paragraph which now has an a or a link and it's parsed there let's print the body let's see what happens okay as you can see there's now two elements here in our body and we have two paragraphs and there's also an a or a link so what if we want to select right the we we just want the link so like for like here for example in in their sample let me just open the site the test site so if you remember in this test site we can there's a css selector another p which results in the return of all the elements of that selector so to do that here we just actually need to do just let's do let's do a left let's say let's get the link which is an element and let's try try the document and do a dot select so we're selecting for a which is for links and let's do the first one document select oh you need to unwrap it there we go and let's try printing that shall we so let's print the link as you can see now it it it's it just selected here our first instance of the open a of a link so now what if you want to get the like the attribute here let's say the example.com or maybe just the text of the link right so what you do is using this link element that we have let's do left let's say let's get the text of the link so let's just just do link text which is a string basically so let's try to get the link element text so this actually gets this the example let's print the link text you can see example printed just the example the text so if we want an attribute it's actually just let's just do atr yes should be good it's actually link dot attribute and the key of the attribute which is an href and that's basically it i'm sorry let's just print the link attribute let's run and as you can see it took the value of the attribute here of course we can it's possible to have different attributes right so let's just do a dummy attribute just call it like that do a dummy value you know of course there's a there's a lot of other attributes it's just it's just i'm just doing this for an example so let's just print that and run and of course it took the dummy value from our dummy attribute so that's basically it that's how you select select from select an element from the document then you can manipulate that element to get attributes values from attributes or get the text even get the outer html of this this particular link or a particular element you can also get inner htmls so let's say you so here here the outer html is this one and the inner html basically is something like like here the example that because it's inside the the link so this is the inner html because we use the bold attribute right so that's it okay so let's do another example so there's actually what you call a link cleaner and swift sweep soup so let's just paste this html i prepared and as you can see it's just a paragraph with oh sorry forgot let on save html as you can see it's just a paragraph with a link but the link has an on click event called still cookies so it's a bit suspect right so why does your link have an on click event so we can try cleaning this this and save html here by basically let's do just remove this for now and just do let save html let's go to try sweep soup dot clean put the body which is the unsafe html and a white list so there's a few options the basic basic with images none on all html strip relaxed simple text let's just do basic for now unwrap that and that's it's basically let's print let's see what happens let's run it as you can see it changed absolutely it cleaned the on click event change it to something else so the link or the html is now much safer so it might be a good idea to of course when you're running an html um it might be a good idea to first run it in the clean sweep soup and then before doing the parsing that's basically it that's the point of this clean feature to make it safer to work with this the htmls of course since we all we already have like you know getter attributes i get their functions from sweet soup there's also actually manipulation or setter attributes so we can actually set some attributes like let's say here let's do let's just do try document let's say let's select all the all the a's right all the links and we want to change the attribute you can see there's two this one is the getter this app this one is actually the setter so let's do dummy and let's change the value like new value let's do that let's try printing the document after that let's run it and as you can see when we printed our document here in the link we will see that the dummy is now new value of course this applies to all a elements so if you do a all paragraph elements like let's say let's call it new dummy and maybe do another value let's run that and as you can see in our paragraph there's now an attribute called new dummy with another value here you can also actually add classes so add this one add class name let's say maybe you want to add a rounded corner you know same as the attribute of course it will add a new class as you can see here it added a class rounded corner and that's basically it we that's the getters and of course setters of swift soup so this ends our session with sweep soup hopefully i was able to show you how easy it was to do some web scraping using thirdparty solutions or libraries what could have been a quite complicated task of like getting and being able to manipulate this html elements data has now been simplified and it's all thanks to the power of thirdparty libraries like soup now if you want to dive deeper into this i suggest checking out the documentation there are still lots of functionalities but that we didn't cover like this topic about dom like functionalities you know get element by id by tag by class or you know being able to manipulate html and text append element append text so you can also do that and just check the documentation there's a lot of stuff here well documented so to all contributors of swift soup of this library thank you now if you have any specific questions about this definitely post it on our code group forum and someone from the team will jump in to help remember to also use the ideas board to submit new topics or vote on the ones you'd like to see next again this is francis and thanks for watching i'll see you next time