hello and welcome it's chris here this is part three of four where my friend stuart lynch will show you how to create an app on multiple platforms if you've missed the previous parts don't worry there's a playlist right over there that you can check out and if you do enjoy these lessons do check out stuart's youtube channel as well alright let's dive in hi my name is stuart lynch and in this video we're going to be extending our dad jokes application even further currently we have a mac os target for the menu bar version and an ios target for the iphone ipad version in this video we're going to be adding another new target to our app we're going to create a widget using widget kit this widget will use a widget intent to allow users to choose which type of joke they want displayed on the widget and we'll use the widget timeline to refresh the joke every 30 minutes or so as with an ios target we're going to be using a lot of the same code that we used in the mac and ios app i highly recommend that you watch those first two videos of this series as each one builds on the previous one if you completed the ios version you can continue on from there or you can use the completed version of that second video that you can download from the link in the description if you've never created a widget before i recommend that you watch the series created by flow and is available on the code with chris channel you can find the link in the description i also created a series on the cope with chris plus offerings called ribbons that builds out a full widget kit solution and includes intents which is something that's not covered in flow's course in this video i'll be relying on that information so be aware that this is not a tutorial on how to use widget kit but can be thought of as an example of how you can add a widget to an existing app assuming that you have some knowledge of widget kit now the first thing that i want to do is to create a new branch before we create our target so let's do that as we did in the last video and branch from the existing ios branch and we'll call it widget now this widget is a new target and that will be an extension on an ios app from the file menu choose new target and select ios and search for widget and choose widget extension click on next and call it dad jokes widget and make sure that you check the include configuration intent as we'll be creating one that will allow our users to choose from the widget which joke type they want displayed also make sure you activate the widget so that it is the current target like every target a new folder is created with some files along with an assets folder the joke view is not going to be of any use to us because it'll not work on a widget however the joke type the joke model and the api service will be needed so add the widget extension as a target membership to these three files what else can we use in that shared folder we'll not be using any new assets for this target but we do want to use the shared image of the dad namely the stuart lynch image so return to that shared folder and make sure that the shared assets folder also has the dad jokes widget and extension as the target membership now as i mentioned we're going to be allowing our users to long press on the widget to bring up a selection list of the different types of jokes available so that when chosen we go off and fetch a new joke that type so select the intent definition file create a new type by clicking on the plus button and call it choice select the configuration and configure it as follows the top portion is perfectly fine the category and title are what we want and the intent is eligible for widgets only in the parameters section create a new parameter and call it selected choice and then on the right configure it as follows for display name the selected choice is great for the type choose the new type choice uncheck siri can ask for value and run and check options are provided dynamically and then add a prompt select the joke type now we need to create an intent handler extension so from the file menu choose new target and then search for and select intense extension and click on next the starting point will be none and do not include ui extension make sure it's embedded in the dad jokes ios application and then activate it this intent handler is going to have access to the joke type enum as we'll be creating an array of optics for our choices from that enum so return to the shared folder and make sure that the joke type has this handler added as a target membership it also has to know about the intent definition file and vice versa so select the intent definition and make sure that the widget intent handler is also a target member build and it'll generate an intent class that we can use select the widget intent handler target now on the general tab in the supported intents section add the class for configuration intent as the supported intent this should pop up when you remove that current placeholder intent from that field with that done now we can code our intent handler which will be used in our widget this is what will provide us with a list of choices so to do that we need to add conformance to configuration intent handling this will require conformance to that protocol so let xcode do that for you this generates two functions with these same signature one has a completion handler and the other does an async throws i'm going to use the one with the completion handler so we can remove the other one in the body of that function we need to create an array of those choice types that we created and each one has an identifier that is a string and a display name well our joke type has a unique type property that's a string and a raw value that will go nicely as the display name we can use that fact that joke type is case iterable to make each one as a joke type into a new choice where the identifier is joke type dot type and the display is joke type dot raw value so we can let choices be equal to joke type all cases where we'll now iterate over each of the joke types in that array and create a new choice object which has the identifier that is our joke type type and the display being the joke type raw value our completion handler requires an intent object collection and an error well that object collection is just all of our choices then for our completion we can pass in that along with nil for the error great we have everything we need now to code our widget this is the entry point for our widget and we can see that because there is an at main attribute so let's rename that file as widget entry in the navigator as i've done before now the preceding content here are all of the support structs i'm going to keep the dad jokes underscore widget kit entry view struct here because it is used directly and we'll be able to design our widget right here in this view but i'm going to move all of the other supporting structs into a new file so create a new file and call it widget support and make sure that the target is the dad jokes widget extension import widget kit and then paste in those structs that you cut out from that first file you'll get an error in the get timeline function because the timeline doesn't understand what the entry is well what it is is the simple entry so change it to that struct type now the simple entry struct is where we gather the data that we can use for our widget it currently includes a date that will be updated a configuration intent that will tell us what type of joke to present but we are missing one crucial thing and that's the actual joke so we'll need to add one more property to our simple entry and that is a joke of type joke this creates an error in each of the three timeline provider functions we can fix all those at once by using the control option command f keyboard shortcut and the additional argument is added to the constructor for the simple entry instance that is in each of those three functions now the placeholder function gets called by a widget kit when it first displays your widget and it shows redacted information if there's no previous entry well the method synchronously returns an instance of our simple entry timeline entry with the call being synchronous we need to return data quickly so we should just use our sample data until our main timeline method has been called to return real data well we don't have any sample joke to work with so let's create one open the joke model and create a static property and call it placeholder and we can create a new instance and from the api we can see that the status will always be 200 and a response is always going to be success for the joke we can make one up it's like something like what did the ocean say to the shore nothing it just waved and the type is that joke followed by a colon and then a space i don't know why the api does that but for all of the types it always has a colon and a space afterwards and then we can return then to the widget support and to the placeholder function add for the simple entry joke property we can just use that static placeholder the next two functions we'll use our configuration intent which is where we choose what type of joke to fetch if we take a look at our intent it's called configuration and there is a parameter that is a selected choice the handler that we created generates an array of these choice types formed by the job type enum the identifier is the raw value which is what we send to the api whereas the display string is what is presented to the user as a choice so let's create a function that we can use for both of our two next functions that will have the configuration intent as a parameter but returns a string that will be the intense identifier that can be used in our call to the api so we can do a guard check to see if one was chosen else we'll return the dad joke type as a default if it has been then we'll set that return type and return it the get snapshot function gets called by the widget kit when the user is previewing your widget in the widget gallery this method asynchronous returns an instance of our simple entry timeline entry representing the current time and state while the function is asynchronous it is still important to be timely with the response given that the is looking to add your widget to their home screen the url will be the same one that we used in the mac and ios app so if we return to the joke view now we can find it here so let's copy it to our clipboard back in provider let's first get a joke type that we can call type that uses our function and passes in the configuration that is our function parameter when we have the type then we can paste in that url that we copied which uses the same variable name next we can create an instance of our api service passing in that url then we can create an asynchronous unit of work called a task to fetch our data we'll use a do catch block to try and await for the api service to use the get json function and convert it to a joke if we find it we can then move our let entry and completion blocks into here because we now have a joke that can be used for our entry if it fails then we can copy the entry and completion blocks from our do code but change the joke to simply be our placeholder joke the get timeline function gets called by widget kit when the widget gets added to your home screen and then it gets updated by the interval that we specify and that function returns an array of timeline entries meaning you can return the current entry as well as any future entries to be displayed on the widget well we're going to only fetch one at a time so our array that we're going to be returning is just going to be a single entry in that array and that function is very similar to the get snapshot function except that we'll need to specify a timeline and frequency to fetch a new one so we'll still need the type the url and the api service so let's copy that from the get snapshot function now i'm going to delete all the code in the get timeline and construct it from scratch so now let's paste in what we copied next we'll need to know the current date along with an entry date that we can use the next time to fetch a new joke so i'm going to set that to be 30 minutes after the current date so first we'll let current date equal date then we can add a new entry date using the calendar dot current dot date by adding minutes to our current date so we'll use a value of 30 minutes to the current date the closure requires a new timeline entry for our simple entry so we'll need to create another asynchronous task unit and recreate the process of fetching an entry and we do that with a do catch block as above where we can fetch a joke and if we can't we'll let the entry use our placeholder just like above so we can copy from there now in both cases we'll need to create a timeline entry and use that for our completion block the array of entries will be our single entry and then the policy will be that we'll fetch it after the entry date the entry date's optional so let's go back and unwrap it this won't fail so it's safe to do this remember that entry date now is going to be 30 minutes from the last date then we call the completion function passing in that timeline the catch case will be exactly the same because it will always have that placeholder entry one more thing i'd like to do for readability is to change that instance of date to the static now property in both functions so four changes now it's time to design and present our widget so return to the widget entry file we see that we're getting an error in our preview so let's fix that by passing in the placeholder and also change the preview content family to system medium because that is the only size that we're going to be supporting in the dad jokes widget struct we'll need to do a couple of things first i need to specify that we're only supporting the system medium family and we do that by adding the supported families function and that asks for an array so our array will only have that single system medium entry case i'm going to change the display name to be dad jokes widget and then for the description i'll say put a smile on your face and this is what's going to be displayed in the gallery when we choose the widget it's the widget interview where we design our widget and right now it's displaying a text view with the entry date and we don't want that we want to display the joke and we know that the entry will be provided us with a joke in our layout then we want to display an image on the left and then on the right we'll show the type of joke and beneath it the actual joke so start with an h stack and set the alignment to center create an image and we'll use our shared stuart lynch image make it resizable set the aspect ratio to content mode fit and then create a frame with a width of 100. next we'll create a divider that's going to be a vertical line separating our image with the joke to follow so next then we'll create a v stack with the alignment leading and as the first entry on top i'll create a text view that will use our entry dot joke dot type as the title but you may recall that the type here always ends with a colon and a space so i'd like to drop the last two characters and then let me set the font to headline small caps and then below that then in the v stack we'll create the text view with the entry joke and the joke itself is the joke joke property i'll set the font to be of type title but i'll set a minimum scale factor of 0.5 in case it's too long and i'll also add a spacer to push everything up to the top of the vstack this looks pretty good but white's boring so i want to add a gradient background much like i have for my icon so let's embed this h stack then in a z stack or a zed stack and then the first item in the zstack will create a linear gradient for the colors array we can use black as the first item and then we'll use a color of dark gray as the second item of the array and then the starting point will be the top and the ending point the bottom well in order to see our text then we'll have to set the foreground color to white let's also add some padding that looks pretty good now we need to test it now i found with the latest version of xcode 13 widgets in the simulator have been rather buggy so i found that the best way to test this is to set the target to be the dad jokes ios target and select an iphone like the iphone 13 pro and then run the app after the app has loaded exit to the home screen and then long press on the home screen and tap the plus button in the simulator you're going to have to search for the widget and search for dad jokes if you select that you'll see that you have the one and only dad joke medium widget and it will fetch and retrieve a joke using the get snapshot function tap on the add widget to add it to the home screen and at this time it'll use the get timeline function and fetch another new joke and set it up so that it has a 30 minute or so delay later to fetch a new one and renew the joke on your home screen if you long press on the widget and choose edit widget you'll see the intent that will allow you to choose and select which kind of dad joke you want the default if you recall was just a dad joke so you can choose a different one and return to the home screen and you'll get an example of that category now because we fixed the background and the text color the widget's going to look exactly the same on light or dark mode within widgets you can add one or more of the same type to your home screen and stack them for example let me add another one now it adds a new dad joke to our home screen and since i already have a chuck norris one on my screen i can simply just drag this dad joke one on top of it when i click on done i now have two widgets stacked and i can rotate between them if i tap on the widget it'll open the app and take me directly to the app in the iphone the widget will update with a new joke when that first timeline ended and 30 minutes has passed like this and notice that the chuck norris joke has updated as well well that concludes this video and we now have three different ways to view our jokes either through the mac menu bar app or the iphone and ipad app itself and now on our device home screen in the final video of this series we'll be adding one more target and that's going to be for the apple watch i say you must always have the ability to get a new joke to brighten your day but before you sign off make sure that you commit your project to get this is always a good practice and we'll be using this project in the next video see you in the next one and thanks for watching