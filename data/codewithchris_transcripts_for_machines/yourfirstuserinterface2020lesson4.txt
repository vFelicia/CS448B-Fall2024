hello and welcome to lesson four equipped with your new skills and Auto layout and staff views it's time to put them to the test by the end of this video you'll have built the user interface for your ware' card game app so let's get to it so we're going to start with a brand new Xcode project you just click on create a new Xcode project right here or you can go into the file menu and choose new project now make sure you're looking at io s and choose single View application here we're going to put the name of our app and this isn't the public facing name it's just something that is going to give you a unique identifier combined with your organization name and your your organization identifier it's gonna create this bundle ID and I talked about this back in Lesson one and how it's going to be really important for an app that you're going to publish into the App Store now for this app make sure you choose swift as the language you can leave these unchecked and when you save it you can also leave this unchecked as well for now so let's create our project on the desktop the first thing we're going to do is to jump into the asset library for our project and I want you to go and grab the image assets now you can do so in the link in the description below or just check the card just going to pop up in the righthand corner when you unzip the file you can grab all of these images you'll notice how each image asset has three different sizes the first one X and then 2 X and 3x and this is what we talked about back in our OTO a lesson it's for the different devices having different screen pixel densities so we're gonna just select all of them and then drag them into right here xcode is going to be smart enough to group all of them in asset names like this these names just pay special attention to them capitals matter and you can rename them these are the asset names which you are going to refer to these image assets when you want to display them so just change the capital B to a lowercase B here to be consistent and yours might already be changed actually so I'm gonna just I'll change that later so when you download it should already be lowercase B the next thing we're gonna do is jump into the storyboard and we're going to start by adding that green background so go ahead and open up your object library you can either click this button up here and just in case you forget or press command shift and L so let's go ahead and search for an image view and drag it onto the view and this is what we're going to do to display images now go ahead and click into this inspector attributes inspector and from the image property let's choose background now we're going to stretch this out to all of the edges of the screen make sure you have that background highlighted and then click this at new constraints button and we're going to want to uncheck constraint to margins because we want it to reach to the edges of the screen ignoring margins so leave that unchecked or actually actively unchecked out because by default it is on the other thing you want to do is pull down all these little dropdowns and choose view instead of the safe area because we want to specify a margin that is relative to the view rather than the safe area and in just in case we didn't go through what the safe area is if you go into the document outline right here and you click on the safe area it's just that blue highlighted area is the safe area and it's a place that's guaranteed to not be obscured by anything so for example the iPhone 1010 are 10s and those ones they have a notch at the top right and so the safe area is actually below the knotch so anything that you put in the safe area is guaranteed not to be blocked by elements like that and especially if you can flip the orientation so that notch could be at the bottom or it could be you know on any of the sides the safe area will guarantee that it won't get obscured by that knowledge anyways going back to our background image make sure you have it highlighted again click on this menu we're gonna have to start home over so uncheck constraint margins and then choose view for all of these guys before you change the numbers in here I would pull up down this dropdown and change it to view first and then go back and edit all the numbers to zero making sure that all of these red margins are enabled it's going to say add four constraints down here the reason why I want to toggle this to view first before changing the value here is because when you choose a new option in this dropdown it automatically changes that number in the textbox so you know if you did it the other way around you would have to basically change the numbers again so that was just to demonstrate let me just double check that all of them are still set to view okay let's set these to zero add four constraints and you should see your background stretched to all four edges now if you somehow didn't your background isn't looking like mine then you can always just open up this constraints you can delete all of them and you can try again no big deal the next thing we're going to do is add another image view so again open your object library drag an image view onto the view this time we're gonna choose logo and ignore the fact that it's big and fuzzy or whatever right now we're gonna add some constraints to it first so let's horizontally Center that in the container it's gonna look squished that's okay for now and we are going to add a top margin and we are going to leave it relative to the safe area and we're gonna leave constraint to margins enabled because we don't want this logo to be obscured so we want to just make sure it's in the safe area when you add that the image view is going to use the intrinsic size of the image which is just the size of your graphic asset and so it's going to look like that the next thing we want to do is we want to add a stack view so we learned about these in the previous lesson we're going to choose a horizontal stack view and this horizontal stack view is just going to contain the two card elements so go ahead open up the object library again and choose image view now we're gonna put this in our view but we can either drag it into the stack view on the view or we can drag it into the document outline and because the stack view is invisible like this I usually find it easier to put it into the document outline and that's what I'm going to do here I'm gonna drag it here I'm just gonna show you what a potential mistake is now if you drag the image view and you try and put it inside your stack view and it's at the same kind of hierarchy level right here as the stack view that's not what you want you want the image view to be inside the stack view so let me show you what that looks like let me move this image and let me just drag it into the stack view now you can see this little collapsible triangle appear beside the stack view that means I can close it and open it and when I close it the image view is inside the stack view so that's what you actually want we're gonna add a second image view into the stack view so we have two and then you're gonna click on the first image view and you're gonna choose a card so let's just say card six and you're gonna click on the second image view and you're gonna choose doesn't really matter let's choose 10 and now I like to add some space in between the two cards so we're gonna go on the stack view here and we're gonna choose spacing 30 just to give it some space now before we align the stack view on to the screen I want to put this horizontal stack view into a vertical stack view along with a button so we're gonna add the button first let's drag this button down here and let's configure this a little button a bit for the image property of the button why don't we choose the deal button and actually I want to make one little distinction here you can choose background or you can choose image there's a slight difference so for the image property it's going to put that beside the button text but if you choose background that image is going to appear behind the button text so that's what that distinction is all right so now we have our deal button and we have the two cards here I'm gonna put both of all of these elements into a vertical stack view so I want you to go into the document line highlight your stack view hold down shift on your keyboard and click on your button as well and that's going to highlight both of them and I want you to come down here and choose embed in stack view what that's going to do is immediately take those elements that you've highlighted and put them into a stack view now it Xcode is gonna be smart enough to take a look at how your elements are oriented and it's going to see that our horizontal stack view is above our deal button so it's automatically going to put these two things into a vertical stack view check this out stack view boom vertical stack view you can see this in the document outline alright the other thing it does is it tries to set some of the properties of the stack view based on how you laid out the elements so for example here it's at the alignment the center the distribution to fill and the spacing to 46 because that was the amount of space we had between the horizontal stack view containing the cards and the deal button now I'm gonna change that a little bit I'm gonna say I wanted 30 instead of 46 and now let me rename this in the document outline because as soon as you're gonna have more and more elements and you're gonna have a ton of stack views or a ton of image views things can get confusing so you might have noticed for these UI image views when we've set the image property of it it automatically changes the name of that image view in the document outline so that's helpful but for the stack views they're all just gonna say stack views from so for this one I'm going to say cards and you can you can name it anything you want let's say cards and the button stack view right for this one maybe cards stack view okay and for the button you can name these two okay so now let's collapse this and let's position this stack view onto the screen so make sure it's highlighted we're going to choose horizontally centered container as well as vertically and that's going to effectively Center the whole thing onto the screen now I'm going to make a slight adjustment here I am going to go into the size inspector while I have this stack view highlighted and I'm going to take a look at the two constraints we added I'm gonna double click the center Y constraint and that this constraint is basically putting it in the center of the screen on the y axis I want to move that whole stack view down a little bit because I want to make sure that when you're holding your phone your thumb can reach high enough to hit that deal button so I'm actually gonna change this constant and I'm going to add 20 points to it to bump it down just a little bit so just as a review I want to tell you this Center alignment constraint is basically saying that the center Y of that stack view should equal the center Y of the entire view plus 20 points that's that what the constant is therefore that's why it gets bumped down a little bit alright so the next thing we want to add are the score labels so why don't we open up our object library again and choose vertical stack view I am going to just put that there in the corner and then I'm going to add a couple of labels I'm going to drag them directly into the document outline into that stack view and then you'd write two of them so make sure that when you close the stack view the labels tuck inside the stack view alright and now let me edit some properties of this first label and make the color white and I am going to change the text of player and for the second label I am going to change it to zero I'm going to change the color to white and click this guy right here and change the font size to 40 now I'm going to highlight the stack view because we want to position this in the lower left hand corner I'm gonna choose this one the margins and we're gonna make sure that constraint margins is on and then it's relative the safe area it should be by default right we're going to set the left one to 20 and the bottom one to 20 and this button should say add two constraints and that's just going to position it there there's one more thing I want to do and that is to change the alignment to leading so that's gonna make sure that those elements inside that stack view are left aligned let's change the name of this player for stacked view now we're going to do the same thing for the CPU score on the right hand side but this time I'm going to add the labels first just to show you again the two different ways of adding staff views so I'm going to dry two labels here and check this out you can do this you can select both of them remember you hold down shift in order to select click and select both of them and I can change the properties for both of them at once however at this point if I change the text that's going to change it for both of them so let me unselect them and just select the first one and I'll change this at the CPU I'll select the second one and change this to zero and then I'm going to change the font size as well to 40 and now I'm going to select both of them again by holding down shift and then I'm gonna click embed in and choose a stack view now remember when it when you do this it automatically determines which type of stack view is the best horizontal and vertical and obviously because the elements were on top of each other it shows vertical but it also sets some properties for us which we might not want so make sure you highlight that stack view let's go here see spacing at set three so I actually want that to be zero just like the other player stack view and alignment I actually wanted trailing so that it's on the righthand side now let's put some margins on the stack view so make sure you have it highlighted click on this guy make sure constraint emerges it's on by default it should be relative to the safe area which it is let us change 20 and 20 and then down here should say add to constraints and there you have it so you have something like this now I want to test this user interface to make sure that it looks decent on all screen sizes and orientations so the way you can do that inside Xcode is down here it says view as iPhone 8 and so far we've been designing this as iPhone 8 in portrait but if you click this open it's got a little tray and yours might actually show the devices if you've got enough space on your Xcode interface if not you're gonna get this sort of dropdown menu like I do so let's first flip this into portrait actually before we do that make sure you press command S and save because Xcode sometimes can crash you know that's not out of the realm of possibility so change orientation let's change it to landscape and take a look so what'd I tell you an internal error has occurred editing functionality may be limited there's not a problem all we need to do is you can come up to product you can clean build folder and this is good learning for you in case this happens for you and then you can just go ahead and quit Xcode press alt Q and you can quit the whole thing and then you can relaunch Xcode and then just reopen your project and that will often time fix things so you can see here's my document outline you can expand that and here is my user interface now sometimes if yours has all these blue squares with question marks on them all you need to do is just go ahead and change the device or change the orientation to force Xcode to kind of refresh things alright so going back to it we have iPhone 8 in landscape it looks pretty good ain't no problem there and in fact if we you go up in size you're just gonna get more space my biggest concern right now is just to make sure that no element is obscured or hidden or blocked or clipped or anything like that and that the user interface doesn't appear broken it's okay if you have extra space you know you can in the future take advantage of that extra space somehow but what you really want to avoid is to have your elements kind of like overlapping each other in the case that there isn't enough space so instead of going up I'm just gonna check the sizes going down because I know as it's gonna get to the smaller phone sizes things may get clipped so why don't we try portrait first let's just jump right down to the smallest screen size so still looks good right let's flip it into landscape and there immediately you see that our logo is hidden behind the cards it's probably not what you want even if you think it looks ok I mean you can leave it in my opinion I would want to change that and I'm gonna show you how to change that let's go up one size just to see if the problem still exists and it does so let's go up one more I phone and that one is okay so we need to somehow address the situation for these smaller screen sizes before we can do that I need to tell you about something called size classes size classes are basically categories of screen sizes because there are so many different devices and two orientations for each device that Apple decided to separate all of these into different categories of screen sizes so when you're adding a constraint you're able to say something like add this constraint for all screen sizes as in all categories of screen sizes or only add this constraint for a specific size class so this gives us some flexibility to change the layout depending on a specific size class so let's say your app might look different on the iPad size class versus like a smaller device like an iPhone and each size class is actually defined by two parameters a height and a width now the height can be compact or regular and the width can also be compact irregular so for instance one size class might be compact width and compact height another size class might be compact width but regular height and in the case where you don't care about size classes and you want to add your constraint for all of them it would just be any width and any height now let's dive back into our Xcode project now I can show you how we can add a constraint for a specific size class now the first thing I want to draw your attention to is down here beside the view as iPhone se you can see what size class this device falls under so this is the compact width and compact height the first step of this is just to identify which size classes you have to fix so we identified that iPhone 4s also has this problem and the size class is also compact width in compact height if we go up to iPhone 8 the problem doesn't exist but this device still falls under the same size class iPhone 8 plus this one's a different size class because it's regular width and compact height so we what we're going to do in order to fix this overlapping problem is add some specific constraints or variations of constraints to this specific size class so that if the user is using a device the iPhone se or the iPhone 4s in the landscape orientation these specific constraints that we add are going to take effect and they're going to correct that layout for them so let me show you how to add constraints to a specific size class so with the size class that you want to add your constraints into choose very four traits and then we want to introduce variations and that's just the specific constraints that I was talking about we want to vary them based on both the width and the height and that's going to target this specific compact width and compact height size class now this section turns blue and it tells you which devices fall under this size class and you can see that it's the iPhone 10s in landscape the iPhone 8 in landscape the iPhone se and landscape in the iPhone 4s and landscape so any specific constraints you add right now to this size class that's going to affect all of these devices in this orientation so just keep that in mind now let's take a look at what sort of constraints we can add in order to correct this layout let's click on the cards and button stat view so the first thing I think that we can do is just to shorten up the space between the button and the two cards so you can see here that by default we have a spacing of 30 but we can click this little plus icon and add a variation based on a specific size class so based on the compact width and compact height size class let's add a variation so you can see that WC and the H see the signs for the comeback with in combat height we're gonna say when when we have this size class instead of 30 I want to do 20 okay so that's gonna fix the problem a little bit but I'm going to add a couple a couple more variations to completely solve the problem I think the next thing we want to do is take a look at this logo and we want to make it a little smaller for these size classes because the logo isn't isn't a functional part so I think I'm okay with making it a little smaller now we don't have any sort of height or width constraints for this logo but what we can do is add a height constraint for the local right now that will only take effect for this compact width and compact height size class and so we're gonna with the image highlighted we're going to open up this add constraints button and we're gonna add a height constraint and you can see right now it has a height of 67 I'm gonna change that to or add a height constraint of 55 and when I add a new constraint now it's going to be only specifically for this size class right here because this part is blue if this part wasn't blue and it was just great then any constraints I add just like we were doing earlier in this lesson applies to any width in any height so it's like all the size classes all right so let me add this height constraint of 55 to the logo and it's only gonna apply for this size class boom all right so this logo looks a little squashed now but we're gonna address that in a second the first thing I want to do is just show you the constraint we added and how you can tell that it's only applying to a specific size class so let's click on this height 55 constraint look on the righthand side and you can see installed this means it's only applies to the compact width and compact height size class and up here it says there is nothing here this is really the any within any height size class so this is unchecked it's basically telling you that in normal circumstances this constraint is not installed it doesn't exist but on this specific size class it does take affected is installed so that's how you can tell alright so now we're going to address the situation or the problem that this logo is kind of squashed and if you click on it it all goes back down to the content mode and this would be a great chance for me to show you the different content modes so let me first change the background temporarily to blue so you can see kind of where the boundaries of that imageview are so by default set the scale to fill as you can see it pulls the image until it fills up that entire image view right let's check out aspect Phil now aspect Phil will maintain the aspect ratio so it doesn't stretch the image however it's going to start enlarging that image until that image view is completely filled and what that means is that some parts of your image might exist outside of the boundaries of the image view now that might be OK for you and it might not be it really depends on what sort of layout you have another option you can have if you don't want things that are falling out of your image view you can enable clip to bounce and you can see when I click on that parts of the logo just get clipped off right where the boundaries of the image view are and so that's what clip two bounds means but really the setting that I do want here instead is aspect fit right so this is going to maintain the aspect ratio but it's only going to stretch the image to the point where it fills the image view but doesn't exceed its bounds so that I think this is a good way to see the differences between those content modes so I'm going to choose aspect fit I'm going to choose clear color as the background again all right so here starting to look a little better you know things aren't overlapping but if you take a look at the bigger screen sizes let's say this one right here or the 10s there's there's another thing that I want to do I want to bump this down a little bit so I'm gonna choose I'm just gonna go back to the smaller screen sizes first just to make sure that Oh Xcode might be all right so I've got that internal error thing again but it's just something we're gonna have to deal with all right so I'm still varying four traits I'm still gonna move on I think this is fine now I'm gonna select my cards and button stack view I'm going to go into the size inspector and remember we added this vertical alignment conservatory vertical centering constraint and we added a constant of 22 bump it down a little bit well with this iceclass I'm gonna add a variation I'm gonna click this little plus icon for a compact width and compact height size huh classes I'm gonna add a variation and I'm gonna bump it up bump it down even more boom so to me that that looks a little more centered so for these size classes it's gonna do 30 below the center and for other ones it's gonna do 20 and then just double check that it looks okay on the other ones so we've got the four s SE the 8 the 10 so I'm going to click done varying and I think it's gonna look good now you can choose eight you can just double check let's take a look at the 4s let's see still looks good on the smaller screen sizes and when we go into this specific size class' compact within compact height our size class specific constraints and variations are jumping in to save the day now if you're having trouble putting together this layout make sure you grab my Xcode project and compare it with yours you can get it by clicking the card over there or checking the description below now I want to turn it over to you now that we've built this user interface was it harder than you thought it would be or it was it easier than you thought let me know by leaving a quick comment below and if you like this video please subscribe to my channel by hitting that red subscribe button below and make sure you click on that bell icon too if you want to get notified of all of the new lessons now in the next lesson we're going to jump into Swift programming so go ahead and click that thumbnail and I'll see you there