in this lesson you're going to learn multiple ways of how to build a screen of your app now I know you're itching to build user interfaces like these these were done by our designer JC in a piece of software called figma as you improve your skills you'll be able to translate designs like these into your own app inside xcode by the end of the lesson you'll have built this using only these few basic elements a few layout containers a few views and a few modifiers considering that we're only three lessons in this is amazing progress okay buckle up let's get started oh and just a quick note in the last lesson you learned how to use xcode so if you need a refresher check it out right over there also if you're enjoying the series so far don't forget to give this video a thumbs up and subscribe so you don't miss the next lesson let's quickly review how these building blocks come together to form the user interface or UI for short so views are the elements that the user sees on the screen modifiers are applied to the Views to change its Behavior or look and feel finally layout containers organize and arrange views in various ways now fun fact layout containers are also considered as a view just think of them as container views alright let's start by creating our xcode project so go ahead and start a new project under iOS let's choose app I'm going to name mine L3 demo 2 actually because I've built this once before team you can leave as none organizational identifier should be the same as before and then make sure it says Swift UI and Swift core data and tests are unchecked then let's go ahead and click on next and I'm going to save it on my desktop you can leave create get repository unchecked as well okay so here is our brand new project let's expand the window a little bit so we have some space and the first thing we are going to do is just add the image asset for that card into our asset library now again just like last time you can put whatever asset you want I'm going to reuse the Niagara Falls image asset that I used back in the lesson one demo so go ahead and do that okay now in order to build this card I first need some idea of what I'm going to be building now whether that's just in my imagination or maybe a rough sketch on a piece of paper or perhaps it's a design by a designer in this case I had this in my head and I wanted to lay out the biggest elements first and that would be the image and the two pieces of text in addition to that I also have in mind the basic layout container that I'm going to use First in this case that would be the vertical stack which arranges the views on top of each other so let's go into our content view first which is sort of the default view that gets created for you and I'm going to remove the vstock along with its padding modifier so we should be left with body opening bracket ending bracket and then this content view here opening bracket ending bracket what we're going to type in so at this point actually the way we've been doing it is by using the library if you feel confident you can just type out the code if you don't feel that confident yet you can go ahead click this plus icon open up the library make sure you're on this views tab and just type in image drag and drop it that's perfectly fine this is a perfectly safe way to build up to the point where you're comfortable just writing the code and then sooner or later you won't even be using this Library for the image name we are going to follow what we have in the asset Library whatever your asset is named right there so remember to use the quotation marks and we should see an image perfect now obviously it's too big I want it to fit on the screen so we are going to add the resizable modifier so what you do is press dot in the autocomplete menu will pop up and I'm just going to choose resizable again you can do that from the library but make sure you go to the second tab right which is the list of modifiers you're going to search for resizable you're going to just drag it and drop it there another one we're going to add is aspect ratio because this looks kind of squished right and this is all review right now from lesson one we've done this together before it's going to be exactly the same way so there's aspect ratio I'm going to hit dot to open up autocomplete again and choose I'm going to type in fit or just choose it from menu again if you don't see it from the menu you can just type dot fit and it'll still you'll still get the same result as what what I'm seeing here and hit enter I'm going to do dot again this time I'm going to add Corner radius and this is going to round the corners nicely I'm going to put 15 as the amount of rounding that I want and remember in the inspector view here you can choose this tab to configure the modifiers and the view itself so you can see here this is the image this Niagara Falls I can you know change the aspect ratio change the color I can change add some padding here's the corner radius I can increase or decrease it because my cursor is right now it's on image if it's on body you know I won't see that there okay so that does it for the image now I said that we would use the vertical stack to arrange it right so let's go ahead and do that again I'm just going to type it out but feel free to use the image library and the vertical stack whatever is inside of this pair of brackets right here those are the views that get arranged on top of each other so we're going to have to move this image I'm going to press command X to cut it and put my cursor inside the brackets press Comm command V to paste it in there and then I'm going to add the text elements so let's go ahead and type in text quotation marks Niagara Falls next let's add the description so I'm going to put another text element here and then you can type whatever you want all right that's speaking pretty highly of the false now what we're going to do is I want everything to be left aligned and also to add some spacing between these elements so if I put my cursor on the v stack we can come over here and into the inspector panel and we can actually configure those things so let's see how that changes the code so that next time we can just type in the code straight away without having to use the user interface so I'm going to click this alignment and and that adds this alignment parameter here and changes it to Leading let's change the spacing I'm going to put 20 in there and you see that adds another parameter spacing equals 20. and then in the preview you can see those things have taken effect here now let's make the title a little bigger here Niagara Falls so I'm going to put my cursor on the text and we're going to change the font to perhaps title font and let's make it bold let's change the weight to bold next I want to create the ratings to the right of the Niagara Falls Title now when I see things side by side I think horizontal stack this is the same as a vertical stack but instead of arranging things on top of each other the horizontal stack arranges things side by side so let's go check it out so back inside xcode here since this is the first time we're using it let's go ahead and bring it out from the library so we can see the code let's go into the views tab right here and type horizontal stack that's the one right here and let's drag it let's drag it right before the Niagara Falls text as you can see it looks exactly like the vstack except it's an H stack so we're going to move this Niagara Falls Title into the brackets in between there command X to cut it command V to paste it now visually nothing changes because I don't have anything aside from that text inside the H stack but one thing I want you to notice right now is that we have an H stack inside of a vstack so this is how you can begin to build a layout from the combination of layout containers to arrange the views as you want them you can Nest these layout containers now let's go ahead and add an image beside the Niagara Falls let me use the image element just like how we displayed the waterfalls and we can search and find an image of four stars or 4.5 Stars whatever we want to display then we can add that to the our asset Library just like we've done here and then we can put the image name here to display it but I want to show you a different and arguably better way to do this using something called SF symbols let's remove this image view for now and let me bring up this browser window now SF symbols they are a set of 4400 symbols or icons on the iOS system that you can use for free because they're already installed on iOS all you have to do is you know the appropriate name for these icons and you can display them you don't need to search for any images or anything the best thing is that they behave like text so that you can change the foreground color of them you can change the size of them and things like that very very easily let's go back into xcode and see how we can use an SF symbol to display the Stars so just like displaying an image we use the image view but instead of specifying the uh the asset Library name like we have up here we're going to specify the system name of the SF symbol so we type in system name that should come up and notice that it's lowercase s uppercase n with a colon and then we're going to put a name the name of the SF symbol and this has got to be in quotations as well so I'm going to put star and you can see it instantly shows up I did not have to add this star image into our asset library or anything like that another really cool thing is that often these symbols come with an outline version as well as a filled version and typically the filled version you just have the add dot fill to the end of the name and that's what you get now you might be wondering how would I know this system name well that's where this comes in handy so SF symbols is a free download for an app that looks like this and it allows you to either browse through the symbols or search for it so if I search for Star I can see these are all of the system some names that I can use like their star star.fill which is what we just used and there's even this one it's a half star now if you don't want to download this official app by Apple I'm sure I think in the past there were other websites which listed out all the SF symbols you can search SF symbol browser or something like that in Google but seeing as how this is the official Apple app and I'm sure this will get updated first before those thirdparty websites do I would recommend that you use this so what I'm going to do now is I'm going to give Niagara Falls 4.5 Stars so I'm going to put four of these in one of these so I'm going to actually copy this name and that's going to copy this part down here let's go back to xcode and I am going to image system name and paste Loops I need quotations right and now I have one and a half so all I'm going to do is copy this paste it a couple of times so that we have there 4.5 Stars now this doesn't look quite right as well right I want to push the stars all the way to the right and they're also a little big and they're not the color that I want so how do we address this well first of all Let Me Explain how these elements are arranged inside an H stack so let's go into selection mode for now so that I can select these elements and and show you this outline you'll notice that inside this H stack this age stock only goes up to here what's happening is that this H stack is only as wide as it needs to be to fit all of the elements inside of it furthermore these elements inside of it you can see the outline is right up against the text element same thing with the images right that blue outline that's the surrounding frame that's how much space it takes up it is only as big as that view needs to be now this is typical of views they only have a frame as big as it needs to be but there are some views that actually take up as much space as it can so that is actually what we want to put one of these elements is called a spacer now this space review will basically take up as much space as it can so let me demonstrate this again since it's the first time we've used this let's open up the library under views let's search for spacer there we go a flexible space that expands along the major axis of its containing stack layout or both axes if it's not contained in the stack essentially it's just saying that it's going to take up as much space as possible look at what happens here by putting a spacer in between the text and the Stars right here first of all it pushes the H stack right as wide as it can be because remember the H stack expands to as much space as the elements inside of it requires the text still requires just that bare minimum the Stars again requires the bare minimum but the spacer on the other hand is taking up all this empty space right here you don't see the outline but it's right there in the middle so the spacer is a great way to space elements apart as its name suggests now one handy tip before we move on if you have multiple spacers in the same container it divides up all of the available space by the number of spacers you have so if I put a spacer before the text and after the image is here you can see that this space and this space and this space are all equal so the spacers take up all the available space and divvies them up between each other evenly right but I'm gonna remove those two just gonna leave the spacer element in the middle it's going to take everything up here we're going to add some padding to the left and right later anyways okay so let's finish up this ratings by adding some text right below the stars in our initial design we had you know in Brackets a couple of reviews like or the number of reviews there so how would we do that so I could put a piece of text right here that said text um let's put some brackets reviews like that but you can see here it does that not the effect that we wanted why not Nest another layout container so what we're going to do here so this is an H stack right um I'm going to put these five stars in a vstack so that we can put the text right under it so let's create a vstack right here and we are going to put the images in there as you can see it lays it out on top of each other as expected and I'm going to put the review text down there as well now this is sort of what I want but I need to lay these out horizontally right so I'm going to Nest an H stack in there and so that actually gives me what I want now the stars and the reviews text is a little large for my liking so and plus it's not the right color too so I am going to add some modifiers to it so what we're going to do is I'm going to type this out I encourage you to do so as well if you don't remember um following along and typing it out is a great way to remember so to change the color we use foreground color and I'm going to hit dot so we can bring up autocomplete I'm going to choose orange press enter that's there it is it's orange I am going to go to the end and hit dot again and this time I'm going to change the font and red dot again I'm going to choose caption to make it smaller so that's about the size that I would want it now I would have to apply let me just make some more space so it's easier to see yeah perfect now I could apply these two things to each star like that all right and that would essentially get me what I want but there is a better way to do this and that is to put these two modifiers instead on the H stack right here okay Watch What Happens I'm going to take off these modifiers you can see that each of them have the orange color and the caption size the reason for this is because modifiers on a container view get applied to all the views inside of it that's awesome right so I actually want the same thing to happen to this so instead of applying it on the hstac why don't we put it on the vstack so that it includes this text element so command X command V now you can see um the orange color in the caption gets applied to the whole thing and now for the final piece of content on the card itself and those are the icons on the lower right corner so for this it is pretty simple because we have this description text already in a vstack so under here we're going to add the icons we're going to use SF symbols we're going to use system name and let's bring up our trusty app here this is going to be let's use binoculars and we're going to choose the the filled one let's copy name and paste it in there whoops we need quotations like that those binoculars right there uh let's add another one this one is going to be uh I'm going to use a fork fork and knife copy that we're gonna put that we're gonna put the fork and knife first now I'm going to put these two into an H stack like that and I am going to space them so that it is on the right hand side so all I'm going to do is add a spacer element before the two images which pushes it all the way to the right and finally we are going to change the color and the size we're going to add a foreground of gray and the font of caption foreground color Gray font now you can see how typing it together with autocomplete is way faster than opening up the library each time to choose the modifiers and again if you're still more comfortable with doing it this way that's completely fine um I love this new version of xcode and Swift UI where you can have multiple ways of doing things you can configure things through the inspector because it makes it The Learning Experience much better and easier as you progress you'll probably be not even touching the library or an inspector panel you just be typing and you'll be moving really really fast so don't worry if you're not there yet you will get there if you continue to progress along this journey okay so next up we have the background for this card now let's go ahead um this is the vertical stack right you can see when I select this this blue outline highlights the boundaries or the frame of this vstack so like the H stack the vstack only takes up as as much space as it needs to so you can see that it's right up against the edge right there so if we go down this is the ending bracket for the v stack right here if you're not sure what you can do is collapse the code in between the opening bracket and the closing bracket just so it's easier to read so how you can do that is you press your click your cursor here inside the vstack and you can go into um right here code folding and you can fold and unfold just take note of those shortcut keys inside xcode so you don't need to come into this menu all the time but I'm going to choose fold and Watch What Happens see it folds all of that stuff into these two brackets so that you know it's easier to work with and then it's just it's a visual thing that's all it is and if you want to open it back up you can double click it to open it back up and again once you get familiar with xcode you don't even need to bring out that menu you can use your keyboard and just do that and you can move really fast so the reason I wanted to do that is because I want to add a modifier to the vstack and in particular the one I want to add is let's go under modifiers and choose background this one right here layers the given view behind this view so essentially it allows me to specify a view as a background to the vstack so let's see how we can use this to our advantage so this is the background for the vstack and I wonder why it changes it to Blue I haven't even specified any view but that was what I was gonna do so I was going to put a rectangle to be specific so rectangle is a view you can find it actually inside The View Library here it's a simple shape that you can specify a foreground color Corner radius and things like that so I'm going to drag and put that in between the brackets of the modifier by default I guess it's black so this is where things start to get interesting I am going to add modifiers to the rectangle to change its look and feel and that essentially is the background for the vstack so let's go ahead and add a foreground color to my rectangle so I can say you know dot blue for example and that would be blue you can say green that would be green right so let's leave it as green for now we're going to change it later because if I change it to White right now we won't be able to see it now the thing is we probably want some spacing right you can see this is right up against the edge so what we're going to do is add some padding I'm just going to use the padding modifier like we've done before and great we have some padding between the edges of the screen and the card but what about padding inside of the card right you can see the green background we'd want some padding there so what I'm going to do is add the another padding modifier right here the fourth background modifier and you can see that that's this padding right here whereas this padding is this now I know that might be a little bit confusing but the way to think about this is that you have your vstack this is your original View and then these modifiers get applied in sequence that means in order so if you look at the code that we have right now first we have padding so that adds actually let me just remove this code for now I'm going to press command X so that you can see what we have so without this padding modifier you can see that the blue frame right is right there if I add the padding element essentially adds padding to all four sides and now I put the background modifier on there let me just remove that last padding bit right the background gets applied to the padding as well and then when I put another padding modifier it gets applied to the outside of the background like that what happens if let's say I move this padding modifier here right then we get padding and then another set of padding so that's why it's so thick and then the background gets applied if I take these two padding elements and I put it after the background then we get something like this where there's no padding right the background gets applied to the vstack and then you have a set of outer padding and another set of outer padding so the order matters sequence matters here okay so now that you've understand that let's change this foreground color to white and we're going to add another modifier to the rectangle and let's create some space here dot Shadow now I'm just going to specify 15 for the radius and you can see that you have a nice shadow effect that's how easy it is to apply that now the last thing to do is to apply a corner radius to our card now I don't want to apply it after the shadow I actually want to apply it before the shadow because I want the shadow to apply to the rounded card and not round the corners of the Shadow because remember order matters right so if I do corner radius 15 you can see that let's choose this you can see that um I have the rounded corners and then the shadow gets applied but let's see say we do it the other way around right and I put a corner radius on the shadow you can see it it completely breaks things so I want to round the card first and then apply the shadow to the rounded card essentially is the rectangle we're using it as a background for that vstack okay so finally the last step is to put that mint green background on everything and just like in lesson one we've done this before so we are going to use a depth stack right and we're going to put a base color at the bottom and then this V this whole vstack card this whole thing on top of that color so let's do that if you remember what is a depth stack right it is a set stack like that I'm going to put a color I'm going to choose mint system mint okay and again this is the safe area right so we have to apply another modifier to it so it ignores safe area so it goes all the way and then what we're going to do is we're going to put the vstack on top of it so this whole thing right here and keep in mind this is still collapsed which also makes it easy to select command X command V to paste it inside the set stack so there you have it so how was that as you build more user interfaces inside xcode you're just going to get faster and better remember that you can get the associated xcode project with this lesson as well as any challenges and quizzes by creating a free code with Chris account and taking this course on our learning platform we also have a free community where you can get help if you are stuck on something just visit codecrew.codewithchris.com in the next lesson we are going to build an app that is not just the user interface but also includes applogic and user interaction so it's going to be a good one I'll see you there