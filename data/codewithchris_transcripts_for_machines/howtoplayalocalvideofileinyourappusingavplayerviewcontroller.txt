hey coders what's up hope you're having a great Friday in yesterday's lesson we had created a demo where you could play a movie stream in your app so let me demonstrate here that's how that worked well in today's lesson I'm going to show you a variation where instead of loading a URL or loading a stream off the net we're going to include the video file into our Xcode project and play it from there so if you missed yesterday's video just look in the upper right corner here and you can click that to open up that video in a new window and it might be pretty helpful for you to watch that because I'm going to be just modifying that demo to do today's local video version I've actually downloaded that video onto my desktop it's called small mp4 and you can see it right here and all I'm gonna do is just drag it into Xcode and just I'm going to put it there so you might have a couple of checkboxes so for you this might be unchecked it says copy items of needed and what this does is if you have this checked it's going to make a copy of that mp4 into your project folder if you leave it unchecked your Xcode project is just going to reference that video file wherever it may be so for me it's on the desktop this may be a problem if I move the project let's say I send the project to someone and I forget to include the movie file on the desktop so usually what I do is I enable that copy items if needed the second thing you want to make sure is it says add two targets and then here it lists the a/v player demo which is our demo app here so we want to make sure that that's checked because that is going to include that movie file into the bundle or the app package in other words so I'm going to click finish let's review the code that we have here in the viewdidload so we added the a/v foundation and a/v kit frameworks to the project here in the project properties if I scroll down and then in the view controller we actually imported them so that we could use the classes in this class and then we created a new AV player view controller object we declared an AV player property but it's unassigned right now and in the viewdidload what we did was we created an nsurl object off of this URL or this string right here and then we got a check if that nsurl object actually exists because this initializer may potentially return a nil object if it couldn't create that nsurl object so here inside this if statement we determine that indeed it there is an object and then we create an AV player object from that URL initializing it with that URL I mean and then we assign it into that property we created and then finally we assign that AV player object into the player property of the AV player view controller in the storyboard we have a play button here and when that is tapped what happens is this code gets executed it presents the AV player view controller and then when it's finished presenting on the screen it calls the play method of the player so in order to play this movie file that we added into our Xcode project instead of this URL all we have to do is first create a string path to this file in our project and then we need to pass that path into an nsurl object and then the rest is the same so let's do that now let your L path string equals so what we want to do remember I mentioned the bundle before and it's basically when you compile your app you get an app bundle which is the package that gets deployed on the app and right now we're accessing the main bundle dot path for resource and here we're just going to get the path to that small dot mp4 file notice that it returns an optional type string okay so what we're passing in here is the name of the resource which is small and the type is mp4 so because this returns an optional string object I'm just going to put that as the type of the constant here so we don't forget and before we proceed we should check if that URL path string actually exists so if let your L path equals URL path string and then we only want to continue to do all of this stuff if that string was actually valid so in here let's say let movie URL equals nsurl and instead of string which we used before we're going to use file URL with path and we're going to pass in this string up here which points to the movie file in our bundle and notice that this one returns an NS yo object whereas the one we used in the previous lesson where we pass in this that returns an optional NS URL type okay so file URL with path and then we pass in URL path right so this line is what we're doing instead of this line here so I'm just going to delete that and because this guy returns an nsurl object we no longer have to use this optional binding to check if there's actually an object in there so I'm just going to copy these two lines of code I'm going to delete this if statement and then move that down here so instead of passing in URL we're going to pass in this movie URL okay and we're pretty much done like that so let's review what we've done here first of all because we've included that movie file into our app bundle we need to get a path to it so we call path for resource on the main bundle and we pass in what the name of the resource is and that returns a string representing the path to that resource that string may be optional maybe nil if it can't find it so that's why we have to use this optional binding statement to check if it found the path and if it did we're going to create an nsurl object off of that path and then we're going to pass in that nsurl object to create our AV player and then finally we're passing that AV player object into the player property of the AV player view controller and that's what gets presented to the user so now let's run it and see it in action so play and there we go now this file is playing of the local Xcode project so it won't have to download any files or anything like that and the user will still be able to watch that video even with no internet connection so I hope that was helpful for you guys please subscribe like and share the video if you enjoyed it and have a great weekend I'll see you guys on Monday