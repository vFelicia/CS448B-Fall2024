hello and welcome to your lesson 3 exercise now this exercise is intended to be completed after you finish lesson 3 of the beginner series if you haven't watched any of it yet I highly recommend that you start at lesson 1 so check it out in the upper right hand corner or in the description below alright so what have we got here lesson 3 was about stack views so this exercise really is to help you get more familiar with them and that's kind of a hint so again I have the assets for you to download in the link below fire up a brand new single view application Xcode project and try to complete this user interface by yourself now pause the video to do that because from this point on I'll be showing you how to do it if you get stuck you can't get something to look right then come back to this video and watch the solution all right let's do it so here I've gotten a brandnew Xcode project we're gonna start a single view app and I'm going to call this the lesson 3 exercise solution and it's just gonna save it on my desktop here and we're going to go into the asset library and add all of our image assets now this one this exercise was it seemed kind of trivial but I actually threw you a curveball you might have encountered it if you tried it out you might have gotten some auto layout conflicts that you couldn't resolve and I will tell you how to resolve them in this exercise alright so first of all why don't we go into our view here go into the attribute inspector and change the background of block now you could have done this or you could have added like a view that fit all four edges and then set that to black that's okay as well but just setting the background for this view is probably the easiest thing you could do the first thing we're going to do is open up this object library and add a label so you can also click this icon right there that's at the label let's set it to white immediately so that we can see where it is click open this alignment menu we're going to horizontally align it in the container and we're gonna then add new constraints and we're gonna add say 10 from the top constraint 2 margins is on and it's relative to the safe area so that this label doesn't get covered by the knotch so let's say fitness friends and I'm going to change the font and it doesn't really matter what you change it to because the exercise it's kind of irrelevant to the point of the exercise but you know if you want to you can do it so that's our label right there now the next thing to do is to organize the three images below it so that they have an equal amount of spacing so the easiest way to do this is using a stack view vertical stack view we're gonna add it right here now you didn't have to use a stack view could have specified Auto layout constraints manually for the three different images and that would be fine you'd get the same result there's always multiple ways to do things but let's try to use the stack view because that's what we learned in this lesson now I'm going to make it so that it sticks to the left right and bottom edges of this view and it's going to be ten points below the label so let's set some constraints for this guy enable all four uncheck constraint margins the top one is going to be relative to the label so make sure that that's set to that and the left is going to be relative the view right it's going to be relative to the view and the bottom is going to be relative to the view okay so the top is gonna be 10 0 0 and 0 all right so we gonna have that now the next thing we're gonna do is to add the image views into this flock spec view so let's drag it in here oops there we go so make sure you put the image view inside the stack view when you collapse the stack view the image view should be tucked inside like that we're gonna add another boom boom so it's flipping out a little bit because it doesn't know what the sizes are and how much space it should give each image view so go ahead and click your stack view click on distribution here and we're gonna say fill equally so it's going to give an equal amount of space to each image view another thing you'll probably want to do is click each of these image views and enable clip to bounce and that's going to make sure that if the image overflows out of the image view that that overflow portion gets clipped and it's not going to cover the image view beside it or something like that so here we've kind of got our basic framework now all that's left to do is set the image property of each of these image views so let's go ahead and click our first image view and set the image so we're going to set its the barbel so that's the beach we're going to set this to running now notice as soon as I do that we start to get all of these conflicts because what's actually happening is that the the imageview is overflowing the bottom of the screen you see we have a constraint that says that the stack view should be zero from the bottom but because the three images the height the combined Heights is more than the height of the stack view it's it doesn't know what to do so basically there's not enough vertical space on this screen to accommodate all of my content so it's just going from the top we have this little red constraint here that's ten points then we have the label then we have another constraint or margin that is ten points and then we have this stack view which is supposed to be 0 to the bottom and it's got three image views inside and these three images combined have a bigger height than the height of the stack view so Xcode doesn't know what to do what I want it to do is for it to squish the stack view you know just take up whatever space it can remaining and then equally distribute that space to the three images right so there's actually a mechanism to tell Xcode when there's not enough space as in this scenario which elements should get squished or have a higher chance or priority of getting squished and which elements should never be squished all right and that is called vertical compression well content compression resistance priority and you can specify for the horizontal and vertical because sometimes there's not enough vertical space and sometimes there's on enough horizontal space now this is it's always really confusing to me especially in the beginning and you have to think about it as the higher the priority the less likely it's going to get squished right because this is compression resistance priority okay so whichever element has the highest resistance priority that element is not going to get like truncated squished or anything like that if there's not enough space the element with the lowest priority actually is going to get squished first so I can fix this problem simply by clicking on the label here and then going down to content compression resistance priority this is in the size inspector by the way and going down to the vertical part by default it's all set to 750 that's why Xcode is so confused because all of the elements have the same priority so it doesn't know who to which element is compressed right so we're going to up the priority on the vertical axis for this label because you know if there's not enough space I don't want that label to get squished I would rather squish that stack feel a little bit and have smaller images it was your agree so we're gonna just up this priority you know you can up it a couple of points and you can see that it immediately solves this problem so I know I didn't teach you guys this in lesson three at least I don't think I did and so that's why it was a little bit of a curveball so I hope you didn't I hope I didn't waste too much of your time but I don't think it's a waste of time even if you spent a ton of time trying to figure this out I'm positive that you learned something out of that experience and that you became you know more more familiar with Auto layout because of it now if you take a look at this content hugging priority I want to briefly touch upon this as well and this is when there is too much space so this is kind of like the opposite of the scenario that we had here let's say that you or your iPhone app gets viewed on an iPad or something like that or a bigger iPhone and there's tons of space now which element is going to maintain its size and which elements are going to automatically enlarge to fill up the space so that's what content hugging priority is and again it's specified in the opposite way content hugging as in retaining the same size that's kind of what content hugging means so the higher the priority the more likely it is to stay the same size so when there's extra space the element with the lowest content hugging priority that one's going to get expanded or stretched to fill up the space so that's kind of what those properties are there for to give you kind of like finer finer control over how your layout adapts to bigger screen sizes and smaller screen sizes so it's very useful stuff I hope you learned a lot out of this exercise and I'll see you in the next one