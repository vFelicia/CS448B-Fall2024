use your existing widget kit knowledge to create a lock screen widget for ios 16. hey cod crew this is flo in this lesson you will take your existing knowledge of widget kit and bring it to one of the biggest io 16 features lock screen widgets you will learn about the new size classes that got introduced and how widgets work on the lock screen and just a quick disclaimer right now i'm using the xcode 14 beta version which you can find the download link of right below this lesson the actual full version of xcode 14 will be out later this year i would guess that it will happen about in september until then you will have to use the xcode 14 beta because we are using ios 16 apis so of course we need the ios 16 sdks as well which are part of the xcode 14 beta i think you got that point so let's jump right into it first of all let's quickly recap how widget kit works and what you have already learned in this course so a widget just like a swift ui app has an add main annotated struct it's not an app it's a widget and in here you have a body of widget in this case we just have a static configuration with our specific view inside which is just called a widget view this configuration always has a name which is just a string or also called a kind and also a timeline provider which is our provider that we had created so let's look into that next the provider is or conforms to the timeline provider protocol which has to implement three different methods the placeholder method for the widget gallery the get snapshot mesh method and the get timeline method we have already implemented all of these in the previous episodes or in the previous lessons of this course so if you're unsure about how any of this works just go back a few lessons and rewatch them the timeline provider basically schedules timeline entries for our widget view so next let's have a quick look at our simple entry so we have a struct called simple entry that conforms to the timeline entry protocol it always has to have a date associated with it so it can get scheduled by the system and then in our case we also pass in some todo's that we got from our todo api so let's look at a todo there's also just an identifiable and decodable struct it has a user id an id to make it identifiable a title and a flag whether it's completed yet or not and now if we go back to our timeline provider you will see that we use our to do service dot share dot get all to do's function that does something in the background doesn't really concern us in a widget here and then we get back to do's and we only take the first five of them that means that when a widget is shown to the screen it always has a entry associated with it and that entry always has five to do's associated with it as well and then all of that data is displayed via the widget view which is just a plain old swift ui view it has the timeline entry so we had it here specified via provider.entry but the actual type of this is let me add that as well aka simple entry so the provider.entry that's basically a generic so the entry is a generic type of the timeline provider which is then during population resolved to be a simple entry um if we have a look at our provider then you will see we always return simple entry instead of just any timeline entry so this is basically its associated type it doesn't really matter right now at all and then in addition to the simple entry we also grab the widget family which is basically the size class from the switchoi environment and then display different views depending on which size class this got passed to or is displayed in actually so right now we only implemented the system medium and the system large size class in our widget view and if we have a look back into our widget and you can see we have added the supported families modifier and passed in the system medium and system large size class let's start adding the lock screen widgets this is actually super simple and the only thing that you basically have to do is to add three new supported families so let's get started by just hitting dot and pressing a and then you will see that there are three new accessory families added there is accessory inline which is the section above the time on the user's lock screen there is accessory circular and there is accessory rectangular which are the small and the wider widget sections below the user's time on their lock screen now xcode is yelling at me because let's expand this error here the new accessory widget families are only available in application extensions for ios 16 or newer and that's because we haven't updated or we haven't set the deployment target to ios 16. it's still at ios 15 so let's jump into our xcode project file select our target and for the ios version let's scroll up to 16.0 and i think for the widget we also need to select that yeah so select the widget extension and then scroll up to ios 16.0 and now that error should go away in a second once xcode decides to reevaluate it and there it goes it's away okay so all you had to do to support a new widget was adding these three new supported families now if you if we jump back into our widget view you will remember that we switched over the widget family and we only had two cases for the medium and the large size class in any other case this default case would be run which is a text saying not implemented that's of course not really nice so let's replace that and add some new widget ui here so let me clear this up a bit let's add the new cases for the new accessory inline accessory circular and the last one accessory rectangular widget families now as i just said inline is the one that's still displayed above the user's current time on the lock screen and circular and rectangular are displayed below the current time for the inline one i would recommend you to only add text and i think that swift ui is actually smart enough to remove anything from that widget that's not text so we will just add a text of our entry dot to do's and we will grab the first one and just display its title now first here is an optional so we will have to optionally unwrap that or a new coil as that that's what the operator is called and just say no to do's if there is no first to do in that list so that's super simple and then for accessory circular and accessory rectangular i will actually use a new view that was also added in swift ui on the iphone at least with ios 16. i think it already existed on the apple watch for complications and that's the gauge so we will just for the circular we will just add a gauge with a value and a label and as a value we can for example say the number of todo's that were completed divided by the number of to do's that are not completed yet and those five that are um in our timeline entry you could calculate calculate that um an easy way to just try all of this out is to just set any double value so 0.7 in that case a gauge always goes from zero to one so that's basically a you know like a progress view you can imagine it to be like that but we will have a look at it on the lock screen in just a second anyways so let's expand this label closure here and in here we can just put anything that we want and i will just put a text with our entry the date and also let's format that a bit so let's say that they time and we just care for example about the year and that we will have a gauge displaying 0.7 and then the label will be the date of this timeline entry but only the year of that date and then for accessory rectangular let's actually use the exact same thing as for accessory circular let's copy paste that and then let's also add some gourd or gauge styling here so there are a few different gauge styles that we can add and since we're currently an accessory circular let's just use the accessory circular gauge style and then also the one for rectangular so accessory linear in this case okay let's give this a run and have a look at how it works on the user's lock screen okay so the app is now installed on the simulator so we can just press command l to lock the simulator and then press this little house icon here again to go back to the lock screen just press and hold on the lock screen and hit customize at the bottom then you will see that there are three different sections that can be customized by the user the top section which has the accessory inline widgets the center section which just has the time the user cannot really customize this they can only change the font and the font color i think and then the bottom section for accessory circular and accessory rectangular so let's start at the top let's press on the first section and then we can scroll down until we are at the widget kit course app and let's select that widget and then you can see this is probably the title of the first dummy to do that we had in our um yeah that we got from our api service and then let's do the same with the bottom section so let's remove this calendar widget here and then if we scroll down to the widget calls we can select it and the user will be able to see all of the available lock screen widgets which in this case is the accessory circular which is this gauge with a value of 0.7 so that's about right and then as a label it has the current year because that's the the text that we added here so let's select that first and then we also have the accessory rectangular and now a very interesting thing is happening here the gauge looks completely different of course because we gave it a different gauge style but it also does not show its label so you'll have to keep that in mind when you're using the gauge view not entirely related to just widget kit and lock screen widgets but just in general keep in mind how the gauge view works so let's also add that and you will see the rectangular widget is a lot larger about twice the width of the circular widget so let's exit out of all of this let's hit done and select this lock screen and then you will see that we have all three of our widgets that we just created here right on the user's lock screen so in this lesson you'll learn about io 16's new lock screen widgets