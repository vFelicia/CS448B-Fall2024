hey code crew it's chris here last week jc showed you how to design this app inside figma well he told me that you guys wanted to see this turned into code and i'm here to deliver so jc has passed me the figma file and i will show you the fivestep process that i took to turn this design into an xcode project so that you can actually build off of that design and turn it into an app alright let's get started all right so to get from this figma design to an xcode project that looks like this we're going to have to go through several steps the first step is to dissect this design and see what structures we can use from our swift ui toolkit to accommodate these different things next we are going to export all of the assets we need from this design things such as fonts colors icons and things like that then we are going to create our xcode project and we are going to import all of those design assets in the best practices i'll show you what that looks like and lastly the rest of the steps are just implementing the different parts of the view that you see here all right let's start with step one where we're going to break down this design so first of all i see a tab bar down here so that is going to be a tab view in swift ui these icons there's going to be four different tabs now i saw that jc was using icons 8 which is a library of icons that we have alternatively you could also use sf simples which is nice because you don't have to export any assets for this they just come built in however that's not to say that exporting these icons will be hard either and that's completely fine because sometimes you can't find what you want inside the sf symbols library so again i see a tab view here and then here up top i see a toolbar so there's going to be a bar button on the right there's going to be another bar button on the left and then this is going to be the navigation title and then we have here what looks to me as a scroll view because potentially this could be very long so we definitely want this to be scrollable inside the scroll view uh we have a series of v stacks and h stacks to arrange this sort of layout now each of these looks to me as a task or todo item so we will be creating a just a simple data structure to represent a task and we'll create four pieces of dummy data representing each of the four tasks and then we'll loop through that task array to display each of these right we're not gonna hard code each row right we're gonna design one of these rows and loop through it create four of these rows one for each task and then lastly we have a button down here so i know that in order to overlay a button on top of something we're going to be using a zed stack and you know it seems easy for me to say these things because i've done it a bunch of times but for you there may be some figuring out and maybe watching more tutorials like this to see how we can break down a design into different layout components inside swift ui okay so now that we have a plan of action let's go ahead with step two and that is exporting all of the assets from this design now some people will do it um ad hoc so as they're building out the design inside xcode they're going to export the things they need but i find that much more organized if we take out everything up front and we sometimes will miss something and that's fine to go back but i find that especially shooting a tutorial like this if i do it back and forth it gets a little harder to follow so that's why i'm opting right now to export everything i need in some companies this is actually the role of the designer so the designer might give all the exports and a data sheet of all the colors and the fonts and things that are needed and pass it to the developer on a smaller team this might be the developers task in either case it's good that i can show you how i would do it now now we're going to start with the most obvious things first and that is the icons that's probably one of the first things that you think about when dissecting a design now i can see the alarm clock icon right here and i can see there the tab icons i mentioned these are not sf symbols so we will have to export them actually some of some of these do look like it for example that actually does look like well it doesn't have the circle in the middle this one has a circle in the middle uh i i know for a fact that i saw in the previous video that jc used icons eight so i'm going to export them this one however this one's part of sf symbols it's just this circular one right here so we don't have to export that um and then this hamburger menu icon this the three dots the ellipses there and this as well i am going to export as an icon so okay now exporting these design assets let's talk about what we should export it as because there are several options as you can see so we're going to export the alarm clock for example this alarm clock you could export it as a png jpeg svg pdf now i learned something new recently from inyaki we are actually developing a style guide for our team because now that our development team's growing a little bigger um we we need to stay organized and consistent across our coding and projects and so we have these open discussions about how we should do things and one of the things was how we should name assets so this is pertaining to this discussion is relevant we are going to prefix our image names with ic or image or bg or something like that but one of the things that i didn't understand was i traditionally only used pngs with three different sizes for the different screen resolutions but i actually noticed that inyaki was suggesting pdfs for different foreground images and background images so i was asking him why and it turns out that pngs are more memory efficient but if you are going to be scaling the png at different sizes well using a pdf actually scales better without losing any fidelity in the image so our decision was for fixed size things like icons we are going to use pngs for things that may come in different sizes that might need to get resized on the screen we are going to use pdf so for this we're going to export it as png so i'm going to export everything onto my desktop and i'm going to organize them make sure that they're named properly and then once we've collected all these image assets we'll import it into xcode so let's start with the alarm clock here now one thing we're going to do png because we said it was icon and i'm going to click this plus icon to do size three sizes i'm going to export the alarm clock now one of the annoying things at least with the browser version of figma i was researching this i was told it doesn't happen with the desktop so the annoying thing is that if it is embedded in a bunch of different uh i guess layers when you export it let's say something like this i'll just call it alarm it comes as a zip file but that's not the most annoying thing when you unzip it there's a whole bunch of layers in some cases of subfolders before you actually reach your assets and furthermore these are not named the way you you want it to be named for that it's actually the the group here so you've got to change this if you want it to be named properly um with your naming convention you should probably name this ic alarm but that's going to be fine for us because when we import it into the asset library in xcode we'll name it there okay so i'm just going to change this to assets and we're going to just dump all of our assets in there okay so let's do it with these as well so three sizes png we'll call this uh dots we're gonna call this hamburger we are going to call this don't forget this chevron right here call this down arrow i'm going to call this check box and then for each of these icons i'm also not going to be worried about the different colors you can actually use a swift ui modifier that will allow swift ui to use this in a grayed out way if it's like a tab that you're not on and it'll tint it the accent color of your app as well so it doesn't really matter what color you have here call that the inbox i'll call this the reminders and call this the settings all right and that should be all of the image assets that we have here so let's go back to our desktop and i'm going to unzip each of these and then i'm going to throw them into our assets folder so that was the dots probably easier actually just to drag these into xcode rather than moving them all into one folder so i'm just going to leave them here for now what we're going to do next is we're going to create our brand new xcode project and we're going to add all these images and we're going to add the colors and fonts as well because we don't need to export those into a folder so i'm gonna i'm gonna minimize this project because that's the finished one and let's create a brand new pro xcode project uh i'll just call this figment code app and we'll put it in here all right so first of all let's jump into the assets catalog here and what we're going to do is create a new folder for images and we're going to create another folder for colors so those should both be top level and we're going to put the accent color in two colors if you didn't know this accent color is pretty cool you can set this to any color you want and it will change like all of the default button colors and actionable text you know that all of the tappable stuff uses this accent color so this is one easy way to change everything to this blue for example right you can see that it's actually good user experience to make sure that you use the same color to indicate something that can be actioned on or tappable so links buttons tab things tab tabs tab buttons and things like that so we can set the accent color to this blue and we don't have to set manually the colors there but we're getting ahead of ourselves let's do the images first so and this was probably a lot a little easier to do it this way uh did i miss any there's a whole bunch here yeah i kind of got mixed up with the organization here so we need this one yeah okay so let's dump these all into the images folder here and let's rename them so this one is going to be ic alarm this one is going to be i see a reminders no inbox because ic stands for icon again task list hamburger and this one is going to be reminders okay i think that is it for now so in terms of colors let's set up that accent color that we talked about so if i hold down command and i click on this i can get into the circle and i can see that this is the accent color let's double check with this active tab color is the same one right here so i'm just going to go ahead and set the color hexadecimal and set it to that and we're going to add a couple of other colors so what colors do we have here we have i'm assuming this is black right yeah it's just black okay so we have black which we don't need to make a color for we have white we have this background this gray background so that that's a color this one right here so i'm going to call this color set background now i'm naming these with the capital letter in camelcase because this is what apple used as a standard here if you actually change accent color to like lowercase a and lowercase c it's not going to recognize it as the accent color so for colors i'm going to name it use camel casing for images like this i'm going to use all lowercase and the nice thing about defining these colors here is that if you define the dark mode version of that color here when the user uses dark mode there's very little that you have to do it will automatically select the dark mode version and then for any anything else it'll use what you have here and you can also define the light mode here if you want okay so we have the background as gray and we have the black we have this blue this this blue actually we don't need this blue because it's part of the asset that we exported already and that's it yeah those two actually might be the only colors that we have okay then now in terms of font so let's talk about fonts if i click on this the font is inter now that's not something that comes as a system default and i search this up and enter is a font that we can get from here i just googled it so if you google interfont you'll come to this page i'll link it below in the description as well so we can use it here i'm not gonna obviously before you use a font that you're gonna you know put in an app that you're gonna sell or something look at the license because that's important for this demo i am just going to go ahead so i'm going to download this as a zip file i'm going to unzip it on my desktop and what we're going to need let's see desktop variable web let's use the desktop version if i look at the figma file here and i look at the design we have interweb bold okay so i'm going to need the bold version that's this one right here um what what's this sem semi bold okay this is intersemi bold that's basically all that wait there's this one here this one is also semibold this one is semibolt okay so we only need the bolt for this and we need everything else in here is semibold we only need these two bold and semibolt these two files so we're going to add these to our project let's create a new group the fonts unfortunately we can't import them into the asset library so we're going to have to drag them and actually put it into our xcode project now i don't know why this isn't a default but make sure you check this otherwise the font files won't actually be included in the resources for this copy items if needed is good because it's going to copy those files into your project folders and you're going to have these two now we're not done yet what you have to do is go into the project p list it used to be a p list but now it's in here so if you click this node and then you click info here are this basically some configurable properties for your project we're going to have to specify that we want this project to use these fonts font files so make sure that at the very bottom click this plus and then we're going to search for capital f so you just do lowercase f it's not going to come up capital f fonts fonts provided by application okay this is gonna be an array meaning you can specify multiple fonts so expand it and then for the first item is a string we're gonna put the file name including the extension so it's otf right here and then i'm going to click plus again making sure that it says item one now and add the other one oops if you make a typo it's not going to recognize the font if you accidentally add extra items hit the minus icon right there okay so now we have these two font files uh now we're ready to go but to make it easier for ourselves let us define some font styles that we can easily specify in our views so let's go ahead and click new file here open a new swift file we'll call these font styles and this is going to be an extension to the font class and here we are going to define a couple of new font styles so this one let's say the bold one here this is a navigation title so i'm going to call this a nav title this is going to be a font and we want this font to be custom now you're going to need to know the name of the font that you want to use and that's not necessarily the name here i don't think in the past we used to it wouldn't always be this name that was imported here we needed to figure that out but in this case it is now i'll show you how to figure that out if if it happens not to be but for now let me just put this and then let's check out the size the size is 17 for this see it's inter bold and 17 so i have inter bold 17. so now when it comes time for me to configure the view for this title i can easily just you know specify this font style so we're going to do that for a couple more we're going to do it for let's see what's this enter semibold 14 enter semi bold 14 enter semi bold 14. this is intersemible 12. okay so we're going to have 14 and 12 has two different ones 12 is for the um the task alarm text and interseminable 14 is for everything else so let's call this task text enter semi bold what an autocomplete come up and this one is going to be task alarm text and it's basically the same thing except it's 12. oh we uh we need to import swift ui yes because font is a swift ui thing okay command b to build it hopefully everything looks good okay succeeded um and now we've successfully imported all of the design assets into our project now i promise that i would tell you what to put in here right in case that the font names don't actually match up with these names here so what you can do is for example you go into your initial any initial view either the app entry point or this you can write an init method here and then you can literally just print it out into the console so you can do it look like this for font family in is it font i haven't done this in a while ui font family names yeah that's right um then you can print out so let's print out the font family names first so i'm just going to run oh i didn't want to run it and then ipod touch let's do that okay so there's nothing to see in the ui because there's there's nothing there but however when this finishes launching we should see all of the family names here perfect okay so make sure enter is right here if you don't see enter on this list that means it doesn't recognize this font so double check that if you click on this font file it has this checked so that it is included in this target the other thing is make sure that inside the info p list that you did what we we did here fonts provided by application and you put the file names with the extension okay so these aren't just the family the font family name but not the actual font names so you got to go one level deeper so you're going to come in here and inside instead of just printing the font family we are also going to print out uh for font in font family so you're going to loop through each of those and you're going to print perhaps let's do that oops so then we get a little indent it's a little easier to read oh my gosh i don't know what happened there well actually instead of doing this i remember now so ui font dot font names for a specific family we're going to pass in the font family all right now we're going to run it and we're going to see the actual font there we go so for enter if we go all the way back up enter there we go enter semibold and enter bold so if you did this and you're assuming that these are the font names and it didn't work then you do this right you loop through the actual font family and find the actual font this is what you're going to be specifying what you find here this is what you're going to be specifying to identify the font like here okay so i hope that was informative lucky for us the actual font name matches what we see here so i'm going to go back here and remove i'll remove the init as well because we don't need that right now okay so we have dissected the design so we know sort of what layout structures to use in swift ui we have exported all of the assets from the design and we've also added all the assets into here the next step is to construct some of our initial views now i said that for the initial outer structure we have a tab view and that's what we have here so that's what i'm going to do i'm going to in the content view here instead of just a piece of text we're going to have a tab view now inside the tab view there are going to be the the different tabs right so i'm going to call this one that you see here the task list this is going to be the inbox this is going to be reminders and this is going to be settings so i'm going to create all of the views so that we can attach the tab icons to them but we're actually only going to be implementing the task list view because that was what was designed so let's go ahead and just create those other dummy views and use a swift drive view task list let me just sorry i'm going to delete it because i want to name it something different i want to name it task list view we have a settings view we have an inbox view and we have a reminders view okay now i am going to go into our content view and now we can have those different tabs task list view all right we have what's next inbox view we're going to have reminders and finally settings view that matches the different views we have here let's attach the icons so we have a tab item this is just going to be image named ic task list and that's why i named them this way so i named them according to not what the icon represents um sorry not what the icon is but rather what the icon represents uh this would be reminders inbox okay so now let's launch and we should actually be able to see something great oh yes so the reason why this is the way it is is because this is blue you know we exported this as a blue icon and these are gray so that's why it's showing it like this and i'm actually tapping on these icons but nothing's happening it actually is switching the tab it's just that these images what we have to do i i told you it wouldn't matter what color we we exported them as because what you can do is change the rendering mode to template a mode that renders all nontransparent pixels as the foreground color right now i think by default like is this one a mode that renders pixels of images as is that's why the first one was blue because we exported it as blue so let's see what happens if we do we render these as template see it's going to allow the system to use them in the way that it needs to be used with the accent color you see that blue if we had specified the accent color as green inside here then that actually would be green instead okay and this is not changing because all of the views have this hello world default text and that's why even though we are actually changing the view between the different views we just created it all says hello world so we're going to modify the task list view first and one of the first things we can do is probably just to add um the top part here where's the design here by adding the navigation title here we're going to add you know these two these two buttons as well or icons i'm going to leave them as icons because we're not actually implementing the functionality we are going to use a modifier called toolbar and we're going to be able to specify those three elements up there so first of all let's do toolbar item and we're going to be able to specify the placement as well as what to put as the item so the placement is going to be navigation bar leading and the content is going to be the image i see ham burger so let's see if we see what that looks like first okay so we don't actually see the toolbar and the reason is because they're actually um there is no toolbar on there yet we're specifying that we want to put a toolbar in this task list view now in order to have a toolbar area what we're going to want to use is a navigation view wrapping our task list view so if we just create the navigation view for a second here we are going to move the task list view inside our navigation view and this tab item modifier now goes on the navigation view because that's sort of the outermost view and if i run it now you'll see that there is a navigation area for the toolbar to reside in now the next thing i'm going to do is specify a title for it for this so navigation title is going to be today all right and it's going to show like that because that's sort of default ios styles but what you can do is you can do navigation a view style and you can change it sorry not navigation view style navigation title uh i forgot exact name here display mode navigation bar title display mode to inline and that's going to put it up here okay then we're also going to want to add the right icon so we're going to do a toolbar placement for navigation bar trailing and this one is going to be the ic dots so then we have this but notice how it doesn't look exactly like what we have in terms of the font right we want to be able to change the font to be this is interbold 17 and in fact we already have a style for that right font styles we have this nav title font style so in order to be able to specify you know a style on this i'm not going to use the navigation title modifier i'm going to get rid of that oops got rid of too much just that modifier and instead i'm going to put another toolbar item in the middle and that's going to represent that title so the placement in the middle is called principle and this is going to be today and then now i can specify the font using my nav title font style that we did and you can actually get rid of that as a shortcut there so now let's see how this looks so now this is looking more like that perfect um also i wanted to say that even though we don't have a navigation bar title per se because this is just the text element we put in the middle um it's good to have this line here because if we didn't have this line here it would actually leave a whole bunch of white space right underneath for that navigation title even though it's not there so you'll be able to that's going to be more apparent later when we customize here and we see the the task list and maybe i'll remove this modifier at that point to show you how that is going to be bumped down but by having this navigation bar titled display mode to inline it actually gets rid of that space that was meant for that title and yeah it just gets rid of it okay so the next step is let us specify a background because remember the background's gray right now our background's all white so in order to specify the background uh i am going to do a zed stack here we're going to have a color it's going to be background and we're going to put this text element in there and this toolbar modifier is actually going to go on the z stack now actually let me just press command a and then control i to indent everything properly okay so now does everything look great to you it doesn't really to me let me let me just double check what's happening here green okay so it is green okay so this is green um however i want it to go full screen right the color i don't want it to stop here and here so that is why we are going to specify uh ignore safe area perfect now i'm going to change this back to the background color background okay and now let's specify the next step is to do this area right here i mentioned that we are going to set up a struct to represent the data here because i see that these are basically four tasks so we're going to create a task struct with a title and perhaps that's it but if you were building this out for real obviously you'd have like a boolean flag for maybe if it's done or not and a date property for when it's due as well so let's go ahead and choose new file and we're going to choose swift file let's call this task and here construct task i'm just going to create one property called title and we'll leave it at that i will have a static method for this called get dummy tasks which will return an array of tasks so far tasks and then here we're going to build up some dummy data just to to mirror what we have down there so tasks dot append all right so now that we have that done we are going to go back to the co sorry task view list and let's create a property up here for um well i think typically you would create it as a state property but because we don't have that data changing in this demo i'll just create it as a regular property get task dot get dummy tasks and then in here i can actually loop through those four to create these um but before that there is an outer structure to this table of sorts right we have a scroll view probably first this in inside the scroll view we're going to have a v stack of these elements right a v stack containing an h stack which is horizontal so these three elements here are horizontal and then we're going to have a v stack of these rows each row is going to be an h stack with this button this title and then this v stack here to vertically stack these two above and then to put this white background behind it we're going to do that last but we're probably going to have to do scroll view and then zed stack containing the v stack table as well as the white color they'll all make sense when we actually do it so let's start with the scroll view let's get rid of this and do a scroll view and then here i mentioned a vstack we're going to have an h stack for that initial you know today and this and this and have a spacer in between uh font is going to be font task text we're going to have a spacer and then followed by account and that chevron spacer and then we're going to have a text which is going to be this is tasks.count and then the chef ron is going to be i see down arrow we can probably put let's see oops probably put this font modifier on the hdac itself so it'll apply to all the text in there okay and then underneath that we have a four each the data is going to be the tasks and the content is going to be an h stack containing like the h stack represents the row so it's going to be like that the title and and that um okay but before we do that h stack the task has to conform to identifiable so that we can actually loop through them and uniquely identify so let's conform to identifiable and we're also going to have an id property equal to to the uuid so that's going to resolve that it's going to be able to distinguish all the tasks for each row we're going to have an image which is going to be ic checkbox we're going to have the text as the task.title and the font is going to be font dot task text and we're going to have a spacer right the spacer is this space right here followed by a v stack with these two so for this v stack there's going to be some default spacing and we also want to write a line because otherwise this alarm clock will be right under the text there we can just do that anyways let's just check out how things look before we do anything else because we've we've done a lot of coding okay so let's just run it as is and see see what all of this looks like huh okay all right so um yeah so there's that there's that there's that there's that this you see how the alarm clock's in the middle we also then add the font style to that um and it does look like we need that gray color because i don't think we we added that as an asset so let's call it alarm text maybe what color is this okay this one right here oh did i add an image set oops let's delete that and add a color set okay let's change that that okay so now we have this gray as alarm color go back to the task list and we can change this to foreground color color alarm we can also change the font style to font dot task alarm text and then we can also change the alignment here to trailing and what else was wrong there might be oh sorry this is the the design yeah there might be too much space in between the text and the alarm right here if you hold down well there's like zero basically because this is this is the outline of this alarm icon is right up against the outline of this text but there is a little bit of a gap there so i'm going to try specifying spacing as 0 and let's see how that looks okay that's too little spacing so maybe i'll specify three or something something like that three all right notice how there's no padding anywhere and the scroll view works right so let's check check the padding okay so there's there's actually two different sets of padding right here because there's padding from the white rectangle to the edge of the screen um and i'm holding down control i click the white rectangle i hold down control and i can hover my mouse over here and i can see that so on the horizontal sides there's 16 on the vertical side there's 10. so actually before we add the padding let's add the white rectangle because then we can actually do it like how we see here so the background is great i know it's hard to tell but we're going to add a white background behind these tasks so let's go back to xcode and take a look at how we're going to do that okay so that's the v stack containing all of our elements so i'm going to do that put a rectangle foreground color is white i'm going to cut this vstack and put it into here um let's take a look at how that looks i don't see anything i don't see a difference is it because let me change the screen oh okay so the background is working but it is actually this background that's not working it's supposed to be gray all right is it because our color background oh i set this background color wrong did i not set it at all well okay that's an easy fix let's go back to our figma file the container what is this background color right here this one right here that's what we need okay so now background shouldn't be white okay let me change that task list from green to white we should see a contrast okay now perfect so we have a gray background we have a white task list box let's add some padding to this the outside of the white box we said that it is going to be let me highlight this box again 16 on the horizontal side 10 on the top side so we are gonna actually apply that here to the zed stack so padding along the vertical edges 10 and 16 on the horizontal edges all right so we have that now we need to do the padding on the inside so this is a little easier so we just pad the v stack if we take a look at see here 16 18 eight okay well it's 16 on the horizontal let's see padding horizontal 16 padding top was was it eight yeah i think that was eight and then i just think it's 8. all right cool and obviously to make this when you're actually going to build this app right right now this is an image right you'd want to change that to a button and then depending on the the state of the todo right for the task you would probably where's our task for this you know you'd probably have a boolean identifying if it's done or not and then depending on that boolean flag you would display a check mark or that box the last thing we need to do is add this big icon so let's go ahead and do that on the task list and right now it's pretty simple to do because we already have a zed stack with the gray background the scroll view and all we need to do is add that this right here so i'm going to copy the name plus circle fill we're going to make it resizable because we need to set it at a certain size let's hold down command and click this and we can see it's 64 and 64. so frame wise 64 and 64. i'm not going to specify the alignment but i am going to specify the foreground color of it to be color or accent color oh actually this is not going to be placed where we want it to be placed so we need to place it down here right and there is some padding 24 28 from the bottom 24 from the right um so i'm going to to push it all the way to the bottom i'm going to do a vstack with a spacer push this all the way to the bottom however there is padding dot bottom 28. and we are then going to push all the way to the right with an h stack spacer there may be a better way to do this actually but off the top of my head that's what i'm gonna do trailing 24. yeah it's not a button but if you wanted to make a button like any of the things that we we did you would add a button just put this as the label and this is like to do a new task all right so now it's actually tappable yeah so that's basically the general steps you would take to um turn a design into a working xcode project now just to recap the steps the first step is to take a look at the design and see if you can break down the design into swift ui layout containers so you can see how you would lay everything out the second thing is to export all of the design assets if the designer hasn't done that for you the third step is to add them all into the project and it makes your life a lot easier if you have some sort of naming convention um and then the fourth and all the steps after that is basically just laying out your views i didn't really specify um where we were going with each of the steps but i guess step four would be laying out the initial structure of the app so for us that was the tab view that was the navigation view and things like that modeling the the task you know that's the initial stuff and then the fifth step would be then going granular diving into a view and then creating those different layouts and then also adding the modifiers to use those assets that you added such as the fonts and the images and the colors and things like that because you did all of that up front makes it a lot easier when you're actually at the point where you're implementing the screen so if you found this helpful we do a lot more of this in our design course inside cwc plus there's an introductory offer in the description below this youtube video if you're a brand new member you can check out the course as well as all of our courses in our entire catalog inside our cwc plus membership thanks for watching and i'll see you guys next time