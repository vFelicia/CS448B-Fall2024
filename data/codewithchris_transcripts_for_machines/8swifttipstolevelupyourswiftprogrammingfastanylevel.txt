hey code crew I hope you're all doing well today I'm going to show you eight Swift tips that you can use today to improve your Swift programming skills and if you watch the end I'll throw in a bonus tip for a total of nine and this last one is one that I use and love often in my own coding now some of these tips are going to help you be more efficient some of them are going to help you organize your code and yet others will just help you write less Swift code but no matter what all of them are things that you can apply today no matter what level of Swift coder you are so if that sounds good please give this video a thumbs up because every single one helps this video get more exposure so thank you and I appreciate it all right without further ado let's start with number nine number nine optional binding where the name of the constant is the same as the name of the optional in this statement my car is an optional and we're checking my car for value before printing out the actual name instead of doing this did you know that you can instead write it like this so here the constant name is the same as the optional name in that way inside the scope of the if statement you can simply refer to my car for the actual value less variable names floating around means less confusion and code that is easier to understand number eight the nil coalescing operator and here's that my car optional again in this piece of code we have a variable called car name and depending on whether the my car optional has a value or not we want to either assign the actual value or a string called na into car name you can use the nil coalescing operator to shrink this down to something like this that double question mark is the nil coalescing operator and if the optional is nil then they'll take the value on the righthand side of it instead of the actual value in the optional number seven shorthand if statements similar to how the nil coalescing operator helps you write less code you can shrink down if statements often times to instead of writing something like this where we check if grades is over 50 and then assign the string into message you can write something like this on a single line and this means exactly the same thing the format is condition followed by a single question mark followed by the statements you want depending on whether the condition is true or false the true statement comes first and then a single colon separates them number six decentralizing your hardcoded strings in a constants file okay this one is really easy here's how you do it create a new Swift file inside declare a struct and add your hardcoded strings as static properties if you have a lot you can even nest strux for another layer of organization now whenever you need to refer to the hardcoded string simply reference your static properties of your constants file you know I gotta say coding is really important for app development but that's only one side of it you also have to consider how the app looks and feels and overall it needs to have a great user experience back when I was doing software consulting we had teams of designers and user experience folk just focused on that and since I became a solo developer I've had to pick up some of these UX tips myself one of the best classes I took on this was on Skillshare intro to UX fundamentals of usability by Marika McCloskey now her being the director of research of user testing there were so many interesting insights on how people actually used digital products I learned best practices for designing apps for usability and also how to evaluate the usability of an app I highly recommend it as it happens this video is sponsored by Skillshare an online learning community with thousands of classes ranging from coding entrepreneurship animation design music and so much more in addition to the usability cost that I mentioned before another class I'm taking that I think will improve my apps a lot is animating with ease in aftereffects with Jake Bartlet because I'll be able to use these animations inside my apps the thing I like about Skillshare is that it's really affordable it's less than ten dollars a month with an annual subscription there are no ads and they're constantly adding new premium classes right now Skillshare has a special offer for our code crew here the first 1,000 people to click on the link below in the description will get a twomonth free trial of premium membership you can use it to explore all of the classes that they have to offer so definitely check it out and take advantage of it alright with that said let's go on with our countdown number five pragma mark now this tip has to do with organizing your code if you take a look at this example it's hard to tell what these methods do especially with such bad method names however using pragma marks we can at least separate them into sections here's how you do it you use double forward slash like a comment and then you write mark in all capital letters followed by a colon and then space and space and then this is whatever you want to name that section now you can leave at the but the dash adds a separator line another benefit to using pregnant marks is that in the jump bar when you pull down to see an outline of the file you can see your pragma marks and the separated lines number four another way to break up your code file is by using extensions in the Swift documentation it says that extensions add new functionality to an existing class among other things using an extension you can add quite a bit including properties methods conforming to protocols so if it logically makes sense you can create an extension for your class and move part of the code to the extension instead for example often times when I'm working with table views I like to move the code which conforms to the UI tableview datasource and the UI tableview delegate I move that code into an extension for the view controller just to separate it out with the other code on the other hand you can also use pragma marks which you just learned about number three default values for parameters if you have a method where you want to provide an option for a parameter you can use a default value for that parameter for example in this method that makes ribs mmm you can pass in the sauce you want but if you don't pass it in then it's barbecue by default which is fine by me number two computed properties do you sometimes have methods like this for simple conversions or calculations well instead of a method you might be able to get away with using a computed property where the value of that property is calculated on the fly so instead of that method converting liters to milliliters you might have a computed property that looks like this alright number one the final tip and also the bonus tip you can easily improve compile time and app performance by using the access modifiers final and private for your classes and properties where it makes sense if a class you're creating doesn't need to be subclassed then mark it as final if you're not sure you can mark it as final anyways and just take off the keyword if it turns out you need to subclass it for properties if they are only going to be accessed within the code you're right inside that class then mark it as private alright so that was 9 tips in total that you can use today to improve your Swift coding now I want to turn it over to you which tip are you going to use in your next Swift coding session let me know by leaving a quick comment below and if there are some other tips that you think would be helpful to beginners let me know in the comments below as well lastly if you like this video please give it a thumbs up and don't forget to subscribe if you haven't already thanks for watching stay safe and I'll see you in the next lesson