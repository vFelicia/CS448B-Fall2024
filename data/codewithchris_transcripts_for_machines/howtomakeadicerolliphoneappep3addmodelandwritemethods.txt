so in MVC fashion what we want to do is create data model and that model is going to be supplying the random numbers for us so I'm going to create a new file it's going to be a new objective c class and this time it's going to be a subclass of nsobject just your plain old objective c class and we call it the dice theta controller ok so in dice data controller it's going to need a public method and it's got to be public because other classes will need to know that this class has a method so that it can use it if it was a private method the view controller could call on the dice data controller but it wouldn't even be aware that it had any methods to use so i'm going to type out a method signature here called get dye number and then what I like to do is just copy that and switch to the implementation file and then in here we're going to write the code for it so I'm going to paste that signature and add the curly braces now i'm going to write some code to randomly generate a number from one to six and then return it actually it's a good point right now my method signature says void so that means that when any other class calls this method it's not going to expect anything back but what we actually want to do is return a number return an integer so it's complaining now because now the method signatures don't match so I'm going to go here back to the header file I'm going to change this to int now it's reminding me that I need to return something in this method so I'm going to clear a new int variable and I'm going to use a math function called arc for random now this method generates a random number but I want to make sure that it's within the bounds that I want so I'm going to mod it by six and this is going to give me 0 to 5 and I'm going to add one so that it's going to give me from one to six I'm going to return our so this method basically gets a random number between 1 to 6 and returns it ok the next thing we'll want to do is to implement our dive you method so right now the dive it was just a plain uiview it doesn't do anything and it has nothing to show but we're going to change that we're going to manually declare an imageview property if you need a reminder of the property syntax on how to declare a property go back to lesson 7 of the basics series to find out okay and I'm also going to declare a method for the dive you wear when this method is called I'm going to create a method so that when this method gets called it changes the image in the dye image view property so this time this method doesn't need to return anything because it's just doing something to the image property I'm going to call it showed I number and it's going to need to accept a single parameter it needs to know which number to show so this method is going to accept a number now one thing you can do to organize your file a bit is do something like this this pragma mark statement allows you to create almost like a section and if you pull down this you'll see that it's got these headers now and for a really long file these things are helpful so now let's implement the show die method and copy the method signature and go into the implementation file of dive you copy that and add the braces and then I'm going to construct a string based on the number that's passed in so for example if someone wanted to show let's say dye number 2 they'd pass in the number two but we need to translate that number into the actual file name of the image so we go to our asset library will know that the images are actually named dice 126 and if you open up the folder where you unzipped it you can see that there are actual PNG's so if we go to dive you what we need to do is construct a string and then append the number to it to form the file name so start by creating a variable to hold the constructed file name and then the NS string class has a class method called string with format and what this allows you to do is you can type the string and then you can put in a wildcard character so mine is going to be percentage D four digit and I'm going to pass in the num variable so what happens this method is going to take in this string and it's going to substitute this parameter into this little wildcard character here so at the end of the day if we pass in two will have dice to PNG which is exactly what we want so now that we've got the file name let's access the the image view what did we call it again die image view so self dot die image view and remember uiimageview has an image property and we've also done this before where we need to assign a uiimage to it so the UI image class has a class method called image named and I'm going to make it look for dice whatever number dot PNG so it's going to create a UI image object and it's going to assign it to the image property of the uiimageview you have to be really careful though because if you notice that this property self thought died image view isn't actually assigned to anything if you notice self dot die image view our property here actually has nothing assigned to it because normally in the past demos where we created the properties using ib outlets and using interface builder these properties automatically get assigned to those UI elements that you dragged into the view but for this view that we created and we you know we typed out this property its we don't have any code to assign something to that property and so if you try to do this you're trying to first of all you're trying to access a property of nothing and then you're trying to sign something to nothing so what we want to do is when dive view gets created we want to initialize the dye image view property by assigning to it a new uiimageview object now in our storyboard here we have these two these two our dive use so when these dive use get created they call a method called and I'm going to override it it's actually going to hit this method so if you don't remember what overriding methods is you should review episode 9 of the basics series I'm going to turn itself here so when you run the app and these two die these get created it actually hits this method for each dive you so what we want to do here is go die image view equals and will create a new uiimageview for it and actually will want to use an it with frame and to an it with frame usually you pass in a wrecked which takes four parameters so where it's positioned on the xaxis where it's positioned on the y axis and then how wide and how tall should this view be so it should this image view be and we want to basically have it take up the whole entire view of the dive you so we're going to do self which refers to this view and this view itself has a frame and it has a size property and finally a width property of that so what is this is doing is it's allocating a new uiimageview object and it's calling the init with frame method on that object so it knows where to put it and this method acepta wrecked so we are using this CG wrecked make to create a wrecked to pass into an it with frame and the wrecked that we're making it's going to start at 0 0 which is the upper lefthand corner and it's going to be as wide as the dye view itself and as tall as the dive view itself which are these two ok great so now we've created we've assigned a uiimageview object to this property so now when this method gets hit this line will actually make sense a network because this property is referring to an object now we still won't see anything on the view because just because we created this uiimageview object we haven't added it to the dive views view yet well the dive you is a view itself so we haven't added it to the view so there's a method of a uiview called add sub view and even though you don't see the sub view method anywhere in this file you remember die view is a subclass of UI view so UI view is the one with this method so I'm going to add the dye image view as a sub view of the dive you all right good stuff so now we've got our dive you ready to accept the number and change the image that it shows and we've got our dice data controller which represents the model in our model view controller pattern returning a random number from one to six I hope that was pretty easy to follow along and I appreciate you guys watching please share it with any of your friends or colleagues who are interested in iphone development and help me spread the word and as usual the notes are in the description below as well as the link to the source code and the image assets thanks for watching bye bye