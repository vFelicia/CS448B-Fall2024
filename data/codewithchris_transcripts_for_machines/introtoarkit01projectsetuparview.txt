in this course you will get an introduction into making augmented reality apps using arkit reality kit and swift ui hey code crew this is flo this is the first lesson of the ar kit course in this lesson you will set up your xcode project for ar dabble with a custom ar view a ui view representable for that ar view and then you will end up with an empty augmented reality screen first of all when you create your project there are basically two options there is the easy route where you select augmented reality app as your application or you select a simple swift ui app this is what i have done in the example project that i already created which is completely empty but just so you know i did not start with an augmented reality app i started with a regular switchoi app and we will add all of these ar features ourselves okay so first of all for your understanding an augmented reality app is basically just a single view all of the augmented reality stuff happens in a socalled ar view which is from ar kit but it's very similar to ui kit so in order to use it in swift ui we will have to create our own ui view representable but since we want to customize that ar view with some extra functionality for example to play some 3d entities in the scene we will actually create our custom ar view and that's the first thing that we will do right after creating a new group here and i like to always create a feature targets group that basically sorts the app by each features or for example a settings group inside of that a home feed group a user profile group and so on now in our case i will just put everything inside of the feature targets group that i just created so in here we will start with our custom ar view next we will build our air view representable and then lastly we will add that into our swift ui view and get it all running for a very basic starter application so let's hit command n and let's create a new swift file and we will call it custom ar view now in here we don't need to import foundation instead we can import a r kit and then for later on we can already import reality kit and swift ui we will need all three of those later on there will be a lot happening in the future lessons in this exact file okay so we will create a class called custom ar view which inherits from ar view so usually you would directly use ar view in your app but we will create this custom area view so we can add some functionality in there if you subclass from a ui kit view there are two initializers that you need to implement so the first one is in it from a frame and here we will just call super.init with that frame that we got passed in so basically we call our ar view initializer and then we also need to in it from a coder i think this is the one and i think you also have to specify that it is dynamic doesn't really matter for our context and then in here we're not implementing this this is basically decoding um this class which we will never have to do so we will just throw a fatal error saying init with a coder has not been implemented okay and then we will also implement a third initializer and this is the one that we will actually use so we will make it a convenience init and it takes in no arguments it's a convenience initializer because this one will actually call another initializer and it will call the self.init with a frame and we will just pass in the entire screen bounce so our air view will fill out the full screen we will also be able to handle that in swift ui later on okay so this is our custom ar view right now you might not understand why we need it because it basically does nothing except for extending air view and you're right right now it's totally not needed but in the future we will build on top of this and add some more functions in here that will then hopefully make more sense to you okay next up we will create the view representable so we can actually use this custom error view in our swift ui code so let's right click on feature targets and hit new file swift file and this one will have a very long name you will probably want to choose a different name here so i will call it custom air view representable and then let's copy that name okay in here we just need to import swift ui now this will not be a class since we're not in ui kit land anymore now we're in swift ui land so it will be a struct our custom ar view representable and this one of course needs to conform to the protocol ui view representable which basically means that we can use this in a swift ui we use body if you implement uiview representable you need to have two functions the first one is make ui view and the second one is update ui view i think we will never actually use the update function so we will just leave that one empty and then the make ui view we will basically just return the view that we just created so our custom ar view so we can just say return custom ar view and now here we can use our convenience initializer with no arguments this one that we defined here in line 16 basically and then we can also copy this type name and replace the sum ui view with that and this uiview type as well just so compiling might be a tiny bit faster because xcode doesn't have to resolve this type by themselves okay now already the second to last thing for this lesson is to move content view into our feature targets group as well once again you can call this group whatever you want you could also call it ar views or ar components or you could even not have a group at all it's just a bit better organized like this so in our content view now we have already done all of the hard work so we can now use our representable here and actually display it to the user so we have our custom air view representable and then we did specify the ui screen main bounds here as the frame but in swift ui it will by default ignore the save not ignore the safe areas but we actually want the camera part of the app to basically stretch from the very top to the very bottom of the screen so we'll add the ignores safe area modifier here in the end as well now i already spoiled it because an air view basically is a camera stream right and if you want to use a camera you need to add a privacy description in your info.plist file so that is basically the last thing that we have to set up now so let's go into our project file select our target on the left and then click info in the top navigation bar here and then for any of these entries it really doesn't matter click any of these plus icons and in here you can search for privacy camera usage description and in here we can just add any kind of string so you could for example say needed to show ar view this is basically the string that's shown to the user when they asked for permission to use the camera okay so now we have our basic project set up and when you run the app then you will only see a camera stream no text elements no entities anywhere nothing just a plain camera view but you will already know that this is not just a camera this is actually our custom ar view which inherits from ar view so this is basically an empty augmented reality app that we have now created with our custom view and our view representable in this lesson you started to set up your xcode project for working with ar and you created the core infrastructure that you will need in the next lessons