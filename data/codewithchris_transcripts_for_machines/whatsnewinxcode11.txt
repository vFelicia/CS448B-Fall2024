hey Kaku what's up I've had a bit of time to play around with Xcode 11 and in this video I want to share with you 12 changes and improvements that Xcode 11 brings to the table now these thing features are really gonna help your productivity so stay tuned hey it's Chris and if this is your first time here welcome to code with Chris where we teach beginners how to make apps now before we dive into number one I have a question for you have you downloaded and used Xcode 11 yet let me know by leaving a quick comment below yes or no and on your way down there please hit the like and subscribe button if you haven't already I really really appreciate that alright let's dive in number one run your iPad apps on a Mac with a single check box and that's right so now you have the ability to what if you're building an iPad app to also allow it to be run on the Mac as a Mac app and it's very simple to do just go into your Xcode project under the project properties under deployment info there is a checkbox now for math but as you can see it requires catallena so make sure you have that installed if you're only building in the iPhone app unfortunately you're not going to be able to deploy it on a Mac so as long as you have iPad checked on you can go ahead and also check off the Mac one and it's gonna tell you how that's going to work now I haven't personally ran an iPad app on a Mac yet but if you have let me know how it is by leaving a quick comment below alright let's go to number two number two a more flexible and powerful editor area now apples whole deal now is that everything is a process of editing whether you're editing code or you're editing your UI using Swift UI so that's why they've invested a lot of improvements into the editor area now let me show you some of them they've had this new button up here now called editor options which allows you to configure the behavior of the editor pane that you clicked it for because later on you're going to see that we can add more editor panes so these are the options for this pane you can show that editor only which is what we're looking at now you can show a side by side canvas which is basically two preview your user interface if this were a swift UI file but it's not and also it requires OS Catalina or later which this computer doesn't have but later on I'm going to jump on my macbook where I have installed Catalina and I'll show you this canvas and action for now let's keep going assistant is what you're used to it's what we had in Xcode ten and all those prior versions it's going to show you the complimentary file to what you're looking at so this is great for the storyboard if you're looking here and I'm gonna jump into the assistant editor I'm gonna see the corresponding class for this view alright let's go back to our view controller and take a look at some of the other options here we've got layout and right now this doesn't make sense because we only have one editor pane right here but if we had multiple you could then orient it horizontally vertically and whatnot now minimap this is an exciting new feature for the editor this shows you kind of like a bird's eye view of all of your code and if my code file were longer I would be able to then drag this I would see these lines of code going all the way down and I could drag this little window to navigate my file really easily and this is in addition to the old jump list that we had I love this thing too because you can just select a method and jump down to that this one just shows you kind of like a highlevel view of your code you can also hover over it and you can you can see what the methods are and you can see some of the keywords are highlighted as well so this minimap is a much welcomed feature for navigating your editor now going down the list we have authors now right now this isn't connected to any sort of source control but if it were I would see a list of authors and commits that has to do with this particular file that I'm looking at so that's really handy to see who's changed what and when they changed it and why they changed it it's really handy for source control and code coverages for testing this shows you with the unit test that you have how well are you testing all of the code in this file and it's going to highlight all of the parts which are being tested and parts which are not Invisibles this is an option to show you the things that are there but that you can't readily see with the naked eye so for example if I turn this on you're going to see how many spaces there are you're gonna see it these are like line breaks and things like that alright so those are edit or options but not only this they've also allowed you to add as many editor panes as you want and to arrange them the way that you want so if you click this button here beside it add editor on the right you're gonna be able to just add a second pane and you can keep doing this you can just change the layout to what you want alright and sometimes you might want it to be above each other instead of beside each other if you hold down the option key you're gonna see that icon change and you're gonna end up adding an editor in the opposite direction so again you could do that I could hold down this option key and I can add one to the right of this one and then up here these are all independent instances of the editor so for this one I can maybe I don't need the minimap for this one maybe I you know want to look at authors and for this one maybe I am looking at the storyboard so I want to look at the assistant editor as well right so it's very very flexible in terms of how you want to arrange this editor view so that you can be more productive when you're coding now some of the time I might want to click on a file and then choose where to put it into one of my existing editor panes you can do that too hold down option and shift on your keyboard and then click on a file that you want to load and that launches something called the destination chooser you can see that now I can choose a panel to load that file into or if you hover in between two editor panes you can insert a new editor pane with that file right where that blue line is like that so allinall I really like the new editor area especially if you've got a big monitor number three Swift UI and the preview canvas we can't mention xqo 11 without mentioning Swift UI right now here I've got a swift you project in the editor if we go into the editor options and we choose canvas we're going to get to see the preview canvas now if I click resume it's going to show me on the righthand side what my UI looks like based on the code here as you can see we've got hello world in our little preview canvas here now if I change the text here let's say just hello you're gonna see it updating there in a live preview now this makes it really awesome because you don't have to launch your simulator and see how your UI looks back then we have storyboards it was still visual but some of the time it would be very glitchy and what you see in the storyboard is not what you get actually when you deploy it to your device now hopefully with this premium canvas it's not the case but only time will tell personally I'm really excited to start working with Swift UI and start teaching it to beginners because as much as I like using storyboards for teaching and content creation people still miss click miss drag and make mistakes in storyboards and then they run into roadblocks at least with Swift UI and how we're building the UI programmatically with code here it's a lot less prone to errors because beginners can see exactly what you're typing there and if they type the exact same thing they should get the exact same UI that you're seeing as for how useful Swift UI is right now at the moment I would say not very first of all it hasn't been really tested in production it's still an infant technology in terms of careerwise a lot of companies aren't willing to invest in brandnew technology for their production assets in terms of learning there is beginning to be Swift UI tutorials but by far the majority of content out there tutorials courses you name it it's all still based on either programmatic UI or storyboards in interface builder so it's gonna be a little hard to find content to learn from and shameless plug I will be releasing a lot of so if UI tutorials on this channel so if you're interested in picking up Swift UI and learning it please make sure you subscribe and hit that Bell notification icon so you get notified when those videos Trump thank you so much for your support all right moving on number four features to work with the new iOS dark mode so here in the storyboard if you go down to the view as section here traditionally you can choose the device and orientation but there's also an interface style section now that you can choose dark mode and you can preview how your interface is going to look like in the new iOS dark mode but in addition to that there are some really cool features where you can customize assets and colors to change dynamically depending on whether the user is using the light or dark mode let me do a quick demonstration for you so let's take a look at light mode here why don't we add an image view I'm just gonna pop it in the middle here and I'm going to just add an asset here let's go into the asset catalog and let's choose something like I'll choose Xcode since that's what we're doing I'm going to add that PNG directly into there so it's kind of a dart PNG it's gonna look you know alright in our image view here in light mode but if you go into dark mode you can see that that graphic image is not really visible anymore so we can actually tell Xcode that we want to use a different graphic if the user is using dark mode and you don't even have to write any code so you go into your asset catalog and you choose the asset and then under appearances you can actually set you can choose which modes that this graphic is going to be used in so we use it in light and dark and you can see here that any appearance should be sort of a universal icon that appears great in dark or light these are light specific and dark specific so for you know for the universal I can do something like that now these are not the right sizes I'm just dragging it there but for example in dark mode I can use something like that which might look a little better and we can actually see this in action if we go here so if we now view as dark mode you can see that that graphic asset changes to use the icon that I specified for dark mode all of this happens automatically with any code and in addition to that you can also do it with colors so let's just add a new color set and we're gonna create our custom color here maybe we'll make this like a code with crisp blue something like that not quite but fine and we're gonna we're gonna call this CWC blue all right so you can do the same thing here in appearances just because some colors might not show up that well in dark mode versus light mode so you're gonna again choose this and then you're going to be able to specify for dark mode I want you know this color is dead and if we go back to our storyboard and let's say we want to change the background to our label to our CWC blue all right in light mode it's gonna look like that but in dark mode it's gonna use the color that I specified so I think that is so cool number five localized image assets without writing a single line of code let me show you how this works so for example let's say we had an image asset that was a flag so this might be localization specific if I wanted to change this depending on what the locale of the user was I would just go to my image asset and click this localize button down here when I do that I get to select a language now right now I have just English but you can see now this icon set is for English if I have other locales I can select those as well and they would create different icon sets for me to add icons to and depending on what locale the user is who is using your app it would select the right icon set to use and all of that happens under the hood without you having to write any code at all number six SF's symbols now in the previous part you saw me dragging icons from icons 8 well Apple has designed a set of icons for us to use out of the box and it's integrated into Xcode making it very convenient so as you can see here there's an icon set of over 1500 icons in all sorts of sizes and weights as well so if you wanted to browse all of the available icons you could download the SF symbols app from here and then that would allow you to search and browse but also inside Xcode let's say I wanted to let's just go back to the storyboard let's say I wanted to use one of those symbols I could click on my image offset and under this image drop down instead of just looking at the assets that I have in my asset catalog here are those sf symbols as you can see these are very commonly used in different sorts of apps for different tasks and actions so I can choose something like that and the best thing about these icons is that they work great with dynamic type meaning that if the user has their font sizes larger it may be bolder because they can't see as well these SF symbols would adjust according to those font settings on that user's device and as you can see the symbols can be colored depending on your project tin colors as well so I highly recommend that you use SF symbols wherever you can because you get so much functionality for free number seven the iOS simulator has been improved and one of those things that has been proved is that now it's rebuilt using the metal framework so this means that it's really really fast well at least faster than it was before by a huge margin you're just gonna have to try it out for yourself to believe if you've worked with previous versions of Xcode before I think you'll notice a huge difference right away in how fast this simulator boots up and speaking of simulator improvements we have improved debugging options with the simulator so let me just quickly demonstrate that I'm just gonna hop back into Xcode and rerun this project of ours and you'll notice down here there is this little icon for environment overrides or environment variables and this allows you to control onthefly different configurations for your simulator to simulate different conditions of the device so here's light and dark you can switch that this is also great for testing friendly in terms of accessibility your app is for example if you toggle text on some people might have their text set way up high some might have it set low and you can toggle this ondemand on the fly just to see how your app reacts in addition to that you have these different options all of them to make it really really easy to make sure that your app is highly accessible now in addition to testing your app under those environment variables and those accessibility options that I showed you you can also put your app under different network and thermal conditions let me show you where this exists so you need to test this on a real device if you go under window and you go to devices and simulators you're going to see the devices tab and I have my phone connected right now under here you're going to see a section called device conditions now typically I think you would see something here but I don't have iOS 13 installed on my phone yet and so I think that's why I don't see it here but in this section you're going to be able to set throttled network conditions so you can test your app under low bandwidth situations and see how it operates and you can also mimic different thermal conditions so let's say your phone is in a really hot environment or maybe it's in a very cold environment and you can simulate those scenarios and test your app on your phone under those sorts of environments so I think that's really really cool how they figured out a way for us to do that number 9 they've integrated the Swift package manager directly into Xcode 11 so if you're not sure what that is just think about cocoa pods it's a way for you to manage your thirdparty libraries and dependencies so let me just show you quickly how it works I'm looking at a very popular thirdparty library here called Alamo fire that helps with networking so let's say we wanted to use this in our project in the past if we're using cocoa pods we'd have to jump through all these different steps just to integrate cocoa pods and then to add that pod to our library here I'm going to show you how to do it with the Swift package manager directly in Xcode 11 so we're gonna copy this URL here or this repository URL all right so here inside Xcode you click your root node here and then go to your project and you're gonna see a tab called Swift packages click that and then you're gonna see right now there are no packages but you can click this little plus icon and then you can enter in that your L just like that click on next it's going to ask you what version that you need and then choose next it's gonna grab it and then you can just hit finish and you'll see it all right so let's click finish and you're actually going to see it here now the really cool thing is that this code is searchable as well and all of that you can do without ever leaving Xcode number 10 source control improvements now Xcode has always had integrated source control but they've implemented now the git stash command which lets you stash away some changes and bring it back later now they've also implemented the git cherrypick command so that you can apply some of the changes in some of the commits to your branch in Xcode 11 there's also a source control history inspector now which shows you a history of all of the commits for your project number 11 test plans Apple has rolled out a new feature and Xcode called test plans which helps you manage test configurations now I'm not too familiar with testing in Xcode and so I'm going to refer you to this video if you want more information from WWDC which shows you how to use the new test plans feature I'll leave the links in the description below and finally number 12 improvements in instruments now if you're not familiar with the instruments tool in Xcode it's basically to profile and analyze your app to measure performance and get Diagnostics about where the bottlenecks are and how you can improve its performance things like how much memory is that using how much bandwidth is it using things like that now I'm not an expert in this area either and so I'm gonna refer you to this WWDC video on how to get started with using instruments it's not a new tool but in Xcode 11 leave me improvements have made it more powerful than ever so what do you think of Xcode 11 if you learn something new please hit the subscribe button if you haven't already and make sure you click that Bell notification icon so you can be the first to know when the next video drops and give this video a thumbs up to let YouTube know that they should share this around now coming up I want to record a video demonstrating how to use Xcode not just from the standpoint of what's new but how to use it as a complete beginner so your fun that video right there if it's too early check back in a couple of days but if you're watching this maybe a week after this has been published that video should be up and you should find it over there thanks so much for watching I'll see you guys in the next lesson