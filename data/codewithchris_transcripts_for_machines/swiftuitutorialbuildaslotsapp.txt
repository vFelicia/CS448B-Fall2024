hello and welcome in today's video you'll use everything you've learned about so if you I up to this point to build this slots app believe it or not by the end of this video you'll have this app up and running alright let's do this hey there my name is Chris and if this is your first time here welcome to code with Chris where we'll teach you how to build an app even if you've never written any code before but before we dive in I have a quick question for you I'm looking for some app ideas to build in Swift UI for future tutorials so if you have any app ideas let me know in the comment section below and on your way down there if you wouldn't mind let's give this video a thumbs up and subscribe if you haven't already that really helps support the channel and I really appreciate it thank you alright now let's dive in alright guys here we go this is so exciting let's start our brand new Xcode project here and we're going to choose single View application and for the product name I'm gonna just call it a slots demo you can follow the rest of these settings but just make sure that your language is set to Swift and your user interface most importantly is set to Swift UI because that's why we're here you cannot be the rest of the settings as I have it here and let me just choose a place to save this I'm just going to save it on my desktop along with all of the other folders the billion folders that I have I also took a screenshot and while that's kind of starting up I want to talk about how this UI is constructed so the screenshot I took of the finished product and what's happening here you might think that this is a graphic background but it's actually not and I just noticed that this is kind of cut off here what's actually happening back there are two rectangles one obviously covers the whole screen that's the deeper yellow and then there's another rectangle on top of a lighter yellow that is rotated on an angle so the only graphic images in this app are these Apple icons and the cherry icons and the start icons this is actually an SF symbol which you learned about previously and those are yeah these are the only images these slots icons so why don't we start by adding those icons to our image assets I'm just gonna leave this screenshot right here so we can take a look at it when we need to so if you check in the description below this video you'll find the image assets that you can download so let's go ahead into the asset library and just go ahead and drag all of them there now I'm gonna actually rename some of these to cherry and star alright and next let's go into the content view and start building out our UI and let me describe to you kind of the main layout containers that we have so in order to have elements stack one on top of each other we use a said stack or a Z stack as you might call it so that's how we're getting the two rectangles for the background stacking on top of each other and then on top of that background we have a V stack which contains all of our main user interface elements so in that V stack we have this title which is essentially just an H stack a horizontal stack with an SF symbol text label and then another SF symbol and then this is a text label with just a rounded background color and here we have an H stack with three images and then finally we have a button down here and that all of those elements I just described are in a V stack sitting on top of the background so why don't we go and construct that so I mean I get rid of this text label right here and I'm going to create a stack I'm gonna call it as that stack whether you this is I'm Canadian in case you didn't know so I'm gonna create a rectangle right there less that doesn't have any color we probably won't even see it so why don't we there we go I had a foreground color now for the actual color I am gonna create a new color and I'm going to specify the red green in the blue because I did this in figma where I picked a specific color and then you can kind of see the red green blue breakdown and so I'm gonna specify those values but I can't remember it off the top of my head but I have them written here so for red I have 200 for green I had 143 and for blue I had 32 so there we go there's our rectangle and we also want it to go to all the edges ignoring the safe area right so I'm going to say edges ignoring safe area and I'm gonna pass in all because I want it in all directions so there we go we have our first background now let's add a comment here first and I'm not really not liking the way that that's looking so just looks ok let me just go up here structure and read and dent everything like that so it looks neat and tidy so let's do another rectangle and this one is going to be a given foreground color this one I also have a specific color so I'm gonna specify that and for this one the red is 2 to 8 the green is 195 and the blue is the 76 all right and I'm going to rotate it rotation effect and I'm gonna specify an angle so let's create a new angle object and pass in 45 and then I'm going to specify ignore edges so it goes all the way to the end there we go alright so that's our background now we have our V stack right our main V stack that contains all the elements sitting on top of that background so as I described here in the first element in the side that V stack that is actually an H stack containing the star the text and another star so let's go and add our H stack here and I'm just going to add title and then this is going to be like credits counter alright so let's do this first H stack what do we have we have an image and inside we actually have an SF symbol so let's fire up the SF symbols app and what I wanted to a star so this is the one I chose star dot fill and so I'm going to close that and we're gonna use that star dot fill and it's black by default but I decide to set a foreground color of yellow so there's that image it's small now but we're gonna make it a little bigger in a second alright so I'm gonna copy this and paste it and in between there I'm gonna put a text label so this guy just said Swift EUI slots now I made this fun bold so let me just see exactly yeah I did fontweight of bold and foreground color of white so I used font weight and I passed it in bold but you can actually maybe just call bold like that that's cool foreground color and then let's do white so I guess bold has its own modifier but you could also do it like this where you pass in a font weight and then you can choose bolt there's a couple more options here but I wonder if like heavy and black and light have their own modifiers too let's just double check black light I guess cuz bold is so common that has its own modifier whereas if you wanted to use black or heavy or light or the other font weights you're gonna have to use the font weight modifier and pass in that specific one alright that's cool and then in order to make it bigger I added a scale effect of two alright so now it's looking a little beer it's in the center which is fine as we add more elements into our V stack that's it's gonna space out and then we're gonna take a look at adjusting all the spacing at the end let's just focus on adding all of our elements so the credits counter that's this guy right here so that was just another text label and for now we can just hard code this text here and we're going to make this an actual property or state property later so for this text I set the foreground color to black and I also set a background color now this background color I set to white but I also added a slight opacity to it so I assume they have to just take a look at what we've got here okay so we've got the white background okay and then I set an opacity on this of 0.5 you see how closely it's hugging the text let me just zoom in a little bit like that so what you can do is you're gonna add padding but here here's a good point to illustrate the order of how things go so I'm going to say all edges use the padding modifier and I'm gonna give it a padding of 10 so you can see that you know this blue outline is my text label and it indeed added padding but the background itself is still pretty small so what I needed to do instead is first apply the padding and then apply the background color to the whole thing and if I change the order like that you'll see that then I get the desired effect and then finally I added a corner radius of 20 and that's gonna give me that look right there like that all right next up is the main course here the 3 cards so I'm going to this was an H stack horizontal stack containing 3 images so we've got the first image and again I'm just going to hardcode the image here so we've got our first image here I'm gonna add the resizable modifier so I can resize this and I've shown you this in previous lessons in this Swift UI series before I'm also going to make sure that the aspect ratio is 1 and for the content mode I want it to fit instead of fill so it's really big now but we're going to add a couple more so let's add a background again I'm going to add a white background with a slight opacity 0.5 and finally I'm going to round the corner 20 so we get a sort of card like effect now let me just indent all of these things being very careful oops so that was yeah there we go just want to make sure that that looks right there we go all right so we've got our image there and I'm gonna just copy and paste this so I need to mention here that in swift UI one of the guiding principles for view composition is actually breaking down elements into smaller reusable views and so I'm not gonna do this in this video because I just want to get this up and running in the next lesson I'm gonna show you and explain some of the guiding principles the one I just mentioned about view building and breaking down your views into reusable views as well as how dataflow is supposed to work in the swift UI and then we're going to come back to this slots app and we are going to apply those principles and improve the code refactor the code so right now I'm just going to copy and paste this three times just to make things really really simple so we can actually finish this app in one video now I'm going to add a spacer on the left and right of this H stack so that it's gonna create some space there and I could put spacers in between these images as well but it looks like you know they're together and I on a water screen I don't want them you know to fly apart because the spacers will take up an equal amount of space instead I'll just have margins on the left and right but keeping the three cards together okay so we've got our cards here and what's left is this button so we've got our cards this is the H stack and this is the button so let's create a button element here so we've got our button and where's my autocomplete there we go so we've got action and we've got the label so for the action I am actually going to just not fill that out yet for the label that's going to be a text element so I mean it's just the button I'm just gonna put to do and then here the actual visual representation of the button is a text field that says spin and let's add some styling to that so we've got bold and we've got a foreground color of white this is double check yeah with white and we have this pink we have a background color of pink I think the pink yeah okay and again I'm gonna add some padding to it but we got to do it before we set the background so you're gonna add some padding to all edges with the ten so see if it can actually reflect that all right I might have messed that up but let's take a look look let's actually run this in the simulator and see if the bill failed I might actually have to do something in here okay I think I messed up my let me just get rid of that button I think I messed up my curly brackets so you know it's actually launching all right so that looks good let's put our button back all right up here let's declare some stuff so we have accredits right private VAR credits equals a thousand so we can start off with that and I do want this to be a state property because we're going to be deducting credits and I wanted to appear automatically so in here I'm gonna erase that hardcoded text and I'm going to put credits and I do have to convert it to a string because this is an int all right you see that so I'm going to do that right there and now I just want to see if I can say self dot credits plus equal one just want to put some code in there and see if that's what was missing oh sorry it's this it's this right here background I have to specify that it's a color pink because this expects a color already but the background expects any this could be anything you could be putting an image in there or anything so I guess I have to specify it like that alright so going back to customizing our button here first so we have a padding of 10 right here and then we set a background but to me it doesn't really look like let me just update this UI there we go that's what I expected now I wanted to add some extra padding to the left and right so after I added padding of 10 to all sides I'm going to specify padding again but this time I'm going to specify eight just the left and the right like trailing and leading so I'm gonna specify an array and I'm gonna put leading in there comma trailing and the length of that is gonna be 30 so that's gonna be give me a bigger button and then I'm going to set the corner radius to 20 again so that gives me that look now we probably want to add our spacers now because we have all of our elements so I'm going to add a spacer in between here and between here and in between here and also probably at the top in the bottom our spacer there at the bottom got a spacer in between the button and there got a spacer in between the cards and the credit counter and then another spacer between the credits counter in the title and then I could put a spacer there as well so there in this app I actually used padding instead of a spacer up here but right now on the whim I'm deciding to use that it's just fun okay cool so now all we have left to do is when they hit spin we're gonna write the code here to change the images but there are a couple of steps we have to do before this because here we hardcoded the images right so we're not going to be able to change them unless we make them state properties as well so let's first start by declaring an array of the different asset names so I have private of our symbols equals we have Apple we have star and we have cherry and the second of all this is going to actually be a state property we're gonna have an array containing or representing the data representing which icon these these reels took so you know this could be from zero to two right so 0 would be Apple one would be star and two would be cherry so this array this numbers array represents the state of what symbols these guys are so what we're going to do is when the user hits spin we're going to randomize a number from the between 0 to 2 representing one of these symbols and we're going to place it into you know these slots are representing these three cards here and for the images for the image elements here right instead of specifying Apple what we're going to specify is the symbol array right symbols and inside we're going to specify since this is the first image this would represent all right let me just type this out first numbers okay so this is the first image right so numbers 0 is is the the value that represents that cart right this is going to be index 1 and this will be index this guy's going to be index this guy's gonna be index 1 and this one's gonna be index 0 so essentially instead of doing that we are going to do that okay so hopefully this makes sense to you so for example right now it's still showing apples because you know the numbers are all zeroes but let's say we randomized it and we get one for this we get two for that and we get zero for that so if we resume it again now you're gonna see them different the reason for this is because this one is reading one so it's going to grab that symbol and this one is two so that's going to be 0 1 & 2 so it's gonna grab that image and finally at that position we still have 0 & 0 at that index we get the Apple image so that's what we're going to do here so inside the button action we're gonna randomize a different number for each of these indexes in the numbers array so we're gonna do selfthought numbers 0 is equal to int dot random and where's my autocomplete there we go so we're gonna randomized between 0 to the number of symbols that we have minus 1 and that's going to give us 0 to 2 all right we're gonna do the same thing for number 1 and number 2 so even just doing this we can go ahead and run our app and take a look at these guys are randomizing because we should be able to see our UI update automatically remember that numbers has a state property right so when we're changing these indexes the value inside these indexes the UI is gonna see that change and it's going to automatically update what image those image elements are displayed okay next up change the images we're going to check check winnings and let's declare another one up here another property here for the bet amount and we'll say five each time they spin we'll take away five credits and if they win if they get a match we're going to give them let's say ten times their bet so here we're going to check winnings and all we have to do here is just say if you know selfthought numbers zero is the same thing as numbers one and selfthought numbers you know if the second one is equal to the third one then all of them are essentially the same one so we can say self dot credits equals plus equals but amount times ten else self dot credits minus equal vet amount oops I forgot the self keyword there as well all right so let's take a look and see if this works yeah so we can see it deducting here and when we can finally get a match this is why you shouldn't gamble oh there we go uh I don't even know I guess we could add a label to just say what the status is but this is where I'm going to leave things here because we have a working slots app in the next video we're gonna talk about some of the core guiding principles in swift UI and then we're going to come back and improve this app so in this single video you built a working Swift UI app isn't that amazing however I did mention that there are improvements that we could make to this app structurally to enable us to build upon it and take it even further in future videos in the next lesson I'll tell you about two of the most important guiding principles when it comes to Swift UI regarding data flow and view composition after that we're going to come back to the slots app and make those structural improvements that I talked about if you enjoyed this video please hit the thumbs up and subscribe to this channel don't forget to hit that Bell icon so that you get notified of future videos thanks for watching and I'll see you in the next lesson