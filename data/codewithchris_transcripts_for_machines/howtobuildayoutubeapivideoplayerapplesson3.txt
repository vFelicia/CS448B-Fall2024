in the last lesson we were able to connect to the YouTube data API and retrieve data from it if you missed it check out the entire playlist right over there in this lesson we're going to set up our xcode project and all of the views and the models all right let's Dive Right In first let's start with a little bit of an overview of how our views will be laid out I also want to explain how our data model is going to look like especially as we're going to interact with the YouTube data API so first off we're going to start with the home View and this is going to to contain a tab view with additional views now I know in this demo we only have one tab but this is set up with the intention that you can add additional tabs okay so the home view will house the tab view itself and then the tab view will contain instances well one instance of the feed View and this is that scrollable list of thumbnails that you see now let's talk about how the feed view is going to get the data we're going to create a separate component let's call that the data service that is going to be responsible for all of the code that interacts with the uh YouTube data API and the reason for this is so that we can keep it all in one place and it'll be easier to maintain and also to troubleshoot and debug so when the feed view loads it's going to ask the data service for the list of videos to display and then the data service itself is going to be sending that Network request to the YouTube data API so in the previous lesson when we looked at what got return it was two things really there was an overall playlist structure and then within that there were individual video objects like dictionaries that contained the video data so we're going to be parsing that Json into a single playlist instance containing multiple video instances each one representing the video data if you don't remember or you're a little bit confused don't worry when we get to that part of sending the network request getting the data back and parsing into Json I'll dive into more detail about how each piece or part of the Json translates to different properties of the video and playlist instance so once the data comes back we are going to see a list of data in the feed view so next we have to fetch the video thumbnail image data because that image data does doesn't get return from the API instead we just get URLs to the video thumbnail so we are going to use a sync image to asynchronously that means in the background download that image data for display and we're going to create a separate video row view as a reusable View and the feed view which has a list component is just going to create as many instances of the video row view as it needs for as many videos as there are and each video r view will have the async image which will download the thumbnail all right and so now we're going to have a feed view that looks pretty good but we have to let the user tap on a video to view the video itself right so that's why we're going to create a video detail view that will slide up as a sheet from the feed view when the user Taps on one of those video row views inside the video detail view we're going to show at the top the uh video player and then below it we're going to show the description for the video and that data we'll have already so at a high level that's how the app is going to look like there is a lot to learn here let's dive in I hope you're enjoying the lesson so far now just in case you want to launch your own app I want to tell you about CW C+ this stepbystep program will help you launch your own app even if you don't have any experience and it takes about 4 months if this sounds like something you're interested in I have a special offer for you I'll leave the link in the description below this video and hopefully I'll see you there if not no worries I really appreciate that you're here watching this lesson and learning with us so thank you for that anyways now back to the lesson all right let's create our xcode project so I'm going to choose app under iOS and I'm going to name this YT API app and make sure interfaces Swift UI language is Swift we don't need any storage options we don't need any tests right now and I'm going to just create this on my desktop uh and Source control I did not check on okay I'm going to change this to the simulator so that we can launch it in the simulator and not on my device all right and now we can get started so the first thing I want to do let's bring up the diagram again we have a couple of distinct things I like to separate things into folders here so we have our views which is home view feed view video detail View and video row View and then we have the data service which is a separate helper if you will and then we have these representing our data so this would be our data model or just model okay so let's go ahead and create those folders in our xcode project so I'm just going to oh so one thing that I like to do is to rename this so you know when we name the project YT API app that translates to this bundle identifier YT API app but the entry point they always add app at the end so one easy way you can do is to right click and refactor and you can change it all in the same place so you might you might want to do something like that maybe we'll just call it YouTube API app okay so that renamed it in a bunch of different places you can press command B to just make sure that it still builds so let's create the folder now so I'm going to right click going to say new group and let's call this services and then we are going to create another group called views and then we're going to create another group called Models All right so let's just do that all right so I'm just going to stub out all of the files that we need and stubbing out just means creating them perhaps uh adding some initial code but we're not even going to do that let's just create the files and then we'll focus on um just creating all of the scaffolding so let's call uh this is the data service right so we'll create that there and let's just create that initial struct and then for the views we're going to say new file going to choose Swift UI view so first of all there the home view right but the home view is essentially like we've got a view here so why don't we use this one as the home view so I'm going to drag this into the views folder and I'm just going to rename this again so refactor rename and we're going to call this the home view I didn't rename this one okay and then we also have the feed view remember this one contains the tab view right so we can oops Yeah new file Swift Joy view we're going to do feed View and then we're also going to have video row View and we're also going to have video detail View and then the home view we're going to change this to a tab view right and the tab view is going to contain an instance of the feed view so that's the basic structure of our project right and we've got let's just create the two models now so these are going to be swift file because they're not views so one is video just going to create the struct and then we are going to create another one for the playlist so let's bring up the diagram for a second and double check that we have everything so we have the home view which contains the tab view contains an instance of the feed view the detail view is going to be coming up as a sheet in the feed view we've created the video Ro view which is going to be um inside of a list component or List view sorry in the feed view we have the data service we created and then the video in the playlist models Okay so so we're ready to start implementing some of these things in the next lesson so one thing I would recommend is if you're really trying to learn some of this stuff it's best to follow along and try this out on your own computer or laptop just open X code start the project and follow along best you can you can always download the project if you get stuck I'll leave the link in the description below to download the project all right now that we have our exod project and our views and models roughed in we can start on the data service in next lesson if you're enjoying the build so far can you give this video a thumbs up now I always preach to follow along and that's the best way to learn so if you are following along building this app on your own computer or laptop please comment down below and say I'm doing it all right thanks for watching and I'll see you in the next lesson