now in all the demos that we've done so far they've all been single view applications and in fact when you start an EXO project it just gives you one default view um we're going to take a look at how we can add uh a second view so that you can navigate between the two uh iPhone applications uh you usually have more than one View and we're going to take a look at how what code you need to write in order to navigate between the two views okay let's do it you notice that we're using xcode 5 in this demo and if you're still using xcode 4 don't worry you'll still be able to follow along and I'll point out along the way what the differences are for xcode 4 if there are any and I'll show you what to do so don't worry if you're using exod 4 you'll still be able to follow this tutorial 100% okay so we'll start off by creating a new project and let's create a single View application and we'll add a second view to that if you're using xcode 4 you'll want to make sure that used storyboards is checked because we want to use them in this demo and use automatic reference counting should also be checked and include unit tests you can leave them as default and devices we want build for iPhone right now so make sure it's set to iPhone now give your project a name and then choose a place to save it all right now the first thing I want you to go to is your storyboard file click this and then go up to editor and then go Ed in and hit navigation controller select that now with storyboards you can actually double click here uh on an empty area on the storyboard to zoom out but keep in mind that in zoomed out view you can't drag UI elements onto the view so you can double click again to go into zoomed into view to add UI elements but zoomed out view is good because it allows you to to get an overall view of your project in your app flow and reposition the views and if I haven't explained what a storyboard is already it's essentially like in xcode 4 when you were working with zip files views for your view controllers except that in a storyboard you're able to see the app flow and you're able to make connections between the view controllers so that you can navigate between views so it's essentially you're still using interface Builder to put UI elements onto the views but it's more of a a bigger picture view of the app flow if you will now the next thing we'll want to do is add a second view controller as our second view so in this demo the first view is going to display the address and an image of a physical location and the second view is going to be a map about that area if your library pane is not looking at the objects tab switch to that see there are a couple of tabs here so make sure you're on the objects Tab and if you don't see view controller you can just type it in here and then it'll filter it in you filter it out it doesn't look like it but it filtered out the rest of the stuff I got a basic view controller here so see it's a little messy again so I'm just going to now the thing I want to show you here is that remember with our uh view controllers in the past when you click assistant editor it would show up the corresponding view controller code file whether it's it was the M or theh and then we uh create Outlets or actions into these files but with the new view controller that we just created it autogenerated a view controller file for us so instead we want to create our own view controller class and attach it to this view so right now the initial view controller that was created with our project right here that manages this first view right here the fact that we dragged a second view controller essentially it's a it's just a view uh onto the storyboard it autogenerated a view controller class to manage that view for us so right now we're going to go to this folder here create a new file new objective cclass and we're going to type in map view controller and for subass we're going to make sure that says UI view controller and you can leave these two options unchecked and that's the same for xcode 4 just going to save it so I want this map view controller class to be the class that manages this view so what you can can do actually here is in your storyboard click the second view controller that we added and then up here in the inspector view in this tab there are a couple of tabs switch the tab where you see custom class and then in the class right here you can actually type in map view controller and just by doing that you can see that when you click this view now on the assistant editor view it shows you the map view controller and that's specifying that this map view controller manages this view now let's add a button on the first View view to travel to the second view all right so get into zoomed in view so we can add UI elements these buttons here you can shift your view so that you get more space if you need it I need the object Library okay search for UI button and this stuff that you guys did before so shouldn't come as anything new I'm going to go into the properties inspector and change this button text to map okay now all you have to do is hold down control and click your new button and then drag a blue line into your second view controller and then a little modal will pop out asking what type of segue do you want choose push and in the recap video we'll explain we'll go more in depth into what a navigation controller is and what actually is happening behind the scenes and don't worry too much about that for now I just want you guys to follow along and practice these actions okay so in the last video we introduced the model view controller pattern and in the past in our previous two practices we didn't have a model class to represent the model in the MVC pattern so in in this one we're actually going to uh create a class to represent our model and that model is going to basically uh feed the location that we're going to display now before we even create the model we need to create a class that represents the location so that the model has you know an object to pass to the view controller so we're going to create a new class called location a new objective cclass called location and it's a subass of NS object and our model is going to pass back an instance of location to the view controller and the view controller is going to take those properties of our location object and it's going to feed it to the view so the view can display that information so let's create our model class it's going to be another Objective C Class going to call this location data controller and it's also a subass of NS object just in case you guys missed that okay so let's work on our location class first we're going to want to have a couple of properties on our location for instance we're going to want an address which will be of type NS string an NS string is considered a object so it's going to need a star to denote that this is a pointer I'll show you in a second when you don't need it we're going to want the file name of the photo that we're going to display so I'm just going to make it a string as well and then we're going to also want to store the latitude and longitude oops now this doesn't need a star because it's not a pointer to an object float is a numerical value uh it's essentially a floating Point decimal okay so our location class is going to represent a physical location with these properties now our model or our location data controller we'll need a method that the view controller can call to retrieve an instance of location so we're going to create a method that will return a location object we need the star because essentially it's a pointer to where the object is and if it's confusing right now you're going to get the hang of when you need to put that star and when you don't need to essentially you know you'll get used to it when we work with objects and we're we're passing variables that reference objects we're going to need the star to denote that that variable is a pointer don't worry if you you get get confused now the more you do it the more you'll understand so xcode is complaining right now that in location data controller it doesn't know what location is it doesn't know what about this class so we got to import that class the header file specifically so that it will know about it okay so we've done two things right now that we talked about in the last recap we've manually declared properties and we've also manually typed out a method signature in the header file so you'll know that this method is a public method that other classes will be able see so let's implement this method now in the implementation file of the location data controller so just copy the method signature and add curly braces and normally in a model you will probably get your data from an external Source either from a like a feed an RSS feed a Json feed or a database in a remote server somewhere it connect to through an API and grab that data but for this demo we're just going to manually create a location object object and hardcode some values and return that so our model is always going to return the same location over and over again so once again I'm going to declare a variable to hold our location object which means that we're going to need a star is equal to and I'm going to allocate a new instance of the location class and call a knit on that object to initialize it so now I've got a new instance of location and I'm going to start setting its properties place that I really liked in San Francisco is called Phils coffee and it's a really cool coffee place with lots of different types of coffee I like this so much in fact I bought a couple of bags home okay so the photo name is going to be coffee beans although we haven't added that image to the project yet but we will just after this and the next thing I want to do is add the latitude and longitude now the next thing I want to do is input the latitude and longitude for the location and there's a ton of websites out there if you just Google a convert address to lat long there are websites where you can just punch in the address and it'll spit out the latitude and longitude for you 37.78 453 and the longitude is 1 122.4 7158 and then I'm going to return this return this object remember that means that because we specified the return type as a location object I'm going to going to have to actually return something and so in this method what happens is it creates a new instance of the location class sets all these properties and then returns it to whoever is calling it so now let's add the coffee beans image so you can click the link on the screen or in the description below to go to a page uh where you can download the scource code for this project as well as the coffee beans image and you're going to have to sign up for a free code with Chris account and then after that you'll be able to download it so I'm going to give you a minute to download that okay so now that you've got the coffee beans image we have to add it to the project it's going to differ a little bit between xcode 4 and 5 in xcode 4 you can just drag it into your project like this and then you can have this checked off if it's not in your project folder and it'll copy it there and then click finish and you've added it in xcode 5 we can use our asset catalog and so choose the asset catalog from the project Navigator and then you can write click here go import and then you can choose your coffee beans image and that's the catalog just allows you to manage uh different versions of your assets easily so for example if you you know choose which devices this is going to work for like iPad then it'll tell you that you're going to need you know retina one and a nonretina one and it'll just help you manage that and I just realized that our image is a PNG so we need to go back to our model and change that file extension that file name to PNG all right now let's add add some UI elements to our first view in order to show that data so I'm going to start by searching for UI image view in the lower right I'm going to drag this guy here okay remember you can add elements in zoomed out view so make sure you're in the zoomed in view next I'm going to add a UI label okay I'm just going to stretch it out and you can make sure that in the properties inspector set lines to zero to ensure that it will uh wrap it will be multiline okay so that's sufficient for now so remember that the view controller is going to get the location object from our model which is the location data controller and then it's going to take that location object and update these UI elements with the location properties so in order to do that the view controller needs a reference to these two elements so now let's do that let's go to the header file and do what you've done before in previous practices by control holding the control and clicking and dragging here and creating a property to expose these UI elements to the view controller I'm going to call this one photo image View and for the label I'm going to call that address label okay now go to the implementation file of the view controller and then underneath view did load underneath that method I want you to add a new method called view did appear and you'll notice that as soon as you start typing it xcode will detect that that's the method you want and this is because you're actually overriding the view did appear method of the UI view controller class and in the recap we'll go into what subclassing is so for now press enter and you can add that method and then in this method essentially it gets triggered right after the view has appeared to the user and we can oh we need to import the header file for the location data controller and as well as the location or else view controller doesn't know about them so I'm just going to create a variable called Model to hold our instance of the location data controller and then I'm going to create and to allocate it initialize it and then I'm also going to create a variable to hold our location and this variable is going to hold the location that the model passes back so I'm going to call that method that we created in our model called get point of interest and it's going to return that location and assign it to this POI variable now I can access the properties that we just created on our view in our storyboard and go self. address label. text equals POI do address and furthermore I can say self. photo image view there's a method called set image of the UI image view which will take in a UI image so I need to somehow convert that file that we added the coffee beans. PNG to a UI image class well the UI image class actually has a class method and we'll get into that in the future called image named so where you can pass in a string for the file name as long as it's in your project and it'll convert it into it'll create a UI image pointing to that file so so actually we can set it to the property of our location photo file name that's why we created that property okay so now you can run your application and see what happens but essentially in this method it's getting the location from the model and then it's updating the address and the UI image view with the properties okay so this is great because we see our properties showing up and if you click the map button you actually get to navigate to the other View Press back to get back now let's add a map to the second view so go back to the storyboard and go to the second View and then search for map view you can drag it plop it on there now in assistant editor you want to go to the header file we want to expose this map as a property to the map view controller so hold down control drag it over let go I'm going to call this map view and right now our project doesn't know what this class is MK map view so it actually exists in another framework which we have to add by default xcode doesn't include all the Frameworks for all the functionality because then your app would be incredibly bloated and you'd have all this code and all these Frameworks for stuff you don't need so you just add what you need alak cart style so go here and click this root node in your project Navigator and actually you could do it right here in next code 5 you can just click uh plus and then you search for a map kit and then just double click that to add it and so now now you've added map kit framework and that will give you the functionality for maps in xcode 4 however you go to build settings sorry you go to build phases and then you click this tab link library with libraries and then you'll find that section here where you can add it okay now if you run it oh so now let's go back to the map viewcontroller.h and we need to import that framework so Now map view controller will know about that and it'll know about what Mk map view is so now you can run it and when you click map you will actually see you'll get a map so we'll want to switch the region of the map to our coffee shop location so stop the project and then go to the implementation file I'm going to go to the single view now go to the implementation file of the map view controller and we're also going to use the view did appear method again so overwrite that essentially what we're going to do in this method is ask our model for the location and then we're going to grab the latitude and longitude of that location and we're going to make the map view go to that region so we have to import the location data controller header file as well as the location header file so that this class knows about it just like last time I'm going to create a new instance of that I need create a variable to hold the location calling the get point of Interest method again and then in order to set the map to a specific region you use a method of the map view called set region however set region takes a as you can see from here an MK coordinate region and then for animated you can specify yes or no Boolean is a yes or no variable so in order to use this method we're going to have to create a coordinate region so let me set that to yes first and then up here we'll create our coordinate region we'll call that uh view region and there's a convenience method called MK coordinate region make with distance so you can see from this documentation that it needs a center coordinate to Center the region around and then you need to specify meters but basically how large that area that region you want it to be so before we can even use this method we need to create a coordinate so I'm going to create a coordinate with the coordinates of our uh location our point of interest and then I'm going to go back to this method and I'm going to put in I'm going to pass in the coordinates of our location we'll just say 750 and 7 50 and now that we have this region we can finally use the set region method so I'm going to pass it into there so essentially what's happening is that creating a coordinate with the same latitude and longitude as our coffee shop and then creating a region around that point spanning 750 m x 750 m with the center being our coffee shop and then we're we're setting the region of our map to that region so now let's run it and see what happens so when you click map it should should zoom in and yeah it shows that region where the coffee shop is so that's kind of cool and you can press back and navigate back and forth and it does it again because every time the view appears this method gets called and triggered okay so that's where we're going to end off in this demo in the next video we're going to do a recap and we're going to look at what we've done in this video as well as introduce some new Concepts like subclassing so I hope you guys enjoyed this video as always the notes are in the description below there's a link to it to go to my site and if you have any questions you can ask here or ask on that article and don't forget if you found this lesson helpful and you know anybody friends or colleagues or family who want to learn about iOS programming please share this video with them I really appreciate it there's a share button below the video which you can use to share it on Facebook or Twitter all right until next time see you guys later bye