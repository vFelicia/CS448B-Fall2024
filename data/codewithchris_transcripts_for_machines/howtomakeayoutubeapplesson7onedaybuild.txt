hey code crew so the main screen of our YouTube app works now in this video you'll create a second view controller where the user can choose a video navigate to that new view controller and actually watch the video and read the description alright let's get to it just a quick note if you're jumping into the series at this point you kind of need to watch these lessons in a progression for it to make sense first make sure you've watched the 29 lesson beginner series to get the basic skills then make sure you're watching this YouTube app one day build lessons in order links to both of these playlists will be in the description alright so we're gonna start by adding a second view controller to this storyboard now I'm gonna just zoom out a little bit so you can see and create some space here so we're gonna open up the object library and we're gonna search for a view controller and we're just gonna click and drag and add this guy right here now we can customize this through interface builder but we aren't able to write any code or logic for it until we create an actual view controller class our custom view controller and then tell the interface builder that what we see here is actually an instance of that so let's go over to view controllers here and let's add a new file this is going to be a cocoa touch class because we'll be sub classing UI view controller now I'm going to call this the detail view controller and the language is Swift so let's go ahead and save it there alright now we're gonna go back to the storyboard and we're gonna click on the second view controller that we added and then in the identity inspector we're going to change the custom class to detail view controller so actually let's make sure we select that and then here let's choose detail view controller and there we go and then we are going to add a segue so a segue is sort of like it's a transition so the way we're going to do that is we're going to click on this first one we want to do it so that when a row in the table view is tapped it transitions over to this detailviewcontroller where the user is going to see the video so we are going to click on the table view here and we're gonna hold down control and just click and drag actually we can't do it from there we have to do it from the video cell so click and drag hold down control you have that blue line and when you let go it's going to detect that you want to add a segue from that video cell we're gonna choose show there are different types of transitions you can do show is probably the most appropriate and you'll see that the detailviewcontroller sort of changes its frame to show you that what's gonna happen is it's gonna slide up from the bottom so that's great and the other thing is that when you hold down control and click on the video cell you'll see that under selection it's a triggered segue to the detailviewcontroller and show is the type of transition and you can always click on the segue here and go into attributes inspector and you can you can change what type of transition it is and take note that you can also add an identifier for this segue so that you can programmatically trigger that transition to happen right now because we've sort of configured this through an interface builder it's automatically going to happen upon selection of any video cell all right so let's quickly test this out if I run the project right now we'll be able to see that transition so if I select this you see the detailed view controllers slide up and we get this behavior by for free you know this dragging down to dismiss it and get that for free the thing is when we transition to this detailviewcontroller we need to pass it some information such as which video was selected that way we know what title to put here you know what's the date what's the thumbnail what's the text description so that's what we need to do so let's go back into the detail view controller now and I'm going to put everything inside a vertical stack view we're gonna have the title labeled date label we're going to have not as uiimageview for the thumbnail we are actually going to have a web view and that's going to show at a pible embedded YouTube video and when they tap on that it's actually gonna launch the player in play and then below that we're gonna put a text view which is a scrollable pane showing potentially a long piece of text so okay let's start by adding a stack view vertical one and I'm gonna just drag it into our detail view controller and then I'm going to add some constraints now I'm gonna put left I'm gonna put 0 from the left I'll show you gonna put 20 from the left actually I can put zero because constraint margins is on so it should add some margins if not then we'll just edit it to be 20 on the left and 20 on the right okay 0 from the bottom and for the top I actually want to create some space so I'm going to put 50 and the reason I want to create that space is so that the user can it's sort of like a handle they can grab the top in and drag it down and it looks like it went all the way to the edge there so I am going to modify the leading and the trailing so that there's 20 from the left and 20 from the right so let's change that to 20 and let's change that to 20 so now we have some breathing room on the left and right okay now let's add some labels because it's often hard to see where you're adding these elements because everything is white we can drag it into the document outline inside the stack view so there's my title label and this is going to be my date label and I'm also going to add a web view now be careful you don't add this one this is the one we want WebKit to view so we're gonna go ahead and add that in there and then we're going to add a text view as well just like that now we're going to configure things kind of like how we configured them in the video cell first of all let's look at the label for the title we are going to change number of lines to zero so that can span multiple lines we're going to change the font to bold and we're also going to add some spacing between the elements so let's click on stack view and say that the spacing is 10 and next we're going to add an aspect ratio constraint to this web view so having that selected let's add an aspect ratio constraint let's click into it and modify it and the and use the same ratio as before and finally we have the text view and just in case there's you know a lot a lot of extra space or not enough space we should specify the content hugging priority and the content compression resistance priorities so if there is more than enough space we would probably want the the text view to take up the majority of it so I'm going to go into the size inspector here for the text view and I'm gonna say that content hugging priority is the lowest on the vertical so I'm just gonna say 247 and in the case that there's too little space what would get compressed first probably the text view as well because that's actually scrollable so for the compression resistance priority I'm also going to say that this text view has the least resistance and so that's going to get squished first if there's not enough space all right so let's save this and what we're going to do now is connect these elements over to our detailed view controller so that hold down control and click a detailviewcontroller sorry got this option hold down option and click that to open up the detail view controller on the right side and let's start connecting these IB outlets so this first label is our title label hold down control drag it over it's a title label this one's the date label this one is our web view and this one is our text view alright let's save it and then let's go let's close this right pane and go into the detail view controller now you'll see that it's an undeclared type here so what you can do first is import WebKit because this element is actually in another framework or module and that might be okay for you press command B to build it and make sure that it built successfully if in the future you're using building another project and you import WebKit and I can't find this framework then what you want to do is come into your project properties here under frameworks libraries you can click plus and then you can actually just manually add the WebKit framework all right so we've got all these elements here there's one more property we want to add and basically is sort of similar to the video cell we want to have a property representing the video to display that the detailviewcontroller is supposed to display and again this could be nil so we're gonna have it as an optional video and then we are going to override another view controller life cycle method because viewdidload is when all the elements have been loaded but sometimes displaying web content at this point in time causes some issues so instead we want to go a little farther down the life cycle of the view controller to when the view is going to appear and there another method that you can handle called view will appear this one here and this is it happens after viewdidload and it's a when the elements are about to be shown the view is about to be shown to the user so in here we're gonna check if there's a video so if a video let's say card video is not nil else return there's nothing to do I'm just going to delete this boilerplate code here okay otherwise we are going to create the embed URL we're going to load it into the web view or have the webview load it set the title set the date set the description and furthermore we probably want to before we do that is here clear the fields so we want to you know clear that description and clear the day clear the text so that none of it is remaining from the previous video you were looking at so here I'm just going to say title label dot text they label dot text it's nothing and text view dot text is also nothing okay so what does this embed URL look like well I've loaded it in a browser and we can take a look so this is lesson 4 as you can see it's basically like an embedded video and the URL goes like this youtube.com slash embed slash video ID so this is the URL that we are going to construct now for every single video this part in the front is the same so we're gonna put that in our constants file however the video ID is going to be different for any video that we want to display so first let me just take the part that is going to be the same for every video and put it into our constants file so down here I'm going to do static of our YouTube embed URL and put that there and because this file won't get checked into github and we have constants template.dot swift which will be checked in I'm going to also make sure that we add that constant here as well okay so this YouTube embed URL combined with a particular video ID is the full embed URL that we need so let's go to detail view controller and create that URL so let embed URL equals constants dot YouTube embed URL plus video video ID and then next we are going to use a special method of the webview called load and we're going to be able to pass in a URL request to basically navigate to that YouTube embed URL now let's create that request up here let request equals URL request and you can create one by passing in a URL object so we're working our way backwards here now we have to create the URL object let URL equals URL object and we're going to pass in our embed URL string so we should probably make that more clear by renaming the constant to embed URL string so here we're creating the URL object from it we're gonna pass that object into here the request I'm going to force and wrap it and then finally we're going to take that request object and pass it into the web view for loading and then here we're going to set the title so title label dot text is equal to video titled and I can force and wrap it here because I've checked that it's not nil using this guard statement up there as for the date we I want to do the same thing as in our video cell as before using this date formatter at this point you might want to create a date helper utility or you know maybe maybe a date manager or something like that and have some methods to just take in a date and spit back out the right format because it turns out we're doing this a few times but I'm not going to go through that because we are doing it twice here and and I'm verbally telling you that you should if you're gonna do it more than twice you might want to consider creating your own helper class to to do this so you're not having to repeat this code over and over so I'm going to just copy these two lines the date format our object and and the string here and this date format string should probably be in our constants file as well so that if we want to change the format that how the dates are displayed we can do it from a single place in the constants file because now I'm ending up you know repeating it here as well but at this point I kind of want to just finish this off so I'm just going to do that I thought text is equal to DF dot string from date and we're gonna pass in video dot publish the date and then the description is simply going to be textview dot text is equal to video dot description I believe that's the property all right okay now our detailviewcontroller should work but the problem is that we haven't yet passed the video that was selected from the table view over to the detail view controller we still have to do that all right we have to set this property so that when the view is about to appear it's not going to get caught here and it's going to be able to continue so let's go back to the view controller and figure out how we can do that actually let's go over to the storyboard so I can explain what what happens during a segue when it's about to occur so when the user taps on a row of the table view it's gonna cause this segue to occur and when the segue is gonna happen there is a method that gets called that you can override and put some code in there so that's what we're going to do that's how we're going to then pass that video object over to the detail view controller so inside our view controller under here there's a method called prepare for segue are you here and this method automatically gets called as a segue happens to the view controller so when the user is transitioning to the detailed view controller so at here we're going to get a reference to the video that was tapped on get a reference to the detail view controller and set the video property of the detailed view controller and before that just confirm that a video was selected so to do that we're gonna say you know guard a table view dot selected sorry index path for selected row it's a index path identifying the row of the selected row so we're just going to make sure that this is not nil so guard that this is not nil else else return and then we're going to get a reference to the video that was tapped on let video let's selected video let's say is equal to videos and the index is going to be this index path here and because we've checked that it's not nil we can put it in here force unwrap it and grab the row so that is that gives us the selected video next we have to get our reference to the detail view controller and we can get that through the segue property or parameter up there so segue destination you can see returns the view controller that the segue is going to but it doesn't know what type of view controller it is so we're gonna have to cast this as a detailed view controller we have to tell tell the system that that's what it is so let detail VC equals the destination view controller has a detail view controller and then we're going to set that property detail VC that video is equal to selected video and that is how we are going to pass the selected veil over to the detail view controller for display all right so let's rebuild this project and run it and see it in action all right so clicking this crashes the app ok so let's take a look at what's happening could not instantiate this non class ok so it turns out that even though it's not throwing an error in here we have to add this framework so let's go ahead and add it and let's try to build the project and run it again all right there we go you can see there's the video right there this is a scrollable thumbnail sorry description we've got the date we've got that when you hit play it plays in here and you can even expand it and whatnot now we might want to change I think in my screenshots I had everything as sort of like a dark dark background so we can do that we can change that and the other thing is that when I dismiss the detailviewcontroller you can see that it's still selected here so this highlight when you click it you know I kind of want to get rid of that so I'll show you how to do that so let's go into the storyboard here and for the for the cell the video cell if you go into that attributes inspector under selection you can change it to none like that don't change the table view selection you know if you change it to no selection then you people won't be able to tap on a row so you want to be changing the video cell like the prototype cell change the selection style to none so that's takes care of that now if you want to make everything dark and gray like I did click on the root view let's change the background I think I picked I picked something like view flip side background color so so that was the great that I chose and then for the table view if you scroll all the way down to the table view background by default it's white you can change it to clear color and then for the video cell itself the background I also changed it to a clear color and as a result we have to change the text labels to white so for the title label you can change the color to white and then for the date label I think I chose a light gray so I'm just going to go with the light gray color and then same thing for the detailviewcontroller here the view change it to that flipside background color and then for these text labels in the detail view controller I'm going to select the title label and change that to white and the date label you can actually see your most recently used colors here so I'm going to select that light gray right there for this text view the color is going to be white but the background color is going to be clear so you scroll down you can see the background here it's going to be clear alright and you can also change the font size of the text view so we can go with a little bigger font like that so let's save it and run it take a look at how it looks right now alright cool now it's looking more like the preview that we did alright so now before we end off let's go ahead and check everything in and by now this should be pretty selfexplanatory and you know when we build more of these one day builds we can get into the habit of doing this added detail view controller segue to detail and web view in detail view controller now one word of caution if you're working on a big team you definitely want to be a little more descriptive that I'm doing now I'm I'm sort of glossing over a lot of details yeah okay so we're gonna do that and we're done look at how far you've come I've mentioned this before but I think it's worth repeating just ignore for a moment the fact that this is a YouTube app the structure of the app the data flow the techniques and patterns that you've learned in this app they are all what I would consider essential to know and now you know them and now they're in your arsenal now we can definitely take this YouTube app further and we can definitely integrate in a deeper way with the YouTube API in the next video I'll give you a preview of the features that you can add to this app inside our CWC plus program but before that let me know how you would take this app further just leave me a quick comment below if you want my Xcode project you'll find it in the description below just remember you have to add your own YouTube API key into the constants file alright thanks for watching and I'll see you in the next lesson