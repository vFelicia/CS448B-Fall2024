hey code crew how's it going in this firebase crash course we're going to learn how to set up your firebase database and also how to create data read data update and delete data as well now the initial setup of the firebase database may be a little bit intimidating especially if you haven't worked with firebase before but don't worry that's why I'm here after that though the actual code to read data and create data is pretty simple so sound good alright let's get started so first of all go to firebase Google comm and then click on the sign up or login button in the upper right corner in this case I'm already logged in next we're going to create a new project by clicking the add project button and then you're going to give your project a name it doesn't really matter what it is this is just for identification inside your firebase dashboard next click create project after you're in click on the iOS icon where it says add firebase to your iOS app it's going to launch a wizard that walk you through the next step which is to add the fire based code libraries also known as the SDK to your Xcode project the first step however is to register your app and you're going to need the iOS bundle ID of your app now I'm going to type mine in right now because I know what it's going to be but when we create our Xcode project in the next section I'll point out to you where your bundle ID will be as well so I'm going to type comm code with chris dot firebase crashcourse I'm going to give the app a nickname and then I'm going to click register app alright so now let's jump on to the next step where we create our Xcode project and I'll show you where your bundle ID will be so you can go ahead and register your app now let's create our brandnew Xcode project we're gonna choose single View app under iOS and for the product name I'm going to put firebase crash course but you can put whatever you'd like this product name together with the organization identifier is put together to create your bundle identifier as you can see on the screen and again you'll notice the bundle ID there in the project properties and then you're going to go ahead and close the Xcode project now it's time to use cocoapods to install the firebase SDK if you're new to cocoapods it's simply a tool that helps you easily install and manage thirdparty libraries for your Xcode projects I have a detailed video about how to install cocoa pods on your computer here so go ahead and do that first if you don't have cocoa pods installed already so assuming that you have cocoa pods installed the next step is to open up terminal and navigate to your project directory type in pod in it to set up your project to use cocoapods and now if you navigate to the project folder you're going to see a pod file this is where you specify the thirdparty code libraries your app will use so open this up in your text editor and then add these following lines pod firebase core and pod fire based database save the file and then close it then back in terminal type in pod install press ENTER and cocoa pods will read the new entries and go fetch those code libraries for you now this might take a few minutes so don't worry if there's no indication that anything is happening now after it's done open up the XC workspace file from now on this is the file you want to open to launch your Xcode project because LLL include your thirdparty libraries now going back to the firebase setup wizard the next step is to download the Google service info.plist this configuration file contains all of the information that your app needs to connect to the firebase API and to access our database then click and drag this Google service info.plist file directly into the file Navigator of your Xcode project now make sure copy items if needed is enabled and also add to targets is checked on as well click finish and we're done with this step now the last step is simply to initialize firebase when the app is launched and we can do that inside the app delegate we're going to need to add an import firebase statement at the top and then also a firebase app that configure a line in the app delegate so let's go ahead and do that now sometimes when you type in import firebase the Xcode project is going to complain that it can't find it just press command B to build your project so that Xcode knows that those libraries are there and then the last step the wizard is going to try to verify your installation by listening for a connection so launch your Xcode project and run it in the simulator now for me I had to do this several times you might need to stop the project and then rerun it a couple of times to get this working but once you do you can get a little green checkmark back in the wizard finally click continue to console and with that you're finished with the setup now let's take a tour of the database in the firebase console click on the database tab that's gonna bring you to a page where it's talking about the cloud fire store which is kind of their next version of the real time database the only thing is it's in beta right now so I would recommend that you start with the real time database if you scroll down a little bit once you get the hang of using this it is not too late to learn about cloud fire store and hopefully by then it's gonna be out of beta so the real time database is what I'm going to be talking about today click on create database now here you can start in locked mode or test mode and I choose test mode whenever I'm developing an app because it's just easier enough to have to worry about permissions or anything like that it makes your database public and you can just worry about doing the database transactions and then after you finish your app you can go ahead and turn it into locked mode alright so now you have your real time database you'll notice that it's not your traditional rows and columns one thing you have to realize is that data is stored in JSON format in the firebase database if you're new to JSON that I recommend checking out this video which I've linked to basically data is stored as a series of key value pairs a single key value pair contains a key and a value now this is an example of a key value pair an employee ID with the name of an employee as you can see a key is some sort of ID and the value can either be a piece of data or actually the value can be another key value pair or a whole bunch of other key value pairs as I demonstrate here you now the employee ID is the key and the value as a whole group of key value pairs which contains information about that employee in the end it's like a tree of nested key value pairs that's a short introduction to JSON for more information check out the video I link to in the description below now let's take a look at writing to the database inserting data into the database is pretty easy first specify that you'll be using the classes in the firebase libraries by using an import statement at the top next you're going to create a database reference then specify the key path to the location you'd like to insert data to the key path is exactly like it sounds it's just a series of keys leading to that location and call the set value method inside the set value method you're setting the value part of the last key or key path so if you'd like to create a new key you can just specify it at the end of your key path and I'll create it and set the value to it if you'd like to Auto generate a random unique key instead you can use the child by Auto ID method and then call the set value method to set a value for that autogenerated key you next let's take a look at reading data with reading data you can either retrieve the data once or you can specify an observer so that you get notified of data changes in real time in this QuickStart tutorial we're only going to be walking through retrieving the data once and in a future video we can cover observers okay so once again make sure you have the import statement at the top create a database reference and then specify the key path to the location you want to read from and then called the observe single event method in this method you can specify what you're retrieving in this case we want to retrieve the value of that key path then in the second parameter you can specify a closure which is the block of code you want to run when the data is returned the closure has a data snapshot parameter that contains the results of the database call from this data snapshot object the results of your query are in the value property remember when I told you about key value pairs and how the value part can actually contain another key value pair or even a bunch of key value pairs well if it's a single value type you can just cast it to whatever data type that is and use it however if it's one or more then you can cast it as a dictionary and then get the pieces of data you need out of the dictionary I'll have to do a more detailed video on retrieving data because there's so much to talk about here including sorting and filtering for this QuickStart we'll leave it at this basic data retrieval use case now let's take a look at updating data for updating data you can use the set value method as well make sure you have the import statement at the top create the database reference specify the key path and then use the set value method to update the value for that key there's also another method called update child values that lets you update several values at once simply create a dictionary with all of the updates and pass it into the update child values method you for deleting data there's a method called remove value again make sure you have the import statement create the database reference specify the key path and then call remove value it's going to delete the key as well so there you have it if you liked this video make sure you subscribe to my channel just hit that big red subscribe button below and if you want to see more tutorials like this one just visit my website at code with Chris calm and make sure you sign up for the newsletter where you're going to get exclusive access to videos and tutorials before they're published anywhere else now I want to turn it over to you guys does firebase database seem like something that you can use for your app let me know right now by leaving a quick comment below alright thanks for watching and I'll see you guys next time hey did you join my free Facebook community yet that's where I hang out along with a ton of other people learning iOS just like yourself I also post early access to all of my videos inside that group before I put them on YouTube you can also get help with any questions you're having visit the link below click on the join group button and I'll approve your request right away alright so I'll see you in there talk soon