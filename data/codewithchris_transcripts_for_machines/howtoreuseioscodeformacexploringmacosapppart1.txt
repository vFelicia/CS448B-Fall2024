hello and welcome it's chris here in this threepart video series my friend flo is going to help us compare mac os app development versus ios app development you're going to see what things you can use across the two platforms as well as what is specific to the mac os platform now i think you're going to learn a lot and i think you're going to really enjoy yourself so make sure you stay tuned next week for part two and if you like flow's teaching style make sure you check out his youtube channel flow rights code all right enjoy learn about how you can bring your existing swift ui skills to the mac hey call crew this is flo this is the first lesson of the swift ui on mac os mini course in this lesson we will cover the different approaches of writing macos apps with swift ui have a look at how we can share code between the different operating systems and how certain components might behave a little bit different so first of all i have already prepared a little example project for this lesson because we will not actually be writing any code today i will just show you how things work which things behave differently which things are exactly the same as you might have already known them from ios development so first of all the general principles of swift ui and the development environment are exactly the same you are still using views you still have vstacks navigation views lists and so on everything behaves exactly the same so you basically write the exact same style of code other things like the environment user defaults and call data also behave exactly the same across the platforms of course there are some limitations for example health kit just isn't available on the mac which is available on ios but most of the other things are exactly the same now there is one major difference between ios and mac os development and that's the underlying framework of switch ui so as you probably know on ios swift ui is built on top of ui kit so if you have to step down into something it's usually view representables that you have to write or ui view controller representables where then inside you create some ui views for example for a photo picker or stuff like that now on the mac there is no ui kit so it just simply doesn't exist the native framework for the mac is called app kit and it's actually very similar to ui kit with the main difference being the naming so instead of creating ui view representables you will be creating ns view representables so where in ui kit the prefix is always ui in app kit the prefix will always be ns for next step that company that steve jobs founded and then was later bought back by apple so you have to keep that in mind when you use some ui kit hacks for example in your swift ui app for ios they will not work and they won't even compile on mac os just because your ik doesn't exist there so you can transfer all your skills with the view representables just make sure that you use the ns version instead of the ui version for this next section let's have a look at how you can actually create a mac os app so of course you create a new project in xcode as always but now there are basically three different options for you to choose from the first option is to create a standalone macos app this is the standard option if you just want to create a mac os app that shouldn't be run on any other operating system so if you want to create an app that only runs on the mac and not on for example an ipad or an iphone then you should choose the mac os tab and then select app another option is to create a multiplatform app this will basically add two targets to your app first the ios target to run your app on iphones and ipads and then also the mac os target to run your app on the mac with this approach you can share a lot of your code but you still have the option to write some specific code or some files that are only inside of one of the two targets so if you select multiplatform here at the top tab bar and then app you will have a project with a shared folder this is where most of your logic maybe your database access your services most of your views will live in this shared folder but then you will also have a folder for ios specific code and for mac os specific code and then the last option is mac catalyst so in this case you will just create an ios app so select ios in the tab bar here and then app below and this will allow you to enable the catalyst environment what that basically does is it allows you to write a regular ipad app so an app that runs on the iphone and or the ipad but it has to run on the ipad with swift ui and you can also use ui kit for that and then this will be translated into a catalyst app that can be run on the mac so if you really just don't want to dive into all that ns and app kit stuff you can just still use your swift ui and ui kit knowledge and build a catalyst app now i will repeat here the important part is that a catalyst app needs to include the ipad not only the iphone let's have a look inside xcode and see how you can select all of these things so for example in this project that i prepared it's a multiplatform project so there is a shared folder here and also a mac os folder now in this case there is no ios folder because there are just no ios specific files right now but if you but if you had to create some ios specific code you would then also have an ios folder let's get into the project file and there you can see on the left hand side here in the left panel there is an ios target for the swift ui on mac app and a mac os target i have actually done something very interesting for this project and i have enabled catalyst and a native mac version of the app so the macos target here is basically the native mac os target but if we switch to the ios target and then have a look here at the center pane then you will see that i have selected the ipad as a deployment target and i have also activated mac catalyst what this does is it gives me two options to compile and run this app in reality you would probably never do this usually either you use catalyst or you create your own macos target both at the same time really only make sense right now for this video so i can show you the differences between them okay so since we have two targets in this project if we click on the scheme manager here we can select either the ios target or the mac os target as i said mac os target plain mac os project can only be run on the mac native application but since i have selected catalyst in the ios target i can even run the ios target on my mac now so if i just select my mac mac catalyst here then i can just run the ios app on my mac like i would run any other mac app so it's important for you to understand the differences between the three approaches either you create a standalone mac app or you create a multiplatform app where you share code between mac os and ios but you also have specific files to either of those targets and then the third approach via the ipad app and my catalyst turns on now i have already created a few views for this example app because i want to show you the differences between a catalyst app and a plain mac app so let me run both of them and show you the differences okay so i'm starting with the native mac app and let's have a look at how all of the inputs behave there how the navigation view behave there the titles and so on so you can see here the app is running we have a navigation title at the top swift ui on mac this is just the apps title then we have a default screen here you have to pay attention when you're developing mac apps because the navigation view actually behaves the same as on the ipad where you always have a sidebar and a main view it's not the same as on ios or on iphones where you have a navigation stack where views get stacked on top of each other so on mac os we have just a simple text here a navigation link and then another text here we will get into how this text came about in just a second and then we also have our sidebar here where we can navigate either to this second tab or to the first tab where i have just prepared a few of the standard switch ui input elements because those are the things that actually behave pretty differently from case to case from ios to macos so i have some buttons with button styles border button style or the prominent button style there is a toggle there is a picker and you can see on mac os the standard picker is like a pop over menu then i also have a date picker here a color picker which opens up this little window all of these are default elements of swift ui on the mac and then i also have this little slider and a stepper that's connected to the same value as the slider basically so keep in mind how all of these look and now we will jump into the mac catalyst version of the app and see the differences okay so the catalyst version of the app is now running and there are some immediate differences for example the sidebar now doesn't have that translucent background effect so with the mac os native app you always have that standard sidebar with the translucency where you can somehow see a blurred version of what's behind the window this is not the case in catalyst apps because that just doesn't exist on the ipad basically a catalyst app is just an ipad app compiled to be run on the mac okay so you can see already a bunch of differences the navigation bar looks a little bit different the navigation link here looks a little bit different you can see that this text label here also has a different content but as i said i will show you that in just a second we also have this little toggle here on the left hand side to open and hide the sidebar which is not there by default on the mac then we also have a navigation title here in the sidebar and then we have both of our navigation links so the first one to that destination two basically the same as before but the title once again behaves differently from the mac version and then that input screen looks really different in my opinion let me make that a bit bigger so you can see the button styles are similar but different so here's the border button style and the border prominent button style they don't have that 3d like effect as they had in the macos version the toggle also is completely different it's actually a toggle whereas on mac os it was more like a check box the picker has a completely different style compared to the mac of course you can set the picker style to be a menu picker style but by default it will just have a different behavior the date picker also looks different the color picker is really huge for some reason but it still opens the same color picker window here and then the stepper also looks a bit different but the slider is pretty much the same so what you should take away from these two examples is you can create a catalyst version of your app and run it on the mac it will probably work just fine but some of the standard input elements will have a different appearance or sometimes also different behavior the last thing that i want to show to you in this lesson are preprocessor macros as i already told you when you have a multiplatform app you can share your code between the ios and the mac os code base now some things are just not possible to share because ios doesn't have app kit and mac os doesn't have ui kit so things like ui color just don't exist on the mac there is an equivalent ns color but it's not the same so you can't write exactly the same code for some of these things what you can do however is use preprocessor macros to determine which part of your code is run on which platform so in this example i have added a check for the platform so if the os is mac os then the text on our first view on that content view screen shows i'm running on mac os and if it's not os mac os then it shows i'm not running on my qs now let me run both of my targets again and show you a very interesting difference okay so now i have selected the native mac os target in xcode and here you can see the text table will say i'm running on mac os because we had that preprocessor macro check here if the os is mac os then say i'm running on mac os this makes sense it is a mac os app so let's try the same thing with the catalyst version of the app okay so now i have run the catalyst version and as you can see the text label says i'm not running on mac os and this is the subtle but very important difference catalyst is an ios app run on the mac so the app itself uses all of the ios specific code it is still using ui kit in your code which then gets compiled into apkid probe i don't know exactly how that works but here you can see the main difference between a macos target and a catalyst target it's just not the same you can write very similar code but it will behave differently okay so in this lesson you got an overview of what working on macos apps with swift ui really means he learned about catalyst versus native apps and how to share code between supported platforms in a single code base