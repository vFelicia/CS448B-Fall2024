hey guys welcome to lesson 15 of how to make iphone apps with no programming experience in this lesson we are going to add code to keep score for each round for the player and the enemy now before we do that though I created some graphics to improve the look and feel of our app so I've got a logo here that I'm gonna put near the top I've got a deal button which I'm going to replace the play round button with or rather I'm gonna add the image to the button and I created a new background so it's got this sort of spotlight feel to it rather than just solid green so let's go ahead and add those graphics to our asset library first I've got the logo here so I'm just gonna drag that into there and I've also got the deal button graphic here so I'm gonna drag that there as well okay now let's go into our storyboard now to change our button so in order to add an image to our button we're gonna come here click the button go into the inspector pane on the right hand side and if you scroll down see there's image and there's background if you specify background and you pick a deal button you see the image is going to appear there but the text is gonna appear on top of it so you can either do that and then erase the text or let me just erase the background or you can set it as the image for example if you wanted what was it deal button for example if you wanted the image beside some text so I'm just going to do that but I'm gonna erase the text so that we have a button with just an image right there but also in view controller the Swift in the viewdidload method we were practicing setting properties and calling methods in here so this one actually adds the title play so I need to get rid of this line or else it's gonna add the text plate beside my button image so I don't want a title for my button okay next we need to add an image at the top of our view so we search for UI image view here I'm just gonna drag it and drop it right there and now we got to add some constraints to it so the first thing to be aware about is the size class that we're in right now right now we're in the iPhone portrait size class and I just added this image view onto the storyboard so this image view which is the logo will only be available in this size class I actually want it to be available in all the size classes so I'm gonna go back to the any with any height layout for now and then I'm gonna open up my document outline by clicking this button and then I'm going to you see how my logo is grayed out right now well I want to include it in this any any size class so I'm gonna go into the inspector pane let me just expand this Xcode window a little bit there it is it's actually in this tab right here and I'm gonna install it into this size class now you can see that it's not grayed out and I'm just gonna rename this as logo and in this size class I'm going to add a constraint I'm gonna click the image view I'm going to horizontally centered in the container furthermore I am going to in the inspector pane right here change the image to logo now let's see how it looks when we run it in both portrait and landscape and then we can depending on how it looks we can make some adjustments to it okay so you can see the the logo and portrait view is up there it's a little small and it's also probably needs a margin from the top and if we go into landscape you can see it the size for landscape actually looks decent again it needs a little margin at the top so with that in mind we are going to jump back into our storyboard now we're going to go into the portrait and we're gonna add a margin from the top for this logo so select the logo either from the storyboard or from the document outline click this menu here uncheck constrain margins enable that top margin there and click this so that you know which item you're specifying the margin from so I want to choose view which is the top and let's say it is right now it says 50s this is 44 and I'm just gonna leave it at 44 I'm gonna click add a constraint and then furthermore I'm going to add some constraints to the left and right so let's uncheck constraint 2 margins and do that again and double check what the neighbors are so 80 and 80 gives me something that looks like that so I'm just gonna add those two constraints now I'm gonna run it just to see how it looks in portrait so the constraints that I just installed were in the portrait size class so it's only gonna show up for the portrait okay so as you can see there's a margin from the top and because there's margins from the left and right it is pulling it wide but however the aspect ratio for my image is kind of messed up now and I can change that with a simple change of a property if I click the image if I go to the attribute inspector pane I look at the view mode it's a scale to fill instead I want to do aspect to fill which means that it's going to stretch the image to fill the container of the imageview except that it's going to maintain the aspect ratio so that's going to prevent my image from getting squished so if I run it again now it looks proper it looks like the correct height and width however I do want to extend that margin a little more from the top so let's go back into the document outline actually it's probably easier to select that exact constraint I need from here and here we can see that it was 44 before let's change it to 100 and then let's click that and update all the frames for all the views okay and you can see here that it's kind of clipped after I updated the frames and that's because the image view doesn't actually have a height see I specified a left and right margin I specified a top margin but without a bottom margin and without a height constraint it doesn't know how tall this image view is when I run the app in the simulator why isn't it clipped like this well that's because in the image view the image is going to overflow unless I specify clip sub views so let me check this off and I'll show you what that looks like so I'm gonna run it again and you're going to see that now the image is clipped because it's not going to overflow its container however if I uncheck clip sub views and by default it's unchecked so you only need to enable it if for some reason you want to clip the sub views so now it looks fine now I could specify a height for this guy if I wanted to but I don't feel the need to right now because it looks fine in our simulator it works fine however when we go to landscape we still need to specify a top margin so that it's not as close to the top so let's jump to our landscape size class and for the logo I'm gonna select it from the document outline click this unchecked constraint to margins check the neighbor is the view and then let's say it is 30 pressed tab add a constraint now let's run it alright so that looks pretty good that's landscape and this is portrait okay now what we also have to do is add scoring labels so let's go back to the any any size class let's search for label down here and drag a label just put it in the corner there and what we're going to do in the attributes is we're gonna change the color to white we're gonna change the label to maybe a zero to represent the score we're going to change the alignment to Center aligned and we're going to click this icon this little T right here and change the size to about a hundred okay so the labels is going to be as big as it needs I'm going to specify a left and the bottom constraint for this guy so I'm gonna uncheck constraint two margins for the left let's say 50 for the bottom let's say 50 as well and I'm going to install these constraints on the any any size class so it's gonna affect both landscape and portrait now let's click this select update frames and there we go actually fifty fifty might be a little too much so let's change that to twenty and change that bottom one to twenty as well okay and now let's just run it quickly to see how that looks okay so there we go that's in landscape and that's in portrait okay we are going to also add another label kind of right on top of that zero there and make sure that it's not sitting on top of the frame of that other label because we're going to highlight both of them and you can do that by either selecting the zero on the document outline and then holding down command and selecting the other one or you can do that through the storyboard so click the zero hold down command on your keyboard and then click the label so you have both of them selected and then we're going to click this alignment and we're gonna say horizontal centers that means they're both going to be horizontally aligned like that and then also we're going to select that label which is going to be the player label we're gonna hit the pin menu uncheck constrain 2 margins and specify a bottom margin for the neighbor we want to specify that it is relative to the score label and if you don't see this score label that means that your label is overlapping the zero frame so that it can't detect this neighbor so what you would want to do in that case is just move it a little higher up if you can't see it and then try it again so click the pin uncheck constrain to margins enable the bottom margin so like the zero label as the neighbor and then let's put 15 press tab to tab out of that text box and add constraint now let's update all of the frames so you can see that the label sits right on top of that zero what we're going to do is change the properties for that label let's go change the text color to white change it to player let's centeraligned it and now let's run the app okay so we can see that there's the player label right there and it looks okay in landscape as well so we need to add another corresponding set of labels on the righthand side okay so let's stop the project and what I'm going to do is I'm gonna simply highlight both of these and hit command D to duplicate them and then I'm going to move them on this side right here so I'm going to create a little more space I'm just gonna make my Xcode window a little larger so I'm gonna drag this all the way on this side I'm gonna highlight this score label and I'm going to add constraints uncheck constrain margins enable the right and bottom just make sure that they're relative to the view and then add two constraints so it looks like there's a constraint there and I believe it might already have their horizontal centers as well which is this one so let me just change this label I'm going to click that label and change the text you can actually double click the label to edit the text right there so let's say enemy and now let's run the app again okay it looks good we've got the app in portrait view here and that's landscape view the next step is to hook up these score labels to the code to the view controller as iboutlet properties so that whenever we click deal we can actually write code in the play tapped method to update these two labels with the corresponding score so I'm going to stop it and in here we want to go into assistant editor so that's this button up here and because we're losing a lot of real estate for the storyboard I'm actually just going to do it from the document outline here so I can see that this zero label is the player's score and this zero here is the enemy's score so I'm going to click that hold down ctrl click and drag it over here oops let's cancel that and try again and put that right here and I'm gonna call this the player score label press ENTER so now we've gotten one outlet property create a little space so it's just easier to drag the line I'm gonna click this one here that's the enemy score label hold down control drag it into there and I'm gonna call this the enemy score label okay so now we have access to these two elements on our storyboard another thing we want to do is actually create two properties up here to keep track of the scores and they're going to be integers so let's save far player score is an int that's the capital I equals 0 and right here we're gonna save our enemy score is 0 as well to start off with and now if we scroll down to play around tap so let's create a little more space so it's easier to read I'm gonna go back into the standard editor and then we're going to jump into the view controller so if you remember from the last lesson we created this if statement in this branch the first card is larger so I want to increment the player score right player score let's use self to remain consistent you don't need to use self but this just refers to this view controllers classes property named player score so the increment I'm going to use plus equals one so that's just going to increment the player score by one so if the numbers are equal I'm not going to do anything if else the second card is larger I'm going to say self thought enemy score plus equals one so I'm incrementing these variables which are keeping track of the score but I haven't updated the labels yet so in order to update the labels we can reference them because we created iboutlet properties so selfthought player score label dot text labels have a text property which we can update which sets the text for the label Nestle equal to a new string object and I'm going to pass in the player score it's going to actually turn that in into a string object and it's going to assign it to that I'm gonna do the same thing for the enemy label self dot enemy score label dot text equals new string object and we'll pass in the enemy score this time and now let's run the project and we should be able to see the score updating as we press deal okay so let's click deal so the ace is larger than 210 so the enemy score incremented now King beats eight so the player score incremented so we can see it's working pretty well let's go into landscape view so that looks great so that's the war card game I hope you guys had fun with it and I hope you guys have learned a lot as well I had a blast teaching you guys how to build it and I hope to see you guys in the next lesson alright bye for now you