X's and O's is an iOS iPad OS version of a familiar game that goes by many names some call it X's and O's as I've named this game but others refer to it as tictactoe or nuts and Crosses hi my name is Stuart Lynch and in this series we'll be building this application from scratch the game has three different modes of play you can simply choose the two on this device mode enter the name of the person you're going to be playing against and start the game You Begin by choosing who goes first by tapping on one of the buttons and after that the player is handed the device and makes the move once a move is made the other person's name is highlighted in green and it's their turn after each play the turn automatically switches until a winner is found or until we reach a stalemate in the second mode you can change to play against the device and then you can start and you can see here that I'm running an iPhone 14 simulator so I can choose to start or I can let the simulator make the first move when it's the simulator's turn to move the screen locks up while the simulator is thinking and then a random move is made and the turn is passed back to you after I make a move it's back to the simulator again and so on and so forth until a winner is declared or not in the final mode you get to play against anyone who's nearby who has the app installed on their phone and has it running and looking for someone else to play against right now it looks like there's no one to play against so let me bring up my test phone which is an iPhone SE and it's running iOS 15. while the simulator as you can see is running iOS 16. so even though this app is built using xcode 14 we'll make it backwards compatible you can also see that it's designed for both light and dark mode as soon as I choose the challenge of friend mode on the real phone it starts to advertise its availability to all other phones close by that are running the application and looking to challenge a friend as well as my simulator is either player can choose to challenge the other and an imitation is sent waiting to be accepted or rejected if the invitation is accepted both devices enter game mode and the names on the start buttons reflect the display name chosen for that device again either player can start but once that happens the opposing player cannot make a move until their device turns green so here it's Colin's iPhone turn when he makes his move the move gets transferred over the air to the simulator and it's now its turn and Colin can no longer make any move and we can continue to play until a winner is found or as we see here we reach a stalemate while a game is in play you no longer are advertising your availability but as soon as you end the current game session you're back to advertising your availability and looking for someone else to play or you can choose another game mode there's a lot to learn in this series and not just the multipier connectivity there are lots of valueadded techniques introduced to make your code reliable and extensible in the future well now that we know what we're going to create it's time to start there is no starter project for this series but there are some starter resources that I prepared for assets that we're going to be needing so be sure to download them as we'll be using them very shortly I'll be using xcode 14 for this project so let's start by creating a new application and let's call it x's and o's and I'm just going to save it to the desktop as xcode 14 by default specifies a minimum deployment Target to iOS 16. I want to make sure that users of this app who are still on iOS 15 can still run it so select your app Target and set the minimum deployment to 15. and then do the same in the project I want this app to run on both an iPhone and an iPad but I want to restrict the iPhone 3 running in portrait mode only so uncheck the landscape options on the iPhone orientation at this point I always like to clean the build folder and then build the app that way I make sure it compiles and I haven't made any errors now it's time to add those assets that I mentioned if you open these starter resources folder you'll see all of the images that I've prepared one is a PNG image that we'll use for the app icon and the rest are PDFs so we'll be able to use a single image asset type here the launch screen also has a light and dark version so first open the assets folder and drag the single app icon PNG image onto the app icon placeholder this is a fantastic new addition to xcode 14. we no longer have to worry about those multiple images it can't be a vector image like a PDF or an scg and it has to be 1024 points Square next drag in the single light launch screen image and this will create a new image asset of that name open the inspector and set the appearance to any dark then set the scale to single scale drag the dark version onto the dark placeholder I've also created three images that I'm going to be using for my game pieces one called none that's an empty Square want to represent an O placement in a square and the other an X placement and all three are PDF images so let's drag them all into the asset folder and while they're all selected I'm going to change that they render as a template image and this means that they'll be black while in light mode but white in dark mode I'm also going to preserve the vector data and set the scale to single scale now I get tired of the blue default accent color that Apple uses so let's set a different accent color for our app first I'm going to change the appearance to any dark and then I'm going to set the content to srgb and choose 8bit hexadecimal for the any appearance which is light we're going to choose a hex value of 461 CBD I'll repeat this for the dark appearance again setting the content type and then I'm going to enter A9 6 e f f for the 8Bit hex value I've also found that the info p list launch screen to be unreliable so I use a UI kit version that also gives me some more flexibility so create a new launch screen file foreign the label add an image which is that launch screen image and then set horizontal and vertical constraints so that the image will be centered in The View next open your target and the general tab and set the launch screen file to that new file Now by default the launch screen background is white and we want this to be black when in dark mode so return to the launch screen file the storyboard and set the background to system background color let me test this now and I'm going to launch an iPhone 14 pro simulator and I see that launch screen is in light mode with a nice Chris image on my first view I get that Globe image that had been sent to an accent color and is displaying that new purple accent color that we set perfect if I switch to dark mode using command shift a I see that lighter purple accent color for my globe now let me launch to test the launch screen and I see that it is a white image on a black background perfect so far another thing I like to do is to rename two files on every one of my projects before I start to code first let me return to light mode content view is the first view presented and that's where I'll be starting my game so content view isn't a good name I'm going to rename it to Simply Be start View the entry point for every app is the one marked with the at Main designation and you can see that the start view is now the first presented view once I change this name now I often have problem finding this in my navigation tree so I always rename it as app entry our start view is where we'll choose from one of the three different modes of play so I'm going to create a picker for that and assign a value to a property that will allow me to change the way the game functions there will be a number of small model objects that we'll need to create for our projects so first let's create a folder called models inside there create a file called game models to hold our game models and they're pretty small so I can include a number of them all in the one file the first one we're going to create is an enum that I'm going to call game type and it will have four cases single where we'll pass the device around but when we challenge the device itself here when we play against someone in the near vicinity on a different device and undetermine what we're still trying to figure out what kind of game we want to play so I'm going to create a computed string property that I'm going to call description and then I'm going to switch on self and let xcode generate the cases for me if the choice is single I want to return the string share your iPhone slash iPad and play against a friend in the case of a bot I want to return the string play against this iPhone slash iPad if we're challenging someone else's appear I'll return invite someone near you who has this app running to play and then if it's still undetermined I'll just return an empty string well now we can code our start View when we play our game depending on the mode we might need to know the name of who we're playing against as well as using our own name so we'll need three State Properties to begin with first one for the game type and it's of type game type and we'll set it as undetermined initially all right then I can create two string properties that will be bound to text fields one will be for your name and the second for an opponent name now if we're entering the names in a text field on a device the keyboard will appear and we'll want to be able to dismiss the keyboard when the game starts and I'm going to do this using a focus State Property then I'll call focus and it's a Boolean and then I'll set it to True basically whenever we're within the text views but false when we start our game let's replace the contents of the vstack with a picker then and I can give the pickary string title of Select game but the selection will be bound to our game type property for the first item in the Picker I'll use a text View using the string select game type and then I'll tag it with the game type undetermined so that if it gets selected our game type will get updated by that value that's the purpose of the tag so I can copy and paste that three more times then for the second I'll specify to sharing device and I'll tag it with the single game type the Third it'll be challenge your device and I'll tag it with the but game type the final picker choice will be challenge a friend and the tag will be bound to the peer game type and then I'll add some padding now I want this to stand out more so I'm going to set a background to the Picker using a rounded rectangle specifying a corner radius of 10 and I'm going to set the style to continuous and then to remove the fill and just leave a border around the outside also the stroke with a line width of 2. then let me set the accent color to primary following that I can display the game type description in a text View and then add some padding foreign now each time I change the Picker a different description of the game mode appears let's follow that now with a vstack to hold our text field asking for the names and how many text fields we display will depend on the type of game we're playing so we'll switch on game type and let xcode generate the cases in the first case single where we're playing against someone else as we pass the phone around we'll want two text fields so inside here we'll create another vstack and we'll have one for our your name bound to your name and then the second text field will be for the opponent's name bound to the opponent name property now in the case that we're playing against a bot which is by phone we'll be using the iPhone's display name so all we need is a text field asking for your name in the case of pier where we're playing against someone who's got their own phone and they're nearby we'll need to do more work on that so I'm just going to put in an empty view for now and come back to it when we get to that section similarly for undetermined we don't want anything here either so again another empty View let's add some padding set the text field style to rounded border we can bind the focus State Property here so that we know when the keyboard is set and then set a frame with a width of 350. now when the game is a peer type we'll have to do more work but if it's not appear type playing against someone on another device then what we can do is we can create a start button so we'll create that button using the label start game and for now the action will be just to set the focus state to false that will dismiss any keyboard that might be shown and we'll set the button style to a bordered prominent Style but we don't want this button to be enabled all the time so we'll make it disabled based on certain conditions if the game type is undetermined we'll have it disabled or if our game type is equal to a bot type and we've got that one text field your name we have to check to make sure that it's not empty so it's disabled if it's empty or if the game type is the single passing the device around and either your name or the opponent name fields are empty in all those cases we want that button to be disabled after that just to fill the screen I want to display an image and that image will be the launch screen image then let's add a spacer to push this up to the top now we're not going to be using a navigation stack here to present our game view we're going to be using a full screen modal sheet to present our game but I'd also like to have a navigation bar here showing our game's name in iOS 16 I can use a navigation stack and Surround my vstack with that navigation stack however we've specified that our deployment Target is iOS 15 and navigation stack isn't available in iOS 15. and that produces that error so I could go back to a navigation view here but it's deprecated so I worry that in the future my app might break and the other problem with the navigation view is that on an iPad I have to change the navigation style to a stack navigation style so that we don't get that split view on an iPad so I want to use a conditional case here depending on the iOS version in use and I'm going to create a view modifier for that so let's create another folder or group and I'm going to call it utilities inside there create a new file called view modifiers change the import to Swift UI create a new struct called navstack container that conforms to the view modifier protocol this is going to require a body function and that body function will receive the content but return a new view once we've modified our content if we just return content then nothing will change if we apply this modifier however I can check for which version of iOS the device is running so if available iOS 16 or later we'll want to return this content view wrapped inside a navigation stack otherwise we can use an else statement and wrap it inside a navigation View and then in the case we're using navigation view we'll apply the navigation view style of Stack to that navigation View and then to make it more Swifty I'm going to create an extension for you inside here I'll create a public function called in navigation stack that just returns some View and what I'm going to return is self applying the view modifier navstack container now I have a full video on view modifiers that you may wish to check out and I'll make sure a link is left in the description so let's return now to the start View so we can simply apply that in navigation stack modifier to our vstack and that will put it within a navigation stack or navigation view depending on the iOS version running and then before that we can assign a navigation title so let's just use x's and o's perfect so the final thing I want to do in this video is to set up our game view to see if we can present it so create another new group that we'll call game screen inside there create a new Swift UI View and call it game View now this will be presented as a modal full cover sheet so in order to dismiss it we can use the environment dismiss keypath and then assign it to a dismissed property just for now let me just embed this text view within a v stack and then I'm going to attach that vstack a toolbar inside there I'll create a toolbar item with a placement of navigation bar trailing in this navigation item will be a button with a label and the game and the only action will be to dismiss the view by calling the dismiss function from our environment property and then I'm going to set the button style to bordered in order to show that toolbar I'm going to have to have a navigation stack and that navigation stack is going to have a title so let me start with the navigation title X's and O's just like the previous screen and then I can embed it within a navigation stack using my new view modifier if I return to the start view now I can create a Boolean State Property called start game and initialize it as false then when the start button is tapped we can talk on this property this then can be used to be bound to a full cover sheet so let's create one binding it to that property and the content bin will be our game View I can test this now in the preview selecting the two sharing device option requires that I add both names before the start button gets active once it's active I can tap on it to display the game View and I can dismiss it if I choose the challenge in the device game mode I only see one of my text Fields because it only requires my name and then again I can view the game and then if I choose peer which is yet to be coded I don't see that start button so so far so good now after coding this I noticed a couple of things that I want to clean up first this full screen cover has a trailing closure so I can remove the content label here and close off the parentheses here and remove it from the end using the trailing closure syntax now and then second I added this accent color up here and it's not needed The Pick of you gets the default accent color that I want and then finally as I do after each video I want to make sure that I commit my code to a git Repository now I never set this up when I created the application but I can do this now from The Source control menu and it will create a new git repository locally and commit our project at the beginning of the next video we'll create a new branch