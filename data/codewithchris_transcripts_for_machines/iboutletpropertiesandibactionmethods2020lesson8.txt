hi and welcome to lesson eight you're almost there only two more lessons after this one and in this video we're going to return back to our work hard game Xcode project and I'll explain to you how those Swift Basics you've learned apply to this project by the end of this lesson you'll know how to write code inside the view controller to access and manage those elements that we've created in the storyboard I'll also show you what to do what your app crashes which is something that actually happens quite often into all of us so if you're ready let's do this so here I have our war card game Xcode project and we're going to jump right into the view controller dot Swift file now that you've gone through this with basics we can talk about some of the code in this file so in this first line import UIKit you know what that means we're basically saying that in this code file we want to use the uikit library that apple provides to make our life easier you go down to this line we have class view controller so right here we're declaring a class called view controller and you can see that it has an opening curly bracket and a closing curly bracket and this inside is a function you can see the F UNC you there it's a function called viewdidload now there are some details that we are going to gloss over right now because it's not relevant for what we need right now I don't want to burden you with that information but pieces of information like this here uiviewcontroller essentially this is something that's called sub classing which is a way for classes to build off of each other so you're not always declaring classes from scratch this is essentially saying that the view controller is building off of another class called UI view controller and this UI view controller class is actually one from UI kit and for this function here you can see that there's an override keyword so you don't need to know about that for now and also this super keyword which again is something that we don't need to know right now but essentially you know at a high level what you're looking at here is a new controler class with a function inside called viewdidload so isn't that really really cool because everything you learned in the last three Swift lessons it you know directly translates to what you're seeing here but as you learned in the last lesson the viewcontroller class by itself is just a blueprint it doesn't do anything right you need to turn it into an object first so now we're going to jump into the main dot storyboard and take a look at the work that we've done here so all these elements that we've added into the view here and that we've configured what are they are the objects of eight classes well believe it or not what we've been doing here we've been creating objects and you might say that hey Chris from what I've learned objects are created from classes right but what sort of classes are these guys objects of well let's take a look at this object library here you see all of these things these are classes inside the uikit library yes that library that we import all of these useful classes like buttons text fields and sliders and stuff like that when we drag one of these elements on to the view we are actually creating an object of that slider class or that button class or that uiimageview class and pick a load of this when you click on one of those elements or objects now that you know what they actually are and you go here on the right hand side into this inspector you can see all of these things that we can configure well what you're actually doing is you're setting the properties for that object so you see everything maps to exactly what we've been talking about in the last three lessons this whole storyboard is merely a visual way for us to create these objects and set its properties in fact we could just completely omit the storyboard and we can decide to create all of these image objects these button objects through code and then set its properties through code and then put them into the view through code so you completely don't have to touch the storyboard but this is more of an intermediate to advanced technique and I wouldn't recommend that for you right now for beginners I would definitely recommend to start with the storyboard so now that you know that these storyboard elements are actually objects how do we get references to these objects so that we can call their methods and configure their properties through code through the view controller well that's where I BLM properties come in let me show you how we can expose these objects as iboutlet properties so that the view controller can access them now there are several ways to do this but the easiest way is just to go ahead and select view controller here in your document outline and remember that this is the visual representation of the view controller object click this this button here that looks like two Khojaly circles this is actually called the assistant editor and what that's going to do is split your code editor into two different panes a left side and a right side now I want to make sure on your right side you're looking at the view controller furthermore up here in this breadcrumb sort of navigation I want to make sure that your say automatic here if it doesn't go ahead click it and bring it down from manual or whatever it was set to go under automatic and select view controller and then find this spot here right after the opening curly bracket of the class press enter a couple of times to create some space and then on the left hand side we're going to expose this left card this first card as an iboutlet property now you could do it through here the storyboard but what I would actually recommend is to do it through the document outline so go ahead and open up your document outline until you see the card here you know you can select the element it's gonna highlight the different parts make sure you've got that left card highlighted hold down control on your keyboard and then while still holding down control click and drag this blue line should follow your mouse cursor as long as you're holding down the control key now drag it over here you should see this little text that says insert outlet and then you can let go of your mouse button and then control key you're gonna get this little menu here and then you're gonna be able to name this ivl led property so I'm going to call this the left image view like that and if you've done this with the right element the type should say uiimageview if this doesn't say that for you just click cancel and then try it again the connection type should be outlet and you can go ahead and hit connect and what that's going to do is generate this property for you because you see there's the VAR keyword here is the name of the property here is the data type that this property references which is UI image view and this is special because it's got this iboutlet keyword here which just indicates that this property references an object in the storyboard now I'm going to gloss over a couple of things here such as the weak keyword and this exclamation mark here so that's not something that we need to talk about right now but the important thing to note is what you've done here is essentially hooked up that object in the storyboard to this property here inside your view controller so now that you have a reference to that uiimageview object you can call methods on it you can configure its properties inside the view controller here now because oftentimes beginners make mistakes when connecting their first IB outlets I'm gonna go through some troubleshooting steps and also some steps for you to confirm that you've done this properly so go ahead in the document outline for this image that you just connected rightclick it and it should pop up this little menu and you can see under referencing outlets it says left image view with this view controller here now if yours doesn't say this then you might have connected the wrong element so what I would do is maybe check the stack view you could have accidentally connected this guy rightclick it and you know there should be no referencing outlets there you know same thing with the right card view if you click this there should be no referencing outlets if you've by chance accidentally connected another element here's how to fix it go ahead you know when you see that menu here you have to click this little X to break the connection and then go ahead and delete the property and then you just start all over and this time you make sure you have the right element selected hold down control drag that blue line over here let go and then you can say left image view now let's say when I'm typing this out I accidentally make a typo and I connect it a lot of the times beginners will just correct this typo like this and leave it at that but essentially that will cause a problem down the road when you run your app because what happens take a look at this right click this and you can see that this image object is connected to a property called left image view with two w's but what we've done here is that we've corrected it so it's gonna look for a property with two WS but it doesn't exist so your app is actually gonna crash that's not the way you want to fix your typos when it comes to connecting Ivy outlets you want to go ahead and break that connection and then just delete the property and you just all over now should show you another way to correct this so the most important part is that you break that connection you can potentially just leave that IBL a property that was created and then you can rightclick your image that you want to connect to that property under referencing outlets click this little circle drag to the view controller let go and it's going to pop up some properties that you can connect this image object to now it's important you don't connect it to the wrong one choose left image view and you can see that this this image right here an image view is connected to the left image view property of our view controller so that's what you want now let's call it connect the imageview hold down control click and drag that blue line I want to make sure that you don't drag it into that same property because if you do that you'll be connecting two elements onto the same iv8 outlet property and that could cause potential problems so you need to drag it into an empty space where it says insert outlet or outlet kind of collection let go I'm going to call this the right image of view and we're gonna connect it all right so we've got two we're going to connect a few more let's say we're going to connect the score labels because we're going to need to update them through the code so let's connect this left player score one and you can see what I did I created a little more space there hold down control click and drag call this the left a score label you can see the type now is different it's a different class UI label connect that and then here is the right one right score label alright now I want to show you what an app crash looks like so I'm gonna go ahead and just change the name of my IB outlet property with without breaking the connection and fixing it here in the storyboard and as I told you this is going to cause a crash so let's go ahead and run the project and we'll see what happens all right so right here you see this red highlighted line that's gonna be a crash and we basically see the same thing on the left and right side because we have the assistant editor open but the main thing is that you need to look down here in the console area if you don't have this section just go ahead up here this will show or hide it and on this righthand side sometimes if you don't have this there are two small little buttons here in the lower right hand corner that let you control the left and right sides so make sure you've got this side here where it shows you all of this text and down here you see terminating with uncaught exception and that's just a generic message for an app crash what you want to do instead is scroll all the way up and that's where you're gonna find an error message which makes a little more sense so here you see at the very top terminating app due to uncaught exception the reason this class is not key value coding compliant for the key rights core label now the line I've highlighted here may not make a lot of sense but what happens is that once you know how to solve this error and the next time you see an error message that looks kind of like this you have an idea about what's wrong and how to fix it in this particular case it's telling you that something is looking for a right score label but it can't find it and we know exactly what the problem is right if we go back into the storyboard write this write the score label you can see if you right click that it says this element is connected to an iboutlet property called write score label spelled correctly but if you look inside our view controller we don't have a property like that we only have this one write score laid without the L at the end and so that's why the app is crashing because it's looking to make that connection that we've told it to make but it can't find you know that corresponding on the outlet so next time you experience an app crash and maybe you're looking for help online or maybe you're in our support forum and you're asking for help make sure that you scroll all the way up into this console and look for that error message which gives you a hint as to what's wrong if you if you just look at this it's not really going to tell you any sort of information okay so let's go ahead and fix this by adding that L that was missing and let's take a look at what we've done here so far so essentially let me go back to the single editor view just so you can see a little more clearly essentially what we've done is we've connected the two image view objects from the storyboard and the two labels from the storyboard as well as iboutlet properties here so from this view controller code file we can reference those objects using dot notation we can access the methods of those objects and those properties of those objects as well let me just demonstrate for you so inside the viewdidload method and create some space and let's access the left image view now hold on a minute why can we access the left image view from within the viewdidload method well this left image view is outside of a function but inside the class so it's inside the scope of the class remember this function is also in the scope of the class so that's why from inside this function we're able to access that left image view property now using dot notation let's click dot and here I can see all of these methods and all of these properties of the uiimageview class let me show you one particular property here called image now this image is you can read the description down here in the autocomplete dialogue the image displayed in the image view that means that I can actually set this image property to change the image that image view is showing now I'm not going to actually do it but why I wanted to point this property out is because I want to jump back into the storyboard and show you if I click this left image view go over to the attributes inspector here you see this image attribute it's basically the image property that I just showed you see if I change the card here right that's just a visual quick way to do the same thing as if I were to do it here by using code all right the next order of business is how do we execute some code when this button is tapped on this field button right here well that brings us to I be action functions and it's connected in the same sort of way as IB outlet properties let's go ahead and open up assistant editor and let's create some space here in the view controller side now let me just hide this panel so we can see a little bit more now before here when we were establishing these IB outlet properties we did we did it up here but now that we are connecting a function we're going to do it down here still inside of the view controller class so we have to do it you know before this closing curly bracket but we also don't want to accidentally do it inside of another function so this is you know the opening bracket of the viewdidload function and this is the closing bracket of that viewdidload function we want to do it right here this is where we can declare a new function so we can create some space here like that go ahead hold down control click on this deal button element drag it here and it says insert action outlet or outlet collection go ahead and let go and you can see that action sorry the connection type should be action if it's not just click on that dropdown and choose action and down here I want you to notice that it says touch up inside there are different events that this button can trigger touch up inside is just a bunt app it essentially means that the user has tapped on the button and then let go of the button while still within the boundaries of the button if you open this up you can see there are different events for example touch up outside which is actually tapping on the button and the letting go with the finger outside the boundaries of the button so that doesn't really count as a tap so we're gonna leave it as touch up inside and we're going to call this Matt we're gonna call this method deal tapped and we're gonna hit connect and you're gonna see that this is essentially a function with this special IB action keyword which essentially just says that this function is connected to an event of triggered by an object in the storyboard it's got one parameter called sender which is basically the button it's a reference to the button that triggered this event and here is the opening curly bracket and here's the ending curly bracket and we're going to create some space in the middle and we're gonna add some code to execute when this button is tapped on so I'm gonna print deal tapped like that and now we're going to run our project and we're going to tap on that button and just check the console to make sure that this is connected properly oh one thing before we do that if you've accidentally connected the wrong element to fix it would you'd go through the same exact steps as the iboutlet property so you can go ahead and rightclick the deal button kill that connection you can see all these different events you kill that connection under touch up inside delete the IB action and then just try it again just like before if you've accidentally made a typo here don't just don't just change the function name like that because it's going to break things right this is still connected to deal tapped right and if you don't have that corresponding function in your view view controller file you is going to break so just be aware of that all right so let's run the project all right so we're gonna click let's move this over here so here you can see in the console that this triggers alright so in this lesson you learned about how you can use iboutlet properties to allow your view controller to access and manage those elements in your storyboard you also learned about IB action functions and how they can be hooked up to events in this storyboard you learned about common mistakes that people make when they hook up their IB outlets and IB actions and how to correct those mistakes and finally you learned about app crashes and how to find a detailed error message when your app crashes now I highly recommend that you download the recap notes by clicking there or checking the description below just to do a review of what we've learned and if you liked this video please subscribe by hitting that red subscribe button below and click on that Bell icon as well if you don't want to miss the next video and then go ahead and click on the thumbnail over there for the next lesson and I'll see you there determining with uncaught exception it's a generic crash mess a generic crash mat crash