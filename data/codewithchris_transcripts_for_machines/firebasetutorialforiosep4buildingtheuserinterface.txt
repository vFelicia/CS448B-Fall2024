hello welcome to lesson four of the Firebase tutorial video series in this lesson we're going to be constructing the user interface for our messaging app so that we can uh list out all of the messages and also compose a new message to send to the Firebase database we're not really going to be doing anything with Firebase in this lesson since we're just constructing the user interface so feel free to skip this video If you're not following along and building this on your own machine but if you are following Along on your own machine and you want to build this out for yourself then you definitely want to check this video out so I'm going to start by taking our view controller and I'm going to embed it in a navigation controller so I'm just going to select the view controller embed in navigation controller and just to remind you guys I'm going to go a little bit fast here um like I said this video series um is not really geared towards beginners so uh you're going to have to know what navigation controllers are and table views and stuff like that if you haven't ever worked with that stuff before you might want to check out some of my uh beginner series material first uh also students of my beginner course will know how to do all of this stuff already so um you can check that out as well Okay so we've got a navigation controller it's naturally got a navbar there I'm going to place a table view in here and I'm just going to pin it I'm not going to constrain to margins but I'm going to make sure this is top layout guide and these are do view for that one it's all going to be zeros I'm going to add these four constraints and then hit this update frames button so this button they moved recently which caused a lot of confusion for people and there we have our table view going up to the nav bar we're going to want to add another view controller here just going to drag that out right there and this is going to be our compose view controller so right now uh there's no class for it so I'm going to create a new class new file Coco touch class this is going to be our compos view controller uh subclassing UI view controller language is Swift let's save it in the project folder like that drag this up there and then back in the storyboard I'm going to click on let me see if I can set the view correctly so we can see all of our view controllers more or less okay the second one that I added here I'm going to change its custom class to an instance of the compose view controller like that uh and then what we're going to do let's look for navigation uh let's look for button I want to add a bar button item here to the first view controllers uh nav bar and this item let's change it to uh compose actually instead of using the title you can use a system icon there there are some basic ones here and some of them may suit your needs so compose is definitely one that would suit our needs because clicking this button I'm going to hold down control drag into this view controller I want to go to that view controller when that compost button is tapped on and I want to present it modally like that and that's going to cause it to slide up now back here in this compos view controller uh let's add a nav bar navigation bar because it won't have one when it presents it modally just going to add a navigation bar like that like that and I'm going to restrict this guy to the top layout guide left and right it should be zeros so zero top left and right to add these three constraints click on update frames so there it goes and then I'm going to search for button again we're going to put a button right there on the right hand side this button is going to be save the post so I'm going to choose the icon like that for ADD and I'm going to add another button the left hand side here for cancel and I'm going to change the icon to trash to represent that okay so what we're missing is the text view in order to add the text I'm going to add a text view here to the composed view controller and let's pin it to all four edges get rid of constraint margins this should be relative to the navigation bar Zer all around this one I'm going to do to the view zero and then add four constraints click this button down here to update frames so there it goes I'm going to delete all of this text and for this title uh here you can change this to compose so now let's set up some of these elements that we've added to the storyboard um as IB Outlet properties so that we can access them through Swift Code let's click on assistant editor right here and that's going to show us the corresponding uh view controller for the view that we're looking at uh and right here we're looking at the compos view controller so that let's add the outlets for that first uh if we look at our composed view controller let me just try to slide it over like that get rid of that guy okay so here we have a couple of elements that we'd want to expose first thing is the text view hold down control um slide it over here as a as an outlet property just going to call it the text view like that so there's our text view second thing is we'd want to hook up IB actions to these buttons so that the user can tap on them and have it do something so I'm going to drag this plus button down here and change the connection type to action because we want to provide a function when it's tapped and not expose it as an IB Outlet so I'm just going to call it add post that and then here we can put in some code to execute and for the trash icon going to do something similar down here change the connection to action and I'm going to say cancel post okay and over here for our original view controller um the right hand side should change as soon as you tap on that in your storyboard if it doesn't just go up here make sure you look under automat itic select view controller if yours is on manual okay so here we don't need to expose um this button and create an ibaction for it because we've actually already linked up this segue for the button so when you tap on that it automatically shows this view controller modally because we've uh we've done it through the storyboard and created this segue right there what we need to do though is expose this table view so I'm going to hold down control click it and drag it over here and expose that as a table view IB Outlet property connect so there's the table view okay so let's set up some code here just to make sure that our table view works I'm not going to have time in this lesson to go through how a table view works and why we're doing what we're doing because it would take a lesson in itself so that's something that I'm expecting you to know going into this series here if you're not sure then um just Google table view tutorial in Google or check out my beginner course what I'm going to do here is um say that the view controller conforms to the table view delegate and the UI table view data source and then the viewed load you have to remember that you want to set the Delegate for the table view to self for the view controller here and the table view data source equals self as well now because the view controller conforms to these two protocols now we have to implement some of the table view methods so table view number of rows that's one we need and that's going to return the number of rows in our data we also need table view uh cell4 that's what I'm looking for cell for row at index path and this is going to return the table cell to display for any particular row so we need something to store the data for the table view so I'm going to create it up here as a property I'm going to call it the post data and right now for the time being it's going to be just some strings so I'm going to just say message one message two just so we can make sure that the table populates and is working properly so for number of rows we're going to return the post data. count this is an array of three strings and as for the table cell well back in the storyboard let's go back to the standard editor View back in the storyboard for this table view let's open up one prototype cell like that and we're going to have one prototype cell now now for this prototype cell uh let's give it a reuse identifier let's call it the post cell so that back in the view controller here we can say table view dot DQ reusable cell you can see here it returns an optional UI table view cell with identifier we just gave it a identifier of post cell so what I'm referring to is this prototype cell here post cell it's going to try to get a reusable instance of a post cell if there are no post cells that are available it's just going to create a new one so let cell equals that then I'm going to set the cell do textt label it's got uh label by default and it set it's text property to post data index path. row now index path is this parameter here and it tells us which Row the table view is asking for so I'm basically taking uh the data for the row that the table view is asking for and then lastly I'm just going to return return that cell so if I run it now let me see I got to return that because the cell may be an optional type let me run this app now we should see the table view populate with some data and furthermore we're going to be able to pop up that compose view controller uh but we can't quite dismiss it yet and I'll show you how to dismiss it okay all right so we've got our messages here but uh the table view isn't quite up to uh up to the section where I want it to be so we can move that up a little later I want to tap on compose here and it's going to pop up our new view controller so clicking these nothing happens right now because we didn't add any code but let's stop the app go back to the storyboard so in order to fix the table view being like that the problem is that the table view knows that this navigation view controller has this bar up here so it's actually leaving space to accommodate for that um you know how we position the table view to be uh flush with the top layout guide what we're going to want to do is instead position it to be flush against the top so that way that empty space that it has to accommodate for the navigation bar um it's going to go underneath so let's delete this top con straint here that we made for the table view let me delete delete that click on the table view we're going to add a new constraint to be relative to the view this time and make it zero add the constraint and update frames so now it's going to be flush with the top but that empty space is going to be covered by the Navar okay so now let's go back to to uh the compose let's Implement these two buttons here let's go to compose view controller and add post we're going to put a todo here post the data to Firebase and then we're going to dismiss the popover and in order to do that we're going to get access to uh the view controller by using uh presenting view controller this has a reference to the view controller that presented this guy and we're going to call dismiss on it and this method dismisses uh the view controller that it presented so if if that makes sense presenting view controller refers to view controller oops shouldn't have double clicked it and calling dismiss on it is going to dismiss any pop overview controller that it presented true for animation and completion is nil and we're going to want it to do the same thing if the user cancels the post so let's run the app now and we're going to be able to take a look at the fixed table view as well as the add post and cancel post buttons so there you can see the table View and if we hit compose we're going to be able to either click this button or this button they do the same thing right now and that's going to dismiss it so that does it for the user interface for our messaging app and again if you got lost uh do check out the beginner stuff first and I'll also provide the uh download for this project in the description of the YouTube video however in that sample code I'm going to remove my Google Service info.plist uh so because it contains all of the config data for my app for my Firebase app uh you're just going to have to slide in your own uh Google service info pist okay so thanks for watching and in the next lesson we're going to explore how data is stored in the Firebase database okay so thanks for watching and I'll see you in the next lesson bye for now