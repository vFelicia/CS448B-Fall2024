should you create your user interface programmatically or with interface builder if you do a little bit of googling you'll be met with articles with headlines like these life without interface builder why I don't use storyboard why I fell out of love with storyboards you get the idea let me tell you I was a huge advocate of building the UI programmatically in fact in my last workplace I led the movement to build all of our UI programmatically for all of our projects but now I am a huge fan of interface builder and storyboards and in this video I'll tell you why I'll also tell you what you should be using depending on what type of person you are stay tuned welcome to code with Kris the place to be if you want to learn how to make an app I'm Kris and I'm so glad you're here now just in case you don't know what we're talking about in this video take a look at this button I can do it through code like this or I can do it through X codes visual interface builder which method is better well to answer that question we need to look at some cold hard facts number one it's tough to get the entire picture with interface builder Chris what are you talking about if laid out all there man yes but there are a ton of options check boxes and dropdowns and interface builder I have to click into every single element and look through all of these options just to see if you've changed anything and then don't forget for each element there is filled a size inspector and an identity inspector as well with the programmatic UI it's easy because I can just read every single line of code and I can see what you're changing to that element if you don't have a line of code changing a specific property for that element then I know that that value hasn't changed number 2 loading storyboards in Xcode is notoriously slow in Xcode when you try to open up a storyboard it's gonna take a couple of seconds to load before you can work with it and that wait time is gonna get longer as your storyboard gets more and more bloated now this issue can be lessened a little bit if you split your storyboards up into smaller storyboards what you should be doing anyways as a best practice when you're working with storyboards to be honest this isn't going to bug you much when you're a beginner but as your skill level gets higher and higher it's going to become increasingly frustrating because at that point Xcode can't keep up with you number three when you're working in a team it's easier to resolve conflicts with a programmatic UI if two people modified the same piece of code in the same file then you're going to get a conflict but that's alright because it's very easy to look at the two offending lines of code and decide how to merge them or which ones to keep with a conflict in the storyboard however you're going to be looking at two pieces of XML and you're gonna have to be able to interpret what they mean so you can decide how to resolve that conflict and reading and understanding that underlying XML of the storyboard is not easy because it's not always human readable so that adds to the difficulty okay so I know it's looking pretty bad for interface builder now but let's put some on the scoreboard for it shall we number four interface builder is faster for constructing a UI if you're building a UI from scratch and you're familiar with using interface builder I've got to say that specifying constraints in interface builder is a lot faster than having to type out all that code I mean take a look at me centering this button if I were to code these constraints out I'd have to type this there's an interesting video by Brian moon of let's build that app where he times himself building the same UI using interface builder and then again doing it purely in code I'm not gonna spoil it for you but do note that he is using some custom extensions that allow him to specify auto layout constraints in code without typing out that much code number five store boards are great at conveying a sense of the apps flow for a new person jumping onto an existing project glancing at the store board can tell a lot about how the screens flow from one to the next but if it's a purely coded UI you're gonna have to take a little more time to look at the code and understand what's going on so now you might be thinking programmatic UI is the winner well no it depends who you're talking to when I was learning Iowa's app development I found interface builder confusing and buggy I felt like I was at the mercy of its quirks and glitches do keep in mind that this was back in Xcode 3 and it's come a long way whereas when I wrote code to generate the UI I felt like I was in control and it felt like it I was at home so that's what I did I built all of my UI programmatically I think part of why it felt so natural to me was because I had a programming background that's what I did I wrote code for a living so I felt very comfortable with it since I was the first and only person at the company who worked with iOS as our team grew everyone followed the same trend they built all of the UI programmatically that is until one day Kiev ash came in he was trained in the ways of the storyboard and poor guy he didn't stand a chance his arguments for using interface builder and storyboards Justin holed up against the rest of us I think we were about six guys at that point so it was six versus one in the end we converted him and he had to work our way because that's the way the rest of the team was doing it when I left the company to teach iOS I realized what a godsend storyboards an interface builder was try telling someone who's never written a single line of code that in order to put a button on the screen they had to type this out I began to realize that for beginners with no programming experience learning how to code is frigging intimidating and it's hugely psychological as well it's like when they start out they have this breaking point and each time they get frustrated it builds up if they reach this breaking point they just give up and they abandon learning iOS however as the learner makes small wins and little accomplishment that tolerance gets higher and higher until they have gone deep enough and they start to find it fun then that's when the breaking point disappears all together so that's why I use storyboards an interface builder in all of my teaching because most of my audience is just starting out and I know they're going to eventually reach a point where they're comfortable with code and then they can start learning to build their user interfaces programmatically in fact in all of apples beginner guides they use storyboards as well so back to the original question should you build your user interface programmatically or with interface builder if you're a beginner who has never coded before start with storyboards if you're a beginner in iOS development but you have prior coding experience start with programmatic UI I think you'll feel much more at home if you're working in a team environment you have to roll with whatever technique that project is using but if it's a fresh project I would recommend the programmatic method this also implies that you need to know how to work with both the programmatic approach and the storyboard approach and finally if you're working solo then do whatever makes you happy and don't forget it doesn't have to be so black and white if you're working on a solo project and you feel a lot more comfortable with storyboards go ahead you do you and if you want to do a little bit of programmatic UI with a little bit of storyboard you can do that too in fact Shaun Allen has this method called skeletal storyboards go check out that video now if you want to learn iOS development with a stepbystep plan using storyboards then you have to check out my beginner playlist just click on that short playlist that you see on your screen right there and I'll see you over in those videos okay and that's a wrap