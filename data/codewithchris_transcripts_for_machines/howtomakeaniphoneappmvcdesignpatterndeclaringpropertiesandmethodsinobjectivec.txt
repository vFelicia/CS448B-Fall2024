hey guys welcome to the recap of the user interaction demo that we did in the last video now seeing as how this video is a little long I'm going to break it up into three distinct sections and the first part is we're going to talk about the model view controller pattern which is a software design pattern that we use for all of our iPhone apps second we're going to look at how to write our own properties instead of just creating them through interface Builder like we have been in the last few demos and in the third section we're also going to do the same with methods how to write our own methods rather than just creating them through interface Builder okay let's get started now if you don't have this xcode project you can download it from the link below or from the link on The annotation on the screen now just to jog your memory in the previous video what we did is just create a brand new uh single View application we added a label a text field and a button onto the view and we hooked up the interaction Handler so that when you click the button it changes es the label based on what text the user typed in now the app flow for this application is the same as your hello world one that we built in the first practice because we didn't actually add any files and we've still got the app delegate class we've got the view controller class and the zib file so here's a diagram of the Hello World app flow that we saw in the first practice and so this user interaction demo is the same app flow now one thing I want to point out is the model view controller design pattern now now this is a software design pattern that iOS follows we have been using these in our apps without even knowing it so here's a diagram of how it looks like so as you can see there are three responsibilities there's the view the controller and the model and the zip file that we see back in our project represents the view roll and we've also got the view controller class which is representing the controller what we don't have in this application is the model and the model is responsible for the data so in regards to the three distinct roles or responsibilities the view is responsible for displaying the data on the screen from the controller and receiving user gestures and interaction and relaying that data back to the controller now the controller is responsible for updating and retrieving information from the model and handles the user interaction from the view now because in this application we didn't have any data so we didn't have a model we didn't need to create a model class but in the next practice we will have a model and we will demonstrate the full MVC pattern and lastly the model is responsible for retrieving the data from whatever data sources that powers the app whether it be databases or feeds and it feeds information to the controller now all the xcode projects that we've created so far are single view applications and by default xcode creates a zip file for us which is the view and a view controller which is the controller to manage that view but it doesn't create any sort of model class for us because it doesn't know what we're going to need it doesn't know what the data is going to be so it doesn't generate any sort of model class now let's talk about the communication flow between these three distinct responsibilities now this diagram illustrates The View never directly sends or receives information to or from the model so the view never talks to the model and vice versa the controller serves as the middleman between the view and the model and the model never communicates with the view so those are the three rules that we follow now why do we do this why do we have to implement our apps in a MVC design p pattern style and the idea is that we're decoupling the different components or responsibilities as much as possible and what this promotes is that it lets us easily swap components in and out as needed because there's less intertwining relationships and dependencies between all these components and the second thing is it's easier to read and understand and thus solve any bugs that may crop up right now I know that the MVC design pattern may seem very abstract to you but in the next lesson when we're going to build our next demo we're going to fully implement this design pattern and you'll hopefully begin to understand it a little better and if you'd like to read more about MVC for iOS I've included a link below in the description and you can read Apple's reference on the model view controller pattern the next thing I want to bring up if we go back to the code is if you remember from the last demo when we added the UI elements on The View we also opened up assistant editor and on the right hand side we had the header file for for the view controller and then following that we control click drag to create these properties in the header file of the view controller uh one property for each element now we talked about properties in the recap lesson for the hello world demo and we said that properties hold references to to objects and these properties have a special keyword here called IB outlet and I want to just to mention quickly what they are now an IB Outlet simply denotes that the property can be exposed to interface Builder and connect with UI elements created from interface Builder the way in which we draged the UI element to the view controller header file it's one of the ways that we can connect the UI element with a property but we could very well have just gone to the header file of the view controller you could have manually typed these three things out and then go back to the interface Builder and then you could have done something like this you could have right clicked the UI element let's say the label right here and you can see from this menu that the label is already hooked up to the hello label IB Outlet property that we created so let me go back to assistant editor view just so you can see so remember we control click dragged this element over here and we created this hello label and as a result if you rightclick this you can see in the menu that the referencing outlet for this element is this hello label and files owner is basically referring to the view controller that's managing this view so let me kill this connection by clicking this X and now this UI element is no longer hooked up to this property now to manually hook it up I could rightclick the element and then right now it says new referencing Outlet so I'm going to bring my mouse over to the circle and then click and drag I don't need to hold control this time and I'm just dragging this blue all the way here to files owner which is referring to the view controller so I'm going to let go and I'm going to be able to select from any Outlets that I've manually typed out and created here so I'm going to choose hello label and just like that see I've hooked it up again we could do the same thing for this as well and and the button as well now now if we look at uh viewcontroller.m you remember from the demo we control clicked the button and we dragged it over to the m file to create this button Handler method change text click and you'll notice that it says IB action right here I just wanted to talk about that so IB action is similar to IB Outlet basically what it's saying is that this method should be visible from interface Builder so that when you're in interface Builder and looking for a method to hook up for the button click event that you should be able to see it and hook it up from there and let me show you how to do that you know we could have manually typed out this method instead of using the click and drag method so we could have manually typed this out and then we could have gone to interface Builder right click and you'll see all of these different events and the button click event is actually touchup inside there are all these other ones like touch up outside that is an event if you touch the button and then let's say you drag your finger out of the button and you let go and that's touchup outside but a normal button tap would have your finger still inside when you release your finger finger so that's why we use touchup inside and if you notice here it says this event touchup inside is connected to files owner change text click so that's referring to this method right here of the view controller now I'm going to kill that connection so now the touchup inside event is no longer hooked up to the change text click method so if I wanted to hook up this button to this method again I could just right click go up to particular event I wanted to hook up we'll just touch up inside I'm going to reach to this circle right here grab it and drag this blue line to files owner and it's going to show me whichever IB actions I've declared in there so I can do that and once again the touchup inside method which is your basic button tab is hooked up to the change text method let me show you guys the Syntax for a property so that if you're not using interface Builder that you could still use properties and and know how to declare them so I'm going to go into the header file of the view controller I'm just going to get out of assistant editor view so we don't get distracted and normally when you declare a property it's going to follow follow something like this it's going to be like property and then following in these brackets you'll have a bunch of attributes and then following that you'll have a class type so what what sort of class or what sort of VAR or sorry what sort of data type is this property going to reference and then finally a property name now for what's in attributes I'm going to include a link in the description below for you to read what strong and nonatomic is if you're going to be referencing objects you're going to be using strong and if you're not doing multithreaded programming which probably won't be for Building these basic types of apps you're going to you're going to just want to use nonatomic and if you're not hooking the property up to interface Builder UI elements you wouldn't need the IB outlet and the class type is going to be any sort of object whether it's a UI element type object or whether it's your own class that you create that's what you would put here and then for property name you might have noticed that I keep the first letter lowercase um this is a standard convention that a lot of people use so you can follow this where the first letter and this goes for methods as well the first letter is lowercase and each other word starts with an uppercase now another thing I want to point out is that this star here represents a pointer it's saying that this variable is going to point to a address location of an object remember how I told you when you create objects they live in memory space well when you have a star there it's basically saying that it's pointing to a specific address in memory for that object and that's how the property references the object okay so the way you created this change text method was to basically click and drag from the button and drag it over to the implementation file and let go and you know it generated this for you but I wanted to explain a little more about how you would type out your own methods when you declare methods first consider if it only needs to be exposed to that object if so we're going to be declaring it as a private method and this means that it can only be accessed by that instance using the self keyword if that method preforms duties that may need to be triggered by other objects or instances then we need to make it a public method so there's private and there's public and there's another one called the class method or static method which we'll get to in the future but for now think about private and public and whether that method needs to be exposed to other instances or other objects or whether it only needs to be used within this implementation file so if you're not sure you'll want to leave it as private and then later on when you discover that you need to expose it externally you could always make it a public method later so how you declare a private method so here's a sample method and this method can only be accessed by this object now for example if I created that sample method down there I would call it like so so self refers to this instance or this object and Sample method is is the name of the method and that's how I'd call it now if I wanted to make it a public method all I would need to do is add the method signature which is this part right here all I need to do is add that method signature to the header file because if you remember the header file is kind of like a table of contents and if it's not in the table of contents then other classes and other objects won't be able to find it so they wouldn't even know about it now if I added that method signature here like this now other classes would know that any view controller object would have a method called sample method and I don't implement the method here because this is the header file I merely declare it here and the implementation file I actually can Implement and if you haven't noticed already this is a comment whatever I type here with these leading slashes they won't get compiled and they're not code it's just for reference and for you to kind of remind yourself what these methods do and you know what this variable is for it's like leaving yourself little reminders and also leaving other people reminders because if you're working in a team environment at work let's say other people will rely on this sort of documentation to understand what's happening it's very good practice to document and comment as you're coding and trust me even if you totally understand what you're writing now if you come back to it a month later you'll have no idea you have to read everything and understand everything again to kind of get back into that mindset that you were at that point in time so leaving comments is a good thing okay so we talked about differences between a private and a public method now let's talk about um the Syntax for the method so if I go back to looking at the sample method right here you see this Dash here so this Dash represents that it's an instance method so this means that every view controller object will have a sample method and these are the types of methods that we've been talking about and looking at and using so far there's another type called class or static method which I alluded to a couple minutes ago that we'll get to in the future and that's the noted by a plus but you know for now for our purposes we're going to use instance methods now the next part is the return type in these brackets void means that this method doesn't return anything because there are some methods we're going to want to pass some input in the method and we're going to want to do some number crunching or or do some you know manipulation of that thing that gets passed in and then we're going to want to return the result and that's when we would put the data type or the class type of of The Returned object or The Returned data and then finally sample method is the name of the method now let's look at a method where I would have to pass in some data and then return some data so I'm going to make it an instance method I'm going to return let's say I'm going to return a number uh let's call this method add five so this method is going to take whatever number you pass in it's going to add five to it and it's going to return the result so in order to uh declare a parameter so that it's expecting some input this is the syntax so this method expects one parameter and it's going to be an integer type parameter and we're going to be able to reference what's passed in with this is the name so what I would do here is say return and that's the keyword to specify the data that will get returned so I'm going to return what is passed in+ 5 and if we were to pass back let's say a a um an object you would pass in okay let's start a new method here so let's say that I'm going to create a method that will take in a string and return the string all in uppercase letters take a look at this there's a star here and this represents that we're passing back an object but we're really what we're really passing back is a pointer to that object a pointer that references the address in memory where that object is located and that's how the variables will find the objects in memory okay I'm going to name it uppercase string so now I'm going to declare the parameter so it's going to expect an NS string pointer I'll call it input again and then this time I'm going to return now let me break it down into two steps first I'm going to declare a string variable and say temp variable and what I'm going to do is take the string input and call a method on this string object called uppercase string and that automatically converts the string to all uppercase and returns it so now temp is going to hold the uppercase string and I'm going to say return temp so that's as far as I want to go for methods I'm going to show you guys how to declare methods which accept multiple parameters and do more complex things but we're going to practice it rather than just talk about it and I think it'll be a little more concrete that way so in the next lesson when we're actually going to build another demo we are going to look at how we can implement the MVC so model view controller pattern with a model we're going to write out our own properties we're going to write out our own methods and so it'll solidify this stuff a little more okay thanks for following along and remember if you didn't understand all of that feel free to watch it again you can always ask me questions you can always ask me questions below or look at also read the notes in the description there's a link there for the the text version of this video and remember if you found this helpful to your learning please share it with your colleagues or your friends who also want to learn iPhone development and it really helped me get my name out there so thank you so much for watching and I look forward to seeing you guys in the next video