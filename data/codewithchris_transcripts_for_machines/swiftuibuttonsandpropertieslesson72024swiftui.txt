all right we're back in the war card game and now we're going to add functionality to the deal button so that the user can tap on it now if you're brand new to this series click over here to start from lesson one all right let's Dive In all right so here we are in xcode looking at our war card game just to give you a reminder let's just run it quickly and see what we can do with it alright so here it is it launches in the simulator we can see the cards this button is not interactive because it is actually just an image right now and these are the score labels so going into the code that represents that user interface if we scroll down we're going to see our image element that represents that button right there what we want to do is change that into an actual button not just an image right so what I'm going to do is create some space here so we can work and you can clearly see what we're doing I'm going to get rid of that image element and that's going to disappear as soon as we make this preview live there we go what we're going to do is First add a button from the library so if you remember that is this plus icon up here if you click that and you go under this first tab which is a library of all the views and buttons should be at the Top If it's not you can always type in button so we're going to drag and drop that right there now this is a basic text button and I know it's a little bit hard to see there in the UI but we're going to start with just a simple text button to demonstrate how it works and then we are going to customize that with the image the deal image let's change this string remember it's a string data type it's a piece of text we are going to customize that into deal and now notice that there are a pair of curly brackets here and in between those brackets you put the code that you want to be executed when the user Taps on that button so why don't we go ahead and just put up a simple print statement and we are going to just print out deal cards now when we tap on the button when it prints this out it will print it out into the console area that is down here in xcode so let me just drag this window up here it's called all sorts of information now if you don't see this part right here here's the button that you would click on in the lower right hand corner you would see this little button here you click it to bring up this debug area and if you don't see two different sides to it there are two buttons again in the lower right that you can turn on and off so make sure that this side with all the text that's the right hand side that is toggled on because that's where this is going to print out too so why don't we again run this in the simulator actually before we do that let me just add a simple modifier so that this text button is more visible because right now this blue text is really hard to see against the green background now do you remember how to add a modifier so you could very simply hit Dot and then foreground color and you can type in dot White to change that to white or if you didn't want to do that you could always go through the library by hitting this plus icon choosing the modifiers and selecting foreground color clicking and dragging right there changing that default blue text to White all right let's go ahead and rerun this in the simulator all right so here's the simulator I'm going to tap on this button and it's going to run this code right here print deal cards as you can see it is starting each time I press it it executes the code within those curly brackets so great our button works now the next thing I want to do is to incorporate what you learned about functions so instead of Simply writing the code here inside of these two curly brackets why don't we call a function from here so this function is going to perform the uh all the code related to dealing cards so why don't we find a space to put this function so this part you have to be kind of careful like about where to put this function because I haven't really explained yet what these structs are and you know where you would put your functions so I'm going to tell you where to do that now but it's very easy to make a mistake so here's what I want you to do so put your cursor let's say right under body right there and you're going to go to editor and you're going to go to code folding and you're going to hit fold you can also take note of these shortcut keys if you'd like so we're just going to choose fold and that's going to fold it all up neatly if you want to unfold it again you just go to you can either double click this actually you can double click that to open up that's probably the easiest way so again put your cursor under body if you don't have a blank space here and you know you can do it there all you need to do is actually make sure that your cursor is after that opening curly bracket of the body and we're going to go to editor we're going to go to code folding and hit fold and the reason I want you to do that is because we are going to create a new line right before this closing bracket but after the closing bracket of the body right there and we are going to declare a new function now I'm going to explain to you in future lessons why why we are putting this where it is and um you know what is a struct uh how do you know where to put your functions and things like that but for now I just want you to follow what I'm doing so type in func to declare a new function we're going to call this function deal if you remember the Syntax for it pair of parentheses which in between there you would put in any input parameters right that you this function expects for the purpose of this code we don't need any input parameters so it's just going to be an empty pair of parentheses like that now let's open up a pair of curly brackets like that so that we can actually put the code in there now in here I'm going to put print deal up to declare a string we got to use the quotation marks right okay so this function all it does is print deal cards just like what the button did before and it'll execute this anytime you call deal so now let's open up the body again scroll down to our button and instead of calling print right here we are going to call our new function and look at that autocomplete recognizes it and all we need to do is that now let's run it into similar and just test that it still works because we don't want to make a mistake at this point so tap on that button as you can see it still works right what's happening is that when you're tapping on the button it's executing this function if you scroll a lower this is what that function does all right so now in the future when we want to add functionality to the button right here all we need to do is add the code in here so that's a basic text button but what if we wanted to use an image for the button instead let's take a look at how we do that let's scroll back up to our button element as you can see here the button that you add through the library in this way it only allows you to specify a piece of text so this is a text button if you want to create a button which can be visually represented by anything you'd like um what you would have to do is type out button type out the first opening parentheses and you can see a couple of different options for buttons that you can create and what we are looking for is this one right here action and label so action is what happens when you tap on it and label allows you to put any sort of UI code in there any sort of UI visual elements so let's go ahead and double click this and you're going to see this these input parameters look a little bit different from this one right this one only had the one text parameter that you had to supply and that was for the text for the button this one has two different ones has action and it has labels so you can double click on any of these so go ahead double click on action this this part right here and what's going to happen is it's going to change in this this sort of format right here this first set of opening bracket this is the action for your button so let's stay organized here so I'm going to actually get rid of this text button first okay and in here uh under label this is actually where we're going to put the visual representation right label this set of curly brackets let's put in an image element and our image name was button right if we go back to assets that's what this is right here let's go back to content View and let's refresh this preview right here oh okay so we can't yet view the preview because we haven't filled in the code part yet so you can actually just delete that code part and that will be valid okay so as you can see here we've got now a visual image of our button and you see this is the visual representation of the button now in here this is supposed to be the action uh good thing that we created a function right we can simply call that deal function like that let's now run the app in the simulator again and take a look at what happens when we tap on our new button so you can see it is an image element but it is actually a button and when we tap on it it runs the deal function which prints out this statement in the console area all right now that we have the button looking the way we want let's add some more functionality to it so we want our deal button to do more than just print out deal cards we want it to actually deal cards right so how is tapping on this deal button and running this deal function right what sort of code can we put in here to actually change the images for this image element and this image element right and then how are we going to update the score labels here as well well let's first take a look at what represents these things and see what we can work with we scroll up we can see that we have an image element that represents card two and this is referencing the image asset in our asset library card two in fact we have card two all the way up to 14. so you'll notice that when I change this in here and I update the preview it's actually going to change the card right continue to 13 right change this to 14. and if I accidentally change it to a name that doesn't exist then it actually doesn't show anything right so what we need to do is when the user Taps on the deal button we need to run some code statements that would change what is being passed into this image element and this image element as well well if you think back at the Swift code that you have learned so far this is variables constants functions there is something that can help us here right what I'm referring to are variables so why don't we go at the top here and declare some variables to represent the cards for the player and the cards for the computer and that way when we hit the deal button we can change the value in those variables let me show you what I mean so put your cursor in front of VAR and just create a couple of lines right there like that and we are going to declare a brand new variable to store these two values right here instead of this is called hard coding a string meaning that when we just put a text a piece of text here there is nothing that can refer to that piece of text to change it so this is what's called a hardcoded value uh we are now going to change that so that it can be dynamic so we declare a new variable using VAR right and I'm going to name this variable player card and I'm going to assign to It Card let's say seven and then I'm going to declare another variable let's call this one CPU card and I am going to assign to it card 13. that string right there and now you can probably see where this is going in the image element instead of passing this hardcoded string into here I can pass in the variable and because the variable is referencing this string card 7 you can see that that is what this image element displays right and I'm going to do the same thing with this CPU card by putting in that variable referencing that variable and then passing it to the image element so now you can see where we're going when I tap on the deal button and it runs the deal function inside the deal function I can change the value that player card is pointing to I can change CPU card to another string value as well and that is going to cause the card images to change now I don't want you to do that just yet because there are a couple of details that we need to go through first but I'm just running through at a high level what our thought process is okay so let's do the same thing for the scores down here because if you remember when we built this user interface the scores we also you did used some hardcoded values so down here under player we hard coded zero and under CPU we hardcoded another zero let's go up here and declare two more variables to store those scores however this time so I'm going to use an integer because that's going to make it really easy for us to add right we can add one add to we can perform these math operations on an integer let's do the same thing to represent the other score right there and let's go down and change these text elements to refer to these variables that we just created okay so here uh under player instead of passing in this hardcoded zero string we are going to put player score now you're going to see an error and I'll tell you why so let's change this window a little bit it says no exact matches in call to initializer so that that doesn't really explain very much to be honest but um I'll explain to you what the issue is so this text element expects a text piece of data as input as what to display you know for this label it displays text but what we are passing into it is an integer right it's a number so it doesn't know how to display that because it's only programmed it's only Built to display pieces of string data so what we can do is we can actually convert this number this integer data into string data and then um or rather the string representation of this number right so what this is how we would do that uh we would here let me get rid of this for uh for now we are going to create a new piece of string data uh type in capital S string and then open a pair of parentheses and then in the center in between it you are going to put a player score so let's break this down so first of all notice that the error goes away we're good what we're doing is we're taking this integer and we are turning it into the string representation of that integer so if it's you know the number 10 it's going to be turned into the string 10 and then that is now passed into the text element so everyone's happy let's do the same thing with this one so we're going to type in string pair of parentheses in in between that we're going to put CPU score and this is called casting I know it's kind of a weird name but essentially we are converting the int data to string data and we're changing the data types it's called casting we're casting into a string that's what's happening all right so now we are all set up to modify these variables right player card CPU card player score CB score we're all set to modify these variables whenever the user Taps on the deal button right here inside this deal function here's something cool if you right click on any function you can jump to the definition that's basically saying that I want to see what is inside this function so jump it's just going to zoom you straight down it could be an in another file even it'll jump you directly there to see what is this deal function right and all we have to do is modify the code here to change those variables that we just created okay this is the home stretch one more lesson to add the app logic and then we're done now if you've been learning a lot from this series don't forget to hit thumbs up to support this video and don't forget to subscribe so you don't miss that last lesson I'll see you in that video