hello and welcome it's time to put the finishing touches on our app we're going to incorporate sound effects into our app we're going to randomize the cards so that the pair's don't appear right beside each other in our grid and furthermore we're going to add some logic so that each pair of cards can only appear once in our set of 16 cards all right so let's get going so the first thing I want you to do is download the zip file below the video which contains all of the sound files that we're going to use in the project and once you unzip it you're going to get this folder called sounds so open it up and actually before we drag it into our project why don't we go here in the file navigator and go create a new group called sounds and that's where we're going to place all of our sounds so doubleclick the sounds folder on your desktop or wherever you unzipped all of the WAV files and I'm just going to select all of them and drag them into my group right there now it's going to pop up this dialog menu and I want you to make sure that copy items if needed is enabled and this is going to make a copy of the sound files inside your project folder and not just have it refer to wherever those files are on your computer and so this way it keeps all of the files nice and tidy with the project and add two targets match app should also be enabled if this is not enabled your sounds won't be included in your app bundle which is that little neat package that represents your app and all of its resources and that bundle gets installed onto the device so you want to make sure that these sounds get included inside that app bundle like that now click finish and here you can see all of the sounds when you highlight one of them you should be able to play and hear it so this is when they get the match wrong and this is initially when the cards get laid out so those are my sounds there the next thing you want to do is click on this project node we're going to have to add an extra framework in order to get the classes that we can use for audio the reason it's in a separate framework is because not all apps need this audio capability and so that code isn't automatically bundled by default so if we need that stuff we can just simply add it under this general tab here if you scroll down to linked frameworks and libraries you can click this little plus icon and then I want you to search for AV that should filter the list enough that you can find AV foundation not framework so go ahead highlight and add that and there you go you should see that and next what we're going to do is we're going to create a new class and this is going to be a sound manager class this is where we're going to keep all of our audio code the reason why I'm not including it in the view controller and I actually could do that but to be honest I don't want it to get that messy in the view controller it's better to abstract these things out and having a separate sound manager class that contains all of the audio code allows us to use that class for various view controllers if this were a bigger project and it also gives us one place to look at to troubleshoot any audio related issues so we're going to go ahead and create a new class by choosing new file and it's going to be a swift file not a cocoa touch class because I don't need to subclass anything so I'm just going to choose Swift file click Next and I'm going to save Sound Manager click create and by default it's imported foundation we also want to import a V Foundation which is the framework we just added because by importing this framework it's going to allow us to use the classes inside that framework so let's declare a new class called sound manager just like that and the class we are using is called the let me just create this property is called the a/v audio player let's create it as an optional because we are going to create the actual object later on now this sound manager class is going to have a function or a method rather called play sound and we're going to pass in the sound which we want the sound manager to play you can see here that we do have four different sounds but instead of passing in let's say the name of the sound file I'm gonna do something cool and something that you've seen before actually so let me just go into the view controller and show you an example of what we're going to do so for example up here when we did the run loop statement in the previous lesson for mode you can see here that we just put in dot and then we chose common modes well what's happening right there let me let me just actually show you again so run loop without main dot add oops different add we wanted this one so in the first parameter we specify a timer but in the second parameter that's where I want to draw your attention to and we have to specify something called a run loop mode option you can see up here we specified common modes but what this actually is is an enumeration you can think of it as a set of predefined values and it's very useful to allow the user to pick from one of a set of options in this case if I show you if I hit dot like this or maybe the autocomplete it's not going to cooperate with us but if I type in run loop mode dot you can see these guys here are the values that I can choose and for my run the mode choice and that is what we want to do with our sound manager as well because we only have four different options so I want the user to pick from one of these four without having to really know about the file names and stuff like that so if we go back to the sound manager let me show you how to create an enumeration we're going to create it up here you use the keyword enum and you give your enumeration a name in the case that I just showed you it was wrong loop mode we are going to call it sound effect so you open up a set of curly brackets and inside you put all of the cases that it can be so for example we have a we have the flip sound effect and actually we want to use lowercase here just to follow the naming convention that Apple has proposed so we have shuffle as well we have it's a match and we have no match which is that ding sound we have ding wrong ding correct card flip and shuffle okay so when someone calls play sound they're going to have to specify a sound effect and we're going to do that ok so inside play sound we are going to create a variable called a sound file name is equal to an empty string and now depending on you know which case or which enumeration value they put in we can specify the appropriate sound file name to pass in to our audio player so we can use a switch statement and you can press ENTER for it to kind of come autocomplete for you we're going to switch on the effect so you can actually put that as the value and for the case we are going to say you know if this is a case of flip then the sound file name oops sound file name is going to be card flip we don't have to specify a wave let me just add some line breaks here so it's a little easier to read we have case dot shuffle in this case our file name is going to be shuffle we have case whoops case is match and that case sound file is ding correct and we have case is no match in this case the sound file name is ding wrong now if it's default if it's none of those options then we'll just leave salt sound file name as an empty string now it shouldn't be that way because I guess I missed these colons here because we are specifying an enumeration it should be one of these 4 values here ok so in terms of indentation I kind of like to indent it like this but I'm curious to see what the default indentation is actually so what we can do is actually go into editor if we go into structure we can reinvent everything let's highlight everything first structure we indent everything and that's going to properly indent everything for us so I guess by default it likes to line up the case with the switch so we can leave it like that default will never be executed it that's exactly what I said no I wonder if they'll let me remove it because I think with switch statements you actually do need a default case maybe not if you're switching on an enumeration because that's only from a set of known values like I said all right that's great so let's add some comments around here so determine which sound effect we want to play and choose the and set the appropriate file name all right now we get into actually specifying the URL of the sound file remember when I told you that when you added these sound files to make sure that under membership that it was enabled for the match up well what it does is when you compile your app and it gets put on an actual device those sound files get included in the app bundle now what we need to do in order to play that sound is we need to find the path to that sound file in that app bundle we need to specify that so if we go back to the sound manager there is a way to determine that and you can actually access the bundle and we want the main bundle and we want the path for resource of type this is the one you want path for resource of type returns the full path name for the resource identified by the specified name and file extension okay so we're going to choose that one the resource is the sound file name and the type is going to be WAV make sure that this matches exactly these file extensions here if it's mv3 you would put mp3 so this returns the path let's put it into a constant let's call this bundle path and this returns an optional string it could be nil because if it can't find the sound file in the bundle it's going to return nil and if it returns nil we're kind of dead in the water we can't really do anything about that there must be something wrong you might have specified a typo or something like that so we're just gonna put a guard statement here guard guard bundle path is not equal to nil else if it is no then we have no choice to return and we can actually just print out couldn't find sound file sound file name in the bundle so if this is the case for you I would make sure that these wav files are included in this target and as well that you're specifying these file names that match directly with the file names here and that the extension also matches okay so here you get the path to this sound file inside the bundle next we have to create a he URL object from this string and the reason we have to do that is because the a/v audio player that actually plays the sound it needs a URL object and I know this because I've used it before and you are about to find out I'm just saving you that trouble here so let sound URL equals a URL object and see there's actually a class called URL and there are a whole bunch of different initialization methods that we can use so what we want is this one you are elf file URL with path and then we would pass in the bundled half like that and I'm going to actually force unwrap that optional because we had to have this guard statement so if it comes here I do know that a bundle path isn't nil okay after all of those steps we can finally create our audio player create audio player object so remember up here we have a property called audio player for it so that's what I'm going to assign our object into let's create a new a V audio player and we are going to use this one we're gonna initialize it to contents of and you can see here that we specify a URL object to pass in and we do have that here sound the URL that's what we're gonna pass in but notice this keyword here throws this keyword basically means that when you try to create this AV audio player if it can't find that sound file for any reason at that URL it's going to throw an error so you actually have to handle that I'm using this special do tries or do catch statement which I'm going to show you in just a second so just pay attention to any method calls or initialization methods that you use that have this keyword throws in it and actually even if you forget it's okay because Xcode is going to warn you if you forget to handle this error so we have to be careful of that so we're gonna pass in the sound URL and let's just yeah I don't even have to build up Xcode has seen the error call can throw but it's not marked with try and the error is not handled okay so this first part marked with try is you have to put this keyword called try in front of that method or initialization method which throws an error and then what you have to do is you have to wrap that statement or a group of statements inside a do catch block it's almost like an if statement let's indent this and so you can see the Xcode error has gone let me just explain what's happening here so like I said this statement throws an error if it can't create the AV audio player object and since it throws an error you have to specify this keyword in front of it called try so if you read it like playing English you're going to try to create an AV audio player object if it fails it's going to come down into here this catch block of code here so you can what will usually happen is couldn't create audio player object maybe logged the error or something like that so print it couldn't create the audio player object for sound file and you can specify that sound file a sound file name like that just so you can troubleshoot what's wrong with that particular sound file and down here you can finally if all else is going smoothly you can finally call the play function on the audio player to play the sound okay and that is it for our sound manager play the sound here okay so let's review what we've done here so we have an audio player property we have a sound effect enumeration which lets us specify one of four values because we only have four sounds this place sound function is going to accept and sound effect enumeration value it's going to determine the file name of the sound to use based on what value is passed in and then we go about getting a path to that sound file and then creating the audio player and finally playing the sound so now let's move back to the view controller and use our sound manager we're going to scroll up here in to the property section let's create a sound manager we're gonna instantiate this property to a new sound manager object and then we're going to play the shuffle sound at the start and we're gonna want to do that in the did view did appear we're gonna override this the this method gets called when the view is presented to the user so from here we can call sound manager dot play sound and you can go ahead and hit dot and choose shuffle so now let's run our app and just listen to see if that sound gets played okay so you can see that that sound is played there there are a couple of different places that we want to also add our sound so for example when the collection view did select item when the card flips alright we can also play the sound here play sound dot flip so you can hear that now let's integrate the sounds for the match or not match so here when it's a match play sound a sound manager dot play sound match and if it's not a match we also want to play sound ok so let's run the project again all right so all of our sounds are playing that's great there is one more thing I want to show you and that is that there isn't really a reason for us to have to create a sound manager object because all we're doing is calling that place sound function and the object never needs to retain any values across different calls so there really isn't a point for us to have to create a sound manager object instead we can do something like this where you can see this timer is a class and this scheduled timer is actually a type method of that class so we don't have to create a timer object in order to call this method here so let me show you what we can do so go ahead and erase this statement like that you're gonna get a bunch of errors but ignore them for now in sound manager what we want to do is simply add the keyword static in front of this function play sound and we're going to have to add static in front of this property as well because this property is used inside play sound which is also a static method so you're going to have to make sure that the variables used inside or properties use inside are also static what this does is it allows us back in view controller let's scroll down to the view did appear it allows us to this should actually be an error it allows us to call play sound like this so we can call the class sound manager dot play sound like that see so we don't actually have to create a sound manager object and call that objects play sound method because play sound this is actually a type method of the sound manager class now or it's a class method in other programming languages it might be known as a class a method instead of a type method but in Swift it's called a type method so let's go down to the other places and check for matches we're gonna call it all in the class itself now all on the class whereas the last place there's one more error there it is flip okay now let's run the project and make sure that all of our sounds are still playing so there's actually two more things to do before we can end off our match app and that is in the card model we have to randomize the array of cards and also to make it so that we only have unique pairs of cards so let's actually tackle this guy first because it's easier to check before we randomized the cards and the way we're going to accomplish this is we're just going to keep an array of all of the generated numbers that we have accepted or that we've already generated and before we you know create new cards we're just going to double check that the random number generated up here isn't one that we have already generated so let me show you how that works so up here in this function of get cards we're going to declare an array to store numbers we've already generated I'm gonna call this the generated numbers array and it is just going to be an integer array it's gonna be empty initially right and right here inside this for loop we're doing it eight times and we are generating a random number each time now before we go ahead and do all of this stuff which is creating the two cards setting the image names and then adding them to the generated cards array before we do any of that we need to check that this random number isn't one that we already have so the way we do that is we're just going to say if generated numbers array contains and this returns a boolean whether or not the array contains the element in question so we're going to put in random number if this is equal to false that's when we want to do all of this stuff right so let's cut all of this stuff and put it into here okay so we're only gonna do this code if the random number if the random number isn't one that we already have inside the generated numbers all right can I convert value of okay so we're going to cast this as an int okay so sorry you got to do that okay so if it is a number we don't have yet then we want to log the number print the random number but as well store the number into the generated numbers array so that next time we check you know this number is already used up so we can append new element we can append the random number and this is gonna we're gonna have to cast that as an int again all right so that's basically it there's one more thing we have to do actually ensure that the random number isn't one we already have okay so we need to change this loop because this only runs eight times and in eight iterations of this loop we can't guarantee that we will generate eight unique random numbers so instead we need to use a while loop and run for as many times as we need until generated numbers array reaches the count of eight so we are going to say while generated numbers array dot count is less than less than or equal to no less than eight because once it reaches eight we don't want to run it again so this should make sure that all of the cards are random so in the view controller let us give ourselves a little more time let's say thirty seconds let's run the app and well actually we don't even need to do that because we are printing the numbers so you can see here for thirteen eight two six five one three let's run that again hmm didn't print anything that time what happened there okay nine seven one eight eleven twelve six four I'm pretty satisfied that these numbers are unique eleven ten to nine one thirteen six seven okay now it's time to mix them up okay let's mix them up so in the card model in here for randomizing the race so the cards we have to randomize are inside this generated cards array it's an array of card objects so you might be tempted to do something like this where let's say you want it to swap at the first two cards zero and one so you might be tempted to do something like so this isn't actually going to work like you think it will because what you're doing here in the first line is you are making index 0 equal to index 1 so after this line executes both 0 & 1 are equal in terms of the card that they point to so this line does nothing because 0 & 1 point to the same card anyways what you want to do before executing this line where you're essentially going to lose the card that slot 0 was pointing to by assigning it this you want to preserve that card first so you're gonna say let temporary storage let's hold on to the card at index zero all right we're gonna store that card at zero into temporary storage and then we are going to overwrite index zero with whatever card index one is and then lastly in order to complete the swap we assign into spot one the card that we stored we put into temporary storage right it was originally the card at zero so now you have the completed swap you have the card at slot one in slot zero and you have the card at slot zero now in slot 1 so that is swapping two cards now we have to do it randomly right so instead of swapping 0 & 1 why don't we swap 0 and a random number so we're gonna do let random number equal to arc for random uniform and we're gonna say the upper bound is generated cards array dot count and this is actually going to throw an error because the expected argument type is let's see if I can expand it here is you into 32 and actually we can just click fix and it's going to convert that count to a un 32 which is what it needs and then we are going to pass in random number instead of 1 the funny thing is we probably have to cast this as an INT now see you cannot use a subscript with an index of UN 32 okay so what we can do is just cast the result of this random number to an integer so at this point these three lines of code is swapping the card at spot zero with a random spot so that's just one swap in order to randomize it some more we are going to go through all the indexes in the array starting from zero and we're going to choose a random number and perform the swap so that's how this is going to work so we're going to say for let's say I in 02 generated cards array dot count oops I don't want to cut that next and then we are going to indent all of this and instead of zero we're gonna put in I so at the end of the day you should have code that looks like this all right this is the swapping code swap the two cards find a random index to swap with and this should return our randomized array so let's test if this works no index out of range so I probably have to do minus one all right so let's see if these are randomized these two look the same but once a closed box and once an open box so this looks pretty randomized to me and I'm gonna leave it up to you in terms of how long you should let the user try to match all the cards and with that our match app is done congratulations you've completed the match app you've learned quite a bit in this module including how to use the MVC design pattern how to use custom classes how to use collection views delegates and protocols you learned how to use the Xcode debugging tools to troubleshoot your project you also learn best practices in terms of organizing your project and naming all of your variables classes and methods you also learned how to show alerts and how to use timers and best of all you learned all of these things while building a tangible app you're making amazing progress and there's a lot more exciting things to learn so let's move forward I'll see you in the next module