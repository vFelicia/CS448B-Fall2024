hey coders it's Chris here welcome to part two of parse user accounts and management in the last lesson we went through the iOS developers guide and we talked through the users section I showed you guys how to use the PF user class and that it has a username password email field we went through signing up logging in and a whole bunch of other stuff if you haven't checked it out I recommend that you click on the upper right corner right now and it's going to open a brand new window and go through that video first because in this video we're going to go straight into implementing some of those things that we talked about in that lesson so what I'm going to do in xcode is create sort of a signup flow it's going to have a field for username password and it's going to have a button to sign up the user and in the parse demo that we created when we started this parse series you're going to be able to see a users table with all of the signups so let's open up our xcode project and try this out so let's open up the XC workspace and in here uh what we worked on here last was looks like local data store that's right okay so I'm going to get rid of this right now let's get rid of this code here and this is basically what you would start with if you started a brand new project it's an Mt view controller. Swift and in the storyboard we also don't have anything here see I can double click this empty space zoom out to show you guys there's nothing here and we're going to be adding some stuff here so actually let me get rid of some of these tabs so okay first of all we're going to add a text field this is going to be for the username and I'm going to use this property here called placeholder text and I'm just going to put username in there instead of putting a label on the outside and drag another one there uh make this placeholder text password but we're also going to want to enable secure text entry down here and that's going to obscure the text as they type it so the password won't be visible let's also add a button right there and let's call this uh sign up and what I'm going to do is I'm going to hold down command click all three because I'm going to click this stack view button it's going to put them all into a neat little stack view like this you can see all of the elements are now enclosed in this guy and this stack view is just an easy way to lay them out on top of each other see because I can put some spacing I can indicate let's say 30 and it's going to space them all 30 apart and all I have to do is position this stack view on my view so let's horizontally uh and vertically Center that in our view let's update frames so we can see it there so you know I can play with this some more but the main point is that I want to show you guys this in action so I'm not going to uh do too much to the UI I'm going to go into the interface the assistant editor Sorry by clicking this button up here and I'm going to add some outlets for these guys so let's hold down control and drag this over here and make sure it says outlet and I'm going to make this the username text field like that do the same thing for the password hold down control do that password text field and then I'm going to create an action for the button so when they tap that button I want to execute some code I'm going to hold down control and drag this out down here but above that last curly brace because that last curly brace is the end of the class and you can't put methods outside of the class so let go instead of Outlet change this to action because we want to create an action method and for the type I'm just going to choose UI button down there and let's call this sign up tapped so in here we're going to execute some code uh to do get the username and password and create a user okay so let's try some stuff here let's print a statement here called tapped and let's set a breakpoint so that when we run the app and we tap the button it's going to pause it here so I'm going to press command R to run the app right now it's going to launch it pretty quickly so we see our little basic UI here and and let's click sign up first so it's going to hit that breakpoint basically in the console what I want to check is PF user. current Uh current user current user I think it all lowercase check this method to see what's in there okay so apparently maybe I got the method wrong so let's go back to the documentation if you remember from yesterday current user uh yes it's capital u so when you want to check for the current user let's switch this to Swift Code uh you can use the class method current user on the PF user class and you'll be able to check if it's nil or not so if it's not nil that means you do have a user object and the guy's logged in but if it is nil then that means that you should probably show the sign up or login screen because that person isn't logged in now the thing is we have in our parse app if I go to the app settings we have Anonymous users enabled so current users Uh current user is always going to have a user object it's never not going to be nil so let's try that again here P PF user. currentuser with a capital u this time okay so it is nil I'm a little bit surprised about that because I thought in the documentation under Anonymous users that it said it wouldn't be nil okay so maybe I misunderstood that a little bit but essentially if we checked current user and it was nil so we do get the nil that means that the user isn't logged in or they don't have an account so if you want to allow Anonymous users to your app what you would do here is create an anonymous user once you find out that the guy isn't logged in you could create an anonymous user like this using this code snippet here uh I think I read it wrong right here when you enable automatic Anonymous user creation at application startup the PF user current user will never be nil so I guess this is something that we have to enable right here like this in the application did finish launching with options this is in the app delegate. Swift and we would basically enable automatic user we would do that let's go back to standard view we would do that right here we would say something like PF user. enable automatic user and enables automatic creation of anonymous users so that's what we would do and if you did that then the PF current user will never be nil because an anonymous user will automatically be created and assigned to current user but as it is in our current application what I want to do here is create a new user uh so I'm going to say let user equals PF user create a brand new user object and I'm going to set the user usame is equal to username text field. text and this is an optional string so we can actually do some checking first uh but let me unwrap this so right here let's say uh I'm not going to actually do it but we can say check that username text field isn't empty to do check that password text field isn't empty and that's using a simple if statement you can check the text property see if it's either an empty string or if it's nil uh and if it is then you would just use the return keyword but before that you would probably display some um error message to let the user know that they have to fill that out okay and I would say user. password equals password text field. text I'm going to unwrap that and assume that we did the checking up here and assume that that's not nil and then we are going to call user. sign up in background with block like that so I'm going double tap this to expand the block of code uh there is a result true or false let's just call that result and let's call this an error and then inside here when it returns we can check if error is nil then uh we can also check and result equals true then user was successfully created and then you can transition them onto your homepage or you know the first screen where a signed in user would see else to do check error message and display the reason to the user Maybe using a label or something like that so I'm going to set a break point right here so when we actually sign up a user we're going to see I'm going to remove this breako and there's one more thing I'm going to show you how to do is with text Fields so when we tap on this text field the keyboard kind of slides up and if it doesn't slide up all you need to do is go up here for the simulator under Hardware um under keyboard you might have this checked on so if you do have a checked on just check it off off uh or you can just press command K and toggle the keyboard if you need to but uh if you disconnect the hardware keyboard like I just showed you um this will usually be fine but tapping outside of the text field doesn't dismiss the keyboard right and that's usually the behavior that we want so the way we do that is just override another method in the view controller called touch us began right here and when that happens we want to dis miss the keyboard so we would say uh username text field. resign first responder okay and if the user was editing the username text field and then tapped outside then this would get rid of the keyboard however if the user was editing the password text field we also have to handle that case so let's also resign first responder on that it what doesn't hurt just to call both uh so let's try that out so now I'm in here if I tap outside it shrinks the keyboard if I go into the password field and I tap outside it retracts the keyboard as well okay so let's actually try to sign up so I'm going to say Chris is nam there and for this I'm just going to use any random password actually probably should be something that I will remember so I'm just going to say 1 two 3 4 and I'm going click sign up don't use that as a real password by the way okay so so here it has called sign up in background with block and it's come into the block of code after it has sent that request so let's see if it goes into here right if error is nil I can actually see down here already that error is nil and the result is true so it's going to come into here and then let's just let this run then if we go back to our pars data store let's go back to core let's refresh it uh you can already see user here so before we only had contact now that we're working with users the user store gets created and you can see that it's in here that user that just signed up you see that the password is hidden and the email is undefined you can't actually edit passwords like this because it's secure and session has also been created role has been created if you had some complex rules for how users can access different things you can make use of the Roll CL class and the session class I haven't read too much about this but it looks like it tracks for a user uh what they're doing and what they did in a particular session okay so that's a simple sign up flow let me quickly show you what login would look like it's actually a very very simple change so essentially um after the user has signed up that user object automatically gets assigned to PF user. current user and it gets cached on the local device so so what you probably should do when the app launches is you should check PF user. current user if it's not nil that means the user has recently logged in or signed up so you don't need to present that registration screen uh or a login screen you can just bring them right into the app but if you're checking PF user. current user and it's nil that means that the user has never used it before or they recently signed out so in that case you want to present the registration screen for us we're not going to do do that check because I just want to show you how login would work I'm going to change this text to login instead and then very simply inside the view controller I'm just going to assume that we did check PF user. current user and it was nil and so that means that the either the user has never signed up never logged in or he recently logged out so we we're going to show a login screen because I just want to show you how easy that that would be to do that so I'm just going to comment out this signup method and we're actually also going to comment this out all of this let me just undo that all of this is sign up code so if you were to sign up a new person sign up new user this is what you would do uh this bracket be careful this bracket is also part of this signup block so if you were to log in a user instead then all you would do let's just double check the uh documentation here logging in see very simply you call the class method login with username in background right so again I'm going to assume that you know you do some checking up here that the username text field isn't empty and the password text field isn't empty and then you would just go PF user. login with username and password in background this is the one we want so you have a place to specify the username which we would go username text field. text and I'm I'm going to unwrap that because we know it's not nil right because we checked it up here or you would have checked it up there new password text field. text unwrap that doubleclick this block of code that executes when it comes back so this returns this PF user parameter is an optional type so it either returns nil if for some reason maybe the password was wrong username couldn't be found but they couldn't log in at the end of the day and PF user would be nil so I'm just going to use user error like that and then inside here you would basically check if let well let's check if error uh let's check users first if let logged in user equals user so inside here user object isn't nil else user object is nil check error parameter so then in here you can you know user logged in successfully transition into homepage or something like that home screen whatever that experience may be so that's basically all there is to it in this lesson we looked at how to perform a sign up we looked at how to perform a login the only thing we haven't done is on app launch check the PF user. current user property or method to see what the status is you know if the guy was logged in if the guy is you know logged out or not registered basically to check that status and determine which form we should show whether we should show the sign up form and the login form uh or just bring them straight into the app if they're already logged in so now that you know how to do these two things in the future when we build some more apps together um I can very easily incorporate login sign up and user accounts please give the video a thumbs up and please share it with anyone who you think could use this tutorial thanks for watching I'll see you guys tomorrow bye