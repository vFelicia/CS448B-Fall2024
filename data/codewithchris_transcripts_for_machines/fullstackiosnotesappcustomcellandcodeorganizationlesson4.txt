hey code crew the ios notes app is pretty much done but there are just some finer details to take care of if you haven't seen the earlier lessons i highly recommend you do that first i'll link to it in the card on the screen or in the description below all right ali over to you right now that we've added all the features like updating deleting adding and reading the notes let's do some cosmetic changes in our actual app so the first thing we want to do is so when i add a note i only see the notes title i also want to see a snippet of the actual note body and i want to see the date so what i'm going to do is i'm going to open the main storyboard and in my prototype cell i'll make it a bit bigger and i'm going to add first a label actually before i add a label i'm going to add in a horizontal stack view or sorry a vertical stack view and i'll drop in my prototype cell and then i'm going to make it fit in my cell and what i'm gonna do is i'm gonna constrain it to all sides so the zero zero zero zero and this will stretch it across my actual cell now the next thing i want to do is i'm going to drop in three labels so i'll drop in a label and i'll drop in another label and i'll drop in one more label now i'm going to go to my stack view and in the identities i'm going to make the alignment or sorry the distribution fill equally so now it all my items are equally filled so the top one is going to be my title the middle one will be the note and the bottom one will be the date so now what i can also do is go to my labels and i'll just center them and then for the title i'll make the size a bit bigger i'll make it maybe 20 or 22 and i'll make it bold and then for the note i'll make it 20 and regular and then for the date i'll make it 17 and thin so we can just use them like that also where it says truncate we can truncate the tail which is fine but you can also truncate the middle and head and i can show you what those do when you actually start seeing the notes up here so if we run our app right now it's actually not going to work so i ran my app and you see that it says here label label label and it says new note so we actually want to put this new note over here where it says label and the way we're going to do that is actually we're going to make a new file so click your folder and click new file and we're going to make a coco touch class this time and we can just call it proto prototype cell or we can call it note prototype cell and this is actually a subclass of and then if you see here ui table view cell so then we'll just call it note prototype cell and it's a sub class of ui table view cell so let's save that and let's save it in our project so now what i'm going to do is split the screen and go to my main storyboard file again and what i'm going to do is i'm going to drag all three of them but before i do that i'm going to click my prototype cell in the hierarchy i'm going to go to the identities and i'm going to make the class note prototype cell so now that it's note prototype cell i can drag these items into my class right here so i'll drag the first item and i'll just call it title i'll drag the second item and i'll call that note and i'll drag the third item and i'll call that date so now go back to my view controller and if i scroll down to where we customize the cell over here instead of writing cell dot text label now i can write cell but before i can write that i have to write as so where it says let cell equal dq reusable cell i'm going to write as and then i'm gonna write note prototype cell so now what that does it tells the swift file or my view controller that the cell is actually a note prototype cell and a noteprototype cell has the title a note and a date and that allows me to customize that now so i'll go back into my view controller and i'll say cell dot in fact you scroll down you should be able to see the there's too many but you should be able to see the actual property so we can say title dot text is equal to let's just say note 1 for now and let's see if that works so we're going to refresh our app and once it builds you'll see that it says note 1. so now we can actually handle the properties of our actual note prototype cell like the title the note and the date through our view controller since we casted ourselves as a no prototype cell so let's just copy this and i'll paste it down here but i'm going to change it from title to note and i'm going to change it to date and now i'm gonna make instead of note one i'll say notes array to the index path dot row dot title and i'll do the same for the rest and i'll just change the title to their respective property so the next one isn't titles actually note and the final one is the date so now if i refresh my app it should actually show all the properties so refresh my app and there i see it i see new note noted and placeholder so i can add another note there's a new note this is a new note once i save this i'll see here this is a new note and placeholder so now we want to change placeholder to the actual date it was created on so we're going to go into our add note view controller right here so in my safe click function i'm going to write let date formatter is equal to capital d date formatter and two round brackets so this will actually create an instance of it'll actually create a date formatter object and date formatters a builtin function in swift that allows us to create dates so now we're going to write date formatter lowercase d day formatter.date format and that equals is the string and the string will be y y y capital m capital m d d and this actually gives me an error because i'm writing date formatter with a capital d so i should use date formatter with a lowercase d because that refers to the object we created here now last thing we can write is let date is equal to date formatter dot string from date with two round brackets so now what this does is first it creates a date formatter object and then it tells that date formatter object that we want our date in the format of year month and day and after that i create a string from that date formatter object which i can then pass in as the arguments to my api function calls so now where we see we were sending placeholder we can just send in date so both of these where i was sending placeholder in my api functions i'll just send in date now just like that so now if this doesn't give me any errors i'll actually refresh my app and see what happens okay so i'm going to create a new note i'll type this is a new note new note and once i save it it should tell me the date i created this on and there we go it says 20 20 0 7 29 which means july 29 this note was created now another thing we have to make sure is that the user can enter empty strings and it'll save we don't want to save empty strength because it doesn't make sense so that's pretty easy so instead of using an else statement right here when we're checking that if we're updating or we're creating we'll write else if and we're going to write else if we're going to reference the title text field and the body text view title text field dot text does not equal empty and and body textview.text does not equal empty so that means that if the title text field is not empty and the body text field is not empty only then are we going to save it to the server i'll refresh my app now and i shouldn't be allowed to save empty notes i'll click add note and if i try to save empty note it'll go back but it didn't save so there we are and now let's clear these out because our delete button works and one more thing we can do just to make a bit more responsive is that when i click save it shouldn't go back to the original screen if i haven't successfully saved a note so for example i have an empty i have empty string here an empty string here when i click save it shouldn't go back to the screen so what i'll do is i'll just move this into the actual else if function or the else of body and also copy it and put it in the if statement like that so now if we successfully save only then is it going to go back to the original screen before it went back to the original screen whenever we click the button so now if i run it again i'll see that if i have an empty string and i click the button nothing happens okay so now that our app works there's one last thing we have to do and that's just cleaning up our code to make it more readable and adding some comments so what we're going to do firstly is we're going to review controller file and actually just organize this code so it's more readable and we know what e function does the first thing i'm going to do is move our protocol from the top to the bottom so i'm just going to copy it and erase it and i'll move it to the bottom over the actual extension like that so it just makes more sense and what we can do now is if i write a comment with slash slash i can write mark colon or semicolon dash and i can just say custom delegates so now that actually adds a section to our file called custom delegates so now i can see right here this little section where the custom delegate part starts so if anyone's reading our code or if we're reading our code we know that this is the part where we make our custom delegates so we're gonna do the same for our actual table view delegates so i'm just gonna copy these functions i'm gonna move them underneath so i'm gonna copy and i'm gonna move it to the end of our view controller class so at the bottom of it i'll just paste in that and i'll just clean it up and also write on this slash mark colon dash and i'll say table view delegate table view delegate so now we know these are the functions which actually manipulate our table view and in this we can just say in the actual cell part we can just write instead of in the actual cell bar we can just add a comment saying customizes cell to set date note and title just so we know what these do but it's kind of selfexplanatory but it's never it doesn't hurt to add a comment on that the next thing we do is we're going to go to our view will appear and view did appear and view did load and over these i'm just going to add a comment again mark colon dash and i'm going to call these life cycle hooks life cycle hooks because these are different functions that are fired on different parts of the life cycle so for example the view will appear is fired when the view will appear view did appear as fired when the view did appear and viewed load is fired the first time the app runs so since these are different lifecycle hook we can categorize them as life cycle hawks and inside the view will appear we can say we can add a comment saying update the notes array just so we know what's happening and we can do the same for the view did appear and inside the view did load all this is selfexplanatory where setting our delegate and we're setting the notes table of your delegates so that you don't need really a comment for that and for ib actions we're actually going to move them at the very top so anything we're importing we want or anything we're importing or initializing we want at the very top of our file and again you can write slash mark colon and we can just call dash initializations so that's our ib outlet and our notes array just like that and we can paste it there to make it cleaner and the last thing we have left is our actual segway so our segway we can again mark it mark cole and dash and i'll just say segway data so it just tells us this is the data we're passing in with our segway and in our actual segway data file i can just write intersect we did a function i can just write passes the note and tells the view controller to update instead of add just so we know what the vc.updatepart does and what the vc.note is equal to notes arraytableviewnote index for selectedrow.rowdus just like that so now we can see that our code is pretty organized so if i wanna if i have a problem for example my table view i'll just scroll down to the table view parts and i can set it over here fix it over here or if my data isn't rendering properly i would go to my custom delegate and see am i getting the right data so now another thing you can do is you can click command a and that'll highlight your whole file and you can click ctrl i and that'll just add some spacing and make sure your indentation is correct so now our actual view controller looks good let's move on to the next file which is our add no view controller so in this again we want to move all the imports and the initializations to the top so i'll just copy the ib outlets and i'll move them to the very top of the file just like that and i'll remove all the spacing between them and also move my var note and update to the top and again we can do slash slash mark colon in dash initialization like that and now after that i'm going to write slash mark colon dash ui buttons so these are all the buttons that fire when left you click something like we have the delete click or we have to save click so again i'm going to remove all the spacing this was a bit more compact and in my actual delete click i don't think we need to add any sort of comments other than this self navigation controller pop view controller so in that one i can just write slash returns the screen back to the main screen and for this one for the safe click we can also write about the date formatter we can write creates a date string that we can pass in to the database and if update is true we can say if the user is updating update denote rather than than saving just so we understand what it does and if we forget or if we open our code after a long time and we forget what these do we'll know that when update is true we want to update something and set our actual safe click to update instead of to add and now after those parts are done our ib outlets are done i'm going to write slash mark and i'll write dash lifecycle hook again these are same life cycle hooks in our view or our view controller our previous one so we have one for view will appear and we have one view did load and again i'm just removing any extra spacing just to make it more compact and then our view will appear in the if update is equal to false part i'll add a comment saying disables the delete button if the user is adding a note and then i can just write in in comments or in brackets i can just write can't delete something that doesn't exist and in my view to load if update is true i can add another comment saying pre populates the text field if the user is updating a note like that and then i'll just remove this comment they added when we created the file and our add note view control is also good and it's very structured so again i'll write i'll click command a control i and then i'll just fix any of our margins or any of our actual spacing problems and the last file we want to actually fix is our api functions and in this we just want to add some comments and again structure it a bit so i can write a buffer struct i can write slash mark dash custom notes struct like that and in our api functions class we can write mark colon dash functions that interact with api it's kind of selfexplanatory but doesn't hurt to add the mark keyword just so we can see them clearly because the mark actually adds a dash or a line between the different sections so it's just a bit more visible and now we're gonna write is sets our custom data delegate and over here over static let functions we can just say creates an instance of the class so the other files can interact with it like that in our fetch notes we can write a comment above saying fetches notes from database and here let data is equal to string say converts converts the json converts the response into utf8 string format in our self delegate update array we can say fires off the custom delegate in the view controller and our add notes we can just say add a note to the server passing the arguments as headers and we can just copy that and we can paste it for our update update and updates a note to the server passing the arguments as headers and finally we can say deletes a note from the server passing the argument passing the notes id as a header again now i'm all i'm going to do is click command a and ctrl i and that'll fix any of spacing issues i have and all three of our files are now very readable and clear now that your app is done and it does what we want to i just want to take a quick second to look at the different technologies and tools we worked with and any notable things we've done during our production of this app so the first thing we did was install node.js mongodb mongoose and express and that allowed us to actually create a server and before we did anything we created a note schema file which defined our actual data object or note data object which held the title a date and a note then we imported this file into our server and then we told our mongodb or to connect with our server using mongoose and then we created four routes a route to create fetch delete and update our notes and the create route just take in the data and it would create a new note object based on our schema our fetchra would just fetch everything from the database and return it our delete route would take in an id and it would delete the item and our updater would take in an id and also takes in the new data which it would update and then we ran our server on our network using our ipv4 address so any device like a physical iphone can also interact with our server and it would work as well and then we go into the x code where firstly we created multiple screens using a navigation controller which actually allowed us to go between different notes so for example when i click add no it shows me the screen and i can go back to my main screen and that was facilitated by the actual navigation controller and then we defined the different properties we needed for our table view so we told how many rows we want and the different data we want inside of our actual table view and we also added a custom note prototype cell so that we could have custom information like our title note and date and then we told our view controller to set those as well the next thing we did was that we created the api functions class and this functions clash would actually interact with our database to fetch add update and delete the notes and notably the fetch row actually had a custom delegate just like how we had a delegate and protocol for our actual table view we had one for our custom class we had one for actual api classic we had one for actual fetchnose function as well so when the server got the data from the fetchnotes what it would do is it would call this update array function which is a delegate and then the update array would actually fire off this function which would just update our notes array and it would decode whatever data the server sent us using the actual note struct we defined as well so we'll take whatever data the server gave to us and it would turn it into a title a date an id and a note object so xcode could actually work with it another notable thing we did was actually send data through segways using our prepare for function so we told that when we click on an actual item in our table view we wanted to send the note so we can prepopulate the data so when i click it i want the data to be prepopulated and i told it that when we save we don't want to add something instead we want to update something and if we go into our add note view controller we also work with the date formatter to create a date based on when the note was created and we converted that to a string so those are the main notable things we've done so this app was actually a good look into server development because we defined a server and we defined a database and we actually interacted with it and on our front end we actually made an xcode app that would actually interact with our server to do certain tasks but you could see how instead of using our xcode app we could actually make a website that would interact with our server because the only thing that was happening which was specific to the iphone was the actual table view everything else was done to the api functions class and these aren't specific to iphone so for example you can make an android app which would be exactly the same and which would interact with our server in the exact same way to update delete add and fetch or you could also create something like a website which would do the same things like fetch add update and delete using the same routes congratulations on finishing the full stack ios notes app i hope it was a fun experience to not only build the ios frontend app but also the backend api and database now i want to turn over to you do you want to see more fullstack ios app development let me know by leaving a quick comment below and on your way down there if you enjoyed this series please give it a thumbs up and stay tuned make sure you're subscribed oh yeah definitely check out cwc plus if you enjoy this app series for more one day builds and courses on other ios topics i'll leave a link to it on the end screen of this video alright i'll see you in the next one day build