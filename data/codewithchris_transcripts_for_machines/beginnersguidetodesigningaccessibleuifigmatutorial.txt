Okay, so let's face it, accessibility is one of the lesser known or more overlooked topics when we're first learning about UI design, and for that reason, we'll discuss everything you need to know about it in this video. Hey, everyone, JZ here and welcome back to Learning Design Design, the series where I share my learnings on designing app UIs. Like many of you, I'm also trying to become a better designer every day through practice and study. So if you have an interest in design and want to learn more about this field, then I hope I can inspire you to join me in this journey. With that. Out of the way, let's start Learning design. So for this video, we'll touch on several things related to accessibility, but in general, we'll discuss what is accessibility and why it's important and the steps you can take to make sure that your UI will be accessible. So things like contrast size, visual hierarchy, responsive design, and visual indicators and all those sort of things. So we've put some chapters and time stamps in the description below for your convenience and just a little bit Disclaimer. This will only touch on accessibility inside the Sigma workspace. So we'll be using some of the apps I've designed over the past few months here at Google's Chris as our main reference material for this video. So first things first, what is accessibility in the world of UI design? Accessibility refers to making or designing a product that's usable and comfortable for anyone to use. That means that the app can be used even by people with physical challenges, people that don't have the latest and greatest smartphone, among other things. So accessibility is important because at its core, you're kind of like designing an equal user experience for all. But apart from that, an accessible UI will mean that it's well thought out and looks good and will be used by many people now, equal user experience for all can be a very challenging feat. So what most apps and even beginners like us or independent app builders like us can do is to make it equal for a target audience or a specific group of people, or even as many people as we want, right? Because otherwise you'll have to shell out resources that may not be available to us. Okay, so we get it right. Accessible UI is important. So how do we achieve it? Well, when designing a UI in Figma, there are several things that you need to consider. So things like visual hierarchy, responsive design, text size, and contrast and visual indicators. So these are just, I think, the most important things that you can implement in Figma when you're designing the UI. But there are still a lot of things that you can discover whenever you're touching on accessibility features. But since we're beginners, these are the fundamental aspects of designing an accessible UI. First is visual hierarchy. So when it comes to visual hierarchy, the main rule of thumb is that the headers should be around twice the size of the paragraph text. That way, we'll be able to make sure that information on the app screens will be easily readable at a glance. So this would benefit those who have a compromised eyesight or permission, or even those who are relatively new in your app, since they would immediately identify the most important items, which would allow them to navigate your app easily. So let me use the chat app as an example. So as you can see here, we have implemented some visual hire some simple visual hierarchy in this app. So as you can see. The chat is big, the paragraph is small, and some non essential or secondary elements are, of course, less highlighted compared to this item. For example, Chris's name is, of course, in bold because it's more important than the preview and all those sort of things. So apart from being the text hierarchy, there's also some visual hierarchy in terms of the buttons. So if you watch our previous videos, I intended for the new chat button to be more emphasized than these chats and contacts, but mainly because I want the user to proceed on making a new chat or starting a new chat with their friends. So the new chat button is in the center, and the size of this button is quite bigger compared to these two buttons on the side. So as you can see this button, the size of this button is an 89 X 82 in width and height, and this one is by six, eight and 74 X 74. So as you can see. I implemented some visual hierarchy because this one is more important because this is the main functionality of the app, and I want them to proceed on making a new chat with their friends. Same goes for this, another secondary UIButton at the top. So even if they are at the top alongside Chris heading, I still made sure that they will be less emphasized by using a different color. So the color is Gray. This means that it's less emphasized compared to the rest of the UI in displays. So this is like the most usual approach when creating a visual hierarchy for your app, using colors to your advantage, using text size to your advantage just to make sure that there's Chris structure and hierarchy for your visuals and for your overall UI design. So next is responsive design. If you have a development background, responsive design is probably one of the most familiar requirements when you build an app because not everyone will have the same phone. Right? So it's really important that this early on in the design process, you're already able to plan out on how to make your UI scale for smaller, older or bigger, basically different devices. If it were you, you'd probably hate it if the app that you want to try isn't available to you just because you have a small or old phone. So when you design and build one, just remember about responsive design. Okay, so the good thing about implementing responsive design and code is that we have an existing Xcode tutorial here on YouTube on how to make sure that your UI will scale across different devices. So the link to that video is up there. If you want to learn more now in terms of design, when I'm designing a UI and Figma, a few things I do to make sure that the app will scale properly is to use a first, a proper grid system. Second is to use auto layout, and third is to design in a smaller canvas. So I design in a smaller canvas because personally, it's easier to scale up and scale down. And another reasoning is that if the ContentView of the app sits well on a smaller screen, then it's likely that there won't be any problems when it's viewed on a bigger screen because it will just expand and all those sort of things. So here's an example again, let me use the chat app as an example because this one is the most recent one that I designed. So when I designed the code with Chris app back early on this year, maybe in summer or maybe around August, I did not implement some of the features that I mentioned, so I did not implement all the layout here. I did not implement a more rigid structure or grid system, but I still have the grid system here just not as efficient or effective as the one in here. So as you can see when I Resize this, it doesn't scale properly. Or as you can see. The illustration is funky, but I think that's a Figma problem, not the UI problem. So anyway, moving on to my sample in the chat app. So as you can see. This one is in the size of an iphone ten, which is not really that small. They are still smaller device. So I use the iphone ten as usual. Iphone ten size because it's like the common ground between Promax iphones and the iphone mini. So for example, if you scale this up, this UI will just expand to maybe like 1440. Let me check what's the size of the iphone version pro Max 428 by 926. So let's say this one will scale to 428. Then as you can see, it just goes like that. So the content is still intact. It just expands, stretches, and it's still usable by our standards. So as you can see 428 and just like that, so it's still usable, it still looks great. It still looks clean. And let's see if we can scale this down to the smaller, not Android. Let's just stick to the iphones, but 320. The iphone Se is the smallest one. So 320. Let's just scale this down 320 as you can see once we reach that 358 pixels with the UI just scales down properly. It doesn't mess up with the UI because this is also the beauty of the auto layout feature that I implemented when designing this UI. So when you have responsiveness in mind, you'll be able to implement this during your design process as well. So as you can see. The text is still intact. The UI is still usable, still pretty cool. So as you can see. The home button and the status bar did not scale properly, but it's okay because these are just system elements that we don't need to tweak or anything like that. So the system elements will just respond accordingly based on the device of the user. So that was an example, right? So I mentioned the auto layout that I did here. As you can see. There is an auto layout. This is an indicator that we have an auto layout right here. And I also mentioned designing and a smaller canvas because it's easier for me. It's easier to scale up and scale down. And I also mentioned the use of a proper grid system. So as you can see. I used a grid system here, but it's not as efficient or it's not as effective as the one I use in here. Using a grid system is really important because this is the structure or foundation of a responsive UI. So I discussed about all the important things that you need to know about grids and guides in Sigma in our previous video. So give that a watch if you want to learn more about setting up our responsive grid so that's it for responsive design. Next is text size and contrast. So one thing we should always do when designing a UI is to ask ourselves if there is enough contrast between the text and its background color. So good contrast helps those who have low vision since they'll be able to read information a lot easier. Contrast is something that you can eyeball whenever you're designing a UI, but if you want to make sure that you have a good contrast between your text and your background is to use a plug in in Figma called 811 Y or Ally. So to access that, just go to your community page and Figma community and search for 811 wide. So this is a plug in plug in. So actually, there's a lot of contrast checkers here. So as you can see. There'S tar there's contrast, there's 811 Y and all those sort of things. As you can see. Accessibility is a very serious topic when it comes to designing UI. That's why we have a lot of plugins here whenever you search for a eleven Y, but this is the one that I use. So a eleven Y color contrast checker. So I haven't been able to check on the other plugins here, but a eleven Y is a basic color contrast checker that you can use to make sure that your text and background color will be compliant to the Web ContentView accessibility guidelines. So text is readable for users by adhering to WCAG. So let's put this example, make sure to install this. And as an example, let's select this frame and let's open the plugin. And just like that, click on check. And as you can see. It has a poor contrast ratio. As you can see. It doesn't comply to the Double A standards and Triple A standards. So as designers, the least that we can do is to make sure that our content or our UI will be compliant to level two standards. So the two Ace double Ace will be level two standards. So just like this until you reach that check Mark on the level two standard. So don't worry if it's not level three compliance, because even some of the UI, some of these aren't compliant aren't level three compliant, but we should always try. At least the bare minimum will be on the level two standard. So as you can see. Just let it to the right and done, click on done. And now we have a more contrasting chat bubble. Same goes for this one. Let's check. As you can see for this bubble, all text meet level three color contrast requirements. So this is the good thing about this plugin because it easily tells you if your element or your UI does not provide enough contrast for users. Sometimes we think that there's already good enough contrast in our design. But then you check the color contrast checker, and it turns out that the contrast aren't even at least level two compliant. So that's a lesson that we just learned is to always use color contrast checkers to achieve at least level two compliance. As you have witnessed a while ago with this chat bubble. Now, one last practice that I can share when achieving an accessible UI is the use of visual indicators. So the visual indicators are basically little graphic details that elevate the user experience. Here is an example in our chat app, as you can see when we built the chat app, if you watch our chat mini course, I mentioned the implementation of this small visual indicators that basically communicates that the user is indeed in the chat page. So if the user is in the contacts page, then this visual indicator will be in the contacts page, something like that, just like that. So also another example is if this chat has not been read yet, then this text will be in pure black or in a darker color, because that's basically a visual indicator that the text hasn't been read yet. And if it's already Bowen read, then the text will just be converted to something like Gray because it no longer needs to be read or it no longer needs to be emphasized for the user. So that's just a quick example of visual indicators. So here's also another visual indicator I implemented in the app bar of our CWC app. So as you can see the visual indicators right here. Again, the learn page. So if they are in the home page, this visual indicator will be transferred here and the color of this home page will be in blue instead of Gray. Just like that because this is the learn page of the CWC app. The Learn icon is highlighted in blue, and the indicator is also there above that Learn button. So those are just little examples or simple examples of visual indicators for achieving an accessible UI. So I consider visual indicators as very important when achieving an accessible UI because it helps everyone understand what the button does or what the current state of the app is. So sometimes colors like this 1 may not be enough to serve as a visual cue, so if we remove this, the color may not be enough. So designing a visual indicator guarantees that the user receives all the necessary information that they need when using your app. So yeah, that's everything I wanted to share when it comes to UI accessibility. Now, they may not be a comprehensive list because there are some more advanced practices that you should know as you progress in this field. But as a beginner, I think these are just a few of the fundamental approaches that you need to take note of when designing a UI or building an app. And by the way, if you're interested in the chat app that I used to demonstrate in this video, then be sure to check out the Chat app mini course that's currently live at our CWC plus program. So in there, we teach you how to design and code a chat app from scratch, so that's design and code lessons links in the description. If you want to check it out and with those things said, I hope be learned something like and subscribe if you did and leave a comment, if you have any questions, suggestions or comments, feedback and all those things. And again, thank you for learning design with me and I'll see you in the next video. Bye.