hey guys in the last lesson we built our user interface in the storyboard and we learned all about Auto layout before we expose those elements to code I wanted to go through the basic building blocks of the Swift programming language so that when we do look at code you can understand what's going on and what the various lines of code mean so in this lesson we're going to go over some concepts that may be difficult for you to understand if this is the first time you've ever seen or heard about them we're going to go through classes and objects we're going to go through methods and we're going to go through properties okay so let's jump right in the first concept is a class a class is a blueprint that we can create to describe a component of our app when we're making an app in Xcode really all we're doing is creating classes to describe the various components in our app and how they interact with each other for example in that MVC diagram I showed you before describing the various components of an app the behavior of the model will be described by a class the view controller is described by a class and the view as well in each of those classes we write code to give it instructions on what to do and how to act so in the view controller class I might write some code to tell it to ask the model for the data and then display it to the view and then in the model class I might write code to say if the view controller asks you for data then go fetch the data and then return it are you with me so far so a class contains instructions written in code to describe how a component is supposed to act and how it's supposed to interact with the other components another thing to realize is that it's not the classes themselves that are doing the interacting the classes are merely blueprints that we're creating what happens is that these blueprints also known as classes are turned into what's called objects so from the model class a model object is created from the viewcontroller class a view controller object is created and from the view class a view object is created and it's these objects that interact with each other and carry out the functions of our app furthermore from one class or one blueprint you can create multiple objects in the same likeness and behavior that the class describes and this makes sense because imagine if you had two components in your app that did the same thing but in two different places you can code up one class and create two objects from it another example would be say in a game where you spawn multiple enemies of the same type you shouldn't need to create a class for each enemy that appears on the screen you only need to create a single class that describes the enemy's behavior and then use that class to create multiple enemy objects to throw at the player so the key takeaway at this point is that the components in our app are described by classes classes are like blueprints that are used to produce objects that act and behave as described in the class and it's these objects that interact with each other to perform the duties of our app now let's try creating some classes in the playground and in lesson 2 we learned how to start and create a new playground from Xcode open up a new playground and we're going to type out some code so to create a class simply use the class keyword and then give your class a name so for example I'm going to call my class person and then all you're going to do is open up a set of curly braces inside the curly braces you're going to type in it and then to round braces like that and then another set of curly braces so when I type out this leftside curly brace and I just hit enter Xcode will automatically fill in the second one so that's just a little shortcut and then just like that you've created a new class to describe a component of your app so what is this init here well any code that you put in between these curly braces right here gets executed when a new object of this class gets created so when a new person object is created the code inside the anit is run and that code can be used to set up or initialize anything that you need for the personal objective function properly so let's try that let's create a new object of our new person class so you can do that very simply just by typing the class name followed by 2 round braces like that and just like that we've created a new object however what we want to do is create a variable just so that we can reference our object later so I'm going to create a new variable just I'll just name it a so now I've created a new person object and I've assigned it to the variable a so now when I want to reference that object I can use the variable a and I can do stuff to it as we'll see soon so I'm just going to erase that line and let's put a print statement in the init just so we can see that it gets called when we create a new object so let's say new person initialized okay so now when I create a new person you can see that the print statement is run and you can see that that's the output okay so this is great we've created a new class to describe a component in our app but we need to give it instructions to do something to describe its behavior and how do we do that we do that through something called methods and properties those are two different things that we're going to go through them individually so let's talk about methods first a method is a named set of instructions that will be executed when called additionally methods can accept some data as input and return some data as output back to the caller of the method and finally methods are associated with the class so let's try to create a method for our new person class so what I'm going to do is just create some space here right below the closing curly brace of our class and in order to create a method you start with the func keyword stands for function and you give your method a name so I'm going to call it say cheese so that's my method name give it a set of round braces followed by a set of curly braces and inside this set of curly braces you write the code to execute when this method is called so inside my say cheese method I'm going to just at this point here print cheese okay so as you can see going back to it when we create a new object right here cheese doesn't get printed out because this line of code only gets executed if this method is called and it's not being called right now right so what I can do in order to call the method is just type since I've got a new person object assigned to my variable B I type in B dot say cheese with the brackets when I do that you can see that this line is printed out so when I write this code statement it actually runs this code in here okay so let's look at this method call what is B dot say cheese well method calls take the format of the object that you want to call the method on dot method name so that's why because my person object is in the variable B when I write B that refers to that object and I write dot to look at all of its properties and methods at this point it's only got to say cheese method and then you write the method name to call this objects say cheese method okay so let's say we don't do that let's try to call that method as part of the initializer and you might notice at this point that this initializer kind of looks like a method except that it doesn't have this func keyword well you're right the initializer is basically a method but it's a special type of method because all classes need to have an initializer so anyways I'm going to erase this print line here and instead I'm going to call the say cheese method from in here so that whenever we create a new person object this initializer method is run and inside this initializer method it's going to call its own say cheese method so the way I do that as I write self dot say cheese now as you can see when I create this new person object cheese is printed out even though I didn't call the method explicitly here because the initializer method calls the say cheese method now you might be wondering you know what is self mean well self means call a method that you own yourself so to help you understand the self keyword take a look at this slide imagine that we're writing a set of instructions for the created object to read itself so each object is created in the likeness of the class and when they read that line of code they're like saying to themselves call my own method say cheese so if you think about it that way it may be more intuitive to understand why the keyword is named self okay next we're ready to look at properties a property is something that we can create for a class in order to allow it to store a value or keep track of another object let's go back to our playground and see how to declare a property for our class so I'm going to find a space here right below the opening person bracket properties are declared at the very top so you start with the keyword var followed by the property name so I'm going to say name followed by colon followed by the type of data that that property is going to store or track in this case I'm going to write string remember string is just a piece of text and next we also have to give it an initial value so I'm going to use the equal symbol to assign something to it I'm going to sign a piece of text into this property as an initial value I'm just going to give it a piece of string that says initial name and just like that we've declared a property for our person class and gave it an initial value with this piece of text now you may notice a property declaration sort of looks like a variable declaration if you remember in lesson two when we did something like let me just erase this line for a second when we did something like this where we created three variables with the third one being the sum of the first two well this almost looks like a property declaration you have the VAR keyword and you have a name for your variable and you know what you're right because even with the variable declaration we can put that Col in there and then put the type of data that that variable is going to hold and for numbers we use int stands for integer so we could have done this and now it looks even more of like a proper declaration okay so then what aren't the difference between variables and properties well it depends where it's declared when it's declared here inside the person class at the top it becomes a property of that class and it's associated with the class while variables are declared and used within methods okay now let's look at how to access a property so I'm going to erase this now I'm going to declare a new variable now I just realized that I just said that variables are declared within class within methods and they normally are but because this is a playground we're kind of it's just a place to test code that rule is kind of out the window here but you'll notice when we write code inside Xcode we will be following those rules where most of the variables that we declare will be inside methods and anything that we declare outside our properties so I'm going to create a variable called first person and I'm going to create a new person object so in order to access that property it follows the same format as a method call I reference the object that I want to call it's property on I hit dot and then now I can either you know right say cheese they call its method or write the property name to call its property and you can see there it's accessed initial name now if I want to change the property I can just go like that and I can assign it a different piece of text now if I access that property again you can see that it's changed and now it says Alice I'm going to create a second person I'm going to create a second variable and create a new person object inside and assign it to that second variable and I'm going to change its name property okay so take a look at this I've created another person object assigned it to the variable second person and I just changed its name to Bob well what would you expect first person their name to be let's find out well the first person's name is still Alice and that illustrates a very important point although each object is created in the likeness of the class there are actually independent instances of each other remember you can use one class to create multiple objects of that class but each of them are independent instances so what you do to one object does not automatically apply to all of the other objects they're independent okay so that's where we're going to end off this lesson this was just an introduction to classes methods and properties there's actually more complicated things that you can do with them but we'll look at that when we need to if this was your first time learning about classes and objects then welcome to the world of objectoriented programming languages you'll probably need to watch this video again or maybe even a couple of times to wrap your head around it Swift along with many other programming languages are objectoriented so in the future when you've mastered Swift and you decide to learn Java for Android apps csharp for Windows Phone apps or perhaps even objectivec you'll have a head start because they use the same concepts that have been presented in this lesson today and on a closing note if you've watched this video a couple of times and you're still a bit confused don't worry about it too much because we're going to be putting this stuff into practice and you'll start to click when we do it in the next lesson we're going to go over a couple more Swift programming language concepts before we actually dive in our card game app