hi welcome to lesson three of ten in the previous lesson you learned about Auto layout and Auto layout constraints in this video you're going to learn about staff views and how they're going to help you position elements while drastically cutting down on the number of auto layout constraints that you need to set by the end of this video you're going to have built this user interface if you went through the lesson two worksheet you might have noticed that this is what you built however you're gonna see that by using stack views you're going to be able to build this layout much easier and much faster let's start a brand new Xcode project make sure you're looking at io s and choose single view app let's click Next I'm going to call this app 3 and all of these details should be the same language should be Swift let's click Next and I'm just gonna save it on my desktop here right here where the project configuration screen is because we've got this node highlighted scroll down to deployment info and under device orientation we're gonna uncheck portrait and just have landscape left and landscape right because this UI is going to be a landscape view let's go into the storyboard and we're gonna click view as and let's just change it to landscape orientations more so that we can visualize what we are actually building here the next thing I want to do is let's click on the asset library right here and we're going to import the images for our Xcode project now I've provided a link in the description below to download these assets the zip file is called lesson 3 assets so I want you to go ahead and click that link download it I've got it already downloaded on my desktop here and I'm just going to double click it to unzip it it's going to open up a folder inside you're gonna find three images what I want you to do is just highlight all three you can press command a to highlight everything and then you can drag it either in here or in here and so on the right hand side I'm gonna have burger burrito and salmon these are properly named already so you don't need to change any of the assets names and then let's go into main that story board and what we're going to start with today is a stack view so let's go down here in the lower right hand corner looking at the object library type in stack view into the filter box and there are two types horizontal stack view and vertical stack view so these icons might confuse you a little bit but a horizontal stack view basically stacks things in a horizontal fashion so the first item you add will be on the left second item will be to the right of that third item will be to the right of that one and so on and so forth for a vertical stack view when you add an item that's going to be at the top second item you add is going to be put below it and then you know so on and so forth so a vertical stack view stacks things vertically while a horizontal stack view aligns all of your elements horizontally beside each other so we're gonna choose a vertical stack for you we're just gonna put it right there and then let's change that filter text to a label just gonna drag a label into the stack view you'll notice that right here in this document outline you have a label inside of the stack view see I can collapse the stack view and the label is inside of it alright so the stack view actually contains the label you're gonna see a bunch of red lines here because we haven't actually positioned the stack view and we need to add a second element just to illustrate how the staff view works so let's type in image view in here rather than dragging it on to the view here you can actually just drag it directly into the stack view in the document outline so you can see here I've got the image view inside the stack for you now if I close the stack view the image view and the label disappear there inside of it and you can see here in the storyboard that our UI image view and label are stacked on top of each other right inside the stack view I want the label to actually be on top of the stack view so in this document outline I'm just going to click and drag and rearrange these two elements so that the label is above the image view you see here now here's the cool thing with the stack view element right here let me just highlight it and go over on the right hand side I can change the orientation whenever I want so even though I added a vertical stack view onto my view I can change it to a horizontal stack view so let me just do that and you can see if I do that it's just going to position them sidebyside like that and there is also a spacing property that I can set if I just put 20 there it's going to space it out so that it has a 20 point gap between each of the elements and I can keep adding elements into my stack view and it's going to place it sidebyside no need to add any sort of auto layout constraints okay so let me flip it back to vertical here now let's talk about some of the other things that we can set for a stack view if I click on this alignment dropdown you're going to see that by default it's set to fill I can set it to leading center or trailing and if I set it to center it's basically going to center all of the elements down the middle and if I click on leading it's going to left align all the elements inside of it trailing is right aligned and fill basically tries to stretch it out so that it fills up the entire stack view and this is the setting by default so if I choose Center you may see that label become a Center aligned so let's choose that you can see that is Center aligned now the image view is still like this because there really isn't any sort of inherent width to it once we do set an image depending on that size of the image you might see it centered if it's very big you might see it fill up the entire width all right so what I want to do next is we're going to want to create another two of these things so let's add another image view there and I'm actually going to make this one a little skinnier so that I can fit another one there and I can just resize that a little bit so that we can just fit it into the view then we're gonna choose a label drag it put it approximately above each of those image views and you see how this guy is inside of a stack feel right in the document outline and we did this by adding a stack view first onto our view and then we added the elements inside of the stack view this time because we have our elements already on the screen I'm going to show you how to put existing elements into a stack view there's actually a button to do that so I'm gonna highlight this UI image view I'm gonna hold down command and I'm gonna click this label so that they're both highlighted if I wanted to place these two elements into their own stack view I first have to select them like I have and then I go down here and click this button embed in stack view and when I click that it automatically takes those two elements and puts them inside of a stack view now it's going to choose a vertical or a horizontal stack view depending on how they're already positioned but it really doesn't matter because you can always just change the axis from the stack view property so by default Xcode chose to put it in a vertical stack view which is what I wanted let's do the same thing with these two click on the UI image view hold down command on your keyboard and then click this so that you can multiselect both of them and then let's go and click this button to put that in a vertical stack view so now at this point if you look over on the left hand side we have three stack views and if you pop open each of them you're going to see the label in the image view in each of them now you'll notice that the spacing for the stack view we have a gap right because we specified that spacing but we haven't done so for these two so I'm gonna go ahead and do that highlight the stack view here go to spacing and hit 20 and then go to this stack view order spacing and hit 20 and then what we're going to do now let's close all of these stack views we're gonna highlight all three of them you can either hold shift on your keyboard and click this one so you highlight all of them or you can hold command and just individually select all three but you should have all three highlighted in blue like this and then we're going to click on the stack view you again so when you do that it's gonna put all three of them into a horizontal stack view this time so you should end up with something like this you have a horizontal stack view and inside of that you have three vertical stack views and then inside of each vertical stack view you have a label and an image view like that so now let's click on the horizontal stack view and for spacing I'm going to put 20 and that's going to add a 20point gap in between each of those vertical stack views now the only thing we need to position is actually this outer stack view because it doesn't know you know where to put this guy all right so we have to position that so go ahead and highlight this horizontal stack view and then go down to the lower right click on add new constraints and we're going to uncheck constraint two margins we are just going to 0 tab 0 tab 0 add 4 constraints like that and I don't mind if they're relatively the safe area that's fine actually instead of zeros we're gonna do 20 just to be consistent with the 20 gaps in between each of the elements so it's gonna be 20 away from the top 20 from the left 20 from the right and 20 from the bottom let's add 4 constraints and then you're going to see this horizontal stack view being pulled in all of these directions right here now you can see that inside they're still kind of not positioned correctly and we can actually change how they are distributed within the stack view so let's go ahead click that horizontal stack view we go over to the right hand side into the inspector pane I want to show you this alignment menu again so if I click this you're gonna see top center and bottom well before when I showed you this it said leading center and trailing right for left align Center align or right aligned right but how come this time it says top center and bottom well the reason is because last time we were looking at a vertical stack view and when you talk about alignment for a vertical stack view you are either aligning things to the left or the right when you're talking about a horizontal stack view which is what we have highlighted right now alignment refers to top center or bottom aligned so right now it's set to fill which is basically going to stretch the elements inside of it from the top all the way to the bottom it's gonna try to kind of fill up the entire space that's fine we're gonna leave it like that what I want to point out is distribution so this is how the space is divided up horizontally and if this were a vertical stack view distribution would refer to how the space is divvied up vertically all right so looking at this horizontal stack view we can either choose fill which is the default and it basically just gives each element the space that it needs so that's why we kind of get this disproportionate spacing is because this is the size that we had that stack view originally and these two elements this is the size that we had originally so it's just going to keep that size however if we choose something like fill equally that is going to divide up the space between all of the elements inside equally so let's go ahead and choose that and you can see now that it actually gives each stack view this an equal amount of space it doesn't look like it because these image views are different sizes but if you click the actual stack view like this you can see that all of them actually have an equal amount of space a horizontally okay so now the next thing we should do is probably give these image views some widths because we basically want this image view to be as wide as the stack view that contains it so we need to do that and in order to do that we're basically going to highlight the image view and then hold down command and highlight the stack view which contains it so that both of them are highlighted we're going to go down here to add name constraints and whoops didn't mean to click that one this one's add new constraints and we're gonna say equal widths when you do that it adds a constraint you can see down here that says that the image via width should be the same width as the stack view so let's do it for this other stack view and image view now highlight this image view hold down command select the stack view that contains it go down here equal its add constraint so you're gonna see that stretch out do the same thing for this last one highlight the image view hold down command on your keyboard and click that stack view go down here we're going to choose equal widths now there's actually a shortcut way to do this and now this is completely optional I'm gonna show you how to do that I'm gonna go first delete this constraint which I just added and the way you do this is if you highlight the image view then you hold down ctrl on your keyboard and then you click this image view and kind of drag it towards that stack view and then let go it's gonna pop up this little menu and you can simply select equal widths from there so that has the same effect now that's sort of an advanced shortcut way to do it once you get more used to things but remember if your UI doesn't look like this what I have right now then chances are you've added incorrectly a constraint and it's very easy to fix just go ahead you don't open up these little blue constraint menus delete the constraints and then readd them or you can click on a constraint and then you can edit the properties of that constraint on the righthand side but at this point you should have something that looks like this so what we're going to do now is click on this root view here and we are going to change that background to a black color and then we're going to highlight the labels so what you can do is you can expand each of these stack views so that you see all three labels so click that and hold down command to click the second one while still holding down command click on the third one so you have all three of them highlighted and then go over here in the attributes inspector you can change the text color to white for all three in one shot and we're gonna also change the font from regular to bold and I'm going to change the text individually actually so for this label this is going to be our burrito this one is going to be our burger and this one is going to be our salmon all right and now we can actually also set the images so let's go ahead and click this uiimageview click image and we're gonna choose burrito now what has happened here it suddenly just blew our label out of the view although it's actually still there if you take a look right here in the document outline and this burrito kind of just it's also distorted and we're going to highlight this burrito image view and then we're gonna go to content mode instead of scale to fill will say aspect fill now that seems to have made things even worse can see the image spilling out of the image view now and that's actually completely normal because the image is actually bigger than the image view and if we don't want the image to spill out what we can do is enable this clip to bounce property so if we click that it's going to clip the edges so that anything spilling out of the image view is kind of cropped or you know clipped all right so now we still have to address the reason for this image kind of pushing that label out of the view this brings us to a very important question in this case that we have right here this stack view only goes from here like about here down here there's only a finite amount of space so what happens when there's not enough space to display both elements like we have in this case right here because the image wants to take up all the space and that really doesn't leave enough space for the label so let me show you how we address that let's click on the label this burrito label here you can see it's actually a line it's like squish there's no height to it and let's go over here to the size inspector if you scroll all the way down you're gonna see a couple of things here you're gonna see content hugging priority and content compression resistance priority I'm going to explain what content hugging priority is in a second but I want to point out what this one is when there's not enough space to display all of the elements this is what the auto layout system uses to determine which elements should be squished the element with the lower contact compression resistance priority will be the one that gets squished so in this case I think by default they're both 750 so let's take a look at this right now I have the label highlighted and the vertical content compression resistance priority is 750 now let's take a look at the image if I click on the image and go down here at 750 as well so that's why if you look at here in the document outline if you look at this little red error icon and click it it's telling us that there's some sort of content ambiguity and it's telling us that we need to set the vertical compression resistance priority for these elements because right now they're both tied at 750 and X code cannot determine which element to squish and which one not to so let's go back to it and we need to give one of these a higher priority than the other so for the label let's give it a higher priority so let's break the tie and give this guy 751 because this guy has a higher priority against compression it's not going to get squished Xcode will rather resize this element that has a lower resistance priority than to squish the label because this one this label rain has 751 content compression resistance priority whereas the spirito uiimageview has 750 now if I change this burrial image view to have a vertical compression resistance priority to 752 then you're gonna see it actually takes out the label because now the label has a lower priority so it's going to get squished alright so we don't want that let's lower the vertical priority of the of the uiimageview so the same problem is going to happen with these two but I want to talk about content hugging priority so content hugging priority is actually the opposite problem what happens when we have too much space you can see here in this stack view the label is actually stretched out like this so content hugging priority dictates when there is too much space which element is going to get stretched to fill up that extra space because in a stack view when the distribution is set to fill it's gonna try and fill up that entire stack for you so you can see right now because the uiimageview doesn't really have a size it's trying to stretch out the label to fill up the remaining amount of space now content hugging priority like I said determines when there is too much space which element gets stretched out the element with the higher content hugging party will not get stretched it's actually the element which has the lowest content hugging party that is going to get squished I know sometimes it's kind of hard to wrap your head around this because it feels like you're speaking in opposites but the way I think about content hugging priority is I imagine hugging that element so the tighter you hug it as in the higher priority it has the less likely it's gonna get stretched out so if I give this burger label a really high vertical content hugging party that means it's gonna hug it really tight and it's not gonna stretch it out it's gonna stretch out the other element like you see what happened here the other one is actually easier to understand compression resistance it's exactly how it sounds right if you have a high compression resistance then you're not going to get compressed alright so now let's set the image view for this guy we're going to change back to this tab attributes inspector we're going to change the image to the burger and we are going to change this to a SPECT fill and we have the same sort of problem so let's clip the bounds and because this image is really large there's not enough space to show both the label and the image so we're gonna have to set which element has a higher compression resistance so obviously we want the label to be shown let's highlight the burger label and let's give it a high compression resistance on the vertical axis higher than this image view at least okay so we're gonna do the same thing here by now you should understand what's happening let's choose salmon let's choose aspect Phil let's clip the bounds and then let's click on the salmon label let's go to size inspector and then we're going to up the vertical compression resistance priority so that it's higher than this image view alright so now let's view as and take a look at this layout in a couple of different screen sizes so let's go let's go up if we got the iPhone 10 here let's click the zoom buttons that looks good just click on the iPhone 8 plus zoom out zoom back in looks good click on iPhone se and iPhone for us and we can even change the orientation I mean it's gonna try its best to follow our auto layout constraint rules and the stack view configurations and we're gonna get something like this everything's still visible it's gonna zoom out some beckon you know obviously it's not ideal to have a portrait orientation for this sort of layout however you know in our project properties we configured it so that it should be landscape only so that's going to prevent it from going into portrait anyways alright so let's test it out in our simulator let's choose iPhone 8 let's click run and it's not going to change it to landscape by default so we're going to press command + right arrow and you can see it like this so today you learned about stack views and how they can be used to position elements you also learned about content hugging priority and content compression resistance priority if you'd like this video please subscribe to my channel by clicking the subscribe button below and if you don't want to miss a single video make sure you click that Bell icon as well thanks for watching and I'll see you in the next lesson