hello welcome to learn Swift for beginners lesson 12 in this video we're going to talk about initializer functions for classes these guys exist to make sure that when you create a new object from your class that that object is ready to be used plus you can customize these initializer functions to set up the object any way you want when you create a new instance of the class let's get started and see what that means so what I've got here is a playground and I wrote down a basic class here called person and this person class has got two properties right now it's got a name property which I've initialized to an empty string and also it's got an age property which I've set to zero and that is an integer now you learned about classes in a couple of lessons back and you learned about how we create objects from classes right and in order to create a new person object I would say something like VAR uh let's just use the variable a equals person like that and we open up and close brackets um beside the class name like that and here I've got a brand new person object and if I go a.name you can see that it's an empty string and if I go a. AG you can see that it's zero so what's actually happening when you create a new person object here and you write these brackets don't these two brackets look like you're calling a function but actually what's happening is you're calling the initializer function of the person class but you might ask we don't have one defined in here what initializer function are you talking about let me write it out by default it exists um and if you don't customize it you don't really have to touch it but that initialization function looks like this it just uses the keyword in nit and it has these two brackets and then um in here in between this just like a function you can Define code in here to set up your object so what's happening when you create a new person object with this line of code here is you're actually calling this innit function of the person class and inside here you can actually write code to customize things so for example I can say name equals Chris and age equals I believe I'm 33 I think I've lost track but so what's going to happen here when I create a brand new person object is it's going to call this a nit function and it's going to set these two properties to these two values here so as you can see now name is Chris and age is 33 when I create a brand new person object now remember how I said that you can actually customize the anit function to set up the object the way you want it to be set up and we can do that simply by adding some parameters into this init function just like we would uh for any function that we set up so for example I can say uh I can say N is a string and a is an in so now I have to pass in these two values so let me just erase this part here and I'm going to create a new person object and now you can see that the auto complete shows me this so for name I pass in Chris and for the int I'll pass in 33 but instead of setting this stuff to the hardcoded values now I can set up to what is being passed in here so that's n and that's a all right when I'm creating a new person object here I'm passing in these values that go through this init function and then it sets the properties to those values which I pass in now remember if I don't want these parameter labels all I need to do is go like that and you we learned this through the functions lesson so you can review that um if you forget why this is these are the argument labels by putting underscore there we're basically saying we don't need the argument labels now while we're on this topic of specifying these these parameters here uh often times and sometimes I catch myself doing this too is that when we're passing in these parameters uh the name and age and you're intending to set it to these properties here there's a tendency to name these parameters exactly like um the property names because after all you named these property names to be uh descriptive right of what they represent so in the parameters you might be tempted also to name them the same thing well what happens is you get into this situation where you're trying to set this parameter into this property name but they're both named the same thing so it's a little bit ambiguous so that's where you can use this keyword called self and what how you would use it is you would say self. name equals name so self refers to the object that is being created so you're saying uh to set the name property of the object to this name parameter so that's how you distinguish between uh if the property name and the parameter name is the same so I would do the same thing here like that so then this age refers to that guy and self. age refers to the actual property there now another thing I want to point out is that I can no longer call person like that uh because there's no init method like that what I can do is I can actually have multiple initializer methods so if I do this let's let's say this is VAR B um equals this person object well this b. name is empty and b.h is zero right because these guys haven't been set after all I'm calling this initializer function here that doesn't set anything whereas this guy this initializer function actually sets the name and age to whatever we pass in now there's one very important thing we haven't talked about yet regarding init functions I mentioned in the intro to this video that the init functions are there to make sure that the object is properly initialized and all of its values are set uh making the object ready to be used so in this case right here for the person class uh I declared two properties and I've already preset them or initialized them to these values here so really the NIT function has nothing to do even if I did nothing as is in this case right here um the object would be ready to use because these properties have values in the next lesson I'll show you how you can sometimes if you need to declare these properties um without setting or initializing them to values so it would be something like this um you wouldn't write it out like this but just as an example you wouldn't set it to anything so there would be no values in here um in that case when you create a new person object the init function would be responsible for making sure that these guys do have a value because if not all of these properties are initialized to values then the object is not considered to be ready to be used so the init function is there to make sure that um the values are set and like I said um so far you haven't learned about how to declare these properties right here without setting them to values I've always have set them to something but in the next lesson you'll learn how to do that and then we'll dive a little deeper into initializer functions and talk about how there are two types called designated and convenience initializers and so on and so forth okay so thanks for watching remember to give the video a thumbs up and uh subscribe to the channel if you haven't already I'll see you guys in the next lesson bye for now