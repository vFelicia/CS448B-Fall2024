hey code crew welcome in this video i'm going to show you how easy it is to take an existing swift ui app and to add inapp purchases to it using revenue cat i've built a meditation demo app and in this four part swift ui series i'm going to show you how to process onetime purchases how to do subscriptions how to show different offers to the user and finally how to analyze your metrics so that you can make informed decisions based off of your data and yes i've done this with ui kit before but many of you have asked how to use revenue cat with a swift ui app and since we're doing a ton of swiss ui content right now this is perfect timing all right so let's take a look at this meditation app you can select the meditation that you want you can listen to a sample and you can purchase the individual meditation and yes as i said in this four part series you will learn how to do subscriptions but the focus of this video is to show you how easy it is to get up and running with processing transactions so that's why in this lesson we're only going to focus on the onetime purchase there are just four simple steps number one we're going to create our app store listing number two we're going to create the inapp purchase and number three we're going to sign up for revenue cat and set it up and number four we're going to process the purchase now even if you didn't use revenue cat you'd still have to do steps one and two and the last two steps are just made simple with revenue cat i'll walk you through it alright if you're pumped to do this let's give this video a thumbs up and let's dive right in first i'll walk you through the demo that i've built now since the focus of this video is on how to integrate inapp purchases i'm not going to show you how i built this but i am open to it so if that's something that you'd like to see just leave me a quick comment below and if enough people leave me comments to say that they want to do it i will record a followup video on how i built this demo all right so rather diving into the code and trying to explain how everything fits together i thought a nice neat little diagram would do a better job of that let's start all the way at the left where we see meditation this is our model it models a single meditation this one contains all of the properties that we would need for the meditation such as the title the description the name of the image asset that we should show for this meditation as well as the product id that corresponds to the inapp purchase that we configure in app store connect furthermore i have some test data for this demo so the data isn't coming from a json file or a database or anything like that it's just hardcoded test data so next up we have the featured view and the meditation model so the featured view is basically the home screen where you saw all of those colorful cards representing the meditations it's a scroll view actually so that view is powered by the meditation model which is essentially the view model of our app this meditation model gets the test data which is an array of four meditations and then this meditation model is set as the environment object for the featured view now because the meditation model is set as an environment object that means that any subview of the featured view such as the card and the detail view also have access to that meditation model and that's why you see that white square surrounding the featured view as well as all of its sub views the card in the detail view indicating that all of those views have access to the meditation model so now let's talk about the card view each card view represents one of those meditation cards in the scrollable scroll view in the featured view when the user taps on one of those cards it brings up the detailed view and this is where you can see the details for the meditation as well as play a sample audio clip as well as purchase the meditation when the user taps on that buy button in the detailed view it calls a method in the meditation model called make purchase and in that method the meditation model uses the purchase service to actually carry out the transaction if the transaction was successful then we update a dictionary inside of the meditation model that keeps track of which meditations the user has purchased or not once that dictionary is updated all of the views the featured view the cards the detailed view all of them get notified that a purchase has been made and the ui updates accordingly now right now inside of the purchase service the code for processing transactions hasn't been written yet that's what we're going to do together in step 4 processing purchases now while keeping all of this in mind let's jump back to xcode and i'll show you the bits of code that we just talked about let's start with the meditation model just like we did with the diagram so here we've got those properties that i mentioned title description image name which corresponds to the asset name that we have in here and we also have the product id which corresponds to the product id of the inapp purchase that we configure inside app store connect which we'll do together in step two all right now let's go over to the meditation model which powers all of our views so as you can see here when it's initialized it grabs a set of test data and assigns it to the meditations property now this array represents the list of scrollable cards furthermore here's that dictionary i mentioned which keeps track of which meditations the user has purchased again this is a demo so we're just keeping it in a dictionary now let's jump over to the featured view this is that scroll view of the different cards so a card is simply one of these represents a single meditation when a card is tapped on in the featured view you can see that they're actually buttons what happens is that we present a detail view so the detail view looks like this with a button to play an audio sample and a buy button when the user taps on this buy button it calls the meditation dot make purchase method so if we go to that method right here you can see it uses the purchase service purchase method to process the transaction and it passes in a block of code to run if that transaction was successful so this block of code all that does is it updates this dictionary to say that the user has successfully made that purchase now if we go into the purchase service into this method you'll see that the code has not been written here we are actually going to implement purchases using revenue cat so hopefully that gives you a good idea of how this demo is structured and what we have so far all right now that we've walked through the app we're ready to integrate inapp purchases the first thing we want to do is go over to this root project node here go over to signing in capabilities and take note of this bundle identifier because we're going to need that to create our app store listing but on this screen i also want to make sure that you have the inapp purchases capability if you don't have this you don't see this here let me just show you how to add it click this little plus icon up here search for it and just double click it and add it then press command b on your keyboard to build this project to make sure it still builds and then we're going to go over to app store connect now this portal you only get access to if you have a paid apple developer account and if you want to submit apps to the app store and collect payment from users you're going to have to join the apple developer program once you get access to this app store connect portal one of the first things you want to make sure you have is under agreements tax and banking you want to make sure that you've signed your paid apps agreement and that the status is active because if there's some problem with this if this is a yellow icon or red icon you're not going to be able to fetch and retrieve your inapp purchases for your app and you're going to scratch your head wondering why it doesn't really tell you that this is what you need to have active first so make sure that this is green lit and active under your paid apps and you're good to go let's go back to app store connects dashboard and let's add our new project as an app so i'm going to click this blue icon here and i'm going to add a new app it's going to be ios i'm going to call this com mind demo 2. because this is the second time i'm doing this a primary language for me at least is english and here you're going to choose the bundle id for your project do i see it here no wait i do uh com.codewithchris.commind2 so that's what i have here now if you don't see yours here on this list that's okay there's just one extra step for you let me just cancel out of this menu and show you again if you don't see your bundle id in this list then you're going to go ahead and click certificates identifiers and profiles and this is another portal that you will have access to with a paid developer account this link is doesn't really work because it says register undefined so you're going to want to hit back by clicking all identifiers and then go ahead and click this blue button to add a new identifier it should be an app id select the type as app and here under bundle id explicitly add this bundle identifier right here and then put a description and scroll down to capabilities and make sure that inapp purchase is enabled and then go ahead click continue and create it and then after that you can go back to app store connect refresh the page try to add your app again and it should be in this drop down here so i'm just gonna go through those steps again call mind demo 2 english call mine 2 and user access should be full this is just for your own management of your app store connect portal if you have multiple users managing your dashboard i'm going to click create give it a little bit of time and then you will have had your new app store listing created there we go all right now for step two adding our inapp purchase it's actually pretty easy to add an inapp purchase for one app purchases all you have to do is go down to manage inapp purchases down here wait for this slow slow portal to load all right so here we see inapp purchases at zero let's click on this little plus icon to add our first one here you'll read about a couple of different types we are going to add a onetime purchase that is nonconsumable meaning that once you purchase it you'll have it forever so perfect for unlocking books unlocking meditations in our case and generally opening up extra features or content that the user will have forever from this point on so let's choose nonconsumable and click create and here we have a couple of um different things we can add so for reference name um this reference name is just internally for us it's going to be used in our reporting sales and trends reports and stuff like that so i'm just going to call this calm mind which meditation do i want us to buy i'm not going to do all of them because they're basically all the same i'll choose reflect and the product id should basically match what we have here or the other way around what we have here should match what we put here so whatever we put as the product id for this inapp purchase inside of our data source wherever that might be the database json file or in our case dummy data these product ids should match it because when we try to purchase when we try to make this purchase we have to reference this product id cleared for sale we can check this this means that when it gets approved because these things get reviewed when it gets approved it's automatically going to be available for sale if you don't want that to happen maybe you're saving it for a later date then just uncheck that okay so for pricing i'm just going to make these tier 1 which is going to be a dollar 39 canadian and localizations if you want to localize for other languages you would add additional languages here for me uh just english so i'm going to put reflect meditation i'm just going to put the same thing for both or you know what yeah i'll put the same thing for both um this is optional for this review information you actually have to put a sample screenshot here so let's click this yeah it's just for their review so essentially you want to put a screenshot of how it looks in your app but since this is just a testing for us we're going to put just a blank image i'm coming to this documentation to show you what sort of dimensions that image should be under here app review screenshot you can see that it should be 640 by 920. so i just went into my graphics software i use figma and i generated a a blank image exactly of that size so that's what i'm going to upload here at review placeholder and as you can see it's not that one i guess i'll have to create a brand new one so no matter let's go to figma this will be good to show you anyways i'm gonna go into my drafts let's click on plus and i will create a new one i'll just grab that and say what was it six forty by nine twenty just double check that six forty by nine twenty that's right and i will just draw a rectangle sure make it great and then i will export this image i'll make it a jpeg and export this as placeholder and then i will go back here i'll choose that file and upload that and that's it so let's hit save and then we can begin testing with this in that purchase and trying to buy it okay so the status if you go back to inapp purchases right here the status needs to be ready to submit it hasn't actually been reviewed yet when we actually launched this app into production we're going to want to submit a description for this inapp purchase and the actual screenshot and then submit it for approval but in this status ready to submit we will be able to retrieve it and try to test with it all right so now we have our app store listing we have created an inapp purchase that we can test buying the next step is to create a revenue cat account and then start processing our transactions all right to create your free revenue cat account just open a new browser window go to code with chris.com rcat and that's going to bring you to revenuecat.com and by going through that url you're letting the team know at revenuecat that you as a code with chris uh audience member want to see more inapp purchase content from them so they're going to sponsor more content in the future for us i don't get compensated for any accounts created or anything like that so if you go ahead and do that thank you so much for helping support the channel all right um you're gonna click try for free and then you're going to create an account but for me i already have account created so it brings me directly into here once you're inside this dashboard what you're going to want to do is click add app i already created a few test ones but i'm going to create a brand new one so the app name is going to be i'll call this com mind2 and the app bundle id goes back to this right here and this is something that you'll have to add this basically lets revenue cat fetch the inapp purchase information from app store connect so we're going to go back to our app store connect under manage inapp purchases for your app there is a link here app specific shared secret so click that and generate a new one and then you're going to want to copy this string right here click done and then you're going to want to add that string right there and then let's go ahead and click add and that that's it we've set up our new app within revenue cat now there are a lot of different features here but we're just going to go through what we need in order to process a inapp purchase so under products we're going to add the inapp purchase that we created inside app store connect click new and then let's give it the identifier that we put for this inapp purchase so that is just reflect so i'm going to copy that and paste that right there and i'm going to say that this is for the app store and click add now there's a lot more power and flexibility if we configure our entitlements and offerings but those things are going to be great when we do inapp subscriptions which i'll show you for now we're just going to stick with adding this one product because i want to show you how easy it is just to get up and running with processing transactions so now we're going to shift our focus over to xcode we're going to add the revenue cat sdk and then let's process a purchase so we're going to first start by visiting the documentation in the upper right hand corner of your account you can see this docs link go ahead and click that it's going to jump you straight to all of the documentation let's click on installation and click on ios now one of the ways you can install the sdk is using cocoapods so that's exactly what we're going to do here let's go ahead and open up terminal and actually before we do that let's close the xcode project and let's navigate to our project folder so i've got it saved on my desktop so i'm going to go there and the project is called com mind whoops so i actually created a copy so i'm at my desktop now so com mind copy all right so now we're going to do pod init and that is going to create a pod file in our folder and we can say open pod file and then here we can follow these instructions and add this pod in our pod file let's go ahead and save that close it and go back here and do a pod install now if you get any sort of errors take note of the error message in there because usually it'll tell you what's out of date or what what command you need to run you might need to do a pod repo update or maybe you need to reinstall and update cocoapods instead so it'll usually tell you what command you need to run if you encounter any errors all right so now that we've done that we have an xc workspace file so let's go ahead and open that so open commind dot xc workspace all right let's press command b and let's just build that make sure everything looks good while that builds let's take a look at the documentation here so under making purchases actually we're not finished configuring the uh installation part yet so if you go back all the way down here there's a part that says you have to import purchases and then you also have to initialize the purchases instance in your app so follow that link you can see here in swift in this did finish launching with options you're going to want to run or have these two lines of code right enable debugging so that it makes your testing easier and then also to configure the instance with your api key so it can connect to your instance of revenue cat now in swift ui we don't have an app delegate right but that's not going to stop us okay so this built successfully let's go to our entry point here so what we can do is we can have an init method in here which gets called automatically when this app is initialized so this is where we want to put those two lines of code so i'm just going to copy that and i'm going to put that here okay and we're going to replace this sdk key with this under api keys we're just going to copy that for our app and we're going to put that right there oh and don't forget at the top you have to import the purchases framework okay let's press command b again and build this make sure everything's running okay and now the last thing we have to do is actually just run the code to process the purchase let's jump on over to helper and i've actually set up a class where we're going to write this code called purchase service all right so before i implement this method i want to remind you about where this is being called so let's go back to our detail view here and you're going to see the buy button as soon as the preview is loaded and it's essentially this buy button that when tapped is triggering this method model.make purchase and it's passing in the meditation to purchase so let's follow this method and see where that leads us this leads us to our view model and this method actually calls our purchase service dot purchase and i created this purchase service because i wanted to keep all of the transaction code in one class and that's why i did that so this is going to call the purchase method and it's going to pass in the product id to purchase which matches you know the product id right here and it also passes in a block of code to run if the purchase is successful and so this block of code is essentially just updating this user purchases property which in turn will because it's being observed by this detail view it's going to know that the purchase was successful and then it's going to remove the buy button and that play sample is going to turn to play so that's essentially what is happening all right let's go back to the purchase service and the purchase method and we are going to perform the purchase so this is actually two different steps because given the product id we're going to have to retrieve the store kit product object and then that is the object that we use to purchase so first get the sk product right and for this we can use the purchases framework from revenue cat let's get the shared instance and we're going to look for that product id so it's got a method here where we can pass in an array of string product ids and it's going to return to us all of the sk products so c fetches the sk products for your inapp purchases given product identifiers all right so let's do that and we're going to pass in just our single product id now i'm going to force unwrap this you'll notice that it's passed in as an optional string but here i have this guard statement to guard that it's not nil so here i can safely force and wrap it and then as for the completion block it's going to pass back an array of sk products for us so i'm going to call this let's just call this products so i'm going to say if products is empty so if it's not empty then i'm going to say let sk product equal products the first one there and now that we've retrieved the sk product we can actually purchase it so here again revenue cap makes it really easy with the purchases framework so purchases dot shared to get the instance and then let's call purchase product so this method lets us pass in the sk product to purchase and then gives us a completion block for the result so first let's pass in our sk product there and let's double click this to open up a new closure it's got several parameters here so the first one is going to be the transaction and each of these parameters contains different bits of data about the transaction purchaser info the next one is error and this next one is a boolean and this one indicates whether or not the user has canceled the purchase so you know when it pops up and it says if you want to purchase it if the user just cancels out of it then this is going to be true so here inside this block i can say if error is nil that means there's no errors and not user cancelled then successful purchase and i'm going to run that block of code that was passed in that should only be run when a purchase is successful so successful purchase so that's basically it now we cannot test this in the simulator if you try this in the simulator it's going to tell you in the debug code in the console area that it wasn't able to fetch the store kit products so let me just quickly do that so that you can see what you have to do actually is plug in an actual device um and then deploy your app there and do it that way so you're gonna tap on this and tap on buy you're gonna see that it's requesting products with this identifier ambition because uh i shouldn't have tried to buy this one because we only have one product in this store called reflect so i actually should have gone to this one and tried to buy this one but either way i'm trying to do this in the simulator is going to give you this sk request failed unknown error it's not going to be able to fetch it so why don't we plug in my iphone now and try this on an actual device alright so i've got my phone plugged in you can see the screen right here and let's try to deploy this onto my phone all right let's do that all right cool so why don't we scroll down to reflection and tap that and i'm going to hit buy now you should see something like that if you've never done this before you're going to see a popup asking you to log in as a test user to perform this test purchase here's how you're going to create that test user if you haven't done this before you go into app store connect go down to users and access and then you're going to go down to sandbox testers down here and then you're going to create a new sandbox apple id so it's going to have an email it's going to have a password and after you create that sandbox account you're going to come back here and you're going to enter in that sandbox account and then you'll be able to do a test purchase all right so now i'm going to go ahead and hit purchase on mine and then you're going to be able to sign in with that account that you've created and make that purchase all right it's done so wait for it okay so you get this popup that says you're all set and then you can see that our view automatically detected because the view model updated that user purchases property right here updated this property saying that we've purchased this reflection meditation and the detail view automatically rerendered that this version the purchased version now that you've made your first test purchase you can actually see the data in your revenue cat account go over to overview and then toggle this to view sandbox data so these are all the test purchases you've done across all of the apps in your revenue cad account so all of the data is aggregated if you scroll down you can see that this transaction was the one that we just did so that is pretty cool if you click into this app user id you can even see some additional information if this user made purchases over time you'd see that here look at some of the cool data you can see first scene using the app last opened the app yeah this is just really really cool now to wrap things up i want to do a quick recap of the four steps that we went through to get to this point number one you created an app store listing for your app number two you configured the inapp purchase in app store connect number three you created a revenue cat account added this app and added that in that purchase number four you added the revenue cat sdk into your xcode project with cocoapods you initialized the purchases framework at the beginning of your app and then when the user tapped on the buy button you retrieve the sk product using the purchases framework and then again using the purchases framework you process the transaction for that purchase so there you have it in four easy steps you are able to monetize your app and allow your user to purchase something from you remember revenue cat is free to use up until you're making ten thousand dollars a month through your app and even at that point where you're making so much money it's only a hundred and twenty dollars a month so i would definitely think about using it especially at the beginning of your app when you're not sure if you're even going to make any revenue with it it's going to save you a lot of time and headache just go to codewithchris.com rcat to create your free account and you're going to need it because in the next lesson i'm going to show you how to add inapp subscriptions if you don't want to miss it make sure you subscribe to the channel and turn on bell notifications all right i have a quick question for you is your goal for app development related to generating income let me know by leaving a quick comment below and on your way down there if you want mine please give this video a quick thumbs up it really helps me out and i really really appreciate it alright i'll see you in the next lesson