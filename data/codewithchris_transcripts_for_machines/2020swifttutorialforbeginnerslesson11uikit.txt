hello and welcome to my Swift tutorial for beginners in this video I want to introduce you to UI kit which is an apple framework that contains a lot of the classes we're going to need in order to construct iOS apps alright so let's dive in and see what's available in UI kit so if you imagine most apps there are common elements between all of them such as labels buttons maybe text fields images and if we were to build each of these components from scratch every single time we've built an app it would be very time consuming and a lot of wasted effort and so Apple has provided us a library of all these prebuilt elements that we can use in our apps and they've called this library UI kit that's what we're here to discuss now UI kit contains a lot of user interface elements and I know it strays a little bit away from Swift programming which is what this series is about but one of the very interesting things about UI kit which is relevant to what we've been talking about is how they use inheritance and sub classing to create all of these different UI kid classes so I'm gonna go through that with you as well but first let's take a look at where you can see the documentation for UI kit so if you just type it into Google Apple space UI kit into a search it should be the first result when you click on that you're going to get to the reference page or the documentation page for that and then you scroll down and you can see all of the different things in UI kit you can see it doesn't just contain user interface elements but it contains other things like classes for animation touches gestures drag and drop and stuff like that another really handy way to explore UI kit which I recommend even more is just to open up Xcode if you go under window you should see developer documentation and that's what you want to click and bring up on the left hand side under Swift you're going to find UI kit near the top and it's much easier to browse this like that one of the things that they have removed is kind of a hierarchy that shows you how each of the classes are subclasses of other classes above it and so I wanted to pull up that diagram for you to illustrate how they're using inheritance and sub classing and so I googled it and I found an old image from back then that shows you how each of the elements derived from other elements and all the way here on the right hand side you're going to see this UI button here and this is your classic or standard iOS button that you would put in your view but notice if you follow the lines that it's a subclass of UI control which is a subclass of UI view which is a subclass of UI responder which is ultimately a subclass of nsobject so it's very interesting to see if you are curious about what any of these classes do you can go into this documentation which I showed you here let's say we go under button great you can see the declaration here class UI button that it's subclasses from UI control just like we saw over there in that hierarchy but if you click that UI control it's gonna bring you to that class and you can read about it as you can see it's the base class for controls which are visual elements that convey a specific action and response to user interactions pretty cool but down here you can see that UI control is actually a subclass of UI view so you click on UI view and see what that does it is basically something that you can put on the screen for the user to see now UI view is actually a subclass of UI responder what's that click into there it's an abstract interface for responding to and handling events which explains why so many user interface elements are ultimately a subclass of us responder but UI responder itself is a subclass of nsobject so what's that click on that the root class of most objectivec class hierarchies and we're gonna talk about that in a second why that says Objective C from which subclasses inherit a basic interface to the runtime system and the ability to behave as objects so it's basically what makes an object tick if you will and the reason it says Objective C is that originally before Swift language to build apps was objectivec so a lot of UI kit is actually still written in Objective C with Swift being a layer on top where you can use these classes as Swift one of the dead giveaways is this NS prefix in front of the class name usually when you see that you can expect that that is an objectivec class however whether that's objectivec or Swift that's not what I wanted to point out to you in this lesson right here what I wanted to show you was eight how Apple has created this whole UI kit library from all of this inheritance and sub classing and that's really cool to see how they organized all of the different pieces there and then B to let you know that there is this UI kit library at your disposal with so many prebuilt components that you can use to build your app now once you finish the Swift programming series and you move on to learning about Xcode and building user interfaces and stuff like that all of these classes are going to come in handy all right so at this point that's all you need to know about the uikit library i'll see you guys in the next lesson