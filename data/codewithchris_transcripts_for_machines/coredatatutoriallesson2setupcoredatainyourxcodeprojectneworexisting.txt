hey code crew in this lesson we're going to do a real example of using core data inside xcode i'll go through two different scenarios number one how to start your xcode project with core data enabled and number two how to add core data functionality to an existing xcode project now even if you're only interested in number two i would still highly recommend that you watch through part one because in part one i'm going to be highlighting the different core data components that are needed now just a quick recap of the previous lesson in case you didn't see it to work with core data we need four things number one is to define our entities and attributes in the core data model number two is to generate the classes from the core data model number three get a reference to the core data persistent container and then number four get the managed object context through which we save and retrieve our objects all right let's jump into xcode and do this all right first we're going to talk about setting up core data with a brand new xcode project and then afterwards we're going to talk about how to add core data to an existing xcode project so here i'm going to set up a brand new xcode project here and i'm going to choose single view application and all you need to do to set up core data is to make sure this checkbox is enabled so let's call this our core data demo and just make sure that's enabled and let's hit next oh by the way i am still using storyboards ui kit here so if you're following this demo you can select the same thing let's click next and i'm going to save this on my desktop now the first thing you'll notice is that enabling that use core data option gave you this file along with your new project this xc data model file and when you click that you get this visual editor to define your entities and attributes if you remember from the slide we just saw the first step is to define our entities and attributes so let's go ahead and do that through this visual interface down here click add entity and you're going to see your new entity here now you can either edit the name by clicking it once so you make it editable or you can come in here and just change the name of the entity so i'm going to use the same example as we did in lesson one of this core data series which is to use the person and family analogy we're only going to start with person for now later when we talk about relationships in core data then we're going to define our family entity as well all right so before we move on to attributes there are a couple of things i want to point out in terms of the attributes for the entity number one is the name which we've just defined number two is this this module or namespace if you have an xcode project which houses multiple modules or xcode or other projects i mean then you can define which namespace you want this entity to be a part of by default it's global so for i think for most of us who are just creating an xcode project for a single app that has one module you don't have to worry about this but just in case your project has multiple modules and you don't want this person class name to clash with some other person class name in another module then you can definitely define uh the name space here or rather which namespace this person is part of the next part is code codegen now after we define our entities and attributes when we generate the classes you can actually do that either manually or have xcode do that for you when you build and run the app by default xcode will do it for you automatically but for now i want you to change this option to manual none because i want to show you how to do it manually and then i will also tell you about the other two options because there are tradeoffs to be made so let's go ahead and select manual none for now all right now we're ready to add our attributes so under here you can click this plus symbol to add a new attribute or you can click this add attribute icon down here which i think is not as intuitive as this guy so go ahead and click add item and then you can give it a name so our first one was just name so let's just name it that and then the type let's choose string so we're going to add another one we had gender here and again this was a string now the next one was age and the type was actually an int now you'll see in the type here there's integer 16 32 and 64. if you're not familiar with what those are basically they define the size of the integer now i'm going to pull up a web page here that shows you the differences with the different uh integer types so you'll notice that there's different types of ins there's 8 32 64. and you can see that the ranges go up as this number goes up and there's also a u int version of each of these sizes u stands for unsigned which means that there's no negative range so as you can see in 64 gives you the largest range but we don't usually have to select which type of in we use right when you define in swift of a new variable of the int type you don't have to specify any of these well under the hood that int type that you specified is one of these types and it really depends on what platform your code is running on because different cpu architectures store data differently some are 32bit some are 64bit and some as you can see might be 8 or 16. there's this website here that i found specifying the different architectures of the ios platforms and you can see in here sort of what cpu architecture it's using and whether it's 32bit or not and as you can see as we scroll down this list these are the older iphones and ipods and ipads and as you scroll down to the newer ones at this point you know in 2015 it looks like everything starts to be 64bit so as you can see here down to you know the latest ones down here it's all 64bit so it's safe to say when you're declaring a swift int and your app is going to be running on one of the newer devices 2015 and above that it's going to be 64bit architecture so your int is actually an int 64 with this range so going back to the core data now what should you specify here well don't get the wrong idea just because for the age you won't need such a big range thinking specifying n16 might save you some memory or save you some space it doesn't work like that the memory allocated for that h variable will still be 64bit so you might as well just choose 64bit so that's kind of a long explanation about those about what those differences are now you might also notice on this list that we don't have array types or you know object types or anything like that well if you wanted to specify let's say an array of let's say for name for example and we wanted to specify an array of names instead you choose transformable and then over here on the right hand side for the name attribute you can set a custom class and we can set this to be a type of string array or if it's maybe referencing another custom class that you have you can put the class name there and when this entity gets generated this name attribute will be transformed into a name property of that type so i'm just going to set it back to string for now so if you want to learn more about configuring entities there is apple documentation for that talking about the different attributes and the different things you can specify i'll link this page in the description below the video now i want to talk about generating code from this entity generating the classes i mean now earlier i mentioned that there are a couple ways to do it manual class definition and category extension let's start by manually generating this so go ahead to editor click create ns manage object subclass make sure that there's a check mark beside your data model and a check mark beside your entity click next and you can just save it anywhere it's going to create two files here and typically what i'll do is create a model group and move that in there so things are a little more organized so you'll notice that there are two files for your one entity and it's person plus coordinated class and person plus core data properties let's start with this one now this one is the class declaration for person or your entity you know and it's subclassing ns managed object which i told you before that your entity or your class needs to do in order to be saved and retrieved and basically work with core data now the second file is an extension of your class so if that's new to you just think of these two files combined together is your complete person class this extension contains all of your attributes as properties and you can see the data types are exactly what we specified notice that there's also this type method here called fetch request so later on we're going to be able to generate a query or a fetch request simply by typing person the class name dot fetch request but we'll get into that part later for now the key thing i want to mention is why this is split into two classes the reason is because for this class definition or declaration here this is where you want to put all of your custom code if there are custom methods you want to put into this class this is where you would do it this one i would try not to modify because when you regenerate these classes maybe you've made a change to your model and you regenerate these classes whatever changes you've done here are going to be overwritten so speaking of which whenever you make a change to any of the attribute names or the types or maybe you add a new attribute or something like that you're going to want to regenerate those classes so then you can go ahead and delete your classes if you've if you've made changes here definitely don't delete this file only the only delete this one right here right because this is the one that just defines all of your properties but this is what manually generating your classes entails you're going to have to manually make sure that this extension this property extension here is up to date with what you've defined here now let's talk about having xcode automatically generate these classes for you so if we click on the entity and we go under code gen by default if you remember earlier by default it was set to class definition when it's set to this you don't have to manually generate the classes so you wouldn't have these these would you would basically delete these you wouldn't have you wouldn't have done this what happens instead is that when you build your xcode project those two files right there they automatically get generated for you behind the scenes you'll never see them that means you cannot edit them so a drawback with having xcode automatically do this for you is that if you wanted to put some like custom logic or custom methods in your person class you can't because you won't have these two files to modify but the advantage is that you don't have to manually make sure that these this file is up to date with whatever you've defined here because every time you build your xcode project those two classes will get regenerated behind the scenes so what we've done here is we've manually generated these and i have the entity set to automatically generate it on build what's going to happen if i build the project now well i'm going to get an error because what's happening is when i hit build on xcode it's trying to generate those two files for the entity because i've set it to that but it also recognizes that i have these two files here in my project so it's clashing if you look at the error it's going to say you know multiple commands produce that file so this is what you don't want in order to fix a problem like this you can simply go ahead and delete these move these to the trash if you want to ultimately have xcode automatically generate them to you for you i mean you move these two files to trash go to product and then clean build folder make sure you remove any artifacts and then you can rebuild your project or if you want x if you want to manually do it just set this to manual none but you cannot have a combination of having xcode automatically generated for you and have these existing in your xhoop project all right so now for the last codegen option which is category extension when you have it set to this xcode is only going to generate this extension file for you automatically which means you can go ahead and delete this now this is sort of like a happy medium you can just straight up move it to the trash um this is a happy medium because you still get this one file which you have to manually generate initially and then you go ahead and delete that category extension file but now you can add your custom logic in your custom methods and you don't have to make sure that the extension containing all of the properties is up to date with the model because having it set to a category extension for the code gen every time you build your xcode project it's going to generate that half of the class for you and right now i have an error probably because i didn't build my build sorry clean my build folder as you can see it's still complaining multiple commands produce so i'm going to go back to product clean build folder and i know that having this code gen set to category extension and having this other half here if i press command b i'm going to get the full definition of my entity so i guess to sum it up manual is full control right you have to generate two files but you have to just make sure that it's like congruent with what you've defined here class definition is no control you don't get to add you don't get to modify the classes at all it gets generated behind the scenes when you build the xcode project and category extension is it automatically generates half of it for you and the other half you can customize the code okay so now we've defined our entities and attributes we've generated the classes now we need a reference to the core data persistent store well when you created this xcode project and you enabled use core data in the app delegate it's actually set up something additional for you down here you can see that now we have this persistent container property and this lazy keyword just means that it's not going to run all this code and create that container until you access it for the first time but this is your core data persistent container and it's a property in your app delegate so that's how you're going to access this persistent container as you can see here this name here maps to this core data this data model file right here all right so because this property is in the app delegate we can access it from any view controller or any other class in our entire project all right now let's go into the view controller and let me show you how to access the persistent container from there so we need a reference to the persistent container you can access the app delegate first by typing ui application i don't know about this one but this is how i would normally do it uiapplication.shared.delegate and you can see that it's optional here but the type is ui application delegate but we got to cast it as our app delegate right and then now that it's our app delegate you can access the persistent container property right so this gives us access to that core data persistent container but if you remember from lesson one we don't interact with the core data persistent container directly we use the managed object context and in order to get a reference to that so that we can use the manage object context we just have to access a property on the persistent container called the view context you can see the data type for this is ns managed object context so this is actually what we need in order to store our data retrieve our data from core data and all of that but don't worry i'm getting a little ahead of myself because in the next lesson we're going to look at creating retrieving updating and deleting data through the managed object context for now i just wanted to show you how we can access the persistent container and also the managed object context now before we go into adding core data to an existing project i just want to show you one more thing in app delegate because aside from this persistent container property there was also another thing down here called it also added this save context method and as you can see all this method is helping you do is it's getting a reference to the managed object context and then detecting if there has been any changes to the data and then saving right so it's just an easy way for you to save changes to your persistent container so you can do it by simply calling the save context method of the app delegate okay so when you start a new xcode project and you enable core data right off the bat you get the core data model file included and in the app delegate you have methods to access the core data persistent container and manage the object context now if you have an existing xcode project that you want to convert to using core data you won't have these things currently in your xcode project now let me show you how to add them so that you can use core data all right so now let's say you have an existing project that you didn't set up with core data so i'm just going to create a test project here and i'm gonna i'm not gonna enable use core data let's create that there and so let's say this is your existing project well all you have to do number one is add that data model file so go ahead and add a new file and under core data choose data model right and you can save this with whatever your name of your project is so i guess i'll call this testproject.xc data model and here you know you have your entities you're going to define your entities and attributes as normal um also in appdelegate you'll notice that you do not have that persistent container property that i showed you and we don't have that save context method as well so you would just essentially add that code here but i don't really know that code by heart and i don't expect many people will so what i usually do is i create a brand new xcode project with core data enabled just to get that code and i'll copy and paste it in here so i can take that demo that we were just working on and i can copy this right that's the persistent container property but you have to make sure that this name right here matches that right so test project and that's the that's the core data data model file that you added and you also have to import core data at the top because otherwise the classes wouldn't be recognized right and then you can go back to your other project and just copy the saved context code over as well and it's as simple as that now the other thing is in an existing project you probably have your own model files already or your own model classes i mean you would have to redefine them as entities here along with their attributes and all of the relationships which a couple lessons later we'll talk about but you'd have to redefine all of those things and then regenerate the classes to replace your current model classes and then you would also have to alter the way that you get the data and in the next lesson you'll learn how to create retrieve update and delete data from core data so you're going to have to modify your existing project a little bit so that it uses that managed object context to fetch the data save the data and all of that stuff all right so in this lesson you learned how to set up your xcode project to use core data now i want to turn over to you have you used any other database solution before aside from core data let me know by leaving a quick comment below and lastly if you learned something new in this video please give it a thumbs up it's going to help youtube give this video more exposure and i highly appreciate it so thank you so much in the next lesson you'll learn how to create retrieve update and delete data from core data so i'll see you there number three is get a reference to our core data persistence container let me try that last again last sentence again no what the oh man this is dying on me let me see oh damn it okay