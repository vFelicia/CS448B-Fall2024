hello and welcome we're almost there in this lesson you'll add logic to the project so that once we flipped two cards if it's a match we'll remove them and if it's not a match we'll flip them back down you're also going to learn about something called optional chaining which is simply a way to safely call a method or access a property of an optional type that may be nil all right so let's do this alright so we're going to implement the logic for the game and just to remind you how it works the first time you flip a card nothing happens it just flips and you're going to have to flip a second card to determine if the two cards match now if it's like that and they don't match then there's going to be a little bit of a delay so the user can see that they in fact did not match and then you have to flip over another two cards to see if they match if you do find a match the two cards of that match disappear leaving empty spaces where the cards were so let's go into our code and implement this sort of logic if we scroll back down to the did select item if you think about it we need to determine if the user has flipped over a card already when they tap on a cell we need to know is this the first card they flipped over or is it the second card that they flipped over so we need a property up here to keep track of the first card that was flipped over so why don't we create one here and we just call it first first flipped card and we'll make this a type of index path because that is what the collection view gives us when the user selects a cell and we're going to make it optional so if it's nil that means it's the first card that was flipped and then we'll just set this property when you're flipping over another card we're gonna check this property if it's nil that means it's the first card if it's not nil and it does contain an index map that means it's the second card that was flipped over so let's scroll down to here and in the did select item at method we're going to have to change some of our logic if the card has not been flipped over yet before we flip the card or actually we we would flip the card in either case but we need to determine if it's the first card or second card that is flipped over so we can say if first flipped card is nil meaning that this is the first card being flipped we are going to set first card or first flipped card equal to the index path that was passed in else this is the second card being flipped we need to put a to do here to perform the matching logic so let me just add some white space here so that we can more easily read these comments so you know how before we had Oh knock capital I index path I want to return the index path parameter so it's lowercase annex path you know how before we had this if statement to determine if the card was flipped over first and if it wasn't flipped over we would flip it however if it was already flipped over we'd flip it back well this part was just for fun because in a true match game you're not allowed to flip cards back over by yourself you have to reveal two cards and if they don't match then both of them get flipped back you don't get to tap on a card to flip it back so we're just going to erase this chunk of code right here so the user can only flip cards over to reveal them and at this point the logic that we have is if the card hasn't been flipped yet we will flip it and then we'll set the status of the card and then we will determine if it's the first or the second card has been flipped over if it's the first one then we are simply going to keep track of the index path and if it is the second card we are going to do some matching here so instead of performing the matching logic right here I am actually going to create a separate method to do the matching logic because it's going to end up being quite long and we want to add the method after this did select item method but you have to be careful where the brackets lie because you don't want to accidentally declare a method inside of another method so this last bracket we know that this is for ending of the viewcontroller class and this next one is going to be and the did select item at method so we actually want to declare it right here we can create a different section so if we pull this down we're going to see see even this keyword right here to do it actually puts it in this short list so you can see if you leave yourself a little todo messages you'll see them here so we have the UI collection view protocol methods which are these three and then we just create a new section for the game logic methods so right here is going to be check for matches and what we're going to pass in is actually the second flipped card index or just call it yeah index and this is going to be a top of index path now just to stay consistent let me just open up these brackets first now just to stay consistent with my naming you see how this property is called first to flip the card and then I named this parameter second flipped card index I want to change this property name to also contain the word index so I'm scroll all the way up here and change that property to contain index and a press command B I know things will break because I just changed the property name so I need to go back here and update these to also add the word index all right so we should be good now check for matches what we're going to do is get the cells for the two cards that were revealed get the cards for the two cards that were revealed kay sounds a little off but you'll see what I mean in a second let card one sell equal to and we did this before using the cell for item at and we pass in the index path right so the first card we are going to use the property first flipped card index right and we're going to try to cast it as a card collection view cell and I'm going to use this question mark one because as I was building this there were some cases where it could not find the cell for this index path and I will reveal why later on in the lesson so this first flipped card index is an optional so that's what this is complaining about because it's an optional we need to unwrap the optional to get at the value inside now this could contain nil or could actually contain the index path for the first flipped card I'm pretty confident that it does I'm going to put an exclamation mark there if it does become a problem where sometimes this might be nil then we will check it before trying to use it but the idea is when I'm coding this app I would only call check for matches if it's the second card that has been flipped over so in that case there should be something set for this property right here first cardindex all right so let card to cell equals collectionview sell for item at and this one is going to be second flipped card index again I'm going to optionally cast it as a card collection view cell okay and now we're going to get the actual cards that those two flipped over cells represent so card 1 equals card array first flipped card index I'm going to unwrap it like that again and I'm going to let card to equal the second flipped card index actually I need to do dot row sorry this would be dot row as well because the row property of the index path contains the actual index of the cell so all of these warnings are basically just saying that we declared all of these constants but we're not really using the constants anywhere little does exco know we are just about to use it compare the two cards so what we're going to do in order to determine a match is we are going to take the image names of the two cards and we are going to compare them if they're the same it's a match and if it is a match then we want to set the status of the cards set the statuses of the cards and also to remove the cards from the grid else if they don't match it's not a match we are going to set the statuses of the cards and we're going to flip both cards back and then at the end of the day whether they are a match or not we need to reset the first flipped card index back to nil so that we can repeat the process and start all over basically let the user flip two cards over again so we need to reset this little property here okay so it's a match we're going to set the let's see what that says there cannot call value of non function type string let's take a look at the cards image name oh I forgot the if statement here there we go we're doing a comparison and we need this if here that's what the issue is so we're going to set the statuses of the card if it's a match so if card one is a match we're just going to say that is match that's true car two is matched is also true remove the cards from the grid we actually don't have a method for removing the cell so we're going to go to card collection view cell here we have a flip we have a flip back we're going to create a new method here called remove and this one removes both image views from being visible so I'm going to put it to do animate it but for now I am simply going to set the Alpha to zero and setting the Alpha to zero is just going to make them invisible so alpha is kind of like opacity it basically goes from zero to one so I'm setting the opacity for both the back and the front image views to zero so that's going to make them both invisible so back here in the view controller if it is a match we're going to set the status of the card objects and we are also going to set card one cell and I am going to put a question mark here dot remove and just to remind you about what that is this is called optional chaining so if card one cell turns out to be nil it is not going to call this method however if there is an actual object in this optional then it will call a remove card to sell in the capital C and that's just a way to protect ourselves from crashes because as you can see up here in card one cell this constant I am assigning into it I'm trying to get the cell for this index path from the collection view and then I'm trying to cast it as a card collection view cell if something goes wrong in this statement it's going to assign nil to card one cell same thing goes for this statement we're here if it can't find the cell for this index path or it can't cast it as this type then it's going to set nil into car to sell and if I don't do this if if I don't use the question mark and you know I just unwrapped it and try to call remove if it's nil it's going to crash so by using optional chaining like this it's a safe way to try to call this method if it happens that card one cell is nil then it just will stop there it won't call remove and it things won't crash okay so now let's set the the other possibility if the cards are not a match then we are going to set the status of the card we're going to say card one dot is flipped is false because we're going to flip them both back card two is flipped is also false and we are going to call flip back on card one cell and car to sell the thing is again it might be nil and actually Xcode automatically inserted this question mark for me let's try that again don't flip back oh that's pretty cool so yeah it understands that card one selling car to sell maybe nil so it just automatically put this question mark here I'm doing optional chaining just in case flip back may be called on a nil and this flip back there's no delay so in fact this is going to happen SuperDuper fast and we might not even see that it's not a match so let us address that if you I don't know if you knew this but if you rightclick on a method you can jump to definition and jump directly to that method so here we have the transition from front going to back it's just basically flipping it back over and if we want to put a delay on that there is a very easy way to do that it's called dispatch queue and this dispatch queue it manages the execution of work items each work items submitted to a queue is processed on a pool of threads managed by the system in short think of it as almost like a conveyor belt of tasks so what we're going to do is we can actually and there is a particular method called async after which we're going to use so this one has a deadline which is a dispatch time we're just basically going to take the current time plus half a second to create half a second of a delay and inside the second parameter we can put the block of code to execute after that delay so for this deadline parameter we have to specify a dispatch time which is another class the handy thing about this class is that it has a a type method called now and that basically returns the current time or current system time and then we can basically take that and add half a second to it now in this execute parameter we can just double click it to open up a block of code and we can just take this whole chunk basically our animation and we can paste it in there and that should be okay okay so inside a block of code that you pass in as a parameter we have to be more explicit about what these are referring to and so you need to put self in front of these properties to indicate that they are properties of the card collection view cell and Xcode is going to remind you of that anyways if you forget so I think at this point we are ready to run our project all right let's try it out oh we are not ready yet because in the view controller when the user selects the cell right here if it's the second card being flipped we forgot to call our check for matches function and we're going to pass in the index path all right let us run the project now so first card and I'm going to select the second card I know this one is not a match because we haven't really randomized the cards yet this is great for testing so did you see that if that was too fast you can we can make the delay for the flip back method a little longer but however if it's a match let's see if they get removed okay there we go they get removed so fast that we can also add a little animation to that you see that however if you flip over a card that doesn't match both of them get flipped back over all right so let's work on in the card collection view cell let's work on the remove method right we want to animate it and actually it's going to be pretty easy to do that so this is we actually don't have to animate the back image view because that's behind the front one anyways so let's just set that alpha to zero right away and we simply want to animate it using a type method of the UI view called animate we want to use this particular one that has a delay parameter so the time interval let's just say that it's going to be 0.3 delay is 0.5 samesame delay as we have for the flip back here the options we can press dot here and we can choose an option curve ease out causes the animation to begin quickly and then slow down as it completes so we're gonna choose that one animations we are going to double click that it's going to open up a code block for us inside this code block inside these curly brackets we were just going to cut and paste that piece of code in there which is basically setting the front image view to alpha 0 and for this completion parameter basically code to run when the animation is complete we're gonna put nil because we don't have any code to run when the animation is done so here Xcode is telling us again because this code ins is inside a block or it's actually called a closure and you'll learn more about that and it's being passed in as a parameter we have to be more explicit about what front image view is pertaining to and by adding self here you're telling it that it's a property of this card collection view cell alright so I think that will give us the desired effect so let's run it again and test it out right tap on that tap on that that's cool you can see it both fade out you have a little bit of time to see that they are a match if they are not a match they're gonna flip back over so before we end the lesson there are still actually a couple of things we still need to do so for example if I flip over to cards and they're matched I need to make it so that I can't tap on these cards anymore and it looks like I can't but actually I probably am flipping them over because in this did select item function right when the user taps on a cell we are only checking the is flipped property we also need to check that the card hasn't been matched yet because if it's already matched then we shouldn't be doing anything with that card right even if they're trying to tap on it so we're gonna add an end parameter here and we're also going to say if is matched is also false only then do we want to allow the card to be flipped over and remember how I told you that the cells get reused well there is also some weird behavior here so you can see how these two cells are matched right when I scroll them out of view they're going to be reused for something down here now when I scroll up again and these cells at the bottom row are not now out of view and they may be reused scroll all the way up and it needs to display oops these two cells up here you can see that there's a card here I thought we matched this right the reason for this is because in our card collection view cell in the set card method we are not considering if the card has been matched already or not we are only determining if the card is flipped up or flipped down right so we also need to determine if the card has been matched already so let's add an if statement here so if the card is matched is true then what we can say is simply back image view dot alpha should be 0 and front image alpha should also be 0 and then we can just use the return keyword right here and it's going to exit the method and it's not going to run any of this code down here however if the if the card isn't matched yet then it's not going to run this code and it's going to run it's going to continue on running the rest of this stuff so let's give that a try so if we match these two and we scroll all the way down scroll all the way up they will stay like the hunt on that card actually disappeared we actually need to do the reverse here because what happened is that it in displaying the cell it reused one of the cells that was matched before so we actually have to copy that paste it there and set that alpha to be one like that so if the card is matched already then we want to make both those image views invisible and then we exit out of the method otherwise we want to make them visible so we should comment that but let's just test this out first okay so let's add some code here if the card has been matched then make the image views invisible if the card hasn't been matched then make the image views visible okay now there's one more issue that we need to address let us go to the card model because it's easier to demonstrate if there are not so many different types of cards I'm actually going to change this arc for random from 13 plus 1 to just 0 plus 1 and just to get all of the cards to be the same all right so all of them should be the same okay cool so the problem is if I let's say top on this card right here and then go down and I tap on this card and I go up you see that this was still visible even though I matched it with this card down here right and I scroll back up and it's gone so what is happening there see if I can repeat it this what this one is a little harder to catch because it doesn't always happen and it has to do with how the collection viewer uses cells again so I just matched it with this one right this happened again so this one should have disappeared but it didn't so what's going on with this so what's happening is when the user taps on the first card we keep track of the index path with the first card flipped index property and this is something that we declared at the top of the view controller class if you remember it basically keeps track of the first card we flipped now when the user Scrolls all the way to the bottom of the collection view and they flip over the second card there may be a possibility that the collection view recycled that cell of the first flipped over card and it basically used it it took it and it used it for another cell that we are looking at now on the screen so when the user flips over that second card and we determine that it's match we call the remove method on both of the flipped over cells except the problem is the cell that represented that first card has been recycled and and is no longer there well you might ask why does an Arab crash then well the reason is because we used optional chaining when we called the remove method if you remember we called card one cell question mark dot remove and card to cell question mark dot remove so it removed the second card because that was a valid cell but we were never able to get the cell that represented card one so we couldn't call the remove method on that cell so when we scroll all the way up and it displays that cell it hasn't been removed and how we're going to solve this problem is we're going to force the collectionview to reload this particular cell and it's actually got a function or a method to do that let's go back to the view controller inside the check for matches method at the end right here we are going to tell the collection view to reload the cell of the first card if if if it if it is nil okay so we're going to say if card one cell is nil then we're going to call collection view dot reload items at and this one reloads just the items at the specified index paths and you have to put the index paths into an array even though we only have one that we want to reload we're going to reload the first flipped card index and I'm going to unwrap it with an exclamation mark because when we call check for matches we only call it after this has been set anyways because we only call this one the second card is flipped and while we're here let's write a comment here reset the property that tracks the first card flipped all right so this should solve the problem that we are experiencing let's refresh the app or run the project again I mean okay so we're gonna tap on that scroll down tap on this it's a match we're gonna scroll back up it's gone you can do the same and I can safely say that I think the problem is solved as you can see before we implemented that line of code we were seeing it happen two for two but I am you know this is like the fifth match and it's not happening so it's good now the last thing to do is just to change the card model back so it randomizes between all of the different cards okay so let's run the app again just to make sure that we're getting different cards all right okay so that's where we're gonna end off in this lesson it's looking pretty good isn't it in this lesson you got more practice with functions if statements and a lot more you also learned about how to delay the execution of code I just want to remind you that if you're serious about learning how to build apps you should be trying to build this on your own computer if possible don't worry if you're making typos if you keep having to refer back to the video or the cheat sheet for syntax or keywords or things like that this is completely natural over time if you continue typing this stuff out you'll automatically remember all of the key words in the syntax I must have typed out thousands of if statements by now it's just the best way to learn in the comment section below let me know if you're typing this out and trying this out on your own computer or not and finally if you like this video please subscribe to my channel and if you don't want to miss the next video hit that Bell icon as well so thanks for watching and I'll see you guys in the next lesson