hey guys welcome to lesson 4 of how to make iphone apps with no programming experience in this lesson we're going to talk about the anatomy of an iPhone app we're going to go over the major components that all iPhone apps have in common so before we dive into Xcode and show you how the app project represents those different components we're going to go over the different parts of an iPhone app first the first component is the view and this is what the user sees and interacts with on their phone the second component is the view controller and the view controller manages the view we're going to go into what that means a little later in this lesson the third component is the model and the model manages the data for your app ok so how do these three components work together to form a functioning app well the view controller sits in between the model and the view and manages the communication between the two so for example the view controller may ask the model for some data for example a list of contacts and then the view controller will pass that data to the view to render it to the user now similarly if the user interacts with the view and let's say deletes the contact then the view controller gets that interaction or gets that message and passes it to the model to tell it to remove a contact because the model manages the data so as you can see each component has its own set of responsibilities and a role within the app and they must work together to form a functioning app now this division of labor and the way that the communication happens between each component is a wellknown design pattern in programming called Model View controller pattern or MVC for short and a design pattern is simply a best practice pattern or way to solve a common problem iOS development makes use of this design pattern heavily to structure the way that apps are by following this design pattern it's easier to maintain and change the code in the future if necessary because each component has a welldefined and contained set of responsibilities it's easy to swap in and out the components in the future if you need to make an update and it also helps with troubleshooting your code if you have a bug in your code depending on what sort of bug it is if it's a display issue or a data issue you'd know where to look instead of if all of the responsibilities were merged or melded together you would have to look at the overall project instead of just a single component in the next lesson when we build our first app I'll point out to you where these different components exist in the app project