hey code crew thank you so much for your comments in my last two videos telling me which api's you'd like to see me work with here's a short list of api's that i've gathered from your comments if I've missed any please let me know now over time I'm gonna cover all of them but in this video I'd like to teach you guys the skills to work with any sort of API you'll learn how to work with SDKs as well as how to manually roll your own request to send to API endpoints hi I'm Chris and if this is your first time here welcome to code with Chris where we'll teach you how to build an app even if you've never coded before now before we dive into the wonderful world of api's I highly encourage you to comment below with what specific API you're looking to work with because if you're watching this video then that's your goal right tell me what that lucky API is and on your way down there if you wouldn't mind giving that thumbs up button just a little tap that really helps the channel and I really really appreciate it alright so let's talk about api's when you're working with an API you will encounter one of two things either they have an SDK for the platform you're working with or they don't for us building iOS apps we're looking for an iOS SDK now if you're not familiar with what an SDK is check out this video it stands for software development kit and it's basically a library of code that is going to make our life easier working with that specific API you pop the SDK into your Xcode project and you use the provided classes and methods to interact with that API all the nittygritty details are abstracted from you let's take a look at an SDK example from one of the api's that you guys suggested the Spotify API one quick thing before we dive in support for this video comes from atlanticnet a hosting solution provider of healthcare HIPAA and PCI compliance whether you're starting fresh or need a new provider atlantic dotnet can help you succeed with fully audited solutions and 25 years of experience try atlanta net to develop test or launch your next project these guys won't let you down right now they're offering a free one gig virtual server with SSDs and block storage for free for a year and free snapshots for one year two plus twentyfive dollars in free credits to use on any other services they offer easeofuse something that I like as it frees up my mind to focus on coding I also like that they have roundtheclock phone support so if I happen to get stuck I can contact them easily so visit Atlantic dotnet slash code with Chris and enter the code Chris they get your twenty five dollars free credit to give them a try simply visit Atlantic dotnet slash code with Chris and after you sign up use the code Chris to get $25 free credit alright now let's go back to a Spotify API so here we have the Spotify iOS SDK but for the API that you want to work with just double check if they have an iOS SDK or an SDK for the platform that you're building for in the case of Spotify they do have SDKs for several different platforms and they also have their Web API so if there is no SDK for your platform you can always manually create requests and send it to these API endpoints and parse the response and this is something I'm going to show you a step by step example with later in this video for this example for Spotify I wanted to run through their SDK because I want to show you an example of what you might encounter for the API that you want to work with what do you do when you find out that they do have an SDK so for the Spotify iOS SDK usually with any platform if they do have an escape they're gonna have tons of documentation for you as is this case if you take a look down the side here you'll see tons of great stuff scroll down a little bit this just tells you what it's about and what I can do but I usually look for tutorials and examples and QuickStart any code samples that's always good so if you take a look at this QuickStart here are the steps that you need to do so register your developer app and this is common for most API so I would say you have to register for an API key that you pass in along with your API calls so that they can identify who is making those API calls and they will also rate limit you so if your app is making too many API calls too often then they can temporarily either rate limit or D act your API key to prevent that abuse that's what it's for also the next step they tell you here is to install the Spotify app now I thought this was really strange to begin with because why would I need this Spotify app and it turns out that one of the features of this iOS SDK for Spotify is to have your app be a remote control I guess for the playback that is happening in the actual Spotify app on your computer so you can kind of stay in sync with what's playing on the Spotify app next is to download the iOS SDK and this is this is what we're after right so it is hosted on the github repository and this actually leads to the changelog page okay so this is the main page of the iOS SDK where the code is hosted and stuff notice that there is a demo projects folder and if you check in here there's a ton of samples that you'll probably want to browse through if you're using this SDK now typically on the front page of the github repository they'll have kind of the key information for how to install the SDK and how to use it as well in the past I've done videos where we integrate SDKs using cocoapods but sometimes that won't be available so you're gonna have to manually integrate this SDK into your Xcode project cocoapods makes it really easy if you want an example of that check out my video here where I integrate the firebase SDK into Xcode with cocoa pods so in this case the Spotify iOS SDK doesn't have a cocoa pod so we're gonna have to do it according to their instructions if we take a look at under the tutorial section you're going to see just how to do that so here it says download the framework from the top of the page install the Spotify app which we already know about register your your application so get an API key or a client ID they call it here and then you're gonna add the Spotify iOS dot framework to your Xcode project so you literally just drag it and drop it in there and this is the thing that you you got in step one up here and then you're gonna have to set some values in your pee list and then you can do some of the setup code that's outlined here but in general just as some general advice working with an SDK is going to be mostly reading documentation and being able to follow instructions so your experience is really going to be dependent on how uptodate this documentation is you know and how accurate is it let's go back to the Quick Start for a second so after you've integrated the SDK into your Xcode project usually they'll give you some QuickStart or sample code to get you up and running with using their SDK and API so what I would do is follow some of these directions and kind of see if you get the result that's expected now hopefully they have a lot of code samples and explanations on how to use the various features of the SDK but if they don't what I would do is look for a reference of their classes and methods in their SDK because remember it's just a library of classes right so if you take a look at what the classes are dive into these references take a look at what methods what properties are available and then you know read the descriptions there you'll also get a really good idea of what's available inside this SDK so actually integrating this Spotify SDK and diving into it is beyond the scope of this video I mainly wanted to show you kind of what you would do if you encountered an iOS SDK for the API virchow's now if the API that you want to work with doesn't have an SDK for your platform then let's take a look at what we do now if there's no SDK for your platform don't freak out we can still work with the API the manual way using iOS networking classes that means we're going to create our own URL request specifying our API key the header parameters the data in the body and we're going to send that request off to the API endpoint and when we get the response back from the API we're gonna have to manually parse that data to use it let's take a look at an example of manually hitting an API using one of the pS that you guys suggested rapid API so one of you guys mentioned rapid API in one of the comments you left for me and I thought it was interesting so I checked it out it turns out that it's an API marketplace one SDK one API key one dashboard so that sounds really cool but the thing is most of these api's are basically they have a free tier but then there are paid tiers for more access so the free tier gives you you know an X number of calls per month and then if you're serious about it and you want to use more of that API then you have to start paying the cool thing is that the data is really good I mean I recognize a lot of these platforms and api's and if you're serious about the app that you're building you need to get your data from somewhere and the data needs to be good right so it really depends what you're looking for but even if you don't want to pay for API usage this is still a really good place to kind of learn the ropes with working with the API because the documentation is really good and there's a lot of sample code and so I decided to pick one of the api's here from Rapid API and show you guys how to make a manual API call so the API that I've chosen to work with is an OCR text extractor API because I'm actually really bad with receipts I lose them in random pockets and when I do remember to take an image of it to later upload to Dropbox I still have to remember to name it properly put it in the right folder and it's just the hassle so one of my dreams has been to create an app that's specifically just for me and for my situation where I can take a picture of the receipt have it extract the location and the date and time and all that stuff and then just put it into Dropbox for me without me lifting a single finger just having taken the image and you know that would be a perfect use case so that's why I'm interested in this particular API now what we're gonna do here with this API is to manually make an API call from Xcode or from Swift so just taking a look at what we have here we have four endpoints two of them are get which is to retrieve some data here we listing out the OCR engine options language options not really interesting this is more interesting here we're posting this is usually submitting data so this one is extracting text from an image URL as you can see here this is a code snippet and see this is the cool thing here you can choose Swift as your language or you can take a look at how to perform this API call in Swift you can see here one of their parameters is actually the image URL now this end point here is extracting text from an image file so you're actually going to be passing in the entire image data so I'm going to be showing you how to use this one this image is actually just the Google logo right here so it should be pretty easy for their engine to extract but rather than taking this snippet we're going to just manually type it out so I can explain things along the way the documentation here on this column these are the parameters that you're going to need to specify and yeah but before we dive in and write this in Xcode I need to do a highlevel explanation of what's going on just in case you're brand new to iOS networking so first we're going to create a URL object pointing to the API endpoint that we want to hit and then we're going to create a request object passing in that URL but we can't send the request off just yet we have to specify those header parameters and that body data that's required by the API in order for our request to be accepted and actually do something so we're going to refer to the documentation and pass in all the required parameters and the data and then we're going to set that in our request object and then we're going to use the URL session class and we're going to fire off that request and capture the response from the API alright with that said let's jump into Xcode and do this so I've got an Xcode project open right here and I'm just gonna write some highlevel comments just to keep track of what we're doing so we're gonna have our URL we're gonna have URL requests oops requests we're going to specify the header specify the body set the request type and we are going to get your session we're going to create the data task and finally fire off the data task which is essentially making the API call so first let us create a URL object we're gonna have a string URL the funny thing is that the endpoint is not really specified here I had to check the sample code to actually see that the endpoint is this right here so that's the endpoint that we're gonna hit oops as a string and when you create a URL object like this it could be nil and so no we're just gonna guard your L not equal nil else just print you're creating a URL object and then now we're gonna create a request actually this one's gonna be a bar because we're gonna have to modify it it's not gonna be a constant so URL sorry request from a URL now you can just use this one where you pass in the URL or you can have this one where you can specify a cache policy and timeout interval in here in the documentation it doesn't really tell you what sorts of things to set for that but taking a look at their sample code I can I can see that they when they create their request that use a time interval of 10 and they use this sort of cache policy right here so I'm just going to mimic that so for this cache policy use protocol cache policy and the timeout Phil is 10 and I'm gonna pass in the URL and force unwrap it because we've already checked that it's not nil so there's our request but it's not ready to go yet we have to specify the header now if you take a look at the property for specifying or adding the headers to the request it's an optional dictionary of string where the keys are strings in the value are strings all right so that's what we're going to need to specify let headers equal so that's gonna be our dictionary let's take a look at what keys we need so this is going to be a key this is going to be the value this is going to be a key this is going to be the value and this is my API key right here and also this one in this one right here so this one I'm just gonna copy and paste from here to save myself some typing but as you can see this is the key for that parameter and this is the value for that right and then you have comma and because because this is one key value pair in your dictionary right and here's the second key value pair there's the key for that guy and there's my API key you know don't try and use it because I'm I'm gonna cancel my subscription here so it's not going to be valid anyways but that's the value that's sort of that that's the value for this parameter and then we have a cept string just like done here but there's also this content type application for it / JSON and that basically indicates what data type the body is of the request so I'm gonna copy that and I find it funny that they didn't have it here because I mean it's not immediately obvious for everybody especially people who haven't really worked with manually creating their requests before alright so those are our headers right and we can set it request thought all HTTP header fields and headers I'm actually gonna call it just header ok now specify the body so the request HTTP body expects an optional and data object so what needs to happen is down here in the documentation it tells us what sort of data it needs in the body but we need to turn this JSON object into a data object so what we do is we start specifying the body as a JSON body JSON object like that so in Swift that would be a dictionary right and you would have key value pairs representing that now obviously you would put your own like whatever URL that you want to hit and extract text from let's take a look at what this error is specifying here insert as string any yes so for this JSON object here we have all of the keys are strings as you can see here but the value is mixed like we have strings here we have boolean here we have string here so this is going to be as a type of dictionary where the keys are strings and the values are any right so that's our JSON object that represents our body but remember we need to turn it into a data object so we're gonna try to turn it into a piece of data I'm gonna call this request body so we're gonna use JSON serialization dot data and we're gonna pass in our JSON object here alright and take a look at this it throws so we're gonna have to wrap this in a do catch block and use the try keyword and so we're gonna pass in the JSON object here and the options is going to be fragments allowed and we got to put the try here and I'm gonna do do all right so put that in a do block catch any potential errors error creating the data object from the JSON all right so we have our and then here we are going to then set the request HTT body equals request body okay so now we've specified our header parameters and we've also specified our request body right we've taken this JSON object turned it into a data object and assigned it to HTTP body now we have to set the request type or HTTP method because you take a look at these endpoints here you'll notice that these are get you see this get in this post here well that indicates the HTTP method of your request if you're not familiar with what these are just know that when you're sending off these web requests there is a type that you can specify you put get usually to represent requests to retrieve data whereas post is usually for submitting data so if we take a look at here well actually it tells you right here that this endpoint is going to be a post request and so that's what we're gonna set here and there is a property for that HTTP method we're gonna set this to post I think if I remember correctly yeah it's all caps like that so we've got all of this next up is the URL session stuff so we're gonna get a shared session and we're gonna create the data task from that where we pass in the request that we've created we've worked so hard to create this and we're gonna be able to specify a completion handler which is going to capture the response from the API and then we're going to take a look at what's inside the data so let's choose that and before we forget let's assign it to its own constant data task e equals because this is going to return a data task for us so let's pass in the request let's open up a closure for this completion handler by double clicking it and keep in mind all of these parameters are optional so there's data there's response and there's error so I'm going to do a quick check in here check for errors and say if error is nil meaning there was no error then I'm going to try to parse the data actually I'm gonna do one more thing and data is not nil so we do have some data in there they're gonna try to parse out the data and I'm gonna say let well first let's use JSON serialization to parse our data into a dictionary since we're using it up there already so JSON serialization dot JSON object with data so we're gonna grab the data in here we're going to pass it into there we're gonna specify reading options and we're gonna have to capture any errors that happen and it says any right here but the return type is going to be here's at a sample of the response it's basically going to be a dictionary and we're gonna be able to check this dictionary so we can see that all the keys are strings and the response could be boolean or string so we're gonna specify any so let's go ahead and use that JSON object for data I'm gonna force unwrap it because we've already checked I'm gonna choose mutable containers and I'm gonna say as string any you know try to do that let the dictionary equals that alright we're gonna have to wrap it in a do catch block response data all right so we're gonna try to just see what we get here so I'm going to set a breakpoint there and then we can go take a look at what we have all right I'm gonna do that all right moment of truth so this is how you specify your own request oh I always forget this one more thing fire off the data task data task dot resume so this is how we create our own request let's return there if there's an error all right so this is how we create our own request fire it off to the API and capture the response it's a lot more involved versus having an SDK and just simply calling a method and you know specifying a closure because we're you know doing all of this manually so let's take a look I'll tell you I am actually doing this for the first time I don't know what this API is gonna return because I just signed up for the free plan here the thing is you have to specify a credit card which I'm not that happy about but I understand because they're gonna start charging you after 50 right so I kind of get that so the anyways this is the first let me see this oh so we did get something back right so this is really cool error message okay so we don't have an error processing time exit code parsed results one element oh look at that the parsed text is Google isn't that so cool all right our job is done now you can work with any API remember though each API has its own specific documentation on how to work with that API if there's an API that you'd like me to do a specific demonstration of just simply leave a comment below and if you learned something in this video please please give it a thumbs up subscribe if you haven't already and make sure you turn on Bell notifications so you don't miss the next video thank you so much for watching and I'll see you in the next video