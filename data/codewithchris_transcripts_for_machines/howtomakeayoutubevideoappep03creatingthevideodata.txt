hey coders this is Chris and I'm here with episode three of how to make a YouTube video app in the previous lesson we had gone into the storyboard and added a table view now we added a prototype cell and furthermore we hooked up that element to this IB Outlet property called table view in this lesson we are going to create the data that we need to power this table view basically what videos is this table view going to display so I mentioned in the previous video that we're going to be doing a basic version with hardcoded data simply because parsing of the feeds is a little bit Advanced for right now so what I'm going to do is in the left hand side in the file Navigator I'm going to create two new classes first I'm going to create a class that represents our video object and next I'm going to create another class that will represent present our model and this is going to be the class that handles all of the data and returns that data to the view controller so in the future if we were to let's say uh change up the data source to get the videos from a feed let's say we only have to modify code in the model as opposed to putting everything inside this view controller and then having a really long file that's really hard to maintain so what you're going to do on this left hand side is rightclick or if you got a one button Mouse I hold down control and click and you're going to get a menu like this and then choose new file make sure you're under iOS source and we're going to choose Coco touch class now for the class name I'm going to call this video and it's going to be a subass of NS object if this is not what you see going to want to type in NS object exactly as it looks here capital n capital S capital O lower case BJ e c okay and make sure the language is set to Swift if it's not already click next and then just click create and by default it should have that folder selected your project folder so it's going to create the file down here I'm just going to drag it and move it up here so now we have a a video class I'm going to start by declaring some properties of this video object that we expect to have so if you think of this class as representing one of our videos what sorts of metadata or what sorts of pieces of information would a video have so let me bring up my YouTube channel which is these are going to be the videos I'm going to be displaying so it has stuff like a title if I click into it let me just mute it there uh it has a description and furthermore it has an ID which is how YouTube identifies this video we're going to need this ID in order to display the video later on in uh when the user drills down and selects a video and we also need this ID in order to get the thumbnail image to display in our table view so right here I'm going to say VAR video ID colon string and let me explain this line here I'm declaring a new property for this video class called video ID and it's going to be of type string which is just a piece of text so that's what this colon string means and I'm going to assign out a value I'm going to say equals and I'm going to do two quotes and this is an empty piece of text it's what I am initializing this video ID to so this equal signs means I'm assigning this empty string into this property so whenever I create a new video object it's going to have a video ID of Mt string next I'm going to say video title and it's also going to be a string and I'm going to initialize it to that uh lastly we have video description it's going to be a string as well and empty string so now I have a video class which I can create multiple video objects from and each video object has its own set of uh video ID video title and video description okay so now we're going to create another class let's right click choose new file we're going to go make sure you're under iOS Source again choose Coco touch class in this one we're going to call it our video model and model might be an unfamiliar term for you unless you've seen the uh start here series on my channel page uh where you learn about the model view controller framework so the video model class is going to be responsible for supplying all of the video objects to the view controller so the view controller is going to be communicating with the model to get the data it's also going to be a subass of NS object make sure it's typed exactly this way and make sure that the language is Swift click next and click create so I'm going to move this up here again and then in the video model I'm going to create a method for the view controller to call for the data so I'm going to write fnc to declare a new method and for my method name I'm going to just call it get videos Open Bracket close bracket and inside these brackets is where I would specify some input parameters if I wanted to and that just means those are the parameters which I also must pass in to call get videos but because I don't require any additional info when view controller calls get videos I'm not going to put any input parameters in here now I'm going to type Dash and this Arrow and what I'm doing here is specifying a return type so that means that whenever get videos is called it's going to return some sort of data and here when I'm specifying the return type that's the type of the data that gets returned so I'm going to return an array of video objects so arrays are something that you should have learned in the start here lessons as well that's why I'm saying that those videos should be watched before this YouTube series so we're going to declare an array and we're going to type in the video class that we created here so this specifies that the get videos method is going to return an array of video objects and then we do two curly braces so if you type in this curly brace like the opening one and then you press enter it should fill in the second one for you like that if it doesn't you can just type it in so right now xcode is immediately complaining about something it's saying missing return in a function that is expected to return an array of video right so we're going to remedy that very quickly here let's declare a local variable inside this method called uh I'll just call it the videos and we're going to say it is equal to an empty video object array so let me explain the difference between this line here and this line up here I'm specifying that this method return returns this sort of type this class type whereas here I'm creating a new instance of this class and so this is an actual video array object whereas this simply is the type or the class type if you're confused about the difference between a class and an object uh check out lessons 9 and 10 of the start here series and that explains the basic objectoriented programming Concepts so when in other words this is telling me what sort of data gets returned and this is a piece of the actual data so right now this is an array that is empty and I'm assigning it to this videos local property so whenever I type videos I'm actually using this empty array here and then xcode is giving us a warning and saying that um it's never used but we we will use it soon so let's ignore that for now so here I'm going to create a comment by doing SL slash you can see there are some comments up here these don't affect the execution of the app but they're useful as documentation as we go along and to remind us of what we're doing in the future when we look at our code so I'm going to say um create a video object assign properties append it into the videos array so we're going to do this maybe five times once for each video so I'm going to use the keyword let which is kind of like declaring another variable except that with a variable I can assign different things to it over and over with the let statement you're declaring a variable that you can only assign one thing to and then you can't assign something else to it and that's called a constant so I'm I'm going to call this constant Video One and I'm going to create a new video object so this is a new instance of this guy this class that we created okay so I'm going to say Here video one dot video ID is equal to this first video right here so in the URL bar I want to select what's after the V equals I'm going to command C to copy that and Comm command V to paste it there but actually it's a string you have to uh surround it by quotes Okay so video one. video title now I'm going to assign it a title so I'm going to just copy this Title Here video One do description uh not description Sorry video description is the property that we created and I'm going to select just this right here I'm going to paste that there you might have to get rid of the line breaks like that uh and then finally let's append it to our videos array so we say videos do append and we can put in video one okay so so far we have one video in this array that we we declared up here and then at the end of this method I'm going to use the return keyword to return the data because remember this get videos method has to return this type of data an array of video objects so I'm going to return videos which is our array of video objects so let's just add a comment up here create an empty array of video objects and then in here return the array to the caller so what we've just done here is we've created an array of video objects we've created a single video object we've set its properties and then we've added it to the array and then finally we return that array to the caller so I'm going to repeat this for maybe four more videos so we have a total of five so since we're hardcoding the data all I'm going to do is highlight this I'm going to press command C to copy it create two lines here here maybe three lines press command V to paste it and then change this constant from video one to video two you're going to have to change all of these ones to twos you have to be very careful about doing this because if you miss even one of these variable names uh it's going to cause unexpected problems in your application so I'm going to change the properties of this and I'm going to do this for uh four more videos so I have a total of five and I'm not going to make you guys sit through that so I'm going to stop recording while I do that and then I'll be back hey coders I'm back so now I've got five video objects so we started with this one and then I created four more copying pasting that chunk of code changing the variables from video one to video two um changing the video ID the title the description and then doing it for all of these videos now I have five videos in my array and I'm going to to return these videos to the CER of this method now make sure you save it in case you lose your data now we're going to go into the view controller and from The View controller we're going to get that list of videos or array of videos from the video model and then it's going to pass it to the table view to display and actually it works the other way around as we're going to learn a couple of videos later it's the table view that asks the view controller for the data and then the view controller because it has that array of video objects it's going to be well equipped to supply the table view with that data to display okay so first things first up here in the view controller let's declare a property called videos and this may seem very familiar it's going to be an array of video and right here I'm going to immediately assign it an empty video array and then in the viewed load of the view controller this method automatically gets called called when the storyboard has loaded uh and that's the name view did load so after the view has loaded I'm going to say self thought videos which is referencing this guy right here is equal to video model so let's create a new video model object like that I got an extra m in there it should turn into this turquoise or greenish color turquoise actually if uh it's a correct class name so I'm going to create this video model object and I'm going to say dot get videos so right here you can see that it detects the method and this is the return type it returns an array of video objects which is the same type that this property is so we won't have any problems doing this all right so what we've done here is we've created a new new video model object and then we're calling the get videos method on that and assigning the result or that passed back data into self. videos so later when the table view asks the view controller uh for the data to display um The View controller can just access the stuff in self. videos to tell the table view what to display and if you went through the start here lessons and you're a little bit confused about this line where we're doing kind of two things at once uh we can actually split it up so I can do something like let model equals video model so we're going to declare a new video model object and assign it into model and then in here instead of writing this I can say model. get videos so what I did before was just saving a Ste I I didn't declare a separate variable or constant to store the video model object uh because I wouldn't need it later on all all right so we're one step closer to displaying our YouTube videos in our table view I hope you guys enjoyed this lesson please like it subscribe and share it with others if you did and I hope you guys have a happy weekend I'll see you guys on Monday at 1200 p.m. Eastern bye for now