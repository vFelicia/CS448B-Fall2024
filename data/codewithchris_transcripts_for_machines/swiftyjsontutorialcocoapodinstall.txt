hey coders Chris here for those of you guys who celebrated I hope you had a great holiday weekend today I'm going to tell you about this library called swifty JSON so as you witnessed in the building of the YouTube video app and the shopping app a lot of the time when you're doing networking in your app making API requests parsing responses and stuff like that most of the time it's in JSON and using this library makes it a little more convenient and provide some error handling as well so under the usage section here there is a couple of use cases where swifty JSON makes things easier here are some examples when you have a JSON dictionary and you pass in this key expecting a string you're going to have to cast that result using the as keyword as a string and here you can just go dot string value another thing is that often in JSON responses you have a whole bunch of nested data structures so you might have a value that is an array which contains a dictionary which has a value which is another dictionary and so on and so forth so for example if we take a look at our shopping app one of the responses we worked with was something like this when we retrieved all of our products so take a look at this the key is result and the value is an array so each item in the array is a dictionary of values and then if we look at the pricing key its value is another dictionary and then inside that dictionary there's a rounded key which is another dictionary so you can see that it's several layers deep and so subscripting like this you can very easily drill down to the value that you want there are also more benefits that I'm going to scroll over you can take a look at all of them yourselves but I'm going to go through another one which I really like here so error handling if you're not using the library and you try to specify an array index that is out of bounds your app is going to crash similarly if you try to access a key in a dictionary and it doesn't exist you're going to get a crash as well so with Swift e JSON it's not going to crash your app instead it's going to give you a nice error message another cool thing about this library is that it plays very nicely with Alamo fire which we went over a couple days ago so you can use Alamo fire to make the requests to retrieve the data and when it comes back assuming that it's JSON data you can use swift e JSON to work with the result in fact down here if we scroll down there's a section about how we can use swift e JSON with alamos json response handler so what I'm going to do is I'm actually going to use the project which we created when we looked at Alamo fire a couple of days ago and I'm going to just modify the completion handler to use Swift e JSON to work with the result so just to refresh your memory what we're doing here in this project I had a JSON file at this URL so let me show you what that looks like it's just a simple dictionary with two keys one of the values as a string another value is an array with three strings inside so we were using Alamo fire to retrieve this JSON file and then inside the result we're just displaying the first key and the second key as an array okay so let's close this project and let's install the Swift D JSON pod so we're going to scroll up to the top and we're going to go to usage or actually integration and follow this cocoapods installation for swift e JSON because we already have our pod file let me just go to our project here AF sample so we already have a pod file and we have our XC workspace because we installed Alamo fire all right all you need to do is open up your pod file in your text editor so you can see here we already have the Alamo fire and we can just add another line under that so we're going to do that okay now we're going to save it and we're going to open up terminal now if all this is new to you check out the video where we talk about cocoa pods and how to use it and also watch the video where we talked about Alamo Fire so we're going to navigate to that folder our project folder right here I'm on my home folder I'm going to go to desktop /af sample and then here I want to run the command pod install again now there's another command called pod update and what's the difference there's a good post here talks about it so pod install is to be used every time you edit your pod file to add a new pod to it or remove from it okay and pod update you can run pod update with some specific pod name and it's going to get the latest version of that library or if you just run pod update without any name it's just going to grab the latest version of all the libraries listed in your pod file so because we're adding a new pod we're going to type in pod install so wait for it to do its thing okay and now as you can see it's got swiftie JSON and installed it now we can go back into our project folder and open up XC workspace up here we have to import the new library it may not recognize it so you're going to have to press command B to build the project okay so now let's go back to the swiftie JSON and look at the usage and you can see here that in this example they're also using Alamo fire to fire off a request they are calling the JSON response handler and they're using this conditional binding to grab the response dot result out value and then they're passing that value into the swiftie json initializer so I guess I glossed over this part but let me just scroll back up and show you guys what I mean so in order to initialize a new swiftie JSON object you import it which we've done and then you can just call JSON and you can pass in data you can pass in a JSON object you can even pass in a JSON string okay so that's the that's the keyword that's the class name that we're going to have to use so we go back all the way down here we're grabbing the response dot result dot value ok we're testing using conditional binding to see if it's nil or not and if it's not nil we're going to create a new swiftie JSON object like that and then we're going to work with that guy right there so going back into our Xcode project we're already doing a lot of that right we're using Alamo fire to fire off the request we're using the JSON response method and in here we are already using optional finding the check the response that result dog value right here we've chosen our constant name to be JSON that's a little confusing so let's call it value like they did and in here we would say let JSON equals JSON and we'll pass in the value like that so now in here in this JSON constant we can use swiftie JSON to output this stuff so instead of that we can go something like this see instead of first key and then we have to cast it as a string we're going to go as we're going to go string value like that and this one as an array we can actually do a rave alyou so let's try to run it and print those out in the console okay so in the console you can see that it's printed out the value of the first key and it's printed out the items in the array in the second key now let me show you a couple of other things so if I try to get a third key because in my JSON file there is no third key right and we run it it's not going to crash our app but if I did this without using swiftie JSON it would actually crash the whole app so here you can see that it didn't print anything because it didn't find a third key and another thing is that this second key is an array right you can see it's an array with three items I can use that sub scripting and go like that to grab the second item in the array remember that the first item is at 0 second item is at 1 and third item is at 3 so there see I can grab the item number 2 that's right there just by writing this so if you're doing a lot of networking in your app and you're working with a lot of JSON I highly recommend that you use Swift e JSON it just it'll make your life easier and it plays really nicely with Alamo fire which is another popular library I hope that was helpful for you guys thank you for watching as always and don't forget to subscribe and like and share the video I'll see you guys tomorrow bye for now you