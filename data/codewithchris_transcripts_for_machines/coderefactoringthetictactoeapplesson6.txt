when I was planning this series iOS 16 and xcode 14 we're still in beta and I hadn't yet updated any one of my phones my work phone or my test phone to iOS 16. so I was testing on iOS 16 simulator but an iOS 15 device my completed project worked well and for the final mode of gameplay we will be requiring the multipier connectivity framework but as I was planning this video iOS 16 was released and I finally updated my work phone to iOS 16 and I soon realized I had a problem when you use the multipure connectivity framework you'll need to broadcast who you are to others on the network using a display name and prior to iOS 16 I could use the iPhone's userdefined device name for that display name so that it was obvious who is broadcasting their availability in iOS 15 and earlier this can be found using the UI device dot current dot name and that is why for my pure case in which is the third mode I don't require the input of a name for the owner of the phone for the player one I simply use the current user's device name well as I started to test on my iPhone with iOS 16 installed that's where I found the problem in iOS 16 and later to access that information you must meet certain criteria and be assigned an entitlement and this is way more work than I want to go through now instead of displaying the user's assigned device name it uses a generic device name like iPhone so everyone making themselves available would have used the same name you may think that that's not a problem why don't I just ask for a name to use well it's easier said than done because in multipeer connectivity the way I've designed this app it requires that I have a name before I get to the start screen so that I can create an instance of my service class that I'll be creating using the name as one of my class parameters I didn't need that before because I could have just used what was on the phone so I could scrap the five videos I already created and go back and redesign the app from scratch but that's a lot of work so in this video I'm going to go back and refactor some code that we already have working so that I'll be able to proceed with the multipeer connectivity option in the next video so please bear with me this is the life of a developer things always come at you and you got to be ready to make changes so what I want to do is to request a username on first launch and then store it in user defaults then move on to the start screen on the next launch if it finds a name that has already been created it'll bypass that first screen and go directly to the start screen this means we'll no longer need to ask for your name on any of the game modes because we'll already have it the other thing I'm going to have to do is be able to provide a way for the user to change their name and this is another challenge because once I've created my Surface class that display name that we use to broadcast our availability is read only and can't be changed this will make more sense once we start coding the class so this is what I'm going to do first I'm going to create a new branch and I'm going to call it refactored code now I'm going to open the app entry file and add a new app storage property with the key your name and I'll assign it an empty string to a variable of the same name then within the window group block I'll create an if Clause that will check to see if your name is empty meaning there's nothing stored there yet else I'll display the start view if there is well if your name is empty we want to display a view that will allow us to create a new string for our app storage property so let's create a new Swift UI View and I'm going to call it your name View inside there I'll create the same app stores property for your name now we want to be able to update this value so you might think that we could use it as a bound value for a text field the problem though is that as soon as I start typing into the text field it'll no longer be empty so it'll force a refresh of our app entry window group and we'll be back to the start view with only one character entered and I think we have to have names that are longer than one letter so I'm going to create a second state property and call it username that'll be a string and that's what we'll be binding to our text field so let's enclose this text field right now in a v stack and I'm going to change the string for the text field to be this is the name that will be associated with this device then I'll add a text field with the string your name and bind it to that username property then I'm going to set the style to rounded border next I'll add a button with the label set and the action will now be to change your names app storage property to username we'll set the button style to bordered prominent and will make the button disabled if the username is empty we want to force people to actually enter something just to fill the screen I'm going to add an image using the launch screen asset and then add a spacer to push it up to the top let's add some padding around the vstack and we'll do as we did in the other views as well I want a navigation title so that means we're gonna have to add a navigation stack so as before we'll first create the navigation title and I'll use as before x's and o's and then I'll use my view modifier in navigation stack to embed this into one let's see I can return now to my app entry point then and when your name is empty we'll just present this your name View but first let's just comment out this your name State Property to see where we use it in our code those errors will give me that indication well I'll no longer need to ask for it if playing against someone else because it will have been stored in the app storage and I'll already have it so I can remove that here okay similarly I'll no longer need to ask for it when I'm challenging a device and that's when the mode is bought because we already have it in app storage so I'll just return an empty view here I will need it in this setup function still though so I'll need to add the app storage property back to our view so that we can get access to it but since we know that this property cannot be empty I can remove those checks from our disabled check namely no check is needed if the game type is a bot and if the game type is single we only have to check that we have the opponent's name so let's uncomment this property then and change it to our app storage property in the preview then let's test I see that if I choose to sharing it now only asks me for the opponent name and after entering I can tap the start button when I do this however there's no name for your name and that makes sense here because the your name property for this view is an empty string and the preview provider doesn't know about the app storage value I can solve this problem then along with an issue that I would have in our next video by doing the following let's create an initializer for this struct and give it one parameter your name that's going to be a string now we'll need to go back to the app entry point and add that to the start View so that we can pass on our app storage property this will create an error when we build so I'll need to return to start View and in the preview provider put in some value for your name I'll just use the text sample this still doesn't fix things though as you can see we still can't see our name so to solve the preview display issue I can go back to our initializer and simply update the app storage your name property with the one that gets passed in and our preview provider then will provide the sample now for the single game when I enter my opponent's name and start the game I see my sample name has been entered for me if I choose to challenge the device I don't have to enter a name at all because when I start that game the sample name is entered for me and the preview display name is used for the opponent Let's test on a simulator when I launched the game for the first time I'm asked to enter my name once I do that the set button is active and when I tap on it I'm taken to the start screen if I select the two sharing device option I'm asked to enter my opponent's name and when I start I see both of our names entered if I choose to challenge the device no names are required for entry and I can start the game both names are entered and we can play the game just as before this is almost perfect but what if I want to change my name how can I do that well the problem is that I can change the name but if I start a new peer game that I'll be creating starting in the next video that name will not be used because we will have already used the old name to create our new service class and once it's used it can't be changed so the solution I've come up with is to allow the user to change their name but then Force an exit of the app so that they'll be forced to restart so in start view create a new State Property called change name and initialize it as false create another one for new name and make it an empty string below the launch screen image create a text view that lets people know what their current name is then below that create a button with the label change my name and for the action it'll be to toggle that change name property and I'll set the button style to bordered well now we can use that change name property to initialize an alert that will ask the user if they want to change their name and then I can use the new ability in is16 to add a text field to that alert so we'll start with an alert using the title key is presented actions message overload for the title key use change name will bind is presented to our change name State Property for the actions we create a text field with the placeholder string new name and bind it to our new name property following that we'll create two buttons the first will be a button with the label ok but I want to give it a rule of destructive to make it stand out then the action will be to set the app storage your name property with the new name and then I immediately use the exit minus 1 to force equipped now I'd love to be able to disable this button but if I try that it doesn't get displayed however it really doesn't matter because if they don't enter a name when they launch the app again it will go to that name entry screen anyway because it'll be empty the other thing is that this ability to add a text field to an alert is an iOS 16 feature only and we have a minimum deployment Target of iOS 15. well the good news is that this doesn't cause an error or a crash it just leaves the text field out of the alert so in our case I'm going to user Taps on the OK button it'll just set the app storage value back to an empty string and on the next launch they'll be forced to enter their new name we do want to give people the ability to cancel however so we'll add a cancel button with a roll of cancel but no actions required and then finally for the message I can display a text with the string tapping the OK button will quit the application so you can relaunch to use your changed name you can see what this looks like in the preview but let's put it to a test in the simulator when I launched the app I see that my name Steward is pulled from App storage if I tap on the change my name I could enter a new name like Colin and then when I tap on OK the app quits when I launch it again I see that it's been stored in app storage so I'm good let's do this once more this time however I'm not going to enter anything into that name field when I press on OK the app exits as before this time however when I open the app it recognizes that nothing's been entered and I'm asked to enter a name because the one stored in app storage is an empty string perfect so before we move on to the next video though let's commit our changes to our refactored branch