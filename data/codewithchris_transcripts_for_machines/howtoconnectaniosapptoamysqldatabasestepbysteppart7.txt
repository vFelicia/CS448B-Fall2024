hello welcome to the final lesson of the iOS to MySQL demo series in this final lesson we are going to create the map view controller and we're going to add a map view and we're going to enable the user to tap on a row in the table view to jump over to the next screen and we'll plot that location on the map okay so first of all let us here in the default navigator let's create a new view controller class I'm going to choose cocoa touch class and this is going to be a map view controller subclass of UI view controller so take note of the UI in front of view controller because that's the the actual view controller class and now you can see map view controller is a subclass of uiviewcontroller in fact when we created a single view application you know we started off with the 2u controller here this view controller is also a subclass of uiviewcontroller this UI view controller class is from UI kit now the next thing to do is to go into the storyboard and we're going to add a an additional view controller element to the storyboard so let's go ahead and add this guy right here now this is going to represent our map view controller but when we drag it out from this object library this just it's just the UI view controller so we need to highlight this guy go over here to the custom class and set this to map view controller now the storyboard knows that this guy this view controller represents an instance of the map view controller ok next thing we want to do is to actually add a map view here let's search for a map view and we're going to drag this over here and for this one you can just position it fullscreen like that oops okay and then click this constraint button and all of them will be set to zero as already then you can just enable these four constraints and add them and it'll be like that now let's open up a system editor because we need to connect this map view as an iboutlet property here so hold down control drag it there let's just call this the map view like that let's go back to single view editor and if you go over to the map view controller class now you're going to see that this line is an error here and if you take a look at the error it actually doesn't recognize this MK map view class what we're going to have to do is click on this root node here for the project properties you're going to scroll all the way down to linked frameworks and libraries you're going to click this little plus icon and you're going to search for map then you're going to add the map kit framework just like that in there and now when you go back to the map view controller class up here you say import mapkit so now it's going to recognize this map view class so now we're going to work on transitioning from our view controller to the map view controller when the user taps on a row in the table view so let's go over to the storyboard the first thing we have to do is to highlight this view controller here and make sure it's outlined in blue like that and then you're going to go up to editor you're going to choose embed in and we're going to choose navigation controller so what that's going to do is it's going to add this thing called a navigation controller to your storyboard sometimes you just have to reposition it let me zoom out a bit so that you can see okay so this arrow now points to the navigation controller so this guy is the starting controller or view controller you could say and it doesn't really have a view itself instead it facilitates transitioning the mean view controllers so you can see this line here it's pointing to this view controller as its root view controller even though this guy this navigation controller is thus carving controller it's going to display the view of this view controller so we're going to still see the table view when we boot up the app now the next thing we want to do is create what's called a manual segue from the view controller to the map view controller so there's two things I need to explain a segue if you don't know is simply a transition between two view controllers and a manual segue is just a segue or transition that we manually trigger through the code okay let's add this manual segue hold them control make sure that this view controller is highlighted I'm going to hold down control and click and drag this guy you can just drop it over here and the map view controller we look at dialog box that pops up you can see that the title says manual segue so you know you've got it right we're going to choose show which is just it's just going to change game controllers and transition to this map view controller kind of like your basic transition you can see here now there's an arrow you know there's an arrow from this view controllers to this guy and because it's a manual segue we have to manually trigger this arrow or this transition to happen so click on this arrow make sure it's blue we have to give it a name in order to identify it let's go up here and under storyboard segue let's give it an identifier let's call this go to map okay all right now when we go back to view controller in this did select row function we're going to call a function of the view controller called perform as you scroll down a little bit there's perform segue with identifier and where you can specify the name of the segue to manually trigger so select this function and inside here we're going to put a go to map now the sender is the object that triggered this function and we're going to put self here to identify that the viewcontroller was the one who triggered it now let's just take a look to see if this works let's run the app here when we select a rope it should call perform segue and we should zoom over to the map alright now you can see our two rows here and there's actually a gap up here so we can address that but you'll notice that the view controller has added this navigation bar up here so it looks to me that there is maybe an error down here let's see what's going on here okay so I was going to show you guys this in the video where we were parsing the JSON data but I didn't want to get ahead of myself and then after we implemented the table view I kind of forgot all about it so now Xcode is actually warning us about this and it's good because in the past and never it never warned people about this and it was something that you kind of have to figure out through experience but anyways let me show you what this this error is this application is modifying the auto layout engine from a background thread after the engine was accessed from the main thread this can lead to engine corruption and weird crashes okay so let me explain what's happening here so the view controller when it launches remember we we called the whole model get items and then if we go to this function jump to definition here it calls this service that we created it downloads this JSON it you know parses it does all this work I told you it did it in the background as asynchronously right mmm that is from here when we created session the data task and we pass it that URL to do all of this work and we started the task dot resume here that does all that in the background now when the data comes back you know parse JSON this is still the background thread and if you're confused about what I mean by thread think of it as different sort of workers there is a main thread which is kind of the main worker and let's say it delegates something or let's not use the word delegate because you're going to confuse it with the protocols delegation let's say this main worker gives a task to another worker to tell it to hey you know go off and download some data and come back to me when that's done so it shoots off a background thread or a background worker thread to do that work while the main worker or the main thread can continue to serve the needs of the user who's using the app responding to user interaction and all of that stuff now you can imagine if the main worker was the one to go off and download data there wouldn't be any worker to respond to the users interaction or the users tapping in and such and so the screen would look frozen so that's why it's important when we go download data that this happens in a background thread or another worker now a big nono is to have the background worker update the user interface that usually is a task that is solely the main workers responsibility and when I say main worker I mean main thread so worker is just an analogy for a thread so you're only supposed to update the user interface via the main thread okay so right here we have the background worker it's parsing JSON it's doing all this work it's such the data and then it calls this delegate items down loaded which causes the view controller here to reload the table view thus displaying data to the user interface and this is being done by the background worker which is what it's warning against here you know can lead to engine corruption and weird crashes so instead what we want to do is we want this background worker once it's downloaded all that data it's parsed this stuff out into a locations array we want it to tell the main worker that you know it's finished its job and then pass that that work for updating the user interface to pass it back to the main worker for it to do so that's essentially what we need to do here instead of the background worker calling the delegates items downloaded we're going to relegate this work back to the main worker so the way we do that is by writing code like this dispatch Q dot main dot async and any code we put between these curly brackets goes back to the main worker to do so we're going to just take this and we're going to paste it in there like that and just like that the background worker once it's done all of this code here it's going to tell the main thread to do this work instead and so we end up reloading the table view from the main thread inside here though is telling us that we need to use self inside that which is fine and then let's try this again okay so this is good we now click a row remember what we were trying to test before was tapping on a row is going to bring us over to the other view controller okay so this is the map view right here all right now we actually need to plot the pin for that address we need to pass the selected location over to this map view for it to display while we're at it why don't we fix that table view being so far down the way we can do that is in that top constraint so table view top equals top layout guide okay might not be able to do this what I'm going to do is just to delete this table view top constraint all together so we highlight the table view we're going to add a top constraint we're going to remove constraint margins we're going to make sure that this neighbor is veal instead we're going to select zero for that and we're going to add that constraint and so let's just quickly run it again alright so now we have the rows at the top okay so I said that we need to pass the selected location over to the map view controller right let's create a property over here to store that location so far location to display let's make this a an optional location like that and the view controller is going to set that property with the location that the user tapped on now over here what we have when the user taps on a row it triggers this guide did select row at and then we're going to perform the segue what we need to do is there is a function that happens when a segue occurs and that is called prepare so prepare for segue we're going to put some code in here to call I'm going to move this function up above here because it's not a UI tableview delegate method so when this table view did select row app performs the segue go to map and that transition happens to the map view controller this function gets called and from here we are going to set the locations or location to display property of the map view controller and the way we're going to do that is first get a reference to the destinationviewcontroller through the segue so segue dot destination returns a uiviewcontroller because it doesn't know what that view controller is so I'm going to cast it as a map view controller I'm going to assign that to a constant let map controller or how about just call it map VC equals that and then we're going to say map VC dot location to display equals and we're going to say table view dot I was selected or indexed path for selected row index path for selected roads so this returns an optional index path because if there is no rows selected then this is going to be nil but we know for a fact that this segue or sorry this prepare function only happens when a transition happens right and we only have one transition in this app so and that one transition is only caused by selecting a row so we know that there will be an index path for this row but just to be sure we can do something like this we can first check if there is a selected row let selected row or selected index path equals that and then we're going to say because that could be nil right so we're going to check if it's nil first if let index path equals selected index path then we do this stuff okay so now we can say locations and pass in the index path row so this is going to return to us the location that the user selected so this is all we need to do here and then in this map view controller we're not going to do in the viewdidload there is another function we can override view did appear so this is after the view has appeared to the user then we're going to set the map view to the address of the of the selected location so the first thing we need to do is to create a pin to plot actually you know what before that because location to display is an optional here we need to check that there actually is a location in that property first so let's use optional binding if let location to display let's call this location equals location to display then we show the pin on the map now what we have to do is create a pin to plot on the map so let's create a pin constant and the class we're going to use is MK point a notation going to create a new object of the MK point annotation and this guy has a coordinate property that is a type of CL location coordinate TD let's create that CL location coordinate TD I'm not sure what the difference is the I think these two might be the same now if you open this guy up we have initializer to specify latitude and longitude it the sense that these are types of CL location degrees but it's just another type for double we can substitute a double data type in there if you notice here for our JSON data C these are actually representative strings so we need to convert that these strings here convert that to double and we're going to do that we can even do we can either do it in line here or we could do it outside here maybe we'll do it outside here just for the sake of clarity convert flat and long to double so let flat equals double we're going to pass in I'm going to pass in the location dot latitude in here let long equals double location dot longitude and you're going to put them in here so that and long and then the next thing you can do is set the tin has a title we can set it to location dot name and the last thing to do is we're going to go matte view dot it plot norms it show no is add add a notation you can add the annotation will pass in the pin and there's also another function that is called show and notations and this basically zooms the map into the area where the pin is so we pass in an array of annotations but we only have one so we can just create an an array of just that one pin and put that one pin inside the array I mean for animated let's put true and now let's run our run our application actually there's an error here value of optional type double knot and wrap did you mean to use okay so when we convert this string into a double there's a chance that the string can't be converted to a double like for example if the string is just a word like hello or cat or something like that you can't really convert that to a number right so that's why converting it to a double this way actually gives you an optional double so it could be new and when we create this CL location coordinate to D it doesn't like you putting in optionals that's not what it expects so what we can do is we can check that the lat and long are not nil before executing this code here so let's do if lat not equals no and long not equal no like that then we put that then we do this code just to make sure that we actually get a lot and long first and now you know this is still an optional but we can safely be confident about unwrapping it force and wrapping it to get the double okay so now we can run the app here and we get back our data let's tap on Apple and we get this so our pin is plotted here and it's zoomed in here so if we try Google this time you get Google right here so this kind of completes the journey from data being inside in my SQL database to going through a web service to finally being consumed by an iOS app and then being displayed to the user as kind of a long road and there's a lot of additional infrastructure that we need to set up you know in terms of the database and the web service if you have the freedom to choose what sort of database you want to use right now I would recommend to start with something like firebase or parse server just so you don't need to worry about the database or the web service or anything like that you just put in your data through an admin panel into your database and then you add a library to your Xcode project and then you call you can call these functions to retrieve your data that's going to save you a lot of time because what I find most often with with beginners especially is that the more you have to do before seeing results the more likely that the beginner is going to give up and abandon their project without even completing it so that's why I firmly believe in using something like firebase or parse server just to alleviate all of that extra work from having to setup the web service layer and the database and stuff like that and just get your app up and running so that you get some you get some sense of accomplishment out of it and that's going to motivate you to continue on working on your app and in the future if you want to switch out for a different database you you would have that motivation to do so and so keeping things simple I think is the most important thing here so thanks for watching and I'll see you guys in the next video oh and before I sign off I just want to remind you that you can download the finished project in a link in the description below the video so check that out thanks for watching I'll see you guys next time bye