hey quoters Chris here with episode 7 of how to build a shopping app in the previous lesson we had implemented an Add to Cart button on the product detail page today we're going to put a checkout button right here in the upper right hand corner so that people can actually pay for their items and checkout so we're going to start by diving into Xcode and just adding that checkout button in the upper right hand corner it's actually pretty simple so in the viewdidload of the master view controller dot Swift we're going to create a new button so let's call this the checkout button equals UI bar button item and it's got an initializer like here title style target in action so this is going to let us specify the text which I'm going to put as checkout style is UI bar button item style dot plain and the target is self and the action is going to be checkout so the target in action is basically specifying which method of which object should we call when this button is tapped so because I'm going to create a function in the master view controller called checkout so the target is self as in this object and the method name is checkout so I'm going to go down here I'm just going to put it right up here and we can use this notation to create a section check out methods so what happens when you use this syntax right here is that when you pull this down you're going to get this little header here when you look at all your functions so it's a good way to organize your class so we can say func checkout and inside here we're going to create an order process the payment okay and but before we can do that we need to specify some shipping and enable some gateways in our dashboard so I showed you guys this Forge dashboard in the second lesson of the series so if you go here under advanced and under shipping you can see that I've added a shipping method so all you need to do is click this green button and create a shipping method but what's important is to remember this slug okay so that's going to be the identifier that we pass into the call to specify to use this shipping method and second of all if you go to gateways I've enabled a dummy gateway here for our testing purposes but if you are doing this live you would actually add the integration details for your select gateway and then hit the switch to enable it now we have the details that we need in order to make a checkout call we look at the API reference under checkout and pass a car to checkout you can see the URL that we're going to hit and the parameters that we're going to pass in so we're going to need some customer information the shipping method to use which is the slug that I told you about the gateway slug to use and let me show you that actually under this column this middle column you can see the slugs for all the gateway and for the dummy gateway the slug is just dummy so that's what we're going to be passing in and we need to build to address in the ship to address so for the purpose of this demo I'm not going to create all of the user interface elements to capture all of this data from the customer but essentially if you were doing it it would be a bunch of text fields and labels so that the user can enter in their customer information their billing address their payment information like credit cards and stuff like that for this demo we're going to hardcode all of that data okay so let's go back into Xcode and just create this checkout method so here I'm going to create the order data actually I'm going to write hard code the order data in a real app you would gather this data from the user using a bunch of text fields and labels so I've actually got this order data pre done I'm just going to copy and paste it here and I'm going to explain to you what these fields mean so here we have a constant named order parameters and this is a dictionary so you can see here as NS object any object so we have a customer key and the value is another dictionary with a couple of key value pairs first name last name and email that represents the customer next we have the shipping key and the value is free shipping because that is in my dashboard here the slug for my shipping method the only one I've got is actually free shipping so that's why I've specified that here the gateway is dummy like I showed you before and the bill 2 is another dictionary which contains a couple of key value pairs namely first name last name address 1 address 2 city country or county sorry country postcode and phone and if the shipping address is the same as the bill to address all you need to do is specify the bill key as the value of the ship key so those are the order parameters that we're going to pass into the call that we're about to make so in order to make that call we say moulten shared instance dot cart dot order with parameters and for the parameters we're going to pass in these guys right here so let's say order parameters and it has two callbacks so let's expand the success callback first it's got one response parameter I'm just going to call that response dictionary and we're going to fill in some code here once the order is successfully created then we actually process the payment and there's failure so there's two parameters for this guy in here I'm just going to print can create the order I'm going to put a breakpoint there okay so if the order was successfully created what we have to do is get the order ID of the order that was created because we need that in order to pass it into the our next API call which is this one process payment for an order okay so first of all we're going to capture the order ID if we go back to the reference document this was the call we made to create the order and under result and under the ID field we have the ID of the order that was created so we're going to grab that we're going to say let order ID equals response dictionary as nsdictionary we're going to cast it as an NS dictionary so that we can use this method value for key path and for the key path we're going to pass in result dot ID and this is going to come out as a string okay so if let the let's just call this a no ID if it was able to retrieve an order ID we're going to need to process the payment now but again if this were a real app you're going to need to capture that information from the user in a series of text fields so here we're going to hardcode the credit card details in a real app you would gather this from the user in a form so let's go back here I have this data as well let me paste it here and let me explain to you what's going on here we have a constant named payment parameters and this is a dictionary and inside that dictionary we only have one key pair so the key is data and the value is a dictionary and that dictionary has the key value pairs for the credit card information so the number expiry date and the code at the back so these parameters are what we're going to pass into the API call we're going to say Moulton dot shared instance dot checkout dot payment with method and the type of payment we're going to make is a purchase so that's just that string there for the order this is the order ID so we're going to put oh I D and for parameters we're going to put the payment parameters and lastly there's a success callback in a failure callback so we're going to open up the success callback let's call that response dictionary and inside this code here we're going to display a message to the user that checkout was successful in the failure callback there's two parameters response dictionary and error and here we're going to just write could not process the payment I'm going to set a breakpoint there in case it hits that point okay so that's all you need to do to process the payment for the cart in here the payment has already been processed so all we need to do is display an alert to the user we're actually going to go back to the detail view controller to just copy the code that we had here to display an alert so I'm going to copy these three lines copy and I'm going to paste it right here and just change the title and the message of the alert so the title is order complete the message is your order is complete and your payment has been processed thank you for shopping with us and then next we add an OK button to that alert and then finally we present that alert to the user okay so let's run our app now and see it in action okay so we're missing a checkout button here I actually forgot to add it we created it but we forgot to add it so here back in the viewdidload of the master view controller that Swift we created a checkout button but we didn't add it so in order to add it we type in self navigation item dot write bar button equals checkout button okay so let's run it again okay so now we've got that checkout button let me add the imac to the cart okay go back and let me hit checkout and you can see in the console window that the calls are being made and then our order is complete and now we're done so we go here we can see all calls that were being made so this was creating the order and this was processing the payment so now let's go back to our forge dashboard and we can check out under the orders manage orders we can see the one that I just made which is this one right here this one right here was just another test order that I did before recording the video so if this were a live store you would have gotten two orders already now of course we simplified a whole bunch of things with our demo here but I hope you can see that it's pretty simple to implement a user flow where they can browse items they can add them to the cart and they can checkout and pay now all you have to focus on is the user experience for your app and making it look really slick and polished before we go I actually want to show you another demo that Moulton has for Swift and it has a more complete checkout flow so let me see if I can find it here I'm just going to go on the Moulton homepage scroll all the way to the bottom and let's see getting started it's under Swift and if you scroll all the way to the bottom there's a swift example app which we are going to view on github and we are going to download this zip I'm just going to put it on the desktop I'm going to unzip it so it's right now it's on my desktop right here and we have to before we can actually run this project we need to use cocoapods to install the dependencies that the project needs so if you go back to go back a couple lessons where we talked about how to use cocoapods you'll know how to do this so I'm in terminal right now I'm going to go to the desktop all right go CD iOS Swift and then you can press tab to fill in the rest of the folder name press Enter now I'm inside that folder I need to go one more folder deeper so moulten swift example and then here I can see the pod file so I can just write pod install and it's going to go ahead and read the pod file and fetch all the dependencies and download them okay so now we're done now we can open up the xc workspace file right here and I'm just going to go ahead and run the project okay so here we go so what we have here is a collection of products and you can click on the tab and you can view your cart so let's click this one right here because I know there are some products in there and here we're looking at the products in that collection so you click that you're going into the product details we click the Buy Now it's going to add it to the cart and then it's going to bring you to the cart page and here you can actually increase and decrement the quantity of the product and then finally you can checkout and in here it's loading the form where you can fill in your address and your country and stuff like that so I'm not going to do this but you can check out this demo for a more complete example of a shopping app where there's actually the form for you guys to fill out the information I hope you guys have enjoyed this series how to build a shopping app Moulton and if you did please share it with your friends and colleagues use the share button below the video please subscribe and give it a like it really helped me out and help this channel out and with that I'll see you guys tomorrow where we'll have a brand new tutorial bye for now