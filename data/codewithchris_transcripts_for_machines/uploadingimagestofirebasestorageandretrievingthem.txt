last week i showed you guys how to select photos from the user's photo library this week i'm going to show you how to upload those photos to firebase storage and also how to retrieve them for display now before we dive in just a quick reminder that we do have a code with chris ideas board where you can vote on topics you'd like to see or submit ideas of your own with that being said let's dive into today's topic alright so this project here was the project from last week's cwc screencast number 11 which was to allow the user to select an image from the photo library and just in case you forgot how this looked like let me just quickly build this and show you so i'm going to go ahead and select a photo it's going to bring up the photo selector or photo picker from the user's photo library and i select one and it goes like this now what we're going to do now is add an upload button which is going to upload the selected image to firebase storage and then we can also take a look at retrieving it the first thing we have to do though is actually to connect this xcode project to a firebase instance so let's jump over to firebase console.firebase.google.com is where this is um if you haven't signed up for firebase before you just log in with your google account and you can create some free projects so let's create a brand new project here let's call it firebase demo i'm going to disable google analytics and then we wait so we're going to click on ios to set this up here we're going to grab our bundle identifier so that's this right here and paste in there now i'm going a bit fast because we've done this many times using firebase you can check out our databases course module 2 i believe for firebase if you want to get some detailed instructions on what it is and how we use it okay so i'm going to download this google service info p list and this is basically where it contains all of the configuration info to point to this firebase instance so i'm going to save it my project folder and then we are going to go ahead and drag it into this project do that here drag this in here we'll just put it right there copy items if needed make sure this is in that target we'll put it right there and then we are going to use a swift package manager to install the firebase sdk so you can follow these instructions or if you've done it before it should already be saved and i'll show you that so copy this url right here we're gonna do it via xcode but we're gonna go to file add packages if you've done this before you should already have this recently used if not you can go ahead and paste that url in there but oh it disappeared i recently used there okay so i'm just gonna choose the one from the recently used menu and then we can await and we are going to add both the firestore database package as well as the firebase storage libraries because one of it the storage is for uploading the files the database part is creating a reference to that file because it's not enough to just you know upload it somewhere you have to keep track of it in your database so that when you want to retrieve it you you have a reference to where it's located in your storage all right so it looks like this is still taking a little while okay so here we are let's take a look at i want firestore and i also want storage so i'm going to add these two now i'm i'm going to first start with showing you how to upload the selected file to firebase storage and this is the documentation you'll find a link to this down below in the uh we haven't gone through the wizard yet okay so we've installed the packages so let's go ahead and click next and we're going to need to import firebase and then we're going to need to run this line of code firebase app.configure so i'll copy this one right here we're going to go back i'm going to go into the app entry point right here and we're just going to create an in knit method in here and that's we're going to run that line of code we're also going to have to import firebase right up there so hit command b to build this project make sure that it builds with all of the new packages that it just added we can go ahead and click next and continue to console now here we're going to have to set up both our firestore database and our storage let's set up storage first since i'm going to show you how to upload files first so get started now by default it has a rule that says you won't be able to write data and read data unless you are authenticated because typically if you are going to allow people to you know store files on your storage you're probably going to pair this with some sort of authentication so we typically use firebase authentication here and we've shown how to do that in our databases course as well so you can go ahead and learn how to do that there for this demo i am going to change this rule to just allow public reading and writing but that's definitely not what you want to do when you actually create an app so we are going to do that and the reason for making it public is just so i can show you the code for what it would take to to upload a file and download a file if you want to see uh an example of authentication with firebase storage with firestore database then our chat app swift ui chat app would be a good thing to take a look at because it has all of those elements working in tandem and that course is coming out if it hasn't already at the time of this recording it's coming out in this month so if you're watching this in the future it should be available all right so firebase storage you're going to go into your rules and you're just going to change this to if true it's saying like see allow reads and writes if the authentication is not null which means that the user is logged in so i'm going to erase this and just say if is true if true so that means this is always going to be true so anybody can read and write so i'm going to publish this it didn't give me any warnings usually it'll give you some warnings and then in here you can organize this is basically your storage bucket and you can add new folders here so for example since we're storing images i might create an images folder and then when you when you'll see in the code when we upload files you can specify which paths which folders you want to upload uh that data okay so now that we have initialized our storage let's go back here and we are going to go into the content view okay so now we can start implementing the code to actually upload the file so what i'm going to do is add an extra button down here in this v stack it's going to be the upload button and this button will only show up if the image has been selected so if selected image is not male then we are going to show a button this is going to be upload the image and this is going to just be a text that says upload photo what i'm going to do is not implement the code right here i'm going to create a separate function within this contentview struct and we're just going to call that call that method so we'll call that upload photo and we are going to declare that right here and then we are going to first of all let's take a look at the documentation see what the steps are okay so if we take a look at this documentation first you have to create a reference and you can do that by importing it doesn't show the import statement here but you have to import the storage firebase storage framework and then you can get a reference to this storage service um but ultimately it's storage dot storage dot reference and then following that this is where you can specify any folders that you want so this is in this example you know you you can specify the images folders where you want to upload it uh if you want to specify a specific file name which you should um you do slash and then whatever the name is dot the file extension we actually go into the section for uploading files this will be a little more complete so right here these are two different ways that you can upload your files so you can either upload it directly to the root of your storage so all your files are just gonna sit here in the root or you can put it into a directory like this while these two the file names like if you use the name property and you ask what the the file name is they're both mountains right but the full path these two are not equal right because this is going to be uploaded to the root this is going to be uploaded to images slash mountains and then to actually upload the file there are there's a distinction between uploading the data from memory which is actually our situation where we have the selected ui image so we're going to turn that into data and then upload it as a file or if you want to upload an actual file you know on your device or you know stored in the storage of your app or something like that so we're going to actually be taking a look at this upload from data in memory so here they're showing a piece of data for us we're going to be turning the ui image into data and then the this is the reference to the storage that i showed you earlier storage dot storage dot reference and then here it's specifying the folder and the file name we're probably going to generate a unique id to keep all the file names unique and then you use that reference here and you use put data to basically upload that data now you are going to be able to specify two parameters with the upload data so the actual data you're going to upload and any metadata associated with that file so in this example they use nil but if you scroll a little further down there is a section that shows you where you can add any metadata you want to associate with the file so for example the store the content type this is what they use here uh it is optional though so you see that they're specifying nil here and then there's also a closure for when the upload has completed and the response has come back and there's two parameters one is error that's pretty selfexplanatory so was there an error during the upload but this parameter metadata now if it was a successful upload then this metadata will contain something it's it's not going to be nil however if there was a problem like storing the file then this would actually be nil and you'd probably find the error in this parameter so you can see here in this code that they are checking that the metadata is not nil otherwise an error has occurred and then here you can see that they can access different attributes of the metadata that gets returned so you can check the size and the content type and things like that and then here in order to get a download url after it's been uploaded you can access the download url property so let's go put this into practice and try this out we are going to implement our upload photo method in here so just to walk through the steps let's write it out first create storage reference turn our image into data and we are going to upload that data and then ultimately we also want to save a reference to that file in firestore database all right okay so first of all let's import firebase storage up here okay next let's go down here and let's create let's storage ref equals storage oops storage dot storage dot reference and then we are also going to want to i missed the step here specify the file path and name but even before we do that we should probably check if we can turn our image into data first because there may be an issue with that so let image data equals our selected image and we're going to force unwrap that dot jpeg data so you can either turn it into a png data or jpeg data but check this out this could return nil right if it's not successful in returning jpeg data then this will be nil and then in that case we can't upload anything so i'm going to get the jpeg data and i'm just going to set the compression quality to 0.8 now in order to run this function we should you know we've tested that selected image is not nil before they can even see this button and tap on it that accesses this method here but just to be safe we could still uh make sure that the selected image property isn't nil so guard selected image not nil else return because there's nothing to upload in that case right same thing goes for this if we're not able to turn this image into the data then there's no point so again just to reduce the number of nested if statements i'm going to use a guard statement here if guard image data not nil else return uh and then here we're going to specify the file path and in the name so let file reference equals storage reference dot child and the path is going to be images so this folder currently doesn't exist here but it's going to automatically create it if it doesn't exist if we if we specify that folder here and then for the file name i am going to substitute um a random uuid dot jpeg so this uuid we can create like this get a uuid string and you'll see what that looks like in a second and then here we do let upload task equals fileref dot put data so there are a couple different ones here right uh we probably want one with completion so this one so there's the data that we upload there's any metadata that we want to store remember in the sample code they put nil and then the completion for when it's finished uploading and then we can check if it was actually successful and ultimately we do want the completion because we want to store a reference in firebase firestore database if it was successful okay so let's put the data in there image data and i'm going to force unwrap it because we've guarded that it's not nil okay and for metadata i'm going to put nil and for completion i'm going to double click this to open it up and these are both optional remember that if there's an error that means there will be something in here if it was successful that means there will be something in here so this let's give these two parameters some names metadata and error so what we want to check for so we want we want error to be nil right and metadata to not be nil and that that signifies to us that it's a successful download and then in that case we will save a reference to firestore database now i'm going to put this as a to do for now because this is enough for us to start uploading an image and seeing what that looks like so let's go ahead and try it out i'm going to run this and then we're just going to make sure that we can run this code and we can see some files in here so let's go ahead and do that our simulator is launching okay there we go so select a photo let's go ahead and select this one i'm going to choose upload photo and i should have added some breakpoints is there an error let's see let's go here let's refresh ah there we go this this folder images and then inside we have the uuid dot jpeg all right and it's two megabytes we take a look at this all right that's great so that is basically how you upload images to firebase storage let's go over to our firebase console again and this time we are going to set up our firestore database create database start in test mode it's going to let anybody uh write to it it's going to expire on that date automatically okay so i am going to just start a new collection i'll just call it images and then here i'm just going to set up a sample document with a field and ultimately i want this value to be the path of my image in storage okay so whatever that path may be uh probably images dot whatever uuid.jpg that that's ultimately what i want so um you know in the um in an actual app you'll probably associate an upload with a particular user in this case i am just going to store all of the images in a collection and fetch all of them so you get you know you get a sense of how you upload files how you save a reference in the database pointing to the file and then how you then retrieve that and grab the associated file for display okay so here we are going to implement this to do we're first going to have to import since we're using the the database now import firestore and then down here we're just gonna do a simple save statement uh let db equals firestore dot firestore db dot collection equal images and then we are going to call document and this is going to generate a new uh let's just start this images collection do i have to put in i don't want to add a first document all right whatever i'm gonna start this collection and i will delete this document because okay so using this document method will basically generate a new document with a random document id and then following this i'm going to call the set data method where we can pass in a dictionary and the value sorry the label is going to be url and the value for this is going to be this file path right because this points to that that image so i'm going to create another constant just put that here and that way i can reference this path in here okay so let's upload another image and take a look if this is doing what we want select a photo let's choose let's choose this one this time let's upload the photo actually open another tab oh do you see that document so it's pointing to images and then you know this random string open the storage in another tab and you can see that that this is the image that we just uploaded so i'm going to go ahead and delete this one because we didn't keep track of that on the database side right so now you can see what we're doing right we're uploading a file into storage and then we are writing a database entry to point to that file so the next step would be to retrieve this data from the database and then retrieve the file for display so let's go over back to xcode here and we are going to close this upload method and we're going to create a different one called retrieve photos and this is going to be uh let's see get the data from the database and then get the image data for each in storage for each image reference and then uh display the images okay so what we're going to do like where we're going to display it is actually right below the upload button in this v stack here so we are going to create a divider and then let's just use an h stack and then we are going to basically loop through a collection of retrieved images and display it so i am going to create up here at state bar let's just call the these retrieved images ui image uh well no this would be a ui image like that a collection an array of ui images and we are going to you know when we call this method retrieve photos we are going to oops we are going to retrieve the images uh from storage and then we are going to put it into this array and then this ui code will automatically update so lets say for each for each photo inside retrieved images id self image in and we're going to use an image element that i use you pass it in as a ui image and then let's make these resizable and set it to 200 by 200. get rid of the alignment and we can take a look at what that looks like okay so this is how it's going to get displayed in the the ui and then down here let's go ahead and retrieve it so let db equals firestore firestore db dot images dot get documents all right and sorry that i'm going a little bit fast here because the point of this isn't to show you how to work with firebase so if if this is all new to you i recommend um going through the fire sorry database course uh module two the firebase stuff so the two parameters we get back are snapshot which contains the results of getting all the documents in this images collection right it's going to grab all of this stuff and error tells us any potential errors so what we want to do is if error is nil and snapshot is not nil then we have something to work with so the actual documents that are inside sorry the actual documents that are retrieved are in snapshot dot documents so it contains all of all of the individual documents that have been retrieved so we're going to say for document in snapshot and we can force unwrap that because we check that it's not nil so for document in documents what we're going to do is uh extract the file path we're going to actually create an array here to keep track of all the file paths so var uh this is actually it's just a string array so in the dock we are going to fetch see in each document we're going to fetch that key right url and that's going to return that value for us we know it's a string right so we're going to append it to paths dot append okay next loop through all the returned docs and then here we are going to loop through each file path and fetch the data from storage uh that's actually this all right so let's take a look at how we do this let's write the for loop first so for path in paths we are going to fetch it if we take a look at the documentation we can go to the next section download files and again we create a reference which we we have and then so here's the storage reference.child and then the path and then you you instead of put data you write get data you specify the maximum allowed file size that you want to retrieve so this is actually one megabyte because this is expressed in bytes yeah that's right and then you get back the data and a parameter to specify if any errors occurred so if the error is empty then then you're good if it contains something then an error has occurred so then you just grab your data and you create a new ui image using the data initializer and you pass it the data that it retrieved from storage and that's that's how we're going to display the image that was retrieved so let's try this out we are going to say get a reference to storage um specify the path retrieve the data okay so let storage reference equals storage dot storage dot reference let file reference equals storage reference dot child and the path is you know is what we retrieved from firestore it's like it's that okay so we put all of that into this paths array all right and now we're looping through each of those paths and we're specifying that we want to to grab that and specify the path and then in here we're going to retrieve the data so it's going to be file ref dot get data right with max size so i'm going to say i'm just going to say 5 megabytes completion you see the two parameters data and error let's double click this to open up the closure data error and then we're going to say check for errors if error is nil that means there's no errors and we can then create a ui image and put it into our array for display so let image equals ui image data actually let's let's also check that the data is not no if there's no errors and data is not nil right then here we can just pass in and unwrap that and then we are going to add this image to retrieved images uh to display so we are going to say retrievedimages.append and we're going to pass in that image but when you do this it's going to trigger the view code to to recalculate and then it's going to display the images but since this is causing the ui to update we need to pass it over to the main thread to do because you don't want to do this from a background thread which is where this this code is happening right now so we're going to do that let's see oh there's a possibility that at this initializer uh returns nil all right so in that case if that is the case we wouldn't want to do it let's let's use optional binding here if let image equals that and if we we were able to create an image that's when we would add it in here all right so i mean there this is quite a bit of nesting so it's kind of hard to read you can to ease some of this i mean this is why async and await was created file path is this one here and yeah okay so what we're going to do now is test this out but first of all we gotta figure out where we're gonna call retrieve photos um there are two spots which i can think of one is when this view appears because we wanna take a look at the photos so when this v stack shows up we are going to say on appear perform retrieve images the other place we'll want to call this is after after we have just uploaded an image right and saved the reference so i am actually going to use a different set data method i'm going to use one with a completion this one right here so this one allows me to pass the same data to upload or to save but it also has a completion block i'm going to open up this closure and just do error here so if there were no errors display a new image so this is going to be let's see if error is nil then call retrieve images uh keep in mind though that you know i just thought of a better way to do this um you know if you wanted to do this you should throw it over to the main thread to do because it does update the ui but i just thought of a better way like there's no reason why we need to retrieve the images over again that doesn't really seem to make sense to me right here oh sorry not retrieve images uh retrieve images um the reason why is after we've uploaded this single image right why not just add that selected image because we already have it as a ui image right selected image is the ui image this is the photo we just uploaded to storage successfully because we know it's successful at this point why not just append that to our retrieved images and that saves some bandwidth that saves us having to you know run this code all over again so let's just say uh if error is nil that means there are no errors add the uploaded image to the list of images for display so self.retrievedimages.append self.selected image and we can force unwrap that because we just we just did that and again this is going to be affecting the uh the ui so we want to do this in the in the main thread because the main thread is responsible for updating the ui all right so let's try this out uh if i run this now supposing there are no errors oops something's wrong i cannot call ah that what did i call it retrieve photos whoops retrieve photos there we go in storage right now well in our database we have a reference to a single image and in storage we have a single image so hopefully when we launch it we'll see that okay we do perfect that is that's really big though let's make that a little smaller let's make that 100 and 100 and run that again so this time we can actually see it and then we'll upload a couple more and we should see it up here all right so there's the photo that we have in our database let's choose that upload it ah cool just to double check there's the second file and there's also another entry here let's select another photo let's upload that all right i hope that was helpful if you have any specific questions about this tutorial do post it in our code crew forum and myself or someone from the team will jump in to help out thanks for watching and i'll see you in the next lesson