hey coders how's it going Chris here and in today's parse lesson we're going to look at retrieving objects in the previous lesson we saved a bunch of objects into our parse back end so let me show you what we did parse demo in the browser under the contact store we have two rows so today we're going to retrieve this data in our Xcode app so let's go ahead and open up our app and make sure that you open up the EXCI workspace file instead of the Xcode project and all that loads up this is a handy documentation to have like I mentioned in the last episode all you need to do is go to parse comm slash Docs and from there you're going to be able to choose guide under iOS and you're gonna come here where you can look at how to do saving retrieving and all the stuff we're talking about in these lessons so here we are we have our Xcode project open I'm gonna visit the view controller and this is the same project that we worked on yesterday I'm not going to create a new one and integrate the library all over again instead I'm going to just delete this stuff right here and I'm going to work on retrieving the data so retrieving data from parse revolves around the PF query class okay so let us create a brand new query let query equals PF query and here you can pass in a class name to initialize the query we're going to pass in contact because that is if we go back to the parse dashboard that's the class name that we save this data under so let's go back here and now I'm going to show you how to retrieve a object from parse if you know the object ID remember yesterday when we saved these two rows of data it autogenerated this object ID so let me just copy this one for Tommy and let's retrieve it based on that ID now chances are you won't know the ID unless you've kept track of it somewhere in your code but I'm going to show you how to retrieve all of the rows in that store in a little while so here we're gonna type query dot and we can call a method called get object in background with I D so we're going to choose this one right here which allows us to specify a block of code for what happens when the object is returned so here we pass in the object ID that's this one and for this block I'm going to double click it to open that block of code and remember when I said that and remember when I said that data and parse revolves around PF objects and we created PF objects to save the parse so when we retrieve that data back it comes back as a PF object as well and I'll show you how to access the columns of data from that PF object so here notice that it is an optional type so it could be nil if it can't find any object with this ID so I'm just gonna call it D let's say the object that's the parameter I'm using and let's call this the error and here in the code we're going to check first after it's retrieved the object was it successful so here we got a check if the object is not equal to nil and the error is equal to nil because we don't want there to be something in the error parameter if there is that means there was an error message and here we're checking that the object is not nil so meaning to say that there is an object returned then we can print the object else some error happened and then you can print the error here I'm going to say successfully retrieved object okay so what I'm going to do is just set a breakpoint here and I'm going to run the app and hopefully it goes and retrieves the contact object with this ID okay so it's thought that our breakpoint line which is great because that means that successfully retrieved an object it's not nil and there is no error so let's in the console here let's go pio object and see what we get so as you can see in the console window here we've got our PF object with all of the properties or the key value pairs that we saved it with the first name is Tommy last name is Smith email is that and in order to print out specific data let's say you've got your object returned and you want to access the first name well it's kind of like a dictionary you just pass in the key like that so we're gonna print the guy's first name however it doesn't know what type of data the value is so we can cast it as a string like that because we know that the first name is of a string type so let's run it again okay so we've got an error here remember that object is an optional type so we have to unwrap it first so let's add an exclamation mark there to unwrap the object and get the dictionary and then we pass in the key to retrieve the value but the value needs to be cast as a string like that so now we will be able to run it and you can see here in the console that it printed out the first name okay so now what if you weren't able to get the object ID but you want to retrieve all of the data so let me just comment this out and we'll perform another query so let query equals PF query class name contact and then we're going to say query dot find objects so before because we knew what the object ID was we used get object but here when we want to retrieve all of the rows we use to find objects so we're gonna use this one find objects in background with block because this one has a lets you specify a block of code to execute when the the fetch returns so let's open up the block of code and it has two parameters notice that this time it has it's still optional so it could be nil it could return no objects but this time it's an array of PF objects so you can see those square brackets there and we've got the error parameter again so let's give these parameters some names I'm gonna call this object and in the code we're going to say let's check if the error is there's nothing in there first so meaning that there was no error in the fetch and next we're going to check if there are objects this time let's use optional binding so if let returned objects equals objects and then here objects array isn't nil let's loop through the array to get each object so let's use a for loop here so for object in return to objects we're going to print out the first name so print object first name and we're gonna cast it as a string so we're gonna print out that first name there's a difference this time up here the actual object was an optional type so we needed to add this exclamation mark to unwrap that object because we have checked out it isn't nil here it's the actual array that we're checking it's the PF objects array and so we've determined that that isn't nil so inside that array we have all of the PF objects okay so let's give this a run so here in the console you can see that John was printed and Tommy was printed so that's great we've learned how to retrieve a specific object with the ID and we've learned to retrieve all of the objects just using a basic query like this now you can see how this might be a problem if you had a ton of contacts especially if let's say your app was used by multiple users and each user had their own set of contacts if you did a query like this it would literally just return all of the contacts in that store whether it belonged to this user or belonged to another user so this query this PF query actually has a lot more features you can do to limit and constrain the query that you're performing so you can say stuff like return only the contacts with first name starting with T or you know add some more parameters to the query so you're making a more specific query and you can do sorting and you can do limit you know the first 10 results and stuff like that so the PF query is quite powerful and we're gonna learn in a couple lessons later how to form more complicated queries but in today's lesson the focus was just to get the data out of the parse backend show you guys how that works and then how to access the data in the PF object that is returned so I hope you guys learned something new if you enjoyed it please give it a like and subscribe if you haven't please share it with your friends and colleagues that helps me out a ton so thank you so much and I'll see you guys tomorrow have a great day bye