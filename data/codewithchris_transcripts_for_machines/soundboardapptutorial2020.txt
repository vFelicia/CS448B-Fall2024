hey cuckoo today I'm going to show you how to build a simple soundboard app a/b c/d a C B now this is a great practice out for beginners and we're going to do it in four simple steps all right let's roll hi and welcome to Chris the place to be if you want to learn how to make an app I'm Chris and I'm so glad you're here here's the plan we're gonna start by building the user interface and then handle the user tapping we're gonna add the sounds and then finally play the sounds and at the very end I have a challenge for you if you're up for it to modify the project so let's dive in with setting up the UI we're going to start by creating a new single view app I'm just going to call this the sound board and I'm gonna save it in my apps folder on my desktop then we're going to jump into the storyboard and we're gonna add a stack view a vertical stack view to be specific and we're just going to put it right there now I hit the shortcutkeys command shift + L to bring up that object library but you can also click this button as well and then just search for stack view what we're going to do is have this stack view highlighted and we're going to come into here and then uncheck constraint margins and enable all four constraints and for all these choose the view hit this little dropdown and choose the view this is going to ensure that this stack view is going to reach all the way to the edge of the screen because the safe area is a margin type of area where we want it to reach all the way to the edge of the screen we're gonna add these four constraints so you can see that it touches all four sides and then we're gonna go ahead and add a horizontal stack view this time and just put it in there you can see that this horizontal stack U is inside the vertical one so that's correct I'm going to hit command shift L to bring up this menu again and this time I'm going to drag this guy directly into this document outline the reason is because I don't want to accidentally put this horizontal stack view inside of the other horizontal stack view and it's going to look like this if you do this don't worry about it all you need to do is get back out so that the vertical stack view contains the two horizontal ones now in order to get four quadrants equally we're going to set some attributes on this vertical stack view go into this inspector here and for distribution we're gonna say fill equally and I'm gonna highlight these two horizontal ones and again change the distribution to fill equally finally we're gonna add some buttons so hit command shift L now search for button this time and let's put it in there and add another one to that horizontal stack deal all right and we're gonna add a third and a fourth the third and fourth are going to the second horizontal stack view so now you can see that we've got four buttons like that and just this check if you've got the right layout going on you can run your project and you should see your four buttons and even if you press command left and right to rotate the phone you should be able to still have four quadrants and that's when you know you've set things up properly now we're just gonna configure some text and some colors so I'm going to go ahead a highlight well we're gonna do this one by one because we're going to be setting the colors so let's select any button go down to the background and we're going to choose a color so I've recently used these ones so it's here but if you wanted to set a custom color you just select custom it's going to pop up this little menu for you to select your own color alright here's my second button I've got maybe this red or pink this third button blue and then this last one oops all right so now let's change the text and we can do all of them together let's change the font I mean so we're gonna hit this little T right here and change it to custom and I'm going to change it to bold and I'm just gonna up that font size that looks something like that and now I'm going to change the text for the individual buttons actually you know what I wanted to change the text color too so I'm gonna highlight all of them change the text color to white right now I'm going to change the text of each button I'm gonna call this a B C and D the next thing to do is to handle the user interaction now we're going to handle the tapping of these buttons and the way we can do that is by hooking up IB action functions to each of these buttons when they are tapped so go ahead open up assistant editor on the right hand side you see automatic view controller and we basically want to find the last closing tag of this class and right above there we're going to be adding these IB action methods so if it makes it easier you can drag you can create these IB action methods from the document outline which is what I'm going to do here hold down control click and drag and by default the connection type should be action if it's not just change it to action and the name I'm gonna call it a tapped and that creates an IB action now I'm going to hook up an IB action function for every single one of the 4 buttons but at the end I'm going to issue a challenge to you to do it with one single IB action but for now we're going to hook up an IB action for each one just so you can see how this works before we get more complicated so we've got C tapped it's definitely a lot of code replication here but you know that's alright when you're just starting out and you're not trying to do everything you know the best way all right so if you go back into your view controller you should have all of these for IB actions these guys should be filled in and if you click them they'll tell you kind of what button they're hooked up to now let's add the sounds I created a couple of sound files and we're going to add them to our project right now so I'm gonna go here and create a new group just to keep things organized I'm gonna call them sounds and then I'm just gonna drag my mp3 files into the sounds group and it's gonna pop up this guy select copy items have needed that's going to include the sound files into your project folders keep it all in one place and make sure add to targets is checked on because this is very important if this is unchecked like that when you package up your app into the bundle which is just kind of the app package if you will those sound files won't get included so you want to make sure that this is enabled alright click finish and you should have your sound files right there in just a double check if you select each one of these files you should be able to see Target membership this is enabled because if they're not enabled then you're not going to be able to reference those sound files finally we're going to play the sounds now we're going to play the sound files using the a/v audio player class the first thing you want to do up here is import AV foundation because that's going to contain the class that we need I'm going to save our audio player is equal to AV audio player and we're going to make it an optional this means that we're not creating the audio player object right then in there we're only creating this property that is going to store a reference to that audio player object once we do create it so instead we are going to do that inside each of these ib actions so let's take a look at how we're going to create one of these guys so AV audio player and you can see here a couple of things i want to point out that you have to pass in a URL object this URL object points to the sound file which actually is inside of our bundle we've added it right here that's why I said it was so important to make sure that these mp3 files are included in that target membership the second thing I want to point out is that creating this av audio player object has this throws keyword and that basically means that it may throw an error if the audio player object isn't able to be created so we have to do some error handling just to be prepared to handle that error so let's go ahead and see how this is done we're going to need to pass in a URL object let's create one up here so that we can do that I'm going to say let URL equals and the way we get a path to that mp3 file is we can say bundle dot main dot URL for resource with extension and this is basically going to look inside the app bundle for this project and we're going to be able to specify that the resource we're looking for is a and the extension is mp3 you don't need the dot and we're going to pass the URL into right here and because this creating this AV audio player object can potentially throw an error we have to put the keyword tri right in front of it and we have to wrap this in a do catch block so what happens is if you're reading it like plain English it's saying do whatever is inside this code block right here starting from this to here do that and inside that code block you're going to try to run some code and then if it errors if it throws that error it's going to jump in here and catch it and you're going to be able to handle that error so we're just gonna say error and that's going to print an error out into the console and right here we have an error because this URL object could potentially be nil meaning that it can't find that file like for example if I put F and we don't have F dot mp3 then it's not going to be a valid URL right so we can write a line of code here we can use something like a guard statement which we can basically ensure that it has found that URL we can say guard URL is not equal to nil else return so this is make sure that we've got the URL otherwise for here we can say getting the URL and then here we can say create the audio player and play the sound and so when we come down here we know that for sure that URL contains the path otherwise it would have hit this line of code and exited the function so we can go ahead and use an exclamation mark to basically tell Xcode don't worry we know there's an object in there you don't have to check or complain now before we run the project we're gonna actually have to play the sound file so go ahead and call the play method so now let's run the project and see if we can get the sound playing and if we can then we are going to basically duplicate this code it's gonna want to use my microphone for some reason ayayay all right cool so now let's stop the project and basically going to replicate this code for each of the other functions changing the file name now if you're a little more experienced then you'll know that this is you know not the best way to do it because we've got all of this code duplicated but when you're just starting out I don't personally think it's a problem because I know that as you're going to get further and further into your iOS journey you are going to get better and better and plus we're not doing this for an enterprising client or anything like that alright see you all so now that you've got this working with all of this replicated code and for IB actions I want to challenge you to get this done with one IB action method and not having to duplicate any of this code I'm going to give you a hint though in the button that you've got right here there is a tag property right here that you can set and then in the view controller in the function you'll going to be able to read that tag you can access that property this sender is actually the UI button if you feel off for the challenge simply use the link in the description below or click right up here to download the source code and if you have an app idea but you're not sure where to start definitely check out my 7 date app action plan it's a free course that's going to set you off in the right direction I'll see you in the next video