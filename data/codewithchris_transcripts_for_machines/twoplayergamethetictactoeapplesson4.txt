well now that we have our structure in place and understand how the game of x's and o's is played it's time to start coding our first game mode and that's the two player game that i designate with the game type single to represent a single device before we start coding however let's create a new branch for our git repository i'm showing that the current branch is game planning so i want to branch directly from here for this video and i'll call it a two player game branch now our game is going to be managed by a new observable object class called game service so within the game screen folder let's create a new file and call it game service inside there we'll create that class of the same name and make sure that it conforms to the observable object protocol our game needs to know a number of things that over time may change so we'll want to observe those changes by adding some published properties first we'll need to create properties to represent our players so let's create player 1 that is a player where the game piece will be x and a place holder right now so let's use the string player 1. i'll duplicate that and name it player 2 with the placeholder using the string player 2. we'll also need to keep track of all possible moves and for that we can assign the constant from our move enum namespace which is all and let's also create an array of moves taken that'll be an empty array initially and for a fifth published property i'll need a boolean value that will tell me when the game is over and i'll set that initially to false we'll need to know the game type as well but this will not force a new update so we can simply use a var here and i'll initialize it as a game type of single next we can create some computed properties that will allow us to make changes for our ui the first is a variable that we can use to recognize the current player which is of type player so if player 1 dot is current we can return player 1 else we'll return player 2. we'll know the game is started if we've made one of our players current so another boolean computed property will be game started and we'll check whether or not player 1 is current or player 2 is current we'll be constructing a game board but there will be certain conditions where we don't want the players to be able to tap on any square and that's before any player has been made current which is at the start of the game and once the game is over so let's create a board disabled property that is a boolean that will check for that when we tap on that start button we want to update our player names and set up the game type based on the pickers game type so let's create a function for that we'll call it setup game and we'll have three parameters the game type which is of type game type along with two strings representing the two players we can switch on the game type and let xcode generate the cases for us in the case of single where we're passing the phone around we'll set this class's game type to single and update the player 2 dot name with the value that we have in our text field in the case of the bot we only need to specify that the game type is a bot similarly if we have a game type of peer from the picker we'll set the classes game type to pier and in the case of undetermined we'll simply break now you'll notice we haven't set player 1 name well that is always going to be your name that we kept passed in so player1.name will be player 1 name next we start a new game and we want to reset all of our published properties and variables to create another function called reset we can set both of our player is current properties back to false we can remove all from the moves taken array and we remove all moves from both of the arrays of moves from both players then we set our game over property to false and set the possible moves array back to the full set using that moves all constant now all of these will be affecting the ui so we want to make sure that it all gets executed on the main queue so we can do that by specifying that this class is a main actor each one of our views is going to need access to this class so in swift ui we can do that by injecting an instance of it into the environment at our app entry point so let's create here a state object and call it game and assign a new instance of game service to this property and then we can inject it into the environment using the environment object on our start view and pass in that game so in start view we can get access to that using the environment object property wrapper and make it of type game service and we'll also need to fix our preview by injecting a new instance into the environment here in game view we repeat that same process for both the game view struct and for the preview provider now we can start to create our game view first we can replace that text view in the vstack the textview that will be displayed if we have not yet made a player the current player to start the game so we can use an if clause here on an array of the two game player is current properties and then check if all satisfy where the iterator dollar 0 is false meaning both are false if they are then we can display a text view that says select a player to start below that i'm going to create an h stack in which i'll create two buttons the first button label will be game.player1's name and the action will be set to player 1 is current property to true the second button will be very similar except it will reflect player 2. once we make one of the players current game started the computer property will be set to true and we can use this then to disable both buttons let's add a spacer then to push it up to the top i'd like to set a style to these buttons by making the is current player display with a green background otherwise it'll be grey so on our first button let's set a padding of eight i'll add a background using a rounded rectangle the corner radius of 10 and then i can apply a fill where we can specify that if the game dot player 1 dot is current we'll set the fill to be a color green otherwise it'll be gray and then i can follow that by setting the foreground color to white as you see by default the button is gray but when i tap on it it turns green and the text view asking to select the player is no longer displayed well i could copy and use the same style for the second player but let's create a button style instead i have a full video on creating button styles and i'll make sure that a link is in the description if you care to watch it here's what we can do within this file create a struct called player button style and make sure that it conforms to button style like the view modifier that we saw before it requires a make body function but this time it uses a configuration and one of the properties of the configuration is the label well we can pass in a boolean property that signifies whether or not the player is current and then we can use this for both buttons let's just cut out that button modifier from our button and paste it to apply to our configuration label and then we can just set the fill based on the is current property with that in place then i can now apply a button style to each button and for the first we'll use the player button style where the is current is the game.player1 dot is current property and then for the second button we'll use the same button style but for player 2. testing now i see that tapping either button will set the color and then disable the buttons from tapping again they will only get activated once our game is over time to design the game board now we can create a square that will represent one of our nine squares in a grid so we'll need a model to hold the information that we need for each square so create a new file within the game screen folder and call it game square each game square is going to have two properties an index which will be from one through nine to represent one of the squares and an optional player object associated with that square and once we tap on a square that square will be assigned the player that was current now i want to display an image so we'll need to import swift ui well now then we can create a computed property for our square that will be an image so if the player has been set then we know that the player type is so we can use an if let to unwrap it and then we can return that player's game piece image which remember is a image else without a player being assigned will default to the empty square which is the image using the none asset now whenever we start a new game we'll want to reset all of the squares back to empty squares and set the player property to nil so let me create a static property called reset and it will return an array of these game square so we can start with an empty array and then iterate through from 1 through 9 appending a square using that index that we use for the iterator by default the player is nil and we'll append it to the squares array and then we can return it back in game service let's add a new property to the game service and it'll be a published property called game board and we'll initialize it to that empty set that we just created that constant for the gamesquare dot reset similarly when we reset our game we'll set it all back to that same array of empty squares now that we have our model we can create a new view to represent that single square so inside the game screen folder we'll create a new swift ui file and call it square view we'll make sure that it has access to the game service environment object and inject an instance into the preview as usual and then we'll create an index property as an int of course we're going to need to provide the preview with one as well so let's just use a value like one so we'll replace the body with a button we'll leave the action empty for now for the label i'll use the games game board at that indexes image i'll make it resizable i'll set the frame to be exactly a width and height of 100 and then i'll make sure that it's disabled whenever a player has been assigned and that's when the player at that game dot game board index has not been set or is not nil and then we can set the foreground color to primary so that it will be black in light mode and white in dark mode now back in game view before the spacer let's create our game board we'll start with the v stack and inside there we're going to create three h stacks that will display three squares each well i can use a for each loop and iterate from 0 through 2 using self as the id and that will provide us with an index that we can use to display our square view at that index i can copy and paste this two more times and then change the range through three through five on the second row and six through 8 in the third back in game service we can create a new function called update moves by passing in that index if player 1 is current we can append to player 1's moves array the index plus 1 to get the number of the square that we use and then we can set the game board at that index player to player 1. else we'll do the same thing but for player 2. so once a move has been made we want to check to see if there is a winner so i'm going to create a function for this and this is simple since both players 1 and player 2 has an is winner computed property remember so we can simply check to see if either one is true and if so set the gameover property to true if there is no winner we'll need a function that will turn the move over to the next user so we can create a function called toggle current and this will simply toggle the is current property of both players now we can create a function that we can use for all three of our game modes and it will set the game board check if there's a winner and if not update the array of possible moves by removing the one that had just been set and then pass it on to the next user i want to have the game board change using a standard animation so we'll need to import swift ui so for that function i'm going to create it and i'm going to call it make move and it's going to have one parameter only and that's the index and that's an int now we'll only allow this move to be made if the game board at that index player is nil otherwise the square has already been taken then with animation i can call the update moves function using that index so this is going to place an x or an o in that particular square now once that move's been made i need to check to see if there's a winner well if the game is not yet over meaning we've either got a winner or we've reached some sort of an impasse we can update the possible moves array and we do that by seeing if we have a matching index where we check each of the integers in the possible moves array to see if it has a match using the first index where that item is equal to the index plus one if it is we'll remove it at that index and then we'll toggle the current users to move on to the next player if at this point then we find that there are no more possible moves we've reached a stalemate and our game is over we can finally return to our square view then and for the action in our function we can call this function when we physically tap on the square one thing i forgot to do here is to make sure that we'll disable our entire board if our game's board disabled property has been set to true so back in our game view we can add that modifier here the last thing we want to do is to display the winner when the game is over so before the spacer then create a vstack and then conditionally if the game dot game over we can create a text view using the string game over now if the game possible moves is empty no one won so we can create a text view to display that information else we can create another text view that will display the game dot current player name and specify that that person wins below that we're going to want to give the user the ability to play a new game so we'll create a new button with the label new name and all we have to do is call the games reset function let me set the button style here to bordered prominent and i'm going to set all of the text to a font using large title return now to start view when we tap the button to start the game we'll need to call the game's setup function and pass in the picker's game type and the values entered in our text fields for our different player name arguments and then one final thing we need to do is to always make sure that our game board is reset every time our game view appears because we could exit the screen and not clear the board so all we need to do is add an on appear to the game view and make sure that we call the game reset function let's test and we can do this in preview by going to the start view i'm going to select the two player game and then enter two names and when it's done i can click on the start game button and i'm presented with our game board i need to select one of the players to start and once that turns green i can tap in a square and once that happens the is current property switches and you can play as another player oh something went wrong both players are playing an x let me return to game service and here where i initialize my players i see that player 2 should have been an o not an x let's return and try again again we have to enter both names tap on the start game button select the player to start then after making our first play switches over to the second player and this time we get a different game piece and i can continue playing until we get a winner once i do i can press the new game button and go ahead again this time if we reach a stalemate we're told so well let's make sure we commit our changes to get before we move on to the next video and in the next video we're going to add to this to enable our second mode which is where we challenge our device and that's why we created that function we're not going to be tapping on any button we're going to be doing that programmatically by letting our device determine which square to in quotes tap on and then call that function