hey coders what's up it's Chris here welcome to part two of query constraints so in the previous lesson we looked at how to perform more specific queries by adding constraints and you learned that there are a whole bunch of different constraints you can add such as equal to not equal to contained and not contained in and so on today we're going to look at some other filters that can help you refine your query some more so let's look at select keys first of all just to refresh your memory in our parse class for contact we have a couple of fields we have email first name and last name so what if I were only interested in the email for this query and I didn't care about the first name or last name well we can actually save some bandwidth and data for the user if we don't retrieve this data we can just say retrieve the email data that's all we want and select Kies allows you to do that so we would type query dot select keys and here we pass in an array of the keys that we want to return so we would do that and then this would be in addition to any other constraints that we have so let's say we were using this query right here let me just grab that put that there here we are grabbing all of the contacts that have age greater than 30 and I only want their emails so this is going to do that and then after that remember you have to go find objects in background or find objects in background with block to actually execute the query okay so that's select keys another thing that you can do is called limit so let me actually just comment this out I don't want to delete it so if you download this project you have it for reference so let me just copy this line let's say we're performing another query and we want to limit the results to a certain number we can do limit and we can set it to some number so it says here the default is 100 with a maximum a thousand results being returned at a time so say I want to limit it ten results that's how you would do it now you saw the maximum results for a query is a thousand being returned so what if you expect that your where you might return more than a thousand well you're going to have to use skip so let me show you how this works just comment this out so this query limit you know if I expected this query to return more than a thousand and I set my limit to a thousand it's gonna return the first 1000 results if I want to get anything beyond that I'm going to have to do something like this query dot skip and this is going to skip the first X number of results so I would say you know skip the first 1000 because I got it before and give me the next whatever remainder there is so that's how skip works and then we have some sorting done this is actually not sort by its order by and what we would do is just query dot order by and you can order by ascending or descending on a certain key we can say you know give me first name like that in alphabetical order okay and this get first object method will basically just return the first result in your data set let's say if you're just interested in a single result you would go like instead of find objects in background you would say get first object get first object in background probably with block and so it this block of code is going to return a single PF object or it could be nil you can see here that there's a question mark so it could return nil so this would be your object and this would be your error and in here code to run when first object is returned so this is how the get first object method works let me comment that out and finally count objects what if you're only interested in the number of results in this case you know we're looking for the people who have age greater than 30 but we don't care about the actual people we only care about the number of people where the age is greater than 30 so we would say carry dot count objects in background or count objects in background with block and you would do this instead of find objects because this will just return you the count so let me expand that block see you get an int there I'm just going to call that number and this is an error parameter and in here we're going to say code to run when the count is returned and so that's how you would use that and next I want to show you guys how to do compound queries so so far we've looked at all of these query constraints we're adding more constraints is going to be an end Clause so like I said for this query right here for example we are creating query on the contact class and we're saying return all of the contacts where the first name has the prefix t√≠o and the first name has the suffix why what if we wanted to do an or what if we wanted to say return all the contacts where it either has a prefix of tio or has a suffix of Y so in that case this one fit the bill right because if we add these two constraints it becomes an end so the technique to do an or query or otherwise known as a compound query is what they call it you have to create two queries one looking for results which has the prefix of tio and another query looking for results which have the suffix Y and then we can use those two queries to create a compound query so let me show you how that works you just create another section down here so compound queries I'm just gonna write or here so you remember that okay so let query equals let's actually make it more descriptive prefix query equals that class name is call and so we're gonna add our claws now prefix query where key has prefix so key I want first name and the prefix is what we had before like that and I'm gonna create another query I'm gonna call this the suffix query and this is also performed on the contact class and this one let's add the clause has suffix first name ends with Y okay so now I have two separate queries now I'm gonna create a compound crater house both of them I'm gonna call this the or query actually let's use capital Q here just for some consistency and what we would do here is write PF query it's a class method so it's C or yeah there it is or query with sub queries so when here you pass in an array of PF query so that's what we're gonna do here and we're gonna combine the prefix query with the suffix query and here this is our compound query so all we need to do is run it by saying find objects and background like that just like we've done if we were doing a single query so it returns array of PF objects objects error code to run when the compound query returns so in this case it's gonna search through the contacts tour for all queries which has first name equal to or starts with TL or first name ends with Y and actually Xcode is complaining here because I change this to capital Q I need to do the same here and here so that's queries in a nutshell I hope that it gives you some ideas about how to query your own parse back end and there's still a ton of things to talk about regarding the parse platform and how to access your data so stay tuned and I'll see you guys tomorrow thanks for watching please subscribe and like the video and please share the video if you think that it would help someone else thanks so much I'll see you guys tomorrow bye