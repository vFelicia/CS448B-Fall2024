hello and welcome in this video we are nearing the end of the project in this lesson our goal is to add a wind condition and show an alert by the end of this lesson you'll have added a timer to the app and the ability to detect whether the user has won or lost alright so let's get started so the first thing we're going to do before we actually add the timer is we're going to accommodate a timer label in the UI so that the user can see the timer counting down the way we're going to do that is we're simply going to add a label above the collection view so we're actually going to go ahead and put this collection view into a stack view first of all so click this button embed in stack view that's going to put your collection view into a stack view right here and if it's not a vertical stack view go ahead and change it right now to a vertical stack view and the alignment should be fill as well which will automatically stretch the elements inside of the stack view so that they are full width and next we actually want to position the stack view so that it is hugging all of the edges because right now there are no constraints for it even though it looks like it's positioned correctly there are actually no constraints to specify that so go ahead and make sure that your stack view is selected and then come into this menu and let's add four constraints to it all zeros we're going to do that and next we're actually going to go into this object library here and search for label and we're going to click and drag that into the stack view above the collection view right there and let's give this label some text and call it time remaining we are going to want to specify let's just put 10 for now and right now it's not actually visible the reason for that is because it probably doesn't have a height so why don't we go ahead and specify a height let's say 30 and while we're at it we're going to also specify a width and the reason for this actually let's not do the width yet let's do the height because we definitely need a height for that label otherwise it's just going to be zero height so we can go ahead and actually Center the text by changing the alignment here and while we are at it let's change the background of the collectionview to have a clear background so go ahead and select that scroll down here and under background select clear color like that and we should be able to see the background now let's go into assistant editor because we're going to want to connect this label as an outlet because we definitely want to change the numbers on this label and call it the timer label and connect it like that and let's go back to a single view editor go into the view controller and now let's create our timer let's go all the way to the top here where we are going to create a property to hold a reference to our timer so under here the rest of the properties let's create a property called timer and it's going to hold a timer object and it's going to be optional for now the reason for that is because we want to do it in the viewdidload we want to create the actual timer object there so the way the timer works is that you specify an interval for the timer to last and when it reaches 0 it's going to fire a method of your choice and then you can have that timer repeat so we are actually going to create that method first down here let's create a new section called timer methods and let's call this maybe timer elapsed and in here we're going to run some code whenever the timer is has fired and I wanted to create that method first because when we create the timer object we can specify the method to fire and I want to have that ready so in the viewdidload here let's create our timer object create timer and we are going to use a special type method of the timer class and that is to schedule a timer and there are a couple of different ones so you want to make sure that you use the right one there's this one here where you can specify a time interval a target a selector user info and repeats that's the one we want to use so go ahead and select that calling this initialization method is going to return a timer object to us set to all of these parameters that we specify here so the timer interval is actually expressed in seconds but I want the timer to be counting in milliseconds so that it invokes a sense of urgency from the player and so I am actually going to specify that the interval should be a millisecond because there are a thousand milliseconds in one second so I just divide one by a thousand and this is what you get so target and selector these two will allow you to specify a certain method of a certain object so since the timer elapsed method is inside the view controller where we are writing this code dart target would be self and the selector we have to use our special selector syntax and that's the hash tag selector and you can specify you can see here that it recognizes what it is and we can specify timer elapsed that this is going to actually create an error for us if we take a look it says that it's referring to a method timer elapsed that is not exposed to objectivec add this tag to expose it to objectivec so we're going to just hit fix and it's going to add that to our timer lapse this is something that we need to do in Swift for now if you're using an older version of Swift you probably won't run into that issue user info is where we can specify some options it's gotta be nil for us right now and we are going to specify that this timer should repeat when it is up so it's essentially going to fire every single millisecond and it's going to call this timer elapsed method every millisecond now we come to the point where we need to think about how much time do we want to give the user to complete this puzzle and up here let's express that as a property let's call this milliseconds this was going to be a that's not actually going to be a float well yeah we can specify as a float because later on we're going to need to divide that and express that in terms of seconds and if if this if we didn't specify type and we just specified something like 10 seconds which would be 10,000 milliseconds this is going to be integer if we try to divide this it's going to give us a whole number but we do want decimals so I'm going to specify that the type of this is actually going to be a float and milliseconds so that it's a little easier for us to think about and to read I'm going to do 10 times a thousand and that's essentially 10 seconds this would be 10 seconds okay so now let's work on our timer elapsed method so each time that this method fires I want to deduct a millisecond from our counter up here so I'm just going to do milliseconds equals 1 and that is going to decrement it by 1 and then I also want to express this in seconds convert to seconds and like I mentioned we just simply divide by a thousand to get the number of seconds but we do want to limit that decimal to two decimal places because any more than that would be confusing to the user to see that many decimal places so we can actually format it as a string with two decimal places if we take a look at some string initializers there's actually one called format down here where you can specify a format that has two decimal places and then the arguments is the data which you want to fit into that format so let's choose that so the argument is going to be milliseconds divided by a thousand and the format is going to be specified like this so percentage is a wild card where this data is going to be substituted into and to specify two decimal places you just go like this dot 2f and that is going to give you a string that is formatted to two decimal places I'm going to assign this into a constant called seconds and we are going to set our label to a timer label not text is equal to time remaining and we are going to substitute in seconds like that okay so now let's just run our project let me choose the iPhone 10 simulator we're gonna run our project and make sure that our timer is running making sure that this method is firing making sure that the label is visible and displaying the updated number of seconds so we do see our label updating and you can see this label is bouncing around a little bit to the left and right and that's because it's trying to Center it and also we didn't stop the timer when it reached zero so we need to address that as well but essentially these numbers are different widths so the width is constantly changing and this label is bouncing left then right while it's trying to center so what we need to do first of all let's address reaching zero when the timer has reached zero we want to stop it if milliseconds is equal to zero how about we do less than or equal to then the way we stop the timer is we call a method called invalidate on it so let me actually just read you the description of that stops the timer from ever firing again and requests its removal from its run loop and you can think of the run loop as just exactly how it sounds it's a bunch of things that are running in the background so we're actually going to need to change that timer to run on a different run loop or a different mode actually and I'll elaborate on that in a second okay so that is going to stop the timer now let's address the issue of it bouncing around so in here you can see our label is centered right and if this width or the text in there changes widths that is going to cause it to bounce around so what I actually want to do instead is probably set a width on this label so I'm going to set a width of about 190 and the reason why I choose this number is because I know from my testing that that is approximately the width so by setting it to 190 you can see that there are going to be some issues here the reason is because the stack view right now the alignment is set to fill so that wants to stretch everything out to the width of the stack view but if I Center it instead that is going to honor the width of this label right and it's just going to Center it the collection view itself doesn't really have a width so that might be an issue we might need to specify a width for the collection view fixed with the constraints may cause clipping yes that is true if our text is going to be too wide so this collection view right now I don't think we explicitly set its width so that might be an issue we need to we might need to set the width of the collection view to be the same width as the stack view why don't we actually just do that to prevent any issues because just to provide some explanation when you set it to fill the stack view that is you set it to fill it's going to stretch all the elements inside of it to fill up the entire width of the stack view that's what fill means but when you Center it it's going to Center all of the elements inside of it however it relies on the elements having their own widths right if it doesn't then it's going to be centered but it might have a zero width so that's why we need to make sure if we set the alignment of the stack view to the center we need to make sure that all of the elements inside of it actually have a width so the timer label does because we just added a width but this collection view doesn't so hold down control click and drag this blue line to the stack view and we are just going to choose equal widths like that so that's going to ensure that the collection view is the same width as the stack view okay so now for our timer label instead of centering it because now we gave it a width let's left adjust it or left align it sorry and if we run it again now we are going to see that this label remains stationary is exactly what we want and let's see if it stops at zero okay that's great that it does there is one issue though with the run loop and I did allude to this you can see when we scroll it actually stops the timer and that's really strange isn't it now let me explain to you why that is if we go back to the view controller here and we take a look at this part when it schedules this timer it creates it and schedules it it adds it to this default run loop which doesn't get executed when the user starts scrolling so what we actually have to do is also add this timer to another run loop which does run regardless of whether or not the user is scrolling so the way we can do that is right to run loop the main run loop we're going to add the timer to it so registers a given timer with a given input mode this is the one we want to use want to pass in our timer and because it's an optional we need to force and wrap it and I don't need to check whether it's nil or not because we've just created it here and the line above in the run loop mode and press dot and you're going to want to choose common modes this is gonna be the mode that allows the timer to run regardless of the user is scrolling or not so let's run the app again just to doublecheck that this is the case okay so you can see our that our timer is still running when that happens okay so that fixes that the next thing we want to do is actually in the timer elapsed when the milliseconds has reached zero we want to check if the user has any cards remaining that are unmatched because if he or she does then they've essentially lost the game so we are going to let's say for some added effect let's change the text color of the timer label to red when it reaches zero stop stop the timer check if the game or check if there are any cards unmatched now I'm not going to write this logic here instead I'm going to put that logic into its own method because that way we can reuse that logic in other places and there is another place where we want to run that logic so this is going to save us from duplicating code we are going to call this method that we are about to write check and game ended and I am going to create this method in the game logic methods section under check for matches and while we're here actually why don't I tell you the other place where we would want to check if the game has ended and that is actually in this check for matches method because when two cards are flipped over right compared to cards it's a match and we set the statuses of the cards is matched is true and we remove them from the grid at this point we also want to check if there are any cards left unmatched check if there are any cards left on mesh because if these two were the last two cards of the whole entire grid then the game has also ended so here we would also want to check game ended like that ok so let's scroll all the way to the bottom and we're gonna create our check game ended method right here make sure you do it before this ending bracket though check game ended okay so here we are going to determine if there are any cards unmatched if if not then user has one stop the timer if so as an if there are unmatched cards check if there there's any time left show messaging show won or lost messaging okay so for determining if there are any cards unmatched I am going to create a flag here I'm going to assume that the user has one and then I am going to loop through each card in the card array and I am going to check if card is our card is matched is false if I even find one card that is unmatched I am going to set is one to false and I am going to break out of that loop okay so however if it goes through every single card and it doesn't come into here that means that this flag will remain true and I can check that down here so if is one is equal to true and then else so I'm going to move this comment inside here okay so if the user has won now I want to point out one thing because is one is a boolean variable essentially I can actually just do that you know if this is true then it's gonna come in here otherwise it's gonna come in here but the reason why I still write this extra code here is because to me it's more clear to read and I feel like to anybody reading this code for the first time if they somehow missed you know this statement and reading this is more clear than something like that all right if they don't know that as a boolean so that is why I right that extra coat there because I value clarity over all else okay so if is one is true then we want to stop the timer so if milliseconds is still greater than zero then we can call timer dot invalidate and we want to set some messaging to pass into this part here if they've won so I am going to actually create the two variables up here for the messaging alert messaging var title and var message we're going to use those in a sec so if the user has one I'm going to set the title of the alert to congratulations the message is going to be you've won and if the user has cards that are still unmatched let's check if there's any time left if milliseconds is greater than zero then we are simply going to return because there are still there's still time left but otherwise if there's no time left then title is going to be game over message is you've lost all right so now we are going to show the alert we're going to use these two variables inside the alert and so we're going to create a new alert and the class we're going to use is the UI alert controller it's got an initialization method here that we can use where we can simply pass in the title and the message in the style you can hit dot and we are going to choose alert but this alert doesn't have any button to it so the user is not going to be able to dismiss that button unless we give them an alert action so let's create an alert alert action equals UI alert action and it also has a an initializer method that we can use the title is going to be okay style just hit dot we're going to choose default and the handler is the code that you want to run when the user taps on that button and we're gonna put nil because nothing we just want the users to be able to dismiss the alert we have to add the action to the alert as well so go ahead and type alert dot add action and put in the alert action in there and finally we can use the present method of the view controller to present the deal llort controller because that is actually a view controller so pass an alert and I made it you can set the true and completion you can just put nil in there so that is actually going to show an alert to the user based on these strings that we set up here now one optimization that you can do is you can actually move this code into a separate method so that you can call that method from anywhere inside your game just in case you need to show a message not just in this check game ended function so you know we can go ahead and create a method down here called show alert where you can pass in a title which is a string and a message which is also a string and you can just copy that code and paste it in there alright and that is going to allow you to just call show alert and pass in the two strings you want your alert to display and now you can call this function from anywhere okay so I think those warnings should go away because we did use them yep okay so now let's test it out so matching them should be easy because we never randomized any of it alright so it detected after we matched that last pair that we've won and the timer is stopped now let's just doublecheck that when the timer reaches zero we also see a message that we lost and now 10 seconds really isn't enough because I barely had enough time to match all of them even though they were not randomized yet yes okay so we see that game over screen and oh no we can still still flip these over so the way we can stop that is in the check for matches actually no in the here collection view did select item before anything else check if there's any time left or yeah so if milliseconds is less than or equal to zero just to return so this is going to stop the user from playing the game or selecting any cards when the time is up I was actually a match okay so now I actually can't click any of the cards so there you have it in this lesson you learn how to use timers to fire at specified intervals and you learn kind of add a function to trigger whenever that interval occurs you also learn how to create a show alerts to the user and you learn how to add alert actions to that alert dialog so that the user can tap on the buttons and dismiss the alert all right and with that we're almost finished I'll see you in the next lesson