hey coders how's it going Chris here and today we're going to talk about this library called SV progress HUD now if you've ever had to display some sort of loading or waiting indicator you've probably used the UI activity indicator view that's built into the SDK while that's fine SV progress HUD offers several customizable options for how the indicator looks and it's also very easy to use so there's a demo here that I click through and here I can show you the different options that you can choose so here's the basic one you can show it with a status message you can show it with a progress you can show status like that you can show success with a status error with a status and you can also choose light or dark styles so that's the dark style and then you can also choose the native style so this looks like the UI activity indicator view also you can choose some sort of backgrounds so let's say I want black and I want this flat version you can show it with a dimmed screen like that unfortunately with the dimmed screen I can't click this dismiss button anymore so I'm going to have to reload it but you kind of get that idea there's a whole ton of options here and here's the gradient one so you can see that it goes from white to black in the corners but again I can't click the dismiss or any of these buttons anymore because of that dimmed view so anyways I hope you get the idea SV progress HUD is simple to use and offers a bunch of customizable options in fact if we look down in order to display it you just call show and and to hide it you just call dismiss right here so first of all we're going to create our Xcode project demo here I'm going to open up Xcode and I'm going to create a brand new single view application project so there's single view application I'm just going to call this the SV progress HUD demo it's just that a space there make sure the language is Swift device iPhone the stuff after that doesn't really matter at this point and I'm going to save this on my desktop okay so now we're going to close the project because we're going to use cocoapods to install this library if we go up here this is what we're going to need to add to our pod file now if you don't know what I'm talking about and you don't know what cocoa pods is take a look at this video up here on the screen click it it'll open in a new window and that will show you how to set up and install cocoa pods so that you can work with all of these thirdparty libraries okay so moving on with our cocoa pods installation I'm going to press command spacebar to open up terminal and I'm going to navigate to my project folder so typing PWD shows me my current path CD desktop gets me into the desktop folder LS lists what I have on my desktop and there is the folder that I need so I'm just going to type CD SV progress I'm going to hit tab and it's going to complete that folder name for me and notice that because there's a space in my folder name this slash is used to escape that space okay so now I'm in my project folder all I have to do is write pod in it and inside my project folder it's going to create a pod file now I'm going to open that in my text editor sublime text you can use any text editor you want and then let's look at the installation instructions here now it doesn't tell us what we need to uncomment here but from installing the other libraries we know that we need to uncomment this platform line and this used frameworks because we're installing this for a swift project and then in between the target and the end tags right here we're going to go ahead and copy this line here so let's just paste it in there save the file and go back to terminal and then we're going to type pod install and it's going to read that pod file and it's going to install the SV progress HUD library all right there goes and now it's done so we can go back to our project folder now we notice there's an XC workspace so double click that that's the file that you're going to be opening from this point on for your project and immediately we're just going to press on our keyboard command B to build the project and that's going to compile the SV progress HUD library so now in the view controller we can begin to use it we can go import SV progress HUD like that if we go back to the page the usage page you scroll down a little bit let's take a look at some of the methods really quickly so you can call show and these are all class methods notice that so we wouldn't need to create an SV progress HUD object we just need to call SV progress HUD dot so because it's a class method you can also show with status and pass in a string we've seen that right here in this show with status right is the doing stuff and there's also progress in progress status so I guess here you can pass in a percentage of the progress that your task is done and you can dismiss the HUD with this dismiss or you can dismiss it with a certain delay after a number of seconds let's see there's a whole bunch of other stuff I'll leave it to you to explore but what we're going to try to do in our project is just do this basic show and hide so here it's really as simple as SV progress HUD dot so like that and if we want it to show with a message we would say show well see here the show air with status there's a bunch of other ones show progress show success show with status we can even pass in here and just say it's it's working and we can run that okay so I'm not seeing anything on the view here and we should be expecting to see the progress indicator now sometimes when you're putting things into viewdidload and not showing up as you expected it might be because even though the view has loaded it hasn't appeared yet and this progress HUD dot show method is putting something into the view so if the view is not visible yet like it has loaded but it hasn't appeared on the view yet it might not be able to show the progress indicator so sometimes what I try is I override another method called view did appear and when this method gets called it means the view has actually been shown and presented to the user so viewdidload happens first the view has loaded and then it gets presented and shown to the user and then view did appear happens so I'm just going to copy this line and move it into the view did appear method instead and we're going to run it again alright and that seems to have been the trick so there's the progress indicator with our status message I'm not going to go through all of the other options that it has because there's a whole bunch of things you can customize as we've seen in this demo right here so you customize you know progress status error success you can customize the you know the background gradient and stuff like that so there's usage instructions below here all I wanted to do was introduce you to this library one thing I will point out however is this notation right here so what it recommends you to do is show it and then use dispatch async to create a new thread to do your time consuming task basically the thing that the user is waiting to complete right do that in another thread this line right here is going to create a new background thread to do the task because you don't want to do that task on the main thread or also freeze the UI so it's dispatching a new thread you're going to do your time consuming task inside that and then when that's done you're not just going to dismiss the HUD from this background thread because you never want to modify the you i from a background thread so you use this again just dispatch it back on the main thread to dismiss the HUD so I hope you enjoyed the video if you liked it please give it a thumbs up please subscribe to the channel and please share it with your coworker some friends it really helped me out so thank you so much again and I'll see you guys tomorrow bye for now