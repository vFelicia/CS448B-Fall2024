hey code crew in the last lesson we parse the JSON response from the YouTube data API in this video we're going to set up our user interface by adding a UI tableview element and we're also going to set up a custom protocol so that our model can send over the video objects for a view controller for displaying the videos inside the table view just a quick note if you're jumping into the series at this point you kind of need to watch these lessons in a progression for it to make sense first make sure you've watched the twentyninth lesson beginner series to get the basic skills then make sure you're watching this YouTube app one day build lessons in order links to both of these playlists will be in the description just in case you missed that little video in between lessons 3 & 4 where I teach you how to correct a mistake of accidentally committing your API key to a public repo I think it's worth repeating here in the beginning of this lesson now if you did see that then feel free to skip the next two minutes or so so in lesson 4 I warned you about how not to commit your API key into the public repository like I did and I showed you how I corrected it but there's actually a more foolproof way to stop yourself from committing that API key so that's what I want to show you right here so remember when we created our repository we actually had this file called get ignore and if I just open up this file it specifies everything that should not be added to the repo when you commit your project so what we're going to do is we're gonna put constants dot Swift in this file list and I'm gonna save it and if you don't see this file here because it is a hidden file what you can do is you can go to terminal go into your project directory and say open get ignore and that should launch it now you can still see that file there now what's gonna happen now is that if you have done this right when you created the constants thoughts with file before you pushed anything then that file would get ignored but the fact is right now I have already committed it to the repo before and this file is being tracked so I have to do an additional step is to tell my source control to stop tracking this file so the way I do that is inside here I go get RM which that's where removed and I'm also gonna add this flag called the cache which makes sure to actually remove this from any cached indexes that keeps track of like a file list of files that it's tracking and then I specify that file name okay actually I'm not in the right directory so it didn't find that file so if I just go maybe one deeper so in here I actually okay now I see that file so I'm gonna run the same command just in case you didn't know you can actually press up and down to go through a list of your previous commands so there I'm gonna run this command again alright so now let's do git status and you can see that this was deleted it's going to delete this file from the repo and it also says here that we modified they get ignore file and so we're going to want to add that change but I want to point out another change that it's picked up here that there's a constants template dot Swift so what is this this is what I'm looking at here so instead of committing constant Swift which actually has my API key in it I created this constants template.dot Swift and this is the file that I am going to put onto github instead and as you can see it's commented out it's got my API key and sort of any identifying information removed and I've just added an instruction here to say to add your own keys below and uncomment this code so anyone downloading my code from my repo is not going to get constants not Swift which contains my personal information instead they're going to get this file constants template dot Swift and they're going to have to add their own IDs and keys and then uncomment this and the project will build so that's what this is so let's say get ad space dot and then if I go get status again you're gonna see that there are still some files that aren't being tracked I'm not sure why let me take a look at that again let me try to add everything again okay so that seems to have worked I am going to now commit everything modified get ignore to stop tracking constants dot Swift added constants template dot Swift instead and yeah so that's what we're going to commit right push that okay so now let's take a look at what we have yeah so now it doesn't have constant Swift instead in our repository we have constants template.dot swift and as you can see inside here you know all of this has commented out but when you download this code you're going to have to change the API key in the playlist ID and just uncomment that section okay so bit rise should be doing its thing sure enough there we go all right so the first thing we're going to do is add a table view element to our view controller so click on the object library here and search for a table view and we're simply going to click and drag this element into our view just in case you don't know what that is it's an element that displays a scrollable list of data like rows and rows of data kind of like the address book on your phone or yeah it's used in a lot of different apps on iOS so you're gonna see how we're gonna use it today so here's the table view element we're gonna have to add some constraints to it so let's go ahead and click on this menu and I'm going to make it fullscreen on all the edges so I'm adding 0 on everything but we want to make sure that we don't go under this knotch because we don't want any data to be blocked and we also don't want to have this little bar here blocked so I'm gonna leave everything relative to the safe area and I'm also going to leave margins checked on so let's add all four constraints and you can see that it indeed doesn't go under the areas where data might be obscured okay the second thing we want to do is add a prototype cell to this table view and a prototype cell is simply kind of like a road template it it represents how data might be displayed in this table view and some table views can get pretty complex so you can have multiple prototype cells each one may be showing a different type of data or displaying it in a different way and then when you're about to display your data in this table view you can specify for each role of data which prototypes sell you want to use for our purposes all the videos are going to look the same so we're going to have one prototype sell it's going to have one look and feel and every single video we'll use that prototype sell so what you have to do is click on the table view click on the attributes inspector here and you're gonna see prototype cells here from 0 just change it to 1 you're gonna get a very basic plain cell we're not gonna customize this just yet but what we are going to do is give this prototype cell or template an ID so that we can refer to it later on and you know specify that for this piece of data we want to use this prototype cell you have to give it an ID in order to be able to refer to it alright so click on table view cell in the attributes inspector there's a an identifier field for our identifier let's you can type anything you want but just remember what you type in so I'm gonna call it video cell with a capital V and C so later on when we have data to display in this table view we can then tell the system to grab an instance of video cell you know with that identifier so we're gonna have to pass that in but rather than you know typing out this ID all the time and potentially creating typos in the process I'm going to add this ID into our constants file in that way I can just refer to that constant whenever I want to refer to this ID so let's start by going into our constants swift and adding that I'm gonna add it to the bottom of our list here static var video Cell underscore ID and make sure that I don't make a typo here as I'm typing this and we'll save it so from now on we can refer to this constant but remember this file isn't going to be committed into our github repository right instead constants template is the one that's going to be committed so I'm going to make sure that constants template also has this constant I'll put it right there all right now let's go back to our storyboard so at this point we're finished with the UI what I want to do now is just expose my table view as an iboutlet property in my view controller so that when I write the logic I can refer to this table view and manipulate it so in the past what I would do is I would open up the assistant editor and sometimes on the right hand side you wouldn't get the right file and so you might have to change it in the sort of navigation breadcrumb here and select new controller but my friend Chris Parker told me that there's actually another foolproof way to do to open up the assistant editor to the file that you'd like so what you do is you hold down option on the storyboard here and you click on the file you want on the assistant editor so for us we want to connect this table view as a property to the view controller so I'm going to hold down option and click view controller when I do that it opens up assistant editor or a second window a second pane and it puts the view controller in that pane so now all I have to do is create some space up here and where I'm gonna add the property I'm gonna hold down control and on this side in my document outline in interface builder I'm gonna hold down control click and drag and let go and then I am going to call this property table view and just like that I've created that or connected that table view element as an iboutlet property I just want to take a quick second to talk about how the table view element works because so many of the other user interface elements work the same way the table view element is just for displaying data it doesn't actually contain any data itself so what it does when the table view element appears on the screen it asks someone for the data to display here's how it does that the table view element has a datasource property that is initially empty if it's these empty then the table view has no one to ask for data to this however if someone or something sets itself as the data source for the table view then the table view is happy but there's a second part to this the way the table view asks the data source for data is by calling very specific methods on the data source and in those specific methods the data source needs to return the required data if the data source doesn't have those specific methods then ultimately this whole thing doesn't work so the recap two things need to happen number one someone has to set itself as the data source for the table view and number two that someone also has to have the specific methods that the table view is going to call when it needs data to display now the table view has a secret weapon to ensure that whoever is the data source actually has those specific methods the secret weapon is called a protocol and the protocol is like a rule that says you must have these methods in order to be the data source so the table view uses this protocol whoever assigns itself as the data source must also declare that they follow the protocol and the protocol enforces that the data source will have the specific methods that the table view requires to call what we're going to do is have our view controller declare that it conforms to the protocol and conforms is just the technical term to say that it follows the protocol and now that our view controller conforms to the protocol we're going to set it as the data source for the table view finally we're going to make sure that the view controller actually has the methods that the table view needs to call now I hope that all makes sense let's talk about how the table view handles user interaction when someone taps on the table view it doesn't know what to do and unfortunately you can't write that logic or in that code in the table view so the table view again uses the same system of delegation we just went over it has another property called delegate that is initially empty and if it stays empty then the table view will do nothing with the user interaction however if someone has set itself as the delegate then the table view will call specific methods on the delegate when the user interacts with the table view on other protocol exists to ensure that whoever assigns itself ask the delegate of the tableview will have the specific methods that the tableview needs to call okay let's go back to Xcode and let's do this alright so now we're back to Xcode let's close out this assistant editor let's go to View controller and the first thing we need to do is to specify that our view controller conforms to the protocols that I told you about let's start with data source now if you did the 29 day beginner challenge before attempting this YouTube app which you should have done I warned you guys in the beginning then you would know to conform to a protocol you simply add that to the list here using comma so the protocol that we want to conform to is UI tableview datasource and that is going to allow us to in the viewdidload here to say that the datasource property right we're gonna assign ourself to it which is essentially the view controller we're going to assign the view controller is saying that it's going to assign itself as the datasource of the table view which is exactly what we talked about before and now the third step is to make sure that the view controller actually has the specific methods that the table view needs to call to get the data to display now the protocol ensures that the view controller will have those methods and the way it does that is just by throwing errors if you don't have the right methods so you can see here you click this it says that the view controller you know you're you're saying that the view controller conforms to this datasource protocol but you don't actually have the right methods so all you need to do is click fix and it's going to add these two required methods to your view controller but we're going to move it to the place we need so I'm going to cut this code here and we're going to put it down here and one way to organize things a little bit is to use this pragma mark and in the can say table you know table view methods and that's going to give you a nice line and also in here you can see a nice separation let's add a comment here so conform to or set set itself as the datasource and the delegate the delegate right we also talked about that just now so the view controller has to conform to another protocol which is called the UI tableview delegate and this one is for handling the user interaction events right so now that the view controller conforms to that protocol down here we can say that the table view delegate is also going to be set to the view controller and there are no required methods for this protocol so it's not throwing any errors but if you do want to handle the situation when the user taps on a row or you know does something else then you can you know you can you can write the specific methods here and the table view will call it if it exists so for example if we want to detect that the user tapped on a row then there is a method called did select row act and if we if we have this method then the table view will actually call this method when the user actually taps on a row of the table view and this that's all possible because we've sent ourselves or the view controller has set itself as the delegate right that handles the user interaction okay but first of all the the initial thing we want to care about is the datasource because the table view doesn't have anything to display all right so it's gonna ask the view controller for a couple of different things let's take a look at what it needs it needs to the number of rows in the section and our table view by default only has one section so we don't have to worry about which section it's talking about but in general how many rows is it going to have so right now we don't really have that data what we're going to do is we're gonna create a property up here and we're gonna call it videos and let's initialize it to an empty video array so it's going to have 0 elements in there and the number of rows is going to be how many videos we have in here which initially is 0 so we're gonna you know return videos that count so if there are videos in there it's gonna return the count however many so now that the table view knows how many rows it's got to display it's gonna start asking for every single row that it needs to display what data do I display what does that row look like and so it's gonna call this method to sell for a row at if you tell the table view we have 0 rows it's not even going to call this because it has nothing no data to display but if let's say you returned 10 let's say you have 10 videos and the table view knows you have 10 rows to display it's gonna start calling this method for every single row and you're gonna have to see which row is asking about and then return the appropriate data and prototype cell and so this is where that video cell that prototype cell right that we configured this is where that comes into play this guy right here it's just basic and empty because we haven't really configured it but what we can do is first of all we'll get a cell so let's cell equals table view dot DQ reusable cell with identifier for index path so we're gonna use that method this is which template or prototype cell you want to use you know so here we would specify video cell and that ID that we had specified before but remember we to our constants file so we can simply do constants dot video cell ID and index path is saying which row are we looking at that actually comes from this parameter right here so you can actually just pass in that parameter this index path object contains a row property which specifies the actual row so it could be 0 for the first row 1 for the second row you know 2 for the third row and so on okay so there's our cell and then in here we would configure the cell with the data which we're not doing right now and then lastly you know return the cell give the cell back to the table view for displaying and here was just returned cell so this is how that whole system works if I ran the project right now we would see no rows because video start count is 0 well in our model right we had made that API call and we had gotten back the list of videos we just haven't passed it to the view controller just yet right so one of the ways we can get this list of videos to the view controller is by specifying a return method of this method right here but that's not really what we want to do and I'll explain why but stay with me here if we specify a return method sort a return type for this method that means that when the view controller up here in viewdidload when it calls models get videos it's going to expect to be returned a list of videos and that is a problem because what model is actually doing to get those videos is it's making a network call that may never come back or it may take a long time in and during that time when it's fetching those videos from the API the view controller is just hung up on this line waiting for the results that come back so that's why you know this is not the way we want to do it we don't want to specify every type and and do that instead what we want to do is when the viewcontroller calls model dog get videos we want the model to go off in the background and hit that API and grab those videos and when the data is ready then to contact and notify the view controller and pass that data back you know in during that time when the data is being fetched in the background the view controller can carry on with its normal tasks like handling user interaction and anything else that needs to do ok so now you know what we want to do but how do we make it so well we can use that delegation pattern that we've gone through earlier with the table view so let's quickly take a look at what that looks like so in this scenario the model is kind of like that table view element we talked about earlier we're going to declare a delegate property in the model class and we're also going to declare a protocol to say that whoever assigns itself to that delegate property must have a specific method then in the view controller we'll have it conform to that protocol that we declared and then we'll add that specific method that is required by that protocol and finally in the model when the data comes back from the API call and we parse that JSON and we have a list of videos ready we're gonna call that specific method on whoever is assigned as the delegate which would actually be our view controller so let's go do it in Xcode now all right so let's go to our model class now in here we're going to create some space and we're going to declare our delegate property now the type of the delegate property is actually going to be the protocol itself so we're going to have to declare that so up here above the class declaration we're going to declare a new protocol and we're going to call it let's say model delegate and the requirements you know the required function is going to be one that's called videos videos returned or how about videos fetched and the way we're gonna actually return that list of videos is through a parameter here now I'm gonna put the underscore there so we don't need to specify the argument label for the parameter and the parameter name is going to be videos and the data type is going to be an array of videos objects all right so now in the delegate the property or the data type of the delegate property is model delegate and remember initially it's empty no one's assigned to this delegate property so that's why it's going to be an optional so the next thing we have to do is have the view controller declare that it conforms to this protocol and also to implement and have this method so let's go over to our view controller and up here let's just add to our list we're going to conform to the model delegate protocol right and then down here we'll create another section let's say model delegate methods and we're going to specify that indeed we are going to have that method called videos fetched I and in here we're going to set the returned videos to our video property refresh the table view so we have this videos property up here right so we're going to say self thought videos which is going to specifically refer to that property and we're going to assign into that property the list of videos that the model returns videos and then to refresh the table view table view dot reload data and that's going to cause the table view to ask us again how many videos are there and for each video you know what am I supposed to be displaying so it's going to cause all these methods to fine all right so now there's one last step we got to go back to the model and oh actually I almost forgot one thing go back to the view controller for a second so the view controller has declared that it conforms to this protocol and it's also declared that method but don't forget we have to set itself as the delegate of the model all right so model dot delegate equals self and then that way when the videos get returned and the JSON gets parsed and down here you know when we dump the response and we saw that we actually parse all the videos down here we can call the videos returned method of the delegate which the view controller has assigned itself to right so self thought delegate dot videos fetched and then in here we just returned actually videos fetches instead of videos returned again here we actually remember our response class or struct it had items as a property and that was a list of videos so that's what we're going to return the only problem is that videos might be nil or sorry this might be an empty property so we should probably check that it isn't first so we can say if response thought items is not nil then we are going to you know call this and we can say response thought items and do that actually this one this one might be nil as well so let me press command B and let's build it yeah so it's failed and okay so let's just get rid of that placeholder press command B again build succeeded I guess it will return a response object and if it wasn't able to parse it then it would throw an error and we'd catch it down here so essentially after we've parsed the JSON and we checked that there are videos because this isn't nil then it's going to call videos fetched of the delegate and passed those videos through and since the view controller has set itself as the delegate this method is essentially just calling this right here so then we're going to take the videos we're going to assign it to our own videos right and then we're gonna call table view that reload data so now let's run the app we will see cells except that in the cells we won't see anything because they're all empty so inside the view controller what we can do is we can get the title or the video in question so let title equals self dog videos and this is our videos array and the row that we are trying to display remember I told you it is in index path dot row and we're gonna access the title property for that video and then we're going to just display that in the cell for now so cell dot text label dot text is equal to title by default the default even plainjane cell has a label okay so that should we should be able to see something just like that okay so we did see something but we also had a crash here so let's take a look at what okay so the problem here is it's telling us that one of the things we want to make sure to do is to only update the user interface from the main thread because that's that's primary job of the main thread is to handle user interaction and also to update the UI what's happening is that in our model when this is off to hit the API fetch the data parse the JSON that's happening in a background thread and that's happening in the background so when we get to this point where we want to return those items to display in the table view we sort of have to throw that to the main thread to handle and so the way we do that is we can do that here using this class called dispatch Q dot main got a sink and inside there you then place the code you want to pass back to the main thread to execute so it's really awesome that Xcode tells you this now because in the past that never used to warn you and so you'd you'd be doing this without really understanding or knowing and that was bad and it would really cause a performance hit as well so you want to make sure you update the user interface through the main thread so let's run this project again and you can see how much faster it is and plus the app doesn't crash now so that's the good thing now that we've got this piece of functionality working let's go ahead and check in our code now what I'm gonna actually do is uncomment this and although if I build it now my project fails to run but remember when I upload my code or commit my code to the repository it's not going to add constants not Swift it's going to ignore this file and instead it's going to add constants template.dot Swift so we won't have a redecoration of constants and reason I'm doing this is because when we do commit our code to github bit rise goes and grabs the code and tries to run it if I have this commented out like I did then when bit rise tries to build and run the code it's not going to find the constants struct that we need because again constants are Swift that's not going to be added to the repo so that's why I'm uncommenting this for now I'm going to save it and I'm going to add this I'm going to add all of that I'm gonna commit I did table view custom protocol in the model displaying video titles in the table view and I'm going to push that and refresh this brush this page okay so the device has said it's failed but I want to check out why so let's go ahead and click into this and let's let's see if we can take a look at what the error message in here is okay so the problem is because the Xcode project actually does have a constant Swift file in the file list so this constant thoughts with file is actually part of the Xcode project but because we haven't checked it into source control because we added it to get ignore when bit rise grabs the project it it's as it's missing this file so it's true so I don't really know how to get around this it seems like I think what might be the best course of action is if in the future I just make my repositories private instead in that way I don't have to have a you know be trying not to commit my API key in to my repository and instead I will maybe create a public version of the codebase on github once I'm completely finished with the app series but at least if you know during the process of building it and recording these videos if it's private then I won't run into so many issues trying to hide my API key all right so today you implemented a custom protocol so that the model can send over the video objects to the view controller you also added a table view and got the videos showing I have a quick question for you did you understand what was happening when we implemented our custom protocol and had the model communicating with the view controller let me know by leaving a quick comment below that sort of delegation communication pattern happens a lot in iOS in the next lesson you'll create a custom uitableviewcell so that we can display the thumbnail and also the date for each video make sure you're subscribed to the channel so you don't miss the next lesson and on your way down there please give this video a thumbs up it really helps with getting exposure for the video itself I appreciate it so much thank you for watching to the end and I'll see you in the next lesson