hey coders how's it going it's Chris here hope you guys are having a great day over the past couple of weeks we've gone through a lot of the features of the parse platform but when we were talking about saving data we've always just been working with the contact' class and that was something that we created to represent a person or contact well chances are in your own app you may have more than one class and furthermore the data may be related so for example if this was an application for a salesperson and they wanted to keep track of their contacts and what sort of communication that they've had with these contacts I might have another class called a call for example to represent a phone call so a phone call may be associated with one of these contacts so today I'm gonna show you how to create another class we're gonna use phone call and how we're going to relate that data to the contacts class back in the Parsa documentation or the parson guide we're going to be looking at the information under objects relational data let's go into our Xcode project now and this is just a blank single view application Xcode project with the parse library integrated if you missed that video check out this lesson too in the upper right hand corner it's gonna open up in a new window and you can see how you can integrate the parse library into your own Xcode project and so the main storyboard is empty and we're looking at the view controller a lot Swift which we have written import parse up here so in the viewdidload what I'm going to do is create a new phone call object I'm going to set its properties and then save it actually not called properties its called D key value pairs so I'm going to create a brand new phone call object so let call equals P F object and with the class name this is gonna be a brand new one because in our parse back end right now we only have the contact class so when I write phone call here and I try to save it it's going to actually create a brand new so let call equal that let's set its properties so call let's say duration it's 50 and then let's also say that the topic or the point of the conversation was followup and finally let's have a contact key where the value is the contact person so let's say that I just had a call with Tommy and I want my phone call object to have Tommy set as the contact well first I have to actually get Tommy as a PF object from my parse backend so I'm going to just comment this guy out for a second and let's retrieve Tommy so let query equals PF query class name is contact and I'm gonna add a constraint where key to scroll equal to so key is going to be object ID I'm gonna search for him directly by the object ID okay and I'm going to say query dot get first object so I'm going to use this one get first object and it's gonna actually return the PF object to me and it's gonna throw so if it do if something goes wrong it's gonna throw an error and say let contact equals query get first object and because it throws I have to wrap it in a do statement so do this stuff and you have to use the tri keyword in front of the throwing statement so it's gonna try this statement and if it's successful that's great but if not it's gonna throw an error and underneath this do block you need a catch block to catch the error so couldn't get the contact so there's error that happened there okay so let contact equals try query get first object if everything goes right Tommy will be stored in this constant right here and what I'm going to do is I'm going to assign contact into the contact key of my call object okay and the last thing to do is save in background okay so let's give this a run now pressing command R it's going to retrieve Tommy it's going to create a new phone call object set these key value pairs into it it's gonna set Tommy as the contact and it's gonna save it in the background so we've got a warning here a longrunning operation is being executed on the main thread and what it's referring to is this right here this statement normally we would probably want to get this in the background but I wanted to make sure that I have the contact before I continue here in a real app you would probably get Tommy in the background or you would have Tommy as an object already from some other query so this is just a warning telling you that if you're executing this like we're doing here it's going to not respond to the user interface while it retrieves this object so let's look in the backend right now I'm going to refresh and now we have a new phone call class and here we have one call right we have the duration we have the topic and we have the contact so this is the contact column and you can see here it's a pointer and it points to this object which is Tommy if I click this it's gonna jump to the contact table and it's going to filter by that object ID giving me Tommy tells me exactly where that links to so that's pretty cool let's go back to here and I'm going to stop the execution of this I'm just going to comment this out that's how easy it is to relate to classes of data or relate to PF objects together now I want to show you a query if we want to let's say retrieve all of the phone calls where we talk to Tommy let's take a look at how we would do that so let's go back to the parse documentation under queries let's look under relational queries so it says here that if you want to retrieve objects where a field matches a particular PF object in our case Tommy you can use the where key equal to just like for other data types so it's saying that we can do something like this let the query equals PF query let's call this let's call this call query actually PF query class name were looking for phone calls and call query where key contact equals two and then we would pass in Tommy as an object so if we didn't comment this out if we actually have access to Tommy as a PF object then we would pass that into here and then we would run this query and it would search for under the phone call class it would search under the contact field for all objects that equal to Tommy another way that the documentation says that we can do it we can query by object ID so here's how we would do that where key and then we would pass in our field is contact write equal two and then you create a PF object with this initializer without data with class name post and then you pass in the object ID so let me show you how that would work we would do where contact equals to PF object without data with class name so it's we're just creating a PF object that has no data the class name is contact and the object ID is basically this guy right here like that and then we would just run this query find objects in background with block right this is the list of objects and here is the error and in here all the phone calls we had with Tommy so at this point if we're looking for all of the calls where we talked with Tommy you might be wondering how do we have Tommy's object ID or how do we have Tommy as an actual pf' object because you need either one of those pieces of data to perform a query like this well if you think about what we're looking for we're looking for all phone calls where we talked with Tommy chances are in your application to get to a query like this your first screen of your app would probably be a list of contacts right and then you would select Tommy from that list and then you get to Tommy's contact details or maybe like profile card or something like that at that point you would have Tommy as APF object or at least his ID and then there may be a button on that Tommy profile screen then to search for all of the phone calls which you had with him so if you think about that sort of app navigation structure where you're drilling down from contact as the first level and then into calls you've had with that contact then you would have either the object ID of the contact in question or an actual reference to the contact as a PF object okay now one thing I want to point out to you guys is if we go back to the phone call class and you look under contact it's a pointer to a contact object right here let's say that we performed a query to retrieve all of the phone call data so right now we only have one phone call object right but what's important to note is that when you pull the phone call objects down with a query it's not gonna automatically pull the data for the contact as well let me show you what I mean in Xcode here so let me comment this out again let me actually add a couple of comments here just show you what we're doing here a query to retrieve all phone calls with Tommy okay and up here we were creating and saving a phone call with Tommy and lastly here we are retrieving all phone calls so let all calls query equals PF query and we're gonna do phone call and we're not going to put any constraints on it we're just going to find objects in background with block so this is an array of PF objects which may be nil and this is an error so in here we're going to check if let calls equal objects so if it's not nil then we're going to say let's just grab the first one we know there's a at least one call so we're gonna say let first call equals calls zero okay so that's our first phone call and this is a PF object now we know with our phone call object we have a contact key value pair right so let's say let contact equals first call contact right we're accessing the contact field of our phone call and we're putting it into this constant thinking that we have a PF object that is populated with this guy right here this contacts info the thing is in order to save bandwidth and be more efficient when you find objects in background you're looking for phone calls it's not going to retrieve the data of other classes even though this phone call has a relationship with the contact class so meaning that when you pull down this phone call data it's not going to go and also fetch the contact data that it's pointing to here from this field if we look in the documentation for a quick moment and we go back up to objects relational data by default when fetching an object related pf' objects are not fetched these objects value cannot be retrieved until they have been fetched like so mainly this fetch if needed in background with block so let me show you what that means if we go here so contact is not populated but we can do something like fetch in background fetch if needed sorry fetch if needed in background with block so just to sum it up when you retrieve a phone call object it's not gonna retrieve the contact as well you're gonna have to separately go fetch the contact if needed like this however there's an exception to this if you want to fetch the contact with the phone call you can modify your query a little bit all you would need to do is in your all calls query you can type include key and we would put the contact here and if you do this it's telling parse that fetch all the phone calls but also fetch the related contact object as well and in that case when you get all of the phone call objects back here this contact feel is going to be populated already with the contact object so you don't need to fetch it separately like this but that's only if you know that you need the contact PF object because otherwise you would be fetching it for no reason the query would take longer it would take more bandwidth and generally just be less efficient okay so I hope that makes sense please thumbs up the video if you liked it please share it with anyone who you think could use it and please subscribe if you haven't already I'll talk to you guys tomorrow have a great day bye for now