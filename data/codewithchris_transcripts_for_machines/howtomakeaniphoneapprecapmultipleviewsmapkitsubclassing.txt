hey guys in this video we're gonna go through a recap of the practice that we did in the last video which was the storyboard and the map demo so let's start off by going through the app flow of the multiview application it was the first multiview app that we did and if you can remember in the beginning we embedded the initial view into a navigation controller object and then from there we created a second view and attached the second view controller to manage that view and then we were able to switch back and forth between the two views so the app flow looks kind of like this the entry point is still the app delegate object but now the navigation controller is the object that manages the other two view controllers and then correspondingly the other two view controllers have their own views which are described by the storyboard and you're noticed in this diagram that I also have a location data controller object pointing to each view controller and that's because in each view controller we created an instance of that location data controller to get the location object from now in other circumstances if we wanted the changes made to the model from one view controller to be reflected when the user moves to the second view then we would actually share one location data controller object one model between the two view controllers and that way if the first view controller modifies some data in the model when the user moves to the second view controller that view controller will access the same model and it will access the data in that change the state and so you'll have the data persisted across views so let's talk about the navigation controller what is the navigation controller well it's a special UI view controller that manages other view controllers and there's a link in the description below to the official Apple documentation if you want to read more about it it's got a property called view controllers which acts kind of like a bucket for view controllers that you can add to or remove from and the navigation controller also provides methods to transition between any of the view controllers in the bucket so let's dive more into this view controller stack because in our app demo we essentially added two view controllers to that navigation stack actually behaves kind of like a stack of papers when view controllers are added to the stack they're added to the top of the stack the view controller at the very top of the stack is the view controller whose view is visible to the user so what's a push transition if you remember when we hooked up the button from the first view to transition to the second view in the storyboard we chose that transition as a push type of transition and here's what's happening in this first diagram we have a navigation controller object that only has one view controller in its stack and that is our initial view the one with the coffee beans image and the address label and then when the user clicks the button the second view controller the one with the map view gets added to the top of the stack so now the second view controller is the one that the user sees and then when the user hits the back button the topmost view controller gets removed which is the map view one and once again the user is looking at the first view controller so that's a push transition we're just pushing view controllers on top of the stack so what's a modal transition that was another option that you were able to select from when you're creating that connection between the first view controller to the second so that option is to present that second view controller as a modal of the first view controller you see view controllers have an ability to present other view controllers as a modal and it looks kind of like this in diagram form now in this case the first view controller has a reference the second view controller and it controls whether the second view camera is displayed or not in the push case the navigation controller has a reference to both view controllers so it's the parent of both of them and and it controls the transition between the two if you want to read more about using modal view controllers and presenting view controllers from other view controllers you can do so in a link I've provided below in the description to the Apple documentation another thing that we did in this last practice was to add the map kit framework and the reason for this I explained in the last video I actually wanted to get into the in this one instead but most of the time apps don't need access to the full feature set so by default Xcode projects only include some basic frameworks that are common to all apps and you'll notice that the UI kit framework is one of them you'll notice it at the top of a lot of the classes that you you use especially like viewcontroller class for example and you like it provides all of the elements that you've been using so far like the labels the image views and so on and so forth but if you wanted to use stuff like GPS and the seller ometer and like map kits and other even like social networking frameworks you have to add them into your Xcode project manually by only including what you need you save memory and space so that your app is lean and it's fast as possible okay something else that you did in the last demo was sub classing and overriding methods so an objectoriented program which is the form of programming you're learning right now there's a concept of class inheritance and this means that when we create a class we can make it a subclass of another class and you'll notice this because when we create new classes in up in Xcode and we choose Objective C class we are always provided with a box that put in the name of the class and on the other box to put in the subclass so the best way to explain how class inheritance works is using an example let's say we have a class called car which contains a method called Drive and a property called transmission type all cars have a transmission type so we're using a property to keep track of it and furthermore all cars should be able to be driven so we have a drive method of our core class now what if we wanted to create another class called BMW car we could create it as a standalone class and then declare a drive method inside of that class and declare transmission property of the BMW car class as well but instead of that we could actually make the BMW car class as a subclass of the car class so in this arrangement the car class is the parent and the BMW car class is the child and this allows the BMW car class to inherit all of the properties and methods of the parent car class so you don't have to rewrite it so when another object caused the drive method of a BMW car object it'll actually be calling the drive method defined in the parent car class and likewise BMW car has the transmission type property simply by subclass and car it doesn't need to read eclair it in its own class and later on we can actually have more subclasses of the car class all of which in the properties and the methods of the parent car class and so how do you tell what's the subclass of what well if you look in the header file of your classes you'll notice that let's say if we look at the viewcontroller class looking at the header file we see that the class name is viewcontroller but this colon followed by this class name that's what it's sub classing so uiviewcontroller is actually the parent class a view controller so view controller inherits all of the properties and methods of the UI view controller class and this is a class that's in UI kit and similarly if you look at the location data controller you'll notice that the class name is location data controller but it's actually a subclass of nsobject so if we go back to the view controller m the implementation file remember when you declare the view did appear method and Xcode predicted that that's what you wanted to type in well I told you that that was overriding a method so overriding methods is a way for a subclass to specify its own unique implementation of a method in its parent class so in the car example the car class has a drive method that the BMW car class inherits that means that if you create a BMW car object and you call drive on it then it's actually calling the implementation of the drive method in the parents class now what if you wanted your own unique BMW car drive method what you can do is you can override the drive method and the way you do that is you declare a drive method in the implementation file of BMW car and so now when you call drive on BMW car it actually uses the drive method of the BMW car class and not its parent car class now coming back to view controller dot M when we write view did appear like this we're actually overriding the view did appear method of the UI view controller class which is the parent a view controller and little did you know you are actually already practicing overriding methods the parent class the UI view controller it has a couple of methods like viewed and load as another over ridden method and you see the statement here super viewdidload well super is actually referring to its parents method so even though view controllers overriding the viewdidload method it's own implementation so I can type in something here do something unique do something unique to viewcontroller so even though I can write my own unique implementation below here this line says call the viewdidload method of the parent as well so not only should you do your own unique thing but also execute the code in the parents viewdidload method and that's this here in the view did appear we could actually also do that and then you pass in the animated variable that you got from right here so this way we preserve whatever was happening in the parents view did appear method and then we also add our own custom code that we want executed so while we're looking at these methods of a view controller we knock a little bit about the lifecycle of a view controller so you'll notice that when you create a new instance of the view controller this method gets triggered viewdidload let this point the view isn't actually visible to the user yet so in this method you can put it in code in here that is needed to set up the view controller now there's another method before view did appear gets called and that's view will appear and in this method it's triggered right before the view is visible to the user now it's a good place to put any code that relates to hiding or showing any UI elements and any code that needs to happen every time the view transitions from not being visible to being displayed remember that if your app has multiple views and you're switching back and forth view will appear in view did appear gets called every time this view controllers view gets displayed on the screen one thing to note that is if you put too much laborintensive code in view will appear it might actually cause the the view to lag as it's being displayed to the user so if you did appear it gets called right after the view appears at this point the view is already visible to the user you can start any animations or any code that needs to execute after the user sees the view and then from there you have a couple other ones like view will disappear and you did disappear so similar to will appear and did appear these two methods get triggered as the view is going to leave and these methods can be used for resetting the state or doing animations as the user leaves the view or setting flags or you know doing any cleanup that sort of thing so in this video you learn about the navigation controller you learned about sub classing and overriding methods and if any of that seemed confusing watch the video again or read the notes in the description below or ask me any questions and this concludes the basics series and from here we're gonna move on to creating some functional applications that are more and more complex it's at this point you're well on your way to learning iOS and being able to build your own apps as always the notes are in the description below and if you found this lesson helpful please use the share buttons below the video to share this with any of your friends or family and share it on your social networks and just help me get the word out there thank you so much for watching and see you guys in the next video