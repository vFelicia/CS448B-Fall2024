hello welcome to learn Swift for beginners lesson 8 in the previous lesson you learned about functions how to declare them and how to call them in this lesson you're going to learn how to use them in a even more powerful way by having your functions accept data and also return data to you when you call them all right let's see how that's done so here I have a fresh playground if you forget how to open up the new playground just go back to lesson 1 of this series and you can see how now there's one thing I want to mention before we move on and I forgot to mention the previous video and that is that sometimes I may accidentally say method and when I say method I actually mean function now I noticed that a lot of other Swift teachers also do this and the reason for this is because for many Swift educators like myself Swift isn't our first programming language and in many of the programming languages out there there is some concept of a function and sometimes they're called functions sometimes they're called methods and sometimes even other things so a lot of the educators out there when they're teaching sometimes they're going to slip up and they're going to say method instead so I just want to put it out there if you hear me say method just know that sometimes I use function and Method interchangeably ok so we're going to start by just read Eclair that function that we had in the previous lesson and I want to read Eclair it just for extra practice for you guys so I think it was something like add two numbers like this and it was let a equals 1 let B equals 1 and let's see equals a plus B and then we're going to print C just like that now in the previous lesson I mentioned that functions are great for kind of organizing your little bits of code into pieces of code Det perform one task so in this case this function would add the two numbers together and then it would print out that sum in the console but what if I wanted the function just add the two numbers but don't print it out I just want the result so in fact functions have something called a return value and it's exactly how it sounds when you execute the function it returns a value to you so let's take a look at what the syntax is for specifying that a function returns a value so everything remains the same as our basic function definition but after the two rounded brackets you have an arrow that arrow is just comprised of a hyphen and a greater than sign and followed by that you have the data type of the value that this function should return so now that you specified that this function returns value you have to use the return keyword inside of that function to actually return a value of that same data type that you specified so now let's go back to our playground and see how this applies to the function that we have there so let's say that for this function I don't want to print out the sum instead I wanted to return the sum to me I would then erase this print statement first of all after the rounded brackets i would put greater than sign and then I would put int so that's fine that this function should return an int data type now Xcode immediately throws an error here because it notices that I don't have the return keyword I'm not returning an integer value like I said I would so what I would have to do actually to fix this is use the return keyword and I'm going to return C because that's the sum of a and B so now when I call add two numbers like that it actually returns C I'm going to show you something here so when I type that autocomplete it shows you the return value right there it tells me that add two numbers actually returns an integer like that so what I would do essentially is I would probably declare a constant and let's call it sum and I would say equals add two numbers what happening here is that I'm calling this function add two numbers and this function is returning C as in the sum of 1 plus 1 and I'm assigning that value into this constant called sum so now if I print sum like that I would get 2 so this constant sum it stores the returned value from my function here so one more thing I can do up here instead of declaring this constant C equals a plus B and then returning C I could actually get rid of this constant and I could just return a plus B like that and that would actually take a and B add them together and then return it so that's return values for functions and this is really powerful because now you can write a function that does something and returns the result to you so your function is kind of like a little worker or a piece of code that does a specific task and then returns you back the result now there's another cool thing that you can do with functions and that's called parameters C this function by itself add two numbers it's always just going to add one and one together and return to to me but what if I wanted this piece of code to be reusable for any type of numbers I want to specify which two numbers I want to add together so essentially what it is is when I declare this function I can specify in between these two rounded brackets C I mentioned in the previous video that we would use this in between these two rounded brackets we can specify that this function needs some input parameters in order to execute so let's say that I'm going to declare this function and say that when you call this function you need to give me two numbers as inputs now when I call the function here I would have to specify two numbers in between these rounded brackets okay so before we actually do it let's go take a look at what the send looks like for declaring these input parameters so this syntax right here shows you what the function definition would look like for a single parameter now we're going to get to multiple parameters but this is an example of a single parameter function declaration so in between the two rounded brackets you have an argument label okay I'll explain to you in a second what that is and then you have a parameter name followed by a colon and then followed by the data type of the parameter you're accepting now let's talk about the parameter name data type part first so obviously the colon data type part of that specifies what sort of parameter you're going to be passing into the function and the parameter name is going to be the name of that parameter you use within the function so if I wanted to take that input and I wanted to add it to something and I want to reference that value that was passed in I would use the parameter name okay inside the function now the argument label for that parameter is what is going to be shown when you call that function I know it's a little bit confusing right now but let's jump into an example so it makes more sense all right so back to the playground here let's implement one parameter inside our add two numbers function here so I'm not going to use any descriptive names right now because I want to show you how the argument label and the parameter name plays out so I'm going to say add two numbers argument label is let's just say Arg and then the parameter I'm just going to say para okay and then int so this function now accepts a parameter that is type of int and then Xcode detects that now this function call is incorrect because we have no function that doesn't accept parameters so one cool thing you can do is just array that and go add two numbers you can see that autocomplete now recognizes that we have a parameter so let's double click that and you can see here is the argument label let's pass in the number here pasen pasen oh my god so by specifying arg there as the argument label for the parameter when I call the function I'm going to have this label here if I wanted to use this number that I tossed in remember you have to use the parameter name that's four inside the function so I would reference the value that's passed in using the parameter name like that so essentially what I would get here is because I'm passing in two and I'm referencing I'm setting a as two right that's our parameter that just got passed in it would be two plus one so that's what is stored into some and when I'm printing some that's what I expect to get three okay that is helpful but it's not complete we want to be able to pass in both numbers so that we can specify which two numbers to add together let's take a look at the syntax for multiple parameters so the syntax for multiple parameters is very easy in the parameter list that is that stuff between the rounded brackets you would just put a comma after the first parameter and then essentially repeat the same thing for the second parameter you have an argument label followed by space followed by a parameter name colon and then the data type now you want to use different argument labels and different parameter names obviously so that you'd be able to tell it apart now let's jump back to the playground and add our second parameter so what I would do in between these rounded brackets in this parameter list is I would just put comma and then I would put my second argument label my second parameter name followed by the data type which is another int now again Xcode is going to throw this error here let's use autocomplete again add numbers you can see here it's been updated to accept two arguments so argument just aargh and r2 so let's pass in two and two now we have to modify our code a bit right now I'm still getting three and that's because inside this function code I'm not using the parameter two yet we can change that like that so now a gets set to parameter I mean para and B get set to para two and then I'm returning a plus B so now I actually get four in here so one thing we can do with this function is actually we don't need to declare a equals para and B equals para 2 that doesn't really do anything so we can get rid of these two constants here and we can simply return pair up plus para to like that straight off the bat now our function is pretty simple so at this point you might be wondering why is it so confusing that I'm using argument labels here in the function call and then we're using parameter names inside the function code well what you can do is you can actually not specify argument labels like that and just have the parameter name and what LLL do is it's going to use the parameter name both as the argument label and the parameter name so now this is wrong you can see xcode here has an error let's use autocomplete to see what the new function looks like the new function call and you can see here that now the argument labels are the parameter names so we can also change our parameter names at this point you probably don't want to use pair around Terra for your own function so we can say you know number one number two if we have these as our parameter names then you know this changes as well number one number two and then our function call would also change like that okay now you might be wondering why why use argument labels at all like what are they for well we'll use an argument labels you can make your function calls a little more like natural English so let me show you an example you can do something like this add two numbers so there's my first argument label and number two like that so let's take a look at what our new function call would look like so when I'm calling a function add two numbers using two and two all right you can see how that reads more like natural English and it makes intuitive sense what the parameters are going to be used for meanwhile inside our our function here if my parameter names were using right or end it doesn't make much sense right you know if I didn't use if I use these as the parameter names like that these would be terrible parameter names because if my function is really long this doesn't tell me anything this doesn't tell me anything doesn't mean anything to me while this function call still makes a lot of sense when you call it in terms of natural English but in in the actual code in here and add two numbers you know adding using an N doesn't really make sense so if you use the combination of argument labels and parameter names that make sense you have this function call that is like natural English and make sense and you also have meaningful parameter names that you can use inside of your function okay so I want to show you one more thing if you don't want to use these argument labels at all what you can do is replace your argument labels with an underscore like that or you can replace one or you can replace both so let me show you what that looks like so I'm going to replace both the argument labels with just underscore take a look at what that looks like now so you can see now that I just pass in two and two like that no parameter names no labels no arguments no nothing it's just you pass in the input parameters like this and you these are your parameter names so that's what you're going to be using inside of your function okay so just to recap in this lesson you learned about return values you learned about the return keyword and you learn about input parameters and how to specify them what argument labels are what parameter names are and also how to omit argument labels altogether I hope you enjoyed this lesson if you did please give the video a thumbs up it really helps the video get some exposure and please subscribe for more and finally I'll see you in the next lesson bye for now you