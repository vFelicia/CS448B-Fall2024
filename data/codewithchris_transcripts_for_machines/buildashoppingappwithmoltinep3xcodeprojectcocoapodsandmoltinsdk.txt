hey coders what's up Chris here with episode 3 of how to make a shopping app in the previous lesson we had registered for a brand new Moulton account we had created and configured our Moulton store and then we had added some test products so that we can retrieve them through the API in our Xcode project in this lesson we're going to create our Xcode project and we're also going to add the Moulton SDK into the project and then connected to our Moulton account that we created in the previous lesson so here I am on the Moulton website and under more you can select getting started which is where I am here if you scroll down you'll see there instructions for iOS let's select Swift and here are some instructions to install the iOS SDK so if you're new to programming SDK just stands for software development kit and essentially it's just a bunch of files or classes that we can include into our Xcode project that is going to help us connect to and work with our Moulton store so there's two ways to include the SDK into your Xcode project one is using a manager called cocoa pods and another one is just downloading the SDK manually and adding it to your Xcode project so I'm going to show you how to setup cocoa pods and then install the Moulton pod but before I do that I just want to let you know what this option entails as well so if you click download the iOS SDK you're going to come to this github repo and if you're not familiar with this website github it's where people can put their code and projects so that other people can download it and use it and also to contribute to it so in this case this github page is showing the moulton iOS SDK and if you've never used to get hub before the easiest thing for you to do is probably just to hit download zip right here and you're going to download the whole SDK as a zip file and then when you finish downloading it just unzip it and then you can drag it into your Xcode project but the better way to do it and the recommended way if we go back here is to use something called cocoa pods the REE is if you do it the manual way where you download the files from github in the future when Moulton updates the SDK you're going to have to manually redownload it again and update your project with it now imagine if you're using multiple github libraries in your Xcode project now maintaining them becomes quite a headache now using something like cocoa pods helps with this what it allows you to do is to have a pod file associated with your project and in that file you specify all of the frameworks and libraries that your project depends on and what version of those libraries and with a simple update command it's gonna go and fetch all of those libraries and make sure it's got the right versions so that you don't have to do that manually now installing cocoa pods is a onetime thing and then for each Xcode project you just have to create a pod file in that projects folder so we'll go through that as well but first of all let's install cocoa pods you're in luck because I just got a brandnew shiny iMac and I don't have cocoa pods installed so we're going to be able to go through that together now alternatively a couple of great guides to install cocoa pods can be found on the official cocoa pod site under guides getting started and then under installation and another great one is on ray Wonderlic site how to use cocoa pods with swift so I'll add these two links in the description below okay so what you're going to do first is open up terminal so you can either press command spacebar and search for terminal and open it up that way or if you go to your launch pad it is I believe in utilities or other sorry and it's this one right here terminal so when you click that it shows a little window like this and all you have to do is type sudo gem install cocoa pods now hit enter and it's going to ask you for your password after you enter in your password it might take a little while to get started as it did for me I had to wait about maybe 40 seconds before I started to see anything on the screen but I just cut out that waiting time in the editing so you didn't see any of it but when it's finished installing you should see something like this the next thing you want to do is type pod setup verbose and that's going to let you see the progress as it's setting things up so with those two commands we are done setting up cocoa pods and if you're not familiar with working in terminal or this kind of looks complicated don't worry because you only need to set up cocoa pods once and then after that as you're going to see soon it's very simple to set up for each new Xcode project that you do now we're going to switch gears and set up our new Xcode project so I'm gonna open up Xcode and we're going to create a new Xcode project here if you don't get this Welcome dialogue just go up to file new project and then we're actually going to create a master detail application so the master side of things is going to show our table view listing all the products and the detail is going to be the product detail so we're gonna start with this and if you don't see any of these options make sure that you're looking under iOS application and you should see the master detail application so I'm gonna call the product name shopping app and make sure that the language is Swift devices is iPhone and you have these unchecked let's click Next and I'm just gonna save it on my desktop okay so now that we have the Xcode project created we're gonna go ahead and close the Xcode project because we're going to go back into terminal and we're going to set up the pod file for it so let's close Xcode there or close the project and this is where you might get a little lost because it might be different for you depending on where you saved your project so I saved my project on the desktop as you can see here so in terminal we need to navigate to that folder and so you're going to need to know a couple of commands but I'm going to run them by you so first of all you can type in LS enter to see which directory you're in right now so here I can see that I have applications creative cloud files desktop documents desktop is the folder I want the these this is listing out all of the folders in this current directory if I open up my finder and I go into Desktop and I press command up I look at my file structure you know I can see all of these folders that are mirrored here and so this folder that I'm in right now is basically my cris folder now if I want to go into the desktop folder you can press CD space and then the folder name like that so now if I hit LS that's listing out all of the files and directories on my desktop and if I go into here you can see that that listing mirrors what I have here now take a look at this folder that's the folder of my Xcode project so I'm gonna go CD shopping app and now I'm inside that folder and here I'm gonna run my pod init command so if I click that this is inside my Xcode project so I'm gonna run by a couple of commands with you so that you can navigate to your own project folder so you learn that LS was to list out the current contents of the directory you learned that CD and then the directory name lets you go into that directory now CD dot dot lets you navigate out of the directory of CD space dot dot rather so now I'm back on my desktop if I hit LS if I go CD dot dot again now I'm back out a level again so now I'm in the cris directory my home folder so depending on what you're seeing in terminal and which directory you're currently and you can use those three commands to navigate to your Xcode project folder depending on where you saved it okay so for me let me go back to my Xcode project folder so CD space desktop and you can even if you know what folder it is you can even specify it like that and start jump directly into desktop slash shopping app so if I hit LS now I'm inside that Xcode project folder okay so inside the project folder I'm going to type in pod init to set up cocoa pods for my project and you can immediately see that pod file here in my project directory so now we open up the pot file with our text editor I wouldn't recommend using TextEdit because it's a rich text editor and it may screw things up if it adds fancy quotes into your pod file so I use something like sublime text so our pod file looks like this what we're going to do is uncomment this line right here we'll change that to nine and also because we're using Swift we're going to uncomment this guy as well just removing the hash sign in front of that line and then in the middle here between the target in the end tags we're gonna type in pod space open up a set of single quotes moulten like that I'm gonna save it I'm gonna close this file and then we're gonna go back to terminal and now I'm gonna type in pod install and what it's going to do is read that pod file and install the dependencies and the libraries that we need okay so now it's done if we go back into our project folder and finder we'll see that now it's got a shopping app dot XC workspace so from this point onwards we want to be opening this file instead of the Xcode project so let's double click the XC workspace file and it's gonna open up Xcode so now we're ready for the next step because the moulton libraries are written in objectivec and this is a Swift project we're going to have to add a bridging header to our project we're going to go to under this folder shopping app I'm gonna rightclick or ctrl left click and let's choose new file and we're gonna select header file under iOS source select the header file you can name it bridging header like I'm doing here let's make sure to include it in this target here let's hit create so in our bridging header we need to specify inside here hash import start an angle bracket and type in molten slash molten dot H and then the closing angle bracket save it and now we have to figure our Xcode project to point to this file as the objectivec bridging header so we're gonna click this node right here go under build settings and let's search for here objective okay I'm not seeing anything but there is a toggle here that says basic and also let's choose all so I think that basic is hiding some of the options so if we type in objective if we scroll down and we look for a swift compiler we're going to see it all the way down here and under objectivec bridging header let's open that up actually we're just going to double click here and let's specify the file bridging header dot H so whether it's a debug or release build we're still going to use bridging header dot H okay and finally we're ready for the last step which is to connect to our Moulton store so here you can see step two is to initialize the Moulton SDK with this line here and here is our store public ID now it's pretty handy they've specified my store ID in here so if you've already set up a store and you're viewing this you should probably have your ID in here as well oh and if you don't know where to get this public ID you can just go to you scroll all the way up to my account and you go to account overview for the store that you set up and you go to API keys it's this one right here named client ID so you can just take that one as well and let's go back to the quick start and then you can put it into this method here I'm gonna copy that we're going to go into the master view controller swift and under the viewdidload we're going to make some space right under the viewdidload and we're gonna add that at this point our class doesn't recognize the molten class so up here we have to import molten so let's hit command b to build the project okay so I'm getting an error here it says that the bridging header does not exist so it can't find the bridging header so let's take a look at our project folder here's my shopping app project folder and I do see the bridging header in there but upon closer inspection it's looking for that bridging header in the root directory here of my project sees desktop slash shopping app slash bridging header dot h but for me I've got at one level deeper in shopping app and that's my mistake because I added it inside this group right here so there's my bridging header but we can easily fix that if we go back into the build settings and instead of just putting bridging header there let's put shopping app slash bridging header like that now let's press command B and now let's go up to product let's clean it and let's press command B to build it again okay I've got another error so let's see what this is use of unresolved identifier so that was my client key so actually we need to enclose this in quotes because set public ID this method I'm guessing it probably asepsis string right set public ID yeah so it's EPS of string and basically we just have to wrap that key in quotes so now finally let's command B it to build it again and build succeeded so now we're ready to work with the Moulton API in the next lesson when we retrieve all the products and we listed in our table view okay I'll see you in the next lesson and bye for now