hello and welcome in this video I'm going to show you five techniques to find out why your app is crashing or behaving strangely why is this so important because nobody writes perfect code on the first try the process usually looks like this you write your code then you test it out if it doesn't work you go back and you tweak it some more however if your code does work on the first try then you get to do your happy dance but wait you're not done now you have to put on your hacker hat and you have to try and break your code you have to think about all of the small edge cases or scenarios where your code might not hold up if you manage to break your code then you go back and you fix it and you test it again and you keep doing this until your code is as bulletproof as possible like I said this doesn't happen in a single try that's why it's so important to know how to troubleshoot your code and debug it luckily Xcode gives us lots of tools to make this happen and in this video I'll tell you all about them so we're going to talk about logging first because it's your most basic form of debugging and in many cases it's also a preemptive measure we're going to be demonstrating logging as well as the other debugging techniques in the match app project which we've been building so far in this module in just in case for those people who are jumping into this lesson who hasn't been following along in this module so far let me just quickly explain how this UI gets generated with this collection view of cards so it's very very simple we have a view controller which asks the card model for a bunch of randomized cards and this function get cards will randomly generate an array of sixteen card objects and then return that to the view controller who will then display it in the collection view and that's how we see all of those sixteen cards in the scrollable collection view okay so you already actually see some logging down here and this is simply output which you can put into this console area using the print statement so let me show you what that looks like here in the card model in this get cards method what we do is we loop eight times and for each of the eight times we generate a random number and I'm simply using this print statement to print out that random number to the console quick note if you don't have this area down here there's actually this button that controls this little tray and this part also has two panes here which can be controlled by these two icons down here I know it's a little hard to see but you're gonna want both of them visible and you're gonna want this tray visible as well so in terms of logging if you are logging more information it would probably be useful to have some sort of text describing what these numbers are so you might say something like you know generating a random number and then you would just use variable insertion into your string like that let me just run it again to show you and then you get some output like this and at the end after it just passes back to your rate you can use another print statement just before and you can maybe print out the count well you probably put some sort of descriptive statement there so it's not just a number but as long as you know what it is and you're working alone that's fine so the reason logging is very useful is because it allows you to see if your code is generating the results that you expect so as I'm writing through all of this code in this method if I didn't print anything out my assumptions would be that I would generate 16 cards and they're going to be eight pairs of random numbers and I would return an array of sixteen objects that would be my assumption if I didn't print anything out but by writing these print statements when I run my app I can visually see that that indeed is the case so I've got bunch of random numbers for the interations and I've got 16 card objects about to be returned to the viewcontroller notice that I'm not really doing this because I think my code is broken but I'm doing this just to verify my assumptions as I'm going along and if something does go wrong I can actually just go through my console log here and take a look to see if my code is generating the results that I want now logging can also be a troubleshooting method so for example if in the simulator somehow I see that I'm missing a card or I am I have extra cards or something like that or maybe the cards that I do have they're not matching up I don't have 8 pairs of matching cards so at that point I might go back to this method here if I'm suspecting that this method might be generating some weird behavior I might put print statements everywhere right and I might run my code and then make sure that all of the variables are checking out and you know objects are getting added to the array properly and stuff like that another way that you can use logging statements is in response to user interaction so a lot of the time you might be trying to handle a user taps for example I'm tapping on this card I'm expecting it to detect that and flip over well where does this detection happen what if you're tapping on this card and it's not flipping over and you're wondering if your tap is being handled at all and if it's being detected and handled why isn't it flipping over well in this case you can go into the view controller and you can go into collection view did select item at because this is the delegate method that gets triggered when a cell in the collection do is tapped so you might put a print statement here saying that a cell is tapped and you might even go so far as to say cell is tapped and then maybe insert the index path row to indicate kind of which cell is tapped so if you run your project again and you're tapping on a cell and you see that print statement you see down here cell is top then you know at least that the top is being detected now the next step is to figure out why it's not flipping over you know if it wasn't flipping over and trying to troubleshoot that however if let's say you're tapping on this guy and it's not flipping over and you don't even get this print statement here then you know that it's not even detecting your tab so then that gives you a clue that maybe something is blocking that collection view or maybe that collection view is not handling user interaction so it kind of shifts your train of thought and troubleshooting to another path okay so now let's take a look at our second debugging tool and this one is really powerful and you will probably be using this one the most often and that is breakpoints and the reason why I say logging is kind of preemptive is because to do the sort of troubleshooting when you detect a problem breakpoints are actually a great way to do it and it's faster than having all of these log statements so when I'm coding I will use log statements in my code to verify my assumptions and to just a double check and display that the values and the variables are what I expect however when something goes wrong let's just use that example again where I'm tapping a cell in this collection view and it's not triggering the card flip so in this case I can actually just use a breakpoint to see if it's going into this method instead of putting a print statement here and then having to run the project again and relying on seeing visually this console.log so let me show you how the breakpoints work if I wanted to see if the execution went into this method all I would have to do is set a breakpoint right here because when the execution hits that line of code where you've set a breakpoint that execution will actually pause and you're going to be able to see a green line here so let me demonstrate this actually I didn't need to rerun my project that's the nice thing about breakpoints where you can actually set them and you can delete them without having to rerun your code because it's not a code change so you click it to activate a breakpoint you click it again to deactivate it or you can toggle it actually and to completely remove it you can just drag it off of the gutter so let's see it in action here if I tap on this guy you can see that Xcode comes to the foreground and it highlights this line where the execution has stopped at my breakpoint so this tells me that the execution is coming into the did select item add method so it is handling and detecting my taps however if let's say that there's a button here to continue program execution and I'll talk about those buttons in just a sec but let me just say that if I tap this cell and it wasn't hitting this breakpoint that means that this method isn't being fired because the execution would have stopped at this line of code if it did come into this method right so you can use breakpoints to see if execution goes into certain methods or reaches certain branches in your if statement and stuff like that the other thing that breakpoints are awesome at is if let's say let's use that example again we used before where let's say you're missing a card or you have an extra card so you suspect that maybe the card model isn't returning the number of items that it should be returning so that's where you're going to look first so you go into your code and then you jump to let me just remove this breakpoint you jump into the card model or maybe let's just say in the view controller here if we scroll up to the viewdidload you can see here in this statement where we call model get cards and this is going to basically fetch that array of card objects and assign this card or a property that we have up here so I might put a breakpoint right after that line so I can stop the execution as soon as that has happened and then I can double check that that card array contains what I expect it does now in this case I do have to restart my project because the viewdidload method has already run so I just need to restart my app so that it hits the viewdidload method again so here what you can actually do is put your cursor into the console window and you can use a command to double check what's in different properties variables in objects just to verify that those things contain what you are expecting so for example I want to double check the number of objects in my cart array so I can actually type in pio which stands for print object and then you can put in the name of the object that you want to display so in our case we are going to type in card array and you also get autocomplete in this console window so that's really nice so pio we've got 16 elements in this array and you can see all of the indices here each one has a card object now if I wanted to drill down into a specific element let's say card number 15 or this would be the last card this would be card 16 actually I could do something like pio and you can actually press up on your keyboard to use a command that you previously wrote so you don't have to type as much now let's access element 15 and I can use dot notation and I can actually access one of the properties and I can just double check for example what card it is in this case the sixteenth card is the card image that we have in the asset library called card 11 now one thing I want to point out is that notice that my break point is after the variable getting set because had I set the breakpoint right here and it paused on this line let me just show you when it pauses on this line of code here it hasn't yet executed that line of code so if I go here right here it stopped up here on this line right here you can see it stopped on line 24 if I try to type in peel card array right now it's going to be zero elements why because we declared a card array as an empty array here and it hasn't executed this line of code yet to grab the cards from the card model and assign it to the card array so actually I need to set the breakpoint one line after the variable gets assigned it that I want to check so the recap you can use breakpoints and set them in certain branches of code or certain methods that you want to be alerted to and have that execution stopped when it hits to let you know that it is reaching that point in the code or you can use breakpoints to stop the execution of code at any line of code that you want and then at that point you can use these commands in the console window to double check what's inside your variables and objects and properties at that point in time that's one thing that I didn't stress actually is that when your execution stops at that breakpoint when you're checking all of the objects and the variables and what's in them it is that state of that object or variable or property at that point of the execution and that's why it's such a great tool in the bugging toolset because it's almost like you can freeze time as your app is executing and you can double check things now another way that you can check things is actually there's a little window over here on the left and it kind of shows you all of the active things in memory and you can see that I do have a Carter right here I'm at zero values at this point again it's stopped here let me just click this button here to control the execution and we're going to talk about these buttons in the next part of this video in a little while but I've moved the execution to the next line so it has executed this line of code and taking the cards from the card model and assigned it to card array and now in this little window here I can see that card array actually has these and I can just expand this tree node and it might actually be a little easier for you to read right so now that we've talked about breakpoints and you know how to stop execution at a specific line of code we can talk about these controls down here which let you step through or trace your code and tracing your code is just a fancy term for walking through your code line by line so why is this important because it basically allows you to go through your code line by line with a finetooth comb you know how we just use the example where you can set a breakpoint on this line and then it stops the execution of code at that line and you can kind of double check on all of the variables properties objects using these two panes down here well tracing allows you to move this green line to the next row of code and then you can do all of the same things so you can move through your code line by line while checking how all of these objects properties variables how the values change inside of them so you can see exactly where things are changing and trying to find out where your bug is if you're trying to figure out why some sort of weird behavior is going on so let me demonstrate to you what some of these buttons do the first one and the easiest one to explain is if you've paused the execution of your code using a breakpoint and you want to just continue the execution and in other words resume you can hit this button right here continue program execution okay so now let me set the breakpoint let's say in here did select item at and we are going to tap on a card like that and it always starts with a breakpoint because you need to pause the execution at some point and once it's paused then you can use these buttons to navigate so this one is probably the one you lose the most often after continue program execution and that is step / so when you hit this button it's basically going to move the green line to your next row of code right so now the execution is paused right here if I want to execute this line of code and move to the next one and pause I can click on step over again so now I'm here and if I wanted to let's say I'm not sure if the program execution is going to go into this if statement well let's step over and find out so it does it goes into this if statement your next command is step into C whereas step over is just going to run through the lines of code in this block of code or this method that you're looking at step into will actually dive into this method that I'm currently at if I just tapped on step over it would just come to this line of code having executed this line of code however if I hit step into right now it is actually going to dive deeper and go into the flip method where now I can navigate through the code in the flip method and similarly step out well exit the function and come back out here so in terms of tracing code those four are going to be the main ones you're going to be using to navigate around in your code and tracing is usually used in conjunction with breakpoints because like I said you need to stop the execution first at some point and then walk through your code using these buttons down here so the way to use this debugging technique is if you're detecting a problem in your app you might have some sort of inkling about what might be going wrong maybe what area so you start there you set a breakpoint in the area where you think something is going wrong with a breakpoint you run your app so that it pauses it at that point in time and then you check all of your objects and properties and variables at that point and then you slowly using these tracing buttons here through your code line by line and try to pinpoint the exact line of code which is causing unexpected behavior or the line of code which is generating values that you don't expect to get so now we come to the last de bugging tool that we're going to talk about in this lesson and that is conditional breakpoints what are they well in your breakpoint that you set here let me just stop the app right now you can actually double click it and that's going to pop up this dialog which will allow you to add a condition and basically that says that the breakpoint will only trigger if that condition is true why is this useful well let's take a look if we go to let's say the card model where there's a loop and this loop just runs eight times but let's say I had a loop that ran a thousand times and there was maybe only a very specific case that was causing an issue so I would set a breakpoint here and let me just run the app right now so that the breakpoint gets hit so let's say this loop runs a thousand times and there was a very specific scenario which I wanted to pause the execution at and I wanted to take a look at the variables and see what's going on and why my issue is happening well I would probably have to keep hitting this continue program execution looking for that specific scenario while it basically loops a thousand times instead I can set a condition on my breakpoint to let's say that only pause the execution when the random number is greater than I don't know seven so let's say that you can see your breakpoint changes a little bit it has this little white triangle instead and I actually want to move this right there because this is at this point this is when random number gets set so this breakpoint right here is only going to trigger when generated random number is greater than seven so I can now just continue program execution and it's paused it down here so why the deposit because the random number as you can see down here is 11 all right let's continue program execution and you can see that it didn't pause it for the last number because it was 5 all right so let me just run it again so the first number is 9 so it paused it second number is 1 so it didn't pause it right now it's paused it on this line because random number is 11 so that is conditional breakpoints so the cool thing about conditional breakpoints aside from the scenario I just showed you is that you can also use it preemptively in your code so let's say that I was building this method here and I was writing out the code and I'm expecting to generating numbers from 1 to 13 now that's my assumption right and if I wanted to get alerted if that assumption is incorrect all I would have to do is set a breakpoint let's say like this and only stop if random number is let's say greater than 14 right I want it to be alerted if this happens now this is preemptive because I'm expecting my code not to ever have to stop right but if it does happen that for some reason I get a random number that's greater than 14 then the execution would pause it would hit this breakpoint it would trigger and then I could check out why that is happening the last thing we're going to talk about is how to debug your visual hierarchy so let me just remove this breakpoint and to demonstrate I'm going to have to run the project oh there's another breakpoint let me get rid of that continue program execution let's say that you use the debugging tools you just learned about and you figured out that the card model is returning 16 objects so now the question becomes why isn't the view controller displaying these objects into the collection view well my second thing that I would think about is in the collection view for this method here number of items in section which controls us telling the collection view how many items there are to display are you returning the right amount of items because if you're returning zero here then the collection view is going to think that there are zero items to display now this checks out the next thing I would think about if the collection view thinks there actually are sixteen items to display why don't we see anything then I would take a look at cell for item at because here you're passing a cell to the collection view to display and if this all checks out then you start to wonder okay something is wrong here maybe my collection view doesn't have a width or it doesn't have a height or it's just invisible or something like that you start wondering about your actual user interface so there's actually a way to take a look at how things are laid out in your UI when your app is running and these objects are generated here so right here on the left hand side you're going to see a whole bunch of information on your app but there is this little button here that you can view the UI hierarchy and if you click that you're going to see that you get to see your UI here and how all of these different elements that are displayed here are in this what's called the visual hierarchy so you have your UI window you have your view for view controller and then you can start taking a look at all of these things you have the UI image view it highlights it here which is the background and then you have your collection view here and then inside you have individual cells right and then you can dive into a cell and you can see that the cell is a UI view it's got an image view of this one's down here you see it highlighted the cool thing though is you can actually drag it and rotate it and you there's a bar here where you can kind of expand out the layers so you can kind of see you know how your things are arranged you know this is see that uiview there this is the image view this collection view there's the background image and if you don't see your collection view then you know its position incorrectly or maybe if you try to highlight your collection view and it's like this little sliver of a rectangle then you know that it's not sized properly and then furthermore you can tap on a cell such as let's say something like this and you can see if your cell is sized properly as well and if it is sized properly you can see maybe click on this guy and maybe the image view is not positioned correctly within the cell so all of these things you can see visually and it's easier to debug if it turns out to be a user interface related bug after you've checked out the code first or you might decide to approach it from the opposite side so instead of checking your code first you would check the UI first and you would see that everything in your UI checks out and then you would go and set breakpoints and start tracing your code to figure out why they're on 16 cards being returned to the view controller so below the video you're going to find a debugging cheat sheet which you can keep handy the next time you run into an issue you can run through some steps on this cheat sheet and it's going also going to remind you about the tools at your disposal that we talked about in this lesson in addition to that though there are a couple of sample projects which you can get some practice using these tools they actually have some problems with them I'm going to write down exactly what you need to figure out and you can try using the debugging tools that you learned about in this video to try and solve the problem and figure out that line of code which is causing the issue so try your hand at that it's going to get you a little more familiar and comfortable with these debugging tools in Xcode alright so this was a pretty important lesson you learned about the various tracing and debugging tools at your disposal to figure out what's going on with your code I've got a debugging cheat sheet for you to download and you can refer to it the next time your app is crashing to jog your memory about how to fix the problem but before I tell you where to download that let's do a quick recap you learned about logging where you can output information to the console area so that you can visually inspect it you learned about breakpoints that let you pause the execution on a specific line of code you learned about tracing which lets you step through your code line by line so that you can see where your code is deviating from what you expect you learn about conditional breakpoints which lets you pause the execution of code if a specific scenario occurs and finally you learn how to look through your visual hierarchy so you can double check that the elements in your view are sized and positioned correctly the next time your project is crashing refer back to this video or the downloadable cheat sheet and try to figure out what's going on with your project with the Xcode debugging tools I guarantee you that you're gonna learn a lot more than me just telling you what's wrong with your project plus I can't even describe that feeling of satisfaction you'll get when you finally figure it out on your own it's something that you have to experience yourself and it's one of the best things about programming it's like that moment when you finally crack the code or you solve a really tough puzzle that experience is going to stick in your head and you'll remember it and you're not going to make the same mistake again the more of these experiences that you can build up the more of a veteran coder you will become now I want to turn it over to you what do you think about these debugging tools that Xcode gives us let me know in the comment section below and if you think I missed any debugging techniques let me know in the comment section below as well lastly if you liked this video and you want to see more please consider subscribing to my channel by hitting that red button and if you don't want to miss the next video when it comes out hit that Bell icon as well so thanks for watching and I'll see you guys in the next lesson