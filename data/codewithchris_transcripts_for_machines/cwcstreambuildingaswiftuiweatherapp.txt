hello everyone can you hear me hopefully the audio is okay this is a new setup so finally my mac mini has come in and that means that we can stream in 1080p and we can also compile on xcode simultaneously how's everyone doing i see some familiar faces already where are all you guys from now before we start i do have to give you guys some context about what this weather app is all about now i'm not sure how many of you guys uh are part of our code crew community forum let me just make this text a little bigger hopefully it's really easy for you to see now that's really huge for me though argentina algeria brazil awesome i love to see people from all over the world this is amazing yeah so i bet you a lot of people here in the audience must be starting out as a beginner you know brand new i have to say that this app is a little more intermediate than it's not you know intermediate but i would say in order to follow it properly you would need to know at least the basics but don't worry i'll try my best to go slowly and explain it to step by step and a lot of these streaming and coding type of events are going to be pretty messy right it's not going to be like the prepared videos tutorials that i would actually film and take you through step by step so you're going to see the messy process of of coding here now if you are starting brand new and maybe you haven't you haven't gone through the swift ui basics or anything like that i would suggest you to go through just go to my channel youtube.com code with chris and go through this beginner playlist right here and would also help for you to go through another video that i have is it swift api this one right here or any of them for for that matter um because the big exercise for this weather app really is to connect to the weather api here to get the data and then to parse that data and then to display it in the app all right so we'll get started shortly uk india england saudi arabia awesome germany hello i was waiting for this for a long time well it was only a matter of time before this new mac came in so that i can actually build on xcode without killing the stream so i've been using this new mac mini for about a day because the monitor just came in yesterday and everything's a lot faster i'll admit but um yeah launching the simulator compiling code it's a super fast now all right so we'll get started again i want to give you guys some context about what this is all about so in our code crew forum which is at codecrew.codewithchris.com we go here about every month and a half we issue out a community app challenge so this is a chance for everyone to try and build something because through the process of learning you don't really get things to sink in until you start practicing so even if you go through my tutorials and you watch you know all of these 14 beginner lesson videos it's not going to do anything for you unless you launch xcode and you try to do some of it so we started these routine community app challenges to encourage people to take part and to try to build something on their own and even if you can't finish building it you'll still learn a ton a shout out to war card yeah i did get the m1 this is an m1 mac mini with uh one terabyte of hard drive space and 16 gigs of ram uh so so far we've done two of these app challenges right we've done the weather app challenge and we've done the stock tracker app and actually you guys i've showcased your apps here so this is the stock tracker app challenge that you see here and there was a weather app one which we did a while ago and and i don't know if some of you guys are in the chat right now if you did the weather app challenge please shout out so props to you for doing that uh all of the communities app weather apps looked amazing and so today um we have about an hour and i haven't done this weather app yet because we usually get the code with chris interns who come in here to work on these app challenges as a way to ramp up and learn swift ui and swift because a lot of them come and they don't have that experience but because they have the computer science background or they know maybe java or whatever they learn in school these days right they they can get up to speed pretty quickly um yes mark mark you did the weather app it was look looked pretty good um one thing to note as well even though there were specific dates for this challenge this challenge is still open so after you watch this video if you get inspired or maybe there was a part you were stuck at that this video illuminated for you you can definitely go back and do this app challenge or even if you haven't started it you can start it right now and you can request to have this forum badge in our forum you can earn badges so it's kind of like a fun way a fun little reward we're going to come up with the new app challenge in a couple of days and there will be another batch that you can earn for that all right so let's scroll down and take a look at the requirements because i like i said i haven't actually done this before now i did take a look at the api last night and it's actually a good thing that i did because although this api is free to use it's a single call api you pass in a lat long so just like a set of coordinates and it returns to all of the data that you need so current weather and conditions as well as hourly uh future forecast um it's a good thing that i created my api key last night because it did take a few hours for it to go live and take effect and i was confused at first because i wasn't able to make this api call even though i had an api key so if you're brand new to swift uh you're brand new to app development uh oftentimes apps will be you know unless it's like a calculator and it's sort of selfcontained most apps will fetch data from somewhere um to display within the app and an api is just an interface to another platform or another data source that you can make network calls to and requests to and you pass in a certain set of criteria along with an api key which usually identifies who you are and identifies you know if it's not free that that's their way to identify how many requests you're making because usually it's limited um so you make these requests to the api and then you get data back which then inside your app you can unpack it's known as parsing if that's new to you and then you can go ahead and display those pieces of data on your ui so in this particular uh live stream in the hour that we've got we'll probably take a look at this api together i've already signed up for an api key we'll do some test calls i'll show you something called proxyman which is a tool which will allow you to take a look at the traffic going in and out of your ios simulator so that you can debug any issues and we'll probably display some basic information on the screen now there won't be any fancy ui so if you saw mark's tweet earlier about watching me build a complete weather app i'm thinking that in this hour we will probably be able to make the api call parse the data get some data on the screen and then maybe in a followup stream we'll construct the ui not to mention that i have no idea about what to do for the ui right now awesome i'm glad to see that some people some people have done the app football app with all the latest games awesome yeah we're gonna do a sports statistics app as a community app challenge soon so you might be interested in that okay so let's get started with this api uh it's pretty simple if you take a look at this is an example should i make this let's make this bigger that's easier to see okay so this is the url and we can even hit this in our browser right this is a free api so all you need to do is create an account and you get an api key now normally you'd probably want to keep these private especially if you're well whether they're free or paid you probably still want to keep it private because if someone else gets your api key and uses it they're basically um using your usage amount now for the free api for this weather uh call this weather api they limit you to about a thousand calls a day which for our purposes for learning is more than enough all right so you can see here i created a second one because this first one wasn't working but it really was just that it takes a few hours for it to turn on hello from vietnam hello hello okay so this is what we're gonna do we are going to just open up a new browser we're gonna paste that there and we're gonna replace the parts um with the appropriate data so you can see there's a lot there's a lawn there's a part and there's an api key now most apis i think all apis will have some sort of documentation telling you what these parameters are and how to make the calls and what sort of data types that these parameters should be if you take a lot look down here parameters these are required so you have to supply these in to your call right here you need the app id which is essentially your api key right here so i'm just going to take this and i'm going to replace it right here and then you have your coordinates latitude and longitude and these are required as well so for this demo we're just going to pick a location and do you guys have a location a city that you guys want to see too bad i didn't first want to type in a city we'll use that city uh too bad i didn't do any sort of voting thing if i implement something from streamlabs which is the streaming software that i'm using we can vote between two places and get the chat to vote all right let's see what we got in the chat beirut all right that's what we're gonna use the rest of you guys you gotta be faster next time all right so we're going to use this this is the lot right and this is the lawn now if we take a look at the last parameter that we need to do which is part let's take a look at what that means this exclude part so this is optional that means that we could run the api call as is we don't need this parameter but it does allow you to exclude some data from the response so if you don't care about alerts you don't care about minutely or hourly or daily you can you can exclude that and that saves bandwidth and that it's generally you don't want to grab everything when you're making calls grab only what you need so we can just put something in here minutely maybe we don't need minute by minute data so we'll put minutely in here and i'm sure you can put multiple comma delimited list without spaces um i could try that alert i don't know if we'll have to encode that okay so this is the response that it gave us just make this bigger please explain the end point as well what could be the end point here in open weather so the um the end point this is the endpoint right here they have different endpoints for uh different pieces of data this one call endpoint is just a single api call which returns like all the weather data that you would need but if you want historical data for example i think yeah there's historical data so i guess you'd have to pass in a time for when you'd want your your weather data for and then also the coordinates so there are a couple of different uh end points here but the one that we're using today is are we here this one this one call end point okay so this is our data now if you if you haven't learned swift before this will be kind of hard to understand but we'll do our best here so you can see that it all collapses nicely it's like a hierarchy of data right and each piece of data has a label and a value so this is also what's known as a key so you can see that this is exactly the location that we passed in right it's telling us also the time zone the time zone offset and any good api documentation will also tell you the the data that's returned it'll explain to you what those pieces of data are because sometimes it can be pretty confusing so if we go down example of api response so this is kind of kind of what we got here and if we want an explanation of some of these values and keys and what they mean we keep scrolling down it'll tell you fields in the api response so i really like api documentation that is so easy to read and so clear like this so for example uh shift in seconds from utc right that's perfect because if you look at this it's hard to tell what that number is right but this documentation tells you exactly what that data means so that you can do something with it okay so in here we have current which represents the current weather i'm assuming and we have inside a group of data and we have so you can collapse this so all of this data right here is related to the current weather and dt uh this is a big number i'm going to assume that that means date time uh yeah dt here current time unix utc so we're going to have to do some conversion right and i'm assuming this would be number of seconds sunrise like time of when the sun rises time when the sun sets temperature right this is a big number which i'm not quite used to so let's take a look at this temperature uh units default is kelvin uh you can do celsius fahrenheit how to change the units used so let's click this and you can see here there's an additional parameter that you can supply called units and you can pass in it's optional you can pass in standard which i guess is the default that we have right now in kelvin we have metric and imperial now i don't know about you guys and what uh what measurements you use but for me here we're going to use metric i think for you guys if in the us you're probably fahrenheit right units equal metric so that's how you just add another parameter here use the ampersand and then the the parameter name followed by the value so if we do that that looks a little more like what i would expect feels like pressure now you can capture as much of this data as you want and we'll take a look at how in a second in xcode but for now let's let's go through the rest of this data we also have hourly data and you can see it's the same thing but notice that for this it's a square bracket instead of like a curly bracket and this square bracket usually denotes like a list of items okay so you can see here there's actually 14 items you can collapse them all but each of these items inside this hourly list is a temperature with a certain time that is different from the current time so this current is current temperature this hourly is going to be the temperature for each hour if we go back to the app challenge the requirements for this app is going to be show current temperature current feels like temperature and general weather conditions uh be able to switch units from celsius to fahrenheit so that's going to be you know just making a call on metric or passing an imperial have an hourly temperature display for the next 12 hours so what i typically do when i work with the brand new api is just try to get a valid response first right try to make that request this api pass in all of the necessary parameters uh have a positive response like um like a successful status and then try to parse some of the data so the app requirements there are you know a ton of different app requirements here but i'm going to focus on just one very basic thing which is show current temperature for beirut all right so let's focus on that um we're going to jump into xcode now and we're going to set up our project set up the all the scaffolding and the foundation of it and then we're going to try to make an api call here and then we're going to try to just display the current temperature on the screen very basic so think small first let's get rid of that right here comes the fun part and this is where the m1 mac will will shine and not kill my stream when i try to build something okay so we're going to create a brand new app here oh i haven't even added my account yet yeah this is so new uh weather app demo uh interfaces swift ui lifecycle is swift ui app and language is swift we're not going to do core data or tests so we're going to go click on next and we're just gonna save it on the desktop right there so let me see if i can make this screen a little bigger and the audio is good you guys there's some you know background music but you guys can hear me fine how difficult is it to convert those seconds to hours and minutes actually really easy so you in the um the date of the date class you can create one you can create a date object and you can pass in the seconds and then you can use the date formatter class to specify whatever format you want but usually i have to google the format because it's like hh colon mm and then there's a bunch of letters to specify the format so um specify the format and you can convert that date object to the format that you want okay thank you for confirming i know in the very first streams that i did i had some issues with audio let me just make this a little bigger even there we go wow this is really big on my screen okay uh one of the things if you go through my beginner lessons you'll know that you know i like to separate things into groups so it's you know especially for a beginner it's easier to understand and see the different uh components working together oops oh man okay so we'll move our content view which is our base view into our views group and then we'll have this entry point at the top there let me see let's try compiling and running just this basic thing and let's take a look at the stream for performance look at how fast that was all right okay now oh yes i said i was gonna set up the scaffolding first so let's go ahead and do that okay so we're going to set up a view model and the view model is going to supply all of the data for the view so we're going to create a brand new swift file here i'll just call it a weather model and we're gonna make this an observable object which means that our view will be able to observe changes to certain things inside this class uh because inside here we're going to be fetching the data we're going to bring it back and as soon as that data comes back we want the view to be to to realize that right and to display that data so that's why this protocol call observable object will help us with that and then inside content view what we can do in here is we can create a observed object and this is going to be our weather model so i'll just call it model and we will create a new instance of weather model now inside the weather model when this instance gets created this initializer method will run this this basic default and init method see when we create that here it's going to be calling that now in here just to test our api call we can make the request to the api right um we're going to parse the response so when we make the request of the api we're basically sending off we're basically hitting this endpoint right here in the browser url and then the response that we get back is going to be this data right here that we just walked through now we can't use the data in this format this is called the json data format we're going to need to turn this json data into usable instances of our models which we haven't created yet and that so that's what parsing the response means parse the response into i don't know weather objects we haven't created these weather objects yet but we will define that inside models here so it's going to represent the data that comes back from here right that's that's what uh our models are going to represent we're modeling our data and then we are going to set i'm trying just thinking about how how to explain this properly in case there's uh you know someone who's just starting out in the chat right now so i'm trying to think about the best way to explain this now i mentioned that when the response comes back and we parse it into these weather objects we'd want the content view to be uh to pick up on that right and be notified well the the way you do that is you can create a property up here called published and this can store your weather objects so we might call it weather for lack of a better term right now and this will be an instance of the the model that we create in here so right now i can't actually declare this yet so let's just comment that out but we're gonna set the weather property with the parsed objects and the fact that we have this property wrapper called published right here as soon as we set our parsed objects from the api response as soon as we set that into this property because in the content view which is what the user will see because this is an observed object it's going to pick up on that change and we're going to be able to display the data inside our view here so right now we just have a hello world okay so let's go through the process of modeling our data we're going to create a new swift file in here in our model group and we'll call this we'll call this weather i don't really have a good term for that but if we take a look at our data now essentially what we want to do is create some swift structs that map to this data and we don't have to map all of the data because right now we're only interested in the current temperature like i said we want to start really small and we can add on pieces as we go on because you know if you model everything and you run into errors in parsing then you've got way more to to figure out and to troubleshoot so i always like to start with like the smallest easiest case and sort of build up from there okay so this this is the outer object that we're trying to map here so maybe i'll call this weather response all right and we'll have properties here that represent you know the information that we want to capture here so let's say we want to catch our lat and long and these are this would be a double data type that's what we would represent here lat and this would be a double this would be a double as well um but what we're really interested in for the current temperature at least is inside this current property right here because inside here there's it's another object which has the date time uh and then also the temp so this is the temperature that we're interested in right so we're gonna have to create var current now what's the data type for this like i said before it is an object in itself so we have to create another structure to map or model this data right here all right so let's call that actual let's call that the actual weather struct because in my point of view this outer object is just a wrapper for you know the the actual weather data that we want which is inside current see this this is a you know a unit of weather and this hourly is an array of these these units of weather which have you know a particular timestamp to it so if we take a look at what this unit of weather has what we're most interested in right now is a date timestamp right there and also the temperature so both of these are doubles let's say so var dt temp right and we're matching the property names exactly to the uh the key the key names here in the json data and that's going to make it easier for us to parse we don't have to do that there are ways for you to specify coding keys to map your property names to the json key names but let's keep it simple here now for current we can say that this is an instance of weather here we're assuming a couple of things we are assuming that there always will be a lot long in the current because we have not made any of these optional that means when it's parsing the response it's going to look for these pieces of data if for example the lat is missing or the long is missing or sorry not long lawn and current or current is missing like this this is just empty then we will probably crash our app so sometimes in the api you'll be able to see if it can ever be uh nil or not like in this case i don't let me just see here yeah here's lat lawn and current doesn't tell us if this could for example be missing information i'm assuming it it wouldn't be missing and that's what we're going to go with um okay so the other thing that we have to do is to uh inherit not in here but like conform to this decodable protocol and this makes it this is gonna make it easy for us to turn this response data right here into instances of this so let's go ahead and make the call i realize that we're running out of time because i talk so much and i try to go a little slower so i'll pick it up a little bit but we are going to try to parse this response into this weather response right here so we're going to kick off the call right here and we're going to do that with a class called url session so this is typically um a little harder to understand for newcomers but after you do this a couple of times it it's you sort of get used to it so first of all you get the shared session and then you create a data task from it so i'll show you what that means session.datatask and you can pass in either a url request object or a url object now if you need to specify a more complicated request maybe you need to put something in the headers or something like that you would use this but for our purposes for this api all you need to do is pass in the api key through this query stream parameter so we can go ahead and do it through a url now in addition to having these two options there are also versions with a completion handler and that's actually what we'll want because this completion handler parameter lets us specify a block of code also known as a closure a block of code to run when the when the response comes back so inside this completion handler inside this block of code that's when we are going to do this work right here parse the response into weather objects and then set the weather property with the parsed objects all right so this is the one we want okay so first of all we need to create that url object all right so let url equals url and there's a one there's one uh where we can just pass in a string but if you notice this one this the this potentially could be nil so typically you'd want to check if this is nil or not before proceeding but for the sake of time i think i'm just going to throw all caution to the wind and just uh just run with it so we are going to create a url object like that and this is exactly the the call that we made in the browser right here i just copy and pasted it so we should get the same response so let's go ahead and do that we're going to pass in that url in here we're going to force unwrap it if it happens to be nil this will crash we're going to double click this closure to open up a block sorry double click the parameter to open up a block of code or closure we're going to give each of these parameter names this is the data that is returned this is the response if you want to check status code or anything like that and this is any potential errors so this is the data that we'll want to parse into other objects so let's give that a name data response and error and then what we'd actually want to do is in here right so parse response into weather objects actually one thing before before we forget and i always forget this is when you create a data task from the session here here it hasn't actually been fired like you're not firing off that request yet all you're doing is creating a data task that's ready to be fired or or you know a request to be made so you have to call the resume method on it now you can either call it directly from here if you don't need a reference to the data task or you can assign this to a constant like that and then you can call resume on your constant instead so it really depends maybe you want to track the progress of it if it's a download or something like that then you'd want to keep a reference to it okay so let's go ahead and parse these weather objects so we're trying to parse this data that gets returned right and that data represents everything in here if it's a successful call maybe before we parse the data we should see if we're able to make this call and and what we get back and this is a good opportunity for me to show you that network debugging now i use this tool called proxyman there are a variety of different tools you can use out there right so i am going to okay so first of all we have to launch this app right what's going to happen it's going to show this view which says hello world it's going to create a weather model and when this weather model object gets created this init method is going to get called and this is going to kick off that network request right to the api and we're going to see it show up in proxy man proxyman essentially sits in between your app or in between your computer and you know wherever you're trying to make requests to and then you can peek at the traffic all right so hello world uh we see the screen it should got kicked off weather app demo i'm just going to pin this to the top so we can see it now initially you won't be able to see anything in here what we have to do is we actually have to enable we have to give security access for proxy man to listen to that traffic so that we can see it but we can see that it made this uh made this api call and it returned with a status code of 200 which is successful i wonder if i can make this bigger can i zoom this nope i can't zoom in okay what i'm going to do is install the certificate on my simulator so that we can actually take a peek alright so it makes it really easy okay i'm gonna install it on my simulator now okay and then i have to reboot my simulator and that's it so it's gonna crash this because it just killed the simulator and then i'll launch this again just booting back up uh yeah the app right now just says hello world we're still testing out the network call making sure we can make a successful network call and making sure that we get back the data that we are expecting so this is the call that just went out let me actually see do i have to enable this okay let me just try to run that again okay now we can see it so this is the network call that just went out you can see that you know it's a the request goes to this url on the left hand side here you can see the request you can see the body you can see the raw request and then the response is what we're interested in the body here take a look this i know it's hard for you to see because the text is so small unfortunately i can't i can't enlarge this but this data this response that our app okay this app is getting back is the same response in our browser window right here so this tells us that we are indeed getting the appropriate data back now a tool like this is really helpful sometimes um because it's hard to see what's happening in terms of what the api is sending back to you so if you ever run into issues where you need to debug network traffic a tool like this is great this is free i mean you can pay for it but i'm using the free version which is more than sufficient for what i need right now okay so since now we have verified that we are making this call and we are getting an appropriate response back we can try to parse it so to parse it we use a class called json decoder and all we have to do is decoder dot decode and we are going to pass in the data that got returned from the call this method throws errors potentially so we need to be safer about it and wrap it in a you know some error handling in swift there's a do catch block which i'll show you right now okay so what we're trying to parse well we're trying to decode the uh the data so let's put this in here and the data can be nil like this is an optional parameter so you know ideally you'd want to check if the yeah let's do that so ideally you'd want to say something like you know if the data is not nil and the error is nil that means that there's no error that came back and that the date there is data for you to parse so normally you'd want to do this sort of check right and you'd only attempt to parse everything if this is true and then again up here you would definitely check if you were able to construct a url object and not just force unwrap it like i've done here for the sake of time okay so we've already checked that the data is not nil so i can safely force unwrap this and what are we trying to parse this data into well that's where our models come in right we have mapped the data that we're interested in you know we have mapped this response to this class here so we're trying to turn this data that we get back right into an instance of weather response so that's what we're going to put here and in order to specify it as a class we're going to put dot self there and we're going to try so when this throws errors we have to put the try keyword in front of it we're going to try to parse this into let's say let weather equals equals that we're going to try to parse the weather response into this weather constant and then what we can do oh now we can declare this published property up here so we use the published property wrapper to indicate that when this property changes the value and it changes we want to notify anyone who's observing it so this is going to be a data type of weather response and we're going to make this optional so this initially is nil because we don't have any data and then down here what we can do is we can set this property to the data that we parsed from the api so we're going to say self dot if i call it weather i think i called it yeah whether itself.weather equals uh maybe maybe we'll call this weather response just to be a little more clear and we'll set it like that now what's gonna happen is when you do this because this property up here is a published property it's going to cause the view code in here that depends on it to reevaluate and create new ui based off the fact that that has changed so we always want to update the ui from the main thread and what uh how we're going to do that is with a class called dispatch queue and this is how you would pass off a task or some code for the main thread to run so we can put that in there update the ui all right because setting this weather property is going to cause view code to reevaluate okay so i it looks like we still have some errors here invalid conversion okay we didn't uh we didn't wrap this in error handling yet remember i said that this decode method could potentially throw errors so here's what you would do do catch and you would put that inside the do and in here if there was an error from uh trying to parse this it would come here and you can catch it and you can display it but uh let's take a look at what's happening here oh this should also be inside this do block okay those are let's see let's take a look hmm did i do this wrong decoder.decodeweatherresponse.self uh give me a sec here construct weather response decodable oops oh you know what it might be because i have a couple of what the there we go it was confused as to which weather response was i referring to the class or the parameter but i remember i wrote response as the parameter i don't know did autocomplete change this to weather response for me it might have okay but in any case our code should be pretty good now okay so what we're going to see now is when we launch the app it's going to make the network call it's going to come back and it's going to parse it in and then it's going to set this published property to our weather response so let's step through this code by setting a breakpoint let's set a breakpoint right here when it kicks off the call so you can see that and it will set a breakpoint right here when the response comes back we're doing okay for time okay so initially we're to kick off that network request so i'm going to continue execution right then it comes back with the response and did i shut that off no we still have it so i think this is the response that came back right so that's captured it here in this closure and we can check does the data actually contain data is there an error if we're good to go it's going to go into here it's going to create the json decoder and then we're going to try to parse that data into an instance of our weather response struct so it looks like we're good right it didn't come in here we should probably print the error there but when it comes here essentially we're setting the data to our published property and it's going to pass that off to the main thread to do okay so right now the last thing for us to do is to use the data that we have now and display something in the ui so let's go ahead and do that so here we can because initially remember that in weather model this is nil right model.weather is initially nil because the data hasn't come back yet so before we display anything we're going to check if model.weather is not nil display the weather otherwise oops where's my else otherwise we can display a progress view component so when you launch it now initially you're going to see a progress view and then afterwards you're gonna see let's see uh we're gonna sub in we can do we can say if let weather equals model dot weather and this is just another way of expressing a checking if this is nil or not right so if uh if this is nil it's gonna go down to progress view if that's not nil it's gonna assign it to this constant called weather here so here we can just do weather and then we can display current so current is a double celsius okay so now let's run it and see see what we see oh what have we got here append interpolation did i do something wrong here weather current is an object oh yes sorry thank you chat thank you thank you that's right so current was the object and temperature was the actual value though or property that we're trying to display so we get something like that yes i'm glad you guys are paying attention because it looks like i'm not okay leather in beirut is 29.76 degrees celsius now uh we can we can round that if we want but uh right now let's try to display the hourly all right let's try to round it if this is a double right so what we can do since we'll probably have to do this a couple of times what we can do is create a function here to let's say um how about temperature to string and this is going to accept the temperature in double and give us a string back so in here we're going to we're going to say that we want to return string so string has a format initializer where we can specify uh how many decimal places we want and we can try to uh i don't know if you could just pass a double in like that so let's give that a try attempt to string hello from egypt malaysia awesome he's watching someone code live yeah how many of you guys are actually like this is completely easy in review for you and how many of you guys don't know what's going on because you're so brand new to app development it'd be nice to know because then that would allow me to tailor what what we work on okay so we have about 10 minutes let me see if i can quickly parse the hourly weather and display it so in inside weather response now that we want to capture uh where's our yeah so we've captured current and we want to capture hourly you can see hourly is an array it is a list essentially a list of weather objects so what we're going to do is add to our weather response so we want to capture hourly and this is going to be an array of weather now just by doing that it's gonna parse the hourly data now so inside content view we can actually display this in a list we can try to display it in a list and we can do something like our temperature and this would be you know our dot oh we're gonna have to convert that actually yeah hold on a second because let's back up because we are using uh we're trying to put this into a list component um we are going to make this i'm going to make this identifiable and we are going to add an id parameter here so this is going to be a uuid initially it's going to be nil and then we're going to set this so this is going to allow the the list component to differentiate between the different hourly weather objects so inside our weather model when we parse it here we can add uuids to the hourly other objects so we can say um you know for i in zero to weatherresponse.hourly.com we're going to say whether response dot hourly dot id equals uuid create a new uuid for each hourly all right and we got to change that to var and then that should allow us to use this in the list and then in here let's see our dot uh dt which is basically just a double now right that's this we're going to have to convert that to an actual hour but let's just display for now and then this is going to be our dot temp but we have a method here attempt to string so we can use that so let's display that yeah this is awesome we have currently 87 people in this stream that's awesome thank you so much for all of your support and for watching okay so we have that initial text up here whether in beirut we have the temperature and then we have the hours as you can see here it's just a long number because so we got back here we're gonna have to convert that uh where's our simulator but you can see the temperature differs from hour to hour so this is great so let's go ahead and convert this hour into like an actual hour and then i'm gonna have to unfortunately end the stream and then we'll continue building the ui we'll refine the ui in a in the next stream because for right now we we have accomplished quite a bit which is to be able to connect to the api and fetch the data and then be able to parse it and display something on the screen okay so let's create another function down here called seconds to hour that's not the right thing to call you guys have any suggestions all right seconds to hours it is for now and then you guys can decide uh here we're going to pass in the the unix number of seconds i believe that was what it was current time unix so let's just say and we're going to pass back a string for display so we're going to say let date equals the date and uh before in the past when i done this i wasn't sure which one to use but sometimes you just have to play around with it and see which method to use but in this case i'm gonna believe that it's this one um and then we're gonna create a date formatter and for the date formatter we're going to set the date format to i'm going to guess here because is it capital ms i always forget let's go with that for now and then we are going to say date uh date formatter date from string string from date yeah so this is going to allow us to pass in a date which we have right here and it's gonna return us a string in the format that we've specified all right so we're gonna pass in our date and this is what we're gonna return all right source date desired format all right so let's give that a try second did you guys have time interval since reference date to hours you know what that was probably a joke but i'm gonna use that this is not good by the way let's not uh have super long method names like that oh i can't even it's it's way too long and we'll make this argument label optional like that is this right uh and a state formatter that's what we want that looks good mms month yeah you're probably right i always forget these formats luckily we have handy references like this uh you're right there mm where are we here all right cool it doesn't look like much but this challenge the hardest part was really to uh interface with the api and download the data now a lot of you guys um did wonderful wonderful uis um if you want to check it out definitely go uh let's see i want to play all of it but let's see here it is wait no this one i'm just going to put this in here in the chat if you guys want to take a look at the community weather apps that other people have built inside our code crew community and if you want here in the chat i'm going to post the challenge the community app challenge for this weather app if you want to try yourself and then in the next stream we are going to uh refine the ui because right now i would be kind of embarrassed to to say like this is the completed weather app especially if you guys take a look at that video which i pasted uh has a lot of wonderful awesome weather apps now before we end off the stream i do want to highlight your attention to a sale that's going on from mark moykins whom i really respect as a teacher and i use his resources myself so i've used his resources to learn combine which i haven't completely gone through the whole thing yet i'm still in the process of learning but the swift ui views mastery is a great reference book especially when i'm coding because it lists all of the ui components and their behaviors and there's like sample code that you can copy and paste very easily so it's not a dense dense textbook and that's not the way it's intended to be used it's a visual reference which means that you can search for the component that you need either like copy a code snippet or to read up on its behavior and properties because for example some swift ui views uh expand to take up all its available space and some swift ui views uh sort of take up as little space as needed for that component so sometimes to remind yourself it's really useful to have a reference like that if i'm a beginner in what course do you recommend i buy from you if you're a beginner you actually don't have to buy anything right now to get your feet wet just go to code with chris.com start and i would recommend that you start with the 14 day beginner challenge get your feet wet you're going to learn the basics of some swift logic and some swift code how to construct uis how to navigate around an xcode all for free so if if you find that you enjoyed the experience and you like app development then go and invest in a course or you know something like that so i'll paste this link here as well scott uh the stream will be reposted i'm i think as soon as i end this stream the replay is just going to be live already it's not going to be unlisted or anything like that all right awesome so unfortunately i have to go lunch with the fam but thank you so many people for joining i do notice that you guys love coding and uh now that i have this new m1 mac we'll do more of it on stream so again thank you guys so much um and i'll see you guys next time probably next tuesday uh check cwc dot to slash streams to find the schedule right now um i don't have anything scheduled but i will put one in definitely for next tuesday same same time alright see you guys later and thanks for watching