hey coders what's up Chris here and this is episode five of how to build a YouTube video app in the previous lesson we had displayed the video titles in our scrollable list otherwise known as a table view and in this lesson what we're going to do is display the image thumbnails in this table view so remember in the video model how our video objects have a video ID well we're going to need to use this ID to get the thumbnail image I want you to take a look at this URL I've gotten in this browser window so notice that the video ID is in this URL here if I put a different video ID in here it's gonna give me another thumbnail for that video so this is what we're going to use so I'm just going to copy that but actually before we need to use that let's jump into the storyboard and we're gonna have to add an image view into this prototype cell well how tall should the cell be if we take a look at that browser window again we notice that this thumbnail is 320 by 180 so we can use that as a starting point let's say 180 is the height so we go to the table view right here click it in your document outline and then on the right hand side you see this row height we can change that to 180 and that's going to make it a little taller but we're gonna find out later that depending on the screen size of the device this app is being run on it's not going to work out but let's just put it at 180 now just so we can see the thumbnail itself and down here in the object library remember to be in this tab right here I'm gonna search for the image view and I'm just going to drag it into our prototype cell and then now we're going to have to add some constraints to it to make it hug all of the edges of the cell so make sure you have your image view clicked click this guy right here uncheck constrain margins and then let's add all four edges let's go 0 0 0 and 0 and then add these four constraints click this guy to update frames and then we're gonna see it huh get there and then you're gonna click the image view and go over to this tab here in the inspector because we want to change the tag number for this element its default to zero but we're gonna change it to one and you're gonna see why a little later on okay so now let's go to the view controller we're ready to download that image and display it on to the cell I'm scrolling down to here cell for row at index path right now we grab a reusable cell we get the video title right from the video object that it's trying to display that's this guy right here videos array and then we pass an index path dot row and we get back to video object that we want to display and then we access the video title property and then lastly we assign that into the label the default text label of the prototype cell okay so now what we want to do as well is construct the video thumbnail URL okay and that's going to be a string like this we're gonna construct this string with the video ID for the video we want to show and then we're going to create an nsurl object and in iOS when we work with downloading data and URLs we do it with this nsurl class which represents a URL to a resource and then we're going to pass in that URL object into an nsurl request object and then finally we create an nsurl session and then we create a data task and pass in the request so at a high level those are kind of the steps that we're going to take just simply to download the image from this URL so try not to get lost I'm I'll go slow and I hope you can follow along so first of all let's construct the video thumbnail URL so let video URL string equals let's copy this again and I'm going to break it up though that plus I want to pass in the video ID here I'm just constructing the string because the video ID is kind of in the middle so I'm taking this part plus the video ID plus this part to create the full string so the video ID is let's go videos array and then we pass in index path dot Rho dot video ID plus this last part here like that make sure you've got the slash and the slash here okay now we're gonna create an nsurl object let video actually this should be video URL this free video lets a video thumbnail URL string video thumbnail URL equals nsurl create a new nsurl object and it has an initializer with string here where we can pass in this guy like that now let's create an nsurl object now so let request equals NS URL request and it's got an initializer where you pass in an nsurl so we're going to use that so we're gonna pass in this guy right here however the nsurl constructor here it creates a optional NS URL so that means if it's not successful in creating this object it's gonna be a nil value whereas this expects an actual nsurl object so I'm just going to put an exclamation mark there that unwraps this guy so if it turns out that it cannot create this nsurl object and video thumbnail URL is nil this probably is won't be a thing but if you wanted to you could add a check just before you do this part you're gonna add a check that the nsurl object actually does exists there you know what we can actually do it really quickly here so let's just use a simple if check if video thumbnail URL is not equals to nil then we do all of this stuff otherwise we we don't even try to download the image okay so let's create an nsurl session let's session equals nsurl session dot shared session and it's going to return a shared session object that we're going to use throughout the whole app and here we're going to say let data task equals session dot data task with request there's a couple of them make sure you choose this one because this one allows you to pass in an nsurl request which we have and also specify a completion handler which means it lets us execute some sort of code when the image data has been downloaded which is exactly what we want so for the request let's pass in this guy right here and for the completion handler all you need to do is just double click it and it's going to create that block for you so it added some code you can see here code is what we would write what we want to happen after the data has been downloaded and here you see three parameters that where we can access the data so this is the data that's been downloaded this is the response that the server returned and and here would be an error if there was an error so I'm gonna double click each of these like that and I'm just gonna give them all a name so I'm gonna call this data I'm just gonna call this parameter response I'm gonna call this one error okay so here within this completion block we do have the image data in here okay so here we want to get a reference to the image view element of the cell create an image object from the data and assign it into the image view alright so how we do that is remember back here in the storyboard we gave this image view a tag of one that's gonna come into play here so we're going to say let image view equals cell remember this is the cell that we got up here cell dot view with tag and we're gonna pass them one so this method retrieves the element with that tag but it doesn't know what sort of element it is so we have to assign it we have to tell it essentially using this as exclamation mark UI image view so that's what we're we're telling Xcode it is so now that we have the image view element here let's assign image view dot image equals UI image we're gonna create a new UI image object and we're gonna say use this one initializes it returns the image object with the specified data so you can see data up here is an optional type meaning that data could be nil we're actually going to just unwrap it like that and pass it in so this kind of completes everything just to recap we are constructing the video thumbnail URL we are creating an nsurl with that string well here we're checking to see if there is an nsurl object that has been created with this and if there is we're creating a request with it and then we're creating we're getting the shared session and then from the session we're creating a data task and passing in the request and finally we're specifying some code to happen when the image data has been downloaded now one thing I want to mention is that this data task with request method is going to fire off this request and it's gonna download the image data in the background so it's a background worker or a background thread that is doing that sort of work when it's done we don't actually want to be updating the user interface from the background thread because that causes all sorts of issues as a best practice you always want to be updating the UI from the main thread so what we can do is kick this code back to the main thread to execute so you can think of it as the main thread is firing off this request and this work to the background thread to download the image data in the background and then when the background thread is done downloading that data it's going to kick back this work to update the UI it's gonna kick that work back to the main thread so here's how we do it we write this patch underscore async and we're going to use this submits a block of a synchronous execution on a dispatch queue and returns immediately so in here queue we're going to specify the main thread as the one we want to dispatch this work to so we're gonna write dispatch oops dispatch get main queue okay so it returns the default queue that is bound to the main thread so it's going to put that work in the queue for the main threat to execute and for this block this is where we're gonna specify the code we want to kick back to the main thread so click this to open up a block and we're just going to cut this code command X and then paste it inside the block command D so now it's going to take this and then dispatch it for the main threat to execute okay and last but not least we need to kick off the data task right here we've just merely set up the data task but to kick it off all we need to do is go data task dot resume okay so now we should be ready to go so commandr I'm gonna run the app okay so you do see the image data behind this label you see these white squares that's just the label that's blocking it here we set the the default text label and we set the video title to it so the label has a white background so we can either set that background to clear but you know what we're not going to be using this default label anyways so what I'm going to do is just I'm gonna delete this line for now and we're not gonna have a label for now so I'm gonna save it and rerun it okay so now we actually see our video thumbnails so I'm gonna stop the app I'll show you like it looks stretched right if we go back to the storyboard and we click the image view and then in the mode it says scale to fill so that's why it's stretching we're going to change that to aspect to fit so it's gonna maintain the aspect ratio and it's going to try to fit it so now you see these these borders here for the iPhone 6s if we go a smaller screen and we just do iPhone 6s and I run it you're gonna see that the margins on the left and right are a little slimmer and then if I show you the 5s oops that's similar is hiding behind okay so I'll show you the 5s you can see that the thumbnails fit exactly so that means that we can't specify a row height like this time statically like if we put 180 here it's not gonna work for all screens instead what we want to do is calculate the width of the view to see how much of a height we should set for it okay so I'm gonna go into the view controller there's actually a table view delegate method that we can set the height for in code so maybe up here above number of rows in section I'm going to write table view and and there's a delegate method called height for row at index path so kind of like cell for row at index path except this is the height for row at index path so you return the height for the cell that it's asking for or for the row that it's asking for so here we want to calculate the width of the screen to let's say get the width of the screen to calculate the height of the row so here we want to say self dot view dot frame thoughts size dot width and that's going to give us the width of the view next we want to divide this by 320 so I'm just going to use this aspect ratio 320 by 180 right so the width divided by 320 to see what's the multiplier you know we're comparing the two widths and then using that multiplier we're gonna multiply that by 180 which is the height to give us the new height and I'm gonna return this so now if I run the app again you can see that it still looks fine on the 5s but let's show you what it looks like on the 6s so it's still see it calculates the height dynamically and let's show you what it looks on the 6s plus so everything looks good although these thumbnails I wish they were in a higher resolution so it wouldn't be so blurry on a bigger screen in the next lesson we're going to add the label for each of the cells thanks for watching everyone and I'll see you guys tomorrow at 12 p.m. Eastern bye for now