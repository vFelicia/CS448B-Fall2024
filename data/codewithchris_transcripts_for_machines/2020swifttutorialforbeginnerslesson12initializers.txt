hello and welcome to my Swift tutorial series for beginners in this video I want to talk to you about initializer methods for classes these guys exist to make sure that when you create a new object of your class that that object is ready to go plus you can customize these initializer methods to set up your object in any way that you want when you create a new object from your class alright so let's get started and see what that all means so what I've got here on the screen is the playground that we created back in the classes part two lesson when we're talking about sub classing just to remind you we have a person class and then we have an employee class which is a subclass of that person class and then we have a manager class which is a subclass of the employee class so now that I've jogged your memory about what we have here why don't we create a new personal object do you remember how to do that first of all you use the class name followed by two around in parentheses right let me show you let's do it here person two rounded parentheses and just like that we've created a new person object well what you might notice is that this kind of looks like a function call right remember to call a function you write the function name followed by two rounded parentheses and in any input parameters in between those parentheses in this case right here a person with these two around parentheses you actually are calling a function of that class now I know that might seem weird because if you scroll up to the top here we don't have any functions that cleared in the person class right well there's actually a initializer function that is default to all classes that you don't have to declare and let me show you what it looks like because you can explicitly declare it so if we were to explicitly declare the initializer function of the person class it would be using the keyword in it followed by two rounded brackets followed by these curly brackets and you can put any sort of initialization code in here let's say custom in knit code also notice that for this special initializer function you do not need the fu NC keyword that we normally use to declare functions this is an initializer function so let's say for example I put in here that I want the name property to be Joe right and now if I create a new personal object I say let my person equals new person object what's actually happening here when I call this it is creating a new personal objective but it's using this init function here right and it's actually setting this is running this custom code so to prove it to you why don't we print out the name right after creating that object so you can see here it says Joe as the name now the initializer function is useful for you to put any custom code you want in there to setup the object if you don't specify an init function at all like what we had before then it's still there you can still create new objects from that class and that's actually what the purpose of the initializer function is for it's to set up a new object of that class you know allocated memory do whatever it needs to do to return that object to you ready to use now here's the interesting thing about initializer functions so we can have our basic one but we can also have different ones which accept parameters for example let me show you this we can accept a parameter called name let's make it a string like that and then we can also have our basic one that we had before like that so we can have multiple initializer functions let's go back down here now I can create a person object with the basic initializer function which doesn't do anything and when I run this code it doesn't print anything out because I haven't written anything in that init function however don't forget that I created another which accepts a name so this time I can put in a name like that if I print it not doing anything right now did I oh I don't did I do it yeah my bad I didn't do anything in here so now what I wanted to do inside this initializer function was to set the name property to the name input parameter that got passed in here now I could write something like this where I'm trying to set this property right to the name that gets passed in but as you can see it's a little bit ambiguous Xcode is telling you that there's an error but it's not recognizing that I'm trying to set this property it thinks I'm trying to set this parameter to that parameter so what you can do in this case to resolve this ambiguity is to use the self keyword so you can write something like that self dot name and when you do this this is referring to that object's name so this is basically referring to this property here and now this name is from this parameter so it's very clear what you're trying to do here all right so let's run this code again and you can see that this time it prints Tom now let me ask you another question since the employee class subclasses the person class that means that the employee class also inherits all of its functions from the person class right do you think that this employee class also has these init functions why don't we give it a try go back down here let my employee equals employee and as you can see the employee class does have this init function that it inherited from the person class so I can use this with the employee class as well so that's pretty cool now I want to talk about overriding init function you know just like how we talked about right here where the manager class overrides the do work function of the employee class and then it calls super do work which is going to execute the employees do work function as well as you know any code down here the same thing applies for init functions so let's say that we have in the person class we have this init function right where you pass in the name let's say for the employee class I wanted to do something extra I wanted to override in it so we're gonna override the same function from the person class you know we're overriding this guy right here I also want to initialize the role so I'm gonna do self role let's default everyone to analyst or something like that all right everyone starts off at the analyst level however what I can do is call this person's or sorry I call the super classes init function and pass the name into there so this this is calling the init function of the person class this is additional indented code all right so now by calling this an it where I pass in the name of the employee like if I print my employee dot role and my employee name so you can see that it's set to analyst and then set to Joe here so what I wanted to demonstrate here was that even within it functions you can use the override keyword and provide a custom implementation of that initializer function and then also call the super classes implementation as well so I hope that was clear if it's not just leave a comment below and I'll be happy to clarify things for you alright later on we'll dive a little deeper into initializer methods and we'll talk about how there are two different types one called designated and one called convenience initializers if you enjoyed this video please give it a thumbs up and please subscribe if you haven't already all right now click on over to the next lesson and we'll talk there