a coders what's up Chris here with the next lesson in the star wars soundboard app in the previous lesson we had laid out this user interface we had and included the sound files into our project these wav files that you see here and today we're going to go into the viewcontroller.swift and we're going to hook up the sound players and hook up the button tap so that when they choose a sound from the UI we are going to be playing the sound that they chose so first of all we're going to need to add an additional framework in order to use the av audio player class so click this root node here in your file navigator scroll all the way down to linked frameworks in library click this little plus icon and search for AV and that should be enough to bring up AV foundation framework so you're going to want to highlight that and click Add or just double click it ok so then you're gonna see it appear right here in your file navigator go back to view controller and at the top underneath import UIKit type in import AV foundation so now we're going to be able to use the AV audio player class between here and let's create some properties we're going to say let sound file names equals and this is going to be a ray of all of the sound file names that we have so we have 4 so I'm just gonna create four empty strings like that and inside there I'm gonna fill in the file name of the actual sound file but without the extension and you're gonna see why in a second so there's truly roar there's light saver so some of the file names have a dash and some of them have an underscore if your sounds aren't playing just double check that you've got the file names correct on and the last one I have is SW of 800 2 you can also rename these files before you add them into your project ok so now we've got an array of sounds next let's create an array of audio players because we need an audio player for each sound so we want to say let audio players equals and this is going to be an array of av audio player here we're creating an MT array that is going to store av audio player objects right now it doesn't have any objects inside if you're confused about what arrays are I would advise you to check out the start here beginner series first and go through those lessons and you're gonna learn all about kind of the basics that you need in order to complete this demo so what's our strategy here what I'm going to do is I'm going to create an AV audio player for each of these sounds here and I'm going to add them into this audio players array so blaster firing is going to be at index zero of the array chili roar is going to be at index one light saber is gonna be at index two and Vader is gonna be at index 3 so we're gonna go back to the storyboard for a second I just want to double check the ordering I've got so the first button I've got is light saber blaster firing truly roar and Darth Vader I'm gonna want to make sure that in my view controller the string fought the sound file names are in the same order so here I kind of have a different order all I have to do is move this lightsaber sound to the front and then I've got the same order light saber blaster Chewie and Vader lightsaber blaster Julian Vader and the reason we want it in the same order is because when they click the button I'm going to take a look at which order it's in so light saber is the first button that they tap I'm going to be grabbing the first element or the first audio player in the array and if they click say the third button I'm going to grab the third file the third sound which is going to correspond right here so I'm going to want to make sure it's in the same order so now let's set up the audio players so let's set up a forloop first for sound in sound file names and this is going to go through each of the sound file names in this array and we're going to want to do that because we need to create an audio player for each sound so let audio player equals AV audio player and we're going to use this initializer method called contents of URL so we're going to need to create a URL that points to that file within our app and also note that this keyword throws we're gonna get to that in a second so let's create our URL up here first let you our l equals n s URL and there's an initializer for that called a file URL with path that's this one right here and we're gonna need to get a path to that sound file and we can do that by typing NS bundle dot main bundle dot file dot path sorry for resource and we're gonna use this one right here path for resource we pass in the name of the resource the type of the resource and it's gonna give us an optional string back now what is this bundle thing well the bundle describes the app package once you compile your app you build it it turns into an app package that includes the sounds inside so that's what that bundle is and we're gonna need to get the path to that sound file inside that bundle so here let's pass in the name well the name is just going to be sound right because it's looping through each of the sound file names in the array so we can just pass in whatever sound we're currently looking at and the type is going to be WAV you don't need the dot and we're going to add an exclamation mark because this returns to an optional string now remember before in lesson two I said download all of the sound files of the same format and this is the reason why because it's gonna let us easily loop through all of the sound file names because they're all wave files and so we don't need to worry about whether one of them is an mp3 or something like that okay so now we should be okay with this URL here we're going to that URL into here into this AV audio player remember when I showed you this contents of URL initializer it there was that keyword throws well what that means is that it's gonna try to create the AV audio player with this URL and if it can't it's gonna throw an error so what we need to do is catch that error in case it happens in case it can't create that AV audio player so the way we do that is we use something called the do catch block so inside this do part we try to do something so let's put that code in here we're gonna try to do something and then if it throws an error it's gonna go into this catch block so catch the error that is thrown and up here try to do something and this only applies if a method throws like it has that keyword and when it does you have to add this try keyword here so it's going to try to create that AV audio player with that URL if it's successful then that's fine if it's not successful it's gonna throw an error and that's gonna come down into here so let's say it's successful what we're going to do is go audio players thought append audio player right we're gonna add this audio player into our audio players array so here it's saying that there's a problem let's see what that is cannot use mutating member is a let constant okay so we're gonna want to change this to var because let is a constant so var is gonna allow us to append things into that alright now if it wasn't able to create the audio player we still want to add an empty audio player into the array and the reason for that is because we don't want to mess up the ordering so let's say it fails to create the audio player for blaster firing we're gonna add an empty audio player in its place so that when the user clicks blaster firing it's not gonna play truly roar it's gonna try to play an empty av audio player and nothing is going to have but okay so that's basically it for creating the audio players and now all we have to do is hook up the button here all of these buttons to a button tap handler so I just opened up assistant editor by clicking this button here the view is kind of small here so what I'm going to do is just do it from this document outline so make sure on the righthand side you're looking at the viewcontroller.swift if you're not you can click this right here and scroll down to automatic and then choose view controller so first I'm gonna highlight lightsaber hold down control I'm gonna drag this over here just underneath here but before this last curly braket okay because I'm going to create a method and I'm gonna choose action instead of outlet make sure you do that so let's call this button tapped type is going to be UI button and touch up inside is the correct event we want to handle so connect so what happened now is that whenever the user taps on lightsaber this button tapped method is going to fire but I also want all of the rest of the buttons to also fire the same method when it's tapped so what I'm going to do is click the blaster firing button I'm gonna rightclick or you can hold down ctrl and left click and then go to touch up inside not touch drag inside make sure you got touch up inside and go over to the circle just you can single click left click it I mean and just drag a blue line up to the view controller it's gonna show you the method which you can hook it up to so there I've hooked up the blaster fire button to this method that we created now let's do the same thing for these guys truly Rohrer touch up inside sure I get there choose this method sometimes you have it's a little finicky because that menus a little small see I didn't do it so make sure that this is really finicky okay so make sure it's connected like that do the same thing with this last one here okay so now all four buttons are hooked up to this same method let's go back to the single view let's go to the view controller and in here let's get the tag or rather get the audio player that corresponds to the button that they tapped and what we're going to do is let audio player equals so our array of audio players and what index do we want well we want the sender dot tag remember the tag we customized in the main storyboard this has a tag of zero tag of one type of two tag of three so depending on which button they tapped we're going to be able to get that tag here and we're passing that tag value into the array of audio players so it's gonna return us the corresponding audio players and then all we have to do down here is type in audio player dot play like that okay so now let's run it and let's try to play the sounds oh so that's an error these two are the same well actually all of them are the same I must not have modified the tags I thought I did so let's go back go back to the storyboard under blaster firing so lightsaber if we check the tag value it's zero blaster firing the tag value we should change that to 1 Chewie roar that too to Darth Vader change detective 3 so sorry about that I thought we had done that and now whenever I tap any of these buttons the corresponding tag will be sent to that tap method and it will grab the correct audio player okay so that's pretty cool so that was easy right in the next lesson we're going to theme this app a little bit so thanks for watching and please subscribe and like the video and please share it with any Star Wars fans that you know of thanks again and I'll see you guys tomorrow bye