hello welcome youtubers in this lesson we are going to hook up the tableview element so that it can display data just to give you a quick recap in the previous lesson we added the tableview element to the storyboard we created a prototype cell gave it the identifier called message cell we expose that table view to the view controller dot Swift and we call that message table view to reference that element that we added in the storyboard in order to hook up to table view we're going to need to understand the concept called delegates and protocols which I cover it as a separate lesson in the full beginner course that I have on the site but in the brief time that we have in this YouTube lesson I'm going to explain it in addition to hooking up the table view as well so hopefully you guys can follow along so the way that the table view displays data is that it's got two properties one called the delegate and one called the datasource and it doesn't care who that is but it's gonna call certain methods on that delegate or on that datasource and it's gonna ask that delegate for like I mentioned before it's gonna ask it for a cell to display data and it's gonna ask it's data source for data to display so what we want to do is we want to set this view controller as that delegate and as that datasource so that the table view ends up asking the view controller for that cell and for that data to display because inside the view controller we're gonna have that data and we're going to create those cells and we're gonna tell the table view here you go you know here's the data to display and here's the here's the cell that I created for you to use so right now we got to hook those connections up and the way we do that is up here we're gonna write comma UI table view delegate comma UI view datasource what this does is it specifies that this view controller class conforms to the UI tableview delegate protocol and the UI tableview datasource protocol what that means is that we're specifying that the view controller will have the methods associated with the delegate and with the datasource so the table view can call those methods the next thing we have to do is in the viewdidload method we're going to say self thought message table view delegate equals self and self thought message tableview datasource equals self what did we just do here well we set the view controller which is referred to by self as the delegate for the table view and we set the view controller and as the datasource of the table view and we're able to do that because we specified here that the view controller conforms to these two protocols now this concept of delegates and protocols is one of the hardest things for beginners to understand and it's one of those things where after you get it it becomes really simple but the first time you hear about it it takes a really long time for you to wrap your head around and I have a full lesson in the beginner course dedicated to explaining through diagrams and different examples what delegates and protocols are so don't worry if you're confused still about you know what I'm doing and how this is hooked up because this is probably the first time you've heard about it and I'm gonna add a link below the video for you to do a more reading on it or if you guys do join the full beginner course then you can you can watch that lesson there but just know that what we've done here is we've basically set the view controller as the table views delegate and the table views datasource so when the table view asks for a cell to display day and asks for the data to display it's gonna ask the viewcontroller and now we're going to add some of those methods associated with these two protocols up here these are the methods that the table view is going to call and that's where we're going to create that cell and return that data okay so let's say type table view cell for row at index path so in this method the table view is asking for a cell for a particular row okay next down here type table view scroll down to number of rows in section and in here it expects us to return to give it the information how many rows are there in total okay right now we don't have any data so up here let's create an array that is going to hold our data so let's say bar messages array is an array of string is gonna be an empty array at first and you should have learned about arrays in the start here section which you can find on my channel page so now in this method number of rows in section we can say returned messages array dot count this is this count property is the number of items inside this array and return is basically fulfilling this part of the method so the table view is going to call this method on the view controller and expect a return value and we're going to return this value to the table view you can see here is that is the data type that it expects back and count is the same data type specs and integer or a number so at this point because our array is empty this count is going to be 0 and our table view isn't really going to show anything so inside the viewdidload let's just add some sample data to our messages array so I'm gonna put add some sample data so that we can see something okay so we're going to add some sample data type messages array actually let's use self dot append test one actually before I move on a lot of people ask why I use self here or do you need it or when do you need to use self and when you don't so self just refers to the view controller in this case because you're writing code inside the view controller class when you use the self keyword it just refers to the view controller so because the view controllers got this property here called messages array I just I like to use self dot messages all right you don't have to because it's going to look for that property inside this class first if I can't find it then you'll see a squiggly red line and an Xcode error but I like to use self it's just I think it's a preference it is a little more verbose you're typing more more text but I feel like it's a little more clear it comes down to preference we had a couple of sample items here I've got an extra bracket there okay so now we can implement this method cell for row at index path and also it's got a return type of uitableviewcell so the table view is going to ask the view controller its gonna call this method and it's gonna expect the view controller to return a UI tableview object back so what we got to do is create a table cell customize the cell or turn the cell okay and the tableview element is actually very smart so if it has a reusable cell that it can reuse it's going to use that so it doesn't spend resources to create a brand new cell so what you can do is say let's sell equals the self thought message tableview or you can just use this parameter right here but I'm just going to refer to this property that we used or that we specified dot DQ reusable cell with identifier this one right here and we can pass in the identifier which is message cell remember this is the identifier we gave the prototype cell right so this method is basically going to grab a message cell to reuse and if there's no such cell to reuse it's going to create a brand new one for us and we got to say as UI tableview cell because it doesn't know what type of cell is going to be returned but that prototype cell is just a basic UI tableview cell customize it like I said the basic prototype cell has a label that we can use and that's the text label property type question mark dot text equals and here we can put we can basically look into this array and we can assign the text in the array to the label but which piece of text do we assign well this index path parameter specifies which row the tableview is asking for so what we're going to do is we're going to say self thought messages array and we're gonna specify an index in here which dictates which piece of text is going to be grabbed so zero is going to be test one the index one is going to access test two and the index two is going to access test three because the array starts at zero but we're gonna pass in index path dot row okay and this question mark is something that's called optional chaining I don't want to confuse you guys but the cell dot text label property is an optional type and this is something I explained in the beginner course as well but it's an optional type which means that it could exist and it could not exist by putting a question mark here and then accessing the text property it's a safe way to assign something or to access that property if the text label happens to not exist then we won't get a crash the last thing we want to do is use the return keyword and return the cell so that's it it may seem very very complicated just to get this table view working but trust me in every app that you do where you're displaying data you chances are you'll be using a table view and this is gonna become second nature to you just because you're doing it so much and once you understand the concepts of delegates and protocols it's not gonna seem confusing at all it'll actually make a lot of sense so now let's hit command + R and run it and see what our handiwork looks like okay so we've got our table view here we could have probably added more of a margin at the top but you can see our three items here test1 test2 and test3 there's our little dock that we're gonna put our text field and button in but there we go we can see that our table view is working that's all I wanted to do for today it's probably a lot to absorb for you guys if you're if this is the first time that you're exposed to delegates and protocols and table views in general but just to give you guys a quick recap again on how this code is working we have a tableview element in our storyboard right here and the way that the tableview displays data is it calls the number of rows and section method and the self a row at index path method on it's delegate and data source and it doesn't care what is a sign there it's just gonna call those methods on its delegate and data source so what we're doing we're assigning the view controller as the table views delegate and datasource so that the table view will call those methods on the view controller so we can write some code to return that data and to return that cell the only way we can assign the view controller as the table views delegate and datasource is to specify that it conforms to this these two protocols the UI tableview delegate protocol in the UI tableview datasource protocol now by specifying the view controller conforms to these two protocols were forced to implement these two methods this number of rows and section method and the cell for row at index path method if we remove these two methods Xcode actually will complain that that's there's an error it's gonna say that hey you're saying that the view controller conforms to these protocols but you haven't implemented the methods which the table view needs to needs to call so the whole point of the the system this protocols and delegate system is so that two classes can communicate with each other without really knowing about each other see in this case the table view doesn't care what is assigned to its delegate or datasource as long as the delegate and datasource has the methods that it needs to call that's all that matters so that's the beauty of it let's look at what else we've done here in the self a row at index path method we are trying to DQ a reusable cell with the identifier called message cell and this goes back to our storyboard where we created this prototype cell here and we named it here message sell if we had added additional elements into the cell we would also be able to reference them and in here and then assign them and you know modify anything we need to but all we're doing here is we're grabbing the index of the message array which the table view is asking for this parameter index path has a row property which tells us which row the table View is asking for and we're just returning that piece of text and finally the table view will also ask for the number of items that it needs to display and we're just returning the messages array dot count all right so that's the beginnings of our little chat app here in the next video we're going to add the text field so the user can type stuff we're gonna add a button and we're going to hook up the animation so that it slides up along with the keyboard that slides up on your phone and then probably in a couple lessons down we're gonna implement the saving in the retrieving of the actual messages from parse alright I'll see you guys next time and if you want to get a firmer grasp on these concepts be sure to check out the full beginner course on my site I assure you it's well worth it I'll see you guys next time bye for now