hello and welcome let's talk about two very important principles in swift UI data flow and view composition let's start with views so what is a view a view defines a piece of UI there are kind of like the basic building blocks and just like Lego you want to build a bigger view out of smaller single purpose views this makes it easier to understand and easier to maintain over time as well so let's use an example to illustrate let's say you have a view that represents a color picker and it looks something like this and because you know that it's a best practice to break down a view into reusable parts you decide to create a smaller view that represents the slider now you can reuse that slider view three times in your color picker view pretty easy to understand right it's all about reuse let's talk about dataflow now now if you came from working with UI kit you might have noticed that we don't have a view controller anymore to understand why there's no view controller in Swift UI let's take a look at what the view controller was used for with UI kit the view controller managed the data flow between your model and your view it was responsible for updating your UI whenever the data in your model changed for example let's say you have a contacts app and once the data model finishes loading the contacts the view controller takes the data and manipulates the UI to show the data conversely the view controller was also responsible for handling user interaction in the view and changing the data based on those interactions using the same example let's say that the user deletes a contact from the UI then the view controller would have to let the data model know to remove that contact this is the way we've been used to doing things but there's a lot of code that you have to write in order to make all of this happen so in Swift UI things are a lot easier for us the view controller is removed and instead of having to write all this code to manage the data flow instead we bind the data in our model directly to our UI we don't have to write any code to do this and this way whenever the data in the model changes the UI will notice and update itself accordingly this diagram from WWDC shows clearly how the data flow in Swift UI works now let's say the user makes a change from the UI for example delete the contact because your view is written in code you can have code in your view that handles that user interaction and goes to update the data in your model to remove that contact the UI will notice that the data has changed and will update itself automatically so this loop eliminates a lot of the coding that we had to do previously inside the view controller the next question is how does Swift UI achieve this sort of data flow that we see in this diagram without a view controller well Swift UI has several different ways for now I want to talk about state and binding and when you should use each of them you've already seen what a state property is in previous lessons you can bind the state property to a piece of UI and have the UI update itself automatically as the data in that state property changes but how does this work if we try to break up the view as a composition of smaller views after all that's one of the guiding principles we talked about in the first part of this lesson so let's use our color picker example from earlier let me quickly point out what data these views need in order to display the UI the color picker has the color square and in order for us to display that we need to know the different amounts of red blue and green however each of our three slider views also needs to know the amount of red blue and green respectively now let's take a look at this view in code form so that we can clearly see where to put the state properties and bindings to make the data power the UI since you've only learned about state properties let's use that for everything we said the color picker view needs to know the amounts of red green and blue so we'll have state properties there then each slider view also needs to know their own amount of red green and blue so we'll have a state property in the slider view this state property will be bound to the slider element and text label so if the user uses the slider it'll update the value in the state property which results in the text label being updated there's a problem with this picture though since each slider view is tracking its own color value in the pen we've essentially duplicated the data and we're now tracking the value of each color in two places furthermore how is the color picker going to know about the data changes in the slider views because it has a color square that it needs to update so this is where bindings really come in handy we can have a binding that reads and writes to and from a state property and then we can pass that binding into a subview for them to use let me demonstrate so here I've got the color picker view project and we're going to break it down into smaller views and I'm also going to show you how to use bindings as well so just to quickly run this for you so you get an idea of how it works we have three sliders you can adjust the levels of red green and blue and as you can see from here there's a V stack there's a rectangle representing the color square and then we have three sliders also take note that we have three state properties up here representing the amount of red green and blue and the rectangle his foreground color is is reading from those state properties red green and blue and so are the sliders the sliders are bound to red green and blue and that's why adjusting them affects the state property which affects the foreground color now if we were to follow that first principle we talked about in terms of view composition looking at these three sliders they look very similar they would be a perfect control to abstract into a smaller view right so that's exactly what we're going to do right here let's stop this and then we're going to create a new file and we're gonna choose UI swift UI view and I'm just gonna call this a slider view so it starts off with a text field sort of text element and we're gonna go back to content view and I'm just gonna take one of these sliders I'm gonna copy it and I am going to paste it in there now because this used to be inside a big view stack or V stack it's no longer inside Avista so we have to and declare a V stack there and we'll put the slider and the text element inside furthermore we no longer have this binding and this label needs to be dynamic as well if we're going to reuse this slider element so up here I'm going to declare first of all a text property actually a string property and I'm going to actually I'm not going to initialize it because I want the the color picker view the past in the text to use so instead I'm just gonna call it label I'm gonna make it a string and I'm gonna leave it uninitialized and then for the text here we are going to insert that label property now as for the binding for the value what we're going to do is use the at binding property wrapper and we are going to declare it as far let's call it value and the type is double now in here in the slider I can bind to I can pass in that binding value right and then in here instead of showing red we're gonna show value as a number now these two are going to get passed in when we create instances of the slider view in the color picker as you'll soon see but first let's fix one thing in here this is the preview we can't see anything on the right here because it's missing initialization parameters so let's go ahead and do that so that's what we have to pass it and we have to pass in a binding and we have to pass in a label which is just the string now you since we don't really have a binding to pass in right here what we can do is we can do binding dot constant and just pass that in as a constant value it's not a real binding per se but for the purpose of this preview it works brilliantly so for the label I'm just gonna call label and then let's hit resume here let's see if we can preview something there we go so there is our label and it reaches all the way to the edges we're not going to add padding to this V stack here because inside the content view in this bigger V stack we already have padding as you can see here on the left and right so just to make it look prettier in the preview I'm gonna add the padding to the preview so this doesn't affect the actual app it's just so that we can see an accurate representation of what that looks like and now we can go back to the picker view and instead of having these slider and text elements we can remove it and replace it with our new a specialized view so there's our slider view and we have the pass in a binding and a label so for the binding that's what we want to pass in a binding to that state property so we're gonna use the dollar sign read and the label is just gonna be read right and then we're gonna copy that and replace this slider and instead this is going to be dollar sign green and this is going to be green as well and then as you can see it's actually changing it in the preview this is going to be blue and this is going to be blue as well so now let's run our project and just make sure everything is connected and it works so as you can see there's red there's green and there's blue not just like that you've seen a demonstration of us breaking down a more complex view into smaller reusable views as we've done here and you've also seen an example of using bindings you see the color picker view that we have here owns the state properties for red green and blue so it's the source of truth and we are passing in a binding to those state properties into our slider view so that the slider view can both read and write to the state properties up here as you can see a binding provides twoway communication the slider view can read the value of the state property in the color picker view and it can also manipulate the value of that state property through the binding but a key difference is that the color picker owns the data because the state property is declared in the color picker view we're no longer keeping two copies of the same data the color picker view is the source of truth when it comes to the values of red blue and green and you'll hear this term a lot in swift UI source of truth it refers to who owns the data because you want to avoid two views both having state properties representing the same data instead you should think about who should actually own the data aka the source of truth and have the other views use bindings instead in the next lesson we're going to apply these principles to our slots app all right I'll see you there