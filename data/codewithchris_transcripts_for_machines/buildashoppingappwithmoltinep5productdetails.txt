hey coders hope you guys are having a great Friday so far Chris here with episode 5 of how to build a shopping app now in the last lesson we had listed out our products from our Moulton store and right now our Xcode project is connecting to our moulten backend and retrieving those products and listing them out here so I've got three products when we tap on any one of them though there is nothing in the detail view so that's what we're going to do in today's lesson so from the master view here when the user taps on a product we're going to send that object over to the detail view and then from there when the view of the detail gets loaded we're going to display those product properties here the title the price and the description so let's go back into our Xcode project right now and the first thing we're going to do is go into the storyboard so that we can add all of the labels that we need in the detail view so if you can't see what's going on in your storyboard remember that you can always double click on an empty space to zoom out so you can get kind of a holistic view of your entire storyboard so we're gonna be working with the detail view right here so let's double click to drill back in and then here in the lower right hand corner we're going to search for label okay and if you don't have this panel make sure that this button here shows you that panel and we want to be on the object library tab so when you search for label you're going to get a couple well it should be one element showing up we're going to drag this label here and this is going to be the title so here on the document outline and if you don't have this panel it's just this little button right here I'm just going to click into it so I can name it the title label just so when you have a lot of elements in your view it could get confusing okay and this was the label here that was by default and they called it the detail description label we can reuse that let's call it the description label it's got some default text already detailed view content goes here I'm just going to change that text you don't have to I'm just gonna change it to description so it kind of matches what we are going to be using it for and let's drag one more label here for the price and do that and price I'm going to rename that to price label and then let's make the title label just a little bigger and bold so under font in the property inspector let's choose custom I'll leave it font family as Helvetica style is bold and let's make it font size 20 so an easy way to position these stacked vertically is to use something called a stack of you before stack views were introduced the way we would have done it is position this title label maybe Center it give it a offset from the top and then Center the price label and give it a offset from the title label and then Center the description label and give it a offset from the price label well with a stack view what we can do is put all these three labels into a stack view and with that stack view you can specify how they're distributed so let me show you what I mean on the document outline I'm just going to highlight all three of them you can hold down command and manually click all three and then click this button right here which is going to stack them together into a stack view now if you check your document outline you'll see that all three labels have now been put into a stack view so first of all we have to position the stack view so instead of positioning all three of these labels I only have to position this one element and then specify how these three labels are going to be positioned inside so I'm gonna highlight the stack view now it can be a little hard to click because you might accidentally click these labels so I would recommend that you click on the stack view from the document outline and let's give it some Auto layout constraints so I'm going to click horizontally Center it in the container so it's in the middle and then on the pin menu I'm going to give it an offset from the top let's say 30 and from the bottom I'm going to say something like a hundred so let's add these two constraints now you can see that they're all stretched out I'm gonna update frames and then we're going to click the stack view and we're going to tell it how to distribute these elements inside of it on the inspector panel you can see the axis is vertical which means that they're gonna be vertically stacked a distribution we're going to say equal spacing so that's gonna make them equally spaced within the stack view now that I look at it it looks kind of strange with so much space in between all of them so what I'm going to do is just adjust the constraint of the stack view before I had put the bottom of the stack view is a hundred from the bottom of the view so let's change that let's say it's something like 400 and then we can adjust that a little later so let's save it and let's zoom out in this storyboard for a second here and check out what's happening so you know that when we tap on a cell in the table view it brings us the detail view right that happens because of this segue right here and the identifier is called a show detail right so when we tap on a cell on the table view which is one of our products it's going to bring us actually to this navigation controller and the route view of this navigation controller is actually the detail so because we retrieved all of the products in the master view controller dot Swift right this master view controller class this is where we have all the product data how are we going to send the product that the user selected to the detail view controller so that that data can get displayed well when the user taps on a cell in the master view controller this method gets fired prepare for segue so there's already some code written here so let's go over that and I'll explain to you what's happening so right here it's just the check to see if the segue that's happening is called show detail and that's the segue that leads us to the detail view controller and then here it's checking if the user has selected a row in the table view and if it has it's going to assign that index path object into this constant right here called index path and that's gonna tell us which row that the user selected now here we commented this out last time but what it's doing is based on the row that the user selected we're gonna go into our objects array and retrieve that object remember the objects array stores our product here it's casting it as an estate by default because when the project is created Xcode doesn't know what sort of object it is so here instead of an estate we're going to put an Asst dictionary okay and the next line is basically getting a reference to the detailviewcontroller which is the destinationviewcontroller that's the view controller that we're transitioning to from the segue now if you noticed back in the detail view controller dot Swift it's actually got a property here called detail item okay and it's the type of any object so if we go back to the master view controller we also commented out this line which sets the object that the user selected into that property so let's uncomment that so again it's retrieving the product that the user selected right and putting it into this constant object and then it's getting a reference to the destination view controller which is detail view controller right and we're putting that into a constant named controller and then finally because it is a detailed view controller we're accessing the detail item property and we're assigning into it the product that the user selected and then finally these two lines just sets the back button so what happens when this object gets set into detail item let's go into the detail view controller dot Swift here in this property when it gets set this method gets fired configure view so let's look at the configured here update the user interface for the detail item so first it checks if there is a detail item and we know that there is because it was just set and then here this line it checks if there's a description label and then it proceeds to set the text for that description label so we're going to get rid of this stuff right here first of all and we're going to write some comments as to what we're going to do so set the product product title set the description label set the price label based off of this detail object so how are we going to retrieve the title description and price from the product well let's look at the API documentation again so here it is the call that we made and this is the response and we can see for a particular product what sorts of key value pairs are in that dictionary so we have title right that's the key and that's gonna give us the title of the product we have the price which we can retrieve here there's also this other pricing property which gives us a couple more options so if we chose in our store settings to round it right we have a with tax without tax and if we specified a price formatting we can do that again we can retrieve that price with the formatting sorry with the tax or without the tax and then here's the raw number here and then there's also a description key which has the product description so I'm gonna go back to the Xcode project here and I'm going to create a couple of constants that represents those pieces of data so I'm gonna say create a constant called product title equals detail and the key was title string okay then I'm going to say let product description let's type it out equals detail and the key was description string and I'm going to say let product price equals detail and the key was price as string and finally we're going to assign all of these constants into the labels so right now we've only got the detail description label connected to the element on the storyboard we also gotta add one for the title and one for the price so we're gonna jump into the storyboard let's zoom in let's click the assistant editor view and in here I'm just going to open up the detail seen under view there's our stack view and here's our title label so I'm gonna hold down control click and drag it over here I'm gonna call it the detail title label just to stay consistent let's do the same thing with the price hold down control click and drag let's call this detail price label okay so now we're ready to jump back into the standard editor let's go back to the detail view controller and in here because this product title can be nil we have to check if it actually exists so let's use conditional binding if let product let's just call that title equals product title we're going to set self dot detail title label dot text equals title okay and here we're gonna say if let product let's just call it description equals product description self dot detail description label dot text equals the description and then finally if let price equals product price self thought detail price label dot text equals price now I just want to point out that there's a shorthand way of doing this if you choose to so we can say instead of first assigning this to product title and then checking of product title has a value we can combine this checking and get rid of this constant altogether so let me show you what that looks like so if we just got rid of this line for a second so don't use this constant we can do something like this and by doing that you're basically doing it all in one line you're checking you're retrieving the title key from the dictionary and you're trying to retrieve that as a string and if it's successful then it's going to go into this statement it's gonna get signed into title go into the statement but if it happens that there is no key called title or if there is a key but then it can't convert it to a string it's gonna be nil and so it won't go into the statement at all so I just split it into two so it's a little easier to understand for you guys but when you get more familiar with things you can combine it into a single line like that now let's run it and see if that works okay so we've got our products in the table view let's tap on iPad pro and we've actually got a crash so those of you who have worked with segways and passing data back and forth you may probably know what's going on but this illustrates a really good point I want to take a moment out to explain so if we look at the console it says unexpectedly found nil while unwrapping an optional value so what's happening here is we know title contains a value because this statement if let title equals product title checks that the product title has a value and in fact if I hover over it says iPad pro right there so what is nil well this selftaught detailed title label is now but you may be asking how can that be because we've set the title label up here as an iboutlet that's connected to the title element in our storyboard well the problem is that at this point the view hasn't been loaded yet for the detailed view controller so this configure View method is called by this did set block of code when the detail item is set and that detail item is set in this prepare for segue method when we do this C we're setting the object into detail item which triggers the did set which calls the configure view and then it's trying to set some data to our labels but the view hasn't loaded for the detail view controller yet and so we can't actually access that label element so that's why if you look farther down in the file in the viewdidload method of the detail view controller it calls self dot configure view again because at this point the view has loaded and we can work with the labels so that is actually when we want to set up all of our labels well we can just delete this line or commented it out that would be an easy fix so now when the detail item gets set in the prepare for segue method that's not going to trigger the configure view method however the reason why this statement is here is because we want to detect whenever the detail item changes we want to change these labels and if you get rid of that that's not gonna happen so instead what we can do is here in our statement when we assign the title into the text property we can actually put a question mark here to do something called optional chaining and what that's going to do for us is that if the title label is no it's going to safely ignore this part and it's not gonna try to set the title into the text property of a nil value so we're gonna go ahead and add the question mark here and here as well so now in the prepare for segue method when we set the detail item and it's gonna call configure view and it's gonna try to do this stuff it's gonna reach this point and it's gonna recognize that that iboutlet property still nil and it's not gonna try to set the text property of it but then when the view has loaded configure view is called once again and then this time because the IB outlets have a reference to those labels it's gonna set the text property for it so now let's run it again and you're going to see if I click on the iPad pro we can see the title the price isn't showing up so we'll look at that in a second and we can see the description is here so let's go back into Xcode right now and let's set a breakpoint and right here and let's run it again and then we can use the console so I'm going to click I pad Pro and we're going to use the console just to double check what is getting returned here so let's say Pio detail price and it looks like we are getting the price but it's contained in some structure so detail price is returning an optional type and option dictionary with a key that says data with another key formatted and with a couple of other key value pairs like this with tax without tax so the tax itself here is 200 so you know what we can actually drill into it and we can retrieve data formatted without tax let's say so instead okay what we can do here instead of just popping in a key there to get the value we can use a method of the dictionary called value for key path it returns the value for the derived property identified by a given key path okay so what we're going to specify here is price and then you can use the dot notation to drill down and specify a path so before we just have to keep price so this time we're gonna do price dot data dot formatted dot without tax oh there's a underscore there so be careful let's do that and let's get rid of this breakpoint and let's run it and I'm gonna click on iPad pro and sure enough we've got the price for this product in the next lesson we're going to implement an Add to Cart button and then in the lesson after that we're going to do checkout so we're near the finish line thanks for watching please share it if you enjoyed it and please subscribe to get notified when there are new videos have a great weekend I'll see you guys on Monday bye for now you