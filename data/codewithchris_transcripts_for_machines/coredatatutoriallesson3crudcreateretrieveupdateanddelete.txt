pay code crew in this lesson we're going to continue or our core data series and I'll show you how to create retrieve update and delete data from core data now if you've missed the previous few lessons I highly recommend that you go and check those out first one more thing before we begin I want to mention that these core data lessons are actually part of the database course in my CW c+ program inside CW c plus you'll be able to build this travel app that uses core data for the list of locations as well as personal notes for each location all right now let's jump into Xcode alright so in this Xcode project I'm going to show you how to create retrieve update and delete data from core data now I did set up a lot of the UI for this project and I'm only gonna be focusing on the core data transactions bit and the reason for that is because if I showed you how to build the UI 90% of this lesson would have just been building UI with 10% being the actual core data bits which is the focus of this lesson so that's why I built it out but I'm gonna walk you through the UI work that I've done so far and I'm gonna show you where the missing core data bits are that we're gonna fill out together okay so first of all what data are we working with here so back in lesson 2 and less than 1 we were talking about a person entity same thing here person entity these attributes are the same which I've defined I've generated the actually before that I've set the code gen to manual and none that means I have to manually generate the subclasses and you can see that I have done that here so here's my class there's nothing in here and these are the properties map to the attributes ok so what does the UI look like if I go to the main dot storyboard you'll see that I have a table view which I'm going to use to display all of the people in our database and then we have an Add button up here which I'm going to show an alert or a popup with a text box where we can type in a name and that's going to add a new entry into our core data database we're going to be able to swipe each row to delete that person from the database and finally we're going to be able to tap on a row and pop up that alert again and be able to edit the name and then save it so that's updating data now I do want to mention that in this lesson I'm not going to explain how table views work and how you know a lot of this UI is constructed because we've gone through a lot of this stuff in previous lessons if you haven't seen those or you're still confused about table views and protocols and delegates and stuff like that and how the table view gets data from the view controller do visit my other lessons especially the 29 day beginner challenge which I'll link to I'll put a card up on the screen so let's dive into the view controller and let me show you some of the code we're gonna do retrieval first I'm going to show you how the table view gets the data and then we're going to hook that up to core data so this items property right here this is the array of data that is powering the table view as you can see now it's not set to anything but that's where we come in and we're gonna hook it up to our core data data so we're gonna start at the top by getting a reference to the managed object context remember from the previous lessons I explained that you don't work with the core data persistence store directly there is a layer called the managed object context well that you interact through to save and retrieve your data so how do we get a reference to this managed object context well inside the app delegate here you see this property for persistence container so we're gonna get a reference to this which is going to give us the core data persistent container and there's a property on this object which gives us the managed object context so up here we're gonna say UI application dot shared dot delegate and we're going to cast that as an instance of the app delegate and then we can access that property I just showed you called persistent container and then a property off of that called the view context this is the one we're looking for the nsmanaged object context so we're going to keep a reference to that and we're going to call it context up there and that's going to make it easy for us to basically use the context to retrieve and save we're gonna be using this reference a lot okay so down here in the viewdidload this is standard hooking up table view stuff there is this method here called fetch people and the that's this method right here as you can see it doesn't do anything right now but we are going to fetch the data from core data to display in the table view alright so the way we do this is context dot fetch and you can see here that first of all it throws an error if it cannot fetch what you're asking it to fetch then it's going to raise an error so we do have to wrap this in a do catch block and handle that error but you'll notice that the other thing it accepts is a fetch request now we're gonna start by putting in a very simple fetch request to say retrieve all of the people objects but in the next lesson we're going to take a look at other types of requests that you can do to sort and filter all right so let's choose one of these and let's choose this one right here I don't think it really matters right now and I pointed this out to you in Lesson one or two but you can see here that it's got a static or type method here called fetch request and this actually returns a fetch request for all of the person entities in core data so this is the method that we're going to call of the person class to generate a fetch request that we're going to pass into the managed view context so let's take a look at how that works so since it's a type method I don't have to declare a new instance of person I just called person dot fetch request like that alright so I'm passing in a request to grab all of the person objects in core data and we can either you know we can either do the try keyword like that to not care if any errors get raised or we can actually handle the error properly so you know we're gonna do a do catch block like this and again not going to explain or cover this in depth right here since this lesson is sort of a little more advanced so essentially we are trying to try to fetch this so we are going to assign the results it's going to be in a ray of person objects we're going to assign it to this property up here so selfthought items equals we're gonna try so after all of the items get fetched then we assign it to this array we got to tell the table view to refresh or reload its data so that's what we're gonna do here table view dot reload data now I'm going to do this in the main queue because sometimes we're going to be calling this fetch people method from a background thread so the way we do that is we use this patch cue domain a sink and this is going to because this is UI work when you reload the table view it's essentially going to fire all the Loews methods to grab the cells and stuff like that and that's UI work so we want to make sure that we're doing that in the main thread and just in case you're not sure about why it's really the main thread that should be updating and handling the UI when you start trying to do that from the background than a background process or thread then you might start getting performance impact or hits ok so just from doing that we should be able to see something because I do have a single person object inside core data right now so if I run the project you're going to see that it indeed goes to fetch data and we have one entry and it's just placeholder right now yeah let's just ignore that for a second the reason why it says placeholder is because for this cell for row at method I just set the text of the for that row two placeholder but we're going to I guess we could change that right now so we're going to get the person from the array let person equals self thought items and we're going to pass in index path row and that's going to give us the person and then in here we're gonna say person dot name this is an optional so I'm just going to force and wrap it and we'll grab the name so let's run it again and instead of placeholder text we actually see the name of the person object alright so now that's fetching data from core data it's as easy as that except that right now you can only fetch all of all of it you don't know how to sort of sort and filter but we're gonna cover that in the future all right now for adding data how do we add data right now when we click this button I'm just popping up a popup to ask for a the name of the person and we're gonna create that new person object and add it to core data all right so that's this button handler right here add tapped so all I'm doing here is creating a new popup you can see here I'm adding a text field and then I am writing a submit button that says add alright and when that Add button gets tapped on so go back here you know they'll fill in a name like Joe when this Add button gets tapped on this is the code that's going to get run alright so how do we access the text in this field well the alert since we added a text field to the alert through this add text field method we can access the array of text fields like this alert dot text fields and we can access the first one because there only is one we only did this once right so that's our text field right here and here we're going to create a new person object and then we're going to assign the name and the age and the gender and stuff like that alright so let new person equals and we're gonna try to create a new person object like usual by using these rounded brackets but you'll see here that because this is a subclass of NS managed object right that's what allows it to be saved into core data like we had talked about because that's the case you'll see that I have this option right here all right to create this person object in a specific context right and as SEPs a parameter nsmanaged object context well we're going to pass in the context that selfthought context we're gonna pass in this context up here alright that's how we're interacting with our core data persistent container alright so where was that code right here so just like that we've created a new person object in that context and now we're gonna set some properties for it so new person dot name is equal to text field dot txt and this is that text field right there in the popup and for the age I'm just gonna set it to some arbitrary number the same thing with gender but I assume that you would you would ask for all of this data you know when you're adding a new person okay so just creating a person object in the context is not enough to save the data you actually have to save it if you don't save it then the next time you run it you won't actually find this person anymore it doesn't get saved into core data so the way you save the data is through the managed object context so selfthought context dot save and that's simply it notice that this method also throws right so you can do you can you can wrap it in a do catch block and you know try to catch an error if there's a problem saving it so you have to put a try keyword in front of the throw method you can do this and try to catch the mere error if there's a save data error or you can simply not care if there are errors or not and do that if this were an actual app I would definitely try to catch all the hairs and respond to and let the user know that there was an error in saving the data and all of that all right so saving the data and then we have to refresh the table view because we've all we've done now is create a new person object and we've saved it to core data but that doesn't change this array which the table view is is reading off of right so I am going to call the fetch people method right here a selfthought fetch people and just in case you don't remember about this fetch people method if I scroll up here it all it does is it hits the managed object context passing in a person fetch request to grab all of the people object back assigns it to this property which the table view is reading off of and then calls table view dot reload to reload the data and good thing that this puts it on the main thread because we're calling it from a background thread right here this is a button handler from the submit button okay last thing to do is add the button to the alert and then to present the alert so let's run this code and we should be able to add new objects to our database so let's say Joe when I hit add what's going to happen it's going to create a new person object in our managed object context it's gonna save the context thereby saving the object into core data and then it's going to call fetch to fetch that data back from core data fetch that fetch Joe back from core data so add boom we got Joe nice alright so now let's do delete so I I did this it's just a swipe action on the table view row it's actually very easy to do down where was it right here trailing swipe action so that's what we're configuring so we're going to create a new swipe action all it is is a UI contextual action and the style is destructive since it's going to be a delete function the title is delete and then here is the handler the code for what happens when you trigger that swipe action so first let's get a reference to the person object that we want to remove so the lent person to remove equal self thought items all right and as a parameter it tells you which row was swiped on here so index path row yeah that's going to give us the person to remove this is optional so let's don't run and wrap that okay so now actually to remove the person and again we do these core data functions through the managed object context so self dot context dot actually delete object and you just pass in the object so here we're gonna pass in person to remove and again you have to save or else it's not going to take effect so the context dot save again it throws so you're gonna wrap this in a do catch and catch that error if there was an error in deleting in the deletion save the data and then reflect the data here self dot fetch people all right so let's run this and test that out so let's delete Joe delete so he's gone and if I rerun my app you'll see that we only have Ted ok so we can add another person Sammy to replace Joe okay so now the last thing is did select row when we let's say select Sammy all I'm doing here is throwing up a pop up the same idea with a text field let's take a look at the code we have here did select row here I'm just getting the person that was selected through this parameter that would that indicates which row was tapped on and then I'm creating an alert I'm adding a text field and I am getting a reference to that text field from here and I'm pre loading the person's name alright the selected person pre loading his or her name into the text field so that when when it brings up the text field we have the existing name in there already and then I configured a Save button so you can see here the handler when that gets tapped that is where we are going to edit the name so the selected person we got a reference to it up there already dot name is equal to whatever name is in the text field now you know assuming the person did actually change the name and again save the data and then finally refresh refresh the data so let's run this code right now oh and the last thing I did was add the Save button to the alert and then present the alert when upon tapping of a row okay so let's tap on Sammy and let's save save Sammy as Jo so now when I relaunch the app you can see that it's Ted and Jo so just to do a quick recap on all four of the operations we talked about in terms of fetching you call the fetch method of the managed object context and you pass in a fetch request now that could be a fetch request for all of the objects of that type or it could be one that's sorted and filtered upon which you'll learn in the future video in terms of inserting people or or adding new data what you do is you create a new object in the context right and then you call save and then for deleting you call the delete method of the context and you pass in the object you want to delete from core data and then you have to remember to save it and finally for updating you simply change whatever you want to change on that object and then you save it alright so now you learned how to create retrieve update and delete data in core data now I have a question for you now that you have a basic understanding about how to use core data is it easier or harder than you thought let me know by leaving a quick comment below and lastly if you enjoy this video please give it a thumbs up it's gonna help the YouTube algorithm give this video more exposure and I really really appreciate that so thank you in the next lesson you'll learn how to sort and filter the results that you get back from core data alright I'll see you there