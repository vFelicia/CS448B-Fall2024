all right so this is the solution for the challenge and just to recap I asked you guys if you could do nine cards with two buttons the first button spinning only the middle row and the other button spins all of the cards and matches all three rows plus diagonals so that's what we're going to do today so the first thing we're going to do is actually to increase the number of cards that we have and this is actually relatively simple so we're gonna go into we're gonna go down to where the card view is I gave you guys a tip last time where you know you're not going to be able to just create three rows like this because you're gonna get an error which is not very helpful it tells you that there's an error with this corner radius modifier but that really isn't the case the problem is that in the stack view that we have that contains everything it's got more than ten elements and right now stack views can only have a max of ten in fact any sort of container layout element can only have up to ten and so what we're gonna do is in case these three H stacks you know these are our nine cards here inside its own V stack so I'm gonna cut all of that I'm gonna declare a new or write a new V stack there and just paste all three rows and we should see all the cards alright so that's really cool the next thing to do then since we have so many cards is to expand expand our numbers and backgrounds because these two arrays represents the different slots or indexes for these cards and now we have more than three so we need you know we need nine so one easy way to to do it is like you could you could just create more elements in your array literal like that but there actually is a method for creating a race if you want to fill it all with the same value and I'm gonna show you that in a second but let me just show you this way right now so there are six and there's nine so you could do it like that and you can have each of these indexes represent a different card so we're gonna erase this literal here and we're gonna declare a new array object and we're gonna use this initializer here it creates a new collection containing the specified number of single repeated value so the value is going to be we're just gonna put zero and the count is going to be nine for that and then for this one for backgrounds we're going to do the same thing alright and we're gonna use this repeating one and it's gonna be color white and again nine then we can erase this literal here all right so that's what we have and the next step is to update all of these card views we're going to pass the appropriate bindings in so this one is going to be at index zero one two three four five six seven eight right I almost counted nine you guys probably caught that and he so there's three this one's for since five this one six seven and eight and if we just update this where we should see all of them as apples right okay so now the next step is to take a look at our spin button here so what it does right here is it sets all the backgrounds to white and then it randomizes a number for the three cards and then it it checks for the winnings like if zero matches one in one matches two then you know that all three match and then it updates the credits and then it's the background to green so in the last lesson when I finish the slots app I taught you guys about the map method for a race and we're actually going to use it now because setting nine different backgrounds and like you know randomizing nine different cards and setting nine different records to green is just is too much so we're gonna make use of that map function here but before that we're gonna abstract this code out into its own method the reason being right now we've written this code directly in the closure for the action for this button but we remember it we're gonna have a second button that is gonna have very similar code because that button is gonna set all the backgrounds white as well but it's gonna randomized all nine cards and it's gonna set the backgrounds to the matches to green and it's gonna calculate the winnings as well so rather than repeating this code right for nine different cards we're gonna kind of abstract it out and write it more elegantly so what I'm gonna do is I'm gonna create a method right here right before the closing bracket of this body property we're gonna call it process results alright and we're gonna need to know if we're processing the results for one spin or like the maximum number of spins which is like all three so I'm gonna have a boolean to say is max and this is going to be a bull all right let's default it to false so by default it's going to be a single spin and I'm just going to take all of this code in fact all of the code for this button closure for this action and we're gonna put it into here and the first thing we're gonna do is set all of the backgrounds for all of the cards to white so instead of going you know zero to eight we're gonna do self thought backgrounds equals self thought backgrounds dot map and I'm going to open up that closure and we don't need this parameter part and we're just gonna return color dot white and just like that we've set all the backgrounds to white maybe I can just get rid of this pain right there and that's gonna be a little easier to see alright now we're going to randomize the images but this depends on whether we are doing a maxis pin or a single spin right so we're gonna have to we're gonna have to do an if statement if is max then spin all the cards else spin the middle row alright so spinning the middle row we're gonna have to do it in three statements and the middle row is 0 1 2 3 4 and 5 so 3 4 & 5 that's the middle row right so we're gonna do 3 4 & 5 but for spending all the cards again we can use the map function here so self dot numbers equals self dot numbers dot map and we're gonna open up that closure remove this part because we don't need it and we're gonna say we're gonna return int on random actually I'm just gonna copy this because it's the same thing for every single element all right so that's spinning all the cards or randomizing a number for every single index and this is just randomizing four three four and five all right here's checking for the winnings now this is also more complicated now because if we're spinning a single spin then we only checked the middle row but if we're spinning max then we got to check one two three and in the X right four five let's check five different things so rather than have it here I'm gonna write a different different method down here called process process win and again this is going to accept the parameter is max we're just gonna default it to false okay so I'm gonna I'm gonna take this chunk of code right here and I'm gonna cut this and I'm gonna paste it in here right and then simply I'm going to call process win from here and then pass in is max this is from a peer right so this method is for processing the results but in actuality it's like just to spinning all of the indexes or randomizing all the indexes this is for processing the win which is to we're going to check basically all of the matches so let's declare so with a single row that was easy right if it matches then you win if it doesn't match this then you lose but for a max spin because there are so many different matches that can happen you can match it you know you can match one you can match two you can match all five so we need to keep track of how many matches you've made and so I'm going to create a variable here and then call it matches equals zero we'll initialize it to zero and then what kind of keep count so we're going to first check the case where is max equals false so let's say this is a single spin right I put this inequality here this means that if it's not is max then we are processing for a single spin so we've already got we've already got this here right except we're not checking 0 1 & 2 were checking 3 4 & 5 so if 3 equals 4 and 4 also equals 5 then that means there's a single match and we update the backgrounds 3 4 & 5 to green right and one I would I would instead of doing this we're gonna update the number of credits at the very end based on how many matches there were so in here instead of updating this the credits balance here we're just going to say matches plus equals 1 ok so that is if the cases if the case is not is max if that's a single spin else processing for max the spin I'm gonna remove this code so we don't kind of confuse ourselves this was the code from before and then you know after we process for max spin this is going to require a couple of different if statements right so I'm gonna I'm gonna shorten it after I write it this way just so you guys are aware but right now we're gonna check row by row so we're gonna say top row and this would be 0 does 0 equal to 1 does 1 equals to 2 if so matches plus 1 and turn turn these cards green okay now we check middle row so middle row is when you know we've already got the code from up here so I literally just pasted it here if the middle row matches then matches plus equal 1 this is bottom row bottom row is 7 6 7 8 so 6 equals the 7 and 7 equals to 8 then we're gonna update 6 7 & 8 to green we've got two more to do so diagonal diagonal top left to bottom right so that this would be 0 with 4 right 0 1 2 3 4 with 4 and this would be 8 so 0 4 & 8 okay and then we've also got a diagonal top right to bottom left and this would be 0 1 2 2 4 & 6 okay and finally that's good finally check matches and distribute credits so if matches is greater than 0 then that means that there is there is a win right if else if that means if it comes to me here that means matches is 0 or less than 0 which it can't be less than 0 so it's just 0 else if not is max so this is at least 1 win this is 0 wins single spin and then lastly its 0 wins max spin so if it's you know if it's zero wins single spin then we're going to do self dot credits is minus equals that amount so we had a bettin amount up here which represents how many credits gets spent for a single spin and I'm gonna do it so that for the max spin I'm gonna do it five times the amount of a single spin so it's gonna deduct 25 credits instead right but if you win then you're gonna get you're gonna get more credits back based on the number of matches you have so matches times that amount but you usually have to win more than you bet more than the amount that you just bet so I'm gonna say you you're gonna get two times back if you if you make a match you're gonna get two times back in you know multiplied by the number of matches you made so that's that's gonna be the math there and now let's add before we optimize this and kind of long chunk of code here I want to add a second button here just so we can start testing it and just making sure that this code is right before we all go and shorten it so let's go back up here for our single spin button remember I had removed the action but now I can call process results right and is maxed by default is equal to false so I'm just gonna you know say that a process a single spin right and furthermore I actually want to put some text down here to say how many credits it costs so I'm gonna say V stack and I'm gonna put a text element here I'm gonna say five credits and I'm gonna take this button I'm gonna put it into this V stack like that and so we should see a little label down there that says five credits that's a resume all right so I spelled credits wrong okay I'm gonna optimize it a little bit and so I'm gonna add some padding to the top let's say ten and I'm also gonna change the font to a like a caption style so it's a little smaller that's really small let's try footnote that's a little less slightly better if that's fine and instead of five I'm actually gonna sub in the bet amount in case we change that variable at the top so that's still going to be five all right now we are going to put this in an H stack because we have a second button remember so an H stack we're gonna take this button here we're gonna pop it in there and we're gonna add a second button so I'm going to I just pasted it twice so now we have a second one this one's going to be called max spin the mountain of credits is going to be but amount times five so that's 25 and instead of just processing results we're gonna pass in true to indicate that this is a max spin and I'm going to add some spacing in between those two buttons so this H stack has an initializer this one so alignment we we don't need to specify that the default alignment is fine it's spacing right about 20 and this content closure is like I mean we already have this right there like this all this stuff is that parameter that content parameter okay so let's save this let's run this and see see how this actually works all right so single spin I'll match right away that's a win all right max spin cool wait that was a weird I think I saw a weird green pattern we might yeah this oh wait this is a match yeah okay so row row diagonal well I still end up making money or losing money these are credits these aren't this is not money we are not gambling here I think we're going down here she is dying a slow death here at this point I'm borrowing money to gamble I mean the loan sharks all right this is cool so it's working let's optimize this code here because if you take a look at all of these parts that we have here the code is exactly the same but the only difference is that the indexes are different right see this code is checking these three indexes zero one and two and then setting it to green if it's a match that this section is checking three four and five so we can create a different a different method here and we're gonna call this is match and you're gonna have to pass into three indexes so we're gonna have index one as an int index two as an int index three as an int and it's gonna return a bool so it's gonna return false by it you know if it reaches there but first it's gonna well it's basically gonna check this if selfthought numbers index 1 is equal to self dot numbers index 2 and self thought numbers and X 2 is equal to self numbers next 3 then this is considered a match and we return true and what we can also do is just also set the backgrounds to green as well but instead of hardcoding those indexes we would have index 2 and X 3 and this is basically a repeat of this code I don't know why I typed it out I see it see I typed something wrong oh there should be a space right there all right so now we can call this is match method instead of all of this code here so for example for this one we're gonna call you know we can do if is match and pass in 3 4 & 5 and if this is true then we can do matches + equals 1 right because our method didn't it doesn't increase the matches number I mean we keep track of this and here in the process win and then we can delete this whole chunk of code and if you want to short it if you want to shorten even more you can you know you can put it in one line like that so then this becomes you just change these numbers zero one and two you get rid of that middle row becomes three four and five this becomes 6 7 & 8 this becomes 0 4 & 8 I accidentally keep pressing command B that's 2 4 & 6 4 & 6 so that actually saves a lot of code and you know it's gonna make updating this a lot easier maintaining it I mean and it also looks a lot better so let's just run it again to make sure nothing's broken you know what would be cool is if we did a jackpot type thing like if you get I don't know you can you can do you know those slot machines as you know different configurations kind of give you like different amounts right now we have a standard amount just for three matches but if you had a couple more symbols in here you could do some maybe if you get like all cherries or something you just get an explosion of credits but anyways that does it for this one that's the challenge that I wanted to do I'll leave the jackpot thing to you if you want to implement that if you do end up doing that definitely shoot me a screenshot on Twitter Instagram tag me and um I'll show it off okay thanks a lot thanks for watching I'll see you in the next lesson