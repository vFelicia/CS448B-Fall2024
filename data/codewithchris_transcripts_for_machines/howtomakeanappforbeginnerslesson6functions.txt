hi welcome to lesson six in the last lesson you learned some basic Swift code let me ask you something how does the user interact with an app usually it's something like the user takes an action such as tapping a news headline and the app reacts by displaying that article action reaction well that implies that when the user takes an action we need to be able to run some specific pieces of code in that case we need a way to organize our code into bitesized chunks so that when the user takes this action we run this block of code and when the user takes that action we run another block of code while Swift has something called functions and this is basically wrapping up a block of code and giving it a name so that when we need to execute that code we just call it by its name so let's dive into a playground and see how we use functions we're gonna start by creating a brand new playground so go ahead and get started with the playground under iOS let's choose blank playground and I'm gonna call this the functions playground and just save it on the desktop so in order to declare a function we use the keyword fu NC and then we type a space and then we type in the name of the function now the name that we give the function is the same name that we're going to call the function with to execute the code inside the function so I'm gonna call this one to say hello the next thing we do is open up a pair of rounded brackets like that now inside those brackets there can be things called parameters which we're gonna cover later on in this lesson but for now we're going to just leave it as an empty set of rounded brackets next we're gonna hit space and find the curly brackets on your keyboard and we're going to open up a pair of those just like that an opening one and a closing one and inside of those curly brackets that's where the code for our function goes so let's hit enter a couple of times to create some space and inside this function I'm going to have only a single line of code I'm just gonna print something into the console so I'm gonna print out hello just like that now notice that in the console nothing gets output because the code inside my function is not going to be run until I actually call that a function by its name now let's go down here and line 12 and I'll demonstrate how to call it all you have to do is type the name of the function followed by those rounded brackets like that and then you're going to see the output because it's running this line of code when you write a function you usually think about performing a specific task in our earlier use case you might write a function to display an article so that when the user taps on the nice headline you can run that function to display that article now sometimes a function may require some sort of input to perform its task for example what happens when the user taps on headline number one versus news headline number two are you going to write a different function for every single news headline of course you're not and furthermore the news changes every day so you can't write a function for a piece of news that hasn't come out yet instead you write a function that displays an article but it doesn't know or care which one it is you have to specify which article it should show when you call that function by passing that article into the function and then your function will take that input and display that article you can do this with function parameters remember those rounded brackets in the function call well inside of those brackets you can specify what sort of data you want to be passed into the function when it's called in the example below we declare a function called say hello to in between the brackets you have a parameter called name that is of the data type string that kind of looks like a variable declaration but without the VAR keyword right whenever you call the say hello to function you're going to have to supply a piece of text with that function call now let's go into the playground and see how we can work with function parameters now as you were typing that a function name you might have noticed Xcode try to autocomplete it for you so let me demonstrate just in case that didn't happen for you let me erase this function call let me start typing the names more slowly s a Y as you can see it pops up this autocomplete menu trying to help you out so if you see what you want to type out already you can simply hit enter because it's already highlighted the function call I want it to type out or if it's not this particular one but you see it somewhere down here you can hit the up or down arrow keys on your keyboard to select it and then hit enter so we're gonna select this one because that's what we're intending to call and it will complete that function call for you all right so now before I demonstrate the function with the parameters why don't we go ahead and add a comment here and just call this one the basic function because we're going to have a couple of different things in here so this one's a function with a width parameter so I'm going to say all right so let's write out our function say hello to and then we're going to open up our pair of round brackets but this time inside there we are going to put a parameter now this parameter is going to dictate that when you call this function say hello to you're gonna have to pass in some data and this parameter basically dictates what sort of data you're supposed to pass in so I'm gonna call my parameter name and then colon followed by the type of data that I want to be passed in and there you go that's one parameter that needs to be passed in space open up a pair of curly brackets in between there we're going to hit enter a couple of times where we are going to write our code now in here I want to print out the name that gets passed in well how do I access that data that gets passed in well this parameter here actually has a parameter name and conveniently we called it name so this is how we access that data that gets passed in by referencing this parameter name so all I need to do is say print name like that and down here of course nothing gets output until we call the function now watch this I'm going to start typing s a Y and now Xcode will show me there are a couple of different function calls I can make this one was our basic function and this one is our new one that includes a parameter so I'm going to go ahead and press the down key and then press ENTER and it's going to basically autocomplete that function and it's going to highlight the parameter we need to specify in order to complete the function call so I'm gonna pass in a string piece of data in there open up a pair of quotation marks and let's put in Tom and this actually completes the function call and you can see here down here it says prints out Tom and this piece of text gets passed in to the function call through this parameter and then this line of code basically just takes that parameter and prints it out into the console notice that in here I have to specify that parameter name followed by colon and followed by the actual piece of data that I want passed in now what if I want to print out hello Tom instead of just the name well I'm gonna show you something cool where you can actually insert a variable or a parameter your parameter is basically a variable you don't insert that variable into a string or a piece of text so let's write a piece of text here let's say hello and space and then in order to insert name dynamically into this piece of text you do backslash open up a pair of rounded brackets like that and in between those rounded brackets you put the name of your variable in our case it would be just name and so now you can see down here it says hello space Tom don't worry about this if you you know don't remember how to do that we're going to actually use this again in a couple of lessons now I want to show you how you can specify a function that has more than one parameter so wrap right up here we have name colon string if we want it to specify a second parameter all we need to do is just hit comma and space and we're gonna add another parameter this time I'm going to call it h colon int it's gonna be int datatype and so now xcode to text because we've changed it so that calling this function requires two data inputs now Xcode notices that hey we're not doing that here and that's an error so I'm just going to erase this line of code say now I can actually just select it from this autocomplete menu and hit enter as you can see structure kind of coincides with what's up here right I have named and then I have to specify the string data to pass in followed by a comma and then age which is the second parameter name followed by the actual int data that I want Hostin so let's pass in Tom and I press tab allows me to just jump straight to specifying the second parameter there and let me just put 35 and of course it still says hello Tom because we haven't incorporated this second parameter so in this statement here hello name let's put comma you are I want to insert the age at this point age space years old now what's output down here just give a moment for X go to process the new code hello Tom you're 35 years old and that's just based on what we type in here you know I can say 45 and that's gonna turn into 45 years old so you can expand on this and you can do three parameters or four parameters but I wouldn't go crazy with this in the future you're gonna learn about how you can actually collect pieces of data together and specify them in a single parameter but for now you know you're passing simple values around and so if you need to pass in three or four or five you know or eight parameters then go ahead and do that one thing I do want to point out though is that in your function call you can actually make it so that you can omit these parameter names here so I could call my function like this alright right now this is going to be an error right but let me show you how to make it so that you can omit these parameter names and that kind of saves you some typing so here up here you can specify underscore and then space right in front of that parameter name same with the second parameter underscore and in space when you do that let's just erase this function call because this is now incorrect I'm going to use autocomplete again say hello to now you can see this entire thing is highlighted if I specify my parameter you can see now I don't need to put those labels in there what you're actually doing with this underscore is you're omitting the argument label for that parameter but I'm not going to go into that now because I don't want to confuse you if you do want to learn about that I'll link to something in the description below and you can look into it if you're curious but down the line once you learn more about Swift you're going to learn about it anyways for now all you need to know is that underscore space in front of your parameter name allows you to omit it from the function call like this now you know how to write functions which expect some sort of input to work with another great use of functions is to take some data input transform it and then return that result functions can do this by using the return keyword in the function below it takes an integer input and then it adds 4 to it and then it gives it back to us notice in this function declaration that after the rounded brackets we have an arrow and then we have a data type int this indicates the type of data that the function will give back when you call it let's go back to our playground and try it out alright so now let's create another section down here and let's create some space here so we can look at the middle of the screen and I'm going to call this function with return value okay so let's type out our function that we demonstrated add 4 to that's capital T and open up a bracket we're gonna type in X colon int that's going to be the data that needs to be passed in an integer and this time we are going to type make sure you've got a space here greater than symbol and then space and now we specify the type of the data that this function will return so I'm actually going to return in int data type let's open up a pair of curly brackets and let's create some space down here so what I'm going to do here I am going to create a variable let's say I recall this the sum equals and we're going to take the parameter that gets passed in which is X and I'm going to add 4 to it so the variable sum contains X plus 4 now since we specified that this function actually returns a value we need to somehow get this sum to be returned and we use a keyword called return that's exactly how it sounds and we are going to return this sum just like that and in fact if you forget the return keyword but you have specified up here that this function returns something Xcode isn't gonna like that it's gonna spit out an error actually and it's telling you that it's missing a return statement so you're gonna have to return the sum now what happens with a function that returns a value how do you call it and how do you get that value that it returned well let's first start by calling the function so add 4 and autocomplete pops up just gonna hit enter actually I want to point out something special here you can see here in this autocomplete menu on this left column you can see int this tells you that it returns an int datatype okay hit enter and now we have to specify the data input so let's put 10 in there so the actual function code will add 4 to it and then it's going to return 14 oh where where did that 14 go well we actually have to keep track of it by assigning it to a variable so let's create a new variable let's called result equals add 4 2 and then we pass in 10 so this function is gonna take our 10 add 4 to it it's gonna spit out 14 and we are going to assign that data to our result variable and now down here let's try printing out the contents of result and we're gonna see that it is 14 now you might ask me why do I have to use this return value why do I have to create a function that uses this return keyword and I have to specify the data type that it returns can't digest see people refer to this variable sum because doesn't it contain my X plus 4 well that brings me to my next topic variable scope I want you to try down here to print out the variable sum you're gonna get an error once Xcode gets around to processing the code and it's saying that use of unresolved I tend to fire some which basically means that it can't find this keyword can't find what some is and the reason for that is because all of the code in between these two curly brackets you know the code that's inside this function is inside of its own scope it's kind of like its own little bubble so any data that you have in here the variables that you declare and stuff like that you can't access it from outside of this scope so that's why even though I've declared some in here this variable I can't access it from outside of the function I can access it from inside this function you know because it's in the same scope so I can actually print out some right there and that would be fine as soon as Xcode finishes processing it so now we actually see two 14s because the first one is from this statement printing it out and then the second 14 is from printing out the result of calling out that function but anyways my point is that from inside the function you can reference that variable that you declare in there because when you declare that variable in here it only exists in this scope within this function you can't access it from outside that function which would be not in this scope again it helps to think of the code inside the function as in its own little bubble so that's why if you want to get the data out you use the return keyword right there and you also have to specify up here that this function returns some sort of data and in case it wasn't clear it's actually each function has its own scope so let me declare another function here I'm just gonna call it function C from within this function it's got its own scope so I can't access some because that's in this functions little bubble and you can see here that Xcode doesn't know what some is and if I declared a variable inside function see I wouldn't be able to access that from outside that function or from within another function either so you can think of each function the code inside of it is in its own little world and what you do in there is kind of invisible to the outside unless you start returning the data all right so let's erase this test function here and I guess one last thing before we move on is this yellow line is called a warning and Xcode is just trying to optimize things here it's saying that some after we assigned something to it it wasn't never changed again so why don't we use a constant instead of a variable so we can actually use let instead of var which is something you learned about a couple of lessons ago all right today you learn about how you can organize your code into functions you learned about function parameters where you can pass data into functions for them to work with we also covered return values where functions can return data back to us and finally we covered variable scope where the variables and data inside of a function only exists within the scope of that function believe it or not there's still more two functions that you can learn about but what we've covered in this lesson is more than sufficient for what you need right now if you do want to learn more about functions right now I'll add some links into the description to additional videos that I have as well as the official Apple documentation for functions and don't forget to download my handy cheat sheet as well as the lesson worksheet so that you can practice working with functions some more if you like this video please subscribe to my channel by hitting that subscribe button below and if you don't want to miss a video make sure you click on that bell icon as well now I want to turn it over to you we are two lessons in two Swift programming with one more left to go do you feel like you've got a grip on it so far yes or no let me know by leaving a comment below and lastly to get the worksheet for this lesson and the cheat sheet if you haven't downloaded in the previous lesson already just follow the URL in the description below or on the screen right now thanks for watching and I'll see you guys in the next lesson