in the last video I showed you how to add interactivity to your app widget in this video I want to show you how I built that streaks app and widget however before we begin I want you to understand that my main goal was to try out the interactive widget part and so I really rushed building the app and widget and I favorites the speed over everything else I did this app and widget really quick and dirty so all of that to say don't use this code for production however you would still be able to get an idea of what you have to do by watching this tutorial alright with that said let's Dive In so before we start just want to mention that we are using xcode 15 beta in this video just in case in the future your xcode 15 looks different or there are some bugs because beta software is constantly changing but we have to use this for our widget interactivity features that we want to show now so first we're going to create the new xcode project under iOS let's choose app and I'm going to call this a widget demo interfaces Swift UI language is Swift the rest is like that pretty much you can leave it untouched I'm going to save it on my desktop which is already cluttered and full of stuff and what we're going to do first is add the counter and the button because this is a streaks app so first of all let's declare a variable at the top um this let's call it streak and this is going to be initialized to zero and then we are going to add the button so actually before we do that if any of this is unfamiliar to you if this is the first video you're ever watching on code with Chris please watch the how to make an app in eight days series first I'll link it in the video right now a little card will pop up but that will show you the basics of building uis and you know using buttons and text labels and things like that if you are brand new so for the text I want to show the street counter okay and below that I want to put a button and we're going to use this one right here Okay so for the action I'm going to increase the streak but um so we're going to do streak plus equal one we're gonna get an error for that foreign and when they tap it it will add one to the streak now this cannot be um modified because it is immutable which means that it can't be modified but what we can do is we can use the app storage property wrapper to make sure that this value gets saved over multiple app sessions so essentially it stores that value onto disk on your device and it'll also let us change that value which is what we want as well so let's go ahead and use this app storage property wrapper okay and then we'll be able to try this out all right it didn't start at zero because I actually did this before and I used the same thing so it's reading from um from disk so anyways it was it is there okay the next part we're going to do is to be adding the progress ring and for that I learned how to do it from calf soft shout out to him and his channel he does some amazing work with animations user interaction building uis so definitely go there if you want to learn about how to build these beautiful experiences and that's where I learned how to build this progress ring so the way that he's done it is to use that stack in Layer Two circles on top of each other the bottom one is for the track the top one is for the progress so let me show you what he's done and what I've learned um actually before we do that let's change the background to Black because I want to make yeah that'll that'll allow my ring to show up better so all I'm doing is adding a black color as the background and I'm going to put my v stack inside or on top sorry of the black all right and I also have to change my foreground color to actually what did that say right there foreground style that's what we're supposed to use now in iOS 17. I don't want to change that I want to change my button color all right we'll do that okay as for the ring we are going to do this and then we're going to Layer Two circles on top of another so there's the first Circle it's actually black so you can't see it but a black circle has appeared but what we're going to do is add a stroke to it and that is um The Stroke is the path so we're going to color the path so the the outer ring of the circle are you familiar with those terms they're used in a lot of design programs Phil is like a shape is is a line right so a circle is like that the stroke is the line itself and Phil is like the area inside the the space so I'll show you what I mean there that's stroke the blue circle and if I did you know in in uh Adobe Photoshop or another program fill would be the area inside so you can choose the fill color you can choose a stroke color and they can be different in here in Swift UI this is the stroke color um if you want to fill it that would be that would be foreground foreground style I guess now they use so for color I want to use white but I want to change the opacity to semitransparent so you can actually barely see it but we're actually going to use LINE width instead and make it 20 so you can see it and I'm going to add a little bit of padding to this yeah maybe maybe 50. all right so now we're going to add the circle on top of it so we're just going to do it again right so for example I can even copy that and I can change this to Blue all right so you don't see the track anymore because it's completely filled but here's another modifier that you can use trim from and two so you can trim from let's say zero to halfway let's see what happens and that's what you get now if you want to start your ring at the top right here like right now it's starting from I don't know from here or here I actually don't know but if you want to start from here all you need to do is rotate your circle by if you're going to rotate counterclockwise that's actually minus 90 degrees so you're going to do a rotation effect and the angle the degrees sorry is going to be minus 90 degrees so then it actually starts from the top so you can see if you do like 34 and it's going to start from the top and sort of go um the other thing is that you can see how these Corners are sharp if you wanted to make them round which I think looks better instead of putting the line with here you should use the other one there was another another one where you can specify a style and here you're going to specify a stroke style instead oops because I'm not that familiar let's use autocomplete ah where'd it go okay so anyways there's line width which we want to be 20 there's line cap and there's line join those are the the ones we want to specify so line width is 20. line cap is going to be round so you could see that already makes a huge difference and line showing is also round so this is what calves off did I'm gonna listen to them okay so there's essentially a ring I want to put the count in the center and I also want to put a streak text there okay so let's inside this circle here we're going to put that text right here but we're also going to put another piece of text this is a zed stack so we're going to put a v stack in here let's put the a foreground style white in on the vstack itself so it modifies all of the text elements inside all right so let's make that a little bigger font system size of 70. okay maybe we'll bolt it and then furthermore we are going to say uh font design rounded and that gives everything a rounded look okay now as for this button I think this needs a little bit of work and perhaps there should be some padding between the ring and the button so we can add a little bit of spacing there for this why don't we add a rounded rectangle uh foreground oh we gotta use foreground style now foreground Style Dot blue and let's give this a height what happened around directing oh we're missing the corner radius part of it uh my text there we go okay so let's increase that spacing a little bit more uh actually you know what I think what we can do instead is add some spacers spacers okay yeah let's let's get rid of the spacing so there's a spacer right there let's add one between the button so we could keep that button at the bottom so it gets easier to press or you can space everything out like that if you'd like kind of like the button at the bottom so we'll do that so it makes it really easy to tap and it keeps this in the center as well now it's time to add a widget extension to our project before we do that let's actually run our project in the simulator to make sure that sort of what we expect we've only done it inside the canvas here all right so here we have it we are going to yep okay so let's try to I can't delete it but what I can do is try to kill the app and launch it again and you can see app storage is working as expected all right cool so that actually killed the project when I killed the app now we're going to add our widget extension so where we do this is we go to file new and we're going to add a new Target to this project and you're going to search for widget and we're going to add this widget extension so here you can call it whatever you want let's just call it widget demo and I don't know widget extension um we are not going to include any of these things okay and this stuff should be pretty much set to to that like your own project let's click finish and then when it asks you if you want to add a widget extension scheme say yes or activate and what that's going to do up here is it's going to allow you to select whether you want to run the the app or the widget if you accidentally clicked no or cancel you can always add it yourself by going to manage schemes like I just did and then click plus and then you can you can choose that and you can add that scheme but for now I mean because I clicked activate or yes now I have that okay so let's take a look at the code of the widget so at first this was really confusing for me too because there's actually quite a bit of code that it that it generates for you so what I'm going to do is try to collapse some of it here so that it's it's easier for you to see and then try to explain it in a way that makes it easy to understand okay so this is the preview this is just what you're seeing here this widget extension which adheres to this protocol this is the actual widget itself okay so let's see what is inside here so first of all there is a string a kind this is sort of like the identifier for your widget you think of it that way this body property this is uh the actual guts of your widget a static configuration is a type of widget that you can have there are actually multiple types as far as I know there are three so let me pull up this piece of documentation from Apple and again these all of these links will be below so um okay static widgets use a static configuration other widgets our app intent configuration widgets they use user customization such as weather widget that needs a zip or postal code or package tracking widget which needs a tracking number there's activity configuration which is used for live data like sports games or food delivery estimate or things like that so static configuration is sort of like your general basic one these ones app in 10 inactivity are more for specific use cases I would say now for static configuration here's how it works you have to pass in the kind which is sort of the identifier that's what we specified up here and this is important because inside the app we are able to issue a command to say like update this widget and that's where we'd have to specify the kind so we do have to take note of that the provider is the supplier of the data think of it like that to the widget and we'll get we'll dive into that in a second and then this part this closure this is the actual view of your widget so that's what you see right here and you can see in this boilerplate code this refers to this view right here right this boilerplate code is what you're seeing up here okay and then this is just some metadata for your widget another thing you can add is supported families because there's different sizes of widgets um there's like small and medium is there a large yeah there's a large so you can see I'm new to widgets but I am going to constrict this widget to small because I haven't designed for the other sizes uh yeah okay so that's this is your actual widget now the next thing to explore let's explore the provider this is up here timeline provider this supplies the data in order to understand this Behemoth why don't we also pull up some documentation so this was this took me a little bit to understand when I first got into building a widget is that your widget isn't always live because if that were the case if the user has a ton of widgets on the home screen it would just like eat up all the resources of the device so widgets are actually um very lightweight and the way it works is via a timeline so what the timeline provider provides is a snapshot of what the widget should show at certain times of the day so let's say that at this this timeline right here is right now right you have a snapshot this is what your widget should show when the widget asks the timeline provider for data it actually doesn't just request the data like the snapshot for right now but it asks for a snapshot from now into the foreseeable future so your provider might specify snapshots for right now an hour later two hours later three hours later so four snapshots in total and it gives it all to the widget right away and then what the system does is it takes all of those snapshots and creates what the view should look like based on that data like right there ahead of time and then so when an hour passes it just takes that view and plops it on your widget two hours later it will take that prerendered view it it made before and then plop it on that widget and so on and so forth so it only asks the timeline provider for data at certain times not all the time there are manual ways for you to trigger your widget to ask the provider for a fresh set of data fresh set of snapshots a new timeline and everything but you are only allowed a certain budget to do that your app is I should say so that way no app could you know constantly try to be refreshing the widget and and just hogging all the resources right now the first question in my head when I learned about this how widgets work is like how how can I provide data into the Future How will I know what my widget should show three hours in the future right because I don't have that data right now that you're asking me for it well there are certain I guess types of use cases where you you might have an idea of what that widget should look like three hours later for example your widget is a countdown to something right so that that makes sense when your widget asks the timeline provider for a snapshot in the timeline you're able to supply the countdown timer status right now but you're also able to predict what that countdown timer should look like one hour later two hours later three hours later four hours later right until all the way until the countdown is zero so you know in that scenario it's really easy for the timeline provider to provide all of these snapshots far into the future until the countdown to zero another example let's say it's a widget to remind you about when you should drink your next glass of water maybe you want to space it out throughout the day and you know make sure you get enough hydration so your widget gives you you know reminds you it shows right there in the widget like you should drink water right now well if there's a schedule of when you should drink water then your timeline provider would be able to predict in the future three hours later I should you know show drink water message on the widget or something like that so you'd be able to supply that data ahead of time so all this stuff that we just talked about actually is covered pretty well in this documentation called keeping a widget up to date and various strategies and ways to do that um so there's some really good charts here that you can see um and this talks about planned reloads with the budget what we talked about how the widget stays up to date there are a couple of instances where you can tell your widget to update and it doesn't count against the quota so one of those scenarios is when your app is launched and is in the foreground so when our streaks app is in the foreground we're going to be able to issue commands to update the widget for free the other time is when the user interacts with the widget now that there's a widget interactivity right so when we add a button here if they tap the button we get to update the widget for free so that's awesome so we can use those two scenarios really to our advantage okay so let's take a look at this code right here and let's see what they've written for us so inside this timeline provider you can see this provider adheres to the timeline provider protocol and it needs to have a couple of methods so let's go through placeholder and get snapshot first what do these two things do let's take a look at some documentation and this is the timeline provider documentation if we scroll down it's going to show us what those methods are for get snapshot provide the timeline entry that represents the current time and state of a widget is required placeholder provides a timeline entry representing a placeholder version of the widget so this placeholder is in a couple of cases for example when the when the user is about to add your widget to his or her home screen they launch the widget Gallery they see a placeholder like this is this is what generates that placeholder widget that they see okay and get snapshot as we just saw provides an instance in time of what that widget should look like okay and finally get timeline let's take a look at that provides an array of timeline entries for the current time and optionally future times to update the widget so if you know beforehand what that widget should look like three hours four hours five hours later that's when you provide it okay so now let's take a look at the code inside here actually so it's you know you see this other thing called Simple entry right simple entry if you go down right here that's it here's the timeline entry this is the data for a single snapshot and as for this placeholder uh this placeholder example the data that they use for the widget is an emoji and a date so that is the data for a snapshot so in the placeholder that is supposed to provide you know placeholder version of the widget they're creating a snapshot with the current date and a smiley emoji okay forget snapshot they're providing um some data with the current date and Emoji in get timeline they you have to provide an array right of snapshots going forward so what they're doing here is they're taking the current date and time and they are adding from zero to five hours or zero to four hours into the future and each each iteration they are just taking the date and adding that that offset right there and the Emoji Remains the Same and so what they're passing back as a timeline is essentially four or five snapshots where the time is an hour ahead two hours ahead three hours ahead four hours ahead with the same smiley emoji so that's the boilerplate code the last thing we haven't talked about is the widget extension entry view so this provides the view as you can see um there's there's body property and this contains the view code and this is a vstack with the time right here and the Emoji right here so hopefully that gives you an understanding about the boilerplate code for the widget now let's customize this so that actually shows what we want to show and gets the data the streak data that we want So speaking about the data how are we supposed to get this app storage data the streak counter how are you supposed to get a hold of this streak from here right because they're two different targets and if you try to do it your chances are I don't think I actually tried this but I don't believe that they are actually reading from the same store so what you have to do is use something called an app Group and it is think of it as a way for multiple targets to share resources including data so what we're going to do is create an app group we are going to put the widget demo which is the app and we're going to put the widget extension in the same app Group and that way they can be reading from the same app storage uh and they can be then both reading this streak value let's go into the project properties here and then we're going to go into the widget demo Target and then we are going to go into signing and capabilities and hit this little plus icon here and we're going to search for app groups which actually is just here so go ahead double click that and then it's going to add this section app groups here I already have one here because I created one for a previous demo but I'm going to create a new app Group just to show you how it would work click this plus icon and you're going to name it the same thing so let me just so here is com.code with chris.widgetdemo with no space in between our Dash or anything like that so this would be you can name it whatever you want but I think generally this is what people recommend for you to do so it would be your identifier with group in front of it okay so that's right there group.com widgetdemo and what we're going to do is go into the widget extension and we're going to do the same thing under signing in capabilities so go to app groups we're going to add it you're going to hit the plus icon here and then you're either going to see the the one that you just added if not we're going to type it in exactly the same as what we typed in last time widget demo right so they should both be sharing and using the same app Group okay so I'm going to press command B to build the project right build succeeded right you see it's not red anymore and both targets under app groups they are using the exact same one group.com widgetdemo with no spaces or dashes in between widget demo okay so now that they're in the same app Group they can share some resources so for example in this streak that I am storing in app storage I am going to explicitly specify for to store this data in the app Group and this is how we can do that we can say the store all right and specifically use user defaults with this app group name so group.com dot code with Chris Dot widgetdemo all right so it's going to store this streak in that um in that app storage container so let me run it now run the app version we're going to update the counter so that we know it's actually working okay so it's zero because it's reading from a new storage container and hit plus one and so it's gonna have stored it in here okay and then now on the widget side we just access the same storage and then we can get the value so in the widget extension let's add a new struck to help us manage the data and let's just call this data service now this is where you get tricky when you have multiple uh targets I'm actually going to include this in the widget extension right that's what you should do okay so it's going to be added here and then in here we got to import uh Swift UI struct data service and then we're essentially going to have the same thing right app storage so we're actually going to make this private variable streak so it can't be accessed directly and instead they're going to need to access it through these functions right here so we're going to say streak plus equal one uh we're gonna do another one where this one returns an INT and we're just going to return streak so let's just uh break this up a little bit so it gets a little easier to read okay so that's going to be our data service then what we're going to do inside our widget extension is read that data so inside the widget here the timeline provider why don't we actually the first thing I'll do is change the simple entry so we can keep the date but no emoji instead I'm gonna have this be an integer representing the streak that's going to break a whole ton of stuff in here so we'll let it break for now we're going to create a new data service here and then for this simple entry we're just going to put streak data dot progress and then in the get snapshot you can do the same thing here that's going to return to us the current streak and then inside get timeline I'm gonna do that this doesn't really matter because we're going to be updating the widget when the user interacts with it by tapping the button or when the user launches the app and logs an entry we're going to update the widget okay now we're going to update the UI here so let's run the preview and then let's change this so and then the text here let's actually go ahead and declare um the data service here and then in here we're going to say data dot progress let's see if we can see anything okay so there's an oh down here yeah these are these are for the preview so let's just do that for the preview now I'm going to run the app okay so that's the streak in terms of the widget let's run the widget so we're gonna choose widget extension and then run it and it should install the widget for us running widget extension on iPhone it may come if we give it a little bit of time if not we can add it manually just tap and hold the home screen click on this plus and we'll search for it right here there it is Street 2 add widget okay so that's essentially what our streak looks like if our preview would load you'd see that it looks like the same thing so when I tap on this it launches in here and then yeah you can see there it is when I add plus one and I go back to the widget it doesn't update because what we have to do inside the app inside here is when plus one is tapped on we can issue that command to update the the widget manually and it will be free because our app is in the foreground so let's do that right now actually before we do that we have to finish building the UI just realized that yeah we didn't we didn't finish building that UI so let's go ahead um like I said this was quick and dirty so what I did here is essentially copy and paste my UI so all I really wanted was the ring here that's what I copied this that's that containing the two circles and the streak text so I'm literally going to copy that and this is the view for the widget right right now it's a vstack all right so I'm actually going to just paste that in there I'm going to remove that text and this would be data.progress and we're going to obviously change the font size so it's not so big and yeah it kind of looks like that okay all right well perhaps we could add a little bit of padding all right and if you wanted to make that font a different size you could try that all right okay so now if we run it give it a couple of seconds and it should yeah it'll update okay so now it's actually looking like more like what it's supposed to look oh one thing we didn't change actually is the progress right it that doesn't actually change here so what we have to do is let percentage equals so essentially the current progress divided by whatever you want this to be out of let's say they need to do it 50 times then you're gonna write 50 and we've got to make sure if you want a decimal make sure these are both doubles okay so that is going to be for the app right this is content view this is the app we're going to do the same thing for the widget extension so here because that's an inch right so we are going to cast it as a double casting just means that you're going to treat it as a double and we're trying to convert it to a double and then here you're going to instead of that I'm going to put the actual percentage that they've got complete out of 50. so let's give that a try all right so yeah so now the bar actually moves it has a big oversight but when I'm I'm tapping this it's actually not telling the widget to update so yeah that has an update so let's issue a command to manually update the widget from within the app so first inside the widget extension take note of this kind this is sort of like the ID for your widget and then inside the the app when the button is tapped we're going to manually reload the widget so this is done through widget Center shared reload timelines of kind and then this is where you would put you know that widget of kind widget extension so now if we run this cannot find widget Center um yeah there we go should be it what did I run oh I ran uh I ran the widget extension instead of the widget app okay there we go here's the app so now when I increase the widget I mean increase the streak in the app and I go to the widget you see it's updated right away all right because when I'm tapping that button it's telling widget Center to reload this widget and then this widget is calling the timeline provider to get a new snapshot so now the last part before we end this video is I want to show you how I set the project up to add interactivity to the widget because I told you in the interactivity video now there is a button that accepts an app intent so when you tap on that button in the widget it's going to run the app intent but I never showed you how to build that app intent so it's actually pretty simple let's go ahead and do that inside the widget extension so we're going to add a new file a swift file and Yep this is part of the widget extension Target I'm going to call this log entry at intent so this is going to get fired when the button is going to be tapped on and this is based off of this documentation which I'll link to in the description below as well so providing your app's capabilities to system services this is how you create an app intent essentially you have to adhere to or conform to the app intent protocol we have these two title in description and then the other part which you need is here perform the action for your intent this this method right here okay so those are the parts we are going to take from the documentation app intense there we go and we need this part to perform part and so what I did before was I added the protocol stubs but I wasn't exactly sure about what it's what it provided me so I followed the documentation instead by taking that piece you know the actual thing that it was going to do and these two pieces which are metadata for this app intent that I I guess shows up when you you know when you want to use this app 10 with Siri shortcuts or anything like that uh log and entry to your streak or yeah something like that it's basically title and description but this is the most important part what do you want to actually do right so we want to log right so this increases the The Streak by one and then we are going to return the latest value that's it if it can't find data service in the scope you might want to double check that the the target membership for this app intent is the widget extension as well as the data service as is also same you know it's in the same Target and then sometimes that still won't do it clean build folder yeah just clean clean build folder and then just rebuild it command B should be good so now that we have the app and the widget and the app intent you're perfectly set up to add an interactive button to your widget and you can see how to do that in the video right over there now if you want to learn how to build apps and how to publish into the App Store consider joining CWC plus our training program designs specifically to help you do that links below alright thanks for watching and I'll see you in the next video